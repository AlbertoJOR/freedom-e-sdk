
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/debug/AsconHashSW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/debug/AsconHashSW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20010000

Program Header:
    LOAD off    0x00001000 vaddr 0x20010000 paddr 0x20010000 align 2**12
         filesz 0x000074cc memsz 0x000074cc flags rwx
    LOAD off    0x000092a0 vaddr 0x800012a0 paddr 0x800012a0 align 2**12
         filesz 0x00000000 memsz 0x00000cc4 flags rw-
    LOAD off    0x00009000 vaddr 0x80000000 paddr 0x200174d0 align 2**12
         filesz 0x000012a0 memsz 0x000012a0 flags rw-
    LOAD off    0x0000a2a0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x0000a2a0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000196  20010000  20010000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000064c8  20010200  20010200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000df8  200166c8  200166c8  000076c8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  200174c0  200174c0  000084c0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000012a0  80000000  200174d0  00009000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000000c4  800012a0  800012a0  000092a0  2**3  ALLOC
  6 .stack            00000400  80001364  80001364  000092a0  2**0  ALLOC
  7 .heap             00000800  80001764  80001764  000092a0  2**0  ALLOC
  8 .debug_info       00021649  00000000  00000000  0000a2a0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     0000316c  00000000  00000000  0002b8e9  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000a70  00000000  00000000  0002ea58  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000008c8  00000000  00000000  0002f4c8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000bc42  00000000  00000000  0002fd90  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        0000441d  00000000  00000000  0003b9d2  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0003fdef  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0003fe17  2**0  CONTENTS, READONLY
 16 .debug_frame      00002ac0  00000000  00000000  0003fe44  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20010000 l    d  .init	00000000 .init
20010200 l    d  .text	00000000 .text
200166c8 l    d  .rodata	00000000 .rodata
200174c0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800012a0 l    d  .bss	00000000 .bss
80001364 l    d  .stack	00000000 .stack
80001764 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-entry.o
20010060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20010136 l       .init	00000000 _skip_init
200168e0 l       .rodata	00000000 argv
200168e4 l       .rodata	00000000 envp
200168e8 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconHashSW.c
200102be l     F .text	00000404 ROUND
200106c2 l     F .text	0000008e P12
80000000 l     O .data	000007d0 plain_text.2803
800012ac l     O .bss	00000028 hash.2804
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20011242 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20011792 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001260 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
800012d4 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20012460 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
2001250a l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20012530 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20012554 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20012590 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
200126f0 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20012c28 l     F .text	00000024 __metal_driver_cpu_hartid
20012c4c l     F .text	0000002a __metal_driver_cpu_timebase
20012c76 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20014496 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
200144c0 l     F .text	0000002a __metal_driver_sifive_plic0_num_interrupts
200144ea l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20014512 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
2001453a l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20014a86 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
20014aa0 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
20014ab6 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
20014aca l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
20014b82 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
20014b9c l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
20014bb2 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
20014bc6 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20014c6e l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20014c88 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20014ca2 l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20014cb8 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20014ccc l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
20014cde l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
20014cee l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
20014d04 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20014d16 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
20016b94 l     O .rodata	00000880 pll_configs
20014d28 l     F .text	0000004e get_pll_config_freq
20014d76 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20014fba l     F .text	000000ac find_closest_config
20015066 l     F .text	00000132 configure_pll
200152fe l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
20015328 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio0.c
200153a0 l     F .text	00000026 __metal_driver_sifive_gpio0_base
200153c6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
200153f0 l     F .text	0000035e __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20015e04 l     F .text	00000040 __metal_driver_sifive_uart0_control_base
20015e44 l     F .text	00000042 __metal_driver_sifive_uart0_interrupt_parent
20015e86 l     F .text	0000003c __metal_driver_sifive_uart0_interrupt_line
20015ec2 l     F .text	00000048 __metal_driver_sifive_uart0_clock
20015f0a l     F .text	00000040 __metal_driver_sifive_uart0_pinmux
20015f4a l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_output_selector
20015f8a l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_source_selector
20016198 l     F .text	000000d8 pre_rate_change_callback_func
20016270 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-vector.o
20016580 l       .text	00000000 IRQ_0
20016584 l       .text	00000000 IRQ_1
20016588 l       .text	00000000 IRQ_2
2001658c l       .text	00000000 IRQ_3
20016590 l       .text	00000000 IRQ_4
20016594 l       .text	00000000 IRQ_5
20016598 l       .text	00000000 IRQ_6
2001659c l       .text	00000000 IRQ_7
200165a0 l       .text	00000000 IRQ_8
200165a4 l       .text	00000000 IRQ_9
200165a8 l       .text	00000000 IRQ_10
200165ac l       .text	00000000 IRQ_11
200165b0 l       .text	00000000 IRQ_12
200165b4 l       .text	00000000 IRQ_13
200165b8 l       .text	00000000 IRQ_14
200165bc l       .text	00000000 IRQ_15
200165c0 l       .text	00000000 IRQ_LC0
200165c4 l       .text	00000000 IRQ_LC1
200165c8 l       .text	00000000 IRQ_LC2
200165cc l       .text	00000000 IRQ_LC3
200165d0 l       .text	00000000 IRQ_LC4
200165d4 l       .text	00000000 IRQ_LC5
200165d8 l       .text	00000000 IRQ_LC6
200165dc l       .text	00000000 IRQ_LC7
200165e0 l       .text	00000000 IRQ_LC8
200165e4 l       .text	00000000 IRQ_LC9
200165e8 l       .text	00000000 IRQ_LC10
200165ec l       .text	00000000 IRQ_LC11
200165f0 l       .text	00000000 IRQ_LC12
200165f4 l       .text	00000000 IRQ_LC13
200165f8 l       .text	00000000 IRQ_LC14
200165fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20016600 l     F .text	00000070 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
800007d0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
200174cc l       .init_array	00000000 __fini_array_end
200174cc l       .init_array	00000000 __fini_array_start
200174cc l       .init_array	00000000 __init_array_end
200174c0 l       .init_array	00000000 __preinit_array_end
200174c0 l       .init_array	00000000 __init_array_start
200174c0 l       .init_array	00000000 __preinit_array_start
20010d2e g     F .text	0000002c putchar
2001749c g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20011bf6 g     F .text	00000028 _isatty_r
2001343e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20010ddc g     F .text	000000da _puts_r
20010750 g     F .text	00000076 printstate
20011c1e g     F .text	0000002c _lseek_r
20016406 g     F .text	00000026 metal_clock_get_rate_hz
200160f8 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
200128cc g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
200133ac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20010a0c g     F .text	0000001e rdcycle
20013bfe g     F .text	00000038 __metal_valid_interrupt_id
20010cea g     F .text	00000044 printf
20014024 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001a58 g       .data	00000000 __global_pointer$
200163b2 g     F .text	00000054 _metal_clock_append_to_callbacks
2001458a g     F .text	00000038 __metal_plic0_complete_interrupt
20013e7e g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20011b3c g     F .text	00000036 __sseek
200112f8 g     F .text	0000006a __sinit
20010ec4 g     F .text	000000c0 __swbuf_r
200112b4 g     F .text	00000044 __sfmoreglue
20011c66 g     F .text	00000002 __malloc_unlock
20016502 g     F .text	0000002a metal_cpu_get
800011f0 g     O .data	00000020 __metal_dt_serial_10013000
200159de g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
200168f4 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80001364 g       .bss	00000000 metal_segment_bss_target_end
200125c0 g     F .text	0000009a __metal_clint0_mtime_get
2001442a g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
2001578e g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
200121e4 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
2001600e g     F .text	00000034 __metal_driver_sifive_uart0_txready
20010070 g     F .init	0000000e __metal_synchronize_harts
800012a0 g       .bss	00000000 metal_segment_bss_target_start
2001265a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20011bcc g     F .text	0000002a _fstat_r
20015c2e g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80001360 g     O .bss	00000004 errno
20014e42 g     F .text	00000178 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
20016478 g     F .text	00000032 metal_clock_register_pre_rate_change_callback
20013718  w    F .text	00000092 metal_lc9_interrupt_vector_handler
80001210 g     O .data	00000020 __metal_dt_serial_10023000
20016b48 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20016b08 g     O .rodata	00000040 __metal_driver_vtable_cpu
200124dc g     F .text	0000002e metal_uart_set_baud_rate
200162a0 g     F .text	000000d2 __metal_driver_sifive_uart0_init
200140b8 g     F .text	00000072 __metal_driver_cpu_mcycle_get
20017414 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80001764 g       .heap	00000000 metal_segment_heap_target_start
200112aa g     F .text	0000000a _cleanup_r
80001270 g     O .data	00000004 __metal_dt_cpu_0
20013686  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20015198 g     F .text	00000166 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20010eb6 g     F .text	0000000e puts
20013960  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20012e0a g     F .text	00000018 __metal_default_exception_handler
20012064 g     F .text	00000026 _fstat
20012bf4 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20014626 g     F .text	00000062 __metal_plic0_set_priority
20014040 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20012ca0 g     F .text	0000002c __metal_driver_cpu_get
20016abc g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20012cfe g     F .text	00000018 __metal_interrupt_global_disable
200135f4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
200137aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20011a96 g     F .text	00000028 _sbrk_r
20014a3e g     F .text	00000048 __metal_driver_riscv_plic0_disable
20013cf2 g     F .text	0000004e __metal_exception_register
20012016 g     F .text	0000002c _read_r
2001424c g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20015870 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20012ef6 g     F .text	00000064 __metal_default_sw_handler
200164aa g     F .text	00000032 metal_clock_register_post_rate_change_callback
8000083c g     O .data	0000000c __metal_dt_clock_2
20015fca g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
2001208a g     F .text	00000020 _isatty
20015936 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001294 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000125c g     O .data	00000004 _global_impure_ptr
20012f5a  w    F .text	0000008e metal_timer_interrupt_vector_handler
20012254 g     F .text	0000006a __libc_init_array
200158b0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2001383c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20014c4c g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20013fcc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
200120fe g     F .text	0000006e _sbrk
2001582a g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20016372 g     F .text	00000040 _metal_clock_call_all_callbacks
20010174 g     F .init	00000002 _init
20012d60 g     F .text	0000001a __metal_interrupt_timer_disable
20015a28 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20014302 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20017460 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20015976 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
2001221c g     F .text	00000038 __libc_fini_array
80001248 g     O .data	0000000c __metal_dt_clock_4
20015db6 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
2001428c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20012db2 g     F .text	0000002c __metal_interrupt_local_enable
20012bc0 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
2001240e g     F .text	0000002c metal_tty_putc
20014748 g     F .text	00000018 __metal_plic0_default_handler
20010d5a g     F .text	00000082 _putc_r
80000830 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20016844 g     O .rodata	00000020 __sf_fake_stderr
20012d96 g     F .text	0000001c __metal_interrupt_external_disable
20015fea g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
2001409c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20013d40 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
200117bc g     F .text	00000042 __sfputs_r
200143e4 g     F .text	00000046 __metal_driver_cpu_exception_register
20012d16 g     F .text	00000018 __metal_interrupt_software_enable
20013288  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20011c4a g     F .text	0000001a memchr
20011608 g     F .text	000000ac _free_r
800012a8 g     O .bss	00000004 _global_atexit
20013b16 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20012346 g     F .text	000000c8 __call_exitprocs
80001764 g       .stack	00000000 _sp
2001007e g     F .init	00000000 _start
20014adc g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
200120aa g     F .text	0000002a _lseek
200143c4 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20014458 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20012d7a g     F .text	0000001c __metal_interrupt_external_enable
200122be g     F .text	00000088 __register_exitproc
20016042 g     F .text	00000040 __metal_driver_sifive_uart0_putc
200147f0 g     F .text	00000144 __metal_driver_riscv_plic0_init
200149f6 g     F .text	00000048 __metal_driver_riscv_plic0_enable
200157fe g     F .text	0000002c __metal_driver_sifive_gpio0_output
20010200 g     F .text	000000be printC
20013562  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20012ccc g     F .text	0000001a __metal_myhart_id
20015dd6 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20012e68  w    F .text	0000008e metal_software_interrupt_vector_handler
20013ff8 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20011ba4 g     F .text	00000028 _close_r
200160d8 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
200107c6 g     F .text	00000246 crypto_hash
200127ae g     F .text	000000da __metal_driver_riscv_clint0_register
80001268 g     O .data	00000008 __metal_dt_clint_2000000
20010f84 g     F .text	00000110 __swsetup_r
20011362 g     F .text	0000009e __sfp
2001642c g     F .text	0000004c metal_clock_set_rate_hz
20011abe g     F .text	00000030 __sread
2001574e g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20010176  w    F .init	00000000 secondary_main
20012e3a  w    F .text	0000002e metal_interrupt_vector_handler
20011c64 g     F .text	00000002 __malloc_lock
200111de g     F .text	00000064 _fflush_r
200145fa g     F .text	0000002c __metal_plic0_get_threshold
2001533a g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
20016864 g     O .rodata	00000020 __sf_fake_stdin
20013c36 g     F .text	000000bc __metal_local_interrupt_enable
20012a8a g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20011560 g     F .text	000000a8 memset
200134d0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20010a2a g     F .text	000002c0 main
800012a0 g       .data	00000000 metal_segment_data_target_end
8000127c g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
200142a0 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20014364 g     F .text	00000060 __metal_driver_cpu_get_msip
20016546 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20014476 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2001455c g     F .text	0000002e __metal_plic0_claim_interrupt
20011b72 g     F .text	00000006 __sclose
200138ce  w    F .text	00000092 metal_lc12_interrupt_vector_handler
200116b4 g     F .text	000000de _malloc_r
200128b0 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
80001278 g     O .data	00000004 __metal_dt_prci_10008000
2001412a g     F .text	00000046 __metal_driver_cpu_timebase_get
20010000 g       .init	00000000 _enter
2001652c g     F .text	0000001a metal_cpu_get_current_hartid
20014bd8 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20016580 g       .text	00000000 __metal_vector_table
200174d0 g       *ABS*	00000000 metal_segment_itim_source_start
80001264  w    O .data	00000004 __metal_cpu_table
80000860 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20010174 g     F .init	00000002 _fini
20010cea g     F .text	00000044 iprintf
20012ce6 g     F .text	00000018 __metal_interrupt_global_enable
200121da g     F .text	0000000a atexit
2001243a g     F .text	00000026 metal_tty_putc_raw
20011b78 g     F .text	0000002c _write_r
20012d46 g     F .text	0000001a __metal_interrupt_timer_enable
20016082 g     F .text	00000056 __metal_driver_sifive_uart0_getc
200129d2 g     F .text	000000b8 __metal_driver_riscv_clint0_disable
20011c68 g     F .text	0000010c _printf_common
80001258 g     O .data	00000004 _impure_ptr
200141d6 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20011094 g     F .text	0000014a __sflush_r
20014d9e g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
80000848 g     O .data	0000000c __metal_dt_clock_5
20015368 g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
20016670 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
20012920 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
200174d0 g       *ABS*	00000000 metal_segment_data_source_start
80001f64 g       .heap	00000000 metal_segment_heap_target_end
20013b66 g     F .text	00000098 __metal_controller_interrupt_vector
8000123c g     O .data	0000000c __metal_dt_clock_1
80000c18 g     O .data	000005d8 __metal_dt_interrupt_controller_c000000
2001146c g     F .text	00000058 __swhatbuf_r
200158f0 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20012fe8 g     F .text	00000066 __metal_default_timer_handler
2001216c g     F .text	0000006e _write
20014760 g     F .text	00000090 __metal_plic0_handler
2001331a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20013a84  w    F .text	00000092 metal_lc15_interrupt_vector_handler
200164dc g     F .text	00000026 metal_cpu_interrupt_controller
20011aee g     F .text	0000004e __swrite
200121f0 g     F .text	0000002c exit
200117fe g     F .text	00000298 _vfiprintf_r
20011400 g     F .text	0000006c _fwalk_reent
20016690 g     F .text	00000024 __metal_driver_fixed_clock_set_rate_hz
20016884 g     O .rodata	00000020 __sf_fake_stdout
80001274 g     O .data	00000004 __metal_dt_gpio_10012000
20012e22 g     F .text	00000018 __metal_default_interrupt_handler
200124ae g     F .text	0000002e metal_uart_putc
200120d4 g     F .text	0000002a _read
200157d4 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20013080 g     F .text	00000150 __metal_exception_handler
200131f6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
200166b4 g     F .text	00000014 _exit
20014170 g     F .text	00000066 __metal_driver_cpu_mtime_get
200114c4 g     F .text	0000009c __smakebuf_r
20012888 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20011d74 g     F .text	000002a2 _printf_i
800012a4 g     O .bss	00000004 __malloc_sbrk_start
200139f2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
80001284 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20012726 g     F .text	00000088 __metal_driver_riscv_clint0_init
800012a0 g     O .bss	00000004 __malloc_free_list
200117fe g     F .text	00000298 _vfprintf_r
20014262 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
200146bc g     F .text	0000008c __metal_plic0_enable
2001006e  w      .init	00000000 __register_frame_info
20014b60 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
20014276 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20012dde g     F .text	0000002c __metal_interrupt_local_disable
20012d2e g     F .text	00000018 __metal_interrupt_software_disable
20014688 g     F .text	00000034 __metal_plic0_get_priority
20012482 g     F .text	0000002c metal_uart_init
80001230 g     O .data	0000000c __metal_dt_clock_3
80000854 g     O .data	0000000c __metal_dt_clock_6
200145c2 g     F .text	00000038 __metal_plic0_set_threshold
20012042 g     F .text	00000022 _close
8000128c g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20014934 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20010000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20010000:	5fff2197          	auipc	gp,0x5fff2
20010004:	a5818193          	addi	gp,gp,-1448 # 80001a58 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20010008:	00000297          	auipc	t0,0x0
2001000c:	05828293          	addi	t0,t0,88 # 20010060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20010010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20010014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20010018:	00028463          	beqz	t0,20010020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2001001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20010020:	dfff0117          	auipc	sp,0xdfff0
20010024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20010028:	dfff0097          	auipc	ra,0xdfff0
2001002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20010030:	00008363          	beqz	ra,20010036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20010034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20010036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2001003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2001003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2001003e:	2081                	jal	2001007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20010040:	dfff0097          	auipc	ra,0xdfff0
20010044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20010048:	00008363          	beqz	ra,2001004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2001004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2001004e:	00000297          	auipc	t0,0x0
20010052:	00c28293          	addi	t0,t0,12 # 2001005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20010056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2001005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2001005e:	bff5                	j	2001005a <_enter+0x5a>

20010060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20010060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20010064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20010068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2001006c:	bfd5                	j	20010060 <early_trap_vector>

2001006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2001006e:	8082                	ret

20010070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20010070:	1141                	addi	sp,sp,-16
20010072:	c622                	sw	s0,12(sp)
20010074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20010076:	0001                	nop
20010078:	4432                	lw	s0,12(sp)
2001007a:	0141                	addi	sp,sp,16
2001007c:	8082                	ret

2001007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2001007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20010080:	5fff2197          	auipc	gp,0x5fff2
20010084:	9d818193          	addi	gp,gp,-1576 # 80001a58 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20010088:	d0c18113          	addi	sp,gp,-756 # 80001764 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2001008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2001008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20010092:	00a28563          	beq	t0,a0,2001009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20010096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20010098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2001009a:	bfe5                	j	20010092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2001009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
200100a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
200100a4:	08551963          	bne	a0,t0,20010136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
200100a8:	00007297          	auipc	t0,0x7
200100ac:	42828293          	addi	t0,t0,1064 # 200174d0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
200100b0:	5fff0317          	auipc	t1,0x5fff0
200100b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
200100b8:	84818393          	addi	t2,gp,-1976 # 800012a0 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
200100bc:	00628c63          	beq	t0,t1,200100d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
200100c0:	00735a63          	bge	t1,t2,200100d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
200100c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
200100ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
200100ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
200100d0:	fe734ae3          	blt	t1,t2,200100c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
200100d4:	00007297          	auipc	t0,0x7
200100d8:	3fc28293          	addi	t0,t0,1020 # 200174d0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
200100dc:	e7ff0317          	auipc	t1,0xe7ff0
200100e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
200100e4:	e7ff0397          	auipc	t2,0xe7ff0
200100e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
200100ec:	00628c63          	beq	t0,t1,20010104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
200100f0:	00735a63          	bge	t1,t2,20010104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
200100f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
200100fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
200100fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20010100:	fe734ae3          	blt	t1,t2,200100f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20010104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20010108:	5fff1317          	auipc	t1,0x5fff1
2001010c:	19830313          	addi	t1,t1,408 # 800012a0 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20010110:	90c18393          	addi	t2,gp,-1780 # 80001364 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20010114:	00735763          	bge	t1,t2,20010122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20010118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2001011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2001011e:	fe734de3          	blt	t1,t2,20010118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20010122:	c211                	beqz	a2,20010126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20010124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20010126:	00002517          	auipc	a0,0x2
2001012a:	0f650513          	addi	a0,a0,246 # 2001221c <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2001012e:	0ac020ef          	jal	ra,200121da <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20010132:	122020ef          	jal	ra,20012254 <__libc_init_array>

20010136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20010136:	3f2d                	jal	20010070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20010138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2001013c:	00010737          	lui	a4,0x10
20010140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20010144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20010146:	cb89                	beqz	a5,20010158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20010148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2001014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2001014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20010150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20010154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20010158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2001015a:	00006597          	auipc	a1,0x6
2001015e:	78658593          	addi	a1,a1,1926 # 200168e0 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20010162:	00006617          	auipc	a2,0x6
20010166:	78260613          	addi	a2,a2,1922 # 200168e4 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2001016a:	2031                	jal	20010176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2001016c:	084020ef          	jal	ra,200121f0 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20010170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20010172:	8082                	ret

20010174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20010174:	8082                	ret

20010176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20010176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20010178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2001017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2001017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20010182:	00628563          	beq	t0,t1,2001018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20010186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2001018a:	bff5                	j	20010186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2001018c:	09f000ef          	jal	ra,20010a2a <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20010190:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20010192:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20010194:	8082                	ret

Disassembly of section .text:

20010200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:46

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20010200:	7179                	addi	sp,sp,-48
20010202:	d606                	sw	ra,44(sp)
20010204:	d422                	sw	s0,40(sp)
20010206:	1800                	addi	s0,sp,48
20010208:	fca42e23          	sw	a0,-36(s0)
2001020c:	fcb42c23          	sw	a1,-40(s0)
20010210:	fcc42a23          	sw	a2,-44(s0)
20010214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:47
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20010218:	fd842783          	lw	a5,-40(s0)
2001021c:	8b9d                	andi	a5,a5,7
2001021e:	e791                	bnez	a5,2001022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:47 (discriminator 1)
20010220:	fd842783          	lw	a5,-40(s0)
20010224:	8389                	srli	a5,a5,0x2
20010226:	0786                	slli	a5,a5,0x1
20010228:	a031                	j	20010234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:47 (discriminator 2)
2001022a:	fd842783          	lw	a5,-40(s0)
2001022e:	8389                	srli	a5,a5,0x2
20010230:	0785                	addi	a5,a5,1
20010232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:47 (discriminator 4)
20010234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20010238:	fd442783          	lw	a5,-44(s0)
2001023c:	c789                	beqz	a5,20010246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:48 (discriminator 1)
2001023e:	fe842783          	lw	a5,-24(s0)
20010242:	0791                	addi	a5,a5,4
20010244:	a019                	j	2001024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:48 (discriminator 2)
20010246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:48 (discriminator 4)
2001024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:49 (discriminator 4)
    for (int i = 0; i < len; i++) {
2001024e:	fe042623          	sw	zero,-20(s0)
20010252:	a881                	j	200102a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:50
        if (i % 2 == 0) {
20010254:	fec42783          	lw	a5,-20(s0)
20010258:	8b85                	andi	a5,a5,1
2001025a:	e781                	bnez	a5,20010262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:51
            printf("\n");
2001025c:	4529                	li	a0,10
2001025e:	2d1000ef          	jal	ra,20010d2e <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:53
        }
        printf("%08x ", arr[i], i);
20010262:	fec42783          	lw	a5,-20(s0)
20010266:	078a                	slli	a5,a5,0x2
20010268:	fdc42703          	lw	a4,-36(s0)
2001026c:	97ba                	add	a5,a5,a4
2001026e:	439c                	lw	a5,0(a5)
20010270:	fec42603          	lw	a2,-20(s0)
20010274:	85be                	mv	a1,a5
20010276:	200167b7          	lui	a5,0x20016
2001027a:	6c878513          	addi	a0,a5,1736 # 200166c8 <_exit+0x14>
2001027e:	26d000ef          	jal	ra,20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:54
        if (del) {
20010282:	fd042783          	lw	a5,-48(s0)
20010286:	cb89                	beqz	a5,20010298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:55
            arr[i] = 0;
20010288:	fec42783          	lw	a5,-20(s0)
2001028c:	078a                	slli	a5,a5,0x2
2001028e:	fdc42703          	lw	a4,-36(s0)
20010292:	97ba                	add	a5,a5,a4
20010294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:49 (discriminator 2)
    for (int i = 0; i < len; i++) {
20010298:	fec42783          	lw	a5,-20(s0)
2001029c:	0785                	addi	a5,a5,1
2001029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:49 (discriminator 1)
200102a2:	fec42703          	lw	a4,-20(s0)
200102a6:	fe842783          	lw	a5,-24(s0)
200102aa:	faf745e3          	blt	a4,a5,20010254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:58
        }
    }
    printf("\n");
200102ae:	4529                	li	a0,10
200102b0:	27f000ef          	jal	ra,20010d2e <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../AsconHW/AEAD_HW.h:59
}
200102b4:	0001                	nop
200102b6:	50b2                	lw	ra,44(sp)
200102b8:	5422                	lw	s0,40(sp)
200102ba:	6145                	addi	sp,sp,48
200102bc:	8082                	ret

200102be <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
200102be:	711d                	addi	sp,sp,-96
200102c0:	cea2                	sw	s0,92(sp)
200102c2:	1080                	addi	s0,sp,96
200102c4:	faa42623          	sw	a0,-84(s0)
200102c8:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
200102cc:	fac42783          	lw	a5,-84(s0)
200102d0:	4fd8                	lw	a4,28(a5)
200102d2:	fa842783          	lw	a5,-88(s0)
200102d6:	8f3d                	xor	a4,a4,a5
200102d8:	fac42783          	lw	a5,-84(s0)
200102dc:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
200102de:	fac42783          	lw	a5,-84(s0)
200102e2:	4398                	lw	a4,0(a5)
200102e4:	fac42783          	lw	a5,-84(s0)
200102e8:	4b9c                	lw	a5,16(a5)
200102ea:	8f3d                	xor	a4,a4,a5
200102ec:	fac42783          	lw	a5,-84(s0)
200102f0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
200102f2:	fac42783          	lw	a5,-84(s0)
200102f6:	4bd8                	lw	a4,20(a5)
200102f8:	fac42783          	lw	a5,-84(s0)
200102fc:	53dc                	lw	a5,36(a5)
200102fe:	8f3d                	xor	a4,a4,a5
20010300:	fac42783          	lw	a5,-84(s0)
20010304:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
20010306:	fac42783          	lw	a5,-84(s0)
2001030a:	4b98                	lw	a4,16(a5)
2001030c:	fac42783          	lw	a5,-84(s0)
20010310:	47dc                	lw	a5,12(a5)
20010312:	8f3d                	xor	a4,a4,a5
20010314:	fac42783          	lw	a5,-84(s0)
20010318:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
2001031a:	fac42783          	lw	a5,-84(s0)
2001031e:	53d8                	lw	a4,36(a5)
20010320:	fac42783          	lw	a5,-84(s0)
20010324:	539c                	lw	a5,32(a5)
20010326:	8f3d                	xor	a4,a4,a5
20010328:	fac42783          	lw	a5,-84(s0)
2001032c:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
2001032e:	fac42783          	lw	a5,-84(s0)
20010332:	4798                	lw	a4,8(a5)
20010334:	fac42783          	lw	a5,-84(s0)
20010338:	43dc                	lw	a5,4(a5)
2001033a:	8f3d                	xor	a4,a4,a5
2001033c:	fac42783          	lw	a5,-84(s0)
20010340:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
20010342:	fac42783          	lw	a5,-84(s0)
20010346:	4fd8                	lw	a4,28(a5)
20010348:	fac42783          	lw	a5,-84(s0)
2001034c:	4f9c                	lw	a5,24(a5)
2001034e:	8f3d                	xor	a4,a4,a5
20010350:	fac42783          	lw	a5,-84(s0)
20010354:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
20010356:	fac42783          	lw	a5,-84(s0)
2001035a:	4398                	lw	a4,0(a5)
2001035c:	fac42783          	lw	a5,-84(s0)
20010360:	43dc                	lw	a5,4(a5)
20010362:	fff7c693          	not	a3,a5
20010366:	fac42783          	lw	a5,-84(s0)
2001036a:	479c                	lw	a5,8(a5)
2001036c:	8ff5                	and	a5,a5,a3
2001036e:	8fb9                	xor	a5,a5,a4
20010370:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
20010374:	fac42783          	lw	a5,-84(s0)
20010378:	4bd8                	lw	a4,20(a5)
2001037a:	fac42783          	lw	a5,-84(s0)
2001037e:	4f9c                	lw	a5,24(a5)
20010380:	fff7c693          	not	a3,a5
20010384:	fac42783          	lw	a5,-84(s0)
20010388:	4fdc                	lw	a5,28(a5)
2001038a:	8ff5                	and	a5,a5,a3
2001038c:	8fb9                	xor	a5,a5,a4
2001038e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
20010392:	fac42783          	lw	a5,-84(s0)
20010396:	43d8                	lw	a4,4(a5)
20010398:	fac42783          	lw	a5,-84(s0)
2001039c:	479c                	lw	a5,8(a5)
2001039e:	fff7c693          	not	a3,a5
200103a2:	fac42783          	lw	a5,-84(s0)
200103a6:	47dc                	lw	a5,12(a5)
200103a8:	8ff5                	and	a5,a5,a3
200103aa:	8fb9                	xor	a5,a5,a4
200103ac:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
200103b0:	fac42783          	lw	a5,-84(s0)
200103b4:	4f98                	lw	a4,24(a5)
200103b6:	fac42783          	lw	a5,-84(s0)
200103ba:	4fdc                	lw	a5,28(a5)
200103bc:	fff7c693          	not	a3,a5
200103c0:	fac42783          	lw	a5,-84(s0)
200103c4:	539c                	lw	a5,32(a5)
200103c6:	8ff5                	and	a5,a5,a3
200103c8:	8fb9                	xor	a5,a5,a4
200103ca:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
200103ce:	fac42783          	lw	a5,-84(s0)
200103d2:	4798                	lw	a4,8(a5)
200103d4:	fac42783          	lw	a5,-84(s0)
200103d8:	47dc                	lw	a5,12(a5)
200103da:	fff7c693          	not	a3,a5
200103de:	fac42783          	lw	a5,-84(s0)
200103e2:	4b9c                	lw	a5,16(a5)
200103e4:	8ff5                	and	a5,a5,a3
200103e6:	8fb9                	xor	a5,a5,a4
200103e8:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
200103ec:	fac42783          	lw	a5,-84(s0)
200103f0:	4fd8                	lw	a4,28(a5)
200103f2:	fac42783          	lw	a5,-84(s0)
200103f6:	539c                	lw	a5,32(a5)
200103f8:	fff7c693          	not	a3,a5
200103fc:	fac42783          	lw	a5,-84(s0)
20010400:	53dc                	lw	a5,36(a5)
20010402:	8ff5                	and	a5,a5,a3
20010404:	8fb9                	xor	a5,a5,a4
20010406:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
2001040a:	fac42783          	lw	a5,-84(s0)
2001040e:	47d8                	lw	a4,12(a5)
20010410:	fac42783          	lw	a5,-84(s0)
20010414:	4b9c                	lw	a5,16(a5)
20010416:	fff7c693          	not	a3,a5
2001041a:	fac42783          	lw	a5,-84(s0)
2001041e:	439c                	lw	a5,0(a5)
20010420:	8ff5                	and	a5,a5,a3
20010422:	8fb9                	xor	a5,a5,a4
20010424:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
20010428:	fac42783          	lw	a5,-84(s0)
2001042c:	5398                	lw	a4,32(a5)
2001042e:	fac42783          	lw	a5,-84(s0)
20010432:	53dc                	lw	a5,36(a5)
20010434:	fff7c693          	not	a3,a5
20010438:	fac42783          	lw	a5,-84(s0)
2001043c:	4bdc                	lw	a5,20(a5)
2001043e:	8ff5                	and	a5,a5,a3
20010440:	8fb9                	xor	a5,a5,a4
20010442:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
20010446:	fac42783          	lw	a5,-84(s0)
2001044a:	4b98                	lw	a4,16(a5)
2001044c:	fac42783          	lw	a5,-84(s0)
20010450:	439c                	lw	a5,0(a5)
20010452:	fff7c693          	not	a3,a5
20010456:	fac42783          	lw	a5,-84(s0)
2001045a:	43dc                	lw	a5,4(a5)
2001045c:	8ff5                	and	a5,a5,a3
2001045e:	8fb9                	xor	a5,a5,a4
20010460:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
20010464:	fac42783          	lw	a5,-84(s0)
20010468:	53d8                	lw	a4,36(a5)
2001046a:	fac42783          	lw	a5,-84(s0)
2001046e:	4bdc                	lw	a5,20(a5)
20010470:	fff7c693          	not	a3,a5
20010474:	fac42783          	lw	a5,-84(s0)
20010478:	4f9c                	lw	a5,24(a5)
2001047a:	8ff5                	and	a5,a5,a3
2001047c:	8fb9                	xor	a5,a5,a4
2001047e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
20010482:	fcc42703          	lw	a4,-52(s0)
20010486:	fc842783          	lw	a5,-56(s0)
2001048a:	8fb9                	xor	a5,a5,a4
2001048c:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
20010490:	fc842703          	lw	a4,-56(s0)
20010494:	fd842783          	lw	a5,-40(s0)
20010498:	8fb9                	xor	a5,a5,a4
2001049a:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
2001049e:	fd442703          	lw	a4,-44(s0)
200104a2:	fd042783          	lw	a5,-48(s0)
200104a6:	8fb9                	xor	a5,a5,a4
200104a8:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
200104ac:	fd042783          	lw	a5,-48(s0)
200104b0:	fff7c793          	not	a5,a5
200104b4:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
200104b8:	fe042703          	lw	a4,-32(s0)
200104bc:	fdc42783          	lw	a5,-36(s0)
200104c0:	8fb9                	xor	a5,a5,a4
200104c2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
200104c6:	fdc42703          	lw	a4,-36(s0)
200104ca:	fec42783          	lw	a5,-20(s0)
200104ce:	8fb9                	xor	a5,a5,a4
200104d0:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
200104d4:	fe842703          	lw	a4,-24(s0)
200104d8:	fe442783          	lw	a5,-28(s0)
200104dc:	8fb9                	xor	a5,a5,a4
200104de:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
200104e2:	fe442783          	lw	a5,-28(s0)
200104e6:	fff7c793          	not	a5,a5
200104ea:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
200104ee:	fc842703          	lw	a4,-56(s0)
200104f2:	fdc42783          	lw	a5,-36(s0)
200104f6:	00d79693          	slli	a3,a5,0xd
200104fa:	fc842783          	lw	a5,-56(s0)
200104fe:	83cd                	srli	a5,a5,0x13
20010500:	8fd5                	or	a5,a5,a3
20010502:	8f3d                	xor	a4,a4,a5
20010504:	fdc42783          	lw	a5,-36(s0)
20010508:	00479693          	slli	a3,a5,0x4
2001050c:	fc842783          	lw	a5,-56(s0)
20010510:	83f1                	srli	a5,a5,0x1c
20010512:	8fd5                	or	a5,a5,a3
20010514:	8f3d                	xor	a4,a4,a5
20010516:	fac42783          	lw	a5,-84(s0)
2001051a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
2001051c:	fdc42703          	lw	a4,-36(s0)
20010520:	fc842783          	lw	a5,-56(s0)
20010524:	00d79693          	slli	a3,a5,0xd
20010528:	fdc42783          	lw	a5,-36(s0)
2001052c:	83cd                	srli	a5,a5,0x13
2001052e:	8fd5                	or	a5,a5,a3
20010530:	8f3d                	xor	a4,a4,a5
20010532:	fc842783          	lw	a5,-56(s0)
20010536:	00479693          	slli	a3,a5,0x4
2001053a:	fdc42783          	lw	a5,-36(s0)
2001053e:	83f1                	srli	a5,a5,0x1c
20010540:	8fd5                	or	a5,a5,a3
20010542:	8f3d                	xor	a4,a4,a5
20010544:	fac42783          	lw	a5,-84(s0)
20010548:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
2001054a:	fcc42703          	lw	a4,-52(s0)
2001054e:	fcc42783          	lw	a5,-52(s0)
20010552:	00379693          	slli	a3,a5,0x3
20010556:	fe042783          	lw	a5,-32(s0)
2001055a:	83f5                	srli	a5,a5,0x1d
2001055c:	8fd5                	or	a5,a5,a3
2001055e:	8f3d                	xor	a4,a4,a5
20010560:	fcc42783          	lw	a5,-52(s0)
20010564:	01979693          	slli	a3,a5,0x19
20010568:	fe042783          	lw	a5,-32(s0)
2001056c:	839d                	srli	a5,a5,0x7
2001056e:	8fd5                	or	a5,a5,a3
20010570:	8f3d                	xor	a4,a4,a5
20010572:	fac42783          	lw	a5,-84(s0)
20010576:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
20010578:	fe042703          	lw	a4,-32(s0)
2001057c:	fe042783          	lw	a5,-32(s0)
20010580:	00379693          	slli	a3,a5,0x3
20010584:	fcc42783          	lw	a5,-52(s0)
20010588:	83f5                	srli	a5,a5,0x1d
2001058a:	8fd5                	or	a5,a5,a3
2001058c:	8f3d                	xor	a4,a4,a5
2001058e:	fe042783          	lw	a5,-32(s0)
20010592:	01979693          	slli	a3,a5,0x19
20010596:	fcc42783          	lw	a5,-52(s0)
2001059a:	839d                	srli	a5,a5,0x7
2001059c:	8fd5                	or	a5,a5,a3
2001059e:	8f3d                	xor	a4,a4,a5
200105a0:	fac42783          	lw	a5,-84(s0)
200105a4:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
200105a6:	fd042703          	lw	a4,-48(s0)
200105aa:	fe442783          	lw	a5,-28(s0)
200105ae:	01f79693          	slli	a3,a5,0x1f
200105b2:	fd042783          	lw	a5,-48(s0)
200105b6:	8385                	srli	a5,a5,0x1
200105b8:	8fd5                	or	a5,a5,a3
200105ba:	8f3d                	xor	a4,a4,a5
200105bc:	fe442783          	lw	a5,-28(s0)
200105c0:	01a79693          	slli	a3,a5,0x1a
200105c4:	fd042783          	lw	a5,-48(s0)
200105c8:	8399                	srli	a5,a5,0x6
200105ca:	8fd5                	or	a5,a5,a3
200105cc:	8f3d                	xor	a4,a4,a5
200105ce:	fac42783          	lw	a5,-84(s0)
200105d2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
200105d4:	fe442703          	lw	a4,-28(s0)
200105d8:	fd042783          	lw	a5,-48(s0)
200105dc:	01f79693          	slli	a3,a5,0x1f
200105e0:	fe442783          	lw	a5,-28(s0)
200105e4:	8385                	srli	a5,a5,0x1
200105e6:	8fd5                	or	a5,a5,a3
200105e8:	8f3d                	xor	a4,a4,a5
200105ea:	fd042783          	lw	a5,-48(s0)
200105ee:	01a79693          	slli	a3,a5,0x1a
200105f2:	fe442783          	lw	a5,-28(s0)
200105f6:	8399                	srli	a5,a5,0x6
200105f8:	8fd5                	or	a5,a5,a3
200105fa:	8f3d                	xor	a4,a4,a5
200105fc:	fac42783          	lw	a5,-84(s0)
20010600:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
20010602:	fd442703          	lw	a4,-44(s0)
20010606:	fe842783          	lw	a5,-24(s0)
2001060a:	01679693          	slli	a3,a5,0x16
2001060e:	fd442783          	lw	a5,-44(s0)
20010612:	83a9                	srli	a5,a5,0xa
20010614:	8fd5                	or	a5,a5,a3
20010616:	8f3d                	xor	a4,a4,a5
20010618:	fe842783          	lw	a5,-24(s0)
2001061c:	00f79693          	slli	a3,a5,0xf
20010620:	fd442783          	lw	a5,-44(s0)
20010624:	83c5                	srli	a5,a5,0x11
20010626:	8fd5                	or	a5,a5,a3
20010628:	8f3d                	xor	a4,a4,a5
2001062a:	fac42783          	lw	a5,-84(s0)
2001062e:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
20010630:	fe842703          	lw	a4,-24(s0)
20010634:	fd442783          	lw	a5,-44(s0)
20010638:	01679693          	slli	a3,a5,0x16
2001063c:	fe842783          	lw	a5,-24(s0)
20010640:	83a9                	srli	a5,a5,0xa
20010642:	8fd5                	or	a5,a5,a3
20010644:	8f3d                	xor	a4,a4,a5
20010646:	fd442783          	lw	a5,-44(s0)
2001064a:	00f79693          	slli	a3,a5,0xf
2001064e:	fe842783          	lw	a5,-24(s0)
20010652:	83c5                	srli	a5,a5,0x11
20010654:	8fd5                	or	a5,a5,a3
20010656:	8f3d                	xor	a4,a4,a5
20010658:	fac42783          	lw	a5,-84(s0)
2001065c:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
2001065e:	fd842703          	lw	a4,-40(s0)
20010662:	fec42783          	lw	a5,-20(s0)
20010666:	01979693          	slli	a3,a5,0x19
2001066a:	fd842783          	lw	a5,-40(s0)
2001066e:	839d                	srli	a5,a5,0x7
20010670:	8fd5                	or	a5,a5,a3
20010672:	8f3d                	xor	a4,a4,a5
20010674:	fd842783          	lw	a5,-40(s0)
20010678:	01779693          	slli	a3,a5,0x17
2001067c:	fec42783          	lw	a5,-20(s0)
20010680:	83a5                	srli	a5,a5,0x9
20010682:	8fd5                	or	a5,a5,a3
20010684:	8f3d                	xor	a4,a4,a5
20010686:	fac42783          	lw	a5,-84(s0)
2001068a:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
2001068c:	fec42703          	lw	a4,-20(s0)
20010690:	fd842783          	lw	a5,-40(s0)
20010694:	01979693          	slli	a3,a5,0x19
20010698:	fec42783          	lw	a5,-20(s0)
2001069c:	839d                	srli	a5,a5,0x7
2001069e:	8fd5                	or	a5,a5,a3
200106a0:	8f3d                	xor	a4,a4,a5
200106a2:	fec42783          	lw	a5,-20(s0)
200106a6:	01779693          	slli	a3,a5,0x17
200106aa:	fd842783          	lw	a5,-40(s0)
200106ae:	83a5                	srli	a5,a5,0x9
200106b0:	8fd5                	or	a5,a5,a3
200106b2:	8f3d                	xor	a4,a4,a5
200106b4:	fac42783          	lw	a5,-84(s0)
200106b8:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:107

    //printstate(" round output", s);
}
200106ba:	0001                	nop
200106bc:	4476                	lw	s0,92(sp)
200106be:	6125                	addi	sp,sp,96
200106c0:	8082                	ret

200106c2 <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
200106c2:	1101                	addi	sp,sp,-32
200106c4:	ce06                	sw	ra,28(sp)
200106c6:	cc22                	sw	s0,24(sp)
200106c8:	1000                	addi	s0,sp,32
200106ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:111
  ROUND(s, 0xf0);
200106ce:	0f000593          	li	a1,240
200106d2:	fec42503          	lw	a0,-20(s0)
200106d6:	36e5                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:112
  ROUND(s, 0xe1);
200106d8:	0e100593          	li	a1,225
200106dc:	fec42503          	lw	a0,-20(s0)
200106e0:	3ef9                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:113
  ROUND(s, 0xd2);
200106e2:	0d200593          	li	a1,210
200106e6:	fec42503          	lw	a0,-20(s0)
200106ea:	3ed1                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:114
  ROUND(s, 0xc3);
200106ec:	0c300593          	li	a1,195
200106f0:	fec42503          	lw	a0,-20(s0)
200106f4:	36e9                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:115
  ROUND(s, 0xb4);
200106f6:	0b400593          	li	a1,180
200106fa:	fec42503          	lw	a0,-20(s0)
200106fe:	36c1                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:116
  ROUND(s, 0xa5);
20010700:	0a500593          	li	a1,165
20010704:	fec42503          	lw	a0,-20(s0)
20010708:	3e5d                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:117
  ROUND(s, 0x96);
2001070a:	09600593          	li	a1,150
2001070e:	fec42503          	lw	a0,-20(s0)
20010712:	3675                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:118
  ROUND(s, 0x87);
20010714:	08700593          	li	a1,135
20010718:	fec42503          	lw	a0,-20(s0)
2001071c:	364d                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:119
  ROUND(s, 0x78);
2001071e:	07800593          	li	a1,120
20010722:	fec42503          	lw	a0,-20(s0)
20010726:	3e61                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:120
  ROUND(s, 0x69);
20010728:	06900593          	li	a1,105
2001072c:	fec42503          	lw	a0,-20(s0)
20010730:	3679                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:121
  ROUND(s, 0x5a);
20010732:	05a00593          	li	a1,90
20010736:	fec42503          	lw	a0,-20(s0)
2001073a:	3651                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:122
  ROUND(s, 0x4b);
2001073c:	04b00593          	li	a1,75
20010740:	fec42503          	lw	a0,-20(s0)
20010744:	3ead                	jal	200102be <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/round.h:123
}
20010746:	0001                	nop
20010748:	40f2                	lw	ra,28(sp)
2001074a:	4462                	lw	s0,24(sp)
2001074c:	6105                	addi	sp,sp,32
2001074e:	8082                	ret

20010750 <printstate>:
printstate():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:57
        mask.xl = 0x00000000;
    }
    return mask;
}*/

void printstate(const char *text, const ascon_state_t *s, int debug) {
20010750:	7179                	addi	sp,sp,-48
20010752:	d606                	sw	ra,44(sp)
20010754:	d422                	sw	s0,40(sp)
20010756:	1800                	addi	s0,sp,48
20010758:	fca42e23          	sw	a0,-36(s0)
2001075c:	fcb42c23          	sw	a1,-40(s0)
20010760:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:58
    if(debug){
20010764:	fd442783          	lw	a5,-44(s0)
20010768:	cbb1                	beqz	a5,200107bc <printstate+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:59
    printf("%s\n", text);
2001076a:	fdc42503          	lw	a0,-36(s0)
2001076e:	748000ef          	jal	ra,20010eb6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:60
    for (int i = 0; i < 5; i++) {
20010772:	fe042623          	sw	zero,-20(s0)
20010776:	a825                	j	200107ae <printstate+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:61 (discriminator 3)
        printf("%08X %08X \n", s->xh[i], s->xl[i]);
20010778:	fd842703          	lw	a4,-40(s0)
2001077c:	fec42783          	lw	a5,-20(s0)
20010780:	078a                	slli	a5,a5,0x2
20010782:	97ba                	add	a5,a5,a4
20010784:	4394                	lw	a3,0(a5)
20010786:	fd842703          	lw	a4,-40(s0)
2001078a:	fec42783          	lw	a5,-20(s0)
2001078e:	0791                	addi	a5,a5,4
20010790:	078a                	slli	a5,a5,0x2
20010792:	97ba                	add	a5,a5,a4
20010794:	43dc                	lw	a5,4(a5)
20010796:	863e                	mv	a2,a5
20010798:	85b6                	mv	a1,a3
2001079a:	200167b7          	lui	a5,0x20016
2001079e:	6e878513          	addi	a0,a5,1768 # 200166e8 <_exit+0x34>
200107a2:	23a1                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:60 (discriminator 3)
    for (int i = 0; i < 5; i++) {
200107a4:	fec42783          	lw	a5,-20(s0)
200107a8:	0785                	addi	a5,a5,1
200107aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:60 (discriminator 1)
200107ae:	fec42703          	lw	a4,-20(s0)
200107b2:	4791                	li	a5,4
200107b4:	fce7d2e3          	bge	a5,a4,20010778 <printstate+0x28>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:63
    }
    printf("\n");}
200107b8:	4529                	li	a0,10
200107ba:	2b95                	jal	20010d2e <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/util.h:64
}
200107bc:	0001                	nop
200107be:	50b2                	lw	ra,44(sp)
200107c0:	5422                	lw	s0,40(sp)
200107c2:	6145                	addi	sp,sp,48
200107c4:	8082                	ret

200107c6 <crypto_hash>:
crypto_hash():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:250
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
}

int crypto_hash(u32 *m, u32 mlen, u32 *h, int debug) {
200107c6:	715d                	addi	sp,sp,-80
200107c8:	c686                	sw	ra,76(sp)
200107ca:	c4a2                	sw	s0,72(sp)
200107cc:	0880                	addi	s0,sp,80
200107ce:	faa42e23          	sw	a0,-68(s0)
200107d2:	fab42c23          	sw	a1,-72(s0)
200107d6:	fac42a23          	sw	a2,-76(s0)
200107da:	fad42823          	sw	a3,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:254

    /* initialize */
    ascon_state_t s;
    s.xh[0] = 0x00400c00;
200107de:	004017b7          	lui	a5,0x401
200107e2:	c0078793          	addi	a5,a5,-1024 # 400c00 <__heap_size+0x400400>
200107e6:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:255
    s.xl[0] = 0x00000100;
200107ea:	10000793          	li	a5,256
200107ee:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:256
    s.xh[1] = 0;
200107f2:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:257
    s.xl[1] = 0;
200107f6:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:258
    s.xh[2] = 0;
200107fa:	fc042623          	sw	zero,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:259
    s.xl[2] = 0;
200107fe:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:260
    s.xh[3] = 0;
20010802:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:261
    s.xl[3] = 0;
20010806:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:262
    s.xh[4] = 0;
2001080a:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:263
    s.xl[4] = 0;
2001080e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:264
    printstate("After init", &s, debug);
20010812:	fc440793          	addi	a5,s0,-60
20010816:	fb042603          	lw	a2,-80(s0)
2001081a:	85be                	mv	a1,a5
2001081c:	200167b7          	lui	a5,0x20016
20010820:	6f478513          	addi	a0,a5,1780 # 200166f4 <_exit+0x40>
20010824:	3735                	jal	20010750 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:265
    P12(&s);
20010826:	fc440793          	addi	a5,s0,-60
2001082a:	853e                	mv	a0,a5
2001082c:	3d59                	jal	200106c2 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:268


    if (mlen) {
2001082e:	fb842783          	lw	a5,-72(s0)
20010832:	16078463          	beqz	a5,2001099a <crypto_hash+0x1d4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:269
        while (mlen >= 8) {
20010836:	a8b1                	j	20010892 <crypto_hash+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:270
            s.xh[0] ^= *m;
20010838:	fc442703          	lw	a4,-60(s0)
2001083c:	fbc42783          	lw	a5,-68(s0)
20010840:	439c                	lw	a5,0(a5)
20010842:	8fb9                	xor	a5,a5,a4
20010844:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:271
            m++;
20010848:	fbc42783          	lw	a5,-68(s0)
2001084c:	0791                	addi	a5,a5,4
2001084e:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:272
            s.xl[0] ^= *m;
20010852:	fd842703          	lw	a4,-40(s0)
20010856:	fbc42783          	lw	a5,-68(s0)
2001085a:	439c                	lw	a5,0(a5)
2001085c:	8fb9                	xor	a5,a5,a4
2001085e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:273
            m++;
20010862:	fbc42783          	lw	a5,-68(s0)
20010866:	0791                	addi	a5,a5,4
20010868:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:274
            P12(&s);
2001086c:	fc440793          	addi	a5,s0,-60
20010870:	853e                	mv	a0,a5
20010872:	3d81                	jal	200106c2 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:275
            printstate("Absorb AD", &s, debug);
20010874:	fc440793          	addi	a5,s0,-60
20010878:	fb042603          	lw	a2,-80(s0)
2001087c:	85be                	mv	a1,a5
2001087e:	200167b7          	lui	a5,0x20016
20010882:	70c78513          	addi	a0,a5,1804 # 2001670c <_exit+0x58>
20010886:	35e9                	jal	20010750 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:276
            mlen -= 8;
20010888:	fb842783          	lw	a5,-72(s0)
2001088c:	17e1                	addi	a5,a5,-8
2001088e:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:269
        while (mlen >= 8) {
20010892:	fb842703          	lw	a4,-72(s0)
20010896:	479d                	li	a5,7
20010898:	fae7e0e3          	bltu	a5,a4,20010838 <crypto_hash+0x72>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:278
        }
        s.xh[0] ^= TRUNH(mlen, *m);
2001089c:	fc442703          	lw	a4,-60(s0)
200108a0:	fb842683          	lw	a3,-72(s0)
200108a4:	4791                	li	a5,4
200108a6:	00d7f663          	bgeu	a5,a3,200108b2 <crypto_hash+0xec>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:278 (discriminator 1)
200108aa:	fbc42783          	lw	a5,-68(s0)
200108ae:	439c                	lw	a5,0(a5)
200108b0:	a025                	j	200108d8 <crypto_hash+0x112>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:278 (discriminator 2)
200108b2:	fb842783          	lw	a5,-72(s0)
200108b6:	c385                	beqz	a5,200108d6 <crypto_hash+0x110>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:278 (discriminator 4)
200108b8:	fbc42783          	lw	a5,-68(s0)
200108bc:	4394                	lw	a3,0(a5)
200108be:	fb842603          	lw	a2,-72(s0)
200108c2:	4781                	li	a5,0
200108c4:	8f91                	sub	a5,a5,a2
200108c6:	078e                	slli	a5,a5,0x3
200108c8:	02078793          	addi	a5,a5,32
200108cc:	567d                	li	a2,-1
200108ce:	00f617b3          	sll	a5,a2,a5
200108d2:	8ff5                	and	a5,a5,a3
200108d4:	a011                	j	200108d8 <crypto_hash+0x112>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:278 (discriminator 5)
200108d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:278 (discriminator 8)
200108d8:	8fb9                	xor	a5,a5,a4
200108da:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:279 (discriminator 8)
        m++;
200108de:	fbc42783          	lw	a5,-68(s0)
200108e2:	0791                	addi	a5,a5,4
200108e4:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:280 (discriminator 8)
        s.xl[0] ^= TRUNL(mlen, *m);
200108e8:	fd842703          	lw	a4,-40(s0)
200108ec:	fb842683          	lw	a3,-72(s0)
200108f0:	4791                	li	a5,4
200108f2:	02d7f163          	bgeu	a5,a3,20010914 <crypto_hash+0x14e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:280 (discriminator 1)
200108f6:	fbc42783          	lw	a5,-68(s0)
200108fa:	4394                	lw	a3,0(a5)
200108fc:	fb842603          	lw	a2,-72(s0)
20010900:	4781                	li	a5,0
20010902:	8f91                	sub	a5,a5,a2
20010904:	078e                	slli	a5,a5,0x3
20010906:	04078793          	addi	a5,a5,64
2001090a:	567d                	li	a2,-1
2001090c:	00f617b3          	sll	a5,a2,a5
20010910:	8ff5                	and	a5,a5,a3
20010912:	a011                	j	20010916 <crypto_hash+0x150>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:280 (discriminator 2)
20010914:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:280 (discriminator 4)
20010916:	8fb9                	xor	a5,a5,a4
20010918:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:282 (discriminator 4)

        s.xh[0] ^= PADH(mlen);
2001091c:	fc442703          	lw	a4,-60(s0)
20010920:	fb842683          	lw	a3,-72(s0)
20010924:	478d                	li	a5,3
20010926:	00d7ea63          	bltu	a5,a3,2001093a <crypto_hash+0x174>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:282 (discriminator 1)
2001092a:	fb842783          	lw	a5,-72(s0)
2001092e:	078e                	slli	a5,a5,0x3
20010930:	800006b7          	lui	a3,0x80000
20010934:	00f6d7b3          	srl	a5,a3,a5
20010938:	a011                	j	2001093c <crypto_hash+0x176>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:282 (discriminator 2)
2001093a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:282 (discriminator 4)
2001093c:	8fb9                	xor	a5,a5,a4
2001093e:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:283 (discriminator 4)
        s.xl[0] ^= PADL(mlen);
20010942:	fd842703          	lw	a4,-40(s0)
20010946:	fb842683          	lw	a3,-72(s0)
2001094a:	478d                	li	a5,3
2001094c:	02d7f563          	bgeu	a5,a3,20010976 <crypto_hash+0x1b0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:283 (discriminator 1)
20010950:	fb842683          	lw	a3,-72(s0)
20010954:	47a1                	li	a5,8
20010956:	00f68e63          	beq	a3,a5,20010972 <crypto_hash+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:283 (discriminator 3)
2001095a:	fb842683          	lw	a3,-72(s0)
2001095e:	200007b7          	lui	a5,0x20000
20010962:	17f1                	addi	a5,a5,-4
20010964:	97b6                	add	a5,a5,a3
20010966:	078e                	slli	a5,a5,0x3
20010968:	800006b7          	lui	a3,0x80000
2001096c:	00f6d7b3          	srl	a5,a3,a5
20010970:	a021                	j	20010978 <crypto_hash+0x1b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:283 (discriminator 4)
20010972:	4781                	li	a5,0
20010974:	a011                	j	20010978 <crypto_hash+0x1b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:283 (discriminator 2)
20010976:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:283 (discriminator 8)
20010978:	8fb9                	xor	a5,a5,a4
2001097a:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:284 (discriminator 8)
        printstate("Padded AD", &s, debug);
2001097e:	fc440793          	addi	a5,s0,-60
20010982:	fb042603          	lw	a2,-80(s0)
20010986:	85be                	mv	a1,a5
20010988:	200167b7          	lui	a5,0x20016
2001098c:	71878513          	addi	a0,a5,1816 # 20016718 <_exit+0x64>
20010990:	33c1                	jal	20010750 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:285 (discriminator 8)
        P12(&s);
20010992:	fc440793          	addi	a5,s0,-60
20010996:	853e                	mv	a0,a5
20010998:	332d                	jal	200106c2 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:287
    }
    for(int i = 0 ; i < 4 ; i++){
2001099a:	fe042623          	sw	zero,-20(s0)
2001099e:	a8a1                	j	200109f6 <crypto_hash+0x230>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:288
        h[i*2] = s.xh[0] ;
200109a0:	fec42783          	lw	a5,-20(s0)
200109a4:	078e                	slli	a5,a5,0x3
200109a6:	fb442703          	lw	a4,-76(s0)
200109aa:	97ba                	add	a5,a5,a4
200109ac:	fc442703          	lw	a4,-60(s0)
200109b0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:289
        h[i*2+1] = s.xl[0] ;
200109b2:	fec42783          	lw	a5,-20(s0)
200109b6:	078e                	slli	a5,a5,0x3
200109b8:	0791                	addi	a5,a5,4
200109ba:	fb442703          	lw	a4,-76(s0)
200109be:	97ba                	add	a5,a5,a4
200109c0:	fd842703          	lw	a4,-40(s0)
200109c4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:290
        if(i < 3){
200109c6:	fec42703          	lw	a4,-20(s0)
200109ca:	4789                	li	a5,2
200109cc:	00e7c663          	blt	a5,a4,200109d8 <crypto_hash+0x212>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:291
            P12(&s);
200109d0:	fc440793          	addi	a5,s0,-60
200109d4:	853e                	mv	a0,a5
200109d6:	31f5                	jal	200106c2 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:293 (discriminator 2)
        }
        printstate("Hash Round",&s,debug);
200109d8:	fc440793          	addi	a5,s0,-60
200109dc:	fb042603          	lw	a2,-80(s0)
200109e0:	85be                	mv	a1,a5
200109e2:	200167b7          	lui	a5,0x20016
200109e6:	77078513          	addi	a0,a5,1904 # 20016770 <_exit+0xbc>
200109ea:	339d                	jal	20010750 <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:287 (discriminator 2)
    for(int i = 0 ; i < 4 ; i++){
200109ec:	fec42783          	lw	a5,-20(s0)
200109f0:	0785                	addi	a5,a5,1
200109f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:287 (discriminator 1)
200109f6:	fec42703          	lw	a4,-20(s0)
200109fa:	478d                	li	a5,3
200109fc:	fae7d2e3          	bge	a5,a4,200109a0 <crypto_hash+0x1da>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:295
    }
    return 0;
20010a00:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../Asconref/aead.h:296
}
20010a02:	853e                	mv	a0,a5
20010a04:	40b6                	lw	ra,76(sp)
20010a06:	4426                	lw	s0,72(sp)
20010a08:	6161                	addi	sp,sp,80
20010a0a:	8082                	ret

20010a0c <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../RoCCcommon/csr.h:50
#define rdtime() read_csr(time)
// #define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)


unsigned rdcycle() {
20010a0c:	1101                	addi	sp,sp,-32
20010a0e:	ce22                	sw	s0,28(sp)
20010a10:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../RoCCcommon/csr.h:51
  unsigned mcycle = 0;
20010a12:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../RoCCcommon/csr.h:53

  asm volatile ("csrr %0,mcycle"   : "=r" (mcycle)  );
20010a16:	b00027f3          	csrr	a5,mcycle
20010a1a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../RoCCcommon/csr.h:55

  return mcycle;
20010a1e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/../RoCCcommon/csr.h:56
}
20010a22:	853e                	mv	a0,a5
20010a24:	4472                	lw	s0,28(sp)
20010a26:	6105                	addi	sp,sp,32
20010a28:	8082                	ret

20010a2a <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
20010a2a:	7179                	addi	sp,sp,-48
20010a2c:	d606                	sw	ra,44(sp)
20010a2e:	d422                	sw	s0,40(sp)
20010a30:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:7
    u32 plain_len =  1000;
20010a32:	3e800793          	li	a5,1000
20010a36:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:9

    u32 plain_len_int = plain_len / 8;
20010a3a:	fec42783          	lw	a5,-20(s0)
20010a3e:	838d                	srli	a5,a5,0x3
20010a40:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:10
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int*2 : plain_len_int*2 +2;
20010a44:	fec42783          	lw	a5,-20(s0)
20010a48:	8b9d                	andi	a5,a5,7
20010a4a:	e789                	bnez	a5,20010a54 <main+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:10 (discriminator 1)
20010a4c:	fe842783          	lw	a5,-24(s0)
20010a50:	0786                	slli	a5,a5,0x1
20010a52:	a029                	j	20010a5c <main+0x32>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:10 (discriminator 2)
20010a54:	fe842783          	lw	a5,-24(s0)
20010a58:	0785                	addi	a5,a5,1
20010a5a:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:10 (discriminator 4)
20010a5c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:18 (discriminator 4)
                                       0x41424344, 0x55565758, 0x696a6b6c, 0x7d7e7f70};
    static u32 hash[10] = {0};



    printf("Init Ascon Dec \n");
20010a60:	200167b7          	lui	a5,0x20016
20010a64:	77c78513          	addi	a0,a5,1916 # 2001677c <_exit+0xc8>
20010a68:	21b9                	jal	20010eb6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:19 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20010a6a:	800007b7          	lui	a5,0x80000
20010a6e:	00078593          	mv	a1,a5
20010a72:	200167b7          	lui	a5,0x20016
20010a76:	78c78513          	addi	a0,a5,1932 # 2001678c <_exit+0xd8>
20010a7a:	2c85                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:20 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20010a7c:	800017b7          	lui	a5,0x80001
20010a80:	2ac78593          	addi	a1,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010a84:	200167b7          	lui	a5,0x20016
20010a88:	79c78513          	addi	a0,a5,1948 # 2001679c <_exit+0xe8>
20010a8c:	2cb9                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:21 (discriminator 4)
    printf("Bytes %d\n", plain_len);
20010a8e:	fec42583          	lw	a1,-20(s0)
20010a92:	200167b7          	lui	a5,0x20016
20010a96:	7b078513          	addi	a0,a5,1968 # 200167b0 <_exit+0xfc>
20010a9a:	2c81                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:23 (discriminator 4)
    unsigned start, end;
    unsigned rd = 0 ;
20010a9c:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:24 (discriminator 4)
   start = rdcycle();
20010aa0:	37b5                	jal	20010a0c <rdcycle>
20010aa2:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:25 (discriminator 4)
   rd = rd + 1;
20010aa6:	fe442783          	lw	a5,-28(s0)
20010aaa:	0785                	addi	a5,a5,1
20010aac:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:26 (discriminator 4)
   rd = rd +2;
20010ab0:	fe442783          	lw	a5,-28(s0)
20010ab4:	0789                	addi	a5,a5,2
20010ab6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:27 (discriminator 4)
   rd = rd + 5;
20010aba:	fe442783          	lw	a5,-28(s0)
20010abe:	0795                	addi	a5,a5,5
20010ac0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:28 (discriminator 4)
   rd = rd +7;
20010ac4:	fe442783          	lw	a5,-28(s0)
20010ac8:	079d                	addi	a5,a5,7
20010aca:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:29 (discriminator 4)
    end = rdcycle();
20010ace:	3f3d                	jal	20010a0c <rdcycle>
20010ad0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:30 (discriminator 4)
    printf("simple op  SW = %d cycles\n",end-start);
20010ad4:	fdc42703          	lw	a4,-36(s0)
20010ad8:	fe042783          	lw	a5,-32(s0)
20010adc:	40f707b3          	sub	a5,a4,a5
20010ae0:	85be                	mv	a1,a5
20010ae2:	200167b7          	lui	a5,0x20016
20010ae6:	7bc78513          	addi	a0,a5,1980 # 200167bc <_exit+0x108>
20010aea:	2401                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:32 (discriminator 4)

    start = rdcycle();
20010aec:	3705                	jal	20010a0c <rdcycle>
20010aee:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:33 (discriminator 4)
    hash [10] = rd;
20010af2:	800017b7          	lui	a5,0x80001
20010af6:	2ac78793          	addi	a5,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010afa:	fe442703          	lw	a4,-28(s0)
20010afe:	d798                	sw	a4,40(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:34 (discriminator 4)
    end = rdcycle();
20010b00:	3731                	jal	20010a0c <rdcycle>
20010b02:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:35 (discriminator 4)
    printf("simple write  SW = %d cycles\n",end-start);
20010b06:	fdc42703          	lw	a4,-36(s0)
20010b0a:	fe042783          	lw	a5,-32(s0)
20010b0e:	40f707b3          	sub	a5,a4,a5
20010b12:	85be                	mv	a1,a5
20010b14:	200167b7          	lui	a5,0x20016
20010b18:	7d878513          	addi	a0,a5,2008 # 200167d8 <_exit+0x124>
20010b1c:	22f9                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:37 (discriminator 4)

    start = rdcycle();
20010b1e:	35fd                	jal	20010a0c <rdcycle>
20010b20:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:38 (discriminator 4)
    rd = plain_text[10];
20010b24:	800007b7          	lui	a5,0x80000
20010b28:	00078793          	mv	a5,a5
20010b2c:	579c                	lw	a5,40(a5)
20010b2e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:39 (discriminator 4)
    end = rdcycle();
20010b32:	3de9                	jal	20010a0c <rdcycle>
20010b34:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:40 (discriminator 4)
    printf("simple load   SW = %d cycles\n",end-start);
20010b38:	fdc42703          	lw	a4,-36(s0)
20010b3c:	fe042783          	lw	a5,-32(s0)
20010b40:	40f707b3          	sub	a5,a4,a5
20010b44:	85be                	mv	a1,a5
20010b46:	200167b7          	lui	a5,0x20016
20010b4a:	7f878513          	addi	a0,a5,2040 # 200167f8 <_exit+0x144>
20010b4e:	2a71                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:44 (discriminator 4)



    printf("Hash SW: \n");
20010b50:	200177b7          	lui	a5,0x20017
20010b54:	81878513          	addi	a0,a5,-2024 # 20016818 <_exit+0x164>
20010b58:	2eb9                	jal	20010eb6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:45 (discriminator 4)
    start = rdcycle();
20010b5a:	3d4d                	jal	20010a0c <rdcycle>
20010b5c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:46 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20010b60:	4681                	li	a3,0
20010b62:	800017b7          	lui	a5,0x80001
20010b66:	2ac78613          	addi	a2,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010b6a:	fec42583          	lw	a1,-20(s0)
20010b6e:	800007b7          	lui	a5,0x80000
20010b72:	00078513          	mv	a0,a5
20010b76:	3981                	jal	200107c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:47 (discriminator 4)
    end = rdcycle();
20010b78:	3d51                	jal	20010a0c <rdcycle>
20010b7a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:48 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20010b7e:	fdc42703          	lw	a4,-36(s0)
20010b82:	fe042783          	lw	a5,-32(s0)
20010b86:	40f707b3          	sub	a5,a4,a5
20010b8a:	85be                	mv	a1,a5
20010b8c:	200177b7          	lui	a5,0x20017
20010b90:	82478513          	addi	a0,a5,-2012 # 20016824 <_exit+0x170>
20010b94:	2a99                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:49 (discriminator 4)
    printC(hash, 8, 1, 1);
20010b96:	4685                	li	a3,1
20010b98:	4605                	li	a2,1
20010b9a:	45a1                	li	a1,8
20010b9c:	800017b7          	lui	a5,0x80001
20010ba0:	2ac78513          	addi	a0,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010ba4:	e5cff0ef          	jal	ra,20010200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:50 (discriminator 4)
    printf("\nX\n");
20010ba8:	200177b7          	lui	a5,0x20017
20010bac:	84078513          	addi	a0,a5,-1984 # 20016840 <_exit+0x18c>
20010bb0:	2619                	jal	20010eb6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:52 (discriminator 4)

    start = rdcycle();
20010bb2:	3da9                	jal	20010a0c <rdcycle>
20010bb4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:53 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20010bb8:	4681                	li	a3,0
20010bba:	800017b7          	lui	a5,0x80001
20010bbe:	2ac78613          	addi	a2,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010bc2:	fec42583          	lw	a1,-20(s0)
20010bc6:	800007b7          	lui	a5,0x80000
20010bca:	00078513          	mv	a0,a5
20010bce:	3ee5                	jal	200107c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:54 (discriminator 4)
    end = rdcycle();
20010bd0:	3d35                	jal	20010a0c <rdcycle>
20010bd2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:55 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20010bd6:	fdc42703          	lw	a4,-36(s0)
20010bda:	fe042783          	lw	a5,-32(s0)
20010bde:	40f707b3          	sub	a5,a4,a5
20010be2:	85be                	mv	a1,a5
20010be4:	200177b7          	lui	a5,0x20017
20010be8:	82478513          	addi	a0,a5,-2012 # 20016824 <_exit+0x170>
20010bec:	28fd                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:56 (discriminator 4)
    start = rdcycle();
20010bee:	3d39                	jal	20010a0c <rdcycle>
20010bf0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:57 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20010bf4:	4681                	li	a3,0
20010bf6:	800017b7          	lui	a5,0x80001
20010bfa:	2ac78613          	addi	a2,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010bfe:	fec42583          	lw	a1,-20(s0)
20010c02:	800007b7          	lui	a5,0x80000
20010c06:	00078513          	mv	a0,a5
20010c0a:	3e75                	jal	200107c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:58 (discriminator 4)
    end = rdcycle();
20010c0c:	3501                	jal	20010a0c <rdcycle>
20010c0e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:59 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20010c12:	fdc42703          	lw	a4,-36(s0)
20010c16:	fe042783          	lw	a5,-32(s0)
20010c1a:	40f707b3          	sub	a5,a4,a5
20010c1e:	85be                	mv	a1,a5
20010c20:	200177b7          	lui	a5,0x20017
20010c24:	82478513          	addi	a0,a5,-2012 # 20016824 <_exit+0x170>
20010c28:	20c9                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:61 (discriminator 4)

    start = rdcycle();
20010c2a:	33cd                	jal	20010a0c <rdcycle>
20010c2c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:62 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20010c30:	4681                	li	a3,0
20010c32:	800017b7          	lui	a5,0x80001
20010c36:	2ac78613          	addi	a2,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010c3a:	fec42583          	lw	a1,-20(s0)
20010c3e:	800007b7          	lui	a5,0x80000
20010c42:	00078513          	mv	a0,a5
20010c46:	3641                	jal	200107c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:63 (discriminator 4)
    end = rdcycle();
20010c48:	33d1                	jal	20010a0c <rdcycle>
20010c4a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:64 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20010c4e:	fdc42703          	lw	a4,-36(s0)
20010c52:	fe042783          	lw	a5,-32(s0)
20010c56:	40f707b3          	sub	a5,a4,a5
20010c5a:	85be                	mv	a1,a5
20010c5c:	200177b7          	lui	a5,0x20017
20010c60:	82478513          	addi	a0,a5,-2012 # 20016824 <_exit+0x170>
20010c64:	2059                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:67 (discriminator 4)


    start = rdcycle();
20010c66:	335d                	jal	20010a0c <rdcycle>
20010c68:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:68 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20010c6c:	4681                	li	a3,0
20010c6e:	800017b7          	lui	a5,0x80001
20010c72:	2ac78613          	addi	a2,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010c76:	fec42583          	lw	a1,-20(s0)
20010c7a:	800007b7          	lui	a5,0x80000
20010c7e:	00078513          	mv	a0,a5
20010c82:	3691                	jal	200107c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:69 (discriminator 4)
    end = rdcycle();
20010c84:	3361                	jal	20010a0c <rdcycle>
20010c86:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:70 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20010c8a:	fdc42703          	lw	a4,-36(s0)
20010c8e:	fe042783          	lw	a5,-32(s0)
20010c92:	40f707b3          	sub	a5,a4,a5
20010c96:	85be                	mv	a1,a5
20010c98:	200177b7          	lui	a5,0x20017
20010c9c:	82478513          	addi	a0,a5,-2012 # 20016824 <_exit+0x170>
20010ca0:	20a9                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:72 (discriminator 4)

    start = rdcycle();
20010ca2:	33ad                	jal	20010a0c <rdcycle>
20010ca4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:73 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20010ca8:	4681                	li	a3,0
20010caa:	800017b7          	lui	a5,0x80001
20010cae:	2ac78613          	addi	a2,a5,684 # 800012ac <metal_segment_heap_target_end+0xfffff348>
20010cb2:	fec42583          	lw	a1,-20(s0)
20010cb6:	800007b7          	lui	a5,0x80000
20010cba:	00078513          	mv	a0,a5
20010cbe:	3621                	jal	200107c6 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:74 (discriminator 4)
    end = rdcycle();
20010cc0:	33b1                	jal	20010a0c <rdcycle>
20010cc2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:75 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20010cc6:	fdc42703          	lw	a4,-36(s0)
20010cca:	fe042783          	lw	a5,-32(s0)
20010cce:	40f707b3          	sub	a5,a4,a5
20010cd2:	85be                	mv	a1,a5
20010cd4:	200177b7          	lui	a5,0x20017
20010cd8:	82478513          	addi	a0,a5,-2012 # 20016824 <_exit+0x170>
20010cdc:	2039                	jal	20010cea <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:78 (discriminator 4)


    return 0;
20010cde:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHashSW/AsconHashSW.c:81 (discriminator 4)


20010ce0:	853e                	mv	a0,a5
20010ce2:	50b2                	lw	ra,44(sp)
20010ce4:	5422                	lw	s0,40(sp)
20010ce6:	6145                	addi	sp,sp,48
20010ce8:	8082                	ret

20010cea <iprintf>:
printf():
20010cea:	7139                	addi	sp,sp,-64
20010cec:	da3e                	sw	a5,52(sp)
20010cee:	d22e                	sw	a1,36(sp)
20010cf0:	d432                	sw	a2,40(sp)
20010cf2:	d636                	sw	a3,44(sp)
20010cf4:	d83a                	sw	a4,48(sp)
20010cf6:	dc42                	sw	a6,56(sp)
20010cf8:	de46                	sw	a7,60(sp)
20010cfa:	5fff0797          	auipc	a5,0x5fff0
20010cfe:	55e78793          	addi	a5,a5,1374 # 80001258 <_impure_ptr>
20010d02:	cc22                	sw	s0,24(sp)
20010d04:	4380                	lw	s0,0(a5)
20010d06:	ca26                	sw	s1,20(sp)
20010d08:	ce06                	sw	ra,28(sp)
20010d0a:	84aa                	mv	s1,a0
20010d0c:	c409                	beqz	s0,20010d16 <iprintf+0x2c>
20010d0e:	4c1c                	lw	a5,24(s0)
20010d10:	e399                	bnez	a5,20010d16 <iprintf+0x2c>
20010d12:	8522                	mv	a0,s0
20010d14:	23d5                	jal	200112f8 <__sinit>
20010d16:	440c                	lw	a1,8(s0)
20010d18:	1054                	addi	a3,sp,36
20010d1a:	8626                	mv	a2,s1
20010d1c:	8522                	mv	a0,s0
20010d1e:	c636                	sw	a3,12(sp)
20010d20:	2df000ef          	jal	ra,200117fe <_vfiprintf_r>
20010d24:	40f2                	lw	ra,28(sp)
20010d26:	4462                	lw	s0,24(sp)
20010d28:	44d2                	lw	s1,20(sp)
20010d2a:	6121                	addi	sp,sp,64
20010d2c:	8082                	ret

20010d2e <putchar>:
putchar():
20010d2e:	1101                	addi	sp,sp,-32
20010d30:	5fff0797          	auipc	a5,0x5fff0
20010d34:	52878793          	addi	a5,a5,1320 # 80001258 <_impure_ptr>
20010d38:	cc22                	sw	s0,24(sp)
20010d3a:	4380                	lw	s0,0(a5)
20010d3c:	ce06                	sw	ra,28(sp)
20010d3e:	85aa                	mv	a1,a0
20010d40:	c419                	beqz	s0,20010d4e <putchar+0x20>
20010d42:	4c1c                	lw	a5,24(s0)
20010d44:	e789                	bnez	a5,20010d4e <putchar+0x20>
20010d46:	c62a                	sw	a0,12(sp)
20010d48:	8522                	mv	a0,s0
20010d4a:	237d                	jal	200112f8 <__sinit>
20010d4c:	45b2                	lw	a1,12(sp)
20010d4e:	4410                	lw	a2,8(s0)
20010d50:	8522                	mv	a0,s0
20010d52:	4462                	lw	s0,24(sp)
20010d54:	40f2                	lw	ra,28(sp)
20010d56:	6105                	addi	sp,sp,32
20010d58:	a009                	j	20010d5a <_putc_r>

20010d5a <_putc_r>:
_putc_r():
20010d5a:	1101                	addi	sp,sp,-32
20010d5c:	cc22                	sw	s0,24(sp)
20010d5e:	ce06                	sw	ra,28(sp)
20010d60:	842a                	mv	s0,a0
20010d62:	c901                	beqz	a0,20010d72 <_putc_r+0x18>
20010d64:	4d1c                	lw	a5,24(a0)
20010d66:	e791                	bnez	a5,20010d72 <_putc_r+0x18>
20010d68:	c632                	sw	a2,12(sp)
20010d6a:	c42e                	sw	a1,8(sp)
20010d6c:	2371                	jal	200112f8 <__sinit>
20010d6e:	4632                	lw	a2,12(sp)
20010d70:	45a2                	lw	a1,8(sp)
20010d72:	00006797          	auipc	a5,0x6
20010d76:	af278793          	addi	a5,a5,-1294 # 20016864 <__sf_fake_stdin>
20010d7a:	02f61563          	bne	a2,a5,20010da4 <_putc_r+0x4a>
20010d7e:	4050                	lw	a2,4(s0)
20010d80:	461c                	lw	a5,8(a2)
20010d82:	17fd                	addi	a5,a5,-1
20010d84:	c61c                	sw	a5,8(a2)
20010d86:	0207df63          	bgez	a5,20010dc4 <_putc_r+0x6a>
20010d8a:	4e18                	lw	a4,24(a2)
20010d8c:	00e7c763          	blt	a5,a4,20010d9a <_putc_r+0x40>
20010d90:	0ff5f793          	andi	a5,a1,255
20010d94:	4729                	li	a4,10
20010d96:	02e79763          	bne	a5,a4,20010dc4 <_putc_r+0x6a>
20010d9a:	8522                	mv	a0,s0
20010d9c:	4462                	lw	s0,24(sp)
20010d9e:	40f2                	lw	ra,28(sp)
20010da0:	6105                	addi	sp,sp,32
20010da2:	a20d                	j	20010ec4 <__swbuf_r>
20010da4:	00006797          	auipc	a5,0x6
20010da8:	ae078793          	addi	a5,a5,-1312 # 20016884 <__sf_fake_stdout>
20010dac:	00f61463          	bne	a2,a5,20010db4 <_putc_r+0x5a>
20010db0:	4410                	lw	a2,8(s0)
20010db2:	b7f9                	j	20010d80 <_putc_r+0x26>
20010db4:	00006797          	auipc	a5,0x6
20010db8:	a9078793          	addi	a5,a5,-1392 # 20016844 <__sf_fake_stderr>
20010dbc:	fcf612e3          	bne	a2,a5,20010d80 <_putc_r+0x26>
20010dc0:	4450                	lw	a2,12(s0)
20010dc2:	bf7d                	j	20010d80 <_putc_r+0x26>
20010dc4:	421c                	lw	a5,0(a2)
20010dc6:	0ff5f513          	andi	a0,a1,255
20010dca:	00178713          	addi	a4,a5,1
20010dce:	c218                	sw	a4,0(a2)
20010dd0:	00b78023          	sb	a1,0(a5)
20010dd4:	40f2                	lw	ra,28(sp)
20010dd6:	4462                	lw	s0,24(sp)
20010dd8:	6105                	addi	sp,sp,32
20010dda:	8082                	ret

20010ddc <_puts_r>:
_puts_r():
20010ddc:	1101                	addi	sp,sp,-32
20010dde:	ca26                	sw	s1,20(sp)
20010de0:	c84a                	sw	s2,16(sp)
20010de2:	ce06                	sw	ra,28(sp)
20010de4:	cc22                	sw	s0,24(sp)
20010de6:	c64e                	sw	s3,12(sp)
20010de8:	c452                	sw	s4,8(sp)
20010dea:	84aa                	mv	s1,a0
20010dec:	892e                	mv	s2,a1
20010dee:	c501                	beqz	a0,20010df6 <_puts_r+0x1a>
20010df0:	4d1c                	lw	a5,24(a0)
20010df2:	e391                	bnez	a5,20010df6 <_puts_r+0x1a>
20010df4:	2311                	jal	200112f8 <__sinit>
20010df6:	4c9c                	lw	a5,24(s1)
20010df8:	4480                	lw	s0,8(s1)
20010dfa:	e399                	bnez	a5,20010e00 <_puts_r+0x24>
20010dfc:	8526                	mv	a0,s1
20010dfe:	29ed                	jal	200112f8 <__sinit>
20010e00:	00006797          	auipc	a5,0x6
20010e04:	a6478793          	addi	a5,a5,-1436 # 20016864 <__sf_fake_stdin>
20010e08:	02f41c63          	bne	s0,a5,20010e40 <_puts_r+0x64>
20010e0c:	40c0                	lw	s0,4(s1)
20010e0e:	00c45783          	lhu	a5,12(s0)
20010e12:	8ba1                	andi	a5,a5,8
20010e14:	c7b1                	beqz	a5,20010e60 <_puts_r+0x84>
20010e16:	481c                	lw	a5,16(s0)
20010e18:	c7a1                	beqz	a5,20010e60 <_puts_r+0x84>
20010e1a:	59fd                	li	s3,-1
20010e1c:	4a29                	li	s4,10
20010e1e:	441c                	lw	a5,8(s0)
20010e20:	00094583          	lbu	a1,0(s2)
20010e24:	17fd                	addi	a5,a5,-1
20010e26:	e9b1                	bnez	a1,20010e7a <_puts_r+0x9e>
20010e28:	c41c                	sw	a5,8(s0)
20010e2a:	0607de63          	bgez	a5,20010ea6 <_puts_r+0xca>
20010e2e:	8622                	mv	a2,s0
20010e30:	45a9                	li	a1,10
20010e32:	8526                	mv	a0,s1
20010e34:	2841                	jal	20010ec4 <__swbuf_r>
20010e36:	57fd                	li	a5,-1
20010e38:	02f50863          	beq	a0,a5,20010e68 <_puts_r+0x8c>
20010e3c:	4529                	li	a0,10
20010e3e:	a035                	j	20010e6a <_puts_r+0x8e>
20010e40:	00006797          	auipc	a5,0x6
20010e44:	a4478793          	addi	a5,a5,-1468 # 20016884 <__sf_fake_stdout>
20010e48:	00f41463          	bne	s0,a5,20010e50 <_puts_r+0x74>
20010e4c:	4480                	lw	s0,8(s1)
20010e4e:	b7c1                	j	20010e0e <_puts_r+0x32>
20010e50:	00006797          	auipc	a5,0x6
20010e54:	9f478793          	addi	a5,a5,-1548 # 20016844 <__sf_fake_stderr>
20010e58:	faf41be3          	bne	s0,a5,20010e0e <_puts_r+0x32>
20010e5c:	44c0                	lw	s0,12(s1)
20010e5e:	bf45                	j	20010e0e <_puts_r+0x32>
20010e60:	85a2                	mv	a1,s0
20010e62:	8526                	mv	a0,s1
20010e64:	2205                	jal	20010f84 <__swsetup_r>
20010e66:	d955                	beqz	a0,20010e1a <_puts_r+0x3e>
20010e68:	557d                	li	a0,-1
20010e6a:	40f2                	lw	ra,28(sp)
20010e6c:	4462                	lw	s0,24(sp)
20010e6e:	44d2                	lw	s1,20(sp)
20010e70:	4942                	lw	s2,16(sp)
20010e72:	49b2                	lw	s3,12(sp)
20010e74:	4a22                	lw	s4,8(sp)
20010e76:	6105                	addi	sp,sp,32
20010e78:	8082                	ret
20010e7a:	c41c                	sw	a5,8(s0)
20010e7c:	0905                	addi	s2,s2,1
20010e7e:	0007d763          	bgez	a5,20010e8c <_puts_r+0xb0>
20010e82:	4c18                	lw	a4,24(s0)
20010e84:	00e7cb63          	blt	a5,a4,20010e9a <_puts_r+0xbe>
20010e88:	01458963          	beq	a1,s4,20010e9a <_puts_r+0xbe>
20010e8c:	401c                	lw	a5,0(s0)
20010e8e:	00178713          	addi	a4,a5,1
20010e92:	c018                	sw	a4,0(s0)
20010e94:	00b78023          	sb	a1,0(a5)
20010e98:	b759                	j	20010e1e <_puts_r+0x42>
20010e9a:	8622                	mv	a2,s0
20010e9c:	8526                	mv	a0,s1
20010e9e:	201d                	jal	20010ec4 <__swbuf_r>
20010ea0:	f7351fe3          	bne	a0,s3,20010e1e <_puts_r+0x42>
20010ea4:	b7d1                	j	20010e68 <_puts_r+0x8c>
20010ea6:	401c                	lw	a5,0(s0)
20010ea8:	00178713          	addi	a4,a5,1
20010eac:	c018                	sw	a4,0(s0)
20010eae:	4729                	li	a4,10
20010eb0:	00e78023          	sb	a4,0(a5)
20010eb4:	b761                	j	20010e3c <_puts_r+0x60>

20010eb6 <puts>:
puts():
20010eb6:	5fff0797          	auipc	a5,0x5fff0
20010eba:	3a278793          	addi	a5,a5,930 # 80001258 <_impure_ptr>
20010ebe:	85aa                	mv	a1,a0
20010ec0:	4388                	lw	a0,0(a5)
20010ec2:	bf29                	j	20010ddc <_puts_r>

20010ec4 <__swbuf_r>:
__swbuf_r():
20010ec4:	1101                	addi	sp,sp,-32
20010ec6:	cc22                	sw	s0,24(sp)
20010ec8:	ca26                	sw	s1,20(sp)
20010eca:	c84a                	sw	s2,16(sp)
20010ecc:	ce06                	sw	ra,28(sp)
20010ece:	c64e                	sw	s3,12(sp)
20010ed0:	84aa                	mv	s1,a0
20010ed2:	892e                	mv	s2,a1
20010ed4:	8432                	mv	s0,a2
20010ed6:	c501                	beqz	a0,20010ede <__swbuf_r+0x1a>
20010ed8:	4d1c                	lw	a5,24(a0)
20010eda:	e391                	bnez	a5,20010ede <__swbuf_r+0x1a>
20010edc:	2931                	jal	200112f8 <__sinit>
20010ede:	00006797          	auipc	a5,0x6
20010ee2:	98678793          	addi	a5,a5,-1658 # 20016864 <__sf_fake_stdin>
20010ee6:	06f41963          	bne	s0,a5,20010f58 <__swbuf_r+0x94>
20010eea:	40c0                	lw	s0,4(s1)
20010eec:	4c1c                	lw	a5,24(s0)
20010eee:	c41c                	sw	a5,8(s0)
20010ef0:	00c45783          	lhu	a5,12(s0)
20010ef4:	8ba1                	andi	a5,a5,8
20010ef6:	c3c9                	beqz	a5,20010f78 <__swbuf_r+0xb4>
20010ef8:	481c                	lw	a5,16(s0)
20010efa:	cfbd                	beqz	a5,20010f78 <__swbuf_r+0xb4>
20010efc:	481c                	lw	a5,16(s0)
20010efe:	4008                	lw	a0,0(s0)
20010f00:	0ff97993          	andi	s3,s2,255
20010f04:	0ff97913          	andi	s2,s2,255
20010f08:	8d1d                	sub	a0,a0,a5
20010f0a:	485c                	lw	a5,20(s0)
20010f0c:	00f54663          	blt	a0,a5,20010f18 <__swbuf_r+0x54>
20010f10:	85a2                	mv	a1,s0
20010f12:	8526                	mv	a0,s1
20010f14:	24e9                	jal	200111de <_fflush_r>
20010f16:	e52d                	bnez	a0,20010f80 <__swbuf_r+0xbc>
20010f18:	441c                	lw	a5,8(s0)
20010f1a:	0505                	addi	a0,a0,1
20010f1c:	17fd                	addi	a5,a5,-1
20010f1e:	c41c                	sw	a5,8(s0)
20010f20:	401c                	lw	a5,0(s0)
20010f22:	00178713          	addi	a4,a5,1
20010f26:	c018                	sw	a4,0(s0)
20010f28:	01378023          	sb	s3,0(a5)
20010f2c:	485c                	lw	a5,20(s0)
20010f2e:	00a78963          	beq	a5,a0,20010f40 <__swbuf_r+0x7c>
20010f32:	00c45783          	lhu	a5,12(s0)
20010f36:	8b85                	andi	a5,a5,1
20010f38:	cb81                	beqz	a5,20010f48 <__swbuf_r+0x84>
20010f3a:	47a9                	li	a5,10
20010f3c:	00f91663          	bne	s2,a5,20010f48 <__swbuf_r+0x84>
20010f40:	85a2                	mv	a1,s0
20010f42:	8526                	mv	a0,s1
20010f44:	2c69                	jal	200111de <_fflush_r>
20010f46:	ed0d                	bnez	a0,20010f80 <__swbuf_r+0xbc>
20010f48:	40f2                	lw	ra,28(sp)
20010f4a:	4462                	lw	s0,24(sp)
20010f4c:	854a                	mv	a0,s2
20010f4e:	44d2                	lw	s1,20(sp)
20010f50:	4942                	lw	s2,16(sp)
20010f52:	49b2                	lw	s3,12(sp)
20010f54:	6105                	addi	sp,sp,32
20010f56:	8082                	ret
20010f58:	00006797          	auipc	a5,0x6
20010f5c:	92c78793          	addi	a5,a5,-1748 # 20016884 <__sf_fake_stdout>
20010f60:	00f41463          	bne	s0,a5,20010f68 <__swbuf_r+0xa4>
20010f64:	4480                	lw	s0,8(s1)
20010f66:	b759                	j	20010eec <__swbuf_r+0x28>
20010f68:	00006797          	auipc	a5,0x6
20010f6c:	8dc78793          	addi	a5,a5,-1828 # 20016844 <__sf_fake_stderr>
20010f70:	f6f41ee3          	bne	s0,a5,20010eec <__swbuf_r+0x28>
20010f74:	44c0                	lw	s0,12(s1)
20010f76:	bf9d                	j	20010eec <__swbuf_r+0x28>
20010f78:	85a2                	mv	a1,s0
20010f7a:	8526                	mv	a0,s1
20010f7c:	2021                	jal	20010f84 <__swsetup_r>
20010f7e:	dd3d                	beqz	a0,20010efc <__swbuf_r+0x38>
20010f80:	597d                	li	s2,-1
20010f82:	b7d9                	j	20010f48 <__swbuf_r+0x84>

20010f84 <__swsetup_r>:
__swsetup_r():
20010f84:	1141                	addi	sp,sp,-16
20010f86:	5fff0797          	auipc	a5,0x5fff0
20010f8a:	2d278793          	addi	a5,a5,722 # 80001258 <_impure_ptr>
20010f8e:	c226                	sw	s1,4(sp)
20010f90:	4384                	lw	s1,0(a5)
20010f92:	c422                	sw	s0,8(sp)
20010f94:	c04a                	sw	s2,0(sp)
20010f96:	c606                	sw	ra,12(sp)
20010f98:	892a                	mv	s2,a0
20010f9a:	842e                	mv	s0,a1
20010f9c:	c489                	beqz	s1,20010fa6 <__swsetup_r+0x22>
20010f9e:	4c9c                	lw	a5,24(s1)
20010fa0:	e399                	bnez	a5,20010fa6 <__swsetup_r+0x22>
20010fa2:	8526                	mv	a0,s1
20010fa4:	2e91                	jal	200112f8 <__sinit>
20010fa6:	00006797          	auipc	a5,0x6
20010faa:	8be78793          	addi	a5,a5,-1858 # 20016864 <__sf_fake_stdin>
20010fae:	02f41c63          	bne	s0,a5,20010fe6 <__swsetup_r+0x62>
20010fb2:	40c0                	lw	s0,4(s1)
20010fb4:	00c41703          	lh	a4,12(s0)
20010fb8:	01071793          	slli	a5,a4,0x10
20010fbc:	83c1                	srli	a5,a5,0x10
20010fbe:	0087f693          	andi	a3,a5,8
20010fc2:	eeb5                	bnez	a3,2001103e <__swsetup_r+0xba>
20010fc4:	0107f693          	andi	a3,a5,16
20010fc8:	ee9d                	bnez	a3,20011006 <__swsetup_r+0x82>
20010fca:	47a5                	li	a5,9
20010fcc:	00f92023          	sw	a5,0(s2)
20010fd0:	04076713          	ori	a4,a4,64
20010fd4:	00e41623          	sh	a4,12(s0)
20010fd8:	557d                	li	a0,-1
20010fda:	40b2                	lw	ra,12(sp)
20010fdc:	4422                	lw	s0,8(sp)
20010fde:	4492                	lw	s1,4(sp)
20010fe0:	4902                	lw	s2,0(sp)
20010fe2:	0141                	addi	sp,sp,16
20010fe4:	8082                	ret
20010fe6:	00006797          	auipc	a5,0x6
20010fea:	89e78793          	addi	a5,a5,-1890 # 20016884 <__sf_fake_stdout>
20010fee:	00f41463          	bne	s0,a5,20010ff6 <__swsetup_r+0x72>
20010ff2:	4480                	lw	s0,8(s1)
20010ff4:	b7c1                	j	20010fb4 <__swsetup_r+0x30>
20010ff6:	00006797          	auipc	a5,0x6
20010ffa:	84e78793          	addi	a5,a5,-1970 # 20016844 <__sf_fake_stderr>
20010ffe:	faf41be3          	bne	s0,a5,20010fb4 <__swsetup_r+0x30>
20011002:	44c0                	lw	s0,12(s1)
20011004:	bf45                	j	20010fb4 <__swsetup_r+0x30>
20011006:	8b91                	andi	a5,a5,4
20011008:	c78d                	beqz	a5,20011032 <__swsetup_r+0xae>
2001100a:	584c                	lw	a1,52(s0)
2001100c:	c989                	beqz	a1,2001101e <__swsetup_r+0x9a>
2001100e:	04440793          	addi	a5,s0,68
20011012:	00f58463          	beq	a1,a5,2001101a <__swsetup_r+0x96>
20011016:	854a                	mv	a0,s2
20011018:	2bc5                	jal	20011608 <_free_r>
2001101a:	02042a23          	sw	zero,52(s0)
2001101e:	00c45783          	lhu	a5,12(s0)
20011022:	00042223          	sw	zero,4(s0)
20011026:	fdb7f793          	andi	a5,a5,-37
2001102a:	00f41623          	sh	a5,12(s0)
2001102e:	481c                	lw	a5,16(s0)
20011030:	c01c                	sw	a5,0(s0)
20011032:	00c45783          	lhu	a5,12(s0)
20011036:	0087e793          	ori	a5,a5,8
2001103a:	00f41623          	sh	a5,12(s0)
2001103e:	481c                	lw	a5,16(s0)
20011040:	ef81                	bnez	a5,20011058 <__swsetup_r+0xd4>
20011042:	00c45783          	lhu	a5,12(s0)
20011046:	20000713          	li	a4,512
2001104a:	2807f793          	andi	a5,a5,640
2001104e:	00e78563          	beq	a5,a4,20011058 <__swsetup_r+0xd4>
20011052:	85a2                	mv	a1,s0
20011054:	854a                	mv	a0,s2
20011056:	21bd                	jal	200114c4 <__smakebuf_r>
20011058:	00c45783          	lhu	a5,12(s0)
2001105c:	0017f713          	andi	a4,a5,1
20011060:	c705                	beqz	a4,20011088 <__swsetup_r+0x104>
20011062:	485c                	lw	a5,20(s0)
20011064:	00042423          	sw	zero,8(s0)
20011068:	40f007b3          	neg	a5,a5
2001106c:	cc1c                	sw	a5,24(s0)
2001106e:	481c                	lw	a5,16(s0)
20011070:	4501                	li	a0,0
20011072:	f7a5                	bnez	a5,20010fda <__swsetup_r+0x56>
20011074:	00c41783          	lh	a5,12(s0)
20011078:	0807f713          	andi	a4,a5,128
2001107c:	df39                	beqz	a4,20010fda <__swsetup_r+0x56>
2001107e:	0407e793          	ori	a5,a5,64
20011082:	00f41623          	sh	a5,12(s0)
20011086:	bf89                	j	20010fd8 <__swsetup_r+0x54>
20011088:	8b89                	andi	a5,a5,2
2001108a:	4701                	li	a4,0
2001108c:	e391                	bnez	a5,20011090 <__swsetup_r+0x10c>
2001108e:	4858                	lw	a4,20(s0)
20011090:	c418                	sw	a4,8(s0)
20011092:	bff1                	j	2001106e <__swsetup_r+0xea>

20011094 <__sflush_r>:
__sflush_r():
20011094:	00c5d783          	lhu	a5,12(a1)
20011098:	1101                	addi	sp,sp,-32
2001109a:	cc22                	sw	s0,24(sp)
2001109c:	ca26                	sw	s1,20(sp)
2001109e:	ce06                	sw	ra,28(sp)
200110a0:	c84a                	sw	s2,16(sp)
200110a2:	c64e                	sw	s3,12(sp)
200110a4:	0087f713          	andi	a4,a5,8
200110a8:	84aa                	mv	s1,a0
200110aa:	842e                	mv	s0,a1
200110ac:	e765                	bnez	a4,20011194 <__sflush_r+0x100>
200110ae:	41d8                	lw	a4,4(a1)
200110b0:	00e04763          	bgtz	a4,200110be <__sflush_r+0x2a>
200110b4:	41b8                	lw	a4,64(a1)
200110b6:	00e04463          	bgtz	a4,200110be <__sflush_r+0x2a>
200110ba:	4501                	li	a0,0
200110bc:	a0c1                	j	2001117c <__sflush_r+0xe8>
200110be:	5458                	lw	a4,44(s0)
200110c0:	df6d                	beqz	a4,200110ba <__sflush_r+0x26>
200110c2:	0004a903          	lw	s2,0(s1)
200110c6:	01379693          	slli	a3,a5,0x13
200110ca:	0004a023          	sw	zero,0(s1)
200110ce:	0606de63          	bgez	a3,2001114a <__sflush_r+0xb6>
200110d2:	4868                	lw	a0,84(s0)
200110d4:	00c45783          	lhu	a5,12(s0)
200110d8:	8b91                	andi	a5,a5,4
200110da:	c799                	beqz	a5,200110e8 <__sflush_r+0x54>
200110dc:	405c                	lw	a5,4(s0)
200110de:	8d1d                	sub	a0,a0,a5
200110e0:	585c                	lw	a5,52(s0)
200110e2:	c399                	beqz	a5,200110e8 <__sflush_r+0x54>
200110e4:	403c                	lw	a5,64(s0)
200110e6:	8d1d                	sub	a0,a0,a5
200110e8:	545c                	lw	a5,44(s0)
200110ea:	500c                	lw	a1,32(s0)
200110ec:	862a                	mv	a2,a0
200110ee:	4681                	li	a3,0
200110f0:	8526                	mv	a0,s1
200110f2:	9782                	jalr	a5
200110f4:	57fd                	li	a5,-1
200110f6:	00c45703          	lhu	a4,12(s0)
200110fa:	00f51d63          	bne	a0,a5,20011114 <__sflush_r+0x80>
200110fe:	4094                	lw	a3,0(s1)
20011100:	47f5                	li	a5,29
20011102:	08d7e463          	bltu	a5,a3,2001118a <__sflush_r+0xf6>
20011106:	204007b7          	lui	a5,0x20400
2001110a:	0785                	addi	a5,a5,1
2001110c:	00d7d7b3          	srl	a5,a5,a3
20011110:	8b85                	andi	a5,a5,1
20011112:	cfa5                	beqz	a5,2001118a <__sflush_r+0xf6>
20011114:	481c                	lw	a5,16(s0)
20011116:	00042223          	sw	zero,4(s0)
2001111a:	c01c                	sw	a5,0(s0)
2001111c:	01371793          	slli	a5,a4,0x13
20011120:	0007d863          	bgez	a5,20011130 <__sflush_r+0x9c>
20011124:	57fd                	li	a5,-1
20011126:	00f51463          	bne	a0,a5,2001112e <__sflush_r+0x9a>
2001112a:	409c                	lw	a5,0(s1)
2001112c:	e391                	bnez	a5,20011130 <__sflush_r+0x9c>
2001112e:	c868                	sw	a0,84(s0)
20011130:	584c                	lw	a1,52(s0)
20011132:	0124a023          	sw	s2,0(s1)
20011136:	d1d1                	beqz	a1,200110ba <__sflush_r+0x26>
20011138:	04440793          	addi	a5,s0,68
2001113c:	00f58463          	beq	a1,a5,20011144 <__sflush_r+0xb0>
20011140:	8526                	mv	a0,s1
20011142:	21d9                	jal	20011608 <_free_r>
20011144:	02042a23          	sw	zero,52(s0)
20011148:	bf8d                	j	200110ba <__sflush_r+0x26>
2001114a:	500c                	lw	a1,32(s0)
2001114c:	4685                	li	a3,1
2001114e:	4601                	li	a2,0
20011150:	8526                	mv	a0,s1
20011152:	9702                	jalr	a4
20011154:	57fd                	li	a5,-1
20011156:	f6f51fe3          	bne	a0,a5,200110d4 <__sflush_r+0x40>
2001115a:	409c                	lw	a5,0(s1)
2001115c:	dfa5                	beqz	a5,200110d4 <__sflush_r+0x40>
2001115e:	4775                	li	a4,29
20011160:	00e78563          	beq	a5,a4,2001116a <__sflush_r+0xd6>
20011164:	4759                	li	a4,22
20011166:	00e79563          	bne	a5,a4,20011170 <__sflush_r+0xdc>
2001116a:	0124a023          	sw	s2,0(s1)
2001116e:	b7b1                	j	200110ba <__sflush_r+0x26>
20011170:	00c45783          	lhu	a5,12(s0)
20011174:	0407e793          	ori	a5,a5,64
20011178:	00f41623          	sh	a5,12(s0)
2001117c:	40f2                	lw	ra,28(sp)
2001117e:	4462                	lw	s0,24(sp)
20011180:	44d2                	lw	s1,20(sp)
20011182:	4942                	lw	s2,16(sp)
20011184:	49b2                	lw	s3,12(sp)
20011186:	6105                	addi	sp,sp,32
20011188:	8082                	ret
2001118a:	04076713          	ori	a4,a4,64
2001118e:	00e41623          	sh	a4,12(s0)
20011192:	b7ed                	j	2001117c <__sflush_r+0xe8>
20011194:	0105a983          	lw	s3,16(a1)
20011198:	f20981e3          	beqz	s3,200110ba <__sflush_r+0x26>
2001119c:	0005a903          	lw	s2,0(a1)
200111a0:	8b8d                	andi	a5,a5,3
200111a2:	0135a023          	sw	s3,0(a1)
200111a6:	41390933          	sub	s2,s2,s3
200111aa:	4701                	li	a4,0
200111ac:	e391                	bnez	a5,200111b0 <__sflush_r+0x11c>
200111ae:	49d8                	lw	a4,20(a1)
200111b0:	c418                	sw	a4,8(s0)
200111b2:	f12054e3          	blez	s2,200110ba <__sflush_r+0x26>
200111b6:	541c                	lw	a5,40(s0)
200111b8:	500c                	lw	a1,32(s0)
200111ba:	86ca                	mv	a3,s2
200111bc:	864e                	mv	a2,s3
200111be:	8526                	mv	a0,s1
200111c0:	9782                	jalr	a5
200111c2:	00a04a63          	bgtz	a0,200111d6 <__sflush_r+0x142>
200111c6:	00c45783          	lhu	a5,12(s0)
200111ca:	557d                	li	a0,-1
200111cc:	0407e793          	ori	a5,a5,64
200111d0:	00f41623          	sh	a5,12(s0)
200111d4:	b765                	j	2001117c <__sflush_r+0xe8>
200111d6:	99aa                	add	s3,s3,a0
200111d8:	40a90933          	sub	s2,s2,a0
200111dc:	bfd9                	j	200111b2 <__sflush_r+0x11e>

200111de <_fflush_r>:
_fflush_r():
200111de:	499c                	lw	a5,16(a1)
200111e0:	cfb9                	beqz	a5,2001123e <_fflush_r+0x60>
200111e2:	1101                	addi	sp,sp,-32
200111e4:	cc22                	sw	s0,24(sp)
200111e6:	ce06                	sw	ra,28(sp)
200111e8:	842a                	mv	s0,a0
200111ea:	c511                	beqz	a0,200111f6 <_fflush_r+0x18>
200111ec:	4d1c                	lw	a5,24(a0)
200111ee:	e781                	bnez	a5,200111f6 <_fflush_r+0x18>
200111f0:	c62e                	sw	a1,12(sp)
200111f2:	2219                	jal	200112f8 <__sinit>
200111f4:	45b2                	lw	a1,12(sp)
200111f6:	00005797          	auipc	a5,0x5
200111fa:	66e78793          	addi	a5,a5,1646 # 20016864 <__sf_fake_stdin>
200111fe:	00f59b63          	bne	a1,a5,20011214 <_fflush_r+0x36>
20011202:	404c                	lw	a1,4(s0)
20011204:	00c59783          	lh	a5,12(a1)
20011208:	c795                	beqz	a5,20011234 <_fflush_r+0x56>
2001120a:	8522                	mv	a0,s0
2001120c:	4462                	lw	s0,24(sp)
2001120e:	40f2                	lw	ra,28(sp)
20011210:	6105                	addi	sp,sp,32
20011212:	b549                	j	20011094 <__sflush_r>
20011214:	00005797          	auipc	a5,0x5
20011218:	67078793          	addi	a5,a5,1648 # 20016884 <__sf_fake_stdout>
2001121c:	00f59463          	bne	a1,a5,20011224 <_fflush_r+0x46>
20011220:	440c                	lw	a1,8(s0)
20011222:	b7cd                	j	20011204 <_fflush_r+0x26>
20011224:	00005797          	auipc	a5,0x5
20011228:	62078793          	addi	a5,a5,1568 # 20016844 <__sf_fake_stderr>
2001122c:	fcf59ce3          	bne	a1,a5,20011204 <_fflush_r+0x26>
20011230:	444c                	lw	a1,12(s0)
20011232:	bfc9                	j	20011204 <_fflush_r+0x26>
20011234:	40f2                	lw	ra,28(sp)
20011236:	4462                	lw	s0,24(sp)
20011238:	4501                	li	a0,0
2001123a:	6105                	addi	sp,sp,32
2001123c:	8082                	ret
2001123e:	4501                	li	a0,0
20011240:	8082                	ret

20011242 <std>:
std():
20011242:	1141                	addi	sp,sp,-16
20011244:	c422                	sw	s0,8(sp)
20011246:	c606                	sw	ra,12(sp)
20011248:	842a                	mv	s0,a0
2001124a:	00b51623          	sh	a1,12(a0)
2001124e:	00c51723          	sh	a2,14(a0)
20011252:	00052023          	sw	zero,0(a0)
20011256:	00052223          	sw	zero,4(a0)
2001125a:	00052423          	sw	zero,8(a0)
2001125e:	06052223          	sw	zero,100(a0)
20011262:	00052823          	sw	zero,16(a0)
20011266:	00052a23          	sw	zero,20(a0)
2001126a:	00052c23          	sw	zero,24(a0)
2001126e:	4621                	li	a2,8
20011270:	4581                	li	a1,0
20011272:	05c50513          	addi	a0,a0,92
20011276:	24ed                	jal	20011560 <memset>
20011278:	00001797          	auipc	a5,0x1
2001127c:	84678793          	addi	a5,a5,-1978 # 20011abe <__sread>
20011280:	d05c                	sw	a5,36(s0)
20011282:	00001797          	auipc	a5,0x1
20011286:	86c78793          	addi	a5,a5,-1940 # 20011aee <__swrite>
2001128a:	d41c                	sw	a5,40(s0)
2001128c:	00001797          	auipc	a5,0x1
20011290:	8b078793          	addi	a5,a5,-1872 # 20011b3c <__sseek>
20011294:	d45c                	sw	a5,44(s0)
20011296:	00001797          	auipc	a5,0x1
2001129a:	8dc78793          	addi	a5,a5,-1828 # 20011b72 <__sclose>
2001129e:	d000                	sw	s0,32(s0)
200112a0:	d81c                	sw	a5,48(s0)
200112a2:	40b2                	lw	ra,12(sp)
200112a4:	4422                	lw	s0,8(sp)
200112a6:	0141                	addi	sp,sp,16
200112a8:	8082                	ret

200112aa <_cleanup_r>:
_cleanup_r():
200112aa:	00000597          	auipc	a1,0x0
200112ae:	f3458593          	addi	a1,a1,-204 # 200111de <_fflush_r>
200112b2:	a2b9                	j	20011400 <_fwalk_reent>

200112b4 <__sfmoreglue>:
__sfmoreglue():
200112b4:	1141                	addi	sp,sp,-16
200112b6:	c226                	sw	s1,4(sp)
200112b8:	06800613          	li	a2,104
200112bc:	fff58493          	addi	s1,a1,-1
200112c0:	02c484b3          	mul	s1,s1,a2
200112c4:	c04a                	sw	s2,0(sp)
200112c6:	892e                	mv	s2,a1
200112c8:	c422                	sw	s0,8(sp)
200112ca:	c606                	sw	ra,12(sp)
200112cc:	07448593          	addi	a1,s1,116
200112d0:	26d5                	jal	200116b4 <_malloc_r>
200112d2:	842a                	mv	s0,a0
200112d4:	c919                	beqz	a0,200112ea <__sfmoreglue+0x36>
200112d6:	00052023          	sw	zero,0(a0)
200112da:	01252223          	sw	s2,4(a0)
200112de:	0531                	addi	a0,a0,12
200112e0:	c408                	sw	a0,8(s0)
200112e2:	06848613          	addi	a2,s1,104
200112e6:	4581                	li	a1,0
200112e8:	2ca5                	jal	20011560 <memset>
200112ea:	8522                	mv	a0,s0
200112ec:	40b2                	lw	ra,12(sp)
200112ee:	4422                	lw	s0,8(sp)
200112f0:	4492                	lw	s1,4(sp)
200112f2:	4902                	lw	s2,0(sp)
200112f4:	0141                	addi	sp,sp,16
200112f6:	8082                	ret

200112f8 <__sinit>:
__sinit():
200112f8:	4d1c                	lw	a5,24(a0)
200112fa:	e3bd                	bnez	a5,20011360 <__sinit+0x68>
200112fc:	1141                	addi	sp,sp,-16
200112fe:	c606                	sw	ra,12(sp)
20011300:	c422                	sw	s0,8(sp)
20011302:	00000797          	auipc	a5,0x0
20011306:	fa878793          	addi	a5,a5,-88 # 200112aa <_cleanup_r>
2001130a:	d51c                	sw	a5,40(a0)
2001130c:	5fff0797          	auipc	a5,0x5fff0
20011310:	f5078793          	addi	a5,a5,-176 # 8000125c <_global_impure_ptr>
20011314:	439c                	lw	a5,0(a5)
20011316:	04052423          	sw	zero,72(a0)
2001131a:	04052623          	sw	zero,76(a0)
2001131e:	04052823          	sw	zero,80(a0)
20011322:	00f51463          	bne	a0,a5,2001132a <__sinit+0x32>
20011326:	4785                	li	a5,1
20011328:	cd1c                	sw	a5,24(a0)
2001132a:	842a                	mv	s0,a0
2001132c:	281d                	jal	20011362 <__sfp>
2001132e:	c048                	sw	a0,4(s0)
20011330:	8522                	mv	a0,s0
20011332:	2805                	jal	20011362 <__sfp>
20011334:	c408                	sw	a0,8(s0)
20011336:	8522                	mv	a0,s0
20011338:	202d                	jal	20011362 <__sfp>
2001133a:	c448                	sw	a0,12(s0)
2001133c:	4048                	lw	a0,4(s0)
2001133e:	4601                	li	a2,0
20011340:	4591                	li	a1,4
20011342:	3701                	jal	20011242 <std>
20011344:	4408                	lw	a0,8(s0)
20011346:	4605                	li	a2,1
20011348:	45a5                	li	a1,9
2001134a:	3de5                	jal	20011242 <std>
2001134c:	4448                	lw	a0,12(s0)
2001134e:	4609                	li	a2,2
20011350:	45c9                	li	a1,18
20011352:	3dc5                	jal	20011242 <std>
20011354:	4785                	li	a5,1
20011356:	cc1c                	sw	a5,24(s0)
20011358:	40b2                	lw	ra,12(sp)
2001135a:	4422                	lw	s0,8(sp)
2001135c:	0141                	addi	sp,sp,16
2001135e:	8082                	ret
20011360:	8082                	ret

20011362 <__sfp>:
__sfp():
20011362:	1141                	addi	sp,sp,-16
20011364:	5fff0797          	auipc	a5,0x5fff0
20011368:	ef878793          	addi	a5,a5,-264 # 8000125c <_global_impure_ptr>
2001136c:	c226                	sw	s1,4(sp)
2001136e:	4384                	lw	s1,0(a5)
20011370:	c04a                	sw	s2,0(sp)
20011372:	c606                	sw	ra,12(sp)
20011374:	4c9c                	lw	a5,24(s1)
20011376:	c422                	sw	s0,8(sp)
20011378:	892a                	mv	s2,a0
2001137a:	e399                	bnez	a5,20011380 <__sfp+0x1e>
2001137c:	8526                	mv	a0,s1
2001137e:	3fad                	jal	200112f8 <__sinit>
20011380:	04848493          	addi	s1,s1,72
20011384:	4480                	lw	s0,8(s1)
20011386:	40dc                	lw	a5,4(s1)
20011388:	17fd                	addi	a5,a5,-1
2001138a:	0007d663          	bgez	a5,20011396 <__sfp+0x34>
2001138e:	409c                	lw	a5,0(s1)
20011390:	cfb1                	beqz	a5,200113ec <__sfp+0x8a>
20011392:	4084                	lw	s1,0(s1)
20011394:	bfc5                	j	20011384 <__sfp+0x22>
20011396:	00c41703          	lh	a4,12(s0)
2001139a:	e731                	bnez	a4,200113e6 <__sfp+0x84>
2001139c:	77c1                	lui	a5,0xffff0
2001139e:	0785                	addi	a5,a5,1
200113a0:	06042223          	sw	zero,100(s0)
200113a4:	00042023          	sw	zero,0(s0)
200113a8:	00042223          	sw	zero,4(s0)
200113ac:	00042423          	sw	zero,8(s0)
200113b0:	c45c                	sw	a5,12(s0)
200113b2:	00042823          	sw	zero,16(s0)
200113b6:	00042a23          	sw	zero,20(s0)
200113ba:	00042c23          	sw	zero,24(s0)
200113be:	4621                	li	a2,8
200113c0:	4581                	li	a1,0
200113c2:	05c40513          	addi	a0,s0,92
200113c6:	2a69                	jal	20011560 <memset>
200113c8:	02042a23          	sw	zero,52(s0)
200113cc:	02042c23          	sw	zero,56(s0)
200113d0:	04042423          	sw	zero,72(s0)
200113d4:	04042623          	sw	zero,76(s0)
200113d8:	8522                	mv	a0,s0
200113da:	40b2                	lw	ra,12(sp)
200113dc:	4422                	lw	s0,8(sp)
200113de:	4492                	lw	s1,4(sp)
200113e0:	4902                	lw	s2,0(sp)
200113e2:	0141                	addi	sp,sp,16
200113e4:	8082                	ret
200113e6:	06840413          	addi	s0,s0,104
200113ea:	bf79                	j	20011388 <__sfp+0x26>
200113ec:	4591                	li	a1,4
200113ee:	854a                	mv	a0,s2
200113f0:	35d1                	jal	200112b4 <__sfmoreglue>
200113f2:	c088                	sw	a0,0(s1)
200113f4:	842a                	mv	s0,a0
200113f6:	fd51                	bnez	a0,20011392 <__sfp+0x30>
200113f8:	47b1                	li	a5,12
200113fa:	00f92023          	sw	a5,0(s2)
200113fe:	bfe9                	j	200113d8 <__sfp+0x76>

20011400 <_fwalk_reent>:
_fwalk_reent():
20011400:	7179                	addi	sp,sp,-48
20011402:	d422                	sw	s0,40(sp)
20011404:	d04a                	sw	s2,32(sp)
20011406:	cc52                	sw	s4,24(sp)
20011408:	ca56                	sw	s5,20(sp)
2001140a:	c85a                	sw	s6,16(sp)
2001140c:	c65e                	sw	s7,12(sp)
2001140e:	d606                	sw	ra,44(sp)
20011410:	d226                	sw	s1,36(sp)
20011412:	ce4e                	sw	s3,28(sp)
20011414:	8a2a                	mv	s4,a0
20011416:	8aae                	mv	s5,a1
20011418:	04850413          	addi	s0,a0,72
2001141c:	4901                	li	s2,0
2001141e:	4b05                	li	s6,1
20011420:	5bfd                	li	s7,-1
20011422:	ec09                	bnez	s0,2001143c <_fwalk_reent+0x3c>
20011424:	50b2                	lw	ra,44(sp)
20011426:	5422                	lw	s0,40(sp)
20011428:	854a                	mv	a0,s2
2001142a:	5492                	lw	s1,36(sp)
2001142c:	5902                	lw	s2,32(sp)
2001142e:	49f2                	lw	s3,28(sp)
20011430:	4a62                	lw	s4,24(sp)
20011432:	4ad2                	lw	s5,20(sp)
20011434:	4b42                	lw	s6,16(sp)
20011436:	4bb2                	lw	s7,12(sp)
20011438:	6145                	addi	sp,sp,48
2001143a:	8082                	ret
2001143c:	4404                	lw	s1,8(s0)
2001143e:	00442983          	lw	s3,4(s0)
20011442:	19fd                	addi	s3,s3,-1
20011444:	0009d463          	bgez	s3,2001144c <_fwalk_reent+0x4c>
20011448:	4000                	lw	s0,0(s0)
2001144a:	bfe1                	j	20011422 <_fwalk_reent+0x22>
2001144c:	00c4d783          	lhu	a5,12(s1)
20011450:	00fb7b63          	bgeu	s6,a5,20011466 <_fwalk_reent+0x66>
20011454:	00e49783          	lh	a5,14(s1)
20011458:	01778763          	beq	a5,s7,20011466 <_fwalk_reent+0x66>
2001145c:	85a6                	mv	a1,s1
2001145e:	8552                	mv	a0,s4
20011460:	9a82                	jalr	s5
20011462:	00a96933          	or	s2,s2,a0
20011466:	06848493          	addi	s1,s1,104
2001146a:	bfe1                	j	20011442 <_fwalk_reent+0x42>

2001146c <__swhatbuf_r>:
__swhatbuf_r():
2001146c:	7119                	addi	sp,sp,-128
2001146e:	daa6                	sw	s1,116(sp)
20011470:	84ae                	mv	s1,a1
20011472:	00e59583          	lh	a1,14(a1)
20011476:	dca2                	sw	s0,120(sp)
20011478:	de86                	sw	ra,124(sp)
2001147a:	8432                	mv	s0,a2
2001147c:	0005dc63          	bgez	a1,20011494 <__swhatbuf_r+0x28>
20011480:	00c4d783          	lhu	a5,12(s1)
20011484:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffe09c>
20011488:	0807f793          	andi	a5,a5,128
2001148c:	e39d                	bnez	a5,200114b2 <__swhatbuf_r+0x46>
2001148e:	40000793          	li	a5,1024
20011492:	a015                	j	200114b6 <__swhatbuf_r+0x4a>
20011494:	0830                	addi	a2,sp,24
20011496:	c636                	sw	a3,12(sp)
20011498:	2f15                	jal	20011bcc <_fstat_r>
2001149a:	46b2                	lw	a3,12(sp)
2001149c:	fe0542e3          	bltz	a0,20011480 <__swhatbuf_r+0x14>
200114a0:	4772                	lw	a4,28(sp)
200114a2:	67bd                	lui	a5,0xf
200114a4:	8ff9                	and	a5,a5,a4
200114a6:	7779                	lui	a4,0xffffe
200114a8:	97ba                	add	a5,a5,a4
200114aa:	0017b793          	seqz	a5,a5
200114ae:	c29c                	sw	a5,0(a3)
200114b0:	bff9                	j	2001148e <__swhatbuf_r+0x22>
200114b2:	04000793          	li	a5,64
200114b6:	c01c                	sw	a5,0(s0)
200114b8:	50f6                	lw	ra,124(sp)
200114ba:	5466                	lw	s0,120(sp)
200114bc:	54d6                	lw	s1,116(sp)
200114be:	4501                	li	a0,0
200114c0:	6109                	addi	sp,sp,128
200114c2:	8082                	ret

200114c4 <__smakebuf_r>:
__smakebuf_r():
200114c4:	00c5d783          	lhu	a5,12(a1)
200114c8:	1101                	addi	sp,sp,-32
200114ca:	cc22                	sw	s0,24(sp)
200114cc:	ce06                	sw	ra,28(sp)
200114ce:	ca26                	sw	s1,20(sp)
200114d0:	c84a                	sw	s2,16(sp)
200114d2:	8b89                	andi	a5,a5,2
200114d4:	842e                	mv	s0,a1
200114d6:	cf89                	beqz	a5,200114f0 <__smakebuf_r+0x2c>
200114d8:	04740793          	addi	a5,s0,71
200114dc:	c01c                	sw	a5,0(s0)
200114de:	c81c                	sw	a5,16(s0)
200114e0:	4785                	li	a5,1
200114e2:	c85c                	sw	a5,20(s0)
200114e4:	40f2                	lw	ra,28(sp)
200114e6:	4462                	lw	s0,24(sp)
200114e8:	44d2                	lw	s1,20(sp)
200114ea:	4942                	lw	s2,16(sp)
200114ec:	6105                	addi	sp,sp,32
200114ee:	8082                	ret
200114f0:	0074                	addi	a3,sp,12
200114f2:	0030                	addi	a2,sp,8
200114f4:	84aa                	mv	s1,a0
200114f6:	3f9d                	jal	2001146c <__swhatbuf_r>
200114f8:	45a2                	lw	a1,8(sp)
200114fa:	892a                	mv	s2,a0
200114fc:	8526                	mv	a0,s1
200114fe:	2a5d                	jal	200116b4 <_malloc_r>
20011500:	ed01                	bnez	a0,20011518 <__smakebuf_r+0x54>
20011502:	00c41783          	lh	a5,12(s0)
20011506:	2007f713          	andi	a4,a5,512
2001150a:	ff69                	bnez	a4,200114e4 <__smakebuf_r+0x20>
2001150c:	9bf1                	andi	a5,a5,-4
2001150e:	0027e793          	ori	a5,a5,2
20011512:	00f41623          	sh	a5,12(s0)
20011516:	b7c9                	j	200114d8 <__smakebuf_r+0x14>
20011518:	00000797          	auipc	a5,0x0
2001151c:	d9278793          	addi	a5,a5,-622 # 200112aa <_cleanup_r>
20011520:	d49c                	sw	a5,40(s1)
20011522:	00c45783          	lhu	a5,12(s0)
20011526:	c008                	sw	a0,0(s0)
20011528:	c808                	sw	a0,16(s0)
2001152a:	0807e793          	ori	a5,a5,128
2001152e:	00f41623          	sh	a5,12(s0)
20011532:	47a2                	lw	a5,8(sp)
20011534:	c85c                	sw	a5,20(s0)
20011536:	47b2                	lw	a5,12(sp)
20011538:	cf89                	beqz	a5,20011552 <__smakebuf_r+0x8e>
2001153a:	00e41583          	lh	a1,14(s0)
2001153e:	8526                	mv	a0,s1
20011540:	2d5d                	jal	20011bf6 <_isatty_r>
20011542:	c901                	beqz	a0,20011552 <__smakebuf_r+0x8e>
20011544:	00c45783          	lhu	a5,12(s0)
20011548:	9bf1                	andi	a5,a5,-4
2001154a:	0017e793          	ori	a5,a5,1
2001154e:	00f41623          	sh	a5,12(s0)
20011552:	00c45783          	lhu	a5,12(s0)
20011556:	00f96933          	or	s2,s2,a5
2001155a:	01241623          	sh	s2,12(s0)
2001155e:	b759                	j	200114e4 <__smakebuf_r+0x20>

20011560 <memset>:
memset():
20011560:	433d                	li	t1,15
20011562:	872a                	mv	a4,a0
20011564:	02c37363          	bgeu	t1,a2,2001158a <memset+0x2a>
20011568:	00f77793          	andi	a5,a4,15
2001156c:	efbd                	bnez	a5,200115ea <memset+0x8a>
2001156e:	e5ad                	bnez	a1,200115d8 <memset+0x78>
20011570:	ff067693          	andi	a3,a2,-16
20011574:	8a3d                	andi	a2,a2,15
20011576:	96ba                	add	a3,a3,a4
20011578:	c30c                	sw	a1,0(a4)
2001157a:	c34c                	sw	a1,4(a4)
2001157c:	c70c                	sw	a1,8(a4)
2001157e:	c74c                	sw	a1,12(a4)
20011580:	0741                	addi	a4,a4,16
20011582:	fed76be3          	bltu	a4,a3,20011578 <memset+0x18>
20011586:	e211                	bnez	a2,2001158a <memset+0x2a>
20011588:	8082                	ret
2001158a:	40c306b3          	sub	a3,t1,a2
2001158e:	068a                	slli	a3,a3,0x2
20011590:	00000297          	auipc	t0,0x0
20011594:	9696                	add	a3,a3,t0
20011596:	00a68067          	jr	10(a3)
2001159a:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffc0aa>
2001159e:	00b706a3          	sb	a1,13(a4)
200115a2:	00b70623          	sb	a1,12(a4)
200115a6:	00b705a3          	sb	a1,11(a4)
200115aa:	00b70523          	sb	a1,10(a4)
200115ae:	00b704a3          	sb	a1,9(a4)
200115b2:	00b70423          	sb	a1,8(a4)
200115b6:	00b703a3          	sb	a1,7(a4)
200115ba:	00b70323          	sb	a1,6(a4)
200115be:	00b702a3          	sb	a1,5(a4)
200115c2:	00b70223          	sb	a1,4(a4)
200115c6:	00b701a3          	sb	a1,3(a4)
200115ca:	00b70123          	sb	a1,2(a4)
200115ce:	00b700a3          	sb	a1,1(a4)
200115d2:	00b70023          	sb	a1,0(a4)
200115d6:	8082                	ret
200115d8:	0ff5f593          	andi	a1,a1,255
200115dc:	00859693          	slli	a3,a1,0x8
200115e0:	8dd5                	or	a1,a1,a3
200115e2:	01059693          	slli	a3,a1,0x10
200115e6:	8dd5                	or	a1,a1,a3
200115e8:	b761                	j	20011570 <memset+0x10>
200115ea:	00279693          	slli	a3,a5,0x2
200115ee:	00000297          	auipc	t0,0x0
200115f2:	9696                	add	a3,a3,t0
200115f4:	8286                	mv	t0,ra
200115f6:	fa8680e7          	jalr	-88(a3)
200115fa:	8096                	mv	ra,t0
200115fc:	17c1                	addi	a5,a5,-16
200115fe:	8f1d                	sub	a4,a4,a5
20011600:	963e                	add	a2,a2,a5
20011602:	f8c374e3          	bgeu	t1,a2,2001158a <memset+0x2a>
20011606:	b7a5                	j	2001156e <memset+0xe>

20011608 <_free_r>:
_free_r():
20011608:	c5cd                	beqz	a1,200116b2 <_free_r+0xaa>
2001160a:	ffc5a783          	lw	a5,-4(a1)
2001160e:	1141                	addi	sp,sp,-16
20011610:	c422                	sw	s0,8(sp)
20011612:	c606                	sw	ra,12(sp)
20011614:	c226                	sw	s1,4(sp)
20011616:	ffc58413          	addi	s0,a1,-4
2001161a:	0007d363          	bgez	a5,20011620 <_free_r+0x18>
2001161e:	943e                	add	s0,s0,a5
20011620:	84aa                	mv	s1,a0
20011622:	2589                	jal	20011c64 <__malloc_lock>
20011624:	5fff0797          	auipc	a5,0x5fff0
20011628:	c7c78793          	addi	a5,a5,-900 # 800012a0 <metal_segment_data_target_end>
2001162c:	439c                	lw	a5,0(a5)
2001162e:	ef89                	bnez	a5,20011648 <_free_r+0x40>
20011630:	00042223          	sw	zero,4(s0)
20011634:	5fff0797          	auipc	a5,0x5fff0
20011638:	c687a623          	sw	s0,-916(a5) # 800012a0 <metal_segment_data_target_end>
2001163c:	4422                	lw	s0,8(sp)
2001163e:	40b2                	lw	ra,12(sp)
20011640:	8526                	mv	a0,s1
20011642:	4492                	lw	s1,4(sp)
20011644:	0141                	addi	sp,sp,16
20011646:	a505                	j	20011c66 <__malloc_unlock>
20011648:	00f47e63          	bgeu	s0,a5,20011664 <_free_r+0x5c>
2001164c:	4014                	lw	a3,0(s0)
2001164e:	00d40733          	add	a4,s0,a3
20011652:	00e79663          	bne	a5,a4,2001165e <_free_r+0x56>
20011656:	4398                	lw	a4,0(a5)
20011658:	43dc                	lw	a5,4(a5)
2001165a:	9736                	add	a4,a4,a3
2001165c:	c018                	sw	a4,0(s0)
2001165e:	c05c                	sw	a5,4(s0)
20011660:	bfd1                	j	20011634 <_free_r+0x2c>
20011662:	87ba                	mv	a5,a4
20011664:	43d8                	lw	a4,4(a5)
20011666:	c319                	beqz	a4,2001166c <_free_r+0x64>
20011668:	fee47de3          	bgeu	s0,a4,20011662 <_free_r+0x5a>
2001166c:	4394                	lw	a3,0(a5)
2001166e:	00d78633          	add	a2,a5,a3
20011672:	00861f63          	bne	a2,s0,20011690 <_free_r+0x88>
20011676:	4010                	lw	a2,0(s0)
20011678:	96b2                	add	a3,a3,a2
2001167a:	c394                	sw	a3,0(a5)
2001167c:	00d78633          	add	a2,a5,a3
20011680:	fac71ee3          	bne	a4,a2,2001163c <_free_r+0x34>
20011684:	4310                	lw	a2,0(a4)
20011686:	4358                	lw	a4,4(a4)
20011688:	96b2                	add	a3,a3,a2
2001168a:	c394                	sw	a3,0(a5)
2001168c:	c3d8                	sw	a4,4(a5)
2001168e:	b77d                	j	2001163c <_free_r+0x34>
20011690:	00c47563          	bgeu	s0,a2,2001169a <_free_r+0x92>
20011694:	47b1                	li	a5,12
20011696:	c09c                	sw	a5,0(s1)
20011698:	b755                	j	2001163c <_free_r+0x34>
2001169a:	4010                	lw	a2,0(s0)
2001169c:	00c406b3          	add	a3,s0,a2
200116a0:	00d71663          	bne	a4,a3,200116ac <_free_r+0xa4>
200116a4:	4314                	lw	a3,0(a4)
200116a6:	4358                	lw	a4,4(a4)
200116a8:	96b2                	add	a3,a3,a2
200116aa:	c014                	sw	a3,0(s0)
200116ac:	c058                	sw	a4,4(s0)
200116ae:	c3c0                	sw	s0,4(a5)
200116b0:	b771                	j	2001163c <_free_r+0x34>
200116b2:	8082                	ret

200116b4 <_malloc_r>:
_malloc_r():
200116b4:	1101                	addi	sp,sp,-32
200116b6:	ca26                	sw	s1,20(sp)
200116b8:	00358493          	addi	s1,a1,3
200116bc:	98f1                	andi	s1,s1,-4
200116be:	ce06                	sw	ra,28(sp)
200116c0:	cc22                	sw	s0,24(sp)
200116c2:	c84a                	sw	s2,16(sp)
200116c4:	c64e                	sw	s3,12(sp)
200116c6:	04a1                	addi	s1,s1,8
200116c8:	47b1                	li	a5,12
200116ca:	04f4f763          	bgeu	s1,a5,20011718 <_malloc_r+0x64>
200116ce:	44b1                	li	s1,12
200116d0:	04b4e663          	bltu	s1,a1,2001171c <_malloc_r+0x68>
200116d4:	892a                	mv	s2,a0
200116d6:	2379                	jal	20011c64 <__malloc_lock>
200116d8:	5fff0797          	auipc	a5,0x5fff0
200116dc:	bc878793          	addi	a5,a5,-1080 # 800012a0 <metal_segment_data_target_end>
200116e0:	4398                	lw	a4,0(a5)
200116e2:	843a                	mv	s0,a4
200116e4:	e431                	bnez	s0,20011730 <_malloc_r+0x7c>
200116e6:	5fff0797          	auipc	a5,0x5fff0
200116ea:	bbe78793          	addi	a5,a5,-1090 # 800012a4 <__malloc_sbrk_start>
200116ee:	439c                	lw	a5,0(a5)
200116f0:	eb81                	bnez	a5,20011700 <_malloc_r+0x4c>
200116f2:	4581                	li	a1,0
200116f4:	854a                	mv	a0,s2
200116f6:	2645                	jal	20011a96 <_sbrk_r>
200116f8:	5fff0797          	auipc	a5,0x5fff0
200116fc:	baa7a623          	sw	a0,-1108(a5) # 800012a4 <__malloc_sbrk_start>
20011700:	85a6                	mv	a1,s1
20011702:	854a                	mv	a0,s2
20011704:	2e49                	jal	20011a96 <_sbrk_r>
20011706:	59fd                	li	s3,-1
20011708:	07351963          	bne	a0,s3,2001177a <_malloc_r+0xc6>
2001170c:	47b1                	li	a5,12
2001170e:	00f92023          	sw	a5,0(s2)
20011712:	854a                	mv	a0,s2
20011714:	2b89                	jal	20011c66 <__malloc_unlock>
20011716:	a029                	j	20011720 <_malloc_r+0x6c>
20011718:	fa04dce3          	bgez	s1,200116d0 <_malloc_r+0x1c>
2001171c:	47b1                	li	a5,12
2001171e:	c11c                	sw	a5,0(a0)
20011720:	4501                	li	a0,0
20011722:	40f2                	lw	ra,28(sp)
20011724:	4462                	lw	s0,24(sp)
20011726:	44d2                	lw	s1,20(sp)
20011728:	4942                	lw	s2,16(sp)
2001172a:	49b2                	lw	s3,12(sp)
2001172c:	6105                	addi	sp,sp,32
2001172e:	8082                	ret
20011730:	401c                	lw	a5,0(s0)
20011732:	8f85                	sub	a5,a5,s1
20011734:	0407c063          	bltz	a5,20011774 <_malloc_r+0xc0>
20011738:	46ad                	li	a3,11
2001173a:	00f6f663          	bgeu	a3,a5,20011746 <_malloc_r+0x92>
2001173e:	c01c                	sw	a5,0(s0)
20011740:	943e                	add	s0,s0,a5
20011742:	c004                	sw	s1,0(s0)
20011744:	a801                	j	20011754 <_malloc_r+0xa0>
20011746:	405c                	lw	a5,4(s0)
20011748:	02871463          	bne	a4,s0,20011770 <_malloc_r+0xbc>
2001174c:	5fff0717          	auipc	a4,0x5fff0
20011750:	b4f72a23          	sw	a5,-1196(a4) # 800012a0 <metal_segment_data_target_end>
20011754:	854a                	mv	a0,s2
20011756:	2b01                	jal	20011c66 <__malloc_unlock>
20011758:	00b40513          	addi	a0,s0,11
2001175c:	00440793          	addi	a5,s0,4
20011760:	9961                	andi	a0,a0,-8
20011762:	40f50733          	sub	a4,a0,a5
20011766:	df55                	beqz	a4,20011722 <_malloc_r+0x6e>
20011768:	943a                	add	s0,s0,a4
2001176a:	8f89                	sub	a5,a5,a0
2001176c:	c01c                	sw	a5,0(s0)
2001176e:	bf55                	j	20011722 <_malloc_r+0x6e>
20011770:	c35c                	sw	a5,4(a4)
20011772:	b7cd                	j	20011754 <_malloc_r+0xa0>
20011774:	8722                	mv	a4,s0
20011776:	4040                	lw	s0,4(s0)
20011778:	b7b5                	j	200116e4 <_malloc_r+0x30>
2001177a:	00350413          	addi	s0,a0,3
2001177e:	9871                	andi	s0,s0,-4
20011780:	fc8501e3          	beq	a0,s0,20011742 <_malloc_r+0x8e>
20011784:	40a405b3          	sub	a1,s0,a0
20011788:	854a                	mv	a0,s2
2001178a:	2631                	jal	20011a96 <_sbrk_r>
2001178c:	fb351be3          	bne	a0,s3,20011742 <_malloc_r+0x8e>
20011790:	bfb5                	j	2001170c <_malloc_r+0x58>

20011792 <__sfputc_r>:
__sfputc_r():
20011792:	461c                	lw	a5,8(a2)
20011794:	17fd                	addi	a5,a5,-1
20011796:	c61c                	sw	a5,8(a2)
20011798:	0007da63          	bgez	a5,200117ac <__sfputc_r+0x1a>
2001179c:	4e18                	lw	a4,24(a2)
2001179e:	00e7c563          	blt	a5,a4,200117a8 <__sfputc_r+0x16>
200117a2:	47a9                	li	a5,10
200117a4:	00f59463          	bne	a1,a5,200117ac <__sfputc_r+0x1a>
200117a8:	f1cff06f          	j	20010ec4 <__swbuf_r>
200117ac:	421c                	lw	a5,0(a2)
200117ae:	852e                	mv	a0,a1
200117b0:	00178713          	addi	a4,a5,1
200117b4:	c218                	sw	a4,0(a2)
200117b6:	00b78023          	sb	a1,0(a5)
200117ba:	8082                	ret

200117bc <__sfputs_r>:
__sfputs_r():
200117bc:	1101                	addi	sp,sp,-32
200117be:	cc22                	sw	s0,24(sp)
200117c0:	ca26                	sw	s1,20(sp)
200117c2:	c84a                	sw	s2,16(sp)
200117c4:	c64e                	sw	s3,12(sp)
200117c6:	c452                	sw	s4,8(sp)
200117c8:	ce06                	sw	ra,28(sp)
200117ca:	892a                	mv	s2,a0
200117cc:	89ae                	mv	s3,a1
200117ce:	8432                	mv	s0,a2
200117d0:	00d604b3          	add	s1,a2,a3
200117d4:	5a7d                	li	s4,-1
200117d6:	00941463          	bne	s0,s1,200117de <__sfputs_r+0x22>
200117da:	4501                	li	a0,0
200117dc:	a809                	j	200117ee <__sfputs_r+0x32>
200117de:	00044583          	lbu	a1,0(s0)
200117e2:	864e                	mv	a2,s3
200117e4:	854a                	mv	a0,s2
200117e6:	3775                	jal	20011792 <__sfputc_r>
200117e8:	0405                	addi	s0,s0,1
200117ea:	ff4516e3          	bne	a0,s4,200117d6 <__sfputs_r+0x1a>
200117ee:	40f2                	lw	ra,28(sp)
200117f0:	4462                	lw	s0,24(sp)
200117f2:	44d2                	lw	s1,20(sp)
200117f4:	4942                	lw	s2,16(sp)
200117f6:	49b2                	lw	s3,12(sp)
200117f8:	4a22                	lw	s4,8(sp)
200117fa:	6105                	addi	sp,sp,32
200117fc:	8082                	ret

200117fe <_vfiprintf_r>:
_vfiprintf_r():
200117fe:	7135                	addi	sp,sp,-160
20011800:	cd22                	sw	s0,152(sp)
20011802:	cb26                	sw	s1,148(sp)
20011804:	c94a                	sw	s2,144(sp)
20011806:	c74e                	sw	s3,140(sp)
20011808:	cf06                	sw	ra,156(sp)
2001180a:	c552                	sw	s4,136(sp)
2001180c:	c356                	sw	s5,132(sp)
2001180e:	c15a                	sw	s6,128(sp)
20011810:	dede                	sw	s7,124(sp)
20011812:	dce2                	sw	s8,120(sp)
20011814:	dae6                	sw	s9,116(sp)
20011816:	89aa                	mv	s3,a0
20011818:	84ae                	mv	s1,a1
2001181a:	8932                	mv	s2,a2
2001181c:	8436                	mv	s0,a3
2001181e:	c501                	beqz	a0,20011826 <_vfiprintf_r+0x28>
20011820:	4d1c                	lw	a5,24(a0)
20011822:	e391                	bnez	a5,20011826 <_vfiprintf_r+0x28>
20011824:	3cd1                	jal	200112f8 <__sinit>
20011826:	00005797          	auipc	a5,0x5
2001182a:	03e78793          	addi	a5,a5,62 # 20016864 <__sf_fake_stdin>
2001182e:	0cf49b63          	bne	s1,a5,20011904 <_vfiprintf_r+0x106>
20011832:	0049a483          	lw	s1,4(s3)
20011836:	00c4d783          	lhu	a5,12(s1)
2001183a:	8ba1                	andi	a5,a5,8
2001183c:	c7f5                	beqz	a5,20011928 <_vfiprintf_r+0x12a>
2001183e:	489c                	lw	a5,16(s1)
20011840:	c7e5                	beqz	a5,20011928 <_vfiprintf_r+0x12a>
20011842:	02000793          	li	a5,32
20011846:	02f104a3          	sb	a5,41(sp)
2001184a:	03000793          	li	a5,48
2001184e:	d202                	sw	zero,36(sp)
20011850:	02f10523          	sb	a5,42(sp)
20011854:	c622                	sw	s0,12(sp)
20011856:	02500b93          	li	s7,37
2001185a:	00005a97          	auipc	s5,0x5
2001185e:	04aa8a93          	addi	s5,s5,74 # 200168a4 <__sf_fake_stdout+0x20>
20011862:	4c05                	li	s8,1
20011864:	4b29                	li	s6,10
20011866:	844a                	mv	s0,s2
20011868:	00044783          	lbu	a5,0(s0)
2001186c:	c399                	beqz	a5,20011872 <_vfiprintf_r+0x74>
2001186e:	0f779063          	bne	a5,s7,2001194e <_vfiprintf_r+0x150>
20011872:	41240cb3          	sub	s9,s0,s2
20011876:	000c8d63          	beqz	s9,20011890 <_vfiprintf_r+0x92>
2001187a:	86e6                	mv	a3,s9
2001187c:	864a                	mv	a2,s2
2001187e:	85a6                	mv	a1,s1
20011880:	854e                	mv	a0,s3
20011882:	3f2d                	jal	200117bc <__sfputs_r>
20011884:	57fd                	li	a5,-1
20011886:	1ef50663          	beq	a0,a5,20011a72 <_vfiprintf_r+0x274>
2001188a:	5692                	lw	a3,36(sp)
2001188c:	96e6                	add	a3,a3,s9
2001188e:	d236                	sw	a3,36(sp)
20011890:	00044783          	lbu	a5,0(s0)
20011894:	1c078f63          	beqz	a5,20011a72 <_vfiprintf_r+0x274>
20011898:	57fd                	li	a5,-1
2001189a:	00140913          	addi	s2,s0,1
2001189e:	c802                	sw	zero,16(sp)
200118a0:	ce02                	sw	zero,28(sp)
200118a2:	ca3e                	sw	a5,20(sp)
200118a4:	cc02                	sw	zero,24(sp)
200118a6:	040109a3          	sb	zero,83(sp)
200118aa:	d482                	sw	zero,104(sp)
200118ac:	00094583          	lbu	a1,0(s2)
200118b0:	4615                	li	a2,5
200118b2:	8556                	mv	a0,s5
200118b4:	2e59                	jal	20011c4a <memchr>
200118b6:	00190413          	addi	s0,s2,1
200118ba:	47c2                	lw	a5,16(sp)
200118bc:	e959                	bnez	a0,20011952 <_vfiprintf_r+0x154>
200118be:	0107f713          	andi	a4,a5,16
200118c2:	c709                	beqz	a4,200118cc <_vfiprintf_r+0xce>
200118c4:	02000713          	li	a4,32
200118c8:	04e109a3          	sb	a4,83(sp)
200118cc:	0087f713          	andi	a4,a5,8
200118d0:	c709                	beqz	a4,200118da <_vfiprintf_r+0xdc>
200118d2:	02b00713          	li	a4,43
200118d6:	04e109a3          	sb	a4,83(sp)
200118da:	00094683          	lbu	a3,0(s2)
200118de:	02a00713          	li	a4,42
200118e2:	08e68063          	beq	a3,a4,20011962 <_vfiprintf_r+0x164>
200118e6:	47f2                	lw	a5,28(sp)
200118e8:	844a                	mv	s0,s2
200118ea:	4681                	li	a3,0
200118ec:	4625                	li	a2,9
200118ee:	00044703          	lbu	a4,0(s0)
200118f2:	00140593          	addi	a1,s0,1
200118f6:	fd070713          	addi	a4,a4,-48
200118fa:	0ae67963          	bgeu	a2,a4,200119ac <_vfiprintf_r+0x1ae>
200118fe:	cab5                	beqz	a3,20011972 <_vfiprintf_r+0x174>
20011900:	ce3e                	sw	a5,28(sp)
20011902:	a885                	j	20011972 <_vfiprintf_r+0x174>
20011904:	00005797          	auipc	a5,0x5
20011908:	f8078793          	addi	a5,a5,-128 # 20016884 <__sf_fake_stdout>
2001190c:	00f49563          	bne	s1,a5,20011916 <_vfiprintf_r+0x118>
20011910:	0089a483          	lw	s1,8(s3)
20011914:	b70d                	j	20011836 <_vfiprintf_r+0x38>
20011916:	00005797          	auipc	a5,0x5
2001191a:	f2e78793          	addi	a5,a5,-210 # 20016844 <__sf_fake_stderr>
2001191e:	f0f49ce3          	bne	s1,a5,20011836 <_vfiprintf_r+0x38>
20011922:	00c9a483          	lw	s1,12(s3)
20011926:	bf01                	j	20011836 <_vfiprintf_r+0x38>
20011928:	85a6                	mv	a1,s1
2001192a:	854e                	mv	a0,s3
2001192c:	e58ff0ef          	jal	ra,20010f84 <__swsetup_r>
20011930:	d909                	beqz	a0,20011842 <_vfiprintf_r+0x44>
20011932:	557d                	li	a0,-1
20011934:	40fa                	lw	ra,156(sp)
20011936:	446a                	lw	s0,152(sp)
20011938:	44da                	lw	s1,148(sp)
2001193a:	494a                	lw	s2,144(sp)
2001193c:	49ba                	lw	s3,140(sp)
2001193e:	4a2a                	lw	s4,136(sp)
20011940:	4a9a                	lw	s5,132(sp)
20011942:	4b0a                	lw	s6,128(sp)
20011944:	5bf6                	lw	s7,124(sp)
20011946:	5c66                	lw	s8,120(sp)
20011948:	5cd6                	lw	s9,116(sp)
2001194a:	610d                	addi	sp,sp,160
2001194c:	8082                	ret
2001194e:	0405                	addi	s0,s0,1
20011950:	bf21                	j	20011868 <_vfiprintf_r+0x6a>
20011952:	41550533          	sub	a0,a0,s5
20011956:	00ac1533          	sll	a0,s8,a0
2001195a:	8fc9                	or	a5,a5,a0
2001195c:	c83e                	sw	a5,16(sp)
2001195e:	8922                	mv	s2,s0
20011960:	b7b1                	j	200118ac <_vfiprintf_r+0xae>
20011962:	4732                	lw	a4,12(sp)
20011964:	00470693          	addi	a3,a4,4
20011968:	4318                	lw	a4,0(a4)
2001196a:	c636                	sw	a3,12(sp)
2001196c:	02074963          	bltz	a4,2001199e <_vfiprintf_r+0x1a0>
20011970:	ce3a                	sw	a4,28(sp)
20011972:	00044703          	lbu	a4,0(s0)
20011976:	02e00793          	li	a5,46
2001197a:	04f71f63          	bne	a4,a5,200119d8 <_vfiprintf_r+0x1da>
2001197e:	00144703          	lbu	a4,1(s0)
20011982:	02a00793          	li	a5,42
20011986:	02f71b63          	bne	a4,a5,200119bc <_vfiprintf_r+0x1be>
2001198a:	47b2                	lw	a5,12(sp)
2001198c:	0409                	addi	s0,s0,2
2001198e:	00478713          	addi	a4,a5,4
20011992:	439c                	lw	a5,0(a5)
20011994:	c63a                	sw	a4,12(sp)
20011996:	0207c163          	bltz	a5,200119b8 <_vfiprintf_r+0x1ba>
2001199a:	ca3e                	sw	a5,20(sp)
2001199c:	a835                	j	200119d8 <_vfiprintf_r+0x1da>
2001199e:	40e00733          	neg	a4,a4
200119a2:	0027e793          	ori	a5,a5,2
200119a6:	ce3a                	sw	a4,28(sp)
200119a8:	c83e                	sw	a5,16(sp)
200119aa:	b7e1                	j	20011972 <_vfiprintf_r+0x174>
200119ac:	036787b3          	mul	a5,a5,s6
200119b0:	4685                	li	a3,1
200119b2:	842e                	mv	s0,a1
200119b4:	97ba                	add	a5,a5,a4
200119b6:	bf25                	j	200118ee <_vfiprintf_r+0xf0>
200119b8:	57fd                	li	a5,-1
200119ba:	b7c5                	j	2001199a <_vfiprintf_r+0x19c>
200119bc:	0405                	addi	s0,s0,1
200119be:	ca02                	sw	zero,20(sp)
200119c0:	4681                	li	a3,0
200119c2:	4781                	li	a5,0
200119c4:	4625                	li	a2,9
200119c6:	00044703          	lbu	a4,0(s0)
200119ca:	00140593          	addi	a1,s0,1
200119ce:	fd070713          	addi	a4,a4,-48
200119d2:	06e67663          	bgeu	a2,a4,20011a3e <_vfiprintf_r+0x240>
200119d6:	f2f1                	bnez	a3,2001199a <_vfiprintf_r+0x19c>
200119d8:	00044583          	lbu	a1,0(s0)
200119dc:	460d                	li	a2,3
200119de:	00005517          	auipc	a0,0x5
200119e2:	ece50513          	addi	a0,a0,-306 # 200168ac <__sf_fake_stdout+0x28>
200119e6:	2495                	jal	20011c4a <memchr>
200119e8:	cd11                	beqz	a0,20011a04 <_vfiprintf_r+0x206>
200119ea:	00005797          	auipc	a5,0x5
200119ee:	ec278793          	addi	a5,a5,-318 # 200168ac <__sf_fake_stdout+0x28>
200119f2:	8d1d                	sub	a0,a0,a5
200119f4:	04000793          	li	a5,64
200119f8:	00a797b3          	sll	a5,a5,a0
200119fc:	4542                	lw	a0,16(sp)
200119fe:	0405                	addi	s0,s0,1
20011a00:	8d5d                	or	a0,a0,a5
20011a02:	c82a                	sw	a0,16(sp)
20011a04:	00044583          	lbu	a1,0(s0)
20011a08:	4619                	li	a2,6
20011a0a:	00005517          	auipc	a0,0x5
20011a0e:	ea650513          	addi	a0,a0,-346 # 200168b0 <__sf_fake_stdout+0x2c>
20011a12:	00140913          	addi	s2,s0,1
20011a16:	02b10423          	sb	a1,40(sp)
20011a1a:	2c05                	jal	20011c4a <memchr>
20011a1c:	c13d                	beqz	a0,20011a82 <_vfiprintf_r+0x284>
20011a1e:	dffee797          	auipc	a5,0xdffee
20011a22:	5e278793          	addi	a5,a5,1506 # 0 <__metal_boot_hart>
20011a26:	e795                	bnez	a5,20011a52 <_vfiprintf_r+0x254>
20011a28:	4742                	lw	a4,16(sp)
20011a2a:	47b2                	lw	a5,12(sp)
20011a2c:	10077713          	andi	a4,a4,256
20011a30:	cf09                	beqz	a4,20011a4a <_vfiprintf_r+0x24c>
20011a32:	0791                	addi	a5,a5,4
20011a34:	c63e                	sw	a5,12(sp)
20011a36:	5792                	lw	a5,36(sp)
20011a38:	97d2                	add	a5,a5,s4
20011a3a:	d23e                	sw	a5,36(sp)
20011a3c:	b52d                	j	20011866 <_vfiprintf_r+0x68>
20011a3e:	036787b3          	mul	a5,a5,s6
20011a42:	4685                	li	a3,1
20011a44:	842e                	mv	s0,a1
20011a46:	97ba                	add	a5,a5,a4
20011a48:	bfbd                	j	200119c6 <_vfiprintf_r+0x1c8>
20011a4a:	079d                	addi	a5,a5,7
20011a4c:	9be1                	andi	a5,a5,-8
20011a4e:	07a1                	addi	a5,a5,8
20011a50:	b7d5                	j	20011a34 <_vfiprintf_r+0x236>
20011a52:	0078                	addi	a4,sp,12
20011a54:	00000697          	auipc	a3,0x0
20011a58:	d6868693          	addi	a3,a3,-664 # 200117bc <__sfputs_r>
20011a5c:	8626                	mv	a2,s1
20011a5e:	080c                	addi	a1,sp,16
20011a60:	854e                	mv	a0,s3
20011a62:	00000097          	auipc	ra,0x0
20011a66:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20011a6a:	57fd                	li	a5,-1
20011a6c:	8a2a                	mv	s4,a0
20011a6e:	fcf514e3          	bne	a0,a5,20011a36 <_vfiprintf_r+0x238>
20011a72:	00c4d783          	lhu	a5,12(s1)
20011a76:	0407f793          	andi	a5,a5,64
20011a7a:	ea079ce3          	bnez	a5,20011932 <_vfiprintf_r+0x134>
20011a7e:	5512                	lw	a0,36(sp)
20011a80:	bd55                	j	20011934 <_vfiprintf_r+0x136>
20011a82:	0078                	addi	a4,sp,12
20011a84:	00000697          	auipc	a3,0x0
20011a88:	d3868693          	addi	a3,a3,-712 # 200117bc <__sfputs_r>
20011a8c:	8626                	mv	a2,s1
20011a8e:	080c                	addi	a1,sp,16
20011a90:	854e                	mv	a0,s3
20011a92:	24cd                	jal	20011d74 <_printf_i>
20011a94:	bfd9                	j	20011a6a <_vfiprintf_r+0x26c>

20011a96 <_sbrk_r>:
_sbrk_r():
20011a96:	1141                	addi	sp,sp,-16
20011a98:	c422                	sw	s0,8(sp)
20011a9a:	842a                	mv	s0,a0
20011a9c:	852e                	mv	a0,a1
20011a9e:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20011aa2:	c606                	sw	ra,12(sp)
20011aa4:	2da9                	jal	200120fe <_sbrk>
20011aa6:	57fd                	li	a5,-1
20011aa8:	00f51763          	bne	a0,a5,20011ab6 <_sbrk_r+0x20>
20011aac:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20011ab0:	439c                	lw	a5,0(a5)
20011ab2:	c391                	beqz	a5,20011ab6 <_sbrk_r+0x20>
20011ab4:	c01c                	sw	a5,0(s0)
20011ab6:	40b2                	lw	ra,12(sp)
20011ab8:	4422                	lw	s0,8(sp)
20011aba:	0141                	addi	sp,sp,16
20011abc:	8082                	ret

20011abe <__sread>:
__sread():
20011abe:	1141                	addi	sp,sp,-16
20011ac0:	c422                	sw	s0,8(sp)
20011ac2:	842e                	mv	s0,a1
20011ac4:	00e59583          	lh	a1,14(a1)
20011ac8:	c606                	sw	ra,12(sp)
20011aca:	23b1                	jal	20012016 <_read_r>
20011acc:	00054963          	bltz	a0,20011ade <__sread+0x20>
20011ad0:	487c                	lw	a5,84(s0)
20011ad2:	97aa                	add	a5,a5,a0
20011ad4:	c87c                	sw	a5,84(s0)
20011ad6:	40b2                	lw	ra,12(sp)
20011ad8:	4422                	lw	s0,8(sp)
20011ada:	0141                	addi	sp,sp,16
20011adc:	8082                	ret
20011ade:	00c45783          	lhu	a5,12(s0)
20011ae2:	777d                	lui	a4,0xfffff
20011ae4:	177d                	addi	a4,a4,-1
20011ae6:	8ff9                	and	a5,a5,a4
20011ae8:	00f41623          	sh	a5,12(s0)
20011aec:	b7ed                	j	20011ad6 <__sread+0x18>

20011aee <__swrite>:
__swrite():
20011aee:	00c5d783          	lhu	a5,12(a1)
20011af2:	1101                	addi	sp,sp,-32
20011af4:	cc22                	sw	s0,24(sp)
20011af6:	ca26                	sw	s1,20(sp)
20011af8:	c84a                	sw	s2,16(sp)
20011afa:	c64e                	sw	s3,12(sp)
20011afc:	ce06                	sw	ra,28(sp)
20011afe:	1007f793          	andi	a5,a5,256
20011b02:	84aa                	mv	s1,a0
20011b04:	842e                	mv	s0,a1
20011b06:	8932                	mv	s2,a2
20011b08:	89b6                	mv	s3,a3
20011b0a:	c791                	beqz	a5,20011b16 <__swrite+0x28>
20011b0c:	00e59583          	lh	a1,14(a1)
20011b10:	4689                	li	a3,2
20011b12:	4601                	li	a2,0
20011b14:	2229                	jal	20011c1e <_lseek_r>
20011b16:	00c45783          	lhu	a5,12(s0)
20011b1a:	777d                	lui	a4,0xfffff
20011b1c:	177d                	addi	a4,a4,-1
20011b1e:	8ff9                	and	a5,a5,a4
20011b20:	00f41623          	sh	a5,12(s0)
20011b24:	00e41583          	lh	a1,14(s0)
20011b28:	4462                	lw	s0,24(sp)
20011b2a:	40f2                	lw	ra,28(sp)
20011b2c:	86ce                	mv	a3,s3
20011b2e:	864a                	mv	a2,s2
20011b30:	49b2                	lw	s3,12(sp)
20011b32:	4942                	lw	s2,16(sp)
20011b34:	8526                	mv	a0,s1
20011b36:	44d2                	lw	s1,20(sp)
20011b38:	6105                	addi	sp,sp,32
20011b3a:	a83d                	j	20011b78 <_write_r>

20011b3c <__sseek>:
__sseek():
20011b3c:	1141                	addi	sp,sp,-16
20011b3e:	c422                	sw	s0,8(sp)
20011b40:	842e                	mv	s0,a1
20011b42:	00e59583          	lh	a1,14(a1)
20011b46:	c606                	sw	ra,12(sp)
20011b48:	28d9                	jal	20011c1e <_lseek_r>
20011b4a:	57fd                	li	a5,-1
20011b4c:	00c45703          	lhu	a4,12(s0)
20011b50:	00f51b63          	bne	a0,a5,20011b66 <__sseek+0x2a>
20011b54:	77fd                	lui	a5,0xfffff
20011b56:	17fd                	addi	a5,a5,-1
20011b58:	8ff9                	and	a5,a5,a4
20011b5a:	00f41623          	sh	a5,12(s0)
20011b5e:	40b2                	lw	ra,12(sp)
20011b60:	4422                	lw	s0,8(sp)
20011b62:	0141                	addi	sp,sp,16
20011b64:	8082                	ret
20011b66:	6785                	lui	a5,0x1
20011b68:	8fd9                	or	a5,a5,a4
20011b6a:	00f41623          	sh	a5,12(s0)
20011b6e:	c868                	sw	a0,84(s0)
20011b70:	b7fd                	j	20011b5e <__sseek+0x22>

20011b72 <__sclose>:
__sclose():
20011b72:	00e59583          	lh	a1,14(a1)
20011b76:	a03d                	j	20011ba4 <_close_r>

20011b78 <_write_r>:
_write_r():
20011b78:	1141                	addi	sp,sp,-16
20011b7a:	c422                	sw	s0,8(sp)
20011b7c:	842a                	mv	s0,a0
20011b7e:	852e                	mv	a0,a1
20011b80:	85b2                	mv	a1,a2
20011b82:	8636                	mv	a2,a3
20011b84:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20011b88:	c606                	sw	ra,12(sp)
20011b8a:	23cd                	jal	2001216c <_write>
20011b8c:	57fd                	li	a5,-1
20011b8e:	00f51763          	bne	a0,a5,20011b9c <_write_r+0x24>
20011b92:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20011b96:	439c                	lw	a5,0(a5)
20011b98:	c391                	beqz	a5,20011b9c <_write_r+0x24>
20011b9a:	c01c                	sw	a5,0(s0)
20011b9c:	40b2                	lw	ra,12(sp)
20011b9e:	4422                	lw	s0,8(sp)
20011ba0:	0141                	addi	sp,sp,16
20011ba2:	8082                	ret

20011ba4 <_close_r>:
_close_r():
20011ba4:	1141                	addi	sp,sp,-16
20011ba6:	c422                	sw	s0,8(sp)
20011ba8:	842a                	mv	s0,a0
20011baa:	852e                	mv	a0,a1
20011bac:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20011bb0:	c606                	sw	ra,12(sp)
20011bb2:	2941                	jal	20012042 <_close>
20011bb4:	57fd                	li	a5,-1
20011bb6:	00f51763          	bne	a0,a5,20011bc4 <_close_r+0x20>
20011bba:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20011bbe:	439c                	lw	a5,0(a5)
20011bc0:	c391                	beqz	a5,20011bc4 <_close_r+0x20>
20011bc2:	c01c                	sw	a5,0(s0)
20011bc4:	40b2                	lw	ra,12(sp)
20011bc6:	4422                	lw	s0,8(sp)
20011bc8:	0141                	addi	sp,sp,16
20011bca:	8082                	ret

20011bcc <_fstat_r>:
_fstat_r():
20011bcc:	1141                	addi	sp,sp,-16
20011bce:	c422                	sw	s0,8(sp)
20011bd0:	842a                	mv	s0,a0
20011bd2:	852e                	mv	a0,a1
20011bd4:	85b2                	mv	a1,a2
20011bd6:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20011bda:	c606                	sw	ra,12(sp)
20011bdc:	2161                	jal	20012064 <_fstat>
20011bde:	57fd                	li	a5,-1
20011be0:	00f51763          	bne	a0,a5,20011bee <_fstat_r+0x22>
20011be4:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20011be8:	439c                	lw	a5,0(a5)
20011bea:	c391                	beqz	a5,20011bee <_fstat_r+0x22>
20011bec:	c01c                	sw	a5,0(s0)
20011bee:	40b2                	lw	ra,12(sp)
20011bf0:	4422                	lw	s0,8(sp)
20011bf2:	0141                	addi	sp,sp,16
20011bf4:	8082                	ret

20011bf6 <_isatty_r>:
_isatty_r():
20011bf6:	1141                	addi	sp,sp,-16
20011bf8:	c422                	sw	s0,8(sp)
20011bfa:	842a                	mv	s0,a0
20011bfc:	852e                	mv	a0,a1
20011bfe:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20011c02:	c606                	sw	ra,12(sp)
20011c04:	2159                	jal	2001208a <_isatty>
20011c06:	57fd                	li	a5,-1
20011c08:	00f51763          	bne	a0,a5,20011c16 <_isatty_r+0x20>
20011c0c:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20011c10:	439c                	lw	a5,0(a5)
20011c12:	c391                	beqz	a5,20011c16 <_isatty_r+0x20>
20011c14:	c01c                	sw	a5,0(s0)
20011c16:	40b2                	lw	ra,12(sp)
20011c18:	4422                	lw	s0,8(sp)
20011c1a:	0141                	addi	sp,sp,16
20011c1c:	8082                	ret

20011c1e <_lseek_r>:
_lseek_r():
20011c1e:	1141                	addi	sp,sp,-16
20011c20:	c422                	sw	s0,8(sp)
20011c22:	842a                	mv	s0,a0
20011c24:	852e                	mv	a0,a1
20011c26:	85b2                	mv	a1,a2
20011c28:	8636                	mv	a2,a3
20011c2a:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20011c2e:	c606                	sw	ra,12(sp)
20011c30:	29ad                	jal	200120aa <_lseek>
20011c32:	57fd                	li	a5,-1
20011c34:	00f51763          	bne	a0,a5,20011c42 <_lseek_r+0x24>
20011c38:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20011c3c:	439c                	lw	a5,0(a5)
20011c3e:	c391                	beqz	a5,20011c42 <_lseek_r+0x24>
20011c40:	c01c                	sw	a5,0(s0)
20011c42:	40b2                	lw	ra,12(sp)
20011c44:	4422                	lw	s0,8(sp)
20011c46:	0141                	addi	sp,sp,16
20011c48:	8082                	ret

20011c4a <memchr>:
memchr():
20011c4a:	0ff5f593          	andi	a1,a1,255
20011c4e:	962a                	add	a2,a2,a0
20011c50:	00c51463          	bne	a0,a2,20011c58 <memchr+0xe>
20011c54:	4501                	li	a0,0
20011c56:	8082                	ret
20011c58:	00054783          	lbu	a5,0(a0)
20011c5c:	feb78de3          	beq	a5,a1,20011c56 <memchr+0xc>
20011c60:	0505                	addi	a0,a0,1
20011c62:	b7fd                	j	20011c50 <memchr+0x6>

20011c64 <__malloc_lock>:
__malloc_lock():
20011c64:	8082                	ret

20011c66 <__malloc_unlock>:
__malloc_unlock():
20011c66:	8082                	ret

20011c68 <_printf_common>:
_printf_common():
20011c68:	7179                	addi	sp,sp,-48
20011c6a:	ca56                	sw	s5,20(sp)
20011c6c:	499c                	lw	a5,16(a1)
20011c6e:	8aba                	mv	s5,a4
20011c70:	4598                	lw	a4,8(a1)
20011c72:	d422                	sw	s0,40(sp)
20011c74:	d226                	sw	s1,36(sp)
20011c76:	ce4e                	sw	s3,28(sp)
20011c78:	cc52                	sw	s4,24(sp)
20011c7a:	d606                	sw	ra,44(sp)
20011c7c:	d04a                	sw	s2,32(sp)
20011c7e:	c85a                	sw	s6,16(sp)
20011c80:	c65e                	sw	s7,12(sp)
20011c82:	89aa                	mv	s3,a0
20011c84:	842e                	mv	s0,a1
20011c86:	84b2                	mv	s1,a2
20011c88:	8a36                	mv	s4,a3
20011c8a:	00e7d363          	bge	a5,a4,20011c90 <_printf_common+0x28>
20011c8e:	87ba                	mv	a5,a4
20011c90:	c09c                	sw	a5,0(s1)
20011c92:	04344703          	lbu	a4,67(s0)
20011c96:	c319                	beqz	a4,20011c9c <_printf_common+0x34>
20011c98:	0785                	addi	a5,a5,1
20011c9a:	c09c                	sw	a5,0(s1)
20011c9c:	401c                	lw	a5,0(s0)
20011c9e:	0207f793          	andi	a5,a5,32
20011ca2:	c781                	beqz	a5,20011caa <_printf_common+0x42>
20011ca4:	409c                	lw	a5,0(s1)
20011ca6:	0789                	addi	a5,a5,2
20011ca8:	c09c                	sw	a5,0(s1)
20011caa:	00042903          	lw	s2,0(s0)
20011cae:	00697913          	andi	s2,s2,6
20011cb2:	00091a63          	bnez	s2,20011cc6 <_printf_common+0x5e>
20011cb6:	01940b13          	addi	s6,s0,25
20011cba:	5bfd                	li	s7,-1
20011cbc:	445c                	lw	a5,12(s0)
20011cbe:	4098                	lw	a4,0(s1)
20011cc0:	8f99                	sub	a5,a5,a4
20011cc2:	04f94c63          	blt	s2,a5,20011d1a <_printf_common+0xb2>
20011cc6:	401c                	lw	a5,0(s0)
20011cc8:	04344683          	lbu	a3,67(s0)
20011ccc:	0207f793          	andi	a5,a5,32
20011cd0:	00d036b3          	snez	a3,a3
20011cd4:	eba5                	bnez	a5,20011d44 <_printf_common+0xdc>
20011cd6:	04340613          	addi	a2,s0,67
20011cda:	85d2                	mv	a1,s4
20011cdc:	854e                	mv	a0,s3
20011cde:	9a82                	jalr	s5
20011ce0:	57fd                	li	a5,-1
20011ce2:	04f50363          	beq	a0,a5,20011d28 <_printf_common+0xc0>
20011ce6:	401c                	lw	a5,0(s0)
20011ce8:	4611                	li	a2,4
20011cea:	4098                	lw	a4,0(s1)
20011cec:	8b99                	andi	a5,a5,6
20011cee:	4454                	lw	a3,12(s0)
20011cf0:	4481                	li	s1,0
20011cf2:	00c79763          	bne	a5,a2,20011d00 <_printf_common+0x98>
20011cf6:	40e684b3          	sub	s1,a3,a4
20011cfa:	0004d363          	bgez	s1,20011d00 <_printf_common+0x98>
20011cfe:	4481                	li	s1,0
20011d00:	441c                	lw	a5,8(s0)
20011d02:	4818                	lw	a4,16(s0)
20011d04:	00f75463          	bge	a4,a5,20011d0c <_printf_common+0xa4>
20011d08:	8f99                	sub	a5,a5,a4
20011d0a:	94be                	add	s1,s1,a5
20011d0c:	4901                	li	s2,0
20011d0e:	0469                	addi	s0,s0,26
20011d10:	5b7d                	li	s6,-1
20011d12:	05249863          	bne	s1,s2,20011d62 <_printf_common+0xfa>
20011d16:	4501                	li	a0,0
20011d18:	a809                	j	20011d2a <_printf_common+0xc2>
20011d1a:	4685                	li	a3,1
20011d1c:	865a                	mv	a2,s6
20011d1e:	85d2                	mv	a1,s4
20011d20:	854e                	mv	a0,s3
20011d22:	9a82                	jalr	s5
20011d24:	01751e63          	bne	a0,s7,20011d40 <_printf_common+0xd8>
20011d28:	557d                	li	a0,-1
20011d2a:	50b2                	lw	ra,44(sp)
20011d2c:	5422                	lw	s0,40(sp)
20011d2e:	5492                	lw	s1,36(sp)
20011d30:	5902                	lw	s2,32(sp)
20011d32:	49f2                	lw	s3,28(sp)
20011d34:	4a62                	lw	s4,24(sp)
20011d36:	4ad2                	lw	s5,20(sp)
20011d38:	4b42                	lw	s6,16(sp)
20011d3a:	4bb2                	lw	s7,12(sp)
20011d3c:	6145                	addi	sp,sp,48
20011d3e:	8082                	ret
20011d40:	0905                	addi	s2,s2,1
20011d42:	bfad                	j	20011cbc <_printf_common+0x54>
20011d44:	00d40733          	add	a4,s0,a3
20011d48:	03000613          	li	a2,48
20011d4c:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffd0df>
20011d50:	04544703          	lbu	a4,69(s0)
20011d54:	00168793          	addi	a5,a3,1
20011d58:	97a2                	add	a5,a5,s0
20011d5a:	0689                	addi	a3,a3,2
20011d5c:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20011d60:	bf9d                	j	20011cd6 <_printf_common+0x6e>
20011d62:	4685                	li	a3,1
20011d64:	8622                	mv	a2,s0
20011d66:	85d2                	mv	a1,s4
20011d68:	854e                	mv	a0,s3
20011d6a:	9a82                	jalr	s5
20011d6c:	fb650ee3          	beq	a0,s6,20011d28 <_printf_common+0xc0>
20011d70:	0905                	addi	s2,s2,1
20011d72:	b745                	j	20011d12 <_printf_common+0xaa>

20011d74 <_printf_i>:
_printf_i():
20011d74:	7179                	addi	sp,sp,-48
20011d76:	d422                	sw	s0,40(sp)
20011d78:	d226                	sw	s1,36(sp)
20011d7a:	d04a                	sw	s2,32(sp)
20011d7c:	ce4e                	sw	s3,28(sp)
20011d7e:	d606                	sw	ra,44(sp)
20011d80:	cc52                	sw	s4,24(sp)
20011d82:	ca56                	sw	s5,20(sp)
20011d84:	c85a                	sw	s6,16(sp)
20011d86:	89b6                	mv	s3,a3
20011d88:	0185c683          	lbu	a3,24(a1)
20011d8c:	06e00793          	li	a5,110
20011d90:	8932                	mv	s2,a2
20011d92:	84aa                	mv	s1,a0
20011d94:	842e                	mv	s0,a1
20011d96:	04358613          	addi	a2,a1,67
20011d9a:	1ef68063          	beq	a3,a5,20011f7a <_printf_i+0x206>
20011d9e:	06d7e263          	bltu	a5,a3,20011e02 <_printf_i+0x8e>
20011da2:	06300793          	li	a5,99
20011da6:	0af68263          	beq	a3,a5,20011e4a <_printf_i+0xd6>
20011daa:	00d7ed63          	bltu	a5,a3,20011dc4 <_printf_i+0x50>
20011dae:	1e068a63          	beqz	a3,20011fa2 <_printf_i+0x22e>
20011db2:	05800793          	li	a5,88
20011db6:	16f68663          	beq	a3,a5,20011f22 <_printf_i+0x1ae>
20011dba:	04240a93          	addi	s5,s0,66
20011dbe:	04d40123          	sb	a3,66(s0)
20011dc2:	a869                	j	20011e5c <_printf_i+0xe8>
20011dc4:	06400793          	li	a5,100
20011dc8:	00f68663          	beq	a3,a5,20011dd4 <_printf_i+0x60>
20011dcc:	06900793          	li	a5,105
20011dd0:	fef695e3          	bne	a3,a5,20011dba <_printf_i+0x46>
20011dd4:	401c                	lw	a5,0(s0)
20011dd6:	4308                	lw	a0,0(a4)
20011dd8:	0807f693          	andi	a3,a5,128
20011ddc:	00450593          	addi	a1,a0,4
20011de0:	c2c1                	beqz	a3,20011e60 <_printf_i+0xec>
20011de2:	411c                	lw	a5,0(a0)
20011de4:	c30c                	sw	a1,0(a4)
20011de6:	0007d863          	bgez	a5,20011df6 <_printf_i+0x82>
20011dea:	02d00713          	li	a4,45
20011dee:	40f007b3          	neg	a5,a5
20011df2:	04e401a3          	sb	a4,67(s0)
20011df6:	00005697          	auipc	a3,0x5
20011dfa:	ac268693          	addi	a3,a3,-1342 # 200168b8 <__sf_fake_stdout+0x34>
20011dfe:	4729                	li	a4,10
20011e00:	a065                	j	20011ea8 <_printf_i+0x134>
20011e02:	07300793          	li	a5,115
20011e06:	1af68263          	beq	a3,a5,20011faa <_printf_i+0x236>
20011e0a:	00d7ef63          	bltu	a5,a3,20011e28 <_printf_i+0xb4>
20011e0e:	06f00793          	li	a5,111
20011e12:	04f68f63          	beq	a3,a5,20011e70 <_printf_i+0xfc>
20011e16:	07000793          	li	a5,112
20011e1a:	faf690e3          	bne	a3,a5,20011dba <_printf_i+0x46>
20011e1e:	419c                	lw	a5,0(a1)
20011e20:	0207e793          	ori	a5,a5,32
20011e24:	c19c                	sw	a5,0(a1)
20011e26:	a809                	j	20011e38 <_printf_i+0xc4>
20011e28:	07500793          	li	a5,117
20011e2c:	04f68263          	beq	a3,a5,20011e70 <_printf_i+0xfc>
20011e30:	07800793          	li	a5,120
20011e34:	f8f693e3          	bne	a3,a5,20011dba <_printf_i+0x46>
20011e38:	07800793          	li	a5,120
20011e3c:	04f402a3          	sb	a5,69(s0)
20011e40:	00005697          	auipc	a3,0x5
20011e44:	a8c68693          	addi	a3,a3,-1396 # 200168cc <__sf_fake_stdout+0x48>
20011e48:	a0dd                	j	20011f2e <_printf_i+0x1ba>
20011e4a:	431c                	lw	a5,0(a4)
20011e4c:	04258a93          	addi	s5,a1,66
20011e50:	00478693          	addi	a3,a5,4
20011e54:	439c                	lw	a5,0(a5)
20011e56:	c314                	sw	a3,0(a4)
20011e58:	04f58123          	sb	a5,66(a1)
20011e5c:	4785                	li	a5,1
20011e5e:	a2ad                	j	20011fc8 <_printf_i+0x254>
20011e60:	0407f693          	andi	a3,a5,64
20011e64:	411c                	lw	a5,0(a0)
20011e66:	c30c                	sw	a1,0(a4)
20011e68:	debd                	beqz	a3,20011de6 <_printf_i+0x72>
20011e6a:	07c2                	slli	a5,a5,0x10
20011e6c:	87c1                	srai	a5,a5,0x10
20011e6e:	bfa5                	j	20011de6 <_printf_i+0x72>
20011e70:	400c                	lw	a1,0(s0)
20011e72:	431c                	lw	a5,0(a4)
20011e74:	0805f813          	andi	a6,a1,128
20011e78:	00478513          	addi	a0,a5,4
20011e7c:	00080563          	beqz	a6,20011e86 <_printf_i+0x112>
20011e80:	c308                	sw	a0,0(a4)
20011e82:	439c                	lw	a5,0(a5)
20011e84:	a039                	j	20011e92 <_printf_i+0x11e>
20011e86:	0405f593          	andi	a1,a1,64
20011e8a:	c308                	sw	a0,0(a4)
20011e8c:	d9fd                	beqz	a1,20011e82 <_printf_i+0x10e>
20011e8e:	0007d783          	lhu	a5,0(a5)
20011e92:	06f00713          	li	a4,111
20011e96:	0ce68a63          	beq	a3,a4,20011f6a <_printf_i+0x1f6>
20011e9a:	00005697          	auipc	a3,0x5
20011e9e:	a1e68693          	addi	a3,a3,-1506 # 200168b8 <__sf_fake_stdout+0x34>
20011ea2:	4729                	li	a4,10
20011ea4:	040401a3          	sb	zero,67(s0)
20011ea8:	404c                	lw	a1,4(s0)
20011eaa:	c40c                	sw	a1,8(s0)
20011eac:	0005c563          	bltz	a1,20011eb6 <_printf_i+0x142>
20011eb0:	4008                	lw	a0,0(s0)
20011eb2:	996d                	andi	a0,a0,-5
20011eb4:	c008                	sw	a0,0(s0)
20011eb6:	e399                	bnez	a5,20011ebc <_printf_i+0x148>
20011eb8:	8ab2                	mv	s5,a2
20011eba:	cd91                	beqz	a1,20011ed6 <_printf_i+0x162>
20011ebc:	8ab2                	mv	s5,a2
20011ebe:	02e7f5b3          	remu	a1,a5,a4
20011ec2:	1afd                	addi	s5,s5,-1
20011ec4:	95b6                	add	a1,a1,a3
20011ec6:	0005c583          	lbu	a1,0(a1)
20011eca:	00ba8023          	sb	a1,0(s5)
20011ece:	02e7d5b3          	divu	a1,a5,a4
20011ed2:	0ae7f263          	bgeu	a5,a4,20011f76 <_printf_i+0x202>
20011ed6:	47a1                	li	a5,8
20011ed8:	00f71e63          	bne	a4,a5,20011ef4 <_printf_i+0x180>
20011edc:	401c                	lw	a5,0(s0)
20011ede:	8b85                	andi	a5,a5,1
20011ee0:	cb91                	beqz	a5,20011ef4 <_printf_i+0x180>
20011ee2:	4058                	lw	a4,4(s0)
20011ee4:	481c                	lw	a5,16(s0)
20011ee6:	00e7c763          	blt	a5,a4,20011ef4 <_printf_i+0x180>
20011eea:	03000793          	li	a5,48
20011eee:	fefa8fa3          	sb	a5,-1(s5)
20011ef2:	1afd                	addi	s5,s5,-1
20011ef4:	41560633          	sub	a2,a2,s5
20011ef8:	c810                	sw	a2,16(s0)
20011efa:	874e                	mv	a4,s3
20011efc:	86ca                	mv	a3,s2
20011efe:	0070                	addi	a2,sp,12
20011f00:	85a2                	mv	a1,s0
20011f02:	8526                	mv	a0,s1
20011f04:	3395                	jal	20011c68 <_printf_common>
20011f06:	5a7d                	li	s4,-1
20011f08:	0d451463          	bne	a0,s4,20011fd0 <_printf_i+0x25c>
20011f0c:	557d                	li	a0,-1
20011f0e:	50b2                	lw	ra,44(sp)
20011f10:	5422                	lw	s0,40(sp)
20011f12:	5492                	lw	s1,36(sp)
20011f14:	5902                	lw	s2,32(sp)
20011f16:	49f2                	lw	s3,28(sp)
20011f18:	4a62                	lw	s4,24(sp)
20011f1a:	4ad2                	lw	s5,20(sp)
20011f1c:	4b42                	lw	s6,16(sp)
20011f1e:	6145                	addi	sp,sp,48
20011f20:	8082                	ret
20011f22:	04d582a3          	sb	a3,69(a1)
20011f26:	00005697          	auipc	a3,0x5
20011f2a:	99268693          	addi	a3,a3,-1646 # 200168b8 <__sf_fake_stdout+0x34>
20011f2e:	400c                	lw	a1,0(s0)
20011f30:	4308                	lw	a0,0(a4)
20011f32:	0805f813          	andi	a6,a1,128
20011f36:	411c                	lw	a5,0(a0)
20011f38:	0511                	addi	a0,a0,4
20011f3a:	02080063          	beqz	a6,20011f5a <_printf_i+0x1e6>
20011f3e:	c308                	sw	a0,0(a4)
20011f40:	0015f713          	andi	a4,a1,1
20011f44:	c701                	beqz	a4,20011f4c <_printf_i+0x1d8>
20011f46:	0205e593          	ori	a1,a1,32
20011f4a:	c00c                	sw	a1,0(s0)
20011f4c:	4741                	li	a4,16
20011f4e:	fbb9                	bnez	a5,20011ea4 <_printf_i+0x130>
20011f50:	400c                	lw	a1,0(s0)
20011f52:	fdf5f593          	andi	a1,a1,-33
20011f56:	c00c                	sw	a1,0(s0)
20011f58:	b7b1                	j	20011ea4 <_printf_i+0x130>
20011f5a:	0405f813          	andi	a6,a1,64
20011f5e:	c308                	sw	a0,0(a4)
20011f60:	fe0800e3          	beqz	a6,20011f40 <_printf_i+0x1cc>
20011f64:	07c2                	slli	a5,a5,0x10
20011f66:	83c1                	srli	a5,a5,0x10
20011f68:	bfe1                	j	20011f40 <_printf_i+0x1cc>
20011f6a:	00005697          	auipc	a3,0x5
20011f6e:	94e68693          	addi	a3,a3,-1714 # 200168b8 <__sf_fake_stdout+0x34>
20011f72:	4721                	li	a4,8
20011f74:	bf05                	j	20011ea4 <_printf_i+0x130>
20011f76:	87ae                	mv	a5,a1
20011f78:	b799                	j	20011ebe <_printf_i+0x14a>
20011f7a:	4194                	lw	a3,0(a1)
20011f7c:	431c                	lw	a5,0(a4)
20011f7e:	49cc                	lw	a1,20(a1)
20011f80:	0806f813          	andi	a6,a3,128
20011f84:	00478513          	addi	a0,a5,4
20011f88:	00080663          	beqz	a6,20011f94 <_printf_i+0x220>
20011f8c:	c308                	sw	a0,0(a4)
20011f8e:	439c                	lw	a5,0(a5)
20011f90:	c38c                	sw	a1,0(a5)
20011f92:	a801                	j	20011fa2 <_printf_i+0x22e>
20011f94:	c308                	sw	a0,0(a4)
20011f96:	0406f693          	andi	a3,a3,64
20011f9a:	439c                	lw	a5,0(a5)
20011f9c:	daf5                	beqz	a3,20011f90 <_printf_i+0x21c>
20011f9e:	00b79023          	sh	a1,0(a5)
20011fa2:	00042823          	sw	zero,16(s0)
20011fa6:	8ab2                	mv	s5,a2
20011fa8:	bf89                	j	20011efa <_printf_i+0x186>
20011faa:	431c                	lw	a5,0(a4)
20011fac:	41d0                	lw	a2,4(a1)
20011fae:	4581                	li	a1,0
20011fb0:	00478693          	addi	a3,a5,4
20011fb4:	c314                	sw	a3,0(a4)
20011fb6:	0007aa83          	lw	s5,0(a5)
20011fba:	8556                	mv	a0,s5
20011fbc:	3179                	jal	20011c4a <memchr>
20011fbe:	c501                	beqz	a0,20011fc6 <_printf_i+0x252>
20011fc0:	41550533          	sub	a0,a0,s5
20011fc4:	c048                	sw	a0,4(s0)
20011fc6:	405c                	lw	a5,4(s0)
20011fc8:	c81c                	sw	a5,16(s0)
20011fca:	040401a3          	sb	zero,67(s0)
20011fce:	b735                	j	20011efa <_printf_i+0x186>
20011fd0:	4814                	lw	a3,16(s0)
20011fd2:	8656                	mv	a2,s5
20011fd4:	85ca                	mv	a1,s2
20011fd6:	8526                	mv	a0,s1
20011fd8:	9982                	jalr	s3
20011fda:	f34509e3          	beq	a0,s4,20011f0c <_printf_i+0x198>
20011fde:	401c                	lw	a5,0(s0)
20011fe0:	8b89                	andi	a5,a5,2
20011fe2:	e78d                	bnez	a5,2001200c <_printf_i+0x298>
20011fe4:	47b2                	lw	a5,12(sp)
20011fe6:	4448                	lw	a0,12(s0)
20011fe8:	f2f553e3          	bge	a0,a5,20011f0e <_printf_i+0x19a>
20011fec:	853e                	mv	a0,a5
20011fee:	b705                	j	20011f0e <_printf_i+0x19a>
20011ff0:	4685                	li	a3,1
20011ff2:	8656                	mv	a2,s5
20011ff4:	85ca                	mv	a1,s2
20011ff6:	8526                	mv	a0,s1
20011ff8:	9982                	jalr	s3
20011ffa:	f16509e3          	beq	a0,s6,20011f0c <_printf_i+0x198>
20011ffe:	0a05                	addi	s4,s4,1
20012000:	445c                	lw	a5,12(s0)
20012002:	4732                	lw	a4,12(sp)
20012004:	8f99                	sub	a5,a5,a4
20012006:	fefa45e3          	blt	s4,a5,20011ff0 <_printf_i+0x27c>
2001200a:	bfe9                	j	20011fe4 <_printf_i+0x270>
2001200c:	4a01                	li	s4,0
2001200e:	01940a93          	addi	s5,s0,25
20012012:	5b7d                	li	s6,-1
20012014:	b7f5                	j	20012000 <_printf_i+0x28c>

20012016 <_read_r>:
_read_r():
20012016:	1141                	addi	sp,sp,-16
20012018:	c422                	sw	s0,8(sp)
2001201a:	842a                	mv	s0,a0
2001201c:	852e                	mv	a0,a1
2001201e:	85b2                	mv	a1,a2
20012020:	8636                	mv	a2,a3
20012022:	9001a423          	sw	zero,-1784(gp) # 80001360 <errno>
20012026:	c606                	sw	ra,12(sp)
20012028:	2075                	jal	200120d4 <_read>
2001202a:	57fd                	li	a5,-1
2001202c:	00f51763          	bne	a0,a5,2001203a <_read_r+0x24>
20012030:	90818793          	addi	a5,gp,-1784 # 80001360 <errno>
20012034:	439c                	lw	a5,0(a5)
20012036:	c391                	beqz	a5,2001203a <_read_r+0x24>
20012038:	c01c                	sw	a5,0(s0)
2001203a:	40b2                	lw	ra,12(sp)
2001203c:	4422                	lw	s0,8(sp)
2001203e:	0141                	addi	sp,sp,16
20012040:	8082                	ret

20012042 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20012042:	1101                	addi	sp,sp,-32
20012044:	ce06                	sw	ra,28(sp)
20012046:	cc22                	sw	s0,24(sp)
20012048:	1000                	addi	s0,sp,32
2001204a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
2001204e:	2a59                	jal	200121e4 <__errno>
20012050:	872a                	mv	a4,a0
20012052:	05800793          	li	a5,88
20012056:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20012058:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2001205a:	853e                	mv	a0,a5
2001205c:	40f2                	lw	ra,28(sp)
2001205e:	4462                	lw	s0,24(sp)
20012060:	6105                	addi	sp,sp,32
20012062:	8082                	ret

20012064 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20012064:	1101                	addi	sp,sp,-32
20012066:	ce06                	sw	ra,28(sp)
20012068:	cc22                	sw	s0,24(sp)
2001206a:	1000                	addi	s0,sp,32
2001206c:	fea42623          	sw	a0,-20(s0)
20012070:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20012074:	2a85                	jal	200121e4 <__errno>
20012076:	872a                	mv	a4,a0
20012078:	fa800793          	li	a5,-88
2001207c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
2001207e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20012080:	853e                	mv	a0,a5
20012082:	40f2                	lw	ra,28(sp)
20012084:	4462                	lw	s0,24(sp)
20012086:	6105                	addi	sp,sp,32
20012088:	8082                	ret

2001208a <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2001208a:	1101                	addi	sp,sp,-32
2001208c:	ce22                	sw	s0,28(sp)
2001208e:	1000                	addi	s0,sp,32
20012090:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20012094:	fec42783          	lw	a5,-20(s0)
20012098:	17fd                	addi	a5,a5,-1
2001209a:	0017b793          	seqz	a5,a5
2001209e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
200120a2:	853e                	mv	a0,a5
200120a4:	4472                	lw	s0,28(sp)
200120a6:	6105                	addi	sp,sp,32
200120a8:	8082                	ret

200120aa <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
200120aa:	1101                	addi	sp,sp,-32
200120ac:	ce06                	sw	ra,28(sp)
200120ae:	cc22                	sw	s0,24(sp)
200120b0:	1000                	addi	s0,sp,32
200120b2:	fea42623          	sw	a0,-20(s0)
200120b6:	feb42423          	sw	a1,-24(s0)
200120ba:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
200120be:	221d                	jal	200121e4 <__errno>
200120c0:	872a                	mv	a4,a0
200120c2:	05800793          	li	a5,88
200120c6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
200120c8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
200120ca:	853e                	mv	a0,a5
200120cc:	40f2                	lw	ra,28(sp)
200120ce:	4462                	lw	s0,24(sp)
200120d0:	6105                	addi	sp,sp,32
200120d2:	8082                	ret

200120d4 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
200120d4:	1101                	addi	sp,sp,-32
200120d6:	ce06                	sw	ra,28(sp)
200120d8:	cc22                	sw	s0,24(sp)
200120da:	1000                	addi	s0,sp,32
200120dc:	fea42623          	sw	a0,-20(s0)
200120e0:	feb42423          	sw	a1,-24(s0)
200120e4:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
200120e8:	28f5                	jal	200121e4 <__errno>
200120ea:	872a                	mv	a4,a0
200120ec:	05800793          	li	a5,88
200120f0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
200120f2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
200120f4:	853e                	mv	a0,a5
200120f6:	40f2                	lw	ra,28(sp)
200120f8:	4462                	lw	s0,24(sp)
200120fa:	6105                	addi	sp,sp,32
200120fc:	8082                	ret

200120fe <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
200120fe:	7179                	addi	sp,sp,-48
20012100:	d622                	sw	s0,44(sp)
20012102:	1800                	addi	s0,sp,48
20012104:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20012108:	800017b7          	lui	a5,0x80001
2001210c:	2607a783          	lw	a5,608(a5) # 80001260 <metal_segment_heap_target_end+0xfffff2fc>
20012110:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20012114:	d0c18713          	addi	a4,gp,-756 # 80001764 <_sp>
20012118:	50c18793          	addi	a5,gp,1292 # 80001f64 <metal_segment_heap_target_end>
2001211c:	00f71463          	bne	a4,a5,20012124 <_sbrk+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20012120:	57fd                	li	a5,-1
20012122:	a089                	j	20012164 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20012124:	800017b7          	lui	a5,0x80001
20012128:	2607a703          	lw	a4,608(a5) # 80001260 <metal_segment_heap_target_end+0xfffff2fc>
2001212c:	fdc42783          	lw	a5,-36(s0)
20012130:	973e                	add	a4,a4,a5
20012132:	50c18793          	addi	a5,gp,1292 # 80001f64 <metal_segment_heap_target_end>
20012136:	02f77063          	bgeu	a4,a5,20012156 <_sbrk+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
2001213a:	800017b7          	lui	a5,0x80001
2001213e:	2607a703          	lw	a4,608(a5) # 80001260 <metal_segment_heap_target_end+0xfffff2fc>
20012142:	fdc42783          	lw	a5,-36(s0)
20012146:	973e                	add	a4,a4,a5
20012148:	800017b7          	lui	a5,0x80001
2001214c:	26e7a023          	sw	a4,608(a5) # 80001260 <metal_segment_heap_target_end+0xfffff2fc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20012150:	fec42783          	lw	a5,-20(s0)
20012154:	a801                	j	20012164 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20012156:	800017b7          	lui	a5,0x80001
2001215a:	50c18713          	addi	a4,gp,1292 # 80001f64 <metal_segment_heap_target_end>
2001215e:	26e7a023          	sw	a4,608(a5) # 80001260 <metal_segment_heap_target_end+0xfffff2fc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20012162:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20012164:	853e                	mv	a0,a5
20012166:	5432                	lw	s0,44(sp)
20012168:	6145                	addi	sp,sp,48
2001216a:	8082                	ret

2001216c <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2001216c:	7179                	addi	sp,sp,-48
2001216e:	d606                	sw	ra,44(sp)
20012170:	d422                	sw	s0,40(sp)
20012172:	1800                	addi	s0,sp,48
20012174:	fca42e23          	sw	a0,-36(s0)
20012178:	fcb42c23          	sw	a1,-40(s0)
2001217c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20012180:	fdc42703          	lw	a4,-36(s0)
20012184:	4785                	li	a5,1
20012186:	00f70963          	beq	a4,a5,20012198 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2001218a:	28a9                	jal	200121e4 <__errno>
2001218c:	872a                	mv	a4,a0
2001218e:	05800793          	li	a5,88
20012192:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20012194:	57fd                	li	a5,-1
20012196:	a82d                	j	200121d0 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20012198:	fd842783          	lw	a5,-40(s0)
2001219c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
200121a0:	fe042623          	sw	zero,-20(s0)
200121a4:	a839                	j	200121c2 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
200121a6:	fe842703          	lw	a4,-24(s0)
200121aa:	fec42783          	lw	a5,-20(s0)
200121ae:	97ba                	add	a5,a5,a4
200121b0:	0007c783          	lbu	a5,0(a5)
200121b4:	853e                	mv	a0,a5
200121b6:	2ca1                	jal	2001240e <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
200121b8:	fec42783          	lw	a5,-20(s0)
200121bc:	0785                	addi	a5,a5,1
200121be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
200121c2:	fec42703          	lw	a4,-20(s0)
200121c6:	fd442783          	lw	a5,-44(s0)
200121ca:	fcf76ee3          	bltu	a4,a5,200121a6 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
200121ce:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
200121d0:	853e                	mv	a0,a5
200121d2:	50b2                	lw	ra,44(sp)
200121d4:	5422                	lw	s0,40(sp)
200121d6:	6145                	addi	sp,sp,48
200121d8:	8082                	ret

200121da <atexit>:
atexit():
200121da:	85aa                	mv	a1,a0
200121dc:	4681                	li	a3,0
200121de:	4601                	li	a2,0
200121e0:	4501                	li	a0,0
200121e2:	a8f1                	j	200122be <__register_exitproc>

200121e4 <__errno>:
__errno():
200121e4:	5ffef797          	auipc	a5,0x5ffef
200121e8:	07478793          	addi	a5,a5,116 # 80001258 <_impure_ptr>
200121ec:	4388                	lw	a0,0(a5)
200121ee:	8082                	ret

200121f0 <exit>:
exit():
200121f0:	1141                	addi	sp,sp,-16
200121f2:	c422                	sw	s0,8(sp)
200121f4:	c606                	sw	ra,12(sp)
200121f6:	00000797          	auipc	a5,0x0
200121fa:	15078793          	addi	a5,a5,336 # 20012346 <__call_exitprocs>
200121fe:	842a                	mv	s0,a0
20012200:	c399                	beqz	a5,20012206 <exit+0x16>
20012202:	4581                	li	a1,0
20012204:	2289                	jal	20012346 <__call_exitprocs>
20012206:	5ffef797          	auipc	a5,0x5ffef
2001220a:	05678793          	addi	a5,a5,86 # 8000125c <_global_impure_ptr>
2001220e:	4388                	lw	a0,0(a5)
20012210:	551c                	lw	a5,40(a0)
20012212:	c391                	beqz	a5,20012216 <exit+0x26>
20012214:	9782                	jalr	a5
20012216:	8522                	mv	a0,s0
20012218:	49c040ef          	jal	ra,200166b4 <_exit>

2001221c <__libc_fini_array>:
__libc_fini_array():
2001221c:	1141                	addi	sp,sp,-16
2001221e:	00005797          	auipc	a5,0x5
20012222:	2ae78793          	addi	a5,a5,686 # 200174cc <__fini_array_end>
20012226:	c422                	sw	s0,8(sp)
20012228:	00005417          	auipc	s0,0x5
2001222c:	2a440413          	addi	s0,s0,676 # 200174cc <__fini_array_end>
20012230:	8c1d                	sub	s0,s0,a5
20012232:	c226                	sw	s1,4(sp)
20012234:	c606                	sw	ra,12(sp)
20012236:	8409                	srai	s0,s0,0x2
20012238:	84be                	mv	s1,a5
2001223a:	e411                	bnez	s0,20012246 <__libc_fini_array+0x2a>
2001223c:	40b2                	lw	ra,12(sp)
2001223e:	4422                	lw	s0,8(sp)
20012240:	4492                	lw	s1,4(sp)
20012242:	0141                	addi	sp,sp,16
20012244:	8082                	ret
20012246:	147d                	addi	s0,s0,-1
20012248:	00241793          	slli	a5,s0,0x2
2001224c:	97a6                	add	a5,a5,s1
2001224e:	439c                	lw	a5,0(a5)
20012250:	9782                	jalr	a5
20012252:	b7e5                	j	2001223a <__libc_fini_array+0x1e>

20012254 <__libc_init_array>:
__libc_init_array():
20012254:	1141                	addi	sp,sp,-16
20012256:	00005797          	auipc	a5,0x5
2001225a:	26a78793          	addi	a5,a5,618 # 200174c0 <__init_array_start>
2001225e:	c422                	sw	s0,8(sp)
20012260:	00005417          	auipc	s0,0x5
20012264:	26040413          	addi	s0,s0,608 # 200174c0 <__init_array_start>
20012268:	8c1d                	sub	s0,s0,a5
2001226a:	c226                	sw	s1,4(sp)
2001226c:	c04a                	sw	s2,0(sp)
2001226e:	c606                	sw	ra,12(sp)
20012270:	8409                	srai	s0,s0,0x2
20012272:	4481                	li	s1,0
20012274:	893e                	mv	s2,a5
20012276:	02849663          	bne	s1,s0,200122a2 <__libc_init_array+0x4e>
2001227a:	00005797          	auipc	a5,0x5
2001227e:	24678793          	addi	a5,a5,582 # 200174c0 <__init_array_start>
20012282:	00005417          	auipc	s0,0x5
20012286:	24a40413          	addi	s0,s0,586 # 200174cc <__fini_array_end>
2001228a:	8c1d                	sub	s0,s0,a5
2001228c:	8409                	srai	s0,s0,0x2
2001228e:	4481                	li	s1,0
20012290:	893e                	mv	s2,a5
20012292:	00849f63          	bne	s1,s0,200122b0 <__libc_init_array+0x5c>
20012296:	40b2                	lw	ra,12(sp)
20012298:	4422                	lw	s0,8(sp)
2001229a:	4492                	lw	s1,4(sp)
2001229c:	4902                	lw	s2,0(sp)
2001229e:	0141                	addi	sp,sp,16
200122a0:	8082                	ret
200122a2:	00249793          	slli	a5,s1,0x2
200122a6:	97ca                	add	a5,a5,s2
200122a8:	439c                	lw	a5,0(a5)
200122aa:	0485                	addi	s1,s1,1
200122ac:	9782                	jalr	a5
200122ae:	b7e1                	j	20012276 <__libc_init_array+0x22>
200122b0:	00249793          	slli	a5,s1,0x2
200122b4:	97ca                	add	a5,a5,s2
200122b6:	439c                	lw	a5,0(a5)
200122b8:	0485                	addi	s1,s1,1
200122ba:	9782                	jalr	a5
200122bc:	bfd9                	j	20012292 <__libc_init_array+0x3e>

200122be <__register_exitproc>:
__register_exitproc():
200122be:	5ffef797          	auipc	a5,0x5ffef
200122c2:	fea78793          	addi	a5,a5,-22 # 800012a8 <_global_atexit>
200122c6:	439c                	lw	a5,0(a5)
200122c8:	8e2a                	mv	t3,a0
200122ca:	e39d                	bnez	a5,200122f0 <__register_exitproc+0x32>
200122cc:	5ffef717          	auipc	a4,0x5ffef
200122d0:	00870713          	addi	a4,a4,8 # 800012d4 <_global_atexit0>
200122d4:	5ffef797          	auipc	a5,0x5ffef
200122d8:	fce7aa23          	sw	a4,-44(a5) # 800012a8 <_global_atexit>
200122dc:	dffee517          	auipc	a0,0xdffee
200122e0:	d2450513          	addi	a0,a0,-732 # 0 <__metal_boot_hart>
200122e4:	87ba                	mv	a5,a4
200122e6:	c509                	beqz	a0,200122f0 <__register_exitproc+0x32>
200122e8:	411c                	lw	a5,0(a0)
200122ea:	90f1a223          	sw	a5,-1788(gp) # 8000135c <_global_atexit0+0x88>
200122ee:	87ba                	mv	a5,a4
200122f0:	43d8                	lw	a4,4(a5)
200122f2:	487d                	li	a6,31
200122f4:	557d                	li	a0,-1
200122f6:	04e84763          	blt	a6,a4,20012344 <__register_exitproc+0x86>
200122fa:	020e0e63          	beqz	t3,20012336 <__register_exitproc+0x78>
200122fe:	0887a803          	lw	a6,136(a5)
20012302:	04080163          	beqz	a6,20012344 <__register_exitproc+0x86>
20012306:	00271893          	slli	a7,a4,0x2
2001230a:	98c2                	add	a7,a7,a6
2001230c:	00c8a023          	sw	a2,0(a7)
20012310:	10082303          	lw	t1,256(a6)
20012314:	4605                	li	a2,1
20012316:	00e61633          	sll	a2,a2,a4
2001231a:	00c36333          	or	t1,t1,a2
2001231e:	10682023          	sw	t1,256(a6)
20012322:	08d8a023          	sw	a3,128(a7)
20012326:	4689                	li	a3,2
20012328:	00de1763          	bne	t3,a3,20012336 <__register_exitproc+0x78>
2001232c:	10482683          	lw	a3,260(a6)
20012330:	8e55                	or	a2,a2,a3
20012332:	10c82223          	sw	a2,260(a6)
20012336:	00170693          	addi	a3,a4,1
2001233a:	070a                	slli	a4,a4,0x2
2001233c:	c3d4                	sw	a3,4(a5)
2001233e:	97ba                	add	a5,a5,a4
20012340:	c78c                	sw	a1,8(a5)
20012342:	4501                	li	a0,0
20012344:	8082                	ret

20012346 <__call_exitprocs>:
__call_exitprocs():
20012346:	7179                	addi	sp,sp,-48
20012348:	cc52                	sw	s4,24(sp)
2001234a:	ca56                	sw	s5,20(sp)
2001234c:	c85a                	sw	s6,16(sp)
2001234e:	c65e                	sw	s7,12(sp)
20012350:	d606                	sw	ra,44(sp)
20012352:	d422                	sw	s0,40(sp)
20012354:	d226                	sw	s1,36(sp)
20012356:	d04a                	sw	s2,32(sp)
20012358:	ce4e                	sw	s3,28(sp)
2001235a:	c462                	sw	s8,8(sp)
2001235c:	8b2a                	mv	s6,a0
2001235e:	8a2e                	mv	s4,a1
20012360:	5ffefa97          	auipc	s5,0x5ffef
20012364:	f48a8a93          	addi	s5,s5,-184 # 800012a8 <_global_atexit>
20012368:	4b85                	li	s7,1
2001236a:	000aa403          	lw	s0,0(s5)
2001236e:	c811                	beqz	s0,20012382 <__call_exitprocs+0x3c>
20012370:	4044                	lw	s1,4(s0)
20012372:	08842983          	lw	s3,136(s0)
20012376:	fff48913          	addi	s2,s1,-1
2001237a:	048a                	slli	s1,s1,0x2
2001237c:	94a2                	add	s1,s1,s0
2001237e:	00095e63          	bgez	s2,2001239a <__call_exitprocs+0x54>
20012382:	50b2                	lw	ra,44(sp)
20012384:	5422                	lw	s0,40(sp)
20012386:	5492                	lw	s1,36(sp)
20012388:	5902                	lw	s2,32(sp)
2001238a:	49f2                	lw	s3,28(sp)
2001238c:	4a62                	lw	s4,24(sp)
2001238e:	4ad2                	lw	s5,20(sp)
20012390:	4b42                	lw	s6,16(sp)
20012392:	4bb2                	lw	s7,12(sp)
20012394:	4c22                	lw	s8,8(sp)
20012396:	6145                	addi	sp,sp,48
20012398:	8082                	ret
2001239a:	000a0e63          	beqz	s4,200123b6 <__call_exitprocs+0x70>
2001239e:	00099563          	bnez	s3,200123a8 <__call_exitprocs+0x62>
200123a2:	197d                	addi	s2,s2,-1
200123a4:	14f1                	addi	s1,s1,-4
200123a6:	bfe1                	j	2001237e <__call_exitprocs+0x38>
200123a8:	00291793          	slli	a5,s2,0x2
200123ac:	97ce                	add	a5,a5,s3
200123ae:	0807a783          	lw	a5,128(a5)
200123b2:	ff4798e3          	bne	a5,s4,200123a2 <__call_exitprocs+0x5c>
200123b6:	4058                	lw	a4,4(s0)
200123b8:	40dc                	lw	a5,4(s1)
200123ba:	177d                	addi	a4,a4,-1
200123bc:	03271863          	bne	a4,s2,200123ec <__call_exitprocs+0xa6>
200123c0:	01242223          	sw	s2,4(s0)
200123c4:	dff9                	beqz	a5,200123a2 <__call_exitprocs+0x5c>
200123c6:	00442c03          	lw	s8,4(s0)
200123ca:	00098863          	beqz	s3,200123da <__call_exitprocs+0x94>
200123ce:	1009a683          	lw	a3,256(s3)
200123d2:	012b9733          	sll	a4,s7,s2
200123d6:	8ef9                	and	a3,a3,a4
200123d8:	ee89                	bnez	a3,200123f2 <__call_exitprocs+0xac>
200123da:	9782                	jalr	a5
200123dc:	4058                	lw	a4,4(s0)
200123de:	000aa783          	lw	a5,0(s5)
200123e2:	f98714e3          	bne	a4,s8,2001236a <__call_exitprocs+0x24>
200123e6:	faf40ee3          	beq	s0,a5,200123a2 <__call_exitprocs+0x5c>
200123ea:	b741                	j	2001236a <__call_exitprocs+0x24>
200123ec:	0004a223          	sw	zero,4(s1)
200123f0:	bfd1                	j	200123c4 <__call_exitprocs+0x7e>
200123f2:	00291693          	slli	a3,s2,0x2
200123f6:	96ce                	add	a3,a3,s3
200123f8:	428c                	lw	a1,0(a3)
200123fa:	1049a683          	lw	a3,260(s3)
200123fe:	8f75                	and	a4,a4,a3
20012400:	e701                	bnez	a4,20012408 <__call_exitprocs+0xc2>
20012402:	855a                	mv	a0,s6
20012404:	9782                	jalr	a5
20012406:	bfd9                	j	200123dc <__call_exitprocs+0x96>
20012408:	852e                	mv	a0,a1
2001240a:	9782                	jalr	a5
2001240c:	bfc1                	j	200123dc <__call_exitprocs+0x96>

2001240e <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
2001240e:	1101                	addi	sp,sp,-32
20012410:	ce06                	sw	ra,28(sp)
20012412:	cc22                	sw	s0,24(sp)
20012414:	1000                	addi	s0,sp,32
20012416:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
2001241a:	fec42703          	lw	a4,-20(s0)
2001241e:	47a9                	li	a5,10
20012420:	00f71463          	bne	a4,a5,20012428 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20012424:	4535                	li	a0,13
20012426:	2811                	jal	2001243a <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20012428:	fec42503          	lw	a0,-20(s0)
2001242c:	2039                	jal	2001243a <metal_tty_putc_raw>
2001242e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20012430:	853e                	mv	a0,a5
20012432:	40f2                	lw	ra,28(sp)
20012434:	4462                	lw	s0,24(sp)
20012436:	6105                	addi	sp,sp,32
20012438:	8082                	ret

2001243a <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
2001243a:	1101                	addi	sp,sp,-32
2001243c:	ce06                	sw	ra,28(sp)
2001243e:	cc22                	sw	s0,24(sp)
20012440:	1000                	addi	s0,sp,32
20012442:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20012446:	fec42583          	lw	a1,-20(s0)
2001244a:	800017b7          	lui	a5,0x80001
2001244e:	1f078513          	addi	a0,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20012452:	28b1                	jal	200124ae <metal_uart_putc>
20012454:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20012456:	853e                	mv	a0,a5
20012458:	40f2                	lw	ra,28(sp)
2001245a:	4462                	lw	s0,24(sp)
2001245c:	6105                	addi	sp,sp,32
2001245e:	8082                	ret

20012460 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20012460:	1141                	addi	sp,sp,-16
20012462:	c606                	sw	ra,12(sp)
20012464:	c422                	sw	s0,8(sp)
20012466:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20012468:	67f1                	lui	a5,0x1c
2001246a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
2001246e:	800017b7          	lui	a5,0x80001
20012472:	1f078513          	addi	a0,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20012476:	2031                	jal	20012482 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20012478:	0001                	nop
2001247a:	40b2                	lw	ra,12(sp)
2001247c:	4422                	lw	s0,8(sp)
2001247e:	0141                	addi	sp,sp,16
20012480:	8082                	ret

20012482 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20012482:	1101                	addi	sp,sp,-32
20012484:	ce06                	sw	ra,28(sp)
20012486:	cc22                	sw	s0,24(sp)
20012488:	1000                	addi	s0,sp,32
2001248a:	fea42623          	sw	a0,-20(s0)
2001248e:	feb42423          	sw	a1,-24(s0)
20012492:	fec42783          	lw	a5,-20(s0)
20012496:	439c                	lw	a5,0(a5)
20012498:	439c                	lw	a5,0(a5)
2001249a:	fe842583          	lw	a1,-24(s0)
2001249e:	fec42503          	lw	a0,-20(s0)
200124a2:	9782                	jalr	a5
200124a4:	0001                	nop
200124a6:	40f2                	lw	ra,28(sp)
200124a8:	4462                	lw	s0,24(sp)
200124aa:	6105                	addi	sp,sp,32
200124ac:	8082                	ret

200124ae <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
200124ae:	1101                	addi	sp,sp,-32
200124b0:	ce06                	sw	ra,28(sp)
200124b2:	cc22                	sw	s0,24(sp)
200124b4:	1000                	addi	s0,sp,32
200124b6:	fea42623          	sw	a0,-20(s0)
200124ba:	feb42423          	sw	a1,-24(s0)
200124be:	fec42783          	lw	a5,-20(s0)
200124c2:	439c                	lw	a5,0(a5)
200124c4:	43dc                	lw	a5,4(a5)
200124c6:	fe842583          	lw	a1,-24(s0)
200124ca:	fec42503          	lw	a0,-20(s0)
200124ce:	9782                	jalr	a5
200124d0:	87aa                	mv	a5,a0
200124d2:	853e                	mv	a0,a5
200124d4:	40f2                	lw	ra,28(sp)
200124d6:	4462                	lw	s0,24(sp)
200124d8:	6105                	addi	sp,sp,32
200124da:	8082                	ret

200124dc <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
200124dc:	1101                	addi	sp,sp,-32
200124de:	ce06                	sw	ra,28(sp)
200124e0:	cc22                	sw	s0,24(sp)
200124e2:	1000                	addi	s0,sp,32
200124e4:	fea42623          	sw	a0,-20(s0)
200124e8:	feb42423          	sw	a1,-24(s0)
200124ec:	fec42783          	lw	a5,-20(s0)
200124f0:	439c                	lw	a5,0(a5)
200124f2:	4bdc                	lw	a5,20(a5)
200124f4:	fe842583          	lw	a1,-24(s0)
200124f8:	fec42503          	lw	a0,-20(s0)
200124fc:	9782                	jalr	a5
200124fe:	87aa                	mv	a5,a0
20012500:	853e                	mv	a0,a5
20012502:	40f2                	lw	ra,28(sp)
20012504:	4462                	lw	s0,24(sp)
20012506:	6105                	addi	sp,sp,32
20012508:	8082                	ret

2001250a <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:203
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
2001250a:	1101                	addi	sp,sp,-32
2001250c:	ce22                	sw	s0,28(sp)
2001250e:	1000                	addi	s0,sp,32
20012510:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:204
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20012514:	fec42703          	lw	a4,-20(s0)
20012518:	81018793          	addi	a5,gp,-2032 # 80001268 <__metal_dt_clint_2000000>
2001251c:	00f71563          	bne	a4,a5,20012526 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:205
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20012520:	020007b7          	lui	a5,0x2000
20012524:	a011                	j	20012528 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:208
	}
	else {
		return 0;
20012526:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:210
	}
}
20012528:	853e                	mv	a0,a5
2001252a:	4472                	lw	s0,28(sp)
2001252c:	6105                	addi	sp,sp,32
2001252e:	8082                	ret

20012530 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:223
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20012530:	1101                	addi	sp,sp,-32
20012532:	ce22                	sw	s0,28(sp)
20012534:	1000                	addi	s0,sp,32
20012536:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:224
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2001253a:	fec42703          	lw	a4,-20(s0)
2001253e:	81018793          	addi	a5,gp,-2032 # 80001268 <__metal_dt_clint_2000000>
20012542:	00f71463          	bne	a4,a5,2001254a <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:225
		return METAL_MAX_CLINT_INTERRUPTS;
20012546:	4789                	li	a5,2
20012548:	a011                	j	2001254c <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:228
	}
	else {
		return 0;
2001254a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:230
	}
}
2001254c:	853e                	mv	a0,a5
2001254e:	4472                	lw	s0,28(sp)
20012550:	6105                	addi	sp,sp,32
20012552:	8082                	ret

20012554 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:233

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20012554:	1101                	addi	sp,sp,-32
20012556:	ce22                	sw	s0,28(sp)
20012558:	1000                	addi	s0,sp,32
2001255a:	fea42623          	sw	a0,-20(s0)
2001255e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:234
	if (idx == 0) {
20012562:	fe842783          	lw	a5,-24(s0)
20012566:	e791                	bnez	a5,20012572 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:235
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20012568:	800017b7          	lui	a5,0x80001
2001256c:	86078793          	addi	a5,a5,-1952 # 80000860 <metal_segment_heap_target_end+0xffffe8fc>
20012570:	a821                	j	20012588 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:237
	}
	else if (idx == 1) {
20012572:	fe842703          	lw	a4,-24(s0)
20012576:	4785                	li	a5,1
20012578:	00f71763          	bne	a4,a5,20012586 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:238
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2001257c:	800017b7          	lui	a5,0x80001
20012580:	86078793          	addi	a5,a5,-1952 # 80000860 <metal_segment_heap_target_end+0xffffe8fc>
20012584:	a011                	j	20012588 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:241
	}
	else {
		return NULL;
20012586:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:243
	}
}
20012588:	853e                	mv	a0,a5
2001258a:	4472                	lw	s0,28(sp)
2001258c:	6105                	addi	sp,sp,32
2001258e:	8082                	ret

20012590 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:246

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20012590:	1101                	addi	sp,sp,-32
20012592:	ce22                	sw	s0,28(sp)
20012594:	1000                	addi	s0,sp,32
20012596:	fea42623          	sw	a0,-20(s0)
2001259a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:247
	if (idx == 0) {
2001259e:	fe842783          	lw	a5,-24(s0)
200125a2:	e399                	bnez	a5,200125a8 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:248
		return 3;
200125a4:	478d                	li	a5,3
200125a6:	a809                	j	200125b8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:250
	}
	else if (idx == 1) {
200125a8:	fe842703          	lw	a4,-24(s0)
200125ac:	4785                	li	a5,1
200125ae:	00f71463          	bne	a4,a5,200125b6 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:251
		return 7;
200125b2:	479d                	li	a5,7
200125b4:	a011                	j	200125b8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:254
	}
	else {
		return 0;
200125b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:256
	}
}
200125b8:	853e                	mv	a0,a5
200125ba:	4472                	lw	s0,28(sp)
200125bc:	6105                	addi	sp,sp,32
200125be:	8082                	ret

200125c0 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
200125c0:	715d                	addi	sp,sp,-80
200125c2:	c686                	sw	ra,76(sp)
200125c4:	c4a2                	sw	s0,72(sp)
200125c6:	c2ca                	sw	s2,68(sp)
200125c8:	c0ce                	sw	s3,64(sp)
200125ca:	de52                	sw	s4,60(sp)
200125cc:	dc56                	sw	s5,56(sp)
200125ce:	da5a                	sw	s6,52(sp)
200125d0:	d85e                	sw	s7,48(sp)
200125d2:	d662                	sw	s8,44(sp)
200125d4:	d466                	sw	s9,40(sp)
200125d6:	0880                	addi	s0,sp,80
200125d8:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
200125dc:	fbc42783          	lw	a5,-68(s0)
200125e0:	853e                	mv	a0,a5
200125e2:	3725                	jal	2001250a <__metal_driver_sifive_clint0_control_base>
200125e4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
200125e8:	fcc42703          	lw	a4,-52(s0)
200125ec:	67b1                	lui	a5,0xc
200125ee:	17f1                	addi	a5,a5,-4
200125f0:	97ba                	add	a5,a5,a4
200125f2:	439c                	lw	a5,0(a5)
200125f4:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
200125f8:	fcc42703          	lw	a4,-52(s0)
200125fc:	67b1                	lui	a5,0xc
200125fe:	17e1                	addi	a5,a5,-8
20012600:	97ba                	add	a5,a5,a4
20012602:	439c                	lw	a5,0(a5)
20012604:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20012608:	fcc42703          	lw	a4,-52(s0)
2001260c:	67b1                	lui	a5,0xc
2001260e:	17f1                	addi	a5,a5,-4
20012610:	97ba                	add	a5,a5,a4
20012612:	439c                	lw	a5,0(a5)
20012614:	fc842703          	lw	a4,-56(s0)
20012618:	fcf718e3          	bne	a4,a5,200125e8 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
2001261c:	fc842783          	lw	a5,-56(s0)
20012620:	8c3e                	mv	s8,a5
20012622:	4c81                	li	s9,0
20012624:	000c1993          	slli	s3,s8,0x0
20012628:	4901                	li	s2,0
2001262a:	fc442783          	lw	a5,-60(s0)
2001262e:	8a3e                	mv	s4,a5
20012630:	4a81                	li	s5,0
20012632:	01496b33          	or	s6,s2,s4
20012636:	0159ebb3          	or	s7,s3,s5
2001263a:	87da                	mv	a5,s6
2001263c:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
2001263e:	853e                	mv	a0,a5
20012640:	85c2                	mv	a1,a6
20012642:	40b6                	lw	ra,76(sp)
20012644:	4426                	lw	s0,72(sp)
20012646:	4916                	lw	s2,68(sp)
20012648:	4986                	lw	s3,64(sp)
2001264a:	5a72                	lw	s4,60(sp)
2001264c:	5ae2                	lw	s5,56(sp)
2001264e:	5b52                	lw	s6,52(sp)
20012650:	5bc2                	lw	s7,48(sp)
20012652:	5c32                	lw	s8,44(sp)
20012654:	5ca2                	lw	s9,40(sp)
20012656:	6161                	addi	sp,sp,80
20012658:	8082                	ret

2001265a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
2001265a:	7179                	addi	sp,sp,-48
2001265c:	d606                	sw	ra,44(sp)
2001265e:	d422                	sw	s0,40(sp)
20012660:	d24a                	sw	s2,36(sp)
20012662:	d04e                	sw	s3,32(sp)
20012664:	1800                	addi	s0,sp,48
20012666:	fca42e23          	sw	a0,-36(s0)
2001266a:	fcb42c23          	sw	a1,-40(s0)
2001266e:	fcc42823          	sw	a2,-48(s0)
20012672:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20012676:	fdc42783          	lw	a5,-36(s0)
2001267a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2001267e:	fec42783          	lw	a5,-20(s0)
20012682:	853e                	mv	a0,a5
20012684:	3559                	jal	2001250a <__metal_driver_sifive_clint0_control_base>
20012686:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
2001268a:	fd842783          	lw	a5,-40(s0)
2001268e:	078e                	slli	a5,a5,0x3
20012690:	873e                	mv	a4,a5
20012692:	fe842783          	lw	a5,-24(s0)
20012696:	973e                	add	a4,a4,a5
20012698:	6791                	lui	a5,0x4
2001269a:	0791                	addi	a5,a5,4
2001269c:	97ba                	add	a5,a5,a4
2001269e:	873e                	mv	a4,a5
200126a0:	57fd                	li	a5,-1
200126a2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
200126a4:	fd842783          	lw	a5,-40(s0)
200126a8:	078e                	slli	a5,a5,0x3
200126aa:	873e                	mv	a4,a5
200126ac:	fe842783          	lw	a5,-24(s0)
200126b0:	973e                	add	a4,a4,a5
200126b2:	6791                	lui	a5,0x4
200126b4:	97ba                	add	a5,a5,a4
200126b6:	873e                	mv	a4,a5
200126b8:	fd042783          	lw	a5,-48(s0)
200126bc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
200126be:	fd442783          	lw	a5,-44(s0)
200126c2:	0007d913          	srli	s2,a5,0x0
200126c6:	4981                	li	s3,0
200126c8:	fd842783          	lw	a5,-40(s0)
200126cc:	078e                	slli	a5,a5,0x3
200126ce:	873e                	mv	a4,a5
200126d0:	fe842783          	lw	a5,-24(s0)
200126d4:	973e                	add	a4,a4,a5
200126d6:	6791                	lui	a5,0x4
200126d8:	0791                	addi	a5,a5,4
200126da:	97ba                	add	a5,a5,a4
200126dc:	874a                	mv	a4,s2
200126de:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
200126e0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
200126e2:	853e                	mv	a0,a5
200126e4:	50b2                	lw	ra,44(sp)
200126e6:	5422                	lw	s0,40(sp)
200126e8:	5912                	lw	s2,36(sp)
200126ea:	5982                	lw	s3,32(sp)
200126ec:	6145                	addi	sp,sp,48
200126ee:	8082                	ret

200126f0 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
200126f0:	1101                	addi	sp,sp,-32
200126f2:	ce06                	sw	ra,28(sp)
200126f4:	cc22                	sw	s0,24(sp)
200126f6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
200126f8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
200126fc:	f14027f3          	csrr	a5,mhartid
20012700:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20012704:	fec42783          	lw	a5,-20(s0)
20012708:	853e                	mv	a0,a5
2001270a:	5f9030ef          	jal	ra,20016502 <metal_cpu_get>
2001270e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20012712:	fe842503          	lw	a0,-24(s0)
20012716:	5c7030ef          	jal	ra,200164dc <metal_cpu_interrupt_controller>
2001271a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
2001271c:	853e                	mv	a0,a5
2001271e:	40f2                	lw	ra,28(sp)
20012720:	4462                	lw	s0,24(sp)
20012722:	6105                	addi	sp,sp,32
20012724:	8082                	ret

20012726 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20012726:	7139                	addi	sp,sp,-64
20012728:	de06                	sw	ra,60(sp)
2001272a:	dc22                	sw	s0,56(sp)
2001272c:	0080                	addi	s0,sp,64
2001272e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20012732:	fcc42503          	lw	a0,-52(s0)
20012736:	3bed                	jal	20012530 <__metal_driver_sifive_clint0_num_interrupts>
20012738:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
2001273c:	fcc42783          	lw	a5,-52(s0)
20012740:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20012744:	fe442783          	lw	a5,-28(s0)
20012748:	43dc                	lw	a5,4(a5)
2001274a:	efa9                	bnez	a5,200127a4 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
2001274c:	fe042623          	sw	zero,-20(s0)
20012750:	a081                	j	20012790 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20012752:	fec42583          	lw	a1,-20(s0)
20012756:	fcc42503          	lw	a0,-52(s0)
2001275a:	3bed                	jal	20012554 <__metal_driver_sifive_clint0_interrupt_parents>
2001275c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20012760:	fec42583          	lw	a1,-20(s0)
20012764:	fcc42503          	lw	a0,-52(s0)
20012768:	3525                	jal	20012590 <__metal_driver_sifive_clint0_interrupt_lines>
2001276a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
2001276e:	fe042783          	lw	a5,-32(s0)
20012772:	439c                	lw	a5,0(a5)
20012774:	4fdc                	lw	a5,28(a5)
20012776:	fcc42683          	lw	a3,-52(s0)
2001277a:	4601                	li	a2,0
2001277c:	fdc42583          	lw	a1,-36(s0)
20012780:	fe042503          	lw	a0,-32(s0)
20012784:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20012786:	fec42783          	lw	a5,-20(s0)
2001278a:	0785                	addi	a5,a5,1
2001278c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20012790:	fec42703          	lw	a4,-20(s0)
20012794:	fe842783          	lw	a5,-24(s0)
20012798:	faf74de3          	blt	a4,a5,20012752 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
2001279c:	fe442783          	lw	a5,-28(s0)
200127a0:	4705                	li	a4,1
200127a2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
200127a4:	0001                	nop
200127a6:	50f2                	lw	ra,60(sp)
200127a8:	5462                	lw	s0,56(sp)
200127aa:	6121                	addi	sp,sp,64
200127ac:	8082                	ret

200127ae <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
200127ae:	7139                	addi	sp,sp,-64
200127b0:	de06                	sw	ra,60(sp)
200127b2:	dc22                	sw	s0,56(sp)
200127b4:	0080                	addi	s0,sp,64
200127b6:	fca42623          	sw	a0,-52(s0)
200127ba:	fcb42423          	sw	a1,-56(s0)
200127be:	fcc42223          	sw	a2,-60(s0)
200127c2:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
200127c6:	57fd                	li	a5,-1
200127c8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
200127cc:	34a010ef          	jal	ra,20013b16 <__metal_controller_interrupt_vector_mode>
200127d0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
200127d4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
200127d8:	3f21                	jal	200126f0 <_get_cpu_intc>
200127da:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
200127de:	fcc42503          	lw	a0,-52(s0)
200127e2:	33b9                	jal	20012530 <__metal_driver_sifive_clint0_num_interrupts>
200127e4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
200127e8:	fe042703          	lw	a4,-32(s0)
200127ec:	4785                	li	a5,1
200127ee:	00f70863          	beq	a4,a5,200127fe <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
200127f2:	fe042783          	lw	a5,-32(s0)
200127f6:	c781                	beqz	a5,200127fe <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
200127f8:	fec42783          	lw	a5,-20(s0)
200127fc:	a049                	j	2001287e <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
200127fe:	fe042223          	sw	zero,-28(s0)
20012802:	a091                	j	20012846 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20012804:	fe442583          	lw	a1,-28(s0)
20012808:	fcc42503          	lw	a0,-52(s0)
2001280c:	3351                	jal	20012590 <__metal_driver_sifive_clint0_interrupt_lines>
2001280e:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20012812:	fe442583          	lw	a1,-28(s0)
20012816:	fcc42503          	lw	a0,-52(s0)
2001281a:	3b2d                	jal	20012554 <__metal_driver_sifive_clint0_interrupt_parents>
2001281c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20012820:	fdc42703          	lw	a4,-36(s0)
20012824:	fe842783          	lw	a5,-24(s0)
20012828:	00f71863          	bne	a4,a5,20012838 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
2001282c:	fc842703          	lw	a4,-56(s0)
20012830:	fd442783          	lw	a5,-44(s0)
20012834:	02f70063          	beq	a4,a5,20012854 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20012838:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
2001283c:	fe442783          	lw	a5,-28(s0)
20012840:	0785                	addi	a5,a5,1
20012842:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20012846:	fe442703          	lw	a4,-28(s0)
2001284a:	fd842783          	lw	a5,-40(s0)
2001284e:	faf74be3          	blt	a4,a5,20012804 <__metal_driver_riscv_clint0_register+0x56>
20012852:	a011                	j	20012856 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20012854:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20012856:	fe842783          	lw	a5,-24(s0)
2001285a:	c385                	beqz	a5,2001287a <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
2001285c:	fe842783          	lw	a5,-24(s0)
20012860:	439c                	lw	a5,0(a5)
20012862:	4fdc                	lw	a5,28(a5)
20012864:	fc042683          	lw	a3,-64(s0)
20012868:	fc442603          	lw	a2,-60(s0)
2001286c:	fc842583          	lw	a1,-56(s0)
20012870:	fe842503          	lw	a0,-24(s0)
20012874:	9782                	jalr	a5
20012876:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2001287a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
2001287e:	853e                	mv	a0,a5
20012880:	50f2                	lw	ra,60(sp)
20012882:	5462                	lw	s0,56(sp)
20012884:	6121                	addi	sp,sp,64
20012886:	8082                	ret

20012888 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20012888:	7179                	addi	sp,sp,-48
2001288a:	d622                	sw	s0,44(sp)
2001288c:	1800                	addi	s0,sp,48
2001288e:	fca42e23          	sw	a0,-36(s0)
20012892:	fcb42c23          	sw	a1,-40(s0)
20012896:	fcc42a23          	sw	a2,-44(s0)
2001289a:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
2001289e:	57fd                	li	a5,-1
200128a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
200128a4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
200128a8:	853e                	mv	a0,a5
200128aa:	5432                	lw	s0,44(sp)
200128ac:	6145                	addi	sp,sp,48
200128ae:	8082                	ret

200128b0 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
200128b0:	1101                	addi	sp,sp,-32
200128b2:	ce06                	sw	ra,28(sp)
200128b4:	cc22                	sw	s0,24(sp)
200128b6:	1000                	addi	s0,sp,32
200128b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
200128bc:	25a010ef          	jal	ra,20013b16 <__metal_controller_interrupt_vector_mode>
200128c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
200128c2:	853e                	mv	a0,a5
200128c4:	40f2                	lw	ra,28(sp)
200128c6:	4462                	lw	s0,24(sp)
200128c8:	6105                	addi	sp,sp,32
200128ca:	8082                	ret

200128cc <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
200128cc:	7179                	addi	sp,sp,-48
200128ce:	d606                	sw	ra,44(sp)
200128d0:	d422                	sw	s0,40(sp)
200128d2:	1800                	addi	s0,sp,48
200128d4:	fca42e23          	sw	a0,-36(s0)
200128d8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
200128dc:	57fd                	li	a5,-1
200128de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
200128e2:	3539                	jal	200126f0 <_get_cpu_intc>
200128e4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
200128e8:	fe842783          	lw	a5,-24(s0)
200128ec:	c395                	beqz	a5,20012910 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
200128ee:	fd842703          	lw	a4,-40(s0)
200128f2:	4785                	li	a5,1
200128f4:	00e7ef63          	bltu	a5,a4,20012912 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
200128f8:	fe842783          	lw	a5,-24(s0)
200128fc:	439c                	lw	a5,0(a5)
200128fe:	43dc                	lw	a5,4(a5)
20012900:	fd842583          	lw	a1,-40(s0)
20012904:	fe842503          	lw	a0,-24(s0)
20012908:	9782                	jalr	a5
2001290a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
2001290e:	a011                	j	20012912 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20012910:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20012912:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20012916:	853e                	mv	a0,a5
20012918:	50b2                	lw	ra,44(sp)
2001291a:	5422                	lw	s0,40(sp)
2001291c:	6145                	addi	sp,sp,48
2001291e:	8082                	ret

20012920 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20012920:	7139                	addi	sp,sp,-64
20012922:	de06                	sw	ra,60(sp)
20012924:	dc22                	sw	s0,56(sp)
20012926:	0080                	addi	s0,sp,64
20012928:	fca42623          	sw	a0,-52(s0)
2001292c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20012930:	57fd                	li	a5,-1
20012932:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20012936:	fc842783          	lw	a5,-56(s0)
2001293a:	c7c9                	beqz	a5,200129c4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
2001293c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20012940:	3b45                	jal	200126f0 <_get_cpu_intc>
20012942:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20012946:	fcc42503          	lw	a0,-52(s0)
2001294a:	36dd                	jal	20012530 <__metal_driver_sifive_clint0_num_interrupts>
2001294c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20012950:	fe042223          	sw	zero,-28(s0)
20012954:	a091                	j	20012998 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20012956:	fe442583          	lw	a1,-28(s0)
2001295a:	fcc42503          	lw	a0,-52(s0)
2001295e:	390d                	jal	20012590 <__metal_driver_sifive_clint0_interrupt_lines>
20012960:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20012964:	fe442583          	lw	a1,-28(s0)
20012968:	fcc42503          	lw	a0,-52(s0)
2001296c:	36e5                	jal	20012554 <__metal_driver_sifive_clint0_interrupt_parents>
2001296e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20012972:	fe042703          	lw	a4,-32(s0)
20012976:	fe842783          	lw	a5,-24(s0)
2001297a:	00f71863          	bne	a4,a5,2001298a <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
2001297e:	fc842703          	lw	a4,-56(s0)
20012982:	fd842783          	lw	a5,-40(s0)
20012986:	02f70063          	beq	a4,a5,200129a6 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
2001298a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2001298e:	fe442783          	lw	a5,-28(s0)
20012992:	0785                	addi	a5,a5,1
20012994:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20012998:	fe442703          	lw	a4,-28(s0)
2001299c:	fdc42783          	lw	a5,-36(s0)
200129a0:	faf74be3          	blt	a4,a5,20012956 <__metal_driver_riscv_clint0_enable+0x36>
200129a4:	a011                	j	200129a8 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
200129a6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
200129a8:	fe842783          	lw	a5,-24(s0)
200129ac:	cf81                	beqz	a5,200129c4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
200129ae:	fe842783          	lw	a5,-24(s0)
200129b2:	439c                	lw	a5,0(a5)
200129b4:	53dc                	lw	a5,36(a5)
200129b6:	fc842583          	lw	a1,-56(s0)
200129ba:	fe842503          	lw	a0,-24(s0)
200129be:	9782                	jalr	a5
200129c0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
200129c4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
200129c8:	853e                	mv	a0,a5
200129ca:	50f2                	lw	ra,60(sp)
200129cc:	5462                	lw	s0,56(sp)
200129ce:	6121                	addi	sp,sp,64
200129d0:	8082                	ret

200129d2 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
200129d2:	7139                	addi	sp,sp,-64
200129d4:	de06                	sw	ra,60(sp)
200129d6:	dc22                	sw	s0,56(sp)
200129d8:	0080                	addi	s0,sp,64
200129da:	fca42623          	sw	a0,-52(s0)
200129de:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
200129e2:	57fd                	li	a5,-1
200129e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
200129e8:	fc842783          	lw	a5,-56(s0)
200129ec:	cbc1                	beqz	a5,20012a7c <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
200129ee:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
200129f2:	39fd                	jal	200126f0 <_get_cpu_intc>
200129f4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
200129f8:	fcc42503          	lw	a0,-52(s0)
200129fc:	b35ff0ef          	jal	ra,20012530 <__metal_driver_sifive_clint0_num_interrupts>
20012a00:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20012a04:	fe042223          	sw	zero,-28(s0)
20012a08:	a0a1                	j	20012a50 <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20012a0a:	fe442583          	lw	a1,-28(s0)
20012a0e:	fcc42503          	lw	a0,-52(s0)
20012a12:	b7fff0ef          	jal	ra,20012590 <__metal_driver_sifive_clint0_interrupt_lines>
20012a16:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20012a1a:	fe442583          	lw	a1,-28(s0)
20012a1e:	fcc42503          	lw	a0,-52(s0)
20012a22:	b33ff0ef          	jal	ra,20012554 <__metal_driver_sifive_clint0_interrupt_parents>
20012a26:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20012a2a:	fe042703          	lw	a4,-32(s0)
20012a2e:	fe842783          	lw	a5,-24(s0)
20012a32:	00f71863          	bne	a4,a5,20012a42 <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20012a36:	fc842703          	lw	a4,-56(s0)
20012a3a:	fd842783          	lw	a5,-40(s0)
20012a3e:	02f70063          	beq	a4,a5,20012a5e <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20012a42:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20012a46:	fe442783          	lw	a5,-28(s0)
20012a4a:	0785                	addi	a5,a5,1
20012a4c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20012a50:	fe442703          	lw	a4,-28(s0)
20012a54:	fdc42783          	lw	a5,-36(s0)
20012a58:	faf749e3          	blt	a4,a5,20012a0a <__metal_driver_riscv_clint0_disable+0x38>
20012a5c:	a011                	j	20012a60 <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20012a5e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20012a60:	fe842783          	lw	a5,-24(s0)
20012a64:	cf81                	beqz	a5,20012a7c <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20012a66:	fe842783          	lw	a5,-24(s0)
20012a6a:	439c                	lw	a5,0(a5)
20012a6c:	579c                	lw	a5,40(a5)
20012a6e:	fc842583          	lw	a1,-56(s0)
20012a72:	fe842503          	lw	a0,-24(s0)
20012a76:	9782                	jalr	a5
20012a78:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20012a7c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20012a80:	853e                	mv	a0,a5
20012a82:	50f2                	lw	ra,60(sp)
20012a84:	5462                	lw	s0,56(sp)
20012a86:	6121                	addi	sp,sp,64
20012a88:	8082                	ret

20012a8a <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20012a8a:	7179                	addi	sp,sp,-48
20012a8c:	d606                	sw	ra,44(sp)
20012a8e:	d422                	sw	s0,40(sp)
20012a90:	1800                	addi	s0,sp,48
20012a92:	fca42e23          	sw	a0,-36(s0)
20012a96:	fcb42c23          	sw	a1,-40(s0)
20012a9a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20012a9e:	57fd                	li	a5,-1
20012aa0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20012aa4:	fdc42783          	lw	a5,-36(s0)
20012aa8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20012aac:	fdc42503          	lw	a0,-36(s0)
20012ab0:	a5bff0ef          	jal	ra,2001250a <__metal_driver_sifive_clint0_control_base>
20012ab4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20012ab8:	fd842703          	lw	a4,-40(s0)
20012abc:	4789                	li	a5,2
20012abe:	04f70963          	beq	a4,a5,20012b10 <__metal_driver_riscv_clint0_command_request+0x86>
20012ac2:	fd842703          	lw	a4,-40(s0)
20012ac6:	4789                	li	a5,2
20012ac8:	00e7c863          	blt	a5,a4,20012ad8 <__metal_driver_riscv_clint0_command_request+0x4e>
20012acc:	fd842703          	lw	a4,-40(s0)
20012ad0:	4785                	li	a5,1
20012ad2:	00f70e63          	beq	a4,a5,20012aee <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20012ad6:	a8f1                	j	20012bb2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20012ad8:	fd842703          	lw	a4,-40(s0)
20012adc:	478d                	li	a5,3
20012ade:	04f70d63          	beq	a4,a5,20012b38 <__metal_driver_riscv_clint0_command_request+0xae>
20012ae2:	fd842703          	lw	a4,-40(s0)
20012ae6:	4791                	li	a5,4
20012ae8:	08f70963          	beq	a4,a5,20012b7a <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20012aec:	a0d9                	j	20012bb2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20012aee:	fd442783          	lw	a5,-44(s0)
20012af2:	cbcd                	beqz	a5,20012ba4 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20012af4:	fe842503          	lw	a0,-24(s0)
20012af8:	ac9ff0ef          	jal	ra,200125c0 <__metal_clint0_mtime_get>
20012afc:	87aa                	mv	a5,a0
20012afe:	882e                	mv	a6,a1
20012b00:	fd442703          	lw	a4,-44(s0)
20012b04:	c31c                	sw	a5,0(a4)
20012b06:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20012b0a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20012b0e:	a859                	j	20012ba4 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20012b10:	fd442783          	lw	a5,-44(s0)
20012b14:	cbd1                	beqz	a5,20012ba8 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20012b16:	fd442783          	lw	a5,-44(s0)
20012b1a:	439c                	lw	a5,0(a5)
20012b1c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20012b20:	fe042783          	lw	a5,-32(s0)
20012b24:	078a                	slli	a5,a5,0x2
20012b26:	873e                	mv	a4,a5
20012b28:	fe442783          	lw	a5,-28(s0)
20012b2c:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20012b2e:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20012b32:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20012b36:	a88d                	j	20012ba8 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20012b38:	fd442783          	lw	a5,-44(s0)
20012b3c:	cba5                	beqz	a5,20012bac <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20012b3e:	fd442783          	lw	a5,-44(s0)
20012b42:	439c                	lw	a5,0(a5)
20012b44:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20012b48:	fe042783          	lw	a5,-32(s0)
20012b4c:	078a                	slli	a5,a5,0x2
20012b4e:	873e                	mv	a4,a5
20012b50:	fe442783          	lw	a5,-28(s0)
20012b54:	97ba                	add	a5,a5,a4
20012b56:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20012b58:	4785                	li	a5,1
20012b5a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20012b5c:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20012b60:	fe042783          	lw	a5,-32(s0)
20012b64:	078a                	slli	a5,a5,0x2
20012b66:	873e                	mv	a4,a5
20012b68:	fe442783          	lw	a5,-28(s0)
20012b6c:	97ba                	add	a5,a5,a4
20012b6e:	439c                	lw	a5,0(a5)
20012b70:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20012b74:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20012b78:	a815                	j	20012bac <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20012b7a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20012b7e:	fd442783          	lw	a5,-44(s0)
20012b82:	c79d                	beqz	a5,20012bb0 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20012b84:	fd442783          	lw	a5,-44(s0)
20012b88:	439c                	lw	a5,0(a5)
20012b8a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20012b8e:	fe042783          	lw	a5,-32(s0)
20012b92:	078a                	slli	a5,a5,0x2
20012b94:	873e                	mv	a4,a5
20012b96:	fe442783          	lw	a5,-28(s0)
20012b9a:	97ba                	add	a5,a5,a4
20012b9c:	439c                	lw	a5,0(a5)
20012b9e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20012ba2:	a039                	j	20012bb0 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20012ba4:	0001                	nop
20012ba6:	a031                	j	20012bb2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20012ba8:	0001                	nop
20012baa:	a021                	j	20012bb2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20012bac:	0001                	nop
20012bae:	a011                	j	20012bb2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20012bb0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20012bb2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20012bb6:	853e                	mv	a0,a5
20012bb8:	50b2                	lw	ra,44(sp)
20012bba:	5422                	lw	s0,40(sp)
20012bbc:	6145                	addi	sp,sp,48
20012bbe:	8082                	ret

20012bc0 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20012bc0:	7179                	addi	sp,sp,-48
20012bc2:	d606                	sw	ra,44(sp)
20012bc4:	d422                	sw	s0,40(sp)
20012bc6:	1800                	addi	s0,sp,48
20012bc8:	fca42e23          	sw	a0,-36(s0)
20012bcc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20012bd0:	15d030ef          	jal	ra,2001652c <metal_cpu_get_current_hartid>
20012bd4:	87aa                	mv	a5,a0
20012bd6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20012bda:	fec40793          	addi	a5,s0,-20
20012bde:	863e                	mv	a2,a5
20012be0:	4589                	li	a1,2
20012be2:	fdc42503          	lw	a0,-36(s0)
20012be6:	3555                	jal	20012a8a <__metal_driver_riscv_clint0_command_request>
20012be8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20012bea:	853e                	mv	a0,a5
20012bec:	50b2                	lw	ra,44(sp)
20012bee:	5422                	lw	s0,40(sp)
20012bf0:	6145                	addi	sp,sp,48
20012bf2:	8082                	ret

20012bf4 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20012bf4:	7179                	addi	sp,sp,-48
20012bf6:	d606                	sw	ra,44(sp)
20012bf8:	d422                	sw	s0,40(sp)
20012bfa:	1800                	addi	s0,sp,48
20012bfc:	fca42e23          	sw	a0,-36(s0)
20012c00:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20012c04:	129030ef          	jal	ra,2001652c <metal_cpu_get_current_hartid>
20012c08:	87aa                	mv	a5,a0
20012c0a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20012c0e:	fec40793          	addi	a5,s0,-20
20012c12:	863e                	mv	a2,a5
20012c14:	458d                	li	a1,3
20012c16:	fdc42503          	lw	a0,-36(s0)
20012c1a:	3d85                	jal	20012a8a <__metal_driver_riscv_clint0_command_request>
20012c1c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20012c1e:	853e                	mv	a0,a5
20012c20:	50b2                	lw	ra,44(sp)
20012c22:	5422                	lw	s0,40(sp)
20012c24:	6145                	addi	sp,sp,48
20012c26:	8082                	ret

20012c28 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:262



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20012c28:	1101                	addi	sp,sp,-32
20012c2a:	ce22                	sw	s0,28(sp)
20012c2c:	1000                	addi	s0,sp,32
20012c2e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:263
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20012c32:	fec42703          	lw	a4,-20(s0)
20012c36:	81818793          	addi	a5,gp,-2024 # 80001270 <__metal_dt_cpu_0>
20012c3a:	00f71463          	bne	a4,a5,20012c42 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:264
		return 0;
20012c3e:	4781                	li	a5,0
20012c40:	a011                	j	20012c44 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:267
	}
	else {
		return -1;
20012c42:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:269
	}
}
20012c44:	853e                	mv	a0,a5
20012c46:	4472                	lw	s0,28(sp)
20012c48:	6105                	addi	sp,sp,32
20012c4a:	8082                	ret

20012c4c <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:272

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20012c4c:	1101                	addi	sp,sp,-32
20012c4e:	ce22                	sw	s0,28(sp)
20012c50:	1000                	addi	s0,sp,32
20012c52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:273
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20012c56:	fec42703          	lw	a4,-20(s0)
20012c5a:	81818793          	addi	a5,gp,-2024 # 80001270 <__metal_dt_cpu_0>
20012c5e:	00f71763          	bne	a4,a5,20012c6c <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:274
		return 16000000;
20012c62:	00f427b7          	lui	a5,0xf42
20012c66:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20012c6a:	a011                	j	20012c6e <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:277
	}
	else {
		return 0;
20012c6c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:279
	}
}
20012c6e:	853e                	mv	a0,a5
20012c70:	4472                	lw	s0,28(sp)
20012c72:	6105                	addi	sp,sp,32
20012c74:	8082                	ret

20012c76 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:282

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20012c76:	1101                	addi	sp,sp,-32
20012c78:	ce22                	sw	s0,28(sp)
20012c7a:	1000                	addi	s0,sp,32
20012c7c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:283
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20012c80:	fec42703          	lw	a4,-20(s0)
20012c84:	81818793          	addi	a5,gp,-2024 # 80001270 <__metal_dt_cpu_0>
20012c88:	00f71763          	bne	a4,a5,20012c96 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:284
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20012c8c:	800017b7          	lui	a5,0x80001
20012c90:	86078793          	addi	a5,a5,-1952 # 80000860 <metal_segment_heap_target_end+0xffffe8fc>
20012c94:	a011                	j	20012c98 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:287
	}
	else {
		return NULL;
20012c96:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:289
	}
}
20012c98:	853e                	mv	a0,a5
20012c9a:	4472                	lw	s0,28(sp)
20012c9c:	6105                	addi	sp,sp,32
20012c9e:	8082                	ret

20012ca0 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20012ca0:	1101                	addi	sp,sp,-32
20012ca2:	ce22                	sw	s0,28(sp)
20012ca4:	1000                	addi	s0,sp,32
20012ca6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20012caa:	fec42783          	lw	a5,-20(s0)
20012cae:	00f04a63          	bgtz	a5,20012cc2 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20012cb2:	fec42703          	lw	a4,-20(s0)
20012cb6:	070a                	slli	a4,a4,0x2
20012cb8:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20012cbc:	97ba                	add	a5,a5,a4
20012cbe:	439c                	lw	a5,0(a5)
20012cc0:	a011                	j	20012cc4 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20012cc2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20012cc4:	853e                	mv	a0,a5
20012cc6:	4472                	lw	s0,28(sp)
20012cc8:	6105                	addi	sp,sp,32
20012cca:	8082                	ret

20012ccc <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20012ccc:	1101                	addi	sp,sp,-32
20012cce:	ce22                	sw	s0,28(sp)
20012cd0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20012cd2:	f14027f3          	csrr	a5,mhartid
20012cd6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20012cda:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20012cde:	853e                	mv	a0,a5
20012ce0:	4472                	lw	s0,28(sp)
20012ce2:	6105                	addi	sp,sp,32
20012ce4:	8082                	ret

20012ce6 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20012ce6:	1101                	addi	sp,sp,-32
20012ce8:	ce22                	sw	s0,28(sp)
20012cea:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20012cec:	47a1                	li	a5,8
20012cee:	3007a7f3          	csrrs	a5,mstatus,a5
20012cf2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20012cf6:	0001                	nop
20012cf8:	4472                	lw	s0,28(sp)
20012cfa:	6105                	addi	sp,sp,32
20012cfc:	8082                	ret

20012cfe <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20012cfe:	1101                	addi	sp,sp,-32
20012d00:	ce22                	sw	s0,28(sp)
20012d02:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20012d04:	47a1                	li	a5,8
20012d06:	3007b7f3          	csrrc	a5,mstatus,a5
20012d0a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20012d0e:	0001                	nop
20012d10:	4472                	lw	s0,28(sp)
20012d12:	6105                	addi	sp,sp,32
20012d14:	8082                	ret

20012d16 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20012d16:	1101                	addi	sp,sp,-32
20012d18:	ce22                	sw	s0,28(sp)
20012d1a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20012d1c:	47a1                	li	a5,8
20012d1e:	3047a7f3          	csrrs	a5,mie,a5
20012d22:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20012d26:	0001                	nop
20012d28:	4472                	lw	s0,28(sp)
20012d2a:	6105                	addi	sp,sp,32
20012d2c:	8082                	ret

20012d2e <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20012d2e:	1101                	addi	sp,sp,-32
20012d30:	ce22                	sw	s0,28(sp)
20012d32:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20012d34:	47a1                	li	a5,8
20012d36:	3047b7f3          	csrrc	a5,mie,a5
20012d3a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20012d3e:	0001                	nop
20012d40:	4472                	lw	s0,28(sp)
20012d42:	6105                	addi	sp,sp,32
20012d44:	8082                	ret

20012d46 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20012d46:	1101                	addi	sp,sp,-32
20012d48:	ce22                	sw	s0,28(sp)
20012d4a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20012d4c:	08000793          	li	a5,128
20012d50:	3047a7f3          	csrrs	a5,mie,a5
20012d54:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20012d58:	0001                	nop
20012d5a:	4472                	lw	s0,28(sp)
20012d5c:	6105                	addi	sp,sp,32
20012d5e:	8082                	ret

20012d60 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20012d60:	1101                	addi	sp,sp,-32
20012d62:	ce22                	sw	s0,28(sp)
20012d64:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20012d66:	08000793          	li	a5,128
20012d6a:	3047b7f3          	csrrc	a5,mie,a5
20012d6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20012d72:	0001                	nop
20012d74:	4472                	lw	s0,28(sp)
20012d76:	6105                	addi	sp,sp,32
20012d78:	8082                	ret

20012d7a <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20012d7a:	1101                	addi	sp,sp,-32
20012d7c:	ce22                	sw	s0,28(sp)
20012d7e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20012d80:	6785                	lui	a5,0x1
20012d82:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20012d86:	3047a7f3          	csrrs	a5,mie,a5
20012d8a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20012d8e:	0001                	nop
20012d90:	4472                	lw	s0,28(sp)
20012d92:	6105                	addi	sp,sp,32
20012d94:	8082                	ret

20012d96 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20012d96:	1101                	addi	sp,sp,-32
20012d98:	ce22                	sw	s0,28(sp)
20012d9a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20012d9c:	6785                	lui	a5,0x1
20012d9e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20012da2:	3047b7f3          	csrrc	a5,mie,a5
20012da6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20012daa:	0001                	nop
20012dac:	4472                	lw	s0,28(sp)
20012dae:	6105                	addi	sp,sp,32
20012db0:	8082                	ret

20012db2 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20012db2:	7179                	addi	sp,sp,-48
20012db4:	d622                	sw	s0,44(sp)
20012db6:	1800                	addi	s0,sp,48
20012db8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20012dbc:	fdc42783          	lw	a5,-36(s0)
20012dc0:	4705                	li	a4,1
20012dc2:	00f717b3          	sll	a5,a4,a5
20012dc6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20012dca:	fec42783          	lw	a5,-20(s0)
20012dce:	3047a7f3          	csrrs	a5,mie,a5
20012dd2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20012dd6:	0001                	nop
20012dd8:	5432                	lw	s0,44(sp)
20012dda:	6145                	addi	sp,sp,48
20012ddc:	8082                	ret

20012dde <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20012dde:	7179                	addi	sp,sp,-48
20012de0:	d622                	sw	s0,44(sp)
20012de2:	1800                	addi	s0,sp,48
20012de4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20012de8:	fdc42783          	lw	a5,-36(s0)
20012dec:	4705                	li	a4,1
20012dee:	00f717b3          	sll	a5,a4,a5
20012df2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20012df6:	fec42783          	lw	a5,-20(s0)
20012dfa:	3047b7f3          	csrrc	a5,mie,a5
20012dfe:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20012e02:	0001                	nop
20012e04:	5432                	lw	s0,44(sp)
20012e06:	6145                	addi	sp,sp,48
20012e08:	8082                	ret

20012e0a <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20012e0a:	1101                	addi	sp,sp,-32
20012e0c:	ce06                	sw	ra,28(sp)
20012e0e:	cc22                	sw	s0,24(sp)
20012e10:	1000                	addi	s0,sp,32
20012e12:	fea42623          	sw	a0,-20(s0)
20012e16:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20012e1a:	06400513          	li	a0,100
20012e1e:	728030ef          	jal	ra,20016546 <metal_shutdown>

20012e22 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20012e22:	1101                	addi	sp,sp,-32
20012e24:	ce06                	sw	ra,28(sp)
20012e26:	cc22                	sw	s0,24(sp)
20012e28:	1000                	addi	s0,sp,32
20012e2a:	fea42623          	sw	a0,-20(s0)
20012e2e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20012e32:	0c800513          	li	a0,200
20012e36:	710030ef          	jal	ra,20016546 <metal_shutdown>

20012e3a <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20012e3a:	715d                	addi	sp,sp,-80
20012e3c:	c686                	sw	ra,76(sp)
20012e3e:	c496                	sw	t0,72(sp)
20012e40:	c29a                	sw	t1,68(sp)
20012e42:	c09e                	sw	t2,64(sp)
20012e44:	de22                	sw	s0,60(sp)
20012e46:	dc2a                	sw	a0,56(sp)
20012e48:	da2e                	sw	a1,52(sp)
20012e4a:	d832                	sw	a2,48(sp)
20012e4c:	d636                	sw	a3,44(sp)
20012e4e:	d43a                	sw	a4,40(sp)
20012e50:	d23e                	sw	a5,36(sp)
20012e52:	d042                	sw	a6,32(sp)
20012e54:	ce46                	sw	a7,28(sp)
20012e56:	cc72                	sw	t3,24(sp)
20012e58:	ca76                	sw	t4,20(sp)
20012e5a:	c87a                	sw	t5,16(sp)
20012e5c:	c67e                	sw	t6,12(sp)
20012e5e:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20012e60:	12c00513          	li	a0,300
20012e64:	6e2030ef          	jal	ra,20016546 <metal_shutdown>

20012e68 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20012e68:	711d                	addi	sp,sp,-96
20012e6a:	ce86                	sw	ra,92(sp)
20012e6c:	cc96                	sw	t0,88(sp)
20012e6e:	ca9a                	sw	t1,84(sp)
20012e70:	c89e                	sw	t2,80(sp)
20012e72:	c6a2                	sw	s0,76(sp)
20012e74:	c4aa                	sw	a0,72(sp)
20012e76:	c2ae                	sw	a1,68(sp)
20012e78:	c0b2                	sw	a2,64(sp)
20012e7a:	de36                	sw	a3,60(sp)
20012e7c:	dc3a                	sw	a4,56(sp)
20012e7e:	da3e                	sw	a5,52(sp)
20012e80:	d842                	sw	a6,48(sp)
20012e82:	d646                	sw	a7,44(sp)
20012e84:	d472                	sw	t3,40(sp)
20012e86:	d276                	sw	t4,36(sp)
20012e88:	d07a                	sw	t5,32(sp)
20012e8a:	ce7e                	sw	t6,28(sp)
20012e8c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012e8e:	3d3d                	jal	20012ccc <__metal_myhart_id>
20012e90:	872a                	mv	a4,a0
20012e92:	070a                	slli	a4,a4,0x2
20012e94:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20012e98:	97ba                	add	a5,a5,a4
20012e9a:	439c                	lw	a5,0(a5)
20012e9c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20012ea0:	fac42783          	lw	a5,-84(s0)
20012ea4:	c785                	beqz	a5,20012ecc <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012ea6:	fac42503          	lw	a0,-84(s0)
20012eaa:	33f1                	jal	20012c76 <__metal_driver_cpu_interrupt_controller>
20012eac:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20012eb0:	fa842783          	lw	a5,-88(s0)
20012eb4:	0e07a783          	lw	a5,224(a5)
20012eb8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20012ebc:	fa842783          	lw	a5,-88(s0)
20012ec0:	0d87a783          	lw	a5,216(a5)
20012ec4:	fa442583          	lw	a1,-92(s0)
20012ec8:	450d                	li	a0,3
20012eca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20012ecc:	0001                	nop
20012ece:	40f6                	lw	ra,92(sp)
20012ed0:	42e6                	lw	t0,88(sp)
20012ed2:	4356                	lw	t1,84(sp)
20012ed4:	43c6                	lw	t2,80(sp)
20012ed6:	4436                	lw	s0,76(sp)
20012ed8:	4526                	lw	a0,72(sp)
20012eda:	4596                	lw	a1,68(sp)
20012edc:	4606                	lw	a2,64(sp)
20012ede:	56f2                	lw	a3,60(sp)
20012ee0:	5762                	lw	a4,56(sp)
20012ee2:	57d2                	lw	a5,52(sp)
20012ee4:	5842                	lw	a6,48(sp)
20012ee6:	58b2                	lw	a7,44(sp)
20012ee8:	5e22                	lw	t3,40(sp)
20012eea:	5e92                	lw	t4,36(sp)
20012eec:	5f02                	lw	t5,32(sp)
20012eee:	4ff2                	lw	t6,28(sp)
20012ef0:	6125                	addi	sp,sp,96
20012ef2:	30200073          	mret

20012ef6 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20012ef6:	7179                	addi	sp,sp,-48
20012ef8:	d606                	sw	ra,44(sp)
20012efa:	d422                	sw	s0,40(sp)
20012efc:	1800                	addi	s0,sp,48
20012efe:	fca42e23          	sw	a0,-36(s0)
20012f02:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012f06:	33d9                	jal	20012ccc <__metal_myhart_id>
20012f08:	872a                	mv	a4,a0
20012f0a:	070a                	slli	a4,a4,0x2
20012f0c:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20012f10:	97ba                	add	a5,a5,a4
20012f12:	439c                	lw	a5,0(a5)
20012f14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20012f18:	342027f3          	csrr	a5,mcause
20012f1c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20012f20:	fec42783          	lw	a5,-20(s0)
20012f24:	c795                	beqz	a5,20012f50 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012f26:	fec42503          	lw	a0,-20(s0)
20012f2a:	33b1                	jal	20012c76 <__metal_driver_cpu_interrupt_controller>
20012f2c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20012f30:	fe842783          	lw	a5,-24(s0)
20012f34:	3ff7f793          	andi	a5,a5,1023
20012f38:	fe442703          	lw	a4,-28(s0)
20012f3c:	0e078793          	addi	a5,a5,224
20012f40:	078a                	slli	a5,a5,0x2
20012f42:	97ba                	add	a5,a5,a4
20012f44:	479c                	lw	a5,8(a5)
20012f46:	fdc42583          	lw	a1,-36(s0)
20012f4a:	fec42503          	lw	a0,-20(s0)
20012f4e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20012f50:	0001                	nop
20012f52:	50b2                	lw	ra,44(sp)
20012f54:	5422                	lw	s0,40(sp)
20012f56:	6145                	addi	sp,sp,48
20012f58:	8082                	ret

20012f5a <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20012f5a:	711d                	addi	sp,sp,-96
20012f5c:	ce86                	sw	ra,92(sp)
20012f5e:	cc96                	sw	t0,88(sp)
20012f60:	ca9a                	sw	t1,84(sp)
20012f62:	c89e                	sw	t2,80(sp)
20012f64:	c6a2                	sw	s0,76(sp)
20012f66:	c4aa                	sw	a0,72(sp)
20012f68:	c2ae                	sw	a1,68(sp)
20012f6a:	c0b2                	sw	a2,64(sp)
20012f6c:	de36                	sw	a3,60(sp)
20012f6e:	dc3a                	sw	a4,56(sp)
20012f70:	da3e                	sw	a5,52(sp)
20012f72:	d842                	sw	a6,48(sp)
20012f74:	d646                	sw	a7,44(sp)
20012f76:	d472                	sw	t3,40(sp)
20012f78:	d276                	sw	t4,36(sp)
20012f7a:	d07a                	sw	t5,32(sp)
20012f7c:	ce7e                	sw	t6,28(sp)
20012f7e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012f80:	33b1                	jal	20012ccc <__metal_myhart_id>
20012f82:	872a                	mv	a4,a0
20012f84:	070a                	slli	a4,a4,0x2
20012f86:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20012f8a:	97ba                	add	a5,a5,a4
20012f8c:	439c                	lw	a5,0(a5)
20012f8e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20012f92:	fac42783          	lw	a5,-84(s0)
20012f96:	c785                	beqz	a5,20012fbe <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20012f98:	fac42503          	lw	a0,-84(s0)
20012f9c:	39e9                	jal	20012c76 <__metal_driver_cpu_interrupt_controller>
20012f9e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20012fa2:	fa842783          	lw	a5,-88(s0)
20012fa6:	1407a783          	lw	a5,320(a5)
20012faa:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20012fae:	fa842783          	lw	a5,-88(s0)
20012fb2:	1387a783          	lw	a5,312(a5)
20012fb6:	fa442583          	lw	a1,-92(s0)
20012fba:	451d                	li	a0,7
20012fbc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20012fbe:	0001                	nop
20012fc0:	40f6                	lw	ra,92(sp)
20012fc2:	42e6                	lw	t0,88(sp)
20012fc4:	4356                	lw	t1,84(sp)
20012fc6:	43c6                	lw	t2,80(sp)
20012fc8:	4436                	lw	s0,76(sp)
20012fca:	4526                	lw	a0,72(sp)
20012fcc:	4596                	lw	a1,68(sp)
20012fce:	4606                	lw	a2,64(sp)
20012fd0:	56f2                	lw	a3,60(sp)
20012fd2:	5762                	lw	a4,56(sp)
20012fd4:	57d2                	lw	a5,52(sp)
20012fd6:	5842                	lw	a6,48(sp)
20012fd8:	58b2                	lw	a7,44(sp)
20012fda:	5e22                	lw	t3,40(sp)
20012fdc:	5e92                	lw	t4,36(sp)
20012fde:	5f02                	lw	t5,32(sp)
20012fe0:	4ff2                	lw	t6,28(sp)
20012fe2:	6125                	addi	sp,sp,96
20012fe4:	30200073          	mret

20012fe8 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20012fe8:	7179                	addi	sp,sp,-48
20012fea:	d606                	sw	ra,44(sp)
20012fec:	d422                	sw	s0,40(sp)
20012fee:	1800                	addi	s0,sp,48
20012ff0:	fca42e23          	sw	a0,-36(s0)
20012ff4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20012ff8:	39d1                	jal	20012ccc <__metal_myhart_id>
20012ffa:	87aa                	mv	a5,a0
20012ffc:	853e                	mv	a0,a5
20012ffe:	314d                	jal	20012ca0 <__metal_driver_cpu_get>
20013000:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20013004:	fec42503          	lw	a0,-20(s0)
20013008:	168010ef          	jal	ra,20014170 <__metal_driver_cpu_mtime_get>
2001300c:	fea42023          	sw	a0,-32(s0)
20013010:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20013014:	fe042783          	lw	a5,-32(s0)
20013018:	fe442803          	lw	a6,-28(s0)
2001301c:	45a9                	li	a1,10
2001301e:	4601                	li	a2,0
20013020:	00b786b3          	add	a3,a5,a1
20013024:	8536                	mv	a0,a3
20013026:	00f53533          	sltu	a0,a0,a5
2001302a:	00c80733          	add	a4,a6,a2
2001302e:	00e507b3          	add	a5,a0,a4
20013032:	873e                	mv	a4,a5
20013034:	87b6                	mv	a5,a3
20013036:	883a                	mv	a6,a4
20013038:	85be                	mv	a1,a5
2001303a:	8642                	mv	a2,a6
2001303c:	fec42503          	lw	a0,-20(s0)
20013040:	196010ef          	jal	ra,200141d6 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20013044:	0001                	nop
20013046:	50b2                	lw	ra,44(sp)
20013048:	5422                	lw	s0,40(sp)
2001304a:	6145                	addi	sp,sp,48
2001304c:	8082                	ret
	...

20013080 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20013080:	7119                	addi	sp,sp,-128
20013082:	de86                	sw	ra,124(sp)
20013084:	dc96                	sw	t0,120(sp)
20013086:	da9a                	sw	t1,116(sp)
20013088:	d89e                	sw	t2,112(sp)
2001308a:	d6a2                	sw	s0,108(sp)
2001308c:	d4aa                	sw	a0,104(sp)
2001308e:	d2ae                	sw	a1,100(sp)
20013090:	d0b2                	sw	a2,96(sp)
20013092:	ceb6                	sw	a3,92(sp)
20013094:	ccba                	sw	a4,88(sp)
20013096:	cabe                	sw	a5,84(sp)
20013098:	c8c2                	sw	a6,80(sp)
2001309a:	c6c6                	sw	a7,76(sp)
2001309c:	c4f2                	sw	t3,72(sp)
2001309e:	c2f6                	sw	t4,68(sp)
200130a0:	c0fa                	sw	t5,64(sp)
200130a2:	de7e                	sw	t6,60(sp)
200130a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200130a6:	c27ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200130aa:	872a                	mv	a4,a0
200130ac:	070a                	slli	a4,a4,0x2
200130ae:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
200130b2:	97ba                	add	a5,a5,a4
200130b4:	439c                	lw	a5,0(a5)
200130b6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
200130ba:	342027f3          	csrr	a5,mcause
200130be:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
200130c2:	341027f3          	csrr	a5,mepc
200130c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
200130ca:	343027f3          	csrr	a5,mtval
200130ce:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
200130d2:	305027f3          	csrr	a5,mtvec
200130d6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
200130da:	fac42783          	lw	a5,-84(s0)
200130de:	c7e9                	beqz	a5,200131a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200130e0:	fac42503          	lw	a0,-84(s0)
200130e4:	b93ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200130e8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
200130ec:	fa842783          	lw	a5,-88(s0)
200130f0:	3ff7f793          	andi	a5,a5,1023
200130f4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
200130f8:	fa842783          	lw	a5,-88(s0)
200130fc:	0807d863          	bgez	a5,2001318c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20013100:	f9442703          	lw	a4,-108(s0)
20013104:	47ad                	li	a5,11
20013106:	00e7d763          	bge	a5,a4,20013114 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2001310a:	f9c42783          	lw	a5,-100(s0)
2001310e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20013112:	ef9d                	bnez	a5,20013150 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20013114:	f9842683          	lw	a3,-104(s0)
20013118:	f9442703          	lw	a4,-108(s0)
2001311c:	87ba                	mv	a5,a4
2001311e:	0786                	slli	a5,a5,0x1
20013120:	97ba                	add	a5,a5,a4
20013122:	078e                	slli	a5,a5,0x3
20013124:	97b6                	add	a5,a5,a3
20013126:	0987a783          	lw	a5,152(a5)
2001312a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2001312e:	f9842683          	lw	a3,-104(s0)
20013132:	f9442703          	lw	a4,-108(s0)
20013136:	87ba                	mv	a5,a4
20013138:	0786                	slli	a5,a5,0x1
2001313a:	97ba                	add	a5,a5,a4
2001313c:	078e                	slli	a5,a5,0x3
2001313e:	97b6                	add	a5,a5,a3
20013140:	0907a783          	lw	a5,144(a5)
20013144:	f8c42583          	lw	a1,-116(s0)
20013148:	f9442503          	lw	a0,-108(s0)
2001314c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2001314e:	a8a9                	j	200131a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20013150:	f9c42783          	lw	a5,-100(s0)
20013154:	03f7f713          	andi	a4,a5,63
20013158:	4789                	li	a5,2
2001315a:	04f71763          	bne	a4,a5,200131a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2001315e:	307027f3          	csrr	a5,mtvt
20013162:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20013166:	f9842783          	lw	a5,-104(s0)
2001316a:	0dc7a783          	lw	a5,220(a5)
2001316e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20013172:	f9042783          	lw	a5,-112(s0)
20013176:	439c                	lw	a5,0(a5)
20013178:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2001317c:	f8842783          	lw	a5,-120(s0)
20013180:	f8c42583          	lw	a1,-116(s0)
20013184:	f9442503          	lw	a0,-108(s0)
20013188:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2001318a:	a839                	j	200131a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2001318c:	f9842703          	lw	a4,-104(s0)
20013190:	f9442783          	lw	a5,-108(s0)
20013194:	0e078793          	addi	a5,a5,224
20013198:	078a                	slli	a5,a5,0x2
2001319a:	97ba                	add	a5,a5,a4
2001319c:	479c                	lw	a5,8(a5)
2001319e:	f9442583          	lw	a1,-108(s0)
200131a2:	fac42503          	lw	a0,-84(s0)
200131a6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
200131a8:	50f6                	lw	ra,124(sp)
200131aa:	52e6                	lw	t0,120(sp)
200131ac:	5356                	lw	t1,116(sp)
200131ae:	53c6                	lw	t2,112(sp)
200131b0:	5436                	lw	s0,108(sp)
200131b2:	5526                	lw	a0,104(sp)
200131b4:	5596                	lw	a1,100(sp)
200131b6:	5606                	lw	a2,96(sp)
200131b8:	46f6                	lw	a3,92(sp)
200131ba:	4766                	lw	a4,88(sp)
200131bc:	47d6                	lw	a5,84(sp)
200131be:	4846                	lw	a6,80(sp)
200131c0:	48b6                	lw	a7,76(sp)
200131c2:	4e26                	lw	t3,72(sp)
200131c4:	4e96                	lw	t4,68(sp)
200131c6:	4f06                	lw	t5,64(sp)
200131c8:	5ff2                	lw	t6,60(sp)
200131ca:	6109                	addi	sp,sp,128
200131cc:	30200073          	mret
	...

200131f6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
200131f6:	711d                	addi	sp,sp,-96
200131f8:	ce86                	sw	ra,92(sp)
200131fa:	cc96                	sw	t0,88(sp)
200131fc:	ca9a                	sw	t1,84(sp)
200131fe:	c89e                	sw	t2,80(sp)
20013200:	c6a2                	sw	s0,76(sp)
20013202:	c4aa                	sw	a0,72(sp)
20013204:	c2ae                	sw	a1,68(sp)
20013206:	c0b2                	sw	a2,64(sp)
20013208:	de36                	sw	a3,60(sp)
2001320a:	dc3a                	sw	a4,56(sp)
2001320c:	da3e                	sw	a5,52(sp)
2001320e:	d842                	sw	a6,48(sp)
20013210:	d646                	sw	a7,44(sp)
20013212:	d472                	sw	t3,40(sp)
20013214:	d276                	sw	t4,36(sp)
20013216:	d07a                	sw	t5,32(sp)
20013218:	ce7e                	sw	t6,28(sp)
2001321a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001321c:	ab1ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013220:	872a                	mv	a4,a0
20013222:	070a                	slli	a4,a4,0x2
20013224:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013228:	97ba                	add	a5,a5,a4
2001322a:	439c                	lw	a5,0(a5)
2001322c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20013230:	fac42783          	lw	a5,-84(s0)
20013234:	c78d                	beqz	a5,2001325e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013236:	fac42503          	lw	a0,-84(s0)
2001323a:	a3dff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
2001323e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20013242:	fa842783          	lw	a5,-88(s0)
20013246:	2187a783          	lw	a5,536(a5)
2001324a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2001324e:	fa842783          	lw	a5,-88(s0)
20013252:	2107a783          	lw	a5,528(a5)
20013256:	fa442583          	lw	a1,-92(s0)
2001325a:	4541                	li	a0,16
2001325c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2001325e:	0001                	nop
20013260:	40f6                	lw	ra,92(sp)
20013262:	42e6                	lw	t0,88(sp)
20013264:	4356                	lw	t1,84(sp)
20013266:	43c6                	lw	t2,80(sp)
20013268:	4436                	lw	s0,76(sp)
2001326a:	4526                	lw	a0,72(sp)
2001326c:	4596                	lw	a1,68(sp)
2001326e:	4606                	lw	a2,64(sp)
20013270:	56f2                	lw	a3,60(sp)
20013272:	5762                	lw	a4,56(sp)
20013274:	57d2                	lw	a5,52(sp)
20013276:	5842                	lw	a6,48(sp)
20013278:	58b2                	lw	a7,44(sp)
2001327a:	5e22                	lw	t3,40(sp)
2001327c:	5e92                	lw	t4,36(sp)
2001327e:	5f02                	lw	t5,32(sp)
20013280:	4ff2                	lw	t6,28(sp)
20013282:	6125                	addi	sp,sp,96
20013284:	30200073          	mret

20013288 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20013288:	711d                	addi	sp,sp,-96
2001328a:	ce86                	sw	ra,92(sp)
2001328c:	cc96                	sw	t0,88(sp)
2001328e:	ca9a                	sw	t1,84(sp)
20013290:	c89e                	sw	t2,80(sp)
20013292:	c6a2                	sw	s0,76(sp)
20013294:	c4aa                	sw	a0,72(sp)
20013296:	c2ae                	sw	a1,68(sp)
20013298:	c0b2                	sw	a2,64(sp)
2001329a:	de36                	sw	a3,60(sp)
2001329c:	dc3a                	sw	a4,56(sp)
2001329e:	da3e                	sw	a5,52(sp)
200132a0:	d842                	sw	a6,48(sp)
200132a2:	d646                	sw	a7,44(sp)
200132a4:	d472                	sw	t3,40(sp)
200132a6:	d276                	sw	t4,36(sp)
200132a8:	d07a                	sw	t5,32(sp)
200132aa:	ce7e                	sw	t6,28(sp)
200132ac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200132ae:	a1fff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200132b2:	872a                	mv	a4,a0
200132b4:	070a                	slli	a4,a4,0x2
200132b6:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
200132ba:	97ba                	add	a5,a5,a4
200132bc:	439c                	lw	a5,0(a5)
200132be:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
200132c2:	fac42783          	lw	a5,-84(s0)
200132c6:	c78d                	beqz	a5,200132f0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200132c8:	fac42503          	lw	a0,-84(s0)
200132cc:	9abff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200132d0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
200132d4:	fa842783          	lw	a5,-88(s0)
200132d8:	2307a783          	lw	a5,560(a5)
200132dc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
200132e0:	fa842783          	lw	a5,-88(s0)
200132e4:	2287a783          	lw	a5,552(a5)
200132e8:	fa442583          	lw	a1,-92(s0)
200132ec:	4545                	li	a0,17
200132ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
200132f0:	0001                	nop
200132f2:	40f6                	lw	ra,92(sp)
200132f4:	42e6                	lw	t0,88(sp)
200132f6:	4356                	lw	t1,84(sp)
200132f8:	43c6                	lw	t2,80(sp)
200132fa:	4436                	lw	s0,76(sp)
200132fc:	4526                	lw	a0,72(sp)
200132fe:	4596                	lw	a1,68(sp)
20013300:	4606                	lw	a2,64(sp)
20013302:	56f2                	lw	a3,60(sp)
20013304:	5762                	lw	a4,56(sp)
20013306:	57d2                	lw	a5,52(sp)
20013308:	5842                	lw	a6,48(sp)
2001330a:	58b2                	lw	a7,44(sp)
2001330c:	5e22                	lw	t3,40(sp)
2001330e:	5e92                	lw	t4,36(sp)
20013310:	5f02                	lw	t5,32(sp)
20013312:	4ff2                	lw	t6,28(sp)
20013314:	6125                	addi	sp,sp,96
20013316:	30200073          	mret

2001331a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2001331a:	711d                	addi	sp,sp,-96
2001331c:	ce86                	sw	ra,92(sp)
2001331e:	cc96                	sw	t0,88(sp)
20013320:	ca9a                	sw	t1,84(sp)
20013322:	c89e                	sw	t2,80(sp)
20013324:	c6a2                	sw	s0,76(sp)
20013326:	c4aa                	sw	a0,72(sp)
20013328:	c2ae                	sw	a1,68(sp)
2001332a:	c0b2                	sw	a2,64(sp)
2001332c:	de36                	sw	a3,60(sp)
2001332e:	dc3a                	sw	a4,56(sp)
20013330:	da3e                	sw	a5,52(sp)
20013332:	d842                	sw	a6,48(sp)
20013334:	d646                	sw	a7,44(sp)
20013336:	d472                	sw	t3,40(sp)
20013338:	d276                	sw	t4,36(sp)
2001333a:	d07a                	sw	t5,32(sp)
2001333c:	ce7e                	sw	t6,28(sp)
2001333e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013340:	98dff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013344:	872a                	mv	a4,a0
20013346:	070a                	slli	a4,a4,0x2
20013348:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
2001334c:	97ba                	add	a5,a5,a4
2001334e:	439c                	lw	a5,0(a5)
20013350:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20013354:	fac42783          	lw	a5,-84(s0)
20013358:	c78d                	beqz	a5,20013382 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001335a:	fac42503          	lw	a0,-84(s0)
2001335e:	919ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013362:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20013366:	fa842783          	lw	a5,-88(s0)
2001336a:	2487a783          	lw	a5,584(a5)
2001336e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20013372:	fa842783          	lw	a5,-88(s0)
20013376:	2407a783          	lw	a5,576(a5)
2001337a:	fa442583          	lw	a1,-92(s0)
2001337e:	4549                	li	a0,18
20013380:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20013382:	0001                	nop
20013384:	40f6                	lw	ra,92(sp)
20013386:	42e6                	lw	t0,88(sp)
20013388:	4356                	lw	t1,84(sp)
2001338a:	43c6                	lw	t2,80(sp)
2001338c:	4436                	lw	s0,76(sp)
2001338e:	4526                	lw	a0,72(sp)
20013390:	4596                	lw	a1,68(sp)
20013392:	4606                	lw	a2,64(sp)
20013394:	56f2                	lw	a3,60(sp)
20013396:	5762                	lw	a4,56(sp)
20013398:	57d2                	lw	a5,52(sp)
2001339a:	5842                	lw	a6,48(sp)
2001339c:	58b2                	lw	a7,44(sp)
2001339e:	5e22                	lw	t3,40(sp)
200133a0:	5e92                	lw	t4,36(sp)
200133a2:	5f02                	lw	t5,32(sp)
200133a4:	4ff2                	lw	t6,28(sp)
200133a6:	6125                	addi	sp,sp,96
200133a8:	30200073          	mret

200133ac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
200133ac:	711d                	addi	sp,sp,-96
200133ae:	ce86                	sw	ra,92(sp)
200133b0:	cc96                	sw	t0,88(sp)
200133b2:	ca9a                	sw	t1,84(sp)
200133b4:	c89e                	sw	t2,80(sp)
200133b6:	c6a2                	sw	s0,76(sp)
200133b8:	c4aa                	sw	a0,72(sp)
200133ba:	c2ae                	sw	a1,68(sp)
200133bc:	c0b2                	sw	a2,64(sp)
200133be:	de36                	sw	a3,60(sp)
200133c0:	dc3a                	sw	a4,56(sp)
200133c2:	da3e                	sw	a5,52(sp)
200133c4:	d842                	sw	a6,48(sp)
200133c6:	d646                	sw	a7,44(sp)
200133c8:	d472                	sw	t3,40(sp)
200133ca:	d276                	sw	t4,36(sp)
200133cc:	d07a                	sw	t5,32(sp)
200133ce:	ce7e                	sw	t6,28(sp)
200133d0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200133d2:	8fbff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200133d6:	872a                	mv	a4,a0
200133d8:	070a                	slli	a4,a4,0x2
200133da:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
200133de:	97ba                	add	a5,a5,a4
200133e0:	439c                	lw	a5,0(a5)
200133e2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
200133e6:	fac42783          	lw	a5,-84(s0)
200133ea:	c78d                	beqz	a5,20013414 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200133ec:	fac42503          	lw	a0,-84(s0)
200133f0:	887ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200133f4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
200133f8:	fa842783          	lw	a5,-88(s0)
200133fc:	2607a783          	lw	a5,608(a5)
20013400:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20013404:	fa842783          	lw	a5,-88(s0)
20013408:	2587a783          	lw	a5,600(a5)
2001340c:	fa442583          	lw	a1,-92(s0)
20013410:	454d                	li	a0,19
20013412:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20013414:	0001                	nop
20013416:	40f6                	lw	ra,92(sp)
20013418:	42e6                	lw	t0,88(sp)
2001341a:	4356                	lw	t1,84(sp)
2001341c:	43c6                	lw	t2,80(sp)
2001341e:	4436                	lw	s0,76(sp)
20013420:	4526                	lw	a0,72(sp)
20013422:	4596                	lw	a1,68(sp)
20013424:	4606                	lw	a2,64(sp)
20013426:	56f2                	lw	a3,60(sp)
20013428:	5762                	lw	a4,56(sp)
2001342a:	57d2                	lw	a5,52(sp)
2001342c:	5842                	lw	a6,48(sp)
2001342e:	58b2                	lw	a7,44(sp)
20013430:	5e22                	lw	t3,40(sp)
20013432:	5e92                	lw	t4,36(sp)
20013434:	5f02                	lw	t5,32(sp)
20013436:	4ff2                	lw	t6,28(sp)
20013438:	6125                	addi	sp,sp,96
2001343a:	30200073          	mret

2001343e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2001343e:	711d                	addi	sp,sp,-96
20013440:	ce86                	sw	ra,92(sp)
20013442:	cc96                	sw	t0,88(sp)
20013444:	ca9a                	sw	t1,84(sp)
20013446:	c89e                	sw	t2,80(sp)
20013448:	c6a2                	sw	s0,76(sp)
2001344a:	c4aa                	sw	a0,72(sp)
2001344c:	c2ae                	sw	a1,68(sp)
2001344e:	c0b2                	sw	a2,64(sp)
20013450:	de36                	sw	a3,60(sp)
20013452:	dc3a                	sw	a4,56(sp)
20013454:	da3e                	sw	a5,52(sp)
20013456:	d842                	sw	a6,48(sp)
20013458:	d646                	sw	a7,44(sp)
2001345a:	d472                	sw	t3,40(sp)
2001345c:	d276                	sw	t4,36(sp)
2001345e:	d07a                	sw	t5,32(sp)
20013460:	ce7e                	sw	t6,28(sp)
20013462:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013464:	869ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013468:	872a                	mv	a4,a0
2001346a:	070a                	slli	a4,a4,0x2
2001346c:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013470:	97ba                	add	a5,a5,a4
20013472:	439c                	lw	a5,0(a5)
20013474:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20013478:	fac42783          	lw	a5,-84(s0)
2001347c:	c78d                	beqz	a5,200134a6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001347e:	fac42503          	lw	a0,-84(s0)
20013482:	ff4ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013486:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2001348a:	fa842783          	lw	a5,-88(s0)
2001348e:	2787a783          	lw	a5,632(a5)
20013492:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20013496:	fa842783          	lw	a5,-88(s0)
2001349a:	2707a783          	lw	a5,624(a5)
2001349e:	fa442583          	lw	a1,-92(s0)
200134a2:	4551                	li	a0,20
200134a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
200134a6:	0001                	nop
200134a8:	40f6                	lw	ra,92(sp)
200134aa:	42e6                	lw	t0,88(sp)
200134ac:	4356                	lw	t1,84(sp)
200134ae:	43c6                	lw	t2,80(sp)
200134b0:	4436                	lw	s0,76(sp)
200134b2:	4526                	lw	a0,72(sp)
200134b4:	4596                	lw	a1,68(sp)
200134b6:	4606                	lw	a2,64(sp)
200134b8:	56f2                	lw	a3,60(sp)
200134ba:	5762                	lw	a4,56(sp)
200134bc:	57d2                	lw	a5,52(sp)
200134be:	5842                	lw	a6,48(sp)
200134c0:	58b2                	lw	a7,44(sp)
200134c2:	5e22                	lw	t3,40(sp)
200134c4:	5e92                	lw	t4,36(sp)
200134c6:	5f02                	lw	t5,32(sp)
200134c8:	4ff2                	lw	t6,28(sp)
200134ca:	6125                	addi	sp,sp,96
200134cc:	30200073          	mret

200134d0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
200134d0:	711d                	addi	sp,sp,-96
200134d2:	ce86                	sw	ra,92(sp)
200134d4:	cc96                	sw	t0,88(sp)
200134d6:	ca9a                	sw	t1,84(sp)
200134d8:	c89e                	sw	t2,80(sp)
200134da:	c6a2                	sw	s0,76(sp)
200134dc:	c4aa                	sw	a0,72(sp)
200134de:	c2ae                	sw	a1,68(sp)
200134e0:	c0b2                	sw	a2,64(sp)
200134e2:	de36                	sw	a3,60(sp)
200134e4:	dc3a                	sw	a4,56(sp)
200134e6:	da3e                	sw	a5,52(sp)
200134e8:	d842                	sw	a6,48(sp)
200134ea:	d646                	sw	a7,44(sp)
200134ec:	d472                	sw	t3,40(sp)
200134ee:	d276                	sw	t4,36(sp)
200134f0:	d07a                	sw	t5,32(sp)
200134f2:	ce7e                	sw	t6,28(sp)
200134f4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200134f6:	fd6ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200134fa:	872a                	mv	a4,a0
200134fc:	070a                	slli	a4,a4,0x2
200134fe:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013502:	97ba                	add	a5,a5,a4
20013504:	439c                	lw	a5,0(a5)
20013506:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2001350a:	fac42783          	lw	a5,-84(s0)
2001350e:	c78d                	beqz	a5,20013538 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013510:	fac42503          	lw	a0,-84(s0)
20013514:	f62ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013518:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2001351c:	fa842783          	lw	a5,-88(s0)
20013520:	2907a783          	lw	a5,656(a5)
20013524:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20013528:	fa842783          	lw	a5,-88(s0)
2001352c:	2887a783          	lw	a5,648(a5)
20013530:	fa442583          	lw	a1,-92(s0)
20013534:	4555                	li	a0,21
20013536:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20013538:	0001                	nop
2001353a:	40f6                	lw	ra,92(sp)
2001353c:	42e6                	lw	t0,88(sp)
2001353e:	4356                	lw	t1,84(sp)
20013540:	43c6                	lw	t2,80(sp)
20013542:	4436                	lw	s0,76(sp)
20013544:	4526                	lw	a0,72(sp)
20013546:	4596                	lw	a1,68(sp)
20013548:	4606                	lw	a2,64(sp)
2001354a:	56f2                	lw	a3,60(sp)
2001354c:	5762                	lw	a4,56(sp)
2001354e:	57d2                	lw	a5,52(sp)
20013550:	5842                	lw	a6,48(sp)
20013552:	58b2                	lw	a7,44(sp)
20013554:	5e22                	lw	t3,40(sp)
20013556:	5e92                	lw	t4,36(sp)
20013558:	5f02                	lw	t5,32(sp)
2001355a:	4ff2                	lw	t6,28(sp)
2001355c:	6125                	addi	sp,sp,96
2001355e:	30200073          	mret

20013562 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20013562:	711d                	addi	sp,sp,-96
20013564:	ce86                	sw	ra,92(sp)
20013566:	cc96                	sw	t0,88(sp)
20013568:	ca9a                	sw	t1,84(sp)
2001356a:	c89e                	sw	t2,80(sp)
2001356c:	c6a2                	sw	s0,76(sp)
2001356e:	c4aa                	sw	a0,72(sp)
20013570:	c2ae                	sw	a1,68(sp)
20013572:	c0b2                	sw	a2,64(sp)
20013574:	de36                	sw	a3,60(sp)
20013576:	dc3a                	sw	a4,56(sp)
20013578:	da3e                	sw	a5,52(sp)
2001357a:	d842                	sw	a6,48(sp)
2001357c:	d646                	sw	a7,44(sp)
2001357e:	d472                	sw	t3,40(sp)
20013580:	d276                	sw	t4,36(sp)
20013582:	d07a                	sw	t5,32(sp)
20013584:	ce7e                	sw	t6,28(sp)
20013586:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013588:	f44ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
2001358c:	872a                	mv	a4,a0
2001358e:	070a                	slli	a4,a4,0x2
20013590:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013594:	97ba                	add	a5,a5,a4
20013596:	439c                	lw	a5,0(a5)
20013598:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2001359c:	fac42783          	lw	a5,-84(s0)
200135a0:	c78d                	beqz	a5,200135ca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200135a2:	fac42503          	lw	a0,-84(s0)
200135a6:	ed0ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200135aa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
200135ae:	fa842783          	lw	a5,-88(s0)
200135b2:	2a87a783          	lw	a5,680(a5)
200135b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
200135ba:	fa842783          	lw	a5,-88(s0)
200135be:	2a07a783          	lw	a5,672(a5)
200135c2:	fa442583          	lw	a1,-92(s0)
200135c6:	4559                	li	a0,22
200135c8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
200135ca:	0001                	nop
200135cc:	40f6                	lw	ra,92(sp)
200135ce:	42e6                	lw	t0,88(sp)
200135d0:	4356                	lw	t1,84(sp)
200135d2:	43c6                	lw	t2,80(sp)
200135d4:	4436                	lw	s0,76(sp)
200135d6:	4526                	lw	a0,72(sp)
200135d8:	4596                	lw	a1,68(sp)
200135da:	4606                	lw	a2,64(sp)
200135dc:	56f2                	lw	a3,60(sp)
200135de:	5762                	lw	a4,56(sp)
200135e0:	57d2                	lw	a5,52(sp)
200135e2:	5842                	lw	a6,48(sp)
200135e4:	58b2                	lw	a7,44(sp)
200135e6:	5e22                	lw	t3,40(sp)
200135e8:	5e92                	lw	t4,36(sp)
200135ea:	5f02                	lw	t5,32(sp)
200135ec:	4ff2                	lw	t6,28(sp)
200135ee:	6125                	addi	sp,sp,96
200135f0:	30200073          	mret

200135f4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
200135f4:	711d                	addi	sp,sp,-96
200135f6:	ce86                	sw	ra,92(sp)
200135f8:	cc96                	sw	t0,88(sp)
200135fa:	ca9a                	sw	t1,84(sp)
200135fc:	c89e                	sw	t2,80(sp)
200135fe:	c6a2                	sw	s0,76(sp)
20013600:	c4aa                	sw	a0,72(sp)
20013602:	c2ae                	sw	a1,68(sp)
20013604:	c0b2                	sw	a2,64(sp)
20013606:	de36                	sw	a3,60(sp)
20013608:	dc3a                	sw	a4,56(sp)
2001360a:	da3e                	sw	a5,52(sp)
2001360c:	d842                	sw	a6,48(sp)
2001360e:	d646                	sw	a7,44(sp)
20013610:	d472                	sw	t3,40(sp)
20013612:	d276                	sw	t4,36(sp)
20013614:	d07a                	sw	t5,32(sp)
20013616:	ce7e                	sw	t6,28(sp)
20013618:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001361a:	eb2ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
2001361e:	872a                	mv	a4,a0
20013620:	070a                	slli	a4,a4,0x2
20013622:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013626:	97ba                	add	a5,a5,a4
20013628:	439c                	lw	a5,0(a5)
2001362a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2001362e:	fac42783          	lw	a5,-84(s0)
20013632:	c78d                	beqz	a5,2001365c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013634:	fac42503          	lw	a0,-84(s0)
20013638:	e3eff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
2001363c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20013640:	fa842783          	lw	a5,-88(s0)
20013644:	2c07a783          	lw	a5,704(a5)
20013648:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2001364c:	fa842783          	lw	a5,-88(s0)
20013650:	2b87a783          	lw	a5,696(a5)
20013654:	fa442583          	lw	a1,-92(s0)
20013658:	455d                	li	a0,23
2001365a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2001365c:	0001                	nop
2001365e:	40f6                	lw	ra,92(sp)
20013660:	42e6                	lw	t0,88(sp)
20013662:	4356                	lw	t1,84(sp)
20013664:	43c6                	lw	t2,80(sp)
20013666:	4436                	lw	s0,76(sp)
20013668:	4526                	lw	a0,72(sp)
2001366a:	4596                	lw	a1,68(sp)
2001366c:	4606                	lw	a2,64(sp)
2001366e:	56f2                	lw	a3,60(sp)
20013670:	5762                	lw	a4,56(sp)
20013672:	57d2                	lw	a5,52(sp)
20013674:	5842                	lw	a6,48(sp)
20013676:	58b2                	lw	a7,44(sp)
20013678:	5e22                	lw	t3,40(sp)
2001367a:	5e92                	lw	t4,36(sp)
2001367c:	5f02                	lw	t5,32(sp)
2001367e:	4ff2                	lw	t6,28(sp)
20013680:	6125                	addi	sp,sp,96
20013682:	30200073          	mret

20013686 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20013686:	711d                	addi	sp,sp,-96
20013688:	ce86                	sw	ra,92(sp)
2001368a:	cc96                	sw	t0,88(sp)
2001368c:	ca9a                	sw	t1,84(sp)
2001368e:	c89e                	sw	t2,80(sp)
20013690:	c6a2                	sw	s0,76(sp)
20013692:	c4aa                	sw	a0,72(sp)
20013694:	c2ae                	sw	a1,68(sp)
20013696:	c0b2                	sw	a2,64(sp)
20013698:	de36                	sw	a3,60(sp)
2001369a:	dc3a                	sw	a4,56(sp)
2001369c:	da3e                	sw	a5,52(sp)
2001369e:	d842                	sw	a6,48(sp)
200136a0:	d646                	sw	a7,44(sp)
200136a2:	d472                	sw	t3,40(sp)
200136a4:	d276                	sw	t4,36(sp)
200136a6:	d07a                	sw	t5,32(sp)
200136a8:	ce7e                	sw	t6,28(sp)
200136aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200136ac:	e20ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200136b0:	872a                	mv	a4,a0
200136b2:	070a                	slli	a4,a4,0x2
200136b4:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
200136b8:	97ba                	add	a5,a5,a4
200136ba:	439c                	lw	a5,0(a5)
200136bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
200136c0:	fac42783          	lw	a5,-84(s0)
200136c4:	c78d                	beqz	a5,200136ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200136c6:	fac42503          	lw	a0,-84(s0)
200136ca:	dacff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200136ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
200136d2:	fa842783          	lw	a5,-88(s0)
200136d6:	2d87a783          	lw	a5,728(a5)
200136da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
200136de:	fa842783          	lw	a5,-88(s0)
200136e2:	2d07a783          	lw	a5,720(a5)
200136e6:	fa442583          	lw	a1,-92(s0)
200136ea:	4561                	li	a0,24
200136ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
200136ee:	0001                	nop
200136f0:	40f6                	lw	ra,92(sp)
200136f2:	42e6                	lw	t0,88(sp)
200136f4:	4356                	lw	t1,84(sp)
200136f6:	43c6                	lw	t2,80(sp)
200136f8:	4436                	lw	s0,76(sp)
200136fa:	4526                	lw	a0,72(sp)
200136fc:	4596                	lw	a1,68(sp)
200136fe:	4606                	lw	a2,64(sp)
20013700:	56f2                	lw	a3,60(sp)
20013702:	5762                	lw	a4,56(sp)
20013704:	57d2                	lw	a5,52(sp)
20013706:	5842                	lw	a6,48(sp)
20013708:	58b2                	lw	a7,44(sp)
2001370a:	5e22                	lw	t3,40(sp)
2001370c:	5e92                	lw	t4,36(sp)
2001370e:	5f02                	lw	t5,32(sp)
20013710:	4ff2                	lw	t6,28(sp)
20013712:	6125                	addi	sp,sp,96
20013714:	30200073          	mret

20013718 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20013718:	711d                	addi	sp,sp,-96
2001371a:	ce86                	sw	ra,92(sp)
2001371c:	cc96                	sw	t0,88(sp)
2001371e:	ca9a                	sw	t1,84(sp)
20013720:	c89e                	sw	t2,80(sp)
20013722:	c6a2                	sw	s0,76(sp)
20013724:	c4aa                	sw	a0,72(sp)
20013726:	c2ae                	sw	a1,68(sp)
20013728:	c0b2                	sw	a2,64(sp)
2001372a:	de36                	sw	a3,60(sp)
2001372c:	dc3a                	sw	a4,56(sp)
2001372e:	da3e                	sw	a5,52(sp)
20013730:	d842                	sw	a6,48(sp)
20013732:	d646                	sw	a7,44(sp)
20013734:	d472                	sw	t3,40(sp)
20013736:	d276                	sw	t4,36(sp)
20013738:	d07a                	sw	t5,32(sp)
2001373a:	ce7e                	sw	t6,28(sp)
2001373c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001373e:	d8eff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013742:	872a                	mv	a4,a0
20013744:	070a                	slli	a4,a4,0x2
20013746:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
2001374a:	97ba                	add	a5,a5,a4
2001374c:	439c                	lw	a5,0(a5)
2001374e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20013752:	fac42783          	lw	a5,-84(s0)
20013756:	c78d                	beqz	a5,20013780 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013758:	fac42503          	lw	a0,-84(s0)
2001375c:	d1aff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013760:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20013764:	fa842783          	lw	a5,-88(s0)
20013768:	2f07a783          	lw	a5,752(a5)
2001376c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20013770:	fa842783          	lw	a5,-88(s0)
20013774:	2e87a783          	lw	a5,744(a5)
20013778:	fa442583          	lw	a1,-92(s0)
2001377c:	4565                	li	a0,25
2001377e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20013780:	0001                	nop
20013782:	40f6                	lw	ra,92(sp)
20013784:	42e6                	lw	t0,88(sp)
20013786:	4356                	lw	t1,84(sp)
20013788:	43c6                	lw	t2,80(sp)
2001378a:	4436                	lw	s0,76(sp)
2001378c:	4526                	lw	a0,72(sp)
2001378e:	4596                	lw	a1,68(sp)
20013790:	4606                	lw	a2,64(sp)
20013792:	56f2                	lw	a3,60(sp)
20013794:	5762                	lw	a4,56(sp)
20013796:	57d2                	lw	a5,52(sp)
20013798:	5842                	lw	a6,48(sp)
2001379a:	58b2                	lw	a7,44(sp)
2001379c:	5e22                	lw	t3,40(sp)
2001379e:	5e92                	lw	t4,36(sp)
200137a0:	5f02                	lw	t5,32(sp)
200137a2:	4ff2                	lw	t6,28(sp)
200137a4:	6125                	addi	sp,sp,96
200137a6:	30200073          	mret

200137aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
200137aa:	711d                	addi	sp,sp,-96
200137ac:	ce86                	sw	ra,92(sp)
200137ae:	cc96                	sw	t0,88(sp)
200137b0:	ca9a                	sw	t1,84(sp)
200137b2:	c89e                	sw	t2,80(sp)
200137b4:	c6a2                	sw	s0,76(sp)
200137b6:	c4aa                	sw	a0,72(sp)
200137b8:	c2ae                	sw	a1,68(sp)
200137ba:	c0b2                	sw	a2,64(sp)
200137bc:	de36                	sw	a3,60(sp)
200137be:	dc3a                	sw	a4,56(sp)
200137c0:	da3e                	sw	a5,52(sp)
200137c2:	d842                	sw	a6,48(sp)
200137c4:	d646                	sw	a7,44(sp)
200137c6:	d472                	sw	t3,40(sp)
200137c8:	d276                	sw	t4,36(sp)
200137ca:	d07a                	sw	t5,32(sp)
200137cc:	ce7e                	sw	t6,28(sp)
200137ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200137d0:	cfcff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200137d4:	872a                	mv	a4,a0
200137d6:	070a                	slli	a4,a4,0x2
200137d8:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
200137dc:	97ba                	add	a5,a5,a4
200137de:	439c                	lw	a5,0(a5)
200137e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
200137e4:	fac42783          	lw	a5,-84(s0)
200137e8:	c78d                	beqz	a5,20013812 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200137ea:	fac42503          	lw	a0,-84(s0)
200137ee:	c88ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200137f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
200137f6:	fa842783          	lw	a5,-88(s0)
200137fa:	3087a783          	lw	a5,776(a5)
200137fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20013802:	fa842783          	lw	a5,-88(s0)
20013806:	3007a783          	lw	a5,768(a5)
2001380a:	fa442583          	lw	a1,-92(s0)
2001380e:	4569                	li	a0,26
20013810:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20013812:	0001                	nop
20013814:	40f6                	lw	ra,92(sp)
20013816:	42e6                	lw	t0,88(sp)
20013818:	4356                	lw	t1,84(sp)
2001381a:	43c6                	lw	t2,80(sp)
2001381c:	4436                	lw	s0,76(sp)
2001381e:	4526                	lw	a0,72(sp)
20013820:	4596                	lw	a1,68(sp)
20013822:	4606                	lw	a2,64(sp)
20013824:	56f2                	lw	a3,60(sp)
20013826:	5762                	lw	a4,56(sp)
20013828:	57d2                	lw	a5,52(sp)
2001382a:	5842                	lw	a6,48(sp)
2001382c:	58b2                	lw	a7,44(sp)
2001382e:	5e22                	lw	t3,40(sp)
20013830:	5e92                	lw	t4,36(sp)
20013832:	5f02                	lw	t5,32(sp)
20013834:	4ff2                	lw	t6,28(sp)
20013836:	6125                	addi	sp,sp,96
20013838:	30200073          	mret

2001383c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2001383c:	711d                	addi	sp,sp,-96
2001383e:	ce86                	sw	ra,92(sp)
20013840:	cc96                	sw	t0,88(sp)
20013842:	ca9a                	sw	t1,84(sp)
20013844:	c89e                	sw	t2,80(sp)
20013846:	c6a2                	sw	s0,76(sp)
20013848:	c4aa                	sw	a0,72(sp)
2001384a:	c2ae                	sw	a1,68(sp)
2001384c:	c0b2                	sw	a2,64(sp)
2001384e:	de36                	sw	a3,60(sp)
20013850:	dc3a                	sw	a4,56(sp)
20013852:	da3e                	sw	a5,52(sp)
20013854:	d842                	sw	a6,48(sp)
20013856:	d646                	sw	a7,44(sp)
20013858:	d472                	sw	t3,40(sp)
2001385a:	d276                	sw	t4,36(sp)
2001385c:	d07a                	sw	t5,32(sp)
2001385e:	ce7e                	sw	t6,28(sp)
20013860:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013862:	c6aff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013866:	872a                	mv	a4,a0
20013868:	070a                	slli	a4,a4,0x2
2001386a:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
2001386e:	97ba                	add	a5,a5,a4
20013870:	439c                	lw	a5,0(a5)
20013872:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20013876:	fac42783          	lw	a5,-84(s0)
2001387a:	c78d                	beqz	a5,200138a4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001387c:	fac42503          	lw	a0,-84(s0)
20013880:	bf6ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013884:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20013888:	fa842783          	lw	a5,-88(s0)
2001388c:	3207a783          	lw	a5,800(a5)
20013890:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20013894:	fa842783          	lw	a5,-88(s0)
20013898:	3187a783          	lw	a5,792(a5)
2001389c:	fa442583          	lw	a1,-92(s0)
200138a0:	456d                	li	a0,27
200138a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
200138a4:	0001                	nop
200138a6:	40f6                	lw	ra,92(sp)
200138a8:	42e6                	lw	t0,88(sp)
200138aa:	4356                	lw	t1,84(sp)
200138ac:	43c6                	lw	t2,80(sp)
200138ae:	4436                	lw	s0,76(sp)
200138b0:	4526                	lw	a0,72(sp)
200138b2:	4596                	lw	a1,68(sp)
200138b4:	4606                	lw	a2,64(sp)
200138b6:	56f2                	lw	a3,60(sp)
200138b8:	5762                	lw	a4,56(sp)
200138ba:	57d2                	lw	a5,52(sp)
200138bc:	5842                	lw	a6,48(sp)
200138be:	58b2                	lw	a7,44(sp)
200138c0:	5e22                	lw	t3,40(sp)
200138c2:	5e92                	lw	t4,36(sp)
200138c4:	5f02                	lw	t5,32(sp)
200138c6:	4ff2                	lw	t6,28(sp)
200138c8:	6125                	addi	sp,sp,96
200138ca:	30200073          	mret

200138ce <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
200138ce:	711d                	addi	sp,sp,-96
200138d0:	ce86                	sw	ra,92(sp)
200138d2:	cc96                	sw	t0,88(sp)
200138d4:	ca9a                	sw	t1,84(sp)
200138d6:	c89e                	sw	t2,80(sp)
200138d8:	c6a2                	sw	s0,76(sp)
200138da:	c4aa                	sw	a0,72(sp)
200138dc:	c2ae                	sw	a1,68(sp)
200138de:	c0b2                	sw	a2,64(sp)
200138e0:	de36                	sw	a3,60(sp)
200138e2:	dc3a                	sw	a4,56(sp)
200138e4:	da3e                	sw	a5,52(sp)
200138e6:	d842                	sw	a6,48(sp)
200138e8:	d646                	sw	a7,44(sp)
200138ea:	d472                	sw	t3,40(sp)
200138ec:	d276                	sw	t4,36(sp)
200138ee:	d07a                	sw	t5,32(sp)
200138f0:	ce7e                	sw	t6,28(sp)
200138f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200138f4:	bd8ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
200138f8:	872a                	mv	a4,a0
200138fa:	070a                	slli	a4,a4,0x2
200138fc:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013900:	97ba                	add	a5,a5,a4
20013902:	439c                	lw	a5,0(a5)
20013904:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20013908:	fac42783          	lw	a5,-84(s0)
2001390c:	c78d                	beqz	a5,20013936 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001390e:	fac42503          	lw	a0,-84(s0)
20013912:	b64ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013916:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2001391a:	fa842783          	lw	a5,-88(s0)
2001391e:	3387a783          	lw	a5,824(a5)
20013922:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20013926:	fa842783          	lw	a5,-88(s0)
2001392a:	3307a783          	lw	a5,816(a5)
2001392e:	fa442583          	lw	a1,-92(s0)
20013932:	4571                	li	a0,28
20013934:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20013936:	0001                	nop
20013938:	40f6                	lw	ra,92(sp)
2001393a:	42e6                	lw	t0,88(sp)
2001393c:	4356                	lw	t1,84(sp)
2001393e:	43c6                	lw	t2,80(sp)
20013940:	4436                	lw	s0,76(sp)
20013942:	4526                	lw	a0,72(sp)
20013944:	4596                	lw	a1,68(sp)
20013946:	4606                	lw	a2,64(sp)
20013948:	56f2                	lw	a3,60(sp)
2001394a:	5762                	lw	a4,56(sp)
2001394c:	57d2                	lw	a5,52(sp)
2001394e:	5842                	lw	a6,48(sp)
20013950:	58b2                	lw	a7,44(sp)
20013952:	5e22                	lw	t3,40(sp)
20013954:	5e92                	lw	t4,36(sp)
20013956:	5f02                	lw	t5,32(sp)
20013958:	4ff2                	lw	t6,28(sp)
2001395a:	6125                	addi	sp,sp,96
2001395c:	30200073          	mret

20013960 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20013960:	711d                	addi	sp,sp,-96
20013962:	ce86                	sw	ra,92(sp)
20013964:	cc96                	sw	t0,88(sp)
20013966:	ca9a                	sw	t1,84(sp)
20013968:	c89e                	sw	t2,80(sp)
2001396a:	c6a2                	sw	s0,76(sp)
2001396c:	c4aa                	sw	a0,72(sp)
2001396e:	c2ae                	sw	a1,68(sp)
20013970:	c0b2                	sw	a2,64(sp)
20013972:	de36                	sw	a3,60(sp)
20013974:	dc3a                	sw	a4,56(sp)
20013976:	da3e                	sw	a5,52(sp)
20013978:	d842                	sw	a6,48(sp)
2001397a:	d646                	sw	a7,44(sp)
2001397c:	d472                	sw	t3,40(sp)
2001397e:	d276                	sw	t4,36(sp)
20013980:	d07a                	sw	t5,32(sp)
20013982:	ce7e                	sw	t6,28(sp)
20013984:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013986:	b46ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
2001398a:	872a                	mv	a4,a0
2001398c:	070a                	slli	a4,a4,0x2
2001398e:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013992:	97ba                	add	a5,a5,a4
20013994:	439c                	lw	a5,0(a5)
20013996:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2001399a:	fac42783          	lw	a5,-84(s0)
2001399e:	c78d                	beqz	a5,200139c8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200139a0:	fac42503          	lw	a0,-84(s0)
200139a4:	ad2ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200139a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
200139ac:	fa842783          	lw	a5,-88(s0)
200139b0:	3507a783          	lw	a5,848(a5)
200139b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
200139b8:	fa842783          	lw	a5,-88(s0)
200139bc:	3487a783          	lw	a5,840(a5)
200139c0:	fa442583          	lw	a1,-92(s0)
200139c4:	4575                	li	a0,29
200139c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
200139c8:	0001                	nop
200139ca:	40f6                	lw	ra,92(sp)
200139cc:	42e6                	lw	t0,88(sp)
200139ce:	4356                	lw	t1,84(sp)
200139d0:	43c6                	lw	t2,80(sp)
200139d2:	4436                	lw	s0,76(sp)
200139d4:	4526                	lw	a0,72(sp)
200139d6:	4596                	lw	a1,68(sp)
200139d8:	4606                	lw	a2,64(sp)
200139da:	56f2                	lw	a3,60(sp)
200139dc:	5762                	lw	a4,56(sp)
200139de:	57d2                	lw	a5,52(sp)
200139e0:	5842                	lw	a6,48(sp)
200139e2:	58b2                	lw	a7,44(sp)
200139e4:	5e22                	lw	t3,40(sp)
200139e6:	5e92                	lw	t4,36(sp)
200139e8:	5f02                	lw	t5,32(sp)
200139ea:	4ff2                	lw	t6,28(sp)
200139ec:	6125                	addi	sp,sp,96
200139ee:	30200073          	mret

200139f2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
200139f2:	711d                	addi	sp,sp,-96
200139f4:	ce86                	sw	ra,92(sp)
200139f6:	cc96                	sw	t0,88(sp)
200139f8:	ca9a                	sw	t1,84(sp)
200139fa:	c89e                	sw	t2,80(sp)
200139fc:	c6a2                	sw	s0,76(sp)
200139fe:	c4aa                	sw	a0,72(sp)
20013a00:	c2ae                	sw	a1,68(sp)
20013a02:	c0b2                	sw	a2,64(sp)
20013a04:	de36                	sw	a3,60(sp)
20013a06:	dc3a                	sw	a4,56(sp)
20013a08:	da3e                	sw	a5,52(sp)
20013a0a:	d842                	sw	a6,48(sp)
20013a0c:	d646                	sw	a7,44(sp)
20013a0e:	d472                	sw	t3,40(sp)
20013a10:	d276                	sw	t4,36(sp)
20013a12:	d07a                	sw	t5,32(sp)
20013a14:	ce7e                	sw	t6,28(sp)
20013a16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013a18:	ab4ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013a1c:	872a                	mv	a4,a0
20013a1e:	070a                	slli	a4,a4,0x2
20013a20:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013a24:	97ba                	add	a5,a5,a4
20013a26:	439c                	lw	a5,0(a5)
20013a28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20013a2c:	fac42783          	lw	a5,-84(s0)
20013a30:	c78d                	beqz	a5,20013a5a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013a32:	fac42503          	lw	a0,-84(s0)
20013a36:	a40ff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013a3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20013a3e:	fa842783          	lw	a5,-88(s0)
20013a42:	3687a783          	lw	a5,872(a5)
20013a46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20013a4a:	fa842783          	lw	a5,-88(s0)
20013a4e:	3607a783          	lw	a5,864(a5)
20013a52:	fa442583          	lw	a1,-92(s0)
20013a56:	4579                	li	a0,30
20013a58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20013a5a:	0001                	nop
20013a5c:	40f6                	lw	ra,92(sp)
20013a5e:	42e6                	lw	t0,88(sp)
20013a60:	4356                	lw	t1,84(sp)
20013a62:	43c6                	lw	t2,80(sp)
20013a64:	4436                	lw	s0,76(sp)
20013a66:	4526                	lw	a0,72(sp)
20013a68:	4596                	lw	a1,68(sp)
20013a6a:	4606                	lw	a2,64(sp)
20013a6c:	56f2                	lw	a3,60(sp)
20013a6e:	5762                	lw	a4,56(sp)
20013a70:	57d2                	lw	a5,52(sp)
20013a72:	5842                	lw	a6,48(sp)
20013a74:	58b2                	lw	a7,44(sp)
20013a76:	5e22                	lw	t3,40(sp)
20013a78:	5e92                	lw	t4,36(sp)
20013a7a:	5f02                	lw	t5,32(sp)
20013a7c:	4ff2                	lw	t6,28(sp)
20013a7e:	6125                	addi	sp,sp,96
20013a80:	30200073          	mret

20013a84 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20013a84:	711d                	addi	sp,sp,-96
20013a86:	ce86                	sw	ra,92(sp)
20013a88:	cc96                	sw	t0,88(sp)
20013a8a:	ca9a                	sw	t1,84(sp)
20013a8c:	c89e                	sw	t2,80(sp)
20013a8e:	c6a2                	sw	s0,76(sp)
20013a90:	c4aa                	sw	a0,72(sp)
20013a92:	c2ae                	sw	a1,68(sp)
20013a94:	c0b2                	sw	a2,64(sp)
20013a96:	de36                	sw	a3,60(sp)
20013a98:	dc3a                	sw	a4,56(sp)
20013a9a:	da3e                	sw	a5,52(sp)
20013a9c:	d842                	sw	a6,48(sp)
20013a9e:	d646                	sw	a7,44(sp)
20013aa0:	d472                	sw	t3,40(sp)
20013aa2:	d276                	sw	t4,36(sp)
20013aa4:	d07a                	sw	t5,32(sp)
20013aa6:	ce7e                	sw	t6,28(sp)
20013aa8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013aaa:	a22ff0ef          	jal	ra,20012ccc <__metal_myhart_id>
20013aae:	872a                	mv	a4,a0
20013ab0:	070a                	slli	a4,a4,0x2
20013ab2:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
20013ab6:	97ba                	add	a5,a5,a4
20013ab8:	439c                	lw	a5,0(a5)
20013aba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20013abe:	fac42783          	lw	a5,-84(s0)
20013ac2:	c78d                	beqz	a5,20013aec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013ac4:	fac42503          	lw	a0,-84(s0)
20013ac8:	9aeff0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20013acc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20013ad0:	fa842783          	lw	a5,-88(s0)
20013ad4:	3807a783          	lw	a5,896(a5)
20013ad8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20013adc:	fa842783          	lw	a5,-88(s0)
20013ae0:	3787a783          	lw	a5,888(a5)
20013ae4:	fa442583          	lw	a1,-92(s0)
20013ae8:	457d                	li	a0,31
20013aea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20013aec:	0001                	nop
20013aee:	40f6                	lw	ra,92(sp)
20013af0:	42e6                	lw	t0,88(sp)
20013af2:	4356                	lw	t1,84(sp)
20013af4:	43c6                	lw	t2,80(sp)
20013af6:	4436                	lw	s0,76(sp)
20013af8:	4526                	lw	a0,72(sp)
20013afa:	4596                	lw	a1,68(sp)
20013afc:	4606                	lw	a2,64(sp)
20013afe:	56f2                	lw	a3,60(sp)
20013b00:	5762                	lw	a4,56(sp)
20013b02:	57d2                	lw	a5,52(sp)
20013b04:	5842                	lw	a6,48(sp)
20013b06:	58b2                	lw	a7,44(sp)
20013b08:	5e22                	lw	t3,40(sp)
20013b0a:	5e92                	lw	t4,36(sp)
20013b0c:	5f02                	lw	t5,32(sp)
20013b0e:	4ff2                	lw	t6,28(sp)
20013b10:	6125                	addi	sp,sp,96
20013b12:	30200073          	mret

20013b16 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20013b16:	1101                	addi	sp,sp,-32
20013b18:	ce22                	sw	s0,28(sp)
20013b1a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20013b1c:	305027f3          	csrr	a5,mtvec
20013b20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20013b24:	fec42783          	lw	a5,-20(s0)
20013b28:	03f7f793          	andi	a5,a5,63
20013b2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20013b30:	fec42703          	lw	a4,-20(s0)
20013b34:	4789                	li	a5,2
20013b36:	00f70d63          	beq	a4,a5,20013b50 <__metal_controller_interrupt_vector_mode+0x3a>
20013b3a:	fec42703          	lw	a4,-20(s0)
20013b3e:	478d                	li	a5,3
20013b40:	00f70a63          	beq	a4,a5,20013b54 <__metal_controller_interrupt_vector_mode+0x3e>
20013b44:	fec42703          	lw	a4,-20(s0)
20013b48:	4785                	li	a5,1
20013b4a:	00f70763          	beq	a4,a5,20013b58 <__metal_controller_interrupt_vector_mode+0x42>
20013b4e:	a039                	j	20013b5c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20013b50:	478d                	li	a5,3
20013b52:	a031                	j	20013b5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20013b54:	4791                	li	a5,4
20013b56:	a021                	j	20013b5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20013b58:	4785                	li	a5,1
20013b5a:	a011                	j	20013b5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20013b5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20013b5e:	853e                	mv	a0,a5
20013b60:	4472                	lw	s0,28(sp)
20013b62:	6105                	addi	sp,sp,32
20013b64:	8082                	ret

20013b66 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20013b66:	7179                	addi	sp,sp,-48
20013b68:	d622                	sw	s0,44(sp)
20013b6a:	1800                	addi	s0,sp,48
20013b6c:	fca42e23          	sw	a0,-36(s0)
20013b70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20013b74:	305027f3          	csrr	a5,mtvec
20013b78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20013b7c:	fec42783          	lw	a5,-20(s0)
20013b80:	fc07f793          	andi	a5,a5,-64
20013b84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20013b88:	fd842783          	lw	a5,-40(s0)
20013b8c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20013b90:	fdc42703          	lw	a4,-36(s0)
20013b94:	4791                	li	a5,4
20013b96:	06e7e063          	bltu	a5,a4,20013bf6 <__metal_controller_interrupt_vector+0x90>
20013b9a:	fdc42783          	lw	a5,-36(s0)
20013b9e:	00279713          	slli	a4,a5,0x2
20013ba2:	200177b7          	lui	a5,0x20017
20013ba6:	94078793          	addi	a5,a5,-1728 # 20016940 <__metal_driver_vtable_riscv_clint0+0x4c>
20013baa:	97ba                	add	a5,a5,a4
20013bac:	439c                	lw	a5,0(a5)
20013bae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20013bb0:	fe842783          	lw	a5,-24(s0)
20013bb4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20013bb8:	fec42783          	lw	a5,-20(s0)
20013bbc:	0027e793          	ori	a5,a5,2
20013bc0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20013bc4:	a80d                	j	20013bf6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20013bc6:	fe842783          	lw	a5,-24(s0)
20013bca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20013bce:	fec42783          	lw	a5,-20(s0)
20013bd2:	0037e793          	ori	a5,a5,3
20013bd6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20013bda:	a831                	j	20013bf6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20013bdc:	fe842783          	lw	a5,-24(s0)
20013be0:	0017e793          	ori	a5,a5,1
20013be4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20013be8:	a039                	j	20013bf6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20013bea:	fe842783          	lw	a5,-24(s0)
20013bee:	9bf1                	andi	a5,a5,-4
20013bf0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20013bf4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20013bf6:	0001                	nop
20013bf8:	5432                	lw	s0,44(sp)
20013bfa:	6145                	addi	sp,sp,48
20013bfc:	8082                	ret

20013bfe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20013bfe:	1101                	addi	sp,sp,-32
20013c00:	ce22                	sw	s0,28(sp)
20013c02:	1000                	addi	s0,sp,32
20013c04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20013c08:	fec42783          	lw	a5,-20(s0)
20013c0c:	17f5                	addi	a5,a5,-3
20013c0e:	4771                	li	a4,28
20013c10:	00f76d63          	bltu	a4,a5,20013c2a <__metal_valid_interrupt_id+0x2c>
20013c14:	00279713          	slli	a4,a5,0x2
20013c18:	200177b7          	lui	a5,0x20017
20013c1c:	95478793          	addi	a5,a5,-1708 # 20016954 <__metal_driver_vtable_riscv_clint0+0x60>
20013c20:	97ba                	add	a5,a5,a4
20013c22:	439c                	lw	a5,0(a5)
20013c24:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20013c26:	4785                	li	a5,1
20013c28:	a019                	j	20013c2e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20013c2a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20013c2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20013c2e:	853e                	mv	a0,a5
20013c30:	4472                	lw	s0,28(sp)
20013c32:	6105                	addi	sp,sp,32
20013c34:	8082                	ret

20013c36 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20013c36:	7179                	addi	sp,sp,-48
20013c38:	d606                	sw	ra,44(sp)
20013c3a:	d422                	sw	s0,40(sp)
20013c3c:	1800                	addi	s0,sp,48
20013c3e:	fca42e23          	sw	a0,-36(s0)
20013c42:	fcb42c23          	sw	a1,-40(s0)
20013c46:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20013c4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20013c4e:	fdc42783          	lw	a5,-36(s0)
20013c52:	e399                	bnez	a5,20013c58 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20013c54:	57fd                	li	a5,-1
20013c56:	a849                	j	20013ce8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20013c58:	fd842703          	lw	a4,-40(s0)
20013c5c:	47fd                	li	a5,31
20013c5e:	08e7e063          	bltu	a5,a4,20013cde <__metal_local_interrupt_enable+0xa8>
20013c62:	fd842783          	lw	a5,-40(s0)
20013c66:	00279713          	slli	a4,a5,0x2
20013c6a:	200177b7          	lui	a5,0x20017
20013c6e:	9c878793          	addi	a5,a5,-1592 # 200169c8 <__metal_driver_vtable_riscv_clint0+0xd4>
20013c72:	97ba                	add	a5,a5,a4
20013c74:	439c                	lw	a5,0(a5)
20013c76:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20013c78:	fd442783          	lw	a5,-44(s0)
20013c7c:	c781                	beqz	a5,20013c84 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20013c7e:	868ff0ef          	jal	ra,20012ce6 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20013c82:	a08d                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20013c84:	87aff0ef          	jal	ra,20012cfe <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20013c88:	a8b1                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20013c8a:	fd442783          	lw	a5,-44(s0)
20013c8e:	c781                	beqz	a5,20013c96 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20013c90:	886ff0ef          	jal	ra,20012d16 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20013c94:	a881                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20013c96:	898ff0ef          	jal	ra,20012d2e <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20013c9a:	a0a9                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20013c9c:	fd442783          	lw	a5,-44(s0)
20013ca0:	c781                	beqz	a5,20013ca8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20013ca2:	8a4ff0ef          	jal	ra,20012d46 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20013ca6:	a83d                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20013ca8:	8b8ff0ef          	jal	ra,20012d60 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20013cac:	a825                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20013cae:	fd442783          	lw	a5,-44(s0)
20013cb2:	c781                	beqz	a5,20013cba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20013cb4:	8c6ff0ef          	jal	ra,20012d7a <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20013cb8:	a035                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20013cba:	8dcff0ef          	jal	ra,20012d96 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20013cbe:	a01d                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20013cc0:	fd442783          	lw	a5,-44(s0)
20013cc4:	c799                	beqz	a5,20013cd2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20013cc6:	fd842783          	lw	a5,-40(s0)
20013cca:	853e                	mv	a0,a5
20013ccc:	8e6ff0ef          	jal	ra,20012db2 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20013cd0:	a811                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20013cd2:	fd842783          	lw	a5,-40(s0)
20013cd6:	853e                	mv	a0,a5
20013cd8:	906ff0ef          	jal	ra,20012dde <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20013cdc:	a021                	j	20013ce4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20013cde:	57fd                	li	a5,-1
20013ce0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20013ce4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20013ce8:	853e                	mv	a0,a5
20013cea:	50b2                	lw	ra,44(sp)
20013cec:	5422                	lw	s0,40(sp)
20013cee:	6145                	addi	sp,sp,48
20013cf0:	8082                	ret

20013cf2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20013cf2:	7179                	addi	sp,sp,-48
20013cf4:	d622                	sw	s0,44(sp)
20013cf6:	1800                	addi	s0,sp,48
20013cf8:	fca42e23          	sw	a0,-36(s0)
20013cfc:	fcb42c23          	sw	a1,-40(s0)
20013d00:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20013d04:	fdc42783          	lw	a5,-36(s0)
20013d08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20013d0c:	fd842703          	lw	a4,-40(s0)
20013d10:	47ad                	li	a5,11
20013d12:	02e7c263          	blt	a5,a4,20013d36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20013d16:	fd442783          	lw	a5,-44(s0)
20013d1a:	cf91                	beqz	a5,20013d36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20013d1c:	fec42703          	lw	a4,-20(s0)
20013d20:	fd842783          	lw	a5,-40(s0)
20013d24:	0e078793          	addi	a5,a5,224
20013d28:	078a                	slli	a5,a5,0x2
20013d2a:	97ba                	add	a5,a5,a4
20013d2c:	fd442703          	lw	a4,-44(s0)
20013d30:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20013d32:	4781                	li	a5,0
20013d34:	a011                	j	20013d38 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20013d36:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20013d38:	853e                	mv	a0,a5
20013d3a:	5432                	lw	s0,44(sp)
20013d3c:	6145                	addi	sp,sp,48
20013d3e:	8082                	ret

20013d40 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20013d40:	7139                	addi	sp,sp,-64
20013d42:	de06                	sw	ra,60(sp)
20013d44:	dc22                	sw	s0,56(sp)
20013d46:	0080                	addi	s0,sp,64
20013d48:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20013d4c:	fcc42783          	lw	a5,-52(s0)
20013d50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20013d54:	fe442783          	lw	a5,-28(s0)
20013d58:	43dc                	lw	a5,4(a5)
20013d5a:	10079d63          	bnez	a5,20013e74 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20013d5e:	57fd                	li	a5,-1
20013d60:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20013d64:	57fd                	li	a5,-1
20013d66:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20013d6a:	301027f3          	csrr	a5,misa
20013d6e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20013d72:	fe042703          	lw	a4,-32(s0)
20013d76:	6789                	lui	a5,0x2
20013d78:	8ff9                	and	a5,a5,a4
20013d7a:	e799                	bnez	a5,20013d88 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20013d7c:	fe042703          	lw	a4,-32(s0)
20013d80:	000407b7          	lui	a5,0x40
20013d84:	8ff9                	and	a5,a5,a4
20013d86:	c799                	beqz	a5,20013d94 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20013d88:	57fd                	li	a5,-1
20013d8a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20013d8e:	57fd                	li	a5,-1
20013d90:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20013d94:	fe042703          	lw	a4,-32(s0)
20013d98:	000407b7          	lui	a5,0x40
20013d9c:	8ff9                	and	a5,a5,a4
20013d9e:	c781                	beqz	a5,20013da6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20013da0:	57fd                	li	a5,-1
20013da2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20013da6:	fe042623          	sw	zero,-20(s0)
20013daa:	a0b9                	j	20013df8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20013dac:	fe442683          	lw	a3,-28(s0)
20013db0:	fec42703          	lw	a4,-20(s0)
20013db4:	87ba                	mv	a5,a4
20013db6:	0786                	slli	a5,a5,0x1
20013db8:	97ba                	add	a5,a5,a4
20013dba:	078e                	slli	a5,a5,0x3
20013dbc:	97b6                	add	a5,a5,a3
20013dbe:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20013dc2:	fe442683          	lw	a3,-28(s0)
20013dc6:	fec42703          	lw	a4,-20(s0)
20013dca:	87ba                	mv	a5,a4
20013dcc:	0786                	slli	a5,a5,0x1
20013dce:	97ba                	add	a5,a5,a4
20013dd0:	078e                	slli	a5,a5,0x3
20013dd2:	97b6                	add	a5,a5,a3
20013dd4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20013dd8:	fe442683          	lw	a3,-28(s0)
20013ddc:	fec42703          	lw	a4,-20(s0)
20013de0:	87ba                	mv	a5,a4
20013de2:	0786                	slli	a5,a5,0x1
20013de4:	97ba                	add	a5,a5,a4
20013de6:	078e                	slli	a5,a5,0x3
20013de8:	97b6                	add	a5,a5,a3
20013dea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20013dee:	fec42783          	lw	a5,-20(s0)
20013df2:	0785                	addi	a5,a5,1
20013df4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20013df8:	fec42703          	lw	a4,-20(s0)
20013dfc:	47fd                	li	a5,31
20013dfe:	fae7d7e3          	bge	a5,a4,20013dac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20013e02:	fe042423          	sw	zero,-24(s0)
20013e06:	a01d                	j	20013e2c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20013e08:	fe442703          	lw	a4,-28(s0)
20013e0c:	fe842783          	lw	a5,-24(s0)
20013e10:	0e078793          	addi	a5,a5,224
20013e14:	078a                	slli	a5,a5,0x2
20013e16:	97ba                	add	a5,a5,a4
20013e18:	20013737          	lui	a4,0x20013
20013e1c:	e0a70713          	addi	a4,a4,-502 # 20012e0a <__metal_default_exception_handler>
20013e20:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20013e22:	fe842783          	lw	a5,-24(s0)
20013e26:	0785                	addi	a5,a5,1
20013e28:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20013e2c:	fe842703          	lw	a4,-24(s0)
20013e30:	47ad                	li	a5,11
20013e32:	fce7dbe3          	bge	a5,a4,20013e08 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20013e36:	200137b7          	lui	a5,0x20013
20013e3a:	08078593          	addi	a1,a5,128 # 20013080 <__metal_exception_handler>
20013e3e:	4501                	li	a0,0
20013e40:	331d                	jal	20013b66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20013e42:	301027f3          	csrr	a5,misa
20013e46:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20013e4a:	fdc42703          	lw	a4,-36(s0)
20013e4e:	67c1                	lui	a5,0x10
20013e50:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20013e54:	8ff9                	and	a5,a5,a4
20013e56:	cb99                	beqz	a5,20013e6c <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20013e58:	300027f3          	csrr	a5,mstatus
20013e5c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20013e60:	fdc42703          	lw	a4,-36(s0)
20013e64:	6789                	lui	a5,0x2
20013e66:	8fd9                	or	a5,a5,a4
20013e68:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20013e6c:	fe442783          	lw	a5,-28(s0)
20013e70:	4705                	li	a4,1
20013e72:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20013e74:	0001                	nop
20013e76:	50f2                	lw	ra,60(sp)
20013e78:	5462                	lw	s0,56(sp)
20013e7a:	6121                	addi	sp,sp,64
20013e7c:	8082                	ret

20013e7e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20013e7e:	7179                	addi	sp,sp,-48
20013e80:	d606                	sw	ra,44(sp)
20013e82:	d422                	sw	s0,40(sp)
20013e84:	1800                	addi	s0,sp,48
20013e86:	fca42e23          	sw	a0,-36(s0)
20013e8a:	fcb42c23          	sw	a1,-40(s0)
20013e8e:	fcc42a23          	sw	a2,-44(s0)
20013e92:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20013e96:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20013e9a:	fdc42783          	lw	a5,-36(s0)
20013e9e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20013ea2:	fd842503          	lw	a0,-40(s0)
20013ea6:	3ba1                	jal	20013bfe <__metal_valid_interrupt_id>
20013ea8:	87aa                	mv	a5,a0
20013eaa:	e399                	bnez	a5,20013eb0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20013eac:	57d5                	li	a5,-11
20013eae:	aa11                	j	20013fc2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20013eb0:	fd442783          	lw	a5,-44(s0)
20013eb4:	cf85                	beqz	a5,20013eec <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20013eb6:	fe842683          	lw	a3,-24(s0)
20013eba:	fd842703          	lw	a4,-40(s0)
20013ebe:	87ba                	mv	a5,a4
20013ec0:	0786                	slli	a5,a5,0x1
20013ec2:	97ba                	add	a5,a5,a4
20013ec4:	078e                	slli	a5,a5,0x3
20013ec6:	97b6                	add	a5,a5,a3
20013ec8:	fd442703          	lw	a4,-44(s0)
20013ecc:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20013ed0:	fe842683          	lw	a3,-24(s0)
20013ed4:	fd842703          	lw	a4,-40(s0)
20013ed8:	87ba                	mv	a5,a4
20013eda:	0786                	slli	a5,a5,0x1
20013edc:	97ba                	add	a5,a5,a4
20013ede:	078e                	slli	a5,a5,0x3
20013ee0:	97b6                	add	a5,a5,a3
20013ee2:	fd042703          	lw	a4,-48(s0)
20013ee6:	08e7ac23          	sw	a4,152(a5)
20013eea:	a8d1                	j	20013fbe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20013eec:	fd842783          	lw	a5,-40(s0)
20013ef0:	17f5                	addi	a5,a5,-3
20013ef2:	4771                	li	a4,28
20013ef4:	0cf76263          	bltu	a4,a5,20013fb8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20013ef8:	00279713          	slli	a4,a5,0x2
20013efc:	200177b7          	lui	a5,0x20017
20013f00:	a4878793          	addi	a5,a5,-1464 # 20016a48 <__metal_driver_vtable_riscv_clint0+0x154>
20013f04:	97ba                	add	a5,a5,a4
20013f06:	439c                	lw	a5,0(a5)
20013f08:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20013f0a:	fe842683          	lw	a3,-24(s0)
20013f0e:	fd842703          	lw	a4,-40(s0)
20013f12:	87ba                	mv	a5,a4
20013f14:	0786                	slli	a5,a5,0x1
20013f16:	97ba                	add	a5,a5,a4
20013f18:	078e                	slli	a5,a5,0x3
20013f1a:	97b6                	add	a5,a5,a3
20013f1c:	20013737          	lui	a4,0x20013
20013f20:	ef670713          	addi	a4,a4,-266 # 20012ef6 <__metal_default_sw_handler>
20013f24:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20013f28:	fe842683          	lw	a3,-24(s0)
20013f2c:	fd842703          	lw	a4,-40(s0)
20013f30:	87ba                	mv	a5,a4
20013f32:	0786                	slli	a5,a5,0x1
20013f34:	97ba                	add	a5,a5,a4
20013f36:	078e                	slli	a5,a5,0x3
20013f38:	97b6                	add	a5,a5,a3
20013f3a:	fd042703          	lw	a4,-48(s0)
20013f3e:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20013f42:	a8b5                	j	20013fbe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20013f44:	fe842683          	lw	a3,-24(s0)
20013f48:	fd842703          	lw	a4,-40(s0)
20013f4c:	87ba                	mv	a5,a4
20013f4e:	0786                	slli	a5,a5,0x1
20013f50:	97ba                	add	a5,a5,a4
20013f52:	078e                	slli	a5,a5,0x3
20013f54:	97b6                	add	a5,a5,a3
20013f56:	20013737          	lui	a4,0x20013
20013f5a:	fe870713          	addi	a4,a4,-24 # 20012fe8 <__metal_default_timer_handler>
20013f5e:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20013f62:	fe842683          	lw	a3,-24(s0)
20013f66:	fd842703          	lw	a4,-40(s0)
20013f6a:	87ba                	mv	a5,a4
20013f6c:	0786                	slli	a5,a5,0x1
20013f6e:	97ba                	add	a5,a5,a4
20013f70:	078e                	slli	a5,a5,0x3
20013f72:	97b6                	add	a5,a5,a3
20013f74:	fd042703          	lw	a4,-48(s0)
20013f78:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20013f7c:	a089                	j	20013fbe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20013f7e:	fe842683          	lw	a3,-24(s0)
20013f82:	fd842703          	lw	a4,-40(s0)
20013f86:	87ba                	mv	a5,a4
20013f88:	0786                	slli	a5,a5,0x1
20013f8a:	97ba                	add	a5,a5,a4
20013f8c:	078e                	slli	a5,a5,0x3
20013f8e:	97b6                	add	a5,a5,a3
20013f90:	20013737          	lui	a4,0x20013
20013f94:	e2270713          	addi	a4,a4,-478 # 20012e22 <__metal_default_interrupt_handler>
20013f98:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20013f9c:	fe842683          	lw	a3,-24(s0)
20013fa0:	fd842703          	lw	a4,-40(s0)
20013fa4:	87ba                	mv	a5,a4
20013fa6:	0786                	slli	a5,a5,0x1
20013fa8:	97ba                	add	a5,a5,a4
20013faa:	078e                	slli	a5,a5,0x3
20013fac:	97b6                	add	a5,a5,a3
20013fae:	fd042703          	lw	a4,-48(s0)
20013fb2:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20013fb6:	a021                	j	20013fbe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20013fb8:	57d1                	li	a5,-12
20013fba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20013fbe:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20013fc2:	853e                	mv	a0,a5
20013fc4:	50b2                	lw	ra,44(sp)
20013fc6:	5422                	lw	s0,40(sp)
20013fc8:	6145                	addi	sp,sp,48
20013fca:	8082                	ret

20013fcc <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20013fcc:	1101                	addi	sp,sp,-32
20013fce:	ce06                	sw	ra,28(sp)
20013fd0:	cc22                	sw	s0,24(sp)
20013fd2:	1000                	addi	s0,sp,32
20013fd4:	fea42623          	sw	a0,-20(s0)
20013fd8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20013fdc:	fe842783          	lw	a5,-24(s0)
20013fe0:	4605                	li	a2,1
20013fe2:	85be                	mv	a1,a5
20013fe4:	fec42503          	lw	a0,-20(s0)
20013fe8:	c4fff0ef          	jal	ra,20013c36 <__metal_local_interrupt_enable>
20013fec:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20013fee:	853e                	mv	a0,a5
20013ff0:	40f2                	lw	ra,28(sp)
20013ff2:	4462                	lw	s0,24(sp)
20013ff4:	6105                	addi	sp,sp,32
20013ff6:	8082                	ret

20013ff8 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20013ff8:	1101                	addi	sp,sp,-32
20013ffa:	ce06                	sw	ra,28(sp)
20013ffc:	cc22                	sw	s0,24(sp)
20013ffe:	1000                	addi	s0,sp,32
20014000:	fea42623          	sw	a0,-20(s0)
20014004:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20014008:	fe842783          	lw	a5,-24(s0)
2001400c:	4601                	li	a2,0
2001400e:	85be                	mv	a1,a5
20014010:	fec42503          	lw	a0,-20(s0)
20014014:	c23ff0ef          	jal	ra,20013c36 <__metal_local_interrupt_enable>
20014018:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2001401a:	853e                	mv	a0,a5
2001401c:	40f2                	lw	ra,28(sp)
2001401e:	4462                	lw	s0,24(sp)
20014020:	6105                	addi	sp,sp,32
20014022:	8082                	ret

20014024 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20014024:	1101                	addi	sp,sp,-32
20014026:	ce06                	sw	ra,28(sp)
20014028:	cc22                	sw	s0,24(sp)
2001402a:	1000                	addi	s0,sp,32
2001402c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20014030:	ae7ff0ef          	jal	ra,20013b16 <__metal_controller_interrupt_vector_mode>
20014034:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20014036:	853e                	mv	a0,a5
20014038:	40f2                	lw	ra,28(sp)
2001403a:	4462                	lw	s0,24(sp)
2001403c:	6105                	addi	sp,sp,32
2001403e:	8082                	ret

20014040 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20014040:	7179                	addi	sp,sp,-48
20014042:	d606                	sw	ra,44(sp)
20014044:	d422                	sw	s0,40(sp)
20014046:	1800                	addi	s0,sp,48
20014048:	fca42e23          	sw	a0,-36(s0)
2001404c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20014050:	fdc42783          	lw	a5,-36(s0)
20014054:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20014058:	fd842783          	lw	a5,-40(s0)
2001405c:	eb99                	bnez	a5,20014072 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
2001405e:	200137b7          	lui	a5,0x20013
20014062:	08078593          	addi	a1,a5,128 # 20013080 <__metal_exception_handler>
20014066:	fd842503          	lw	a0,-40(s0)
2001406a:	afdff0ef          	jal	ra,20013b66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
2001406e:	4781                	li	a5,0
20014070:	a00d                	j	20014092 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20014072:	fd842703          	lw	a4,-40(s0)
20014076:	4785                	li	a5,1
20014078:	00f71c63          	bne	a4,a5,20014090 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
2001407c:	200167b7          	lui	a5,0x20016
20014080:	58078593          	addi	a1,a5,1408 # 20016580 <__metal_vector_table>
20014084:	fd842503          	lw	a0,-40(s0)
20014088:	adfff0ef          	jal	ra,20013b66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2001408c:	4781                	li	a5,0
2001408e:	a011                	j	20014092 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20014090:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20014092:	853e                	mv	a0,a5
20014094:	50b2                	lw	ra,44(sp)
20014096:	5422                	lw	s0,40(sp)
20014098:	6145                	addi	sp,sp,48
2001409a:	8082                	ret

2001409c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2001409c:	1101                	addi	sp,sp,-32
2001409e:	ce22                	sw	s0,28(sp)
200140a0:	1000                	addi	s0,sp,32
200140a2:	fea42623          	sw	a0,-20(s0)
200140a6:	feb42423          	sw	a1,-24(s0)
200140aa:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
200140ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
200140b0:	853e                	mv	a0,a5
200140b2:	4472                	lw	s0,28(sp)
200140b4:	6105                	addi	sp,sp,32
200140b6:	8082                	ret

200140b8 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
200140b8:	7139                	addi	sp,sp,-64
200140ba:	de22                	sw	s0,60(sp)
200140bc:	0080                	addi	s0,sp,64
200140be:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
200140c2:	4301                	li	t1,0
200140c4:	4381                	li	t2,0
200140c6:	fe642423          	sw	t1,-24(s0)
200140ca:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
200140ce:	b8002573          	csrr	a0,mcycleh
200140d2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
200140d6:	b0002573          	csrr	a0,mcycle
200140da:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
200140de:	b8002573          	csrr	a0,mcycleh
200140e2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
200140e6:	fe442883          	lw	a7,-28(s0)
200140ea:	fdc42503          	lw	a0,-36(s0)
200140ee:	02a89563          	bne	a7,a0,20014118 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
200140f2:	fe442503          	lw	a0,-28(s0)
200140f6:	85aa                	mv	a1,a0
200140f8:	4601                	li	a2,0
200140fa:	00059813          	slli	a6,a1,0x0
200140fe:	4781                	li	a5,0
20014100:	fe042603          	lw	a2,-32(s0)
20014104:	86b2                	mv	a3,a2
20014106:	4701                	li	a4,0
20014108:	00d7e633          	or	a2,a5,a3
2001410c:	fec42423          	sw	a2,-24(s0)
20014110:	00e867b3          	or	a5,a6,a4
20014114:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20014118:	fe842783          	lw	a5,-24(s0)
2001411c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20014120:	853e                	mv	a0,a5
20014122:	85c2                	mv	a1,a6
20014124:	5472                	lw	s0,60(sp)
20014126:	6121                	addi	sp,sp,64
20014128:	8082                	ret

2001412a <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
2001412a:	7179                	addi	sp,sp,-48
2001412c:	d606                	sw	ra,44(sp)
2001412e:	d422                	sw	s0,40(sp)
20014130:	d24a                	sw	s2,36(sp)
20014132:	d04e                	sw	s3,32(sp)
20014134:	1800                	addi	s0,sp,48
20014136:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
2001413a:	fdc42783          	lw	a5,-36(s0)
2001413e:	e781                	bnez	a5,20014146 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20014140:	4901                	li	s2,0
20014142:	4981                	li	s3,0
20014144:	a821                	j	2001415c <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20014146:	fdc42503          	lw	a0,-36(s0)
2001414a:	b03fe0ef          	jal	ra,20012c4c <__metal_driver_cpu_timebase>
2001414e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20014152:	fec42783          	lw	a5,-20(s0)
20014156:	893e                	mv	s2,a5
20014158:	87fd                	srai	a5,a5,0x1f
2001415a:	89be                	mv	s3,a5
2001415c:	87ca                	mv	a5,s2
2001415e:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20014160:	853e                	mv	a0,a5
20014162:	85c2                	mv	a1,a6
20014164:	50b2                	lw	ra,44(sp)
20014166:	5422                	lw	s0,40(sp)
20014168:	5912                	lw	s2,36(sp)
2001416a:	5982                	lw	s3,32(sp)
2001416c:	6145                	addi	sp,sp,48
2001416e:	8082                	ret

20014170 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20014170:	7179                	addi	sp,sp,-48
20014172:	d606                	sw	ra,44(sp)
20014174:	d422                	sw	s0,40(sp)
20014176:	1800                	addi	s0,sp,48
20014178:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
2001417c:	4781                	li	a5,0
2001417e:	4801                	li	a6,0
20014180:	fef42023          	sw	a5,-32(s0)
20014184:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20014188:	fdc42503          	lw	a0,-36(s0)
2001418c:	aebfe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20014190:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20014194:	fec42783          	lw	a5,-20(s0)
20014198:	c78d                	beqz	a5,200141c2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2001419a:	fec42783          	lw	a5,-20(s0)
2001419e:	13c7a783          	lw	a5,316(a5)
200141a2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
200141a6:	fe842783          	lw	a5,-24(s0)
200141aa:	cf81                	beqz	a5,200141c2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
200141ac:	fe842783          	lw	a5,-24(s0)
200141b0:	439c                	lw	a5,0(a5)
200141b2:	43f8                	lw	a4,68(a5)
200141b4:	fe040793          	addi	a5,s0,-32
200141b8:	863e                	mv	a2,a5
200141ba:	4585                	li	a1,1
200141bc:	fe842503          	lw	a0,-24(s0)
200141c0:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
200141c2:	fe042783          	lw	a5,-32(s0)
200141c6:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
200141ca:	853e                	mv	a0,a5
200141cc:	85c2                	mv	a1,a6
200141ce:	50b2                	lw	ra,44(sp)
200141d0:	5422                	lw	s0,40(sp)
200141d2:	6145                	addi	sp,sp,48
200141d4:	8082                	ret

200141d6 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
200141d6:	7179                	addi	sp,sp,-48
200141d8:	d606                	sw	ra,44(sp)
200141da:	d422                	sw	s0,40(sp)
200141dc:	d226                	sw	s1,36(sp)
200141de:	1800                	addi	s0,sp,48
200141e0:	fca42e23          	sw	a0,-36(s0)
200141e4:	fcb42823          	sw	a1,-48(s0)
200141e8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
200141ec:	57fd                	li	a5,-1
200141ee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
200141f2:	fdc42503          	lw	a0,-36(s0)
200141f6:	a81fe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200141fa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
200141fe:	fe842783          	lw	a5,-24(s0)
20014202:	cf8d                	beqz	a5,2001423c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20014204:	fe842783          	lw	a5,-24(s0)
20014208:	13c7a783          	lw	a5,316(a5)
2001420c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20014210:	fe442783          	lw	a5,-28(s0)
20014214:	c785                	beqz	a5,2001423c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20014216:	fe442783          	lw	a5,-28(s0)
2001421a:	439c                	lw	a5,0(a5)
2001421c:	47a4                	lw	s1,72(a5)
2001421e:	fdc42503          	lw	a0,-36(s0)
20014222:	a07fe0ef          	jal	ra,20012c28 <__metal_driver_cpu_hartid>
20014226:	87aa                	mv	a5,a0
20014228:	fd042603          	lw	a2,-48(s0)
2001422c:	fd442683          	lw	a3,-44(s0)
20014230:	85be                	mv	a1,a5
20014232:	fe442503          	lw	a0,-28(s0)
20014236:	9482                	jalr	s1
20014238:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
2001423c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20014240:	853e                	mv	a0,a5
20014242:	50b2                	lw	ra,44(sp)
20014244:	5422                	lw	s0,40(sp)
20014246:	5492                	lw	s1,36(sp)
20014248:	6145                	addi	sp,sp,48
2001424a:	8082                	ret

2001424c <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
2001424c:	1101                	addi	sp,sp,-32
2001424e:	ce22                	sw	s0,28(sp)
20014250:	1000                	addi	s0,sp,32
20014252:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20014256:	81018793          	addi	a5,gp,-2032 # 80001268 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2001425a:	853e                	mv	a0,a5
2001425c:	4472                	lw	s0,28(sp)
2001425e:	6105                	addi	sp,sp,32
20014260:	8082                	ret

20014262 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20014262:	1101                	addi	sp,sp,-32
20014264:	ce22                	sw	s0,28(sp)
20014266:	1000                	addi	s0,sp,32
20014268:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
2001426c:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
2001426e:	853e                	mv	a0,a5
20014270:	4472                	lw	s0,28(sp)
20014272:	6105                	addi	sp,sp,32
20014274:	8082                	ret

20014276 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20014276:	1101                	addi	sp,sp,-32
20014278:	ce22                	sw	s0,28(sp)
2001427a:	1000                	addi	s0,sp,32
2001427c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20014280:	81018793          	addi	a5,gp,-2032 # 80001268 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20014284:	853e                	mv	a0,a5
20014286:	4472                	lw	s0,28(sp)
20014288:	6105                	addi	sp,sp,32
2001428a:	8082                	ret

2001428c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
2001428c:	1101                	addi	sp,sp,-32
2001428e:	ce22                	sw	s0,28(sp)
20014290:	1000                	addi	s0,sp,32
20014292:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20014296:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20014298:	853e                	mv	a0,a5
2001429a:	4472                	lw	s0,28(sp)
2001429c:	6105                	addi	sp,sp,32
2001429e:	8082                	ret

200142a0 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
200142a0:	7179                	addi	sp,sp,-48
200142a2:	d606                	sw	ra,44(sp)
200142a4:	d422                	sw	s0,40(sp)
200142a6:	1800                	addi	s0,sp,48
200142a8:	fca42e23          	sw	a0,-36(s0)
200142ac:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
200142b0:	57fd                	li	a5,-1
200142b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
200142b6:	fdc42503          	lw	a0,-36(s0)
200142ba:	9bdfe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200142be:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
200142c2:	fe842783          	lw	a5,-24(s0)
200142c6:	c79d                	beqz	a5,200142f4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
200142c8:	fe842783          	lw	a5,-24(s0)
200142cc:	0dc7a783          	lw	a5,220(a5)
200142d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
200142d4:	fe442783          	lw	a5,-28(s0)
200142d8:	cf91                	beqz	a5,200142f4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
200142da:	fe442783          	lw	a5,-28(s0)
200142de:	439c                	lw	a5,0(a5)
200142e0:	43f8                	lw	a4,68(a5)
200142e2:	fd840793          	addi	a5,s0,-40
200142e6:	863e                	mv	a2,a5
200142e8:	458d                	li	a1,3
200142ea:	fe442503          	lw	a0,-28(s0)
200142ee:	9702                	jalr	a4
200142f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
200142f4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
200142f8:	853e                	mv	a0,a5
200142fa:	50b2                	lw	ra,44(sp)
200142fc:	5422                	lw	s0,40(sp)
200142fe:	6145                	addi	sp,sp,48
20014300:	8082                	ret

20014302 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20014302:	7179                	addi	sp,sp,-48
20014304:	d606                	sw	ra,44(sp)
20014306:	d422                	sw	s0,40(sp)
20014308:	1800                	addi	s0,sp,48
2001430a:	fca42e23          	sw	a0,-36(s0)
2001430e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20014312:	57fd                	li	a5,-1
20014314:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20014318:	fdc42503          	lw	a0,-36(s0)
2001431c:	95bfe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20014320:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20014324:	fe842783          	lw	a5,-24(s0)
20014328:	c79d                	beqz	a5,20014356 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2001432a:	fe842783          	lw	a5,-24(s0)
2001432e:	0dc7a783          	lw	a5,220(a5)
20014332:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20014336:	fe442783          	lw	a5,-28(s0)
2001433a:	cf91                	beqz	a5,20014356 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
2001433c:	fe442783          	lw	a5,-28(s0)
20014340:	439c                	lw	a5,0(a5)
20014342:	43f8                	lw	a4,68(a5)
20014344:	fd840793          	addi	a5,s0,-40
20014348:	863e                	mv	a2,a5
2001434a:	4589                	li	a1,2
2001434c:	fe442503          	lw	a0,-28(s0)
20014350:	9702                	jalr	a4
20014352:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20014356:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
2001435a:	853e                	mv	a0,a5
2001435c:	50b2                	lw	ra,44(sp)
2001435e:	5422                	lw	s0,40(sp)
20014360:	6145                	addi	sp,sp,48
20014362:	8082                	ret

20014364 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20014364:	7179                	addi	sp,sp,-48
20014366:	d606                	sw	ra,44(sp)
20014368:	d422                	sw	s0,40(sp)
2001436a:	1800                	addi	s0,sp,48
2001436c:	fca42e23          	sw	a0,-36(s0)
20014370:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20014374:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20014378:	fdc42503          	lw	a0,-36(s0)
2001437c:	8fbfe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20014380:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20014384:	fe842783          	lw	a5,-24(s0)
20014388:	c79d                	beqz	a5,200143b6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2001438a:	fe842783          	lw	a5,-24(s0)
2001438e:	0dc7a783          	lw	a5,220(a5)
20014392:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20014396:	fe442783          	lw	a5,-28(s0)
2001439a:	cf91                	beqz	a5,200143b6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2001439c:	fe442783          	lw	a5,-28(s0)
200143a0:	439c                	lw	a5,0(a5)
200143a2:	43f8                	lw	a4,68(a5)
200143a4:	fd840793          	addi	a5,s0,-40
200143a8:	863e                	mv	a2,a5
200143aa:	4591                	li	a1,4
200143ac:	fe442503          	lw	a0,-28(s0)
200143b0:	9702                	jalr	a4
200143b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
200143b6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
200143ba:	853e                	mv	a0,a5
200143bc:	50b2                	lw	ra,44(sp)
200143be:	5422                	lw	s0,40(sp)
200143c0:	6145                	addi	sp,sp,48
200143c2:	8082                	ret

200143c4 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
200143c4:	1101                	addi	sp,sp,-32
200143c6:	ce06                	sw	ra,28(sp)
200143c8:	cc22                	sw	s0,24(sp)
200143ca:	1000                	addi	s0,sp,32
200143cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
200143d0:	fec42503          	lw	a0,-20(s0)
200143d4:	8a3fe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
200143d8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
200143da:	853e                	mv	a0,a5
200143dc:	40f2                	lw	ra,28(sp)
200143de:	4462                	lw	s0,24(sp)
200143e0:	6105                	addi	sp,sp,32
200143e2:	8082                	ret

200143e4 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
200143e4:	7179                	addi	sp,sp,-48
200143e6:	d606                	sw	ra,44(sp)
200143e8:	d422                	sw	s0,40(sp)
200143ea:	1800                	addi	s0,sp,48
200143ec:	fca42e23          	sw	a0,-36(s0)
200143f0:	fcb42c23          	sw	a1,-40(s0)
200143f4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
200143f8:	fdc42503          	lw	a0,-36(s0)
200143fc:	87bfe0ef          	jal	ra,20012c76 <__metal_driver_cpu_interrupt_controller>
20014400:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20014404:	fec42783          	lw	a5,-20(s0)
20014408:	cb99                	beqz	a5,2001441e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2001440a:	fd442603          	lw	a2,-44(s0)
2001440e:	fd842583          	lw	a1,-40(s0)
20014412:	fec42503          	lw	a0,-20(s0)
20014416:	8ddff0ef          	jal	ra,20013cf2 <__metal_exception_register>
2001441a:	87aa                	mv	a5,a0
2001441c:	a011                	j	20014420 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2001441e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20014420:	853e                	mv	a0,a5
20014422:	50b2                	lw	ra,44(sp)
20014424:	5422                	lw	s0,40(sp)
20014426:	6145                	addi	sp,sp,48
20014428:	8082                	ret

2001442a <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
2001442a:	1101                	addi	sp,sp,-32
2001442c:	ce22                	sw	s0,28(sp)
2001442e:	1000                	addi	s0,sp,32
20014430:	fea42623          	sw	a0,-20(s0)
20014434:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20014438:	fe842783          	lw	a5,-24(s0)
2001443c:	0007d783          	lhu	a5,0(a5)
20014440:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20014444:	478d                	li	a5,3
20014446:	00f71463          	bne	a4,a5,2001444e <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
2001444a:	4791                	li	a5,4
2001444c:	a011                	j	20014450 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
2001444e:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20014450:	853e                	mv	a0,a5
20014452:	4472                	lw	s0,28(sp)
20014454:	6105                	addi	sp,sp,32
20014456:	8082                	ret

20014458 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20014458:	7179                	addi	sp,sp,-48
2001445a:	d622                	sw	s0,44(sp)
2001445c:	1800                	addi	s0,sp,48
2001445e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20014462:	341027f3          	csrr	a5,mepc
20014466:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
2001446a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
2001446e:	853e                	mv	a0,a5
20014470:	5432                	lw	s0,44(sp)
20014472:	6145                	addi	sp,sp,48
20014474:	8082                	ret

20014476 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20014476:	1101                	addi	sp,sp,-32
20014478:	ce22                	sw	s0,28(sp)
2001447a:	1000                	addi	s0,sp,32
2001447c:	fea42623          	sw	a0,-20(s0)
20014480:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20014484:	fe842783          	lw	a5,-24(s0)
20014488:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2001448c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2001448e:	853e                	mv	a0,a5
20014490:	4472                	lw	s0,28(sp)
20014492:	6105                	addi	sp,sp,32
20014494:	8082                	ret

20014496 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:305



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20014496:	1101                	addi	sp,sp,-32
20014498:	ce22                	sw	s0,28(sp)
2001449a:	1000                	addi	s0,sp,32
2001449c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:306
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200144a0:	fec42703          	lw	a4,-20(s0)
200144a4:	800017b7          	lui	a5,0x80001
200144a8:	c1878793          	addi	a5,a5,-1000 # 80000c18 <metal_segment_heap_target_end+0xffffecb4>
200144ac:	00f71563          	bne	a4,a5,200144b6 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:307
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
200144b0:	0c0007b7          	lui	a5,0xc000
200144b4:	a011                	j	200144b8 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:310
	}
	else {
		return 0;
200144b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:312
	}
}
200144b8:	853e                	mv	a0,a5
200144ba:	4472                	lw	s0,28(sp)
200144bc:	6105                	addi	sp,sp,32
200144be:	8082                	ret

200144c0 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:325
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
200144c0:	1101                	addi	sp,sp,-32
200144c2:	ce22                	sw	s0,28(sp)
200144c4:	1000                	addi	s0,sp,32
200144c6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:326
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200144ca:	fec42703          	lw	a4,-20(s0)
200144ce:	800017b7          	lui	a5,0x80001
200144d2:	c1878793          	addi	a5,a5,-1000 # 80000c18 <metal_segment_heap_target_end+0xffffecb4>
200144d6:	00f71563          	bne	a4,a5,200144e0 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:327
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
200144da:	03500793          	li	a5,53
200144de:	a011                	j	200144e2 <__metal_driver_sifive_plic0_num_interrupts+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:330
	}
	else {
		return 0;
200144e0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:332
	}
}
200144e2:	853e                	mv	a0,a5
200144e4:	4472                	lw	s0,28(sp)
200144e6:	6105                	addi	sp,sp,32
200144e8:	8082                	ret

200144ea <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:335

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
200144ea:	1101                	addi	sp,sp,-32
200144ec:	ce22                	sw	s0,28(sp)
200144ee:	1000                	addi	s0,sp,32
200144f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:336
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200144f4:	fec42703          	lw	a4,-20(s0)
200144f8:	800017b7          	lui	a5,0x80001
200144fc:	c1878793          	addi	a5,a5,-1000 # 80000c18 <metal_segment_heap_target_end+0xffffecb4>
20014500:	00f71463          	bne	a4,a5,20014508 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:337
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20014504:	479d                	li	a5,7
20014506:	a011                	j	2001450a <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:340
	}
	else {
		return 0;
20014508:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:342
	}
}
2001450a:	853e                	mv	a0,a5
2001450c:	4472                	lw	s0,28(sp)
2001450e:	6105                	addi	sp,sp,32
20014510:	8082                	ret

20014512 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:345

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20014512:	1101                	addi	sp,sp,-32
20014514:	ce22                	sw	s0,28(sp)
20014516:	1000                	addi	s0,sp,32
20014518:	fea42623          	sw	a0,-20(s0)
2001451c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:346
	if (idx == 0) {
20014520:	fe842783          	lw	a5,-24(s0)
20014524:	e791                	bnez	a5,20014530 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:347
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20014526:	800017b7          	lui	a5,0x80001
2001452a:	86078793          	addi	a5,a5,-1952 # 80000860 <metal_segment_heap_target_end+0xffffe8fc>
2001452e:	a011                	j	20014532 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:350
	}
	else {
		return NULL;
20014530:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:352
	}
}
20014532:	853e                	mv	a0,a5
20014534:	4472                	lw	s0,28(sp)
20014536:	6105                	addi	sp,sp,32
20014538:	8082                	ret

2001453a <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:355

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2001453a:	1101                	addi	sp,sp,-32
2001453c:	ce22                	sw	s0,28(sp)
2001453e:	1000                	addi	s0,sp,32
20014540:	fea42623          	sw	a0,-20(s0)
20014544:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:356
	if (idx == 0) {
20014548:	fe842783          	lw	a5,-24(s0)
2001454c:	e399                	bnez	a5,20014552 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:357
		return 11;
2001454e:	47ad                	li	a5,11
20014550:	a011                	j	20014554 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:360
	}
	else {
		return 0;
20014552:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:362
	}
}
20014554:	853e                	mv	a0,a5
20014556:	4472                	lw	s0,28(sp)
20014558:	6105                	addi	sp,sp,32
2001455a:	8082                	ret

2001455c <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
2001455c:	7179                	addi	sp,sp,-48
2001455e:	d606                	sw	ra,44(sp)
20014560:	d422                	sw	s0,40(sp)
20014562:	1800                	addi	s0,sp,48
20014564:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20014568:	fdc42503          	lw	a0,-36(s0)
2001456c:	372d                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
2001456e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20014572:	fec42703          	lw	a4,-20(s0)
20014576:	002007b7          	lui	a5,0x200
2001457a:	0791                	addi	a5,a5,4
2001457c:	97ba                	add	a5,a5,a4
2001457e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20014580:	853e                	mv	a0,a5
20014582:	50b2                	lw	ra,44(sp)
20014584:	5422                	lw	s0,40(sp)
20014586:	6145                	addi	sp,sp,48
20014588:	8082                	ret

2001458a <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
2001458a:	7179                	addi	sp,sp,-48
2001458c:	d606                	sw	ra,44(sp)
2001458e:	d422                	sw	s0,40(sp)
20014590:	1800                	addi	s0,sp,48
20014592:	fca42e23          	sw	a0,-36(s0)
20014596:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2001459a:	fdc42503          	lw	a0,-36(s0)
2001459e:	3de5                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
200145a0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200145a4:	fec42703          	lw	a4,-20(s0)
200145a8:	002007b7          	lui	a5,0x200
200145ac:	0791                	addi	a5,a5,4
200145ae:	97ba                	add	a5,a5,a4
200145b0:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
200145b2:	fd842783          	lw	a5,-40(s0)
200145b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
200145b8:	0001                	nop
200145ba:	50b2                	lw	ra,44(sp)
200145bc:	5422                	lw	s0,40(sp)
200145be:	6145                	addi	sp,sp,48
200145c0:	8082                	ret

200145c2 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
200145c2:	7179                	addi	sp,sp,-48
200145c4:	d606                	sw	ra,44(sp)
200145c6:	d422                	sw	s0,40(sp)
200145c8:	1800                	addi	s0,sp,48
200145ca:	fca42e23          	sw	a0,-36(s0)
200145ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
200145d2:	fdc42503          	lw	a0,-36(s0)
200145d6:	35c1                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
200145d8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200145dc:	fec42703          	lw	a4,-20(s0)
200145e0:	002007b7          	lui	a5,0x200
200145e4:	97ba                	add	a5,a5,a4
200145e6:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
200145e8:	fd842783          	lw	a5,-40(s0)
200145ec:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
200145ee:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
200145f0:	853e                	mv	a0,a5
200145f2:	50b2                	lw	ra,44(sp)
200145f4:	5422                	lw	s0,40(sp)
200145f6:	6145                	addi	sp,sp,48
200145f8:	8082                	ret

200145fa <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
200145fa:	7179                	addi	sp,sp,-48
200145fc:	d606                	sw	ra,44(sp)
200145fe:	d422                	sw	s0,40(sp)
20014600:	1800                	addi	s0,sp,48
20014602:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20014606:	fdc42503          	lw	a0,-36(s0)
2001460a:	3571                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
2001460c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20014610:	fec42703          	lw	a4,-20(s0)
20014614:	002007b7          	lui	a5,0x200
20014618:	97ba                	add	a5,a5,a4
2001461a:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2001461c:	853e                	mv	a0,a5
2001461e:	50b2                	lw	ra,44(sp)
20014620:	5422                	lw	s0,40(sp)
20014622:	6145                	addi	sp,sp,48
20014624:	8082                	ret

20014626 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20014626:	7179                	addi	sp,sp,-48
20014628:	d606                	sw	ra,44(sp)
2001462a:	d422                	sw	s0,40(sp)
2001462c:	1800                	addi	s0,sp,48
2001462e:	fca42e23          	sw	a0,-36(s0)
20014632:	fcb42c23          	sw	a1,-40(s0)
20014636:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
2001463a:	fdc42503          	lw	a0,-36(s0)
2001463e:	3da1                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
20014640:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20014644:	fdc42503          	lw	a0,-36(s0)
20014648:	354d                	jal	200144ea <__metal_driver_sifive_plic0_max_priority>
2001464a:	87aa                	mv	a5,a0
2001464c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20014650:	fe842783          	lw	a5,-24(s0)
20014654:	c785                	beqz	a5,2001467c <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20014656:	fd442703          	lw	a4,-44(s0)
2001465a:	fe842783          	lw	a5,-24(s0)
2001465e:	00f77f63          	bgeu	a4,a5,2001467c <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20014662:	fd842783          	lw	a5,-40(s0)
20014666:	078a                	slli	a5,a5,0x2
20014668:	873e                	mv	a4,a5
2001466a:	fec42783          	lw	a5,-20(s0)
2001466e:	97ba                	add	a5,a5,a4
20014670:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20014672:	fd442783          	lw	a5,-44(s0)
20014676:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20014678:	4781                	li	a5,0
2001467a:	a011                	j	2001467e <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
2001467c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
2001467e:	853e                	mv	a0,a5
20014680:	50b2                	lw	ra,44(sp)
20014682:	5422                	lw	s0,40(sp)
20014684:	6145                	addi	sp,sp,48
20014686:	8082                	ret

20014688 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20014688:	7179                	addi	sp,sp,-48
2001468a:	d606                	sw	ra,44(sp)
2001468c:	d422                	sw	s0,40(sp)
2001468e:	1800                	addi	s0,sp,48
20014690:	fca42e23          	sw	a0,-36(s0)
20014694:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20014698:	fdc42503          	lw	a0,-36(s0)
2001469c:	3bed                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
2001469e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200146a2:	fd842783          	lw	a5,-40(s0)
200146a6:	078a                	slli	a5,a5,0x2
200146a8:	873e                	mv	a4,a5
200146aa:	fec42783          	lw	a5,-20(s0)
200146ae:	97ba                	add	a5,a5,a4
200146b0:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
200146b2:	853e                	mv	a0,a5
200146b4:	50b2                	lw	ra,44(sp)
200146b6:	5422                	lw	s0,40(sp)
200146b8:	6145                	addi	sp,sp,48
200146ba:	8082                	ret

200146bc <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
200146bc:	7179                	addi	sp,sp,-48
200146be:	d606                	sw	ra,44(sp)
200146c0:	d422                	sw	s0,40(sp)
200146c2:	1800                	addi	s0,sp,48
200146c4:	fca42e23          	sw	a0,-36(s0)
200146c8:	fcb42c23          	sw	a1,-40(s0)
200146cc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
200146d0:	fdc42503          	lw	a0,-36(s0)
200146d4:	33c9                	jal	20014496 <__metal_driver_sifive_plic0_control_base>
200146d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200146da:	fd842783          	lw	a5,-40(s0)
200146de:	8795                	srai	a5,a5,0x5
200146e0:	078a                	slli	a5,a5,0x2
200146e2:	873e                	mv	a4,a5
200146e4:	fec42783          	lw	a5,-20(s0)
200146e8:	973e                	add	a4,a4,a5
200146ea:	6789                	lui	a5,0x2
200146ec:	97ba                	add	a5,a5,a4
200146ee:	439c                	lw	a5,0(a5)
200146f0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
200146f4:	fd442783          	lw	a5,-44(s0)
200146f8:	cf81                	beqz	a5,20014710 <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
200146fa:	fd842783          	lw	a5,-40(s0)
200146fe:	8bfd                	andi	a5,a5,31
20014700:	4705                	li	a4,1
20014702:	00f717b3          	sll	a5,a4,a5
20014706:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20014708:	fe842783          	lw	a5,-24(s0)
2001470c:	8fd9                	or	a5,a5,a4
2001470e:	a829                	j	20014728 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20014710:	fd842783          	lw	a5,-40(s0)
20014714:	8bfd                	andi	a5,a5,31
20014716:	4705                	li	a4,1
20014718:	00f717b3          	sll	a5,a4,a5
2001471c:	fff7c793          	not	a5,a5
20014720:	873e                	mv	a4,a5
20014722:	fe842783          	lw	a5,-24(s0)
20014726:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20014728:	fd842703          	lw	a4,-40(s0)
2001472c:	8715                	srai	a4,a4,0x5
2001472e:	070a                	slli	a4,a4,0x2
20014730:	86ba                	mv	a3,a4
20014732:	fec42703          	lw	a4,-20(s0)
20014736:	96ba                	add	a3,a3,a4
20014738:	6709                	lui	a4,0x2
2001473a:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
2001473c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
2001473e:	0001                	nop
20014740:	50b2                	lw	ra,44(sp)
20014742:	5422                	lw	s0,40(sp)
20014744:	6145                	addi	sp,sp,48
20014746:	8082                	ret

20014748 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20014748:	1101                	addi	sp,sp,-32
2001474a:	ce06                	sw	ra,28(sp)
2001474c:	cc22                	sw	s0,24(sp)
2001474e:	1000                	addi	s0,sp,32
20014750:	fea42623          	sw	a0,-20(s0)
20014754:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20014758:	12c00513          	li	a0,300
2001475c:	5eb010ef          	jal	ra,20016546 <metal_shutdown>

20014760 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20014760:	7179                	addi	sp,sp,-48
20014762:	d606                	sw	ra,44(sp)
20014764:	d422                	sw	s0,40(sp)
20014766:	1800                	addi	s0,sp,48
20014768:	fca42e23          	sw	a0,-36(s0)
2001476c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20014770:	fd842783          	lw	a5,-40(s0)
20014774:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20014778:	fec42503          	lw	a0,-20(s0)
2001477c:	33c5                	jal	2001455c <__metal_plic0_claim_interrupt>
2001477e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20014782:	fec42503          	lw	a0,-20(s0)
20014786:	d3bff0ef          	jal	ra,200144c0 <__metal_driver_sifive_plic0_num_interrupts>
2001478a:	87aa                	mv	a5,a0
2001478c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20014790:	fe842703          	lw	a4,-24(s0)
20014794:	fe442783          	lw	a5,-28(s0)
20014798:	04f77263          	bgeu	a4,a5,200147dc <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2001479c:	fec42703          	lw	a4,-20(s0)
200147a0:	fe842783          	lw	a5,-24(s0)
200147a4:	078a                	slli	a5,a5,0x2
200147a6:	97ba                	add	a5,a5,a4
200147a8:	479c                	lw	a5,8(a5)
200147aa:	cb8d                	beqz	a5,200147dc <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
200147ac:	fec42703          	lw	a4,-20(s0)
200147b0:	fe842783          	lw	a5,-24(s0)
200147b4:	078a                	slli	a5,a5,0x2
200147b6:	97ba                	add	a5,a5,a4
200147b8:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
200147bc:	fe842603          	lw	a2,-24(s0)
200147c0:	fec42683          	lw	a3,-20(s0)
200147c4:	fe842703          	lw	a4,-24(s0)
200147c8:	87ba                	mv	a5,a4
200147ca:	0786                	slli	a5,a5,0x1
200147cc:	97ba                	add	a5,a5,a4
200147ce:	078e                	slli	a5,a5,0x3
200147d0:	97b6                	add	a5,a5,a3
200147d2:	0f07a783          	lw	a5,240(a5)
200147d6:	85be                	mv	a1,a5
200147d8:	8532                	mv	a0,a2
200147da:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
200147dc:	fe842583          	lw	a1,-24(s0)
200147e0:	fec42503          	lw	a0,-20(s0)
200147e4:	335d                	jal	2001458a <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
200147e6:	0001                	nop
200147e8:	50b2                	lw	ra,44(sp)
200147ea:	5422                	lw	s0,40(sp)
200147ec:	6145                	addi	sp,sp,48
200147ee:	8082                	ret

200147f0 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
200147f0:	7139                	addi	sp,sp,-64
200147f2:	de06                	sw	ra,60(sp)
200147f4:	dc22                	sw	s0,56(sp)
200147f6:	0080                	addi	s0,sp,64
200147f8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
200147fc:	fcc42783          	lw	a5,-52(s0)
20014800:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20014804:	fe442783          	lw	a5,-28(s0)
20014808:	43dc                	lw	a5,4(a5)
2001480a:	12079063          	bnez	a5,2001492a <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2001480e:	fe042623          	sw	zero,-20(s0)
20014812:	a221                	j	2001491a <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20014814:	fcc42503          	lw	a0,-52(s0)
20014818:	ca9ff0ef          	jal	ra,200144c0 <__metal_driver_sifive_plic0_num_interrupts>
2001481c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20014820:	fec42583          	lw	a1,-20(s0)
20014824:	fcc42503          	lw	a0,-52(s0)
20014828:	cebff0ef          	jal	ra,20014512 <__metal_driver_sifive_plic0_interrupt_parents>
2001482c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20014830:	fec42583          	lw	a1,-20(s0)
20014834:	fcc42503          	lw	a0,-52(s0)
20014838:	d03ff0ef          	jal	ra,2001453a <__metal_driver_sifive_plic0_interrupt_lines>
2001483c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20014840:	fdc42783          	lw	a5,-36(s0)
20014844:	439c                	lw	a5,0(a5)
20014846:	439c                	lw	a5,0(a5)
20014848:	fdc42503          	lw	a0,-36(s0)
2001484c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
2001484e:	fe042423          	sw	zero,-24(s0)
20014852:	a085                	j	200148b2 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20014854:	4601                	li	a2,0
20014856:	fe842583          	lw	a1,-24(s0)
2001485a:	fe442503          	lw	a0,-28(s0)
2001485e:	3db9                	jal	200146bc <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20014860:	4601                	li	a2,0
20014862:	fe842583          	lw	a1,-24(s0)
20014866:	fcc42503          	lw	a0,-52(s0)
2001486a:	3b75                	jal	20014626 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2001486c:	fe442703          	lw	a4,-28(s0)
20014870:	fe842783          	lw	a5,-24(s0)
20014874:	078a                	slli	a5,a5,0x2
20014876:	97ba                	add	a5,a5,a4
20014878:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2001487c:	fe442683          	lw	a3,-28(s0)
20014880:	fe842703          	lw	a4,-24(s0)
20014884:	87ba                	mv	a5,a4
20014886:	0786                	slli	a5,a5,0x1
20014888:	97ba                	add	a5,a5,a4
2001488a:	078e                	slli	a5,a5,0x3
2001488c:	97b6                	add	a5,a5,a3
2001488e:	0e07a623          	sw	zero,236(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20014892:	fe442683          	lw	a3,-28(s0)
20014896:	fe842703          	lw	a4,-24(s0)
2001489a:	87ba                	mv	a5,a4
2001489c:	0786                	slli	a5,a5,0x1
2001489e:	97ba                	add	a5,a5,a4
200148a0:	078e                	slli	a5,a5,0x3
200148a2:	97b6                	add	a5,a5,a3
200148a4:	0e07a823          	sw	zero,240(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
200148a8:	fe842783          	lw	a5,-24(s0)
200148ac:	0785                	addi	a5,a5,1
200148ae:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
200148b2:	fe842703          	lw	a4,-24(s0)
200148b6:	fe042783          	lw	a5,-32(s0)
200148ba:	f8f74de3          	blt	a4,a5,20014854 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
200148be:	4581                	li	a1,0
200148c0:	fcc42503          	lw	a0,-52(s0)
200148c4:	cffff0ef          	jal	ra,200145c2 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
200148c8:	fdc42783          	lw	a5,-36(s0)
200148cc:	439c                	lw	a5,0(a5)
200148ce:	4fdc                	lw	a5,28(a5)
200148d0:	fe442683          	lw	a3,-28(s0)
200148d4:	4601                	li	a2,0
200148d6:	fd842583          	lw	a1,-40(s0)
200148da:	fdc42503          	lw	a0,-36(s0)
200148de:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
200148e0:	fdc42783          	lw	a5,-36(s0)
200148e4:	439c                	lw	a5,0(a5)
200148e6:	4fd8                	lw	a4,28(a5)
200148e8:	fe442683          	lw	a3,-28(s0)
200148ec:	200147b7          	lui	a5,0x20014
200148f0:	76078613          	addi	a2,a5,1888 # 20014760 <__metal_plic0_handler>
200148f4:	fd842583          	lw	a1,-40(s0)
200148f8:	fdc42503          	lw	a0,-36(s0)
200148fc:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
200148fe:	fdc42783          	lw	a5,-36(s0)
20014902:	439c                	lw	a5,0(a5)
20014904:	53dc                	lw	a5,36(a5)
20014906:	fd842583          	lw	a1,-40(s0)
2001490a:	fdc42503          	lw	a0,-36(s0)
2001490e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20014910:	fec42783          	lw	a5,-20(s0)
20014914:	0785                	addi	a5,a5,1
20014916:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
2001491a:	fec42783          	lw	a5,-20(s0)
2001491e:	eef05be3          	blez	a5,20014814 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20014922:	fe442783          	lw	a5,-28(s0)
20014926:	4705                	li	a4,1
20014928:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
2001492a:	0001                	nop
2001492c:	50f2                	lw	ra,60(sp)
2001492e:	5462                	lw	s0,56(sp)
20014930:	6121                	addi	sp,sp,64
20014932:	8082                	ret

20014934 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20014934:	7179                	addi	sp,sp,-48
20014936:	d606                	sw	ra,44(sp)
20014938:	d422                	sw	s0,40(sp)
2001493a:	1800                	addi	s0,sp,48
2001493c:	fca42e23          	sw	a0,-36(s0)
20014940:	fcb42c23          	sw	a1,-40(s0)
20014944:	fcc42a23          	sw	a2,-44(s0)
20014948:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2001494c:	fdc42783          	lw	a5,-36(s0)
20014950:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20014954:	fdc42503          	lw	a0,-36(s0)
20014958:	b69ff0ef          	jal	ra,200144c0 <__metal_driver_sifive_plic0_num_interrupts>
2001495c:	872a                	mv	a4,a0
2001495e:	fd842783          	lw	a5,-40(s0)
20014962:	00e7c463          	blt	a5,a4,2001496a <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20014966:	57fd                	li	a5,-1
20014968:	a051                	j	200149ec <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
2001496a:	fd442783          	lw	a5,-44(s0)
2001496e:	cf9d                	beqz	a5,200149ac <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20014970:	4609                	li	a2,2
20014972:	fd842583          	lw	a1,-40(s0)
20014976:	fdc42503          	lw	a0,-36(s0)
2001497a:	cadff0ef          	jal	ra,20014626 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2001497e:	fec42703          	lw	a4,-20(s0)
20014982:	fd842783          	lw	a5,-40(s0)
20014986:	078a                	slli	a5,a5,0x2
20014988:	97ba                	add	a5,a5,a4
2001498a:	fd442703          	lw	a4,-44(s0)
2001498e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20014990:	fec42683          	lw	a3,-20(s0)
20014994:	fd842703          	lw	a4,-40(s0)
20014998:	87ba                	mv	a5,a4
2001499a:	0786                	slli	a5,a5,0x1
2001499c:	97ba                	add	a5,a5,a4
2001499e:	078e                	slli	a5,a5,0x3
200149a0:	97b6                	add	a5,a5,a3
200149a2:	fd042703          	lw	a4,-48(s0)
200149a6:	0ee7a823          	sw	a4,240(a5)
200149aa:	a081                	j	200149ea <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
200149ac:	4605                	li	a2,1
200149ae:	fd842583          	lw	a1,-40(s0)
200149b2:	fdc42503          	lw	a0,-36(s0)
200149b6:	c71ff0ef          	jal	ra,20014626 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
200149ba:	fec42703          	lw	a4,-20(s0)
200149be:	fd842783          	lw	a5,-40(s0)
200149c2:	078a                	slli	a5,a5,0x2
200149c4:	97ba                	add	a5,a5,a4
200149c6:	20014737          	lui	a4,0x20014
200149ca:	74870713          	addi	a4,a4,1864 # 20014748 <__metal_plic0_default_handler>
200149ce:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
200149d0:	fec42683          	lw	a3,-20(s0)
200149d4:	fd842703          	lw	a4,-40(s0)
200149d8:	87ba                	mv	a5,a4
200149da:	0786                	slli	a5,a5,0x1
200149dc:	97ba                	add	a5,a5,a4
200149de:	078e                	slli	a5,a5,0x3
200149e0:	97b6                	add	a5,a5,a3
200149e2:	fd042703          	lw	a4,-48(s0)
200149e6:	0ee7a623          	sw	a4,236(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
200149ea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
200149ec:	853e                	mv	a0,a5
200149ee:	50b2                	lw	ra,44(sp)
200149f0:	5422                	lw	s0,40(sp)
200149f2:	6145                	addi	sp,sp,48
200149f4:	8082                	ret

200149f6 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
200149f6:	7179                	addi	sp,sp,-48
200149f8:	d606                	sw	ra,44(sp)
200149fa:	d422                	sw	s0,40(sp)
200149fc:	1800                	addi	s0,sp,48
200149fe:	fca42e23          	sw	a0,-36(s0)
20014a02:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20014a06:	fdc42783          	lw	a5,-36(s0)
20014a0a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20014a0e:	fdc42503          	lw	a0,-36(s0)
20014a12:	aafff0ef          	jal	ra,200144c0 <__metal_driver_sifive_plic0_num_interrupts>
20014a16:	872a                	mv	a4,a0
20014a18:	fd842783          	lw	a5,-40(s0)
20014a1c:	00e7c463          	blt	a5,a4,20014a24 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20014a20:	57fd                	li	a5,-1
20014a22:	a809                	j	20014a34 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20014a24:	4605                	li	a2,1
20014a26:	fd842583          	lw	a1,-40(s0)
20014a2a:	fec42503          	lw	a0,-20(s0)
20014a2e:	c8fff0ef          	jal	ra,200146bc <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20014a32:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20014a34:	853e                	mv	a0,a5
20014a36:	50b2                	lw	ra,44(sp)
20014a38:	5422                	lw	s0,40(sp)
20014a3a:	6145                	addi	sp,sp,48
20014a3c:	8082                	ret

20014a3e <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20014a3e:	7179                	addi	sp,sp,-48
20014a40:	d606                	sw	ra,44(sp)
20014a42:	d422                	sw	s0,40(sp)
20014a44:	1800                	addi	s0,sp,48
20014a46:	fca42e23          	sw	a0,-36(s0)
20014a4a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20014a4e:	fdc42783          	lw	a5,-36(s0)
20014a52:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20014a56:	fdc42503          	lw	a0,-36(s0)
20014a5a:	a67ff0ef          	jal	ra,200144c0 <__metal_driver_sifive_plic0_num_interrupts>
20014a5e:	872a                	mv	a4,a0
20014a60:	fd842783          	lw	a5,-40(s0)
20014a64:	00e7c463          	blt	a5,a4,20014a6c <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20014a68:	57fd                	li	a5,-1
20014a6a:	a809                	j	20014a7c <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20014a6c:	4601                	li	a2,0
20014a6e:	fd842583          	lw	a1,-40(s0)
20014a72:	fec42503          	lw	a0,-20(s0)
20014a76:	c47ff0ef          	jal	ra,200146bc <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20014a7a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20014a7c:	853e                	mv	a0,a5
20014a7e:	50b2                	lw	ra,44(sp)
20014a80:	5422                	lw	s0,40(sp)
20014a82:	6145                	addi	sp,sp,48
20014a84:	8082                	ret

20014a86 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:911



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20014a86:	1101                	addi	sp,sp,-32
20014a88:	ce22                	sw	s0,28(sp)
20014a8a:	1000                	addi	s0,sp,32
20014a8c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:912
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
20014a90:	800017b7          	lui	a5,0x80001
20014a94:	83c78793          	addi	a5,a5,-1988 # 8000083c <metal_segment_heap_target_end+0xffffe8d8>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:913
}
20014a98:	853e                	mv	a0,a5
20014a9a:	4472                	lw	s0,28(sp)
20014a9c:	6105                	addi	sp,sp,32
20014a9e:	8082                	ret

20014aa0 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:916

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
20014aa0:	1101                	addi	sp,sp,-32
20014aa2:	ce22                	sw	s0,28(sp)
20014aa4:	1000                	addi	s0,sp,32
20014aa6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:917
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20014aaa:	82018793          	addi	a5,gp,-2016 # 80001278 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:918
}
20014aae:	853e                	mv	a0,a5
20014ab0:	4472                	lw	s0,28(sp)
20014ab2:	6105                	addi	sp,sp,32
20014ab4:	8082                	ret

20014ab6 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:926
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
20014ab6:	1101                	addi	sp,sp,-32
20014ab8:	ce22                	sw	s0,28(sp)
20014aba:	1000                	addi	s0,sp,32
20014abc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:927
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
20014ac0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:928
}
20014ac2:	853e                	mv	a0,a5
20014ac4:	4472                	lw	s0,28(sp)
20014ac6:	6105                	addi	sp,sp,32
20014ac8:	8082                	ret

20014aca <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1043
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
20014aca:	1141                	addi	sp,sp,-16
20014acc:	c622                	sw	s0,12(sp)
20014ace:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20014ad0:	83418793          	addi	a5,gp,-1996 # 8000128c <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1045
}
20014ad4:	853e                	mv	a0,a5
20014ad6:	4432                	lw	s0,12(sp)
20014ad8:	0141                	addi	sp,sp,16
20014ada:	8082                	ret

20014adc <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
20014adc:	7139                	addi	sp,sp,-64
20014ade:	de06                	sw	ra,60(sp)
20014ae0:	dc22                	sw	s0,56(sp)
20014ae2:	0080                	addi	s0,sp,64
20014ae4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
20014ae8:	fcc42503          	lw	a0,-52(s0)
20014aec:	3f69                	jal	20014a86 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
20014aee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
20014af2:	fcc42503          	lw	a0,-52(s0)
20014af6:	37c1                	jal	20014ab6 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
20014af8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
20014afc:	fcc42503          	lw	a0,-52(s0)
20014b00:	3745                	jal	20014aa0 <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
20014b02:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20014b06:	37d1                	jal	20014aca <__metal_driver_sifive_fe310_g000_prci_vtable>
20014b08:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
20014b0c:	fe042783          	lw	a5,-32(s0)
20014b10:	439c                	lw	a5,0(a5)
20014b12:	fe842583          	lw	a1,-24(s0)
20014b16:	fe442503          	lw	a0,-28(s0)
20014b1a:	9782                	jalr	a5
20014b1c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
20014b20:	fdc42703          	lw	a4,-36(s0)
20014b24:	400007b7          	lui	a5,0x40000
20014b28:	8ff9                	and	a5,a5,a4
20014b2a:	e399                	bnez	a5,20014b30 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
20014b2c:	57fd                	li	a5,-1
20014b2e:	a025                	j	20014b56 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
20014b30:	fdc42783          	lw	a5,-36(s0)
20014b34:	0007c463          	bltz	a5,20014b3c <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20014b38:	57fd                	li	a5,-1
20014b3a:	a831                	j	20014b56 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20014b3c:	fec42503          	lw	a0,-20(s0)
20014b40:	0c7010ef          	jal	ra,20016406 <metal_clock_get_rate_hz>
20014b44:	87aa                	mv	a5,a0
20014b46:	873e                	mv	a4,a5
20014b48:	fdc42783          	lw	a5,-36(s0)
20014b4c:	03f7f793          	andi	a5,a5,63
20014b50:	0785                	addi	a5,a5,1
20014b52:	02f757b3          	divu	a5,a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
20014b56:	853e                	mv	a0,a5
20014b58:	50f2                	lw	ra,60(sp)
20014b5a:	5462                	lw	s0,56(sp)
20014b5c:	6121                	addi	sp,sp,64
20014b5e:	8082                	ret

20014b60 <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20014b60:	1101                	addi	sp,sp,-32
20014b62:	ce06                	sw	ra,28(sp)
20014b64:	cc22                	sw	s0,24(sp)
20014b66:	1000                	addi	s0,sp,32
20014b68:	fea42623          	sw	a0,-20(s0)
20014b6c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
20014b70:	fec42503          	lw	a0,-20(s0)
20014b74:	37a5                	jal	20014adc <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20014b76:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
20014b78:	853e                	mv	a0,a5
20014b7a:	40f2                	lw	ra,28(sp)
20014b7c:	4462                	lw	s0,24(sp)
20014b7e:	6105                	addi	sp,sp,32
20014b80:	8082                	ret

20014b82 <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:934
{
20014b82:	1101                	addi	sp,sp,-32
20014b84:	ce22                	sw	s0,28(sp)
20014b86:	1000                	addi	s0,sp,32
20014b88:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:935
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20014b8c:	800017b7          	lui	a5,0x80001
20014b90:	83078793          	addi	a5,a5,-2000 # 80000830 <metal_segment_heap_target_end+0xffffe8cc>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:936
}
20014b94:	853e                	mv	a0,a5
20014b96:	4472                	lw	s0,28(sp)
20014b98:	6105                	addi	sp,sp,32
20014b9a:	8082                	ret

20014b9c <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:939
{
20014b9c:	1101                	addi	sp,sp,-32
20014b9e:	ce22                	sw	s0,28(sp)
20014ba0:	1000                	addi	s0,sp,32
20014ba2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:940
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20014ba6:	82018793          	addi	a5,gp,-2016 # 80001278 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:941
}
20014baa:	853e                	mv	a0,a5
20014bac:	4472                	lw	s0,28(sp)
20014bae:	6105                	addi	sp,sp,32
20014bb0:	8082                	ret

20014bb2 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:944
{
20014bb2:	1101                	addi	sp,sp,-32
20014bb4:	ce22                	sw	s0,28(sp)
20014bb6:	1000                	addi	s0,sp,32
20014bb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:945
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
20014bbc:	4791                	li	a5,4
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:946
}
20014bbe:	853e                	mv	a0,a5
20014bc0:	4472                	lw	s0,28(sp)
20014bc2:	6105                	addi	sp,sp,32
20014bc4:	8082                	ret

20014bc6 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1043
{
20014bc6:	1141                	addi	sp,sp,-16
20014bc8:	c622                	sw	s0,12(sp)
20014bca:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20014bcc:	83418793          	addi	a5,gp,-1996 # 8000128c <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1045
}
20014bd0:	853e                	mv	a0,a5
20014bd2:	4432                	lw	s0,12(sp)
20014bd4:	0141                	addi	sp,sp,16
20014bd6:	8082                	ret

20014bd8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
20014bd8:	7139                	addi	sp,sp,-64
20014bda:	de06                	sw	ra,60(sp)
20014bdc:	dc22                	sw	s0,56(sp)
20014bde:	0080                	addi	s0,sp,64
20014be0:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
20014be4:	fcc42503          	lw	a0,-52(s0)
20014be8:	3f69                	jal	20014b82 <__metal_driver_sifive_fe310_g000_hfxosc_ref>
20014bea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
20014bee:	fcc42503          	lw	a0,-52(s0)
20014bf2:	37c1                	jal	20014bb2 <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
20014bf4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
20014bf8:	fcc42503          	lw	a0,-52(s0)
20014bfc:	3745                	jal	20014b9c <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
20014bfe:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20014c02:	37d1                	jal	20014bc6 <__metal_driver_sifive_fe310_g000_prci_vtable>
20014c04:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
20014c08:	fe042783          	lw	a5,-32(s0)
20014c0c:	439c                	lw	a5,0(a5)
20014c0e:	fe842583          	lw	a1,-24(s0)
20014c12:	fe442503          	lw	a0,-28(s0)
20014c16:	9782                	jalr	a5
20014c18:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
20014c1c:	fdc42703          	lw	a4,-36(s0)
20014c20:	400007b7          	lui	a5,0x40000
20014c24:	8ff9                	and	a5,a5,a4
20014c26:	e399                	bnez	a5,20014c2c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20014c28:	57fd                	li	a5,-1
20014c2a:	a821                	j	20014c42 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
20014c2c:	fdc42783          	lw	a5,-36(s0)
20014c30:	0007c463          	bltz	a5,20014c38 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
20014c34:	57fd                	li	a5,-1
20014c36:	a031                	j	20014c42 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
20014c38:	fec42503          	lw	a0,-20(s0)
20014c3c:	7ca010ef          	jal	ra,20016406 <metal_clock_get_rate_hz>
20014c40:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
20014c42:	853e                	mv	a0,a5
20014c44:	50f2                	lw	ra,60(sp)
20014c46:	5462                	lw	s0,56(sp)
20014c48:	6121                	addi	sp,sp,64
20014c4a:	8082                	ret

20014c4c <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20014c4c:	1101                	addi	sp,sp,-32
20014c4e:	ce06                	sw	ra,28(sp)
20014c50:	cc22                	sw	s0,24(sp)
20014c52:	1000                	addi	s0,sp,32
20014c54:	fea42623          	sw	a0,-20(s0)
20014c58:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20014c5c:	fec42503          	lw	a0,-20(s0)
20014c60:	3fa5                	jal	20014bd8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
20014c62:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
20014c64:	853e                	mv	a0,a5
20014c66:	40f2                	lw	ra,28(sp)
20014c68:	4462                	lw	s0,24(sp)
20014c6a:	6105                	addi	sp,sp,32
20014c6c:	8082                	ret

20014c6e <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:995
{
20014c6e:	1101                	addi	sp,sp,-32
20014c70:	ce22                	sw	s0,28(sp)
20014c72:	1000                	addi	s0,sp,32
20014c74:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:996
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20014c78:	800017b7          	lui	a5,0x80001
20014c7c:	23078793          	addi	a5,a5,560 # 80001230 <metal_segment_heap_target_end+0xfffff2cc>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:997
}
20014c80:	853e                	mv	a0,a5
20014c82:	4472                	lw	s0,28(sp)
20014c84:	6105                	addi	sp,sp,32
20014c86:	8082                	ret

20014c88 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1000
{
20014c88:	1101                	addi	sp,sp,-32
20014c8a:	ce22                	sw	s0,28(sp)
20014c8c:	1000                	addi	s0,sp,32
20014c8e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1001
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
20014c92:	800017b7          	lui	a5,0x80001
20014c96:	23c78793          	addi	a5,a5,572 # 8000123c <metal_segment_heap_target_end+0xfffff2d8>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1002
}
20014c9a:	853e                	mv	a0,a5
20014c9c:	4472                	lw	s0,28(sp)
20014c9e:	6105                	addi	sp,sp,32
20014ca0:	8082                	ret

20014ca2 <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1005
{
20014ca2:	1101                	addi	sp,sp,-32
20014ca4:	ce22                	sw	s0,28(sp)
20014ca6:	1000                	addi	s0,sp,32
20014ca8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1006
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20014cac:	82018793          	addi	a5,gp,-2016 # 80001278 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1007
}
20014cb0:	853e                	mv	a0,a5
20014cb2:	4472                	lw	s0,28(sp)
20014cb4:	6105                	addi	sp,sp,32
20014cb6:	8082                	ret

20014cb8 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1010
{
20014cb8:	1101                	addi	sp,sp,-32
20014cba:	ce22                	sw	s0,28(sp)
20014cbc:	1000                	addi	s0,sp,32
20014cbe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1011
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
20014cc2:	47b1                	li	a5,12
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1012
}
20014cc4:	853e                	mv	a0,a5
20014cc6:	4472                	lw	s0,28(sp)
20014cc8:	6105                	addi	sp,sp,32
20014cca:	8082                	ret

20014ccc <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1015
{
20014ccc:	1141                	addi	sp,sp,-16
20014cce:	c622                	sw	s0,12(sp)
20014cd0:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1016
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20014cd2:	82018793          	addi	a5,gp,-2016 # 80001278 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1017
}
20014cd6:	853e                	mv	a0,a5
20014cd8:	4432                	lw	s0,12(sp)
20014cda:	0141                	addi	sp,sp,16
20014cdc:	8082                	ret

20014cde <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1020
{
20014cde:	1141                	addi	sp,sp,-16
20014ce0:	c622                	sw	s0,12(sp)
20014ce2:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1021
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
20014ce4:	47a1                	li	a5,8
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1022
}
20014ce6:	853e                	mv	a0,a5
20014ce8:	4432                	lw	s0,12(sp)
20014cea:	0141                	addi	sp,sp,16
20014cec:	8082                	ret

20014cee <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1025
{
20014cee:	1141                	addi	sp,sp,-16
20014cf0:	c622                	sw	s0,12(sp)
20014cf2:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1026
		return 16000000;
20014cf4:	00f427b7          	lui	a5,0xf42
20014cf8:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1027
}
20014cfc:	853e                	mv	a0,a5
20014cfe:	4432                	lw	s0,12(sp)
20014d00:	0141                	addi	sp,sp,16
20014d02:	8082                	ret

20014d04 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1033
{
20014d04:	1141                	addi	sp,sp,-16
20014d06:	c622                	sw	s0,12(sp)
20014d08:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20014d0a:	100087b7          	lui	a5,0x10008
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1035
}
20014d0e:	853e                	mv	a0,a5
20014d10:	4432                	lw	s0,12(sp)
20014d12:	0141                	addi	sp,sp,16
20014d14:	8082                	ret

20014d16 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1043
{
20014d16:	1141                	addi	sp,sp,-16
20014d18:	c622                	sw	s0,12(sp)
20014d1a:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20014d1c:	83418793          	addi	a5,gp,-1996 # 8000128c <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1045
}
20014d20:	853e                	mv	a0,a5
20014d22:	4432                	lw	s0,12(sp)
20014d24:	0141                	addi	sp,sp,16
20014d26:	8082                	ret

20014d28 <get_pll_config_freq>:
get_pll_config_freq():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20014d28:	1101                	addi	sp,sp,-32
20014d2a:	ce22                	sw	s0,28(sp)
20014d2c:	1000                	addi	s0,sp,32
20014d2e:	fea42623          	sw	a0,-20(s0)
20014d32:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20014d36:	fe842783          	lw	a5,-24(s0)
20014d3a:	479c                	lw	a5,8(a5)
20014d3c:	fec42703          	lw	a4,-20(s0)
20014d40:	00f76963          	bltu	a4,a5,20014d52 <get_pll_config_freq+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
20014d44:	fe842783          	lw	a5,-24(s0)
20014d48:	47dc                	lw	a5,12(a5)
20014d4a:	fec42703          	lw	a4,-20(s0)
20014d4e:	00e7f463          	bgeu	a5,a4,20014d56 <get_pll_config_freq+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
20014d52:	57fd                	li	a5,-1
20014d54:	a829                	j	20014d6e <get_pll_config_freq+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20014d56:	fe842783          	lw	a5,-24(s0)
20014d5a:	4398                	lw	a4,0(a5)
20014d5c:	fec42783          	lw	a5,-20(s0)
20014d60:	02f70733          	mul	a4,a4,a5
20014d64:	fe842783          	lw	a5,-24(s0)
20014d68:	43dc                	lw	a5,4(a5)
20014d6a:	02f757b3          	divu	a5,a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20014d6e:	853e                	mv	a0,a5
20014d70:	4472                	lw	s0,28(sp)
20014d72:	6105                	addi	sp,sp,32
20014d74:	8082                	ret

20014d76 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20014d76:	1101                	addi	sp,sp,-32
20014d78:	ce06                	sw	ra,28(sp)
20014d7a:	cc22                	sw	s0,24(sp)
20014d7c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20014d7e:	3f85                	jal	20014cee <__metal_driver_sifive_fe310_g000_pll_init_rate>
20014d80:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
20014d84:	fec42783          	lw	a5,-20(s0)
20014d88:	c791                	beqz	a5,20014d94 <metal_sifive_fe310_g000_pll_init+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20014d8a:	800017b7          	lui	a5,0x80001
20014d8e:	24878513          	addi	a0,a5,584 # 80001248 <metal_segment_heap_target_end+0xfffff2e4>
20014d92:	2031                	jal	20014d9e <__metal_driver_sifive_fe310_g000_pll_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
20014d94:	0001                	nop
20014d96:	40f2                	lw	ra,28(sp)
20014d98:	4462                	lw	s0,24(sp)
20014d9a:	6105                	addi	sp,sp,32
20014d9c:	8082                	ret

20014d9e <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20014d9e:	7139                	addi	sp,sp,-64
20014da0:	de06                	sw	ra,60(sp)
20014da2:	dc22                	sw	s0,56(sp)
20014da4:	0080                	addi	s0,sp,64
20014da6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20014daa:	fcc42783          	lw	a5,-52(s0)
20014dae:	853e                	mv	a0,a5
20014db0:	3de1                	jal	20014c88 <__metal_driver_sifive_fe310_g000_pll_pllref>
20014db2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20014db6:	3f25                	jal	20014cee <__metal_driver_sifive_fe310_g000_pll_init_rate>
20014db8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
20014dbc:	370d                	jal	20014cde <__metal_driver_sifive_fe310_g000_pll_config_offset>
20014dbe:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20014dc2:	3789                	jal	20014d04 <__metal_driver_sifive_fe310_g000_prci_base>
20014dc4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20014dc8:	fe042703          	lw	a4,-32(s0)
20014dcc:	fe442783          	lw	a5,-28(s0)
20014dd0:	97ba                	add	a5,a5,a4
20014dd2:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20014dd6:	fcc42783          	lw	a5,-52(s0)
20014dda:	43dc                	lw	a5,4(a5)
20014ddc:	853e                	mv	a0,a5
20014dde:	594010ef          	jal	ra,20016372 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20014de2:	fdc42783          	lw	a5,-36(s0)
20014de6:	4398                	lw	a4,0(a5)
20014de8:	67c1                	lui	a5,0x10
20014dea:	8ff9                	and	a5,a5,a4
20014dec:	eb91                	bnez	a5,20014e00 <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20014dee:	fdc42783          	lw	a5,-36(s0)
20014df2:	4398                	lw	a4,0(a5)
20014df4:	77c1                	lui	a5,0xffff0
20014df6:	17fd                	addi	a5,a5,-1
20014df8:	8f7d                	and	a4,a4,a5
20014dfa:	fdc42783          	lw	a5,-36(s0)
20014dfe:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
20014e00:	fec42783          	lw	a5,-20(s0)
20014e04:	cb91                	beqz	a5,20014e18 <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20014e06:	fdc42783          	lw	a5,-36(s0)
20014e0a:	4398                	lw	a4,0(a5)
20014e0c:	000207b7          	lui	a5,0x20
20014e10:	8f5d                	or	a4,a4,a5
20014e12:	fdc42783          	lw	a5,-36(s0)
20014e16:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20014e18:	fcc42783          	lw	a5,-52(s0)
20014e1c:	439c                	lw	a5,0(a5)
20014e1e:	43d8                	lw	a4,4(a5)
20014e20:	fcc42783          	lw	a5,-52(s0)
20014e24:	fe842583          	lw	a1,-24(s0)
20014e28:	853e                	mv	a0,a5
20014e2a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20014e2c:	fcc42783          	lw	a5,-52(s0)
20014e30:	479c                	lw	a5,8(a5)
20014e32:	853e                	mv	a0,a5
20014e34:	53e010ef          	jal	ra,20016372 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20014e38:	0001                	nop
20014e3a:	50f2                	lw	ra,60(sp)
20014e3c:	5462                	lw	s0,56(sp)
20014e3e:	6121                	addi	sp,sp,64
20014e40:	8082                	ret

20014e42 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
20014e42:	711d                	addi	sp,sp,-96
20014e44:	ce86                	sw	ra,92(sp)
20014e46:	cca2                	sw	s0,88(sp)
20014e48:	1080                	addi	s0,sp,96
20014e4a:	faa42623          	sw	a0,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20014e4e:	fac42503          	lw	a0,-84(s0)
20014e52:	e37ff0ef          	jal	ra,20014c88 <__metal_driver_sifive_fe310_g000_pll_pllref>
20014e56:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20014e5a:	fac42503          	lw	a0,-84(s0)
20014e5e:	e11ff0ef          	jal	ra,20014c6e <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20014e62:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20014e66:	fac42503          	lw	a0,-84(s0)
20014e6a:	3d95                	jal	20014cde <__metal_driver_sifive_fe310_g000_pll_config_offset>
20014e6c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20014e70:	fac42503          	lw	a0,-84(s0)
20014e74:	3da1                	jal	20014ccc <__metal_driver_sifive_fe310_g000_pll_config_base>
20014e76:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20014e7a:	fac42503          	lw	a0,-84(s0)
20014e7e:	e3bff0ef          	jal	ra,20014cb8 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20014e82:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20014e86:	fac42503          	lw	a0,-84(s0)
20014e8a:	e19ff0ef          	jal	ra,20014ca2 <__metal_driver_sifive_fe310_g000_pll_divider_base>
20014e8e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20014e92:	3551                	jal	20014d16 <__metal_driver_sifive_fe310_g000_prci_vtable>
20014e94:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
20014e98:	fd442783          	lw	a5,-44(s0)
20014e9c:	439c                	lw	a5,0(a5)
20014e9e:	fe442583          	lw	a1,-28(s0)
20014ea2:	fe042503          	lw	a0,-32(s0)
20014ea6:	9782                	jalr	a5
20014ea8:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
20014eac:	fd442783          	lw	a5,-44(s0)
20014eb0:	439c                	lw	a5,0(a5)
20014eb2:	fdc42583          	lw	a1,-36(s0)
20014eb6:	fd842503          	lw	a0,-40(s0)
20014eba:	9782                	jalr	a5
20014ebc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20014ec0:	fd042703          	lw	a4,-48(s0)
20014ec4:	67c1                	lui	a5,0x10
20014ec6:	8f7d                	and	a4,a4,a5
20014ec8:	67c1                	lui	a5,0x10
20014eca:	00f77863          	bgeu	a4,a5,20014eda <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
20014ece:	fe842503          	lw	a0,-24(s0)
20014ed2:	534010ef          	jal	ra,20016406 <metal_clock_get_rate_hz>
20014ed6:	87aa                	mv	a5,a0
20014ed8:	a8e1                	j	20014fb0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x16e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20014eda:	fd042703          	lw	a4,-48(s0)
20014ede:	000207b7          	lui	a5,0x20
20014ee2:	8f7d                	and	a4,a4,a5
20014ee4:	000207b7          	lui	a5,0x20
20014ee8:	00f76563          	bltu	a4,a5,20014ef2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
20014eec:	fec42783          	lw	a5,-20(s0)
20014ef0:	a019                	j	20014ef6 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
20014ef2:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
20014ef6:	853e                	mv	a0,a5
20014ef8:	50e010ef          	jal	ra,20016406 <metal_clock_get_rate_hz>
20014efc:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20014f00:	fd042703          	lw	a4,-48(s0)
20014f04:	000407b7          	lui	a5,0x40
20014f08:	8f7d                	and	a4,a4,a5
20014f0a:	000407b7          	lui	a5,0x40
20014f0e:	00f76563          	bltu	a4,a5,20014f18 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xd6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
20014f12:	fc842783          	lw	a5,-56(s0)
20014f16:	a869                	j	20014fb0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x16e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20014f18:	fd042783          	lw	a5,-48(s0)
20014f1c:	8b9d                	andi	a5,a5,7
20014f1e:	0785                	addi	a5,a5,1
20014f20:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20014f24:	fd042783          	lw	a5,-48(s0)
20014f28:	3f07f793          	andi	a5,a5,1008
20014f2c:	8391                	srli	a5,a5,0x4
20014f2e:	0785                	addi	a5,a5,1
20014f30:	0786                	slli	a5,a5,0x1
20014f32:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20014f36:	fd042703          	lw	a4,-48(s0)
20014f3a:	6785                	lui	a5,0x1
20014f3c:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20014f40:	8f7d                	and	a4,a4,a5
20014f42:	3ff00793          	li	a5,1023
20014f46:	00e7e463          	bltu	a5,a4,20014f4e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
20014f4a:	57fd                	li	a5,-1
20014f4c:	a095                	j	20014fb0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x16e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20014f4e:	fd042703          	lw	a4,-48(s0)
20014f52:	6785                	lui	a5,0x1
20014f54:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20014f58:	8ff9                	and	a5,a5,a4
20014f5a:	83a9                	srli	a5,a5,0xa
20014f5c:	4705                	li	a4,1
20014f5e:	00f717b3          	sll	a5,a4,a5
20014f62:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20014f66:	fc842703          	lw	a4,-56(s0)
20014f6a:	fc442783          	lw	a5,-60(s0)
20014f6e:	02f74733          	div	a4,a4,a5
20014f72:	fc042783          	lw	a5,-64(s0)
20014f76:	02f70733          	mul	a4,a4,a5
20014f7a:	fbc42783          	lw	a5,-68(s0)
20014f7e:	02f747b3          	div	a5,a4,a5
20014f82:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20014f86:	fcc42783          	lw	a5,-52(s0)
20014f8a:	1007f713          	andi	a4,a5,256
20014f8e:	0ff00793          	li	a5,255
20014f92:	00e7f563          	bgeu	a5,a4,20014f9c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x15a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20014f96:	fb842783          	lw	a5,-72(s0)
20014f9a:	a819                	j	20014fb0 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x16e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20014f9c:	fb842703          	lw	a4,-72(s0)
20014fa0:	fcc42783          	lw	a5,-52(s0)
20014fa4:	03f7f793          	andi	a5,a5,63
20014fa8:	0785                	addi	a5,a5,1
20014faa:	0786                	slli	a5,a5,0x1
20014fac:	02f757b3          	divu	a5,a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20014fb0:	853e                	mv	a0,a5
20014fb2:	40f6                	lw	ra,92(sp)
20014fb4:	4466                	lw	s0,88(sp)
20014fb6:	6125                	addi	sp,sp,96
20014fb8:	8082                	ret

20014fba <find_closest_config>:
find_closest_config():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20014fba:	7139                	addi	sp,sp,-64
20014fbc:	de06                	sw	ra,60(sp)
20014fbe:	dc22                	sw	s0,56(sp)
20014fc0:	0080                	addi	s0,sp,64
20014fc2:	fca42623          	sw	a0,-52(s0)
20014fc6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
20014fca:	57fd                	li	a5,-1
20014fcc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
20014fd0:	800007b7          	lui	a5,0x80000
20014fd4:	fff7c793          	not	a5,a5
20014fd8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20014fdc:	04300793          	li	a5,67
20014fe0:	fef42223          	sw	a5,-28(s0)
20014fe4:	a0b5                	j	20015050 <find_closest_config+0x96>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20014fe6:	fcc42683          	lw	a3,-52(s0)
20014fea:	fe442783          	lw	a5,-28(s0)
20014fee:	00579713          	slli	a4,a5,0x5
20014ff2:	200177b7          	lui	a5,0x20017
20014ff6:	b9478793          	addi	a5,a5,-1132 # 20016b94 <pll_configs>
20014ffa:	97ba                	add	a5,a5,a4
20014ffc:	85be                	mv	a1,a5
20014ffe:	8536                	mv	a0,a3
20015000:	d29ff0ef          	jal	ra,20014d28 <get_pll_config_freq>
20015004:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
20015008:	fe042703          	lw	a4,-32(s0)
2001500c:	57fd                	li	a5,-1
2001500e:	02f70c63          	beq	a4,a5,20015046 <find_closest_config+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
20015012:	fe042703          	lw	a4,-32(s0)
20015016:	fc842783          	lw	a5,-56(s0)
2001501a:	8f1d                	sub	a4,a4,a5
2001501c:	41f75793          	srai	a5,a4,0x1f
20015020:	8f3d                	xor	a4,a4,a5
20015022:	40f707b3          	sub	a5,a4,a5
20015026:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
2001502a:	fdc42703          	lw	a4,-36(s0)
2001502e:	fe842783          	lw	a5,-24(s0)
20015032:	00f75a63          	bge	a4,a5,20015046 <find_closest_config+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20015036:	fe442783          	lw	a5,-28(s0)
2001503a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
2001503e:	fdc42783          	lw	a5,-36(s0)
20015042:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20015046:	fe442783          	lw	a5,-28(s0)
2001504a:	17fd                	addi	a5,a5,-1
2001504c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20015050:	fe442783          	lw	a5,-28(s0)
20015054:	f807d9e3          	bgez	a5,20014fe6 <find_closest_config+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
20015058:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
2001505c:	853e                	mv	a0,a5
2001505e:	50f2                	lw	ra,60(sp)
20015060:	5462                	lw	s0,56(sp)
20015062:	6121                	addi	sp,sp,64
20015064:	8082                	ret

20015066 <configure_pll>:
configure_pll():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20015066:	1101                	addi	sp,sp,-32
20015068:	ce22                	sw	s0,28(sp)
2001506a:	1000                	addi	s0,sp,32
2001506c:	fea42623          	sw	a0,-20(s0)
20015070:	feb42423          	sw	a1,-24(s0)
20015074:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20015078:	fec42783          	lw	a5,-20(s0)
2001507c:	439c                	lw	a5,0(a5)
2001507e:	ff87f713          	andi	a4,a5,-8
20015082:	fec42783          	lw	a5,-20(s0)
20015086:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20015088:	fec42783          	lw	a5,-20(s0)
2001508c:	4398                	lw	a4,0(a5)
2001508e:	fe442783          	lw	a5,-28(s0)
20015092:	4b9c                	lw	a5,16(a5)
20015094:	8b9d                	andi	a5,a5,7
20015096:	8f5d                	or	a4,a4,a5
20015098:	fec42783          	lw	a5,-20(s0)
2001509c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
2001509e:	fec42783          	lw	a5,-20(s0)
200150a2:	439c                	lw	a5,0(a5)
200150a4:	c0f7f713          	andi	a4,a5,-1009
200150a8:	fec42783          	lw	a5,-20(s0)
200150ac:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
200150ae:	fec42783          	lw	a5,-20(s0)
200150b2:	4398                	lw	a4,0(a5)
200150b4:	fe442783          	lw	a5,-28(s0)
200150b8:	4bdc                	lw	a5,20(a5)
200150ba:	0792                	slli	a5,a5,0x4
200150bc:	3f07f793          	andi	a5,a5,1008
200150c0:	8f5d                	or	a4,a4,a5
200150c2:	fec42783          	lw	a5,-20(s0)
200150c6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
200150c8:	fec42783          	lw	a5,-20(s0)
200150cc:	4398                	lw	a4,0(a5)
200150ce:	77fd                	lui	a5,0xfffff
200150d0:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffd49b>
200150d4:	8f7d                	and	a4,a4,a5
200150d6:	fec42783          	lw	a5,-20(s0)
200150da:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
200150dc:	fec42783          	lw	a5,-20(s0)
200150e0:	4398                	lw	a4,0(a5)
200150e2:	fe442783          	lw	a5,-28(s0)
200150e6:	4f9c                	lw	a5,24(a5)
200150e8:	00a79693          	slli	a3,a5,0xa
200150ec:	6785                	lui	a5,0x1
200150ee:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
200150f2:	8ff5                	and	a5,a5,a3
200150f4:	8f5d                	or	a4,a4,a5
200150f6:	fec42783          	lw	a5,-20(s0)
200150fa:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
200150fc:	fe442783          	lw	a5,-28(s0)
20015100:	4fdc                	lw	a5,28(a5)
20015102:	0207db63          	bgez	a5,20015138 <configure_pll+0xd2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20015106:	fe842783          	lw	a5,-24(s0)
2001510a:	439c                	lw	a5,0(a5)
2001510c:	1007e713          	ori	a4,a5,256
20015110:	fe842783          	lw	a5,-24(s0)
20015114:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20015116:	fe842783          	lw	a5,-24(s0)
2001511a:	439c                	lw	a5,0(a5)
2001511c:	fc07f713          	andi	a4,a5,-64
20015120:	fe842783          	lw	a5,-24(s0)
20015124:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20015126:	fe842783          	lw	a5,-24(s0)
2001512a:	439c                	lw	a5,0(a5)
2001512c:	0017e713          	ori	a4,a5,1
20015130:	fe842783          	lw	a5,-24(s0)
20015134:	c398                	sw	a4,0(a5)
20015136:	a82d                	j	20015170 <configure_pll+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20015138:	fe842783          	lw	a5,-24(s0)
2001513c:	439c                	lw	a5,0(a5)
2001513e:	eff7f713          	andi	a4,a5,-257
20015142:	fe842783          	lw	a5,-24(s0)
20015146:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20015148:	fe842783          	lw	a5,-24(s0)
2001514c:	439c                	lw	a5,0(a5)
2001514e:	fc07f713          	andi	a4,a5,-64
20015152:	fe842783          	lw	a5,-24(s0)
20015156:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20015158:	fe842783          	lw	a5,-24(s0)
2001515c:	4398                	lw	a4,0(a5)
2001515e:	fe442783          	lw	a5,-28(s0)
20015162:	4fdc                	lw	a5,28(a5)
20015164:	03f7f793          	andi	a5,a5,63
20015168:	8f5d                	or	a4,a4,a5
2001516a:	fe842783          	lw	a5,-24(s0)
2001516e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20015170:	fec42783          	lw	a5,-20(s0)
20015174:	4398                	lw	a4,0(a5)
20015176:	fffc07b7          	lui	a5,0xfffc0
2001517a:	17fd                	addi	a5,a5,-1
2001517c:	8f7d                	and	a4,a4,a5
2001517e:	fec42783          	lw	a5,-20(s0)
20015182:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
20015184:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
20015186:	fec42783          	lw	a5,-20(s0)
2001518a:	439c                	lw	a5,0(a5)
2001518c:	fe07dde3          	bgez	a5,20015186 <configure_pll+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
20015190:	0001                	nop
20015192:	4472                	lw	s0,28(sp)
20015194:	6105                	addi	sp,sp,32
20015196:	8082                	ret

20015198 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
20015198:	715d                	addi	sp,sp,-80
2001519a:	c686                	sw	ra,76(sp)
2001519c:	c4a2                	sw	s0,72(sp)
2001519e:	0880                	addi	s0,sp,80
200151a0:	faa42e23          	sw	a0,-68(s0)
200151a4:	fab42c23          	sw	a1,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
200151a8:	fbc42503          	lw	a0,-68(s0)
200151ac:	addff0ef          	jal	ra,20014c88 <__metal_driver_sifive_fe310_g000_pll_pllref>
200151b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
200151b4:	fbc42503          	lw	a0,-68(s0)
200151b8:	ab7ff0ef          	jal	ra,20014c6e <__metal_driver_sifive_fe310_g000_pll_pllsel0>
200151bc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
200151c0:	fbc42503          	lw	a0,-68(s0)
200151c4:	b1bff0ef          	jal	ra,20014cde <__metal_driver_sifive_fe310_g000_pll_config_offset>
200151c8:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
200151cc:	fbc42503          	lw	a0,-68(s0)
200151d0:	ae9ff0ef          	jal	ra,20014cb8 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
200151d4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
200151d8:	b2dff0ef          	jal	ra,20014d04 <__metal_driver_sifive_fe310_g000_prci_base>
200151dc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
200151e0:	fdc42703          	lw	a4,-36(s0)
200151e4:	fe442783          	lw	a5,-28(s0)
200151e8:	97ba                	add	a5,a5,a4
200151ea:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
200151ee:	fdc42703          	lw	a4,-36(s0)
200151f2:	fe042783          	lw	a5,-32(s0)
200151f6:	97ba                	add	a5,a5,a4
200151f8:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
200151fc:	fd842783          	lw	a5,-40(s0)
20015200:	4398                	lw	a4,0(a5)
20015202:	67c1                	lui	a5,0x10
20015204:	8ff9                	and	a5,a5,a4
20015206:	cb91                	beqz	a5,2001521a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20015208:	fd842783          	lw	a5,-40(s0)
2001520c:	4398                	lw	a4,0(a5)
2001520e:	77c1                	lui	a5,0xffff0
20015210:	17fd                	addi	a5,a5,-1
20015212:	8f7d                	and	a4,a4,a5
20015214:	fd842783          	lw	a5,-40(s0)
20015218:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
2001521a:	fd842783          	lw	a5,-40(s0)
2001521e:	4398                	lw	a4,0(a5)
20015220:	000207b7          	lui	a5,0x20
20015224:	8ff9                	and	a5,a5,a4
20015226:	c781                	beqz	a5,2001522e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
20015228:	fec42783          	lw	a5,-20(s0)
2001522c:	a019                	j	20015232 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
2001522e:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
20015232:	853e                	mv	a0,a5
20015234:	1d2010ef          	jal	ra,20016406 <metal_clock_get_rate_hz>
20015238:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
2001523c:	fd042703          	lw	a4,-48(s0)
20015240:	87ba                	mv	a5,a4
20015242:	0786                	slli	a5,a5,0x1
20015244:	97ba                	add	a5,a5,a4
20015246:	41f7d713          	srai	a4,a5,0x1f
2001524a:	8b0d                	andi	a4,a4,3
2001524c:	97ba                	add	a5,a5,a4
2001524e:	8789                	srai	a5,a5,0x2
20015250:	873e                	mv	a4,a5
20015252:	fb842783          	lw	a5,-72(s0)
20015256:	02e7cb63          	blt	a5,a4,2001528c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
2001525a:	fd042703          	lw	a4,-48(s0)
2001525e:	87ba                	mv	a5,a4
20015260:	078a                	slli	a5,a5,0x2
20015262:	97ba                	add	a5,a5,a4
20015264:	41f7d713          	srai	a4,a5,0x1f
20015268:	8b0d                	andi	a4,a4,3
2001526a:	97ba                	add	a5,a5,a4
2001526c:	8789                	srai	a5,a5,0x2
2001526e:	873e                	mv	a4,a5
20015270:	fb842783          	lw	a5,-72(s0)
20015274:	00f74c63          	blt	a4,a5,2001528c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20015278:	fd842783          	lw	a5,-40(s0)
2001527c:	4398                	lw	a4,0(a5)
2001527e:	000407b7          	lui	a5,0x40
20015282:	8f5d                	or	a4,a4,a5
20015284:	fd842783          	lw	a5,-40(s0)
20015288:	c398                	sw	a4,0(a5)
2001528a:	a881                	j	200152da <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
2001528c:	fb842583          	lw	a1,-72(s0)
20015290:	fd042503          	lw	a0,-48(s0)
20015294:	d27ff0ef          	jal	ra,20014fba <find_closest_config>
20015298:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
2001529c:	fcc42703          	lw	a4,-52(s0)
200152a0:	57fd                	li	a5,-1
200152a2:	02f70363          	beq	a4,a5,200152c8 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
200152a6:	fcc42783          	lw	a5,-52(s0)
200152aa:	00579713          	slli	a4,a5,0x5
200152ae:	200177b7          	lui	a5,0x20017
200152b2:	b9478793          	addi	a5,a5,-1132 # 20016b94 <pll_configs>
200152b6:	97ba                	add	a5,a5,a4
200152b8:	863e                	mv	a2,a5
200152ba:	fd442583          	lw	a1,-44(s0)
200152be:	fd842503          	lw	a0,-40(s0)
200152c2:	da5ff0ef          	jal	ra,20015066 <configure_pll>
200152c6:	a811                	j	200152da <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
200152c8:	fd842783          	lw	a5,-40(s0)
200152cc:	4398                	lw	a4,0(a5)
200152ce:	000407b7          	lui	a5,0x40
200152d2:	8f5d                	or	a4,a4,a5
200152d4:	fd842783          	lw	a5,-40(s0)
200152d8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
200152da:	fd842783          	lw	a5,-40(s0)
200152de:	4398                	lw	a4,0(a5)
200152e0:	67c1                	lui	a5,0x10
200152e2:	8f5d                	or	a4,a4,a5
200152e4:	fd842783          	lw	a5,-40(s0)
200152e8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
200152ea:	fbc42503          	lw	a0,-68(s0)
200152ee:	b55ff0ef          	jal	ra,20014e42 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
200152f2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
200152f4:	853e                	mv	a0,a5
200152f6:	40b6                	lw	ra,76(sp)
200152f8:	4426                	lw	s0,72(sp)
200152fa:	6161                	addi	sp,sp,80
200152fc:	8082                	ret

200152fe <use_hfxosc>:
use_hfxosc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
200152fe:	1101                	addi	sp,sp,-32
20015300:	ce06                	sw	ra,28(sp)
20015302:	cc22                	sw	s0,24(sp)
20015304:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20015306:	9e9ff0ef          	jal	ra,20014cee <__metal_driver_sifive_fe310_g000_pll_init_rate>
2001530a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
2001530e:	fec42583          	lw	a1,-20(s0)
20015312:	800017b7          	lui	a5,0x80001
20015316:	24878513          	addi	a0,a5,584 # 80001248 <metal_segment_heap_target_end+0xfffff2e4>
2001531a:	112010ef          	jal	ra,2001642c <metal_clock_set_rate_hz>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
2001531e:	0001                	nop
20015320:	40f2                	lw	ra,28(sp)
20015322:	4462                	lw	s0,24(sp)
20015324:	6105                	addi	sp,sp,32
20015326:	8082                	ret

20015328 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1033
{
20015328:	1141                	addi	sp,sp,-16
2001532a:	c622                	sw	s0,12(sp)
2001532c:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
2001532e:	100087b7          	lui	a5,0x10008
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1035
}
20015332:	853e                	mv	a0,a5
20015334:	4432                	lw	s0,12(sp)
20015336:	0141                	addi	sp,sp,16
20015338:	8082                	ret

2001533a <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
2001533a:	7179                	addi	sp,sp,-48
2001533c:	d606                	sw	ra,44(sp)
2001533e:	d422                	sw	s0,40(sp)
20015340:	1800                	addi	s0,sp,48
20015342:	fca42e23          	sw	a0,-36(s0)
20015346:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2001534a:	3ff9                	jal	20015328 <__metal_driver_sifive_fe310_g000_prci_base>
2001534c:	87aa                	mv	a5,a0
2001534e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
20015352:	fd842703          	lw	a4,-40(s0)
20015356:	fec42783          	lw	a5,-20(s0)
2001535a:	97ba                	add	a5,a5,a4
2001535c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
2001535e:	853e                	mv	a0,a5
20015360:	50b2                	lw	ra,44(sp)
20015362:	5422                	lw	s0,40(sp)
20015364:	6145                	addi	sp,sp,48
20015366:	8082                	ret

20015368 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
20015368:	7179                	addi	sp,sp,-48
2001536a:	d606                	sw	ra,44(sp)
2001536c:	d422                	sw	s0,40(sp)
2001536e:	1800                	addi	s0,sp,48
20015370:	fca42e23          	sw	a0,-36(s0)
20015374:	fcb42c23          	sw	a1,-40(s0)
20015378:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2001537c:	3775                	jal	20015328 <__metal_driver_sifive_fe310_g000_prci_base>
2001537e:	87aa                	mv	a5,a0
20015380:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
20015384:	fd842703          	lw	a4,-40(s0)
20015388:	fec42783          	lw	a5,-20(s0)
2001538c:	97ba                	add	a5,a5,a4
2001538e:	873e                	mv	a4,a5
20015390:	fd442783          	lw	a5,-44(s0)
20015394:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
20015396:	853e                	mv	a0,a5
20015398:	50b2                	lw	ra,44(sp)
2001539a:	5422                	lw	s0,40(sp)
2001539c:	6145                	addi	sp,sp,48
2001539e:	8082                	ret

200153a0 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:380
{
200153a0:	1101                	addi	sp,sp,-32
200153a2:	ce22                	sw	s0,28(sp)
200153a4:	1000                	addi	s0,sp,32
200153a6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:381
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200153aa:	fec42703          	lw	a4,-20(s0)
200153ae:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200153b2:	00f71563          	bne	a4,a5,200153bc <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:382
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200153b6:	100127b7          	lui	a5,0x10012
200153ba:	a011                	j	200153be <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:385
		return 0;
200153bc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:387
}
200153be:	853e                	mv	a0,a5
200153c0:	4472                	lw	s0,28(sp)
200153c2:	6105                	addi	sp,sp,32
200153c4:	8082                	ret

200153c6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:410
{
200153c6:	1101                	addi	sp,sp,-32
200153c8:	ce22                	sw	s0,28(sp)
200153ca:	1000                	addi	s0,sp,32
200153cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:411
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200153d0:	fec42703          	lw	a4,-20(s0)
200153d4:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200153d8:	00f71763          	bne	a4,a5,200153e6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:412
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
200153dc:	800017b7          	lui	a5,0x80001
200153e0:	c1878793          	addi	a5,a5,-1000 # 80000c18 <metal_segment_heap_target_end+0xffffecb4>
200153e4:	a011                	j	200153e8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:415
		return 0;
200153e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:417
}
200153e8:	853e                	mv	a0,a5
200153ea:	4472                	lw	s0,28(sp)
200153ec:	6105                	addi	sp,sp,32
200153ee:	8082                	ret

200153f0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:420
{
200153f0:	1101                	addi	sp,sp,-32
200153f2:	ce22                	sw	s0,28(sp)
200153f4:	1000                	addi	s0,sp,32
200153f6:	fea42623          	sw	a0,-20(s0)
200153fa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:421
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
200153fe:	fec42703          	lw	a4,-20(s0)
20015402:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015406:	00f71763          	bne	a4,a5,20015414 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:421 (discriminator 1)
2001540a:	fe842783          	lw	a5,-24(s0)
2001540e:	e399                	bnez	a5,20015414 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:422
		return 8;
20015410:	47a1                	li	a5,8
20015412:	ae15                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:424
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20015414:	fec42703          	lw	a4,-20(s0)
20015418:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001541c:	00f71963          	bne	a4,a5,2001542e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:424 (discriminator 1)
20015420:	fe842703          	lw	a4,-24(s0)
20015424:	4785                	li	a5,1
20015426:	00f71463          	bne	a4,a5,2001542e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:425
		return 9;
2001542a:	47a5                	li	a5,9
2001542c:	ae29                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:427
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2001542e:	fec42703          	lw	a4,-20(s0)
20015432:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015436:	00f71963          	bne	a4,a5,20015448 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:427 (discriminator 1)
2001543a:	fe842703          	lw	a4,-24(s0)
2001543e:	4789                	li	a5,2
20015440:	00f71463          	bne	a4,a5,20015448 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:428
		return 10;
20015444:	47a9                	li	a5,10
20015446:	a601                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:430
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20015448:	fec42703          	lw	a4,-20(s0)
2001544c:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015450:	00f71963          	bne	a4,a5,20015462 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:430 (discriminator 1)
20015454:	fe842703          	lw	a4,-24(s0)
20015458:	478d                	li	a5,3
2001545a:	00f71463          	bne	a4,a5,20015462 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:431
		return 11;
2001545e:	47ad                	li	a5,11
20015460:	a4dd                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:433
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20015462:	fec42703          	lw	a4,-20(s0)
20015466:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001546a:	00f71963          	bne	a4,a5,2001547c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:433 (discriminator 1)
2001546e:	fe842703          	lw	a4,-24(s0)
20015472:	4791                	li	a5,4
20015474:	00f71463          	bne	a4,a5,2001547c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:434
		return 12;
20015478:	47b1                	li	a5,12
2001547a:	a4f1                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:436
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2001547c:	fec42703          	lw	a4,-20(s0)
20015480:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015484:	00f71963          	bne	a4,a5,20015496 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:436 (discriminator 1)
20015488:	fe842703          	lw	a4,-24(s0)
2001548c:	4795                	li	a5,5
2001548e:	00f71463          	bne	a4,a5,20015496 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:437
		return 13;
20015492:	47b5                	li	a5,13
20015494:	ac4d                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:439
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20015496:	fec42703          	lw	a4,-20(s0)
2001549a:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001549e:	00f71963          	bne	a4,a5,200154b0 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:439 (discriminator 1)
200154a2:	fe842703          	lw	a4,-24(s0)
200154a6:	4799                	li	a5,6
200154a8:	00f71463          	bne	a4,a5,200154b0 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:440
		return 14;
200154ac:	47b9                	li	a5,14
200154ae:	ac61                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:442
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
200154b0:	fec42703          	lw	a4,-20(s0)
200154b4:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200154b8:	00f71963          	bne	a4,a5,200154ca <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:442 (discriminator 1)
200154bc:	fe842703          	lw	a4,-24(s0)
200154c0:	479d                	li	a5,7
200154c2:	00f71463          	bne	a4,a5,200154ca <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:443
		return 15;
200154c6:	47bd                	li	a5,15
200154c8:	acbd                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:445
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
200154ca:	fec42703          	lw	a4,-20(s0)
200154ce:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200154d2:	00f71963          	bne	a4,a5,200154e4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:445 (discriminator 1)
200154d6:	fe842703          	lw	a4,-24(s0)
200154da:	47a1                	li	a5,8
200154dc:	00f71463          	bne	a4,a5,200154e4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:446
		return 16;
200154e0:	47c1                	li	a5,16
200154e2:	a495                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:448
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
200154e4:	fec42703          	lw	a4,-20(s0)
200154e8:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200154ec:	00f71963          	bne	a4,a5,200154fe <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:448 (discriminator 1)
200154f0:	fe842703          	lw	a4,-24(s0)
200154f4:	47a5                	li	a5,9
200154f6:	00f71463          	bne	a4,a5,200154fe <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:449
		return 17;
200154fa:	47c5                	li	a5,17
200154fc:	a4a9                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:451
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
200154fe:	fec42703          	lw	a4,-20(s0)
20015502:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015506:	00f71963          	bne	a4,a5,20015518 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:451 (discriminator 1)
2001550a:	fe842703          	lw	a4,-24(s0)
2001550e:	47a9                	li	a5,10
20015510:	00f71463          	bne	a4,a5,20015518 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:452
		return 18;
20015514:	47c9                	li	a5,18
20015516:	ac05                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:454
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20015518:	fec42703          	lw	a4,-20(s0)
2001551c:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015520:	00f71963          	bne	a4,a5,20015532 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:454 (discriminator 1)
20015524:	fe842703          	lw	a4,-24(s0)
20015528:	47ad                	li	a5,11
2001552a:	00f71463          	bne	a4,a5,20015532 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:455
		return 19;
2001552e:	47cd                	li	a5,19
20015530:	ac19                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:457
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20015532:	fec42703          	lw	a4,-20(s0)
20015536:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001553a:	00f71963          	bne	a4,a5,2001554c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:457 (discriminator 1)
2001553e:	fe842703          	lw	a4,-24(s0)
20015542:	47b1                	li	a5,12
20015544:	00f71463          	bne	a4,a5,2001554c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:458
		return 20;
20015548:	47d1                	li	a5,20
2001554a:	aaf5                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:460
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2001554c:	fec42703          	lw	a4,-20(s0)
20015550:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015554:	00f71963          	bne	a4,a5,20015566 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:460 (discriminator 1)
20015558:	fe842703          	lw	a4,-24(s0)
2001555c:	47b5                	li	a5,13
2001555e:	00f71463          	bne	a4,a5,20015566 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:461
		return 21;
20015562:	47d5                	li	a5,21
20015564:	a2cd                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:463
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20015566:	fec42703          	lw	a4,-20(s0)
2001556a:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001556e:	00f71963          	bne	a4,a5,20015580 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:463 (discriminator 1)
20015572:	fe842703          	lw	a4,-24(s0)
20015576:	47b9                	li	a5,14
20015578:	00f71463          	bne	a4,a5,20015580 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:464
		return 22;
2001557c:	47d9                	li	a5,22
2001557e:	a2e1                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:466
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20015580:	fec42703          	lw	a4,-20(s0)
20015584:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015588:	00f71963          	bne	a4,a5,2001559a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:466 (discriminator 1)
2001558c:	fe842703          	lw	a4,-24(s0)
20015590:	47bd                	li	a5,15
20015592:	00f71463          	bne	a4,a5,2001559a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:467
		return 23;
20015596:	47dd                	li	a5,23
20015598:	a27d                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:469
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 16))) {
2001559a:	fec42703          	lw	a4,-20(s0)
2001559e:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200155a2:	00f71963          	bne	a4,a5,200155b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:469 (discriminator 1)
200155a6:	fe842703          	lw	a4,-24(s0)
200155aa:	47c1                	li	a5,16
200155ac:	00f71463          	bne	a4,a5,200155b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:470
		return 24;
200155b0:	47e1                	li	a5,24
200155b2:	aa51                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:472
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 17))) {
200155b4:	fec42703          	lw	a4,-20(s0)
200155b8:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200155bc:	00f71963          	bne	a4,a5,200155ce <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:472 (discriminator 1)
200155c0:	fe842703          	lw	a4,-24(s0)
200155c4:	47c5                	li	a5,17
200155c6:	00f71463          	bne	a4,a5,200155ce <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:473
		return 25;
200155ca:	47e5                	li	a5,25
200155cc:	aaad                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:475
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 18))) {
200155ce:	fec42703          	lw	a4,-20(s0)
200155d2:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200155d6:	00f71963          	bne	a4,a5,200155e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:475 (discriminator 1)
200155da:	fe842703          	lw	a4,-24(s0)
200155de:	47c9                	li	a5,18
200155e0:	00f71463          	bne	a4,a5,200155e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:476
		return 26;
200155e4:	47e9                	li	a5,26
200155e6:	a285                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:478
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 19))) {
200155e8:	fec42703          	lw	a4,-20(s0)
200155ec:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200155f0:	00f71963          	bne	a4,a5,20015602 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:478 (discriminator 1)
200155f4:	fe842703          	lw	a4,-24(s0)
200155f8:	47cd                	li	a5,19
200155fa:	00f71463          	bne	a4,a5,20015602 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:479
		return 27;
200155fe:	47ed                	li	a5,27
20015600:	a299                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:481
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 20))) {
20015602:	fec42703          	lw	a4,-20(s0)
20015606:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001560a:	00f71963          	bne	a4,a5,2001561c <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:481 (discriminator 1)
2001560e:	fe842703          	lw	a4,-24(s0)
20015612:	47d1                	li	a5,20
20015614:	00f71463          	bne	a4,a5,2001561c <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:482
		return 28;
20015618:	47f1                	li	a5,28
2001561a:	a235                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:484
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 21))) {
2001561c:	fec42703          	lw	a4,-20(s0)
20015620:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015624:	00f71963          	bne	a4,a5,20015636 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:484 (discriminator 1)
20015628:	fe842703          	lw	a4,-24(s0)
2001562c:	47d5                	li	a5,21
2001562e:	00f71463          	bne	a4,a5,20015636 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:485
		return 29;
20015632:	47f5                	li	a5,29
20015634:	aa09                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:487
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 22))) {
20015636:	fec42703          	lw	a4,-20(s0)
2001563a:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001563e:	00f71963          	bne	a4,a5,20015650 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:487 (discriminator 1)
20015642:	fe842703          	lw	a4,-24(s0)
20015646:	47d9                	li	a5,22
20015648:	00f71463          	bne	a4,a5,20015650 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:488
		return 30;
2001564c:	47f9                	li	a5,30
2001564e:	a8e5                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:490
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 23))) {
20015650:	fec42703          	lw	a4,-20(s0)
20015654:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015658:	00f71963          	bne	a4,a5,2001566a <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:490 (discriminator 1)
2001565c:	fe842703          	lw	a4,-24(s0)
20015660:	47dd                	li	a5,23
20015662:	00f71463          	bne	a4,a5,2001566a <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:491
		return 31;
20015666:	47fd                	li	a5,31
20015668:	a8f9                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:493
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 24))) {
2001566a:	fec42703          	lw	a4,-20(s0)
2001566e:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015672:	00f71a63          	bne	a4,a5,20015686 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:493 (discriminator 1)
20015676:	fe842703          	lw	a4,-24(s0)
2001567a:	47e1                	li	a5,24
2001567c:	00f71563          	bne	a4,a5,20015686 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:494
		return 32;
20015680:	02000793          	li	a5,32
20015684:	a0c9                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:496
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 25))) {
20015686:	fec42703          	lw	a4,-20(s0)
2001568a:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
2001568e:	00f71a63          	bne	a4,a5,200156a2 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:496 (discriminator 1)
20015692:	fe842703          	lw	a4,-24(s0)
20015696:	47e5                	li	a5,25
20015698:	00f71563          	bne	a4,a5,200156a2 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:497
		return 33;
2001569c:	02100793          	li	a5,33
200156a0:	a05d                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:499
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 26))) {
200156a2:	fec42703          	lw	a4,-20(s0)
200156a6:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200156aa:	00f71a63          	bne	a4,a5,200156be <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:499 (discriminator 1)
200156ae:	fe842703          	lw	a4,-24(s0)
200156b2:	47e9                	li	a5,26
200156b4:	00f71563          	bne	a4,a5,200156be <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:500
		return 34;
200156b8:	02200793          	li	a5,34
200156bc:	a069                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:502
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 27))) {
200156be:	fec42703          	lw	a4,-20(s0)
200156c2:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200156c6:	00f71a63          	bne	a4,a5,200156da <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:502 (discriminator 1)
200156ca:	fe842703          	lw	a4,-24(s0)
200156ce:	47ed                	li	a5,27
200156d0:	00f71563          	bne	a4,a5,200156da <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:503
		return 35;
200156d4:	02300793          	li	a5,35
200156d8:	a0bd                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:505
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 28))) {
200156da:	fec42703          	lw	a4,-20(s0)
200156de:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200156e2:	00f71a63          	bne	a4,a5,200156f6 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:505 (discriminator 1)
200156e6:	fe842703          	lw	a4,-24(s0)
200156ea:	47f1                	li	a5,28
200156ec:	00f71563          	bne	a4,a5,200156f6 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:506
		return 36;
200156f0:	02400793          	li	a5,36
200156f4:	a889                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:508
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 29))) {
200156f6:	fec42703          	lw	a4,-20(s0)
200156fa:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
200156fe:	00f71963          	bne	a4,a5,20015710 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:508 (discriminator 1)
20015702:	fe842703          	lw	a4,-24(s0)
20015706:	47f5                	li	a5,29
20015708:	00f71463          	bne	a4,a5,20015710 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:509
		return 27;
2001570c:	47ed                	li	a5,27
2001570e:	a825                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:511
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 30))) {
20015710:	fec42703          	lw	a4,-20(s0)
20015714:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015718:	00f71963          	bne	a4,a5,2001572a <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:511 (discriminator 1)
2001571c:	fe842703          	lw	a4,-24(s0)
20015720:	47f9                	li	a5,30
20015722:	00f71463          	bne	a4,a5,2001572a <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:512
		return 28;
20015726:	47f1                	li	a5,28
20015728:	a839                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:514
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 31))) {
2001572a:	fec42703          	lw	a4,-20(s0)
2001572e:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015732:	00f71963          	bne	a4,a5,20015744 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:514 (discriminator 1)
20015736:	fe842703          	lw	a4,-24(s0)
2001573a:	47fd                	li	a5,31
2001573c:	00f71463          	bne	a4,a5,20015744 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:515
		return 29;
20015740:	47f5                	li	a5,29
20015742:	a011                	j	20015746 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:518
		return 0;
20015744:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:520
}
20015746:	853e                	mv	a0,a5
20015748:	4472                	lw	s0,28(sp)
2001574a:	6105                	addi	sp,sp,32
2001574c:	8082                	ret

2001574e <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
2001574e:	7179                	addi	sp,sp,-48
20015750:	d606                	sw	ra,44(sp)
20015752:	d422                	sw	s0,40(sp)
20015754:	1800                	addi	s0,sp,48
20015756:	fca42e23          	sw	a0,-36(s0)
2001575a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001575e:	fdc42503          	lw	a0,-36(s0)
20015762:	c3fff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015766:	87aa                	mv	a5,a0
20015768:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
2001576c:	fec42783          	lw	a5,-20(s0)
20015770:	0791                	addi	a5,a5,4
20015772:	4398                	lw	a4,0(a5)
20015774:	fd842783          	lw	a5,-40(s0)
20015778:	fec42683          	lw	a3,-20(s0)
2001577c:	0691                	addi	a3,a3,4
2001577e:	8fd9                	or	a5,a5,a4
20015780:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20015782:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20015784:	853e                	mv	a0,a5
20015786:	50b2                	lw	ra,44(sp)
20015788:	5422                	lw	s0,40(sp)
2001578a:	6145                	addi	sp,sp,48
2001578c:	8082                	ret

2001578e <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
2001578e:	7179                	addi	sp,sp,-48
20015790:	d606                	sw	ra,44(sp)
20015792:	d422                	sw	s0,40(sp)
20015794:	1800                	addi	s0,sp,48
20015796:	fca42e23          	sw	a0,-36(s0)
2001579a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001579e:	fdc42503          	lw	a0,-36(s0)
200157a2:	bffff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
200157a6:	87aa                	mv	a5,a0
200157a8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
200157ac:	fec42783          	lw	a5,-20(s0)
200157b0:	0791                	addi	a5,a5,4
200157b2:	439c                	lw	a5,0(a5)
200157b4:	fd842703          	lw	a4,-40(s0)
200157b8:	fff74713          	not	a4,a4
200157bc:	86ba                	mv	a3,a4
200157be:	fec42703          	lw	a4,-20(s0)
200157c2:	0711                	addi	a4,a4,4
200157c4:	8ff5                	and	a5,a5,a3
200157c6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
200157c8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
200157ca:	853e                	mv	a0,a5
200157cc:	50b2                	lw	ra,44(sp)
200157ce:	5422                	lw	s0,40(sp)
200157d0:	6145                	addi	sp,sp,48
200157d2:	8082                	ret

200157d4 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
200157d4:	7179                	addi	sp,sp,-48
200157d6:	d606                	sw	ra,44(sp)
200157d8:	d422                	sw	s0,40(sp)
200157da:	1800                	addi	s0,sp,48
200157dc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200157e0:	fdc42503          	lw	a0,-36(s0)
200157e4:	bbdff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
200157e8:	87aa                	mv	a5,a0
200157ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
200157ee:	fec42783          	lw	a5,-20(s0)
200157f2:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
200157f4:	853e                	mv	a0,a5
200157f6:	50b2                	lw	ra,44(sp)
200157f8:	5422                	lw	s0,40(sp)
200157fa:	6145                	addi	sp,sp,48
200157fc:	8082                	ret

200157fe <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
200157fe:	7179                	addi	sp,sp,-48
20015800:	d606                	sw	ra,44(sp)
20015802:	d422                	sw	s0,40(sp)
20015804:	1800                	addi	s0,sp,48
20015806:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001580a:	fdc42503          	lw	a0,-36(s0)
2001580e:	b93ff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015812:	87aa                	mv	a5,a0
20015814:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20015818:	fec42783          	lw	a5,-20(s0)
2001581c:	07b1                	addi	a5,a5,12
2001581e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20015820:	853e                	mv	a0,a5
20015822:	50b2                	lw	ra,44(sp)
20015824:	5422                	lw	s0,40(sp)
20015826:	6145                	addi	sp,sp,48
20015828:	8082                	ret

2001582a <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2001582a:	7179                	addi	sp,sp,-48
2001582c:	d606                	sw	ra,44(sp)
2001582e:	d422                	sw	s0,40(sp)
20015830:	1800                	addi	s0,sp,48
20015832:	fca42e23          	sw	a0,-36(s0)
20015836:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001583a:	fdc42503          	lw	a0,-36(s0)
2001583e:	b63ff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015842:	87aa                	mv	a5,a0
20015844:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20015848:	fec42783          	lw	a5,-20(s0)
2001584c:	07a1                	addi	a5,a5,8
2001584e:	439c                	lw	a5,0(a5)
20015850:	fd842703          	lw	a4,-40(s0)
20015854:	fff74713          	not	a4,a4
20015858:	86ba                	mv	a3,a4
2001585a:	fec42703          	lw	a4,-20(s0)
2001585e:	0721                	addi	a4,a4,8
20015860:	8ff5                	and	a5,a5,a3
20015862:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20015864:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20015866:	853e                	mv	a0,a5
20015868:	50b2                	lw	ra,44(sp)
2001586a:	5422                	lw	s0,40(sp)
2001586c:	6145                	addi	sp,sp,48
2001586e:	8082                	ret

20015870 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20015870:	7179                	addi	sp,sp,-48
20015872:	d606                	sw	ra,44(sp)
20015874:	d422                	sw	s0,40(sp)
20015876:	1800                	addi	s0,sp,48
20015878:	fca42e23          	sw	a0,-36(s0)
2001587c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20015880:	fdc42503          	lw	a0,-36(s0)
20015884:	b1dff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015888:	87aa                	mv	a5,a0
2001588a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
2001588e:	fec42783          	lw	a5,-20(s0)
20015892:	07a1                	addi	a5,a5,8
20015894:	4398                	lw	a4,0(a5)
20015896:	fd842783          	lw	a5,-40(s0)
2001589a:	fec42683          	lw	a3,-20(s0)
2001589e:	06a1                	addi	a3,a3,8
200158a0:	8fd9                	or	a5,a5,a4
200158a2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
200158a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
200158a6:	853e                	mv	a0,a5
200158a8:	50b2                	lw	ra,44(sp)
200158aa:	5422                	lw	s0,40(sp)
200158ac:	6145                	addi	sp,sp,48
200158ae:	8082                	ret

200158b0 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
200158b0:	7179                	addi	sp,sp,-48
200158b2:	d606                	sw	ra,44(sp)
200158b4:	d422                	sw	s0,40(sp)
200158b6:	1800                	addi	s0,sp,48
200158b8:	fca42e23          	sw	a0,-36(s0)
200158bc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200158c0:	fdc42503          	lw	a0,-36(s0)
200158c4:	addff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
200158c8:	87aa                	mv	a5,a0
200158ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
200158ce:	fec42783          	lw	a5,-20(s0)
200158d2:	07b1                	addi	a5,a5,12
200158d4:	4398                	lw	a4,0(a5)
200158d6:	fd842783          	lw	a5,-40(s0)
200158da:	fec42683          	lw	a3,-20(s0)
200158de:	06b1                	addi	a3,a3,12
200158e0:	8fd9                	or	a5,a5,a4
200158e2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
200158e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
200158e6:	853e                	mv	a0,a5
200158e8:	50b2                	lw	ra,44(sp)
200158ea:	5422                	lw	s0,40(sp)
200158ec:	6145                	addi	sp,sp,48
200158ee:	8082                	ret

200158f0 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
200158f0:	7179                	addi	sp,sp,-48
200158f2:	d606                	sw	ra,44(sp)
200158f4:	d422                	sw	s0,40(sp)
200158f6:	1800                	addi	s0,sp,48
200158f8:	fca42e23          	sw	a0,-36(s0)
200158fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20015900:	fdc42503          	lw	a0,-36(s0)
20015904:	a9dff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015908:	87aa                	mv	a5,a0
2001590a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
2001590e:	fec42783          	lw	a5,-20(s0)
20015912:	07b1                	addi	a5,a5,12
20015914:	439c                	lw	a5,0(a5)
20015916:	fd842703          	lw	a4,-40(s0)
2001591a:	fff74713          	not	a4,a4
2001591e:	86ba                	mv	a3,a4
20015920:	fec42703          	lw	a4,-20(s0)
20015924:	0731                	addi	a4,a4,12
20015926:	8ff5                	and	a5,a5,a3
20015928:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2001592a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2001592c:	853e                	mv	a0,a5
2001592e:	50b2                	lw	ra,44(sp)
20015930:	5422                	lw	s0,40(sp)
20015932:	6145                	addi	sp,sp,48
20015934:	8082                	ret

20015936 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20015936:	7179                	addi	sp,sp,-48
20015938:	d606                	sw	ra,44(sp)
2001593a:	d422                	sw	s0,40(sp)
2001593c:	1800                	addi	s0,sp,48
2001593e:	fca42e23          	sw	a0,-36(s0)
20015942:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20015946:	fdc42503          	lw	a0,-36(s0)
2001594a:	a57ff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
2001594e:	87aa                	mv	a5,a0
20015950:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20015954:	fec42783          	lw	a5,-20(s0)
20015958:	07b1                	addi	a5,a5,12
2001595a:	4398                	lw	a4,0(a5)
2001595c:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20015960:	fec42683          	lw	a3,-20(s0)
20015964:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20015966:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20015968:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2001596a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2001596c:	853e                	mv	a0,a5
2001596e:	50b2                	lw	ra,44(sp)
20015970:	5422                	lw	s0,40(sp)
20015972:	6145                	addi	sp,sp,48
20015974:	8082                	ret

20015976 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20015976:	7179                	addi	sp,sp,-48
20015978:	d606                	sw	ra,44(sp)
2001597a:	d422                	sw	s0,40(sp)
2001597c:	1800                	addi	s0,sp,48
2001597e:	fca42e23          	sw	a0,-36(s0)
20015982:	fcb42c23          	sw	a1,-40(s0)
20015986:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001598a:	fdc42503          	lw	a0,-36(s0)
2001598e:	a13ff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015992:	87aa                	mv	a5,a0
20015994:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20015998:	fec42783          	lw	a5,-20(s0)
2001599c:	03c78793          	addi	a5,a5,60
200159a0:	439c                	lw	a5,0(a5)
200159a2:	fd842703          	lw	a4,-40(s0)
200159a6:	fff74713          	not	a4,a4
200159aa:	86ba                	mv	a3,a4
200159ac:	fec42703          	lw	a4,-20(s0)
200159b0:	03c70713          	addi	a4,a4,60
200159b4:	8ff5                	and	a5,a5,a3
200159b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
200159b8:	fec42783          	lw	a5,-20(s0)
200159bc:	03878793          	addi	a5,a5,56
200159c0:	4398                	lw	a4,0(a5)
200159c2:	fd442783          	lw	a5,-44(s0)
200159c6:	fec42683          	lw	a3,-20(s0)
200159ca:	03868693          	addi	a3,a3,56
200159ce:	8fd9                	or	a5,a5,a4
200159d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
200159d2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
200159d4:	853e                	mv	a0,a5
200159d6:	50b2                	lw	ra,44(sp)
200159d8:	5422                	lw	s0,40(sp)
200159da:	6145                	addi	sp,sp,48
200159dc:	8082                	ret

200159de <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
200159de:	7179                	addi	sp,sp,-48
200159e0:	d606                	sw	ra,44(sp)
200159e2:	d422                	sw	s0,40(sp)
200159e4:	1800                	addi	s0,sp,48
200159e6:	fca42e23          	sw	a0,-36(s0)
200159ea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200159ee:	fdc42503          	lw	a0,-36(s0)
200159f2:	9afff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
200159f6:	87aa                	mv	a5,a0
200159f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
200159fc:	fec42783          	lw	a5,-20(s0)
20015a00:	03878793          	addi	a5,a5,56
20015a04:	439c                	lw	a5,0(a5)
20015a06:	fd842703          	lw	a4,-40(s0)
20015a0a:	fff74713          	not	a4,a4
20015a0e:	86ba                	mv	a3,a4
20015a10:	fec42703          	lw	a4,-20(s0)
20015a14:	03870713          	addi	a4,a4,56
20015a18:	8ff5                	and	a5,a5,a3
20015a1a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20015a1c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20015a1e:	853e                	mv	a0,a5
20015a20:	50b2                	lw	ra,44(sp)
20015a22:	5422                	lw	s0,40(sp)
20015a24:	6145                	addi	sp,sp,48
20015a26:	8082                	ret

20015a28 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20015a28:	7179                	addi	sp,sp,-48
20015a2a:	d606                	sw	ra,44(sp)
20015a2c:	d422                	sw	s0,40(sp)
20015a2e:	1800                	addi	s0,sp,48
20015a30:	fca42e23          	sw	a0,-36(s0)
20015a34:	fcb42c23          	sw	a1,-40(s0)
20015a38:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20015a3c:	fdc42503          	lw	a0,-36(s0)
20015a40:	961ff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015a44:	87aa                	mv	a5,a0
20015a46:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20015a4a:	fd442703          	lw	a4,-44(s0)
20015a4e:	479d                	li	a5,7
20015a50:	1ce7e963          	bltu	a5,a4,20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20015a54:	fd442783          	lw	a5,-44(s0)
20015a58:	00279713          	slli	a4,a5,0x2
20015a5c:	200177b7          	lui	a5,0x20017
20015a60:	42078793          	addi	a5,a5,1056 # 20017420 <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20015a64:	97ba                	add	a5,a5,a4
20015a66:	439c                	lw	a5,0(a5)
20015a68:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20015a6a:	fec42783          	lw	a5,-20(s0)
20015a6e:	07e1                	addi	a5,a5,24
20015a70:	439c                	lw	a5,0(a5)
20015a72:	fd842703          	lw	a4,-40(s0)
20015a76:	fff74713          	not	a4,a4
20015a7a:	86ba                	mv	a3,a4
20015a7c:	fec42703          	lw	a4,-20(s0)
20015a80:	0761                	addi	a4,a4,24
20015a82:	8ff5                	and	a5,a5,a3
20015a84:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20015a86:	fec42783          	lw	a5,-20(s0)
20015a8a:	02078793          	addi	a5,a5,32
20015a8e:	439c                	lw	a5,0(a5)
20015a90:	fd842703          	lw	a4,-40(s0)
20015a94:	fff74713          	not	a4,a4
20015a98:	86ba                	mv	a3,a4
20015a9a:	fec42703          	lw	a4,-20(s0)
20015a9e:	02070713          	addi	a4,a4,32
20015aa2:	8ff5                	and	a5,a5,a3
20015aa4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20015aa6:	fec42783          	lw	a5,-20(s0)
20015aaa:	02878793          	addi	a5,a5,40
20015aae:	439c                	lw	a5,0(a5)
20015ab0:	fd842703          	lw	a4,-40(s0)
20015ab4:	fff74713          	not	a4,a4
20015ab8:	86ba                	mv	a3,a4
20015aba:	fec42703          	lw	a4,-20(s0)
20015abe:	02870713          	addi	a4,a4,40
20015ac2:	8ff5                	and	a5,a5,a3
20015ac4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20015ac6:	fec42783          	lw	a5,-20(s0)
20015aca:	03078793          	addi	a5,a5,48
20015ace:	439c                	lw	a5,0(a5)
20015ad0:	fd842703          	lw	a4,-40(s0)
20015ad4:	fff74713          	not	a4,a4
20015ad8:	86ba                	mv	a3,a4
20015ada:	fec42703          	lw	a4,-20(s0)
20015ade:	03070713          	addi	a4,a4,48
20015ae2:	8ff5                	and	a5,a5,a3
20015ae4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20015ae6:	aa35                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20015ae8:	fec42783          	lw	a5,-20(s0)
20015aec:	07e1                	addi	a5,a5,24
20015aee:	4398                	lw	a4,0(a5)
20015af0:	fd842783          	lw	a5,-40(s0)
20015af4:	fec42683          	lw	a3,-20(s0)
20015af8:	06e1                	addi	a3,a3,24
20015afa:	8fd9                	or	a5,a5,a4
20015afc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20015afe:	a215                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20015b00:	fec42783          	lw	a5,-20(s0)
20015b04:	02078793          	addi	a5,a5,32
20015b08:	4398                	lw	a4,0(a5)
20015b0a:	fd842783          	lw	a5,-40(s0)
20015b0e:	fec42683          	lw	a3,-20(s0)
20015b12:	02068693          	addi	a3,a3,32
20015b16:	8fd9                	or	a5,a5,a4
20015b18:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20015b1a:	a221                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20015b1c:	fec42783          	lw	a5,-20(s0)
20015b20:	07e1                	addi	a5,a5,24
20015b22:	4398                	lw	a4,0(a5)
20015b24:	fd842783          	lw	a5,-40(s0)
20015b28:	fec42683          	lw	a3,-20(s0)
20015b2c:	06e1                	addi	a3,a3,24
20015b2e:	8fd9                	or	a5,a5,a4
20015b30:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20015b32:	fec42783          	lw	a5,-20(s0)
20015b36:	02078793          	addi	a5,a5,32
20015b3a:	4398                	lw	a4,0(a5)
20015b3c:	fd842783          	lw	a5,-40(s0)
20015b40:	fec42683          	lw	a3,-20(s0)
20015b44:	02068693          	addi	a3,a3,32
20015b48:	8fd9                	or	a5,a5,a4
20015b4a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20015b4c:	a8d9                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20015b4e:	fec42783          	lw	a5,-20(s0)
20015b52:	02878793          	addi	a5,a5,40
20015b56:	4398                	lw	a4,0(a5)
20015b58:	fd842783          	lw	a5,-40(s0)
20015b5c:	fec42683          	lw	a3,-20(s0)
20015b60:	02868693          	addi	a3,a3,40
20015b64:	8fd9                	or	a5,a5,a4
20015b66:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20015b68:	a86d                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20015b6a:	fec42783          	lw	a5,-20(s0)
20015b6e:	03078793          	addi	a5,a5,48
20015b72:	4398                	lw	a4,0(a5)
20015b74:	fd842783          	lw	a5,-40(s0)
20015b78:	fec42683          	lw	a3,-20(s0)
20015b7c:	03068693          	addi	a3,a3,48
20015b80:	8fd9                	or	a5,a5,a4
20015b82:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20015b84:	a879                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20015b86:	fec42783          	lw	a5,-20(s0)
20015b8a:	02878793          	addi	a5,a5,40
20015b8e:	4398                	lw	a4,0(a5)
20015b90:	fd842783          	lw	a5,-40(s0)
20015b94:	fec42683          	lw	a3,-20(s0)
20015b98:	02868693          	addi	a3,a3,40
20015b9c:	8fd9                	or	a5,a5,a4
20015b9e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20015ba0:	fec42783          	lw	a5,-20(s0)
20015ba4:	03078793          	addi	a5,a5,48
20015ba8:	4398                	lw	a4,0(a5)
20015baa:	fd842783          	lw	a5,-40(s0)
20015bae:	fec42683          	lw	a3,-20(s0)
20015bb2:	03068693          	addi	a3,a3,48
20015bb6:	8fd9                	or	a5,a5,a4
20015bb8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20015bba:	a0a5                	j	20015c22 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20015bbc:	fec42783          	lw	a5,-20(s0)
20015bc0:	07e1                	addi	a5,a5,24
20015bc2:	4398                	lw	a4,0(a5)
20015bc4:	fd842783          	lw	a5,-40(s0)
20015bc8:	fec42683          	lw	a3,-20(s0)
20015bcc:	06e1                	addi	a3,a3,24
20015bce:	8fd9                	or	a5,a5,a4
20015bd0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20015bd2:	fec42783          	lw	a5,-20(s0)
20015bd6:	02078793          	addi	a5,a5,32
20015bda:	4398                	lw	a4,0(a5)
20015bdc:	fd842783          	lw	a5,-40(s0)
20015be0:	fec42683          	lw	a3,-20(s0)
20015be4:	02068693          	addi	a3,a3,32
20015be8:	8fd9                	or	a5,a5,a4
20015bea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20015bec:	fec42783          	lw	a5,-20(s0)
20015bf0:	02878793          	addi	a5,a5,40
20015bf4:	4398                	lw	a4,0(a5)
20015bf6:	fd842783          	lw	a5,-40(s0)
20015bfa:	fec42683          	lw	a3,-20(s0)
20015bfe:	02868693          	addi	a3,a3,40
20015c02:	8fd9                	or	a5,a5,a4
20015c04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20015c06:	fec42783          	lw	a5,-20(s0)
20015c0a:	03078793          	addi	a5,a5,48
20015c0e:	4398                	lw	a4,0(a5)
20015c10:	fd842783          	lw	a5,-40(s0)
20015c14:	fec42683          	lw	a3,-20(s0)
20015c18:	03068693          	addi	a3,a3,48
20015c1c:	8fd9                	or	a5,a5,a4
20015c1e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20015c20:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20015c22:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20015c24:	853e                	mv	a0,a5
20015c26:	50b2                	lw	ra,44(sp)
20015c28:	5422                	lw	s0,40(sp)
20015c2a:	6145                	addi	sp,sp,48
20015c2c:	8082                	ret

20015c2e <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20015c2e:	7179                	addi	sp,sp,-48
20015c30:	d606                	sw	ra,44(sp)
20015c32:	d422                	sw	s0,40(sp)
20015c34:	1800                	addi	s0,sp,48
20015c36:	fca42e23          	sw	a0,-36(s0)
20015c3a:	fcb42c23          	sw	a1,-40(s0)
20015c3e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20015c42:	fdc42503          	lw	a0,-36(s0)
20015c46:	f5aff0ef          	jal	ra,200153a0 <__metal_driver_sifive_gpio0_base>
20015c4a:	87aa                	mv	a5,a0
20015c4c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20015c50:	fd442703          	lw	a4,-44(s0)
20015c54:	479d                	li	a5,7
20015c56:	14e7ea63          	bltu	a5,a4,20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
20015c5a:	fd442783          	lw	a5,-44(s0)
20015c5e:	00279713          	slli	a4,a5,0x2
20015c62:	200177b7          	lui	a5,0x20017
20015c66:	44078793          	addi	a5,a5,1088 # 20017440 <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
20015c6a:	97ba                	add	a5,a5,a4
20015c6c:	439c                	lw	a5,0(a5)
20015c6e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20015c70:	fec42783          	lw	a5,-20(s0)
20015c74:	07f1                	addi	a5,a5,28
20015c76:	4398                	lw	a4,0(a5)
20015c78:	fd842783          	lw	a5,-40(s0)
20015c7c:	fec42683          	lw	a3,-20(s0)
20015c80:	06f1                	addi	a3,a3,28
20015c82:	8fd9                	or	a5,a5,a4
20015c84:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20015c86:	a215                	j	20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20015c88:	fec42783          	lw	a5,-20(s0)
20015c8c:	02478793          	addi	a5,a5,36
20015c90:	4398                	lw	a4,0(a5)
20015c92:	fd842783          	lw	a5,-40(s0)
20015c96:	fec42683          	lw	a3,-20(s0)
20015c9a:	02468693          	addi	a3,a3,36
20015c9e:	8fd9                	or	a5,a5,a4
20015ca0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20015ca2:	a221                	j	20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20015ca4:	fec42783          	lw	a5,-20(s0)
20015ca8:	07f1                	addi	a5,a5,28
20015caa:	4398                	lw	a4,0(a5)
20015cac:	fd842783          	lw	a5,-40(s0)
20015cb0:	fec42683          	lw	a3,-20(s0)
20015cb4:	06f1                	addi	a3,a3,28
20015cb6:	8fd9                	or	a5,a5,a4
20015cb8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20015cba:	fec42783          	lw	a5,-20(s0)
20015cbe:	02478793          	addi	a5,a5,36
20015cc2:	4398                	lw	a4,0(a5)
20015cc4:	fd842783          	lw	a5,-40(s0)
20015cc8:	fec42683          	lw	a3,-20(s0)
20015ccc:	02468693          	addi	a3,a3,36
20015cd0:	8fd9                	or	a5,a5,a4
20015cd2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20015cd4:	a8d9                	j	20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20015cd6:	fec42783          	lw	a5,-20(s0)
20015cda:	02c78793          	addi	a5,a5,44
20015cde:	4398                	lw	a4,0(a5)
20015ce0:	fd842783          	lw	a5,-40(s0)
20015ce4:	fec42683          	lw	a3,-20(s0)
20015ce8:	02c68693          	addi	a3,a3,44
20015cec:	8fd9                	or	a5,a5,a4
20015cee:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20015cf0:	a86d                	j	20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20015cf2:	fec42783          	lw	a5,-20(s0)
20015cf6:	03478793          	addi	a5,a5,52
20015cfa:	4398                	lw	a4,0(a5)
20015cfc:	fd842783          	lw	a5,-40(s0)
20015d00:	fec42683          	lw	a3,-20(s0)
20015d04:	03468693          	addi	a3,a3,52
20015d08:	8fd9                	or	a5,a5,a4
20015d0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20015d0c:	a879                	j	20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20015d0e:	fec42783          	lw	a5,-20(s0)
20015d12:	02c78793          	addi	a5,a5,44
20015d16:	4398                	lw	a4,0(a5)
20015d18:	fd842783          	lw	a5,-40(s0)
20015d1c:	fec42683          	lw	a3,-20(s0)
20015d20:	02c68693          	addi	a3,a3,44
20015d24:	8fd9                	or	a5,a5,a4
20015d26:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20015d28:	fec42783          	lw	a5,-20(s0)
20015d2c:	03478793          	addi	a5,a5,52
20015d30:	4398                	lw	a4,0(a5)
20015d32:	fd842783          	lw	a5,-40(s0)
20015d36:	fec42683          	lw	a3,-20(s0)
20015d3a:	03468693          	addi	a3,a3,52
20015d3e:	8fd9                	or	a5,a5,a4
20015d40:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20015d42:	a0a5                	j	20015daa <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20015d44:	fec42783          	lw	a5,-20(s0)
20015d48:	07f1                	addi	a5,a5,28
20015d4a:	4398                	lw	a4,0(a5)
20015d4c:	fd842783          	lw	a5,-40(s0)
20015d50:	fec42683          	lw	a3,-20(s0)
20015d54:	06f1                	addi	a3,a3,28
20015d56:	8fd9                	or	a5,a5,a4
20015d58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20015d5a:	fec42783          	lw	a5,-20(s0)
20015d5e:	02478793          	addi	a5,a5,36
20015d62:	4398                	lw	a4,0(a5)
20015d64:	fd842783          	lw	a5,-40(s0)
20015d68:	fec42683          	lw	a3,-20(s0)
20015d6c:	02468693          	addi	a3,a3,36
20015d70:	8fd9                	or	a5,a5,a4
20015d72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20015d74:	fec42783          	lw	a5,-20(s0)
20015d78:	02c78793          	addi	a5,a5,44
20015d7c:	4398                	lw	a4,0(a5)
20015d7e:	fd842783          	lw	a5,-40(s0)
20015d82:	fec42683          	lw	a3,-20(s0)
20015d86:	02c68693          	addi	a3,a3,44
20015d8a:	8fd9                	or	a5,a5,a4
20015d8c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20015d8e:	fec42783          	lw	a5,-20(s0)
20015d92:	03478793          	addi	a5,a5,52
20015d96:	4398                	lw	a4,0(a5)
20015d98:	fd842783          	lw	a5,-40(s0)
20015d9c:	fec42683          	lw	a3,-20(s0)
20015da0:	03468693          	addi	a3,a3,52
20015da4:	8fd9                	or	a5,a5,a4
20015da6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20015da8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20015daa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20015dac:	853e                	mv	a0,a5
20015dae:	50b2                	lw	ra,44(sp)
20015db0:	5422                	lw	s0,40(sp)
20015db2:	6145                	addi	sp,sp,48
20015db4:	8082                	ret

20015db6 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20015db6:	1101                	addi	sp,sp,-32
20015db8:	ce06                	sw	ra,28(sp)
20015dba:	cc22                	sw	s0,24(sp)
20015dbc:	1000                	addi	s0,sp,32
20015dbe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20015dc2:	fec42503          	lw	a0,-20(s0)
20015dc6:	e00ff0ef          	jal	ra,200153c6 <__metal_driver_sifive_gpio0_interrupt_parent>
20015dca:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20015dcc:	853e                	mv	a0,a5
20015dce:	40f2                	lw	ra,28(sp)
20015dd0:	4462                	lw	s0,24(sp)
20015dd2:	6105                	addi	sp,sp,32
20015dd4:	8082                	ret

20015dd6 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20015dd6:	7179                	addi	sp,sp,-48
20015dd8:	d606                	sw	ra,44(sp)
20015dda:	d422                	sw	s0,40(sp)
20015ddc:	1800                	addi	s0,sp,48
20015dde:	fca42e23          	sw	a0,-36(s0)
20015de2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20015de6:	fd842583          	lw	a1,-40(s0)
20015dea:	fdc42503          	lw	a0,-36(s0)
20015dee:	e02ff0ef          	jal	ra,200153f0 <__metal_driver_sifive_gpio0_interrupt_lines>
20015df2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20015df6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20015dfa:	853e                	mv	a0,a5
20015dfc:	50b2                	lw	ra,44(sp)
20015dfe:	5422                	lw	s0,40(sp)
20015e00:	6145                	addi	sp,sp,48
20015e02:	8082                	ret

20015e04 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:738
{
20015e04:	1101                	addi	sp,sp,-32
20015e06:	ce22                	sw	s0,28(sp)
20015e08:	1000                	addi	s0,sp,32
20015e0a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:739
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015e0e:	fec42703          	lw	a4,-20(s0)
20015e12:	800017b7          	lui	a5,0x80001
20015e16:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015e1a:	00f71563          	bne	a4,a5,20015e24 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:740
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20015e1e:	100137b7          	lui	a5,0x10013
20015e22:	a829                	j	20015e3c <__metal_driver_sifive_uart0_control_base+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:742
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015e24:	fec42703          	lw	a4,-20(s0)
20015e28:	800017b7          	lui	a5,0x80001
20015e2c:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015e30:	00f71563          	bne	a4,a5,20015e3a <__metal_driver_sifive_uart0_control_base+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:743
		return METAL_SIFIVE_UART0_10023000_BASE_ADDRESS;
20015e34:	100237b7          	lui	a5,0x10023
20015e38:	a011                	j	20015e3c <__metal_driver_sifive_uart0_control_base+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:746
		return 0;
20015e3a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:748
}
20015e3c:	853e                	mv	a0,a5
20015e3e:	4472                	lw	s0,28(sp)
20015e40:	6105                	addi	sp,sp,32
20015e42:	8082                	ret

20015e44 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:777
{
20015e44:	1101                	addi	sp,sp,-32
20015e46:	ce22                	sw	s0,28(sp)
20015e48:	1000                	addi	s0,sp,32
20015e4a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:778
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015e4e:	fec42703          	lw	a4,-20(s0)
20015e52:	800017b7          	lui	a5,0x80001
20015e56:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015e5a:	00f71763          	bne	a4,a5,20015e68 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:779
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20015e5e:	800017b7          	lui	a5,0x80001
20015e62:	c1878793          	addi	a5,a5,-1000 # 80000c18 <metal_segment_heap_target_end+0xffffecb4>
20015e66:	a821                	j	20015e7e <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:781
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015e68:	fec42703          	lw	a4,-20(s0)
20015e6c:	800017b7          	lui	a5,0x80001
20015e70:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015e74:	00f71463          	bne	a4,a5,20015e7c <__metal_driver_sifive_uart0_interrupt_parent+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:782
		return NULL;
20015e78:	4781                	li	a5,0
20015e7a:	a011                	j	20015e7e <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:785
		return 0;
20015e7c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:787
}
20015e7e:	853e                	mv	a0,a5
20015e80:	4472                	lw	s0,28(sp)
20015e82:	6105                	addi	sp,sp,32
20015e84:	8082                	ret

20015e86 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:790
{
20015e86:	1101                	addi	sp,sp,-32
20015e88:	ce22                	sw	s0,28(sp)
20015e8a:	1000                	addi	s0,sp,32
20015e8c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:791
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015e90:	fec42703          	lw	a4,-20(s0)
20015e94:	800017b7          	lui	a5,0x80001
20015e98:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015e9c:	00f71463          	bne	a4,a5,20015ea4 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:792
		return 3;
20015ea0:	478d                	li	a5,3
20015ea2:	a821                	j	20015eba <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:794
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015ea4:	fec42703          	lw	a4,-20(s0)
20015ea8:	800017b7          	lui	a5,0x80001
20015eac:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015eb0:	00f71463          	bne	a4,a5,20015eb8 <__metal_driver_sifive_uart0_interrupt_line+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:795
		return 4;
20015eb4:	4791                	li	a5,4
20015eb6:	a011                	j	20015eba <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:798
		return 0;
20015eb8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:800
}
20015eba:	853e                	mv	a0,a5
20015ebc:	4472                	lw	s0,28(sp)
20015ebe:	6105                	addi	sp,sp,32
20015ec0:	8082                	ret

20015ec2 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:803
{
20015ec2:	1101                	addi	sp,sp,-32
20015ec4:	ce22                	sw	s0,28(sp)
20015ec6:	1000                	addi	s0,sp,32
20015ec8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:804
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015ecc:	fec42703          	lw	a4,-20(s0)
20015ed0:	800017b7          	lui	a5,0x80001
20015ed4:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015ed8:	00f71763          	bne	a4,a5,20015ee6 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:805
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20015edc:	800017b7          	lui	a5,0x80001
20015ee0:	24878793          	addi	a5,a5,584 # 80001248 <metal_segment_heap_target_end+0xfffff2e4>
20015ee4:	a839                	j	20015f02 <__metal_driver_sifive_uart0_clock+0x40>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:807
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015ee6:	fec42703          	lw	a4,-20(s0)
20015eea:	800017b7          	lui	a5,0x80001
20015eee:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015ef2:	00f71763          	bne	a4,a5,20015f00 <__metal_driver_sifive_uart0_clock+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:808
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20015ef6:	800017b7          	lui	a5,0x80001
20015efa:	24878793          	addi	a5,a5,584 # 80001248 <metal_segment_heap_target_end+0xfffff2e4>
20015efe:	a011                	j	20015f02 <__metal_driver_sifive_uart0_clock+0x40>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:811
		return 0;
20015f00:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:813
}
20015f02:	853e                	mv	a0,a5
20015f04:	4472                	lw	s0,28(sp)
20015f06:	6105                	addi	sp,sp,32
20015f08:	8082                	ret

20015f0a <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:816
{
20015f0a:	1101                	addi	sp,sp,-32
20015f0c:	ce22                	sw	s0,28(sp)
20015f0e:	1000                	addi	s0,sp,32
20015f10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:817
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015f14:	fec42703          	lw	a4,-20(s0)
20015f18:	800017b7          	lui	a5,0x80001
20015f1c:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015f20:	00f71563          	bne	a4,a5,20015f2a <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:818
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20015f24:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015f28:	a829                	j	20015f42 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:820
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015f2a:	fec42703          	lw	a4,-20(s0)
20015f2e:	800017b7          	lui	a5,0x80001
20015f32:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015f36:	00f71563          	bne	a4,a5,20015f40 <__metal_driver_sifive_uart0_pinmux+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:821
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20015f3a:	81c18793          	addi	a5,gp,-2020 # 80001274 <__metal_dt_gpio_10012000>
20015f3e:	a011                	j	20015f42 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:824
		return 0;
20015f40:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:826
}
20015f42:	853e                	mv	a0,a5
20015f44:	4472                	lw	s0,28(sp)
20015f46:	6105                	addi	sp,sp,32
20015f48:	8082                	ret

20015f4a <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:829
{
20015f4a:	1101                	addi	sp,sp,-32
20015f4c:	ce22                	sw	s0,28(sp)
20015f4e:	1000                	addi	s0,sp,32
20015f50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:830
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015f54:	fec42703          	lw	a4,-20(s0)
20015f58:	800017b7          	lui	a5,0x80001
20015f5c:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015f60:	00f71563          	bne	a4,a5,20015f6a <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:831
		return 196608;
20015f64:	000307b7          	lui	a5,0x30
20015f68:	a829                	j	20015f82 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:833
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015f6a:	fec42703          	lw	a4,-20(s0)
20015f6e:	800017b7          	lui	a5,0x80001
20015f72:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015f76:	00f71563          	bne	a4,a5,20015f80 <__metal_driver_sifive_uart0_pinmux_output_selector+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:834
		return 8650752;
20015f7a:	008407b7          	lui	a5,0x840
20015f7e:	a011                	j	20015f82 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:837
		return 0;
20015f80:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:839
}
20015f82:	853e                	mv	a0,a5
20015f84:	4472                	lw	s0,28(sp)
20015f86:	6105                	addi	sp,sp,32
20015f88:	8082                	ret

20015f8a <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:842
{
20015f8a:	1101                	addi	sp,sp,-32
20015f8c:	ce22                	sw	s0,28(sp)
20015f8e:	1000                	addi	s0,sp,32
20015f90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:843
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20015f94:	fec42703          	lw	a4,-20(s0)
20015f98:	800017b7          	lui	a5,0x80001
20015f9c:	1f078793          	addi	a5,a5,496 # 800011f0 <metal_segment_heap_target_end+0xfffff28c>
20015fa0:	00f71563          	bne	a4,a5,20015faa <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:844
		return 196608;
20015fa4:	000307b7          	lui	a5,0x30
20015fa8:	a829                	j	20015fc2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:846
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20015faa:	fec42703          	lw	a4,-20(s0)
20015fae:	800017b7          	lui	a5,0x80001
20015fb2:	21078793          	addi	a5,a5,528 # 80001210 <metal_segment_heap_target_end+0xfffff2ac>
20015fb6:	00f71563          	bne	a4,a5,20015fc0 <__metal_driver_sifive_uart0_pinmux_source_selector+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:847
		return 8650752;
20015fba:	008407b7          	lui	a5,0x840
20015fbe:	a011                	j	20015fc2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:850
		return 0;
20015fc0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:852
}
20015fc2:	853e                	mv	a0,a5
20015fc4:	4472                	lw	s0,28(sp)
20015fc6:	6105                	addi	sp,sp,32
20015fc8:	8082                	ret

20015fca <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20015fca:	1101                	addi	sp,sp,-32
20015fcc:	ce06                	sw	ra,28(sp)
20015fce:	cc22                	sw	s0,24(sp)
20015fd0:	1000                	addi	s0,sp,32
20015fd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20015fd6:	fec42503          	lw	a0,-20(s0)
20015fda:	e6bff0ef          	jal	ra,20015e44 <__metal_driver_sifive_uart0_interrupt_parent>
20015fde:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20015fe0:	853e                	mv	a0,a5
20015fe2:	40f2                	lw	ra,28(sp)
20015fe4:	4462                	lw	s0,24(sp)
20015fe6:	6105                	addi	sp,sp,32
20015fe8:	8082                	ret

20015fea <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20015fea:	1101                	addi	sp,sp,-32
20015fec:	ce06                	sw	ra,28(sp)
20015fee:	cc22                	sw	s0,24(sp)
20015ff0:	1000                	addi	s0,sp,32
20015ff2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20015ff6:	fec42503          	lw	a0,-20(s0)
20015ffa:	e8dff0ef          	jal	ra,20015e86 <__metal_driver_sifive_uart0_interrupt_line>
20015ffe:	87aa                	mv	a5,a0
20016000:	02078793          	addi	a5,a5,32 # 840020 <__heap_size+0x83f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20016004:	853e                	mv	a0,a5
20016006:	40f2                	lw	ra,28(sp)
20016008:	4462                	lw	s0,24(sp)
2001600a:	6105                	addi	sp,sp,32
2001600c:	8082                	ret

2001600e <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
2001600e:	7179                	addi	sp,sp,-48
20016010:	d606                	sw	ra,44(sp)
20016012:	d422                	sw	s0,40(sp)
20016014:	1800                	addi	s0,sp,48
20016016:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
2001601a:	fdc42503          	lw	a0,-36(s0)
2001601e:	de7ff0ef          	jal	ra,20015e04 <__metal_driver_sifive_uart0_control_base>
20016022:	87aa                	mv	a5,a0
20016024:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20016028:	fec42783          	lw	a5,-20(s0)
2001602c:	439c                	lw	a5,0(a5)
2001602e:	fff7c793          	not	a5,a5
20016032:	83fd                	srli	a5,a5,0x1f
20016034:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20016038:	853e                	mv	a0,a5
2001603a:	50b2                	lw	ra,44(sp)
2001603c:	5422                	lw	s0,40(sp)
2001603e:	6145                	addi	sp,sp,48
20016040:	8082                	ret

20016042 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20016042:	7179                	addi	sp,sp,-48
20016044:	d606                	sw	ra,44(sp)
20016046:	d422                	sw	s0,40(sp)
20016048:	1800                	addi	s0,sp,48
2001604a:	fca42e23          	sw	a0,-36(s0)
2001604e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016052:	fdc42503          	lw	a0,-36(s0)
20016056:	dafff0ef          	jal	ra,20015e04 <__metal_driver_sifive_uart0_control_base>
2001605a:	87aa                	mv	a5,a0
2001605c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20016060:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20016062:	fdc42503          	lw	a0,-36(s0)
20016066:	3765                	jal	2001600e <__metal_driver_sifive_uart0_txready>
20016068:	87aa                	mv	a5,a0
2001606a:	dfe5                	beqz	a5,20016062 <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
2001606c:	fec42783          	lw	a5,-20(s0)
20016070:	fd842703          	lw	a4,-40(s0)
20016074:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20016076:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20016078:	853e                	mv	a0,a5
2001607a:	50b2                	lw	ra,44(sp)
2001607c:	5422                	lw	s0,40(sp)
2001607e:	6145                	addi	sp,sp,48
20016080:	8082                	ret

20016082 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20016082:	7179                	addi	sp,sp,-48
20016084:	d606                	sw	ra,44(sp)
20016086:	d422                	sw	s0,40(sp)
20016088:	1800                	addi	s0,sp,48
2001608a:	fca42e23          	sw	a0,-36(s0)
2001608e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016092:	fdc42503          	lw	a0,-36(s0)
20016096:	d6fff0ef          	jal	ra,20015e04 <__metal_driver_sifive_uart0_control_base>
2001609a:	87aa                	mv	a5,a0
2001609c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
200160a0:	fec42783          	lw	a5,-20(s0)
200160a4:	0791                	addi	a5,a5,4
200160a6:	439c                	lw	a5,0(a5)
200160a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
200160ac:	fe842783          	lw	a5,-24(s0)
200160b0:	0007d763          	bgez	a5,200160be <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
200160b4:	fd842783          	lw	a5,-40(s0)
200160b8:	577d                	li	a4,-1
200160ba:	c398                	sw	a4,0(a5)
200160bc:	a801                	j	200160cc <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
200160be:	fe842783          	lw	a5,-24(s0)
200160c2:	0ff7f713          	andi	a4,a5,255
200160c6:	fd842783          	lw	a5,-40(s0)
200160ca:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
200160cc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
200160ce:	853e                	mv	a0,a5
200160d0:	50b2                	lw	ra,44(sp)
200160d2:	5422                	lw	s0,40(sp)
200160d4:	6145                	addi	sp,sp,48
200160d6:	8082                	ret

200160d8 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
200160d8:	7179                	addi	sp,sp,-48
200160da:	d622                	sw	s0,44(sp)
200160dc:	1800                	addi	s0,sp,48
200160de:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
200160e2:	fdc42783          	lw	a5,-36(s0)
200160e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
200160ea:	fec42783          	lw	a5,-20(s0)
200160ee:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
200160f0:	853e                	mv	a0,a5
200160f2:	5432                	lw	s0,44(sp)
200160f4:	6145                	addi	sp,sp,48
200160f6:	8082                	ret

200160f8 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
200160f8:	7179                	addi	sp,sp,-48
200160fa:	d606                	sw	ra,44(sp)
200160fc:	d422                	sw	s0,40(sp)
200160fe:	1800                	addi	s0,sp,48
20016100:	fca42e23          	sw	a0,-36(s0)
20016104:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20016108:	fdc42783          	lw	a5,-36(s0)
2001610c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20016110:	fdc42503          	lw	a0,-36(s0)
20016114:	cf1ff0ef          	jal	ra,20015e04 <__metal_driver_sifive_uart0_control_base>
20016118:	87aa                	mv	a5,a0
2001611a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
2001611e:	fdc42503          	lw	a0,-36(s0)
20016122:	da1ff0ef          	jal	ra,20015ec2 <__metal_driver_sifive_uart0_clock>
20016126:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
2001612a:	fd842703          	lw	a4,-40(s0)
2001612e:	fec42783          	lw	a5,-20(s0)
20016132:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20016134:	fe442783          	lw	a5,-28(s0)
20016138:	cbb1                	beqz	a5,2001618c <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
2001613a:	fe442783          	lw	a5,-28(s0)
2001613e:	439c                	lw	a5,0(a5)
20016140:	439c                	lw	a5,0(a5)
20016142:	fe442503          	lw	a0,-28(s0)
20016146:	9782                	jalr	a5
20016148:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
2001614c:	fe042703          	lw	a4,-32(s0)
20016150:	fd842783          	lw	a5,-40(s0)
20016154:	02f747b3          	div	a5,a4,a5
20016158:	fff78713          	addi	a4,a5,-1
2001615c:	fe842783          	lw	a5,-24(s0)
20016160:	07e1                	addi	a5,a5,24
20016162:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20016164:	fe842783          	lw	a5,-24(s0)
20016168:	07a1                	addi	a5,a5,8
2001616a:	439c                	lw	a5,0(a5)
2001616c:	fe842703          	lw	a4,-24(s0)
20016170:	0721                	addi	a4,a4,8
20016172:	0017e793          	ori	a5,a5,1
20016176:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20016178:	fe842783          	lw	a5,-24(s0)
2001617c:	07b1                	addi	a5,a5,12
2001617e:	439c                	lw	a5,0(a5)
20016180:	fe842703          	lw	a4,-24(s0)
20016184:	0731                	addi	a4,a4,12
20016186:	0017e793          	ori	a5,a5,1
2001618a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
2001618c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
2001618e:	853e                	mv	a0,a5
20016190:	50b2                	lw	ra,44(sp)
20016192:	5422                	lw	s0,40(sp)
20016194:	6145                	addi	sp,sp,48
20016196:	8082                	ret

20016198 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20016198:	7139                	addi	sp,sp,-64
2001619a:	de06                	sw	ra,60(sp)
2001619c:	dc22                	sw	s0,56(sp)
2001619e:	0080                	addi	s0,sp,64
200161a0:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
200161a4:	fcc42783          	lw	a5,-52(s0)
200161a8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
200161ac:	fcc42503          	lw	a0,-52(s0)
200161b0:	c55ff0ef          	jal	ra,20015e04 <__metal_driver_sifive_uart0_control_base>
200161b4:	87aa                	mv	a5,a0
200161b6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
200161ba:	fcc42503          	lw	a0,-52(s0)
200161be:	d05ff0ef          	jal	ra,20015ec2 <__metal_driver_sifive_uart0_clock>
200161c2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
200161c6:	fe842783          	lw	a5,-24(s0)
200161ca:	07a1                	addi	a5,a5,8
200161cc:	4398                	lw	a4,0(a5)
200161ce:	fe842783          	lw	a5,-24(s0)
200161d2:	07a1                	addi	a5,a5,8
200161d4:	86be                	mv	a3,a5
200161d6:	fff907b7          	lui	a5,0xfff90
200161da:	17fd                	addi	a5,a5,-1
200161dc:	8ff9                	and	a5,a5,a4
200161de:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
200161e0:	fe842783          	lw	a5,-24(s0)
200161e4:	07a1                	addi	a5,a5,8
200161e6:	4398                	lw	a4,0(a5)
200161e8:	fe842783          	lw	a5,-24(s0)
200161ec:	07a1                	addi	a5,a5,8
200161ee:	86be                	mv	a3,a5
200161f0:	67c1                	lui	a5,0x10
200161f2:	8fd9                	or	a5,a5,a4
200161f4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
200161f6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
200161f8:	fe842783          	lw	a5,-24(s0)
200161fc:	07d1                	addi	a5,a5,20
200161fe:	439c                	lw	a5,0(a5)
20016200:	8b85                	andi	a5,a5,1
20016202:	dbfd                	beqz	a5,200161f8 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20016204:	fe842783          	lw	a5,-24(s0)
20016208:	07a1                	addi	a5,a5,8
2001620a:	439c                	lw	a5,0(a5)
2001620c:	8b89                	andi	a5,a5,2
2001620e:	c399                	beqz	a5,20016214 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20016210:	47a5                	li	a5,9
20016212:	a011                	j	20016216 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20016214:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20016216:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
2001621a:	fe442783          	lw	a5,-28(s0)
2001621e:	439c                	lw	a5,0(a5)
20016220:	439c                	lw	a5,0(a5)
20016222:	fe442503          	lw	a0,-28(s0)
20016226:	9782                	jalr	a5
20016228:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
2001622c:	fe042703          	lw	a4,-32(s0)
20016230:	fdc42783          	lw	a5,-36(s0)
20016234:	02f707b3          	mul	a5,a4,a5
20016238:	873e                	mv	a4,a5
2001623a:	fec42783          	lw	a5,-20(s0)
2001623e:	43dc                	lw	a5,4(a5)
20016240:	02f757b3          	divu	a5,a4,a5
20016244:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20016248:	fc042a23          	sw	zero,-44(s0)
2001624c:	a039                	j	2001625a <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
2001624e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20016250:	fd442783          	lw	a5,-44(s0)
20016254:	0785                	addi	a5,a5,1
20016256:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
2001625a:	fd442783          	lw	a5,-44(s0)
2001625e:	fd842703          	lw	a4,-40(s0)
20016262:	fee7c6e3          	blt	a5,a4,2001624e <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20016266:	0001                	nop
20016268:	50f2                	lw	ra,60(sp)
2001626a:	5462                	lw	s0,56(sp)
2001626c:	6121                	addi	sp,sp,64
2001626e:	8082                	ret

20016270 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20016270:	7179                	addi	sp,sp,-48
20016272:	d606                	sw	ra,44(sp)
20016274:	d422                	sw	s0,40(sp)
20016276:	1800                	addi	s0,sp,48
20016278:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
2001627c:	fdc42783          	lw	a5,-36(s0)
20016280:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20016284:	fec42703          	lw	a4,-20(s0)
20016288:	fec42783          	lw	a5,-20(s0)
2001628c:	43dc                	lw	a5,4(a5)
2001628e:	85be                	mv	a1,a5
20016290:	853a                	mv	a0,a4
20016292:	a4afc0ef          	jal	ra,200124dc <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20016296:	0001                	nop
20016298:	50b2                	lw	ra,44(sp)
2001629a:	5422                	lw	s0,40(sp)
2001629c:	6145                	addi	sp,sp,48
2001629e:	8082                	ret

200162a0 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
200162a0:	7139                	addi	sp,sp,-64
200162a2:	de06                	sw	ra,60(sp)
200162a4:	dc22                	sw	s0,56(sp)
200162a6:	0080                	addi	s0,sp,64
200162a8:	fca42623          	sw	a0,-52(s0)
200162ac:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
200162b0:	fcc42783          	lw	a5,-52(s0)
200162b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
200162b8:	fcc42503          	lw	a0,-52(s0)
200162bc:	c07ff0ef          	jal	ra,20015ec2 <__metal_driver_sifive_uart0_clock>
200162c0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
200162c4:	fcc42503          	lw	a0,-52(s0)
200162c8:	c43ff0ef          	jal	ra,20015f0a <__metal_driver_sifive_uart0_pinmux>
200162cc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
200162d0:	fe842783          	lw	a5,-24(s0)
200162d4:	c7b9                	beqz	a5,20016322 <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
200162d6:	fec42783          	lw	a5,-20(s0)
200162da:	20016737          	lui	a4,0x20016
200162de:	19870713          	addi	a4,a4,408 # 20016198 <pre_rate_change_callback_func>
200162e2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
200162e4:	fec42783          	lw	a5,-20(s0)
200162e8:	fcc42703          	lw	a4,-52(s0)
200162ec:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
200162ee:	fec42783          	lw	a5,-20(s0)
200162f2:	07a1                	addi	a5,a5,8
200162f4:	85be                	mv	a1,a5
200162f6:	fe842503          	lw	a0,-24(s0)
200162fa:	2abd                	jal	20016478 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
200162fc:	fec42783          	lw	a5,-20(s0)
20016300:	20016737          	lui	a4,0x20016
20016304:	27070713          	addi	a4,a4,624 # 20016270 <post_rate_change_callback_func>
20016308:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
2001630a:	fec42783          	lw	a5,-20(s0)
2001630e:	fcc42703          	lw	a4,-52(s0)
20016312:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20016314:	fec42783          	lw	a5,-20(s0)
20016318:	07d1                	addi	a5,a5,20
2001631a:	85be                	mv	a1,a5
2001631c:	fe842503          	lw	a0,-24(s0)
20016320:	2269                	jal	200164aa <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20016322:	fec42783          	lw	a5,-20(s0)
20016326:	fc842583          	lw	a1,-56(s0)
2001632a:	853e                	mv	a0,a5
2001632c:	9b0fc0ef          	jal	ra,200124dc <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20016330:	fe442783          	lw	a5,-28(s0)
20016334:	cb95                	beqz	a5,20016368 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20016336:	fcc42503          	lw	a0,-52(s0)
2001633a:	c11ff0ef          	jal	ra,20015f4a <__metal_driver_sifive_uart0_pinmux_output_selector>
2001633e:	87aa                	mv	a5,a0
20016340:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20016344:	fcc42503          	lw	a0,-52(s0)
20016348:	c43ff0ef          	jal	ra,20015f8a <__metal_driver_sifive_uart0_pinmux_source_selector>
2001634c:	87aa                	mv	a5,a0
2001634e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20016352:	fe442783          	lw	a5,-28(s0)
20016356:	439c                	lw	a5,0(a5)
20016358:	53dc                	lw	a5,36(a5)
2001635a:	fdc42603          	lw	a2,-36(s0)
2001635e:	fe042583          	lw	a1,-32(s0)
20016362:	fe442503          	lw	a0,-28(s0)
20016366:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20016368:	0001                	nop
2001636a:	50f2                	lw	ra,60(sp)
2001636c:	5462                	lw	s0,56(sp)
2001636e:	6121                	addi	sp,sp,64
20016370:	8082                	ret

20016372 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20016372:	7179                	addi	sp,sp,-48
20016374:	d606                	sw	ra,44(sp)
20016376:	d422                	sw	s0,40(sp)
20016378:	1800                	addi	s0,sp,48
2001637a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
2001637e:	fdc42783          	lw	a5,-36(s0)
20016382:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
20016386:	a831                	j	200163a2 <_metal_clock_call_all_callbacks+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
20016388:	fec42783          	lw	a5,-20(s0)
2001638c:	4398                	lw	a4,0(a5)
2001638e:	fec42783          	lw	a5,-20(s0)
20016392:	43dc                	lw	a5,4(a5)
20016394:	853e                	mv	a0,a5
20016396:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:52
        current = current->_next;
20016398:	fec42783          	lw	a5,-20(s0)
2001639c:	479c                	lw	a5,8(a5)
2001639e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
200163a2:	fec42783          	lw	a5,-20(s0)
200163a6:	f3ed                	bnez	a5,20016388 <_metal_clock_call_all_callbacks+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:54
    }
}
200163a8:	0001                	nop
200163aa:	50b2                	lw	ra,44(sp)
200163ac:	5422                	lw	s0,40(sp)
200163ae:	6145                	addi	sp,sp,48
200163b0:	8082                	ret

200163b2 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
200163b2:	7179                	addi	sp,sp,-48
200163b4:	d622                	sw	s0,44(sp)
200163b6:	1800                	addi	s0,sp,48
200163b8:	fca42e23          	sw	a0,-36(s0)
200163bc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
200163c0:	fd842783          	lw	a5,-40(s0)
200163c4:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
200163c8:	fdc42783          	lw	a5,-36(s0)
200163cc:	e781                	bnez	a5,200163d4 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
200163ce:	fd842783          	lw	a5,-40(s0)
200163d2:	a035                	j	200163fe <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
200163d4:	fdc42783          	lw	a5,-36(s0)
200163d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
200163dc:	a031                	j	200163e8 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
200163de:	fec42783          	lw	a5,-20(s0)
200163e2:	479c                	lw	a5,8(a5)
200163e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
200163e8:	fec42783          	lw	a5,-20(s0)
200163ec:	479c                	lw	a5,8(a5)
200163ee:	fbe5                	bnez	a5,200163de <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
200163f0:	fec42783          	lw	a5,-20(s0)
200163f4:	fd842703          	lw	a4,-40(s0)
200163f8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
200163fa:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
200163fe:	853e                	mv	a0,a5
20016400:	5432                	lw	s0,44(sp)
20016402:	6145                	addi	sp,sp,48
20016404:	8082                	ret

20016406 <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
20016406:	1101                	addi	sp,sp,-32
20016408:	ce06                	sw	ra,28(sp)
2001640a:	cc22                	sw	s0,24(sp)
2001640c:	1000                	addi	s0,sp,32
2001640e:	fea42623          	sw	a0,-20(s0)
20016412:	fec42783          	lw	a5,-20(s0)
20016416:	439c                	lw	a5,0(a5)
20016418:	439c                	lw	a5,0(a5)
2001641a:	fec42503          	lw	a0,-20(s0)
2001641e:	9782                	jalr	a5
20016420:	87aa                	mv	a5,a0
20016422:	853e                	mv	a0,a5
20016424:	40f2                	lw	ra,28(sp)
20016426:	4462                	lw	s0,24(sp)
20016428:	6105                	addi	sp,sp,32
2001642a:	8082                	ret

2001642c <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
2001642c:	7179                	addi	sp,sp,-48
2001642e:	d606                	sw	ra,44(sp)
20016430:	d422                	sw	s0,40(sp)
20016432:	1800                	addi	s0,sp,48
20016434:	fca42e23          	sw	a0,-36(s0)
20016438:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
2001643c:	fdc42783          	lw	a5,-36(s0)
20016440:	43dc                	lw	a5,4(a5)
20016442:	853e                	mv	a0,a5
20016444:	f2fff0ef          	jal	ra,20016372 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
20016448:	fdc42783          	lw	a5,-36(s0)
2001644c:	439c                	lw	a5,0(a5)
2001644e:	43dc                	lw	a5,4(a5)
20016450:	fd842583          	lw	a1,-40(s0)
20016454:	fdc42503          	lw	a0,-36(s0)
20016458:	9782                	jalr	a5
2001645a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
2001645e:	fdc42783          	lw	a5,-36(s0)
20016462:	479c                	lw	a5,8(a5)
20016464:	853e                	mv	a0,a5
20016466:	f0dff0ef          	jal	ra,20016372 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:129

    return out;
2001646a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:130
}
2001646e:	853e                	mv	a0,a5
20016470:	50b2                	lw	ra,44(sp)
20016472:	5422                	lw	s0,40(sp)
20016474:	6145                	addi	sp,sp,48
20016476:	8082                	ret

20016478 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20016478:	1101                	addi	sp,sp,-32
2001647a:	ce06                	sw	ra,28(sp)
2001647c:	cc22                	sw	s0,24(sp)
2001647e:	1000                	addi	s0,sp,32
20016480:	fea42623          	sw	a0,-20(s0)
20016484:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20016488:	fec42783          	lw	a5,-20(s0)
2001648c:	43dc                	lw	a5,4(a5)
2001648e:	fe842583          	lw	a1,-24(s0)
20016492:	853e                	mv	a0,a5
20016494:	f1fff0ef          	jal	ra,200163b2 <_metal_clock_append_to_callbacks>
20016498:	872a                	mv	a4,a0
2001649a:	fec42783          	lw	a5,-20(s0)
2001649e:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
200164a0:	0001                	nop
200164a2:	40f2                	lw	ra,28(sp)
200164a4:	4462                	lw	s0,24(sp)
200164a6:	6105                	addi	sp,sp,32
200164a8:	8082                	ret

200164aa <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
200164aa:	1101                	addi	sp,sp,-32
200164ac:	ce06                	sw	ra,28(sp)
200164ae:	cc22                	sw	s0,24(sp)
200164b0:	1000                	addi	s0,sp,32
200164b2:	fea42623          	sw	a0,-20(s0)
200164b6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
200164ba:	fec42783          	lw	a5,-20(s0)
200164be:	479c                	lw	a5,8(a5)
200164c0:	fe842583          	lw	a1,-24(s0)
200164c4:	853e                	mv	a0,a5
200164c6:	eedff0ef          	jal	ra,200163b2 <_metal_clock_append_to_callbacks>
200164ca:	872a                	mv	a4,a0
200164cc:	fec42783          	lw	a5,-20(s0)
200164d0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
200164d2:	0001                	nop
200164d4:	40f2                	lw	ra,28(sp)
200164d6:	4462                	lw	s0,24(sp)
200164d8:	6105                	addi	sp,sp,32
200164da:	8082                	ret

200164dc <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
200164dc:	1101                	addi	sp,sp,-32
200164de:	ce06                	sw	ra,28(sp)
200164e0:	cc22                	sw	s0,24(sp)
200164e2:	1000                	addi	s0,sp,32
200164e4:	fea42623          	sw	a0,-20(s0)
200164e8:	fec42783          	lw	a5,-20(s0)
200164ec:	439c                	lw	a5,0(a5)
200164ee:	57dc                	lw	a5,44(a5)
200164f0:	fec42503          	lw	a0,-20(s0)
200164f4:	9782                	jalr	a5
200164f6:	87aa                	mv	a5,a0
200164f8:	853e                	mv	a0,a5
200164fa:	40f2                	lw	ra,28(sp)
200164fc:	4462                	lw	s0,24(sp)
200164fe:	6105                	addi	sp,sp,32
20016500:	8082                	ret

20016502 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20016502:	1101                	addi	sp,sp,-32
20016504:	ce22                	sw	s0,28(sp)
20016506:	1000                	addi	s0,sp,32
20016508:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
2001650c:	fec42783          	lw	a5,-20(s0)
20016510:	eb89                	bnez	a5,20016522 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20016512:	fec42703          	lw	a4,-20(s0)
20016516:	070a                	slli	a4,a4,0x2
20016518:	80c18793          	addi	a5,gp,-2036 # 80001264 <__metal_cpu_table>
2001651c:	97ba                	add	a5,a5,a4
2001651e:	439c                	lw	a5,0(a5)
20016520:	a011                	j	20016524 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20016522:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20016524:	853e                	mv	a0,a5
20016526:	4472                	lw	s0,28(sp)
20016528:	6105                	addi	sp,sp,32
2001652a:	8082                	ret

2001652c <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
2001652c:	1101                	addi	sp,sp,-32
2001652e:	ce22                	sw	s0,28(sp)
20016530:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20016532:	f14027f3          	csrr	a5,mhartid
20016536:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2001653a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
2001653e:	853e                	mv	a0,a5
20016540:	4472                	lw	s0,28(sp)
20016542:	6105                	addi	sp,sp,32
20016544:	8082                	ret

20016546 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20016546:	1101                	addi	sp,sp,-32
20016548:	ce22                	sw	s0,28(sp)
2001654a:	1000                	addi	s0,sp,32
2001654c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20016550:	0001                	nop
20016552:	bffd                	j	20016550 <metal_shutdown+0xa>
	...

20016580 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20016580:	8bbfc06f          	j	20012e3a <metal_interrupt_vector_handler>

20016584 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20016584:	8b7fc06f          	j	20012e3a <metal_interrupt_vector_handler>

20016588 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20016588:	8b3fc06f          	j	20012e3a <metal_interrupt_vector_handler>

2001658c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2001658c:	8ddfc06f          	j	20012e68 <metal_software_interrupt_vector_handler>

20016590 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20016590:	8abfc06f          	j	20012e3a <metal_interrupt_vector_handler>

20016594 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20016594:	8a7fc06f          	j	20012e3a <metal_interrupt_vector_handler>

20016598 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20016598:	8a3fc06f          	j	20012e3a <metal_interrupt_vector_handler>

2001659c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2001659c:	9bffc06f          	j	20012f5a <metal_timer_interrupt_vector_handler>

200165a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
200165a0:	89bfc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
200165a4:	897fc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
200165a8:	893fc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
200165ac:	88ffc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
200165b0:	88bfc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
200165b4:	887fc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
200165b8:	883fc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
200165bc:	87ffc06f          	j	20012e3a <metal_interrupt_vector_handler>

200165c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
200165c0:	c37fc06f          	j	200131f6 <metal_lc0_interrupt_vector_handler>

200165c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
200165c4:	cc5fc06f          	j	20013288 <metal_lc1_interrupt_vector_handler>

200165c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
200165c8:	d53fc06f          	j	2001331a <metal_lc2_interrupt_vector_handler>

200165cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
200165cc:	de1fc06f          	j	200133ac <metal_lc3_interrupt_vector_handler>

200165d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
200165d0:	e6ffc06f          	j	2001343e <metal_lc4_interrupt_vector_handler>

200165d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
200165d4:	efdfc06f          	j	200134d0 <metal_lc5_interrupt_vector_handler>

200165d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
200165d8:	f8bfc06f          	j	20013562 <metal_lc6_interrupt_vector_handler>

200165dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
200165dc:	818fd06f          	j	200135f4 <metal_lc7_interrupt_vector_handler>

200165e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
200165e0:	8a6fd06f          	j	20013686 <metal_lc8_interrupt_vector_handler>

200165e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
200165e4:	934fd06f          	j	20013718 <metal_lc9_interrupt_vector_handler>

200165e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
200165e8:	9c2fd06f          	j	200137aa <metal_lc10_interrupt_vector_handler>

200165ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
200165ec:	a50fd06f          	j	2001383c <metal_lc11_interrupt_vector_handler>

200165f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
200165f0:	adefd06f          	j	200138ce <metal_lc12_interrupt_vector_handler>

200165f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
200165f4:	b6cfd06f          	j	20013960 <metal_lc13_interrupt_vector_handler>

200165f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
200165f8:	bfafd06f          	j	200139f2 <metal_lc14_interrupt_vector_handler>

200165fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
200165fc:	c88fd06f          	j	20013a84 <metal_lc15_interrupt_vector_handler>

20016600 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:178
{
20016600:	1101                	addi	sp,sp,-32
20016602:	ce22                	sw	s0,28(sp)
20016604:	1000                	addi	s0,sp,32
20016606:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:179
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2001660a:	fec42703          	lw	a4,-20(s0)
2001660e:	800017b7          	lui	a5,0x80001
20016612:	83078793          	addi	a5,a5,-2000 # 80000830 <metal_segment_heap_target_end+0xffffe8cc>
20016616:	00f71763          	bne	a4,a5,20016624 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:180
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2001661a:	00f427b7          	lui	a5,0xf42
2001661e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20016622:	a099                	j	20016668 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:182
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20016624:	fec42703          	lw	a4,-20(s0)
20016628:	800017b7          	lui	a5,0x80001
2001662c:	83c78793          	addi	a5,a5,-1988 # 8000083c <metal_segment_heap_target_end+0xffffe8d8>
20016630:	00f71763          	bne	a4,a5,2001663e <__metal_driver_fixed_clock_rate+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:183
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20016634:	044aa7b7          	lui	a5,0x44aa
20016638:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
2001663c:	a035                	j	20016668 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:185
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
2001663e:	fec42703          	lw	a4,-20(s0)
20016642:	800017b7          	lui	a5,0x80001
20016646:	84878793          	addi	a5,a5,-1976 # 80000848 <metal_segment_heap_target_end+0xffffe8e4>
2001664a:	00f71463          	bne	a4,a5,20016652 <__metal_driver_fixed_clock_rate+0x52>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:186
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
2001664e:	67a1                	lui	a5,0x8
20016650:	a821                	j	20016668 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:188
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
20016652:	fec42703          	lw	a4,-20(s0)
20016656:	800017b7          	lui	a5,0x80001
2001665a:	85478793          	addi	a5,a5,-1964 # 80000854 <metal_segment_heap_target_end+0xffffe8f0>
2001665e:	00f71463          	bne	a4,a5,20016666 <__metal_driver_fixed_clock_rate+0x66>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:189
		return METAL_FIXED_CLOCK_6_CLOCK_FREQUENCY;
20016662:	67a1                	lui	a5,0x8
20016664:	a011                	j	20016668 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:192
		return 0;
20016666:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:194
}
20016668:	853e                	mv	a0,a5
2001666a:	4472                	lw	s0,28(sp)
2001666c:	6105                	addi	sp,sp,32
2001666e:	8082                	ret

20016670 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20016670:	1101                	addi	sp,sp,-32
20016672:	ce06                	sw	ra,28(sp)
20016674:	cc22                	sw	s0,24(sp)
20016676:	1000                	addi	s0,sp,32
20016678:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2001667c:	fec42503          	lw	a0,-20(s0)
20016680:	f81ff0ef          	jal	ra,20016600 <__metal_driver_fixed_clock_rate>
20016684:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20016686:	853e                	mv	a0,a5
20016688:	40f2                	lw	ra,28(sp)
2001668a:	4462                	lw	s0,24(sp)
2001668c:	6105                	addi	sp,sp,32
2001668e:	8082                	ret

20016690 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20016690:	1101                	addi	sp,sp,-32
20016692:	ce06                	sw	ra,28(sp)
20016694:	cc22                	sw	s0,24(sp)
20016696:	1000                	addi	s0,sp,32
20016698:	fea42623          	sw	a0,-20(s0)
2001669c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
200166a0:	fec42503          	lw	a0,-20(s0)
200166a4:	fcdff0ef          	jal	ra,20016670 <__metal_driver_fixed_clock_get_rate_hz>
200166a8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
200166aa:	853e                	mv	a0,a5
200166ac:	40f2                	lw	ra,28(sp)
200166ae:	4462                	lw	s0,24(sp)
200166b0:	6105                	addi	sp,sp,32
200166b2:	8082                	ret

200166b4 <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
200166b4:	1101                	addi	sp,sp,-32
200166b6:	ce06                	sw	ra,28(sp)
200166b8:	cc22                	sw	s0,24(sp)
200166ba:	1000                	addi	s0,sp,32
200166bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
200166c0:	fec42503          	lw	a0,-20(s0)
200166c4:	e83ff0ef          	jal	ra,20016546 <metal_shutdown>
