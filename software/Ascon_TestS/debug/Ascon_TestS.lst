
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/debug/Ascon_TestS.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/debug/Ascon_TestS.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20010000

Program Header:
    LOAD off    0x00001000 vaddr 0x20010000 paddr 0x20010000 align 2**12
         filesz 0x0000823c memsz 0x0000823c flags rwx
    LOAD off    0x00009b28 vaddr 0x80000b28 paddr 0x80000b28 align 2**12
         filesz 0x00000000 memsz 0x00003454 flags rw-
    LOAD off    0x0000a000 vaddr 0x80000000 paddr 0x20018240 align 2**12
         filesz 0x00000b28 memsz 0x00000b28 flags rw-
    LOAD off    0x0000ab28 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x0000ab28 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019e  20010000  20010000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000072c8  20010200  20010200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000d68  200174c8  200174c8  000084c8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20018230  20018230  00009230  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000b28  80000000  20018240  0000a000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00002854  80000b28  80000b28  00009b28  2**3  ALLOC
  6 .stack            00000400  8000337c  8000337c  00009b28  2**0  ALLOC
  7 .heap             00000800  8000377c  8000377c  00009b28  2**0  ALLOC
  8 .debug_info       0002125c  00000000  00000000  0000ab28  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00003172  00000000  00000000  0002bd84  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000a50  00000000  00000000  0002eef8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000008a8  00000000  00000000  0002f948  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000bc20  00000000  00000000  000301f0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00004377  00000000  00000000  0003be10  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00040187  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  000401af  2**0  CONTENTS, READONLY
 16 .debug_frame      00002a34  00000000  00000000  000401dc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20010000 l    d  .init	00000000 .init
20010200 l    d  .text	00000000 .text
200174c8 l    d  .rodata	00000000 .rodata
20018230 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000b28 l    d  .bss	00000000 .bss
8000337c l    d  .stack	00000000 .stack
8000377c l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-entry.o
20010060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2001013e l       .init	00000000 _skip_init
20017654 l       .rodata	00000000 argv
20017658 l       .rodata	00000000 envp
2001765c l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 Ascon_TestS.c
20010200 l     F .text	00000404 ROUND
20010604 l     F .text	0000008e P12
20010692 l     F .text	00000052 P6
80000b34 l     O .bss	00002740 plain_text.2701
80000000 l     O .data	0000001c bytes.2709
8000002c l     O .data	00000010 Key.2707
8000001c l     O .data	00000010 Nonce.2706
80003274 l     O .bss	00000078 performance2.2708
8000003c l     O .data	0000001c bytesr.2710
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20011fe2 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20012532 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000ae8 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
800032ec l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
2001324c l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
200132f6 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
2001331c l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20013340 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
2001337c l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
200134dc l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20013a14 l     F .text	00000024 __metal_driver_cpu_hartid
20013a38 l     F .text	0000002a __metal_driver_cpu_timebase
20013a62 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2001529a l     F .text	0000002a __metal_driver_sifive_plic0_control_base
200152c4 l     F .text	0000002a __metal_driver_sifive_plic0_num_interrupts
200152ee l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20015316 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
2001533e l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
20015892 l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfrosc_ref
200158ac l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfrosc_config_base
200158c2 l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfrosc_config_offset
200158d6 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
2001598e l     F .text	0000001a __metal_driver_sifive_fe310_g000_hfxosc_ref
200159a8 l     F .text	00000016 __metal_driver_sifive_fe310_g000_hfxosc_config_base
200159be l     F .text	00000014 __metal_driver_sifive_fe310_g000_hfxosc_config_offset
200159d2 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20015a7a l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllsel0
20015a94 l     F .text	0000001a __metal_driver_sifive_fe310_g000_pll_pllref
20015aae l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_divider_base
20015ac4 l     F .text	00000014 __metal_driver_sifive_fe310_g000_pll_divider_offset
20015ad8 l     F .text	00000012 __metal_driver_sifive_fe310_g000_pll_config_base
20015aea l     F .text	00000010 __metal_driver_sifive_fe310_g000_pll_config_offset
20015afa l     F .text	00000016 __metal_driver_sifive_fe310_g000_pll_init_rate
20015b10 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
20015b22 l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_vtable
20017908 l     O .rodata	00000880 pll_configs
20015b34 l     F .text	0000004e get_pll_config_freq
20015b82 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20015dcc l     F .text	000000ac find_closest_config
20015e78 l     F .text	00000132 configure_pll
20016110 l     F .text	0000002a use_hfxosc
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
2001613a l     F .text	00000012 __metal_driver_sifive_fe310_g000_prci_base
00000000 l    df *ABS*	00000000 sifive_gpio0.c
200161b2 l     F .text	00000026 __metal_driver_sifive_gpio0_base
200161d8 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20016202 l     F .text	0000035e __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20016c16 l     F .text	00000040 __metal_driver_sifive_uart0_control_base
20016c56 l     F .text	00000042 __metal_driver_sifive_uart0_interrupt_parent
20016c98 l     F .text	0000003c __metal_driver_sifive_uart0_interrupt_line
20016cd4 l     F .text	00000048 __metal_driver_sifive_uart0_clock
20016d1c l     F .text	00000040 __metal_driver_sifive_uart0_pinmux
20016d5c l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_output_selector
20016d9c l     F .text	00000040 __metal_driver_sifive_uart0_pinmux_source_selector
20016fac l     F .text	000000d8 pre_rate_change_callback_func
20017084 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__sifive-hifive1-revb_a-vector.o
20017380 l       .text	00000000 IRQ_0
20017384 l       .text	00000000 IRQ_1
20017388 l       .text	00000000 IRQ_2
2001738c l       .text	00000000 IRQ_3
20017390 l       .text	00000000 IRQ_4
20017394 l       .text	00000000 IRQ_5
20017398 l       .text	00000000 IRQ_6
2001739c l       .text	00000000 IRQ_7
200173a0 l       .text	00000000 IRQ_8
200173a4 l       .text	00000000 IRQ_9
200173a8 l       .text	00000000 IRQ_10
200173ac l       .text	00000000 IRQ_11
200173b0 l       .text	00000000 IRQ_12
200173b4 l       .text	00000000 IRQ_13
200173b8 l       .text	00000000 IRQ_14
200173bc l       .text	00000000 IRQ_15
200173c0 l       .text	00000000 IRQ_LC0
200173c4 l       .text	00000000 IRQ_LC1
200173c8 l       .text	00000000 IRQ_LC2
200173cc l       .text	00000000 IRQ_LC3
200173d0 l       .text	00000000 IRQ_LC4
200173d4 l       .text	00000000 IRQ_LC5
200173d8 l       .text	00000000 IRQ_LC6
200173dc l       .text	00000000 IRQ_LC7
200173e0 l       .text	00000000 IRQ_LC8
200173e4 l       .text	00000000 IRQ_LC9
200173e8 l       .text	00000000 IRQ_LC10
200173ec l       .text	00000000 IRQ_LC11
200173f0 l       .text	00000000 IRQ_LC12
200173f4 l       .text	00000000 IRQ_LC13
200173f8 l       .text	00000000 IRQ_LC14
200173fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20017400 l     F .text	00000070 __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000058 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2001823c l       .init_array	00000000 __fini_array_end
2001823c l       .init_array	00000000 __fini_array_start
2001823c l       .init_array	00000000 __init_array_end
20018230 l       .init_array	00000000 __preinit_array_end
20018230 l       .init_array	00000000 __init_array_start
20018230 l       .init_array	00000000 __preinit_array_start
20018210 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
200129b6 g     F .text	00000030 _isatty_r
2001423e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20011b7c g     F .text	000000da _puts_r
200129e6 g     F .text	00000034 _lseek_r
2001721a g     F .text	00000026 metal_clock_get_rate_hz
20016f0c g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
200136b8 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
200141ac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20011494 g     F .text	0000001e rdcycle
200149fe g     F .text	00000038 __metal_valid_interrupt_id
20011b38 g     F .text	00000044 printf
20014e28 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
800012e0 g       .data	00000000 __global_pointer$
200171c6 g     F .text	00000054 _metal_clock_append_to_callbacks
2001538e g     F .text	00000038 __metal_plic0_complete_interrupt
20014c80 g     F .text	00000150 __metal_driver_riscv_cpu_controller_interrupt_register
200128e4 g     F .text	00000036 __sseek
20012098 g     F .text	0000006a __sinit
20011c64 g     F .text	000000c0 __swbuf_r
20012054 g     F .text	00000044 __sfmoreglue
20012a36 g     F .text	00000002 __malloc_unlock
20017316 g     F .text	0000002a metal_cpu_get
80000a78 g     O .data	00000020 __metal_dt_serial_10013000
200167f0 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20017668 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
8000337c g       .bss	00000000 metal_segment_bss_target_end
200133ac g     F .text	0000009a __metal_clint0_mtime_get
2001522e g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
200165a0 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20012fcc g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20016e20 g     F .text	00000034 __metal_driver_sifive_uart0_txready
20010070 g     F .init	0000000e __metal_synchronize_harts
80000b28 g       .bss	00000000 metal_segment_bss_target_start
20013446 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20012984 g     F .text	00000032 _fstat_r
20016a40 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80003378 g     O .bss	00000004 errno
20015c4e g     F .text	0000017e __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
2001728c g     F .text	00000032 metal_clock_register_pre_rate_change_callback
20014518  w    F .text	00000092 metal_lc9_interrupt_vector_handler
80000a98 g     O .data	00000020 __metal_dt_serial_10023000
200178bc g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
2001787c g     O .rodata	00000040 __metal_driver_vtable_cpu
200132c8 g     F .text	0000002e metal_uart_set_baud_rate
200170b4 g     F .text	000000d2 __metal_driver_sifive_uart0_init
20014ebc g     F .text	00000072 __metal_driver_cpu_mcycle_get
20018188 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
8000377c g       .heap	00000000 metal_segment_heap_target_start
2001204a g     F .text	0000000a _cleanup_r
80000af8 g     O .data	00000004 __metal_dt_cpu_0
20011424 g     F .text	00000070 rand_ascon
20014486  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20015faa g     F .text	00000166 __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20011c56 g     F .text	0000000e puts
20014760  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20013bf6 g     F .text	00000018 __metal_default_exception_handler
20012e3c g     F .text	00000026 _fstat
20010bf2 g     F .text	000005a4 crypto_aead_decrypt
200139e0 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
2001542a g     F .text	00000062 __metal_plic0_set_priority
20014e44 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20013a8c g     F .text	0000002c __metal_driver_cpu_get
20017830 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20013aea g     F .text	00000018 __metal_interrupt_global_disable
200143f4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
200145aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20012836 g     F .text	00000030 _sbrk_r
2001584a g     F .text	00000048 __metal_driver_riscv_plic0_disable
20014af2 g     F .text	0000004e __metal_exception_register
20012de6 g     F .text	00000034 _read_r
20015050 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20016682 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20013ce2 g     F .text	00000064 __metal_default_sw_handler
200172be g     F .text	00000032 metal_clock_register_post_rate_change_callback
800000c4 g     O .data	0000000c __metal_dt_clock_2
20016ddc g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
20012e62 g     F .text	00000020 _isatty
20016748 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000b1c g     O .data	00000008 __metal_driver_vtable_fixed_clock
80000ae4 g     O .data	00000004 _global_impure_ptr
20013d46  w    F .text	0000008e metal_timer_interrupt_vector_handler
2001303c g     F .text	0000006a __libc_init_array
200166c2 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2001463c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20015a58 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20014dd0 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20012ed6 g     F .text	0000007e _sbrk
2001663c g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20017186 g     F .text	00000040 _metal_clock_call_all_callbacks
2001017c g     F .init	00000002 _init
20013b4c g     F .text	0000001a __metal_interrupt_timer_disable
2001683a g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20015106 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
200181d4 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20016788 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20013004 g     F .text	00000038 __libc_fini_array
80000ad0 g     O .data	0000000c __metal_dt_clock_4
20016bc8 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20015090 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20013b9e g     F .text	0000002c __metal_interrupt_local_enable
200139ac g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
200131fa g     F .text	0000002c metal_tty_putc
2001554e g     F .text	00000018 __metal_plic0_default_handler
800000b8 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
200175b8 g     O .rodata	00000020 __sf_fake_stderr
20013b82 g     F .text	0000001c __metal_interrupt_external_disable
20016dfc g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
20014ea0 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20014b40 g     F .text	00000140 __metal_driver_riscv_cpu_controller_interrupt_init
2001255c g     F .text	00000042 __sfputs_r
200151e8 g     F .text	00000046 __metal_driver_cpu_exception_register
20013b02 g     F .text	00000018 __metal_interrupt_software_enable
20014088  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20012a1a g     F .text	0000001a memchr
200123a8 g     F .text	000000ac _free_r
80000b30 g     O .bss	00000004 _global_atexit
200106e4 g     F .text	0000050e crypto_aead_encrypt
20014916 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20013132 g     F .text	000000c8 __call_exitprocs
8000377c g       .stack	00000000 _sp
2001007e g     F .init	00000000 _start
200158e8 g     F .text	00000084 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
20012e82 g     F .text	0000002a _lseek
200151c8 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
2001525c g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20013b66 g     F .text	0000001c __metal_interrupt_external_enable
200130a6 g     F .text	0000008c __register_exitproc
20016e54 g     F .text	00000042 __metal_driver_sifive_uart0_putc
200155fa g     F .text	00000146 __metal_driver_riscv_plic0_init
20015802 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20016610 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20014362  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20013ab8 g     F .text	0000001a __metal_myhart_id
20016be8 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20013c54  w    F .text	0000008e metal_software_interrupt_vector_handler
20014dfc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20012954 g     F .text	00000030 _close_r
20016eec g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20011196 g     F .text	000001fa crypto_hash
2001359a g     F .text	000000da __metal_driver_riscv_clint0_register
80000af0 g     O .data	00000008 __metal_dt_clint_2000000
20011d24 g     F .text	00000110 __swsetup_r
20012102 g     F .text	0000009e __sfp
20017240 g     F .text	0000004c metal_clock_set_rate_hz
20012866 g     F .text	00000030 __sread
20016560 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
2001017e  w    F .init	00000000 secondary_main
20013c26  w    F .text	0000002e metal_interrupt_vector_handler
20012a34 g     F .text	00000002 __malloc_lock
20011f7e g     F .text	00000064 _fflush_r
200153fe g     F .text	0000002c __metal_plic0_get_threshold
2001614c g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_get_reg
200175d8 g     O .rodata	00000020 __sf_fake_stdin
20014a36 g     F .text	000000bc __metal_local_interrupt_enable
20013876 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20012300 g     F .text	000000a8 memset
200142d0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
200114b2 g     F .text	00000686 main
80000b28 g       .data	00000000 metal_segment_data_target_end
80000b04 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
200150a4 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20015168 g     F .text	00000060 __metal_driver_cpu_get_msip
2001735a g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
2001527a g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20015360 g     F .text	0000002e __metal_plic0_claim_interrupt
2001291a g     F .text	00000006 __sclose
200146ce  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20012454 g     F .text	000000de _malloc_r
2001369c g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
80000b00 g     O .data	00000004 __metal_dt_prci_10008000
20014f2e g     F .text	00000046 __metal_driver_cpu_timebase_get
20010000 g       .init	00000000 _enter
20017340 g     F .text	0000001a metal_cpu_get_current_hartid
200159e4 g     F .text	00000074 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20017380 g       .text	00000000 __metal_vector_table
20018240 g       *ABS*	00000000 metal_segment_itim_source_start
80000aec  w    O .data	00000004 __metal_cpu_table
800000e8 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2001017c g     F .init	00000002 _fini
20011b38 g     F .text	00000044 iprintf
20013ad2 g     F .text	00000018 __metal_interrupt_global_enable
20012fc2 g     F .text	0000000a atexit
20013226 g     F .text	00000026 metal_tty_putc_raw
20012920 g     F .text	00000034 _write_r
20013b32 g     F .text	0000001a __metal_interrupt_timer_enable
20016e96 g     F .text	00000056 __metal_driver_sifive_uart0_getc
200137be g     F .text	000000b8 __metal_driver_riscv_clint0_disable
20012a38 g     F .text	0000010c _printf_common
80000ae0 g     O .data	00000004 _impure_ptr
20014fda g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20011e34 g     F .text	0000014a __sflush_r
20015baa g     F .text	000000a4 __metal_driver_sifive_fe310_g000_pll_init
800000d0 g     O .data	0000000c __metal_dt_clock_5
2001617a g     F .text	00000038 __metal_driver_sifive_fe310_g000_prci_set_reg
20017470 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
2001370c g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20018240 g       *ABS*	00000000 metal_segment_data_source_start
80003f7c g       .heap	00000000 metal_segment_heap_target_end
20014966 g     F .text	00000098 __metal_controller_interrupt_vector
80000ac4 g     O .data	0000000c __metal_dt_clock_1
800004a0 g     O .data	000005d8 __metal_dt_interrupt_controller_c000000
2001220c g     F .text	00000058 __swhatbuf_r
20016702 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20013dd4 g     F .text	00000066 __metal_default_timer_handler
20012f54 g     F .text	0000006e _write
20015566 g     F .text	00000094 __metal_plic0_handler
2001411a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20014884  w    F .text	00000092 metal_lc15_interrupt_vector_handler
200172f0 g     F .text	00000026 metal_cpu_interrupt_controller
20012896 g     F .text	0000004e __swrite
20012fd8 g     F .text	0000002c exit
2001259e g     F .text	00000298 _vfiprintf_r
200121a0 g     F .text	0000006c _fwalk_reent
20017490 g     F .text	00000024 __metal_driver_fixed_clock_set_rate_hz
200175f8 g     O .rodata	00000020 __sf_fake_stdout
80000afc g     O .data	00000004 __metal_dt_gpio_10012000
20013c0e g     F .text	00000018 __metal_default_interrupt_handler
2001329a g     F .text	0000002e metal_uart_putc
20012eac g     F .text	0000002a _read
200165e6 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20013e80 g     F .text	00000150 __metal_exception_handler
20013ff6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
200174b4 g     F .text	00000014 _exit
20014f74 g     F .text	00000066 __metal_driver_cpu_mtime_get
20012264 g     F .text	0000009c __smakebuf_r
20013674 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20012b44 g     F .text	000002a2 _printf_i
80000b2c g     O .bss	00000004 __malloc_sbrk_start
200147f2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
80000b0c g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20013512 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000b28 g     O .bss	00000004 __malloc_free_list
2001259e g     F .text	00000298 _vfprintf_r
20015066 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20011390 g     F .text	00000094 init_seed
200154c0 g     F .text	0000008e __metal_plic0_enable
2001006e  w      .init	00000000 __register_frame_info
2001596c g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
2001507a g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20013bca g     F .text	0000002c __metal_interrupt_local_disable
20013b1a g     F .text	00000018 __metal_interrupt_software_disable
2001548c g     F .text	00000034 __metal_plic0_get_priority
2001326e g     F .text	0000002c metal_uart_init
80000ab8 g     O .data	0000000c __metal_dt_clock_3
800000dc g     O .data	0000000c __metal_dt_clock_6
200153c6 g     F .text	00000038 __metal_plic0_set_threshold
20012e1a g     F .text	00000022 _close
80000b14 g     O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20015740 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20010000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20010000:	5fff1197          	auipc	gp,0x5fff1
20010004:	2e018193          	addi	gp,gp,736 # 800012e0 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20010008:	00000297          	auipc	t0,0x0
2001000c:	05828293          	addi	t0,t0,88 # 20010060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20010010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20010014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20010018:	00028463          	beqz	t0,20010020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2001001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20010020:	dfff0117          	auipc	sp,0xdfff0
20010024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20010028:	dfff0097          	auipc	ra,0xdfff0
2001002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20010030:	00008363          	beqz	ra,20010036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20010034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20010036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2001003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2001003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2001003e:	2081                	jal	2001007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20010040:	dfff0097          	auipc	ra,0xdfff0
20010044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20010048:	00008363          	beqz	ra,2001004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2001004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2001004e:	00000297          	auipc	t0,0x0
20010052:	00c28293          	addi	t0,t0,12 # 2001005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20010056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2001005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2001005e:	bff5                	j	2001005a <_enter+0x5a>

20010060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20010060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20010064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20010068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2001006c:	bfd5                	j	20010060 <early_trap_vector>

2001006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2001006e:	8082                	ret

20010070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20010070:	1141                	addi	sp,sp,-16
20010072:	c622                	sw	s0,12(sp)
20010074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20010076:	0001                	nop
20010078:	4432                	lw	s0,12(sp)
2001007a:	0141                	addi	sp,sp,16
2001007c:	8082                	ret

2001007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2001007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20010080:	5fff1197          	auipc	gp,0x5fff1
20010084:	26018193          	addi	gp,gp,608 # 800012e0 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20010088:	5fff3117          	auipc	sp,0x5fff3
2001008c:	6f410113          	addi	sp,sp,1780 # 8000377c <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20010090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20010092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20010096:	00a28563          	beq	t0,a0,200100a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2001009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2001009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2001009e:	bfe5                	j	20010096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
200100a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
200100a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
200100a8:	08551b63          	bne	a0,t0,2001013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
200100ac:	00008297          	auipc	t0,0x8
200100b0:	19428293          	addi	t0,t0,404 # 20018240 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
200100b4:	5fff0317          	auipc	t1,0x5fff0
200100b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
200100bc:	84818393          	addi	t2,gp,-1976 # 80000b28 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
200100c0:	00628c63          	beq	t0,t1,200100d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
200100c4:	00735a63          	bge	t1,t2,200100d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
200100cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
200100ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
200100d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
200100d4:	fe734ae3          	blt	t1,t2,200100c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
200100d8:	00008297          	auipc	t0,0x8
200100dc:	16828293          	addi	t0,t0,360 # 20018240 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
200100e0:	e7ff0317          	auipc	t1,0xe7ff0
200100e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
200100e8:	e7ff0397          	auipc	t2,0xe7ff0
200100ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
200100f0:	00628c63          	beq	t0,t1,20010108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
200100f4:	00735a63          	bge	t1,t2,20010108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200100f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
200100fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
200100fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20010102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20010104:	fe734ae3          	blt	t1,t2,200100f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20010108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2001010c:	5fff1317          	auipc	t1,0x5fff1
20010110:	a1c30313          	addi	t1,t1,-1508 # 80000b28 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20010114:	5fff3397          	auipc	t2,0x5fff3
20010118:	26838393          	addi	t2,t2,616 # 8000337c <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2001011c:	00735763          	bge	t1,t2,2001012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20010120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20010124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20010126:	fe734de3          	blt	t1,t2,20010120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2001012a:	c211                	beqz	a2,2001012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2001012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2001012e:	00003517          	auipc	a0,0x3
20010132:	ed650513          	addi	a0,a0,-298 # 20013004 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20010136:	68d020ef          	jal	ra,20012fc2 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2001013a:	703020ef          	jal	ra,2001303c <__libc_init_array>

2001013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2001013e:	3f0d                	jal	20010070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20010140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20010144:	00010737          	lui	a4,0x10
20010148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2001014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2001014e:	cb89                	beqz	a5,20010160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20010150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20010154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20010156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20010158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2001015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20010160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20010162:	00007597          	auipc	a1,0x7
20010166:	4f258593          	addi	a1,a1,1266 # 20017654 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2001016a:	00007617          	auipc	a2,0x7
2001016e:	4ee60613          	addi	a2,a2,1262 # 20017658 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20010172:	2031                	jal	2001017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20010174:	665020ef          	jal	ra,20012fd8 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20010178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2001017a:	8082                	ret

2001017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2001017c:	8082                	ret

2001017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2001017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20010180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20010182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20010186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2001018a:	00628563          	beq	t0,t1,20010194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2001018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20010192:	bff5                	j	2001018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20010194:	31e010ef          	jal	ra,200114b2 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20010198:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
2001019a:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2001019c:	8082                	ret

Disassembly of section .text:

20010200 <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
20010200:	711d                	addi	sp,sp,-96
20010202:	cea2                	sw	s0,92(sp)
20010204:	1080                	addi	s0,sp,96
20010206:	faa42623          	sw	a0,-84(s0)
2001020a:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
2001020e:	fac42783          	lw	a5,-84(s0)
20010212:	4fd8                	lw	a4,28(a5)
20010214:	fa842783          	lw	a5,-88(s0)
20010218:	8f3d                	xor	a4,a4,a5
2001021a:	fac42783          	lw	a5,-84(s0)
2001021e:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
20010220:	fac42783          	lw	a5,-84(s0)
20010224:	4398                	lw	a4,0(a5)
20010226:	fac42783          	lw	a5,-84(s0)
2001022a:	4b9c                	lw	a5,16(a5)
2001022c:	8f3d                	xor	a4,a4,a5
2001022e:	fac42783          	lw	a5,-84(s0)
20010232:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
20010234:	fac42783          	lw	a5,-84(s0)
20010238:	4bd8                	lw	a4,20(a5)
2001023a:	fac42783          	lw	a5,-84(s0)
2001023e:	53dc                	lw	a5,36(a5)
20010240:	8f3d                	xor	a4,a4,a5
20010242:	fac42783          	lw	a5,-84(s0)
20010246:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
20010248:	fac42783          	lw	a5,-84(s0)
2001024c:	4b98                	lw	a4,16(a5)
2001024e:	fac42783          	lw	a5,-84(s0)
20010252:	47dc                	lw	a5,12(a5)
20010254:	8f3d                	xor	a4,a4,a5
20010256:	fac42783          	lw	a5,-84(s0)
2001025a:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
2001025c:	fac42783          	lw	a5,-84(s0)
20010260:	53d8                	lw	a4,36(a5)
20010262:	fac42783          	lw	a5,-84(s0)
20010266:	539c                	lw	a5,32(a5)
20010268:	8f3d                	xor	a4,a4,a5
2001026a:	fac42783          	lw	a5,-84(s0)
2001026e:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
20010270:	fac42783          	lw	a5,-84(s0)
20010274:	4798                	lw	a4,8(a5)
20010276:	fac42783          	lw	a5,-84(s0)
2001027a:	43dc                	lw	a5,4(a5)
2001027c:	8f3d                	xor	a4,a4,a5
2001027e:	fac42783          	lw	a5,-84(s0)
20010282:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
20010284:	fac42783          	lw	a5,-84(s0)
20010288:	4fd8                	lw	a4,28(a5)
2001028a:	fac42783          	lw	a5,-84(s0)
2001028e:	4f9c                	lw	a5,24(a5)
20010290:	8f3d                	xor	a4,a4,a5
20010292:	fac42783          	lw	a5,-84(s0)
20010296:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
20010298:	fac42783          	lw	a5,-84(s0)
2001029c:	4398                	lw	a4,0(a5)
2001029e:	fac42783          	lw	a5,-84(s0)
200102a2:	43dc                	lw	a5,4(a5)
200102a4:	fff7c693          	not	a3,a5
200102a8:	fac42783          	lw	a5,-84(s0)
200102ac:	479c                	lw	a5,8(a5)
200102ae:	8ff5                	and	a5,a5,a3
200102b0:	8fb9                	xor	a5,a5,a4
200102b2:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
200102b6:	fac42783          	lw	a5,-84(s0)
200102ba:	4bd8                	lw	a4,20(a5)
200102bc:	fac42783          	lw	a5,-84(s0)
200102c0:	4f9c                	lw	a5,24(a5)
200102c2:	fff7c693          	not	a3,a5
200102c6:	fac42783          	lw	a5,-84(s0)
200102ca:	4fdc                	lw	a5,28(a5)
200102cc:	8ff5                	and	a5,a5,a3
200102ce:	8fb9                	xor	a5,a5,a4
200102d0:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
200102d4:	fac42783          	lw	a5,-84(s0)
200102d8:	43d8                	lw	a4,4(a5)
200102da:	fac42783          	lw	a5,-84(s0)
200102de:	479c                	lw	a5,8(a5)
200102e0:	fff7c693          	not	a3,a5
200102e4:	fac42783          	lw	a5,-84(s0)
200102e8:	47dc                	lw	a5,12(a5)
200102ea:	8ff5                	and	a5,a5,a3
200102ec:	8fb9                	xor	a5,a5,a4
200102ee:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
200102f2:	fac42783          	lw	a5,-84(s0)
200102f6:	4f98                	lw	a4,24(a5)
200102f8:	fac42783          	lw	a5,-84(s0)
200102fc:	4fdc                	lw	a5,28(a5)
200102fe:	fff7c693          	not	a3,a5
20010302:	fac42783          	lw	a5,-84(s0)
20010306:	539c                	lw	a5,32(a5)
20010308:	8ff5                	and	a5,a5,a3
2001030a:	8fb9                	xor	a5,a5,a4
2001030c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
20010310:	fac42783          	lw	a5,-84(s0)
20010314:	4798                	lw	a4,8(a5)
20010316:	fac42783          	lw	a5,-84(s0)
2001031a:	47dc                	lw	a5,12(a5)
2001031c:	fff7c693          	not	a3,a5
20010320:	fac42783          	lw	a5,-84(s0)
20010324:	4b9c                	lw	a5,16(a5)
20010326:	8ff5                	and	a5,a5,a3
20010328:	8fb9                	xor	a5,a5,a4
2001032a:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
2001032e:	fac42783          	lw	a5,-84(s0)
20010332:	4fd8                	lw	a4,28(a5)
20010334:	fac42783          	lw	a5,-84(s0)
20010338:	539c                	lw	a5,32(a5)
2001033a:	fff7c693          	not	a3,a5
2001033e:	fac42783          	lw	a5,-84(s0)
20010342:	53dc                	lw	a5,36(a5)
20010344:	8ff5                	and	a5,a5,a3
20010346:	8fb9                	xor	a5,a5,a4
20010348:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
2001034c:	fac42783          	lw	a5,-84(s0)
20010350:	47d8                	lw	a4,12(a5)
20010352:	fac42783          	lw	a5,-84(s0)
20010356:	4b9c                	lw	a5,16(a5)
20010358:	fff7c693          	not	a3,a5
2001035c:	fac42783          	lw	a5,-84(s0)
20010360:	439c                	lw	a5,0(a5)
20010362:	8ff5                	and	a5,a5,a3
20010364:	8fb9                	xor	a5,a5,a4
20010366:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
2001036a:	fac42783          	lw	a5,-84(s0)
2001036e:	5398                	lw	a4,32(a5)
20010370:	fac42783          	lw	a5,-84(s0)
20010374:	53dc                	lw	a5,36(a5)
20010376:	fff7c693          	not	a3,a5
2001037a:	fac42783          	lw	a5,-84(s0)
2001037e:	4bdc                	lw	a5,20(a5)
20010380:	8ff5                	and	a5,a5,a3
20010382:	8fb9                	xor	a5,a5,a4
20010384:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
20010388:	fac42783          	lw	a5,-84(s0)
2001038c:	4b98                	lw	a4,16(a5)
2001038e:	fac42783          	lw	a5,-84(s0)
20010392:	439c                	lw	a5,0(a5)
20010394:	fff7c693          	not	a3,a5
20010398:	fac42783          	lw	a5,-84(s0)
2001039c:	43dc                	lw	a5,4(a5)
2001039e:	8ff5                	and	a5,a5,a3
200103a0:	8fb9                	xor	a5,a5,a4
200103a2:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
200103a6:	fac42783          	lw	a5,-84(s0)
200103aa:	53d8                	lw	a4,36(a5)
200103ac:	fac42783          	lw	a5,-84(s0)
200103b0:	4bdc                	lw	a5,20(a5)
200103b2:	fff7c693          	not	a3,a5
200103b6:	fac42783          	lw	a5,-84(s0)
200103ba:	4f9c                	lw	a5,24(a5)
200103bc:	8ff5                	and	a5,a5,a3
200103be:	8fb9                	xor	a5,a5,a4
200103c0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
200103c4:	fcc42703          	lw	a4,-52(s0)
200103c8:	fc842783          	lw	a5,-56(s0)
200103cc:	8fb9                	xor	a5,a5,a4
200103ce:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
200103d2:	fc842703          	lw	a4,-56(s0)
200103d6:	fd842783          	lw	a5,-40(s0)
200103da:	8fb9                	xor	a5,a5,a4
200103dc:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
200103e0:	fd442703          	lw	a4,-44(s0)
200103e4:	fd042783          	lw	a5,-48(s0)
200103e8:	8fb9                	xor	a5,a5,a4
200103ea:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
200103ee:	fd042783          	lw	a5,-48(s0)
200103f2:	fff7c793          	not	a5,a5
200103f6:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
200103fa:	fe042703          	lw	a4,-32(s0)
200103fe:	fdc42783          	lw	a5,-36(s0)
20010402:	8fb9                	xor	a5,a5,a4
20010404:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
20010408:	fdc42703          	lw	a4,-36(s0)
2001040c:	fec42783          	lw	a5,-20(s0)
20010410:	8fb9                	xor	a5,a5,a4
20010412:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
20010416:	fe842703          	lw	a4,-24(s0)
2001041a:	fe442783          	lw	a5,-28(s0)
2001041e:	8fb9                	xor	a5,a5,a4
20010420:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
20010424:	fe442783          	lw	a5,-28(s0)
20010428:	fff7c793          	not	a5,a5
2001042c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
20010430:	fc842703          	lw	a4,-56(s0)
20010434:	fdc42783          	lw	a5,-36(s0)
20010438:	00d79693          	slli	a3,a5,0xd
2001043c:	fc842783          	lw	a5,-56(s0)
20010440:	83cd                	srli	a5,a5,0x13
20010442:	8fd5                	or	a5,a5,a3
20010444:	8f3d                	xor	a4,a4,a5
20010446:	fdc42783          	lw	a5,-36(s0)
2001044a:	00479693          	slli	a3,a5,0x4
2001044e:	fc842783          	lw	a5,-56(s0)
20010452:	83f1                	srli	a5,a5,0x1c
20010454:	8fd5                	or	a5,a5,a3
20010456:	8f3d                	xor	a4,a4,a5
20010458:	fac42783          	lw	a5,-84(s0)
2001045c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
2001045e:	fdc42703          	lw	a4,-36(s0)
20010462:	fc842783          	lw	a5,-56(s0)
20010466:	00d79693          	slli	a3,a5,0xd
2001046a:	fdc42783          	lw	a5,-36(s0)
2001046e:	83cd                	srli	a5,a5,0x13
20010470:	8fd5                	or	a5,a5,a3
20010472:	8f3d                	xor	a4,a4,a5
20010474:	fc842783          	lw	a5,-56(s0)
20010478:	00479693          	slli	a3,a5,0x4
2001047c:	fdc42783          	lw	a5,-36(s0)
20010480:	83f1                	srli	a5,a5,0x1c
20010482:	8fd5                	or	a5,a5,a3
20010484:	8f3d                	xor	a4,a4,a5
20010486:	fac42783          	lw	a5,-84(s0)
2001048a:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
2001048c:	fcc42703          	lw	a4,-52(s0)
20010490:	fcc42783          	lw	a5,-52(s0)
20010494:	00379693          	slli	a3,a5,0x3
20010498:	fe042783          	lw	a5,-32(s0)
2001049c:	83f5                	srli	a5,a5,0x1d
2001049e:	8fd5                	or	a5,a5,a3
200104a0:	8f3d                	xor	a4,a4,a5
200104a2:	fcc42783          	lw	a5,-52(s0)
200104a6:	01979693          	slli	a3,a5,0x19
200104aa:	fe042783          	lw	a5,-32(s0)
200104ae:	839d                	srli	a5,a5,0x7
200104b0:	8fd5                	or	a5,a5,a3
200104b2:	8f3d                	xor	a4,a4,a5
200104b4:	fac42783          	lw	a5,-84(s0)
200104b8:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
200104ba:	fe042703          	lw	a4,-32(s0)
200104be:	fe042783          	lw	a5,-32(s0)
200104c2:	00379693          	slli	a3,a5,0x3
200104c6:	fcc42783          	lw	a5,-52(s0)
200104ca:	83f5                	srli	a5,a5,0x1d
200104cc:	8fd5                	or	a5,a5,a3
200104ce:	8f3d                	xor	a4,a4,a5
200104d0:	fe042783          	lw	a5,-32(s0)
200104d4:	01979693          	slli	a3,a5,0x19
200104d8:	fcc42783          	lw	a5,-52(s0)
200104dc:	839d                	srli	a5,a5,0x7
200104de:	8fd5                	or	a5,a5,a3
200104e0:	8f3d                	xor	a4,a4,a5
200104e2:	fac42783          	lw	a5,-84(s0)
200104e6:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
200104e8:	fd042703          	lw	a4,-48(s0)
200104ec:	fe442783          	lw	a5,-28(s0)
200104f0:	01f79693          	slli	a3,a5,0x1f
200104f4:	fd042783          	lw	a5,-48(s0)
200104f8:	8385                	srli	a5,a5,0x1
200104fa:	8fd5                	or	a5,a5,a3
200104fc:	8f3d                	xor	a4,a4,a5
200104fe:	fe442783          	lw	a5,-28(s0)
20010502:	01a79693          	slli	a3,a5,0x1a
20010506:	fd042783          	lw	a5,-48(s0)
2001050a:	8399                	srli	a5,a5,0x6
2001050c:	8fd5                	or	a5,a5,a3
2001050e:	8f3d                	xor	a4,a4,a5
20010510:	fac42783          	lw	a5,-84(s0)
20010514:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
20010516:	fe442703          	lw	a4,-28(s0)
2001051a:	fd042783          	lw	a5,-48(s0)
2001051e:	01f79693          	slli	a3,a5,0x1f
20010522:	fe442783          	lw	a5,-28(s0)
20010526:	8385                	srli	a5,a5,0x1
20010528:	8fd5                	or	a5,a5,a3
2001052a:	8f3d                	xor	a4,a4,a5
2001052c:	fd042783          	lw	a5,-48(s0)
20010530:	01a79693          	slli	a3,a5,0x1a
20010534:	fe442783          	lw	a5,-28(s0)
20010538:	8399                	srli	a5,a5,0x6
2001053a:	8fd5                	or	a5,a5,a3
2001053c:	8f3d                	xor	a4,a4,a5
2001053e:	fac42783          	lw	a5,-84(s0)
20010542:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
20010544:	fd442703          	lw	a4,-44(s0)
20010548:	fe842783          	lw	a5,-24(s0)
2001054c:	01679693          	slli	a3,a5,0x16
20010550:	fd442783          	lw	a5,-44(s0)
20010554:	83a9                	srli	a5,a5,0xa
20010556:	8fd5                	or	a5,a5,a3
20010558:	8f3d                	xor	a4,a4,a5
2001055a:	fe842783          	lw	a5,-24(s0)
2001055e:	00f79693          	slli	a3,a5,0xf
20010562:	fd442783          	lw	a5,-44(s0)
20010566:	83c5                	srli	a5,a5,0x11
20010568:	8fd5                	or	a5,a5,a3
2001056a:	8f3d                	xor	a4,a4,a5
2001056c:	fac42783          	lw	a5,-84(s0)
20010570:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
20010572:	fe842703          	lw	a4,-24(s0)
20010576:	fd442783          	lw	a5,-44(s0)
2001057a:	01679693          	slli	a3,a5,0x16
2001057e:	fe842783          	lw	a5,-24(s0)
20010582:	83a9                	srli	a5,a5,0xa
20010584:	8fd5                	or	a5,a5,a3
20010586:	8f3d                	xor	a4,a4,a5
20010588:	fd442783          	lw	a5,-44(s0)
2001058c:	00f79693          	slli	a3,a5,0xf
20010590:	fe842783          	lw	a5,-24(s0)
20010594:	83c5                	srli	a5,a5,0x11
20010596:	8fd5                	or	a5,a5,a3
20010598:	8f3d                	xor	a4,a4,a5
2001059a:	fac42783          	lw	a5,-84(s0)
2001059e:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
200105a0:	fd842703          	lw	a4,-40(s0)
200105a4:	fec42783          	lw	a5,-20(s0)
200105a8:	01979693          	slli	a3,a5,0x19
200105ac:	fd842783          	lw	a5,-40(s0)
200105b0:	839d                	srli	a5,a5,0x7
200105b2:	8fd5                	or	a5,a5,a3
200105b4:	8f3d                	xor	a4,a4,a5
200105b6:	fd842783          	lw	a5,-40(s0)
200105ba:	01779693          	slli	a3,a5,0x17
200105be:	fec42783          	lw	a5,-20(s0)
200105c2:	83a5                	srli	a5,a5,0x9
200105c4:	8fd5                	or	a5,a5,a3
200105c6:	8f3d                	xor	a4,a4,a5
200105c8:	fac42783          	lw	a5,-84(s0)
200105cc:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
200105ce:	fec42703          	lw	a4,-20(s0)
200105d2:	fd842783          	lw	a5,-40(s0)
200105d6:	01979693          	slli	a3,a5,0x19
200105da:	fec42783          	lw	a5,-20(s0)
200105de:	839d                	srli	a5,a5,0x7
200105e0:	8fd5                	or	a5,a5,a3
200105e2:	8f3d                	xor	a4,a4,a5
200105e4:	fec42783          	lw	a5,-20(s0)
200105e8:	01779693          	slli	a3,a5,0x17
200105ec:	fd842783          	lw	a5,-40(s0)
200105f0:	83a5                	srli	a5,a5,0x9
200105f2:	8fd5                	or	a5,a5,a3
200105f4:	8f3d                	xor	a4,a4,a5
200105f6:	fac42783          	lw	a5,-84(s0)
200105fa:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:107

    //printstate(" round output", s);
}
200105fc:	0001                	nop
200105fe:	4476                	lw	s0,92(sp)
20010600:	6125                	addi	sp,sp,96
20010602:	8082                	ret

20010604 <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
20010604:	1101                	addi	sp,sp,-32
20010606:	ce06                	sw	ra,28(sp)
20010608:	cc22                	sw	s0,24(sp)
2001060a:	1000                	addi	s0,sp,32
2001060c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:111
  ROUND(s, 0xf0);
20010610:	0f000593          	li	a1,240
20010614:	fec42503          	lw	a0,-20(s0)
20010618:	36e5                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:112
  ROUND(s, 0xe1);
2001061a:	0e100593          	li	a1,225
2001061e:	fec42503          	lw	a0,-20(s0)
20010622:	3ef9                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:113
  ROUND(s, 0xd2);
20010624:	0d200593          	li	a1,210
20010628:	fec42503          	lw	a0,-20(s0)
2001062c:	3ed1                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:114
  ROUND(s, 0xc3);
2001062e:	0c300593          	li	a1,195
20010632:	fec42503          	lw	a0,-20(s0)
20010636:	36e9                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:115
  ROUND(s, 0xb4);
20010638:	0b400593          	li	a1,180
2001063c:	fec42503          	lw	a0,-20(s0)
20010640:	36c1                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:116
  ROUND(s, 0xa5);
20010642:	0a500593          	li	a1,165
20010646:	fec42503          	lw	a0,-20(s0)
2001064a:	3e5d                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:117
  ROUND(s, 0x96);
2001064c:	09600593          	li	a1,150
20010650:	fec42503          	lw	a0,-20(s0)
20010654:	3675                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:118
  ROUND(s, 0x87);
20010656:	08700593          	li	a1,135
2001065a:	fec42503          	lw	a0,-20(s0)
2001065e:	364d                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:119
  ROUND(s, 0x78);
20010660:	07800593          	li	a1,120
20010664:	fec42503          	lw	a0,-20(s0)
20010668:	3e61                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:120
  ROUND(s, 0x69);
2001066a:	06900593          	li	a1,105
2001066e:	fec42503          	lw	a0,-20(s0)
20010672:	3679                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:121
  ROUND(s, 0x5a);
20010674:	05a00593          	li	a1,90
20010678:	fec42503          	lw	a0,-20(s0)
2001067c:	3651                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:122
  ROUND(s, 0x4b);
2001067e:	04b00593          	li	a1,75
20010682:	fec42503          	lw	a0,-20(s0)
20010686:	3ead                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:123
}
20010688:	0001                	nop
2001068a:	40f2                	lw	ra,28(sp)
2001068c:	4462                	lw	s0,24(sp)
2001068e:	6105                	addi	sp,sp,32
20010690:	8082                	ret

20010692 <P6>:
P6():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:136
  ROUND(s, 0x69);
  ROUND(s, 0x5a);
  ROUND(s, 0x4b);
}

static inline void P6(ascon_state_t* s) {
20010692:	1101                	addi	sp,sp,-32
20010694:	ce06                	sw	ra,28(sp)
20010696:	cc22                	sw	s0,24(sp)
20010698:	1000                	addi	s0,sp,32
2001069a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:137
  ROUND(s, 0x96);
2001069e:	09600593          	li	a1,150
200106a2:	fec42503          	lw	a0,-20(s0)
200106a6:	3ea9                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:138
  ROUND(s, 0x87);
200106a8:	08700593          	li	a1,135
200106ac:	fec42503          	lw	a0,-20(s0)
200106b0:	3e81                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:139
  ROUND(s, 0x78);
200106b2:	07800593          	li	a1,120
200106b6:	fec42503          	lw	a0,-20(s0)
200106ba:	3699                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:140
  ROUND(s, 0x69);
200106bc:	06900593          	li	a1,105
200106c0:	fec42503          	lw	a0,-20(s0)
200106c4:	3e35                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:141
  ROUND(s, 0x5a);
200106c6:	05a00593          	li	a1,90
200106ca:	fec42503          	lw	a0,-20(s0)
200106ce:	3e0d                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:142
  ROUND(s, 0x4b);
200106d0:	04b00593          	li	a1,75
200106d4:	fec42503          	lw	a0,-20(s0)
200106d8:	3625                	jal	20010200 <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/round.h:143
}
200106da:	0001                	nop
200106dc:	40f2                	lw	ra,28(sp)
200106de:	4462                	lw	s0,24(sp)
200106e0:	6105                	addi	sp,sp,32
200106e2:	8082                	ret

200106e4 <crypto_aead_encrypt>:
crypto_aead_encrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:16

#define A_128_IV_H 0x80400c06
#define A_128_IV_L 0x00000000


int crypto_aead_encrypt(u32 *c, u32 *clen, u32 *m, u32 mlen, u32 *ad, u32 adlen, u32 *npub, u32 *k) {
200106e4:	7119                	addi	sp,sp,-128
200106e6:	de86                	sw	ra,124(sp)
200106e8:	dca2                	sw	s0,120(sp)
200106ea:	0100                	addi	s0,sp,128
200106ec:	f8a42e23          	sw	a0,-100(s0)
200106f0:	f8b42c23          	sw	a1,-104(s0)
200106f4:	f8c42a23          	sw	a2,-108(s0)
200106f8:	f8d42823          	sw	a3,-112(s0)
200106fc:	f8e42623          	sw	a4,-116(s0)
20010700:	f8f42423          	sw	a5,-120(s0)
20010704:	f9042223          	sw	a6,-124(s0)
20010708:	f9142023          	sw	a7,-128(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:18
    /* set plaintext size */
    *clen = mlen + 16;
2001070c:	f9042783          	lw	a5,-112(s0)
20010710:	01078713          	addi	a4,a5,16
20010714:	f9842783          	lw	a5,-104(s0)
20010718:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:22

    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
2001071a:	f8042783          	lw	a5,-128(s0)
2001071e:	439c                	lw	a5,0(a5)
20010720:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:23
    K0.xl = k[1];
20010724:	f8042783          	lw	a5,-128(s0)
20010728:	43dc                	lw	a5,4(a5)
2001072a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:24
    K1.xh = k[2];
2001072e:	f8042783          	lw	a5,-128(s0)
20010732:	479c                	lw	a5,8(a5)
20010734:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:25
    K1.xl = k[3];
20010738:	f8042783          	lw	a5,-128(s0)
2001073c:	47dc                	lw	a5,12(a5)
2001073e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:26
    N0.xh = npub[0];
20010742:	f8442783          	lw	a5,-124(s0)
20010746:	439c                	lw	a5,0(a5)
20010748:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:27
    N0.xl = npub[1];
2001074c:	f8442783          	lw	a5,-124(s0)
20010750:	43dc                	lw	a5,4(a5)
20010752:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:28
    N1.xh = npub[2];
20010756:	f8442783          	lw	a5,-124(s0)
2001075a:	479c                	lw	a5,8(a5)
2001075c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:29
    N1.xl = npub[3];
20010760:	f8442783          	lw	a5,-124(s0)
20010764:	47dc                	lw	a5,12(a5)
20010766:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:33

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
2001076a:	804017b7          	lui	a5,0x80401
2001076e:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fcc8a>
20010772:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:34
    s.xl[0] = A_128_IV_L;
20010776:	fa042e23          	sw	zero,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:35
    s.xh[1] = K0.xh;
2001077a:	fe842783          	lw	a5,-24(s0)
2001077e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:36
    s.xl[1] = K0.xl;
20010782:	fec42783          	lw	a5,-20(s0)
20010786:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:37
    s.xh[2] = K1.xh;
2001078a:	fe042783          	lw	a5,-32(s0)
2001078e:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:38
    s.xl[2] = K1.xl;
20010792:	fe442783          	lw	a5,-28(s0)
20010796:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:39
    s.xh[3] = N0.xh;
2001079a:	fd842783          	lw	a5,-40(s0)
2001079e:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:40
    s.xl[3] = N0.xl;
200107a2:	fdc42783          	lw	a5,-36(s0)
200107a6:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:41
    s.xh[4] = N1.xh;
200107aa:	fd042783          	lw	a5,-48(s0)
200107ae:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:42
    s.xl[4] = N1.xl;
200107b2:	fd442783          	lw	a5,-44(s0)
200107b6:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:44
    //printstate("After init", &s, debug);
    P12(&s);
200107ba:	fa840793          	addi	a5,s0,-88
200107be:	853e                	mv	a0,a5
200107c0:	3591                	jal	20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:46

    s.xh[3] ^= K0.xh;
200107c2:	fb442703          	lw	a4,-76(s0)
200107c6:	fe842783          	lw	a5,-24(s0)
200107ca:	8fb9                	xor	a5,a5,a4
200107cc:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:47
    s.xl[3] ^= K0.xl;
200107d0:	fc842703          	lw	a4,-56(s0)
200107d4:	fec42783          	lw	a5,-20(s0)
200107d8:	8fb9                	xor	a5,a5,a4
200107da:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:48
    s.xh[4] ^= K1.xh;
200107de:	fb842703          	lw	a4,-72(s0)
200107e2:	fe042783          	lw	a5,-32(s0)
200107e6:	8fb9                	xor	a5,a5,a4
200107e8:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:49
    s.xl[4] ^= K1.xl;
200107ec:	fcc42703          	lw	a4,-52(s0)
200107f0:	fe442783          	lw	a5,-28(s0)
200107f4:	8fb9                	xor	a5,a5,a4
200107f6:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:52
    //printstate("Xor 2 key", &s, debug);

    if (adlen) {
200107fa:	f8842783          	lw	a5,-120(s0)
200107fe:	14078063          	beqz	a5,2001093e <crypto_aead_encrypt+0x25a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:53
        while (adlen >= 8) {
20010802:	a0a1                	j	2001084a <crypto_aead_encrypt+0x166>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:54
            s.xh[0] ^= *ad;
20010804:	fa842703          	lw	a4,-88(s0)
20010808:	f8c42783          	lw	a5,-116(s0)
2001080c:	439c                	lw	a5,0(a5)
2001080e:	8fb9                	xor	a5,a5,a4
20010810:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:55
            ad++;
20010814:	f8c42783          	lw	a5,-116(s0)
20010818:	0791                	addi	a5,a5,4
2001081a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:56
            s.xl[0] ^= *ad;
2001081e:	fbc42703          	lw	a4,-68(s0)
20010822:	f8c42783          	lw	a5,-116(s0)
20010826:	439c                	lw	a5,0(a5)
20010828:	8fb9                	xor	a5,a5,a4
2001082a:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:57
            ad++;
2001082e:	f8c42783          	lw	a5,-116(s0)
20010832:	0791                	addi	a5,a5,4
20010834:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:58
            P6(&s);
20010838:	fa840793          	addi	a5,s0,-88
2001083c:	853e                	mv	a0,a5
2001083e:	3d91                	jal	20010692 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:60
            //printstate("Absorb AD", &s, debug);
            adlen -= 8;
20010840:	f8842783          	lw	a5,-120(s0)
20010844:	17e1                	addi	a5,a5,-8
20010846:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:53
        while (adlen >= 8) {
2001084a:	f8842703          	lw	a4,-120(s0)
2001084e:	479d                	li	a5,7
20010850:	fae7eae3          	bltu	a5,a4,20010804 <crypto_aead_encrypt+0x120>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:62
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20010854:	fa842703          	lw	a4,-88(s0)
20010858:	f8842683          	lw	a3,-120(s0)
2001085c:	4791                	li	a5,4
2001085e:	00d7f663          	bgeu	a5,a3,2001086a <crypto_aead_encrypt+0x186>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:62 (discriminator 1)
20010862:	f8c42783          	lw	a5,-116(s0)
20010866:	439c                	lw	a5,0(a5)
20010868:	a025                	j	20010890 <crypto_aead_encrypt+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:62 (discriminator 2)
2001086a:	f8842783          	lw	a5,-120(s0)
2001086e:	c385                	beqz	a5,2001088e <crypto_aead_encrypt+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:62 (discriminator 4)
20010870:	f8c42783          	lw	a5,-116(s0)
20010874:	4394                	lw	a3,0(a5)
20010876:	f8842603          	lw	a2,-120(s0)
2001087a:	4781                	li	a5,0
2001087c:	8f91                	sub	a5,a5,a2
2001087e:	078e                	slli	a5,a5,0x3
20010880:	02078793          	addi	a5,a5,32
20010884:	567d                	li	a2,-1
20010886:	00f617b3          	sll	a5,a2,a5
2001088a:	8ff5                	and	a5,a5,a3
2001088c:	a011                	j	20010890 <crypto_aead_encrypt+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:62 (discriminator 5)
2001088e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:62 (discriminator 8)
20010890:	8fb9                	xor	a5,a5,a4
20010892:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:63 (discriminator 8)
        ad++;
20010896:	f8c42783          	lw	a5,-116(s0)
2001089a:	0791                	addi	a5,a5,4
2001089c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:64 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
200108a0:	fbc42703          	lw	a4,-68(s0)
200108a4:	f8842683          	lw	a3,-120(s0)
200108a8:	4791                	li	a5,4
200108aa:	02d7f163          	bgeu	a5,a3,200108cc <crypto_aead_encrypt+0x1e8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:64 (discriminator 1)
200108ae:	f8c42783          	lw	a5,-116(s0)
200108b2:	4394                	lw	a3,0(a5)
200108b4:	f8842603          	lw	a2,-120(s0)
200108b8:	4781                	li	a5,0
200108ba:	8f91                	sub	a5,a5,a2
200108bc:	078e                	slli	a5,a5,0x3
200108be:	04078793          	addi	a5,a5,64
200108c2:	567d                	li	a2,-1
200108c4:	00f617b3          	sll	a5,a2,a5
200108c8:	8ff5                	and	a5,a5,a3
200108ca:	a011                	j	200108ce <crypto_aead_encrypt+0x1ea>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:64 (discriminator 2)
200108cc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:64 (discriminator 4)
200108ce:	8fb9                	xor	a5,a5,a4
200108d0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:66 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
200108d4:	fa842703          	lw	a4,-88(s0)
200108d8:	f8842683          	lw	a3,-120(s0)
200108dc:	478d                	li	a5,3
200108de:	00d7ea63          	bltu	a5,a3,200108f2 <crypto_aead_encrypt+0x20e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:66 (discriminator 1)
200108e2:	f8842783          	lw	a5,-120(s0)
200108e6:	078e                	slli	a5,a5,0x3
200108e8:	800006b7          	lui	a3,0x80000
200108ec:	00f6d7b3          	srl	a5,a3,a5
200108f0:	a011                	j	200108f4 <crypto_aead_encrypt+0x210>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:66 (discriminator 2)
200108f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:66 (discriminator 4)
200108f4:	8fb9                	xor	a5,a5,a4
200108f6:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:67 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
200108fa:	fbc42703          	lw	a4,-68(s0)
200108fe:	f8842683          	lw	a3,-120(s0)
20010902:	478d                	li	a5,3
20010904:	02d7f563          	bgeu	a5,a3,2001092e <crypto_aead_encrypt+0x24a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:67 (discriminator 1)
20010908:	f8842683          	lw	a3,-120(s0)
2001090c:	47a1                	li	a5,8
2001090e:	00f68e63          	beq	a3,a5,2001092a <crypto_aead_encrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:67 (discriminator 3)
20010912:	f8842683          	lw	a3,-120(s0)
20010916:	200007b7          	lui	a5,0x20000
2001091a:	17f1                	addi	a5,a5,-4
2001091c:	97b6                	add	a5,a5,a3
2001091e:	078e                	slli	a5,a5,0x3
20010920:	800006b7          	lui	a3,0x80000
20010924:	00f6d7b3          	srl	a5,a3,a5
20010928:	a021                	j	20010930 <crypto_aead_encrypt+0x24c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:67 (discriminator 4)
2001092a:	4781                	li	a5,0
2001092c:	a011                	j	20010930 <crypto_aead_encrypt+0x24c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:67 (discriminator 2)
2001092e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:67 (discriminator 8)
20010930:	8fb9                	xor	a5,a5,a4
20010932:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:69 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P6(&s);
20010936:	fa840793          	addi	a5,s0,-88
2001093a:	853e                	mv	a0,a5
2001093c:	3b99                	jal	20010692 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:72
    }
    /* domain separation */
    s.xl[4] ^= 1;
2001093e:	fcc42783          	lw	a5,-52(s0)
20010942:	0017c793          	xori	a5,a5,1
20010946:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:75
    //printstate("Domain Separation", &s, debug);

    while (mlen >= 8) {
2001094a:	a885                	j	200109ba <crypto_aead_encrypt+0x2d6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:76
        s.xh[0] ^= *m;
2001094c:	fa842703          	lw	a4,-88(s0)
20010950:	f9442783          	lw	a5,-108(s0)
20010954:	439c                	lw	a5,0(a5)
20010956:	8fb9                	xor	a5,a5,a4
20010958:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:77
        m++;
2001095c:	f9442783          	lw	a5,-108(s0)
20010960:	0791                	addi	a5,a5,4
20010962:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:78
        s.xl[0] ^= *m;
20010966:	fbc42703          	lw	a4,-68(s0)
2001096a:	f9442783          	lw	a5,-108(s0)
2001096e:	439c                	lw	a5,0(a5)
20010970:	8fb9                	xor	a5,a5,a4
20010972:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:79
        m++;
20010976:	f9442783          	lw	a5,-108(s0)
2001097a:	0791                	addi	a5,a5,4
2001097c:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:80
        *c = s.xh[0];
20010980:	fa842703          	lw	a4,-88(s0)
20010984:	f9c42783          	lw	a5,-100(s0)
20010988:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:81
        c++;
2001098a:	f9c42783          	lw	a5,-100(s0)
2001098e:	0791                	addi	a5,a5,4
20010990:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:82
        *c = s.xl[0];
20010994:	fbc42703          	lw	a4,-68(s0)
20010998:	f9c42783          	lw	a5,-100(s0)
2001099c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:83
        c++;
2001099e:	f9c42783          	lw	a5,-100(s0)
200109a2:	0791                	addi	a5,a5,4
200109a4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:84
        mlen -= 8;
200109a8:	f9042783          	lw	a5,-112(s0)
200109ac:	17e1                	addi	a5,a5,-8
200109ae:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:86
        //printstate("Absorb M", &s, debug);
        P6(&s);
200109b2:	fa840793          	addi	a5,s0,-88
200109b6:	853e                	mv	a0,a5
200109b8:	39e9                	jal	20010692 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:75
    while (mlen >= 8) {
200109ba:	f9042703          	lw	a4,-112(s0)
200109be:	479d                	li	a5,7
200109c0:	f8e7e6e3          	bltu	a5,a4,2001094c <crypto_aead_encrypt+0x268>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:89
    }
    /* final block*/
    s.xh[0] ^= TRUNH(mlen, *m);
200109c4:	fa842703          	lw	a4,-88(s0)
200109c8:	f9042683          	lw	a3,-112(s0)
200109cc:	4791                	li	a5,4
200109ce:	00d7f663          	bgeu	a5,a3,200109da <crypto_aead_encrypt+0x2f6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:89 (discriminator 1)
200109d2:	f9442783          	lw	a5,-108(s0)
200109d6:	439c                	lw	a5,0(a5)
200109d8:	a025                	j	20010a00 <crypto_aead_encrypt+0x31c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:89 (discriminator 2)
200109da:	f9042783          	lw	a5,-112(s0)
200109de:	c385                	beqz	a5,200109fe <crypto_aead_encrypt+0x31a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:89 (discriminator 4)
200109e0:	f9442783          	lw	a5,-108(s0)
200109e4:	4394                	lw	a3,0(a5)
200109e6:	f9042603          	lw	a2,-112(s0)
200109ea:	4781                	li	a5,0
200109ec:	8f91                	sub	a5,a5,a2
200109ee:	078e                	slli	a5,a5,0x3
200109f0:	02078793          	addi	a5,a5,32 # 20000020 <metal_segment_itim_target_end+0x18000020>
200109f4:	567d                	li	a2,-1
200109f6:	00f617b3          	sll	a5,a2,a5
200109fa:	8ff5                	and	a5,a5,a3
200109fc:	a011                	j	20010a00 <crypto_aead_encrypt+0x31c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:89 (discriminator 5)
200109fe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:89 (discriminator 8)
20010a00:	8fb9                	xor	a5,a5,a4
20010a02:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:90 (discriminator 8)
    m++;
20010a06:	f9442783          	lw	a5,-108(s0)
20010a0a:	0791                	addi	a5,a5,4
20010a0c:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:91 (discriminator 8)
    s.xl[0] ^= TRUNL(mlen, *m);
20010a10:	fbc42703          	lw	a4,-68(s0)
20010a14:	f9042683          	lw	a3,-112(s0)
20010a18:	4791                	li	a5,4
20010a1a:	02d7f163          	bgeu	a5,a3,20010a3c <crypto_aead_encrypt+0x358>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:91 (discriminator 1)
20010a1e:	f9442783          	lw	a5,-108(s0)
20010a22:	4394                	lw	a3,0(a5)
20010a24:	f9042603          	lw	a2,-112(s0)
20010a28:	4781                	li	a5,0
20010a2a:	8f91                	sub	a5,a5,a2
20010a2c:	078e                	slli	a5,a5,0x3
20010a2e:	04078793          	addi	a5,a5,64
20010a32:	567d                	li	a2,-1
20010a34:	00f617b3          	sll	a5,a2,a5
20010a38:	8ff5                	and	a5,a5,a3
20010a3a:	a011                	j	20010a3e <crypto_aead_encrypt+0x35a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:91 (discriminator 2)
20010a3c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:91 (discriminator 4)
20010a3e:	8fb9                	xor	a5,a5,a4
20010a40:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:93 (discriminator 4)

    if (mlen) {
20010a44:	f9042783          	lw	a5,-112(s0)
20010a48:	cfbd                	beqz	a5,20010ac6 <crypto_aead_encrypt+0x3e2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:94
        *c = TRUNH(mlen, s.xh[0]);
20010a4a:	f9042703          	lw	a4,-112(s0)
20010a4e:	4791                	li	a5,4
20010a50:	00e7f563          	bgeu	a5,a4,20010a5a <crypto_aead_encrypt+0x376>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:94 (discriminator 1)
20010a54:	fa842783          	lw	a5,-88(s0)
20010a58:	a01d                	j	20010a7e <crypto_aead_encrypt+0x39a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:94 (discriminator 2)
20010a5a:	f9042783          	lw	a5,-112(s0)
20010a5e:	cf99                	beqz	a5,20010a7c <crypto_aead_encrypt+0x398>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:94 (discriminator 4)
20010a60:	fa842703          	lw	a4,-88(s0)
20010a64:	f9042683          	lw	a3,-112(s0)
20010a68:	4781                	li	a5,0
20010a6a:	8f95                	sub	a5,a5,a3
20010a6c:	078e                	slli	a5,a5,0x3
20010a6e:	02078793          	addi	a5,a5,32
20010a72:	56fd                	li	a3,-1
20010a74:	00f697b3          	sll	a5,a3,a5
20010a78:	8ff9                	and	a5,a5,a4
20010a7a:	a011                	j	20010a7e <crypto_aead_encrypt+0x39a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:94 (discriminator 5)
20010a7c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:94 (discriminator 8)
20010a7e:	f9c42703          	lw	a4,-100(s0)
20010a82:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:95 (discriminator 8)
        c++;
20010a84:	f9c42783          	lw	a5,-100(s0)
20010a88:	0791                	addi	a5,a5,4
20010a8a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:96 (discriminator 8)
        *c = TRUNL(mlen, s.xl[0]);
20010a8e:	f9042703          	lw	a4,-112(s0)
20010a92:	4791                	li	a5,4
20010a94:	02e7f063          	bgeu	a5,a4,20010ab4 <crypto_aead_encrypt+0x3d0>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:96 (discriminator 1)
20010a98:	fbc42703          	lw	a4,-68(s0)
20010a9c:	f9042683          	lw	a3,-112(s0)
20010aa0:	4781                	li	a5,0
20010aa2:	8f95                	sub	a5,a5,a3
20010aa4:	078e                	slli	a5,a5,0x3
20010aa6:	04078793          	addi	a5,a5,64
20010aaa:	56fd                	li	a3,-1
20010aac:	00f697b3          	sll	a5,a3,a5
20010ab0:	8ff9                	and	a5,a5,a4
20010ab2:	a011                	j	20010ab6 <crypto_aead_encrypt+0x3d2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:96 (discriminator 2)
20010ab4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:96 (discriminator 4)
20010ab6:	f9c42703          	lw	a4,-100(s0)
20010aba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:97 (discriminator 4)
        c++;
20010abc:	f9c42783          	lw	a5,-100(s0)
20010ac0:	0791                	addi	a5,a5,4
20010ac2:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:99
    }
    s.xh[0] ^= PADH(mlen);
20010ac6:	fa842703          	lw	a4,-88(s0)
20010aca:	f9042683          	lw	a3,-112(s0)
20010ace:	478d                	li	a5,3
20010ad0:	00d7ea63          	bltu	a5,a3,20010ae4 <crypto_aead_encrypt+0x400>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:99 (discriminator 1)
20010ad4:	f9042783          	lw	a5,-112(s0)
20010ad8:	078e                	slli	a5,a5,0x3
20010ada:	800006b7          	lui	a3,0x80000
20010ade:	00f6d7b3          	srl	a5,a3,a5
20010ae2:	a011                	j	20010ae6 <crypto_aead_encrypt+0x402>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:99 (discriminator 2)
20010ae4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:99 (discriminator 4)
20010ae6:	8fb9                	xor	a5,a5,a4
20010ae8:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:100 (discriminator 4)
    s.xl[0] ^= PADL(mlen);
20010aec:	fbc42703          	lw	a4,-68(s0)
20010af0:	f9042683          	lw	a3,-112(s0)
20010af4:	478d                	li	a5,3
20010af6:	02d7f563          	bgeu	a5,a3,20010b20 <crypto_aead_encrypt+0x43c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:100 (discriminator 1)
20010afa:	f9042683          	lw	a3,-112(s0)
20010afe:	47a1                	li	a5,8
20010b00:	00f68e63          	beq	a3,a5,20010b1c <crypto_aead_encrypt+0x438>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:100 (discriminator 3)
20010b04:	f9042683          	lw	a3,-112(s0)
20010b08:	200007b7          	lui	a5,0x20000
20010b0c:	17f1                	addi	a5,a5,-4
20010b0e:	97b6                	add	a5,a5,a3
20010b10:	078e                	slli	a5,a5,0x3
20010b12:	800006b7          	lui	a3,0x80000
20010b16:	00f6d7b3          	srl	a5,a3,a5
20010b1a:	a021                	j	20010b22 <crypto_aead_encrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:100 (discriminator 4)
20010b1c:	4781                	li	a5,0
20010b1e:	a011                	j	20010b22 <crypto_aead_encrypt+0x43e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:100 (discriminator 2)
20010b20:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:100 (discriminator 8)
20010b22:	8fb9                	xor	a5,a5,a4
20010b24:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:103 (discriminator 8)
    //printstate("Pad M", &s, debug);
    /* Ending */
    s.xh[1] ^= K0.xh;
20010b28:	fac42703          	lw	a4,-84(s0)
20010b2c:	fe842783          	lw	a5,-24(s0)
20010b30:	8fb9                	xor	a5,a5,a4
20010b32:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:104 (discriminator 8)
    s.xl[1] ^= K0.xl;
20010b36:	fc042703          	lw	a4,-64(s0)
20010b3a:	fec42783          	lw	a5,-20(s0)
20010b3e:	8fb9                	xor	a5,a5,a4
20010b40:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:105 (discriminator 8)
    s.xh[2] ^= K1.xh;
20010b44:	fb042703          	lw	a4,-80(s0)
20010b48:	fe042783          	lw	a5,-32(s0)
20010b4c:	8fb9                	xor	a5,a5,a4
20010b4e:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:106 (discriminator 8)
    s.xl[2] ^= K1.xl;
20010b52:	fc442703          	lw	a4,-60(s0)
20010b56:	fe442783          	lw	a5,-28(s0)
20010b5a:	8fb9                	xor	a5,a5,a4
20010b5c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:109 (discriminator 8)
    //printstate("Xor key 1", &s, debug);

    P12(&s);
20010b60:	fa840793          	addi	a5,s0,-88
20010b64:	853e                	mv	a0,a5
20010b66:	3c79                	jal	20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:110 (discriminator 8)
    s.xh[3] ^= K0.xh;
20010b68:	fb442703          	lw	a4,-76(s0)
20010b6c:	fe842783          	lw	a5,-24(s0)
20010b70:	8fb9                	xor	a5,a5,a4
20010b72:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:111 (discriminator 8)
    s.xl[3] ^= K0.xl;
20010b76:	fc842703          	lw	a4,-56(s0)
20010b7a:	fec42783          	lw	a5,-20(s0)
20010b7e:	8fb9                	xor	a5,a5,a4
20010b80:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:112 (discriminator 8)
    s.xh[4] ^= K1.xh;
20010b84:	fb842703          	lw	a4,-72(s0)
20010b88:	fe042783          	lw	a5,-32(s0)
20010b8c:	8fb9                	xor	a5,a5,a4
20010b8e:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:113 (discriminator 8)
    s.xl[4] ^= K1.xl;
20010b92:	fcc42703          	lw	a4,-52(s0)
20010b96:	fe442783          	lw	a5,-28(s0)
20010b9a:	8fb9                	xor	a5,a5,a4
20010b9c:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:117 (discriminator 8)
    //printstate("Xor key 2", &s, debug);

    /* TAG*/
    *c = s.xh[3];
20010ba0:	fb442703          	lw	a4,-76(s0)
20010ba4:	f9c42783          	lw	a5,-100(s0)
20010ba8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:118 (discriminator 8)
    c++;
20010baa:	f9c42783          	lw	a5,-100(s0)
20010bae:	0791                	addi	a5,a5,4
20010bb0:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:119 (discriminator 8)
    *c = s.xl[3];
20010bb4:	fc842703          	lw	a4,-56(s0)
20010bb8:	f9c42783          	lw	a5,-100(s0)
20010bbc:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:120 (discriminator 8)
    c++;
20010bbe:	f9c42783          	lw	a5,-100(s0)
20010bc2:	0791                	addi	a5,a5,4
20010bc4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:121 (discriminator 8)
    *c = s.xh[4];
20010bc8:	fb842703          	lw	a4,-72(s0)
20010bcc:	f9c42783          	lw	a5,-100(s0)
20010bd0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:122 (discriminator 8)
    c++;
20010bd2:	f9c42783          	lw	a5,-100(s0)
20010bd6:	0791                	addi	a5,a5,4
20010bd8:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:123 (discriminator 8)
    *c = s.xl[4];
20010bdc:	fcc42703          	lw	a4,-52(s0)
20010be0:	f9c42783          	lw	a5,-100(s0)
20010be4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:124 (discriminator 8)
    return 0;
20010be6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:125 (discriminator 8)
}
20010be8:	853e                	mv	a0,a5
20010bea:	50f6                	lw	ra,124(sp)
20010bec:	5466                	lw	s0,120(sp)
20010bee:	6109                	addi	sp,sp,128
20010bf0:	8082                	ret

20010bf2 <crypto_aead_decrypt>:
crypto_aead_decrypt():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:127

int crypto_aead_decrypt(u32 *m, u32 *mlen, u32 *c, u32 clen, u32 *ad, u32 adlen, u32 *npub, u32 *k) {
20010bf2:	7135                	addi	sp,sp,-160
20010bf4:	cf06                	sw	ra,156(sp)
20010bf6:	cd22                	sw	s0,152(sp)
20010bf8:	1100                	addi	s0,sp,160
20010bfa:	f6a42e23          	sw	a0,-132(s0)
20010bfe:	f6b42c23          	sw	a1,-136(s0)
20010c02:	f6c42a23          	sw	a2,-140(s0)
20010c06:	f6d42823          	sw	a3,-144(s0)
20010c0a:	f6e42623          	sw	a4,-148(s0)
20010c0e:	f6f42423          	sw	a5,-152(s0)
20010c12:	f7042223          	sw	a6,-156(s0)
20010c16:	f7142023          	sw	a7,-160(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:129
    /* set plaintext size */
    *mlen = clen;
20010c1a:	f7842783          	lw	a5,-136(s0)
20010c1e:	f7042703          	lw	a4,-144(s0)
20010c22:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:132
    /* load key and nonce */
    u64 K0, K1, N0, N1;
    K0.xh = k[0];
20010c24:	f6042783          	lw	a5,-160(s0)
20010c28:	439c                	lw	a5,0(a5)
20010c2a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:133
    K0.xl = k[1];
20010c2e:	f6042783          	lw	a5,-160(s0)
20010c32:	43dc                	lw	a5,4(a5)
20010c34:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:134
    K1.xh = k[2];
20010c38:	f6042783          	lw	a5,-160(s0)
20010c3c:	479c                	lw	a5,8(a5)
20010c3e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:135
    K1.xl = k[3];
20010c42:	f6042783          	lw	a5,-160(s0)
20010c46:	47dc                	lw	a5,12(a5)
20010c48:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:136
    N0.xh = npub[0];
20010c4c:	f6442783          	lw	a5,-156(s0)
20010c50:	439c                	lw	a5,0(a5)
20010c52:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:137
    N0.xl = npub[1];
20010c56:	f6442783          	lw	a5,-156(s0)
20010c5a:	43dc                	lw	a5,4(a5)
20010c5c:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:138
    N1.xh = npub[2];
20010c60:	f6442783          	lw	a5,-156(s0)
20010c64:	479c                	lw	a5,8(a5)
20010c66:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:139
    N1.xl = npub[3];
20010c6a:	f6442783          	lw	a5,-156(s0)
20010c6e:	47dc                	lw	a5,12(a5)
20010c70:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:143

    /* initialize */
    ascon_state_t s;
    s.xh[0] = A_128_IV_H;
20010c74:	804017b7          	lui	a5,0x80401
20010c78:	c0678793          	addi	a5,a5,-1018 # 80400c06 <metal_segment_heap_target_end+0x3fcc8a>
20010c7c:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:144
    s.xl[0] = A_128_IV_L;
20010c80:	fa042823          	sw	zero,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:145
    s.xh[1] = K0.xh;
20010c84:	fdc42783          	lw	a5,-36(s0)
20010c88:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:146
    s.xl[1] = K0.xl;
20010c8c:	fe042783          	lw	a5,-32(s0)
20010c90:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:147
    s.xh[2] = K1.xh;
20010c94:	fd442783          	lw	a5,-44(s0)
20010c98:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:148
    s.xl[2] = K1.xl;
20010c9c:	fd842783          	lw	a5,-40(s0)
20010ca0:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:149
    s.xh[3] = N0.xh;
20010ca4:	fcc42783          	lw	a5,-52(s0)
20010ca8:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:150
    s.xl[3] = N0.xl;
20010cac:	fd042783          	lw	a5,-48(s0)
20010cb0:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:151
    s.xh[4] = N1.xh;
20010cb4:	fc442783          	lw	a5,-60(s0)
20010cb8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:152
    s.xl[4] = N1.xl;
20010cbc:	fc842783          	lw	a5,-56(s0)
20010cc0:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:154
    //printstate("After init", &s, debug);
    P12(&s);
20010cc4:	f9c40793          	addi	a5,s0,-100
20010cc8:	853e                	mv	a0,a5
20010cca:	3a2d                	jal	20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:156

    s.xh[3] ^= K0.xh;
20010ccc:	fa842703          	lw	a4,-88(s0)
20010cd0:	fdc42783          	lw	a5,-36(s0)
20010cd4:	8fb9                	xor	a5,a5,a4
20010cd6:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:157
    s.xl[3] ^= K0.xl;
20010cda:	fbc42703          	lw	a4,-68(s0)
20010cde:	fe042783          	lw	a5,-32(s0)
20010ce2:	8fb9                	xor	a5,a5,a4
20010ce4:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:158
    s.xh[4] ^= K1.xh;
20010ce8:	fac42703          	lw	a4,-84(s0)
20010cec:	fd442783          	lw	a5,-44(s0)
20010cf0:	8fb9                	xor	a5,a5,a4
20010cf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:159
    s.xl[4] ^= K1.xl;
20010cf6:	fc042703          	lw	a4,-64(s0)
20010cfa:	fd842783          	lw	a5,-40(s0)
20010cfe:	8fb9                	xor	a5,a5,a4
20010d00:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:162
    //printstate("Xor 2 key", &s, debug);

    if (adlen) {
20010d04:	f6842783          	lw	a5,-152(s0)
20010d08:	14078163          	beqz	a5,20010e4a <crypto_aead_decrypt+0x258>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:163
        while (adlen >= 8) {
20010d0c:	a0a1                	j	20010d54 <crypto_aead_decrypt+0x162>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:164
            s.xh[0] ^= *ad;
20010d0e:	f9c42703          	lw	a4,-100(s0)
20010d12:	f6c42783          	lw	a5,-148(s0)
20010d16:	439c                	lw	a5,0(a5)
20010d18:	8fb9                	xor	a5,a5,a4
20010d1a:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:165
            ad++;
20010d1e:	f6c42783          	lw	a5,-148(s0)
20010d22:	0791                	addi	a5,a5,4
20010d24:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:166
            s.xl[0] ^= *ad;
20010d28:	fb042703          	lw	a4,-80(s0)
20010d2c:	f6c42783          	lw	a5,-148(s0)
20010d30:	439c                	lw	a5,0(a5)
20010d32:	8fb9                	xor	a5,a5,a4
20010d34:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:167
            ad++;
20010d38:	f6c42783          	lw	a5,-148(s0)
20010d3c:	0791                	addi	a5,a5,4
20010d3e:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:168
            P6(&s);
20010d42:	f9c40793          	addi	a5,s0,-100
20010d46:	853e                	mv	a0,a5
20010d48:	32a9                	jal	20010692 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:170
            //printstate("Absorb AD", &s, debug);
            adlen -= 8;
20010d4a:	f6842783          	lw	a5,-152(s0)
20010d4e:	17e1                	addi	a5,a5,-8
20010d50:	f6f42423          	sw	a5,-152(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:163
        while (adlen >= 8) {
20010d54:	f6842703          	lw	a4,-152(s0)
20010d58:	479d                	li	a5,7
20010d5a:	fae7eae3          	bltu	a5,a4,20010d0e <crypto_aead_decrypt+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:172
        }
        s.xh[0] ^= TRUNH(adlen, *ad);
20010d5e:	f9c42703          	lw	a4,-100(s0)
20010d62:	f6842683          	lw	a3,-152(s0)
20010d66:	4791                	li	a5,4
20010d68:	00d7f663          	bgeu	a5,a3,20010d74 <crypto_aead_decrypt+0x182>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:172 (discriminator 1)
20010d6c:	f6c42783          	lw	a5,-148(s0)
20010d70:	439c                	lw	a5,0(a5)
20010d72:	a025                	j	20010d9a <crypto_aead_decrypt+0x1a8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:172 (discriminator 2)
20010d74:	f6842783          	lw	a5,-152(s0)
20010d78:	c385                	beqz	a5,20010d98 <crypto_aead_decrypt+0x1a6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:172 (discriminator 4)
20010d7a:	f6c42783          	lw	a5,-148(s0)
20010d7e:	4394                	lw	a3,0(a5)
20010d80:	f6842603          	lw	a2,-152(s0)
20010d84:	4781                	li	a5,0
20010d86:	8f91                	sub	a5,a5,a2
20010d88:	078e                	slli	a5,a5,0x3
20010d8a:	02078793          	addi	a5,a5,32
20010d8e:	567d                	li	a2,-1
20010d90:	00f617b3          	sll	a5,a2,a5
20010d94:	8ff5                	and	a5,a5,a3
20010d96:	a011                	j	20010d9a <crypto_aead_decrypt+0x1a8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:172 (discriminator 5)
20010d98:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:172 (discriminator 8)
20010d9a:	8fb9                	xor	a5,a5,a4
20010d9c:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:173 (discriminator 8)
        ad++;
20010da0:	f6c42783          	lw	a5,-148(s0)
20010da4:	0791                	addi	a5,a5,4
20010da6:	f6f42623          	sw	a5,-148(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:174 (discriminator 8)
        s.xl[0] ^= TRUNL(adlen, *ad);
20010daa:	fb042703          	lw	a4,-80(s0)
20010dae:	f6842683          	lw	a3,-152(s0)
20010db2:	4791                	li	a5,4
20010db4:	02d7f163          	bgeu	a5,a3,20010dd6 <crypto_aead_decrypt+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:174 (discriminator 1)
20010db8:	f6c42783          	lw	a5,-148(s0)
20010dbc:	4394                	lw	a3,0(a5)
20010dbe:	f6842603          	lw	a2,-152(s0)
20010dc2:	4781                	li	a5,0
20010dc4:	8f91                	sub	a5,a5,a2
20010dc6:	078e                	slli	a5,a5,0x3
20010dc8:	04078793          	addi	a5,a5,64
20010dcc:	567d                	li	a2,-1
20010dce:	00f617b3          	sll	a5,a2,a5
20010dd2:	8ff5                	and	a5,a5,a3
20010dd4:	a011                	j	20010dd8 <crypto_aead_decrypt+0x1e6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:174 (discriminator 2)
20010dd6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:174 (discriminator 4)
20010dd8:	8fb9                	xor	a5,a5,a4
20010dda:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:176 (discriminator 4)

        s.xh[0] ^= PADH(adlen);
20010dde:	f9c42703          	lw	a4,-100(s0)
20010de2:	f6842683          	lw	a3,-152(s0)
20010de6:	478d                	li	a5,3
20010de8:	00d7ea63          	bltu	a5,a3,20010dfc <crypto_aead_decrypt+0x20a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:176 (discriminator 1)
20010dec:	f6842783          	lw	a5,-152(s0)
20010df0:	078e                	slli	a5,a5,0x3
20010df2:	800006b7          	lui	a3,0x80000
20010df6:	00f6d7b3          	srl	a5,a3,a5
20010dfa:	a011                	j	20010dfe <crypto_aead_decrypt+0x20c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:176 (discriminator 2)
20010dfc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:176 (discriminator 4)
20010dfe:	8fb9                	xor	a5,a5,a4
20010e00:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:177 (discriminator 4)
        s.xl[0] ^= PADL(adlen);
20010e04:	fb042703          	lw	a4,-80(s0)
20010e08:	f6842683          	lw	a3,-152(s0)
20010e0c:	478d                	li	a5,3
20010e0e:	02d7f563          	bgeu	a5,a3,20010e38 <crypto_aead_decrypt+0x246>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:177 (discriminator 1)
20010e12:	f6842683          	lw	a3,-152(s0)
20010e16:	47a1                	li	a5,8
20010e18:	00f68e63          	beq	a3,a5,20010e34 <crypto_aead_decrypt+0x242>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:177 (discriminator 3)
20010e1c:	f6842683          	lw	a3,-152(s0)
20010e20:	200007b7          	lui	a5,0x20000
20010e24:	17f1                	addi	a5,a5,-4
20010e26:	97b6                	add	a5,a5,a3
20010e28:	078e                	slli	a5,a5,0x3
20010e2a:	800006b7          	lui	a3,0x80000
20010e2e:	00f6d7b3          	srl	a5,a3,a5
20010e32:	a021                	j	20010e3a <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:177 (discriminator 4)
20010e34:	4781                	li	a5,0
20010e36:	a011                	j	20010e3a <crypto_aead_decrypt+0x248>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:177 (discriminator 2)
20010e38:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:177 (discriminator 8)
20010e3a:	8fb9                	xor	a5,a5,a4
20010e3c:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:179 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P6(&s);
20010e40:	f9c40793          	addi	a5,s0,-100
20010e44:	853e                	mv	a0,a5
20010e46:	84dff0ef          	jal	ra,20010692 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:182
    }
    /* domain separation */
    s.xl[4] ^= 1;
20010e4a:	fc042783          	lw	a5,-64(s0)
20010e4e:	0017c793          	xori	a5,a5,1
20010e52:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:185
    //printstate("Domain Separation", &s, debug);
    u32 ch, cl;
    while (clen >= 8) {
20010e56:	a049                	j	20010ed8 <crypto_aead_decrypt+0x2e6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:187
        // printf("clen %d\n", clen);
        ch = *c;
20010e58:	f7442783          	lw	a5,-140(s0)
20010e5c:	439c                	lw	a5,0(a5)
20010e5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:188
        c++;
20010e62:	f7442783          	lw	a5,-140(s0)
20010e66:	0791                	addi	a5,a5,4
20010e68:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:189
        cl = *c;
20010e6c:	f7442783          	lw	a5,-140(s0)
20010e70:	439c                	lw	a5,0(a5)
20010e72:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:190
        c++;
20010e76:	f7442783          	lw	a5,-140(s0)
20010e7a:	0791                	addi	a5,a5,4
20010e7c:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:191
        *m = s.xh[0] ^ ch;
20010e80:	f9c42703          	lw	a4,-100(s0)
20010e84:	fec42783          	lw	a5,-20(s0)
20010e88:	8f3d                	xor	a4,a4,a5
20010e8a:	f7c42783          	lw	a5,-132(s0)
20010e8e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:192
        m++;
20010e90:	f7c42783          	lw	a5,-132(s0)
20010e94:	0791                	addi	a5,a5,4
20010e96:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:193
        *m = s.xl[0] ^ cl;
20010e9a:	fb042703          	lw	a4,-80(s0)
20010e9e:	fe842783          	lw	a5,-24(s0)
20010ea2:	8f3d                	xor	a4,a4,a5
20010ea4:	f7c42783          	lw	a5,-132(s0)
20010ea8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:194
        m++;
20010eaa:	f7c42783          	lw	a5,-132(s0)
20010eae:	0791                	addi	a5,a5,4
20010eb0:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:196

        s.xh[0] = ch;
20010eb4:	fec42783          	lw	a5,-20(s0)
20010eb8:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:197
        s.xl[0] = cl;
20010ebc:	fe842783          	lw	a5,-24(s0)
20010ec0:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:198
        clen -= 8;
20010ec4:	f7042783          	lw	a5,-144(s0)
20010ec8:	17e1                	addi	a5,a5,-8
20010eca:	f6f42823          	sw	a5,-144(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:200
        //printstate("Absorb M", &s, debug);
        P6(&s);
20010ece:	f9c40793          	addi	a5,s0,-100
20010ed2:	853e                	mv	a0,a5
20010ed4:	fbeff0ef          	jal	ra,20010692 <P6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:185
    while (clen >= 8) {
20010ed8:	f7042703          	lw	a4,-144(s0)
20010edc:	479d                	li	a5,7
20010ede:	f6e7ede3          	bltu	a5,a4,20010e58 <crypto_aead_decrypt+0x266>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:203
    }
    /* final block*/
    ch = 0;
20010ee2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:204
    cl = 0;
20010ee6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:205
    if (clen) {
20010eea:	f7042783          	lw	a5,-144(s0)
20010eee:	10078863          	beqz	a5,20010ffe <crypto_aead_decrypt+0x40c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:206
        ch = TRUNH(clen, *c);
20010ef2:	f7042703          	lw	a4,-144(s0)
20010ef6:	4791                	li	a5,4
20010ef8:	00e7f663          	bgeu	a5,a4,20010f04 <crypto_aead_decrypt+0x312>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:206 (discriminator 1)
20010efc:	f7442783          	lw	a5,-140(s0)
20010f00:	439c                	lw	a5,0(a5)
20010f02:	a025                	j	20010f2a <crypto_aead_decrypt+0x338>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:206 (discriminator 2)
20010f04:	f7042783          	lw	a5,-144(s0)
20010f08:	c385                	beqz	a5,20010f28 <crypto_aead_decrypt+0x336>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:206 (discriminator 4)
20010f0a:	f7442783          	lw	a5,-140(s0)
20010f0e:	4398                	lw	a4,0(a5)
20010f10:	f7042683          	lw	a3,-144(s0)
20010f14:	4781                	li	a5,0
20010f16:	8f95                	sub	a5,a5,a3
20010f18:	078e                	slli	a5,a5,0x3
20010f1a:	02078793          	addi	a5,a5,32 # 20000020 <metal_segment_itim_target_end+0x18000020>
20010f1e:	56fd                	li	a3,-1
20010f20:	00f697b3          	sll	a5,a3,a5
20010f24:	8ff9                	and	a5,a5,a4
20010f26:	a011                	j	20010f2a <crypto_aead_decrypt+0x338>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:206 (discriminator 5)
20010f28:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:206 (discriminator 8)
20010f2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:207 (discriminator 8)
        c++;
20010f2e:	f7442783          	lw	a5,-140(s0)
20010f32:	0791                	addi	a5,a5,4
20010f34:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:208 (discriminator 8)
        cl = TRUNL(clen, *c);
20010f38:	f7042703          	lw	a4,-144(s0)
20010f3c:	4791                	li	a5,4
20010f3e:	02e7f163          	bgeu	a5,a4,20010f60 <crypto_aead_decrypt+0x36e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:208 (discriminator 1)
20010f42:	f7442783          	lw	a5,-140(s0)
20010f46:	4398                	lw	a4,0(a5)
20010f48:	f7042683          	lw	a3,-144(s0)
20010f4c:	4781                	li	a5,0
20010f4e:	8f95                	sub	a5,a5,a3
20010f50:	078e                	slli	a5,a5,0x3
20010f52:	04078793          	addi	a5,a5,64
20010f56:	56fd                	li	a3,-1
20010f58:	00f697b3          	sll	a5,a3,a5
20010f5c:	8ff9                	and	a5,a5,a4
20010f5e:	a011                	j	20010f62 <crypto_aead_decrypt+0x370>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:208 (discriminator 2)
20010f60:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:208 (discriminator 4)
20010f62:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:209 (discriminator 4)
        c++;
20010f66:	f7442783          	lw	a5,-140(s0)
20010f6a:	0791                	addi	a5,a5,4
20010f6c:	f6f42a23          	sw	a5,-140(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:210 (discriminator 4)
        *m = TRUNH(clen, s.xh[0] ^ ch);
20010f70:	f7042703          	lw	a4,-144(s0)
20010f74:	4791                	li	a5,4
20010f76:	00e7f863          	bgeu	a5,a4,20010f86 <crypto_aead_decrypt+0x394>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:210 (discriminator 1)
20010f7a:	f9c42703          	lw	a4,-100(s0)
20010f7e:	fec42783          	lw	a5,-20(s0)
20010f82:	8fb9                	xor	a5,a5,a4
20010f84:	a035                	j	20010fb0 <crypto_aead_decrypt+0x3be>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:210 (discriminator 2)
20010f86:	f7042783          	lw	a5,-144(s0)
20010f8a:	c395                	beqz	a5,20010fae <crypto_aead_decrypt+0x3bc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:210 (discriminator 4)
20010f8c:	f9c42703          	lw	a4,-100(s0)
20010f90:	fec42783          	lw	a5,-20(s0)
20010f94:	8f3d                	xor	a4,a4,a5
20010f96:	f7042683          	lw	a3,-144(s0)
20010f9a:	4781                	li	a5,0
20010f9c:	8f95                	sub	a5,a5,a3
20010f9e:	078e                	slli	a5,a5,0x3
20010fa0:	02078793          	addi	a5,a5,32
20010fa4:	56fd                	li	a3,-1
20010fa6:	00f697b3          	sll	a5,a3,a5
20010faa:	8ff9                	and	a5,a5,a4
20010fac:	a011                	j	20010fb0 <crypto_aead_decrypt+0x3be>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:210 (discriminator 5)
20010fae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:210 (discriminator 8)
20010fb0:	f7c42703          	lw	a4,-132(s0)
20010fb4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:211 (discriminator 8)
        m++;
20010fb6:	f7c42783          	lw	a5,-132(s0)
20010fba:	0791                	addi	a5,a5,4
20010fbc:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:212 (discriminator 8)
        *m = TRUNL(clen, s.xl[0] ^ cl);
20010fc0:	f7042703          	lw	a4,-144(s0)
20010fc4:	4791                	li	a5,4
20010fc6:	02e7f363          	bgeu	a5,a4,20010fec <crypto_aead_decrypt+0x3fa>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:212 (discriminator 1)
20010fca:	fb042703          	lw	a4,-80(s0)
20010fce:	fe842783          	lw	a5,-24(s0)
20010fd2:	8f3d                	xor	a4,a4,a5
20010fd4:	f7042683          	lw	a3,-144(s0)
20010fd8:	4781                	li	a5,0
20010fda:	8f95                	sub	a5,a5,a3
20010fdc:	078e                	slli	a5,a5,0x3
20010fde:	04078793          	addi	a5,a5,64
20010fe2:	56fd                	li	a3,-1
20010fe4:	00f697b3          	sll	a5,a3,a5
20010fe8:	8ff9                	and	a5,a5,a4
20010fea:	a011                	j	20010fee <crypto_aead_decrypt+0x3fc>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:212 (discriminator 2)
20010fec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:212 (discriminator 4)
20010fee:	f7c42703          	lw	a4,-132(s0)
20010ff2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:213 (discriminator 4)
        m++;
20010ff4:	f7c42783          	lw	a5,-132(s0)
20010ff8:	0791                	addi	a5,a5,4
20010ffa:	f6f42e23          	sw	a5,-132(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:215
    }
    s.xh[0] = CLEARH(clen, s.xh[0]);
20010ffe:	f7042703          	lw	a4,-144(s0)
20011002:	4791                	li	a5,4
20011004:	02e7e863          	bltu	a5,a4,20011034 <crypto_aead_decrypt+0x442>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:215 (discriminator 1)
20011008:	f7042783          	lw	a5,-144(s0)
2001100c:	e781                	bnez	a5,20011014 <crypto_aead_decrypt+0x422>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:215 (discriminator 3)
2001100e:	f9c42783          	lw	a5,-100(s0)
20011012:	a015                	j	20011036 <crypto_aead_decrypt+0x444>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:215 (discriminator 4)
20011014:	f9c42703          	lw	a4,-100(s0)
20011018:	f7042683          	lw	a3,-144(s0)
2001101c:	4781                	li	a5,0
2001101e:	8f95                	sub	a5,a5,a3
20011020:	078e                	slli	a5,a5,0x3
20011022:	02078793          	addi	a5,a5,32
20011026:	56fd                	li	a3,-1
20011028:	00f697b3          	sll	a5,a3,a5
2001102c:	fff7c793          	not	a5,a5
20011030:	8ff9                	and	a5,a5,a4
20011032:	a011                	j	20011036 <crypto_aead_decrypt+0x444>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:215 (discriminator 2)
20011034:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:215 (discriminator 8)
20011036:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:216 (discriminator 8)
    s.xl[0] = CLEARL(clen, s.xl[0]);
2001103a:	f7042703          	lw	a4,-144(s0)
2001103e:	4791                	li	a5,4
20011040:	02e7f263          	bgeu	a5,a4,20011064 <crypto_aead_decrypt+0x472>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:216 (discriminator 1)
20011044:	fb042703          	lw	a4,-80(s0)
20011048:	f7042683          	lw	a3,-144(s0)
2001104c:	4781                	li	a5,0
2001104e:	8f95                	sub	a5,a5,a3
20011050:	078e                	slli	a5,a5,0x3
20011052:	04078793          	addi	a5,a5,64
20011056:	56fd                	li	a3,-1
20011058:	00f697b3          	sll	a5,a3,a5
2001105c:	fff7c793          	not	a5,a5
20011060:	8ff9                	and	a5,a5,a4
20011062:	a019                	j	20011068 <crypto_aead_decrypt+0x476>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:216 (discriminator 2)
20011064:	fb042783          	lw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:216 (discriminator 4)
20011068:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:218 (discriminator 4)
    //printstate("clear bytes", &s, debug);
    s.xh[0] |= ch;
2001106c:	f9c42703          	lw	a4,-100(s0)
20011070:	fec42783          	lw	a5,-20(s0)
20011074:	8fd9                	or	a5,a5,a4
20011076:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:219 (discriminator 4)
    s.xl[0] |= cl;
2001107a:	fb042703          	lw	a4,-80(s0)
2001107e:	fe842783          	lw	a5,-24(s0)
20011082:	8fd9                	or	a5,a5,a4
20011084:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:220 (discriminator 4)
    s.xh[0] ^= PADH(clen);
20011088:	f9c42703          	lw	a4,-100(s0)
2001108c:	f7042683          	lw	a3,-144(s0)
20011090:	478d                	li	a5,3
20011092:	00d7ea63          	bltu	a5,a3,200110a6 <crypto_aead_decrypt+0x4b4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:220 (discriminator 1)
20011096:	f7042783          	lw	a5,-144(s0)
2001109a:	078e                	slli	a5,a5,0x3
2001109c:	800006b7          	lui	a3,0x80000
200110a0:	00f6d7b3          	srl	a5,a3,a5
200110a4:	a011                	j	200110a8 <crypto_aead_decrypt+0x4b6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:220 (discriminator 2)
200110a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:220 (discriminator 4)
200110a8:	8fb9                	xor	a5,a5,a4
200110aa:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:221 (discriminator 4)
    s.xl[0] ^= PADL(clen);
200110ae:	fb042703          	lw	a4,-80(s0)
200110b2:	f7042683          	lw	a3,-144(s0)
200110b6:	478d                	li	a5,3
200110b8:	02d7f563          	bgeu	a5,a3,200110e2 <crypto_aead_decrypt+0x4f0>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:221 (discriminator 1)
200110bc:	f7042683          	lw	a3,-144(s0)
200110c0:	47a1                	li	a5,8
200110c2:	00f68e63          	beq	a3,a5,200110de <crypto_aead_decrypt+0x4ec>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:221 (discriminator 3)
200110c6:	f7042683          	lw	a3,-144(s0)
200110ca:	200007b7          	lui	a5,0x20000
200110ce:	17f1                	addi	a5,a5,-4
200110d0:	97b6                	add	a5,a5,a3
200110d2:	078e                	slli	a5,a5,0x3
200110d4:	800006b7          	lui	a3,0x80000
200110d8:	00f6d7b3          	srl	a5,a3,a5
200110dc:	a021                	j	200110e4 <crypto_aead_decrypt+0x4f2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:221 (discriminator 4)
200110de:	4781                	li	a5,0
200110e0:	a011                	j	200110e4 <crypto_aead_decrypt+0x4f2>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:221 (discriminator 2)
200110e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:221 (discriminator 8)
200110e4:	8fb9                	xor	a5,a5,a4
200110e6:	faf42823          	sw	a5,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:224 (discriminator 8)
    //printstate("Pad M", &s, debug);
    /* Ending */
    s.xh[1] ^= K0.xh;
200110ea:	fa042703          	lw	a4,-96(s0)
200110ee:	fdc42783          	lw	a5,-36(s0)
200110f2:	8fb9                	xor	a5,a5,a4
200110f4:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:225 (discriminator 8)
    s.xl[1] ^= K0.xl;
200110f8:	fb442703          	lw	a4,-76(s0)
200110fc:	fe042783          	lw	a5,-32(s0)
20011100:	8fb9                	xor	a5,a5,a4
20011102:	faf42a23          	sw	a5,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:226 (discriminator 8)
    s.xh[2] ^= K1.xh;
20011106:	fa442703          	lw	a4,-92(s0)
2001110a:	fd442783          	lw	a5,-44(s0)
2001110e:	8fb9                	xor	a5,a5,a4
20011110:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:227 (discriminator 8)
    s.xl[2] ^= K1.xl;
20011114:	fb842703          	lw	a4,-72(s0)
20011118:	fd842783          	lw	a5,-40(s0)
2001111c:	8fb9                	xor	a5,a5,a4
2001111e:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:230 (discriminator 8)
    //printstate("Xor key 1", &s, debug);

    P12(&s);
20011122:	f9c40793          	addi	a5,s0,-100
20011126:	853e                	mv	a0,a5
20011128:	cdcff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:231 (discriminator 8)
    s.xh[3] ^= K0.xh;
2001112c:	fa842703          	lw	a4,-88(s0)
20011130:	fdc42783          	lw	a5,-36(s0)
20011134:	8fb9                	xor	a5,a5,a4
20011136:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:232 (discriminator 8)
    s.xl[3] ^= K0.xl;
2001113a:	fbc42703          	lw	a4,-68(s0)
2001113e:	fe042783          	lw	a5,-32(s0)
20011142:	8fb9                	xor	a5,a5,a4
20011144:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:233 (discriminator 8)
    s.xh[4] ^= K1.xh;
20011148:	fac42703          	lw	a4,-84(s0)
2001114c:	fd442783          	lw	a5,-44(s0)
20011150:	8fb9                	xor	a5,a5,a4
20011152:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:234 (discriminator 8)
    s.xl[4] ^= K1.xl;
20011156:	fc042703          	lw	a4,-64(s0)
2001115a:	fd842783          	lw	a5,-40(s0)
2001115e:	8fb9                	xor	a5,a5,a4
20011160:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:239 (discriminator 8)
    //printstate("Xor key 2", &s, debug);

    /* TAG*/
    u32 Tag[4];
    Tag[0] = s.xh[3];
20011164:	fa842783          	lw	a5,-88(s0)
20011168:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:240 (discriminator 8)
    Tag[1] = s.xl[3];
2001116c:	fbc42783          	lw	a5,-68(s0)
20011170:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:241 (discriminator 8)
    Tag[2] = s.xh[4];
20011174:	fac42783          	lw	a5,-84(s0)
20011178:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:242 (discriminator 8)
    Tag[3] = s.xl[4];
2001117c:	fc042783          	lw	a5,-64(s0)
20011180:	f8f42c23          	sw	a5,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:243 (discriminator 8)
    int res = 0;
20011184:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:248 (discriminator 8)
    /*for(int i = 0 ; i < 4; i ++){
        res |= c[i] ^ Tag[i];
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
20011188:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:249 (discriminator 8)
}
2001118c:	853e                	mv	a0,a5
2001118e:	40fa                	lw	ra,156(sp)
20011190:	446a                	lw	s0,152(sp)
20011192:	610d                	addi	sp,sp,160
20011194:	8082                	ret

20011196 <crypto_hash>:
crypto_hash():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:251

int crypto_hash(u32 *m, u32 mlen, u32 *h) {
20011196:	715d                	addi	sp,sp,-80
20011198:	c686                	sw	ra,76(sp)
2001119a:	c4a2                	sw	s0,72(sp)
2001119c:	0880                	addi	s0,sp,80
2001119e:	faa42e23          	sw	a0,-68(s0)
200111a2:	fab42c23          	sw	a1,-72(s0)
200111a6:	fac42a23          	sw	a2,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:255

    /* initialize */
    ascon_state_t s;
    s.xh[0] = 0x00400c00;
200111aa:	004017b7          	lui	a5,0x401
200111ae:	c0078793          	addi	a5,a5,-1024 # 400c00 <__heap_size+0x400400>
200111b2:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:256
    s.xl[0] = 0x00000100;
200111b6:	10000793          	li	a5,256
200111ba:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:257
    s.xh[1] = 0;
200111be:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:258
    s.xl[1] = 0;
200111c2:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:259
    s.xh[2] = 0;
200111c6:	fc042623          	sw	zero,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:260
    s.xl[2] = 0;
200111ca:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:261
    s.xh[3] = 0;
200111ce:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:262
    s.xl[3] = 0;
200111d2:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:263
    s.xh[4] = 0;
200111d6:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:264
    s.xl[4] = 0;
200111da:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:266
    //printstate("After init", &s, debug);
    P12(&s);
200111de:	fc440793          	addi	a5,s0,-60
200111e2:	853e                	mv	a0,a5
200111e4:	c20ff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:269


    if (mlen) {
200111e8:	fb842783          	lw	a5,-72(s0)
200111ec:	14078263          	beqz	a5,20011330 <crypto_hash+0x19a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:270
        while (mlen >= 8) {
200111f0:	a0a9                	j	2001123a <crypto_hash+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:271
            s.xh[0] ^= *m;
200111f2:	fc442703          	lw	a4,-60(s0)
200111f6:	fbc42783          	lw	a5,-68(s0)
200111fa:	439c                	lw	a5,0(a5)
200111fc:	8fb9                	xor	a5,a5,a4
200111fe:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:272
            m++;
20011202:	fbc42783          	lw	a5,-68(s0)
20011206:	0791                	addi	a5,a5,4
20011208:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:273
            s.xl[0] ^= *m;
2001120c:	fd842703          	lw	a4,-40(s0)
20011210:	fbc42783          	lw	a5,-68(s0)
20011214:	439c                	lw	a5,0(a5)
20011216:	8fb9                	xor	a5,a5,a4
20011218:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:274
            m++;
2001121c:	fbc42783          	lw	a5,-68(s0)
20011220:	0791                	addi	a5,a5,4
20011222:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:275
            P12(&s);
20011226:	fc440793          	addi	a5,s0,-60
2001122a:	853e                	mv	a0,a5
2001122c:	bd8ff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:277
            //printstate("Absorb AD", &s, debug);
            mlen -= 8;
20011230:	fb842783          	lw	a5,-72(s0)
20011234:	17e1                	addi	a5,a5,-8
20011236:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:270
        while (mlen >= 8) {
2001123a:	fb842703          	lw	a4,-72(s0)
2001123e:	479d                	li	a5,7
20011240:	fae7e9e3          	bltu	a5,a4,200111f2 <crypto_hash+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:279
        }
        s.xh[0] ^= TRUNH(mlen, *m);
20011244:	fc442703          	lw	a4,-60(s0)
20011248:	fb842683          	lw	a3,-72(s0)
2001124c:	4791                	li	a5,4
2001124e:	00d7f663          	bgeu	a5,a3,2001125a <crypto_hash+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:279 (discriminator 1)
20011252:	fbc42783          	lw	a5,-68(s0)
20011256:	439c                	lw	a5,0(a5)
20011258:	a025                	j	20011280 <crypto_hash+0xea>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:279 (discriminator 2)
2001125a:	fb842783          	lw	a5,-72(s0)
2001125e:	c385                	beqz	a5,2001127e <crypto_hash+0xe8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:279 (discriminator 4)
20011260:	fbc42783          	lw	a5,-68(s0)
20011264:	4394                	lw	a3,0(a5)
20011266:	fb842603          	lw	a2,-72(s0)
2001126a:	4781                	li	a5,0
2001126c:	8f91                	sub	a5,a5,a2
2001126e:	078e                	slli	a5,a5,0x3
20011270:	02078793          	addi	a5,a5,32
20011274:	567d                	li	a2,-1
20011276:	00f617b3          	sll	a5,a2,a5
2001127a:	8ff5                	and	a5,a5,a3
2001127c:	a011                	j	20011280 <crypto_hash+0xea>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:279 (discriminator 5)
2001127e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:279 (discriminator 8)
20011280:	8fb9                	xor	a5,a5,a4
20011282:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:280 (discriminator 8)
        m++;
20011286:	fbc42783          	lw	a5,-68(s0)
2001128a:	0791                	addi	a5,a5,4
2001128c:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:281 (discriminator 8)
        s.xl[0] ^= TRUNL(mlen, *m);
20011290:	fd842703          	lw	a4,-40(s0)
20011294:	fb842683          	lw	a3,-72(s0)
20011298:	4791                	li	a5,4
2001129a:	02d7f163          	bgeu	a5,a3,200112bc <crypto_hash+0x126>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:281 (discriminator 1)
2001129e:	fbc42783          	lw	a5,-68(s0)
200112a2:	4394                	lw	a3,0(a5)
200112a4:	fb842603          	lw	a2,-72(s0)
200112a8:	4781                	li	a5,0
200112aa:	8f91                	sub	a5,a5,a2
200112ac:	078e                	slli	a5,a5,0x3
200112ae:	04078793          	addi	a5,a5,64
200112b2:	567d                	li	a2,-1
200112b4:	00f617b3          	sll	a5,a2,a5
200112b8:	8ff5                	and	a5,a5,a3
200112ba:	a011                	j	200112be <crypto_hash+0x128>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:281 (discriminator 2)
200112bc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:281 (discriminator 4)
200112be:	8fb9                	xor	a5,a5,a4
200112c0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:283 (discriminator 4)

        s.xh[0] ^= PADH(mlen);
200112c4:	fc442703          	lw	a4,-60(s0)
200112c8:	fb842683          	lw	a3,-72(s0)
200112cc:	478d                	li	a5,3
200112ce:	00d7ea63          	bltu	a5,a3,200112e2 <crypto_hash+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:283 (discriminator 1)
200112d2:	fb842783          	lw	a5,-72(s0)
200112d6:	078e                	slli	a5,a5,0x3
200112d8:	800006b7          	lui	a3,0x80000
200112dc:	00f6d7b3          	srl	a5,a3,a5
200112e0:	a011                	j	200112e4 <crypto_hash+0x14e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:283 (discriminator 2)
200112e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:283 (discriminator 4)
200112e4:	8fb9                	xor	a5,a5,a4
200112e6:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:284 (discriminator 4)
        s.xl[0] ^= PADL(mlen);
200112ea:	fd842703          	lw	a4,-40(s0)
200112ee:	fb842683          	lw	a3,-72(s0)
200112f2:	478d                	li	a5,3
200112f4:	02d7f563          	bgeu	a5,a3,2001131e <crypto_hash+0x188>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:284 (discriminator 1)
200112f8:	fb842683          	lw	a3,-72(s0)
200112fc:	47a1                	li	a5,8
200112fe:	00f68e63          	beq	a3,a5,2001131a <crypto_hash+0x184>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:284 (discriminator 3)
20011302:	fb842683          	lw	a3,-72(s0)
20011306:	200007b7          	lui	a5,0x20000
2001130a:	17f1                	addi	a5,a5,-4
2001130c:	97b6                	add	a5,a5,a3
2001130e:	078e                	slli	a5,a5,0x3
20011310:	800006b7          	lui	a3,0x80000
20011314:	00f6d7b3          	srl	a5,a3,a5
20011318:	a021                	j	20011320 <crypto_hash+0x18a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:284 (discriminator 4)
2001131a:	4781                	li	a5,0
2001131c:	a011                	j	20011320 <crypto_hash+0x18a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:284 (discriminator 2)
2001131e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:284 (discriminator 8)
20011320:	8fb9                	xor	a5,a5,a4
20011322:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:286 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P12(&s);
20011326:	fc440793          	addi	a5,s0,-60
2001132a:	853e                	mv	a0,a5
2001132c:	ad8ff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:288
    }
    for (int i = 0; i < 4; i++) {
20011330:	fe042623          	sw	zero,-20(s0)
20011334:	a099                	j	2001137a <crypto_hash+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:289
        h[i * 2] = s.xh[0];
20011336:	fec42783          	lw	a5,-20(s0)
2001133a:	078e                	slli	a5,a5,0x3
2001133c:	fb442703          	lw	a4,-76(s0)
20011340:	97ba                	add	a5,a5,a4
20011342:	fc442703          	lw	a4,-60(s0)
20011346:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:290
        h[i * 2 + 1] = s.xl[0];
20011348:	fec42783          	lw	a5,-20(s0)
2001134c:	078e                	slli	a5,a5,0x3
2001134e:	0791                	addi	a5,a5,4
20011350:	fb442703          	lw	a4,-76(s0)
20011354:	97ba                	add	a5,a5,a4
20011356:	fd842703          	lw	a4,-40(s0)
2001135a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:291
        if (i < 3) {
2001135c:	fec42703          	lw	a4,-20(s0)
20011360:	4789                	li	a5,2
20011362:	00e7c763          	blt	a5,a4,20011370 <crypto_hash+0x1da>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:292
            P12(&s);
20011366:	fc440793          	addi	a5,s0,-60
2001136a:	853e                	mv	a0,a5
2001136c:	a98ff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:288 (discriminator 2)
    for (int i = 0; i < 4; i++) {
20011370:	fec42783          	lw	a5,-20(s0)
20011374:	0785                	addi	a5,a5,1
20011376:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:288 (discriminator 1)
2001137a:	fec42703          	lw	a4,-20(s0)
2001137e:	478d                	li	a5,3
20011380:	fae7dbe3          	bge	a5,a4,20011336 <crypto_hash+0x1a0>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:296
        }
        //printstate("Hash Round", &s, debug);
    }
    return 0;
20011384:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:297
}
20011386:	853e                	mv	a0,a5
20011388:	40b6                	lw	ra,76(sp)
2001138a:	4426                	lw	s0,72(sp)
2001138c:	6161                	addi	sp,sp,80
2001138e:	8082                	ret

20011390 <init_seed>:
init_seed():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:299

int init_seed(ascon_state_t *s, u64 seed) {
20011390:	1101                	addi	sp,sp,-32
20011392:	ce06                	sw	ra,28(sp)
20011394:	cc22                	sw	s0,24(sp)
20011396:	1000                	addi	s0,sp,32
20011398:	fea42623          	sw	a0,-20(s0)
2001139c:	feb42223          	sw	a1,-28(s0)
200113a0:	fec42423          	sw	a2,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:301
    /* initialize */
    s->xh[0] = 0;
200113a4:	fec42783          	lw	a5,-20(s0)
200113a8:	0007a023          	sw	zero,0(a5) # 20000000 <metal_segment_itim_target_end+0x18000000>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:302
    s->xl[0] = 0;
200113ac:	fec42783          	lw	a5,-20(s0)
200113b0:	0007aa23          	sw	zero,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:303
    s->xh[1] = 0;
200113b4:	fec42783          	lw	a5,-20(s0)
200113b8:	0007a223          	sw	zero,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:304
    s->xl[1] = 0;
200113bc:	fec42783          	lw	a5,-20(s0)
200113c0:	0007ac23          	sw	zero,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:305
    s->xh[2] = 0;
200113c4:	fec42783          	lw	a5,-20(s0)
200113c8:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:306
    s->xl[2] = 0;
200113cc:	fec42783          	lw	a5,-20(s0)
200113d0:	0007ae23          	sw	zero,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:307
    s->xh[3] = 0;
200113d4:	fec42783          	lw	a5,-20(s0)
200113d8:	0007a623          	sw	zero,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:308
    s->xl[3] = 0;
200113dc:	fec42783          	lw	a5,-20(s0)
200113e0:	0207a023          	sw	zero,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:309
    s->xh[4] = 0;
200113e4:	fec42783          	lw	a5,-20(s0)
200113e8:	0007a823          	sw	zero,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:310
    s->xl[4] = 0;
200113ec:	fec42783          	lw	a5,-20(s0)
200113f0:	0207a223          	sw	zero,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:311
    P12(s);
200113f4:	fec42503          	lw	a0,-20(s0)
200113f8:	a0cff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:312
    s->xh[0] = seed.xh;
200113fc:	fe442703          	lw	a4,-28(s0)
20011400:	fec42783          	lw	a5,-20(s0)
20011404:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:313
    s->xl[0] = seed.xl;
20011406:	fe842703          	lw	a4,-24(s0)
2001140a:	fec42783          	lw	a5,-20(s0)
2001140e:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:314
    P12(s);
20011410:	fec42503          	lw	a0,-20(s0)
20011414:	9f0ff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:315
    return 0;
20011418:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:316
}
2001141a:	853e                	mv	a0,a5
2001141c:	40f2                	lw	ra,28(sp)
2001141e:	4462                	lw	s0,24(sp)
20011420:	6105                	addi	sp,sp,32
20011422:	8082                	ret

20011424 <rand_ascon>:
rand_ascon():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:325
    s->xh[0] = seed.xh;
    s->xl[0] = seed.xl;
    P12(s);
}

int rand_ascon(ascon_state_t *s, u32 *arr, u32 len){
20011424:	7179                	addi	sp,sp,-48
20011426:	d606                	sw	ra,44(sp)
20011428:	d422                	sw	s0,40(sp)
2001142a:	1800                	addi	s0,sp,48
2001142c:	fca42e23          	sw	a0,-36(s0)
20011430:	fcb42c23          	sw	a1,-40(s0)
20011434:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:326
   for( int i = 0 ; i < len ; i ++){
20011438:	fe042623          	sw	zero,-20(s0)
2001143c:	a081                	j	2001147c <rand_ascon+0x58>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:327 (discriminator 3)
       *arr = s->xh[0];
2001143e:	fdc42783          	lw	a5,-36(s0)
20011442:	4398                	lw	a4,0(a5)
20011444:	fd842783          	lw	a5,-40(s0)
20011448:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:328 (discriminator 3)
       arr ++;
2001144a:	fd842783          	lw	a5,-40(s0)
2001144e:	0791                	addi	a5,a5,4
20011450:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:329 (discriminator 3)
       *arr = s->xl[0];
20011454:	fdc42783          	lw	a5,-36(s0)
20011458:	4bd8                	lw	a4,20(a5)
2001145a:	fd842783          	lw	a5,-40(s0)
2001145e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:330 (discriminator 3)
       arr ++;
20011460:	fd842783          	lw	a5,-40(s0)
20011464:	0791                	addi	a5,a5,4
20011466:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:331 (discriminator 3)
       P12(s);
2001146a:	fdc42503          	lw	a0,-36(s0)
2001146e:	996ff0ef          	jal	ra,20010604 <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:326 (discriminator 3)
   for( int i = 0 ; i < len ; i ++){
20011472:	fec42783          	lw	a5,-20(s0)
20011476:	0785                	addi	a5,a5,1
20011478:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:326 (discriminator 1)
2001147c:	fec42783          	lw	a5,-20(s0)
20011480:	fd442703          	lw	a4,-44(s0)
20011484:	fae7ede3          	bltu	a5,a4,2001143e <rand_ascon+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:333
   }
    return  0;
20011488:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../Asconref/aead.h:334
}
2001148a:	853e                	mv	a0,a5
2001148c:	50b2                	lw	ra,44(sp)
2001148e:	5422                	lw	s0,40(sp)
20011490:	6145                	addi	sp,sp,48
20011492:	8082                	ret

20011494 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../RoCCcommon/csr.h:50

#define rdtime() read_csr(time)
// #define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

unsigned rdcycle() {
20011494:	1101                	addi	sp,sp,-32
20011496:	ce22                	sw	s0,28(sp)
20011498:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../RoCCcommon/csr.h:51
  unsigned mcycle = 0;
2001149a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../RoCCcommon/csr.h:53

  asm volatile ("csrr %0,mcycle"   : "=r" (mcycle)  );
2001149e:	b00027f3          	csrr	a5,mcycle
200114a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../RoCCcommon/csr.h:55

  return mcycle;
200114a6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/../RoCCcommon/csr.h:56
}
200114aa:	853e                	mv	a0,a5
200114ac:	4472                	lw	s0,28(sp)
200114ae:	6105                	addi	sp,sp,32
200114b0:	8082                	ret

200114b2 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:8
#include "../RoCCcommon/csr.h"

#define  REP 30
#define PLEN 2500

int main(void) {
200114b2:	7159                	addi	sp,sp,-112
200114b4:	d686                	sw	ra,108(sp)
200114b6:	d4a2                	sw	s0,104(sp)
200114b8:	1880                	addi	s0,sp,112
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:9
    u32 clen = 0;
200114ba:	fc042223          	sw	zero,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:12

    static u32 plain_text[PLEN+12];
    for(int j = 0 ; j < PLEN; j ++){
200114be:	fe042623          	sw	zero,-20(s0)
200114c2:	a03d                	j	200114f0 <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:13 (discriminator 3)
        plain_text [j] = j * PLEN + j;
200114c4:	fec42703          	lw	a4,-20(s0)
200114c8:	6785                	lui	a5,0x1
200114ca:	9c578793          	addi	a5,a5,-1595 # 9c5 <__heap_size+0x1c5>
200114ce:	02f707b3          	mul	a5,a4,a5
200114d2:	86be                	mv	a3,a5
200114d4:	800017b7          	lui	a5,0x80001
200114d8:	b3478713          	addi	a4,a5,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
200114dc:	fec42783          	lw	a5,-20(s0)
200114e0:	078a                	slli	a5,a5,0x2
200114e2:	97ba                	add	a5,a5,a4
200114e4:	c394                	sw	a3,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:12 (discriminator 3)
    for(int j = 0 ; j < PLEN; j ++){
200114e6:	fec42783          	lw	a5,-20(s0)
200114ea:	0785                	addi	a5,a5,1
200114ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:12 (discriminator 1)
200114f0:	fec42703          	lw	a4,-20(s0)
200114f4:	6785                	lui	a5,0x1
200114f6:	9c378793          	addi	a5,a5,-1597 # 9c3 <__heap_size+0x1c3>
200114fa:	fce7d5e3          	bge	a5,a4,200114c4 <main+0x12>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:27

    unsigned start, end;

    // ENC

    int i = 0;
200114fe:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:28
    printf("ENC \n");
20011502:	200177b7          	lui	a5,0x20017
20011506:	4d478513          	addi	a0,a5,1236 # 200174d4 <_exit+0x20>
2001150a:	74c000ef          	jal	ra,20011c56 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:29
    for (int j = 0; j < 7; j++) {
2001150e:	fe042223          	sw	zero,-28(s0)
20011512:	a0f5                	j	200115fe <main+0x14c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:30
        for (i = 0; i < REP; i++) {
20011514:	fe042423          	sw	zero,-24(s0)
20011518:	a8a5                	j	20011590 <main+0xde>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:31 (discriminator 3)
            start = rdcycle();
2001151a:	3fad                	jal	20011494 <rdcycle>
2001151c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:32 (discriminator 3)
            crypto_aead_encrypt(plain_text+2, &clen, plain_text, bytes[j], plain_text, 0, Nonce, Key);
20011520:	800017b7          	lui	a5,0x80001
20011524:	b3c78513          	addi	a0,a5,-1220 # 80000b3c <metal_segment_heap_target_end+0xffffcbc0>
20011528:	800007b7          	lui	a5,0x80000
2001152c:	00078713          	mv	a4,a5
20011530:	fe442783          	lw	a5,-28(s0)
20011534:	078a                	slli	a5,a5,0x2
20011536:	97ba                	add	a5,a5,a4
20011538:	4394                	lw	a3,0(a5)
2001153a:	fc440593          	addi	a1,s0,-60
2001153e:	800007b7          	lui	a5,0x80000
20011542:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc0b0>
20011546:	800007b7          	lui	a5,0x80000
2001154a:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc0a0>
2001154e:	4781                	li	a5,0
20011550:	80001737          	lui	a4,0x80001
20011554:	b3470713          	addi	a4,a4,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011558:	80001637          	lui	a2,0x80001
2001155c:	b3460613          	addi	a2,a2,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011560:	984ff0ef          	jal	ra,200106e4 <crypto_aead_encrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:33 (discriminator 3)
            end = rdcycle();
20011564:	3f05                	jal	20011494 <rdcycle>
20011566:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:34 (discriminator 3)
            performance2[i] = end - start;
2001156a:	fc842703          	lw	a4,-56(s0)
2001156e:	fcc42783          	lw	a5,-52(s0)
20011572:	8f1d                	sub	a4,a4,a5
20011574:	800037b7          	lui	a5,0x80003
20011578:	27478693          	addi	a3,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
2001157c:	fe842783          	lw	a5,-24(s0)
20011580:	078a                	slli	a5,a5,0x2
20011582:	97b6                	add	a5,a5,a3
20011584:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:30 (discriminator 3)
        for (i = 0; i < REP; i++) {
20011586:	fe842783          	lw	a5,-24(s0)
2001158a:	0785                	addi	a5,a5,1
2001158c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:30 (discriminator 1)
20011590:	fe842703          	lw	a4,-24(s0)
20011594:	47f5                	li	a5,29
20011596:	f8e7d2e3          	bge	a5,a4,2001151a <main+0x68>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:36
        }
        printf("ENC bytes %d \n", bytes[j]);
2001159a:	800007b7          	lui	a5,0x80000
2001159e:	00078713          	mv	a4,a5
200115a2:	fe442783          	lw	a5,-28(s0)
200115a6:	078a                	slli	a5,a5,0x2
200115a8:	97ba                	add	a5,a5,a4
200115aa:	439c                	lw	a5,0(a5)
200115ac:	85be                	mv	a1,a5
200115ae:	200177b7          	lui	a5,0x20017
200115b2:	4dc78513          	addi	a0,a5,1244 # 200174dc <_exit+0x28>
200115b6:	2349                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:37
        for (i = 0; i < REP; i++) {
200115b8:	fe042423          	sw	zero,-24(s0)
200115bc:	a03d                	j	200115ea <main+0x138>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:38 (discriminator 3)
            printf("%d:   SWcycles : %u   \n", i, performance2[i] );
200115be:	800037b7          	lui	a5,0x80003
200115c2:	27478713          	addi	a4,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
200115c6:	fe842783          	lw	a5,-24(s0)
200115ca:	078a                	slli	a5,a5,0x2
200115cc:	97ba                	add	a5,a5,a4
200115ce:	439c                	lw	a5,0(a5)
200115d0:	863e                	mv	a2,a5
200115d2:	fe842583          	lw	a1,-24(s0)
200115d6:	200177b7          	lui	a5,0x20017
200115da:	4ec78513          	addi	a0,a5,1260 # 200174ec <_exit+0x38>
200115de:	2ba9                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:37 (discriminator 3)
        for (i = 0; i < REP; i++) {
200115e0:	fe842783          	lw	a5,-24(s0)
200115e4:	0785                	addi	a5,a5,1
200115e6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:37 (discriminator 1)
200115ea:	fe842703          	lw	a4,-24(s0)
200115ee:	47f5                	li	a5,29
200115f0:	fce7d7e3          	bge	a5,a4,200115be <main+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:29 (discriminator 2)
    for (int j = 0; j < 7; j++) {
200115f4:	fe442783          	lw	a5,-28(s0)
200115f8:	0785                	addi	a5,a5,1
200115fa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:29 (discriminator 1)
200115fe:	fe442703          	lw	a4,-28(s0)
20011602:	4799                	li	a5,6
20011604:	f0e7d8e3          	bge	a5,a4,20011514 <main+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:42
        }
    }

    printf("ENC 100 A\n");
20011608:	200177b7          	lui	a5,0x20017
2001160c:	50478513          	addi	a0,a5,1284 # 20017504 <_exit+0x50>
20011610:	2599                	jal	20011c56 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:43
    for (int j = 0; j < 7; j++) {
20011612:	fe042023          	sw	zero,-32(s0)
20011616:	a0fd                	j	20011704 <main+0x252>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:44
        for (i = 0; i < REP; i++) {
20011618:	fe042423          	sw	zero,-24(s0)
2001161c:	a8ad                	j	20011696 <main+0x1e4>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:45 (discriminator 3)
            start = rdcycle();
2001161e:	3d9d                	jal	20011494 <rdcycle>
20011620:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:46 (discriminator 3)
            crypto_aead_encrypt(plain_text+2, &clen, plain_text, 0, plain_text, bytes[j], Nonce, Key);
20011624:	800017b7          	lui	a5,0x80001
20011628:	b3c78513          	addi	a0,a5,-1220 # 80000b3c <metal_segment_heap_target_end+0xffffcbc0>
2001162c:	800007b7          	lui	a5,0x80000
20011630:	00078713          	mv	a4,a5
20011634:	fe042783          	lw	a5,-32(s0)
20011638:	078a                	slli	a5,a5,0x2
2001163a:	97ba                	add	a5,a5,a4
2001163c:	4398                	lw	a4,0(a5)
2001163e:	fc440593          	addi	a1,s0,-60
20011642:	800007b7          	lui	a5,0x80000
20011646:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc0b0>
2001164a:	800007b7          	lui	a5,0x80000
2001164e:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc0a0>
20011652:	87ba                	mv	a5,a4
20011654:	80001737          	lui	a4,0x80001
20011658:	b3470713          	addi	a4,a4,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
2001165c:	4681                	li	a3,0
2001165e:	80001637          	lui	a2,0x80001
20011662:	b3460613          	addi	a2,a2,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011666:	87eff0ef          	jal	ra,200106e4 <crypto_aead_encrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:47 (discriminator 3)
            end = rdcycle();
2001166a:	352d                	jal	20011494 <rdcycle>
2001166c:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:48 (discriminator 3)
            performance2[i] = end - start;
20011670:	fc842703          	lw	a4,-56(s0)
20011674:	fcc42783          	lw	a5,-52(s0)
20011678:	8f1d                	sub	a4,a4,a5
2001167a:	800037b7          	lui	a5,0x80003
2001167e:	27478693          	addi	a3,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
20011682:	fe842783          	lw	a5,-24(s0)
20011686:	078a                	slli	a5,a5,0x2
20011688:	97b6                	add	a5,a5,a3
2001168a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:44 (discriminator 3)
        for (i = 0; i < REP; i++) {
2001168c:	fe842783          	lw	a5,-24(s0)
20011690:	0785                	addi	a5,a5,1
20011692:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:44 (discriminator 1)
20011696:	fe842703          	lw	a4,-24(s0)
2001169a:	47f5                	li	a5,29
2001169c:	f8e7d1e3          	bge	a5,a4,2001161e <main+0x16c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:50
        }
        printf("ENC 100 A bytes %d \n", bytes[j]);
200116a0:	800007b7          	lui	a5,0x80000
200116a4:	00078713          	mv	a4,a5
200116a8:	fe042783          	lw	a5,-32(s0)
200116ac:	078a                	slli	a5,a5,0x2
200116ae:	97ba                	add	a5,a5,a4
200116b0:	439c                	lw	a5,0(a5)
200116b2:	85be                	mv	a1,a5
200116b4:	200177b7          	lui	a5,0x20017
200116b8:	51078513          	addi	a0,a5,1296 # 20017510 <_exit+0x5c>
200116bc:	29b5                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:51
        for (i = 0; i < REP; i++) {
200116be:	fe042423          	sw	zero,-24(s0)
200116c2:	a03d                	j	200116f0 <main+0x23e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:52 (discriminator 3)
            printf("%d:   SWcycles : %u  \n", i, performance2[i]);
200116c4:	800037b7          	lui	a5,0x80003
200116c8:	27478713          	addi	a4,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
200116cc:	fe842783          	lw	a5,-24(s0)
200116d0:	078a                	slli	a5,a5,0x2
200116d2:	97ba                	add	a5,a5,a4
200116d4:	439c                	lw	a5,0(a5)
200116d6:	863e                	mv	a2,a5
200116d8:	fe842583          	lw	a1,-24(s0)
200116dc:	200177b7          	lui	a5,0x20017
200116e0:	52878513          	addi	a0,a5,1320 # 20017528 <_exit+0x74>
200116e4:	2991                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:51 (discriminator 3)
        for (i = 0; i < REP; i++) {
200116e6:	fe842783          	lw	a5,-24(s0)
200116ea:	0785                	addi	a5,a5,1
200116ec:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:51 (discriminator 1)
200116f0:	fe842703          	lw	a4,-24(s0)
200116f4:	47f5                	li	a5,29
200116f6:	fce7d7e3          	bge	a5,a4,200116c4 <main+0x212>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:43 (discriminator 2)
    for (int j = 0; j < 7; j++) {
200116fa:	fe042783          	lw	a5,-32(s0)
200116fe:	0785                	addi	a5,a5,1
20011700:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:43 (discriminator 1)
20011704:	fe042703          	lw	a4,-32(s0)
20011708:	4799                	li	a5,6
2001170a:	f0e7d7e3          	bge	a5,a4,20011618 <main+0x166>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:59
    }



    /// DEC
    printf("DEC \n");
2001170e:	200177b7          	lui	a5,0x20017
20011712:	54078513          	addi	a0,a5,1344 # 20017540 <_exit+0x8c>
20011716:	2381                	jal	20011c56 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:60
    for (int j = 0; j < 7; j++) {
20011718:	fc042e23          	sw	zero,-36(s0)
2001171c:	a0f5                	j	20011808 <main+0x356>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:61
        for (i = 0; i < REP; i++) {
2001171e:	fe042423          	sw	zero,-24(s0)
20011722:	a8a5                	j	2001179a <main+0x2e8>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:62 (discriminator 3)
            start = rdcycle();
20011724:	3b85                	jal	20011494 <rdcycle>
20011726:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:63 (discriminator 3)
            crypto_aead_decrypt(plain_text+2, &clen, plain_text, bytes[j], plain_text, 0, Nonce, Key);
2001172a:	800017b7          	lui	a5,0x80001
2001172e:	b3c78513          	addi	a0,a5,-1220 # 80000b3c <metal_segment_heap_target_end+0xffffcbc0>
20011732:	800007b7          	lui	a5,0x80000
20011736:	00078713          	mv	a4,a5
2001173a:	fdc42783          	lw	a5,-36(s0)
2001173e:	078a                	slli	a5,a5,0x2
20011740:	97ba                	add	a5,a5,a4
20011742:	4394                	lw	a3,0(a5)
20011744:	fc440593          	addi	a1,s0,-60
20011748:	800007b7          	lui	a5,0x80000
2001174c:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc0b0>
20011750:	800007b7          	lui	a5,0x80000
20011754:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc0a0>
20011758:	4781                	li	a5,0
2001175a:	80001737          	lui	a4,0x80001
2001175e:	b3470713          	addi	a4,a4,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011762:	80001637          	lui	a2,0x80001
20011766:	b3460613          	addi	a2,a2,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
2001176a:	c88ff0ef          	jal	ra,20010bf2 <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:64 (discriminator 3)
            end = rdcycle();
2001176e:	331d                	jal	20011494 <rdcycle>
20011770:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:65 (discriminator 3)
            performance2[i] = end - start;
20011774:	fc842703          	lw	a4,-56(s0)
20011778:	fcc42783          	lw	a5,-52(s0)
2001177c:	8f1d                	sub	a4,a4,a5
2001177e:	800037b7          	lui	a5,0x80003
20011782:	27478693          	addi	a3,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
20011786:	fe842783          	lw	a5,-24(s0)
2001178a:	078a                	slli	a5,a5,0x2
2001178c:	97b6                	add	a5,a5,a3
2001178e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:61 (discriminator 3)
        for (i = 0; i < REP; i++) {
20011790:	fe842783          	lw	a5,-24(s0)
20011794:	0785                	addi	a5,a5,1
20011796:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:61 (discriminator 1)
2001179a:	fe842703          	lw	a4,-24(s0)
2001179e:	47f5                	li	a5,29
200117a0:	f8e7d2e3          	bge	a5,a4,20011724 <main+0x272>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:67
        }
        printf("DEC bytes %d \n", bytes[j]);
200117a4:	800007b7          	lui	a5,0x80000
200117a8:	00078713          	mv	a4,a5
200117ac:	fdc42783          	lw	a5,-36(s0)
200117b0:	078a                	slli	a5,a5,0x2
200117b2:	97ba                	add	a5,a5,a4
200117b4:	439c                	lw	a5,0(a5)
200117b6:	85be                	mv	a1,a5
200117b8:	200177b7          	lui	a5,0x20017
200117bc:	54878513          	addi	a0,a5,1352 # 20017548 <_exit+0x94>
200117c0:	2ea5                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:68
        for (i = 0; i < REP; i++) {
200117c2:	fe042423          	sw	zero,-24(s0)
200117c6:	a03d                	j	200117f4 <main+0x342>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:69 (discriminator 3)
            printf("%d:   SWcycles : %u   \n", i, performance2[i] );
200117c8:	800037b7          	lui	a5,0x80003
200117cc:	27478713          	addi	a4,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
200117d0:	fe842783          	lw	a5,-24(s0)
200117d4:	078a                	slli	a5,a5,0x2
200117d6:	97ba                	add	a5,a5,a4
200117d8:	439c                	lw	a5,0(a5)
200117da:	863e                	mv	a2,a5
200117dc:	fe842583          	lw	a1,-24(s0)
200117e0:	200177b7          	lui	a5,0x20017
200117e4:	4ec78513          	addi	a0,a5,1260 # 200174ec <_exit+0x38>
200117e8:	2e81                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:68 (discriminator 3)
        for (i = 0; i < REP; i++) {
200117ea:	fe842783          	lw	a5,-24(s0)
200117ee:	0785                	addi	a5,a5,1
200117f0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:68 (discriminator 1)
200117f4:	fe842703          	lw	a4,-24(s0)
200117f8:	47f5                	li	a5,29
200117fa:	fce7d7e3          	bge	a5,a4,200117c8 <main+0x316>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:60 (discriminator 2)
    for (int j = 0; j < 7; j++) {
200117fe:	fdc42783          	lw	a5,-36(s0)
20011802:	0785                	addi	a5,a5,1
20011804:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:60 (discriminator 1)
20011808:	fdc42703          	lw	a4,-36(s0)
2001180c:	4799                	li	a5,6
2001180e:	f0e7d8e3          	bge	a5,a4,2001171e <main+0x26c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:73
        }
    }

    printf("DEC 100 A\n");
20011812:	200177b7          	lui	a5,0x20017
20011816:	55878513          	addi	a0,a5,1368 # 20017558 <_exit+0xa4>
2001181a:	2935                	jal	20011c56 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:74
    for (int j = 0; j < 7; j++) {
2001181c:	fc042c23          	sw	zero,-40(s0)
20011820:	a8dd                	j	20011916 <main+0x464>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:75
        for (i = 0; i < REP; i++) {
20011822:	fe042423          	sw	zero,-24(s0)
20011826:	a049                	j	200118a8 <main+0x3f6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:76 (discriminator 3)
            start = rdcycle();
20011828:	31b5                	jal	20011494 <rdcycle>
2001182a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:77 (discriminator 3)
            crypto_aead_decrypt(plain_text+2, &clen, plain_text, bytes[0], plain_text, bytes[j], Nonce, Key);
2001182e:	800017b7          	lui	a5,0x80001
20011832:	b3c78513          	addi	a0,a5,-1220 # 80000b3c <metal_segment_heap_target_end+0xffffcbc0>
20011836:	800007b7          	lui	a5,0x80000
2001183a:	00078793          	mv	a5,a5
2001183e:	4394                	lw	a3,0(a5)
20011840:	800007b7          	lui	a5,0x80000
20011844:	00078713          	mv	a4,a5
20011848:	fd842783          	lw	a5,-40(s0)
2001184c:	078a                	slli	a5,a5,0x2
2001184e:	97ba                	add	a5,a5,a4
20011850:	4398                	lw	a4,0(a5)
20011852:	fc440593          	addi	a1,s0,-60
20011856:	800007b7          	lui	a5,0x80000
2001185a:	02c78893          	addi	a7,a5,44 # 8000002c <metal_segment_heap_target_end+0xffffc0b0>
2001185e:	800007b7          	lui	a5,0x80000
20011862:	01c78813          	addi	a6,a5,28 # 8000001c <metal_segment_heap_target_end+0xffffc0a0>
20011866:	87ba                	mv	a5,a4
20011868:	80001737          	lui	a4,0x80001
2001186c:	b3470713          	addi	a4,a4,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011870:	80001637          	lui	a2,0x80001
20011874:	b3460613          	addi	a2,a2,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011878:	b7aff0ef          	jal	ra,20010bf2 <crypto_aead_decrypt>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:78 (discriminator 3)
            end = rdcycle();
2001187c:	3921                	jal	20011494 <rdcycle>
2001187e:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:79 (discriminator 3)
            performance2[i] = end - start;
20011882:	fc842703          	lw	a4,-56(s0)
20011886:	fcc42783          	lw	a5,-52(s0)
2001188a:	8f1d                	sub	a4,a4,a5
2001188c:	800037b7          	lui	a5,0x80003
20011890:	27478693          	addi	a3,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
20011894:	fe842783          	lw	a5,-24(s0)
20011898:	078a                	slli	a5,a5,0x2
2001189a:	97b6                	add	a5,a5,a3
2001189c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:75 (discriminator 3)
        for (i = 0; i < REP; i++) {
2001189e:	fe842783          	lw	a5,-24(s0)
200118a2:	0785                	addi	a5,a5,1
200118a4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:75 (discriminator 1)
200118a8:	fe842703          	lw	a4,-24(s0)
200118ac:	47f5                	li	a5,29
200118ae:	f6e7dde3          	bge	a5,a4,20011828 <main+0x376>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:81
        }
        printf("DEC 100 A bytes %d \n", bytes[j]);
200118b2:	800007b7          	lui	a5,0x80000
200118b6:	00078713          	mv	a4,a5
200118ba:	fd842783          	lw	a5,-40(s0)
200118be:	078a                	slli	a5,a5,0x2
200118c0:	97ba                	add	a5,a5,a4
200118c2:	439c                	lw	a5,0(a5)
200118c4:	85be                	mv	a1,a5
200118c6:	200177b7          	lui	a5,0x20017
200118ca:	56478513          	addi	a0,a5,1380 # 20017564 <_exit+0xb0>
200118ce:	24ad                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:82
        for (i = 0; i < REP; i++) {
200118d0:	fe042423          	sw	zero,-24(s0)
200118d4:	a03d                	j	20011902 <main+0x450>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:83 (discriminator 3)
           printf("%d:   SWcycles : %u   \n", i, performance2[i] );
200118d6:	800037b7          	lui	a5,0x80003
200118da:	27478713          	addi	a4,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
200118de:	fe842783          	lw	a5,-24(s0)
200118e2:	078a                	slli	a5,a5,0x2
200118e4:	97ba                	add	a5,a5,a4
200118e6:	439c                	lw	a5,0(a5)
200118e8:	863e                	mv	a2,a5
200118ea:	fe842583          	lw	a1,-24(s0)
200118ee:	200177b7          	lui	a5,0x20017
200118f2:	4ec78513          	addi	a0,a5,1260 # 200174ec <_exit+0x38>
200118f6:	2489                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:82 (discriminator 3)
        for (i = 0; i < REP; i++) {
200118f8:	fe842783          	lw	a5,-24(s0)
200118fc:	0785                	addi	a5,a5,1
200118fe:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:82 (discriminator 1)
20011902:	fe842703          	lw	a4,-24(s0)
20011906:	47f5                	li	a5,29
20011908:	fce7d7e3          	bge	a5,a4,200118d6 <main+0x424>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:74 (discriminator 2)
    for (int j = 0; j < 7; j++) {
2001190c:	fd842783          	lw	a5,-40(s0)
20011910:	0785                	addi	a5,a5,1
20011912:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:74 (discriminator 1)
20011916:	fd842703          	lw	a4,-40(s0)
2001191a:	4799                	li	a5,6
2001191c:	f0e7d3e3          	bge	a5,a4,20011822 <main+0x370>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:89
        }
    }

   //// HASH

    printf("HASH \n");
20011920:	200177b7          	lui	a5,0x20017
20011924:	57c78513          	addi	a0,a5,1404 # 2001757c <_exit+0xc8>
20011928:	263d                	jal	20011c56 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:90
    for (int j = 0; j < 7; j++) {
2001192a:	fc042a23          	sw	zero,-44(s0)
2001192e:	a8c1                	j	200119fe <main+0x54c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:91
        for (i = 0; i < REP; i++) {
20011930:	fe042423          	sw	zero,-24(s0)
20011934:	a8b1                	j	20011990 <main+0x4de>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:92 (discriminator 3)
            start = rdcycle();
20011936:	3eb9                	jal	20011494 <rdcycle>
20011938:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:93 (discriminator 3)
            crypto_hash(plain_text, bytes[j], plain_text);
2001193c:	800007b7          	lui	a5,0x80000
20011940:	00078713          	mv	a4,a5
20011944:	fd442783          	lw	a5,-44(s0)
20011948:	078a                	slli	a5,a5,0x2
2001194a:	97ba                	add	a5,a5,a4
2001194c:	4398                	lw	a4,0(a5)
2001194e:	800017b7          	lui	a5,0x80001
20011952:	b3478613          	addi	a2,a5,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011956:	85ba                	mv	a1,a4
20011958:	800017b7          	lui	a5,0x80001
2001195c:	b3478513          	addi	a0,a5,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011960:	837ff0ef          	jal	ra,20011196 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:94 (discriminator 3)
            end = rdcycle();
20011964:	3e05                	jal	20011494 <rdcycle>
20011966:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:95 (discriminator 3)
            performance2[i] = end - start;
2001196a:	fc842703          	lw	a4,-56(s0)
2001196e:	fcc42783          	lw	a5,-52(s0)
20011972:	8f1d                	sub	a4,a4,a5
20011974:	800037b7          	lui	a5,0x80003
20011978:	27478693          	addi	a3,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
2001197c:	fe842783          	lw	a5,-24(s0)
20011980:	078a                	slli	a5,a5,0x2
20011982:	97b6                	add	a5,a5,a3
20011984:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:91 (discriminator 3)
        for (i = 0; i < REP; i++) {
20011986:	fe842783          	lw	a5,-24(s0)
2001198a:	0785                	addi	a5,a5,1
2001198c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:91 (discriminator 1)
20011990:	fe842703          	lw	a4,-24(s0)
20011994:	47f5                	li	a5,29
20011996:	fae7d0e3          	bge	a5,a4,20011936 <main+0x484>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:97
        }
        printf("HASH 100 A bytes %d \n", bytes[j]);
2001199a:	800007b7          	lui	a5,0x80000
2001199e:	00078713          	mv	a4,a5
200119a2:	fd442783          	lw	a5,-44(s0)
200119a6:	078a                	slli	a5,a5,0x2
200119a8:	97ba                	add	a5,a5,a4
200119aa:	439c                	lw	a5,0(a5)
200119ac:	85be                	mv	a1,a5
200119ae:	200177b7          	lui	a5,0x20017
200119b2:	58478513          	addi	a0,a5,1412 # 20017584 <_exit+0xd0>
200119b6:	2249                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:98
        for (i = 0; i < REP; i++) {
200119b8:	fe042423          	sw	zero,-24(s0)
200119bc:	a03d                	j	200119ea <main+0x538>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:99 (discriminator 3)
            printf("%d:   SWcycles : %u   \n", i, performance2[i] );
200119be:	800037b7          	lui	a5,0x80003
200119c2:	27478713          	addi	a4,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
200119c6:	fe842783          	lw	a5,-24(s0)
200119ca:	078a                	slli	a5,a5,0x2
200119cc:	97ba                	add	a5,a5,a4
200119ce:	439c                	lw	a5,0(a5)
200119d0:	863e                	mv	a2,a5
200119d2:	fe842583          	lw	a1,-24(s0)
200119d6:	200177b7          	lui	a5,0x20017
200119da:	4ec78513          	addi	a0,a5,1260 # 200174ec <_exit+0x38>
200119de:	2aa9                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:98 (discriminator 3)
        for (i = 0; i < REP; i++) {
200119e0:	fe842783          	lw	a5,-24(s0)
200119e4:	0785                	addi	a5,a5,1
200119e6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:98 (discriminator 1)
200119ea:	fe842703          	lw	a4,-24(s0)
200119ee:	47f5                	li	a5,29
200119f0:	fce7d7e3          	bge	a5,a4,200119be <main+0x50c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:90 (discriminator 2)
    for (int j = 0; j < 7; j++) {
200119f4:	fd442783          	lw	a5,-44(s0)
200119f8:	0785                	addi	a5,a5,1
200119fa:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:90 (discriminator 1)
200119fe:	fd442703          	lw	a4,-44(s0)
20011a02:	4799                	li	a5,6
20011a04:	f2e7d6e3          	bge	a5,a4,20011930 <main+0x47e>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:106
    }
    //// RANDOM



    printf("Random \n");
20011a08:	200177b7          	lui	a5,0x20017
20011a0c:	59c78513          	addi	a0,a5,1436 # 2001759c <_exit+0xe8>
20011a10:	2499                	jal	20011c56 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:107
    for (int j = 0; j < 7; j++) {
20011a12:	fc042823          	sw	zero,-48(s0)
20011a16:	a231                	j	20011b22 <main+0x670>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:110
        ascon_state_t s;
        u64 seed;
        seed.xh = plain_text[0];
20011a18:	800017b7          	lui	a5,0x80001
20011a1c:	b3478793          	addi	a5,a5,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011a20:	439c                	lw	a5,0(a5)
20011a22:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:111
        seed.xl = plain_text[1];
20011a26:	800017b7          	lui	a5,0x80001
20011a2a:	b3478793          	addi	a5,a5,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011a2e:	43dc                	lw	a5,4(a5)
20011a30:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:112
        for (i = 0; i < REP; i++) {
20011a34:	fe042423          	sw	zero,-24(s0)
20011a38:	a8b5                	j	20011ab4 <main+0x602>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:113
            start = rdcycle();
20011a3a:	3ca9                	jal	20011494 <rdcycle>
20011a3c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:114
            init_seed(&s,seed);
20011a40:	f9440793          	addi	a5,s0,-108
20011a44:	fbc42583          	lw	a1,-68(s0)
20011a48:	fc042603          	lw	a2,-64(s0)
20011a4c:	853e                	mv	a0,a5
20011a4e:	3289                	jal	20011390 <init_seed>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:115
            if(bytesr[j] > 0) rand_ascon(&s, plain_text,bytesr[j]);
20011a50:	800007b7          	lui	a5,0x80000
20011a54:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc0c0>
20011a58:	fd042783          	lw	a5,-48(s0)
20011a5c:	078a                	slli	a5,a5,0x2
20011a5e:	97ba                	add	a5,a5,a4
20011a60:	439c                	lw	a5,0(a5)
20011a62:	c39d                	beqz	a5,20011a88 <main+0x5d6>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:115 (discriminator 1)
20011a64:	800007b7          	lui	a5,0x80000
20011a68:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc0c0>
20011a6c:	fd042783          	lw	a5,-48(s0)
20011a70:	078a                	slli	a5,a5,0x2
20011a72:	97ba                	add	a5,a5,a4
20011a74:	439c                	lw	a5,0(a5)
20011a76:	f9440713          	addi	a4,s0,-108
20011a7a:	863e                	mv	a2,a5
20011a7c:	800017b7          	lui	a5,0x80001
20011a80:	b3478593          	addi	a1,a5,-1228 # 80000b34 <metal_segment_heap_target_end+0xffffcbb8>
20011a84:	853a                	mv	a0,a4
20011a86:	3a79                	jal	20011424 <rand_ascon>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:116 (discriminator 2)
            end = rdcycle();
20011a88:	3431                	jal	20011494 <rdcycle>
20011a8a:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:117 (discriminator 2)
            performance2[i] = end - start;
20011a8e:	fc842703          	lw	a4,-56(s0)
20011a92:	fcc42783          	lw	a5,-52(s0)
20011a96:	8f1d                	sub	a4,a4,a5
20011a98:	800037b7          	lui	a5,0x80003
20011a9c:	27478693          	addi	a3,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
20011aa0:	fe842783          	lw	a5,-24(s0)
20011aa4:	078a                	slli	a5,a5,0x2
20011aa6:	97b6                	add	a5,a5,a3
20011aa8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:112 (discriminator 2)
        for (i = 0; i < REP; i++) {
20011aaa:	fe842783          	lw	a5,-24(s0)
20011aae:	0785                	addi	a5,a5,1
20011ab0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:112 (discriminator 1)
20011ab4:	fe842703          	lw	a4,-24(s0)
20011ab8:	47f5                	li	a5,29
20011aba:	f8e7d0e3          	bge	a5,a4,20011a3a <main+0x588>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:119
        }
        printf("RANDOM bytes %d \n", bytesr[j]);
20011abe:	800007b7          	lui	a5,0x80000
20011ac2:	03c78713          	addi	a4,a5,60 # 8000003c <metal_segment_heap_target_end+0xffffc0c0>
20011ac6:	fd042783          	lw	a5,-48(s0)
20011aca:	078a                	slli	a5,a5,0x2
20011acc:	97ba                	add	a5,a5,a4
20011ace:	439c                	lw	a5,0(a5)
20011ad0:	85be                	mv	a1,a5
20011ad2:	200177b7          	lui	a5,0x20017
20011ad6:	5a478513          	addi	a0,a5,1444 # 200175a4 <_exit+0xf0>
20011ada:	28b9                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:120
        for (i = 0; i < REP; i++) {
20011adc:	fe042423          	sw	zero,-24(s0)
20011ae0:	a03d                	j	20011b0e <main+0x65c>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:121 (discriminator 3)
            printf("%d:   SWcycles : %u   \n", i, performance2[i] );
20011ae2:	800037b7          	lui	a5,0x80003
20011ae6:	27478713          	addi	a4,a5,628 # 80003274 <metal_segment_heap_target_end+0xfffff2f8>
20011aea:	fe842783          	lw	a5,-24(s0)
20011aee:	078a                	slli	a5,a5,0x2
20011af0:	97ba                	add	a5,a5,a4
20011af2:	439c                	lw	a5,0(a5)
20011af4:	863e                	mv	a2,a5
20011af6:	fe842583          	lw	a1,-24(s0)
20011afa:	200177b7          	lui	a5,0x20017
20011afe:	4ec78513          	addi	a0,a5,1260 # 200174ec <_exit+0x38>
20011b02:	281d                	jal	20011b38 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:120 (discriminator 3)
        for (i = 0; i < REP; i++) {
20011b04:	fe842783          	lw	a5,-24(s0)
20011b08:	0785                	addi	a5,a5,1
20011b0a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:120 (discriminator 1)
20011b0e:	fe842703          	lw	a4,-24(s0)
20011b12:	47f5                	li	a5,29
20011b14:	fce7d7e3          	bge	a5,a4,20011ae2 <main+0x630>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:107 (discriminator 2)
    for (int j = 0; j < 7; j++) {
20011b18:	fd042783          	lw	a5,-48(s0)
20011b1c:	0785                	addi	a5,a5,1
20011b1e:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:107 (discriminator 1)
20011b22:	fd042703          	lw	a4,-48(s0)
20011b26:	4799                	li	a5,6
20011b28:	eee7d8e3          	bge	a5,a4,20011a18 <main+0x566>
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:124
        }
    }
    return 0;
20011b2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/Ascon_TestS/Ascon_TestS.c:125
20011b2e:	853e                	mv	a0,a5
20011b30:	50b6                	lw	ra,108(sp)
20011b32:	5426                	lw	s0,104(sp)
20011b34:	6165                	addi	sp,sp,112
20011b36:	8082                	ret

20011b38 <iprintf>:
printf():
20011b38:	7139                	addi	sp,sp,-64
20011b3a:	da3e                	sw	a5,52(sp)
20011b3c:	d22e                	sw	a1,36(sp)
20011b3e:	d432                	sw	a2,40(sp)
20011b40:	d636                	sw	a3,44(sp)
20011b42:	d83a                	sw	a4,48(sp)
20011b44:	dc42                	sw	a6,56(sp)
20011b46:	de46                	sw	a7,60(sp)
20011b48:	5ffef797          	auipc	a5,0x5ffef
20011b4c:	f9878793          	addi	a5,a5,-104 # 80000ae0 <_impure_ptr>
20011b50:	cc22                	sw	s0,24(sp)
20011b52:	4380                	lw	s0,0(a5)
20011b54:	ca26                	sw	s1,20(sp)
20011b56:	ce06                	sw	ra,28(sp)
20011b58:	84aa                	mv	s1,a0
20011b5a:	c409                	beqz	s0,20011b64 <iprintf+0x2c>
20011b5c:	4c1c                	lw	a5,24(s0)
20011b5e:	e399                	bnez	a5,20011b64 <iprintf+0x2c>
20011b60:	8522                	mv	a0,s0
20011b62:	2b1d                	jal	20012098 <__sinit>
20011b64:	440c                	lw	a1,8(s0)
20011b66:	1054                	addi	a3,sp,36
20011b68:	8626                	mv	a2,s1
20011b6a:	8522                	mv	a0,s0
20011b6c:	c636                	sw	a3,12(sp)
20011b6e:	231000ef          	jal	ra,2001259e <_vfiprintf_r>
20011b72:	40f2                	lw	ra,28(sp)
20011b74:	4462                	lw	s0,24(sp)
20011b76:	44d2                	lw	s1,20(sp)
20011b78:	6121                	addi	sp,sp,64
20011b7a:	8082                	ret

20011b7c <_puts_r>:
_puts_r():
20011b7c:	1101                	addi	sp,sp,-32
20011b7e:	ca26                	sw	s1,20(sp)
20011b80:	c84a                	sw	s2,16(sp)
20011b82:	ce06                	sw	ra,28(sp)
20011b84:	cc22                	sw	s0,24(sp)
20011b86:	c64e                	sw	s3,12(sp)
20011b88:	c452                	sw	s4,8(sp)
20011b8a:	84aa                	mv	s1,a0
20011b8c:	892e                	mv	s2,a1
20011b8e:	c501                	beqz	a0,20011b96 <_puts_r+0x1a>
20011b90:	4d1c                	lw	a5,24(a0)
20011b92:	e391                	bnez	a5,20011b96 <_puts_r+0x1a>
20011b94:	2311                	jal	20012098 <__sinit>
20011b96:	4c9c                	lw	a5,24(s1)
20011b98:	4480                	lw	s0,8(s1)
20011b9a:	e399                	bnez	a5,20011ba0 <_puts_r+0x24>
20011b9c:	8526                	mv	a0,s1
20011b9e:	29ed                	jal	20012098 <__sinit>
20011ba0:	00006797          	auipc	a5,0x6
20011ba4:	a3878793          	addi	a5,a5,-1480 # 200175d8 <__sf_fake_stdin>
20011ba8:	02f41c63          	bne	s0,a5,20011be0 <_puts_r+0x64>
20011bac:	40c0                	lw	s0,4(s1)
20011bae:	00c45783          	lhu	a5,12(s0)
20011bb2:	8ba1                	andi	a5,a5,8
20011bb4:	c7b1                	beqz	a5,20011c00 <_puts_r+0x84>
20011bb6:	481c                	lw	a5,16(s0)
20011bb8:	c7a1                	beqz	a5,20011c00 <_puts_r+0x84>
20011bba:	59fd                	li	s3,-1
20011bbc:	4a29                	li	s4,10
20011bbe:	441c                	lw	a5,8(s0)
20011bc0:	00094583          	lbu	a1,0(s2)
20011bc4:	17fd                	addi	a5,a5,-1
20011bc6:	e9b1                	bnez	a1,20011c1a <_puts_r+0x9e>
20011bc8:	c41c                	sw	a5,8(s0)
20011bca:	0607de63          	bgez	a5,20011c46 <_puts_r+0xca>
20011bce:	8622                	mv	a2,s0
20011bd0:	45a9                	li	a1,10
20011bd2:	8526                	mv	a0,s1
20011bd4:	2841                	jal	20011c64 <__swbuf_r>
20011bd6:	57fd                	li	a5,-1
20011bd8:	02f50863          	beq	a0,a5,20011c08 <_puts_r+0x8c>
20011bdc:	4529                	li	a0,10
20011bde:	a035                	j	20011c0a <_puts_r+0x8e>
20011be0:	00006797          	auipc	a5,0x6
20011be4:	a1878793          	addi	a5,a5,-1512 # 200175f8 <__sf_fake_stdout>
20011be8:	00f41463          	bne	s0,a5,20011bf0 <_puts_r+0x74>
20011bec:	4480                	lw	s0,8(s1)
20011bee:	b7c1                	j	20011bae <_puts_r+0x32>
20011bf0:	00006797          	auipc	a5,0x6
20011bf4:	9c878793          	addi	a5,a5,-1592 # 200175b8 <__sf_fake_stderr>
20011bf8:	faf41be3          	bne	s0,a5,20011bae <_puts_r+0x32>
20011bfc:	44c0                	lw	s0,12(s1)
20011bfe:	bf45                	j	20011bae <_puts_r+0x32>
20011c00:	85a2                	mv	a1,s0
20011c02:	8526                	mv	a0,s1
20011c04:	2205                	jal	20011d24 <__swsetup_r>
20011c06:	d955                	beqz	a0,20011bba <_puts_r+0x3e>
20011c08:	557d                	li	a0,-1
20011c0a:	40f2                	lw	ra,28(sp)
20011c0c:	4462                	lw	s0,24(sp)
20011c0e:	44d2                	lw	s1,20(sp)
20011c10:	4942                	lw	s2,16(sp)
20011c12:	49b2                	lw	s3,12(sp)
20011c14:	4a22                	lw	s4,8(sp)
20011c16:	6105                	addi	sp,sp,32
20011c18:	8082                	ret
20011c1a:	c41c                	sw	a5,8(s0)
20011c1c:	0905                	addi	s2,s2,1
20011c1e:	0007d763          	bgez	a5,20011c2c <_puts_r+0xb0>
20011c22:	4c18                	lw	a4,24(s0)
20011c24:	00e7cb63          	blt	a5,a4,20011c3a <_puts_r+0xbe>
20011c28:	01458963          	beq	a1,s4,20011c3a <_puts_r+0xbe>
20011c2c:	401c                	lw	a5,0(s0)
20011c2e:	00178713          	addi	a4,a5,1
20011c32:	c018                	sw	a4,0(s0)
20011c34:	00b78023          	sb	a1,0(a5)
20011c38:	b759                	j	20011bbe <_puts_r+0x42>
20011c3a:	8622                	mv	a2,s0
20011c3c:	8526                	mv	a0,s1
20011c3e:	201d                	jal	20011c64 <__swbuf_r>
20011c40:	f7351fe3          	bne	a0,s3,20011bbe <_puts_r+0x42>
20011c44:	b7d1                	j	20011c08 <_puts_r+0x8c>
20011c46:	401c                	lw	a5,0(s0)
20011c48:	00178713          	addi	a4,a5,1
20011c4c:	c018                	sw	a4,0(s0)
20011c4e:	4729                	li	a4,10
20011c50:	00e78023          	sb	a4,0(a5)
20011c54:	b761                	j	20011bdc <_puts_r+0x60>

20011c56 <puts>:
puts():
20011c56:	5ffef797          	auipc	a5,0x5ffef
20011c5a:	e8a78793          	addi	a5,a5,-374 # 80000ae0 <_impure_ptr>
20011c5e:	85aa                	mv	a1,a0
20011c60:	4388                	lw	a0,0(a5)
20011c62:	bf29                	j	20011b7c <_puts_r>

20011c64 <__swbuf_r>:
__swbuf_r():
20011c64:	1101                	addi	sp,sp,-32
20011c66:	cc22                	sw	s0,24(sp)
20011c68:	ca26                	sw	s1,20(sp)
20011c6a:	c84a                	sw	s2,16(sp)
20011c6c:	ce06                	sw	ra,28(sp)
20011c6e:	c64e                	sw	s3,12(sp)
20011c70:	84aa                	mv	s1,a0
20011c72:	892e                	mv	s2,a1
20011c74:	8432                	mv	s0,a2
20011c76:	c501                	beqz	a0,20011c7e <__swbuf_r+0x1a>
20011c78:	4d1c                	lw	a5,24(a0)
20011c7a:	e391                	bnez	a5,20011c7e <__swbuf_r+0x1a>
20011c7c:	2931                	jal	20012098 <__sinit>
20011c7e:	00006797          	auipc	a5,0x6
20011c82:	95a78793          	addi	a5,a5,-1702 # 200175d8 <__sf_fake_stdin>
20011c86:	06f41963          	bne	s0,a5,20011cf8 <__swbuf_r+0x94>
20011c8a:	40c0                	lw	s0,4(s1)
20011c8c:	4c1c                	lw	a5,24(s0)
20011c8e:	c41c                	sw	a5,8(s0)
20011c90:	00c45783          	lhu	a5,12(s0)
20011c94:	8ba1                	andi	a5,a5,8
20011c96:	c3c9                	beqz	a5,20011d18 <__swbuf_r+0xb4>
20011c98:	481c                	lw	a5,16(s0)
20011c9a:	cfbd                	beqz	a5,20011d18 <__swbuf_r+0xb4>
20011c9c:	481c                	lw	a5,16(s0)
20011c9e:	4008                	lw	a0,0(s0)
20011ca0:	0ff97993          	andi	s3,s2,255
20011ca4:	0ff97913          	andi	s2,s2,255
20011ca8:	8d1d                	sub	a0,a0,a5
20011caa:	485c                	lw	a5,20(s0)
20011cac:	00f54663          	blt	a0,a5,20011cb8 <__swbuf_r+0x54>
20011cb0:	85a2                	mv	a1,s0
20011cb2:	8526                	mv	a0,s1
20011cb4:	24e9                	jal	20011f7e <_fflush_r>
20011cb6:	e52d                	bnez	a0,20011d20 <__swbuf_r+0xbc>
20011cb8:	441c                	lw	a5,8(s0)
20011cba:	0505                	addi	a0,a0,1
20011cbc:	17fd                	addi	a5,a5,-1
20011cbe:	c41c                	sw	a5,8(s0)
20011cc0:	401c                	lw	a5,0(s0)
20011cc2:	00178713          	addi	a4,a5,1
20011cc6:	c018                	sw	a4,0(s0)
20011cc8:	01378023          	sb	s3,0(a5)
20011ccc:	485c                	lw	a5,20(s0)
20011cce:	00a78963          	beq	a5,a0,20011ce0 <__swbuf_r+0x7c>
20011cd2:	00c45783          	lhu	a5,12(s0)
20011cd6:	8b85                	andi	a5,a5,1
20011cd8:	cb81                	beqz	a5,20011ce8 <__swbuf_r+0x84>
20011cda:	47a9                	li	a5,10
20011cdc:	00f91663          	bne	s2,a5,20011ce8 <__swbuf_r+0x84>
20011ce0:	85a2                	mv	a1,s0
20011ce2:	8526                	mv	a0,s1
20011ce4:	2c69                	jal	20011f7e <_fflush_r>
20011ce6:	ed0d                	bnez	a0,20011d20 <__swbuf_r+0xbc>
20011ce8:	40f2                	lw	ra,28(sp)
20011cea:	4462                	lw	s0,24(sp)
20011cec:	854a                	mv	a0,s2
20011cee:	44d2                	lw	s1,20(sp)
20011cf0:	4942                	lw	s2,16(sp)
20011cf2:	49b2                	lw	s3,12(sp)
20011cf4:	6105                	addi	sp,sp,32
20011cf6:	8082                	ret
20011cf8:	00006797          	auipc	a5,0x6
20011cfc:	90078793          	addi	a5,a5,-1792 # 200175f8 <__sf_fake_stdout>
20011d00:	00f41463          	bne	s0,a5,20011d08 <__swbuf_r+0xa4>
20011d04:	4480                	lw	s0,8(s1)
20011d06:	b759                	j	20011c8c <__swbuf_r+0x28>
20011d08:	00006797          	auipc	a5,0x6
20011d0c:	8b078793          	addi	a5,a5,-1872 # 200175b8 <__sf_fake_stderr>
20011d10:	f6f41ee3          	bne	s0,a5,20011c8c <__swbuf_r+0x28>
20011d14:	44c0                	lw	s0,12(s1)
20011d16:	bf9d                	j	20011c8c <__swbuf_r+0x28>
20011d18:	85a2                	mv	a1,s0
20011d1a:	8526                	mv	a0,s1
20011d1c:	2021                	jal	20011d24 <__swsetup_r>
20011d1e:	dd3d                	beqz	a0,20011c9c <__swbuf_r+0x38>
20011d20:	597d                	li	s2,-1
20011d22:	b7d9                	j	20011ce8 <__swbuf_r+0x84>

20011d24 <__swsetup_r>:
__swsetup_r():
20011d24:	1141                	addi	sp,sp,-16
20011d26:	5ffef797          	auipc	a5,0x5ffef
20011d2a:	dba78793          	addi	a5,a5,-582 # 80000ae0 <_impure_ptr>
20011d2e:	c226                	sw	s1,4(sp)
20011d30:	4384                	lw	s1,0(a5)
20011d32:	c422                	sw	s0,8(sp)
20011d34:	c04a                	sw	s2,0(sp)
20011d36:	c606                	sw	ra,12(sp)
20011d38:	892a                	mv	s2,a0
20011d3a:	842e                	mv	s0,a1
20011d3c:	c489                	beqz	s1,20011d46 <__swsetup_r+0x22>
20011d3e:	4c9c                	lw	a5,24(s1)
20011d40:	e399                	bnez	a5,20011d46 <__swsetup_r+0x22>
20011d42:	8526                	mv	a0,s1
20011d44:	2e91                	jal	20012098 <__sinit>
20011d46:	00006797          	auipc	a5,0x6
20011d4a:	89278793          	addi	a5,a5,-1902 # 200175d8 <__sf_fake_stdin>
20011d4e:	02f41c63          	bne	s0,a5,20011d86 <__swsetup_r+0x62>
20011d52:	40c0                	lw	s0,4(s1)
20011d54:	00c41703          	lh	a4,12(s0)
20011d58:	01071793          	slli	a5,a4,0x10
20011d5c:	83c1                	srli	a5,a5,0x10
20011d5e:	0087f693          	andi	a3,a5,8
20011d62:	eeb5                	bnez	a3,20011dde <__swsetup_r+0xba>
20011d64:	0107f693          	andi	a3,a5,16
20011d68:	ee9d                	bnez	a3,20011da6 <__swsetup_r+0x82>
20011d6a:	47a5                	li	a5,9
20011d6c:	00f92023          	sw	a5,0(s2)
20011d70:	04076713          	ori	a4,a4,64
20011d74:	00e41623          	sh	a4,12(s0)
20011d78:	557d                	li	a0,-1
20011d7a:	40b2                	lw	ra,12(sp)
20011d7c:	4422                	lw	s0,8(sp)
20011d7e:	4492                	lw	s1,4(sp)
20011d80:	4902                	lw	s2,0(sp)
20011d82:	0141                	addi	sp,sp,16
20011d84:	8082                	ret
20011d86:	00006797          	auipc	a5,0x6
20011d8a:	87278793          	addi	a5,a5,-1934 # 200175f8 <__sf_fake_stdout>
20011d8e:	00f41463          	bne	s0,a5,20011d96 <__swsetup_r+0x72>
20011d92:	4480                	lw	s0,8(s1)
20011d94:	b7c1                	j	20011d54 <__swsetup_r+0x30>
20011d96:	00006797          	auipc	a5,0x6
20011d9a:	82278793          	addi	a5,a5,-2014 # 200175b8 <__sf_fake_stderr>
20011d9e:	faf41be3          	bne	s0,a5,20011d54 <__swsetup_r+0x30>
20011da2:	44c0                	lw	s0,12(s1)
20011da4:	bf45                	j	20011d54 <__swsetup_r+0x30>
20011da6:	8b91                	andi	a5,a5,4
20011da8:	c78d                	beqz	a5,20011dd2 <__swsetup_r+0xae>
20011daa:	584c                	lw	a1,52(s0)
20011dac:	c989                	beqz	a1,20011dbe <__swsetup_r+0x9a>
20011dae:	04440793          	addi	a5,s0,68
20011db2:	00f58463          	beq	a1,a5,20011dba <__swsetup_r+0x96>
20011db6:	854a                	mv	a0,s2
20011db8:	2bc5                	jal	200123a8 <_free_r>
20011dba:	02042a23          	sw	zero,52(s0)
20011dbe:	00c45783          	lhu	a5,12(s0)
20011dc2:	00042223          	sw	zero,4(s0)
20011dc6:	fdb7f793          	andi	a5,a5,-37
20011dca:	00f41623          	sh	a5,12(s0)
20011dce:	481c                	lw	a5,16(s0)
20011dd0:	c01c                	sw	a5,0(s0)
20011dd2:	00c45783          	lhu	a5,12(s0)
20011dd6:	0087e793          	ori	a5,a5,8
20011dda:	00f41623          	sh	a5,12(s0)
20011dde:	481c                	lw	a5,16(s0)
20011de0:	ef81                	bnez	a5,20011df8 <__swsetup_r+0xd4>
20011de2:	00c45783          	lhu	a5,12(s0)
20011de6:	20000713          	li	a4,512
20011dea:	2807f793          	andi	a5,a5,640
20011dee:	00e78563          	beq	a5,a4,20011df8 <__swsetup_r+0xd4>
20011df2:	85a2                	mv	a1,s0
20011df4:	854a                	mv	a0,s2
20011df6:	21bd                	jal	20012264 <__smakebuf_r>
20011df8:	00c45783          	lhu	a5,12(s0)
20011dfc:	0017f713          	andi	a4,a5,1
20011e00:	c705                	beqz	a4,20011e28 <__swsetup_r+0x104>
20011e02:	485c                	lw	a5,20(s0)
20011e04:	00042423          	sw	zero,8(s0)
20011e08:	40f007b3          	neg	a5,a5
20011e0c:	cc1c                	sw	a5,24(s0)
20011e0e:	481c                	lw	a5,16(s0)
20011e10:	4501                	li	a0,0
20011e12:	f7a5                	bnez	a5,20011d7a <__swsetup_r+0x56>
20011e14:	00c41783          	lh	a5,12(s0)
20011e18:	0807f713          	andi	a4,a5,128
20011e1c:	df39                	beqz	a4,20011d7a <__swsetup_r+0x56>
20011e1e:	0407e793          	ori	a5,a5,64
20011e22:	00f41623          	sh	a5,12(s0)
20011e26:	bf89                	j	20011d78 <__swsetup_r+0x54>
20011e28:	8b89                	andi	a5,a5,2
20011e2a:	4701                	li	a4,0
20011e2c:	e391                	bnez	a5,20011e30 <__swsetup_r+0x10c>
20011e2e:	4858                	lw	a4,20(s0)
20011e30:	c418                	sw	a4,8(s0)
20011e32:	bff1                	j	20011e0e <__swsetup_r+0xea>

20011e34 <__sflush_r>:
__sflush_r():
20011e34:	00c5d783          	lhu	a5,12(a1)
20011e38:	1101                	addi	sp,sp,-32
20011e3a:	cc22                	sw	s0,24(sp)
20011e3c:	ca26                	sw	s1,20(sp)
20011e3e:	ce06                	sw	ra,28(sp)
20011e40:	c84a                	sw	s2,16(sp)
20011e42:	c64e                	sw	s3,12(sp)
20011e44:	0087f713          	andi	a4,a5,8
20011e48:	84aa                	mv	s1,a0
20011e4a:	842e                	mv	s0,a1
20011e4c:	e765                	bnez	a4,20011f34 <__sflush_r+0x100>
20011e4e:	41d8                	lw	a4,4(a1)
20011e50:	00e04763          	bgtz	a4,20011e5e <__sflush_r+0x2a>
20011e54:	41b8                	lw	a4,64(a1)
20011e56:	00e04463          	bgtz	a4,20011e5e <__sflush_r+0x2a>
20011e5a:	4501                	li	a0,0
20011e5c:	a0c1                	j	20011f1c <__sflush_r+0xe8>
20011e5e:	5458                	lw	a4,44(s0)
20011e60:	df6d                	beqz	a4,20011e5a <__sflush_r+0x26>
20011e62:	0004a903          	lw	s2,0(s1)
20011e66:	01379693          	slli	a3,a5,0x13
20011e6a:	0004a023          	sw	zero,0(s1)
20011e6e:	0606de63          	bgez	a3,20011eea <__sflush_r+0xb6>
20011e72:	4868                	lw	a0,84(s0)
20011e74:	00c45783          	lhu	a5,12(s0)
20011e78:	8b91                	andi	a5,a5,4
20011e7a:	c799                	beqz	a5,20011e88 <__sflush_r+0x54>
20011e7c:	405c                	lw	a5,4(s0)
20011e7e:	8d1d                	sub	a0,a0,a5
20011e80:	585c                	lw	a5,52(s0)
20011e82:	c399                	beqz	a5,20011e88 <__sflush_r+0x54>
20011e84:	403c                	lw	a5,64(s0)
20011e86:	8d1d                	sub	a0,a0,a5
20011e88:	545c                	lw	a5,44(s0)
20011e8a:	500c                	lw	a1,32(s0)
20011e8c:	862a                	mv	a2,a0
20011e8e:	4681                	li	a3,0
20011e90:	8526                	mv	a0,s1
20011e92:	9782                	jalr	a5
20011e94:	57fd                	li	a5,-1
20011e96:	00c45703          	lhu	a4,12(s0)
20011e9a:	00f51d63          	bne	a0,a5,20011eb4 <__sflush_r+0x80>
20011e9e:	4094                	lw	a3,0(s1)
20011ea0:	47f5                	li	a5,29
20011ea2:	08d7e463          	bltu	a5,a3,20011f2a <__sflush_r+0xf6>
20011ea6:	204007b7          	lui	a5,0x20400
20011eaa:	0785                	addi	a5,a5,1
20011eac:	00d7d7b3          	srl	a5,a5,a3
20011eb0:	8b85                	andi	a5,a5,1
20011eb2:	cfa5                	beqz	a5,20011f2a <__sflush_r+0xf6>
20011eb4:	481c                	lw	a5,16(s0)
20011eb6:	00042223          	sw	zero,4(s0)
20011eba:	c01c                	sw	a5,0(s0)
20011ebc:	01371793          	slli	a5,a4,0x13
20011ec0:	0007d863          	bgez	a5,20011ed0 <__sflush_r+0x9c>
20011ec4:	57fd                	li	a5,-1
20011ec6:	00f51463          	bne	a0,a5,20011ece <__sflush_r+0x9a>
20011eca:	409c                	lw	a5,0(s1)
20011ecc:	e391                	bnez	a5,20011ed0 <__sflush_r+0x9c>
20011ece:	c868                	sw	a0,84(s0)
20011ed0:	584c                	lw	a1,52(s0)
20011ed2:	0124a023          	sw	s2,0(s1)
20011ed6:	d1d1                	beqz	a1,20011e5a <__sflush_r+0x26>
20011ed8:	04440793          	addi	a5,s0,68
20011edc:	00f58463          	beq	a1,a5,20011ee4 <__sflush_r+0xb0>
20011ee0:	8526                	mv	a0,s1
20011ee2:	21d9                	jal	200123a8 <_free_r>
20011ee4:	02042a23          	sw	zero,52(s0)
20011ee8:	bf8d                	j	20011e5a <__sflush_r+0x26>
20011eea:	500c                	lw	a1,32(s0)
20011eec:	4685                	li	a3,1
20011eee:	4601                	li	a2,0
20011ef0:	8526                	mv	a0,s1
20011ef2:	9702                	jalr	a4
20011ef4:	57fd                	li	a5,-1
20011ef6:	f6f51fe3          	bne	a0,a5,20011e74 <__sflush_r+0x40>
20011efa:	409c                	lw	a5,0(s1)
20011efc:	dfa5                	beqz	a5,20011e74 <__sflush_r+0x40>
20011efe:	4775                	li	a4,29
20011f00:	00e78563          	beq	a5,a4,20011f0a <__sflush_r+0xd6>
20011f04:	4759                	li	a4,22
20011f06:	00e79563          	bne	a5,a4,20011f10 <__sflush_r+0xdc>
20011f0a:	0124a023          	sw	s2,0(s1)
20011f0e:	b7b1                	j	20011e5a <__sflush_r+0x26>
20011f10:	00c45783          	lhu	a5,12(s0)
20011f14:	0407e793          	ori	a5,a5,64
20011f18:	00f41623          	sh	a5,12(s0)
20011f1c:	40f2                	lw	ra,28(sp)
20011f1e:	4462                	lw	s0,24(sp)
20011f20:	44d2                	lw	s1,20(sp)
20011f22:	4942                	lw	s2,16(sp)
20011f24:	49b2                	lw	s3,12(sp)
20011f26:	6105                	addi	sp,sp,32
20011f28:	8082                	ret
20011f2a:	04076713          	ori	a4,a4,64
20011f2e:	00e41623          	sh	a4,12(s0)
20011f32:	b7ed                	j	20011f1c <__sflush_r+0xe8>
20011f34:	0105a983          	lw	s3,16(a1)
20011f38:	f20981e3          	beqz	s3,20011e5a <__sflush_r+0x26>
20011f3c:	0005a903          	lw	s2,0(a1)
20011f40:	8b8d                	andi	a5,a5,3
20011f42:	0135a023          	sw	s3,0(a1)
20011f46:	41390933          	sub	s2,s2,s3
20011f4a:	4701                	li	a4,0
20011f4c:	e391                	bnez	a5,20011f50 <__sflush_r+0x11c>
20011f4e:	49d8                	lw	a4,20(a1)
20011f50:	c418                	sw	a4,8(s0)
20011f52:	f12054e3          	blez	s2,20011e5a <__sflush_r+0x26>
20011f56:	541c                	lw	a5,40(s0)
20011f58:	500c                	lw	a1,32(s0)
20011f5a:	86ca                	mv	a3,s2
20011f5c:	864e                	mv	a2,s3
20011f5e:	8526                	mv	a0,s1
20011f60:	9782                	jalr	a5
20011f62:	00a04a63          	bgtz	a0,20011f76 <__sflush_r+0x142>
20011f66:	00c45783          	lhu	a5,12(s0)
20011f6a:	557d                	li	a0,-1
20011f6c:	0407e793          	ori	a5,a5,64
20011f70:	00f41623          	sh	a5,12(s0)
20011f74:	b765                	j	20011f1c <__sflush_r+0xe8>
20011f76:	99aa                	add	s3,s3,a0
20011f78:	40a90933          	sub	s2,s2,a0
20011f7c:	bfd9                	j	20011f52 <__sflush_r+0x11e>

20011f7e <_fflush_r>:
_fflush_r():
20011f7e:	499c                	lw	a5,16(a1)
20011f80:	cfb9                	beqz	a5,20011fde <_fflush_r+0x60>
20011f82:	1101                	addi	sp,sp,-32
20011f84:	cc22                	sw	s0,24(sp)
20011f86:	ce06                	sw	ra,28(sp)
20011f88:	842a                	mv	s0,a0
20011f8a:	c511                	beqz	a0,20011f96 <_fflush_r+0x18>
20011f8c:	4d1c                	lw	a5,24(a0)
20011f8e:	e781                	bnez	a5,20011f96 <_fflush_r+0x18>
20011f90:	c62e                	sw	a1,12(sp)
20011f92:	2219                	jal	20012098 <__sinit>
20011f94:	45b2                	lw	a1,12(sp)
20011f96:	00005797          	auipc	a5,0x5
20011f9a:	64278793          	addi	a5,a5,1602 # 200175d8 <__sf_fake_stdin>
20011f9e:	00f59b63          	bne	a1,a5,20011fb4 <_fflush_r+0x36>
20011fa2:	404c                	lw	a1,4(s0)
20011fa4:	00c59783          	lh	a5,12(a1)
20011fa8:	c795                	beqz	a5,20011fd4 <_fflush_r+0x56>
20011faa:	8522                	mv	a0,s0
20011fac:	4462                	lw	s0,24(sp)
20011fae:	40f2                	lw	ra,28(sp)
20011fb0:	6105                	addi	sp,sp,32
20011fb2:	b549                	j	20011e34 <__sflush_r>
20011fb4:	00005797          	auipc	a5,0x5
20011fb8:	64478793          	addi	a5,a5,1604 # 200175f8 <__sf_fake_stdout>
20011fbc:	00f59463          	bne	a1,a5,20011fc4 <_fflush_r+0x46>
20011fc0:	440c                	lw	a1,8(s0)
20011fc2:	b7cd                	j	20011fa4 <_fflush_r+0x26>
20011fc4:	00005797          	auipc	a5,0x5
20011fc8:	5f478793          	addi	a5,a5,1524 # 200175b8 <__sf_fake_stderr>
20011fcc:	fcf59ce3          	bne	a1,a5,20011fa4 <_fflush_r+0x26>
20011fd0:	444c                	lw	a1,12(s0)
20011fd2:	bfc9                	j	20011fa4 <_fflush_r+0x26>
20011fd4:	40f2                	lw	ra,28(sp)
20011fd6:	4462                	lw	s0,24(sp)
20011fd8:	4501                	li	a0,0
20011fda:	6105                	addi	sp,sp,32
20011fdc:	8082                	ret
20011fde:	4501                	li	a0,0
20011fe0:	8082                	ret

20011fe2 <std>:
std():
20011fe2:	1141                	addi	sp,sp,-16
20011fe4:	c422                	sw	s0,8(sp)
20011fe6:	c606                	sw	ra,12(sp)
20011fe8:	842a                	mv	s0,a0
20011fea:	00b51623          	sh	a1,12(a0)
20011fee:	00c51723          	sh	a2,14(a0)
20011ff2:	00052023          	sw	zero,0(a0)
20011ff6:	00052223          	sw	zero,4(a0)
20011ffa:	00052423          	sw	zero,8(a0)
20011ffe:	06052223          	sw	zero,100(a0)
20012002:	00052823          	sw	zero,16(a0)
20012006:	00052a23          	sw	zero,20(a0)
2001200a:	00052c23          	sw	zero,24(a0)
2001200e:	4621                	li	a2,8
20012010:	4581                	li	a1,0
20012012:	05c50513          	addi	a0,a0,92
20012016:	24ed                	jal	20012300 <memset>
20012018:	00001797          	auipc	a5,0x1
2001201c:	84e78793          	addi	a5,a5,-1970 # 20012866 <__sread>
20012020:	d05c                	sw	a5,36(s0)
20012022:	00001797          	auipc	a5,0x1
20012026:	87478793          	addi	a5,a5,-1932 # 20012896 <__swrite>
2001202a:	d41c                	sw	a5,40(s0)
2001202c:	00001797          	auipc	a5,0x1
20012030:	8b878793          	addi	a5,a5,-1864 # 200128e4 <__sseek>
20012034:	d45c                	sw	a5,44(s0)
20012036:	00001797          	auipc	a5,0x1
2001203a:	8e478793          	addi	a5,a5,-1820 # 2001291a <__sclose>
2001203e:	d000                	sw	s0,32(s0)
20012040:	d81c                	sw	a5,48(s0)
20012042:	40b2                	lw	ra,12(sp)
20012044:	4422                	lw	s0,8(sp)
20012046:	0141                	addi	sp,sp,16
20012048:	8082                	ret

2001204a <_cleanup_r>:
_cleanup_r():
2001204a:	00000597          	auipc	a1,0x0
2001204e:	f3458593          	addi	a1,a1,-204 # 20011f7e <_fflush_r>
20012052:	a2b9                	j	200121a0 <_fwalk_reent>

20012054 <__sfmoreglue>:
__sfmoreglue():
20012054:	1141                	addi	sp,sp,-16
20012056:	c226                	sw	s1,4(sp)
20012058:	06800613          	li	a2,104
2001205c:	fff58493          	addi	s1,a1,-1
20012060:	02c484b3          	mul	s1,s1,a2
20012064:	c04a                	sw	s2,0(sp)
20012066:	892e                	mv	s2,a1
20012068:	c422                	sw	s0,8(sp)
2001206a:	c606                	sw	ra,12(sp)
2001206c:	07448593          	addi	a1,s1,116
20012070:	26d5                	jal	20012454 <_malloc_r>
20012072:	842a                	mv	s0,a0
20012074:	c919                	beqz	a0,2001208a <__sfmoreglue+0x36>
20012076:	00052023          	sw	zero,0(a0)
2001207a:	01252223          	sw	s2,4(a0)
2001207e:	0531                	addi	a0,a0,12
20012080:	c408                	sw	a0,8(s0)
20012082:	06848613          	addi	a2,s1,104
20012086:	4581                	li	a1,0
20012088:	2ca5                	jal	20012300 <memset>
2001208a:	8522                	mv	a0,s0
2001208c:	40b2                	lw	ra,12(sp)
2001208e:	4422                	lw	s0,8(sp)
20012090:	4492                	lw	s1,4(sp)
20012092:	4902                	lw	s2,0(sp)
20012094:	0141                	addi	sp,sp,16
20012096:	8082                	ret

20012098 <__sinit>:
__sinit():
20012098:	4d1c                	lw	a5,24(a0)
2001209a:	e3bd                	bnez	a5,20012100 <__sinit+0x68>
2001209c:	1141                	addi	sp,sp,-16
2001209e:	c606                	sw	ra,12(sp)
200120a0:	c422                	sw	s0,8(sp)
200120a2:	00000797          	auipc	a5,0x0
200120a6:	fa878793          	addi	a5,a5,-88 # 2001204a <_cleanup_r>
200120aa:	d51c                	sw	a5,40(a0)
200120ac:	5ffef797          	auipc	a5,0x5ffef
200120b0:	a3878793          	addi	a5,a5,-1480 # 80000ae4 <_global_impure_ptr>
200120b4:	439c                	lw	a5,0(a5)
200120b6:	04052423          	sw	zero,72(a0)
200120ba:	04052623          	sw	zero,76(a0)
200120be:	04052823          	sw	zero,80(a0)
200120c2:	00f51463          	bne	a0,a5,200120ca <__sinit+0x32>
200120c6:	4785                	li	a5,1
200120c8:	cd1c                	sw	a5,24(a0)
200120ca:	842a                	mv	s0,a0
200120cc:	281d                	jal	20012102 <__sfp>
200120ce:	c048                	sw	a0,4(s0)
200120d0:	8522                	mv	a0,s0
200120d2:	2805                	jal	20012102 <__sfp>
200120d4:	c408                	sw	a0,8(s0)
200120d6:	8522                	mv	a0,s0
200120d8:	202d                	jal	20012102 <__sfp>
200120da:	c448                	sw	a0,12(s0)
200120dc:	4048                	lw	a0,4(s0)
200120de:	4601                	li	a2,0
200120e0:	4591                	li	a1,4
200120e2:	3701                	jal	20011fe2 <std>
200120e4:	4408                	lw	a0,8(s0)
200120e6:	4605                	li	a2,1
200120e8:	45a5                	li	a1,9
200120ea:	3de5                	jal	20011fe2 <std>
200120ec:	4448                	lw	a0,12(s0)
200120ee:	4609                	li	a2,2
200120f0:	45c9                	li	a1,18
200120f2:	3dc5                	jal	20011fe2 <std>
200120f4:	4785                	li	a5,1
200120f6:	cc1c                	sw	a5,24(s0)
200120f8:	40b2                	lw	ra,12(sp)
200120fa:	4422                	lw	s0,8(sp)
200120fc:	0141                	addi	sp,sp,16
200120fe:	8082                	ret
20012100:	8082                	ret

20012102 <__sfp>:
__sfp():
20012102:	1141                	addi	sp,sp,-16
20012104:	5ffef797          	auipc	a5,0x5ffef
20012108:	9e078793          	addi	a5,a5,-1568 # 80000ae4 <_global_impure_ptr>
2001210c:	c226                	sw	s1,4(sp)
2001210e:	4384                	lw	s1,0(a5)
20012110:	c04a                	sw	s2,0(sp)
20012112:	c606                	sw	ra,12(sp)
20012114:	4c9c                	lw	a5,24(s1)
20012116:	c422                	sw	s0,8(sp)
20012118:	892a                	mv	s2,a0
2001211a:	e399                	bnez	a5,20012120 <__sfp+0x1e>
2001211c:	8526                	mv	a0,s1
2001211e:	3fad                	jal	20012098 <__sinit>
20012120:	04848493          	addi	s1,s1,72
20012124:	4480                	lw	s0,8(s1)
20012126:	40dc                	lw	a5,4(s1)
20012128:	17fd                	addi	a5,a5,-1
2001212a:	0007d663          	bgez	a5,20012136 <__sfp+0x34>
2001212e:	409c                	lw	a5,0(s1)
20012130:	cfb1                	beqz	a5,2001218c <__sfp+0x8a>
20012132:	4084                	lw	s1,0(s1)
20012134:	bfc5                	j	20012124 <__sfp+0x22>
20012136:	00c41703          	lh	a4,12(s0)
2001213a:	e731                	bnez	a4,20012186 <__sfp+0x84>
2001213c:	77c1                	lui	a5,0xffff0
2001213e:	0785                	addi	a5,a5,1
20012140:	06042223          	sw	zero,100(s0)
20012144:	00042023          	sw	zero,0(s0)
20012148:	00042223          	sw	zero,4(s0)
2001214c:	00042423          	sw	zero,8(s0)
20012150:	c45c                	sw	a5,12(s0)
20012152:	00042823          	sw	zero,16(s0)
20012156:	00042a23          	sw	zero,20(s0)
2001215a:	00042c23          	sw	zero,24(s0)
2001215e:	4621                	li	a2,8
20012160:	4581                	li	a1,0
20012162:	05c40513          	addi	a0,s0,92
20012166:	2a69                	jal	20012300 <memset>
20012168:	02042a23          	sw	zero,52(s0)
2001216c:	02042c23          	sw	zero,56(s0)
20012170:	04042423          	sw	zero,72(s0)
20012174:	04042623          	sw	zero,76(s0)
20012178:	8522                	mv	a0,s0
2001217a:	40b2                	lw	ra,12(sp)
2001217c:	4422                	lw	s0,8(sp)
2001217e:	4492                	lw	s1,4(sp)
20012180:	4902                	lw	s2,0(sp)
20012182:	0141                	addi	sp,sp,16
20012184:	8082                	ret
20012186:	06840413          	addi	s0,s0,104
2001218a:	bf79                	j	20012128 <__sfp+0x26>
2001218c:	4591                	li	a1,4
2001218e:	854a                	mv	a0,s2
20012190:	35d1                	jal	20012054 <__sfmoreglue>
20012192:	c088                	sw	a0,0(s1)
20012194:	842a                	mv	s0,a0
20012196:	fd51                	bnez	a0,20012132 <__sfp+0x30>
20012198:	47b1                	li	a5,12
2001219a:	00f92023          	sw	a5,0(s2)
2001219e:	bfe9                	j	20012178 <__sfp+0x76>

200121a0 <_fwalk_reent>:
_fwalk_reent():
200121a0:	7179                	addi	sp,sp,-48
200121a2:	d422                	sw	s0,40(sp)
200121a4:	d04a                	sw	s2,32(sp)
200121a6:	cc52                	sw	s4,24(sp)
200121a8:	ca56                	sw	s5,20(sp)
200121aa:	c85a                	sw	s6,16(sp)
200121ac:	c65e                	sw	s7,12(sp)
200121ae:	d606                	sw	ra,44(sp)
200121b0:	d226                	sw	s1,36(sp)
200121b2:	ce4e                	sw	s3,28(sp)
200121b4:	8a2a                	mv	s4,a0
200121b6:	8aae                	mv	s5,a1
200121b8:	04850413          	addi	s0,a0,72
200121bc:	4901                	li	s2,0
200121be:	4b05                	li	s6,1
200121c0:	5bfd                	li	s7,-1
200121c2:	ec09                	bnez	s0,200121dc <_fwalk_reent+0x3c>
200121c4:	50b2                	lw	ra,44(sp)
200121c6:	5422                	lw	s0,40(sp)
200121c8:	854a                	mv	a0,s2
200121ca:	5492                	lw	s1,36(sp)
200121cc:	5902                	lw	s2,32(sp)
200121ce:	49f2                	lw	s3,28(sp)
200121d0:	4a62                	lw	s4,24(sp)
200121d2:	4ad2                	lw	s5,20(sp)
200121d4:	4b42                	lw	s6,16(sp)
200121d6:	4bb2                	lw	s7,12(sp)
200121d8:	6145                	addi	sp,sp,48
200121da:	8082                	ret
200121dc:	4404                	lw	s1,8(s0)
200121de:	00442983          	lw	s3,4(s0)
200121e2:	19fd                	addi	s3,s3,-1
200121e4:	0009d463          	bgez	s3,200121ec <_fwalk_reent+0x4c>
200121e8:	4000                	lw	s0,0(s0)
200121ea:	bfe1                	j	200121c2 <_fwalk_reent+0x22>
200121ec:	00c4d783          	lhu	a5,12(s1)
200121f0:	00fb7b63          	bgeu	s6,a5,20012206 <_fwalk_reent+0x66>
200121f4:	00e49783          	lh	a5,14(s1)
200121f8:	01778763          	beq	a5,s7,20012206 <_fwalk_reent+0x66>
200121fc:	85a6                	mv	a1,s1
200121fe:	8552                	mv	a0,s4
20012200:	9a82                	jalr	s5
20012202:	00a96933          	or	s2,s2,a0
20012206:	06848493          	addi	s1,s1,104
2001220a:	bfe1                	j	200121e2 <_fwalk_reent+0x42>

2001220c <__swhatbuf_r>:
__swhatbuf_r():
2001220c:	7119                	addi	sp,sp,-128
2001220e:	daa6                	sw	s1,116(sp)
20012210:	84ae                	mv	s1,a1
20012212:	00e59583          	lh	a1,14(a1)
20012216:	dca2                	sw	s0,120(sp)
20012218:	de86                	sw	ra,124(sp)
2001221a:	8432                	mv	s0,a2
2001221c:	0005dc63          	bgez	a1,20012234 <__swhatbuf_r+0x28>
20012220:	00c4d783          	lhu	a5,12(s1)
20012224:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffc084>
20012228:	0807f793          	andi	a5,a5,128
2001222c:	e39d                	bnez	a5,20012252 <__swhatbuf_r+0x46>
2001222e:	40000793          	li	a5,1024
20012232:	a015                	j	20012256 <__swhatbuf_r+0x4a>
20012234:	0830                	addi	a2,sp,24
20012236:	c636                	sw	a3,12(sp)
20012238:	27b1                	jal	20012984 <_fstat_r>
2001223a:	46b2                	lw	a3,12(sp)
2001223c:	fe0542e3          	bltz	a0,20012220 <__swhatbuf_r+0x14>
20012240:	4772                	lw	a4,28(sp)
20012242:	67bd                	lui	a5,0xf
20012244:	8ff9                	and	a5,a5,a4
20012246:	7779                	lui	a4,0xffffe
20012248:	97ba                	add	a5,a5,a4
2001224a:	0017b793          	seqz	a5,a5
2001224e:	c29c                	sw	a5,0(a3)
20012250:	bff9                	j	2001222e <__swhatbuf_r+0x22>
20012252:	04000793          	li	a5,64
20012256:	c01c                	sw	a5,0(s0)
20012258:	50f6                	lw	ra,124(sp)
2001225a:	5466                	lw	s0,120(sp)
2001225c:	54d6                	lw	s1,116(sp)
2001225e:	4501                	li	a0,0
20012260:	6109                	addi	sp,sp,128
20012262:	8082                	ret

20012264 <__smakebuf_r>:
__smakebuf_r():
20012264:	00c5d783          	lhu	a5,12(a1)
20012268:	1101                	addi	sp,sp,-32
2001226a:	cc22                	sw	s0,24(sp)
2001226c:	ce06                	sw	ra,28(sp)
2001226e:	ca26                	sw	s1,20(sp)
20012270:	c84a                	sw	s2,16(sp)
20012272:	8b89                	andi	a5,a5,2
20012274:	842e                	mv	s0,a1
20012276:	cf89                	beqz	a5,20012290 <__smakebuf_r+0x2c>
20012278:	04740793          	addi	a5,s0,71
2001227c:	c01c                	sw	a5,0(s0)
2001227e:	c81c                	sw	a5,16(s0)
20012280:	4785                	li	a5,1
20012282:	c85c                	sw	a5,20(s0)
20012284:	40f2                	lw	ra,28(sp)
20012286:	4462                	lw	s0,24(sp)
20012288:	44d2                	lw	s1,20(sp)
2001228a:	4942                	lw	s2,16(sp)
2001228c:	6105                	addi	sp,sp,32
2001228e:	8082                	ret
20012290:	0074                	addi	a3,sp,12
20012292:	0030                	addi	a2,sp,8
20012294:	84aa                	mv	s1,a0
20012296:	3f9d                	jal	2001220c <__swhatbuf_r>
20012298:	45a2                	lw	a1,8(sp)
2001229a:	892a                	mv	s2,a0
2001229c:	8526                	mv	a0,s1
2001229e:	2a5d                	jal	20012454 <_malloc_r>
200122a0:	ed01                	bnez	a0,200122b8 <__smakebuf_r+0x54>
200122a2:	00c41783          	lh	a5,12(s0)
200122a6:	2007f713          	andi	a4,a5,512
200122aa:	ff69                	bnez	a4,20012284 <__smakebuf_r+0x20>
200122ac:	9bf1                	andi	a5,a5,-4
200122ae:	0027e793          	ori	a5,a5,2
200122b2:	00f41623          	sh	a5,12(s0)
200122b6:	b7c9                	j	20012278 <__smakebuf_r+0x14>
200122b8:	00000797          	auipc	a5,0x0
200122bc:	d9278793          	addi	a5,a5,-622 # 2001204a <_cleanup_r>
200122c0:	d49c                	sw	a5,40(s1)
200122c2:	00c45783          	lhu	a5,12(s0)
200122c6:	c008                	sw	a0,0(s0)
200122c8:	c808                	sw	a0,16(s0)
200122ca:	0807e793          	ori	a5,a5,128
200122ce:	00f41623          	sh	a5,12(s0)
200122d2:	47a2                	lw	a5,8(sp)
200122d4:	c85c                	sw	a5,20(s0)
200122d6:	47b2                	lw	a5,12(sp)
200122d8:	cf89                	beqz	a5,200122f2 <__smakebuf_r+0x8e>
200122da:	00e41583          	lh	a1,14(s0)
200122de:	8526                	mv	a0,s1
200122e0:	2dd9                	jal	200129b6 <_isatty_r>
200122e2:	c901                	beqz	a0,200122f2 <__smakebuf_r+0x8e>
200122e4:	00c45783          	lhu	a5,12(s0)
200122e8:	9bf1                	andi	a5,a5,-4
200122ea:	0017e793          	ori	a5,a5,1
200122ee:	00f41623          	sh	a5,12(s0)
200122f2:	00c45783          	lhu	a5,12(s0)
200122f6:	00f96933          	or	s2,s2,a5
200122fa:	01241623          	sh	s2,12(s0)
200122fe:	b759                	j	20012284 <__smakebuf_r+0x20>

20012300 <memset>:
memset():
20012300:	433d                	li	t1,15
20012302:	872a                	mv	a4,a0
20012304:	02c37363          	bgeu	t1,a2,2001232a <memset+0x2a>
20012308:	00f77793          	andi	a5,a4,15
2001230c:	efbd                	bnez	a5,2001238a <memset+0x8a>
2001230e:	e5ad                	bnez	a1,20012378 <memset+0x78>
20012310:	ff067693          	andi	a3,a2,-16
20012314:	8a3d                	andi	a2,a2,15
20012316:	96ba                	add	a3,a3,a4
20012318:	c30c                	sw	a1,0(a4)
2001231a:	c34c                	sw	a1,4(a4)
2001231c:	c70c                	sw	a1,8(a4)
2001231e:	c74c                	sw	a1,12(a4)
20012320:	0741                	addi	a4,a4,16
20012322:	fed76be3          	bltu	a4,a3,20012318 <memset+0x18>
20012326:	e211                	bnez	a2,2001232a <memset+0x2a>
20012328:	8082                	ret
2001232a:	40c306b3          	sub	a3,t1,a2
2001232e:	068a                	slli	a3,a3,0x2
20012330:	00000297          	auipc	t0,0x0
20012334:	9696                	add	a3,a3,t0
20012336:	00a68067          	jr	10(a3)
2001233a:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffa092>
2001233e:	00b706a3          	sb	a1,13(a4)
20012342:	00b70623          	sb	a1,12(a4)
20012346:	00b705a3          	sb	a1,11(a4)
2001234a:	00b70523          	sb	a1,10(a4)
2001234e:	00b704a3          	sb	a1,9(a4)
20012352:	00b70423          	sb	a1,8(a4)
20012356:	00b703a3          	sb	a1,7(a4)
2001235a:	00b70323          	sb	a1,6(a4)
2001235e:	00b702a3          	sb	a1,5(a4)
20012362:	00b70223          	sb	a1,4(a4)
20012366:	00b701a3          	sb	a1,3(a4)
2001236a:	00b70123          	sb	a1,2(a4)
2001236e:	00b700a3          	sb	a1,1(a4)
20012372:	00b70023          	sb	a1,0(a4)
20012376:	8082                	ret
20012378:	0ff5f593          	andi	a1,a1,255
2001237c:	00859693          	slli	a3,a1,0x8
20012380:	8dd5                	or	a1,a1,a3
20012382:	01059693          	slli	a3,a1,0x10
20012386:	8dd5                	or	a1,a1,a3
20012388:	b761                	j	20012310 <memset+0x10>
2001238a:	00279693          	slli	a3,a5,0x2
2001238e:	00000297          	auipc	t0,0x0
20012392:	9696                	add	a3,a3,t0
20012394:	8286                	mv	t0,ra
20012396:	fa8680e7          	jalr	-88(a3)
2001239a:	8096                	mv	ra,t0
2001239c:	17c1                	addi	a5,a5,-16
2001239e:	8f1d                	sub	a4,a4,a5
200123a0:	963e                	add	a2,a2,a5
200123a2:	f8c374e3          	bgeu	t1,a2,2001232a <memset+0x2a>
200123a6:	b7a5                	j	2001230e <memset+0xe>

200123a8 <_free_r>:
_free_r():
200123a8:	c5cd                	beqz	a1,20012452 <_free_r+0xaa>
200123aa:	ffc5a783          	lw	a5,-4(a1)
200123ae:	1141                	addi	sp,sp,-16
200123b0:	c422                	sw	s0,8(sp)
200123b2:	c606                	sw	ra,12(sp)
200123b4:	c226                	sw	s1,4(sp)
200123b6:	ffc58413          	addi	s0,a1,-4
200123ba:	0007d363          	bgez	a5,200123c0 <_free_r+0x18>
200123be:	943e                	add	s0,s0,a5
200123c0:	84aa                	mv	s1,a0
200123c2:	2d8d                	jal	20012a34 <__malloc_lock>
200123c4:	5ffee797          	auipc	a5,0x5ffee
200123c8:	76478793          	addi	a5,a5,1892 # 80000b28 <metal_segment_data_target_end>
200123cc:	439c                	lw	a5,0(a5)
200123ce:	ef89                	bnez	a5,200123e8 <_free_r+0x40>
200123d0:	00042223          	sw	zero,4(s0)
200123d4:	5ffee797          	auipc	a5,0x5ffee
200123d8:	7487aa23          	sw	s0,1876(a5) # 80000b28 <metal_segment_data_target_end>
200123dc:	4422                	lw	s0,8(sp)
200123de:	40b2                	lw	ra,12(sp)
200123e0:	8526                	mv	a0,s1
200123e2:	4492                	lw	s1,4(sp)
200123e4:	0141                	addi	sp,sp,16
200123e6:	ad81                	j	20012a36 <__malloc_unlock>
200123e8:	00f47e63          	bgeu	s0,a5,20012404 <_free_r+0x5c>
200123ec:	4014                	lw	a3,0(s0)
200123ee:	00d40733          	add	a4,s0,a3
200123f2:	00e79663          	bne	a5,a4,200123fe <_free_r+0x56>
200123f6:	4398                	lw	a4,0(a5)
200123f8:	43dc                	lw	a5,4(a5)
200123fa:	9736                	add	a4,a4,a3
200123fc:	c018                	sw	a4,0(s0)
200123fe:	c05c                	sw	a5,4(s0)
20012400:	bfd1                	j	200123d4 <_free_r+0x2c>
20012402:	87ba                	mv	a5,a4
20012404:	43d8                	lw	a4,4(a5)
20012406:	c319                	beqz	a4,2001240c <_free_r+0x64>
20012408:	fee47de3          	bgeu	s0,a4,20012402 <_free_r+0x5a>
2001240c:	4394                	lw	a3,0(a5)
2001240e:	00d78633          	add	a2,a5,a3
20012412:	00861f63          	bne	a2,s0,20012430 <_free_r+0x88>
20012416:	4010                	lw	a2,0(s0)
20012418:	96b2                	add	a3,a3,a2
2001241a:	c394                	sw	a3,0(a5)
2001241c:	00d78633          	add	a2,a5,a3
20012420:	fac71ee3          	bne	a4,a2,200123dc <_free_r+0x34>
20012424:	4310                	lw	a2,0(a4)
20012426:	4358                	lw	a4,4(a4)
20012428:	96b2                	add	a3,a3,a2
2001242a:	c394                	sw	a3,0(a5)
2001242c:	c3d8                	sw	a4,4(a5)
2001242e:	b77d                	j	200123dc <_free_r+0x34>
20012430:	00c47563          	bgeu	s0,a2,2001243a <_free_r+0x92>
20012434:	47b1                	li	a5,12
20012436:	c09c                	sw	a5,0(s1)
20012438:	b755                	j	200123dc <_free_r+0x34>
2001243a:	4010                	lw	a2,0(s0)
2001243c:	00c406b3          	add	a3,s0,a2
20012440:	00d71663          	bne	a4,a3,2001244c <_free_r+0xa4>
20012444:	4314                	lw	a3,0(a4)
20012446:	4358                	lw	a4,4(a4)
20012448:	96b2                	add	a3,a3,a2
2001244a:	c014                	sw	a3,0(s0)
2001244c:	c058                	sw	a4,4(s0)
2001244e:	c3c0                	sw	s0,4(a5)
20012450:	b771                	j	200123dc <_free_r+0x34>
20012452:	8082                	ret

20012454 <_malloc_r>:
_malloc_r():
20012454:	1101                	addi	sp,sp,-32
20012456:	ca26                	sw	s1,20(sp)
20012458:	00358493          	addi	s1,a1,3
2001245c:	98f1                	andi	s1,s1,-4
2001245e:	ce06                	sw	ra,28(sp)
20012460:	cc22                	sw	s0,24(sp)
20012462:	c84a                	sw	s2,16(sp)
20012464:	c64e                	sw	s3,12(sp)
20012466:	04a1                	addi	s1,s1,8
20012468:	47b1                	li	a5,12
2001246a:	04f4f763          	bgeu	s1,a5,200124b8 <_malloc_r+0x64>
2001246e:	44b1                	li	s1,12
20012470:	04b4e663          	bltu	s1,a1,200124bc <_malloc_r+0x68>
20012474:	892a                	mv	s2,a0
20012476:	2b7d                	jal	20012a34 <__malloc_lock>
20012478:	5ffee797          	auipc	a5,0x5ffee
2001247c:	6b078793          	addi	a5,a5,1712 # 80000b28 <metal_segment_data_target_end>
20012480:	4398                	lw	a4,0(a5)
20012482:	843a                	mv	s0,a4
20012484:	e431                	bnez	s0,200124d0 <_malloc_r+0x7c>
20012486:	5ffee797          	auipc	a5,0x5ffee
2001248a:	6a678793          	addi	a5,a5,1702 # 80000b2c <__malloc_sbrk_start>
2001248e:	439c                	lw	a5,0(a5)
20012490:	eb81                	bnez	a5,200124a0 <_malloc_r+0x4c>
20012492:	4581                	li	a1,0
20012494:	854a                	mv	a0,s2
20012496:	2645                	jal	20012836 <_sbrk_r>
20012498:	5ffee797          	auipc	a5,0x5ffee
2001249c:	68a7aa23          	sw	a0,1684(a5) # 80000b2c <__malloc_sbrk_start>
200124a0:	85a6                	mv	a1,s1
200124a2:	854a                	mv	a0,s2
200124a4:	2e49                	jal	20012836 <_sbrk_r>
200124a6:	59fd                	li	s3,-1
200124a8:	07351963          	bne	a0,s3,2001251a <_malloc_r+0xc6>
200124ac:	47b1                	li	a5,12
200124ae:	00f92023          	sw	a5,0(s2)
200124b2:	854a                	mv	a0,s2
200124b4:	2349                	jal	20012a36 <__malloc_unlock>
200124b6:	a029                	j	200124c0 <_malloc_r+0x6c>
200124b8:	fa04dce3          	bgez	s1,20012470 <_malloc_r+0x1c>
200124bc:	47b1                	li	a5,12
200124be:	c11c                	sw	a5,0(a0)
200124c0:	4501                	li	a0,0
200124c2:	40f2                	lw	ra,28(sp)
200124c4:	4462                	lw	s0,24(sp)
200124c6:	44d2                	lw	s1,20(sp)
200124c8:	4942                	lw	s2,16(sp)
200124ca:	49b2                	lw	s3,12(sp)
200124cc:	6105                	addi	sp,sp,32
200124ce:	8082                	ret
200124d0:	401c                	lw	a5,0(s0)
200124d2:	8f85                	sub	a5,a5,s1
200124d4:	0407c063          	bltz	a5,20012514 <_malloc_r+0xc0>
200124d8:	46ad                	li	a3,11
200124da:	00f6f663          	bgeu	a3,a5,200124e6 <_malloc_r+0x92>
200124de:	c01c                	sw	a5,0(s0)
200124e0:	943e                	add	s0,s0,a5
200124e2:	c004                	sw	s1,0(s0)
200124e4:	a801                	j	200124f4 <_malloc_r+0xa0>
200124e6:	405c                	lw	a5,4(s0)
200124e8:	02871463          	bne	a4,s0,20012510 <_malloc_r+0xbc>
200124ec:	5ffee717          	auipc	a4,0x5ffee
200124f0:	62f72e23          	sw	a5,1596(a4) # 80000b28 <metal_segment_data_target_end>
200124f4:	854a                	mv	a0,s2
200124f6:	2381                	jal	20012a36 <__malloc_unlock>
200124f8:	00b40513          	addi	a0,s0,11
200124fc:	00440793          	addi	a5,s0,4
20012500:	9961                	andi	a0,a0,-8
20012502:	40f50733          	sub	a4,a0,a5
20012506:	df55                	beqz	a4,200124c2 <_malloc_r+0x6e>
20012508:	943a                	add	s0,s0,a4
2001250a:	8f89                	sub	a5,a5,a0
2001250c:	c01c                	sw	a5,0(s0)
2001250e:	bf55                	j	200124c2 <_malloc_r+0x6e>
20012510:	c35c                	sw	a5,4(a4)
20012512:	b7cd                	j	200124f4 <_malloc_r+0xa0>
20012514:	8722                	mv	a4,s0
20012516:	4040                	lw	s0,4(s0)
20012518:	b7b5                	j	20012484 <_malloc_r+0x30>
2001251a:	00350413          	addi	s0,a0,3
2001251e:	9871                	andi	s0,s0,-4
20012520:	fc8501e3          	beq	a0,s0,200124e2 <_malloc_r+0x8e>
20012524:	40a405b3          	sub	a1,s0,a0
20012528:	854a                	mv	a0,s2
2001252a:	2631                	jal	20012836 <_sbrk_r>
2001252c:	fb351be3          	bne	a0,s3,200124e2 <_malloc_r+0x8e>
20012530:	bfb5                	j	200124ac <_malloc_r+0x58>

20012532 <__sfputc_r>:
__sfputc_r():
20012532:	461c                	lw	a5,8(a2)
20012534:	17fd                	addi	a5,a5,-1
20012536:	c61c                	sw	a5,8(a2)
20012538:	0007da63          	bgez	a5,2001254c <__sfputc_r+0x1a>
2001253c:	4e18                	lw	a4,24(a2)
2001253e:	00e7c563          	blt	a5,a4,20012548 <__sfputc_r+0x16>
20012542:	47a9                	li	a5,10
20012544:	00f59463          	bne	a1,a5,2001254c <__sfputc_r+0x1a>
20012548:	f1cff06f          	j	20011c64 <__swbuf_r>
2001254c:	421c                	lw	a5,0(a2)
2001254e:	852e                	mv	a0,a1
20012550:	00178713          	addi	a4,a5,1
20012554:	c218                	sw	a4,0(a2)
20012556:	00b78023          	sb	a1,0(a5)
2001255a:	8082                	ret

2001255c <__sfputs_r>:
__sfputs_r():
2001255c:	1101                	addi	sp,sp,-32
2001255e:	cc22                	sw	s0,24(sp)
20012560:	ca26                	sw	s1,20(sp)
20012562:	c84a                	sw	s2,16(sp)
20012564:	c64e                	sw	s3,12(sp)
20012566:	c452                	sw	s4,8(sp)
20012568:	ce06                	sw	ra,28(sp)
2001256a:	892a                	mv	s2,a0
2001256c:	89ae                	mv	s3,a1
2001256e:	8432                	mv	s0,a2
20012570:	00d604b3          	add	s1,a2,a3
20012574:	5a7d                	li	s4,-1
20012576:	00941463          	bne	s0,s1,2001257e <__sfputs_r+0x22>
2001257a:	4501                	li	a0,0
2001257c:	a809                	j	2001258e <__sfputs_r+0x32>
2001257e:	00044583          	lbu	a1,0(s0)
20012582:	864e                	mv	a2,s3
20012584:	854a                	mv	a0,s2
20012586:	3775                	jal	20012532 <__sfputc_r>
20012588:	0405                	addi	s0,s0,1
2001258a:	ff4516e3          	bne	a0,s4,20012576 <__sfputs_r+0x1a>
2001258e:	40f2                	lw	ra,28(sp)
20012590:	4462                	lw	s0,24(sp)
20012592:	44d2                	lw	s1,20(sp)
20012594:	4942                	lw	s2,16(sp)
20012596:	49b2                	lw	s3,12(sp)
20012598:	4a22                	lw	s4,8(sp)
2001259a:	6105                	addi	sp,sp,32
2001259c:	8082                	ret

2001259e <_vfiprintf_r>:
_vfiprintf_r():
2001259e:	7135                	addi	sp,sp,-160
200125a0:	cd22                	sw	s0,152(sp)
200125a2:	cb26                	sw	s1,148(sp)
200125a4:	c94a                	sw	s2,144(sp)
200125a6:	c74e                	sw	s3,140(sp)
200125a8:	cf06                	sw	ra,156(sp)
200125aa:	c552                	sw	s4,136(sp)
200125ac:	c356                	sw	s5,132(sp)
200125ae:	c15a                	sw	s6,128(sp)
200125b0:	dede                	sw	s7,124(sp)
200125b2:	dce2                	sw	s8,120(sp)
200125b4:	dae6                	sw	s9,116(sp)
200125b6:	89aa                	mv	s3,a0
200125b8:	84ae                	mv	s1,a1
200125ba:	8932                	mv	s2,a2
200125bc:	8436                	mv	s0,a3
200125be:	c501                	beqz	a0,200125c6 <_vfiprintf_r+0x28>
200125c0:	4d1c                	lw	a5,24(a0)
200125c2:	e391                	bnez	a5,200125c6 <_vfiprintf_r+0x28>
200125c4:	3cd1                	jal	20012098 <__sinit>
200125c6:	00005797          	auipc	a5,0x5
200125ca:	01278793          	addi	a5,a5,18 # 200175d8 <__sf_fake_stdin>
200125ce:	0cf49b63          	bne	s1,a5,200126a4 <_vfiprintf_r+0x106>
200125d2:	0049a483          	lw	s1,4(s3)
200125d6:	00c4d783          	lhu	a5,12(s1)
200125da:	8ba1                	andi	a5,a5,8
200125dc:	c7f5                	beqz	a5,200126c8 <_vfiprintf_r+0x12a>
200125de:	489c                	lw	a5,16(s1)
200125e0:	c7e5                	beqz	a5,200126c8 <_vfiprintf_r+0x12a>
200125e2:	02000793          	li	a5,32
200125e6:	02f104a3          	sb	a5,41(sp)
200125ea:	03000793          	li	a5,48
200125ee:	d202                	sw	zero,36(sp)
200125f0:	02f10523          	sb	a5,42(sp)
200125f4:	c622                	sw	s0,12(sp)
200125f6:	02500b93          	li	s7,37
200125fa:	00005a97          	auipc	s5,0x5
200125fe:	01ea8a93          	addi	s5,s5,30 # 20017618 <__sf_fake_stdout+0x20>
20012602:	4c05                	li	s8,1
20012604:	4b29                	li	s6,10
20012606:	844a                	mv	s0,s2
20012608:	00044783          	lbu	a5,0(s0)
2001260c:	c399                	beqz	a5,20012612 <_vfiprintf_r+0x74>
2001260e:	0f779063          	bne	a5,s7,200126ee <_vfiprintf_r+0x150>
20012612:	41240cb3          	sub	s9,s0,s2
20012616:	000c8d63          	beqz	s9,20012630 <_vfiprintf_r+0x92>
2001261a:	86e6                	mv	a3,s9
2001261c:	864a                	mv	a2,s2
2001261e:	85a6                	mv	a1,s1
20012620:	854e                	mv	a0,s3
20012622:	3f2d                	jal	2001255c <__sfputs_r>
20012624:	57fd                	li	a5,-1
20012626:	1ef50663          	beq	a0,a5,20012812 <_vfiprintf_r+0x274>
2001262a:	5692                	lw	a3,36(sp)
2001262c:	96e6                	add	a3,a3,s9
2001262e:	d236                	sw	a3,36(sp)
20012630:	00044783          	lbu	a5,0(s0)
20012634:	1c078f63          	beqz	a5,20012812 <_vfiprintf_r+0x274>
20012638:	57fd                	li	a5,-1
2001263a:	00140913          	addi	s2,s0,1
2001263e:	c802                	sw	zero,16(sp)
20012640:	ce02                	sw	zero,28(sp)
20012642:	ca3e                	sw	a5,20(sp)
20012644:	cc02                	sw	zero,24(sp)
20012646:	040109a3          	sb	zero,83(sp)
2001264a:	d482                	sw	zero,104(sp)
2001264c:	00094583          	lbu	a1,0(s2)
20012650:	4615                	li	a2,5
20012652:	8556                	mv	a0,s5
20012654:	26d9                	jal	20012a1a <memchr>
20012656:	00190413          	addi	s0,s2,1
2001265a:	47c2                	lw	a5,16(sp)
2001265c:	e959                	bnez	a0,200126f2 <_vfiprintf_r+0x154>
2001265e:	0107f713          	andi	a4,a5,16
20012662:	c709                	beqz	a4,2001266c <_vfiprintf_r+0xce>
20012664:	02000713          	li	a4,32
20012668:	04e109a3          	sb	a4,83(sp)
2001266c:	0087f713          	andi	a4,a5,8
20012670:	c709                	beqz	a4,2001267a <_vfiprintf_r+0xdc>
20012672:	02b00713          	li	a4,43
20012676:	04e109a3          	sb	a4,83(sp)
2001267a:	00094683          	lbu	a3,0(s2)
2001267e:	02a00713          	li	a4,42
20012682:	08e68063          	beq	a3,a4,20012702 <_vfiprintf_r+0x164>
20012686:	47f2                	lw	a5,28(sp)
20012688:	844a                	mv	s0,s2
2001268a:	4681                	li	a3,0
2001268c:	4625                	li	a2,9
2001268e:	00044703          	lbu	a4,0(s0)
20012692:	00140593          	addi	a1,s0,1
20012696:	fd070713          	addi	a4,a4,-48
2001269a:	0ae67963          	bgeu	a2,a4,2001274c <_vfiprintf_r+0x1ae>
2001269e:	cab5                	beqz	a3,20012712 <_vfiprintf_r+0x174>
200126a0:	ce3e                	sw	a5,28(sp)
200126a2:	a885                	j	20012712 <_vfiprintf_r+0x174>
200126a4:	00005797          	auipc	a5,0x5
200126a8:	f5478793          	addi	a5,a5,-172 # 200175f8 <__sf_fake_stdout>
200126ac:	00f49563          	bne	s1,a5,200126b6 <_vfiprintf_r+0x118>
200126b0:	0089a483          	lw	s1,8(s3)
200126b4:	b70d                	j	200125d6 <_vfiprintf_r+0x38>
200126b6:	00005797          	auipc	a5,0x5
200126ba:	f0278793          	addi	a5,a5,-254 # 200175b8 <__sf_fake_stderr>
200126be:	f0f49ce3          	bne	s1,a5,200125d6 <_vfiprintf_r+0x38>
200126c2:	00c9a483          	lw	s1,12(s3)
200126c6:	bf01                	j	200125d6 <_vfiprintf_r+0x38>
200126c8:	85a6                	mv	a1,s1
200126ca:	854e                	mv	a0,s3
200126cc:	e58ff0ef          	jal	ra,20011d24 <__swsetup_r>
200126d0:	d909                	beqz	a0,200125e2 <_vfiprintf_r+0x44>
200126d2:	557d                	li	a0,-1
200126d4:	40fa                	lw	ra,156(sp)
200126d6:	446a                	lw	s0,152(sp)
200126d8:	44da                	lw	s1,148(sp)
200126da:	494a                	lw	s2,144(sp)
200126dc:	49ba                	lw	s3,140(sp)
200126de:	4a2a                	lw	s4,136(sp)
200126e0:	4a9a                	lw	s5,132(sp)
200126e2:	4b0a                	lw	s6,128(sp)
200126e4:	5bf6                	lw	s7,124(sp)
200126e6:	5c66                	lw	s8,120(sp)
200126e8:	5cd6                	lw	s9,116(sp)
200126ea:	610d                	addi	sp,sp,160
200126ec:	8082                	ret
200126ee:	0405                	addi	s0,s0,1
200126f0:	bf21                	j	20012608 <_vfiprintf_r+0x6a>
200126f2:	41550533          	sub	a0,a0,s5
200126f6:	00ac1533          	sll	a0,s8,a0
200126fa:	8fc9                	or	a5,a5,a0
200126fc:	c83e                	sw	a5,16(sp)
200126fe:	8922                	mv	s2,s0
20012700:	b7b1                	j	2001264c <_vfiprintf_r+0xae>
20012702:	4732                	lw	a4,12(sp)
20012704:	00470693          	addi	a3,a4,4
20012708:	4318                	lw	a4,0(a4)
2001270a:	c636                	sw	a3,12(sp)
2001270c:	02074963          	bltz	a4,2001273e <_vfiprintf_r+0x1a0>
20012710:	ce3a                	sw	a4,28(sp)
20012712:	00044703          	lbu	a4,0(s0)
20012716:	02e00793          	li	a5,46
2001271a:	04f71f63          	bne	a4,a5,20012778 <_vfiprintf_r+0x1da>
2001271e:	00144703          	lbu	a4,1(s0)
20012722:	02a00793          	li	a5,42
20012726:	02f71b63          	bne	a4,a5,2001275c <_vfiprintf_r+0x1be>
2001272a:	47b2                	lw	a5,12(sp)
2001272c:	0409                	addi	s0,s0,2
2001272e:	00478713          	addi	a4,a5,4
20012732:	439c                	lw	a5,0(a5)
20012734:	c63a                	sw	a4,12(sp)
20012736:	0207c163          	bltz	a5,20012758 <_vfiprintf_r+0x1ba>
2001273a:	ca3e                	sw	a5,20(sp)
2001273c:	a835                	j	20012778 <_vfiprintf_r+0x1da>
2001273e:	40e00733          	neg	a4,a4
20012742:	0027e793          	ori	a5,a5,2
20012746:	ce3a                	sw	a4,28(sp)
20012748:	c83e                	sw	a5,16(sp)
2001274a:	b7e1                	j	20012712 <_vfiprintf_r+0x174>
2001274c:	036787b3          	mul	a5,a5,s6
20012750:	4685                	li	a3,1
20012752:	842e                	mv	s0,a1
20012754:	97ba                	add	a5,a5,a4
20012756:	bf25                	j	2001268e <_vfiprintf_r+0xf0>
20012758:	57fd                	li	a5,-1
2001275a:	b7c5                	j	2001273a <_vfiprintf_r+0x19c>
2001275c:	0405                	addi	s0,s0,1
2001275e:	ca02                	sw	zero,20(sp)
20012760:	4681                	li	a3,0
20012762:	4781                	li	a5,0
20012764:	4625                	li	a2,9
20012766:	00044703          	lbu	a4,0(s0)
2001276a:	00140593          	addi	a1,s0,1
2001276e:	fd070713          	addi	a4,a4,-48
20012772:	06e67663          	bgeu	a2,a4,200127de <_vfiprintf_r+0x240>
20012776:	f2f1                	bnez	a3,2001273a <_vfiprintf_r+0x19c>
20012778:	00044583          	lbu	a1,0(s0)
2001277c:	460d                	li	a2,3
2001277e:	00005517          	auipc	a0,0x5
20012782:	ea250513          	addi	a0,a0,-350 # 20017620 <__sf_fake_stdout+0x28>
20012786:	2c51                	jal	20012a1a <memchr>
20012788:	cd11                	beqz	a0,200127a4 <_vfiprintf_r+0x206>
2001278a:	00005797          	auipc	a5,0x5
2001278e:	e9678793          	addi	a5,a5,-362 # 20017620 <__sf_fake_stdout+0x28>
20012792:	8d1d                	sub	a0,a0,a5
20012794:	04000793          	li	a5,64
20012798:	00a797b3          	sll	a5,a5,a0
2001279c:	4542                	lw	a0,16(sp)
2001279e:	0405                	addi	s0,s0,1
200127a0:	8d5d                	or	a0,a0,a5
200127a2:	c82a                	sw	a0,16(sp)
200127a4:	00044583          	lbu	a1,0(s0)
200127a8:	4619                	li	a2,6
200127aa:	00005517          	auipc	a0,0x5
200127ae:	e7a50513          	addi	a0,a0,-390 # 20017624 <__sf_fake_stdout+0x2c>
200127b2:	00140913          	addi	s2,s0,1
200127b6:	02b10423          	sb	a1,40(sp)
200127ba:	2485                	jal	20012a1a <memchr>
200127bc:	c13d                	beqz	a0,20012822 <_vfiprintf_r+0x284>
200127be:	dffee797          	auipc	a5,0xdffee
200127c2:	84278793          	addi	a5,a5,-1982 # 0 <__metal_boot_hart>
200127c6:	e795                	bnez	a5,200127f2 <_vfiprintf_r+0x254>
200127c8:	4742                	lw	a4,16(sp)
200127ca:	47b2                	lw	a5,12(sp)
200127cc:	10077713          	andi	a4,a4,256
200127d0:	cf09                	beqz	a4,200127ea <_vfiprintf_r+0x24c>
200127d2:	0791                	addi	a5,a5,4
200127d4:	c63e                	sw	a5,12(sp)
200127d6:	5792                	lw	a5,36(sp)
200127d8:	97d2                	add	a5,a5,s4
200127da:	d23e                	sw	a5,36(sp)
200127dc:	b52d                	j	20012606 <_vfiprintf_r+0x68>
200127de:	036787b3          	mul	a5,a5,s6
200127e2:	4685                	li	a3,1
200127e4:	842e                	mv	s0,a1
200127e6:	97ba                	add	a5,a5,a4
200127e8:	bfbd                	j	20012766 <_vfiprintf_r+0x1c8>
200127ea:	079d                	addi	a5,a5,7
200127ec:	9be1                	andi	a5,a5,-8
200127ee:	07a1                	addi	a5,a5,8
200127f0:	b7d5                	j	200127d4 <_vfiprintf_r+0x236>
200127f2:	0078                	addi	a4,sp,12
200127f4:	00000697          	auipc	a3,0x0
200127f8:	d6868693          	addi	a3,a3,-664 # 2001255c <__sfputs_r>
200127fc:	8626                	mv	a2,s1
200127fe:	080c                	addi	a1,sp,16
20012800:	854e                	mv	a0,s3
20012802:	00000097          	auipc	ra,0x0
20012806:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2001280a:	57fd                	li	a5,-1
2001280c:	8a2a                	mv	s4,a0
2001280e:	fcf514e3          	bne	a0,a5,200127d6 <_vfiprintf_r+0x238>
20012812:	00c4d783          	lhu	a5,12(s1)
20012816:	0407f793          	andi	a5,a5,64
2001281a:	ea079ce3          	bnez	a5,200126d2 <_vfiprintf_r+0x134>
2001281e:	5512                	lw	a0,36(sp)
20012820:	bd55                	j	200126d4 <_vfiprintf_r+0x136>
20012822:	0078                	addi	a4,sp,12
20012824:	00000697          	auipc	a3,0x0
20012828:	d3868693          	addi	a3,a3,-712 # 2001255c <__sfputs_r>
2001282c:	8626                	mv	a2,s1
2001282e:	080c                	addi	a1,sp,16
20012830:	854e                	mv	a0,s3
20012832:	2e09                	jal	20012b44 <_printf_i>
20012834:	bfd9                	j	2001280a <_vfiprintf_r+0x26c>

20012836 <_sbrk_r>:
_sbrk_r():
20012836:	1141                	addi	sp,sp,-16
20012838:	c422                	sw	s0,8(sp)
2001283a:	842a                	mv	s0,a0
2001283c:	852e                	mv	a0,a1
2001283e:	5fff1797          	auipc	a5,0x5fff1
20012842:	b207ad23          	sw	zero,-1222(a5) # 80003378 <errno>
20012846:	c606                	sw	ra,12(sp)
20012848:	2579                	jal	20012ed6 <_sbrk>
2001284a:	57fd                	li	a5,-1
2001284c:	00f51963          	bne	a0,a5,2001285e <_sbrk_r+0x28>
20012850:	5fff1797          	auipc	a5,0x5fff1
20012854:	b2878793          	addi	a5,a5,-1240 # 80003378 <errno>
20012858:	439c                	lw	a5,0(a5)
2001285a:	c391                	beqz	a5,2001285e <_sbrk_r+0x28>
2001285c:	c01c                	sw	a5,0(s0)
2001285e:	40b2                	lw	ra,12(sp)
20012860:	4422                	lw	s0,8(sp)
20012862:	0141                	addi	sp,sp,16
20012864:	8082                	ret

20012866 <__sread>:
__sread():
20012866:	1141                	addi	sp,sp,-16
20012868:	c422                	sw	s0,8(sp)
2001286a:	842e                	mv	s0,a1
2001286c:	00e59583          	lh	a1,14(a1)
20012870:	c606                	sw	ra,12(sp)
20012872:	2b95                	jal	20012de6 <_read_r>
20012874:	00054963          	bltz	a0,20012886 <__sread+0x20>
20012878:	487c                	lw	a5,84(s0)
2001287a:	97aa                	add	a5,a5,a0
2001287c:	c87c                	sw	a5,84(s0)
2001287e:	40b2                	lw	ra,12(sp)
20012880:	4422                	lw	s0,8(sp)
20012882:	0141                	addi	sp,sp,16
20012884:	8082                	ret
20012886:	00c45783          	lhu	a5,12(s0)
2001288a:	777d                	lui	a4,0xfffff
2001288c:	177d                	addi	a4,a4,-1
2001288e:	8ff9                	and	a5,a5,a4
20012890:	00f41623          	sh	a5,12(s0)
20012894:	b7ed                	j	2001287e <__sread+0x18>

20012896 <__swrite>:
__swrite():
20012896:	00c5d783          	lhu	a5,12(a1)
2001289a:	1101                	addi	sp,sp,-32
2001289c:	cc22                	sw	s0,24(sp)
2001289e:	ca26                	sw	s1,20(sp)
200128a0:	c84a                	sw	s2,16(sp)
200128a2:	c64e                	sw	s3,12(sp)
200128a4:	ce06                	sw	ra,28(sp)
200128a6:	1007f793          	andi	a5,a5,256
200128aa:	84aa                	mv	s1,a0
200128ac:	842e                	mv	s0,a1
200128ae:	8932                	mv	s2,a2
200128b0:	89b6                	mv	s3,a3
200128b2:	c791                	beqz	a5,200128be <__swrite+0x28>
200128b4:	00e59583          	lh	a1,14(a1)
200128b8:	4689                	li	a3,2
200128ba:	4601                	li	a2,0
200128bc:	222d                	jal	200129e6 <_lseek_r>
200128be:	00c45783          	lhu	a5,12(s0)
200128c2:	777d                	lui	a4,0xfffff
200128c4:	177d                	addi	a4,a4,-1
200128c6:	8ff9                	and	a5,a5,a4
200128c8:	00f41623          	sh	a5,12(s0)
200128cc:	00e41583          	lh	a1,14(s0)
200128d0:	4462                	lw	s0,24(sp)
200128d2:	40f2                	lw	ra,28(sp)
200128d4:	86ce                	mv	a3,s3
200128d6:	864a                	mv	a2,s2
200128d8:	49b2                	lw	s3,12(sp)
200128da:	4942                	lw	s2,16(sp)
200128dc:	8526                	mv	a0,s1
200128de:	44d2                	lw	s1,20(sp)
200128e0:	6105                	addi	sp,sp,32
200128e2:	a83d                	j	20012920 <_write_r>

200128e4 <__sseek>:
__sseek():
200128e4:	1141                	addi	sp,sp,-16
200128e6:	c422                	sw	s0,8(sp)
200128e8:	842e                	mv	s0,a1
200128ea:	00e59583          	lh	a1,14(a1)
200128ee:	c606                	sw	ra,12(sp)
200128f0:	28dd                	jal	200129e6 <_lseek_r>
200128f2:	57fd                	li	a5,-1
200128f4:	00c45703          	lhu	a4,12(s0)
200128f8:	00f51b63          	bne	a0,a5,2001290e <__sseek+0x2a>
200128fc:	77fd                	lui	a5,0xfffff
200128fe:	17fd                	addi	a5,a5,-1
20012900:	8ff9                	and	a5,a5,a4
20012902:	00f41623          	sh	a5,12(s0)
20012906:	40b2                	lw	ra,12(sp)
20012908:	4422                	lw	s0,8(sp)
2001290a:	0141                	addi	sp,sp,16
2001290c:	8082                	ret
2001290e:	6785                	lui	a5,0x1
20012910:	8fd9                	or	a5,a5,a4
20012912:	00f41623          	sh	a5,12(s0)
20012916:	c868                	sw	a0,84(s0)
20012918:	b7fd                	j	20012906 <__sseek+0x22>

2001291a <__sclose>:
__sclose():
2001291a:	00e59583          	lh	a1,14(a1)
2001291e:	a81d                	j	20012954 <_close_r>

20012920 <_write_r>:
_write_r():
20012920:	1141                	addi	sp,sp,-16
20012922:	c422                	sw	s0,8(sp)
20012924:	842a                	mv	s0,a0
20012926:	852e                	mv	a0,a1
20012928:	85b2                	mv	a1,a2
2001292a:	8636                	mv	a2,a3
2001292c:	5fff1797          	auipc	a5,0x5fff1
20012930:	a407a623          	sw	zero,-1460(a5) # 80003378 <errno>
20012934:	c606                	sw	ra,12(sp)
20012936:	2d39                	jal	20012f54 <_write>
20012938:	57fd                	li	a5,-1
2001293a:	00f51963          	bne	a0,a5,2001294c <_write_r+0x2c>
2001293e:	5fff1797          	auipc	a5,0x5fff1
20012942:	a3a78793          	addi	a5,a5,-1478 # 80003378 <errno>
20012946:	439c                	lw	a5,0(a5)
20012948:	c391                	beqz	a5,2001294c <_write_r+0x2c>
2001294a:	c01c                	sw	a5,0(s0)
2001294c:	40b2                	lw	ra,12(sp)
2001294e:	4422                	lw	s0,8(sp)
20012950:	0141                	addi	sp,sp,16
20012952:	8082                	ret

20012954 <_close_r>:
_close_r():
20012954:	1141                	addi	sp,sp,-16
20012956:	c422                	sw	s0,8(sp)
20012958:	842a                	mv	s0,a0
2001295a:	852e                	mv	a0,a1
2001295c:	5fff1797          	auipc	a5,0x5fff1
20012960:	a007ae23          	sw	zero,-1508(a5) # 80003378 <errno>
20012964:	c606                	sw	ra,12(sp)
20012966:	2955                	jal	20012e1a <_close>
20012968:	57fd                	li	a5,-1
2001296a:	00f51963          	bne	a0,a5,2001297c <_close_r+0x28>
2001296e:	5fff1797          	auipc	a5,0x5fff1
20012972:	a0a78793          	addi	a5,a5,-1526 # 80003378 <errno>
20012976:	439c                	lw	a5,0(a5)
20012978:	c391                	beqz	a5,2001297c <_close_r+0x28>
2001297a:	c01c                	sw	a5,0(s0)
2001297c:	40b2                	lw	ra,12(sp)
2001297e:	4422                	lw	s0,8(sp)
20012980:	0141                	addi	sp,sp,16
20012982:	8082                	ret

20012984 <_fstat_r>:
_fstat_r():
20012984:	1141                	addi	sp,sp,-16
20012986:	c422                	sw	s0,8(sp)
20012988:	842a                	mv	s0,a0
2001298a:	852e                	mv	a0,a1
2001298c:	85b2                	mv	a1,a2
2001298e:	5fff1797          	auipc	a5,0x5fff1
20012992:	9e07a523          	sw	zero,-1558(a5) # 80003378 <errno>
20012996:	c606                	sw	ra,12(sp)
20012998:	2155                	jal	20012e3c <_fstat>
2001299a:	57fd                	li	a5,-1
2001299c:	00f51963          	bne	a0,a5,200129ae <_fstat_r+0x2a>
200129a0:	5fff1797          	auipc	a5,0x5fff1
200129a4:	9d878793          	addi	a5,a5,-1576 # 80003378 <errno>
200129a8:	439c                	lw	a5,0(a5)
200129aa:	c391                	beqz	a5,200129ae <_fstat_r+0x2a>
200129ac:	c01c                	sw	a5,0(s0)
200129ae:	40b2                	lw	ra,12(sp)
200129b0:	4422                	lw	s0,8(sp)
200129b2:	0141                	addi	sp,sp,16
200129b4:	8082                	ret

200129b6 <_isatty_r>:
_isatty_r():
200129b6:	1141                	addi	sp,sp,-16
200129b8:	c422                	sw	s0,8(sp)
200129ba:	842a                	mv	s0,a0
200129bc:	852e                	mv	a0,a1
200129be:	5fff1797          	auipc	a5,0x5fff1
200129c2:	9a07ad23          	sw	zero,-1606(a5) # 80003378 <errno>
200129c6:	c606                	sw	ra,12(sp)
200129c8:	2969                	jal	20012e62 <_isatty>
200129ca:	57fd                	li	a5,-1
200129cc:	00f51963          	bne	a0,a5,200129de <_isatty_r+0x28>
200129d0:	5fff1797          	auipc	a5,0x5fff1
200129d4:	9a878793          	addi	a5,a5,-1624 # 80003378 <errno>
200129d8:	439c                	lw	a5,0(a5)
200129da:	c391                	beqz	a5,200129de <_isatty_r+0x28>
200129dc:	c01c                	sw	a5,0(s0)
200129de:	40b2                	lw	ra,12(sp)
200129e0:	4422                	lw	s0,8(sp)
200129e2:	0141                	addi	sp,sp,16
200129e4:	8082                	ret

200129e6 <_lseek_r>:
_lseek_r():
200129e6:	1141                	addi	sp,sp,-16
200129e8:	c422                	sw	s0,8(sp)
200129ea:	842a                	mv	s0,a0
200129ec:	852e                	mv	a0,a1
200129ee:	85b2                	mv	a1,a2
200129f0:	8636                	mv	a2,a3
200129f2:	5fff1797          	auipc	a5,0x5fff1
200129f6:	9807a323          	sw	zero,-1658(a5) # 80003378 <errno>
200129fa:	c606                	sw	ra,12(sp)
200129fc:	2159                	jal	20012e82 <_lseek>
200129fe:	57fd                	li	a5,-1
20012a00:	00f51963          	bne	a0,a5,20012a12 <_lseek_r+0x2c>
20012a04:	5fff1797          	auipc	a5,0x5fff1
20012a08:	97478793          	addi	a5,a5,-1676 # 80003378 <errno>
20012a0c:	439c                	lw	a5,0(a5)
20012a0e:	c391                	beqz	a5,20012a12 <_lseek_r+0x2c>
20012a10:	c01c                	sw	a5,0(s0)
20012a12:	40b2                	lw	ra,12(sp)
20012a14:	4422                	lw	s0,8(sp)
20012a16:	0141                	addi	sp,sp,16
20012a18:	8082                	ret

20012a1a <memchr>:
memchr():
20012a1a:	0ff5f593          	andi	a1,a1,255
20012a1e:	962a                	add	a2,a2,a0
20012a20:	00c51463          	bne	a0,a2,20012a28 <memchr+0xe>
20012a24:	4501                	li	a0,0
20012a26:	8082                	ret
20012a28:	00054783          	lbu	a5,0(a0)
20012a2c:	feb78de3          	beq	a5,a1,20012a26 <memchr+0xc>
20012a30:	0505                	addi	a0,a0,1
20012a32:	b7fd                	j	20012a20 <memchr+0x6>

20012a34 <__malloc_lock>:
__malloc_lock():
20012a34:	8082                	ret

20012a36 <__malloc_unlock>:
__malloc_unlock():
20012a36:	8082                	ret

20012a38 <_printf_common>:
_printf_common():
20012a38:	7179                	addi	sp,sp,-48
20012a3a:	ca56                	sw	s5,20(sp)
20012a3c:	499c                	lw	a5,16(a1)
20012a3e:	8aba                	mv	s5,a4
20012a40:	4598                	lw	a4,8(a1)
20012a42:	d422                	sw	s0,40(sp)
20012a44:	d226                	sw	s1,36(sp)
20012a46:	ce4e                	sw	s3,28(sp)
20012a48:	cc52                	sw	s4,24(sp)
20012a4a:	d606                	sw	ra,44(sp)
20012a4c:	d04a                	sw	s2,32(sp)
20012a4e:	c85a                	sw	s6,16(sp)
20012a50:	c65e                	sw	s7,12(sp)
20012a52:	89aa                	mv	s3,a0
20012a54:	842e                	mv	s0,a1
20012a56:	84b2                	mv	s1,a2
20012a58:	8a36                	mv	s4,a3
20012a5a:	00e7d363          	bge	a5,a4,20012a60 <_printf_common+0x28>
20012a5e:	87ba                	mv	a5,a4
20012a60:	c09c                	sw	a5,0(s1)
20012a62:	04344703          	lbu	a4,67(s0)
20012a66:	c319                	beqz	a4,20012a6c <_printf_common+0x34>
20012a68:	0785                	addi	a5,a5,1
20012a6a:	c09c                	sw	a5,0(s1)
20012a6c:	401c                	lw	a5,0(s0)
20012a6e:	0207f793          	andi	a5,a5,32
20012a72:	c781                	beqz	a5,20012a7a <_printf_common+0x42>
20012a74:	409c                	lw	a5,0(s1)
20012a76:	0789                	addi	a5,a5,2
20012a78:	c09c                	sw	a5,0(s1)
20012a7a:	00042903          	lw	s2,0(s0)
20012a7e:	00697913          	andi	s2,s2,6
20012a82:	00091a63          	bnez	s2,20012a96 <_printf_common+0x5e>
20012a86:	01940b13          	addi	s6,s0,25
20012a8a:	5bfd                	li	s7,-1
20012a8c:	445c                	lw	a5,12(s0)
20012a8e:	4098                	lw	a4,0(s1)
20012a90:	8f99                	sub	a5,a5,a4
20012a92:	04f94c63          	blt	s2,a5,20012aea <_printf_common+0xb2>
20012a96:	401c                	lw	a5,0(s0)
20012a98:	04344683          	lbu	a3,67(s0)
20012a9c:	0207f793          	andi	a5,a5,32
20012aa0:	00d036b3          	snez	a3,a3
20012aa4:	eba5                	bnez	a5,20012b14 <_printf_common+0xdc>
20012aa6:	04340613          	addi	a2,s0,67
20012aaa:	85d2                	mv	a1,s4
20012aac:	854e                	mv	a0,s3
20012aae:	9a82                	jalr	s5
20012ab0:	57fd                	li	a5,-1
20012ab2:	04f50363          	beq	a0,a5,20012af8 <_printf_common+0xc0>
20012ab6:	401c                	lw	a5,0(s0)
20012ab8:	4611                	li	a2,4
20012aba:	4098                	lw	a4,0(s1)
20012abc:	8b99                	andi	a5,a5,6
20012abe:	4454                	lw	a3,12(s0)
20012ac0:	4481                	li	s1,0
20012ac2:	00c79763          	bne	a5,a2,20012ad0 <_printf_common+0x98>
20012ac6:	40e684b3          	sub	s1,a3,a4
20012aca:	0004d363          	bgez	s1,20012ad0 <_printf_common+0x98>
20012ace:	4481                	li	s1,0
20012ad0:	441c                	lw	a5,8(s0)
20012ad2:	4818                	lw	a4,16(s0)
20012ad4:	00f75463          	bge	a4,a5,20012adc <_printf_common+0xa4>
20012ad8:	8f99                	sub	a5,a5,a4
20012ada:	94be                	add	s1,s1,a5
20012adc:	4901                	li	s2,0
20012ade:	0469                	addi	s0,s0,26
20012ae0:	5b7d                	li	s6,-1
20012ae2:	05249863          	bne	s1,s2,20012b32 <_printf_common+0xfa>
20012ae6:	4501                	li	a0,0
20012ae8:	a809                	j	20012afa <_printf_common+0xc2>
20012aea:	4685                	li	a3,1
20012aec:	865a                	mv	a2,s6
20012aee:	85d2                	mv	a1,s4
20012af0:	854e                	mv	a0,s3
20012af2:	9a82                	jalr	s5
20012af4:	01751e63          	bne	a0,s7,20012b10 <_printf_common+0xd8>
20012af8:	557d                	li	a0,-1
20012afa:	50b2                	lw	ra,44(sp)
20012afc:	5422                	lw	s0,40(sp)
20012afe:	5492                	lw	s1,36(sp)
20012b00:	5902                	lw	s2,32(sp)
20012b02:	49f2                	lw	s3,28(sp)
20012b04:	4a62                	lw	s4,24(sp)
20012b06:	4ad2                	lw	s5,20(sp)
20012b08:	4b42                	lw	s6,16(sp)
20012b0a:	4bb2                	lw	s7,12(sp)
20012b0c:	6145                	addi	sp,sp,48
20012b0e:	8082                	ret
20012b10:	0905                	addi	s2,s2,1
20012b12:	bfad                	j	20012a8c <_printf_common+0x54>
20012b14:	00d40733          	add	a4,s0,a3
20012b18:	03000613          	li	a2,48
20012b1c:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffb0c7>
20012b20:	04544703          	lbu	a4,69(s0)
20012b24:	00168793          	addi	a5,a3,1
20012b28:	97a2                	add	a5,a5,s0
20012b2a:	0689                	addi	a3,a3,2
20012b2c:	04e781a3          	sb	a4,67(a5)
20012b30:	bf9d                	j	20012aa6 <_printf_common+0x6e>
20012b32:	4685                	li	a3,1
20012b34:	8622                	mv	a2,s0
20012b36:	85d2                	mv	a1,s4
20012b38:	854e                	mv	a0,s3
20012b3a:	9a82                	jalr	s5
20012b3c:	fb650ee3          	beq	a0,s6,20012af8 <_printf_common+0xc0>
20012b40:	0905                	addi	s2,s2,1
20012b42:	b745                	j	20012ae2 <_printf_common+0xaa>

20012b44 <_printf_i>:
_printf_i():
20012b44:	7179                	addi	sp,sp,-48
20012b46:	d422                	sw	s0,40(sp)
20012b48:	d226                	sw	s1,36(sp)
20012b4a:	d04a                	sw	s2,32(sp)
20012b4c:	ce4e                	sw	s3,28(sp)
20012b4e:	d606                	sw	ra,44(sp)
20012b50:	cc52                	sw	s4,24(sp)
20012b52:	ca56                	sw	s5,20(sp)
20012b54:	c85a                	sw	s6,16(sp)
20012b56:	89b6                	mv	s3,a3
20012b58:	0185c683          	lbu	a3,24(a1)
20012b5c:	06e00793          	li	a5,110
20012b60:	8932                	mv	s2,a2
20012b62:	84aa                	mv	s1,a0
20012b64:	842e                	mv	s0,a1
20012b66:	04358613          	addi	a2,a1,67
20012b6a:	1ef68063          	beq	a3,a5,20012d4a <_printf_i+0x206>
20012b6e:	06d7e263          	bltu	a5,a3,20012bd2 <_printf_i+0x8e>
20012b72:	06300793          	li	a5,99
20012b76:	0af68263          	beq	a3,a5,20012c1a <_printf_i+0xd6>
20012b7a:	00d7ed63          	bltu	a5,a3,20012b94 <_printf_i+0x50>
20012b7e:	1e068a63          	beqz	a3,20012d72 <_printf_i+0x22e>
20012b82:	05800793          	li	a5,88
20012b86:	16f68663          	beq	a3,a5,20012cf2 <_printf_i+0x1ae>
20012b8a:	04240a93          	addi	s5,s0,66
20012b8e:	04d40123          	sb	a3,66(s0)
20012b92:	a869                	j	20012c2c <_printf_i+0xe8>
20012b94:	06400793          	li	a5,100
20012b98:	00f68663          	beq	a3,a5,20012ba4 <_printf_i+0x60>
20012b9c:	06900793          	li	a5,105
20012ba0:	fef695e3          	bne	a3,a5,20012b8a <_printf_i+0x46>
20012ba4:	401c                	lw	a5,0(s0)
20012ba6:	4308                	lw	a0,0(a4)
20012ba8:	0807f693          	andi	a3,a5,128
20012bac:	00450593          	addi	a1,a0,4
20012bb0:	c2c1                	beqz	a3,20012c30 <_printf_i+0xec>
20012bb2:	411c                	lw	a5,0(a0)
20012bb4:	c30c                	sw	a1,0(a4)
20012bb6:	0007d863          	bgez	a5,20012bc6 <_printf_i+0x82>
20012bba:	02d00713          	li	a4,45
20012bbe:	40f007b3          	neg	a5,a5
20012bc2:	04e401a3          	sb	a4,67(s0)
20012bc6:	00005697          	auipc	a3,0x5
20012bca:	a6668693          	addi	a3,a3,-1434 # 2001762c <__sf_fake_stdout+0x34>
20012bce:	4729                	li	a4,10
20012bd0:	a065                	j	20012c78 <_printf_i+0x134>
20012bd2:	07300793          	li	a5,115
20012bd6:	1af68263          	beq	a3,a5,20012d7a <_printf_i+0x236>
20012bda:	00d7ef63          	bltu	a5,a3,20012bf8 <_printf_i+0xb4>
20012bde:	06f00793          	li	a5,111
20012be2:	04f68f63          	beq	a3,a5,20012c40 <_printf_i+0xfc>
20012be6:	07000793          	li	a5,112
20012bea:	faf690e3          	bne	a3,a5,20012b8a <_printf_i+0x46>
20012bee:	419c                	lw	a5,0(a1)
20012bf0:	0207e793          	ori	a5,a5,32
20012bf4:	c19c                	sw	a5,0(a1)
20012bf6:	a809                	j	20012c08 <_printf_i+0xc4>
20012bf8:	07500793          	li	a5,117
20012bfc:	04f68263          	beq	a3,a5,20012c40 <_printf_i+0xfc>
20012c00:	07800793          	li	a5,120
20012c04:	f8f693e3          	bne	a3,a5,20012b8a <_printf_i+0x46>
20012c08:	07800793          	li	a5,120
20012c0c:	04f402a3          	sb	a5,69(s0)
20012c10:	00005697          	auipc	a3,0x5
20012c14:	a3068693          	addi	a3,a3,-1488 # 20017640 <__sf_fake_stdout+0x48>
20012c18:	a0dd                	j	20012cfe <_printf_i+0x1ba>
20012c1a:	431c                	lw	a5,0(a4)
20012c1c:	04258a93          	addi	s5,a1,66
20012c20:	00478693          	addi	a3,a5,4
20012c24:	439c                	lw	a5,0(a5)
20012c26:	c314                	sw	a3,0(a4)
20012c28:	04f58123          	sb	a5,66(a1)
20012c2c:	4785                	li	a5,1
20012c2e:	a2ad                	j	20012d98 <_printf_i+0x254>
20012c30:	0407f693          	andi	a3,a5,64
20012c34:	411c                	lw	a5,0(a0)
20012c36:	c30c                	sw	a1,0(a4)
20012c38:	debd                	beqz	a3,20012bb6 <_printf_i+0x72>
20012c3a:	07c2                	slli	a5,a5,0x10
20012c3c:	87c1                	srai	a5,a5,0x10
20012c3e:	bfa5                	j	20012bb6 <_printf_i+0x72>
20012c40:	400c                	lw	a1,0(s0)
20012c42:	431c                	lw	a5,0(a4)
20012c44:	0805f813          	andi	a6,a1,128
20012c48:	00478513          	addi	a0,a5,4
20012c4c:	00080563          	beqz	a6,20012c56 <_printf_i+0x112>
20012c50:	c308                	sw	a0,0(a4)
20012c52:	439c                	lw	a5,0(a5)
20012c54:	a039                	j	20012c62 <_printf_i+0x11e>
20012c56:	0405f593          	andi	a1,a1,64
20012c5a:	c308                	sw	a0,0(a4)
20012c5c:	d9fd                	beqz	a1,20012c52 <_printf_i+0x10e>
20012c5e:	0007d783          	lhu	a5,0(a5)
20012c62:	06f00713          	li	a4,111
20012c66:	0ce68a63          	beq	a3,a4,20012d3a <_printf_i+0x1f6>
20012c6a:	00005697          	auipc	a3,0x5
20012c6e:	9c268693          	addi	a3,a3,-1598 # 2001762c <__sf_fake_stdout+0x34>
20012c72:	4729                	li	a4,10
20012c74:	040401a3          	sb	zero,67(s0)
20012c78:	404c                	lw	a1,4(s0)
20012c7a:	c40c                	sw	a1,8(s0)
20012c7c:	0005c563          	bltz	a1,20012c86 <_printf_i+0x142>
20012c80:	4008                	lw	a0,0(s0)
20012c82:	996d                	andi	a0,a0,-5
20012c84:	c008                	sw	a0,0(s0)
20012c86:	e399                	bnez	a5,20012c8c <_printf_i+0x148>
20012c88:	8ab2                	mv	s5,a2
20012c8a:	cd91                	beqz	a1,20012ca6 <_printf_i+0x162>
20012c8c:	8ab2                	mv	s5,a2
20012c8e:	02e7f5b3          	remu	a1,a5,a4
20012c92:	1afd                	addi	s5,s5,-1
20012c94:	95b6                	add	a1,a1,a3
20012c96:	0005c583          	lbu	a1,0(a1)
20012c9a:	00ba8023          	sb	a1,0(s5)
20012c9e:	02e7d5b3          	divu	a1,a5,a4
20012ca2:	0ae7f263          	bgeu	a5,a4,20012d46 <_printf_i+0x202>
20012ca6:	47a1                	li	a5,8
20012ca8:	00f71e63          	bne	a4,a5,20012cc4 <_printf_i+0x180>
20012cac:	401c                	lw	a5,0(s0)
20012cae:	8b85                	andi	a5,a5,1
20012cb0:	cb91                	beqz	a5,20012cc4 <_printf_i+0x180>
20012cb2:	4058                	lw	a4,4(s0)
20012cb4:	481c                	lw	a5,16(s0)
20012cb6:	00e7c763          	blt	a5,a4,20012cc4 <_printf_i+0x180>
20012cba:	03000793          	li	a5,48
20012cbe:	fefa8fa3          	sb	a5,-1(s5)
20012cc2:	1afd                	addi	s5,s5,-1
20012cc4:	41560633          	sub	a2,a2,s5
20012cc8:	c810                	sw	a2,16(s0)
20012cca:	874e                	mv	a4,s3
20012ccc:	86ca                	mv	a3,s2
20012cce:	0070                	addi	a2,sp,12
20012cd0:	85a2                	mv	a1,s0
20012cd2:	8526                	mv	a0,s1
20012cd4:	3395                	jal	20012a38 <_printf_common>
20012cd6:	5a7d                	li	s4,-1
20012cd8:	0d451463          	bne	a0,s4,20012da0 <_printf_i+0x25c>
20012cdc:	557d                	li	a0,-1
20012cde:	50b2                	lw	ra,44(sp)
20012ce0:	5422                	lw	s0,40(sp)
20012ce2:	5492                	lw	s1,36(sp)
20012ce4:	5902                	lw	s2,32(sp)
20012ce6:	49f2                	lw	s3,28(sp)
20012ce8:	4a62                	lw	s4,24(sp)
20012cea:	4ad2                	lw	s5,20(sp)
20012cec:	4b42                	lw	s6,16(sp)
20012cee:	6145                	addi	sp,sp,48
20012cf0:	8082                	ret
20012cf2:	04d582a3          	sb	a3,69(a1)
20012cf6:	00005697          	auipc	a3,0x5
20012cfa:	93668693          	addi	a3,a3,-1738 # 2001762c <__sf_fake_stdout+0x34>
20012cfe:	400c                	lw	a1,0(s0)
20012d00:	4308                	lw	a0,0(a4)
20012d02:	0805f813          	andi	a6,a1,128
20012d06:	411c                	lw	a5,0(a0)
20012d08:	0511                	addi	a0,a0,4
20012d0a:	02080063          	beqz	a6,20012d2a <_printf_i+0x1e6>
20012d0e:	c308                	sw	a0,0(a4)
20012d10:	0015f713          	andi	a4,a1,1
20012d14:	c701                	beqz	a4,20012d1c <_printf_i+0x1d8>
20012d16:	0205e593          	ori	a1,a1,32
20012d1a:	c00c                	sw	a1,0(s0)
20012d1c:	4741                	li	a4,16
20012d1e:	fbb9                	bnez	a5,20012c74 <_printf_i+0x130>
20012d20:	400c                	lw	a1,0(s0)
20012d22:	fdf5f593          	andi	a1,a1,-33
20012d26:	c00c                	sw	a1,0(s0)
20012d28:	b7b1                	j	20012c74 <_printf_i+0x130>
20012d2a:	0405f813          	andi	a6,a1,64
20012d2e:	c308                	sw	a0,0(a4)
20012d30:	fe0800e3          	beqz	a6,20012d10 <_printf_i+0x1cc>
20012d34:	07c2                	slli	a5,a5,0x10
20012d36:	83c1                	srli	a5,a5,0x10
20012d38:	bfe1                	j	20012d10 <_printf_i+0x1cc>
20012d3a:	00005697          	auipc	a3,0x5
20012d3e:	8f268693          	addi	a3,a3,-1806 # 2001762c <__sf_fake_stdout+0x34>
20012d42:	4721                	li	a4,8
20012d44:	bf05                	j	20012c74 <_printf_i+0x130>
20012d46:	87ae                	mv	a5,a1
20012d48:	b799                	j	20012c8e <_printf_i+0x14a>
20012d4a:	4194                	lw	a3,0(a1)
20012d4c:	431c                	lw	a5,0(a4)
20012d4e:	49cc                	lw	a1,20(a1)
20012d50:	0806f813          	andi	a6,a3,128
20012d54:	00478513          	addi	a0,a5,4
20012d58:	00080663          	beqz	a6,20012d64 <_printf_i+0x220>
20012d5c:	c308                	sw	a0,0(a4)
20012d5e:	439c                	lw	a5,0(a5)
20012d60:	c38c                	sw	a1,0(a5)
20012d62:	a801                	j	20012d72 <_printf_i+0x22e>
20012d64:	c308                	sw	a0,0(a4)
20012d66:	0406f693          	andi	a3,a3,64
20012d6a:	439c                	lw	a5,0(a5)
20012d6c:	daf5                	beqz	a3,20012d60 <_printf_i+0x21c>
20012d6e:	00b79023          	sh	a1,0(a5)
20012d72:	00042823          	sw	zero,16(s0)
20012d76:	8ab2                	mv	s5,a2
20012d78:	bf89                	j	20012cca <_printf_i+0x186>
20012d7a:	431c                	lw	a5,0(a4)
20012d7c:	41d0                	lw	a2,4(a1)
20012d7e:	4581                	li	a1,0
20012d80:	00478693          	addi	a3,a5,4
20012d84:	c314                	sw	a3,0(a4)
20012d86:	0007aa83          	lw	s5,0(a5)
20012d8a:	8556                	mv	a0,s5
20012d8c:	3179                	jal	20012a1a <memchr>
20012d8e:	c501                	beqz	a0,20012d96 <_printf_i+0x252>
20012d90:	41550533          	sub	a0,a0,s5
20012d94:	c048                	sw	a0,4(s0)
20012d96:	405c                	lw	a5,4(s0)
20012d98:	c81c                	sw	a5,16(s0)
20012d9a:	040401a3          	sb	zero,67(s0)
20012d9e:	b735                	j	20012cca <_printf_i+0x186>
20012da0:	4814                	lw	a3,16(s0)
20012da2:	8656                	mv	a2,s5
20012da4:	85ca                	mv	a1,s2
20012da6:	8526                	mv	a0,s1
20012da8:	9982                	jalr	s3
20012daa:	f34509e3          	beq	a0,s4,20012cdc <_printf_i+0x198>
20012dae:	401c                	lw	a5,0(s0)
20012db0:	8b89                	andi	a5,a5,2
20012db2:	e78d                	bnez	a5,20012ddc <_printf_i+0x298>
20012db4:	47b2                	lw	a5,12(sp)
20012db6:	4448                	lw	a0,12(s0)
20012db8:	f2f553e3          	bge	a0,a5,20012cde <_printf_i+0x19a>
20012dbc:	853e                	mv	a0,a5
20012dbe:	b705                	j	20012cde <_printf_i+0x19a>
20012dc0:	4685                	li	a3,1
20012dc2:	8656                	mv	a2,s5
20012dc4:	85ca                	mv	a1,s2
20012dc6:	8526                	mv	a0,s1
20012dc8:	9982                	jalr	s3
20012dca:	f16509e3          	beq	a0,s6,20012cdc <_printf_i+0x198>
20012dce:	0a05                	addi	s4,s4,1
20012dd0:	445c                	lw	a5,12(s0)
20012dd2:	4732                	lw	a4,12(sp)
20012dd4:	8f99                	sub	a5,a5,a4
20012dd6:	fefa45e3          	blt	s4,a5,20012dc0 <_printf_i+0x27c>
20012dda:	bfe9                	j	20012db4 <_printf_i+0x270>
20012ddc:	4a01                	li	s4,0
20012dde:	01940a93          	addi	s5,s0,25
20012de2:	5b7d                	li	s6,-1
20012de4:	b7f5                	j	20012dd0 <_printf_i+0x28c>

20012de6 <_read_r>:
_read_r():
20012de6:	1141                	addi	sp,sp,-16
20012de8:	c422                	sw	s0,8(sp)
20012dea:	842a                	mv	s0,a0
20012dec:	852e                	mv	a0,a1
20012dee:	85b2                	mv	a1,a2
20012df0:	8636                	mv	a2,a3
20012df2:	5fff0797          	auipc	a5,0x5fff0
20012df6:	5807a323          	sw	zero,1414(a5) # 80003378 <errno>
20012dfa:	c606                	sw	ra,12(sp)
20012dfc:	2845                	jal	20012eac <_read>
20012dfe:	57fd                	li	a5,-1
20012e00:	00f51963          	bne	a0,a5,20012e12 <_read_r+0x2c>
20012e04:	5fff0797          	auipc	a5,0x5fff0
20012e08:	57478793          	addi	a5,a5,1396 # 80003378 <errno>
20012e0c:	439c                	lw	a5,0(a5)
20012e0e:	c391                	beqz	a5,20012e12 <_read_r+0x2c>
20012e10:	c01c                	sw	a5,0(s0)
20012e12:	40b2                	lw	ra,12(sp)
20012e14:	4422                	lw	s0,8(sp)
20012e16:	0141                	addi	sp,sp,16
20012e18:	8082                	ret

20012e1a <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20012e1a:	1101                	addi	sp,sp,-32
20012e1c:	ce06                	sw	ra,28(sp)
20012e1e:	cc22                	sw	s0,24(sp)
20012e20:	1000                	addi	s0,sp,32
20012e22:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20012e26:	225d                	jal	20012fcc <__errno>
20012e28:	872a                	mv	a4,a0
20012e2a:	05800793          	li	a5,88
20012e2e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20012e30:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20012e32:	853e                	mv	a0,a5
20012e34:	40f2                	lw	ra,28(sp)
20012e36:	4462                	lw	s0,24(sp)
20012e38:	6105                	addi	sp,sp,32
20012e3a:	8082                	ret

20012e3c <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20012e3c:	1101                	addi	sp,sp,-32
20012e3e:	ce06                	sw	ra,28(sp)
20012e40:	cc22                	sw	s0,24(sp)
20012e42:	1000                	addi	s0,sp,32
20012e44:	fea42623          	sw	a0,-20(s0)
20012e48:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20012e4c:	2241                	jal	20012fcc <__errno>
20012e4e:	872a                	mv	a4,a0
20012e50:	fa800793          	li	a5,-88
20012e54:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20012e56:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20012e58:	853e                	mv	a0,a5
20012e5a:	40f2                	lw	ra,28(sp)
20012e5c:	4462                	lw	s0,24(sp)
20012e5e:	6105                	addi	sp,sp,32
20012e60:	8082                	ret

20012e62 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20012e62:	1101                	addi	sp,sp,-32
20012e64:	ce22                	sw	s0,28(sp)
20012e66:	1000                	addi	s0,sp,32
20012e68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20012e6c:	fec42783          	lw	a5,-20(s0)
20012e70:	17fd                	addi	a5,a5,-1
20012e72:	0017b793          	seqz	a5,a5
20012e76:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20012e7a:	853e                	mv	a0,a5
20012e7c:	4472                	lw	s0,28(sp)
20012e7e:	6105                	addi	sp,sp,32
20012e80:	8082                	ret

20012e82 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20012e82:	1101                	addi	sp,sp,-32
20012e84:	ce06                	sw	ra,28(sp)
20012e86:	cc22                	sw	s0,24(sp)
20012e88:	1000                	addi	s0,sp,32
20012e8a:	fea42623          	sw	a0,-20(s0)
20012e8e:	feb42423          	sw	a1,-24(s0)
20012e92:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20012e96:	2a1d                	jal	20012fcc <__errno>
20012e98:	872a                	mv	a4,a0
20012e9a:	05800793          	li	a5,88
20012e9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20012ea0:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20012ea2:	853e                	mv	a0,a5
20012ea4:	40f2                	lw	ra,28(sp)
20012ea6:	4462                	lw	s0,24(sp)
20012ea8:	6105                	addi	sp,sp,32
20012eaa:	8082                	ret

20012eac <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20012eac:	1101                	addi	sp,sp,-32
20012eae:	ce06                	sw	ra,28(sp)
20012eb0:	cc22                	sw	s0,24(sp)
20012eb2:	1000                	addi	s0,sp,32
20012eb4:	fea42623          	sw	a0,-20(s0)
20012eb8:	feb42423          	sw	a1,-24(s0)
20012ebc:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20012ec0:	2231                	jal	20012fcc <__errno>
20012ec2:	872a                	mv	a4,a0
20012ec4:	05800793          	li	a5,88
20012ec8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20012eca:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20012ecc:	853e                	mv	a0,a5
20012ece:	40f2                	lw	ra,28(sp)
20012ed0:	4462                	lw	s0,24(sp)
20012ed2:	6105                	addi	sp,sp,32
20012ed4:	8082                	ret

20012ed6 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20012ed6:	7179                	addi	sp,sp,-48
20012ed8:	d622                	sw	s0,44(sp)
20012eda:	1800                	addi	s0,sp,48
20012edc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20012ee0:	800017b7          	lui	a5,0x80001
20012ee4:	ae87a783          	lw	a5,-1304(a5) # 80000ae8 <metal_segment_heap_target_end+0xffffcb6c>
20012ee8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20012eec:	800037b7          	lui	a5,0x80003
20012ef0:	77c78713          	addi	a4,a5,1916 # 8000377c <metal_segment_heap_target_end+0xfffff800>
20012ef4:	800047b7          	lui	a5,0x80004
20012ef8:	f7c78793          	addi	a5,a5,-132 # 80003f7c <metal_segment_heap_target_end+0x0>
20012efc:	00f71463          	bne	a4,a5,20012f04 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20012f00:	57fd                	li	a5,-1
20012f02:	a0a9                	j	20012f4c <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20012f04:	800017b7          	lui	a5,0x80001
20012f08:	ae87a703          	lw	a4,-1304(a5) # 80000ae8 <metal_segment_heap_target_end+0xffffcb6c>
20012f0c:	fdc42783          	lw	a5,-36(s0)
20012f10:	973e                	add	a4,a4,a5
20012f12:	800047b7          	lui	a5,0x80004
20012f16:	f7c78793          	addi	a5,a5,-132 # 80003f7c <metal_segment_heap_target_end+0x0>
20012f1a:	02f77063          	bgeu	a4,a5,20012f3a <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20012f1e:	800017b7          	lui	a5,0x80001
20012f22:	ae87a703          	lw	a4,-1304(a5) # 80000ae8 <metal_segment_heap_target_end+0xffffcb6c>
20012f26:	fdc42783          	lw	a5,-36(s0)
20012f2a:	973e                	add	a4,a4,a5
20012f2c:	800017b7          	lui	a5,0x80001
20012f30:	aee7a423          	sw	a4,-1304(a5) # 80000ae8 <metal_segment_heap_target_end+0xffffcb6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20012f34:	fec42783          	lw	a5,-20(s0)
20012f38:	a811                	j	20012f4c <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20012f3a:	800017b7          	lui	a5,0x80001
20012f3e:	80004737          	lui	a4,0x80004
20012f42:	f7c70713          	addi	a4,a4,-132 # 80003f7c <metal_segment_heap_target_end+0x0>
20012f46:	aee7a423          	sw	a4,-1304(a5) # 80000ae8 <metal_segment_heap_target_end+0xffffcb6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20012f4a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20012f4c:	853e                	mv	a0,a5
20012f4e:	5432                	lw	s0,44(sp)
20012f50:	6145                	addi	sp,sp,48
20012f52:	8082                	ret

20012f54 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20012f54:	7179                	addi	sp,sp,-48
20012f56:	d606                	sw	ra,44(sp)
20012f58:	d422                	sw	s0,40(sp)
20012f5a:	1800                	addi	s0,sp,48
20012f5c:	fca42e23          	sw	a0,-36(s0)
20012f60:	fcb42c23          	sw	a1,-40(s0)
20012f64:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20012f68:	fdc42703          	lw	a4,-36(s0)
20012f6c:	4785                	li	a5,1
20012f6e:	00f70963          	beq	a4,a5,20012f80 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20012f72:	28a9                	jal	20012fcc <__errno>
20012f74:	872a                	mv	a4,a0
20012f76:	05800793          	li	a5,88
20012f7a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20012f7c:	57fd                	li	a5,-1
20012f7e:	a82d                	j	20012fb8 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20012f80:	fd842783          	lw	a5,-40(s0)
20012f84:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20012f88:	fe042623          	sw	zero,-20(s0)
20012f8c:	a839                	j	20012faa <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20012f8e:	fe842703          	lw	a4,-24(s0)
20012f92:	fec42783          	lw	a5,-20(s0)
20012f96:	97ba                	add	a5,a5,a4
20012f98:	0007c783          	lbu	a5,0(a5)
20012f9c:	853e                	mv	a0,a5
20012f9e:	2cb1                	jal	200131fa <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20012fa0:	fec42783          	lw	a5,-20(s0)
20012fa4:	0785                	addi	a5,a5,1
20012fa6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20012faa:	fec42703          	lw	a4,-20(s0)
20012fae:	fd442783          	lw	a5,-44(s0)
20012fb2:	fcf76ee3          	bltu	a4,a5,20012f8e <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20012fb6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20012fb8:	853e                	mv	a0,a5
20012fba:	50b2                	lw	ra,44(sp)
20012fbc:	5422                	lw	s0,40(sp)
20012fbe:	6145                	addi	sp,sp,48
20012fc0:	8082                	ret

20012fc2 <atexit>:
atexit():
20012fc2:	85aa                	mv	a1,a0
20012fc4:	4681                	li	a3,0
20012fc6:	4601                	li	a2,0
20012fc8:	4501                	li	a0,0
20012fca:	a8f1                	j	200130a6 <__register_exitproc>

20012fcc <__errno>:
__errno():
20012fcc:	5ffee797          	auipc	a5,0x5ffee
20012fd0:	b1478793          	addi	a5,a5,-1260 # 80000ae0 <_impure_ptr>
20012fd4:	4388                	lw	a0,0(a5)
20012fd6:	8082                	ret

20012fd8 <exit>:
exit():
20012fd8:	1141                	addi	sp,sp,-16
20012fda:	c422                	sw	s0,8(sp)
20012fdc:	c606                	sw	ra,12(sp)
20012fde:	00000797          	auipc	a5,0x0
20012fe2:	15478793          	addi	a5,a5,340 # 20013132 <__call_exitprocs>
20012fe6:	842a                	mv	s0,a0
20012fe8:	c399                	beqz	a5,20012fee <exit+0x16>
20012fea:	4581                	li	a1,0
20012fec:	2299                	jal	20013132 <__call_exitprocs>
20012fee:	5ffee797          	auipc	a5,0x5ffee
20012ff2:	af678793          	addi	a5,a5,-1290 # 80000ae4 <_global_impure_ptr>
20012ff6:	4388                	lw	a0,0(a5)
20012ff8:	551c                	lw	a5,40(a0)
20012ffa:	c391                	beqz	a5,20012ffe <exit+0x26>
20012ffc:	9782                	jalr	a5
20012ffe:	8522                	mv	a0,s0
20013000:	4b4040ef          	jal	ra,200174b4 <_exit>

20013004 <__libc_fini_array>:
__libc_fini_array():
20013004:	1141                	addi	sp,sp,-16
20013006:	00005797          	auipc	a5,0x5
2001300a:	23678793          	addi	a5,a5,566 # 2001823c <__fini_array_end>
2001300e:	c422                	sw	s0,8(sp)
20013010:	00005417          	auipc	s0,0x5
20013014:	22c40413          	addi	s0,s0,556 # 2001823c <__fini_array_end>
20013018:	8c1d                	sub	s0,s0,a5
2001301a:	c226                	sw	s1,4(sp)
2001301c:	c606                	sw	ra,12(sp)
2001301e:	8409                	srai	s0,s0,0x2
20013020:	84be                	mv	s1,a5
20013022:	e411                	bnez	s0,2001302e <__libc_fini_array+0x2a>
20013024:	40b2                	lw	ra,12(sp)
20013026:	4422                	lw	s0,8(sp)
20013028:	4492                	lw	s1,4(sp)
2001302a:	0141                	addi	sp,sp,16
2001302c:	8082                	ret
2001302e:	147d                	addi	s0,s0,-1
20013030:	00241793          	slli	a5,s0,0x2
20013034:	97a6                	add	a5,a5,s1
20013036:	439c                	lw	a5,0(a5)
20013038:	9782                	jalr	a5
2001303a:	b7e5                	j	20013022 <__libc_fini_array+0x1e>

2001303c <__libc_init_array>:
__libc_init_array():
2001303c:	1141                	addi	sp,sp,-16
2001303e:	00005797          	auipc	a5,0x5
20013042:	1f278793          	addi	a5,a5,498 # 20018230 <__init_array_start>
20013046:	c422                	sw	s0,8(sp)
20013048:	00005417          	auipc	s0,0x5
2001304c:	1e840413          	addi	s0,s0,488 # 20018230 <__init_array_start>
20013050:	8c1d                	sub	s0,s0,a5
20013052:	c226                	sw	s1,4(sp)
20013054:	c04a                	sw	s2,0(sp)
20013056:	c606                	sw	ra,12(sp)
20013058:	8409                	srai	s0,s0,0x2
2001305a:	4481                	li	s1,0
2001305c:	893e                	mv	s2,a5
2001305e:	02849663          	bne	s1,s0,2001308a <__libc_init_array+0x4e>
20013062:	00005797          	auipc	a5,0x5
20013066:	1ce78793          	addi	a5,a5,462 # 20018230 <__init_array_start>
2001306a:	00005417          	auipc	s0,0x5
2001306e:	1d240413          	addi	s0,s0,466 # 2001823c <__fini_array_end>
20013072:	8c1d                	sub	s0,s0,a5
20013074:	8409                	srai	s0,s0,0x2
20013076:	4481                	li	s1,0
20013078:	893e                	mv	s2,a5
2001307a:	00849f63          	bne	s1,s0,20013098 <__libc_init_array+0x5c>
2001307e:	40b2                	lw	ra,12(sp)
20013080:	4422                	lw	s0,8(sp)
20013082:	4492                	lw	s1,4(sp)
20013084:	4902                	lw	s2,0(sp)
20013086:	0141                	addi	sp,sp,16
20013088:	8082                	ret
2001308a:	00249793          	slli	a5,s1,0x2
2001308e:	97ca                	add	a5,a5,s2
20013090:	439c                	lw	a5,0(a5)
20013092:	0485                	addi	s1,s1,1
20013094:	9782                	jalr	a5
20013096:	b7e1                	j	2001305e <__libc_init_array+0x22>
20013098:	00249793          	slli	a5,s1,0x2
2001309c:	97ca                	add	a5,a5,s2
2001309e:	439c                	lw	a5,0(a5)
200130a0:	0485                	addi	s1,s1,1
200130a2:	9782                	jalr	a5
200130a4:	bfd9                	j	2001307a <__libc_init_array+0x3e>

200130a6 <__register_exitproc>:
__register_exitproc():
200130a6:	5ffee797          	auipc	a5,0x5ffee
200130aa:	a8a78793          	addi	a5,a5,-1398 # 80000b30 <_global_atexit>
200130ae:	439c                	lw	a5,0(a5)
200130b0:	8e2a                	mv	t3,a0
200130b2:	e78d                	bnez	a5,200130dc <__register_exitproc+0x36>
200130b4:	5fff0717          	auipc	a4,0x5fff0
200130b8:	23870713          	addi	a4,a4,568 # 800032ec <_global_atexit0>
200130bc:	5ffee797          	auipc	a5,0x5ffee
200130c0:	a6e7aa23          	sw	a4,-1420(a5) # 80000b30 <_global_atexit>
200130c4:	dffed517          	auipc	a0,0xdffed
200130c8:	f3c50513          	addi	a0,a0,-196 # 0 <__metal_boot_hart>
200130cc:	87ba                	mv	a5,a4
200130ce:	c519                	beqz	a0,200130dc <__register_exitproc+0x36>
200130d0:	411c                	lw	a5,0(a0)
200130d2:	5fff0517          	auipc	a0,0x5fff0
200130d6:	2af52123          	sw	a5,674(a0) # 80003374 <_global_atexit0+0x88>
200130da:	87ba                	mv	a5,a4
200130dc:	43d8                	lw	a4,4(a5)
200130de:	487d                	li	a6,31
200130e0:	557d                	li	a0,-1
200130e2:	04e84763          	blt	a6,a4,20013130 <__register_exitproc+0x8a>
200130e6:	020e0e63          	beqz	t3,20013122 <__register_exitproc+0x7c>
200130ea:	0887a803          	lw	a6,136(a5)
200130ee:	04080163          	beqz	a6,20013130 <__register_exitproc+0x8a>
200130f2:	00271893          	slli	a7,a4,0x2
200130f6:	98c2                	add	a7,a7,a6
200130f8:	00c8a023          	sw	a2,0(a7)
200130fc:	10082303          	lw	t1,256(a6)
20013100:	4605                	li	a2,1
20013102:	00e61633          	sll	a2,a2,a4
20013106:	00c36333          	or	t1,t1,a2
2001310a:	10682023          	sw	t1,256(a6)
2001310e:	08d8a023          	sw	a3,128(a7)
20013112:	4689                	li	a3,2
20013114:	00de1763          	bne	t3,a3,20013122 <__register_exitproc+0x7c>
20013118:	10482683          	lw	a3,260(a6)
2001311c:	8e55                	or	a2,a2,a3
2001311e:	10c82223          	sw	a2,260(a6)
20013122:	00170693          	addi	a3,a4,1
20013126:	070a                	slli	a4,a4,0x2
20013128:	c3d4                	sw	a3,4(a5)
2001312a:	97ba                	add	a5,a5,a4
2001312c:	c78c                	sw	a1,8(a5)
2001312e:	4501                	li	a0,0
20013130:	8082                	ret

20013132 <__call_exitprocs>:
__call_exitprocs():
20013132:	7179                	addi	sp,sp,-48
20013134:	cc52                	sw	s4,24(sp)
20013136:	ca56                	sw	s5,20(sp)
20013138:	c85a                	sw	s6,16(sp)
2001313a:	c65e                	sw	s7,12(sp)
2001313c:	d606                	sw	ra,44(sp)
2001313e:	d422                	sw	s0,40(sp)
20013140:	d226                	sw	s1,36(sp)
20013142:	d04a                	sw	s2,32(sp)
20013144:	ce4e                	sw	s3,28(sp)
20013146:	c462                	sw	s8,8(sp)
20013148:	8b2a                	mv	s6,a0
2001314a:	8a2e                	mv	s4,a1
2001314c:	5ffeea97          	auipc	s5,0x5ffee
20013150:	9e4a8a93          	addi	s5,s5,-1564 # 80000b30 <_global_atexit>
20013154:	4b85                	li	s7,1
20013156:	000aa403          	lw	s0,0(s5)
2001315a:	c811                	beqz	s0,2001316e <__call_exitprocs+0x3c>
2001315c:	4044                	lw	s1,4(s0)
2001315e:	08842983          	lw	s3,136(s0)
20013162:	fff48913          	addi	s2,s1,-1
20013166:	048a                	slli	s1,s1,0x2
20013168:	94a2                	add	s1,s1,s0
2001316a:	00095e63          	bgez	s2,20013186 <__call_exitprocs+0x54>
2001316e:	50b2                	lw	ra,44(sp)
20013170:	5422                	lw	s0,40(sp)
20013172:	5492                	lw	s1,36(sp)
20013174:	5902                	lw	s2,32(sp)
20013176:	49f2                	lw	s3,28(sp)
20013178:	4a62                	lw	s4,24(sp)
2001317a:	4ad2                	lw	s5,20(sp)
2001317c:	4b42                	lw	s6,16(sp)
2001317e:	4bb2                	lw	s7,12(sp)
20013180:	4c22                	lw	s8,8(sp)
20013182:	6145                	addi	sp,sp,48
20013184:	8082                	ret
20013186:	000a0e63          	beqz	s4,200131a2 <__call_exitprocs+0x70>
2001318a:	00099563          	bnez	s3,20013194 <__call_exitprocs+0x62>
2001318e:	197d                	addi	s2,s2,-1
20013190:	14f1                	addi	s1,s1,-4
20013192:	bfe1                	j	2001316a <__call_exitprocs+0x38>
20013194:	00291793          	slli	a5,s2,0x2
20013198:	97ce                	add	a5,a5,s3
2001319a:	0807a783          	lw	a5,128(a5)
2001319e:	ff4798e3          	bne	a5,s4,2001318e <__call_exitprocs+0x5c>
200131a2:	4058                	lw	a4,4(s0)
200131a4:	40dc                	lw	a5,4(s1)
200131a6:	177d                	addi	a4,a4,-1
200131a8:	03271863          	bne	a4,s2,200131d8 <__call_exitprocs+0xa6>
200131ac:	01242223          	sw	s2,4(s0)
200131b0:	dff9                	beqz	a5,2001318e <__call_exitprocs+0x5c>
200131b2:	00442c03          	lw	s8,4(s0)
200131b6:	00098863          	beqz	s3,200131c6 <__call_exitprocs+0x94>
200131ba:	1009a683          	lw	a3,256(s3)
200131be:	012b9733          	sll	a4,s7,s2
200131c2:	8ef9                	and	a3,a3,a4
200131c4:	ee89                	bnez	a3,200131de <__call_exitprocs+0xac>
200131c6:	9782                	jalr	a5
200131c8:	4058                	lw	a4,4(s0)
200131ca:	000aa783          	lw	a5,0(s5)
200131ce:	f98714e3          	bne	a4,s8,20013156 <__call_exitprocs+0x24>
200131d2:	faf40ee3          	beq	s0,a5,2001318e <__call_exitprocs+0x5c>
200131d6:	b741                	j	20013156 <__call_exitprocs+0x24>
200131d8:	0004a223          	sw	zero,4(s1)
200131dc:	bfd1                	j	200131b0 <__call_exitprocs+0x7e>
200131de:	00291693          	slli	a3,s2,0x2
200131e2:	96ce                	add	a3,a3,s3
200131e4:	428c                	lw	a1,0(a3)
200131e6:	1049a683          	lw	a3,260(s3)
200131ea:	8f75                	and	a4,a4,a3
200131ec:	e701                	bnez	a4,200131f4 <__call_exitprocs+0xc2>
200131ee:	855a                	mv	a0,s6
200131f0:	9782                	jalr	a5
200131f2:	bfd9                	j	200131c8 <__call_exitprocs+0x96>
200131f4:	852e                	mv	a0,a1
200131f6:	9782                	jalr	a5
200131f8:	bfc1                	j	200131c8 <__call_exitprocs+0x96>

200131fa <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
200131fa:	1101                	addi	sp,sp,-32
200131fc:	ce06                	sw	ra,28(sp)
200131fe:	cc22                	sw	s0,24(sp)
20013200:	1000                	addi	s0,sp,32
20013202:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20013206:	fec42703          	lw	a4,-20(s0)
2001320a:	47a9                	li	a5,10
2001320c:	00f71463          	bne	a4,a5,20013214 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20013210:	4535                	li	a0,13
20013212:	2811                	jal	20013226 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20013214:	fec42503          	lw	a0,-20(s0)
20013218:	2039                	jal	20013226 <metal_tty_putc_raw>
2001321a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
2001321c:	853e                	mv	a0,a5
2001321e:	40f2                	lw	ra,28(sp)
20013220:	4462                	lw	s0,24(sp)
20013222:	6105                	addi	sp,sp,32
20013224:	8082                	ret

20013226 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20013226:	1101                	addi	sp,sp,-32
20013228:	ce06                	sw	ra,28(sp)
2001322a:	cc22                	sw	s0,24(sp)
2001322c:	1000                	addi	s0,sp,32
2001322e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20013232:	fec42583          	lw	a1,-20(s0)
20013236:	800017b7          	lui	a5,0x80001
2001323a:	a7878513          	addi	a0,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
2001323e:	28b1                	jal	2001329a <metal_uart_putc>
20013240:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20013242:	853e                	mv	a0,a5
20013244:	40f2                	lw	ra,28(sp)
20013246:	4462                	lw	s0,24(sp)
20013248:	6105                	addi	sp,sp,32
2001324a:	8082                	ret

2001324c <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
2001324c:	1141                	addi	sp,sp,-16
2001324e:	c606                	sw	ra,12(sp)
20013250:	c422                	sw	s0,8(sp)
20013252:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20013254:	67f1                	lui	a5,0x1c
20013256:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
2001325a:	800017b7          	lui	a5,0x80001
2001325e:	a7878513          	addi	a0,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20013262:	2031                	jal	2001326e <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20013264:	0001                	nop
20013266:	40b2                	lw	ra,12(sp)
20013268:	4422                	lw	s0,8(sp)
2001326a:	0141                	addi	sp,sp,16
2001326c:	8082                	ret

2001326e <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
2001326e:	1101                	addi	sp,sp,-32
20013270:	ce06                	sw	ra,28(sp)
20013272:	cc22                	sw	s0,24(sp)
20013274:	1000                	addi	s0,sp,32
20013276:	fea42623          	sw	a0,-20(s0)
2001327a:	feb42423          	sw	a1,-24(s0)
2001327e:	fec42783          	lw	a5,-20(s0)
20013282:	439c                	lw	a5,0(a5)
20013284:	439c                	lw	a5,0(a5)
20013286:	fe842583          	lw	a1,-24(s0)
2001328a:	fec42503          	lw	a0,-20(s0)
2001328e:	9782                	jalr	a5
20013290:	0001                	nop
20013292:	40f2                	lw	ra,28(sp)
20013294:	4462                	lw	s0,24(sp)
20013296:	6105                	addi	sp,sp,32
20013298:	8082                	ret

2001329a <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
2001329a:	1101                	addi	sp,sp,-32
2001329c:	ce06                	sw	ra,28(sp)
2001329e:	cc22                	sw	s0,24(sp)
200132a0:	1000                	addi	s0,sp,32
200132a2:	fea42623          	sw	a0,-20(s0)
200132a6:	feb42423          	sw	a1,-24(s0)
200132aa:	fec42783          	lw	a5,-20(s0)
200132ae:	439c                	lw	a5,0(a5)
200132b0:	43dc                	lw	a5,4(a5)
200132b2:	fe842583          	lw	a1,-24(s0)
200132b6:	fec42503          	lw	a0,-20(s0)
200132ba:	9782                	jalr	a5
200132bc:	87aa                	mv	a5,a0
200132be:	853e                	mv	a0,a5
200132c0:	40f2                	lw	ra,28(sp)
200132c2:	4462                	lw	s0,24(sp)
200132c4:	6105                	addi	sp,sp,32
200132c6:	8082                	ret

200132c8 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
200132c8:	1101                	addi	sp,sp,-32
200132ca:	ce06                	sw	ra,28(sp)
200132cc:	cc22                	sw	s0,24(sp)
200132ce:	1000                	addi	s0,sp,32
200132d0:	fea42623          	sw	a0,-20(s0)
200132d4:	feb42423          	sw	a1,-24(s0)
200132d8:	fec42783          	lw	a5,-20(s0)
200132dc:	439c                	lw	a5,0(a5)
200132de:	4bdc                	lw	a5,20(a5)
200132e0:	fe842583          	lw	a1,-24(s0)
200132e4:	fec42503          	lw	a0,-20(s0)
200132e8:	9782                	jalr	a5
200132ea:	87aa                	mv	a5,a0
200132ec:	853e                	mv	a0,a5
200132ee:	40f2                	lw	ra,28(sp)
200132f0:	4462                	lw	s0,24(sp)
200132f2:	6105                	addi	sp,sp,32
200132f4:	8082                	ret

200132f6 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:203
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
200132f6:	1101                	addi	sp,sp,-32
200132f8:	ce22                	sw	s0,28(sp)
200132fa:	1000                	addi	s0,sp,32
200132fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:204
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20013300:	fec42703          	lw	a4,-20(s0)
20013304:	81018793          	addi	a5,gp,-2032 # 80000af0 <__metal_dt_clint_2000000>
20013308:	00f71563          	bne	a4,a5,20013312 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:205
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
2001330c:	020007b7          	lui	a5,0x2000
20013310:	a011                	j	20013314 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:208
	}
	else {
		return 0;
20013312:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:210
	}
}
20013314:	853e                	mv	a0,a5
20013316:	4472                	lw	s0,28(sp)
20013318:	6105                	addi	sp,sp,32
2001331a:	8082                	ret

2001331c <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:223
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
2001331c:	1101                	addi	sp,sp,-32
2001331e:	ce22                	sw	s0,28(sp)
20013320:	1000                	addi	s0,sp,32
20013322:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:224
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20013326:	fec42703          	lw	a4,-20(s0)
2001332a:	81018793          	addi	a5,gp,-2032 # 80000af0 <__metal_dt_clint_2000000>
2001332e:	00f71463          	bne	a4,a5,20013336 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:225
		return METAL_MAX_CLINT_INTERRUPTS;
20013332:	4789                	li	a5,2
20013334:	a011                	j	20013338 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:228
	}
	else {
		return 0;
20013336:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:230
	}
}
20013338:	853e                	mv	a0,a5
2001333a:	4472                	lw	s0,28(sp)
2001333c:	6105                	addi	sp,sp,32
2001333e:	8082                	ret

20013340 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:233

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20013340:	1101                	addi	sp,sp,-32
20013342:	ce22                	sw	s0,28(sp)
20013344:	1000                	addi	s0,sp,32
20013346:	fea42623          	sw	a0,-20(s0)
2001334a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:234
	if (idx == 0) {
2001334e:	fe842783          	lw	a5,-24(s0)
20013352:	e791                	bnez	a5,2001335e <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:235
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20013354:	800007b7          	lui	a5,0x80000
20013358:	0e878793          	addi	a5,a5,232 # 800000e8 <metal_segment_heap_target_end+0xffffc16c>
2001335c:	a821                	j	20013374 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:237
	}
	else if (idx == 1) {
2001335e:	fe842703          	lw	a4,-24(s0)
20013362:	4785                	li	a5,1
20013364:	00f71763          	bne	a4,a5,20013372 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:238
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20013368:	800007b7          	lui	a5,0x80000
2001336c:	0e878793          	addi	a5,a5,232 # 800000e8 <metal_segment_heap_target_end+0xffffc16c>
20013370:	a011                	j	20013374 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:241
	}
	else {
		return NULL;
20013372:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:243
	}
}
20013374:	853e                	mv	a0,a5
20013376:	4472                	lw	s0,28(sp)
20013378:	6105                	addi	sp,sp,32
2001337a:	8082                	ret

2001337c <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:246

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2001337c:	1101                	addi	sp,sp,-32
2001337e:	ce22                	sw	s0,28(sp)
20013380:	1000                	addi	s0,sp,32
20013382:	fea42623          	sw	a0,-20(s0)
20013386:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:247
	if (idx == 0) {
2001338a:	fe842783          	lw	a5,-24(s0)
2001338e:	e399                	bnez	a5,20013394 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:248
		return 3;
20013390:	478d                	li	a5,3
20013392:	a809                	j	200133a4 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:250
	}
	else if (idx == 1) {
20013394:	fe842703          	lw	a4,-24(s0)
20013398:	4785                	li	a5,1
2001339a:	00f71463          	bne	a4,a5,200133a2 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:251
		return 7;
2001339e:	479d                	li	a5,7
200133a0:	a011                	j	200133a4 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:254
	}
	else {
		return 0;
200133a2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:256
	}
}
200133a4:	853e                	mv	a0,a5
200133a6:	4472                	lw	s0,28(sp)
200133a8:	6105                	addi	sp,sp,32
200133aa:	8082                	ret

200133ac <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
200133ac:	715d                	addi	sp,sp,-80
200133ae:	c686                	sw	ra,76(sp)
200133b0:	c4a2                	sw	s0,72(sp)
200133b2:	c2ca                	sw	s2,68(sp)
200133b4:	c0ce                	sw	s3,64(sp)
200133b6:	de52                	sw	s4,60(sp)
200133b8:	dc56                	sw	s5,56(sp)
200133ba:	da5a                	sw	s6,52(sp)
200133bc:	d85e                	sw	s7,48(sp)
200133be:	d662                	sw	s8,44(sp)
200133c0:	d466                	sw	s9,40(sp)
200133c2:	0880                	addi	s0,sp,80
200133c4:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
200133c8:	fbc42783          	lw	a5,-68(s0)
200133cc:	853e                	mv	a0,a5
200133ce:	3725                	jal	200132f6 <__metal_driver_sifive_clint0_control_base>
200133d0:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
200133d4:	fcc42703          	lw	a4,-52(s0)
200133d8:	67b1                	lui	a5,0xc
200133da:	17f1                	addi	a5,a5,-4
200133dc:	97ba                	add	a5,a5,a4
200133de:	439c                	lw	a5,0(a5)
200133e0:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
200133e4:	fcc42703          	lw	a4,-52(s0)
200133e8:	67b1                	lui	a5,0xc
200133ea:	17e1                	addi	a5,a5,-8
200133ec:	97ba                	add	a5,a5,a4
200133ee:	439c                	lw	a5,0(a5)
200133f0:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
200133f4:	fcc42703          	lw	a4,-52(s0)
200133f8:	67b1                	lui	a5,0xc
200133fa:	17f1                	addi	a5,a5,-4
200133fc:	97ba                	add	a5,a5,a4
200133fe:	439c                	lw	a5,0(a5)
20013400:	fc842703          	lw	a4,-56(s0)
20013404:	fcf718e3          	bne	a4,a5,200133d4 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20013408:	fc842783          	lw	a5,-56(s0)
2001340c:	8c3e                	mv	s8,a5
2001340e:	4c81                	li	s9,0
20013410:	000c1993          	slli	s3,s8,0x0
20013414:	4901                	li	s2,0
20013416:	fc442783          	lw	a5,-60(s0)
2001341a:	8a3e                	mv	s4,a5
2001341c:	4a81                	li	s5,0
2001341e:	01496b33          	or	s6,s2,s4
20013422:	0159ebb3          	or	s7,s3,s5
20013426:	87da                	mv	a5,s6
20013428:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
2001342a:	853e                	mv	a0,a5
2001342c:	85c2                	mv	a1,a6
2001342e:	40b6                	lw	ra,76(sp)
20013430:	4426                	lw	s0,72(sp)
20013432:	4916                	lw	s2,68(sp)
20013434:	4986                	lw	s3,64(sp)
20013436:	5a72                	lw	s4,60(sp)
20013438:	5ae2                	lw	s5,56(sp)
2001343a:	5b52                	lw	s6,52(sp)
2001343c:	5bc2                	lw	s7,48(sp)
2001343e:	5c32                	lw	s8,44(sp)
20013440:	5ca2                	lw	s9,40(sp)
20013442:	6161                	addi	sp,sp,80
20013444:	8082                	ret

20013446 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20013446:	7179                	addi	sp,sp,-48
20013448:	d606                	sw	ra,44(sp)
2001344a:	d422                	sw	s0,40(sp)
2001344c:	d24a                	sw	s2,36(sp)
2001344e:	d04e                	sw	s3,32(sp)
20013450:	1800                	addi	s0,sp,48
20013452:	fca42e23          	sw	a0,-36(s0)
20013456:	fcb42c23          	sw	a1,-40(s0)
2001345a:	fcc42823          	sw	a2,-48(s0)
2001345e:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20013462:	fdc42783          	lw	a5,-36(s0)
20013466:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
2001346a:	fec42783          	lw	a5,-20(s0)
2001346e:	853e                	mv	a0,a5
20013470:	3559                	jal	200132f6 <__metal_driver_sifive_clint0_control_base>
20013472:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20013476:	fd842783          	lw	a5,-40(s0)
2001347a:	078e                	slli	a5,a5,0x3
2001347c:	873e                	mv	a4,a5
2001347e:	fe842783          	lw	a5,-24(s0)
20013482:	973e                	add	a4,a4,a5
20013484:	6791                	lui	a5,0x4
20013486:	0791                	addi	a5,a5,4
20013488:	97ba                	add	a5,a5,a4
2001348a:	873e                	mv	a4,a5
2001348c:	57fd                	li	a5,-1
2001348e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20013490:	fd842783          	lw	a5,-40(s0)
20013494:	078e                	slli	a5,a5,0x3
20013496:	873e                	mv	a4,a5
20013498:	fe842783          	lw	a5,-24(s0)
2001349c:	973e                	add	a4,a4,a5
2001349e:	6791                	lui	a5,0x4
200134a0:	97ba                	add	a5,a5,a4
200134a2:	873e                	mv	a4,a5
200134a4:	fd042783          	lw	a5,-48(s0)
200134a8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
200134aa:	fd442783          	lw	a5,-44(s0)
200134ae:	0007d913          	srli	s2,a5,0x0
200134b2:	4981                	li	s3,0
200134b4:	fd842783          	lw	a5,-40(s0)
200134b8:	078e                	slli	a5,a5,0x3
200134ba:	873e                	mv	a4,a5
200134bc:	fe842783          	lw	a5,-24(s0)
200134c0:	973e                	add	a4,a4,a5
200134c2:	6791                	lui	a5,0x4
200134c4:	0791                	addi	a5,a5,4
200134c6:	97ba                	add	a5,a5,a4
200134c8:	874a                	mv	a4,s2
200134ca:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
200134cc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
200134ce:	853e                	mv	a0,a5
200134d0:	50b2                	lw	ra,44(sp)
200134d2:	5422                	lw	s0,40(sp)
200134d4:	5912                	lw	s2,36(sp)
200134d6:	5982                	lw	s3,32(sp)
200134d8:	6145                	addi	sp,sp,48
200134da:	8082                	ret

200134dc <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
200134dc:	1101                	addi	sp,sp,-32
200134de:	ce06                	sw	ra,28(sp)
200134e0:	cc22                	sw	s0,24(sp)
200134e2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
200134e4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
200134e8:	f14027f3          	csrr	a5,mhartid
200134ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
200134f0:	fec42783          	lw	a5,-20(s0)
200134f4:	853e                	mv	a0,a5
200134f6:	621030ef          	jal	ra,20017316 <metal_cpu_get>
200134fa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
200134fe:	fe842503          	lw	a0,-24(s0)
20013502:	5ef030ef          	jal	ra,200172f0 <metal_cpu_interrupt_controller>
20013506:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20013508:	853e                	mv	a0,a5
2001350a:	40f2                	lw	ra,28(sp)
2001350c:	4462                	lw	s0,24(sp)
2001350e:	6105                	addi	sp,sp,32
20013510:	8082                	ret

20013512 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20013512:	7139                	addi	sp,sp,-64
20013514:	de06                	sw	ra,60(sp)
20013516:	dc22                	sw	s0,56(sp)
20013518:	0080                	addi	s0,sp,64
2001351a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2001351e:	fcc42503          	lw	a0,-52(s0)
20013522:	3bed                	jal	2001331c <__metal_driver_sifive_clint0_num_interrupts>
20013524:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20013528:	fcc42783          	lw	a5,-52(s0)
2001352c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20013530:	fe442783          	lw	a5,-28(s0)
20013534:	43dc                	lw	a5,4(a5)
20013536:	efa9                	bnez	a5,20013590 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20013538:	fe042623          	sw	zero,-20(s0)
2001353c:	a081                	j	2001357c <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2001353e:	fec42583          	lw	a1,-20(s0)
20013542:	fcc42503          	lw	a0,-52(s0)
20013546:	3bed                	jal	20013340 <__metal_driver_sifive_clint0_interrupt_parents>
20013548:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2001354c:	fec42583          	lw	a1,-20(s0)
20013550:	fcc42503          	lw	a0,-52(s0)
20013554:	3525                	jal	2001337c <__metal_driver_sifive_clint0_interrupt_lines>
20013556:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
2001355a:	fe042783          	lw	a5,-32(s0)
2001355e:	439c                	lw	a5,0(a5)
20013560:	4fdc                	lw	a5,28(a5)
20013562:	fcc42683          	lw	a3,-52(s0)
20013566:	4601                	li	a2,0
20013568:	fdc42583          	lw	a1,-36(s0)
2001356c:	fe042503          	lw	a0,-32(s0)
20013570:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20013572:	fec42783          	lw	a5,-20(s0)
20013576:	0785                	addi	a5,a5,1
20013578:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
2001357c:	fec42703          	lw	a4,-20(s0)
20013580:	fe842783          	lw	a5,-24(s0)
20013584:	faf74de3          	blt	a4,a5,2001353e <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20013588:	fe442783          	lw	a5,-28(s0)
2001358c:	4705                	li	a4,1
2001358e:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20013590:	0001                	nop
20013592:	50f2                	lw	ra,60(sp)
20013594:	5462                	lw	s0,56(sp)
20013596:	6121                	addi	sp,sp,64
20013598:	8082                	ret

2001359a <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
2001359a:	7139                	addi	sp,sp,-64
2001359c:	de06                	sw	ra,60(sp)
2001359e:	dc22                	sw	s0,56(sp)
200135a0:	0080                	addi	s0,sp,64
200135a2:	fca42623          	sw	a0,-52(s0)
200135a6:	fcb42423          	sw	a1,-56(s0)
200135aa:	fcc42223          	sw	a2,-60(s0)
200135ae:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
200135b2:	57fd                	li	a5,-1
200135b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
200135b8:	35e010ef          	jal	ra,20014916 <__metal_controller_interrupt_vector_mode>
200135bc:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
200135c0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
200135c4:	3f21                	jal	200134dc <_get_cpu_intc>
200135c6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
200135ca:	fcc42503          	lw	a0,-52(s0)
200135ce:	33b9                	jal	2001331c <__metal_driver_sifive_clint0_num_interrupts>
200135d0:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
200135d4:	fe042703          	lw	a4,-32(s0)
200135d8:	4785                	li	a5,1
200135da:	00f70863          	beq	a4,a5,200135ea <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
200135de:	fe042783          	lw	a5,-32(s0)
200135e2:	c781                	beqz	a5,200135ea <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
200135e4:	fec42783          	lw	a5,-20(s0)
200135e8:	a049                	j	2001366a <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
200135ea:	fe042223          	sw	zero,-28(s0)
200135ee:	a091                	j	20013632 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
200135f0:	fe442583          	lw	a1,-28(s0)
200135f4:	fcc42503          	lw	a0,-52(s0)
200135f8:	3351                	jal	2001337c <__metal_driver_sifive_clint0_interrupt_lines>
200135fa:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
200135fe:	fe442583          	lw	a1,-28(s0)
20013602:	fcc42503          	lw	a0,-52(s0)
20013606:	3b2d                	jal	20013340 <__metal_driver_sifive_clint0_interrupt_parents>
20013608:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
2001360c:	fdc42703          	lw	a4,-36(s0)
20013610:	fe842783          	lw	a5,-24(s0)
20013614:	00f71863          	bne	a4,a5,20013624 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20013618:	fc842703          	lw	a4,-56(s0)
2001361c:	fd442783          	lw	a5,-44(s0)
20013620:	02f70063          	beq	a4,a5,20013640 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20013624:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20013628:	fe442783          	lw	a5,-28(s0)
2001362c:	0785                	addi	a5,a5,1
2001362e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20013632:	fe442703          	lw	a4,-28(s0)
20013636:	fd842783          	lw	a5,-40(s0)
2001363a:	faf74be3          	blt	a4,a5,200135f0 <__metal_driver_riscv_clint0_register+0x56>
2001363e:	a011                	j	20013642 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20013640:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20013642:	fe842783          	lw	a5,-24(s0)
20013646:	c385                	beqz	a5,20013666 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20013648:	fe842783          	lw	a5,-24(s0)
2001364c:	439c                	lw	a5,0(a5)
2001364e:	4fdc                	lw	a5,28(a5)
20013650:	fc042683          	lw	a3,-64(s0)
20013654:	fc442603          	lw	a2,-60(s0)
20013658:	fc842583          	lw	a1,-56(s0)
2001365c:	fe842503          	lw	a0,-24(s0)
20013660:	9782                	jalr	a5
20013662:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20013666:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
2001366a:	853e                	mv	a0,a5
2001366c:	50f2                	lw	ra,60(sp)
2001366e:	5462                	lw	s0,56(sp)
20013670:	6121                	addi	sp,sp,64
20013672:	8082                	ret

20013674 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20013674:	7179                	addi	sp,sp,-48
20013676:	d622                	sw	s0,44(sp)
20013678:	1800                	addi	s0,sp,48
2001367a:	fca42e23          	sw	a0,-36(s0)
2001367e:	fcb42c23          	sw	a1,-40(s0)
20013682:	fcc42a23          	sw	a2,-44(s0)
20013686:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
2001368a:	57fd                	li	a5,-1
2001368c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20013690:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20013694:	853e                	mv	a0,a5
20013696:	5432                	lw	s0,44(sp)
20013698:	6145                	addi	sp,sp,48
2001369a:	8082                	ret

2001369c <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
2001369c:	1101                	addi	sp,sp,-32
2001369e:	ce06                	sw	ra,28(sp)
200136a0:	cc22                	sw	s0,24(sp)
200136a2:	1000                	addi	s0,sp,32
200136a4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
200136a8:	26e010ef          	jal	ra,20014916 <__metal_controller_interrupt_vector_mode>
200136ac:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
200136ae:	853e                	mv	a0,a5
200136b0:	40f2                	lw	ra,28(sp)
200136b2:	4462                	lw	s0,24(sp)
200136b4:	6105                	addi	sp,sp,32
200136b6:	8082                	ret

200136b8 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
200136b8:	7179                	addi	sp,sp,-48
200136ba:	d606                	sw	ra,44(sp)
200136bc:	d422                	sw	s0,40(sp)
200136be:	1800                	addi	s0,sp,48
200136c0:	fca42e23          	sw	a0,-36(s0)
200136c4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
200136c8:	57fd                	li	a5,-1
200136ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
200136ce:	3539                	jal	200134dc <_get_cpu_intc>
200136d0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
200136d4:	fe842783          	lw	a5,-24(s0)
200136d8:	c395                	beqz	a5,200136fc <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
200136da:	fd842703          	lw	a4,-40(s0)
200136de:	4785                	li	a5,1
200136e0:	00e7ef63          	bltu	a5,a4,200136fe <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
200136e4:	fe842783          	lw	a5,-24(s0)
200136e8:	439c                	lw	a5,0(a5)
200136ea:	43dc                	lw	a5,4(a5)
200136ec:	fd842583          	lw	a1,-40(s0)
200136f0:	fe842503          	lw	a0,-24(s0)
200136f4:	9782                	jalr	a5
200136f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
200136fa:	a011                	j	200136fe <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
200136fc:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
200136fe:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20013702:	853e                	mv	a0,a5
20013704:	50b2                	lw	ra,44(sp)
20013706:	5422                	lw	s0,40(sp)
20013708:	6145                	addi	sp,sp,48
2001370a:	8082                	ret

2001370c <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
2001370c:	7139                	addi	sp,sp,-64
2001370e:	de06                	sw	ra,60(sp)
20013710:	dc22                	sw	s0,56(sp)
20013712:	0080                	addi	s0,sp,64
20013714:	fca42623          	sw	a0,-52(s0)
20013718:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
2001371c:	57fd                	li	a5,-1
2001371e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20013722:	fc842783          	lw	a5,-56(s0)
20013726:	c7c9                	beqz	a5,200137b0 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20013728:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2001372c:	3b45                	jal	200134dc <_get_cpu_intc>
2001372e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20013732:	fcc42503          	lw	a0,-52(s0)
20013736:	36dd                	jal	2001331c <__metal_driver_sifive_clint0_num_interrupts>
20013738:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
2001373c:	fe042223          	sw	zero,-28(s0)
20013740:	a091                	j	20013784 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20013742:	fe442583          	lw	a1,-28(s0)
20013746:	fcc42503          	lw	a0,-52(s0)
2001374a:	390d                	jal	2001337c <__metal_driver_sifive_clint0_interrupt_lines>
2001374c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20013750:	fe442583          	lw	a1,-28(s0)
20013754:	fcc42503          	lw	a0,-52(s0)
20013758:	36e5                	jal	20013340 <__metal_driver_sifive_clint0_interrupt_parents>
2001375a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
2001375e:	fe042703          	lw	a4,-32(s0)
20013762:	fe842783          	lw	a5,-24(s0)
20013766:	00f71863          	bne	a4,a5,20013776 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
2001376a:	fc842703          	lw	a4,-56(s0)
2001376e:	fd842783          	lw	a5,-40(s0)
20013772:	02f70063          	beq	a4,a5,20013792 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20013776:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2001377a:	fe442783          	lw	a5,-28(s0)
2001377e:	0785                	addi	a5,a5,1
20013780:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20013784:	fe442703          	lw	a4,-28(s0)
20013788:	fdc42783          	lw	a5,-36(s0)
2001378c:	faf74be3          	blt	a4,a5,20013742 <__metal_driver_riscv_clint0_enable+0x36>
20013790:	a011                	j	20013794 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20013792:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20013794:	fe842783          	lw	a5,-24(s0)
20013798:	cf81                	beqz	a5,200137b0 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
2001379a:	fe842783          	lw	a5,-24(s0)
2001379e:	439c                	lw	a5,0(a5)
200137a0:	53dc                	lw	a5,36(a5)
200137a2:	fc842583          	lw	a1,-56(s0)
200137a6:	fe842503          	lw	a0,-24(s0)
200137aa:	9782                	jalr	a5
200137ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
200137b0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
200137b4:	853e                	mv	a0,a5
200137b6:	50f2                	lw	ra,60(sp)
200137b8:	5462                	lw	s0,56(sp)
200137ba:	6121                	addi	sp,sp,64
200137bc:	8082                	ret

200137be <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
200137be:	7139                	addi	sp,sp,-64
200137c0:	de06                	sw	ra,60(sp)
200137c2:	dc22                	sw	s0,56(sp)
200137c4:	0080                	addi	s0,sp,64
200137c6:	fca42623          	sw	a0,-52(s0)
200137ca:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
200137ce:	57fd                	li	a5,-1
200137d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
200137d4:	fc842783          	lw	a5,-56(s0)
200137d8:	cbc1                	beqz	a5,20013868 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
200137da:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
200137de:	39fd                	jal	200134dc <_get_cpu_intc>
200137e0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
200137e4:	fcc42503          	lw	a0,-52(s0)
200137e8:	b35ff0ef          	jal	ra,2001331c <__metal_driver_sifive_clint0_num_interrupts>
200137ec:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
200137f0:	fe042223          	sw	zero,-28(s0)
200137f4:	a0a1                	j	2001383c <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
200137f6:	fe442583          	lw	a1,-28(s0)
200137fa:	fcc42503          	lw	a0,-52(s0)
200137fe:	b7fff0ef          	jal	ra,2001337c <__metal_driver_sifive_clint0_interrupt_lines>
20013802:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20013806:	fe442583          	lw	a1,-28(s0)
2001380a:	fcc42503          	lw	a0,-52(s0)
2001380e:	b33ff0ef          	jal	ra,20013340 <__metal_driver_sifive_clint0_interrupt_parents>
20013812:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20013816:	fe042703          	lw	a4,-32(s0)
2001381a:	fe842783          	lw	a5,-24(s0)
2001381e:	00f71863          	bne	a4,a5,2001382e <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20013822:	fc842703          	lw	a4,-56(s0)
20013826:	fd842783          	lw	a5,-40(s0)
2001382a:	02f70063          	beq	a4,a5,2001384a <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
2001382e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20013832:	fe442783          	lw	a5,-28(s0)
20013836:	0785                	addi	a5,a5,1
20013838:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2001383c:	fe442703          	lw	a4,-28(s0)
20013840:	fdc42783          	lw	a5,-36(s0)
20013844:	faf749e3          	blt	a4,a5,200137f6 <__metal_driver_riscv_clint0_disable+0x38>
20013848:	a011                	j	2001384c <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
2001384a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2001384c:	fe842783          	lw	a5,-24(s0)
20013850:	cf81                	beqz	a5,20013868 <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20013852:	fe842783          	lw	a5,-24(s0)
20013856:	439c                	lw	a5,0(a5)
20013858:	579c                	lw	a5,40(a5)
2001385a:	fc842583          	lw	a1,-56(s0)
2001385e:	fe842503          	lw	a0,-24(s0)
20013862:	9782                	jalr	a5
20013864:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20013868:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2001386c:	853e                	mv	a0,a5
2001386e:	50f2                	lw	ra,60(sp)
20013870:	5462                	lw	s0,56(sp)
20013872:	6121                	addi	sp,sp,64
20013874:	8082                	ret

20013876 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20013876:	7179                	addi	sp,sp,-48
20013878:	d606                	sw	ra,44(sp)
2001387a:	d422                	sw	s0,40(sp)
2001387c:	1800                	addi	s0,sp,48
2001387e:	fca42e23          	sw	a0,-36(s0)
20013882:	fcb42c23          	sw	a1,-40(s0)
20013886:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
2001388a:	57fd                	li	a5,-1
2001388c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20013890:	fdc42783          	lw	a5,-36(s0)
20013894:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20013898:	fdc42503          	lw	a0,-36(s0)
2001389c:	a5bff0ef          	jal	ra,200132f6 <__metal_driver_sifive_clint0_control_base>
200138a0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
200138a4:	fd842703          	lw	a4,-40(s0)
200138a8:	4789                	li	a5,2
200138aa:	04f70963          	beq	a4,a5,200138fc <__metal_driver_riscv_clint0_command_request+0x86>
200138ae:	fd842703          	lw	a4,-40(s0)
200138b2:	4789                	li	a5,2
200138b4:	00e7c863          	blt	a5,a4,200138c4 <__metal_driver_riscv_clint0_command_request+0x4e>
200138b8:	fd842703          	lw	a4,-40(s0)
200138bc:	4785                	li	a5,1
200138be:	00f70e63          	beq	a4,a5,200138da <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
200138c2:	a8f1                	j	2001399e <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
200138c4:	fd842703          	lw	a4,-40(s0)
200138c8:	478d                	li	a5,3
200138ca:	04f70d63          	beq	a4,a5,20013924 <__metal_driver_riscv_clint0_command_request+0xae>
200138ce:	fd842703          	lw	a4,-40(s0)
200138d2:	4791                	li	a5,4
200138d4:	08f70963          	beq	a4,a5,20013966 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
200138d8:	a0d9                	j	2001399e <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
200138da:	fd442783          	lw	a5,-44(s0)
200138de:	cbcd                	beqz	a5,20013990 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
200138e0:	fe842503          	lw	a0,-24(s0)
200138e4:	ac9ff0ef          	jal	ra,200133ac <__metal_clint0_mtime_get>
200138e8:	87aa                	mv	a5,a0
200138ea:	882e                	mv	a6,a1
200138ec:	fd442703          	lw	a4,-44(s0)
200138f0:	c31c                	sw	a5,0(a4)
200138f2:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
200138f6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
200138fa:	a859                	j	20013990 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
200138fc:	fd442783          	lw	a5,-44(s0)
20013900:	cbd1                	beqz	a5,20013994 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20013902:	fd442783          	lw	a5,-44(s0)
20013906:	439c                	lw	a5,0(a5)
20013908:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001390c:	fe042783          	lw	a5,-32(s0)
20013910:	078a                	slli	a5,a5,0x2
20013912:	873e                	mv	a4,a5
20013914:	fe442783          	lw	a5,-28(s0)
20013918:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
2001391a:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
2001391e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20013922:	a88d                	j	20013994 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20013924:	fd442783          	lw	a5,-44(s0)
20013928:	cba5                	beqz	a5,20013998 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
2001392a:	fd442783          	lw	a5,-44(s0)
2001392e:	439c                	lw	a5,0(a5)
20013930:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20013934:	fe042783          	lw	a5,-32(s0)
20013938:	078a                	slli	a5,a5,0x2
2001393a:	873e                	mv	a4,a5
2001393c:	fe442783          	lw	a5,-28(s0)
20013940:	97ba                	add	a5,a5,a4
20013942:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20013944:	4785                	li	a5,1
20013946:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20013948:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001394c:	fe042783          	lw	a5,-32(s0)
20013950:	078a                	slli	a5,a5,0x2
20013952:	873e                	mv	a4,a5
20013954:	fe442783          	lw	a5,-28(s0)
20013958:	97ba                	add	a5,a5,a4
2001395a:	439c                	lw	a5,0(a5)
2001395c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20013960:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20013964:	a815                	j	20013998 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20013966:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
2001396a:	fd442783          	lw	a5,-44(s0)
2001396e:	c79d                	beqz	a5,2001399c <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20013970:	fd442783          	lw	a5,-44(s0)
20013974:	439c                	lw	a5,0(a5)
20013976:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001397a:	fe042783          	lw	a5,-32(s0)
2001397e:	078a                	slli	a5,a5,0x2
20013980:	873e                	mv	a4,a5
20013982:	fe442783          	lw	a5,-28(s0)
20013986:	97ba                	add	a5,a5,a4
20013988:	439c                	lw	a5,0(a5)
2001398a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2001398e:	a039                	j	2001399c <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20013990:	0001                	nop
20013992:	a031                	j	2001399e <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20013994:	0001                	nop
20013996:	a021                	j	2001399e <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20013998:	0001                	nop
2001399a:	a011                	j	2001399e <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2001399c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
2001399e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
200139a2:	853e                	mv	a0,a5
200139a4:	50b2                	lw	ra,44(sp)
200139a6:	5422                	lw	s0,40(sp)
200139a8:	6145                	addi	sp,sp,48
200139aa:	8082                	ret

200139ac <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
200139ac:	7179                	addi	sp,sp,-48
200139ae:	d606                	sw	ra,44(sp)
200139b0:	d422                	sw	s0,40(sp)
200139b2:	1800                	addi	s0,sp,48
200139b4:	fca42e23          	sw	a0,-36(s0)
200139b8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
200139bc:	185030ef          	jal	ra,20017340 <metal_cpu_get_current_hartid>
200139c0:	87aa                	mv	a5,a0
200139c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
200139c6:	fec40793          	addi	a5,s0,-20
200139ca:	863e                	mv	a2,a5
200139cc:	4589                	li	a1,2
200139ce:	fdc42503          	lw	a0,-36(s0)
200139d2:	3555                	jal	20013876 <__metal_driver_riscv_clint0_command_request>
200139d4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
200139d6:	853e                	mv	a0,a5
200139d8:	50b2                	lw	ra,44(sp)
200139da:	5422                	lw	s0,40(sp)
200139dc:	6145                	addi	sp,sp,48
200139de:	8082                	ret

200139e0 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
200139e0:	7179                	addi	sp,sp,-48
200139e2:	d606                	sw	ra,44(sp)
200139e4:	d422                	sw	s0,40(sp)
200139e6:	1800                	addi	s0,sp,48
200139e8:	fca42e23          	sw	a0,-36(s0)
200139ec:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
200139f0:	151030ef          	jal	ra,20017340 <metal_cpu_get_current_hartid>
200139f4:	87aa                	mv	a5,a0
200139f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
200139fa:	fec40793          	addi	a5,s0,-20
200139fe:	863e                	mv	a2,a5
20013a00:	458d                	li	a1,3
20013a02:	fdc42503          	lw	a0,-36(s0)
20013a06:	3d85                	jal	20013876 <__metal_driver_riscv_clint0_command_request>
20013a08:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20013a0a:	853e                	mv	a0,a5
20013a0c:	50b2                	lw	ra,44(sp)
20013a0e:	5422                	lw	s0,40(sp)
20013a10:	6145                	addi	sp,sp,48
20013a12:	8082                	ret

20013a14 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:262



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20013a14:	1101                	addi	sp,sp,-32
20013a16:	ce22                	sw	s0,28(sp)
20013a18:	1000                	addi	s0,sp,32
20013a1a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:263
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20013a1e:	fec42703          	lw	a4,-20(s0)
20013a22:	81818793          	addi	a5,gp,-2024 # 80000af8 <__metal_dt_cpu_0>
20013a26:	00f71463          	bne	a4,a5,20013a2e <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:264
		return 0;
20013a2a:	4781                	li	a5,0
20013a2c:	a011                	j	20013a30 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:267
	}
	else {
		return -1;
20013a2e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:269
	}
}
20013a30:	853e                	mv	a0,a5
20013a32:	4472                	lw	s0,28(sp)
20013a34:	6105                	addi	sp,sp,32
20013a36:	8082                	ret

20013a38 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:272

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20013a38:	1101                	addi	sp,sp,-32
20013a3a:	ce22                	sw	s0,28(sp)
20013a3c:	1000                	addi	s0,sp,32
20013a3e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:273
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20013a42:	fec42703          	lw	a4,-20(s0)
20013a46:	81818793          	addi	a5,gp,-2024 # 80000af8 <__metal_dt_cpu_0>
20013a4a:	00f71763          	bne	a4,a5,20013a58 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:274
		return 16000000;
20013a4e:	00f427b7          	lui	a5,0xf42
20013a52:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20013a56:	a011                	j	20013a5a <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:277
	}
	else {
		return 0;
20013a58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:279
	}
}
20013a5a:	853e                	mv	a0,a5
20013a5c:	4472                	lw	s0,28(sp)
20013a5e:	6105                	addi	sp,sp,32
20013a60:	8082                	ret

20013a62 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:282

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20013a62:	1101                	addi	sp,sp,-32
20013a64:	ce22                	sw	s0,28(sp)
20013a66:	1000                	addi	s0,sp,32
20013a68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:283
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20013a6c:	fec42703          	lw	a4,-20(s0)
20013a70:	81818793          	addi	a5,gp,-2024 # 80000af8 <__metal_dt_cpu_0>
20013a74:	00f71763          	bne	a4,a5,20013a82 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:284
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20013a78:	800007b7          	lui	a5,0x80000
20013a7c:	0e878793          	addi	a5,a5,232 # 800000e8 <metal_segment_heap_target_end+0xffffc16c>
20013a80:	a011                	j	20013a84 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:287
	}
	else {
		return NULL;
20013a82:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:289
	}
}
20013a84:	853e                	mv	a0,a5
20013a86:	4472                	lw	s0,28(sp)
20013a88:	6105                	addi	sp,sp,32
20013a8a:	8082                	ret

20013a8c <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20013a8c:	1101                	addi	sp,sp,-32
20013a8e:	ce22                	sw	s0,28(sp)
20013a90:	1000                	addi	s0,sp,32
20013a92:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20013a96:	fec42783          	lw	a5,-20(s0)
20013a9a:	00f04a63          	bgtz	a5,20013aae <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20013a9e:	fec42703          	lw	a4,-20(s0)
20013aa2:	070a                	slli	a4,a4,0x2
20013aa4:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20013aa8:	97ba                	add	a5,a5,a4
20013aaa:	439c                	lw	a5,0(a5)
20013aac:	a011                	j	20013ab0 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20013aae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20013ab0:	853e                	mv	a0,a5
20013ab2:	4472                	lw	s0,28(sp)
20013ab4:	6105                	addi	sp,sp,32
20013ab6:	8082                	ret

20013ab8 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20013ab8:	1101                	addi	sp,sp,-32
20013aba:	ce22                	sw	s0,28(sp)
20013abc:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20013abe:	f14027f3          	csrr	a5,mhartid
20013ac2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20013ac6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20013aca:	853e                	mv	a0,a5
20013acc:	4472                	lw	s0,28(sp)
20013ace:	6105                	addi	sp,sp,32
20013ad0:	8082                	ret

20013ad2 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20013ad2:	1101                	addi	sp,sp,-32
20013ad4:	ce22                	sw	s0,28(sp)
20013ad6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20013ad8:	47a1                	li	a5,8
20013ada:	3007a7f3          	csrrs	a5,mstatus,a5
20013ade:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20013ae2:	0001                	nop
20013ae4:	4472                	lw	s0,28(sp)
20013ae6:	6105                	addi	sp,sp,32
20013ae8:	8082                	ret

20013aea <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20013aea:	1101                	addi	sp,sp,-32
20013aec:	ce22                	sw	s0,28(sp)
20013aee:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20013af0:	47a1                	li	a5,8
20013af2:	3007b7f3          	csrrc	a5,mstatus,a5
20013af6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20013afa:	0001                	nop
20013afc:	4472                	lw	s0,28(sp)
20013afe:	6105                	addi	sp,sp,32
20013b00:	8082                	ret

20013b02 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20013b02:	1101                	addi	sp,sp,-32
20013b04:	ce22                	sw	s0,28(sp)
20013b06:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20013b08:	47a1                	li	a5,8
20013b0a:	3047a7f3          	csrrs	a5,mie,a5
20013b0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20013b12:	0001                	nop
20013b14:	4472                	lw	s0,28(sp)
20013b16:	6105                	addi	sp,sp,32
20013b18:	8082                	ret

20013b1a <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20013b1a:	1101                	addi	sp,sp,-32
20013b1c:	ce22                	sw	s0,28(sp)
20013b1e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20013b20:	47a1                	li	a5,8
20013b22:	3047b7f3          	csrrc	a5,mie,a5
20013b26:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20013b2a:	0001                	nop
20013b2c:	4472                	lw	s0,28(sp)
20013b2e:	6105                	addi	sp,sp,32
20013b30:	8082                	ret

20013b32 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20013b32:	1101                	addi	sp,sp,-32
20013b34:	ce22                	sw	s0,28(sp)
20013b36:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20013b38:	08000793          	li	a5,128
20013b3c:	3047a7f3          	csrrs	a5,mie,a5
20013b40:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20013b44:	0001                	nop
20013b46:	4472                	lw	s0,28(sp)
20013b48:	6105                	addi	sp,sp,32
20013b4a:	8082                	ret

20013b4c <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20013b4c:	1101                	addi	sp,sp,-32
20013b4e:	ce22                	sw	s0,28(sp)
20013b50:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20013b52:	08000793          	li	a5,128
20013b56:	3047b7f3          	csrrc	a5,mie,a5
20013b5a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20013b5e:	0001                	nop
20013b60:	4472                	lw	s0,28(sp)
20013b62:	6105                	addi	sp,sp,32
20013b64:	8082                	ret

20013b66 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20013b66:	1101                	addi	sp,sp,-32
20013b68:	ce22                	sw	s0,28(sp)
20013b6a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20013b6c:	6785                	lui	a5,0x1
20013b6e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20013b72:	3047a7f3          	csrrs	a5,mie,a5
20013b76:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20013b7a:	0001                	nop
20013b7c:	4472                	lw	s0,28(sp)
20013b7e:	6105                	addi	sp,sp,32
20013b80:	8082                	ret

20013b82 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20013b82:	1101                	addi	sp,sp,-32
20013b84:	ce22                	sw	s0,28(sp)
20013b86:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20013b88:	6785                	lui	a5,0x1
20013b8a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20013b8e:	3047b7f3          	csrrc	a5,mie,a5
20013b92:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20013b96:	0001                	nop
20013b98:	4472                	lw	s0,28(sp)
20013b9a:	6105                	addi	sp,sp,32
20013b9c:	8082                	ret

20013b9e <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20013b9e:	7179                	addi	sp,sp,-48
20013ba0:	d622                	sw	s0,44(sp)
20013ba2:	1800                	addi	s0,sp,48
20013ba4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20013ba8:	fdc42783          	lw	a5,-36(s0)
20013bac:	4705                	li	a4,1
20013bae:	00f717b3          	sll	a5,a4,a5
20013bb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20013bb6:	fec42783          	lw	a5,-20(s0)
20013bba:	3047a7f3          	csrrs	a5,mie,a5
20013bbe:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20013bc2:	0001                	nop
20013bc4:	5432                	lw	s0,44(sp)
20013bc6:	6145                	addi	sp,sp,48
20013bc8:	8082                	ret

20013bca <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20013bca:	7179                	addi	sp,sp,-48
20013bcc:	d622                	sw	s0,44(sp)
20013bce:	1800                	addi	s0,sp,48
20013bd0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20013bd4:	fdc42783          	lw	a5,-36(s0)
20013bd8:	4705                	li	a4,1
20013bda:	00f717b3          	sll	a5,a4,a5
20013bde:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20013be2:	fec42783          	lw	a5,-20(s0)
20013be6:	3047b7f3          	csrrc	a5,mie,a5
20013bea:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20013bee:	0001                	nop
20013bf0:	5432                	lw	s0,44(sp)
20013bf2:	6145                	addi	sp,sp,48
20013bf4:	8082                	ret

20013bf6 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20013bf6:	1101                	addi	sp,sp,-32
20013bf8:	ce06                	sw	ra,28(sp)
20013bfa:	cc22                	sw	s0,24(sp)
20013bfc:	1000                	addi	s0,sp,32
20013bfe:	fea42623          	sw	a0,-20(s0)
20013c02:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20013c06:	06400513          	li	a0,100
20013c0a:	750030ef          	jal	ra,2001735a <metal_shutdown>

20013c0e <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20013c0e:	1101                	addi	sp,sp,-32
20013c10:	ce06                	sw	ra,28(sp)
20013c12:	cc22                	sw	s0,24(sp)
20013c14:	1000                	addi	s0,sp,32
20013c16:	fea42623          	sw	a0,-20(s0)
20013c1a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20013c1e:	0c800513          	li	a0,200
20013c22:	738030ef          	jal	ra,2001735a <metal_shutdown>

20013c26 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20013c26:	715d                	addi	sp,sp,-80
20013c28:	c686                	sw	ra,76(sp)
20013c2a:	c496                	sw	t0,72(sp)
20013c2c:	c29a                	sw	t1,68(sp)
20013c2e:	c09e                	sw	t2,64(sp)
20013c30:	de22                	sw	s0,60(sp)
20013c32:	dc2a                	sw	a0,56(sp)
20013c34:	da2e                	sw	a1,52(sp)
20013c36:	d832                	sw	a2,48(sp)
20013c38:	d636                	sw	a3,44(sp)
20013c3a:	d43a                	sw	a4,40(sp)
20013c3c:	d23e                	sw	a5,36(sp)
20013c3e:	d042                	sw	a6,32(sp)
20013c40:	ce46                	sw	a7,28(sp)
20013c42:	cc72                	sw	t3,24(sp)
20013c44:	ca76                	sw	t4,20(sp)
20013c46:	c87a                	sw	t5,16(sp)
20013c48:	c67e                	sw	t6,12(sp)
20013c4a:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20013c4c:	12c00513          	li	a0,300
20013c50:	70a030ef          	jal	ra,2001735a <metal_shutdown>

20013c54 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20013c54:	711d                	addi	sp,sp,-96
20013c56:	ce86                	sw	ra,92(sp)
20013c58:	cc96                	sw	t0,88(sp)
20013c5a:	ca9a                	sw	t1,84(sp)
20013c5c:	c89e                	sw	t2,80(sp)
20013c5e:	c6a2                	sw	s0,76(sp)
20013c60:	c4aa                	sw	a0,72(sp)
20013c62:	c2ae                	sw	a1,68(sp)
20013c64:	c0b2                	sw	a2,64(sp)
20013c66:	de36                	sw	a3,60(sp)
20013c68:	dc3a                	sw	a4,56(sp)
20013c6a:	da3e                	sw	a5,52(sp)
20013c6c:	d842                	sw	a6,48(sp)
20013c6e:	d646                	sw	a7,44(sp)
20013c70:	d472                	sw	t3,40(sp)
20013c72:	d276                	sw	t4,36(sp)
20013c74:	d07a                	sw	t5,32(sp)
20013c76:	ce7e                	sw	t6,28(sp)
20013c78:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013c7a:	3d3d                	jal	20013ab8 <__metal_myhart_id>
20013c7c:	872a                	mv	a4,a0
20013c7e:	070a                	slli	a4,a4,0x2
20013c80:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20013c84:	97ba                	add	a5,a5,a4
20013c86:	439c                	lw	a5,0(a5)
20013c88:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20013c8c:	fac42783          	lw	a5,-84(s0)
20013c90:	c785                	beqz	a5,20013cb8 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013c92:	fac42503          	lw	a0,-84(s0)
20013c96:	33f1                	jal	20013a62 <__metal_driver_cpu_interrupt_controller>
20013c98:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20013c9c:	fa842783          	lw	a5,-88(s0)
20013ca0:	0e07a783          	lw	a5,224(a5)
20013ca4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20013ca8:	fa842783          	lw	a5,-88(s0)
20013cac:	0d87a783          	lw	a5,216(a5)
20013cb0:	fa442583          	lw	a1,-92(s0)
20013cb4:	450d                	li	a0,3
20013cb6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20013cb8:	0001                	nop
20013cba:	40f6                	lw	ra,92(sp)
20013cbc:	42e6                	lw	t0,88(sp)
20013cbe:	4356                	lw	t1,84(sp)
20013cc0:	43c6                	lw	t2,80(sp)
20013cc2:	4436                	lw	s0,76(sp)
20013cc4:	4526                	lw	a0,72(sp)
20013cc6:	4596                	lw	a1,68(sp)
20013cc8:	4606                	lw	a2,64(sp)
20013cca:	56f2                	lw	a3,60(sp)
20013ccc:	5762                	lw	a4,56(sp)
20013cce:	57d2                	lw	a5,52(sp)
20013cd0:	5842                	lw	a6,48(sp)
20013cd2:	58b2                	lw	a7,44(sp)
20013cd4:	5e22                	lw	t3,40(sp)
20013cd6:	5e92                	lw	t4,36(sp)
20013cd8:	5f02                	lw	t5,32(sp)
20013cda:	4ff2                	lw	t6,28(sp)
20013cdc:	6125                	addi	sp,sp,96
20013cde:	30200073          	mret

20013ce2 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20013ce2:	7179                	addi	sp,sp,-48
20013ce4:	d606                	sw	ra,44(sp)
20013ce6:	d422                	sw	s0,40(sp)
20013ce8:	1800                	addi	s0,sp,48
20013cea:	fca42e23          	sw	a0,-36(s0)
20013cee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013cf2:	33d9                	jal	20013ab8 <__metal_myhart_id>
20013cf4:	872a                	mv	a4,a0
20013cf6:	070a                	slli	a4,a4,0x2
20013cf8:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20013cfc:	97ba                	add	a5,a5,a4
20013cfe:	439c                	lw	a5,0(a5)
20013d00:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20013d04:	342027f3          	csrr	a5,mcause
20013d08:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20013d0c:	fec42783          	lw	a5,-20(s0)
20013d10:	c795                	beqz	a5,20013d3c <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013d12:	fec42503          	lw	a0,-20(s0)
20013d16:	33b1                	jal	20013a62 <__metal_driver_cpu_interrupt_controller>
20013d18:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20013d1c:	fe842783          	lw	a5,-24(s0)
20013d20:	3ff7f793          	andi	a5,a5,1023
20013d24:	fe442703          	lw	a4,-28(s0)
20013d28:	0e078793          	addi	a5,a5,224
20013d2c:	078a                	slli	a5,a5,0x2
20013d2e:	97ba                	add	a5,a5,a4
20013d30:	479c                	lw	a5,8(a5)
20013d32:	fdc42583          	lw	a1,-36(s0)
20013d36:	fec42503          	lw	a0,-20(s0)
20013d3a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20013d3c:	0001                	nop
20013d3e:	50b2                	lw	ra,44(sp)
20013d40:	5422                	lw	s0,40(sp)
20013d42:	6145                	addi	sp,sp,48
20013d44:	8082                	ret

20013d46 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20013d46:	711d                	addi	sp,sp,-96
20013d48:	ce86                	sw	ra,92(sp)
20013d4a:	cc96                	sw	t0,88(sp)
20013d4c:	ca9a                	sw	t1,84(sp)
20013d4e:	c89e                	sw	t2,80(sp)
20013d50:	c6a2                	sw	s0,76(sp)
20013d52:	c4aa                	sw	a0,72(sp)
20013d54:	c2ae                	sw	a1,68(sp)
20013d56:	c0b2                	sw	a2,64(sp)
20013d58:	de36                	sw	a3,60(sp)
20013d5a:	dc3a                	sw	a4,56(sp)
20013d5c:	da3e                	sw	a5,52(sp)
20013d5e:	d842                	sw	a6,48(sp)
20013d60:	d646                	sw	a7,44(sp)
20013d62:	d472                	sw	t3,40(sp)
20013d64:	d276                	sw	t4,36(sp)
20013d66:	d07a                	sw	t5,32(sp)
20013d68:	ce7e                	sw	t6,28(sp)
20013d6a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013d6c:	33b1                	jal	20013ab8 <__metal_myhart_id>
20013d6e:	872a                	mv	a4,a0
20013d70:	070a                	slli	a4,a4,0x2
20013d72:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20013d76:	97ba                	add	a5,a5,a4
20013d78:	439c                	lw	a5,0(a5)
20013d7a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20013d7e:	fac42783          	lw	a5,-84(s0)
20013d82:	c785                	beqz	a5,20013daa <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013d84:	fac42503          	lw	a0,-84(s0)
20013d88:	39e9                	jal	20013a62 <__metal_driver_cpu_interrupt_controller>
20013d8a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20013d8e:	fa842783          	lw	a5,-88(s0)
20013d92:	1407a783          	lw	a5,320(a5)
20013d96:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20013d9a:	fa842783          	lw	a5,-88(s0)
20013d9e:	1387a783          	lw	a5,312(a5)
20013da2:	fa442583          	lw	a1,-92(s0)
20013da6:	451d                	li	a0,7
20013da8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20013daa:	0001                	nop
20013dac:	40f6                	lw	ra,92(sp)
20013dae:	42e6                	lw	t0,88(sp)
20013db0:	4356                	lw	t1,84(sp)
20013db2:	43c6                	lw	t2,80(sp)
20013db4:	4436                	lw	s0,76(sp)
20013db6:	4526                	lw	a0,72(sp)
20013db8:	4596                	lw	a1,68(sp)
20013dba:	4606                	lw	a2,64(sp)
20013dbc:	56f2                	lw	a3,60(sp)
20013dbe:	5762                	lw	a4,56(sp)
20013dc0:	57d2                	lw	a5,52(sp)
20013dc2:	5842                	lw	a6,48(sp)
20013dc4:	58b2                	lw	a7,44(sp)
20013dc6:	5e22                	lw	t3,40(sp)
20013dc8:	5e92                	lw	t4,36(sp)
20013dca:	5f02                	lw	t5,32(sp)
20013dcc:	4ff2                	lw	t6,28(sp)
20013dce:	6125                	addi	sp,sp,96
20013dd0:	30200073          	mret

20013dd4 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20013dd4:	7179                	addi	sp,sp,-48
20013dd6:	d606                	sw	ra,44(sp)
20013dd8:	d422                	sw	s0,40(sp)
20013dda:	1800                	addi	s0,sp,48
20013ddc:	fca42e23          	sw	a0,-36(s0)
20013de0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20013de4:	39d1                	jal	20013ab8 <__metal_myhart_id>
20013de6:	87aa                	mv	a5,a0
20013de8:	853e                	mv	a0,a5
20013dea:	314d                	jal	20013a8c <__metal_driver_cpu_get>
20013dec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20013df0:	fec42503          	lw	a0,-20(s0)
20013df4:	180010ef          	jal	ra,20014f74 <__metal_driver_cpu_mtime_get>
20013df8:	fea42023          	sw	a0,-32(s0)
20013dfc:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20013e00:	fe042783          	lw	a5,-32(s0)
20013e04:	fe442803          	lw	a6,-28(s0)
20013e08:	45a9                	li	a1,10
20013e0a:	4601                	li	a2,0
20013e0c:	00b786b3          	add	a3,a5,a1
20013e10:	8536                	mv	a0,a3
20013e12:	00f53533          	sltu	a0,a0,a5
20013e16:	00c80733          	add	a4,a6,a2
20013e1a:	00e507b3          	add	a5,a0,a4
20013e1e:	873e                	mv	a4,a5
20013e20:	87b6                	mv	a5,a3
20013e22:	883a                	mv	a6,a4
20013e24:	85be                	mv	a1,a5
20013e26:	8642                	mv	a2,a6
20013e28:	fec42503          	lw	a0,-20(s0)
20013e2c:	1ae010ef          	jal	ra,20014fda <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20013e30:	0001                	nop
20013e32:	50b2                	lw	ra,44(sp)
20013e34:	5422                	lw	s0,40(sp)
20013e36:	6145                	addi	sp,sp,48
20013e38:	8082                	ret
	...

20013e80 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20013e80:	7119                	addi	sp,sp,-128
20013e82:	de86                	sw	ra,124(sp)
20013e84:	dc96                	sw	t0,120(sp)
20013e86:	da9a                	sw	t1,116(sp)
20013e88:	d89e                	sw	t2,112(sp)
20013e8a:	d6a2                	sw	s0,108(sp)
20013e8c:	d4aa                	sw	a0,104(sp)
20013e8e:	d2ae                	sw	a1,100(sp)
20013e90:	d0b2                	sw	a2,96(sp)
20013e92:	ceb6                	sw	a3,92(sp)
20013e94:	ccba                	sw	a4,88(sp)
20013e96:	cabe                	sw	a5,84(sp)
20013e98:	c8c2                	sw	a6,80(sp)
20013e9a:	c6c6                	sw	a7,76(sp)
20013e9c:	c4f2                	sw	t3,72(sp)
20013e9e:	c2f6                	sw	t4,68(sp)
20013ea0:	c0fa                	sw	t5,64(sp)
20013ea2:	de7e                	sw	t6,60(sp)
20013ea4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20013ea6:	c13ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
20013eaa:	872a                	mv	a4,a0
20013eac:	070a                	slli	a4,a4,0x2
20013eae:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20013eb2:	97ba                	add	a5,a5,a4
20013eb4:	439c                	lw	a5,0(a5)
20013eb6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20013eba:	342027f3          	csrr	a5,mcause
20013ebe:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20013ec2:	341027f3          	csrr	a5,mepc
20013ec6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20013eca:	343027f3          	csrr	a5,mtval
20013ece:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20013ed2:	305027f3          	csrr	a5,mtvec
20013ed6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20013eda:	fac42783          	lw	a5,-84(s0)
20013ede:	c7e9                	beqz	a5,20013fa8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20013ee0:	fac42503          	lw	a0,-84(s0)
20013ee4:	b7fff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20013ee8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20013eec:	fa842783          	lw	a5,-88(s0)
20013ef0:	3ff7f793          	andi	a5,a5,1023
20013ef4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20013ef8:	fa842783          	lw	a5,-88(s0)
20013efc:	0807d863          	bgez	a5,20013f8c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20013f00:	f9442703          	lw	a4,-108(s0)
20013f04:	47ad                	li	a5,11
20013f06:	00e7d763          	bge	a5,a4,20013f14 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20013f0a:	f9c42783          	lw	a5,-100(s0)
20013f0e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20013f12:	ef9d                	bnez	a5,20013f50 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20013f14:	f9842683          	lw	a3,-104(s0)
20013f18:	f9442703          	lw	a4,-108(s0)
20013f1c:	87ba                	mv	a5,a4
20013f1e:	0786                	slli	a5,a5,0x1
20013f20:	97ba                	add	a5,a5,a4
20013f22:	078e                	slli	a5,a5,0x3
20013f24:	97b6                	add	a5,a5,a3
20013f26:	0987a783          	lw	a5,152(a5)
20013f2a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20013f2e:	f9842683          	lw	a3,-104(s0)
20013f32:	f9442703          	lw	a4,-108(s0)
20013f36:	87ba                	mv	a5,a4
20013f38:	0786                	slli	a5,a5,0x1
20013f3a:	97ba                	add	a5,a5,a4
20013f3c:	078e                	slli	a5,a5,0x3
20013f3e:	97b6                	add	a5,a5,a3
20013f40:	0907a783          	lw	a5,144(a5)
20013f44:	f8c42583          	lw	a1,-116(s0)
20013f48:	f9442503          	lw	a0,-108(s0)
20013f4c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20013f4e:	a8a9                	j	20013fa8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20013f50:	f9c42783          	lw	a5,-100(s0)
20013f54:	03f7f713          	andi	a4,a5,63
20013f58:	4789                	li	a5,2
20013f5a:	04f71763          	bne	a4,a5,20013fa8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20013f5e:	307027f3          	csrr	a5,mtvt
20013f62:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20013f66:	f9842783          	lw	a5,-104(s0)
20013f6a:	0dc7a783          	lw	a5,220(a5)
20013f6e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20013f72:	f9042783          	lw	a5,-112(s0)
20013f76:	439c                	lw	a5,0(a5)
20013f78:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20013f7c:	f8842783          	lw	a5,-120(s0)
20013f80:	f8c42583          	lw	a1,-116(s0)
20013f84:	f9442503          	lw	a0,-108(s0)
20013f88:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20013f8a:	a839                	j	20013fa8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20013f8c:	f9842703          	lw	a4,-104(s0)
20013f90:	f9442783          	lw	a5,-108(s0)
20013f94:	0e078793          	addi	a5,a5,224
20013f98:	078a                	slli	a5,a5,0x2
20013f9a:	97ba                	add	a5,a5,a4
20013f9c:	479c                	lw	a5,8(a5)
20013f9e:	f9442583          	lw	a1,-108(s0)
20013fa2:	fac42503          	lw	a0,-84(s0)
20013fa6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20013fa8:	50f6                	lw	ra,124(sp)
20013faa:	52e6                	lw	t0,120(sp)
20013fac:	5356                	lw	t1,116(sp)
20013fae:	53c6                	lw	t2,112(sp)
20013fb0:	5436                	lw	s0,108(sp)
20013fb2:	5526                	lw	a0,104(sp)
20013fb4:	5596                	lw	a1,100(sp)
20013fb6:	5606                	lw	a2,96(sp)
20013fb8:	46f6                	lw	a3,92(sp)
20013fba:	4766                	lw	a4,88(sp)
20013fbc:	47d6                	lw	a5,84(sp)
20013fbe:	4846                	lw	a6,80(sp)
20013fc0:	48b6                	lw	a7,76(sp)
20013fc2:	4e26                	lw	t3,72(sp)
20013fc4:	4e96                	lw	t4,68(sp)
20013fc6:	4f06                	lw	t5,64(sp)
20013fc8:	5ff2                	lw	t6,60(sp)
20013fca:	6109                	addi	sp,sp,128
20013fcc:	30200073          	mret
	...

20013ff6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20013ff6:	711d                	addi	sp,sp,-96
20013ff8:	ce86                	sw	ra,92(sp)
20013ffa:	cc96                	sw	t0,88(sp)
20013ffc:	ca9a                	sw	t1,84(sp)
20013ffe:	c89e                	sw	t2,80(sp)
20014000:	c6a2                	sw	s0,76(sp)
20014002:	c4aa                	sw	a0,72(sp)
20014004:	c2ae                	sw	a1,68(sp)
20014006:	c0b2                	sw	a2,64(sp)
20014008:	de36                	sw	a3,60(sp)
2001400a:	dc3a                	sw	a4,56(sp)
2001400c:	da3e                	sw	a5,52(sp)
2001400e:	d842                	sw	a6,48(sp)
20014010:	d646                	sw	a7,44(sp)
20014012:	d472                	sw	t3,40(sp)
20014014:	d276                	sw	t4,36(sp)
20014016:	d07a                	sw	t5,32(sp)
20014018:	ce7e                	sw	t6,28(sp)
2001401a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001401c:	a9dff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
20014020:	872a                	mv	a4,a0
20014022:	070a                	slli	a4,a4,0x2
20014024:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014028:	97ba                	add	a5,a5,a4
2001402a:	439c                	lw	a5,0(a5)
2001402c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20014030:	fac42783          	lw	a5,-84(s0)
20014034:	c78d                	beqz	a5,2001405e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20014036:	fac42503          	lw	a0,-84(s0)
2001403a:	a29ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
2001403e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20014042:	fa842783          	lw	a5,-88(s0)
20014046:	2187a783          	lw	a5,536(a5)
2001404a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2001404e:	fa842783          	lw	a5,-88(s0)
20014052:	2107a783          	lw	a5,528(a5)
20014056:	fa442583          	lw	a1,-92(s0)
2001405a:	4541                	li	a0,16
2001405c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2001405e:	0001                	nop
20014060:	40f6                	lw	ra,92(sp)
20014062:	42e6                	lw	t0,88(sp)
20014064:	4356                	lw	t1,84(sp)
20014066:	43c6                	lw	t2,80(sp)
20014068:	4436                	lw	s0,76(sp)
2001406a:	4526                	lw	a0,72(sp)
2001406c:	4596                	lw	a1,68(sp)
2001406e:	4606                	lw	a2,64(sp)
20014070:	56f2                	lw	a3,60(sp)
20014072:	5762                	lw	a4,56(sp)
20014074:	57d2                	lw	a5,52(sp)
20014076:	5842                	lw	a6,48(sp)
20014078:	58b2                	lw	a7,44(sp)
2001407a:	5e22                	lw	t3,40(sp)
2001407c:	5e92                	lw	t4,36(sp)
2001407e:	5f02                	lw	t5,32(sp)
20014080:	4ff2                	lw	t6,28(sp)
20014082:	6125                	addi	sp,sp,96
20014084:	30200073          	mret

20014088 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20014088:	711d                	addi	sp,sp,-96
2001408a:	ce86                	sw	ra,92(sp)
2001408c:	cc96                	sw	t0,88(sp)
2001408e:	ca9a                	sw	t1,84(sp)
20014090:	c89e                	sw	t2,80(sp)
20014092:	c6a2                	sw	s0,76(sp)
20014094:	c4aa                	sw	a0,72(sp)
20014096:	c2ae                	sw	a1,68(sp)
20014098:	c0b2                	sw	a2,64(sp)
2001409a:	de36                	sw	a3,60(sp)
2001409c:	dc3a                	sw	a4,56(sp)
2001409e:	da3e                	sw	a5,52(sp)
200140a0:	d842                	sw	a6,48(sp)
200140a2:	d646                	sw	a7,44(sp)
200140a4:	d472                	sw	t3,40(sp)
200140a6:	d276                	sw	t4,36(sp)
200140a8:	d07a                	sw	t5,32(sp)
200140aa:	ce7e                	sw	t6,28(sp)
200140ac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200140ae:	a0bff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200140b2:	872a                	mv	a4,a0
200140b4:	070a                	slli	a4,a4,0x2
200140b6:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
200140ba:	97ba                	add	a5,a5,a4
200140bc:	439c                	lw	a5,0(a5)
200140be:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
200140c2:	fac42783          	lw	a5,-84(s0)
200140c6:	c78d                	beqz	a5,200140f0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200140c8:	fac42503          	lw	a0,-84(s0)
200140cc:	997ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200140d0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
200140d4:	fa842783          	lw	a5,-88(s0)
200140d8:	2307a783          	lw	a5,560(a5)
200140dc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
200140e0:	fa842783          	lw	a5,-88(s0)
200140e4:	2287a783          	lw	a5,552(a5)
200140e8:	fa442583          	lw	a1,-92(s0)
200140ec:	4545                	li	a0,17
200140ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
200140f0:	0001                	nop
200140f2:	40f6                	lw	ra,92(sp)
200140f4:	42e6                	lw	t0,88(sp)
200140f6:	4356                	lw	t1,84(sp)
200140f8:	43c6                	lw	t2,80(sp)
200140fa:	4436                	lw	s0,76(sp)
200140fc:	4526                	lw	a0,72(sp)
200140fe:	4596                	lw	a1,68(sp)
20014100:	4606                	lw	a2,64(sp)
20014102:	56f2                	lw	a3,60(sp)
20014104:	5762                	lw	a4,56(sp)
20014106:	57d2                	lw	a5,52(sp)
20014108:	5842                	lw	a6,48(sp)
2001410a:	58b2                	lw	a7,44(sp)
2001410c:	5e22                	lw	t3,40(sp)
2001410e:	5e92                	lw	t4,36(sp)
20014110:	5f02                	lw	t5,32(sp)
20014112:	4ff2                	lw	t6,28(sp)
20014114:	6125                	addi	sp,sp,96
20014116:	30200073          	mret

2001411a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2001411a:	711d                	addi	sp,sp,-96
2001411c:	ce86                	sw	ra,92(sp)
2001411e:	cc96                	sw	t0,88(sp)
20014120:	ca9a                	sw	t1,84(sp)
20014122:	c89e                	sw	t2,80(sp)
20014124:	c6a2                	sw	s0,76(sp)
20014126:	c4aa                	sw	a0,72(sp)
20014128:	c2ae                	sw	a1,68(sp)
2001412a:	c0b2                	sw	a2,64(sp)
2001412c:	de36                	sw	a3,60(sp)
2001412e:	dc3a                	sw	a4,56(sp)
20014130:	da3e                	sw	a5,52(sp)
20014132:	d842                	sw	a6,48(sp)
20014134:	d646                	sw	a7,44(sp)
20014136:	d472                	sw	t3,40(sp)
20014138:	d276                	sw	t4,36(sp)
2001413a:	d07a                	sw	t5,32(sp)
2001413c:	ce7e                	sw	t6,28(sp)
2001413e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014140:	979ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
20014144:	872a                	mv	a4,a0
20014146:	070a                	slli	a4,a4,0x2
20014148:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
2001414c:	97ba                	add	a5,a5,a4
2001414e:	439c                	lw	a5,0(a5)
20014150:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20014154:	fac42783          	lw	a5,-84(s0)
20014158:	c78d                	beqz	a5,20014182 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001415a:	fac42503          	lw	a0,-84(s0)
2001415e:	905ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014162:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20014166:	fa842783          	lw	a5,-88(s0)
2001416a:	2487a783          	lw	a5,584(a5)
2001416e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20014172:	fa842783          	lw	a5,-88(s0)
20014176:	2407a783          	lw	a5,576(a5)
2001417a:	fa442583          	lw	a1,-92(s0)
2001417e:	4549                	li	a0,18
20014180:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20014182:	0001                	nop
20014184:	40f6                	lw	ra,92(sp)
20014186:	42e6                	lw	t0,88(sp)
20014188:	4356                	lw	t1,84(sp)
2001418a:	43c6                	lw	t2,80(sp)
2001418c:	4436                	lw	s0,76(sp)
2001418e:	4526                	lw	a0,72(sp)
20014190:	4596                	lw	a1,68(sp)
20014192:	4606                	lw	a2,64(sp)
20014194:	56f2                	lw	a3,60(sp)
20014196:	5762                	lw	a4,56(sp)
20014198:	57d2                	lw	a5,52(sp)
2001419a:	5842                	lw	a6,48(sp)
2001419c:	58b2                	lw	a7,44(sp)
2001419e:	5e22                	lw	t3,40(sp)
200141a0:	5e92                	lw	t4,36(sp)
200141a2:	5f02                	lw	t5,32(sp)
200141a4:	4ff2                	lw	t6,28(sp)
200141a6:	6125                	addi	sp,sp,96
200141a8:	30200073          	mret

200141ac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
200141ac:	711d                	addi	sp,sp,-96
200141ae:	ce86                	sw	ra,92(sp)
200141b0:	cc96                	sw	t0,88(sp)
200141b2:	ca9a                	sw	t1,84(sp)
200141b4:	c89e                	sw	t2,80(sp)
200141b6:	c6a2                	sw	s0,76(sp)
200141b8:	c4aa                	sw	a0,72(sp)
200141ba:	c2ae                	sw	a1,68(sp)
200141bc:	c0b2                	sw	a2,64(sp)
200141be:	de36                	sw	a3,60(sp)
200141c0:	dc3a                	sw	a4,56(sp)
200141c2:	da3e                	sw	a5,52(sp)
200141c4:	d842                	sw	a6,48(sp)
200141c6:	d646                	sw	a7,44(sp)
200141c8:	d472                	sw	t3,40(sp)
200141ca:	d276                	sw	t4,36(sp)
200141cc:	d07a                	sw	t5,32(sp)
200141ce:	ce7e                	sw	t6,28(sp)
200141d0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200141d2:	8e7ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200141d6:	872a                	mv	a4,a0
200141d8:	070a                	slli	a4,a4,0x2
200141da:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
200141de:	97ba                	add	a5,a5,a4
200141e0:	439c                	lw	a5,0(a5)
200141e2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
200141e6:	fac42783          	lw	a5,-84(s0)
200141ea:	c78d                	beqz	a5,20014214 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200141ec:	fac42503          	lw	a0,-84(s0)
200141f0:	873ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200141f4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
200141f8:	fa842783          	lw	a5,-88(s0)
200141fc:	2607a783          	lw	a5,608(a5)
20014200:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20014204:	fa842783          	lw	a5,-88(s0)
20014208:	2587a783          	lw	a5,600(a5)
2001420c:	fa442583          	lw	a1,-92(s0)
20014210:	454d                	li	a0,19
20014212:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20014214:	0001                	nop
20014216:	40f6                	lw	ra,92(sp)
20014218:	42e6                	lw	t0,88(sp)
2001421a:	4356                	lw	t1,84(sp)
2001421c:	43c6                	lw	t2,80(sp)
2001421e:	4436                	lw	s0,76(sp)
20014220:	4526                	lw	a0,72(sp)
20014222:	4596                	lw	a1,68(sp)
20014224:	4606                	lw	a2,64(sp)
20014226:	56f2                	lw	a3,60(sp)
20014228:	5762                	lw	a4,56(sp)
2001422a:	57d2                	lw	a5,52(sp)
2001422c:	5842                	lw	a6,48(sp)
2001422e:	58b2                	lw	a7,44(sp)
20014230:	5e22                	lw	t3,40(sp)
20014232:	5e92                	lw	t4,36(sp)
20014234:	5f02                	lw	t5,32(sp)
20014236:	4ff2                	lw	t6,28(sp)
20014238:	6125                	addi	sp,sp,96
2001423a:	30200073          	mret

2001423e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2001423e:	711d                	addi	sp,sp,-96
20014240:	ce86                	sw	ra,92(sp)
20014242:	cc96                	sw	t0,88(sp)
20014244:	ca9a                	sw	t1,84(sp)
20014246:	c89e                	sw	t2,80(sp)
20014248:	c6a2                	sw	s0,76(sp)
2001424a:	c4aa                	sw	a0,72(sp)
2001424c:	c2ae                	sw	a1,68(sp)
2001424e:	c0b2                	sw	a2,64(sp)
20014250:	de36                	sw	a3,60(sp)
20014252:	dc3a                	sw	a4,56(sp)
20014254:	da3e                	sw	a5,52(sp)
20014256:	d842                	sw	a6,48(sp)
20014258:	d646                	sw	a7,44(sp)
2001425a:	d472                	sw	t3,40(sp)
2001425c:	d276                	sw	t4,36(sp)
2001425e:	d07a                	sw	t5,32(sp)
20014260:	ce7e                	sw	t6,28(sp)
20014262:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014264:	855ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
20014268:	872a                	mv	a4,a0
2001426a:	070a                	slli	a4,a4,0x2
2001426c:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014270:	97ba                	add	a5,a5,a4
20014272:	439c                	lw	a5,0(a5)
20014274:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20014278:	fac42783          	lw	a5,-84(s0)
2001427c:	c78d                	beqz	a5,200142a6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001427e:	fac42503          	lw	a0,-84(s0)
20014282:	fe0ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014286:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2001428a:	fa842783          	lw	a5,-88(s0)
2001428e:	2787a783          	lw	a5,632(a5)
20014292:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20014296:	fa842783          	lw	a5,-88(s0)
2001429a:	2707a783          	lw	a5,624(a5)
2001429e:	fa442583          	lw	a1,-92(s0)
200142a2:	4551                	li	a0,20
200142a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
200142a6:	0001                	nop
200142a8:	40f6                	lw	ra,92(sp)
200142aa:	42e6                	lw	t0,88(sp)
200142ac:	4356                	lw	t1,84(sp)
200142ae:	43c6                	lw	t2,80(sp)
200142b0:	4436                	lw	s0,76(sp)
200142b2:	4526                	lw	a0,72(sp)
200142b4:	4596                	lw	a1,68(sp)
200142b6:	4606                	lw	a2,64(sp)
200142b8:	56f2                	lw	a3,60(sp)
200142ba:	5762                	lw	a4,56(sp)
200142bc:	57d2                	lw	a5,52(sp)
200142be:	5842                	lw	a6,48(sp)
200142c0:	58b2                	lw	a7,44(sp)
200142c2:	5e22                	lw	t3,40(sp)
200142c4:	5e92                	lw	t4,36(sp)
200142c6:	5f02                	lw	t5,32(sp)
200142c8:	4ff2                	lw	t6,28(sp)
200142ca:	6125                	addi	sp,sp,96
200142cc:	30200073          	mret

200142d0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
200142d0:	711d                	addi	sp,sp,-96
200142d2:	ce86                	sw	ra,92(sp)
200142d4:	cc96                	sw	t0,88(sp)
200142d6:	ca9a                	sw	t1,84(sp)
200142d8:	c89e                	sw	t2,80(sp)
200142da:	c6a2                	sw	s0,76(sp)
200142dc:	c4aa                	sw	a0,72(sp)
200142de:	c2ae                	sw	a1,68(sp)
200142e0:	c0b2                	sw	a2,64(sp)
200142e2:	de36                	sw	a3,60(sp)
200142e4:	dc3a                	sw	a4,56(sp)
200142e6:	da3e                	sw	a5,52(sp)
200142e8:	d842                	sw	a6,48(sp)
200142ea:	d646                	sw	a7,44(sp)
200142ec:	d472                	sw	t3,40(sp)
200142ee:	d276                	sw	t4,36(sp)
200142f0:	d07a                	sw	t5,32(sp)
200142f2:	ce7e                	sw	t6,28(sp)
200142f4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200142f6:	fc2ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200142fa:	872a                	mv	a4,a0
200142fc:	070a                	slli	a4,a4,0x2
200142fe:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014302:	97ba                	add	a5,a5,a4
20014304:	439c                	lw	a5,0(a5)
20014306:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2001430a:	fac42783          	lw	a5,-84(s0)
2001430e:	c78d                	beqz	a5,20014338 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20014310:	fac42503          	lw	a0,-84(s0)
20014314:	f4eff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014318:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2001431c:	fa842783          	lw	a5,-88(s0)
20014320:	2907a783          	lw	a5,656(a5)
20014324:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20014328:	fa842783          	lw	a5,-88(s0)
2001432c:	2887a783          	lw	a5,648(a5)
20014330:	fa442583          	lw	a1,-92(s0)
20014334:	4555                	li	a0,21
20014336:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20014338:	0001                	nop
2001433a:	40f6                	lw	ra,92(sp)
2001433c:	42e6                	lw	t0,88(sp)
2001433e:	4356                	lw	t1,84(sp)
20014340:	43c6                	lw	t2,80(sp)
20014342:	4436                	lw	s0,76(sp)
20014344:	4526                	lw	a0,72(sp)
20014346:	4596                	lw	a1,68(sp)
20014348:	4606                	lw	a2,64(sp)
2001434a:	56f2                	lw	a3,60(sp)
2001434c:	5762                	lw	a4,56(sp)
2001434e:	57d2                	lw	a5,52(sp)
20014350:	5842                	lw	a6,48(sp)
20014352:	58b2                	lw	a7,44(sp)
20014354:	5e22                	lw	t3,40(sp)
20014356:	5e92                	lw	t4,36(sp)
20014358:	5f02                	lw	t5,32(sp)
2001435a:	4ff2                	lw	t6,28(sp)
2001435c:	6125                	addi	sp,sp,96
2001435e:	30200073          	mret

20014362 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20014362:	711d                	addi	sp,sp,-96
20014364:	ce86                	sw	ra,92(sp)
20014366:	cc96                	sw	t0,88(sp)
20014368:	ca9a                	sw	t1,84(sp)
2001436a:	c89e                	sw	t2,80(sp)
2001436c:	c6a2                	sw	s0,76(sp)
2001436e:	c4aa                	sw	a0,72(sp)
20014370:	c2ae                	sw	a1,68(sp)
20014372:	c0b2                	sw	a2,64(sp)
20014374:	de36                	sw	a3,60(sp)
20014376:	dc3a                	sw	a4,56(sp)
20014378:	da3e                	sw	a5,52(sp)
2001437a:	d842                	sw	a6,48(sp)
2001437c:	d646                	sw	a7,44(sp)
2001437e:	d472                	sw	t3,40(sp)
20014380:	d276                	sw	t4,36(sp)
20014382:	d07a                	sw	t5,32(sp)
20014384:	ce7e                	sw	t6,28(sp)
20014386:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014388:	f30ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
2001438c:	872a                	mv	a4,a0
2001438e:	070a                	slli	a4,a4,0x2
20014390:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014394:	97ba                	add	a5,a5,a4
20014396:	439c                	lw	a5,0(a5)
20014398:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2001439c:	fac42783          	lw	a5,-84(s0)
200143a0:	c78d                	beqz	a5,200143ca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200143a2:	fac42503          	lw	a0,-84(s0)
200143a6:	ebcff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200143aa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
200143ae:	fa842783          	lw	a5,-88(s0)
200143b2:	2a87a783          	lw	a5,680(a5)
200143b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
200143ba:	fa842783          	lw	a5,-88(s0)
200143be:	2a07a783          	lw	a5,672(a5)
200143c2:	fa442583          	lw	a1,-92(s0)
200143c6:	4559                	li	a0,22
200143c8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
200143ca:	0001                	nop
200143cc:	40f6                	lw	ra,92(sp)
200143ce:	42e6                	lw	t0,88(sp)
200143d0:	4356                	lw	t1,84(sp)
200143d2:	43c6                	lw	t2,80(sp)
200143d4:	4436                	lw	s0,76(sp)
200143d6:	4526                	lw	a0,72(sp)
200143d8:	4596                	lw	a1,68(sp)
200143da:	4606                	lw	a2,64(sp)
200143dc:	56f2                	lw	a3,60(sp)
200143de:	5762                	lw	a4,56(sp)
200143e0:	57d2                	lw	a5,52(sp)
200143e2:	5842                	lw	a6,48(sp)
200143e4:	58b2                	lw	a7,44(sp)
200143e6:	5e22                	lw	t3,40(sp)
200143e8:	5e92                	lw	t4,36(sp)
200143ea:	5f02                	lw	t5,32(sp)
200143ec:	4ff2                	lw	t6,28(sp)
200143ee:	6125                	addi	sp,sp,96
200143f0:	30200073          	mret

200143f4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
200143f4:	711d                	addi	sp,sp,-96
200143f6:	ce86                	sw	ra,92(sp)
200143f8:	cc96                	sw	t0,88(sp)
200143fa:	ca9a                	sw	t1,84(sp)
200143fc:	c89e                	sw	t2,80(sp)
200143fe:	c6a2                	sw	s0,76(sp)
20014400:	c4aa                	sw	a0,72(sp)
20014402:	c2ae                	sw	a1,68(sp)
20014404:	c0b2                	sw	a2,64(sp)
20014406:	de36                	sw	a3,60(sp)
20014408:	dc3a                	sw	a4,56(sp)
2001440a:	da3e                	sw	a5,52(sp)
2001440c:	d842                	sw	a6,48(sp)
2001440e:	d646                	sw	a7,44(sp)
20014410:	d472                	sw	t3,40(sp)
20014412:	d276                	sw	t4,36(sp)
20014414:	d07a                	sw	t5,32(sp)
20014416:	ce7e                	sw	t6,28(sp)
20014418:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001441a:	e9eff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
2001441e:	872a                	mv	a4,a0
20014420:	070a                	slli	a4,a4,0x2
20014422:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014426:	97ba                	add	a5,a5,a4
20014428:	439c                	lw	a5,0(a5)
2001442a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2001442e:	fac42783          	lw	a5,-84(s0)
20014432:	c78d                	beqz	a5,2001445c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20014434:	fac42503          	lw	a0,-84(s0)
20014438:	e2aff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
2001443c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20014440:	fa842783          	lw	a5,-88(s0)
20014444:	2c07a783          	lw	a5,704(a5)
20014448:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2001444c:	fa842783          	lw	a5,-88(s0)
20014450:	2b87a783          	lw	a5,696(a5)
20014454:	fa442583          	lw	a1,-92(s0)
20014458:	455d                	li	a0,23
2001445a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2001445c:	0001                	nop
2001445e:	40f6                	lw	ra,92(sp)
20014460:	42e6                	lw	t0,88(sp)
20014462:	4356                	lw	t1,84(sp)
20014464:	43c6                	lw	t2,80(sp)
20014466:	4436                	lw	s0,76(sp)
20014468:	4526                	lw	a0,72(sp)
2001446a:	4596                	lw	a1,68(sp)
2001446c:	4606                	lw	a2,64(sp)
2001446e:	56f2                	lw	a3,60(sp)
20014470:	5762                	lw	a4,56(sp)
20014472:	57d2                	lw	a5,52(sp)
20014474:	5842                	lw	a6,48(sp)
20014476:	58b2                	lw	a7,44(sp)
20014478:	5e22                	lw	t3,40(sp)
2001447a:	5e92                	lw	t4,36(sp)
2001447c:	5f02                	lw	t5,32(sp)
2001447e:	4ff2                	lw	t6,28(sp)
20014480:	6125                	addi	sp,sp,96
20014482:	30200073          	mret

20014486 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20014486:	711d                	addi	sp,sp,-96
20014488:	ce86                	sw	ra,92(sp)
2001448a:	cc96                	sw	t0,88(sp)
2001448c:	ca9a                	sw	t1,84(sp)
2001448e:	c89e                	sw	t2,80(sp)
20014490:	c6a2                	sw	s0,76(sp)
20014492:	c4aa                	sw	a0,72(sp)
20014494:	c2ae                	sw	a1,68(sp)
20014496:	c0b2                	sw	a2,64(sp)
20014498:	de36                	sw	a3,60(sp)
2001449a:	dc3a                	sw	a4,56(sp)
2001449c:	da3e                	sw	a5,52(sp)
2001449e:	d842                	sw	a6,48(sp)
200144a0:	d646                	sw	a7,44(sp)
200144a2:	d472                	sw	t3,40(sp)
200144a4:	d276                	sw	t4,36(sp)
200144a6:	d07a                	sw	t5,32(sp)
200144a8:	ce7e                	sw	t6,28(sp)
200144aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200144ac:	e0cff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200144b0:	872a                	mv	a4,a0
200144b2:	070a                	slli	a4,a4,0x2
200144b4:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
200144b8:	97ba                	add	a5,a5,a4
200144ba:	439c                	lw	a5,0(a5)
200144bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
200144c0:	fac42783          	lw	a5,-84(s0)
200144c4:	c78d                	beqz	a5,200144ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200144c6:	fac42503          	lw	a0,-84(s0)
200144ca:	d98ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200144ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
200144d2:	fa842783          	lw	a5,-88(s0)
200144d6:	2d87a783          	lw	a5,728(a5)
200144da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
200144de:	fa842783          	lw	a5,-88(s0)
200144e2:	2d07a783          	lw	a5,720(a5)
200144e6:	fa442583          	lw	a1,-92(s0)
200144ea:	4561                	li	a0,24
200144ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
200144ee:	0001                	nop
200144f0:	40f6                	lw	ra,92(sp)
200144f2:	42e6                	lw	t0,88(sp)
200144f4:	4356                	lw	t1,84(sp)
200144f6:	43c6                	lw	t2,80(sp)
200144f8:	4436                	lw	s0,76(sp)
200144fa:	4526                	lw	a0,72(sp)
200144fc:	4596                	lw	a1,68(sp)
200144fe:	4606                	lw	a2,64(sp)
20014500:	56f2                	lw	a3,60(sp)
20014502:	5762                	lw	a4,56(sp)
20014504:	57d2                	lw	a5,52(sp)
20014506:	5842                	lw	a6,48(sp)
20014508:	58b2                	lw	a7,44(sp)
2001450a:	5e22                	lw	t3,40(sp)
2001450c:	5e92                	lw	t4,36(sp)
2001450e:	5f02                	lw	t5,32(sp)
20014510:	4ff2                	lw	t6,28(sp)
20014512:	6125                	addi	sp,sp,96
20014514:	30200073          	mret

20014518 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20014518:	711d                	addi	sp,sp,-96
2001451a:	ce86                	sw	ra,92(sp)
2001451c:	cc96                	sw	t0,88(sp)
2001451e:	ca9a                	sw	t1,84(sp)
20014520:	c89e                	sw	t2,80(sp)
20014522:	c6a2                	sw	s0,76(sp)
20014524:	c4aa                	sw	a0,72(sp)
20014526:	c2ae                	sw	a1,68(sp)
20014528:	c0b2                	sw	a2,64(sp)
2001452a:	de36                	sw	a3,60(sp)
2001452c:	dc3a                	sw	a4,56(sp)
2001452e:	da3e                	sw	a5,52(sp)
20014530:	d842                	sw	a6,48(sp)
20014532:	d646                	sw	a7,44(sp)
20014534:	d472                	sw	t3,40(sp)
20014536:	d276                	sw	t4,36(sp)
20014538:	d07a                	sw	t5,32(sp)
2001453a:	ce7e                	sw	t6,28(sp)
2001453c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2001453e:	d7aff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
20014542:	872a                	mv	a4,a0
20014544:	070a                	slli	a4,a4,0x2
20014546:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
2001454a:	97ba                	add	a5,a5,a4
2001454c:	439c                	lw	a5,0(a5)
2001454e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20014552:	fac42783          	lw	a5,-84(s0)
20014556:	c78d                	beqz	a5,20014580 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20014558:	fac42503          	lw	a0,-84(s0)
2001455c:	d06ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014560:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20014564:	fa842783          	lw	a5,-88(s0)
20014568:	2f07a783          	lw	a5,752(a5)
2001456c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20014570:	fa842783          	lw	a5,-88(s0)
20014574:	2e87a783          	lw	a5,744(a5)
20014578:	fa442583          	lw	a1,-92(s0)
2001457c:	4565                	li	a0,25
2001457e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20014580:	0001                	nop
20014582:	40f6                	lw	ra,92(sp)
20014584:	42e6                	lw	t0,88(sp)
20014586:	4356                	lw	t1,84(sp)
20014588:	43c6                	lw	t2,80(sp)
2001458a:	4436                	lw	s0,76(sp)
2001458c:	4526                	lw	a0,72(sp)
2001458e:	4596                	lw	a1,68(sp)
20014590:	4606                	lw	a2,64(sp)
20014592:	56f2                	lw	a3,60(sp)
20014594:	5762                	lw	a4,56(sp)
20014596:	57d2                	lw	a5,52(sp)
20014598:	5842                	lw	a6,48(sp)
2001459a:	58b2                	lw	a7,44(sp)
2001459c:	5e22                	lw	t3,40(sp)
2001459e:	5e92                	lw	t4,36(sp)
200145a0:	5f02                	lw	t5,32(sp)
200145a2:	4ff2                	lw	t6,28(sp)
200145a4:	6125                	addi	sp,sp,96
200145a6:	30200073          	mret

200145aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
200145aa:	711d                	addi	sp,sp,-96
200145ac:	ce86                	sw	ra,92(sp)
200145ae:	cc96                	sw	t0,88(sp)
200145b0:	ca9a                	sw	t1,84(sp)
200145b2:	c89e                	sw	t2,80(sp)
200145b4:	c6a2                	sw	s0,76(sp)
200145b6:	c4aa                	sw	a0,72(sp)
200145b8:	c2ae                	sw	a1,68(sp)
200145ba:	c0b2                	sw	a2,64(sp)
200145bc:	de36                	sw	a3,60(sp)
200145be:	dc3a                	sw	a4,56(sp)
200145c0:	da3e                	sw	a5,52(sp)
200145c2:	d842                	sw	a6,48(sp)
200145c4:	d646                	sw	a7,44(sp)
200145c6:	d472                	sw	t3,40(sp)
200145c8:	d276                	sw	t4,36(sp)
200145ca:	d07a                	sw	t5,32(sp)
200145cc:	ce7e                	sw	t6,28(sp)
200145ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200145d0:	ce8ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200145d4:	872a                	mv	a4,a0
200145d6:	070a                	slli	a4,a4,0x2
200145d8:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
200145dc:	97ba                	add	a5,a5,a4
200145de:	439c                	lw	a5,0(a5)
200145e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
200145e4:	fac42783          	lw	a5,-84(s0)
200145e8:	c78d                	beqz	a5,20014612 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200145ea:	fac42503          	lw	a0,-84(s0)
200145ee:	c74ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200145f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
200145f6:	fa842783          	lw	a5,-88(s0)
200145fa:	3087a783          	lw	a5,776(a5)
200145fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20014602:	fa842783          	lw	a5,-88(s0)
20014606:	3007a783          	lw	a5,768(a5)
2001460a:	fa442583          	lw	a1,-92(s0)
2001460e:	4569                	li	a0,26
20014610:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20014612:	0001                	nop
20014614:	40f6                	lw	ra,92(sp)
20014616:	42e6                	lw	t0,88(sp)
20014618:	4356                	lw	t1,84(sp)
2001461a:	43c6                	lw	t2,80(sp)
2001461c:	4436                	lw	s0,76(sp)
2001461e:	4526                	lw	a0,72(sp)
20014620:	4596                	lw	a1,68(sp)
20014622:	4606                	lw	a2,64(sp)
20014624:	56f2                	lw	a3,60(sp)
20014626:	5762                	lw	a4,56(sp)
20014628:	57d2                	lw	a5,52(sp)
2001462a:	5842                	lw	a6,48(sp)
2001462c:	58b2                	lw	a7,44(sp)
2001462e:	5e22                	lw	t3,40(sp)
20014630:	5e92                	lw	t4,36(sp)
20014632:	5f02                	lw	t5,32(sp)
20014634:	4ff2                	lw	t6,28(sp)
20014636:	6125                	addi	sp,sp,96
20014638:	30200073          	mret

2001463c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2001463c:	711d                	addi	sp,sp,-96
2001463e:	ce86                	sw	ra,92(sp)
20014640:	cc96                	sw	t0,88(sp)
20014642:	ca9a                	sw	t1,84(sp)
20014644:	c89e                	sw	t2,80(sp)
20014646:	c6a2                	sw	s0,76(sp)
20014648:	c4aa                	sw	a0,72(sp)
2001464a:	c2ae                	sw	a1,68(sp)
2001464c:	c0b2                	sw	a2,64(sp)
2001464e:	de36                	sw	a3,60(sp)
20014650:	dc3a                	sw	a4,56(sp)
20014652:	da3e                	sw	a5,52(sp)
20014654:	d842                	sw	a6,48(sp)
20014656:	d646                	sw	a7,44(sp)
20014658:	d472                	sw	t3,40(sp)
2001465a:	d276                	sw	t4,36(sp)
2001465c:	d07a                	sw	t5,32(sp)
2001465e:	ce7e                	sw	t6,28(sp)
20014660:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014662:	c56ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
20014666:	872a                	mv	a4,a0
20014668:	070a                	slli	a4,a4,0x2
2001466a:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
2001466e:	97ba                	add	a5,a5,a4
20014670:	439c                	lw	a5,0(a5)
20014672:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20014676:	fac42783          	lw	a5,-84(s0)
2001467a:	c78d                	beqz	a5,200146a4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001467c:	fac42503          	lw	a0,-84(s0)
20014680:	be2ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014684:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20014688:	fa842783          	lw	a5,-88(s0)
2001468c:	3207a783          	lw	a5,800(a5)
20014690:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20014694:	fa842783          	lw	a5,-88(s0)
20014698:	3187a783          	lw	a5,792(a5)
2001469c:	fa442583          	lw	a1,-92(s0)
200146a0:	456d                	li	a0,27
200146a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
200146a4:	0001                	nop
200146a6:	40f6                	lw	ra,92(sp)
200146a8:	42e6                	lw	t0,88(sp)
200146aa:	4356                	lw	t1,84(sp)
200146ac:	43c6                	lw	t2,80(sp)
200146ae:	4436                	lw	s0,76(sp)
200146b0:	4526                	lw	a0,72(sp)
200146b2:	4596                	lw	a1,68(sp)
200146b4:	4606                	lw	a2,64(sp)
200146b6:	56f2                	lw	a3,60(sp)
200146b8:	5762                	lw	a4,56(sp)
200146ba:	57d2                	lw	a5,52(sp)
200146bc:	5842                	lw	a6,48(sp)
200146be:	58b2                	lw	a7,44(sp)
200146c0:	5e22                	lw	t3,40(sp)
200146c2:	5e92                	lw	t4,36(sp)
200146c4:	5f02                	lw	t5,32(sp)
200146c6:	4ff2                	lw	t6,28(sp)
200146c8:	6125                	addi	sp,sp,96
200146ca:	30200073          	mret

200146ce <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
200146ce:	711d                	addi	sp,sp,-96
200146d0:	ce86                	sw	ra,92(sp)
200146d2:	cc96                	sw	t0,88(sp)
200146d4:	ca9a                	sw	t1,84(sp)
200146d6:	c89e                	sw	t2,80(sp)
200146d8:	c6a2                	sw	s0,76(sp)
200146da:	c4aa                	sw	a0,72(sp)
200146dc:	c2ae                	sw	a1,68(sp)
200146de:	c0b2                	sw	a2,64(sp)
200146e0:	de36                	sw	a3,60(sp)
200146e2:	dc3a                	sw	a4,56(sp)
200146e4:	da3e                	sw	a5,52(sp)
200146e6:	d842                	sw	a6,48(sp)
200146e8:	d646                	sw	a7,44(sp)
200146ea:	d472                	sw	t3,40(sp)
200146ec:	d276                	sw	t4,36(sp)
200146ee:	d07a                	sw	t5,32(sp)
200146f0:	ce7e                	sw	t6,28(sp)
200146f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200146f4:	bc4ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200146f8:	872a                	mv	a4,a0
200146fa:	070a                	slli	a4,a4,0x2
200146fc:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014700:	97ba                	add	a5,a5,a4
20014702:	439c                	lw	a5,0(a5)
20014704:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20014708:	fac42783          	lw	a5,-84(s0)
2001470c:	c78d                	beqz	a5,20014736 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2001470e:	fac42503          	lw	a0,-84(s0)
20014712:	b50ff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014716:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2001471a:	fa842783          	lw	a5,-88(s0)
2001471e:	3387a783          	lw	a5,824(a5)
20014722:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20014726:	fa842783          	lw	a5,-88(s0)
2001472a:	3307a783          	lw	a5,816(a5)
2001472e:	fa442583          	lw	a1,-92(s0)
20014732:	4571                	li	a0,28
20014734:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20014736:	0001                	nop
20014738:	40f6                	lw	ra,92(sp)
2001473a:	42e6                	lw	t0,88(sp)
2001473c:	4356                	lw	t1,84(sp)
2001473e:	43c6                	lw	t2,80(sp)
20014740:	4436                	lw	s0,76(sp)
20014742:	4526                	lw	a0,72(sp)
20014744:	4596                	lw	a1,68(sp)
20014746:	4606                	lw	a2,64(sp)
20014748:	56f2                	lw	a3,60(sp)
2001474a:	5762                	lw	a4,56(sp)
2001474c:	57d2                	lw	a5,52(sp)
2001474e:	5842                	lw	a6,48(sp)
20014750:	58b2                	lw	a7,44(sp)
20014752:	5e22                	lw	t3,40(sp)
20014754:	5e92                	lw	t4,36(sp)
20014756:	5f02                	lw	t5,32(sp)
20014758:	4ff2                	lw	t6,28(sp)
2001475a:	6125                	addi	sp,sp,96
2001475c:	30200073          	mret

20014760 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20014760:	711d                	addi	sp,sp,-96
20014762:	ce86                	sw	ra,92(sp)
20014764:	cc96                	sw	t0,88(sp)
20014766:	ca9a                	sw	t1,84(sp)
20014768:	c89e                	sw	t2,80(sp)
2001476a:	c6a2                	sw	s0,76(sp)
2001476c:	c4aa                	sw	a0,72(sp)
2001476e:	c2ae                	sw	a1,68(sp)
20014770:	c0b2                	sw	a2,64(sp)
20014772:	de36                	sw	a3,60(sp)
20014774:	dc3a                	sw	a4,56(sp)
20014776:	da3e                	sw	a5,52(sp)
20014778:	d842                	sw	a6,48(sp)
2001477a:	d646                	sw	a7,44(sp)
2001477c:	d472                	sw	t3,40(sp)
2001477e:	d276                	sw	t4,36(sp)
20014780:	d07a                	sw	t5,32(sp)
20014782:	ce7e                	sw	t6,28(sp)
20014784:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014786:	b32ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
2001478a:	872a                	mv	a4,a0
2001478c:	070a                	slli	a4,a4,0x2
2001478e:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014792:	97ba                	add	a5,a5,a4
20014794:	439c                	lw	a5,0(a5)
20014796:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2001479a:	fac42783          	lw	a5,-84(s0)
2001479e:	c78d                	beqz	a5,200147c8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200147a0:	fac42503          	lw	a0,-84(s0)
200147a4:	abeff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200147a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
200147ac:	fa842783          	lw	a5,-88(s0)
200147b0:	3507a783          	lw	a5,848(a5)
200147b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
200147b8:	fa842783          	lw	a5,-88(s0)
200147bc:	3487a783          	lw	a5,840(a5)
200147c0:	fa442583          	lw	a1,-92(s0)
200147c4:	4575                	li	a0,29
200147c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
200147c8:	0001                	nop
200147ca:	40f6                	lw	ra,92(sp)
200147cc:	42e6                	lw	t0,88(sp)
200147ce:	4356                	lw	t1,84(sp)
200147d0:	43c6                	lw	t2,80(sp)
200147d2:	4436                	lw	s0,76(sp)
200147d4:	4526                	lw	a0,72(sp)
200147d6:	4596                	lw	a1,68(sp)
200147d8:	4606                	lw	a2,64(sp)
200147da:	56f2                	lw	a3,60(sp)
200147dc:	5762                	lw	a4,56(sp)
200147de:	57d2                	lw	a5,52(sp)
200147e0:	5842                	lw	a6,48(sp)
200147e2:	58b2                	lw	a7,44(sp)
200147e4:	5e22                	lw	t3,40(sp)
200147e6:	5e92                	lw	t4,36(sp)
200147e8:	5f02                	lw	t5,32(sp)
200147ea:	4ff2                	lw	t6,28(sp)
200147ec:	6125                	addi	sp,sp,96
200147ee:	30200073          	mret

200147f2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
200147f2:	711d                	addi	sp,sp,-96
200147f4:	ce86                	sw	ra,92(sp)
200147f6:	cc96                	sw	t0,88(sp)
200147f8:	ca9a                	sw	t1,84(sp)
200147fa:	c89e                	sw	t2,80(sp)
200147fc:	c6a2                	sw	s0,76(sp)
200147fe:	c4aa                	sw	a0,72(sp)
20014800:	c2ae                	sw	a1,68(sp)
20014802:	c0b2                	sw	a2,64(sp)
20014804:	de36                	sw	a3,60(sp)
20014806:	dc3a                	sw	a4,56(sp)
20014808:	da3e                	sw	a5,52(sp)
2001480a:	d842                	sw	a6,48(sp)
2001480c:	d646                	sw	a7,44(sp)
2001480e:	d472                	sw	t3,40(sp)
20014810:	d276                	sw	t4,36(sp)
20014812:	d07a                	sw	t5,32(sp)
20014814:	ce7e                	sw	t6,28(sp)
20014816:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014818:	aa0ff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
2001481c:	872a                	mv	a4,a0
2001481e:	070a                	slli	a4,a4,0x2
20014820:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20014824:	97ba                	add	a5,a5,a4
20014826:	439c                	lw	a5,0(a5)
20014828:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2001482c:	fac42783          	lw	a5,-84(s0)
20014830:	c78d                	beqz	a5,2001485a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20014832:	fac42503          	lw	a0,-84(s0)
20014836:	a2cff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
2001483a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2001483e:	fa842783          	lw	a5,-88(s0)
20014842:	3687a783          	lw	a5,872(a5)
20014846:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
2001484a:	fa842783          	lw	a5,-88(s0)
2001484e:	3607a783          	lw	a5,864(a5)
20014852:	fa442583          	lw	a1,-92(s0)
20014856:	4579                	li	a0,30
20014858:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
2001485a:	0001                	nop
2001485c:	40f6                	lw	ra,92(sp)
2001485e:	42e6                	lw	t0,88(sp)
20014860:	4356                	lw	t1,84(sp)
20014862:	43c6                	lw	t2,80(sp)
20014864:	4436                	lw	s0,76(sp)
20014866:	4526                	lw	a0,72(sp)
20014868:	4596                	lw	a1,68(sp)
2001486a:	4606                	lw	a2,64(sp)
2001486c:	56f2                	lw	a3,60(sp)
2001486e:	5762                	lw	a4,56(sp)
20014870:	57d2                	lw	a5,52(sp)
20014872:	5842                	lw	a6,48(sp)
20014874:	58b2                	lw	a7,44(sp)
20014876:	5e22                	lw	t3,40(sp)
20014878:	5e92                	lw	t4,36(sp)
2001487a:	5f02                	lw	t5,32(sp)
2001487c:	4ff2                	lw	t6,28(sp)
2001487e:	6125                	addi	sp,sp,96
20014880:	30200073          	mret

20014884 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20014884:	711d                	addi	sp,sp,-96
20014886:	ce86                	sw	ra,92(sp)
20014888:	cc96                	sw	t0,88(sp)
2001488a:	ca9a                	sw	t1,84(sp)
2001488c:	c89e                	sw	t2,80(sp)
2001488e:	c6a2                	sw	s0,76(sp)
20014890:	c4aa                	sw	a0,72(sp)
20014892:	c2ae                	sw	a1,68(sp)
20014894:	c0b2                	sw	a2,64(sp)
20014896:	de36                	sw	a3,60(sp)
20014898:	dc3a                	sw	a4,56(sp)
2001489a:	da3e                	sw	a5,52(sp)
2001489c:	d842                	sw	a6,48(sp)
2001489e:	d646                	sw	a7,44(sp)
200148a0:	d472                	sw	t3,40(sp)
200148a2:	d276                	sw	t4,36(sp)
200148a4:	d07a                	sw	t5,32(sp)
200148a6:	ce7e                	sw	t6,28(sp)
200148a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200148aa:	a0eff0ef          	jal	ra,20013ab8 <__metal_myhart_id>
200148ae:	872a                	mv	a4,a0
200148b0:	070a                	slli	a4,a4,0x2
200148b2:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
200148b6:	97ba                	add	a5,a5,a4
200148b8:	439c                	lw	a5,0(a5)
200148ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
200148be:	fac42783          	lw	a5,-84(s0)
200148c2:	c78d                	beqz	a5,200148ec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
200148c4:	fac42503          	lw	a0,-84(s0)
200148c8:	99aff0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200148cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
200148d0:	fa842783          	lw	a5,-88(s0)
200148d4:	3807a783          	lw	a5,896(a5)
200148d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
200148dc:	fa842783          	lw	a5,-88(s0)
200148e0:	3787a783          	lw	a5,888(a5)
200148e4:	fa442583          	lw	a1,-92(s0)
200148e8:	457d                	li	a0,31
200148ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
200148ec:	0001                	nop
200148ee:	40f6                	lw	ra,92(sp)
200148f0:	42e6                	lw	t0,88(sp)
200148f2:	4356                	lw	t1,84(sp)
200148f4:	43c6                	lw	t2,80(sp)
200148f6:	4436                	lw	s0,76(sp)
200148f8:	4526                	lw	a0,72(sp)
200148fa:	4596                	lw	a1,68(sp)
200148fc:	4606                	lw	a2,64(sp)
200148fe:	56f2                	lw	a3,60(sp)
20014900:	5762                	lw	a4,56(sp)
20014902:	57d2                	lw	a5,52(sp)
20014904:	5842                	lw	a6,48(sp)
20014906:	58b2                	lw	a7,44(sp)
20014908:	5e22                	lw	t3,40(sp)
2001490a:	5e92                	lw	t4,36(sp)
2001490c:	5f02                	lw	t5,32(sp)
2001490e:	4ff2                	lw	t6,28(sp)
20014910:	6125                	addi	sp,sp,96
20014912:	30200073          	mret

20014916 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20014916:	1101                	addi	sp,sp,-32
20014918:	ce22                	sw	s0,28(sp)
2001491a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2001491c:	305027f3          	csrr	a5,mtvec
20014920:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20014924:	fec42783          	lw	a5,-20(s0)
20014928:	03f7f793          	andi	a5,a5,63
2001492c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20014930:	fec42703          	lw	a4,-20(s0)
20014934:	4789                	li	a5,2
20014936:	00f70d63          	beq	a4,a5,20014950 <__metal_controller_interrupt_vector_mode+0x3a>
2001493a:	fec42703          	lw	a4,-20(s0)
2001493e:	478d                	li	a5,3
20014940:	00f70a63          	beq	a4,a5,20014954 <__metal_controller_interrupt_vector_mode+0x3e>
20014944:	fec42703          	lw	a4,-20(s0)
20014948:	4785                	li	a5,1
2001494a:	00f70763          	beq	a4,a5,20014958 <__metal_controller_interrupt_vector_mode+0x42>
2001494e:	a039                	j	2001495c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20014950:	478d                	li	a5,3
20014952:	a031                	j	2001495e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20014954:	4791                	li	a5,4
20014956:	a021                	j	2001495e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20014958:	4785                	li	a5,1
2001495a:	a011                	j	2001495e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2001495c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2001495e:	853e                	mv	a0,a5
20014960:	4472                	lw	s0,28(sp)
20014962:	6105                	addi	sp,sp,32
20014964:	8082                	ret

20014966 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20014966:	7179                	addi	sp,sp,-48
20014968:	d622                	sw	s0,44(sp)
2001496a:	1800                	addi	s0,sp,48
2001496c:	fca42e23          	sw	a0,-36(s0)
20014970:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20014974:	305027f3          	csrr	a5,mtvec
20014978:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2001497c:	fec42783          	lw	a5,-20(s0)
20014980:	fc07f793          	andi	a5,a5,-64
20014984:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20014988:	fd842783          	lw	a5,-40(s0)
2001498c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20014990:	fdc42703          	lw	a4,-36(s0)
20014994:	4791                	li	a5,4
20014996:	06e7e063          	bltu	a5,a4,200149f6 <__metal_controller_interrupt_vector+0x90>
2001499a:	fdc42783          	lw	a5,-36(s0)
2001499e:	00279713          	slli	a4,a5,0x2
200149a2:	200177b7          	lui	a5,0x20017
200149a6:	6b478793          	addi	a5,a5,1716 # 200176b4 <__metal_driver_vtable_riscv_clint0+0x4c>
200149aa:	97ba                	add	a5,a5,a4
200149ac:	439c                	lw	a5,0(a5)
200149ae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
200149b0:	fe842783          	lw	a5,-24(s0)
200149b4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
200149b8:	fec42783          	lw	a5,-20(s0)
200149bc:	0027e793          	ori	a5,a5,2
200149c0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
200149c4:	a80d                	j	200149f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
200149c6:	fe842783          	lw	a5,-24(s0)
200149ca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
200149ce:	fec42783          	lw	a5,-20(s0)
200149d2:	0037e793          	ori	a5,a5,3
200149d6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
200149da:	a831                	j	200149f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
200149dc:	fe842783          	lw	a5,-24(s0)
200149e0:	0017e793          	ori	a5,a5,1
200149e4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
200149e8:	a039                	j	200149f6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
200149ea:	fe842783          	lw	a5,-24(s0)
200149ee:	9bf1                	andi	a5,a5,-4
200149f0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
200149f4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
200149f6:	0001                	nop
200149f8:	5432                	lw	s0,44(sp)
200149fa:	6145                	addi	sp,sp,48
200149fc:	8082                	ret

200149fe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
200149fe:	1101                	addi	sp,sp,-32
20014a00:	ce22                	sw	s0,28(sp)
20014a02:	1000                	addi	s0,sp,32
20014a04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20014a08:	fec42783          	lw	a5,-20(s0)
20014a0c:	17f5                	addi	a5,a5,-3
20014a0e:	4771                	li	a4,28
20014a10:	00f76d63          	bltu	a4,a5,20014a2a <__metal_valid_interrupt_id+0x2c>
20014a14:	00279713          	slli	a4,a5,0x2
20014a18:	200177b7          	lui	a5,0x20017
20014a1c:	6c878793          	addi	a5,a5,1736 # 200176c8 <__metal_driver_vtable_riscv_clint0+0x60>
20014a20:	97ba                	add	a5,a5,a4
20014a22:	439c                	lw	a5,0(a5)
20014a24:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20014a26:	4785                	li	a5,1
20014a28:	a019                	j	20014a2e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20014a2a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20014a2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20014a2e:	853e                	mv	a0,a5
20014a30:	4472                	lw	s0,28(sp)
20014a32:	6105                	addi	sp,sp,32
20014a34:	8082                	ret

20014a36 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20014a36:	7179                	addi	sp,sp,-48
20014a38:	d606                	sw	ra,44(sp)
20014a3a:	d422                	sw	s0,40(sp)
20014a3c:	1800                	addi	s0,sp,48
20014a3e:	fca42e23          	sw	a0,-36(s0)
20014a42:	fcb42c23          	sw	a1,-40(s0)
20014a46:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20014a4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20014a4e:	fdc42783          	lw	a5,-36(s0)
20014a52:	e399                	bnez	a5,20014a58 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20014a54:	57fd                	li	a5,-1
20014a56:	a849                	j	20014ae8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20014a58:	fd842703          	lw	a4,-40(s0)
20014a5c:	47fd                	li	a5,31
20014a5e:	08e7e063          	bltu	a5,a4,20014ade <__metal_local_interrupt_enable+0xa8>
20014a62:	fd842783          	lw	a5,-40(s0)
20014a66:	00279713          	slli	a4,a5,0x2
20014a6a:	200177b7          	lui	a5,0x20017
20014a6e:	73c78793          	addi	a5,a5,1852 # 2001773c <__metal_driver_vtable_riscv_clint0+0xd4>
20014a72:	97ba                	add	a5,a5,a4
20014a74:	439c                	lw	a5,0(a5)
20014a76:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20014a78:	fd442783          	lw	a5,-44(s0)
20014a7c:	c781                	beqz	a5,20014a84 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20014a7e:	854ff0ef          	jal	ra,20013ad2 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20014a82:	a08d                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20014a84:	866ff0ef          	jal	ra,20013aea <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20014a88:	a8b1                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20014a8a:	fd442783          	lw	a5,-44(s0)
20014a8e:	c781                	beqz	a5,20014a96 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20014a90:	872ff0ef          	jal	ra,20013b02 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20014a94:	a881                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20014a96:	884ff0ef          	jal	ra,20013b1a <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20014a9a:	a0a9                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20014a9c:	fd442783          	lw	a5,-44(s0)
20014aa0:	c781                	beqz	a5,20014aa8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20014aa2:	890ff0ef          	jal	ra,20013b32 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20014aa6:	a83d                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20014aa8:	8a4ff0ef          	jal	ra,20013b4c <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20014aac:	a825                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20014aae:	fd442783          	lw	a5,-44(s0)
20014ab2:	c781                	beqz	a5,20014aba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20014ab4:	8b2ff0ef          	jal	ra,20013b66 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20014ab8:	a035                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20014aba:	8c8ff0ef          	jal	ra,20013b82 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20014abe:	a01d                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20014ac0:	fd442783          	lw	a5,-44(s0)
20014ac4:	c799                	beqz	a5,20014ad2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20014ac6:	fd842783          	lw	a5,-40(s0)
20014aca:	853e                	mv	a0,a5
20014acc:	8d2ff0ef          	jal	ra,20013b9e <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20014ad0:	a811                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20014ad2:	fd842783          	lw	a5,-40(s0)
20014ad6:	853e                	mv	a0,a5
20014ad8:	8f2ff0ef          	jal	ra,20013bca <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20014adc:	a021                	j	20014ae4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20014ade:	57fd                	li	a5,-1
20014ae0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20014ae4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20014ae8:	853e                	mv	a0,a5
20014aea:	50b2                	lw	ra,44(sp)
20014aec:	5422                	lw	s0,40(sp)
20014aee:	6145                	addi	sp,sp,48
20014af0:	8082                	ret

20014af2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20014af2:	7179                	addi	sp,sp,-48
20014af4:	d622                	sw	s0,44(sp)
20014af6:	1800                	addi	s0,sp,48
20014af8:	fca42e23          	sw	a0,-36(s0)
20014afc:	fcb42c23          	sw	a1,-40(s0)
20014b00:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20014b04:	fdc42783          	lw	a5,-36(s0)
20014b08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20014b0c:	fd842703          	lw	a4,-40(s0)
20014b10:	47ad                	li	a5,11
20014b12:	02e7c263          	blt	a5,a4,20014b36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20014b16:	fd442783          	lw	a5,-44(s0)
20014b1a:	cf91                	beqz	a5,20014b36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20014b1c:	fec42703          	lw	a4,-20(s0)
20014b20:	fd842783          	lw	a5,-40(s0)
20014b24:	0e078793          	addi	a5,a5,224
20014b28:	078a                	slli	a5,a5,0x2
20014b2a:	97ba                	add	a5,a5,a4
20014b2c:	fd442703          	lw	a4,-44(s0)
20014b30:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20014b32:	4781                	li	a5,0
20014b34:	a011                	j	20014b38 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20014b36:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20014b38:	853e                	mv	a0,a5
20014b3a:	5432                	lw	s0,44(sp)
20014b3c:	6145                	addi	sp,sp,48
20014b3e:	8082                	ret

20014b40 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20014b40:	7139                	addi	sp,sp,-64
20014b42:	de06                	sw	ra,60(sp)
20014b44:	dc22                	sw	s0,56(sp)
20014b46:	0080                	addi	s0,sp,64
20014b48:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20014b4c:	fcc42783          	lw	a5,-52(s0)
20014b50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20014b54:	fe442783          	lw	a5,-28(s0)
20014b58:	43dc                	lw	a5,4(a5)
20014b5a:	10079e63          	bnez	a5,20014c76 <__metal_driver_riscv_cpu_controller_interrupt_init+0x136>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20014b5e:	57fd                	li	a5,-1
20014b60:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20014b64:	57fd                	li	a5,-1
20014b66:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20014b6a:	301027f3          	csrr	a5,misa
20014b6e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20014b72:	fe042703          	lw	a4,-32(s0)
20014b76:	6789                	lui	a5,0x2
20014b78:	8ff9                	and	a5,a5,a4
20014b7a:	e799                	bnez	a5,20014b88 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20014b7c:	fe042703          	lw	a4,-32(s0)
20014b80:	000407b7          	lui	a5,0x40
20014b84:	8ff9                	and	a5,a5,a4
20014b86:	c799                	beqz	a5,20014b94 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20014b88:	57fd                	li	a5,-1
20014b8a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20014b8e:	57fd                	li	a5,-1
20014b90:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20014b94:	fe042703          	lw	a4,-32(s0)
20014b98:	000407b7          	lui	a5,0x40
20014b9c:	8ff9                	and	a5,a5,a4
20014b9e:	c781                	beqz	a5,20014ba6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20014ba0:	57fd                	li	a5,-1
20014ba2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20014ba6:	fe042623          	sw	zero,-20(s0)
20014baa:	a0b9                	j	20014bf8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20014bac:	fe442683          	lw	a3,-28(s0)
20014bb0:	fec42703          	lw	a4,-20(s0)
20014bb4:	87ba                	mv	a5,a4
20014bb6:	0786                	slli	a5,a5,0x1
20014bb8:	97ba                	add	a5,a5,a4
20014bba:	078e                	slli	a5,a5,0x3
20014bbc:	97b6                	add	a5,a5,a3
20014bbe:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20014bc2:	fe442683          	lw	a3,-28(s0)
20014bc6:	fec42703          	lw	a4,-20(s0)
20014bca:	87ba                	mv	a5,a4
20014bcc:	0786                	slli	a5,a5,0x1
20014bce:	97ba                	add	a5,a5,a4
20014bd0:	078e                	slli	a5,a5,0x3
20014bd2:	97b6                	add	a5,a5,a3
20014bd4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20014bd8:	fe442683          	lw	a3,-28(s0)
20014bdc:	fec42703          	lw	a4,-20(s0)
20014be0:	87ba                	mv	a5,a4
20014be2:	0786                	slli	a5,a5,0x1
20014be4:	97ba                	add	a5,a5,a4
20014be6:	078e                	slli	a5,a5,0x3
20014be8:	97b6                	add	a5,a5,a3
20014bea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20014bee:	fec42783          	lw	a5,-20(s0)
20014bf2:	0785                	addi	a5,a5,1
20014bf4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20014bf8:	fec42703          	lw	a4,-20(s0)
20014bfc:	47fd                	li	a5,31
20014bfe:	fae7d7e3          	bge	a5,a4,20014bac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20014c02:	fe042423          	sw	zero,-24(s0)
20014c06:	a01d                	j	20014c2c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20014c08:	fe442703          	lw	a4,-28(s0)
20014c0c:	fe842783          	lw	a5,-24(s0)
20014c10:	0e078793          	addi	a5,a5,224
20014c14:	078a                	slli	a5,a5,0x2
20014c16:	97ba                	add	a5,a5,a4
20014c18:	20014737          	lui	a4,0x20014
20014c1c:	bf670713          	addi	a4,a4,-1034 # 20013bf6 <__metal_default_exception_handler>
20014c20:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20014c22:	fe842783          	lw	a5,-24(s0)
20014c26:	0785                	addi	a5,a5,1
20014c28:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20014c2c:	fe842703          	lw	a4,-24(s0)
20014c30:	47ad                	li	a5,11
20014c32:	fce7dbe3          	bge	a5,a4,20014c08 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20014c36:	200147b7          	lui	a5,0x20014
20014c3a:	e8078593          	addi	a1,a5,-384 # 20013e80 <__metal_exception_handler>
20014c3e:	4501                	li	a0,0
20014c40:	d27ff0ef          	jal	ra,20014966 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20014c44:	301027f3          	csrr	a5,misa
20014c48:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20014c4c:	fdc42703          	lw	a4,-36(s0)
20014c50:	67c1                	lui	a5,0x10
20014c52:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20014c56:	8ff9                	and	a5,a5,a4
20014c58:	cb99                	beqz	a5,20014c6e <__metal_driver_riscv_cpu_controller_interrupt_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20014c5a:	300027f3          	csrr	a5,mstatus
20014c5e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20014c62:	fdc42703          	lw	a4,-36(s0)
20014c66:	6789                	lui	a5,0x2
20014c68:	8fd9                	or	a5,a5,a4
20014c6a:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20014c6e:	fe442783          	lw	a5,-28(s0)
20014c72:	4705                	li	a4,1
20014c74:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20014c76:	0001                	nop
20014c78:	50f2                	lw	ra,60(sp)
20014c7a:	5462                	lw	s0,56(sp)
20014c7c:	6121                	addi	sp,sp,64
20014c7e:	8082                	ret

20014c80 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20014c80:	7179                	addi	sp,sp,-48
20014c82:	d606                	sw	ra,44(sp)
20014c84:	d422                	sw	s0,40(sp)
20014c86:	1800                	addi	s0,sp,48
20014c88:	fca42e23          	sw	a0,-36(s0)
20014c8c:	fcb42c23          	sw	a1,-40(s0)
20014c90:	fcc42a23          	sw	a2,-44(s0)
20014c94:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20014c98:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20014c9c:	fdc42783          	lw	a5,-36(s0)
20014ca0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20014ca4:	fd842503          	lw	a0,-40(s0)
20014ca8:	d57ff0ef          	jal	ra,200149fe <__metal_valid_interrupt_id>
20014cac:	87aa                	mv	a5,a0
20014cae:	e399                	bnez	a5,20014cb4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20014cb0:	57d5                	li	a5,-11
20014cb2:	aa11                	j	20014dc6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20014cb4:	fd442783          	lw	a5,-44(s0)
20014cb8:	cf85                	beqz	a5,20014cf0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20014cba:	fe842683          	lw	a3,-24(s0)
20014cbe:	fd842703          	lw	a4,-40(s0)
20014cc2:	87ba                	mv	a5,a4
20014cc4:	0786                	slli	a5,a5,0x1
20014cc6:	97ba                	add	a5,a5,a4
20014cc8:	078e                	slli	a5,a5,0x3
20014cca:	97b6                	add	a5,a5,a3
20014ccc:	fd442703          	lw	a4,-44(s0)
20014cd0:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20014cd4:	fe842683          	lw	a3,-24(s0)
20014cd8:	fd842703          	lw	a4,-40(s0)
20014cdc:	87ba                	mv	a5,a4
20014cde:	0786                	slli	a5,a5,0x1
20014ce0:	97ba                	add	a5,a5,a4
20014ce2:	078e                	slli	a5,a5,0x3
20014ce4:	97b6                	add	a5,a5,a3
20014ce6:	fd042703          	lw	a4,-48(s0)
20014cea:	08e7ac23          	sw	a4,152(a5)
20014cee:	a8d1                	j	20014dc2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20014cf0:	fd842783          	lw	a5,-40(s0)
20014cf4:	17f5                	addi	a5,a5,-3
20014cf6:	4771                	li	a4,28
20014cf8:	0cf76263          	bltu	a4,a5,20014dbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x13c>
20014cfc:	00279713          	slli	a4,a5,0x2
20014d00:	200177b7          	lui	a5,0x20017
20014d04:	7bc78793          	addi	a5,a5,1980 # 200177bc <__metal_driver_vtable_riscv_clint0+0x154>
20014d08:	97ba                	add	a5,a5,a4
20014d0a:	439c                	lw	a5,0(a5)
20014d0c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20014d0e:	fe842683          	lw	a3,-24(s0)
20014d12:	fd842703          	lw	a4,-40(s0)
20014d16:	87ba                	mv	a5,a4
20014d18:	0786                	slli	a5,a5,0x1
20014d1a:	97ba                	add	a5,a5,a4
20014d1c:	078e                	slli	a5,a5,0x3
20014d1e:	97b6                	add	a5,a5,a3
20014d20:	20014737          	lui	a4,0x20014
20014d24:	ce270713          	addi	a4,a4,-798 # 20013ce2 <__metal_default_sw_handler>
20014d28:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20014d2c:	fe842683          	lw	a3,-24(s0)
20014d30:	fd842703          	lw	a4,-40(s0)
20014d34:	87ba                	mv	a5,a4
20014d36:	0786                	slli	a5,a5,0x1
20014d38:	97ba                	add	a5,a5,a4
20014d3a:	078e                	slli	a5,a5,0x3
20014d3c:	97b6                	add	a5,a5,a3
20014d3e:	fd042703          	lw	a4,-48(s0)
20014d42:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20014d46:	a8b5                	j	20014dc2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20014d48:	fe842683          	lw	a3,-24(s0)
20014d4c:	fd842703          	lw	a4,-40(s0)
20014d50:	87ba                	mv	a5,a4
20014d52:	0786                	slli	a5,a5,0x1
20014d54:	97ba                	add	a5,a5,a4
20014d56:	078e                	slli	a5,a5,0x3
20014d58:	97b6                	add	a5,a5,a3
20014d5a:	20014737          	lui	a4,0x20014
20014d5e:	dd470713          	addi	a4,a4,-556 # 20013dd4 <__metal_default_timer_handler>
20014d62:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20014d66:	fe842683          	lw	a3,-24(s0)
20014d6a:	fd842703          	lw	a4,-40(s0)
20014d6e:	87ba                	mv	a5,a4
20014d70:	0786                	slli	a5,a5,0x1
20014d72:	97ba                	add	a5,a5,a4
20014d74:	078e                	slli	a5,a5,0x3
20014d76:	97b6                	add	a5,a5,a3
20014d78:	fd042703          	lw	a4,-48(s0)
20014d7c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20014d80:	a089                	j	20014dc2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20014d82:	fe842683          	lw	a3,-24(s0)
20014d86:	fd842703          	lw	a4,-40(s0)
20014d8a:	87ba                	mv	a5,a4
20014d8c:	0786                	slli	a5,a5,0x1
20014d8e:	97ba                	add	a5,a5,a4
20014d90:	078e                	slli	a5,a5,0x3
20014d92:	97b6                	add	a5,a5,a3
20014d94:	20014737          	lui	a4,0x20014
20014d98:	c0e70713          	addi	a4,a4,-1010 # 20013c0e <__metal_default_interrupt_handler>
20014d9c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20014da0:	fe842683          	lw	a3,-24(s0)
20014da4:	fd842703          	lw	a4,-40(s0)
20014da8:	87ba                	mv	a5,a4
20014daa:	0786                	slli	a5,a5,0x1
20014dac:	97ba                	add	a5,a5,a4
20014dae:	078e                	slli	a5,a5,0x3
20014db0:	97b6                	add	a5,a5,a3
20014db2:	fd042703          	lw	a4,-48(s0)
20014db6:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20014dba:	a021                	j	20014dc2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20014dbc:	57d1                	li	a5,-12
20014dbe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20014dc2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20014dc6:	853e                	mv	a0,a5
20014dc8:	50b2                	lw	ra,44(sp)
20014dca:	5422                	lw	s0,40(sp)
20014dcc:	6145                	addi	sp,sp,48
20014dce:	8082                	ret

20014dd0 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20014dd0:	1101                	addi	sp,sp,-32
20014dd2:	ce06                	sw	ra,28(sp)
20014dd4:	cc22                	sw	s0,24(sp)
20014dd6:	1000                	addi	s0,sp,32
20014dd8:	fea42623          	sw	a0,-20(s0)
20014ddc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20014de0:	fe842783          	lw	a5,-24(s0)
20014de4:	4605                	li	a2,1
20014de6:	85be                	mv	a1,a5
20014de8:	fec42503          	lw	a0,-20(s0)
20014dec:	c4bff0ef          	jal	ra,20014a36 <__metal_local_interrupt_enable>
20014df0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20014df2:	853e                	mv	a0,a5
20014df4:	40f2                	lw	ra,28(sp)
20014df6:	4462                	lw	s0,24(sp)
20014df8:	6105                	addi	sp,sp,32
20014dfa:	8082                	ret

20014dfc <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20014dfc:	1101                	addi	sp,sp,-32
20014dfe:	ce06                	sw	ra,28(sp)
20014e00:	cc22                	sw	s0,24(sp)
20014e02:	1000                	addi	s0,sp,32
20014e04:	fea42623          	sw	a0,-20(s0)
20014e08:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20014e0c:	fe842783          	lw	a5,-24(s0)
20014e10:	4601                	li	a2,0
20014e12:	85be                	mv	a1,a5
20014e14:	fec42503          	lw	a0,-20(s0)
20014e18:	c1fff0ef          	jal	ra,20014a36 <__metal_local_interrupt_enable>
20014e1c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20014e1e:	853e                	mv	a0,a5
20014e20:	40f2                	lw	ra,28(sp)
20014e22:	4462                	lw	s0,24(sp)
20014e24:	6105                	addi	sp,sp,32
20014e26:	8082                	ret

20014e28 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20014e28:	1101                	addi	sp,sp,-32
20014e2a:	ce06                	sw	ra,28(sp)
20014e2c:	cc22                	sw	s0,24(sp)
20014e2e:	1000                	addi	s0,sp,32
20014e30:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20014e34:	ae3ff0ef          	jal	ra,20014916 <__metal_controller_interrupt_vector_mode>
20014e38:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20014e3a:	853e                	mv	a0,a5
20014e3c:	40f2                	lw	ra,28(sp)
20014e3e:	4462                	lw	s0,24(sp)
20014e40:	6105                	addi	sp,sp,32
20014e42:	8082                	ret

20014e44 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20014e44:	7179                	addi	sp,sp,-48
20014e46:	d606                	sw	ra,44(sp)
20014e48:	d422                	sw	s0,40(sp)
20014e4a:	1800                	addi	s0,sp,48
20014e4c:	fca42e23          	sw	a0,-36(s0)
20014e50:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20014e54:	fdc42783          	lw	a5,-36(s0)
20014e58:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20014e5c:	fd842783          	lw	a5,-40(s0)
20014e60:	eb99                	bnez	a5,20014e76 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20014e62:	200147b7          	lui	a5,0x20014
20014e66:	e8078593          	addi	a1,a5,-384 # 20013e80 <__metal_exception_handler>
20014e6a:	fd842503          	lw	a0,-40(s0)
20014e6e:	af9ff0ef          	jal	ra,20014966 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20014e72:	4781                	li	a5,0
20014e74:	a00d                	j	20014e96 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20014e76:	fd842703          	lw	a4,-40(s0)
20014e7a:	4785                	li	a5,1
20014e7c:	00f71c63          	bne	a4,a5,20014e94 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20014e80:	200177b7          	lui	a5,0x20017
20014e84:	38078593          	addi	a1,a5,896 # 20017380 <__metal_vector_table>
20014e88:	fd842503          	lw	a0,-40(s0)
20014e8c:	adbff0ef          	jal	ra,20014966 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20014e90:	4781                	li	a5,0
20014e92:	a011                	j	20014e96 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20014e94:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20014e96:	853e                	mv	a0,a5
20014e98:	50b2                	lw	ra,44(sp)
20014e9a:	5422                	lw	s0,40(sp)
20014e9c:	6145                	addi	sp,sp,48
20014e9e:	8082                	ret

20014ea0 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20014ea0:	1101                	addi	sp,sp,-32
20014ea2:	ce22                	sw	s0,28(sp)
20014ea4:	1000                	addi	s0,sp,32
20014ea6:	fea42623          	sw	a0,-20(s0)
20014eaa:	feb42423          	sw	a1,-24(s0)
20014eae:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20014eb2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20014eb4:	853e                	mv	a0,a5
20014eb6:	4472                	lw	s0,28(sp)
20014eb8:	6105                	addi	sp,sp,32
20014eba:	8082                	ret

20014ebc <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20014ebc:	7139                	addi	sp,sp,-64
20014ebe:	de22                	sw	s0,60(sp)
20014ec0:	0080                	addi	s0,sp,64
20014ec2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20014ec6:	4301                	li	t1,0
20014ec8:	4381                	li	t2,0
20014eca:	fe642423          	sw	t1,-24(s0)
20014ece:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20014ed2:	b8002573          	csrr	a0,mcycleh
20014ed6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20014eda:	b0002573          	csrr	a0,mcycle
20014ede:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20014ee2:	b8002573          	csrr	a0,mcycleh
20014ee6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20014eea:	fe442883          	lw	a7,-28(s0)
20014eee:	fdc42503          	lw	a0,-36(s0)
20014ef2:	02a89563          	bne	a7,a0,20014f1c <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20014ef6:	fe442503          	lw	a0,-28(s0)
20014efa:	85aa                	mv	a1,a0
20014efc:	4601                	li	a2,0
20014efe:	00059813          	slli	a6,a1,0x0
20014f02:	4781                	li	a5,0
20014f04:	fe042603          	lw	a2,-32(s0)
20014f08:	86b2                	mv	a3,a2
20014f0a:	4701                	li	a4,0
20014f0c:	00d7e633          	or	a2,a5,a3
20014f10:	fec42423          	sw	a2,-24(s0)
20014f14:	00e867b3          	or	a5,a6,a4
20014f18:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20014f1c:	fe842783          	lw	a5,-24(s0)
20014f20:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20014f24:	853e                	mv	a0,a5
20014f26:	85c2                	mv	a1,a6
20014f28:	5472                	lw	s0,60(sp)
20014f2a:	6121                	addi	sp,sp,64
20014f2c:	8082                	ret

20014f2e <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20014f2e:	7179                	addi	sp,sp,-48
20014f30:	d606                	sw	ra,44(sp)
20014f32:	d422                	sw	s0,40(sp)
20014f34:	d24a                	sw	s2,36(sp)
20014f36:	d04e                	sw	s3,32(sp)
20014f38:	1800                	addi	s0,sp,48
20014f3a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20014f3e:	fdc42783          	lw	a5,-36(s0)
20014f42:	e781                	bnez	a5,20014f4a <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20014f44:	4901                	li	s2,0
20014f46:	4981                	li	s3,0
20014f48:	a821                	j	20014f60 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20014f4a:	fdc42503          	lw	a0,-36(s0)
20014f4e:	aebfe0ef          	jal	ra,20013a38 <__metal_driver_cpu_timebase>
20014f52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20014f56:	fec42783          	lw	a5,-20(s0)
20014f5a:	893e                	mv	s2,a5
20014f5c:	87fd                	srai	a5,a5,0x1f
20014f5e:	89be                	mv	s3,a5
20014f60:	87ca                	mv	a5,s2
20014f62:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20014f64:	853e                	mv	a0,a5
20014f66:	85c2                	mv	a1,a6
20014f68:	50b2                	lw	ra,44(sp)
20014f6a:	5422                	lw	s0,40(sp)
20014f6c:	5912                	lw	s2,36(sp)
20014f6e:	5982                	lw	s3,32(sp)
20014f70:	6145                	addi	sp,sp,48
20014f72:	8082                	ret

20014f74 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20014f74:	7179                	addi	sp,sp,-48
20014f76:	d606                	sw	ra,44(sp)
20014f78:	d422                	sw	s0,40(sp)
20014f7a:	1800                	addi	s0,sp,48
20014f7c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20014f80:	4781                	li	a5,0
20014f82:	4801                	li	a6,0
20014f84:	fef42023          	sw	a5,-32(s0)
20014f88:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20014f8c:	fdc42503          	lw	a0,-36(s0)
20014f90:	ad3fe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014f94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20014f98:	fec42783          	lw	a5,-20(s0)
20014f9c:	c78d                	beqz	a5,20014fc6 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20014f9e:	fec42783          	lw	a5,-20(s0)
20014fa2:	13c7a783          	lw	a5,316(a5)
20014fa6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20014faa:	fe842783          	lw	a5,-24(s0)
20014fae:	cf81                	beqz	a5,20014fc6 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20014fb0:	fe842783          	lw	a5,-24(s0)
20014fb4:	439c                	lw	a5,0(a5)
20014fb6:	43f8                	lw	a4,68(a5)
20014fb8:	fe040793          	addi	a5,s0,-32
20014fbc:	863e                	mv	a2,a5
20014fbe:	4585                	li	a1,1
20014fc0:	fe842503          	lw	a0,-24(s0)
20014fc4:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20014fc6:	fe042783          	lw	a5,-32(s0)
20014fca:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20014fce:	853e                	mv	a0,a5
20014fd0:	85c2                	mv	a1,a6
20014fd2:	50b2                	lw	ra,44(sp)
20014fd4:	5422                	lw	s0,40(sp)
20014fd6:	6145                	addi	sp,sp,48
20014fd8:	8082                	ret

20014fda <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20014fda:	7179                	addi	sp,sp,-48
20014fdc:	d606                	sw	ra,44(sp)
20014fde:	d422                	sw	s0,40(sp)
20014fe0:	d226                	sw	s1,36(sp)
20014fe2:	1800                	addi	s0,sp,48
20014fe4:	fca42e23          	sw	a0,-36(s0)
20014fe8:	fcb42823          	sw	a1,-48(s0)
20014fec:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20014ff0:	57fd                	li	a5,-1
20014ff2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20014ff6:	fdc42503          	lw	a0,-36(s0)
20014ffa:	a69fe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20014ffe:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20015002:	fe842783          	lw	a5,-24(s0)
20015006:	cf8d                	beqz	a5,20015040 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20015008:	fe842783          	lw	a5,-24(s0)
2001500c:	13c7a783          	lw	a5,316(a5)
20015010:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20015014:	fe442783          	lw	a5,-28(s0)
20015018:	c785                	beqz	a5,20015040 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2001501a:	fe442783          	lw	a5,-28(s0)
2001501e:	439c                	lw	a5,0(a5)
20015020:	47a4                	lw	s1,72(a5)
20015022:	fdc42503          	lw	a0,-36(s0)
20015026:	9effe0ef          	jal	ra,20013a14 <__metal_driver_cpu_hartid>
2001502a:	87aa                	mv	a5,a0
2001502c:	fd042603          	lw	a2,-48(s0)
20015030:	fd442683          	lw	a3,-44(s0)
20015034:	85be                	mv	a1,a5
20015036:	fe442503          	lw	a0,-28(s0)
2001503a:	9482                	jalr	s1
2001503c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20015040:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20015044:	853e                	mv	a0,a5
20015046:	50b2                	lw	ra,44(sp)
20015048:	5422                	lw	s0,40(sp)
2001504a:	5492                	lw	s1,36(sp)
2001504c:	6145                	addi	sp,sp,48
2001504e:	8082                	ret

20015050 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20015050:	1101                	addi	sp,sp,-32
20015052:	ce22                	sw	s0,28(sp)
20015054:	1000                	addi	s0,sp,32
20015056:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2001505a:	81018793          	addi	a5,gp,-2032 # 80000af0 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2001505e:	853e                	mv	a0,a5
20015060:	4472                	lw	s0,28(sp)
20015062:	6105                	addi	sp,sp,32
20015064:	8082                	ret

20015066 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20015066:	1101                	addi	sp,sp,-32
20015068:	ce22                	sw	s0,28(sp)
2001506a:	1000                	addi	s0,sp,32
2001506c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20015070:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20015072:	853e                	mv	a0,a5
20015074:	4472                	lw	s0,28(sp)
20015076:	6105                	addi	sp,sp,32
20015078:	8082                	ret

2001507a <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
2001507a:	1101                	addi	sp,sp,-32
2001507c:	ce22                	sw	s0,28(sp)
2001507e:	1000                	addi	s0,sp,32
20015080:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20015084:	81018793          	addi	a5,gp,-2032 # 80000af0 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20015088:	853e                	mv	a0,a5
2001508a:	4472                	lw	s0,28(sp)
2001508c:	6105                	addi	sp,sp,32
2001508e:	8082                	ret

20015090 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20015090:	1101                	addi	sp,sp,-32
20015092:	ce22                	sw	s0,28(sp)
20015094:	1000                	addi	s0,sp,32
20015096:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2001509a:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
2001509c:	853e                	mv	a0,a5
2001509e:	4472                	lw	s0,28(sp)
200150a0:	6105                	addi	sp,sp,32
200150a2:	8082                	ret

200150a4 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
200150a4:	7179                	addi	sp,sp,-48
200150a6:	d606                	sw	ra,44(sp)
200150a8:	d422                	sw	s0,40(sp)
200150aa:	1800                	addi	s0,sp,48
200150ac:	fca42e23          	sw	a0,-36(s0)
200150b0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
200150b4:	57fd                	li	a5,-1
200150b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
200150ba:	fdc42503          	lw	a0,-36(s0)
200150be:	9a5fe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200150c2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
200150c6:	fe842783          	lw	a5,-24(s0)
200150ca:	c79d                	beqz	a5,200150f8 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
200150cc:	fe842783          	lw	a5,-24(s0)
200150d0:	0dc7a783          	lw	a5,220(a5)
200150d4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
200150d8:	fe442783          	lw	a5,-28(s0)
200150dc:	cf91                	beqz	a5,200150f8 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
200150de:	fe442783          	lw	a5,-28(s0)
200150e2:	439c                	lw	a5,0(a5)
200150e4:	43f8                	lw	a4,68(a5)
200150e6:	fd840793          	addi	a5,s0,-40
200150ea:	863e                	mv	a2,a5
200150ec:	458d                	li	a1,3
200150ee:	fe442503          	lw	a0,-28(s0)
200150f2:	9702                	jalr	a4
200150f4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
200150f8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
200150fc:	853e                	mv	a0,a5
200150fe:	50b2                	lw	ra,44(sp)
20015100:	5422                	lw	s0,40(sp)
20015102:	6145                	addi	sp,sp,48
20015104:	8082                	ret

20015106 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20015106:	7179                	addi	sp,sp,-48
20015108:	d606                	sw	ra,44(sp)
2001510a:	d422                	sw	s0,40(sp)
2001510c:	1800                	addi	s0,sp,48
2001510e:	fca42e23          	sw	a0,-36(s0)
20015112:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20015116:	57fd                	li	a5,-1
20015118:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2001511c:	fdc42503          	lw	a0,-36(s0)
20015120:	943fe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20015124:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20015128:	fe842783          	lw	a5,-24(s0)
2001512c:	c79d                	beqz	a5,2001515a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2001512e:	fe842783          	lw	a5,-24(s0)
20015132:	0dc7a783          	lw	a5,220(a5)
20015136:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
2001513a:	fe442783          	lw	a5,-28(s0)
2001513e:	cf91                	beqz	a5,2001515a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20015140:	fe442783          	lw	a5,-28(s0)
20015144:	439c                	lw	a5,0(a5)
20015146:	43f8                	lw	a4,68(a5)
20015148:	fd840793          	addi	a5,s0,-40
2001514c:	863e                	mv	a2,a5
2001514e:	4589                	li	a1,2
20015150:	fe442503          	lw	a0,-28(s0)
20015154:	9702                	jalr	a4
20015156:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2001515a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
2001515e:	853e                	mv	a0,a5
20015160:	50b2                	lw	ra,44(sp)
20015162:	5422                	lw	s0,40(sp)
20015164:	6145                	addi	sp,sp,48
20015166:	8082                	ret

20015168 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20015168:	7179                	addi	sp,sp,-48
2001516a:	d606                	sw	ra,44(sp)
2001516c:	d422                	sw	s0,40(sp)
2001516e:	1800                	addi	s0,sp,48
20015170:	fca42e23          	sw	a0,-36(s0)
20015174:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20015178:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2001517c:	fdc42503          	lw	a0,-36(s0)
20015180:	8e3fe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20015184:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20015188:	fe842783          	lw	a5,-24(s0)
2001518c:	c79d                	beqz	a5,200151ba <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2001518e:	fe842783          	lw	a5,-24(s0)
20015192:	0dc7a783          	lw	a5,220(a5)
20015196:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2001519a:	fe442783          	lw	a5,-28(s0)
2001519e:	cf91                	beqz	a5,200151ba <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
200151a0:	fe442783          	lw	a5,-28(s0)
200151a4:	439c                	lw	a5,0(a5)
200151a6:	43f8                	lw	a4,68(a5)
200151a8:	fd840793          	addi	a5,s0,-40
200151ac:	863e                	mv	a2,a5
200151ae:	4591                	li	a1,4
200151b0:	fe442503          	lw	a0,-28(s0)
200151b4:	9702                	jalr	a4
200151b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
200151ba:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
200151be:	853e                	mv	a0,a5
200151c0:	50b2                	lw	ra,44(sp)
200151c2:	5422                	lw	s0,40(sp)
200151c4:	6145                	addi	sp,sp,48
200151c6:	8082                	ret

200151c8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
200151c8:	1101                	addi	sp,sp,-32
200151ca:	ce06                	sw	ra,28(sp)
200151cc:	cc22                	sw	s0,24(sp)
200151ce:	1000                	addi	s0,sp,32
200151d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
200151d4:	fec42503          	lw	a0,-20(s0)
200151d8:	88bfe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
200151dc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
200151de:	853e                	mv	a0,a5
200151e0:	40f2                	lw	ra,28(sp)
200151e2:	4462                	lw	s0,24(sp)
200151e4:	6105                	addi	sp,sp,32
200151e6:	8082                	ret

200151e8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
200151e8:	7179                	addi	sp,sp,-48
200151ea:	d606                	sw	ra,44(sp)
200151ec:	d422                	sw	s0,40(sp)
200151ee:	1800                	addi	s0,sp,48
200151f0:	fca42e23          	sw	a0,-36(s0)
200151f4:	fcb42c23          	sw	a1,-40(s0)
200151f8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
200151fc:	fdc42503          	lw	a0,-36(s0)
20015200:	863fe0ef          	jal	ra,20013a62 <__metal_driver_cpu_interrupt_controller>
20015204:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20015208:	fec42783          	lw	a5,-20(s0)
2001520c:	cb99                	beqz	a5,20015222 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2001520e:	fd442603          	lw	a2,-44(s0)
20015212:	fd842583          	lw	a1,-40(s0)
20015216:	fec42503          	lw	a0,-20(s0)
2001521a:	8d9ff0ef          	jal	ra,20014af2 <__metal_exception_register>
2001521e:	87aa                	mv	a5,a0
20015220:	a011                	j	20015224 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20015222:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20015224:	853e                	mv	a0,a5
20015226:	50b2                	lw	ra,44(sp)
20015228:	5422                	lw	s0,40(sp)
2001522a:	6145                	addi	sp,sp,48
2001522c:	8082                	ret

2001522e <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
2001522e:	1101                	addi	sp,sp,-32
20015230:	ce22                	sw	s0,28(sp)
20015232:	1000                	addi	s0,sp,32
20015234:	fea42623          	sw	a0,-20(s0)
20015238:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
2001523c:	fe842783          	lw	a5,-24(s0)
20015240:	0007d783          	lhu	a5,0(a5)
20015244:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20015248:	478d                	li	a5,3
2001524a:	00f71463          	bne	a4,a5,20015252 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
2001524e:	4791                	li	a5,4
20015250:	a011                	j	20015254 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20015252:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20015254:	853e                	mv	a0,a5
20015256:	4472                	lw	s0,28(sp)
20015258:	6105                	addi	sp,sp,32
2001525a:	8082                	ret

2001525c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
2001525c:	7179                	addi	sp,sp,-48
2001525e:	d622                	sw	s0,44(sp)
20015260:	1800                	addi	s0,sp,48
20015262:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20015266:	341027f3          	csrr	a5,mepc
2001526a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
2001526e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20015272:	853e                	mv	a0,a5
20015274:	5432                	lw	s0,44(sp)
20015276:	6145                	addi	sp,sp,48
20015278:	8082                	ret

2001527a <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
2001527a:	1101                	addi	sp,sp,-32
2001527c:	ce22                	sw	s0,28(sp)
2001527e:	1000                	addi	s0,sp,32
20015280:	fea42623          	sw	a0,-20(s0)
20015284:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20015288:	fe842783          	lw	a5,-24(s0)
2001528c:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20015290:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20015292:	853e                	mv	a0,a5
20015294:	4472                	lw	s0,28(sp)
20015296:	6105                	addi	sp,sp,32
20015298:	8082                	ret

2001529a <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:305



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2001529a:	1101                	addi	sp,sp,-32
2001529c:	ce22                	sw	s0,28(sp)
2001529e:	1000                	addi	s0,sp,32
200152a0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:306
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200152a4:	fec42703          	lw	a4,-20(s0)
200152a8:	800007b7          	lui	a5,0x80000
200152ac:	4a078793          	addi	a5,a5,1184 # 800004a0 <metal_segment_heap_target_end+0xffffc524>
200152b0:	00f71563          	bne	a4,a5,200152ba <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:307
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
200152b4:	0c0007b7          	lui	a5,0xc000
200152b8:	a011                	j	200152bc <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:310
	}
	else {
		return 0;
200152ba:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:312
	}
}
200152bc:	853e                	mv	a0,a5
200152be:	4472                	lw	s0,28(sp)
200152c0:	6105                	addi	sp,sp,32
200152c2:	8082                	ret

200152c4 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:325
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
200152c4:	1101                	addi	sp,sp,-32
200152c6:	ce22                	sw	s0,28(sp)
200152c8:	1000                	addi	s0,sp,32
200152ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:326
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200152ce:	fec42703          	lw	a4,-20(s0)
200152d2:	800007b7          	lui	a5,0x80000
200152d6:	4a078793          	addi	a5,a5,1184 # 800004a0 <metal_segment_heap_target_end+0xffffc524>
200152da:	00f71563          	bne	a4,a5,200152e4 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:327
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
200152de:	03500793          	li	a5,53
200152e2:	a011                	j	200152e6 <__metal_driver_sifive_plic0_num_interrupts+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:330
	}
	else {
		return 0;
200152e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:332
	}
}
200152e6:	853e                	mv	a0,a5
200152e8:	4472                	lw	s0,28(sp)
200152ea:	6105                	addi	sp,sp,32
200152ec:	8082                	ret

200152ee <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:335

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
200152ee:	1101                	addi	sp,sp,-32
200152f0:	ce22                	sw	s0,28(sp)
200152f2:	1000                	addi	s0,sp,32
200152f4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:336
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200152f8:	fec42703          	lw	a4,-20(s0)
200152fc:	800007b7          	lui	a5,0x80000
20015300:	4a078793          	addi	a5,a5,1184 # 800004a0 <metal_segment_heap_target_end+0xffffc524>
20015304:	00f71463          	bne	a4,a5,2001530c <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:337
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20015308:	479d                	li	a5,7
2001530a:	a011                	j	2001530e <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:340
	}
	else {
		return 0;
2001530c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:342
	}
}
2001530e:	853e                	mv	a0,a5
20015310:	4472                	lw	s0,28(sp)
20015312:	6105                	addi	sp,sp,32
20015314:	8082                	ret

20015316 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:345

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20015316:	1101                	addi	sp,sp,-32
20015318:	ce22                	sw	s0,28(sp)
2001531a:	1000                	addi	s0,sp,32
2001531c:	fea42623          	sw	a0,-20(s0)
20015320:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:346
	if (idx == 0) {
20015324:	fe842783          	lw	a5,-24(s0)
20015328:	e791                	bnez	a5,20015334 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:347
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2001532a:	800007b7          	lui	a5,0x80000
2001532e:	0e878793          	addi	a5,a5,232 # 800000e8 <metal_segment_heap_target_end+0xffffc16c>
20015332:	a011                	j	20015336 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:350
	}
	else {
		return NULL;
20015334:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:352
	}
}
20015336:	853e                	mv	a0,a5
20015338:	4472                	lw	s0,28(sp)
2001533a:	6105                	addi	sp,sp,32
2001533c:	8082                	ret

2001533e <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:355

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2001533e:	1101                	addi	sp,sp,-32
20015340:	ce22                	sw	s0,28(sp)
20015342:	1000                	addi	s0,sp,32
20015344:	fea42623          	sw	a0,-20(s0)
20015348:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:356
	if (idx == 0) {
2001534c:	fe842783          	lw	a5,-24(s0)
20015350:	e399                	bnez	a5,20015356 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:357
		return 11;
20015352:	47ad                	li	a5,11
20015354:	a011                	j	20015358 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:360
	}
	else {
		return 0;
20015356:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:362
	}
}
20015358:	853e                	mv	a0,a5
2001535a:	4472                	lw	s0,28(sp)
2001535c:	6105                	addi	sp,sp,32
2001535e:	8082                	ret

20015360 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20015360:	7179                	addi	sp,sp,-48
20015362:	d606                	sw	ra,44(sp)
20015364:	d422                	sw	s0,40(sp)
20015366:	1800                	addi	s0,sp,48
20015368:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2001536c:	fdc42503          	lw	a0,-36(s0)
20015370:	372d                	jal	2001529a <__metal_driver_sifive_plic0_control_base>
20015372:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20015376:	fec42703          	lw	a4,-20(s0)
2001537a:	002007b7          	lui	a5,0x200
2001537e:	0791                	addi	a5,a5,4
20015380:	97ba                	add	a5,a5,a4
20015382:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20015384:	853e                	mv	a0,a5
20015386:	50b2                	lw	ra,44(sp)
20015388:	5422                	lw	s0,40(sp)
2001538a:	6145                	addi	sp,sp,48
2001538c:	8082                	ret

2001538e <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
2001538e:	7179                	addi	sp,sp,-48
20015390:	d606                	sw	ra,44(sp)
20015392:	d422                	sw	s0,40(sp)
20015394:	1800                	addi	s0,sp,48
20015396:	fca42e23          	sw	a0,-36(s0)
2001539a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2001539e:	fdc42503          	lw	a0,-36(s0)
200153a2:	3de5                	jal	2001529a <__metal_driver_sifive_plic0_control_base>
200153a4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200153a8:	fec42703          	lw	a4,-20(s0)
200153ac:	002007b7          	lui	a5,0x200
200153b0:	0791                	addi	a5,a5,4
200153b2:	97ba                	add	a5,a5,a4
200153b4:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
200153b6:	fd842783          	lw	a5,-40(s0)
200153ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
200153bc:	0001                	nop
200153be:	50b2                	lw	ra,44(sp)
200153c0:	5422                	lw	s0,40(sp)
200153c2:	6145                	addi	sp,sp,48
200153c4:	8082                	ret

200153c6 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
200153c6:	7179                	addi	sp,sp,-48
200153c8:	d606                	sw	ra,44(sp)
200153ca:	d422                	sw	s0,40(sp)
200153cc:	1800                	addi	s0,sp,48
200153ce:	fca42e23          	sw	a0,-36(s0)
200153d2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
200153d6:	fdc42503          	lw	a0,-36(s0)
200153da:	35c1                	jal	2001529a <__metal_driver_sifive_plic0_control_base>
200153dc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200153e0:	fec42703          	lw	a4,-20(s0)
200153e4:	002007b7          	lui	a5,0x200
200153e8:	97ba                	add	a5,a5,a4
200153ea:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
200153ec:	fd842783          	lw	a5,-40(s0)
200153f0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
200153f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
200153f4:	853e                	mv	a0,a5
200153f6:	50b2                	lw	ra,44(sp)
200153f8:	5422                	lw	s0,40(sp)
200153fa:	6145                	addi	sp,sp,48
200153fc:	8082                	ret

200153fe <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
200153fe:	7179                	addi	sp,sp,-48
20015400:	d606                	sw	ra,44(sp)
20015402:	d422                	sw	s0,40(sp)
20015404:	1800                	addi	s0,sp,48
20015406:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2001540a:	fdc42503          	lw	a0,-36(s0)
2001540e:	3571                	jal	2001529a <__metal_driver_sifive_plic0_control_base>
20015410:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20015414:	fec42703          	lw	a4,-20(s0)
20015418:	002007b7          	lui	a5,0x200
2001541c:	97ba                	add	a5,a5,a4
2001541e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20015420:	853e                	mv	a0,a5
20015422:	50b2                	lw	ra,44(sp)
20015424:	5422                	lw	s0,40(sp)
20015426:	6145                	addi	sp,sp,48
20015428:	8082                	ret

2001542a <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
2001542a:	7179                	addi	sp,sp,-48
2001542c:	d606                	sw	ra,44(sp)
2001542e:	d422                	sw	s0,40(sp)
20015430:	1800                	addi	s0,sp,48
20015432:	fca42e23          	sw	a0,-36(s0)
20015436:	fcb42c23          	sw	a1,-40(s0)
2001543a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
2001543e:	fdc42503          	lw	a0,-36(s0)
20015442:	3da1                	jal	2001529a <__metal_driver_sifive_plic0_control_base>
20015444:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20015448:	fdc42503          	lw	a0,-36(s0)
2001544c:	354d                	jal	200152ee <__metal_driver_sifive_plic0_max_priority>
2001544e:	87aa                	mv	a5,a0
20015450:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20015454:	fe842783          	lw	a5,-24(s0)
20015458:	c785                	beqz	a5,20015480 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
2001545a:	fd442703          	lw	a4,-44(s0)
2001545e:	fe842783          	lw	a5,-24(s0)
20015462:	00f77f63          	bgeu	a4,a5,20015480 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20015466:	fd842783          	lw	a5,-40(s0)
2001546a:	078a                	slli	a5,a5,0x2
2001546c:	873e                	mv	a4,a5
2001546e:	fec42783          	lw	a5,-20(s0)
20015472:	97ba                	add	a5,a5,a4
20015474:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20015476:	fd442783          	lw	a5,-44(s0)
2001547a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
2001547c:	4781                	li	a5,0
2001547e:	a011                	j	20015482 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20015480:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20015482:	853e                	mv	a0,a5
20015484:	50b2                	lw	ra,44(sp)
20015486:	5422                	lw	s0,40(sp)
20015488:	6145                	addi	sp,sp,48
2001548a:	8082                	ret

2001548c <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
2001548c:	7179                	addi	sp,sp,-48
2001548e:	d606                	sw	ra,44(sp)
20015490:	d422                	sw	s0,40(sp)
20015492:	1800                	addi	s0,sp,48
20015494:	fca42e23          	sw	a0,-36(s0)
20015498:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2001549c:	fdc42503          	lw	a0,-36(s0)
200154a0:	3bed                	jal	2001529a <__metal_driver_sifive_plic0_control_base>
200154a2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200154a6:	fd842783          	lw	a5,-40(s0)
200154aa:	078a                	slli	a5,a5,0x2
200154ac:	873e                	mv	a4,a5
200154ae:	fec42783          	lw	a5,-20(s0)
200154b2:	97ba                	add	a5,a5,a4
200154b4:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
200154b6:	853e                	mv	a0,a5
200154b8:	50b2                	lw	ra,44(sp)
200154ba:	5422                	lw	s0,40(sp)
200154bc:	6145                	addi	sp,sp,48
200154be:	8082                	ret

200154c0 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
200154c0:	7179                	addi	sp,sp,-48
200154c2:	d606                	sw	ra,44(sp)
200154c4:	d422                	sw	s0,40(sp)
200154c6:	1800                	addi	s0,sp,48
200154c8:	fca42e23          	sw	a0,-36(s0)
200154cc:	fcb42c23          	sw	a1,-40(s0)
200154d0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
200154d4:	fdc42503          	lw	a0,-36(s0)
200154d8:	dc3ff0ef          	jal	ra,2001529a <__metal_driver_sifive_plic0_control_base>
200154dc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
200154e0:	fd842783          	lw	a5,-40(s0)
200154e4:	8795                	srai	a5,a5,0x5
200154e6:	078a                	slli	a5,a5,0x2
200154e8:	873e                	mv	a4,a5
200154ea:	fec42783          	lw	a5,-20(s0)
200154ee:	973e                	add	a4,a4,a5
200154f0:	6789                	lui	a5,0x2
200154f2:	97ba                	add	a5,a5,a4
200154f4:	439c                	lw	a5,0(a5)
200154f6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
200154fa:	fd442783          	lw	a5,-44(s0)
200154fe:	cf81                	beqz	a5,20015516 <__metal_plic0_enable+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20015500:	fd842783          	lw	a5,-40(s0)
20015504:	8bfd                	andi	a5,a5,31
20015506:	4705                	li	a4,1
20015508:	00f717b3          	sll	a5,a4,a5
2001550c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2001550e:	fe842783          	lw	a5,-24(s0)
20015512:	8fd9                	or	a5,a5,a4
20015514:	a829                	j	2001552e <__metal_plic0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20015516:	fd842783          	lw	a5,-40(s0)
2001551a:	8bfd                	andi	a5,a5,31
2001551c:	4705                	li	a4,1
2001551e:	00f717b3          	sll	a5,a4,a5
20015522:	fff7c793          	not	a5,a5
20015526:	873e                	mv	a4,a5
20015528:	fe842783          	lw	a5,-24(s0)
2001552c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2001552e:	fd842703          	lw	a4,-40(s0)
20015532:	8715                	srai	a4,a4,0x5
20015534:	070a                	slli	a4,a4,0x2
20015536:	86ba                	mv	a3,a4
20015538:	fec42703          	lw	a4,-20(s0)
2001553c:	96ba                	add	a3,a3,a4
2001553e:	6709                	lui	a4,0x2
20015540:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20015542:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20015544:	0001                	nop
20015546:	50b2                	lw	ra,44(sp)
20015548:	5422                	lw	s0,40(sp)
2001554a:	6145                	addi	sp,sp,48
2001554c:	8082                	ret

2001554e <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
2001554e:	1101                	addi	sp,sp,-32
20015550:	ce06                	sw	ra,28(sp)
20015552:	cc22                	sw	s0,24(sp)
20015554:	1000                	addi	s0,sp,32
20015556:	fea42623          	sw	a0,-20(s0)
2001555a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
2001555e:	12c00513          	li	a0,300
20015562:	5f9010ef          	jal	ra,2001735a <metal_shutdown>

20015566 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20015566:	7179                	addi	sp,sp,-48
20015568:	d606                	sw	ra,44(sp)
2001556a:	d422                	sw	s0,40(sp)
2001556c:	1800                	addi	s0,sp,48
2001556e:	fca42e23          	sw	a0,-36(s0)
20015572:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20015576:	fd842783          	lw	a5,-40(s0)
2001557a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
2001557e:	fec42503          	lw	a0,-20(s0)
20015582:	ddfff0ef          	jal	ra,20015360 <__metal_plic0_claim_interrupt>
20015586:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
2001558a:	fec42503          	lw	a0,-20(s0)
2001558e:	d37ff0ef          	jal	ra,200152c4 <__metal_driver_sifive_plic0_num_interrupts>
20015592:	87aa                	mv	a5,a0
20015594:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20015598:	fe842703          	lw	a4,-24(s0)
2001559c:	fe442783          	lw	a5,-28(s0)
200155a0:	04f77263          	bgeu	a4,a5,200155e4 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
200155a4:	fec42703          	lw	a4,-20(s0)
200155a8:	fe842783          	lw	a5,-24(s0)
200155ac:	078a                	slli	a5,a5,0x2
200155ae:	97ba                	add	a5,a5,a4
200155b0:	479c                	lw	a5,8(a5)
200155b2:	cb8d                	beqz	a5,200155e4 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
200155b4:	fec42703          	lw	a4,-20(s0)
200155b8:	fe842783          	lw	a5,-24(s0)
200155bc:	078a                	slli	a5,a5,0x2
200155be:	97ba                	add	a5,a5,a4
200155c0:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
200155c4:	fe842603          	lw	a2,-24(s0)
200155c8:	fec42683          	lw	a3,-20(s0)
200155cc:	fe842703          	lw	a4,-24(s0)
200155d0:	87ba                	mv	a5,a4
200155d2:	0786                	slli	a5,a5,0x1
200155d4:	97ba                	add	a5,a5,a4
200155d6:	078e                	slli	a5,a5,0x3
200155d8:	97b6                	add	a5,a5,a3
200155da:	0f07a783          	lw	a5,240(a5)
200155de:	85be                	mv	a1,a5
200155e0:	8532                	mv	a0,a2
200155e2:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
200155e4:	fe842583          	lw	a1,-24(s0)
200155e8:	fec42503          	lw	a0,-20(s0)
200155ec:	da3ff0ef          	jal	ra,2001538e <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
200155f0:	0001                	nop
200155f2:	50b2                	lw	ra,44(sp)
200155f4:	5422                	lw	s0,40(sp)
200155f6:	6145                	addi	sp,sp,48
200155f8:	8082                	ret

200155fa <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
200155fa:	7139                	addi	sp,sp,-64
200155fc:	de06                	sw	ra,60(sp)
200155fe:	dc22                	sw	s0,56(sp)
20015600:	0080                	addi	s0,sp,64
20015602:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20015606:	fcc42783          	lw	a5,-52(s0)
2001560a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
2001560e:	fe442783          	lw	a5,-28(s0)
20015612:	43dc                	lw	a5,4(a5)
20015614:	12079163          	bnez	a5,20015736 <__metal_driver_riscv_plic0_init+0x13c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20015618:	fe042623          	sw	zero,-20(s0)
2001561c:	a229                	j	20015726 <__metal_driver_riscv_plic0_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2001561e:	fcc42503          	lw	a0,-52(s0)
20015622:	ca3ff0ef          	jal	ra,200152c4 <__metal_driver_sifive_plic0_num_interrupts>
20015626:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2001562a:	fec42583          	lw	a1,-20(s0)
2001562e:	fcc42503          	lw	a0,-52(s0)
20015632:	ce5ff0ef          	jal	ra,20015316 <__metal_driver_sifive_plic0_interrupt_parents>
20015636:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2001563a:	fec42583          	lw	a1,-20(s0)
2001563e:	fcc42503          	lw	a0,-52(s0)
20015642:	cfdff0ef          	jal	ra,2001533e <__metal_driver_sifive_plic0_interrupt_lines>
20015646:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2001564a:	fdc42783          	lw	a5,-36(s0)
2001564e:	439c                	lw	a5,0(a5)
20015650:	439c                	lw	a5,0(a5)
20015652:	fdc42503          	lw	a0,-36(s0)
20015656:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20015658:	fe042423          	sw	zero,-24(s0)
2001565c:	a08d                	j	200156be <__metal_driver_riscv_plic0_init+0xc4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
2001565e:	4601                	li	a2,0
20015660:	fe842583          	lw	a1,-24(s0)
20015664:	fe442503          	lw	a0,-28(s0)
20015668:	3da1                	jal	200154c0 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2001566a:	4601                	li	a2,0
2001566c:	fe842583          	lw	a1,-24(s0)
20015670:	fcc42503          	lw	a0,-52(s0)
20015674:	db7ff0ef          	jal	ra,2001542a <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20015678:	fe442703          	lw	a4,-28(s0)
2001567c:	fe842783          	lw	a5,-24(s0)
20015680:	078a                	slli	a5,a5,0x2
20015682:	97ba                	add	a5,a5,a4
20015684:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20015688:	fe442683          	lw	a3,-28(s0)
2001568c:	fe842703          	lw	a4,-24(s0)
20015690:	87ba                	mv	a5,a4
20015692:	0786                	slli	a5,a5,0x1
20015694:	97ba                	add	a5,a5,a4
20015696:	078e                	slli	a5,a5,0x3
20015698:	97b6                	add	a5,a5,a3
2001569a:	0e07a623          	sw	zero,236(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
2001569e:	fe442683          	lw	a3,-28(s0)
200156a2:	fe842703          	lw	a4,-24(s0)
200156a6:	87ba                	mv	a5,a4
200156a8:	0786                	slli	a5,a5,0x1
200156aa:	97ba                	add	a5,a5,a4
200156ac:	078e                	slli	a5,a5,0x3
200156ae:	97b6                	add	a5,a5,a3
200156b0:	0e07a823          	sw	zero,240(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
200156b4:	fe842783          	lw	a5,-24(s0)
200156b8:	0785                	addi	a5,a5,1
200156ba:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
200156be:	fe842703          	lw	a4,-24(s0)
200156c2:	fe042783          	lw	a5,-32(s0)
200156c6:	f8f74ce3          	blt	a4,a5,2001565e <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
200156ca:	4581                	li	a1,0
200156cc:	fcc42503          	lw	a0,-52(s0)
200156d0:	cf7ff0ef          	jal	ra,200153c6 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
200156d4:	fdc42783          	lw	a5,-36(s0)
200156d8:	439c                	lw	a5,0(a5)
200156da:	4fdc                	lw	a5,28(a5)
200156dc:	fe442683          	lw	a3,-28(s0)
200156e0:	4601                	li	a2,0
200156e2:	fd842583          	lw	a1,-40(s0)
200156e6:	fdc42503          	lw	a0,-36(s0)
200156ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
200156ec:	fdc42783          	lw	a5,-36(s0)
200156f0:	439c                	lw	a5,0(a5)
200156f2:	4fd8                	lw	a4,28(a5)
200156f4:	fe442683          	lw	a3,-28(s0)
200156f8:	200157b7          	lui	a5,0x20015
200156fc:	56678613          	addi	a2,a5,1382 # 20015566 <__metal_plic0_handler>
20015700:	fd842583          	lw	a1,-40(s0)
20015704:	fdc42503          	lw	a0,-36(s0)
20015708:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
2001570a:	fdc42783          	lw	a5,-36(s0)
2001570e:	439c                	lw	a5,0(a5)
20015710:	53dc                	lw	a5,36(a5)
20015712:	fd842583          	lw	a1,-40(s0)
20015716:	fdc42503          	lw	a0,-36(s0)
2001571a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2001571c:	fec42783          	lw	a5,-20(s0)
20015720:	0785                	addi	a5,a5,1
20015722:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20015726:	fec42783          	lw	a5,-20(s0)
2001572a:	eef05ae3          	blez	a5,2001561e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
2001572e:	fe442783          	lw	a5,-28(s0)
20015732:	4705                	li	a4,1
20015734:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20015736:	0001                	nop
20015738:	50f2                	lw	ra,60(sp)
2001573a:	5462                	lw	s0,56(sp)
2001573c:	6121                	addi	sp,sp,64
2001573e:	8082                	ret

20015740 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20015740:	7179                	addi	sp,sp,-48
20015742:	d606                	sw	ra,44(sp)
20015744:	d422                	sw	s0,40(sp)
20015746:	1800                	addi	s0,sp,48
20015748:	fca42e23          	sw	a0,-36(s0)
2001574c:	fcb42c23          	sw	a1,-40(s0)
20015750:	fcc42a23          	sw	a2,-44(s0)
20015754:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20015758:	fdc42783          	lw	a5,-36(s0)
2001575c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20015760:	fdc42503          	lw	a0,-36(s0)
20015764:	b61ff0ef          	jal	ra,200152c4 <__metal_driver_sifive_plic0_num_interrupts>
20015768:	872a                	mv	a4,a0
2001576a:	fd842783          	lw	a5,-40(s0)
2001576e:	00e7c463          	blt	a5,a4,20015776 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20015772:	57fd                	li	a5,-1
20015774:	a051                	j	200157f8 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20015776:	fd442783          	lw	a5,-44(s0)
2001577a:	cf9d                	beqz	a5,200157b8 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2001577c:	4609                	li	a2,2
2001577e:	fd842583          	lw	a1,-40(s0)
20015782:	fdc42503          	lw	a0,-36(s0)
20015786:	ca5ff0ef          	jal	ra,2001542a <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2001578a:	fec42703          	lw	a4,-20(s0)
2001578e:	fd842783          	lw	a5,-40(s0)
20015792:	078a                	slli	a5,a5,0x2
20015794:	97ba                	add	a5,a5,a4
20015796:	fd442703          	lw	a4,-44(s0)
2001579a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2001579c:	fec42683          	lw	a3,-20(s0)
200157a0:	fd842703          	lw	a4,-40(s0)
200157a4:	87ba                	mv	a5,a4
200157a6:	0786                	slli	a5,a5,0x1
200157a8:	97ba                	add	a5,a5,a4
200157aa:	078e                	slli	a5,a5,0x3
200157ac:	97b6                	add	a5,a5,a3
200157ae:	fd042703          	lw	a4,-48(s0)
200157b2:	0ee7a823          	sw	a4,240(a5)
200157b6:	a081                	j	200157f6 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
200157b8:	4605                	li	a2,1
200157ba:	fd842583          	lw	a1,-40(s0)
200157be:	fdc42503          	lw	a0,-36(s0)
200157c2:	c69ff0ef          	jal	ra,2001542a <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
200157c6:	fec42703          	lw	a4,-20(s0)
200157ca:	fd842783          	lw	a5,-40(s0)
200157ce:	078a                	slli	a5,a5,0x2
200157d0:	97ba                	add	a5,a5,a4
200157d2:	20015737          	lui	a4,0x20015
200157d6:	54e70713          	addi	a4,a4,1358 # 2001554e <__metal_plic0_default_handler>
200157da:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
200157dc:	fec42683          	lw	a3,-20(s0)
200157e0:	fd842703          	lw	a4,-40(s0)
200157e4:	87ba                	mv	a5,a4
200157e6:	0786                	slli	a5,a5,0x1
200157e8:	97ba                	add	a5,a5,a4
200157ea:	078e                	slli	a5,a5,0x3
200157ec:	97b6                	add	a5,a5,a3
200157ee:	fd042703          	lw	a4,-48(s0)
200157f2:	0ee7a623          	sw	a4,236(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
200157f6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
200157f8:	853e                	mv	a0,a5
200157fa:	50b2                	lw	ra,44(sp)
200157fc:	5422                	lw	s0,40(sp)
200157fe:	6145                	addi	sp,sp,48
20015800:	8082                	ret

20015802 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20015802:	7179                	addi	sp,sp,-48
20015804:	d606                	sw	ra,44(sp)
20015806:	d422                	sw	s0,40(sp)
20015808:	1800                	addi	s0,sp,48
2001580a:	fca42e23          	sw	a0,-36(s0)
2001580e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20015812:	fdc42783          	lw	a5,-36(s0)
20015816:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2001581a:	fdc42503          	lw	a0,-36(s0)
2001581e:	aa7ff0ef          	jal	ra,200152c4 <__metal_driver_sifive_plic0_num_interrupts>
20015822:	872a                	mv	a4,a0
20015824:	fd842783          	lw	a5,-40(s0)
20015828:	00e7c463          	blt	a5,a4,20015830 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2001582c:	57fd                	li	a5,-1
2001582e:	a809                	j	20015840 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20015830:	4605                	li	a2,1
20015832:	fd842583          	lw	a1,-40(s0)
20015836:	fec42503          	lw	a0,-20(s0)
2001583a:	c87ff0ef          	jal	ra,200154c0 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2001583e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20015840:	853e                	mv	a0,a5
20015842:	50b2                	lw	ra,44(sp)
20015844:	5422                	lw	s0,40(sp)
20015846:	6145                	addi	sp,sp,48
20015848:	8082                	ret

2001584a <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2001584a:	7179                	addi	sp,sp,-48
2001584c:	d606                	sw	ra,44(sp)
2001584e:	d422                	sw	s0,40(sp)
20015850:	1800                	addi	s0,sp,48
20015852:	fca42e23          	sw	a0,-36(s0)
20015856:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2001585a:	fdc42783          	lw	a5,-36(s0)
2001585e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20015862:	fdc42503          	lw	a0,-36(s0)
20015866:	a5fff0ef          	jal	ra,200152c4 <__metal_driver_sifive_plic0_num_interrupts>
2001586a:	872a                	mv	a4,a0
2001586c:	fd842783          	lw	a5,-40(s0)
20015870:	00e7c463          	blt	a5,a4,20015878 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20015874:	57fd                	li	a5,-1
20015876:	a809                	j	20015888 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20015878:	4601                	li	a2,0
2001587a:	fd842583          	lw	a1,-40(s0)
2001587e:	fec42503          	lw	a0,-20(s0)
20015882:	c3fff0ef          	jal	ra,200154c0 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20015886:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20015888:	853e                	mv	a0,a5
2001588a:	50b2                	lw	ra,44(sp)
2001588c:	5422                	lw	s0,40(sp)
2001588e:	6145                	addi	sp,sp,48
20015890:	8082                	ret

20015892 <__metal_driver_sifive_fe310_g000_hfrosc_ref>:
__metal_driver_sifive_fe310_g000_hfrosc_ref():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:911



/* --------------------- sifive_fe310_g000_hfrosc ------------ */
static __inline__ struct metal_clock * __metal_driver_sifive_fe310_g000_hfrosc_ref(const struct metal_clock *clock)
{
20015892:	1101                	addi	sp,sp,-32
20015894:	ce22                	sw	s0,28(sp)
20015896:	1000                	addi	s0,sp,32
20015898:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:912
		return (struct metal_clock *)&__metal_dt_clock_2.clock;
2001589c:	800007b7          	lui	a5,0x80000
200158a0:	0c478793          	addi	a5,a5,196 # 800000c4 <metal_segment_heap_target_end+0xffffc148>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:913
}
200158a4:	853e                	mv	a0,a5
200158a6:	4472                	lw	s0,28(sp)
200158a8:	6105                	addi	sp,sp,32
200158aa:	8082                	ret

200158ac <__metal_driver_sifive_fe310_g000_hfrosc_config_base>:
__metal_driver_sifive_fe310_g000_hfrosc_config_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:916

static __inline__ struct __metal_driver_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_hfrosc_config_base(const struct metal_clock *clock)
{
200158ac:	1101                	addi	sp,sp,-32
200158ae:	ce22                	sw	s0,28(sp)
200158b0:	1000                	addi	s0,sp,32
200158b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:917
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
200158b6:	82018793          	addi	a5,gp,-2016 # 80000b00 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:918
}
200158ba:	853e                	mv	a0,a5
200158bc:	4472                	lw	s0,28(sp)
200158be:	6105                	addi	sp,sp,32
200158c0:	8082                	ret

200158c2 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfrosc_config_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:926
{
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
}

static __inline__ long __metal_driver_sifive_fe310_g000_hfrosc_config_offset(const struct metal_clock *clock)
{
200158c2:	1101                	addi	sp,sp,-32
200158c4:	ce22                	sw	s0,28(sp)
200158c6:	1000                	addi	s0,sp,32
200158c8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:927
		return METAL_SIFIVE_FE310_G000_PRCI_HFROSCCFG;
200158cc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:928
}
200158ce:	853e                	mv	a0,a5
200158d0:	4472                	lw	s0,28(sp)
200158d2:	6105                	addi	sp,sp,32
200158d4:	8082                	ret

200158d6 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1043
{
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_SIZE;
}

static __inline__ const struct __metal_driver_vtable_sifive_fe310_g000_prci * __metal_driver_sifive_fe310_g000_prci_vtable( )
{
200158d6:	1141                	addi	sp,sp,-16
200158d8:	c622                	sw	s0,12(sp)
200158da:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
200158dc:	83418793          	addi	a5,gp,-1996 # 80000b14 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1045
}
200158e0:	853e                	mv	a0,a5
200158e2:	4432                	lw	s0,12(sp)
200158e4:	0141                	addi	sp,sp,16
200158e6:	8082                	ret

200158e8 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
200158e8:	7139                	addi	sp,sp,-64
200158ea:	de06                	sw	ra,60(sp)
200158ec:	dc22                	sw	s0,56(sp)
200158ee:	0080                	addi	s0,sp,64
200158f0:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:18
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfrosc_ref(clock);
200158f4:	fcc42503          	lw	a0,-52(s0)
200158f8:	3f69                	jal	20015892 <__metal_driver_sifive_fe310_g000_hfrosc_ref>
200158fa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:19
    long config_offset = __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
200158fe:	fcc42503          	lw	a0,-52(s0)
20015902:	37c1                	jal	200158c2 <__metal_driver_sifive_fe310_g000_hfrosc_config_offset>
20015904:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:21
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
20015908:	fcc42503          	lw	a0,-52(s0)
2001590c:	3745                	jal	200158ac <__metal_driver_sifive_fe310_g000_hfrosc_config_base>
2001590e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:23
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20015912:	37d1                	jal	200158d6 <__metal_driver_sifive_fe310_g000_prci_vtable>
20015914:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
20015918:	fe042783          	lw	a5,-32(s0)
2001591c:	439c                	lw	a5,0(a5)
2001591e:	fe842583          	lw	a1,-24(s0)
20015922:	fe442503          	lw	a0,-28(s0)
20015926:	9782                	jalr	a5
20015928:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
2001592c:	fdc42703          	lw	a4,-36(s0)
20015930:	400007b7          	lui	a5,0x40000
20015934:	8ff9                	and	a5,a5,a4
20015936:	e399                	bnez	a5,2001593c <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:27
        return -1;
20015938:	57fd                	li	a5,-1
2001593a:	a025                	j	20015962 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_READY) == 0)
2001593c:	fdc42783          	lw	a5,-36(s0)
20015940:	0007c463          	bltz	a5,20015948 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
20015944:	57fd                	li	a5,-1
20015946:	a831                	j	20015962 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
20015948:	fec42503          	lw	a0,-20(s0)
2001594c:	0cf010ef          	jal	ra,2001721a <metal_clock_get_rate_hz>
20015950:	87aa                	mv	a5,a0
20015952:	873e                	mv	a4,a5
20015954:	fdc42783          	lw	a5,-36(s0)
20015958:	03f7f793          	andi	a5,a5,63
2001595c:	0785                	addi	a5,a5,1
2001595e:	02f757b3          	divu	a5,a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:31
}
20015962:	853e                	mv	a0,a5
20015964:	50f2                	lw	ra,60(sp)
20015966:	5462                	lw	s0,56(sp)
20015968:	6121                	addi	sp,sp,64
2001596a:	8082                	ret

2001596c <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:34

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
2001596c:	1101                	addi	sp,sp,-32
2001596e:	ce06                	sw	ra,28(sp)
20015970:	cc22                	sw	s0,24(sp)
20015972:	1000                	addi	s0,sp,32
20015974:	fea42623          	sw	a0,-20(s0)
20015978:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:35
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
2001597c:	fec42503          	lw	a0,-20(s0)
20015980:	37a5                	jal	200158e8 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20015982:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:36
}
20015984:	853e                	mv	a0,a5
20015986:	40f2                	lw	ra,28(sp)
20015988:	4462                	lw	s0,24(sp)
2001598a:	6105                	addi	sp,sp,32
2001598c:	8082                	ret

2001598e <__metal_driver_sifive_fe310_g000_hfxosc_ref>:
__metal_driver_sifive_fe310_g000_hfxosc_ref():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:934
{
2001598e:	1101                	addi	sp,sp,-32
20015990:	ce22                	sw	s0,28(sp)
20015992:	1000                	addi	s0,sp,32
20015994:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:935
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20015998:	800007b7          	lui	a5,0x80000
2001599c:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffc13c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:936
}
200159a0:	853e                	mv	a0,a5
200159a2:	4472                	lw	s0,28(sp)
200159a4:	6105                	addi	sp,sp,32
200159a6:	8082                	ret

200159a8 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>:
__metal_driver_sifive_fe310_g000_hfxosc_config_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:939
{
200159a8:	1101                	addi	sp,sp,-32
200159aa:	ce22                	sw	s0,28(sp)
200159ac:	1000                	addi	s0,sp,32
200159ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:940
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
200159b2:	82018793          	addi	a5,gp,-2016 # 80000b00 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:941
}
200159b6:	853e                	mv	a0,a5
200159b8:	4472                	lw	s0,28(sp)
200159ba:	6105                	addi	sp,sp,32
200159bc:	8082                	ret

200159be <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>:
__metal_driver_sifive_fe310_g000_hfxosc_config_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:944
{
200159be:	1101                	addi	sp,sp,-32
200159c0:	ce22                	sw	s0,28(sp)
200159c2:	1000                	addi	s0,sp,32
200159c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:945
		return METAL_SIFIVE_FE310_G000_PRCI_HFXOSCCFG;
200159c8:	4791                	li	a5,4
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:946
}
200159ca:	853e                	mv	a0,a5
200159cc:	4472                	lw	s0,28(sp)
200159ce:	6105                	addi	sp,sp,32
200159d0:	8082                	ret

200159d2 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1043
{
200159d2:	1141                	addi	sp,sp,-16
200159d4:	c622                	sw	s0,12(sp)
200159d6:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
200159d8:	83418793          	addi	a5,gp,-1996 # 80000b14 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1045
}
200159dc:	853e                	mv	a0,a5
200159de:	4432                	lw	s0,12(sp)
200159e0:	0141                	addi	sp,sp,16
200159e2:	8082                	ret

200159e4 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
200159e4:	7139                	addi	sp,sp,-64
200159e6:	de06                	sw	ra,60(sp)
200159e8:	dc22                	sw	s0,56(sp)
200159ea:	0080                	addi	s0,sp,64
200159ec:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:16
    struct metal_clock *ref = __metal_driver_sifive_fe310_g000_hfxosc_ref(clock);
200159f0:	fcc42503          	lw	a0,-52(s0)
200159f4:	3f69                	jal	2001598e <__metal_driver_sifive_fe310_g000_hfxosc_ref>
200159f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:17
    long config_offset = __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
200159fa:	fcc42503          	lw	a0,-52(s0)
200159fe:	37c1                	jal	200159be <__metal_driver_sifive_fe310_g000_hfxosc_config_offset>
20015a00:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:19
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
20015a04:	fcc42503          	lw	a0,-52(s0)
20015a08:	3745                	jal	200159a8 <__metal_driver_sifive_fe310_g000_hfxosc_config_base>
20015a0a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:21
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20015a0e:	37d1                	jal	200159d2 <__metal_driver_sifive_fe310_g000_prci_vtable>
20015a10:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:22
    long cfg = vtable->get_reg(config_base, config_offset);
20015a14:	fe042783          	lw	a5,-32(s0)
20015a18:	439c                	lw	a5,0(a5)
20015a1a:	fe842583          	lw	a1,-24(s0)
20015a1e:	fe442503          	lw	a0,-28(s0)
20015a22:	9782                	jalr	a5
20015a24:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24

    if ((cfg & CONFIG_ENABLE) == 0)
20015a28:	fdc42703          	lw	a4,-36(s0)
20015a2c:	400007b7          	lui	a5,0x40000
20015a30:	8ff9                	and	a5,a5,a4
20015a32:	e399                	bnez	a5,20015a38 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:25
        return -1;
20015a34:	57fd                	li	a5,-1
20015a36:	a821                	j	20015a4e <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26
    if ((cfg & CONFIG_READY) == 0)
20015a38:	fdc42783          	lw	a5,-36(s0)
20015a3c:	0007c463          	bltz	a5,20015a44 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:27
        return -1;
20015a40:	57fd                	li	a5,-1
20015a42:	a031                	j	20015a4e <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
    return metal_clock_get_rate_hz(ref);
20015a44:	fec42503          	lw	a0,-20(s0)
20015a48:	7d2010ef          	jal	ra,2001721a <metal_clock_get_rate_hz>
20015a4c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:29
}
20015a4e:	853e                	mv	a0,a5
20015a50:	50f2                	lw	ra,60(sp)
20015a52:	5462                	lw	s0,56(sp)
20015a54:	6121                	addi	sp,sp,64
20015a56:	8082                	ret

20015a58 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:32

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20015a58:	1101                	addi	sp,sp,-32
20015a5a:	ce06                	sw	ra,28(sp)
20015a5c:	cc22                	sw	s0,24(sp)
20015a5e:	1000                	addi	s0,sp,32
20015a60:	fea42623          	sw	a0,-20(s0)
20015a64:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:33
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20015a68:	fec42503          	lw	a0,-20(s0)
20015a6c:	3fa5                	jal	200159e4 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
20015a6e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:34
}
20015a70:	853e                	mv	a0,a5
20015a72:	40f2                	lw	ra,28(sp)
20015a74:	4462                	lw	s0,24(sp)
20015a76:	6105                	addi	sp,sp,32
20015a78:	8082                	ret

20015a7a <__metal_driver_sifive_fe310_g000_pll_pllsel0>:
__metal_driver_sifive_fe310_g000_pll_pllsel0():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:995
{
20015a7a:	1101                	addi	sp,sp,-32
20015a7c:	ce22                	sw	s0,28(sp)
20015a7e:	1000                	addi	s0,sp,32
20015a80:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:996
		return (struct metal_clock *)&__metal_dt_clock_3.clock;
20015a84:	800017b7          	lui	a5,0x80001
20015a88:	ab878793          	addi	a5,a5,-1352 # 80000ab8 <metal_segment_heap_target_end+0xffffcb3c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:997
}
20015a8c:	853e                	mv	a0,a5
20015a8e:	4472                	lw	s0,28(sp)
20015a90:	6105                	addi	sp,sp,32
20015a92:	8082                	ret

20015a94 <__metal_driver_sifive_fe310_g000_pll_pllref>:
__metal_driver_sifive_fe310_g000_pll_pllref():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1000
{
20015a94:	1101                	addi	sp,sp,-32
20015a96:	ce22                	sw	s0,28(sp)
20015a98:	1000                	addi	s0,sp,32
20015a9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1001
		return (struct metal_clock *)&__metal_dt_clock_1.clock;
20015a9e:	800017b7          	lui	a5,0x80001
20015aa2:	ac478793          	addi	a5,a5,-1340 # 80000ac4 <metal_segment_heap_target_end+0xffffcb48>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1002
}
20015aa6:	853e                	mv	a0,a5
20015aa8:	4472                	lw	s0,28(sp)
20015aaa:	6105                	addi	sp,sp,32
20015aac:	8082                	ret

20015aae <__metal_driver_sifive_fe310_g000_pll_divider_base>:
__metal_driver_sifive_fe310_g000_pll_divider_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1005
{
20015aae:	1101                	addi	sp,sp,-32
20015ab0:	ce22                	sw	s0,28(sp)
20015ab2:	1000                	addi	s0,sp,32
20015ab4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1006
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20015ab8:	82018793          	addi	a5,gp,-2016 # 80000b00 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1007
}
20015abc:	853e                	mv	a0,a5
20015abe:	4472                	lw	s0,28(sp)
20015ac0:	6105                	addi	sp,sp,32
20015ac2:	8082                	ret

20015ac4 <__metal_driver_sifive_fe310_g000_pll_divider_offset>:
__metal_driver_sifive_fe310_g000_pll_divider_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1010
{
20015ac4:	1101                	addi	sp,sp,-32
20015ac6:	ce22                	sw	s0,28(sp)
20015ac8:	1000                	addi	s0,sp,32
20015aca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1011
		return METAL_SIFIVE_FE310_G000_PRCI_PLLOUTDIV;
20015ace:	47b1                	li	a5,12
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1012
}
20015ad0:	853e                	mv	a0,a5
20015ad2:	4472                	lw	s0,28(sp)
20015ad4:	6105                	addi	sp,sp,32
20015ad6:	8082                	ret

20015ad8 <__metal_driver_sifive_fe310_g000_pll_config_base>:
__metal_driver_sifive_fe310_g000_pll_config_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1015
{
20015ad8:	1141                	addi	sp,sp,-16
20015ada:	c622                	sw	s0,12(sp)
20015adc:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1016
		return (struct __metal_driver_sifive_fe310_g000_prci *)&__metal_dt_prci_10008000;
20015ade:	82018793          	addi	a5,gp,-2016 # 80000b00 <__metal_dt_prci_10008000>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1017
}
20015ae2:	853e                	mv	a0,a5
20015ae4:	4432                	lw	s0,12(sp)
20015ae6:	0141                	addi	sp,sp,16
20015ae8:	8082                	ret

20015aea <__metal_driver_sifive_fe310_g000_pll_config_offset>:
__metal_driver_sifive_fe310_g000_pll_config_offset():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1020
{
20015aea:	1141                	addi	sp,sp,-16
20015aec:	c622                	sw	s0,12(sp)
20015aee:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1021
		return METAL_SIFIVE_FE310_G000_PRCI_PLLCFG;
20015af0:	47a1                	li	a5,8
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1022
}
20015af2:	853e                	mv	a0,a5
20015af4:	4432                	lw	s0,12(sp)
20015af6:	0141                	addi	sp,sp,16
20015af8:	8082                	ret

20015afa <__metal_driver_sifive_fe310_g000_pll_init_rate>:
__metal_driver_sifive_fe310_g000_pll_init_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1025
{
20015afa:	1141                	addi	sp,sp,-16
20015afc:	c622                	sw	s0,12(sp)
20015afe:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1026
		return 16000000;
20015b00:	00f427b7          	lui	a5,0xf42
20015b04:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1027
}
20015b08:	853e                	mv	a0,a5
20015b0a:	4432                	lw	s0,12(sp)
20015b0c:	0141                	addi	sp,sp,16
20015b0e:	8082                	ret

20015b10 <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1033
{
20015b10:	1141                	addi	sp,sp,-16
20015b12:	c622                	sw	s0,12(sp)
20015b14:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20015b16:	100087b7          	lui	a5,0x10008
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1035
}
20015b1a:	853e                	mv	a0,a5
20015b1c:	4432                	lw	s0,12(sp)
20015b1e:	0141                	addi	sp,sp,16
20015b20:	8082                	ret

20015b22 <__metal_driver_sifive_fe310_g000_prci_vtable>:
__metal_driver_sifive_fe310_g000_prci_vtable():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1043
{
20015b22:	1141                	addi	sp,sp,-16
20015b24:	c622                	sw	s0,12(sp)
20015b26:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1044
		return &__metal_driver_vtable_sifive_fe310_g000_prci;
20015b28:	83418793          	addi	a5,gp,-1996 # 80000b14 <__metal_driver_vtable_sifive_fe310_g000_prci>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1045
}
20015b2c:	853e                	mv	a0,a5
20015b2e:	4432                	lw	s0,12(sp)
20015b30:	0141                	addi	sp,sp,16
20015b32:	8082                	ret

20015b34 <get_pll_config_freq>:
get_pll_config_freq():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:137
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(unsigned long pll_input_rate, const struct pll_config_t *config)
{
20015b34:	1101                	addi	sp,sp,-32
20015b36:	ce22                	sw	s0,28(sp)
20015b38:	1000                	addi	s0,sp,32
20015b3a:	fea42623          	sw	a0,-20(s0)
20015b3e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
20015b42:	fe842783          	lw	a5,-24(s0)
20015b46:	479c                	lw	a5,8(a5)
20015b48:	fec42703          	lw	a4,-20(s0)
20015b4c:	00f76963          	bltu	a4,a5,20015b5e <get_pll_config_freq+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:138 (discriminator 1)
20015b50:	fe842783          	lw	a5,-24(s0)
20015b54:	47dc                	lw	a5,12(a5)
20015b56:	fec42703          	lw	a4,-20(s0)
20015b5a:	00e7f463          	bgeu	a5,a4,20015b62 <get_pll_config_freq+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:139
        return PLL_CONFIG_NOT_VALID;
20015b5e:	57fd                	li	a5,-1
20015b60:	a829                	j	20015b7a <get_pll_config_freq+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:141

    return pll_input_rate * config->multiplier / config->divisor;
20015b62:	fe842783          	lw	a5,-24(s0)
20015b66:	4398                	lw	a4,0(a5)
20015b68:	fec42783          	lw	a5,-20(s0)
20015b6c:	02f70733          	mul	a4,a4,a5
20015b70:	fe842783          	lw	a5,-24(s0)
20015b74:	43dc                	lw	a5,4(a5)
20015b76:	02f757b3          	divu	a5,a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
}
20015b7a:	853e                	mv	a0,a5
20015b7c:	4472                	lw	s0,28(sp)
20015b7e:	6105                	addi	sp,sp,32
20015b80:	8082                	ret

20015b82 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:147

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
20015b82:	1101                	addi	sp,sp,-32
20015b84:	ce06                	sw	ra,28(sp)
20015b86:	cc22                	sw	s0,24(sp)
20015b88:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:148
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20015b8a:	3f85                	jal	20015afa <__metal_driver_sifive_fe310_g000_pll_init_rate>
20015b8c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:150
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(init_rate != 0)
20015b90:	fec42783          	lw	a5,-20(s0)
20015b94:	c791                	beqz	a5,20015ba0 <metal_sifive_fe310_g000_pll_init+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:151
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
20015b96:	800017b7          	lui	a5,0x80001
20015b9a:	ad078513          	addi	a0,a5,-1328 # 80000ad0 <metal_segment_heap_target_end+0xffffcb54>
20015b9e:	2031                	jal	20015baa <__metal_driver_sifive_fe310_g000_pll_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:152
}
20015ba0:	0001                	nop
20015ba2:	40f2                	lw	ra,28(sp)
20015ba4:	4462                	lw	s0,24(sp)
20015ba6:	6105                	addi	sp,sp,32
20015ba8:	8082                	ret

20015baa <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:156

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20015baa:	7139                	addi	sp,sp,-64
20015bac:	de06                	sw	ra,60(sp)
20015bae:	dc22                	sw	s0,56(sp)
20015bb0:	0080                	addi	s0,sp,64
20015bb2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:157
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(&(pll->clock));
20015bb6:	fcc42783          	lw	a5,-52(s0)
20015bba:	853e                	mv	a0,a5
20015bbc:	3de1                	jal	20015a94 <__metal_driver_sifive_fe310_g000_pll_pllref>
20015bbe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:158
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20015bc2:	3f25                	jal	20015afa <__metal_driver_sifive_fe310_g000_pll_init_rate>
20015bc4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:159
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset();
20015bc8:	370d                	jal	20015aea <__metal_driver_sifive_fe310_g000_pll_config_offset>
20015bca:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:160
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20015bce:	3789                	jal	20015b10 <__metal_driver_sifive_fe310_g000_prci_base>
20015bd0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20015bd4:	fe042703          	lw	a4,-32(s0)
20015bd8:	fe442783          	lw	a5,-28(s0)
20015bdc:	97ba                	add	a5,a5,a4
20015bde:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:165

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20015be2:	fcc42783          	lw	a5,-52(s0)
20015be6:	43dc                	lw	a5,4(a5)
20015be8:	853e                	mv	a0,a5
20015bea:	59c010ef          	jal	ra,20017186 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:168

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20015bee:	fdc42783          	lw	a5,-36(s0)
20015bf2:	4398                	lw	a4,0(a5)
20015bf4:	67c1                	lui	a5,0x10
20015bf6:	8ff9                	and	a5,a5,a4
20015bf8:	eb91                	bnez	a5,20015c0c <__metal_driver_sifive_fe310_g000_pll_init+0x62>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:169
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20015bfa:	fdc42783          	lw	a5,-36(s0)
20015bfe:	4398                	lw	a4,0(a5)
20015c00:	77c1                	lui	a5,0xffff0
20015c02:	17fd                	addi	a5,a5,-1
20015c04:	8f7d                	and	a4,a4,a5
20015c06:	fdc42783          	lw	a5,-36(s0)
20015c0a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:172

    /* Make sure we're running off of the external oscillator for stability */
    if(pllref != NULL)
20015c0c:	fec42783          	lw	a5,-20(s0)
20015c10:	cb91                	beqz	a5,20015c24 <__metal_driver_sifive_fe310_g000_pll_init+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20015c12:	fdc42783          	lw	a5,-36(s0)
20015c16:	4398                	lw	a4,0(a5)
20015c18:	000207b7          	lui	a5,0x20
20015c1c:	8f5d                	or	a4,a4,a5
20015c1e:	fdc42783          	lw	a5,-36(s0)
20015c22:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20015c24:	fcc42783          	lw	a5,-52(s0)
20015c28:	439c                	lw	a5,0(a5)
20015c2a:	43d8                	lw	a4,4(a5)
20015c2c:	fcc42783          	lw	a5,-52(s0)
20015c30:	fe842583          	lw	a1,-24(s0)
20015c34:	853e                	mv	a0,a5
20015c36:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:181

    /* If the PLL clock has had a rate_change_callback configured, call it */
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20015c38:	fcc42783          	lw	a5,-52(s0)
20015c3c:	479c                	lw	a5,8(a5)
20015c3e:	853e                	mv	a0,a5
20015c40:	546010ef          	jal	ra,20017186 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
}
20015c44:	0001                	nop
20015c46:	50f2                	lw	ra,60(sp)
20015c48:	5462                	lw	s0,56(sp)
20015c4a:	6121                	addi	sp,sp,64
20015c4c:	8082                	ret

20015c4e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:185

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
20015c4e:	711d                	addi	sp,sp,-96
20015c50:	ce86                	sw	ra,92(sp)
20015c52:	cca2                	sw	s0,88(sp)
20015c54:	1080                	addi	s0,sp,96
20015c56:	faa42623          	sw	a0,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:186
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20015c5a:	fac42503          	lw	a0,-84(s0)
20015c5e:	e37ff0ef          	jal	ra,20015a94 <__metal_driver_sifive_fe310_g000_pll_pllref>
20015c62:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20015c66:	fac42503          	lw	a0,-84(s0)
20015c6a:	e11ff0ef          	jal	ra,20015a7a <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20015c6e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:188
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20015c72:	fac42503          	lw	a0,-84(s0)
20015c76:	e75ff0ef          	jal	ra,20015aea <__metal_driver_sifive_fe310_g000_pll_config_offset>
20015c7a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
      __metal_driver_sifive_fe310_g000_pll_config_base(clock);
20015c7e:	fac42503          	lw	a0,-84(s0)
20015c82:	e57ff0ef          	jal	ra,20015ad8 <__metal_driver_sifive_fe310_g000_pll_config_base>
20015c86:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20015c8a:	fac42503          	lw	a0,-84(s0)
20015c8e:	e37ff0ef          	jal	ra,20015ac4 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20015c92:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:193
    struct __metal_driver_sifive_fe310_g000_prci *divider_base =
      __metal_driver_sifive_fe310_g000_pll_divider_base(clock);
20015c96:	fac42503          	lw	a0,-84(s0)
20015c9a:	e15ff0ef          	jal	ra,20015aae <__metal_driver_sifive_fe310_g000_pll_divider_base>
20015c9e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:195
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
      __metal_driver_sifive_fe310_g000_prci_vtable();
20015ca2:	e81ff0ef          	jal	ra,20015b22 <__metal_driver_sifive_fe310_g000_prci_vtable>
20015ca6:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:197

    long cfg = vtable->get_reg(config_base, config_offset);
20015caa:	fd442783          	lw	a5,-44(s0)
20015cae:	439c                	lw	a5,0(a5)
20015cb0:	fe442583          	lw	a1,-28(s0)
20015cb4:	fe042503          	lw	a0,-32(s0)
20015cb8:	9782                	jalr	a5
20015cba:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:198
    long div = vtable->get_reg(divider_base, divider_offset);
20015cbe:	fd442783          	lw	a5,-44(s0)
20015cc2:	439c                	lw	a5,0(a5)
20015cc4:	fdc42583          	lw	a1,-36(s0)
20015cc8:	fd842503          	lw	a0,-40(s0)
20015ccc:	9782                	jalr	a5
20015cce:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:202

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20015cd2:	fd042703          	lw	a4,-48(s0)
20015cd6:	67c1                	lui	a5,0x10
20015cd8:	8f7d                	and	a4,a4,a5
20015cda:	67c1                	lui	a5,0x10
20015cdc:	00f77863          	bgeu	a4,a5,20015cec <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x9e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:203
        return metal_clock_get_rate_hz(pllsel0);
20015ce0:	fe842503          	lw	a0,-24(s0)
20015ce4:	536010ef          	jal	ra,2001721a <metal_clock_get_rate_hz>
20015ce8:	87aa                	mv	a5,a0
20015cea:	a8e1                	j	20015dc2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20015cec:	fd042703          	lw	a4,-48(s0)
20015cf0:	000207b7          	lui	a5,0x20
20015cf4:	8f7d                	and	a4,a4,a5
20015cf6:	000207b7          	lui	a5,0x20
20015cfa:	00f76563          	bltu	a4,a5,20015d04 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 1)
20015cfe:	fec42783          	lw	a5,-20(s0)
20015d02:	a019                	j	20015d08 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xba>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 2)
20015d04:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:207 (discriminator 4)
20015d08:	853e                	mv	a0,a5
20015d0a:	510010ef          	jal	ra,2001721a <metal_clock_get_rate_hz>
20015d0e:	fca42423          	sw	a0,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20015d12:	fd042703          	lw	a4,-48(s0)
20015d16:	000407b7          	lui	a5,0x40
20015d1a:	8f7d                	and	a4,a4,a5
20015d1c:	000407b7          	lui	a5,0x40
20015d20:	00f76563          	bltu	a4,a5,20015d2a <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xdc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:212
        return ref_hz;
20015d24:	fc842783          	lw	a5,-56(s0)
20015d28:	a869                	j	20015dc2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
20015d2a:	fd042783          	lw	a5,-48(s0)
20015d2e:	8b9d                	andi	a5,a5,7
20015d30:	0785                	addi	a5,a5,1
20015d32:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
20015d36:	fd042783          	lw	a5,-48(s0)
20015d3a:	3f07f793          	andi	a5,a5,1008
20015d3e:	8391                	srli	a5,a5,0x4
20015d40:	0785                	addi	a5,a5,1
20015d42:	0786                	slli	a5,a5,0x1
20015d44:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:217
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
20015d48:	fd042703          	lw	a4,-48(s0)
20015d4c:	6785                	lui	a5,0x1
20015d4e:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20015d52:	8f7d                	and	a4,a4,a5
20015d54:	3ff00793          	li	a5,1023
20015d58:	00e7e463          	bltu	a5,a4,20015d60 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x112>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:218
        return -1;
20015d5c:	57fd                	li	a5,-1
20015d5e:	a095                	j	20015dc2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:219
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
20015d60:	fd042703          	lw	a4,-48(s0)
20015d64:	6785                	lui	a5,0x1
20015d66:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20015d6a:	8ff9                	and	a5,a5,a4
20015d6c:	83a9                	srli	a5,a5,0xa
20015d6e:	4705                	li	a4,1
20015d70:	00f717b3          	sll	a5,a4,a5
20015d74:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:224

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
20015d78:	fc842703          	lw	a4,-56(s0)
20015d7c:	fc442783          	lw	a5,-60(s0)
20015d80:	02f74733          	div	a4,a4,a5
20015d84:	fc042783          	lw	a5,-64(s0)
20015d88:	02f70733          	mul	a4,a4,a5
20015d8c:	fbc42783          	lw	a5,-68(s0)
20015d90:	02f747b3          	div	a5,a4,a5
20015d94:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225
    if (__METAL_GET_FIELD(div, DIV_1))
20015d98:	fcc42783          	lw	a5,-52(s0)
20015d9c:	1007f713          	andi	a4,a5,256
20015da0:	0ff00793          	li	a5,255
20015da4:	00e7f563          	bgeu	a5,a4,20015dae <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x160>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:226
        return pllout;
20015da8:	fb842783          	lw	a5,-72(s0)
20015dac:	a819                	j	20015dc2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x174>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:228

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20015dae:	fb842703          	lw	a4,-72(s0)
20015db2:	fcc42783          	lw	a5,-52(s0)
20015db6:	03f7f793          	andi	a5,a5,63
20015dba:	0785                	addi	a5,a5,1
20015dbc:	0786                	slli	a5,a5,0x1
20015dbe:	02f757b3          	divu	a5,a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
}
20015dc2:	853e                	mv	a0,a5
20015dc4:	40f6                	lw	ra,92(sp)
20015dc6:	4466                	lw	s0,88(sp)
20015dc8:	6125                	addi	sp,sp,96
20015dca:	8082                	ret

20015dcc <find_closest_config>:
find_closest_config():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:240
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20015dcc:	7139                	addi	sp,sp,-64
20015dce:	de06                	sw	ra,60(sp)
20015dd0:	dc22                	sw	s0,56(sp)
20015dd2:	0080                	addi	s0,sp,64
20015dd4:	fca42623          	sw	a0,-52(s0)
20015dd8:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:241
    int closest_index = -1;
20015ddc:	57fd                	li	a5,-1
20015dde:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    long closest_diff = LONG_MAX;
20015de2:	800007b7          	lui	a5,0x80000
20015de6:	fff7c793          	not	a5,a5
20015dea:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20015dee:	04300793          	li	a5,67
20015df2:	fef42223          	sw	a5,-28(s0)
20015df6:	a0b5                	j	20015e62 <find_closest_config+0x96>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:248
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
20015df8:	fcc42683          	lw	a3,-52(s0)
20015dfc:	fe442783          	lw	a5,-28(s0)
20015e00:	00579713          	slli	a4,a5,0x5
20015e04:	200187b7          	lui	a5,0x20018
20015e08:	90878793          	addi	a5,a5,-1784 # 20017908 <pll_configs>
20015e0c:	97ba                	add	a5,a5,a4
20015e0e:	85be                	mv	a1,a5
20015e10:	8536                	mv	a0,a3
20015e12:	d23ff0ef          	jal	ra,20015b34 <get_pll_config_freq>
20015e16:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:249
        if(config_freq != PLL_CONFIG_NOT_VALID)
20015e1a:	fe042703          	lw	a4,-32(s0)
20015e1e:	57fd                	li	a5,-1
20015e20:	02f70c63          	beq	a4,a5,20015e58 <find_closest_config+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:251
        {
            long freq_diff = abs(config_freq - rate);
20015e24:	fe042703          	lw	a4,-32(s0)
20015e28:	fc842783          	lw	a5,-56(s0)
20015e2c:	8f1d                	sub	a4,a4,a5
20015e2e:	41f75793          	srai	a5,a4,0x1f
20015e32:	8f3d                	xor	a4,a4,a5
20015e34:	40f707b3          	sub	a5,a4,a5
20015e38:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:252
            if(freq_diff < closest_diff)
20015e3c:	fdc42703          	lw	a4,-36(s0)
20015e40:	fe842783          	lw	a5,-24(s0)
20015e44:	00f75a63          	bge	a4,a5,20015e58 <find_closest_config+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:254
            {
                closest_index = i;
20015e48:	fe442783          	lw	a5,-28(s0)
20015e4c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:255
                closest_diff = freq_diff;
20015e50:	fdc42783          	lw	a5,-36(s0)
20015e54:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20015e58:	fe442783          	lw	a5,-28(s0)
20015e5c:	17fd                	addi	a5,a5,-1
20015e5e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:246 (discriminator 1)
20015e62:	fe442783          	lw	a5,-28(s0)
20015e66:	f807d9e3          	bgez	a5,20015df8 <find_closest_config+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
            }
        }
    }

    return closest_index;
20015e6a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:261
}
20015e6e:	853e                	mv	a0,a5
20015e70:	50f2                	lw	ra,60(sp)
20015e72:	5462                	lw	s0,56(sp)
20015e74:	6121                	addi	sp,sp,64
20015e76:	8082                	ret

20015e78 <configure_pll>:
configure_pll():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
20015e78:	1101                	addi	sp,sp,-32
20015e7a:	ce22                	sw	s0,28(sp)
20015e7c:	1000                	addi	s0,sp,32
20015e7e:	fea42623          	sw	a0,-20(s0)
20015e82:	feb42423          	sw	a1,-24(s0)
20015e86:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:266
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
20015e8a:	fec42783          	lw	a5,-20(s0)
20015e8e:	439c                	lw	a5,0(a5)
20015e90:	ff87f713          	andi	a4,a5,-8
20015e94:	fec42783          	lw	a5,-20(s0)
20015e98:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:267
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
20015e9a:	fec42783          	lw	a5,-20(s0)
20015e9e:	4398                	lw	a4,0(a5)
20015ea0:	fe442783          	lw	a5,-28(s0)
20015ea4:	4b9c                	lw	a5,16(a5)
20015ea6:	8b9d                	andi	a5,a5,7
20015ea8:	8f5d                	or	a4,a4,a5
20015eaa:	fec42783          	lw	a5,-20(s0)
20015eae:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:269

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20015eb0:	fec42783          	lw	a5,-20(s0)
20015eb4:	439c                	lw	a5,0(a5)
20015eb6:	c0f7f713          	andi	a4,a5,-1009
20015eba:	fec42783          	lw	a5,-20(s0)
20015ebe:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:270
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20015ec0:	fec42783          	lw	a5,-20(s0)
20015ec4:	4398                	lw	a4,0(a5)
20015ec6:	fe442783          	lw	a5,-28(s0)
20015eca:	4bdc                	lw	a5,20(a5)
20015ecc:	0792                	slli	a5,a5,0x4
20015ece:	3f07f793          	andi	a5,a5,1008
20015ed2:	8f5d                	or	a4,a4,a5
20015ed4:	fec42783          	lw	a5,-20(s0)
20015ed8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:272

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20015eda:	fec42783          	lw	a5,-20(s0)
20015ede:	4398                	lw	a4,0(a5)
20015ee0:	77fd                	lui	a5,0xfffff
20015ee2:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffb483>
20015ee6:	8f7d                	and	a4,a4,a5
20015ee8:	fec42783          	lw	a5,-20(s0)
20015eec:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:273
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20015eee:	fec42783          	lw	a5,-20(s0)
20015ef2:	4398                	lw	a4,0(a5)
20015ef4:	fe442783          	lw	a5,-28(s0)
20015ef8:	4f9c                	lw	a5,24(a5)
20015efa:	00a79693          	slli	a3,a5,0xa
20015efe:	6785                	lui	a5,0x1
20015f00:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x400>
20015f04:	8ff5                	and	a5,a5,a3
20015f06:	8f5d                	or	a4,a4,a5
20015f08:	fec42783          	lw	a5,-20(s0)
20015f0c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:275

    if(config->d < 0)
20015f0e:	fe442783          	lw	a5,-28(s0)
20015f12:	4fdc                	lw	a5,28(a5)
20015f14:	0207db63          	bgez	a5,20015f4a <configure_pll+0xd2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:278
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20015f18:	fe842783          	lw	a5,-24(s0)
20015f1c:	439c                	lw	a5,0(a5)
20015f1e:	1007e713          	ori	a4,a5,256
20015f22:	fe842783          	lw	a5,-24(s0)
20015f26:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:280

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20015f28:	fe842783          	lw	a5,-24(s0)
20015f2c:	439c                	lw	a5,0(a5)
20015f2e:	fc07f713          	andi	a4,a5,-64
20015f32:	fe842783          	lw	a5,-24(s0)
20015f36:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:281
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20015f38:	fe842783          	lw	a5,-24(s0)
20015f3c:	439c                	lw	a5,0(a5)
20015f3e:	0017e713          	ori	a4,a5,1
20015f42:	fe842783          	lw	a5,-24(s0)
20015f46:	c398                	sw	a4,0(a5)
20015f48:	a82d                	j	20015f82 <configure_pll+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:285
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
20015f4a:	fe842783          	lw	a5,-24(s0)
20015f4e:	439c                	lw	a5,0(a5)
20015f50:	eff7f713          	andi	a4,a5,-257
20015f54:	fe842783          	lw	a5,-24(s0)
20015f58:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:287

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20015f5a:	fe842783          	lw	a5,-24(s0)
20015f5e:	439c                	lw	a5,0(a5)
20015f60:	fc07f713          	andi	a4,a5,-64
20015f64:	fe842783          	lw	a5,-24(s0)
20015f68:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:288
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20015f6a:	fe842783          	lw	a5,-24(s0)
20015f6e:	4398                	lw	a4,0(a5)
20015f70:	fe442783          	lw	a5,-28(s0)
20015f74:	4fdc                	lw	a5,28(a5)
20015f76:	03f7f793          	andi	a5,a5,63
20015f7a:	8f5d                	or	a4,a4,a5
20015f7c:	fe842783          	lw	a5,-24(s0)
20015f80:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20015f82:	fec42783          	lw	a5,-20(s0)
20015f86:	4398                	lw	a4,0(a5)
20015f88:	fffc07b7          	lui	a5,0xfffc0
20015f8c:	17fd                	addi	a5,a5,-1
20015f8e:	8f7d                	and	a4,a4,a5
20015f90:	fec42783          	lw	a5,-20(s0)
20015f94:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
20015f96:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294 (discriminator 1)
20015f98:	fec42783          	lw	a5,-20(s0)
20015f9c:	439c                	lw	a5,0(a5)
20015f9e:	fe07dde3          	bgez	a5,20015f98 <configure_pll+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
}
20015fa2:	0001                	nop
20015fa4:	4472                	lw	s0,28(sp)
20015fa6:	6105                	addi	sp,sp,32
20015fa8:	8082                	ret

20015faa <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
20015faa:	715d                	addi	sp,sp,-80
20015fac:	c686                	sw	ra,76(sp)
20015fae:	c4a2                	sw	s0,72(sp)
20015fb0:	0880                	addi	s0,sp,80
20015fb2:	faa42e23          	sw	a0,-68(s0)
20015fb6:	fab42c23          	sw	a1,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:299
    struct metal_clock *pllref = __metal_driver_sifive_fe310_g000_pll_pllref(clock);
20015fba:	fbc42503          	lw	a0,-68(s0)
20015fbe:	ad7ff0ef          	jal	ra,20015a94 <__metal_driver_sifive_fe310_g000_pll_pllref>
20015fc2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    struct metal_clock *pllsel0 = __metal_driver_sifive_fe310_g000_pll_pllsel0(clock);
20015fc6:	fbc42503          	lw	a0,-68(s0)
20015fca:	ab1ff0ef          	jal	ra,20015a7a <__metal_driver_sifive_fe310_g000_pll_pllsel0>
20015fce:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:301
    long config_offset = __metal_driver_sifive_fe310_g000_pll_config_offset(clock);
20015fd2:	fbc42503          	lw	a0,-68(s0)
20015fd6:	b15ff0ef          	jal	ra,20015aea <__metal_driver_sifive_fe310_g000_pll_config_offset>
20015fda:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
    long divider_offset = __metal_driver_sifive_fe310_g000_pll_divider_offset(clock);
20015fde:	fbc42503          	lw	a0,-68(s0)
20015fe2:	ae3ff0ef          	jal	ra,20015ac4 <__metal_driver_sifive_fe310_g000_pll_divider_offset>
20015fe6:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:303
    long base = __metal_driver_sifive_fe310_g000_prci_base();
20015fea:	b27ff0ef          	jal	ra,20015b10 <__metal_driver_sifive_fe310_g000_prci_base>
20015fee:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305

    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (base + config_offset);
20015ff2:	fdc42703          	lw	a4,-36(s0)
20015ff6:	fe442783          	lw	a5,-28(s0)
20015ffa:	97ba                	add	a5,a5,a4
20015ffc:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:306
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (base + divider_offset);
20016000:	fdc42703          	lw	a4,-36(s0)
20016004:	fe042783          	lw	a5,-32(s0)
20016008:	97ba                	add	a5,a5,a4
2001600a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
2001600e:	fd842783          	lw	a5,-40(s0)
20016012:	4398                	lw	a4,0(a5)
20016014:	67c1                	lui	a5,0x10
20016016:	8ff9                	and	a5,a5,a4
20016018:	cb91                	beqz	a5,2001602c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
2001601a:	fd842783          	lw	a5,-40(s0)
2001601e:	4398                	lw	a4,0(a5)
20016020:	77c1                	lui	a5,0xffff0
20016022:	17fd                	addi	a5,a5,-1
20016024:	8f7d                	and	a4,a4,a5
20016026:	fd842783          	lw	a5,-40(s0)
2001602a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
2001602c:	fd842783          	lw	a5,-40(s0)
20016030:	4398                	lw	a4,0(a5)
20016032:	000207b7          	lui	a5,0x20
20016036:	8ff9                	and	a5,a5,a4
20016038:	c781                	beqz	a5,20016040 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x96>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 1)
2001603a:	fec42783          	lw	a5,-20(s0)
2001603e:	a019                	j	20016044 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 2)
20016040:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:314 (discriminator 4)
20016044:	853e                	mv	a0,a5
20016046:	1d4010ef          	jal	ra,2001721a <metal_clock_get_rate_hz>
2001604a:	fca42823          	sw	a0,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
2001604e:	fd042703          	lw	a4,-48(s0)
20016052:	87ba                	mv	a5,a4
20016054:	0786                	slli	a5,a5,0x1
20016056:	97ba                	add	a5,a5,a4
20016058:	41f7d713          	srai	a4,a5,0x1f
2001605c:	8b0d                	andi	a4,a4,3
2001605e:	97ba                	add	a5,a5,a4
20016060:	8789                	srai	a5,a5,0x2
20016062:	873e                	mv	a4,a5
20016064:	fb842783          	lw	a5,-72(s0)
20016068:	02e7cb63          	blt	a5,a4,2001609e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:317 (discriminator 1)
2001606c:	fd042703          	lw	a4,-48(s0)
20016070:	87ba                	mv	a5,a4
20016072:	078a                	slli	a5,a5,0x2
20016074:	97ba                	add	a5,a5,a4
20016076:	41f7d713          	srai	a4,a5,0x1f
2001607a:	8b0d                	andi	a4,a4,3
2001607c:	97ba                	add	a5,a5,a4
2001607e:	8789                	srai	a5,a5,0x2
20016080:	873e                	mv	a4,a5
20016082:	fb842783          	lw	a5,-72(s0)
20016086:	00f74c63          	blt	a4,a5,2001609e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:319
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
2001608a:	fd842783          	lw	a5,-40(s0)
2001608e:	4398                	lw	a4,0(a5)
20016090:	000407b7          	lui	a5,0x40
20016094:	8f5d                	or	a4,a4,a5
20016096:	fd842783          	lw	a5,-40(s0)
2001609a:	c398                	sw	a4,0(a5)
2001609c:	a881                	j	200160ec <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:323
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
2001609e:	fb842583          	lw	a1,-72(s0)
200160a2:	fd042503          	lw	a0,-48(s0)
200160a6:	d27ff0ef          	jal	ra,20015dcc <find_closest_config>
200160aa:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:324
        if(config_index != -1)
200160ae:	fcc42703          	lw	a4,-52(s0)
200160b2:	57fd                	li	a5,-1
200160b4:	02f70363          	beq	a4,a5,200160da <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x130>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:326
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
200160b8:	fcc42783          	lw	a5,-52(s0)
200160bc:	00579713          	slli	a4,a5,0x5
200160c0:	200187b7          	lui	a5,0x20018
200160c4:	90878793          	addi	a5,a5,-1784 # 20017908 <pll_configs>
200160c8:	97ba                	add	a5,a5,a4
200160ca:	863e                	mv	a2,a5
200160cc:	fd442583          	lw	a1,-44(s0)
200160d0:	fd842503          	lw	a0,-40(s0)
200160d4:	da5ff0ef          	jal	ra,20015e78 <configure_pll>
200160d8:	a811                	j	200160ec <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:331
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
200160da:	fd842783          	lw	a5,-40(s0)
200160de:	4398                	lw	a4,0(a5)
200160e0:	000407b7          	lui	a5,0x40
200160e4:	8f5d                	or	a4,a4,a5
200160e6:	fd842783          	lw	a5,-40(s0)
200160ea:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:336
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
200160ec:	fd842783          	lw	a5,-40(s0)
200160f0:	4398                	lw	a4,0(a5)
200160f2:	67c1                	lui	a5,0x10
200160f4:	8f5d                	or	a4,a4,a5
200160f6:	fd842783          	lw	a5,-40(s0)
200160fa:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:338

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
200160fc:	fbc42503          	lw	a0,-68(s0)
20016100:	b4fff0ef          	jal	ra,20015c4e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20016104:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:339
}
20016106:	853e                	mv	a0,a5
20016108:	40b6                	lw	ra,76(sp)
2001610a:	4426                	lw	s0,72(sp)
2001610c:	6161                	addi	sp,sp,80
2001610e:	8082                	ret

20016110 <use_hfxosc>:
use_hfxosc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:344

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
20016110:	1101                	addi	sp,sp,-32
20016112:	ce06                	sw	ra,28(sp)
20016114:	cc22                	sw	s0,24(sp)
20016116:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
20016118:	9e3ff0ef          	jal	ra,20015afa <__metal_driver_sifive_fe310_g000_pll_init_rate>
2001611c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:346
    metal_clock_set_rate_hz(
20016120:	fec42583          	lw	a1,-20(s0)
20016124:	800017b7          	lui	a5,0x80001
20016128:	ad078513          	addi	a0,a5,-1328 # 80000ad0 <metal_segment_heap_target_end+0xffffcb54>
2001612c:	114010ef          	jal	ra,20017240 <metal_clock_set_rate_hz>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:349
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock, init_rate
    );
}
20016130:	0001                	nop
20016132:	40f2                	lw	ra,28(sp)
20016134:	4462                	lw	s0,24(sp)
20016136:	6105                	addi	sp,sp,32
20016138:	8082                	ret

2001613a <__metal_driver_sifive_fe310_g000_prci_base>:
__metal_driver_sifive_fe310_g000_prci_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1033
{
2001613a:	1141                	addi	sp,sp,-16
2001613c:	c622                	sw	s0,12(sp)
2001613e:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1034
		return METAL_SIFIVE_FE310_G000_PRCI_10008000_BASE_ADDRESS;
20016140:	100087b7          	lui	a5,0x10008
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:1035
}
20016144:	853e                	mv	a0,a5
20016146:	4432                	lw	s0,12(sp)
20016148:	0141                	addi	sp,sp,16
2001614a:	8082                	ret

2001614c <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:11
#ifdef METAL_SIFIVE_FE310_G000_PRCI

#include <metal/drivers/sifive_fe310-g000_prci.h>
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
2001614c:	7179                	addi	sp,sp,-48
2001614e:	d606                	sw	ra,44(sp)
20016150:	d422                	sw	s0,40(sp)
20016152:	1800                	addi	s0,sp,48
20016154:	fca42e23          	sw	a0,-36(s0)
20016158:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:12
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2001615c:	3ff9                	jal	2001613a <__metal_driver_sifive_fe310_g000_prci_base>
2001615e:	87aa                	mv	a5,a0
20016160:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:13
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
20016164:	fd842703          	lw	a4,-40(s0)
20016168:	fec42783          	lw	a5,-20(s0)
2001616c:	97ba                	add	a5,a5,a4
2001616e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
}
20016170:	853e                	mv	a0,a5
20016172:	50b2                	lw	ra,44(sp)
20016174:	5422                	lw	s0,40(sp)
20016176:	6145                	addi	sp,sp,48
20016178:	8082                	ret

2001617a <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:16

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
2001617a:	7179                	addi	sp,sp,-48
2001617c:	d606                	sw	ra,44(sp)
2001617e:	d422                	sw	s0,40(sp)
20016180:	1800                	addi	s0,sp,48
20016182:	fca42e23          	sw	a0,-36(s0)
20016186:	fcb42c23          	sw	a1,-40(s0)
2001618a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:17
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
2001618e:	3775                	jal	2001613a <__metal_driver_sifive_fe310_g000_prci_base>
20016190:	87aa                	mv	a5,a0
20016192:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:18
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
20016196:	fd842703          	lw	a4,-40(s0)
2001619a:	fec42783          	lw	a5,-20(s0)
2001619e:	97ba                	add	a5,a5,a4
200161a0:	873e                	mv	a4,a5
200161a2:	fd442783          	lw	a5,-44(s0)
200161a6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
}
200161a8:	853e                	mv	a0,a5
200161aa:	50b2                	lw	ra,44(sp)
200161ac:	5422                	lw	s0,40(sp)
200161ae:	6145                	addi	sp,sp,48
200161b0:	8082                	ret

200161b2 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:380
{
200161b2:	1101                	addi	sp,sp,-32
200161b4:	ce22                	sw	s0,28(sp)
200161b6:	1000                	addi	s0,sp,32
200161b8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:381
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200161bc:	fec42703          	lw	a4,-20(s0)
200161c0:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200161c4:	00f71563          	bne	a4,a5,200161ce <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:382
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200161c8:	100127b7          	lui	a5,0x10012
200161cc:	a011                	j	200161d0 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:385
		return 0;
200161ce:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:387
}
200161d0:	853e                	mv	a0,a5
200161d2:	4472                	lw	s0,28(sp)
200161d4:	6105                	addi	sp,sp,32
200161d6:	8082                	ret

200161d8 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:410
{
200161d8:	1101                	addi	sp,sp,-32
200161da:	ce22                	sw	s0,28(sp)
200161dc:	1000                	addi	s0,sp,32
200161de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:411
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200161e2:	fec42703          	lw	a4,-20(s0)
200161e6:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200161ea:	00f71763          	bne	a4,a5,200161f8 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:412
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
200161ee:	800007b7          	lui	a5,0x80000
200161f2:	4a078793          	addi	a5,a5,1184 # 800004a0 <metal_segment_heap_target_end+0xffffc524>
200161f6:	a011                	j	200161fa <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:415
		return 0;
200161f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:417
}
200161fa:	853e                	mv	a0,a5
200161fc:	4472                	lw	s0,28(sp)
200161fe:	6105                	addi	sp,sp,32
20016200:	8082                	ret

20016202 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:420
{
20016202:	1101                	addi	sp,sp,-32
20016204:	ce22                	sw	s0,28(sp)
20016206:	1000                	addi	s0,sp,32
20016208:	fea42623          	sw	a0,-20(s0)
2001620c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:421
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20016210:	fec42703          	lw	a4,-20(s0)
20016214:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016218:	00f71763          	bne	a4,a5,20016226 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:421 (discriminator 1)
2001621c:	fe842783          	lw	a5,-24(s0)
20016220:	e399                	bnez	a5,20016226 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:422
		return 8;
20016222:	47a1                	li	a5,8
20016224:	ae15                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:424
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20016226:	fec42703          	lw	a4,-20(s0)
2001622a:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001622e:	00f71963          	bne	a4,a5,20016240 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:424 (discriminator 1)
20016232:	fe842703          	lw	a4,-24(s0)
20016236:	4785                	li	a5,1
20016238:	00f71463          	bne	a4,a5,20016240 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:425
		return 9;
2001623c:	47a5                	li	a5,9
2001623e:	ae29                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:427
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20016240:	fec42703          	lw	a4,-20(s0)
20016244:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016248:	00f71963          	bne	a4,a5,2001625a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:427 (discriminator 1)
2001624c:	fe842703          	lw	a4,-24(s0)
20016250:	4789                	li	a5,2
20016252:	00f71463          	bne	a4,a5,2001625a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:428
		return 10;
20016256:	47a9                	li	a5,10
20016258:	a601                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:430
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2001625a:	fec42703          	lw	a4,-20(s0)
2001625e:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016262:	00f71963          	bne	a4,a5,20016274 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:430 (discriminator 1)
20016266:	fe842703          	lw	a4,-24(s0)
2001626a:	478d                	li	a5,3
2001626c:	00f71463          	bne	a4,a5,20016274 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:431
		return 11;
20016270:	47ad                	li	a5,11
20016272:	a4dd                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:433
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20016274:	fec42703          	lw	a4,-20(s0)
20016278:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001627c:	00f71963          	bne	a4,a5,2001628e <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:433 (discriminator 1)
20016280:	fe842703          	lw	a4,-24(s0)
20016284:	4791                	li	a5,4
20016286:	00f71463          	bne	a4,a5,2001628e <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:434
		return 12;
2001628a:	47b1                	li	a5,12
2001628c:	a4f1                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:436
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2001628e:	fec42703          	lw	a4,-20(s0)
20016292:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016296:	00f71963          	bne	a4,a5,200162a8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:436 (discriminator 1)
2001629a:	fe842703          	lw	a4,-24(s0)
2001629e:	4795                	li	a5,5
200162a0:	00f71463          	bne	a4,a5,200162a8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:437
		return 13;
200162a4:	47b5                	li	a5,13
200162a6:	ac4d                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:439
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
200162a8:	fec42703          	lw	a4,-20(s0)
200162ac:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200162b0:	00f71963          	bne	a4,a5,200162c2 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:439 (discriminator 1)
200162b4:	fe842703          	lw	a4,-24(s0)
200162b8:	4799                	li	a5,6
200162ba:	00f71463          	bne	a4,a5,200162c2 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:440
		return 14;
200162be:	47b9                	li	a5,14
200162c0:	ac61                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:442
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
200162c2:	fec42703          	lw	a4,-20(s0)
200162c6:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200162ca:	00f71963          	bne	a4,a5,200162dc <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:442 (discriminator 1)
200162ce:	fe842703          	lw	a4,-24(s0)
200162d2:	479d                	li	a5,7
200162d4:	00f71463          	bne	a4,a5,200162dc <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:443
		return 15;
200162d8:	47bd                	li	a5,15
200162da:	acbd                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:445
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
200162dc:	fec42703          	lw	a4,-20(s0)
200162e0:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200162e4:	00f71963          	bne	a4,a5,200162f6 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:445 (discriminator 1)
200162e8:	fe842703          	lw	a4,-24(s0)
200162ec:	47a1                	li	a5,8
200162ee:	00f71463          	bne	a4,a5,200162f6 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:446
		return 16;
200162f2:	47c1                	li	a5,16
200162f4:	a495                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:448
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
200162f6:	fec42703          	lw	a4,-20(s0)
200162fa:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200162fe:	00f71963          	bne	a4,a5,20016310 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:448 (discriminator 1)
20016302:	fe842703          	lw	a4,-24(s0)
20016306:	47a5                	li	a5,9
20016308:	00f71463          	bne	a4,a5,20016310 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:449
		return 17;
2001630c:	47c5                	li	a5,17
2001630e:	a4a9                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:451
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20016310:	fec42703          	lw	a4,-20(s0)
20016314:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016318:	00f71963          	bne	a4,a5,2001632a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:451 (discriminator 1)
2001631c:	fe842703          	lw	a4,-24(s0)
20016320:	47a9                	li	a5,10
20016322:	00f71463          	bne	a4,a5,2001632a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:452
		return 18;
20016326:	47c9                	li	a5,18
20016328:	ac05                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:454
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2001632a:	fec42703          	lw	a4,-20(s0)
2001632e:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016332:	00f71963          	bne	a4,a5,20016344 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:454 (discriminator 1)
20016336:	fe842703          	lw	a4,-24(s0)
2001633a:	47ad                	li	a5,11
2001633c:	00f71463          	bne	a4,a5,20016344 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:455
		return 19;
20016340:	47cd                	li	a5,19
20016342:	ac19                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:457
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20016344:	fec42703          	lw	a4,-20(s0)
20016348:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001634c:	00f71963          	bne	a4,a5,2001635e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:457 (discriminator 1)
20016350:	fe842703          	lw	a4,-24(s0)
20016354:	47b1                	li	a5,12
20016356:	00f71463          	bne	a4,a5,2001635e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:458
		return 20;
2001635a:	47d1                	li	a5,20
2001635c:	aaf5                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:460
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2001635e:	fec42703          	lw	a4,-20(s0)
20016362:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016366:	00f71963          	bne	a4,a5,20016378 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:460 (discriminator 1)
2001636a:	fe842703          	lw	a4,-24(s0)
2001636e:	47b5                	li	a5,13
20016370:	00f71463          	bne	a4,a5,20016378 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:461
		return 21;
20016374:	47d5                	li	a5,21
20016376:	a2cd                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:463
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20016378:	fec42703          	lw	a4,-20(s0)
2001637c:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016380:	00f71963          	bne	a4,a5,20016392 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:463 (discriminator 1)
20016384:	fe842703          	lw	a4,-24(s0)
20016388:	47b9                	li	a5,14
2001638a:	00f71463          	bne	a4,a5,20016392 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:464
		return 22;
2001638e:	47d9                	li	a5,22
20016390:	a2e1                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:466
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20016392:	fec42703          	lw	a4,-20(s0)
20016396:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001639a:	00f71963          	bne	a4,a5,200163ac <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:466 (discriminator 1)
2001639e:	fe842703          	lw	a4,-24(s0)
200163a2:	47bd                	li	a5,15
200163a4:	00f71463          	bne	a4,a5,200163ac <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:467
		return 23;
200163a8:	47dd                	li	a5,23
200163aa:	a27d                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:469
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 16))) {
200163ac:	fec42703          	lw	a4,-20(s0)
200163b0:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200163b4:	00f71963          	bne	a4,a5,200163c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:469 (discriminator 1)
200163b8:	fe842703          	lw	a4,-24(s0)
200163bc:	47c1                	li	a5,16
200163be:	00f71463          	bne	a4,a5,200163c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x1c4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:470
		return 24;
200163c2:	47e1                	li	a5,24
200163c4:	aa51                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:472
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 17))) {
200163c6:	fec42703          	lw	a4,-20(s0)
200163ca:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200163ce:	00f71963          	bne	a4,a5,200163e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:472 (discriminator 1)
200163d2:	fe842703          	lw	a4,-24(s0)
200163d6:	47c5                	li	a5,17
200163d8:	00f71463          	bne	a4,a5,200163e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x1de>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:473
		return 25;
200163dc:	47e5                	li	a5,25
200163de:	aaad                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:475
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 18))) {
200163e0:	fec42703          	lw	a4,-20(s0)
200163e4:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200163e8:	00f71963          	bne	a4,a5,200163fa <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:475 (discriminator 1)
200163ec:	fe842703          	lw	a4,-24(s0)
200163f0:	47c9                	li	a5,18
200163f2:	00f71463          	bne	a4,a5,200163fa <__metal_driver_sifive_gpio0_interrupt_lines+0x1f8>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:476
		return 26;
200163f6:	47e9                	li	a5,26
200163f8:	a285                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:478
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 19))) {
200163fa:	fec42703          	lw	a4,-20(s0)
200163fe:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016402:	00f71963          	bne	a4,a5,20016414 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:478 (discriminator 1)
20016406:	fe842703          	lw	a4,-24(s0)
2001640a:	47cd                	li	a5,19
2001640c:	00f71463          	bne	a4,a5,20016414 <__metal_driver_sifive_gpio0_interrupt_lines+0x212>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:479
		return 27;
20016410:	47ed                	li	a5,27
20016412:	a299                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:481
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 20))) {
20016414:	fec42703          	lw	a4,-20(s0)
20016418:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001641c:	00f71963          	bne	a4,a5,2001642e <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:481 (discriminator 1)
20016420:	fe842703          	lw	a4,-24(s0)
20016424:	47d1                	li	a5,20
20016426:	00f71463          	bne	a4,a5,2001642e <__metal_driver_sifive_gpio0_interrupt_lines+0x22c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:482
		return 28;
2001642a:	47f1                	li	a5,28
2001642c:	a235                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:484
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 21))) {
2001642e:	fec42703          	lw	a4,-20(s0)
20016432:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016436:	00f71963          	bne	a4,a5,20016448 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:484 (discriminator 1)
2001643a:	fe842703          	lw	a4,-24(s0)
2001643e:	47d5                	li	a5,21
20016440:	00f71463          	bne	a4,a5,20016448 <__metal_driver_sifive_gpio0_interrupt_lines+0x246>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:485
		return 29;
20016444:	47f5                	li	a5,29
20016446:	aa09                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:487
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 22))) {
20016448:	fec42703          	lw	a4,-20(s0)
2001644c:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016450:	00f71963          	bne	a4,a5,20016462 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:487 (discriminator 1)
20016454:	fe842703          	lw	a4,-24(s0)
20016458:	47d9                	li	a5,22
2001645a:	00f71463          	bne	a4,a5,20016462 <__metal_driver_sifive_gpio0_interrupt_lines+0x260>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:488
		return 30;
2001645e:	47f9                	li	a5,30
20016460:	a8e5                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:490
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 23))) {
20016462:	fec42703          	lw	a4,-20(s0)
20016466:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001646a:	00f71963          	bne	a4,a5,2001647c <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:490 (discriminator 1)
2001646e:	fe842703          	lw	a4,-24(s0)
20016472:	47dd                	li	a5,23
20016474:	00f71463          	bne	a4,a5,2001647c <__metal_driver_sifive_gpio0_interrupt_lines+0x27a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:491
		return 31;
20016478:	47fd                	li	a5,31
2001647a:	a8f9                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:493
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 24))) {
2001647c:	fec42703          	lw	a4,-20(s0)
20016480:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016484:	00f71a63          	bne	a4,a5,20016498 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:493 (discriminator 1)
20016488:	fe842703          	lw	a4,-24(s0)
2001648c:	47e1                	li	a5,24
2001648e:	00f71563          	bne	a4,a5,20016498 <__metal_driver_sifive_gpio0_interrupt_lines+0x296>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:494
		return 32;
20016492:	02000793          	li	a5,32
20016496:	a0c9                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:496
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 25))) {
20016498:	fec42703          	lw	a4,-20(s0)
2001649c:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200164a0:	00f71a63          	bne	a4,a5,200164b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:496 (discriminator 1)
200164a4:	fe842703          	lw	a4,-24(s0)
200164a8:	47e5                	li	a5,25
200164aa:	00f71563          	bne	a4,a5,200164b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x2b2>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:497
		return 33;
200164ae:	02100793          	li	a5,33
200164b2:	a05d                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:499
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 26))) {
200164b4:	fec42703          	lw	a4,-20(s0)
200164b8:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200164bc:	00f71a63          	bne	a4,a5,200164d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:499 (discriminator 1)
200164c0:	fe842703          	lw	a4,-24(s0)
200164c4:	47e9                	li	a5,26
200164c6:	00f71563          	bne	a4,a5,200164d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x2ce>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:500
		return 34;
200164ca:	02200793          	li	a5,34
200164ce:	a069                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:502
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 27))) {
200164d0:	fec42703          	lw	a4,-20(s0)
200164d4:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200164d8:	00f71a63          	bne	a4,a5,200164ec <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:502 (discriminator 1)
200164dc:	fe842703          	lw	a4,-24(s0)
200164e0:	47ed                	li	a5,27
200164e2:	00f71563          	bne	a4,a5,200164ec <__metal_driver_sifive_gpio0_interrupt_lines+0x2ea>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:503
		return 35;
200164e6:	02300793          	li	a5,35
200164ea:	a0bd                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:505
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 28))) {
200164ec:	fec42703          	lw	a4,-20(s0)
200164f0:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
200164f4:	00f71a63          	bne	a4,a5,20016508 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:505 (discriminator 1)
200164f8:	fe842703          	lw	a4,-24(s0)
200164fc:	47f1                	li	a5,28
200164fe:	00f71563          	bne	a4,a5,20016508 <__metal_driver_sifive_gpio0_interrupt_lines+0x306>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:506
		return 36;
20016502:	02400793          	li	a5,36
20016506:	a889                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:508
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 29))) {
20016508:	fec42703          	lw	a4,-20(s0)
2001650c:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016510:	00f71963          	bne	a4,a5,20016522 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:508 (discriminator 1)
20016514:	fe842703          	lw	a4,-24(s0)
20016518:	47f5                	li	a5,29
2001651a:	00f71463          	bne	a4,a5,20016522 <__metal_driver_sifive_gpio0_interrupt_lines+0x320>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:509
		return 27;
2001651e:	47ed                	li	a5,27
20016520:	a825                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:511
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 30))) {
20016522:	fec42703          	lw	a4,-20(s0)
20016526:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
2001652a:	00f71963          	bne	a4,a5,2001653c <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:511 (discriminator 1)
2001652e:	fe842703          	lw	a4,-24(s0)
20016532:	47f9                	li	a5,30
20016534:	00f71463          	bne	a4,a5,2001653c <__metal_driver_sifive_gpio0_interrupt_lines+0x33a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:512
		return 28;
20016538:	47f1                	li	a5,28
2001653a:	a839                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:514
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 31))) {
2001653c:	fec42703          	lw	a4,-20(s0)
20016540:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016544:	00f71963          	bne	a4,a5,20016556 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:514 (discriminator 1)
20016548:	fe842703          	lw	a4,-24(s0)
2001654c:	47fd                	li	a5,31
2001654e:	00f71463          	bne	a4,a5,20016556 <__metal_driver_sifive_gpio0_interrupt_lines+0x354>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:515
		return 29;
20016552:	47f5                	li	a5,29
20016554:	a011                	j	20016558 <__metal_driver_sifive_gpio0_interrupt_lines+0x356>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:518
		return 0;
20016556:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:520
}
20016558:	853e                	mv	a0,a5
2001655a:	4472                	lw	s0,28(sp)
2001655c:	6105                	addi	sp,sp,32
2001655e:	8082                	ret

20016560 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20016560:	7179                	addi	sp,sp,-48
20016562:	d606                	sw	ra,44(sp)
20016564:	d422                	sw	s0,40(sp)
20016566:	1800                	addi	s0,sp,48
20016568:	fca42e23          	sw	a0,-36(s0)
2001656c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20016570:	fdc42503          	lw	a0,-36(s0)
20016574:	c3fff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016578:	87aa                	mv	a5,a0
2001657a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
2001657e:	fec42783          	lw	a5,-20(s0)
20016582:	0791                	addi	a5,a5,4
20016584:	4398                	lw	a4,0(a5)
20016586:	fd842783          	lw	a5,-40(s0)
2001658a:	fec42683          	lw	a3,-20(s0)
2001658e:	0691                	addi	a3,a3,4
20016590:	8fd9                	or	a5,a5,a4
20016592:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20016594:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20016596:	853e                	mv	a0,a5
20016598:	50b2                	lw	ra,44(sp)
2001659a:	5422                	lw	s0,40(sp)
2001659c:	6145                	addi	sp,sp,48
2001659e:	8082                	ret

200165a0 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
200165a0:	7179                	addi	sp,sp,-48
200165a2:	d606                	sw	ra,44(sp)
200165a4:	d422                	sw	s0,40(sp)
200165a6:	1800                	addi	s0,sp,48
200165a8:	fca42e23          	sw	a0,-36(s0)
200165ac:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200165b0:	fdc42503          	lw	a0,-36(s0)
200165b4:	bffff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
200165b8:	87aa                	mv	a5,a0
200165ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
200165be:	fec42783          	lw	a5,-20(s0)
200165c2:	0791                	addi	a5,a5,4
200165c4:	439c                	lw	a5,0(a5)
200165c6:	fd842703          	lw	a4,-40(s0)
200165ca:	fff74713          	not	a4,a4
200165ce:	86ba                	mv	a3,a4
200165d0:	fec42703          	lw	a4,-20(s0)
200165d4:	0711                	addi	a4,a4,4
200165d6:	8ff5                	and	a5,a5,a3
200165d8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
200165da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
200165dc:	853e                	mv	a0,a5
200165de:	50b2                	lw	ra,44(sp)
200165e0:	5422                	lw	s0,40(sp)
200165e2:	6145                	addi	sp,sp,48
200165e4:	8082                	ret

200165e6 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
200165e6:	7179                	addi	sp,sp,-48
200165e8:	d606                	sw	ra,44(sp)
200165ea:	d422                	sw	s0,40(sp)
200165ec:	1800                	addi	s0,sp,48
200165ee:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200165f2:	fdc42503          	lw	a0,-36(s0)
200165f6:	bbdff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
200165fa:	87aa                	mv	a5,a0
200165fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20016600:	fec42783          	lw	a5,-20(s0)
20016604:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20016606:	853e                	mv	a0,a5
20016608:	50b2                	lw	ra,44(sp)
2001660a:	5422                	lw	s0,40(sp)
2001660c:	6145                	addi	sp,sp,48
2001660e:	8082                	ret

20016610 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20016610:	7179                	addi	sp,sp,-48
20016612:	d606                	sw	ra,44(sp)
20016614:	d422                	sw	s0,40(sp)
20016616:	1800                	addi	s0,sp,48
20016618:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001661c:	fdc42503          	lw	a0,-36(s0)
20016620:	b93ff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016624:	87aa                	mv	a5,a0
20016626:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
2001662a:	fec42783          	lw	a5,-20(s0)
2001662e:	07b1                	addi	a5,a5,12
20016630:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20016632:	853e                	mv	a0,a5
20016634:	50b2                	lw	ra,44(sp)
20016636:	5422                	lw	s0,40(sp)
20016638:	6145                	addi	sp,sp,48
2001663a:	8082                	ret

2001663c <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2001663c:	7179                	addi	sp,sp,-48
2001663e:	d606                	sw	ra,44(sp)
20016640:	d422                	sw	s0,40(sp)
20016642:	1800                	addi	s0,sp,48
20016644:	fca42e23          	sw	a0,-36(s0)
20016648:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001664c:	fdc42503          	lw	a0,-36(s0)
20016650:	b63ff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016654:	87aa                	mv	a5,a0
20016656:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
2001665a:	fec42783          	lw	a5,-20(s0)
2001665e:	07a1                	addi	a5,a5,8
20016660:	439c                	lw	a5,0(a5)
20016662:	fd842703          	lw	a4,-40(s0)
20016666:	fff74713          	not	a4,a4
2001666a:	86ba                	mv	a3,a4
2001666c:	fec42703          	lw	a4,-20(s0)
20016670:	0721                	addi	a4,a4,8
20016672:	8ff5                	and	a5,a5,a3
20016674:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20016676:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20016678:	853e                	mv	a0,a5
2001667a:	50b2                	lw	ra,44(sp)
2001667c:	5422                	lw	s0,40(sp)
2001667e:	6145                	addi	sp,sp,48
20016680:	8082                	ret

20016682 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20016682:	7179                	addi	sp,sp,-48
20016684:	d606                	sw	ra,44(sp)
20016686:	d422                	sw	s0,40(sp)
20016688:	1800                	addi	s0,sp,48
2001668a:	fca42e23          	sw	a0,-36(s0)
2001668e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20016692:	fdc42503          	lw	a0,-36(s0)
20016696:	b1dff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
2001669a:	87aa                	mv	a5,a0
2001669c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
200166a0:	fec42783          	lw	a5,-20(s0)
200166a4:	07a1                	addi	a5,a5,8
200166a6:	4398                	lw	a4,0(a5)
200166a8:	fd842783          	lw	a5,-40(s0)
200166ac:	fec42683          	lw	a3,-20(s0)
200166b0:	06a1                	addi	a3,a3,8
200166b2:	8fd9                	or	a5,a5,a4
200166b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
200166b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
200166b8:	853e                	mv	a0,a5
200166ba:	50b2                	lw	ra,44(sp)
200166bc:	5422                	lw	s0,40(sp)
200166be:	6145                	addi	sp,sp,48
200166c0:	8082                	ret

200166c2 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
200166c2:	7179                	addi	sp,sp,-48
200166c4:	d606                	sw	ra,44(sp)
200166c6:	d422                	sw	s0,40(sp)
200166c8:	1800                	addi	s0,sp,48
200166ca:	fca42e23          	sw	a0,-36(s0)
200166ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
200166d2:	fdc42503          	lw	a0,-36(s0)
200166d6:	addff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
200166da:	87aa                	mv	a5,a0
200166dc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
200166e0:	fec42783          	lw	a5,-20(s0)
200166e4:	07b1                	addi	a5,a5,12
200166e6:	4398                	lw	a4,0(a5)
200166e8:	fd842783          	lw	a5,-40(s0)
200166ec:	fec42683          	lw	a3,-20(s0)
200166f0:	06b1                	addi	a3,a3,12
200166f2:	8fd9                	or	a5,a5,a4
200166f4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
200166f6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
200166f8:	853e                	mv	a0,a5
200166fa:	50b2                	lw	ra,44(sp)
200166fc:	5422                	lw	s0,40(sp)
200166fe:	6145                	addi	sp,sp,48
20016700:	8082                	ret

20016702 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20016702:	7179                	addi	sp,sp,-48
20016704:	d606                	sw	ra,44(sp)
20016706:	d422                	sw	s0,40(sp)
20016708:	1800                	addi	s0,sp,48
2001670a:	fca42e23          	sw	a0,-36(s0)
2001670e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20016712:	fdc42503          	lw	a0,-36(s0)
20016716:	a9dff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
2001671a:	87aa                	mv	a5,a0
2001671c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20016720:	fec42783          	lw	a5,-20(s0)
20016724:	07b1                	addi	a5,a5,12
20016726:	439c                	lw	a5,0(a5)
20016728:	fd842703          	lw	a4,-40(s0)
2001672c:	fff74713          	not	a4,a4
20016730:	86ba                	mv	a3,a4
20016732:	fec42703          	lw	a4,-20(s0)
20016736:	0731                	addi	a4,a4,12
20016738:	8ff5                	and	a5,a5,a3
2001673a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2001673c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2001673e:	853e                	mv	a0,a5
20016740:	50b2                	lw	ra,44(sp)
20016742:	5422                	lw	s0,40(sp)
20016744:	6145                	addi	sp,sp,48
20016746:	8082                	ret

20016748 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20016748:	7179                	addi	sp,sp,-48
2001674a:	d606                	sw	ra,44(sp)
2001674c:	d422                	sw	s0,40(sp)
2001674e:	1800                	addi	s0,sp,48
20016750:	fca42e23          	sw	a0,-36(s0)
20016754:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20016758:	fdc42503          	lw	a0,-36(s0)
2001675c:	a57ff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016760:	87aa                	mv	a5,a0
20016762:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20016766:	fec42783          	lw	a5,-20(s0)
2001676a:	07b1                	addi	a5,a5,12
2001676c:	4398                	lw	a4,0(a5)
2001676e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20016772:	fec42683          	lw	a3,-20(s0)
20016776:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20016778:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2001677a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2001677c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2001677e:	853e                	mv	a0,a5
20016780:	50b2                	lw	ra,44(sp)
20016782:	5422                	lw	s0,40(sp)
20016784:	6145                	addi	sp,sp,48
20016786:	8082                	ret

20016788 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20016788:	7179                	addi	sp,sp,-48
2001678a:	d606                	sw	ra,44(sp)
2001678c:	d422                	sw	s0,40(sp)
2001678e:	1800                	addi	s0,sp,48
20016790:	fca42e23          	sw	a0,-36(s0)
20016794:	fcb42c23          	sw	a1,-40(s0)
20016798:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001679c:	fdc42503          	lw	a0,-36(s0)
200167a0:	a13ff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
200167a4:	87aa                	mv	a5,a0
200167a6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
200167aa:	fec42783          	lw	a5,-20(s0)
200167ae:	03c78793          	addi	a5,a5,60
200167b2:	439c                	lw	a5,0(a5)
200167b4:	fd842703          	lw	a4,-40(s0)
200167b8:	fff74713          	not	a4,a4
200167bc:	86ba                	mv	a3,a4
200167be:	fec42703          	lw	a4,-20(s0)
200167c2:	03c70713          	addi	a4,a4,60
200167c6:	8ff5                	and	a5,a5,a3
200167c8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
200167ca:	fec42783          	lw	a5,-20(s0)
200167ce:	03878793          	addi	a5,a5,56
200167d2:	4398                	lw	a4,0(a5)
200167d4:	fd442783          	lw	a5,-44(s0)
200167d8:	fec42683          	lw	a3,-20(s0)
200167dc:	03868693          	addi	a3,a3,56
200167e0:	8fd9                	or	a5,a5,a4
200167e2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
200167e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
200167e6:	853e                	mv	a0,a5
200167e8:	50b2                	lw	ra,44(sp)
200167ea:	5422                	lw	s0,40(sp)
200167ec:	6145                	addi	sp,sp,48
200167ee:	8082                	ret

200167f0 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
200167f0:	7179                	addi	sp,sp,-48
200167f2:	d606                	sw	ra,44(sp)
200167f4:	d422                	sw	s0,40(sp)
200167f6:	1800                	addi	s0,sp,48
200167f8:	fca42e23          	sw	a0,-36(s0)
200167fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20016800:	fdc42503          	lw	a0,-36(s0)
20016804:	9afff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016808:	87aa                	mv	a5,a0
2001680a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2001680e:	fec42783          	lw	a5,-20(s0)
20016812:	03878793          	addi	a5,a5,56
20016816:	439c                	lw	a5,0(a5)
20016818:	fd842703          	lw	a4,-40(s0)
2001681c:	fff74713          	not	a4,a4
20016820:	86ba                	mv	a3,a4
20016822:	fec42703          	lw	a4,-20(s0)
20016826:	03870713          	addi	a4,a4,56
2001682a:	8ff5                	and	a5,a5,a3
2001682c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2001682e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20016830:	853e                	mv	a0,a5
20016832:	50b2                	lw	ra,44(sp)
20016834:	5422                	lw	s0,40(sp)
20016836:	6145                	addi	sp,sp,48
20016838:	8082                	ret

2001683a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2001683a:	7179                	addi	sp,sp,-48
2001683c:	d606                	sw	ra,44(sp)
2001683e:	d422                	sw	s0,40(sp)
20016840:	1800                	addi	s0,sp,48
20016842:	fca42e23          	sw	a0,-36(s0)
20016846:	fcb42c23          	sw	a1,-40(s0)
2001684a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2001684e:	fdc42503          	lw	a0,-36(s0)
20016852:	961ff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016856:	87aa                	mv	a5,a0
20016858:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
2001685c:	fd442703          	lw	a4,-44(s0)
20016860:	479d                	li	a5,7
20016862:	1ce7e963          	bltu	a5,a4,20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20016866:	fd442783          	lw	a5,-44(s0)
2001686a:	00279713          	slli	a4,a5,0x2
2001686e:	200187b7          	lui	a5,0x20018
20016872:	19478793          	addi	a5,a5,404 # 20018194 <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20016876:	97ba                	add	a5,a5,a4
20016878:	439c                	lw	a5,0(a5)
2001687a:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2001687c:	fec42783          	lw	a5,-20(s0)
20016880:	07e1                	addi	a5,a5,24
20016882:	439c                	lw	a5,0(a5)
20016884:	fd842703          	lw	a4,-40(s0)
20016888:	fff74713          	not	a4,a4
2001688c:	86ba                	mv	a3,a4
2001688e:	fec42703          	lw	a4,-20(s0)
20016892:	0761                	addi	a4,a4,24
20016894:	8ff5                	and	a5,a5,a3
20016896:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20016898:	fec42783          	lw	a5,-20(s0)
2001689c:	02078793          	addi	a5,a5,32
200168a0:	439c                	lw	a5,0(a5)
200168a2:	fd842703          	lw	a4,-40(s0)
200168a6:	fff74713          	not	a4,a4
200168aa:	86ba                	mv	a3,a4
200168ac:	fec42703          	lw	a4,-20(s0)
200168b0:	02070713          	addi	a4,a4,32
200168b4:	8ff5                	and	a5,a5,a3
200168b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
200168b8:	fec42783          	lw	a5,-20(s0)
200168bc:	02878793          	addi	a5,a5,40
200168c0:	439c                	lw	a5,0(a5)
200168c2:	fd842703          	lw	a4,-40(s0)
200168c6:	fff74713          	not	a4,a4
200168ca:	86ba                	mv	a3,a4
200168cc:	fec42703          	lw	a4,-20(s0)
200168d0:	02870713          	addi	a4,a4,40
200168d4:	8ff5                	and	a5,a5,a3
200168d6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
200168d8:	fec42783          	lw	a5,-20(s0)
200168dc:	03078793          	addi	a5,a5,48
200168e0:	439c                	lw	a5,0(a5)
200168e2:	fd842703          	lw	a4,-40(s0)
200168e6:	fff74713          	not	a4,a4
200168ea:	86ba                	mv	a3,a4
200168ec:	fec42703          	lw	a4,-20(s0)
200168f0:	03070713          	addi	a4,a4,48
200168f4:	8ff5                	and	a5,a5,a3
200168f6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
200168f8:	aa35                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
200168fa:	fec42783          	lw	a5,-20(s0)
200168fe:	07e1                	addi	a5,a5,24
20016900:	4398                	lw	a4,0(a5)
20016902:	fd842783          	lw	a5,-40(s0)
20016906:	fec42683          	lw	a3,-20(s0)
2001690a:	06e1                	addi	a3,a3,24
2001690c:	8fd9                	or	a5,a5,a4
2001690e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20016910:	a215                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20016912:	fec42783          	lw	a5,-20(s0)
20016916:	02078793          	addi	a5,a5,32
2001691a:	4398                	lw	a4,0(a5)
2001691c:	fd842783          	lw	a5,-40(s0)
20016920:	fec42683          	lw	a3,-20(s0)
20016924:	02068693          	addi	a3,a3,32
20016928:	8fd9                	or	a5,a5,a4
2001692a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
2001692c:	a221                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2001692e:	fec42783          	lw	a5,-20(s0)
20016932:	07e1                	addi	a5,a5,24
20016934:	4398                	lw	a4,0(a5)
20016936:	fd842783          	lw	a5,-40(s0)
2001693a:	fec42683          	lw	a3,-20(s0)
2001693e:	06e1                	addi	a3,a3,24
20016940:	8fd9                	or	a5,a5,a4
20016942:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20016944:	fec42783          	lw	a5,-20(s0)
20016948:	02078793          	addi	a5,a5,32
2001694c:	4398                	lw	a4,0(a5)
2001694e:	fd842783          	lw	a5,-40(s0)
20016952:	fec42683          	lw	a3,-20(s0)
20016956:	02068693          	addi	a3,a3,32
2001695a:	8fd9                	or	a5,a5,a4
2001695c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2001695e:	a8d9                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20016960:	fec42783          	lw	a5,-20(s0)
20016964:	02878793          	addi	a5,a5,40
20016968:	4398                	lw	a4,0(a5)
2001696a:	fd842783          	lw	a5,-40(s0)
2001696e:	fec42683          	lw	a3,-20(s0)
20016972:	02868693          	addi	a3,a3,40
20016976:	8fd9                	or	a5,a5,a4
20016978:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2001697a:	a86d                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2001697c:	fec42783          	lw	a5,-20(s0)
20016980:	03078793          	addi	a5,a5,48
20016984:	4398                	lw	a4,0(a5)
20016986:	fd842783          	lw	a5,-40(s0)
2001698a:	fec42683          	lw	a3,-20(s0)
2001698e:	03068693          	addi	a3,a3,48
20016992:	8fd9                	or	a5,a5,a4
20016994:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20016996:	a879                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20016998:	fec42783          	lw	a5,-20(s0)
2001699c:	02878793          	addi	a5,a5,40
200169a0:	4398                	lw	a4,0(a5)
200169a2:	fd842783          	lw	a5,-40(s0)
200169a6:	fec42683          	lw	a3,-20(s0)
200169aa:	02868693          	addi	a3,a3,40
200169ae:	8fd9                	or	a5,a5,a4
200169b0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
200169b2:	fec42783          	lw	a5,-20(s0)
200169b6:	03078793          	addi	a5,a5,48
200169ba:	4398                	lw	a4,0(a5)
200169bc:	fd842783          	lw	a5,-40(s0)
200169c0:	fec42683          	lw	a3,-20(s0)
200169c4:	03068693          	addi	a3,a3,48
200169c8:	8fd9                	or	a5,a5,a4
200169ca:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
200169cc:	a0a5                	j	20016a34 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
200169ce:	fec42783          	lw	a5,-20(s0)
200169d2:	07e1                	addi	a5,a5,24
200169d4:	4398                	lw	a4,0(a5)
200169d6:	fd842783          	lw	a5,-40(s0)
200169da:	fec42683          	lw	a3,-20(s0)
200169de:	06e1                	addi	a3,a3,24
200169e0:	8fd9                	or	a5,a5,a4
200169e2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
200169e4:	fec42783          	lw	a5,-20(s0)
200169e8:	02078793          	addi	a5,a5,32
200169ec:	4398                	lw	a4,0(a5)
200169ee:	fd842783          	lw	a5,-40(s0)
200169f2:	fec42683          	lw	a3,-20(s0)
200169f6:	02068693          	addi	a3,a3,32
200169fa:	8fd9                	or	a5,a5,a4
200169fc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
200169fe:	fec42783          	lw	a5,-20(s0)
20016a02:	02878793          	addi	a5,a5,40
20016a06:	4398                	lw	a4,0(a5)
20016a08:	fd842783          	lw	a5,-40(s0)
20016a0c:	fec42683          	lw	a3,-20(s0)
20016a10:	02868693          	addi	a3,a3,40
20016a14:	8fd9                	or	a5,a5,a4
20016a16:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20016a18:	fec42783          	lw	a5,-20(s0)
20016a1c:	03078793          	addi	a5,a5,48
20016a20:	4398                	lw	a4,0(a5)
20016a22:	fd842783          	lw	a5,-40(s0)
20016a26:	fec42683          	lw	a3,-20(s0)
20016a2a:	03068693          	addi	a3,a3,48
20016a2e:	8fd9                	or	a5,a5,a4
20016a30:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20016a32:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20016a34:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20016a36:	853e                	mv	a0,a5
20016a38:	50b2                	lw	ra,44(sp)
20016a3a:	5422                	lw	s0,40(sp)
20016a3c:	6145                	addi	sp,sp,48
20016a3e:	8082                	ret

20016a40 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20016a40:	7179                	addi	sp,sp,-48
20016a42:	d606                	sw	ra,44(sp)
20016a44:	d422                	sw	s0,40(sp)
20016a46:	1800                	addi	s0,sp,48
20016a48:	fca42e23          	sw	a0,-36(s0)
20016a4c:	fcb42c23          	sw	a1,-40(s0)
20016a50:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20016a54:	fdc42503          	lw	a0,-36(s0)
20016a58:	f5aff0ef          	jal	ra,200161b2 <__metal_driver_sifive_gpio0_base>
20016a5c:	87aa                	mv	a5,a0
20016a5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20016a62:	fd442703          	lw	a4,-44(s0)
20016a66:	479d                	li	a5,7
20016a68:	14e7ea63          	bltu	a5,a4,20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
20016a6c:	fd442783          	lw	a5,-44(s0)
20016a70:	00279713          	slli	a4,a5,0x2
20016a74:	200187b7          	lui	a5,0x20018
20016a78:	1b478793          	addi	a5,a5,436 # 200181b4 <__metal_driver_vtable_sifive_fe310_g000_pll+0x2c>
20016a7c:	97ba                	add	a5,a5,a4
20016a7e:	439c                	lw	a5,0(a5)
20016a80:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20016a82:	fec42783          	lw	a5,-20(s0)
20016a86:	07f1                	addi	a5,a5,28
20016a88:	4398                	lw	a4,0(a5)
20016a8a:	fd842783          	lw	a5,-40(s0)
20016a8e:	fec42683          	lw	a3,-20(s0)
20016a92:	06f1                	addi	a3,a3,28
20016a94:	8fd9                	or	a5,a5,a4
20016a96:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20016a98:	a215                	j	20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20016a9a:	fec42783          	lw	a5,-20(s0)
20016a9e:	02478793          	addi	a5,a5,36
20016aa2:	4398                	lw	a4,0(a5)
20016aa4:	fd842783          	lw	a5,-40(s0)
20016aa8:	fec42683          	lw	a3,-20(s0)
20016aac:	02468693          	addi	a3,a3,36
20016ab0:	8fd9                	or	a5,a5,a4
20016ab2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20016ab4:	a221                	j	20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20016ab6:	fec42783          	lw	a5,-20(s0)
20016aba:	07f1                	addi	a5,a5,28
20016abc:	4398                	lw	a4,0(a5)
20016abe:	fd842783          	lw	a5,-40(s0)
20016ac2:	fec42683          	lw	a3,-20(s0)
20016ac6:	06f1                	addi	a3,a3,28
20016ac8:	8fd9                	or	a5,a5,a4
20016aca:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20016acc:	fec42783          	lw	a5,-20(s0)
20016ad0:	02478793          	addi	a5,a5,36
20016ad4:	4398                	lw	a4,0(a5)
20016ad6:	fd842783          	lw	a5,-40(s0)
20016ada:	fec42683          	lw	a3,-20(s0)
20016ade:	02468693          	addi	a3,a3,36
20016ae2:	8fd9                	or	a5,a5,a4
20016ae4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20016ae6:	a8d9                	j	20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20016ae8:	fec42783          	lw	a5,-20(s0)
20016aec:	02c78793          	addi	a5,a5,44
20016af0:	4398                	lw	a4,0(a5)
20016af2:	fd842783          	lw	a5,-40(s0)
20016af6:	fec42683          	lw	a3,-20(s0)
20016afa:	02c68693          	addi	a3,a3,44
20016afe:	8fd9                	or	a5,a5,a4
20016b00:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20016b02:	a86d                	j	20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20016b04:	fec42783          	lw	a5,-20(s0)
20016b08:	03478793          	addi	a5,a5,52
20016b0c:	4398                	lw	a4,0(a5)
20016b0e:	fd842783          	lw	a5,-40(s0)
20016b12:	fec42683          	lw	a3,-20(s0)
20016b16:	03468693          	addi	a3,a3,52
20016b1a:	8fd9                	or	a5,a5,a4
20016b1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20016b1e:	a879                	j	20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20016b20:	fec42783          	lw	a5,-20(s0)
20016b24:	02c78793          	addi	a5,a5,44
20016b28:	4398                	lw	a4,0(a5)
20016b2a:	fd842783          	lw	a5,-40(s0)
20016b2e:	fec42683          	lw	a3,-20(s0)
20016b32:	02c68693          	addi	a3,a3,44
20016b36:	8fd9                	or	a5,a5,a4
20016b38:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20016b3a:	fec42783          	lw	a5,-20(s0)
20016b3e:	03478793          	addi	a5,a5,52
20016b42:	4398                	lw	a4,0(a5)
20016b44:	fd842783          	lw	a5,-40(s0)
20016b48:	fec42683          	lw	a3,-20(s0)
20016b4c:	03468693          	addi	a3,a3,52
20016b50:	8fd9                	or	a5,a5,a4
20016b52:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20016b54:	a0a5                	j	20016bbc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20016b56:	fec42783          	lw	a5,-20(s0)
20016b5a:	07f1                	addi	a5,a5,28
20016b5c:	4398                	lw	a4,0(a5)
20016b5e:	fd842783          	lw	a5,-40(s0)
20016b62:	fec42683          	lw	a3,-20(s0)
20016b66:	06f1                	addi	a3,a3,28
20016b68:	8fd9                	or	a5,a5,a4
20016b6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20016b6c:	fec42783          	lw	a5,-20(s0)
20016b70:	02478793          	addi	a5,a5,36
20016b74:	4398                	lw	a4,0(a5)
20016b76:	fd842783          	lw	a5,-40(s0)
20016b7a:	fec42683          	lw	a3,-20(s0)
20016b7e:	02468693          	addi	a3,a3,36
20016b82:	8fd9                	or	a5,a5,a4
20016b84:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20016b86:	fec42783          	lw	a5,-20(s0)
20016b8a:	02c78793          	addi	a5,a5,44
20016b8e:	4398                	lw	a4,0(a5)
20016b90:	fd842783          	lw	a5,-40(s0)
20016b94:	fec42683          	lw	a3,-20(s0)
20016b98:	02c68693          	addi	a3,a3,44
20016b9c:	8fd9                	or	a5,a5,a4
20016b9e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20016ba0:	fec42783          	lw	a5,-20(s0)
20016ba4:	03478793          	addi	a5,a5,52
20016ba8:	4398                	lw	a4,0(a5)
20016baa:	fd842783          	lw	a5,-40(s0)
20016bae:	fec42683          	lw	a3,-20(s0)
20016bb2:	03468693          	addi	a3,a3,52
20016bb6:	8fd9                	or	a5,a5,a4
20016bb8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20016bba:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20016bbc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20016bbe:	853e                	mv	a0,a5
20016bc0:	50b2                	lw	ra,44(sp)
20016bc2:	5422                	lw	s0,40(sp)
20016bc4:	6145                	addi	sp,sp,48
20016bc6:	8082                	ret

20016bc8 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20016bc8:	1101                	addi	sp,sp,-32
20016bca:	ce06                	sw	ra,28(sp)
20016bcc:	cc22                	sw	s0,24(sp)
20016bce:	1000                	addi	s0,sp,32
20016bd0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20016bd4:	fec42503          	lw	a0,-20(s0)
20016bd8:	e00ff0ef          	jal	ra,200161d8 <__metal_driver_sifive_gpio0_interrupt_parent>
20016bdc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20016bde:	853e                	mv	a0,a5
20016be0:	40f2                	lw	ra,28(sp)
20016be2:	4462                	lw	s0,24(sp)
20016be4:	6105                	addi	sp,sp,32
20016be6:	8082                	ret

20016be8 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20016be8:	7179                	addi	sp,sp,-48
20016bea:	d606                	sw	ra,44(sp)
20016bec:	d422                	sw	s0,40(sp)
20016bee:	1800                	addi	s0,sp,48
20016bf0:	fca42e23          	sw	a0,-36(s0)
20016bf4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20016bf8:	fd842583          	lw	a1,-40(s0)
20016bfc:	fdc42503          	lw	a0,-36(s0)
20016c00:	e02ff0ef          	jal	ra,20016202 <__metal_driver_sifive_gpio0_interrupt_lines>
20016c04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20016c08:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20016c0c:	853e                	mv	a0,a5
20016c0e:	50b2                	lw	ra,44(sp)
20016c10:	5422                	lw	s0,40(sp)
20016c12:	6145                	addi	sp,sp,48
20016c14:	8082                	ret

20016c16 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:738
{
20016c16:	1101                	addi	sp,sp,-32
20016c18:	ce22                	sw	s0,28(sp)
20016c1a:	1000                	addi	s0,sp,32
20016c1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:739
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016c20:	fec42703          	lw	a4,-20(s0)
20016c24:	800017b7          	lui	a5,0x80001
20016c28:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016c2c:	00f71563          	bne	a4,a5,20016c36 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:740
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20016c30:	100137b7          	lui	a5,0x10013
20016c34:	a829                	j	20016c4e <__metal_driver_sifive_uart0_control_base+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:742
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016c36:	fec42703          	lw	a4,-20(s0)
20016c3a:	800017b7          	lui	a5,0x80001
20016c3e:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016c42:	00f71563          	bne	a4,a5,20016c4c <__metal_driver_sifive_uart0_control_base+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:743
		return METAL_SIFIVE_UART0_10023000_BASE_ADDRESS;
20016c46:	100237b7          	lui	a5,0x10023
20016c4a:	a011                	j	20016c4e <__metal_driver_sifive_uart0_control_base+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:746
		return 0;
20016c4c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:748
}
20016c4e:	853e                	mv	a0,a5
20016c50:	4472                	lw	s0,28(sp)
20016c52:	6105                	addi	sp,sp,32
20016c54:	8082                	ret

20016c56 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:777
{
20016c56:	1101                	addi	sp,sp,-32
20016c58:	ce22                	sw	s0,28(sp)
20016c5a:	1000                	addi	s0,sp,32
20016c5c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:778
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016c60:	fec42703          	lw	a4,-20(s0)
20016c64:	800017b7          	lui	a5,0x80001
20016c68:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016c6c:	00f71763          	bne	a4,a5,20016c7a <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:779
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20016c70:	800007b7          	lui	a5,0x80000
20016c74:	4a078793          	addi	a5,a5,1184 # 800004a0 <metal_segment_heap_target_end+0xffffc524>
20016c78:	a821                	j	20016c90 <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:781
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016c7a:	fec42703          	lw	a4,-20(s0)
20016c7e:	800017b7          	lui	a5,0x80001
20016c82:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016c86:	00f71463          	bne	a4,a5,20016c8e <__metal_driver_sifive_uart0_interrupt_parent+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:782
		return NULL;
20016c8a:	4781                	li	a5,0
20016c8c:	a011                	j	20016c90 <__metal_driver_sifive_uart0_interrupt_parent+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:785
		return 0;
20016c8e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:787
}
20016c90:	853e                	mv	a0,a5
20016c92:	4472                	lw	s0,28(sp)
20016c94:	6105                	addi	sp,sp,32
20016c96:	8082                	ret

20016c98 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:790
{
20016c98:	1101                	addi	sp,sp,-32
20016c9a:	ce22                	sw	s0,28(sp)
20016c9c:	1000                	addi	s0,sp,32
20016c9e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:791
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016ca2:	fec42703          	lw	a4,-20(s0)
20016ca6:	800017b7          	lui	a5,0x80001
20016caa:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016cae:	00f71463          	bne	a4,a5,20016cb6 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:792
		return 3;
20016cb2:	478d                	li	a5,3
20016cb4:	a821                	j	20016ccc <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:794
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016cb6:	fec42703          	lw	a4,-20(s0)
20016cba:	800017b7          	lui	a5,0x80001
20016cbe:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016cc2:	00f71463          	bne	a4,a5,20016cca <__metal_driver_sifive_uart0_interrupt_line+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:795
		return 4;
20016cc6:	4791                	li	a5,4
20016cc8:	a011                	j	20016ccc <__metal_driver_sifive_uart0_interrupt_line+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:798
		return 0;
20016cca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:800
}
20016ccc:	853e                	mv	a0,a5
20016cce:	4472                	lw	s0,28(sp)
20016cd0:	6105                	addi	sp,sp,32
20016cd2:	8082                	ret

20016cd4 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:803
{
20016cd4:	1101                	addi	sp,sp,-32
20016cd6:	ce22                	sw	s0,28(sp)
20016cd8:	1000                	addi	s0,sp,32
20016cda:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:804
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016cde:	fec42703          	lw	a4,-20(s0)
20016ce2:	800017b7          	lui	a5,0x80001
20016ce6:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016cea:	00f71763          	bne	a4,a5,20016cf8 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:805
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20016cee:	800017b7          	lui	a5,0x80001
20016cf2:	ad078793          	addi	a5,a5,-1328 # 80000ad0 <metal_segment_heap_target_end+0xffffcb54>
20016cf6:	a839                	j	20016d14 <__metal_driver_sifive_uart0_clock+0x40>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:807
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016cf8:	fec42703          	lw	a4,-20(s0)
20016cfc:	800017b7          	lui	a5,0x80001
20016d00:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016d04:	00f71763          	bne	a4,a5,20016d12 <__metal_driver_sifive_uart0_clock+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:808
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20016d08:	800017b7          	lui	a5,0x80001
20016d0c:	ad078793          	addi	a5,a5,-1328 # 80000ad0 <metal_segment_heap_target_end+0xffffcb54>
20016d10:	a011                	j	20016d14 <__metal_driver_sifive_uart0_clock+0x40>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:811
		return 0;
20016d12:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:813
}
20016d14:	853e                	mv	a0,a5
20016d16:	4472                	lw	s0,28(sp)
20016d18:	6105                	addi	sp,sp,32
20016d1a:	8082                	ret

20016d1c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:816
{
20016d1c:	1101                	addi	sp,sp,-32
20016d1e:	ce22                	sw	s0,28(sp)
20016d20:	1000                	addi	s0,sp,32
20016d22:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:817
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016d26:	fec42703          	lw	a4,-20(s0)
20016d2a:	800017b7          	lui	a5,0x80001
20016d2e:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016d32:	00f71563          	bne	a4,a5,20016d3c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:818
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20016d36:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016d3a:	a829                	j	20016d54 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:820
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016d3c:	fec42703          	lw	a4,-20(s0)
20016d40:	800017b7          	lui	a5,0x80001
20016d44:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016d48:	00f71563          	bne	a4,a5,20016d52 <__metal_driver_sifive_uart0_pinmux+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:821
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20016d4c:	81c18793          	addi	a5,gp,-2020 # 80000afc <__metal_dt_gpio_10012000>
20016d50:	a011                	j	20016d54 <__metal_driver_sifive_uart0_pinmux+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:824
		return 0;
20016d52:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:826
}
20016d54:	853e                	mv	a0,a5
20016d56:	4472                	lw	s0,28(sp)
20016d58:	6105                	addi	sp,sp,32
20016d5a:	8082                	ret

20016d5c <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:829
{
20016d5c:	1101                	addi	sp,sp,-32
20016d5e:	ce22                	sw	s0,28(sp)
20016d60:	1000                	addi	s0,sp,32
20016d62:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:830
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016d66:	fec42703          	lw	a4,-20(s0)
20016d6a:	800017b7          	lui	a5,0x80001
20016d6e:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016d72:	00f71563          	bne	a4,a5,20016d7c <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:831
		return 196608;
20016d76:	000307b7          	lui	a5,0x30
20016d7a:	a829                	j	20016d94 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:833
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016d7c:	fec42703          	lw	a4,-20(s0)
20016d80:	800017b7          	lui	a5,0x80001
20016d84:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016d88:	00f71563          	bne	a4,a5,20016d92 <__metal_driver_sifive_uart0_pinmux_output_selector+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:834
		return 8650752;
20016d8c:	008407b7          	lui	a5,0x840
20016d90:	a011                	j	20016d94 <__metal_driver_sifive_uart0_pinmux_output_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:837
		return 0;
20016d92:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:839
}
20016d94:	853e                	mv	a0,a5
20016d96:	4472                	lw	s0,28(sp)
20016d98:	6105                	addi	sp,sp,32
20016d9a:	8082                	ret

20016d9c <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:842
{
20016d9c:	1101                	addi	sp,sp,-32
20016d9e:	ce22                	sw	s0,28(sp)
20016da0:	1000                	addi	s0,sp,32
20016da2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:843
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016da6:	fec42703          	lw	a4,-20(s0)
20016daa:	800017b7          	lui	a5,0x80001
20016dae:	a7878793          	addi	a5,a5,-1416 # 80000a78 <metal_segment_heap_target_end+0xffffcafc>
20016db2:	00f71563          	bne	a4,a5,20016dbc <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:844
		return 196608;
20016db6:	000307b7          	lui	a5,0x30
20016dba:	a829                	j	20016dd4 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:846
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016dbc:	fec42703          	lw	a4,-20(s0)
20016dc0:	800017b7          	lui	a5,0x80001
20016dc4:	a9878793          	addi	a5,a5,-1384 # 80000a98 <metal_segment_heap_target_end+0xffffcb1c>
20016dc8:	00f71563          	bne	a4,a5,20016dd2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x36>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:847
		return 8650752;
20016dcc:	008407b7          	lui	a5,0x840
20016dd0:	a011                	j	20016dd4 <__metal_driver_sifive_uart0_pinmux_source_selector+0x38>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:850
		return 0;
20016dd2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:852
}
20016dd4:	853e                	mv	a0,a5
20016dd6:	4472                	lw	s0,28(sp)
20016dd8:	6105                	addi	sp,sp,32
20016dda:	8082                	ret

20016ddc <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20016ddc:	1101                	addi	sp,sp,-32
20016dde:	ce06                	sw	ra,28(sp)
20016de0:	cc22                	sw	s0,24(sp)
20016de2:	1000                	addi	s0,sp,32
20016de4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20016de8:	fec42503          	lw	a0,-20(s0)
20016dec:	e6bff0ef          	jal	ra,20016c56 <__metal_driver_sifive_uart0_interrupt_parent>
20016df0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20016df2:	853e                	mv	a0,a5
20016df4:	40f2                	lw	ra,28(sp)
20016df6:	4462                	lw	s0,24(sp)
20016df8:	6105                	addi	sp,sp,32
20016dfa:	8082                	ret

20016dfc <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20016dfc:	1101                	addi	sp,sp,-32
20016dfe:	ce06                	sw	ra,28(sp)
20016e00:	cc22                	sw	s0,24(sp)
20016e02:	1000                	addi	s0,sp,32
20016e04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20016e08:	fec42503          	lw	a0,-20(s0)
20016e0c:	e8dff0ef          	jal	ra,20016c98 <__metal_driver_sifive_uart0_interrupt_line>
20016e10:	87aa                	mv	a5,a0
20016e12:	02078793          	addi	a5,a5,32 # 840020 <__heap_size+0x83f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20016e16:	853e                	mv	a0,a5
20016e18:	40f2                	lw	ra,28(sp)
20016e1a:	4462                	lw	s0,24(sp)
20016e1c:	6105                	addi	sp,sp,32
20016e1e:	8082                	ret

20016e20 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20016e20:	7179                	addi	sp,sp,-48
20016e22:	d606                	sw	ra,44(sp)
20016e24:	d422                	sw	s0,40(sp)
20016e26:	1800                	addi	s0,sp,48
20016e28:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016e2c:	fdc42503          	lw	a0,-36(s0)
20016e30:	de7ff0ef          	jal	ra,20016c16 <__metal_driver_sifive_uart0_control_base>
20016e34:	87aa                	mv	a5,a0
20016e36:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20016e3a:	fec42783          	lw	a5,-20(s0)
20016e3e:	439c                	lw	a5,0(a5)
20016e40:	fff7c793          	not	a5,a5
20016e44:	83fd                	srli	a5,a5,0x1f
20016e46:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20016e4a:	853e                	mv	a0,a5
20016e4c:	50b2                	lw	ra,44(sp)
20016e4e:	5422                	lw	s0,40(sp)
20016e50:	6145                	addi	sp,sp,48
20016e52:	8082                	ret

20016e54 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20016e54:	7179                	addi	sp,sp,-48
20016e56:	d606                	sw	ra,44(sp)
20016e58:	d422                	sw	s0,40(sp)
20016e5a:	1800                	addi	s0,sp,48
20016e5c:	fca42e23          	sw	a0,-36(s0)
20016e60:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016e64:	fdc42503          	lw	a0,-36(s0)
20016e68:	dafff0ef          	jal	ra,20016c16 <__metal_driver_sifive_uart0_control_base>
20016e6c:	87aa                	mv	a5,a0
20016e6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20016e72:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20016e74:	fdc42503          	lw	a0,-36(s0)
20016e78:	fa9ff0ef          	jal	ra,20016e20 <__metal_driver_sifive_uart0_txready>
20016e7c:	87aa                	mv	a5,a0
20016e7e:	dbfd                	beqz	a5,20016e74 <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20016e80:	fec42783          	lw	a5,-20(s0)
20016e84:	fd842703          	lw	a4,-40(s0)
20016e88:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20016e8a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20016e8c:	853e                	mv	a0,a5
20016e8e:	50b2                	lw	ra,44(sp)
20016e90:	5422                	lw	s0,40(sp)
20016e92:	6145                	addi	sp,sp,48
20016e94:	8082                	ret

20016e96 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20016e96:	7179                	addi	sp,sp,-48
20016e98:	d606                	sw	ra,44(sp)
20016e9a:	d422                	sw	s0,40(sp)
20016e9c:	1800                	addi	s0,sp,48
20016e9e:	fca42e23          	sw	a0,-36(s0)
20016ea2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016ea6:	fdc42503          	lw	a0,-36(s0)
20016eaa:	d6dff0ef          	jal	ra,20016c16 <__metal_driver_sifive_uart0_control_base>
20016eae:	87aa                	mv	a5,a0
20016eb0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20016eb4:	fec42783          	lw	a5,-20(s0)
20016eb8:	0791                	addi	a5,a5,4
20016eba:	439c                	lw	a5,0(a5)
20016ebc:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20016ec0:	fe842783          	lw	a5,-24(s0)
20016ec4:	0007d763          	bgez	a5,20016ed2 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20016ec8:	fd842783          	lw	a5,-40(s0)
20016ecc:	577d                	li	a4,-1
20016ece:	c398                	sw	a4,0(a5)
20016ed0:	a801                	j	20016ee0 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20016ed2:	fe842783          	lw	a5,-24(s0)
20016ed6:	0ff7f713          	andi	a4,a5,255
20016eda:	fd842783          	lw	a5,-40(s0)
20016ede:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20016ee0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20016ee2:	853e                	mv	a0,a5
20016ee4:	50b2                	lw	ra,44(sp)
20016ee6:	5422                	lw	s0,40(sp)
20016ee8:	6145                	addi	sp,sp,48
20016eea:	8082                	ret

20016eec <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20016eec:	7179                	addi	sp,sp,-48
20016eee:	d622                	sw	s0,44(sp)
20016ef0:	1800                	addi	s0,sp,48
20016ef2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20016ef6:	fdc42783          	lw	a5,-36(s0)
20016efa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20016efe:	fec42783          	lw	a5,-20(s0)
20016f02:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20016f04:	853e                	mv	a0,a5
20016f06:	5432                	lw	s0,44(sp)
20016f08:	6145                	addi	sp,sp,48
20016f0a:	8082                	ret

20016f0c <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20016f0c:	7179                	addi	sp,sp,-48
20016f0e:	d606                	sw	ra,44(sp)
20016f10:	d422                	sw	s0,40(sp)
20016f12:	1800                	addi	s0,sp,48
20016f14:	fca42e23          	sw	a0,-36(s0)
20016f18:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20016f1c:	fdc42783          	lw	a5,-36(s0)
20016f20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20016f24:	fdc42503          	lw	a0,-36(s0)
20016f28:	cefff0ef          	jal	ra,20016c16 <__metal_driver_sifive_uart0_control_base>
20016f2c:	87aa                	mv	a5,a0
20016f2e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20016f32:	fdc42503          	lw	a0,-36(s0)
20016f36:	d9fff0ef          	jal	ra,20016cd4 <__metal_driver_sifive_uart0_clock>
20016f3a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20016f3e:	fd842703          	lw	a4,-40(s0)
20016f42:	fec42783          	lw	a5,-20(s0)
20016f46:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20016f48:	fe442783          	lw	a5,-28(s0)
20016f4c:	cbb1                	beqz	a5,20016fa0 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20016f4e:	fe442783          	lw	a5,-28(s0)
20016f52:	439c                	lw	a5,0(a5)
20016f54:	439c                	lw	a5,0(a5)
20016f56:	fe442503          	lw	a0,-28(s0)
20016f5a:	9782                	jalr	a5
20016f5c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20016f60:	fe042703          	lw	a4,-32(s0)
20016f64:	fd842783          	lw	a5,-40(s0)
20016f68:	02f747b3          	div	a5,a4,a5
20016f6c:	fff78713          	addi	a4,a5,-1
20016f70:	fe842783          	lw	a5,-24(s0)
20016f74:	07e1                	addi	a5,a5,24
20016f76:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20016f78:	fe842783          	lw	a5,-24(s0)
20016f7c:	07a1                	addi	a5,a5,8
20016f7e:	439c                	lw	a5,0(a5)
20016f80:	fe842703          	lw	a4,-24(s0)
20016f84:	0721                	addi	a4,a4,8
20016f86:	0017e793          	ori	a5,a5,1
20016f8a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20016f8c:	fe842783          	lw	a5,-24(s0)
20016f90:	07b1                	addi	a5,a5,12
20016f92:	439c                	lw	a5,0(a5)
20016f94:	fe842703          	lw	a4,-24(s0)
20016f98:	0731                	addi	a4,a4,12
20016f9a:	0017e793          	ori	a5,a5,1
20016f9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20016fa0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20016fa2:	853e                	mv	a0,a5
20016fa4:	50b2                	lw	ra,44(sp)
20016fa6:	5422                	lw	s0,40(sp)
20016fa8:	6145                	addi	sp,sp,48
20016faa:	8082                	ret

20016fac <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20016fac:	7139                	addi	sp,sp,-64
20016fae:	de06                	sw	ra,60(sp)
20016fb0:	dc22                	sw	s0,56(sp)
20016fb2:	0080                	addi	s0,sp,64
20016fb4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20016fb8:	fcc42783          	lw	a5,-52(s0)
20016fbc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20016fc0:	fcc42503          	lw	a0,-52(s0)
20016fc4:	c53ff0ef          	jal	ra,20016c16 <__metal_driver_sifive_uart0_control_base>
20016fc8:	87aa                	mv	a5,a0
20016fca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20016fce:	fcc42503          	lw	a0,-52(s0)
20016fd2:	d03ff0ef          	jal	ra,20016cd4 <__metal_driver_sifive_uart0_clock>
20016fd6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20016fda:	fe842783          	lw	a5,-24(s0)
20016fde:	07a1                	addi	a5,a5,8
20016fe0:	4398                	lw	a4,0(a5)
20016fe2:	fe842783          	lw	a5,-24(s0)
20016fe6:	07a1                	addi	a5,a5,8
20016fe8:	86be                	mv	a3,a5
20016fea:	fff907b7          	lui	a5,0xfff90
20016fee:	17fd                	addi	a5,a5,-1
20016ff0:	8ff9                	and	a5,a5,a4
20016ff2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20016ff4:	fe842783          	lw	a5,-24(s0)
20016ff8:	07a1                	addi	a5,a5,8
20016ffa:	4398                	lw	a4,0(a5)
20016ffc:	fe842783          	lw	a5,-24(s0)
20017000:	07a1                	addi	a5,a5,8
20017002:	86be                	mv	a3,a5
20017004:	67c1                	lui	a5,0x10
20017006:	8fd9                	or	a5,a5,a4
20017008:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
2001700a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
2001700c:	fe842783          	lw	a5,-24(s0)
20017010:	07d1                	addi	a5,a5,20
20017012:	439c                	lw	a5,0(a5)
20017014:	8b85                	andi	a5,a5,1
20017016:	dbfd                	beqz	a5,2001700c <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20017018:	fe842783          	lw	a5,-24(s0)
2001701c:	07a1                	addi	a5,a5,8
2001701e:	439c                	lw	a5,0(a5)
20017020:	8b89                	andi	a5,a5,2
20017022:	c399                	beqz	a5,20017028 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20017024:	47a5                	li	a5,9
20017026:	a011                	j	2001702a <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20017028:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
2001702a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
2001702e:	fe442783          	lw	a5,-28(s0)
20017032:	439c                	lw	a5,0(a5)
20017034:	439c                	lw	a5,0(a5)
20017036:	fe442503          	lw	a0,-28(s0)
2001703a:	9782                	jalr	a5
2001703c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20017040:	fe042703          	lw	a4,-32(s0)
20017044:	fdc42783          	lw	a5,-36(s0)
20017048:	02f707b3          	mul	a5,a4,a5
2001704c:	873e                	mv	a4,a5
2001704e:	fec42783          	lw	a5,-20(s0)
20017052:	43dc                	lw	a5,4(a5)
20017054:	02f757b3          	divu	a5,a4,a5
20017058:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
2001705c:	fc042a23          	sw	zero,-44(s0)
20017060:	a039                	j	2001706e <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20017062:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20017064:	fd442783          	lw	a5,-44(s0)
20017068:	0785                	addi	a5,a5,1
2001706a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
2001706e:	fd442783          	lw	a5,-44(s0)
20017072:	fd842703          	lw	a4,-40(s0)
20017076:	fee7c6e3          	blt	a5,a4,20017062 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
2001707a:	0001                	nop
2001707c:	50f2                	lw	ra,60(sp)
2001707e:	5462                	lw	s0,56(sp)
20017080:	6121                	addi	sp,sp,64
20017082:	8082                	ret

20017084 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20017084:	7179                	addi	sp,sp,-48
20017086:	d606                	sw	ra,44(sp)
20017088:	d422                	sw	s0,40(sp)
2001708a:	1800                	addi	s0,sp,48
2001708c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20017090:	fdc42783          	lw	a5,-36(s0)
20017094:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20017098:	fec42703          	lw	a4,-20(s0)
2001709c:	fec42783          	lw	a5,-20(s0)
200170a0:	43dc                	lw	a5,4(a5)
200170a2:	85be                	mv	a1,a5
200170a4:	853a                	mv	a0,a4
200170a6:	a22fc0ef          	jal	ra,200132c8 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
200170aa:	0001                	nop
200170ac:	50b2                	lw	ra,44(sp)
200170ae:	5422                	lw	s0,40(sp)
200170b0:	6145                	addi	sp,sp,48
200170b2:	8082                	ret

200170b4 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
200170b4:	7139                	addi	sp,sp,-64
200170b6:	de06                	sw	ra,60(sp)
200170b8:	dc22                	sw	s0,56(sp)
200170ba:	0080                	addi	s0,sp,64
200170bc:	fca42623          	sw	a0,-52(s0)
200170c0:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
200170c4:	fcc42783          	lw	a5,-52(s0)
200170c8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
200170cc:	fcc42503          	lw	a0,-52(s0)
200170d0:	c05ff0ef          	jal	ra,20016cd4 <__metal_driver_sifive_uart0_clock>
200170d4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
200170d8:	fcc42503          	lw	a0,-52(s0)
200170dc:	c41ff0ef          	jal	ra,20016d1c <__metal_driver_sifive_uart0_pinmux>
200170e0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
200170e4:	fe842783          	lw	a5,-24(s0)
200170e8:	c7b9                	beqz	a5,20017136 <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
200170ea:	fec42783          	lw	a5,-20(s0)
200170ee:	20017737          	lui	a4,0x20017
200170f2:	fac70713          	addi	a4,a4,-84 # 20016fac <pre_rate_change_callback_func>
200170f6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
200170f8:	fec42783          	lw	a5,-20(s0)
200170fc:	fcc42703          	lw	a4,-52(s0)
20017100:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20017102:	fec42783          	lw	a5,-20(s0)
20017106:	07a1                	addi	a5,a5,8
20017108:	85be                	mv	a1,a5
2001710a:	fe842503          	lw	a0,-24(s0)
2001710e:	2abd                	jal	2001728c <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20017110:	fec42783          	lw	a5,-20(s0)
20017114:	20017737          	lui	a4,0x20017
20017118:	08470713          	addi	a4,a4,132 # 20017084 <post_rate_change_callback_func>
2001711c:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
2001711e:	fec42783          	lw	a5,-20(s0)
20017122:	fcc42703          	lw	a4,-52(s0)
20017126:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20017128:	fec42783          	lw	a5,-20(s0)
2001712c:	07d1                	addi	a5,a5,20
2001712e:	85be                	mv	a1,a5
20017130:	fe842503          	lw	a0,-24(s0)
20017134:	2269                	jal	200172be <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20017136:	fec42783          	lw	a5,-20(s0)
2001713a:	fc842583          	lw	a1,-56(s0)
2001713e:	853e                	mv	a0,a5
20017140:	988fc0ef          	jal	ra,200132c8 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20017144:	fe442783          	lw	a5,-28(s0)
20017148:	cb95                	beqz	a5,2001717c <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
2001714a:	fcc42503          	lw	a0,-52(s0)
2001714e:	c0fff0ef          	jal	ra,20016d5c <__metal_driver_sifive_uart0_pinmux_output_selector>
20017152:	87aa                	mv	a5,a0
20017154:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20017158:	fcc42503          	lw	a0,-52(s0)
2001715c:	c41ff0ef          	jal	ra,20016d9c <__metal_driver_sifive_uart0_pinmux_source_selector>
20017160:	87aa                	mv	a5,a0
20017162:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20017166:	fe442783          	lw	a5,-28(s0)
2001716a:	439c                	lw	a5,0(a5)
2001716c:	53dc                	lw	a5,36(a5)
2001716e:	fdc42603          	lw	a2,-36(s0)
20017172:	fe042583          	lw	a1,-32(s0)
20017176:	fe442503          	lw	a0,-28(s0)
2001717a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
2001717c:	0001                	nop
2001717e:	50f2                	lw	ra,60(sp)
20017180:	5462                	lw	s0,56(sp)
20017182:	6121                	addi	sp,sp,64
20017184:	8082                	ret

20017186 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:48
typedef struct _metal_clock_callback_t metal_clock_callback;

/*!
 * @brief Call all callbacks in the linked list, if any are registered
 */
__inline__ void _metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20017186:	7179                	addi	sp,sp,-48
20017188:	d606                	sw	ra,44(sp)
2001718a:	d422                	sw	s0,40(sp)
2001718c:	1800                	addi	s0,sp,48
2001718e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:49
    const metal_clock_callback *current = list;
20017192:	fdc42783          	lw	a5,-36(s0)
20017196:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
2001719a:	a831                	j	200171b6 <_metal_clock_call_all_callbacks+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:51
        current->callback(current->priv);
2001719c:	fec42783          	lw	a5,-20(s0)
200171a0:	4398                	lw	a4,0(a5)
200171a2:	fec42783          	lw	a5,-20(s0)
200171a6:	43dc                	lw	a5,4(a5)
200171a8:	853e                	mv	a0,a5
200171aa:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:52
        current = current->_next;
200171ac:	fec42783          	lw	a5,-20(s0)
200171b0:	479c                	lw	a5,8(a5)
200171b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:50
    while (current) {
200171b6:	fec42783          	lw	a5,-20(s0)
200171ba:	f3ed                	bnez	a5,2001719c <_metal_clock_call_all_callbacks+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:54
    }
}
200171bc:	0001                	nop
200171be:	50b2                	lw	ra,44(sp)
200171c0:	5422                	lw	s0,40(sp)
200171c2:	6145                	addi	sp,sp,48
200171c4:	8082                	ret

200171c6 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
200171c6:	7179                	addi	sp,sp,-48
200171c8:	d622                	sw	s0,44(sp)
200171ca:	1800                	addi	s0,sp,48
200171cc:	fca42e23          	sw	a0,-36(s0)
200171d0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
200171d4:	fd842783          	lw	a5,-40(s0)
200171d8:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
200171dc:	fdc42783          	lw	a5,-36(s0)
200171e0:	e781                	bnez	a5,200171e8 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
200171e2:	fd842783          	lw	a5,-40(s0)
200171e6:	a035                	j	20017212 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
200171e8:	fdc42783          	lw	a5,-36(s0)
200171ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
200171f0:	a031                	j	200171fc <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
200171f2:	fec42783          	lw	a5,-20(s0)
200171f6:	479c                	lw	a5,8(a5)
200171f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
200171fc:	fec42783          	lw	a5,-20(s0)
20017200:	479c                	lw	a5,8(a5)
20017202:	fbe5                	bnez	a5,200171f2 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20017204:	fec42783          	lw	a5,-20(s0)
20017208:	fd842703          	lw	a4,-40(s0)
2001720c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
2001720e:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20017212:	853e                	mv	a0,a5
20017214:	5432                	lw	s0,44(sp)
20017216:	6145                	addi	sp,sp,48
20017218:	8082                	ret

2001721a <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:105
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
__inline__ long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
2001721a:	1101                	addi	sp,sp,-32
2001721c:	ce06                	sw	ra,28(sp)
2001721e:	cc22                	sw	s0,24(sp)
20017220:	1000                	addi	s0,sp,32
20017222:	fea42623          	sw	a0,-20(s0)
20017226:	fec42783          	lw	a5,-20(s0)
2001722a:	439c                	lw	a5,0(a5)
2001722c:	439c                	lw	a5,0(a5)
2001722e:	fec42503          	lw	a0,-20(s0)
20017232:	9782                	jalr	a5
20017234:	87aa                	mv	a5,a0
20017236:	853e                	mv	a0,a5
20017238:	40f2                	lw	ra,28(sp)
2001723a:	4462                	lw	s0,24(sp)
2001723c:	6105                	addi	sp,sp,32
2001723e:	8082                	ret

20017240 <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:122
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
20017240:	7179                	addi	sp,sp,-48
20017242:	d606                	sw	ra,44(sp)
20017244:	d422                	sw	s0,40(sp)
20017246:	1800                	addi	s0,sp,48
20017248:	fca42e23          	sw	a0,-36(s0)
2001724c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:123
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
20017250:	fdc42783          	lw	a5,-36(s0)
20017254:	43dc                	lw	a5,4(a5)
20017256:	853e                	mv	a0,a5
20017258:	f2fff0ef          	jal	ra,20017186 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:125

    long out = clk->vtable->set_rate_hz(clk, hz);
2001725c:	fdc42783          	lw	a5,-36(s0)
20017260:	439c                	lw	a5,0(a5)
20017262:	43dc                	lw	a5,4(a5)
20017264:	fd842583          	lw	a1,-40(s0)
20017268:	fdc42503          	lw	a0,-36(s0)
2001726c:	9782                	jalr	a5
2001726e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:127

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20017272:	fdc42783          	lw	a5,-36(s0)
20017276:	479c                	lw	a5,8(a5)
20017278:	853e                	mv	a0,a5
2001727a:	f0dff0ef          	jal	ra,20017186 <_metal_clock_call_all_callbacks>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:129

    return out;
2001727e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:130
}
20017282:	853e                	mv	a0,a5
20017284:	50b2                	lw	ra,44(sp)
20017286:	5422                	lw	s0,40(sp)
20017288:	6145                	addi	sp,sp,48
2001728a:	8082                	ret

2001728c <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
2001728c:	1101                	addi	sp,sp,-32
2001728e:	ce06                	sw	ra,28(sp)
20017290:	cc22                	sw	s0,24(sp)
20017292:	1000                	addi	s0,sp,32
20017294:	fea42623          	sw	a0,-20(s0)
20017298:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
2001729c:	fec42783          	lw	a5,-20(s0)
200172a0:	43dc                	lw	a5,4(a5)
200172a2:	fe842583          	lw	a1,-24(s0)
200172a6:	853e                	mv	a0,a5
200172a8:	f1fff0ef          	jal	ra,200171c6 <_metal_clock_append_to_callbacks>
200172ac:	872a                	mv	a4,a0
200172ae:	fec42783          	lw	a5,-20(s0)
200172b2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
200172b4:	0001                	nop
200172b6:	40f2                	lw	ra,28(sp)
200172b8:	4462                	lw	s0,24(sp)
200172ba:	6105                	addi	sp,sp,32
200172bc:	8082                	ret

200172be <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
200172be:	1101                	addi	sp,sp,-32
200172c0:	ce06                	sw	ra,28(sp)
200172c2:	cc22                	sw	s0,24(sp)
200172c4:	1000                	addi	s0,sp,32
200172c6:	fea42623          	sw	a0,-20(s0)
200172ca:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
200172ce:	fec42783          	lw	a5,-20(s0)
200172d2:	479c                	lw	a5,8(a5)
200172d4:	fe842583          	lw	a1,-24(s0)
200172d8:	853e                	mv	a0,a5
200172da:	eedff0ef          	jal	ra,200171c6 <_metal_clock_append_to_callbacks>
200172de:	872a                	mv	a4,a0
200172e0:	fec42783          	lw	a5,-20(s0)
200172e4:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
200172e6:	0001                	nop
200172e8:	40f2                	lw	ra,28(sp)
200172ea:	4462                	lw	s0,24(sp)
200172ec:	6105                	addi	sp,sp,32
200172ee:	8082                	ret

200172f0 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
200172f0:	1101                	addi	sp,sp,-32
200172f2:	ce06                	sw	ra,28(sp)
200172f4:	cc22                	sw	s0,24(sp)
200172f6:	1000                	addi	s0,sp,32
200172f8:	fea42623          	sw	a0,-20(s0)
200172fc:	fec42783          	lw	a5,-20(s0)
20017300:	439c                	lw	a5,0(a5)
20017302:	57dc                	lw	a5,44(a5)
20017304:	fec42503          	lw	a0,-20(s0)
20017308:	9782                	jalr	a5
2001730a:	87aa                	mv	a5,a0
2001730c:	853e                	mv	a0,a5
2001730e:	40f2                	lw	ra,28(sp)
20017310:	4462                	lw	s0,24(sp)
20017312:	6105                	addi	sp,sp,32
20017314:	8082                	ret

20017316 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20017316:	1101                	addi	sp,sp,-32
20017318:	ce22                	sw	s0,28(sp)
2001731a:	1000                	addi	s0,sp,32
2001731c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20017320:	fec42783          	lw	a5,-20(s0)
20017324:	eb89                	bnez	a5,20017336 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20017326:	fec42703          	lw	a4,-20(s0)
2001732a:	070a                	slli	a4,a4,0x2
2001732c:	80c18793          	addi	a5,gp,-2036 # 80000aec <__metal_cpu_table>
20017330:	97ba                	add	a5,a5,a4
20017332:	439c                	lw	a5,0(a5)
20017334:	a011                	j	20017338 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20017336:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20017338:	853e                	mv	a0,a5
2001733a:	4472                	lw	s0,28(sp)
2001733c:	6105                	addi	sp,sp,32
2001733e:	8082                	ret

20017340 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20017340:	1101                	addi	sp,sp,-32
20017342:	ce22                	sw	s0,28(sp)
20017344:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20017346:	f14027f3          	csrr	a5,mhartid
2001734a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2001734e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20017352:	853e                	mv	a0,a5
20017354:	4472                	lw	s0,28(sp)
20017356:	6105                	addi	sp,sp,32
20017358:	8082                	ret

2001735a <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2001735a:	1101                	addi	sp,sp,-32
2001735c:	ce22                	sw	s0,28(sp)
2001735e:	1000                	addi	s0,sp,32
20017360:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20017364:	0001                	nop
20017366:	bffd                	j	20017364 <metal_shutdown+0xa>
	...

20017380 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20017380:	8a7fc06f          	j	20013c26 <metal_interrupt_vector_handler>

20017384 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20017384:	8a3fc06f          	j	20013c26 <metal_interrupt_vector_handler>

20017388 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20017388:	89ffc06f          	j	20013c26 <metal_interrupt_vector_handler>

2001738c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2001738c:	8c9fc06f          	j	20013c54 <metal_software_interrupt_vector_handler>

20017390 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20017390:	897fc06f          	j	20013c26 <metal_interrupt_vector_handler>

20017394 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20017394:	893fc06f          	j	20013c26 <metal_interrupt_vector_handler>

20017398 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20017398:	88ffc06f          	j	20013c26 <metal_interrupt_vector_handler>

2001739c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2001739c:	9abfc06f          	j	20013d46 <metal_timer_interrupt_vector_handler>

200173a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
200173a0:	887fc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
200173a4:	883fc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
200173a8:	87ffc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
200173ac:	87bfc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
200173b0:	877fc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
200173b4:	873fc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
200173b8:	86ffc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
200173bc:	86bfc06f          	j	20013c26 <metal_interrupt_vector_handler>

200173c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
200173c0:	c37fc06f          	j	20013ff6 <metal_lc0_interrupt_vector_handler>

200173c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
200173c4:	cc5fc06f          	j	20014088 <metal_lc1_interrupt_vector_handler>

200173c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
200173c8:	d53fc06f          	j	2001411a <metal_lc2_interrupt_vector_handler>

200173cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
200173cc:	de1fc06f          	j	200141ac <metal_lc3_interrupt_vector_handler>

200173d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
200173d0:	e6ffc06f          	j	2001423e <metal_lc4_interrupt_vector_handler>

200173d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
200173d4:	efdfc06f          	j	200142d0 <metal_lc5_interrupt_vector_handler>

200173d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
200173d8:	f8bfc06f          	j	20014362 <metal_lc6_interrupt_vector_handler>

200173dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
200173dc:	818fd06f          	j	200143f4 <metal_lc7_interrupt_vector_handler>

200173e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
200173e0:	8a6fd06f          	j	20014486 <metal_lc8_interrupt_vector_handler>

200173e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
200173e4:	934fd06f          	j	20014518 <metal_lc9_interrupt_vector_handler>

200173e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
200173e8:	9c2fd06f          	j	200145aa <metal_lc10_interrupt_vector_handler>

200173ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
200173ec:	a50fd06f          	j	2001463c <metal_lc11_interrupt_vector_handler>

200173f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
200173f0:	adefd06f          	j	200146ce <metal_lc12_interrupt_vector_handler>

200173f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
200173f4:	b6cfd06f          	j	20014760 <metal_lc13_interrupt_vector_handler>

200173f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
200173f8:	bfafd06f          	j	200147f2 <metal_lc14_interrupt_vector_handler>

200173fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
200173fc:	c88fd06f          	j	20014884 <metal_lc15_interrupt_vector_handler>

20017400 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:178
{
20017400:	1101                	addi	sp,sp,-32
20017402:	ce22                	sw	s0,28(sp)
20017404:	1000                	addi	s0,sp,32
20017406:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:179
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2001740a:	fec42703          	lw	a4,-20(s0)
2001740e:	800007b7          	lui	a5,0x80000
20017412:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffc13c>
20017416:	00f71763          	bne	a4,a5,20017424 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:180
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2001741a:	00f427b7          	lui	a5,0xf42
2001741e:	40078793          	addi	a5,a5,1024 # f42400 <__heap_size+0xf41c00>
20017422:	a099                	j	20017468 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:182
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20017424:	fec42703          	lw	a4,-20(s0)
20017428:	800007b7          	lui	a5,0x80000
2001742c:	0c478793          	addi	a5,a5,196 # 800000c4 <metal_segment_heap_target_end+0xffffc148>
20017430:	00f71763          	bne	a4,a5,2001743e <__metal_driver_fixed_clock_rate+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:183
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20017434:	044aa7b7          	lui	a5,0x44aa
20017438:	20078793          	addi	a5,a5,512 # 44aa200 <__heap_size+0x44a9a00>
2001743c:	a035                	j	20017468 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:185
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
2001743e:	fec42703          	lw	a4,-20(s0)
20017442:	800007b7          	lui	a5,0x80000
20017446:	0d078793          	addi	a5,a5,208 # 800000d0 <metal_segment_heap_target_end+0xffffc154>
2001744a:	00f71463          	bne	a4,a5,20017452 <__metal_driver_fixed_clock_rate+0x52>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:186
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
2001744e:	67a1                	lui	a5,0x8
20017450:	a821                	j	20017468 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:188
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
20017452:	fec42703          	lw	a4,-20(s0)
20017456:	800007b7          	lui	a5,0x80000
2001745a:	0dc78793          	addi	a5,a5,220 # 800000dc <metal_segment_heap_target_end+0xffffc160>
2001745e:	00f71463          	bne	a4,a5,20017466 <__metal_driver_fixed_clock_rate+0x66>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:189
		return METAL_FIXED_CLOCK_6_CLOCK_FREQUENCY;
20017462:	67a1                	lui	a5,0x8
20017464:	a011                	j	20017468 <__metal_driver_fixed_clock_rate+0x68>
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:192
		return 0;
20017466:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/sifive-hifive1-revb/build/debug/./metal/machine.h:194
}
20017468:	853e                	mv	a0,a5
2001746a:	4472                	lw	s0,28(sp)
2001746c:	6105                	addi	sp,sp,32
2001746e:	8082                	ret

20017470 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20017470:	1101                	addi	sp,sp,-32
20017472:	ce06                	sw	ra,28(sp)
20017474:	cc22                	sw	s0,24(sp)
20017476:	1000                	addi	s0,sp,32
20017478:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2001747c:	fec42503          	lw	a0,-20(s0)
20017480:	f81ff0ef          	jal	ra,20017400 <__metal_driver_fixed_clock_rate>
20017484:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20017486:	853e                	mv	a0,a5
20017488:	40f2                	lw	ra,28(sp)
2001748a:	4462                	lw	s0,24(sp)
2001748c:	6105                	addi	sp,sp,32
2001748e:	8082                	ret

20017490 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20017490:	1101                	addi	sp,sp,-32
20017492:	ce06                	sw	ra,28(sp)
20017494:	cc22                	sw	s0,24(sp)
20017496:	1000                	addi	s0,sp,32
20017498:	fea42623          	sw	a0,-20(s0)
2001749c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
200174a0:	fec42503          	lw	a0,-20(s0)
200174a4:	fcdff0ef          	jal	ra,20017470 <__metal_driver_fixed_clock_get_rate_hz>
200174a8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
200174aa:	853e                	mv	a0,a5
200174ac:	40f2                	lw	ra,28(sp)
200174ae:	4462                	lw	s0,24(sp)
200174b0:	6105                	addi	sp,sp,32
200174b2:	8082                	ret

200174b4 <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
200174b4:	1101                	addi	sp,sp,-32
200174b6:	ce06                	sw	ra,28(sp)
200174b8:	cc22                	sw	s0,24(sp)
200174ba:	1000                	addi	s0,sp,32
200174bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
200174c0:	fec42503          	lw	a0,-20(s0)
200174c4:	e97ff0ef          	jal	ra,2001735a <metal_shutdown>
