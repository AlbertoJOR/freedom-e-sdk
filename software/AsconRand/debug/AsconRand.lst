
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/debug/AsconRand.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/debug/AsconRand.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005764 memsz 0x00005764 flags rwx
    LOAD off    0x00006770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x0000146c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405768 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005000  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000560  20405200  20405200  00006200  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405760  20405760  00006760  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405768  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000086c  80000770  80000770  00006770  2**3  ALLOC
  6 .stack            00000400  80000fdc  80000fdc  00006770  2**0  ALLOC
  7 .heap             00000800  800013dc  800013dc  00006770  2**0  ALLOC
  8 .debug_info       00014af4  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     0000277b  00000000  00000000  0001c264  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000910  00000000  00000000  0001e9e0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007a8  00000000  00000000  0001f2f0  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000091e0  00000000  00000000  0001fa98  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000037e5  00000000  00000000  00028c78  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002c45d  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002c485  2**0  CONTENTS, READONLY
 16 .debug_frame      000025d0  00000000  00000000  0002c4b0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405200 l    d  .rodata	00000000 .rodata
20405760 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
80000fdc l    d  .stack	00000000 .stack
800013dc l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
2040540c l       .rodata	00000000 argv
20405410 l       .rodata	00000000 envp
20405414 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconRand.c
8000077c l     O .bss	000007d0 rand_arr.2802
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400996 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400ee6 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000f4c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401bbc l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401c66 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401c8c l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401cb0 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401cec l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401e4c l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
2040237e l     F .text	00000024 __metal_driver_cpu_hartid
204023a2 l     F .text	0000002a __metal_driver_cpu_timebase
204023cc l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403c14 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403c3e l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403c66 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403c8e l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403cb6 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404200 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404226 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404250 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404ab6 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404ae0 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404b0e l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404b36 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404b64 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404b8e l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404bb8 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404da4 l     F .text	000000d8 pre_rate_change_callback_func
20404e7c l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405100 l       .text	00000000 IRQ_0
20405104 l       .text	00000000 IRQ_1
20405108 l       .text	00000000 IRQ_2
2040510c l       .text	00000000 IRQ_3
20405110 l       .text	00000000 IRQ_4
20405114 l       .text	00000000 IRQ_5
20405118 l       .text	00000000 IRQ_6
2040511c l       .text	00000000 IRQ_7
20405120 l       .text	00000000 IRQ_8
20405124 l       .text	00000000 IRQ_9
20405128 l       .text	00000000 IRQ_10
2040512c l       .text	00000000 IRQ_11
20405130 l       .text	00000000 IRQ_12
20405134 l       .text	00000000 IRQ_13
20405138 l       .text	00000000 IRQ_14
2040513c l       .text	00000000 IRQ_15
20405140 l       .text	00000000 IRQ_LC0
20405144 l       .text	00000000 IRQ_LC1
20405148 l       .text	00000000 IRQ_LC2
2040514c l       .text	00000000 IRQ_LC3
20405150 l       .text	00000000 IRQ_LC4
20405154 l       .text	00000000 IRQ_LC5
20405158 l       .text	00000000 IRQ_LC6
2040515c l       .text	00000000 IRQ_LC7
20405160 l       .text	00000000 IRQ_LC8
20405164 l       .text	00000000 IRQ_LC9
20405168 l       .text	00000000 IRQ_LC10
2040516c l       .text	00000000 IRQ_LC11
20405170 l       .text	00000000 IRQ_LC12
20405174 l       .text	00000000 IRQ_LC13
20405178 l       .text	00000000 IRQ_LC14
2040517c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405180 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405764 l       .init_array	00000000 __fini_array_end
20405764 l       .init_array	00000000 __fini_array_start
20405764 l       .init_array	00000000 __init_array_end
20405760 l       .init_array	00000000 __preinit_array_end
20405760 l       .init_array	00000000 __init_array_start
20405760 l       .init_array	00000000 __preinit_array_start
20400482 g     F .text	0000002c putchar
2040573c g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
2040134a g     F .text	00000028 _isatty_r
20402bbc  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400530 g     F .text	000000da _puts_r
20401372 g     F .text	0000002c _lseek_r
20404d06 g     F .text	0000009e __metal_driver_sifive_uart0_set_baud_rate
20402028 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402b2a  w    F .text	00000092 metal_lc3_interrupt_vector_handler
2040031e g     F .text	0000001e rdcycle
2040337c g     F .text	00000038 __metal_valid_interrupt_id
2040043e g     F .text	00000044 printf
204037a2 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
20404f7e g     F .text	00000054 _metal_clock_append_to_callbacks
20403d06 g     F .text	00000038 __metal_plic0_complete_interrupt
204035fc g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401290 g     F .text	00000036 __sseek
20400a4c g     F .text	0000006a __sinit
20400618 g     F .text	000000c0 __swbuf_r
20400a08 g     F .text	00000044 __sfmoreglue
204013ba g     F .text	00000002 __malloc_unlock
20405058 g     F .text	0000002a metal_cpu_get
80000728 g     O .data	00000020 __metal_dt_serial_10013000
20404690 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405420 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80000fdc g       .bss	00000000 metal_segment_bss_target_end
20401d1c g     F .text	0000009a __metal_clint0_mtime_get
20403ba8 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404442 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
20401944 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404c22 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20401db6 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401320 g     F .text	0000002a _fstat_r
204048e0 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000fd8 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20404fd2 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402e96  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405674 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405634 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401c38 g     F .text	0000002e metal_uart_set_baud_rate
20404eac g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403836 g     F .text	00000072 __metal_driver_cpu_mcycle_get
800013dc g       .heap	00000000 metal_segment_heap_target_start
204009fe g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20402e04  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040060a g     F .text	0000000e puts
204030de  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402560 g     F .text	00000018 __metal_default_exception_handler
204017b8 g     F .text	00000026 _fstat
2040234a g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403da2 g     F .text	00000062 __metal_plic0_set_priority
204037be g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204023f6 g     F .text	0000002c __metal_driver_cpu_get
204055e8 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204002b8 g     F .text	00000044 RAND
20402454 g     F .text	00000018 __metal_interrupt_global_disable
20402d72  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402f28  w    F .text	00000092 metal_lc10_interrupt_vector_handler
204011ea g     F .text	00000028 _sbrk_r
204041b8 g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403470 g     F .text	0000004e __metal_exception_register
2040176a g     F .text	0000002c _read_r
204039ca g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404522 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
2040264c g     F .text	00000064 __metal_default_sw_handler
20405002 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404be2 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
204017de g     F .text	00000020 _isatty
204045e8 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
204026b0  w    F .text	0000008e metal_timer_interrupt_vector_handler
204019b4 g     F .text	0000006a __libc_init_array
20404562 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20402fba  w    F .text	00000092 metal_lc11_interrupt_vector_handler
2040374a g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401852 g     F .text	0000007a _sbrk
204044dc g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
204024b6 g     F .text	0000001a __metal_interrupt_timer_disable
204046da g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403a80 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405700 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404628 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
2040197c g     F .text	00000038 __libc_fini_array
20404a68 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403a0a g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402508 g     F .text	0000002c __metal_interrupt_local_enable
20402316 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401b6a g     F .text	0000002c metal_tty_putc
20403ec4 g     F .text	00000018 __metal_plic0_default_handler
204004ae g     F .text	00000082 _putc_r
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405370 g     O .rodata	00000020 __sf_fake_stderr
204024ec g     F .text	0000001c __metal_interrupt_external_disable
20404c00 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
2040381a g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204034be g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400f10 g     F .text	00000042 __sfputs_r
20403b62 g     F .text	00000046 __metal_driver_cpu_exception_register
2040246c g     F .text	00000018 __metal_interrupt_software_enable
20402a06  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040139e g     F .text	0000001a memchr
20400d5c g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403294 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401aa2 g     F .text	000000c8 __call_exitprocs
800013dc g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
204017fe g     F .text	0000002a _lseek
20403b42 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403bd6 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
204024d0 g     F .text	0000001c __metal_interrupt_external_enable
20401a1e g     F .text	00000084 __register_exitproc
20404c54 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20403f6a g     F .text	00000144 __metal_driver_riscv_plic0_init
20404170 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204044b0 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000b8 printC
20402ce0  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402422 g     F .text	0000001a __metal_myhart_id
20404a88 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204025be  w    F .text	0000008e metal_software_interrupt_vector_handler
20403776 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
204012f8 g     F .text	00000028 _close_r
20404ce6 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401f0a g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
204006d8 g     F .text	00000110 __swsetup_r
20400ab6 g     F .text	0000009e __sfp
20401212 g     F .text	00000030 __sread
20404404 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
20402590  w    F .text	0000002e metal_interrupt_vector_handler
204013b8 g     F .text	00000002 __malloc_lock
20400932 g     F .text	00000064 _fflush_r
20403d76 g     F .text	0000002c __metal_plic0_get_threshold
20405390 g     O .rodata	00000020 __sf_fake_stdin
204002fc g     F .text	00000022 RDCycle
204033b4 g     F .text	000000bc __metal_local_interrupt_enable
204021e0 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400cb4 g     F .text	000000a8 memset
20402c4e  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040033c g     F .text	00000102 main
80000770 g       .data	00000000 metal_segment_data_target_end
20403a1e g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403ae2 g     F .text	00000060 __metal_driver_cpu_get_msip
2040509c g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403bf4 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403cd8 g     F .text	0000002e __metal_plic0_claim_interrupt
204012c6 g     F .text	00000006 __sclose
2040304c  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400e08 g     F .text	000000de _malloc_r
2040200c g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204038a8 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405082 g     F .text	0000001a metal_cpu_get_current_hartid
20405100 g       .text	00000000 __metal_vector_table
20405768 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
2040043e g     F .text	00000044 iprintf
2040243c g     F .text	00000018 __metal_interrupt_global_enable
2040193a g     F .text	0000000a atexit
20401b96 g     F .text	00000026 metal_tty_putc_raw
204012cc g     F .text	0000002c _write_r
2040249c g     F .text	0000001a __metal_interrupt_timer_enable
20404c92 g     F .text	00000054 __metal_driver_sifive_uart0_getc
2040212e g     F .text	000000b2 __metal_driver_riscv_clint0_disable
204013bc g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
20403954 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
204007e8 g     F .text	0000014a __sflush_r
204051ae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
2040207c g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405768 g       *ABS*	00000000 metal_segment_data_source_start
80001bdc g       .heap	00000000 metal_segment_heap_target_end
204032e4 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400bc0 g     F .text	00000058 __swhatbuf_r
204045a2 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040273e g     F .text	00000066 __metal_default_timer_handler
204018cc g     F .text	0000006e _write
20403edc g     F .text	0000008e __metal_plic0_handler
20402a98  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403202  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405032 g     F .text	00000026 metal_cpu_interrupt_controller
20401242 g     F .text	0000004e __swrite
20401950 g     F .text	0000002c exit
20400f52 g     F .text	00000298 _vfiprintf_r
20400b54 g     F .text	0000006c _fwalk_reent
204051cc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
204053b0 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
20402578 g     F .text	00000018 __metal_default_interrupt_handler
20401c0a g     F .text	0000002e metal_uart_putc
20401828 g     F .text	0000002a _read
20404486 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402800 g     F .text	0000014e __metal_exception_handler
20402974  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204051ee g     F .text	00000012 _exit
204038ee g     F .text	00000066 __metal_driver_cpu_mtime_get
20400c18 g     F .text	0000009c __smakebuf_r
20401fe4 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204014c8 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
20403170  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401e82 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
20400f52 g     F .text	00000298 _vfprintf_r
204039e0 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403e38 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
204039f4 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402534 g     F .text	0000002c __metal_interrupt_local_disable
20402484 g     F .text	00000018 __metal_interrupt_software_disable
20403e04 g     F .text	00000034 __metal_plic0_get_priority
20401bde g     F .text	0000002c metal_uart_init
20403d3e g     F .text	00000038 __metal_plic0_set_threshold
20401796 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
204040ae g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	49418113          	addi	sp,gp,1172 # 800013dc <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00005297          	auipc	t0,0x5
204000ac:	6c028293          	addi	t0,t0,1728 # 20405768 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00005297          	auipc	t0,0x5
204000d8:	69428293          	addi	t0,t0,1684 # 20405768 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	66830313          	addi	t1,t1,1640 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	09418393          	addi	t2,gp,148 # 80000fdc <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	85650513          	addi	a0,a0,-1962 # 2040197c <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	00d010ef          	jal	ra,2040193a <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	083010ef          	jal	ra,204019b4 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	2b258593          	addi	a1,a1,690 # 2040540c <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	2ae60613          	addi	a2,a2,686 # 20405410 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	7e4010ef          	jal	ra,20401950 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2a45                	jal	2040033c <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:46

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:47
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:47 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:47 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:47 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:48 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:48 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:48 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:49 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a0b1                	j	2040029e <printC+0x9e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:50
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e399                	bnez	a5,20400260 <printC+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:51
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	2415                	jal	20400482 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:53
        }
        printf("%08x ", arr[i], i);
20400260:	fec42783          	lw	a5,-20(s0)
20400264:	078a                	slli	a5,a5,0x2
20400266:	fdc42703          	lw	a4,-36(s0)
2040026a:	97ba                	add	a5,a5,a4
2040026c:	439c                	lw	a5,0(a5)
2040026e:	fec42603          	lw	a2,-20(s0)
20400272:	85be                	mv	a1,a5
20400274:	204057b7          	lui	a5,0x20405
20400278:	20078513          	addi	a0,a5,512 # 20405200 <_exit+0x12>
2040027c:	22c9                	jal	2040043e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:54
        if (del) {
2040027e:	fd042783          	lw	a5,-48(s0)
20400282:	cb89                	beqz	a5,20400294 <printC+0x94>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:55
            arr[i] = 0;
20400284:	fec42783          	lw	a5,-20(s0)
20400288:	078a                	slli	a5,a5,0x2
2040028a:	fdc42703          	lw	a4,-36(s0)
2040028e:	97ba                	add	a5,a5,a4
20400290:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:49 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400294:	fec42783          	lw	a5,-20(s0)
20400298:	0785                	addi	a5,a5,1
2040029a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:49 (discriminator 1)
2040029e:	fec42703          	lw	a4,-20(s0)
204002a2:	fe842783          	lw	a5,-24(s0)
204002a6:	faf747e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:58
        }
    }
    printf("\n");
204002aa:	4529                	li	a0,10
204002ac:	2ad9                	jal	20400482 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:59
}
204002ae:	0001                	nop
204002b0:	50b2                	lw	ra,44(sp)
204002b2:	5422                	lw	s0,40(sp)
204002b4:	6145                	addi	sp,sp,48
204002b6:	8082                	ret

204002b8 <RAND>:
RAND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:164
    asm volatile("fence":: : "memory");
    //printf(" Finish Hash: %08x \n", rd);
    return 0;
}

u32 RAND(u32 *return_addr, u32 num_rands) {
204002b8:	7179                	addi	sp,sp,-48
204002ba:	d606                	sw	ra,44(sp)
204002bc:	d422                	sw	s0,40(sp)
204002be:	1800                	addi	s0,sp,48
204002c0:	fca42e23          	sw	a0,-36(s0)
204002c4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:166
    u32 rd;
    asm volatile("fence");
204002c8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:167
    ROCC_INSTRUCTION_DSS(0, rd, return_addr, num_rands, R_Rand);
204002cc:	fdc42783          	lw	a5,-36(s0)
204002d0:	85be                	mv	a1,a5
204002d2:	fd842603          	lw	a2,-40(s0)
204002d6:	84c5f50b          	0x84c5f50b
204002da:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:168
    asm volatile("fence":: : "memory");
204002de:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:169
    printf(" Finish Rand: %08x \n", rd);
204002e2:	fec42583          	lw	a1,-20(s0)
204002e6:	204057b7          	lui	a5,0x20405
204002ea:	20878513          	addi	a0,a5,520 # 20405208 <_exit+0x1a>
204002ee:	2a81                	jal	2040043e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:170
    return 0;
204002f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:171
}
204002f2:	853e                	mv	a0,a5
204002f4:	50b2                	lw	ra,44(sp)
204002f6:	5422                	lw	s0,40(sp)
204002f8:	6145                	addi	sp,sp,48
204002fa:	8082                	ret

204002fc <RDCycle>:
RDCycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:180
    asm volatile("fence");
    ROCC_INSTRUCTION_D(0, rd, R_Seed);
    asm volatile("fence":: : "memory");
    return 0;
}
u32 RDCycle() {
204002fc:	1101                	addi	sp,sp,-32
204002fe:	ce22                	sw	s0,28(sp)
20400300:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:181
    asm volatile("fence");
20400302:	0ff0000f          	fence
20400306:	c200450b          	0xc200450b
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:183
    u32 rd ;
    ROCC_INSTRUCTION_D(0, rd, C_Count);
2040030a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:184
    asm volatile("fence":: : "memory");
2040030e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:185
    return rd;
20400312:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../AsconHW/AEAD_HW.h:186
}
20400316:	853e                	mv	a0,a5
20400318:	4472                	lw	s0,28(sp)
2040031a:	6105                	addi	sp,sp,32
2040031c:	8082                	ret

2040031e <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../RoCCcommon/csr.h:50
#define rdtime() read_csr(time)
// #define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)


unsigned rdcycle() {
2040031e:	1101                	addi	sp,sp,-32
20400320:	ce22                	sw	s0,28(sp)
20400322:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../RoCCcommon/csr.h:51
  unsigned mcycle = 0;
20400324:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../RoCCcommon/csr.h:53

  asm volatile ("csrr %0,mcycle"   : "=r" (mcycle)  );
20400328:	b00027f3          	csrr	a5,mcycle
2040032c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../RoCCcommon/csr.h:55

  return mcycle;
20400330:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/../RoCCcommon/csr.h:56
}
20400334:	853e                	mv	a0,a5
20400336:	4472                	lw	s0,28(sp)
20400338:	6105                	addi	sp,sp,32
2040033a:	8082                	ret

2040033c <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
2040033c:	7179                	addi	sp,sp,-48
2040033e:	d606                	sw	ra,44(sp)
20400340:	d422                	sw	s0,40(sp)
20400342:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:7
    u32 num_rand = 32;
20400344:	02000793          	li	a5,32
20400348:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:13
    static u32 rand_arr[500] = {0};


    unsigned start, end;
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
2040034c:	67e1                	lui	a5,0x18
2040034e:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:14
printf("Rand Seed: \n");
20400352:	204057b7          	lui	a5,0x20405
20400356:	2b478513          	addi	a0,a5,692 # 204052b4 <_exit+0xc6>
2040035a:	2c45                	jal	2040060a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:15
    start = rdcycle();
2040035c:	37c9                	jal	2040031e <rdcycle>
2040035e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:17
    // SEED();
    end = rdcycle();
20400362:	3f75                	jal	2040031e <rdcycle>
20400364:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:19
    u32 st, en ;
    st = RDCycle();
20400368:	3f51                	jal	204002fc <RDCycle>
2040036a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:20
    en = RDCycle();
2040036e:	3779                	jal	204002fc <RDCycle>
20400370:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:21
    printf("Total time no Instruction HW = %d cycles\n",end-start);
20400374:	fe442703          	lw	a4,-28(s0)
20400378:	fe842783          	lw	a5,-24(s0)
2040037c:	40f707b3          	sub	a5,a4,a5
20400380:	85be                	mv	a1,a5
20400382:	204057b7          	lui	a5,0x20405
20400386:	2c078513          	addi	a0,a5,704 # 204052c0 <_exit+0xd2>
2040038a:	2855                	jal	2040043e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:22
    printf("Total time no Instruction HW = %d cycles, my count\n",en-st);
2040038c:	fdc42703          	lw	a4,-36(s0)
20400390:	fe042783          	lw	a5,-32(s0)
20400394:	40f707b3          	sub	a5,a4,a5
20400398:	85be                	mv	a1,a5
2040039a:	204057b7          	lui	a5,0x20405
2040039e:	2ec78513          	addi	a0,a5,748 # 204052ec <_exit+0xfe>
204003a2:	2871                	jal	2040043e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:25


    printf("Rand HW: \n");
204003a4:	204057b7          	lui	a5,0x20405
204003a8:	32078513          	addi	a0,a5,800 # 20405320 <_exit+0x132>
204003ac:	2cb9                	jal	2040060a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:26
    start = rdcycle();
204003ae:	3f85                	jal	2040031e <rdcycle>
204003b0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:27
    RAND( rand_arr, num_rand);
204003b4:	fec42583          	lw	a1,-20(s0)
204003b8:	800007b7          	lui	a5,0x80000
204003bc:	77c78513          	addi	a0,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffeba0>
204003c0:	3de5                	jal	204002b8 <RAND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:28
    end = rdcycle();
204003c2:	3fb1                	jal	2040031e <rdcycle>
204003c4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:29
    st = RDCycle();
204003c8:	3f15                	jal	204002fc <RDCycle>
204003ca:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:30
    RAND( rand_arr, num_rand);
204003ce:	fec42583          	lw	a1,-20(s0)
204003d2:	800007b7          	lui	a5,0x80000
204003d6:	77c78513          	addi	a0,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffeba0>
204003da:	3df9                	jal	204002b8 <RAND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:31
    en = RDCycle();
204003dc:	3705                	jal	204002fc <RDCycle>
204003de:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:32
    printf("Total time HW = %d cycles\n",end-start);
204003e2:	fe442703          	lw	a4,-28(s0)
204003e6:	fe842783          	lw	a5,-24(s0)
204003ea:	40f707b3          	sub	a5,a4,a5
204003ee:	85be                	mv	a1,a5
204003f0:	204057b7          	lui	a5,0x20405
204003f4:	32c78513          	addi	a0,a5,812 # 2040532c <_exit+0x13e>
204003f8:	2099                	jal	2040043e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:33
    printf("Total time HW = %d cycles my count\n",en-st);
204003fa:	fdc42703          	lw	a4,-36(s0)
204003fe:	fe042783          	lw	a5,-32(s0)
20400402:	40f707b3          	sub	a5,a4,a5
20400406:	85be                	mv	a1,a5
20400408:	204057b7          	lui	a5,0x20405
2040040c:	34878513          	addi	a0,a5,840 # 20405348 <_exit+0x15a>
20400410:	203d                	jal	2040043e <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:34
    printC(rand_arr, num_rand *4 , 0, 1);
20400412:	fec42783          	lw	a5,-20(s0)
20400416:	078a                	slli	a5,a5,0x2
20400418:	4685                	li	a3,1
2040041a:	4601                	li	a2,0
2040041c:	85be                	mv	a1,a5
2040041e:	800007b7          	lui	a5,0x80000
20400422:	77c78513          	addi	a0,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffeba0>
20400426:	3be9                	jal	20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:35
    printf("\nX\n");
20400428:	204057b7          	lui	a5,0x20405
2040042c:	36c78513          	addi	a0,a5,876 # 2040536c <_exit+0x17e>
20400430:	2ae9                	jal	2040060a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:39



    return 0;
20400432:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconRand/AsconRand.c:42


20400434:	853e                	mv	a0,a5
20400436:	50b2                	lw	ra,44(sp)
20400438:	5422                	lw	s0,40(sp)
2040043a:	6145                	addi	sp,sp,48
2040043c:	8082                	ret

2040043e <iprintf>:
printf():
2040043e:	7139                	addi	sp,sp,-64
20400440:	da3e                	sw	a5,52(sp)
20400442:	d22e                	sw	a1,36(sp)
20400444:	d432                	sw	a2,40(sp)
20400446:	d636                	sw	a3,44(sp)
20400448:	d83a                	sw	a4,48(sp)
2040044a:	dc42                	sw	a6,56(sp)
2040044c:	de46                	sw	a7,60(sp)
2040044e:	5fc00797          	auipc	a5,0x5fc00
20400452:	2fa78793          	addi	a5,a5,762 # 80000748 <_impure_ptr>
20400456:	cc22                	sw	s0,24(sp)
20400458:	4380                	lw	s0,0(a5)
2040045a:	ca26                	sw	s1,20(sp)
2040045c:	ce06                	sw	ra,28(sp)
2040045e:	84aa                	mv	s1,a0
20400460:	c409                	beqz	s0,2040046a <iprintf+0x2c>
20400462:	4c1c                	lw	a5,24(s0)
20400464:	e399                	bnez	a5,2040046a <iprintf+0x2c>
20400466:	8522                	mv	a0,s0
20400468:	23d5                	jal	20400a4c <__sinit>
2040046a:	440c                	lw	a1,8(s0)
2040046c:	1054                	addi	a3,sp,36
2040046e:	8626                	mv	a2,s1
20400470:	8522                	mv	a0,s0
20400472:	c636                	sw	a3,12(sp)
20400474:	2df000ef          	jal	ra,20400f52 <_vfiprintf_r>
20400478:	40f2                	lw	ra,28(sp)
2040047a:	4462                	lw	s0,24(sp)
2040047c:	44d2                	lw	s1,20(sp)
2040047e:	6121                	addi	sp,sp,64
20400480:	8082                	ret

20400482 <putchar>:
putchar():
20400482:	1101                	addi	sp,sp,-32
20400484:	5fc00797          	auipc	a5,0x5fc00
20400488:	2c478793          	addi	a5,a5,708 # 80000748 <_impure_ptr>
2040048c:	cc22                	sw	s0,24(sp)
2040048e:	4380                	lw	s0,0(a5)
20400490:	ce06                	sw	ra,28(sp)
20400492:	85aa                	mv	a1,a0
20400494:	c419                	beqz	s0,204004a2 <putchar+0x20>
20400496:	4c1c                	lw	a5,24(s0)
20400498:	e789                	bnez	a5,204004a2 <putchar+0x20>
2040049a:	c62a                	sw	a0,12(sp)
2040049c:	8522                	mv	a0,s0
2040049e:	237d                	jal	20400a4c <__sinit>
204004a0:	45b2                	lw	a1,12(sp)
204004a2:	4410                	lw	a2,8(s0)
204004a4:	8522                	mv	a0,s0
204004a6:	4462                	lw	s0,24(sp)
204004a8:	40f2                	lw	ra,28(sp)
204004aa:	6105                	addi	sp,sp,32
204004ac:	a009                	j	204004ae <_putc_r>

204004ae <_putc_r>:
_putc_r():
204004ae:	1101                	addi	sp,sp,-32
204004b0:	cc22                	sw	s0,24(sp)
204004b2:	ce06                	sw	ra,28(sp)
204004b4:	842a                	mv	s0,a0
204004b6:	c901                	beqz	a0,204004c6 <_putc_r+0x18>
204004b8:	4d1c                	lw	a5,24(a0)
204004ba:	e791                	bnez	a5,204004c6 <_putc_r+0x18>
204004bc:	c632                	sw	a2,12(sp)
204004be:	c42e                	sw	a1,8(sp)
204004c0:	2371                	jal	20400a4c <__sinit>
204004c2:	4632                	lw	a2,12(sp)
204004c4:	45a2                	lw	a1,8(sp)
204004c6:	00005797          	auipc	a5,0x5
204004ca:	eca78793          	addi	a5,a5,-310 # 20405390 <__sf_fake_stdin>
204004ce:	02f61563          	bne	a2,a5,204004f8 <_putc_r+0x4a>
204004d2:	4050                	lw	a2,4(s0)
204004d4:	461c                	lw	a5,8(a2)
204004d6:	17fd                	addi	a5,a5,-1
204004d8:	c61c                	sw	a5,8(a2)
204004da:	0207df63          	bgez	a5,20400518 <_putc_r+0x6a>
204004de:	4e18                	lw	a4,24(a2)
204004e0:	00e7c763          	blt	a5,a4,204004ee <_putc_r+0x40>
204004e4:	0ff5f793          	andi	a5,a1,255
204004e8:	4729                	li	a4,10
204004ea:	02e79763          	bne	a5,a4,20400518 <_putc_r+0x6a>
204004ee:	8522                	mv	a0,s0
204004f0:	4462                	lw	s0,24(sp)
204004f2:	40f2                	lw	ra,28(sp)
204004f4:	6105                	addi	sp,sp,32
204004f6:	a20d                	j	20400618 <__swbuf_r>
204004f8:	00005797          	auipc	a5,0x5
204004fc:	eb878793          	addi	a5,a5,-328 # 204053b0 <__sf_fake_stdout>
20400500:	00f61463          	bne	a2,a5,20400508 <_putc_r+0x5a>
20400504:	4410                	lw	a2,8(s0)
20400506:	b7f9                	j	204004d4 <_putc_r+0x26>
20400508:	00005797          	auipc	a5,0x5
2040050c:	e6878793          	addi	a5,a5,-408 # 20405370 <__sf_fake_stderr>
20400510:	fcf612e3          	bne	a2,a5,204004d4 <_putc_r+0x26>
20400514:	4450                	lw	a2,12(s0)
20400516:	bf7d                	j	204004d4 <_putc_r+0x26>
20400518:	421c                	lw	a5,0(a2)
2040051a:	0ff5f513          	andi	a0,a1,255
2040051e:	00178713          	addi	a4,a5,1
20400522:	c218                	sw	a4,0(a2)
20400524:	00b78023          	sb	a1,0(a5)
20400528:	40f2                	lw	ra,28(sp)
2040052a:	4462                	lw	s0,24(sp)
2040052c:	6105                	addi	sp,sp,32
2040052e:	8082                	ret

20400530 <_puts_r>:
_puts_r():
20400530:	1101                	addi	sp,sp,-32
20400532:	ca26                	sw	s1,20(sp)
20400534:	c84a                	sw	s2,16(sp)
20400536:	ce06                	sw	ra,28(sp)
20400538:	cc22                	sw	s0,24(sp)
2040053a:	c64e                	sw	s3,12(sp)
2040053c:	c452                	sw	s4,8(sp)
2040053e:	84aa                	mv	s1,a0
20400540:	892e                	mv	s2,a1
20400542:	c501                	beqz	a0,2040054a <_puts_r+0x1a>
20400544:	4d1c                	lw	a5,24(a0)
20400546:	e391                	bnez	a5,2040054a <_puts_r+0x1a>
20400548:	2311                	jal	20400a4c <__sinit>
2040054a:	4c9c                	lw	a5,24(s1)
2040054c:	4480                	lw	s0,8(s1)
2040054e:	e399                	bnez	a5,20400554 <_puts_r+0x24>
20400550:	8526                	mv	a0,s1
20400552:	29ed                	jal	20400a4c <__sinit>
20400554:	00005797          	auipc	a5,0x5
20400558:	e3c78793          	addi	a5,a5,-452 # 20405390 <__sf_fake_stdin>
2040055c:	02f41c63          	bne	s0,a5,20400594 <_puts_r+0x64>
20400560:	40c0                	lw	s0,4(s1)
20400562:	00c45783          	lhu	a5,12(s0)
20400566:	8ba1                	andi	a5,a5,8
20400568:	c7b1                	beqz	a5,204005b4 <_puts_r+0x84>
2040056a:	481c                	lw	a5,16(s0)
2040056c:	c7a1                	beqz	a5,204005b4 <_puts_r+0x84>
2040056e:	59fd                	li	s3,-1
20400570:	4a29                	li	s4,10
20400572:	441c                	lw	a5,8(s0)
20400574:	00094583          	lbu	a1,0(s2)
20400578:	17fd                	addi	a5,a5,-1
2040057a:	e9b1                	bnez	a1,204005ce <_puts_r+0x9e>
2040057c:	c41c                	sw	a5,8(s0)
2040057e:	0607de63          	bgez	a5,204005fa <_puts_r+0xca>
20400582:	8622                	mv	a2,s0
20400584:	45a9                	li	a1,10
20400586:	8526                	mv	a0,s1
20400588:	2841                	jal	20400618 <__swbuf_r>
2040058a:	57fd                	li	a5,-1
2040058c:	02f50863          	beq	a0,a5,204005bc <_puts_r+0x8c>
20400590:	4529                	li	a0,10
20400592:	a035                	j	204005be <_puts_r+0x8e>
20400594:	00005797          	auipc	a5,0x5
20400598:	e1c78793          	addi	a5,a5,-484 # 204053b0 <__sf_fake_stdout>
2040059c:	00f41463          	bne	s0,a5,204005a4 <_puts_r+0x74>
204005a0:	4480                	lw	s0,8(s1)
204005a2:	b7c1                	j	20400562 <_puts_r+0x32>
204005a4:	00005797          	auipc	a5,0x5
204005a8:	dcc78793          	addi	a5,a5,-564 # 20405370 <__sf_fake_stderr>
204005ac:	faf41be3          	bne	s0,a5,20400562 <_puts_r+0x32>
204005b0:	44c0                	lw	s0,12(s1)
204005b2:	bf45                	j	20400562 <_puts_r+0x32>
204005b4:	85a2                	mv	a1,s0
204005b6:	8526                	mv	a0,s1
204005b8:	2205                	jal	204006d8 <__swsetup_r>
204005ba:	d955                	beqz	a0,2040056e <_puts_r+0x3e>
204005bc:	557d                	li	a0,-1
204005be:	40f2                	lw	ra,28(sp)
204005c0:	4462                	lw	s0,24(sp)
204005c2:	44d2                	lw	s1,20(sp)
204005c4:	4942                	lw	s2,16(sp)
204005c6:	49b2                	lw	s3,12(sp)
204005c8:	4a22                	lw	s4,8(sp)
204005ca:	6105                	addi	sp,sp,32
204005cc:	8082                	ret
204005ce:	c41c                	sw	a5,8(s0)
204005d0:	0905                	addi	s2,s2,1
204005d2:	0007d763          	bgez	a5,204005e0 <_puts_r+0xb0>
204005d6:	4c18                	lw	a4,24(s0)
204005d8:	00e7cb63          	blt	a5,a4,204005ee <_puts_r+0xbe>
204005dc:	01458963          	beq	a1,s4,204005ee <_puts_r+0xbe>
204005e0:	401c                	lw	a5,0(s0)
204005e2:	00178713          	addi	a4,a5,1
204005e6:	c018                	sw	a4,0(s0)
204005e8:	00b78023          	sb	a1,0(a5)
204005ec:	b759                	j	20400572 <_puts_r+0x42>
204005ee:	8622                	mv	a2,s0
204005f0:	8526                	mv	a0,s1
204005f2:	201d                	jal	20400618 <__swbuf_r>
204005f4:	f7351fe3          	bne	a0,s3,20400572 <_puts_r+0x42>
204005f8:	b7d1                	j	204005bc <_puts_r+0x8c>
204005fa:	401c                	lw	a5,0(s0)
204005fc:	00178713          	addi	a4,a5,1
20400600:	c018                	sw	a4,0(s0)
20400602:	4729                	li	a4,10
20400604:	00e78023          	sb	a4,0(a5)
20400608:	b761                	j	20400590 <_puts_r+0x60>

2040060a <puts>:
puts():
2040060a:	5fc00797          	auipc	a5,0x5fc00
2040060e:	13e78793          	addi	a5,a5,318 # 80000748 <_impure_ptr>
20400612:	85aa                	mv	a1,a0
20400614:	4388                	lw	a0,0(a5)
20400616:	bf29                	j	20400530 <_puts_r>

20400618 <__swbuf_r>:
__swbuf_r():
20400618:	1101                	addi	sp,sp,-32
2040061a:	cc22                	sw	s0,24(sp)
2040061c:	ca26                	sw	s1,20(sp)
2040061e:	c84a                	sw	s2,16(sp)
20400620:	ce06                	sw	ra,28(sp)
20400622:	c64e                	sw	s3,12(sp)
20400624:	84aa                	mv	s1,a0
20400626:	892e                	mv	s2,a1
20400628:	8432                	mv	s0,a2
2040062a:	c501                	beqz	a0,20400632 <__swbuf_r+0x1a>
2040062c:	4d1c                	lw	a5,24(a0)
2040062e:	e391                	bnez	a5,20400632 <__swbuf_r+0x1a>
20400630:	2931                	jal	20400a4c <__sinit>
20400632:	00005797          	auipc	a5,0x5
20400636:	d5e78793          	addi	a5,a5,-674 # 20405390 <__sf_fake_stdin>
2040063a:	06f41963          	bne	s0,a5,204006ac <__swbuf_r+0x94>
2040063e:	40c0                	lw	s0,4(s1)
20400640:	4c1c                	lw	a5,24(s0)
20400642:	c41c                	sw	a5,8(s0)
20400644:	00c45783          	lhu	a5,12(s0)
20400648:	8ba1                	andi	a5,a5,8
2040064a:	c3c9                	beqz	a5,204006cc <__swbuf_r+0xb4>
2040064c:	481c                	lw	a5,16(s0)
2040064e:	cfbd                	beqz	a5,204006cc <__swbuf_r+0xb4>
20400650:	481c                	lw	a5,16(s0)
20400652:	4008                	lw	a0,0(s0)
20400654:	0ff97993          	andi	s3,s2,255
20400658:	0ff97913          	andi	s2,s2,255
2040065c:	8d1d                	sub	a0,a0,a5
2040065e:	485c                	lw	a5,20(s0)
20400660:	00f54663          	blt	a0,a5,2040066c <__swbuf_r+0x54>
20400664:	85a2                	mv	a1,s0
20400666:	8526                	mv	a0,s1
20400668:	24e9                	jal	20400932 <_fflush_r>
2040066a:	e52d                	bnez	a0,204006d4 <__swbuf_r+0xbc>
2040066c:	441c                	lw	a5,8(s0)
2040066e:	0505                	addi	a0,a0,1
20400670:	17fd                	addi	a5,a5,-1
20400672:	c41c                	sw	a5,8(s0)
20400674:	401c                	lw	a5,0(s0)
20400676:	00178713          	addi	a4,a5,1
2040067a:	c018                	sw	a4,0(s0)
2040067c:	01378023          	sb	s3,0(a5)
20400680:	485c                	lw	a5,20(s0)
20400682:	00a78963          	beq	a5,a0,20400694 <__swbuf_r+0x7c>
20400686:	00c45783          	lhu	a5,12(s0)
2040068a:	8b85                	andi	a5,a5,1
2040068c:	cb81                	beqz	a5,2040069c <__swbuf_r+0x84>
2040068e:	47a9                	li	a5,10
20400690:	00f91663          	bne	s2,a5,2040069c <__swbuf_r+0x84>
20400694:	85a2                	mv	a1,s0
20400696:	8526                	mv	a0,s1
20400698:	2c69                	jal	20400932 <_fflush_r>
2040069a:	ed0d                	bnez	a0,204006d4 <__swbuf_r+0xbc>
2040069c:	40f2                	lw	ra,28(sp)
2040069e:	4462                	lw	s0,24(sp)
204006a0:	854a                	mv	a0,s2
204006a2:	44d2                	lw	s1,20(sp)
204006a4:	4942                	lw	s2,16(sp)
204006a6:	49b2                	lw	s3,12(sp)
204006a8:	6105                	addi	sp,sp,32
204006aa:	8082                	ret
204006ac:	00005797          	auipc	a5,0x5
204006b0:	d0478793          	addi	a5,a5,-764 # 204053b0 <__sf_fake_stdout>
204006b4:	00f41463          	bne	s0,a5,204006bc <__swbuf_r+0xa4>
204006b8:	4480                	lw	s0,8(s1)
204006ba:	b759                	j	20400640 <__swbuf_r+0x28>
204006bc:	00005797          	auipc	a5,0x5
204006c0:	cb478793          	addi	a5,a5,-844 # 20405370 <__sf_fake_stderr>
204006c4:	f6f41ee3          	bne	s0,a5,20400640 <__swbuf_r+0x28>
204006c8:	44c0                	lw	s0,12(s1)
204006ca:	bf9d                	j	20400640 <__swbuf_r+0x28>
204006cc:	85a2                	mv	a1,s0
204006ce:	8526                	mv	a0,s1
204006d0:	2021                	jal	204006d8 <__swsetup_r>
204006d2:	dd3d                	beqz	a0,20400650 <__swbuf_r+0x38>
204006d4:	597d                	li	s2,-1
204006d6:	b7d9                	j	2040069c <__swbuf_r+0x84>

204006d8 <__swsetup_r>:
__swsetup_r():
204006d8:	1141                	addi	sp,sp,-16
204006da:	5fc00797          	auipc	a5,0x5fc00
204006de:	06e78793          	addi	a5,a5,110 # 80000748 <_impure_ptr>
204006e2:	c226                	sw	s1,4(sp)
204006e4:	4384                	lw	s1,0(a5)
204006e6:	c422                	sw	s0,8(sp)
204006e8:	c04a                	sw	s2,0(sp)
204006ea:	c606                	sw	ra,12(sp)
204006ec:	892a                	mv	s2,a0
204006ee:	842e                	mv	s0,a1
204006f0:	c489                	beqz	s1,204006fa <__swsetup_r+0x22>
204006f2:	4c9c                	lw	a5,24(s1)
204006f4:	e399                	bnez	a5,204006fa <__swsetup_r+0x22>
204006f6:	8526                	mv	a0,s1
204006f8:	2e91                	jal	20400a4c <__sinit>
204006fa:	00005797          	auipc	a5,0x5
204006fe:	c9678793          	addi	a5,a5,-874 # 20405390 <__sf_fake_stdin>
20400702:	02f41c63          	bne	s0,a5,2040073a <__swsetup_r+0x62>
20400706:	40c0                	lw	s0,4(s1)
20400708:	00c41703          	lh	a4,12(s0)
2040070c:	01071793          	slli	a5,a4,0x10
20400710:	83c1                	srli	a5,a5,0x10
20400712:	0087f693          	andi	a3,a5,8
20400716:	eeb5                	bnez	a3,20400792 <__swsetup_r+0xba>
20400718:	0107f693          	andi	a3,a5,16
2040071c:	ee9d                	bnez	a3,2040075a <__swsetup_r+0x82>
2040071e:	47a5                	li	a5,9
20400720:	00f92023          	sw	a5,0(s2)
20400724:	04076713          	ori	a4,a4,64
20400728:	00e41623          	sh	a4,12(s0)
2040072c:	557d                	li	a0,-1
2040072e:	40b2                	lw	ra,12(sp)
20400730:	4422                	lw	s0,8(sp)
20400732:	4492                	lw	s1,4(sp)
20400734:	4902                	lw	s2,0(sp)
20400736:	0141                	addi	sp,sp,16
20400738:	8082                	ret
2040073a:	00005797          	auipc	a5,0x5
2040073e:	c7678793          	addi	a5,a5,-906 # 204053b0 <__sf_fake_stdout>
20400742:	00f41463          	bne	s0,a5,2040074a <__swsetup_r+0x72>
20400746:	4480                	lw	s0,8(s1)
20400748:	b7c1                	j	20400708 <__swsetup_r+0x30>
2040074a:	00005797          	auipc	a5,0x5
2040074e:	c2678793          	addi	a5,a5,-986 # 20405370 <__sf_fake_stderr>
20400752:	faf41be3          	bne	s0,a5,20400708 <__swsetup_r+0x30>
20400756:	44c0                	lw	s0,12(s1)
20400758:	bf45                	j	20400708 <__swsetup_r+0x30>
2040075a:	8b91                	andi	a5,a5,4
2040075c:	c78d                	beqz	a5,20400786 <__swsetup_r+0xae>
2040075e:	584c                	lw	a1,52(s0)
20400760:	c989                	beqz	a1,20400772 <__swsetup_r+0x9a>
20400762:	04440793          	addi	a5,s0,68
20400766:	00f58463          	beq	a1,a5,2040076e <__swsetup_r+0x96>
2040076a:	854a                	mv	a0,s2
2040076c:	2bc5                	jal	20400d5c <_free_r>
2040076e:	02042a23          	sw	zero,52(s0)
20400772:	00c45783          	lhu	a5,12(s0)
20400776:	00042223          	sw	zero,4(s0)
2040077a:	fdb7f793          	andi	a5,a5,-37
2040077e:	00f41623          	sh	a5,12(s0)
20400782:	481c                	lw	a5,16(s0)
20400784:	c01c                	sw	a5,0(s0)
20400786:	00c45783          	lhu	a5,12(s0)
2040078a:	0087e793          	ori	a5,a5,8
2040078e:	00f41623          	sh	a5,12(s0)
20400792:	481c                	lw	a5,16(s0)
20400794:	ef81                	bnez	a5,204007ac <__swsetup_r+0xd4>
20400796:	00c45783          	lhu	a5,12(s0)
2040079a:	20000713          	li	a4,512
2040079e:	2807f793          	andi	a5,a5,640
204007a2:	00e78563          	beq	a5,a4,204007ac <__swsetup_r+0xd4>
204007a6:	85a2                	mv	a1,s0
204007a8:	854a                	mv	a0,s2
204007aa:	21bd                	jal	20400c18 <__smakebuf_r>
204007ac:	00c45783          	lhu	a5,12(s0)
204007b0:	0017f713          	andi	a4,a5,1
204007b4:	c705                	beqz	a4,204007dc <__swsetup_r+0x104>
204007b6:	485c                	lw	a5,20(s0)
204007b8:	00042423          	sw	zero,8(s0)
204007bc:	40f007b3          	neg	a5,a5
204007c0:	cc1c                	sw	a5,24(s0)
204007c2:	481c                	lw	a5,16(s0)
204007c4:	4501                	li	a0,0
204007c6:	f7a5                	bnez	a5,2040072e <__swsetup_r+0x56>
204007c8:	00c41783          	lh	a5,12(s0)
204007cc:	0807f713          	andi	a4,a5,128
204007d0:	df39                	beqz	a4,2040072e <__swsetup_r+0x56>
204007d2:	0407e793          	ori	a5,a5,64
204007d6:	00f41623          	sh	a5,12(s0)
204007da:	bf89                	j	2040072c <__swsetup_r+0x54>
204007dc:	8b89                	andi	a5,a5,2
204007de:	4701                	li	a4,0
204007e0:	e391                	bnez	a5,204007e4 <__swsetup_r+0x10c>
204007e2:	4858                	lw	a4,20(s0)
204007e4:	c418                	sw	a4,8(s0)
204007e6:	bff1                	j	204007c2 <__swsetup_r+0xea>

204007e8 <__sflush_r>:
__sflush_r():
204007e8:	00c5d783          	lhu	a5,12(a1)
204007ec:	1101                	addi	sp,sp,-32
204007ee:	cc22                	sw	s0,24(sp)
204007f0:	ca26                	sw	s1,20(sp)
204007f2:	ce06                	sw	ra,28(sp)
204007f4:	c84a                	sw	s2,16(sp)
204007f6:	c64e                	sw	s3,12(sp)
204007f8:	0087f713          	andi	a4,a5,8
204007fc:	84aa                	mv	s1,a0
204007fe:	842e                	mv	s0,a1
20400800:	e765                	bnez	a4,204008e8 <__sflush_r+0x100>
20400802:	41d8                	lw	a4,4(a1)
20400804:	00e04763          	bgtz	a4,20400812 <__sflush_r+0x2a>
20400808:	41b8                	lw	a4,64(a1)
2040080a:	00e04463          	bgtz	a4,20400812 <__sflush_r+0x2a>
2040080e:	4501                	li	a0,0
20400810:	a0c1                	j	204008d0 <__sflush_r+0xe8>
20400812:	5458                	lw	a4,44(s0)
20400814:	df6d                	beqz	a4,2040080e <__sflush_r+0x26>
20400816:	0004a903          	lw	s2,0(s1)
2040081a:	01379693          	slli	a3,a5,0x13
2040081e:	0004a023          	sw	zero,0(s1)
20400822:	0606de63          	bgez	a3,2040089e <__sflush_r+0xb6>
20400826:	4868                	lw	a0,84(s0)
20400828:	00c45783          	lhu	a5,12(s0)
2040082c:	8b91                	andi	a5,a5,4
2040082e:	c799                	beqz	a5,2040083c <__sflush_r+0x54>
20400830:	405c                	lw	a5,4(s0)
20400832:	8d1d                	sub	a0,a0,a5
20400834:	585c                	lw	a5,52(s0)
20400836:	c399                	beqz	a5,2040083c <__sflush_r+0x54>
20400838:	403c                	lw	a5,64(s0)
2040083a:	8d1d                	sub	a0,a0,a5
2040083c:	545c                	lw	a5,44(s0)
2040083e:	500c                	lw	a1,32(s0)
20400840:	862a                	mv	a2,a0
20400842:	4681                	li	a3,0
20400844:	8526                	mv	a0,s1
20400846:	9782                	jalr	a5
20400848:	57fd                	li	a5,-1
2040084a:	00c45703          	lhu	a4,12(s0)
2040084e:	00f51d63          	bne	a0,a5,20400868 <__sflush_r+0x80>
20400852:	4094                	lw	a3,0(s1)
20400854:	47f5                	li	a5,29
20400856:	08d7e463          	bltu	a5,a3,204008de <__sflush_r+0xf6>
2040085a:	204007b7          	lui	a5,0x20400
2040085e:	0785                	addi	a5,a5,1
20400860:	00d7d7b3          	srl	a5,a5,a3
20400864:	8b85                	andi	a5,a5,1
20400866:	cfa5                	beqz	a5,204008de <__sflush_r+0xf6>
20400868:	481c                	lw	a5,16(s0)
2040086a:	00042223          	sw	zero,4(s0)
2040086e:	c01c                	sw	a5,0(s0)
20400870:	01371793          	slli	a5,a4,0x13
20400874:	0007d863          	bgez	a5,20400884 <__sflush_r+0x9c>
20400878:	57fd                	li	a5,-1
2040087a:	00f51463          	bne	a0,a5,20400882 <__sflush_r+0x9a>
2040087e:	409c                	lw	a5,0(s1)
20400880:	e391                	bnez	a5,20400884 <__sflush_r+0x9c>
20400882:	c868                	sw	a0,84(s0)
20400884:	584c                	lw	a1,52(s0)
20400886:	0124a023          	sw	s2,0(s1)
2040088a:	d1d1                	beqz	a1,2040080e <__sflush_r+0x26>
2040088c:	04440793          	addi	a5,s0,68
20400890:	00f58463          	beq	a1,a5,20400898 <__sflush_r+0xb0>
20400894:	8526                	mv	a0,s1
20400896:	21d9                	jal	20400d5c <_free_r>
20400898:	02042a23          	sw	zero,52(s0)
2040089c:	bf8d                	j	2040080e <__sflush_r+0x26>
2040089e:	500c                	lw	a1,32(s0)
204008a0:	4685                	li	a3,1
204008a2:	4601                	li	a2,0
204008a4:	8526                	mv	a0,s1
204008a6:	9702                	jalr	a4
204008a8:	57fd                	li	a5,-1
204008aa:	f6f51fe3          	bne	a0,a5,20400828 <__sflush_r+0x40>
204008ae:	409c                	lw	a5,0(s1)
204008b0:	dfa5                	beqz	a5,20400828 <__sflush_r+0x40>
204008b2:	4775                	li	a4,29
204008b4:	00e78563          	beq	a5,a4,204008be <__sflush_r+0xd6>
204008b8:	4759                	li	a4,22
204008ba:	00e79563          	bne	a5,a4,204008c4 <__sflush_r+0xdc>
204008be:	0124a023          	sw	s2,0(s1)
204008c2:	b7b1                	j	2040080e <__sflush_r+0x26>
204008c4:	00c45783          	lhu	a5,12(s0)
204008c8:	0407e793          	ori	a5,a5,64
204008cc:	00f41623          	sh	a5,12(s0)
204008d0:	40f2                	lw	ra,28(sp)
204008d2:	4462                	lw	s0,24(sp)
204008d4:	44d2                	lw	s1,20(sp)
204008d6:	4942                	lw	s2,16(sp)
204008d8:	49b2                	lw	s3,12(sp)
204008da:	6105                	addi	sp,sp,32
204008dc:	8082                	ret
204008de:	04076713          	ori	a4,a4,64
204008e2:	00e41623          	sh	a4,12(s0)
204008e6:	b7ed                	j	204008d0 <__sflush_r+0xe8>
204008e8:	0105a983          	lw	s3,16(a1)
204008ec:	f20981e3          	beqz	s3,2040080e <__sflush_r+0x26>
204008f0:	0005a903          	lw	s2,0(a1)
204008f4:	8b8d                	andi	a5,a5,3
204008f6:	0135a023          	sw	s3,0(a1)
204008fa:	41390933          	sub	s2,s2,s3
204008fe:	4701                	li	a4,0
20400900:	e391                	bnez	a5,20400904 <__sflush_r+0x11c>
20400902:	49d8                	lw	a4,20(a1)
20400904:	c418                	sw	a4,8(s0)
20400906:	f12054e3          	blez	s2,2040080e <__sflush_r+0x26>
2040090a:	541c                	lw	a5,40(s0)
2040090c:	500c                	lw	a1,32(s0)
2040090e:	86ca                	mv	a3,s2
20400910:	864e                	mv	a2,s3
20400912:	8526                	mv	a0,s1
20400914:	9782                	jalr	a5
20400916:	00a04a63          	bgtz	a0,2040092a <__sflush_r+0x142>
2040091a:	00c45783          	lhu	a5,12(s0)
2040091e:	557d                	li	a0,-1
20400920:	0407e793          	ori	a5,a5,64
20400924:	00f41623          	sh	a5,12(s0)
20400928:	b765                	j	204008d0 <__sflush_r+0xe8>
2040092a:	99aa                	add	s3,s3,a0
2040092c:	40a90933          	sub	s2,s2,a0
20400930:	bfd9                	j	20400906 <__sflush_r+0x11e>

20400932 <_fflush_r>:
_fflush_r():
20400932:	499c                	lw	a5,16(a1)
20400934:	cfb9                	beqz	a5,20400992 <_fflush_r+0x60>
20400936:	1101                	addi	sp,sp,-32
20400938:	cc22                	sw	s0,24(sp)
2040093a:	ce06                	sw	ra,28(sp)
2040093c:	842a                	mv	s0,a0
2040093e:	c511                	beqz	a0,2040094a <_fflush_r+0x18>
20400940:	4d1c                	lw	a5,24(a0)
20400942:	e781                	bnez	a5,2040094a <_fflush_r+0x18>
20400944:	c62e                	sw	a1,12(sp)
20400946:	2219                	jal	20400a4c <__sinit>
20400948:	45b2                	lw	a1,12(sp)
2040094a:	00005797          	auipc	a5,0x5
2040094e:	a4678793          	addi	a5,a5,-1466 # 20405390 <__sf_fake_stdin>
20400952:	00f59b63          	bne	a1,a5,20400968 <_fflush_r+0x36>
20400956:	404c                	lw	a1,4(s0)
20400958:	00c59783          	lh	a5,12(a1)
2040095c:	c795                	beqz	a5,20400988 <_fflush_r+0x56>
2040095e:	8522                	mv	a0,s0
20400960:	4462                	lw	s0,24(sp)
20400962:	40f2                	lw	ra,28(sp)
20400964:	6105                	addi	sp,sp,32
20400966:	b549                	j	204007e8 <__sflush_r>
20400968:	00005797          	auipc	a5,0x5
2040096c:	a4878793          	addi	a5,a5,-1464 # 204053b0 <__sf_fake_stdout>
20400970:	00f59463          	bne	a1,a5,20400978 <_fflush_r+0x46>
20400974:	440c                	lw	a1,8(s0)
20400976:	b7cd                	j	20400958 <_fflush_r+0x26>
20400978:	00005797          	auipc	a5,0x5
2040097c:	9f878793          	addi	a5,a5,-1544 # 20405370 <__sf_fake_stderr>
20400980:	fcf59ce3          	bne	a1,a5,20400958 <_fflush_r+0x26>
20400984:	444c                	lw	a1,12(s0)
20400986:	bfc9                	j	20400958 <_fflush_r+0x26>
20400988:	40f2                	lw	ra,28(sp)
2040098a:	4462                	lw	s0,24(sp)
2040098c:	4501                	li	a0,0
2040098e:	6105                	addi	sp,sp,32
20400990:	8082                	ret
20400992:	4501                	li	a0,0
20400994:	8082                	ret

20400996 <std>:
std():
20400996:	1141                	addi	sp,sp,-16
20400998:	c422                	sw	s0,8(sp)
2040099a:	c606                	sw	ra,12(sp)
2040099c:	842a                	mv	s0,a0
2040099e:	00b51623          	sh	a1,12(a0)
204009a2:	00c51723          	sh	a2,14(a0)
204009a6:	00052023          	sw	zero,0(a0)
204009aa:	00052223          	sw	zero,4(a0)
204009ae:	00052423          	sw	zero,8(a0)
204009b2:	06052223          	sw	zero,100(a0)
204009b6:	00052823          	sw	zero,16(a0)
204009ba:	00052a23          	sw	zero,20(a0)
204009be:	00052c23          	sw	zero,24(a0)
204009c2:	4621                	li	a2,8
204009c4:	4581                	li	a1,0
204009c6:	05c50513          	addi	a0,a0,92
204009ca:	24ed                	jal	20400cb4 <memset>
204009cc:	00001797          	auipc	a5,0x1
204009d0:	84678793          	addi	a5,a5,-1978 # 20401212 <__sread>
204009d4:	d05c                	sw	a5,36(s0)
204009d6:	00001797          	auipc	a5,0x1
204009da:	86c78793          	addi	a5,a5,-1940 # 20401242 <__swrite>
204009de:	d41c                	sw	a5,40(s0)
204009e0:	00001797          	auipc	a5,0x1
204009e4:	8b078793          	addi	a5,a5,-1872 # 20401290 <__sseek>
204009e8:	d45c                	sw	a5,44(s0)
204009ea:	00001797          	auipc	a5,0x1
204009ee:	8dc78793          	addi	a5,a5,-1828 # 204012c6 <__sclose>
204009f2:	d000                	sw	s0,32(s0)
204009f4:	d81c                	sw	a5,48(s0)
204009f6:	40b2                	lw	ra,12(sp)
204009f8:	4422                	lw	s0,8(sp)
204009fa:	0141                	addi	sp,sp,16
204009fc:	8082                	ret

204009fe <_cleanup_r>:
_cleanup_r():
204009fe:	00000597          	auipc	a1,0x0
20400a02:	f3458593          	addi	a1,a1,-204 # 20400932 <_fflush_r>
20400a06:	a2b9                	j	20400b54 <_fwalk_reent>

20400a08 <__sfmoreglue>:
__sfmoreglue():
20400a08:	1141                	addi	sp,sp,-16
20400a0a:	c226                	sw	s1,4(sp)
20400a0c:	06800613          	li	a2,104
20400a10:	fff58493          	addi	s1,a1,-1
20400a14:	02c484b3          	mul	s1,s1,a2
20400a18:	c04a                	sw	s2,0(sp)
20400a1a:	892e                	mv	s2,a1
20400a1c:	c422                	sw	s0,8(sp)
20400a1e:	c606                	sw	ra,12(sp)
20400a20:	07448593          	addi	a1,s1,116
20400a24:	26d5                	jal	20400e08 <_malloc_r>
20400a26:	842a                	mv	s0,a0
20400a28:	c919                	beqz	a0,20400a3e <__sfmoreglue+0x36>
20400a2a:	00052023          	sw	zero,0(a0)
20400a2e:	01252223          	sw	s2,4(a0)
20400a32:	0531                	addi	a0,a0,12
20400a34:	c408                	sw	a0,8(s0)
20400a36:	06848613          	addi	a2,s1,104
20400a3a:	4581                	li	a1,0
20400a3c:	2ca5                	jal	20400cb4 <memset>
20400a3e:	8522                	mv	a0,s0
20400a40:	40b2                	lw	ra,12(sp)
20400a42:	4422                	lw	s0,8(sp)
20400a44:	4492                	lw	s1,4(sp)
20400a46:	4902                	lw	s2,0(sp)
20400a48:	0141                	addi	sp,sp,16
20400a4a:	8082                	ret

20400a4c <__sinit>:
__sinit():
20400a4c:	4d1c                	lw	a5,24(a0)
20400a4e:	e3bd                	bnez	a5,20400ab4 <__sinit+0x68>
20400a50:	1141                	addi	sp,sp,-16
20400a52:	c606                	sw	ra,12(sp)
20400a54:	c422                	sw	s0,8(sp)
20400a56:	00000797          	auipc	a5,0x0
20400a5a:	fa878793          	addi	a5,a5,-88 # 204009fe <_cleanup_r>
20400a5e:	d51c                	sw	a5,40(a0)
20400a60:	5fc00797          	auipc	a5,0x5fc00
20400a64:	cec78793          	addi	a5,a5,-788 # 8000074c <_global_impure_ptr>
20400a68:	439c                	lw	a5,0(a5)
20400a6a:	04052423          	sw	zero,72(a0)
20400a6e:	04052623          	sw	zero,76(a0)
20400a72:	04052823          	sw	zero,80(a0)
20400a76:	00f51463          	bne	a0,a5,20400a7e <__sinit+0x32>
20400a7a:	4785                	li	a5,1
20400a7c:	cd1c                	sw	a5,24(a0)
20400a7e:	842a                	mv	s0,a0
20400a80:	281d                	jal	20400ab6 <__sfp>
20400a82:	c048                	sw	a0,4(s0)
20400a84:	8522                	mv	a0,s0
20400a86:	2805                	jal	20400ab6 <__sfp>
20400a88:	c408                	sw	a0,8(s0)
20400a8a:	8522                	mv	a0,s0
20400a8c:	202d                	jal	20400ab6 <__sfp>
20400a8e:	c448                	sw	a0,12(s0)
20400a90:	4048                	lw	a0,4(s0)
20400a92:	4601                	li	a2,0
20400a94:	4591                	li	a1,4
20400a96:	3701                	jal	20400996 <std>
20400a98:	4408                	lw	a0,8(s0)
20400a9a:	4605                	li	a2,1
20400a9c:	45a5                	li	a1,9
20400a9e:	3de5                	jal	20400996 <std>
20400aa0:	4448                	lw	a0,12(s0)
20400aa2:	4609                	li	a2,2
20400aa4:	45c9                	li	a1,18
20400aa6:	3dc5                	jal	20400996 <std>
20400aa8:	4785                	li	a5,1
20400aaa:	cc1c                	sw	a5,24(s0)
20400aac:	40b2                	lw	ra,12(sp)
20400aae:	4422                	lw	s0,8(sp)
20400ab0:	0141                	addi	sp,sp,16
20400ab2:	8082                	ret
20400ab4:	8082                	ret

20400ab6 <__sfp>:
__sfp():
20400ab6:	1141                	addi	sp,sp,-16
20400ab8:	5fc00797          	auipc	a5,0x5fc00
20400abc:	c9478793          	addi	a5,a5,-876 # 8000074c <_global_impure_ptr>
20400ac0:	c226                	sw	s1,4(sp)
20400ac2:	4384                	lw	s1,0(a5)
20400ac4:	c04a                	sw	s2,0(sp)
20400ac6:	c606                	sw	ra,12(sp)
20400ac8:	4c9c                	lw	a5,24(s1)
20400aca:	c422                	sw	s0,8(sp)
20400acc:	892a                	mv	s2,a0
20400ace:	e399                	bnez	a5,20400ad4 <__sfp+0x1e>
20400ad0:	8526                	mv	a0,s1
20400ad2:	3fad                	jal	20400a4c <__sinit>
20400ad4:	04848493          	addi	s1,s1,72
20400ad8:	4480                	lw	s0,8(s1)
20400ada:	40dc                	lw	a5,4(s1)
20400adc:	17fd                	addi	a5,a5,-1
20400ade:	0007d663          	bgez	a5,20400aea <__sfp+0x34>
20400ae2:	409c                	lw	a5,0(s1)
20400ae4:	cfb1                	beqz	a5,20400b40 <__sfp+0x8a>
20400ae6:	4084                	lw	s1,0(s1)
20400ae8:	bfc5                	j	20400ad8 <__sfp+0x22>
20400aea:	00c41703          	lh	a4,12(s0)
20400aee:	e731                	bnez	a4,20400b3a <__sfp+0x84>
20400af0:	77c1                	lui	a5,0xffff0
20400af2:	0785                	addi	a5,a5,1
20400af4:	06042223          	sw	zero,100(s0)
20400af8:	00042023          	sw	zero,0(s0)
20400afc:	00042223          	sw	zero,4(s0)
20400b00:	00042423          	sw	zero,8(s0)
20400b04:	c45c                	sw	a5,12(s0)
20400b06:	00042823          	sw	zero,16(s0)
20400b0a:	00042a23          	sw	zero,20(s0)
20400b0e:	00042c23          	sw	zero,24(s0)
20400b12:	4621                	li	a2,8
20400b14:	4581                	li	a1,0
20400b16:	05c40513          	addi	a0,s0,92
20400b1a:	2a69                	jal	20400cb4 <memset>
20400b1c:	02042a23          	sw	zero,52(s0)
20400b20:	02042c23          	sw	zero,56(s0)
20400b24:	04042423          	sw	zero,72(s0)
20400b28:	04042623          	sw	zero,76(s0)
20400b2c:	8522                	mv	a0,s0
20400b2e:	40b2                	lw	ra,12(sp)
20400b30:	4422                	lw	s0,8(sp)
20400b32:	4492                	lw	s1,4(sp)
20400b34:	4902                	lw	s2,0(sp)
20400b36:	0141                	addi	sp,sp,16
20400b38:	8082                	ret
20400b3a:	06840413          	addi	s0,s0,104
20400b3e:	bf79                	j	20400adc <__sfp+0x26>
20400b40:	4591                	li	a1,4
20400b42:	854a                	mv	a0,s2
20400b44:	35d1                	jal	20400a08 <__sfmoreglue>
20400b46:	c088                	sw	a0,0(s1)
20400b48:	842a                	mv	s0,a0
20400b4a:	fd51                	bnez	a0,20400ae6 <__sfp+0x30>
20400b4c:	47b1                	li	a5,12
20400b4e:	00f92023          	sw	a5,0(s2)
20400b52:	bfe9                	j	20400b2c <__sfp+0x76>

20400b54 <_fwalk_reent>:
_fwalk_reent():
20400b54:	7179                	addi	sp,sp,-48
20400b56:	d422                	sw	s0,40(sp)
20400b58:	d04a                	sw	s2,32(sp)
20400b5a:	cc52                	sw	s4,24(sp)
20400b5c:	ca56                	sw	s5,20(sp)
20400b5e:	c85a                	sw	s6,16(sp)
20400b60:	c65e                	sw	s7,12(sp)
20400b62:	d606                	sw	ra,44(sp)
20400b64:	d226                	sw	s1,36(sp)
20400b66:	ce4e                	sw	s3,28(sp)
20400b68:	8a2a                	mv	s4,a0
20400b6a:	8aae                	mv	s5,a1
20400b6c:	04850413          	addi	s0,a0,72
20400b70:	4901                	li	s2,0
20400b72:	4b05                	li	s6,1
20400b74:	5bfd                	li	s7,-1
20400b76:	ec09                	bnez	s0,20400b90 <_fwalk_reent+0x3c>
20400b78:	50b2                	lw	ra,44(sp)
20400b7a:	5422                	lw	s0,40(sp)
20400b7c:	854a                	mv	a0,s2
20400b7e:	5492                	lw	s1,36(sp)
20400b80:	5902                	lw	s2,32(sp)
20400b82:	49f2                	lw	s3,28(sp)
20400b84:	4a62                	lw	s4,24(sp)
20400b86:	4ad2                	lw	s5,20(sp)
20400b88:	4b42                	lw	s6,16(sp)
20400b8a:	4bb2                	lw	s7,12(sp)
20400b8c:	6145                	addi	sp,sp,48
20400b8e:	8082                	ret
20400b90:	4404                	lw	s1,8(s0)
20400b92:	00442983          	lw	s3,4(s0)
20400b96:	19fd                	addi	s3,s3,-1
20400b98:	0009d463          	bgez	s3,20400ba0 <_fwalk_reent+0x4c>
20400b9c:	4000                	lw	s0,0(s0)
20400b9e:	bfe1                	j	20400b76 <_fwalk_reent+0x22>
20400ba0:	00c4d783          	lhu	a5,12(s1)
20400ba4:	00fb7b63          	bgeu	s6,a5,20400bba <_fwalk_reent+0x66>
20400ba8:	00e49783          	lh	a5,14(s1)
20400bac:	01778763          	beq	a5,s7,20400bba <_fwalk_reent+0x66>
20400bb0:	85a6                	mv	a1,s1
20400bb2:	8552                	mv	a0,s4
20400bb4:	9a82                	jalr	s5
20400bb6:	00a96933          	or	s2,s2,a0
20400bba:	06848493          	addi	s1,s1,104
20400bbe:	bfe1                	j	20400b96 <_fwalk_reent+0x42>

20400bc0 <__swhatbuf_r>:
__swhatbuf_r():
20400bc0:	7119                	addi	sp,sp,-128
20400bc2:	daa6                	sw	s1,116(sp)
20400bc4:	84ae                	mv	s1,a1
20400bc6:	00e59583          	lh	a1,14(a1)
20400bca:	dca2                	sw	s0,120(sp)
20400bcc:	de86                	sw	ra,124(sp)
20400bce:	8432                	mv	s0,a2
20400bd0:	0005dc63          	bgez	a1,20400be8 <__swhatbuf_r+0x28>
20400bd4:	00c4d783          	lhu	a5,12(s1)
20400bd8:	0006a023          	sw	zero,0(a3)
20400bdc:	0807f793          	andi	a5,a5,128
20400be0:	e39d                	bnez	a5,20400c06 <__swhatbuf_r+0x46>
20400be2:	40000793          	li	a5,1024
20400be6:	a015                	j	20400c0a <__swhatbuf_r+0x4a>
20400be8:	0830                	addi	a2,sp,24
20400bea:	c636                	sw	a3,12(sp)
20400bec:	2f15                	jal	20401320 <_fstat_r>
20400bee:	46b2                	lw	a3,12(sp)
20400bf0:	fe0542e3          	bltz	a0,20400bd4 <__swhatbuf_r+0x14>
20400bf4:	4772                	lw	a4,28(sp)
20400bf6:	67bd                	lui	a5,0xf
20400bf8:	8ff9                	and	a5,a5,a4
20400bfa:	7779                	lui	a4,0xffffe
20400bfc:	97ba                	add	a5,a5,a4
20400bfe:	0017b793          	seqz	a5,a5
20400c02:	c29c                	sw	a5,0(a3)
20400c04:	bff9                	j	20400be2 <__swhatbuf_r+0x22>
20400c06:	04000793          	li	a5,64
20400c0a:	c01c                	sw	a5,0(s0)
20400c0c:	50f6                	lw	ra,124(sp)
20400c0e:	5466                	lw	s0,120(sp)
20400c10:	54d6                	lw	s1,116(sp)
20400c12:	4501                	li	a0,0
20400c14:	6109                	addi	sp,sp,128
20400c16:	8082                	ret

20400c18 <__smakebuf_r>:
__smakebuf_r():
20400c18:	00c5d783          	lhu	a5,12(a1)
20400c1c:	1101                	addi	sp,sp,-32
20400c1e:	cc22                	sw	s0,24(sp)
20400c20:	ce06                	sw	ra,28(sp)
20400c22:	ca26                	sw	s1,20(sp)
20400c24:	c84a                	sw	s2,16(sp)
20400c26:	8b89                	andi	a5,a5,2
20400c28:	842e                	mv	s0,a1
20400c2a:	cf89                	beqz	a5,20400c44 <__smakebuf_r+0x2c>
20400c2c:	04740793          	addi	a5,s0,71
20400c30:	c01c                	sw	a5,0(s0)
20400c32:	c81c                	sw	a5,16(s0)
20400c34:	4785                	li	a5,1
20400c36:	c85c                	sw	a5,20(s0)
20400c38:	40f2                	lw	ra,28(sp)
20400c3a:	4462                	lw	s0,24(sp)
20400c3c:	44d2                	lw	s1,20(sp)
20400c3e:	4942                	lw	s2,16(sp)
20400c40:	6105                	addi	sp,sp,32
20400c42:	8082                	ret
20400c44:	0074                	addi	a3,sp,12
20400c46:	0030                	addi	a2,sp,8
20400c48:	84aa                	mv	s1,a0
20400c4a:	3f9d                	jal	20400bc0 <__swhatbuf_r>
20400c4c:	45a2                	lw	a1,8(sp)
20400c4e:	892a                	mv	s2,a0
20400c50:	8526                	mv	a0,s1
20400c52:	2a5d                	jal	20400e08 <_malloc_r>
20400c54:	ed01                	bnez	a0,20400c6c <__smakebuf_r+0x54>
20400c56:	00c41783          	lh	a5,12(s0)
20400c5a:	2007f713          	andi	a4,a5,512
20400c5e:	ff69                	bnez	a4,20400c38 <__smakebuf_r+0x20>
20400c60:	9bf1                	andi	a5,a5,-4
20400c62:	0027e793          	ori	a5,a5,2
20400c66:	00f41623          	sh	a5,12(s0)
20400c6a:	b7c9                	j	20400c2c <__smakebuf_r+0x14>
20400c6c:	00000797          	auipc	a5,0x0
20400c70:	d9278793          	addi	a5,a5,-622 # 204009fe <_cleanup_r>
20400c74:	d49c                	sw	a5,40(s1)
20400c76:	00c45783          	lhu	a5,12(s0)
20400c7a:	c008                	sw	a0,0(s0)
20400c7c:	c808                	sw	a0,16(s0)
20400c7e:	0807e793          	ori	a5,a5,128
20400c82:	00f41623          	sh	a5,12(s0)
20400c86:	47a2                	lw	a5,8(sp)
20400c88:	c85c                	sw	a5,20(s0)
20400c8a:	47b2                	lw	a5,12(sp)
20400c8c:	cf89                	beqz	a5,20400ca6 <__smakebuf_r+0x8e>
20400c8e:	00e41583          	lh	a1,14(s0)
20400c92:	8526                	mv	a0,s1
20400c94:	2d5d                	jal	2040134a <_isatty_r>
20400c96:	c901                	beqz	a0,20400ca6 <__smakebuf_r+0x8e>
20400c98:	00c45783          	lhu	a5,12(s0)
20400c9c:	9bf1                	andi	a5,a5,-4
20400c9e:	0017e793          	ori	a5,a5,1
20400ca2:	00f41623          	sh	a5,12(s0)
20400ca6:	00c45783          	lhu	a5,12(s0)
20400caa:	00f96933          	or	s2,s2,a5
20400cae:	01241623          	sh	s2,12(s0)
20400cb2:	b759                	j	20400c38 <__smakebuf_r+0x20>

20400cb4 <memset>:
memset():
20400cb4:	433d                	li	t1,15
20400cb6:	872a                	mv	a4,a0
20400cb8:	02c37363          	bgeu	t1,a2,20400cde <memset+0x2a>
20400cbc:	00f77793          	andi	a5,a4,15
20400cc0:	efbd                	bnez	a5,20400d3e <memset+0x8a>
20400cc2:	e5ad                	bnez	a1,20400d2c <memset+0x78>
20400cc4:	ff067693          	andi	a3,a2,-16
20400cc8:	8a3d                	andi	a2,a2,15
20400cca:	96ba                	add	a3,a3,a4
20400ccc:	c30c                	sw	a1,0(a4)
20400cce:	c34c                	sw	a1,4(a4)
20400cd0:	c70c                	sw	a1,8(a4)
20400cd2:	c74c                	sw	a1,12(a4)
20400cd4:	0741                	addi	a4,a4,16
20400cd6:	fed76be3          	bltu	a4,a3,20400ccc <memset+0x18>
20400cda:	e211                	bnez	a2,20400cde <memset+0x2a>
20400cdc:	8082                	ret
20400cde:	40c306b3          	sub	a3,t1,a2
20400ce2:	068a                	slli	a3,a3,0x2
20400ce4:	00000297          	auipc	t0,0x0
20400ce8:	9696                	add	a3,a3,t0
20400cea:	00a68067          	jr	10(a3)
20400cee:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffc432>
20400cf2:	00b706a3          	sb	a1,13(a4)
20400cf6:	00b70623          	sb	a1,12(a4)
20400cfa:	00b705a3          	sb	a1,11(a4)
20400cfe:	00b70523          	sb	a1,10(a4)
20400d02:	00b704a3          	sb	a1,9(a4)
20400d06:	00b70423          	sb	a1,8(a4)
20400d0a:	00b703a3          	sb	a1,7(a4)
20400d0e:	00b70323          	sb	a1,6(a4)
20400d12:	00b702a3          	sb	a1,5(a4)
20400d16:	00b70223          	sb	a1,4(a4)
20400d1a:	00b701a3          	sb	a1,3(a4)
20400d1e:	00b70123          	sb	a1,2(a4)
20400d22:	00b700a3          	sb	a1,1(a4)
20400d26:	00b70023          	sb	a1,0(a4)
20400d2a:	8082                	ret
20400d2c:	0ff5f593          	andi	a1,a1,255
20400d30:	00859693          	slli	a3,a1,0x8
20400d34:	8dd5                	or	a1,a1,a3
20400d36:	01059693          	slli	a3,a1,0x10
20400d3a:	8dd5                	or	a1,a1,a3
20400d3c:	b761                	j	20400cc4 <memset+0x10>
20400d3e:	00279693          	slli	a3,a5,0x2
20400d42:	00000297          	auipc	t0,0x0
20400d46:	9696                	add	a3,a3,t0
20400d48:	8286                	mv	t0,ra
20400d4a:	fa8680e7          	jalr	-88(a3)
20400d4e:	8096                	mv	ra,t0
20400d50:	17c1                	addi	a5,a5,-16
20400d52:	8f1d                	sub	a4,a4,a5
20400d54:	963e                	add	a2,a2,a5
20400d56:	f8c374e3          	bgeu	t1,a2,20400cde <memset+0x2a>
20400d5a:	b7a5                	j	20400cc2 <memset+0xe>

20400d5c <_free_r>:
_free_r():
20400d5c:	c5cd                	beqz	a1,20400e06 <_free_r+0xaa>
20400d5e:	ffc5a783          	lw	a5,-4(a1)
20400d62:	1141                	addi	sp,sp,-16
20400d64:	c422                	sw	s0,8(sp)
20400d66:	c606                	sw	ra,12(sp)
20400d68:	c226                	sw	s1,4(sp)
20400d6a:	ffc58413          	addi	s0,a1,-4
20400d6e:	0007d363          	bgez	a5,20400d74 <_free_r+0x18>
20400d72:	943e                	add	s0,s0,a5
20400d74:	84aa                	mv	s1,a0
20400d76:	2589                	jal	204013b8 <__malloc_lock>
20400d78:	5fc00797          	auipc	a5,0x5fc00
20400d7c:	9f878793          	addi	a5,a5,-1544 # 80000770 <metal_segment_data_target_end>
20400d80:	439c                	lw	a5,0(a5)
20400d82:	ef89                	bnez	a5,20400d9c <_free_r+0x40>
20400d84:	00042223          	sw	zero,4(s0)
20400d88:	5fc00797          	auipc	a5,0x5fc00
20400d8c:	9e87a423          	sw	s0,-1560(a5) # 80000770 <metal_segment_data_target_end>
20400d90:	4422                	lw	s0,8(sp)
20400d92:	40b2                	lw	ra,12(sp)
20400d94:	8526                	mv	a0,s1
20400d96:	4492                	lw	s1,4(sp)
20400d98:	0141                	addi	sp,sp,16
20400d9a:	a505                	j	204013ba <__malloc_unlock>
20400d9c:	00f47e63          	bgeu	s0,a5,20400db8 <_free_r+0x5c>
20400da0:	4014                	lw	a3,0(s0)
20400da2:	00d40733          	add	a4,s0,a3
20400da6:	00e79663          	bne	a5,a4,20400db2 <_free_r+0x56>
20400daa:	4398                	lw	a4,0(a5)
20400dac:	43dc                	lw	a5,4(a5)
20400dae:	9736                	add	a4,a4,a3
20400db0:	c018                	sw	a4,0(s0)
20400db2:	c05c                	sw	a5,4(s0)
20400db4:	bfd1                	j	20400d88 <_free_r+0x2c>
20400db6:	87ba                	mv	a5,a4
20400db8:	43d8                	lw	a4,4(a5)
20400dba:	c319                	beqz	a4,20400dc0 <_free_r+0x64>
20400dbc:	fee47de3          	bgeu	s0,a4,20400db6 <_free_r+0x5a>
20400dc0:	4394                	lw	a3,0(a5)
20400dc2:	00d78633          	add	a2,a5,a3
20400dc6:	00861f63          	bne	a2,s0,20400de4 <_free_r+0x88>
20400dca:	4010                	lw	a2,0(s0)
20400dcc:	96b2                	add	a3,a3,a2
20400dce:	c394                	sw	a3,0(a5)
20400dd0:	00d78633          	add	a2,a5,a3
20400dd4:	fac71ee3          	bne	a4,a2,20400d90 <_free_r+0x34>
20400dd8:	4310                	lw	a2,0(a4)
20400dda:	4358                	lw	a4,4(a4)
20400ddc:	96b2                	add	a3,a3,a2
20400dde:	c394                	sw	a3,0(a5)
20400de0:	c3d8                	sw	a4,4(a5)
20400de2:	b77d                	j	20400d90 <_free_r+0x34>
20400de4:	00c47563          	bgeu	s0,a2,20400dee <_free_r+0x92>
20400de8:	47b1                	li	a5,12
20400dea:	c09c                	sw	a5,0(s1)
20400dec:	b755                	j	20400d90 <_free_r+0x34>
20400dee:	4010                	lw	a2,0(s0)
20400df0:	00c406b3          	add	a3,s0,a2
20400df4:	00d71663          	bne	a4,a3,20400e00 <_free_r+0xa4>
20400df8:	4314                	lw	a3,0(a4)
20400dfa:	4358                	lw	a4,4(a4)
20400dfc:	96b2                	add	a3,a3,a2
20400dfe:	c014                	sw	a3,0(s0)
20400e00:	c058                	sw	a4,4(s0)
20400e02:	c3c0                	sw	s0,4(a5)
20400e04:	b771                	j	20400d90 <_free_r+0x34>
20400e06:	8082                	ret

20400e08 <_malloc_r>:
_malloc_r():
20400e08:	1101                	addi	sp,sp,-32
20400e0a:	ca26                	sw	s1,20(sp)
20400e0c:	00358493          	addi	s1,a1,3
20400e10:	98f1                	andi	s1,s1,-4
20400e12:	ce06                	sw	ra,28(sp)
20400e14:	cc22                	sw	s0,24(sp)
20400e16:	c84a                	sw	s2,16(sp)
20400e18:	c64e                	sw	s3,12(sp)
20400e1a:	04a1                	addi	s1,s1,8
20400e1c:	47b1                	li	a5,12
20400e1e:	04f4f763          	bgeu	s1,a5,20400e6c <_malloc_r+0x64>
20400e22:	44b1                	li	s1,12
20400e24:	04b4e663          	bltu	s1,a1,20400e70 <_malloc_r+0x68>
20400e28:	892a                	mv	s2,a0
20400e2a:	2379                	jal	204013b8 <__malloc_lock>
20400e2c:	5fc00797          	auipc	a5,0x5fc00
20400e30:	94478793          	addi	a5,a5,-1724 # 80000770 <metal_segment_data_target_end>
20400e34:	4398                	lw	a4,0(a5)
20400e36:	843a                	mv	s0,a4
20400e38:	e431                	bnez	s0,20400e84 <_malloc_r+0x7c>
20400e3a:	5fc00797          	auipc	a5,0x5fc00
20400e3e:	93a78793          	addi	a5,a5,-1734 # 80000774 <__malloc_sbrk_start>
20400e42:	439c                	lw	a5,0(a5)
20400e44:	eb81                	bnez	a5,20400e54 <_malloc_r+0x4c>
20400e46:	4581                	li	a1,0
20400e48:	854a                	mv	a0,s2
20400e4a:	2645                	jal	204011ea <_sbrk_r>
20400e4c:	5fc00797          	auipc	a5,0x5fc00
20400e50:	92a7a423          	sw	a0,-1752(a5) # 80000774 <__malloc_sbrk_start>
20400e54:	85a6                	mv	a1,s1
20400e56:	854a                	mv	a0,s2
20400e58:	2e49                	jal	204011ea <_sbrk_r>
20400e5a:	59fd                	li	s3,-1
20400e5c:	07351963          	bne	a0,s3,20400ece <_malloc_r+0xc6>
20400e60:	47b1                	li	a5,12
20400e62:	00f92023          	sw	a5,0(s2)
20400e66:	854a                	mv	a0,s2
20400e68:	2b89                	jal	204013ba <__malloc_unlock>
20400e6a:	a029                	j	20400e74 <_malloc_r+0x6c>
20400e6c:	fa04dce3          	bgez	s1,20400e24 <_malloc_r+0x1c>
20400e70:	47b1                	li	a5,12
20400e72:	c11c                	sw	a5,0(a0)
20400e74:	4501                	li	a0,0
20400e76:	40f2                	lw	ra,28(sp)
20400e78:	4462                	lw	s0,24(sp)
20400e7a:	44d2                	lw	s1,20(sp)
20400e7c:	4942                	lw	s2,16(sp)
20400e7e:	49b2                	lw	s3,12(sp)
20400e80:	6105                	addi	sp,sp,32
20400e82:	8082                	ret
20400e84:	401c                	lw	a5,0(s0)
20400e86:	8f85                	sub	a5,a5,s1
20400e88:	0407c063          	bltz	a5,20400ec8 <_malloc_r+0xc0>
20400e8c:	46ad                	li	a3,11
20400e8e:	00f6f663          	bgeu	a3,a5,20400e9a <_malloc_r+0x92>
20400e92:	c01c                	sw	a5,0(s0)
20400e94:	943e                	add	s0,s0,a5
20400e96:	c004                	sw	s1,0(s0)
20400e98:	a801                	j	20400ea8 <_malloc_r+0xa0>
20400e9a:	405c                	lw	a5,4(s0)
20400e9c:	02871463          	bne	a4,s0,20400ec4 <_malloc_r+0xbc>
20400ea0:	5fc00717          	auipc	a4,0x5fc00
20400ea4:	8cf72823          	sw	a5,-1840(a4) # 80000770 <metal_segment_data_target_end>
20400ea8:	854a                	mv	a0,s2
20400eaa:	2b01                	jal	204013ba <__malloc_unlock>
20400eac:	00b40513          	addi	a0,s0,11
20400eb0:	00440793          	addi	a5,s0,4
20400eb4:	9961                	andi	a0,a0,-8
20400eb6:	40f50733          	sub	a4,a0,a5
20400eba:	df55                	beqz	a4,20400e76 <_malloc_r+0x6e>
20400ebc:	943a                	add	s0,s0,a4
20400ebe:	8f89                	sub	a5,a5,a0
20400ec0:	c01c                	sw	a5,0(s0)
20400ec2:	bf55                	j	20400e76 <_malloc_r+0x6e>
20400ec4:	c35c                	sw	a5,4(a4)
20400ec6:	b7cd                	j	20400ea8 <_malloc_r+0xa0>
20400ec8:	8722                	mv	a4,s0
20400eca:	4040                	lw	s0,4(s0)
20400ecc:	b7b5                	j	20400e38 <_malloc_r+0x30>
20400ece:	00350413          	addi	s0,a0,3
20400ed2:	9871                	andi	s0,s0,-4
20400ed4:	fc8501e3          	beq	a0,s0,20400e96 <_malloc_r+0x8e>
20400ed8:	40a405b3          	sub	a1,s0,a0
20400edc:	854a                	mv	a0,s2
20400ede:	2631                	jal	204011ea <_sbrk_r>
20400ee0:	fb351be3          	bne	a0,s3,20400e96 <_malloc_r+0x8e>
20400ee4:	bfb5                	j	20400e60 <_malloc_r+0x58>

20400ee6 <__sfputc_r>:
__sfputc_r():
20400ee6:	461c                	lw	a5,8(a2)
20400ee8:	17fd                	addi	a5,a5,-1
20400eea:	c61c                	sw	a5,8(a2)
20400eec:	0007da63          	bgez	a5,20400f00 <__sfputc_r+0x1a>
20400ef0:	4e18                	lw	a4,24(a2)
20400ef2:	00e7c563          	blt	a5,a4,20400efc <__sfputc_r+0x16>
20400ef6:	47a9                	li	a5,10
20400ef8:	00f59463          	bne	a1,a5,20400f00 <__sfputc_r+0x1a>
20400efc:	f1cff06f          	j	20400618 <__swbuf_r>
20400f00:	421c                	lw	a5,0(a2)
20400f02:	852e                	mv	a0,a1
20400f04:	00178713          	addi	a4,a5,1
20400f08:	c218                	sw	a4,0(a2)
20400f0a:	00b78023          	sb	a1,0(a5)
20400f0e:	8082                	ret

20400f10 <__sfputs_r>:
__sfputs_r():
20400f10:	1101                	addi	sp,sp,-32
20400f12:	cc22                	sw	s0,24(sp)
20400f14:	ca26                	sw	s1,20(sp)
20400f16:	c84a                	sw	s2,16(sp)
20400f18:	c64e                	sw	s3,12(sp)
20400f1a:	c452                	sw	s4,8(sp)
20400f1c:	ce06                	sw	ra,28(sp)
20400f1e:	892a                	mv	s2,a0
20400f20:	89ae                	mv	s3,a1
20400f22:	8432                	mv	s0,a2
20400f24:	00d604b3          	add	s1,a2,a3
20400f28:	5a7d                	li	s4,-1
20400f2a:	00941463          	bne	s0,s1,20400f32 <__sfputs_r+0x22>
20400f2e:	4501                	li	a0,0
20400f30:	a809                	j	20400f42 <__sfputs_r+0x32>
20400f32:	00044583          	lbu	a1,0(s0)
20400f36:	864e                	mv	a2,s3
20400f38:	854a                	mv	a0,s2
20400f3a:	3775                	jal	20400ee6 <__sfputc_r>
20400f3c:	0405                	addi	s0,s0,1
20400f3e:	ff4516e3          	bne	a0,s4,20400f2a <__sfputs_r+0x1a>
20400f42:	40f2                	lw	ra,28(sp)
20400f44:	4462                	lw	s0,24(sp)
20400f46:	44d2                	lw	s1,20(sp)
20400f48:	4942                	lw	s2,16(sp)
20400f4a:	49b2                	lw	s3,12(sp)
20400f4c:	4a22                	lw	s4,8(sp)
20400f4e:	6105                	addi	sp,sp,32
20400f50:	8082                	ret

20400f52 <_vfiprintf_r>:
_vfiprintf_r():
20400f52:	7135                	addi	sp,sp,-160
20400f54:	cd22                	sw	s0,152(sp)
20400f56:	cb26                	sw	s1,148(sp)
20400f58:	c94a                	sw	s2,144(sp)
20400f5a:	c74e                	sw	s3,140(sp)
20400f5c:	cf06                	sw	ra,156(sp)
20400f5e:	c552                	sw	s4,136(sp)
20400f60:	c356                	sw	s5,132(sp)
20400f62:	c15a                	sw	s6,128(sp)
20400f64:	dede                	sw	s7,124(sp)
20400f66:	dce2                	sw	s8,120(sp)
20400f68:	dae6                	sw	s9,116(sp)
20400f6a:	89aa                	mv	s3,a0
20400f6c:	84ae                	mv	s1,a1
20400f6e:	8932                	mv	s2,a2
20400f70:	8436                	mv	s0,a3
20400f72:	c501                	beqz	a0,20400f7a <_vfiprintf_r+0x28>
20400f74:	4d1c                	lw	a5,24(a0)
20400f76:	e391                	bnez	a5,20400f7a <_vfiprintf_r+0x28>
20400f78:	3cd1                	jal	20400a4c <__sinit>
20400f7a:	00004797          	auipc	a5,0x4
20400f7e:	41678793          	addi	a5,a5,1046 # 20405390 <__sf_fake_stdin>
20400f82:	0cf49b63          	bne	s1,a5,20401058 <_vfiprintf_r+0x106>
20400f86:	0049a483          	lw	s1,4(s3)
20400f8a:	00c4d783          	lhu	a5,12(s1)
20400f8e:	8ba1                	andi	a5,a5,8
20400f90:	c7f5                	beqz	a5,2040107c <_vfiprintf_r+0x12a>
20400f92:	489c                	lw	a5,16(s1)
20400f94:	c7e5                	beqz	a5,2040107c <_vfiprintf_r+0x12a>
20400f96:	02000793          	li	a5,32
20400f9a:	02f104a3          	sb	a5,41(sp)
20400f9e:	03000793          	li	a5,48
20400fa2:	d202                	sw	zero,36(sp)
20400fa4:	02f10523          	sb	a5,42(sp)
20400fa8:	c622                	sw	s0,12(sp)
20400faa:	02500b93          	li	s7,37
20400fae:	00004a97          	auipc	s5,0x4
20400fb2:	422a8a93          	addi	s5,s5,1058 # 204053d0 <__sf_fake_stdout+0x20>
20400fb6:	4c05                	li	s8,1
20400fb8:	4b29                	li	s6,10
20400fba:	844a                	mv	s0,s2
20400fbc:	00044783          	lbu	a5,0(s0)
20400fc0:	c399                	beqz	a5,20400fc6 <_vfiprintf_r+0x74>
20400fc2:	0f779063          	bne	a5,s7,204010a2 <_vfiprintf_r+0x150>
20400fc6:	41240cb3          	sub	s9,s0,s2
20400fca:	000c8d63          	beqz	s9,20400fe4 <_vfiprintf_r+0x92>
20400fce:	86e6                	mv	a3,s9
20400fd0:	864a                	mv	a2,s2
20400fd2:	85a6                	mv	a1,s1
20400fd4:	854e                	mv	a0,s3
20400fd6:	3f2d                	jal	20400f10 <__sfputs_r>
20400fd8:	57fd                	li	a5,-1
20400fda:	1ef50663          	beq	a0,a5,204011c6 <_vfiprintf_r+0x274>
20400fde:	5692                	lw	a3,36(sp)
20400fe0:	96e6                	add	a3,a3,s9
20400fe2:	d236                	sw	a3,36(sp)
20400fe4:	00044783          	lbu	a5,0(s0)
20400fe8:	1c078f63          	beqz	a5,204011c6 <_vfiprintf_r+0x274>
20400fec:	57fd                	li	a5,-1
20400fee:	00140913          	addi	s2,s0,1
20400ff2:	c802                	sw	zero,16(sp)
20400ff4:	ce02                	sw	zero,28(sp)
20400ff6:	ca3e                	sw	a5,20(sp)
20400ff8:	cc02                	sw	zero,24(sp)
20400ffa:	040109a3          	sb	zero,83(sp)
20400ffe:	d482                	sw	zero,104(sp)
20401000:	00094583          	lbu	a1,0(s2)
20401004:	4615                	li	a2,5
20401006:	8556                	mv	a0,s5
20401008:	2e59                	jal	2040139e <memchr>
2040100a:	00190413          	addi	s0,s2,1
2040100e:	47c2                	lw	a5,16(sp)
20401010:	e959                	bnez	a0,204010a6 <_vfiprintf_r+0x154>
20401012:	0107f713          	andi	a4,a5,16
20401016:	c709                	beqz	a4,20401020 <_vfiprintf_r+0xce>
20401018:	02000713          	li	a4,32
2040101c:	04e109a3          	sb	a4,83(sp)
20401020:	0087f713          	andi	a4,a5,8
20401024:	c709                	beqz	a4,2040102e <_vfiprintf_r+0xdc>
20401026:	02b00713          	li	a4,43
2040102a:	04e109a3          	sb	a4,83(sp)
2040102e:	00094683          	lbu	a3,0(s2)
20401032:	02a00713          	li	a4,42
20401036:	08e68063          	beq	a3,a4,204010b6 <_vfiprintf_r+0x164>
2040103a:	47f2                	lw	a5,28(sp)
2040103c:	844a                	mv	s0,s2
2040103e:	4681                	li	a3,0
20401040:	4625                	li	a2,9
20401042:	00044703          	lbu	a4,0(s0)
20401046:	00140593          	addi	a1,s0,1
2040104a:	fd070713          	addi	a4,a4,-48
2040104e:	0ae67963          	bgeu	a2,a4,20401100 <_vfiprintf_r+0x1ae>
20401052:	cab5                	beqz	a3,204010c6 <_vfiprintf_r+0x174>
20401054:	ce3e                	sw	a5,28(sp)
20401056:	a885                	j	204010c6 <_vfiprintf_r+0x174>
20401058:	00004797          	auipc	a5,0x4
2040105c:	35878793          	addi	a5,a5,856 # 204053b0 <__sf_fake_stdout>
20401060:	00f49563          	bne	s1,a5,2040106a <_vfiprintf_r+0x118>
20401064:	0089a483          	lw	s1,8(s3)
20401068:	b70d                	j	20400f8a <_vfiprintf_r+0x38>
2040106a:	00004797          	auipc	a5,0x4
2040106e:	30678793          	addi	a5,a5,774 # 20405370 <__sf_fake_stderr>
20401072:	f0f49ce3          	bne	s1,a5,20400f8a <_vfiprintf_r+0x38>
20401076:	00c9a483          	lw	s1,12(s3)
2040107a:	bf01                	j	20400f8a <_vfiprintf_r+0x38>
2040107c:	85a6                	mv	a1,s1
2040107e:	854e                	mv	a0,s3
20401080:	e58ff0ef          	jal	ra,204006d8 <__swsetup_r>
20401084:	d909                	beqz	a0,20400f96 <_vfiprintf_r+0x44>
20401086:	557d                	li	a0,-1
20401088:	40fa                	lw	ra,156(sp)
2040108a:	446a                	lw	s0,152(sp)
2040108c:	44da                	lw	s1,148(sp)
2040108e:	494a                	lw	s2,144(sp)
20401090:	49ba                	lw	s3,140(sp)
20401092:	4a2a                	lw	s4,136(sp)
20401094:	4a9a                	lw	s5,132(sp)
20401096:	4b0a                	lw	s6,128(sp)
20401098:	5bf6                	lw	s7,124(sp)
2040109a:	5c66                	lw	s8,120(sp)
2040109c:	5cd6                	lw	s9,116(sp)
2040109e:	610d                	addi	sp,sp,160
204010a0:	8082                	ret
204010a2:	0405                	addi	s0,s0,1
204010a4:	bf21                	j	20400fbc <_vfiprintf_r+0x6a>
204010a6:	41550533          	sub	a0,a0,s5
204010aa:	00ac1533          	sll	a0,s8,a0
204010ae:	8fc9                	or	a5,a5,a0
204010b0:	c83e                	sw	a5,16(sp)
204010b2:	8922                	mv	s2,s0
204010b4:	b7b1                	j	20401000 <_vfiprintf_r+0xae>
204010b6:	4732                	lw	a4,12(sp)
204010b8:	00470693          	addi	a3,a4,4
204010bc:	4318                	lw	a4,0(a4)
204010be:	c636                	sw	a3,12(sp)
204010c0:	02074963          	bltz	a4,204010f2 <_vfiprintf_r+0x1a0>
204010c4:	ce3a                	sw	a4,28(sp)
204010c6:	00044703          	lbu	a4,0(s0)
204010ca:	02e00793          	li	a5,46
204010ce:	04f71f63          	bne	a4,a5,2040112c <_vfiprintf_r+0x1da>
204010d2:	00144703          	lbu	a4,1(s0)
204010d6:	02a00793          	li	a5,42
204010da:	02f71b63          	bne	a4,a5,20401110 <_vfiprintf_r+0x1be>
204010de:	47b2                	lw	a5,12(sp)
204010e0:	0409                	addi	s0,s0,2
204010e2:	00478713          	addi	a4,a5,4
204010e6:	439c                	lw	a5,0(a5)
204010e8:	c63a                	sw	a4,12(sp)
204010ea:	0207c163          	bltz	a5,2040110c <_vfiprintf_r+0x1ba>
204010ee:	ca3e                	sw	a5,20(sp)
204010f0:	a835                	j	2040112c <_vfiprintf_r+0x1da>
204010f2:	40e00733          	neg	a4,a4
204010f6:	0027e793          	ori	a5,a5,2
204010fa:	ce3a                	sw	a4,28(sp)
204010fc:	c83e                	sw	a5,16(sp)
204010fe:	b7e1                	j	204010c6 <_vfiprintf_r+0x174>
20401100:	036787b3          	mul	a5,a5,s6
20401104:	4685                	li	a3,1
20401106:	842e                	mv	s0,a1
20401108:	97ba                	add	a5,a5,a4
2040110a:	bf25                	j	20401042 <_vfiprintf_r+0xf0>
2040110c:	57fd                	li	a5,-1
2040110e:	b7c5                	j	204010ee <_vfiprintf_r+0x19c>
20401110:	0405                	addi	s0,s0,1
20401112:	ca02                	sw	zero,20(sp)
20401114:	4681                	li	a3,0
20401116:	4781                	li	a5,0
20401118:	4625                	li	a2,9
2040111a:	00044703          	lbu	a4,0(s0)
2040111e:	00140593          	addi	a1,s0,1
20401122:	fd070713          	addi	a4,a4,-48
20401126:	06e67663          	bgeu	a2,a4,20401192 <_vfiprintf_r+0x240>
2040112a:	f2f1                	bnez	a3,204010ee <_vfiprintf_r+0x19c>
2040112c:	00044583          	lbu	a1,0(s0)
20401130:	460d                	li	a2,3
20401132:	00004517          	auipc	a0,0x4
20401136:	2a650513          	addi	a0,a0,678 # 204053d8 <__sf_fake_stdout+0x28>
2040113a:	2495                	jal	2040139e <memchr>
2040113c:	cd11                	beqz	a0,20401158 <_vfiprintf_r+0x206>
2040113e:	00004797          	auipc	a5,0x4
20401142:	29a78793          	addi	a5,a5,666 # 204053d8 <__sf_fake_stdout+0x28>
20401146:	8d1d                	sub	a0,a0,a5
20401148:	04000793          	li	a5,64
2040114c:	00a797b3          	sll	a5,a5,a0
20401150:	4542                	lw	a0,16(sp)
20401152:	0405                	addi	s0,s0,1
20401154:	8d5d                	or	a0,a0,a5
20401156:	c82a                	sw	a0,16(sp)
20401158:	00044583          	lbu	a1,0(s0)
2040115c:	4619                	li	a2,6
2040115e:	00004517          	auipc	a0,0x4
20401162:	27e50513          	addi	a0,a0,638 # 204053dc <__sf_fake_stdout+0x2c>
20401166:	00140913          	addi	s2,s0,1
2040116a:	02b10423          	sb	a1,40(sp)
2040116e:	2c05                	jal	2040139e <memchr>
20401170:	c13d                	beqz	a0,204011d6 <_vfiprintf_r+0x284>
20401172:	dfbff797          	auipc	a5,0xdfbff
20401176:	e8e78793          	addi	a5,a5,-370 # 0 <__metal_boot_hart>
2040117a:	e795                	bnez	a5,204011a6 <_vfiprintf_r+0x254>
2040117c:	4742                	lw	a4,16(sp)
2040117e:	47b2                	lw	a5,12(sp)
20401180:	10077713          	andi	a4,a4,256
20401184:	cf09                	beqz	a4,2040119e <_vfiprintf_r+0x24c>
20401186:	0791                	addi	a5,a5,4
20401188:	c63e                	sw	a5,12(sp)
2040118a:	5792                	lw	a5,36(sp)
2040118c:	97d2                	add	a5,a5,s4
2040118e:	d23e                	sw	a5,36(sp)
20401190:	b52d                	j	20400fba <_vfiprintf_r+0x68>
20401192:	036787b3          	mul	a5,a5,s6
20401196:	4685                	li	a3,1
20401198:	842e                	mv	s0,a1
2040119a:	97ba                	add	a5,a5,a4
2040119c:	bfbd                	j	2040111a <_vfiprintf_r+0x1c8>
2040119e:	079d                	addi	a5,a5,7
204011a0:	9be1                	andi	a5,a5,-8
204011a2:	07a1                	addi	a5,a5,8
204011a4:	b7d5                	j	20401188 <_vfiprintf_r+0x236>
204011a6:	0078                	addi	a4,sp,12
204011a8:	00000697          	auipc	a3,0x0
204011ac:	d6868693          	addi	a3,a3,-664 # 20400f10 <__sfputs_r>
204011b0:	8626                	mv	a2,s1
204011b2:	080c                	addi	a1,sp,16
204011b4:	854e                	mv	a0,s3
204011b6:	00000097          	auipc	ra,0x0
204011ba:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
204011be:	57fd                	li	a5,-1
204011c0:	8a2a                	mv	s4,a0
204011c2:	fcf514e3          	bne	a0,a5,2040118a <_vfiprintf_r+0x238>
204011c6:	00c4d783          	lhu	a5,12(s1)
204011ca:	0407f793          	andi	a5,a5,64
204011ce:	ea079ce3          	bnez	a5,20401086 <_vfiprintf_r+0x134>
204011d2:	5512                	lw	a0,36(sp)
204011d4:	bd55                	j	20401088 <_vfiprintf_r+0x136>
204011d6:	0078                	addi	a4,sp,12
204011d8:	00000697          	auipc	a3,0x0
204011dc:	d3868693          	addi	a3,a3,-712 # 20400f10 <__sfputs_r>
204011e0:	8626                	mv	a2,s1
204011e2:	080c                	addi	a1,sp,16
204011e4:	854e                	mv	a0,s3
204011e6:	24cd                	jal	204014c8 <_printf_i>
204011e8:	bfd9                	j	204011be <_vfiprintf_r+0x26c>

204011ea <_sbrk_r>:
_sbrk_r():
204011ea:	1141                	addi	sp,sp,-16
204011ec:	c422                	sw	s0,8(sp)
204011ee:	842a                	mv	s0,a0
204011f0:	852e                	mv	a0,a1
204011f2:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
204011f6:	c606                	sw	ra,12(sp)
204011f8:	2da9                	jal	20401852 <_sbrk>
204011fa:	57fd                	li	a5,-1
204011fc:	00f51763          	bne	a0,a5,2040120a <_sbrk_r+0x20>
20401200:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
20401204:	439c                	lw	a5,0(a5)
20401206:	c391                	beqz	a5,2040120a <_sbrk_r+0x20>
20401208:	c01c                	sw	a5,0(s0)
2040120a:	40b2                	lw	ra,12(sp)
2040120c:	4422                	lw	s0,8(sp)
2040120e:	0141                	addi	sp,sp,16
20401210:	8082                	ret

20401212 <__sread>:
__sread():
20401212:	1141                	addi	sp,sp,-16
20401214:	c422                	sw	s0,8(sp)
20401216:	842e                	mv	s0,a1
20401218:	00e59583          	lh	a1,14(a1)
2040121c:	c606                	sw	ra,12(sp)
2040121e:	23b1                	jal	2040176a <_read_r>
20401220:	00054963          	bltz	a0,20401232 <__sread+0x20>
20401224:	487c                	lw	a5,84(s0)
20401226:	97aa                	add	a5,a5,a0
20401228:	c87c                	sw	a5,84(s0)
2040122a:	40b2                	lw	ra,12(sp)
2040122c:	4422                	lw	s0,8(sp)
2040122e:	0141                	addi	sp,sp,16
20401230:	8082                	ret
20401232:	00c45783          	lhu	a5,12(s0)
20401236:	777d                	lui	a4,0xfffff
20401238:	177d                	addi	a4,a4,-1
2040123a:	8ff9                	and	a5,a5,a4
2040123c:	00f41623          	sh	a5,12(s0)
20401240:	b7ed                	j	2040122a <__sread+0x18>

20401242 <__swrite>:
__swrite():
20401242:	00c5d783          	lhu	a5,12(a1)
20401246:	1101                	addi	sp,sp,-32
20401248:	cc22                	sw	s0,24(sp)
2040124a:	ca26                	sw	s1,20(sp)
2040124c:	c84a                	sw	s2,16(sp)
2040124e:	c64e                	sw	s3,12(sp)
20401250:	ce06                	sw	ra,28(sp)
20401252:	1007f793          	andi	a5,a5,256
20401256:	84aa                	mv	s1,a0
20401258:	842e                	mv	s0,a1
2040125a:	8932                	mv	s2,a2
2040125c:	89b6                	mv	s3,a3
2040125e:	c791                	beqz	a5,2040126a <__swrite+0x28>
20401260:	00e59583          	lh	a1,14(a1)
20401264:	4689                	li	a3,2
20401266:	4601                	li	a2,0
20401268:	2229                	jal	20401372 <_lseek_r>
2040126a:	00c45783          	lhu	a5,12(s0)
2040126e:	777d                	lui	a4,0xfffff
20401270:	177d                	addi	a4,a4,-1
20401272:	8ff9                	and	a5,a5,a4
20401274:	00f41623          	sh	a5,12(s0)
20401278:	00e41583          	lh	a1,14(s0)
2040127c:	4462                	lw	s0,24(sp)
2040127e:	40f2                	lw	ra,28(sp)
20401280:	86ce                	mv	a3,s3
20401282:	864a                	mv	a2,s2
20401284:	49b2                	lw	s3,12(sp)
20401286:	4942                	lw	s2,16(sp)
20401288:	8526                	mv	a0,s1
2040128a:	44d2                	lw	s1,20(sp)
2040128c:	6105                	addi	sp,sp,32
2040128e:	a83d                	j	204012cc <_write_r>

20401290 <__sseek>:
__sseek():
20401290:	1141                	addi	sp,sp,-16
20401292:	c422                	sw	s0,8(sp)
20401294:	842e                	mv	s0,a1
20401296:	00e59583          	lh	a1,14(a1)
2040129a:	c606                	sw	ra,12(sp)
2040129c:	28d9                	jal	20401372 <_lseek_r>
2040129e:	57fd                	li	a5,-1
204012a0:	00c45703          	lhu	a4,12(s0)
204012a4:	00f51b63          	bne	a0,a5,204012ba <__sseek+0x2a>
204012a8:	77fd                	lui	a5,0xfffff
204012aa:	17fd                	addi	a5,a5,-1
204012ac:	8ff9                	and	a5,a5,a4
204012ae:	00f41623          	sh	a5,12(s0)
204012b2:	40b2                	lw	ra,12(sp)
204012b4:	4422                	lw	s0,8(sp)
204012b6:	0141                	addi	sp,sp,16
204012b8:	8082                	ret
204012ba:	6785                	lui	a5,0x1
204012bc:	8fd9                	or	a5,a5,a4
204012be:	00f41623          	sh	a5,12(s0)
204012c2:	c868                	sw	a0,84(s0)
204012c4:	b7fd                	j	204012b2 <__sseek+0x22>

204012c6 <__sclose>:
__sclose():
204012c6:	00e59583          	lh	a1,14(a1)
204012ca:	a03d                	j	204012f8 <_close_r>

204012cc <_write_r>:
_write_r():
204012cc:	1141                	addi	sp,sp,-16
204012ce:	c422                	sw	s0,8(sp)
204012d0:	842a                	mv	s0,a0
204012d2:	852e                	mv	a0,a1
204012d4:	85b2                	mv	a1,a2
204012d6:	8636                	mv	a2,a3
204012d8:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
204012dc:	c606                	sw	ra,12(sp)
204012de:	23fd                	jal	204018cc <_write>
204012e0:	57fd                	li	a5,-1
204012e2:	00f51763          	bne	a0,a5,204012f0 <_write_r+0x24>
204012e6:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
204012ea:	439c                	lw	a5,0(a5)
204012ec:	c391                	beqz	a5,204012f0 <_write_r+0x24>
204012ee:	c01c                	sw	a5,0(s0)
204012f0:	40b2                	lw	ra,12(sp)
204012f2:	4422                	lw	s0,8(sp)
204012f4:	0141                	addi	sp,sp,16
204012f6:	8082                	ret

204012f8 <_close_r>:
_close_r():
204012f8:	1141                	addi	sp,sp,-16
204012fa:	c422                	sw	s0,8(sp)
204012fc:	842a                	mv	s0,a0
204012fe:	852e                	mv	a0,a1
20401300:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
20401304:	c606                	sw	ra,12(sp)
20401306:	2941                	jal	20401796 <_close>
20401308:	57fd                	li	a5,-1
2040130a:	00f51763          	bne	a0,a5,20401318 <_close_r+0x20>
2040130e:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
20401312:	439c                	lw	a5,0(a5)
20401314:	c391                	beqz	a5,20401318 <_close_r+0x20>
20401316:	c01c                	sw	a5,0(s0)
20401318:	40b2                	lw	ra,12(sp)
2040131a:	4422                	lw	s0,8(sp)
2040131c:	0141                	addi	sp,sp,16
2040131e:	8082                	ret

20401320 <_fstat_r>:
_fstat_r():
20401320:	1141                	addi	sp,sp,-16
20401322:	c422                	sw	s0,8(sp)
20401324:	842a                	mv	s0,a0
20401326:	852e                	mv	a0,a1
20401328:	85b2                	mv	a1,a2
2040132a:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
2040132e:	c606                	sw	ra,12(sp)
20401330:	2161                	jal	204017b8 <_fstat>
20401332:	57fd                	li	a5,-1
20401334:	00f51763          	bne	a0,a5,20401342 <_fstat_r+0x22>
20401338:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
2040133c:	439c                	lw	a5,0(a5)
2040133e:	c391                	beqz	a5,20401342 <_fstat_r+0x22>
20401340:	c01c                	sw	a5,0(s0)
20401342:	40b2                	lw	ra,12(sp)
20401344:	4422                	lw	s0,8(sp)
20401346:	0141                	addi	sp,sp,16
20401348:	8082                	ret

2040134a <_isatty_r>:
_isatty_r():
2040134a:	1141                	addi	sp,sp,-16
2040134c:	c422                	sw	s0,8(sp)
2040134e:	842a                	mv	s0,a0
20401350:	852e                	mv	a0,a1
20401352:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
20401356:	c606                	sw	ra,12(sp)
20401358:	2159                	jal	204017de <_isatty>
2040135a:	57fd                	li	a5,-1
2040135c:	00f51763          	bne	a0,a5,2040136a <_isatty_r+0x20>
20401360:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
20401364:	439c                	lw	a5,0(a5)
20401366:	c391                	beqz	a5,2040136a <_isatty_r+0x20>
20401368:	c01c                	sw	a5,0(s0)
2040136a:	40b2                	lw	ra,12(sp)
2040136c:	4422                	lw	s0,8(sp)
2040136e:	0141                	addi	sp,sp,16
20401370:	8082                	ret

20401372 <_lseek_r>:
_lseek_r():
20401372:	1141                	addi	sp,sp,-16
20401374:	c422                	sw	s0,8(sp)
20401376:	842a                	mv	s0,a0
20401378:	852e                	mv	a0,a1
2040137a:	85b2                	mv	a1,a2
2040137c:	8636                	mv	a2,a3
2040137e:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
20401382:	c606                	sw	ra,12(sp)
20401384:	29ad                	jal	204017fe <_lseek>
20401386:	57fd                	li	a5,-1
20401388:	00f51763          	bne	a0,a5,20401396 <_lseek_r+0x24>
2040138c:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
20401390:	439c                	lw	a5,0(a5)
20401392:	c391                	beqz	a5,20401396 <_lseek_r+0x24>
20401394:	c01c                	sw	a5,0(s0)
20401396:	40b2                	lw	ra,12(sp)
20401398:	4422                	lw	s0,8(sp)
2040139a:	0141                	addi	sp,sp,16
2040139c:	8082                	ret

2040139e <memchr>:
memchr():
2040139e:	0ff5f593          	andi	a1,a1,255
204013a2:	962a                	add	a2,a2,a0
204013a4:	00c51463          	bne	a0,a2,204013ac <memchr+0xe>
204013a8:	4501                	li	a0,0
204013aa:	8082                	ret
204013ac:	00054783          	lbu	a5,0(a0)
204013b0:	feb78de3          	beq	a5,a1,204013aa <memchr+0xc>
204013b4:	0505                	addi	a0,a0,1
204013b6:	b7fd                	j	204013a4 <memchr+0x6>

204013b8 <__malloc_lock>:
__malloc_lock():
204013b8:	8082                	ret

204013ba <__malloc_unlock>:
__malloc_unlock():
204013ba:	8082                	ret

204013bc <_printf_common>:
_printf_common():
204013bc:	7179                	addi	sp,sp,-48
204013be:	ca56                	sw	s5,20(sp)
204013c0:	499c                	lw	a5,16(a1)
204013c2:	8aba                	mv	s5,a4
204013c4:	4598                	lw	a4,8(a1)
204013c6:	d422                	sw	s0,40(sp)
204013c8:	d226                	sw	s1,36(sp)
204013ca:	ce4e                	sw	s3,28(sp)
204013cc:	cc52                	sw	s4,24(sp)
204013ce:	d606                	sw	ra,44(sp)
204013d0:	d04a                	sw	s2,32(sp)
204013d2:	c85a                	sw	s6,16(sp)
204013d4:	c65e                	sw	s7,12(sp)
204013d6:	89aa                	mv	s3,a0
204013d8:	842e                	mv	s0,a1
204013da:	84b2                	mv	s1,a2
204013dc:	8a36                	mv	s4,a3
204013de:	00e7d363          	bge	a5,a4,204013e4 <_printf_common+0x28>
204013e2:	87ba                	mv	a5,a4
204013e4:	c09c                	sw	a5,0(s1)
204013e6:	04344703          	lbu	a4,67(s0)
204013ea:	c319                	beqz	a4,204013f0 <_printf_common+0x34>
204013ec:	0785                	addi	a5,a5,1
204013ee:	c09c                	sw	a5,0(s1)
204013f0:	401c                	lw	a5,0(s0)
204013f2:	0207f793          	andi	a5,a5,32
204013f6:	c781                	beqz	a5,204013fe <_printf_common+0x42>
204013f8:	409c                	lw	a5,0(s1)
204013fa:	0789                	addi	a5,a5,2
204013fc:	c09c                	sw	a5,0(s1)
204013fe:	00042903          	lw	s2,0(s0)
20401402:	00697913          	andi	s2,s2,6
20401406:	00091a63          	bnez	s2,2040141a <_printf_common+0x5e>
2040140a:	01940b13          	addi	s6,s0,25
2040140e:	5bfd                	li	s7,-1
20401410:	445c                	lw	a5,12(s0)
20401412:	4098                	lw	a4,0(s1)
20401414:	8f99                	sub	a5,a5,a4
20401416:	04f94c63          	blt	s2,a5,2040146e <_printf_common+0xb2>
2040141a:	401c                	lw	a5,0(s0)
2040141c:	04344683          	lbu	a3,67(s0)
20401420:	0207f793          	andi	a5,a5,32
20401424:	00d036b3          	snez	a3,a3
20401428:	eba5                	bnez	a5,20401498 <_printf_common+0xdc>
2040142a:	04340613          	addi	a2,s0,67
2040142e:	85d2                	mv	a1,s4
20401430:	854e                	mv	a0,s3
20401432:	9a82                	jalr	s5
20401434:	57fd                	li	a5,-1
20401436:	04f50363          	beq	a0,a5,2040147c <_printf_common+0xc0>
2040143a:	401c                	lw	a5,0(s0)
2040143c:	4611                	li	a2,4
2040143e:	4098                	lw	a4,0(s1)
20401440:	8b99                	andi	a5,a5,6
20401442:	4454                	lw	a3,12(s0)
20401444:	4481                	li	s1,0
20401446:	00c79763          	bne	a5,a2,20401454 <_printf_common+0x98>
2040144a:	40e684b3          	sub	s1,a3,a4
2040144e:	0004d363          	bgez	s1,20401454 <_printf_common+0x98>
20401452:	4481                	li	s1,0
20401454:	441c                	lw	a5,8(s0)
20401456:	4818                	lw	a4,16(s0)
20401458:	00f75463          	bge	a4,a5,20401460 <_printf_common+0xa4>
2040145c:	8f99                	sub	a5,a5,a4
2040145e:	94be                	add	s1,s1,a5
20401460:	4901                	li	s2,0
20401462:	0469                	addi	s0,s0,26
20401464:	5b7d                	li	s6,-1
20401466:	05249863          	bne	s1,s2,204014b6 <_printf_common+0xfa>
2040146a:	4501                	li	a0,0
2040146c:	a809                	j	2040147e <_printf_common+0xc2>
2040146e:	4685                	li	a3,1
20401470:	865a                	mv	a2,s6
20401472:	85d2                	mv	a1,s4
20401474:	854e                	mv	a0,s3
20401476:	9a82                	jalr	s5
20401478:	01751e63          	bne	a0,s7,20401494 <_printf_common+0xd8>
2040147c:	557d                	li	a0,-1
2040147e:	50b2                	lw	ra,44(sp)
20401480:	5422                	lw	s0,40(sp)
20401482:	5492                	lw	s1,36(sp)
20401484:	5902                	lw	s2,32(sp)
20401486:	49f2                	lw	s3,28(sp)
20401488:	4a62                	lw	s4,24(sp)
2040148a:	4ad2                	lw	s5,20(sp)
2040148c:	4b42                	lw	s6,16(sp)
2040148e:	4bb2                	lw	s7,12(sp)
20401490:	6145                	addi	sp,sp,48
20401492:	8082                	ret
20401494:	0905                	addi	s2,s2,1
20401496:	bfad                	j	20401410 <_printf_common+0x54>
20401498:	00d40733          	add	a4,s0,a3
2040149c:	03000613          	li	a2,48
204014a0:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffd467>
204014a4:	04544703          	lbu	a4,69(s0)
204014a8:	00168793          	addi	a5,a3,1
204014ac:	97a2                	add	a5,a5,s0
204014ae:	0689                	addi	a3,a3,2
204014b0:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
204014b4:	bf9d                	j	2040142a <_printf_common+0x6e>
204014b6:	4685                	li	a3,1
204014b8:	8622                	mv	a2,s0
204014ba:	85d2                	mv	a1,s4
204014bc:	854e                	mv	a0,s3
204014be:	9a82                	jalr	s5
204014c0:	fb650ee3          	beq	a0,s6,2040147c <_printf_common+0xc0>
204014c4:	0905                	addi	s2,s2,1
204014c6:	b745                	j	20401466 <_printf_common+0xaa>

204014c8 <_printf_i>:
_printf_i():
204014c8:	7179                	addi	sp,sp,-48
204014ca:	d422                	sw	s0,40(sp)
204014cc:	d226                	sw	s1,36(sp)
204014ce:	d04a                	sw	s2,32(sp)
204014d0:	ce4e                	sw	s3,28(sp)
204014d2:	d606                	sw	ra,44(sp)
204014d4:	cc52                	sw	s4,24(sp)
204014d6:	ca56                	sw	s5,20(sp)
204014d8:	c85a                	sw	s6,16(sp)
204014da:	89b6                	mv	s3,a3
204014dc:	0185c683          	lbu	a3,24(a1)
204014e0:	06e00793          	li	a5,110
204014e4:	8932                	mv	s2,a2
204014e6:	84aa                	mv	s1,a0
204014e8:	842e                	mv	s0,a1
204014ea:	04358613          	addi	a2,a1,67
204014ee:	1ef68063          	beq	a3,a5,204016ce <_printf_i+0x206>
204014f2:	06d7e263          	bltu	a5,a3,20401556 <_printf_i+0x8e>
204014f6:	06300793          	li	a5,99
204014fa:	0af68263          	beq	a3,a5,2040159e <_printf_i+0xd6>
204014fe:	00d7ed63          	bltu	a5,a3,20401518 <_printf_i+0x50>
20401502:	1e068a63          	beqz	a3,204016f6 <_printf_i+0x22e>
20401506:	05800793          	li	a5,88
2040150a:	16f68663          	beq	a3,a5,20401676 <_printf_i+0x1ae>
2040150e:	04240a93          	addi	s5,s0,66
20401512:	04d40123          	sb	a3,66(s0)
20401516:	a869                	j	204015b0 <_printf_i+0xe8>
20401518:	06400793          	li	a5,100
2040151c:	00f68663          	beq	a3,a5,20401528 <_printf_i+0x60>
20401520:	06900793          	li	a5,105
20401524:	fef695e3          	bne	a3,a5,2040150e <_printf_i+0x46>
20401528:	401c                	lw	a5,0(s0)
2040152a:	4308                	lw	a0,0(a4)
2040152c:	0807f693          	andi	a3,a5,128
20401530:	00450593          	addi	a1,a0,4
20401534:	c2c1                	beqz	a3,204015b4 <_printf_i+0xec>
20401536:	411c                	lw	a5,0(a0)
20401538:	c30c                	sw	a1,0(a4)
2040153a:	0007d863          	bgez	a5,2040154a <_printf_i+0x82>
2040153e:	02d00713          	li	a4,45
20401542:	40f007b3          	neg	a5,a5
20401546:	04e401a3          	sb	a4,67(s0)
2040154a:	00004697          	auipc	a3,0x4
2040154e:	e9a68693          	addi	a3,a3,-358 # 204053e4 <__sf_fake_stdout+0x34>
20401552:	4729                	li	a4,10
20401554:	a065                	j	204015fc <_printf_i+0x134>
20401556:	07300793          	li	a5,115
2040155a:	1af68263          	beq	a3,a5,204016fe <_printf_i+0x236>
2040155e:	00d7ef63          	bltu	a5,a3,2040157c <_printf_i+0xb4>
20401562:	06f00793          	li	a5,111
20401566:	04f68f63          	beq	a3,a5,204015c4 <_printf_i+0xfc>
2040156a:	07000793          	li	a5,112
2040156e:	faf690e3          	bne	a3,a5,2040150e <_printf_i+0x46>
20401572:	419c                	lw	a5,0(a1)
20401574:	0207e793          	ori	a5,a5,32
20401578:	c19c                	sw	a5,0(a1)
2040157a:	a809                	j	2040158c <_printf_i+0xc4>
2040157c:	07500793          	li	a5,117
20401580:	04f68263          	beq	a3,a5,204015c4 <_printf_i+0xfc>
20401584:	07800793          	li	a5,120
20401588:	f8f693e3          	bne	a3,a5,2040150e <_printf_i+0x46>
2040158c:	07800793          	li	a5,120
20401590:	04f402a3          	sb	a5,69(s0)
20401594:	00004697          	auipc	a3,0x4
20401598:	e6468693          	addi	a3,a3,-412 # 204053f8 <__sf_fake_stdout+0x48>
2040159c:	a0dd                	j	20401682 <_printf_i+0x1ba>
2040159e:	431c                	lw	a5,0(a4)
204015a0:	04258a93          	addi	s5,a1,66
204015a4:	00478693          	addi	a3,a5,4
204015a8:	439c                	lw	a5,0(a5)
204015aa:	c314                	sw	a3,0(a4)
204015ac:	04f58123          	sb	a5,66(a1)
204015b0:	4785                	li	a5,1
204015b2:	a2ad                	j	2040171c <_printf_i+0x254>
204015b4:	0407f693          	andi	a3,a5,64
204015b8:	411c                	lw	a5,0(a0)
204015ba:	c30c                	sw	a1,0(a4)
204015bc:	debd                	beqz	a3,2040153a <_printf_i+0x72>
204015be:	07c2                	slli	a5,a5,0x10
204015c0:	87c1                	srai	a5,a5,0x10
204015c2:	bfa5                	j	2040153a <_printf_i+0x72>
204015c4:	400c                	lw	a1,0(s0)
204015c6:	431c                	lw	a5,0(a4)
204015c8:	0805f813          	andi	a6,a1,128
204015cc:	00478513          	addi	a0,a5,4
204015d0:	00080563          	beqz	a6,204015da <_printf_i+0x112>
204015d4:	c308                	sw	a0,0(a4)
204015d6:	439c                	lw	a5,0(a5)
204015d8:	a039                	j	204015e6 <_printf_i+0x11e>
204015da:	0405f593          	andi	a1,a1,64
204015de:	c308                	sw	a0,0(a4)
204015e0:	d9fd                	beqz	a1,204015d6 <_printf_i+0x10e>
204015e2:	0007d783          	lhu	a5,0(a5)
204015e6:	06f00713          	li	a4,111
204015ea:	0ce68a63          	beq	a3,a4,204016be <_printf_i+0x1f6>
204015ee:	00004697          	auipc	a3,0x4
204015f2:	df668693          	addi	a3,a3,-522 # 204053e4 <__sf_fake_stdout+0x34>
204015f6:	4729                	li	a4,10
204015f8:	040401a3          	sb	zero,67(s0)
204015fc:	404c                	lw	a1,4(s0)
204015fe:	c40c                	sw	a1,8(s0)
20401600:	0005c563          	bltz	a1,2040160a <_printf_i+0x142>
20401604:	4008                	lw	a0,0(s0)
20401606:	996d                	andi	a0,a0,-5
20401608:	c008                	sw	a0,0(s0)
2040160a:	e399                	bnez	a5,20401610 <_printf_i+0x148>
2040160c:	8ab2                	mv	s5,a2
2040160e:	cd91                	beqz	a1,2040162a <_printf_i+0x162>
20401610:	8ab2                	mv	s5,a2
20401612:	02e7f5b3          	remu	a1,a5,a4
20401616:	1afd                	addi	s5,s5,-1
20401618:	95b6                	add	a1,a1,a3
2040161a:	0005c583          	lbu	a1,0(a1)
2040161e:	00ba8023          	sb	a1,0(s5)
20401622:	02e7d5b3          	divu	a1,a5,a4
20401626:	0ae7f263          	bgeu	a5,a4,204016ca <_printf_i+0x202>
2040162a:	47a1                	li	a5,8
2040162c:	00f71e63          	bne	a4,a5,20401648 <_printf_i+0x180>
20401630:	401c                	lw	a5,0(s0)
20401632:	8b85                	andi	a5,a5,1
20401634:	cb91                	beqz	a5,20401648 <_printf_i+0x180>
20401636:	4058                	lw	a4,4(s0)
20401638:	481c                	lw	a5,16(s0)
2040163a:	00e7c763          	blt	a5,a4,20401648 <_printf_i+0x180>
2040163e:	03000793          	li	a5,48
20401642:	fefa8fa3          	sb	a5,-1(s5)
20401646:	1afd                	addi	s5,s5,-1
20401648:	41560633          	sub	a2,a2,s5
2040164c:	c810                	sw	a2,16(s0)
2040164e:	874e                	mv	a4,s3
20401650:	86ca                	mv	a3,s2
20401652:	0070                	addi	a2,sp,12
20401654:	85a2                	mv	a1,s0
20401656:	8526                	mv	a0,s1
20401658:	3395                	jal	204013bc <_printf_common>
2040165a:	5a7d                	li	s4,-1
2040165c:	0d451463          	bne	a0,s4,20401724 <_printf_i+0x25c>
20401660:	557d                	li	a0,-1
20401662:	50b2                	lw	ra,44(sp)
20401664:	5422                	lw	s0,40(sp)
20401666:	5492                	lw	s1,36(sp)
20401668:	5902                	lw	s2,32(sp)
2040166a:	49f2                	lw	s3,28(sp)
2040166c:	4a62                	lw	s4,24(sp)
2040166e:	4ad2                	lw	s5,20(sp)
20401670:	4b42                	lw	s6,16(sp)
20401672:	6145                	addi	sp,sp,48
20401674:	8082                	ret
20401676:	04d582a3          	sb	a3,69(a1)
2040167a:	00004697          	auipc	a3,0x4
2040167e:	d6a68693          	addi	a3,a3,-662 # 204053e4 <__sf_fake_stdout+0x34>
20401682:	400c                	lw	a1,0(s0)
20401684:	4308                	lw	a0,0(a4)
20401686:	0805f813          	andi	a6,a1,128
2040168a:	411c                	lw	a5,0(a0)
2040168c:	0511                	addi	a0,a0,4
2040168e:	02080063          	beqz	a6,204016ae <_printf_i+0x1e6>
20401692:	c308                	sw	a0,0(a4)
20401694:	0015f713          	andi	a4,a1,1
20401698:	c701                	beqz	a4,204016a0 <_printf_i+0x1d8>
2040169a:	0205e593          	ori	a1,a1,32
2040169e:	c00c                	sw	a1,0(s0)
204016a0:	4741                	li	a4,16
204016a2:	fbb9                	bnez	a5,204015f8 <_printf_i+0x130>
204016a4:	400c                	lw	a1,0(s0)
204016a6:	fdf5f593          	andi	a1,a1,-33
204016aa:	c00c                	sw	a1,0(s0)
204016ac:	b7b1                	j	204015f8 <_printf_i+0x130>
204016ae:	0405f813          	andi	a6,a1,64
204016b2:	c308                	sw	a0,0(a4)
204016b4:	fe0800e3          	beqz	a6,20401694 <_printf_i+0x1cc>
204016b8:	07c2                	slli	a5,a5,0x10
204016ba:	83c1                	srli	a5,a5,0x10
204016bc:	bfe1                	j	20401694 <_printf_i+0x1cc>
204016be:	00004697          	auipc	a3,0x4
204016c2:	d2668693          	addi	a3,a3,-730 # 204053e4 <__sf_fake_stdout+0x34>
204016c6:	4721                	li	a4,8
204016c8:	bf05                	j	204015f8 <_printf_i+0x130>
204016ca:	87ae                	mv	a5,a1
204016cc:	b799                	j	20401612 <_printf_i+0x14a>
204016ce:	4194                	lw	a3,0(a1)
204016d0:	431c                	lw	a5,0(a4)
204016d2:	49cc                	lw	a1,20(a1)
204016d4:	0806f813          	andi	a6,a3,128
204016d8:	00478513          	addi	a0,a5,4
204016dc:	00080663          	beqz	a6,204016e8 <_printf_i+0x220>
204016e0:	c308                	sw	a0,0(a4)
204016e2:	439c                	lw	a5,0(a5)
204016e4:	c38c                	sw	a1,0(a5)
204016e6:	a801                	j	204016f6 <_printf_i+0x22e>
204016e8:	c308                	sw	a0,0(a4)
204016ea:	0406f693          	andi	a3,a3,64
204016ee:	439c                	lw	a5,0(a5)
204016f0:	daf5                	beqz	a3,204016e4 <_printf_i+0x21c>
204016f2:	00b79023          	sh	a1,0(a5)
204016f6:	00042823          	sw	zero,16(s0)
204016fa:	8ab2                	mv	s5,a2
204016fc:	bf89                	j	2040164e <_printf_i+0x186>
204016fe:	431c                	lw	a5,0(a4)
20401700:	41d0                	lw	a2,4(a1)
20401702:	4581                	li	a1,0
20401704:	00478693          	addi	a3,a5,4
20401708:	c314                	sw	a3,0(a4)
2040170a:	0007aa83          	lw	s5,0(a5)
2040170e:	8556                	mv	a0,s5
20401710:	3179                	jal	2040139e <memchr>
20401712:	c501                	beqz	a0,2040171a <_printf_i+0x252>
20401714:	41550533          	sub	a0,a0,s5
20401718:	c048                	sw	a0,4(s0)
2040171a:	405c                	lw	a5,4(s0)
2040171c:	c81c                	sw	a5,16(s0)
2040171e:	040401a3          	sb	zero,67(s0)
20401722:	b735                	j	2040164e <_printf_i+0x186>
20401724:	4814                	lw	a3,16(s0)
20401726:	8656                	mv	a2,s5
20401728:	85ca                	mv	a1,s2
2040172a:	8526                	mv	a0,s1
2040172c:	9982                	jalr	s3
2040172e:	f34509e3          	beq	a0,s4,20401660 <_printf_i+0x198>
20401732:	401c                	lw	a5,0(s0)
20401734:	8b89                	andi	a5,a5,2
20401736:	e78d                	bnez	a5,20401760 <_printf_i+0x298>
20401738:	47b2                	lw	a5,12(sp)
2040173a:	4448                	lw	a0,12(s0)
2040173c:	f2f553e3          	bge	a0,a5,20401662 <_printf_i+0x19a>
20401740:	853e                	mv	a0,a5
20401742:	b705                	j	20401662 <_printf_i+0x19a>
20401744:	4685                	li	a3,1
20401746:	8656                	mv	a2,s5
20401748:	85ca                	mv	a1,s2
2040174a:	8526                	mv	a0,s1
2040174c:	9982                	jalr	s3
2040174e:	f16509e3          	beq	a0,s6,20401660 <_printf_i+0x198>
20401752:	0a05                	addi	s4,s4,1
20401754:	445c                	lw	a5,12(s0)
20401756:	4732                	lw	a4,12(sp)
20401758:	8f99                	sub	a5,a5,a4
2040175a:	fefa45e3          	blt	s4,a5,20401744 <_printf_i+0x27c>
2040175e:	bfe9                	j	20401738 <_printf_i+0x270>
20401760:	4a01                	li	s4,0
20401762:	01940a93          	addi	s5,s0,25
20401766:	5b7d                	li	s6,-1
20401768:	b7f5                	j	20401754 <_printf_i+0x28c>

2040176a <_read_r>:
_read_r():
2040176a:	1141                	addi	sp,sp,-16
2040176c:	c422                	sw	s0,8(sp)
2040176e:	842a                	mv	s0,a0
20401770:	852e                	mv	a0,a1
20401772:	85b2                	mv	a1,a2
20401774:	8636                	mv	a2,a3
20401776:	0801a823          	sw	zero,144(gp) # 80000fd8 <errno>
2040177a:	c606                	sw	ra,12(sp)
2040177c:	2075                	jal	20401828 <_read>
2040177e:	57fd                	li	a5,-1
20401780:	00f51763          	bne	a0,a5,2040178e <_read_r+0x24>
20401784:	09018793          	addi	a5,gp,144 # 80000fd8 <errno>
20401788:	439c                	lw	a5,0(a5)
2040178a:	c391                	beqz	a5,2040178e <_read_r+0x24>
2040178c:	c01c                	sw	a5,0(s0)
2040178e:	40b2                	lw	ra,12(sp)
20401790:	4422                	lw	s0,8(sp)
20401792:	0141                	addi	sp,sp,16
20401794:	8082                	ret

20401796 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401796:	1101                	addi	sp,sp,-32
20401798:	ce06                	sw	ra,28(sp)
2040179a:	cc22                	sw	s0,24(sp)
2040179c:	1000                	addi	s0,sp,32
2040179e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
204017a2:	224d                	jal	20401944 <__errno>
204017a4:	872a                	mv	a4,a0
204017a6:	05800793          	li	a5,88
204017aa:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
204017ac:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
204017ae:	853e                	mv	a0,a5
204017b0:	40f2                	lw	ra,28(sp)
204017b2:	4462                	lw	s0,24(sp)
204017b4:	6105                	addi	sp,sp,32
204017b6:	8082                	ret

204017b8 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
204017b8:	1101                	addi	sp,sp,-32
204017ba:	ce06                	sw	ra,28(sp)
204017bc:	cc22                	sw	s0,24(sp)
204017be:	1000                	addi	s0,sp,32
204017c0:	fea42623          	sw	a0,-20(s0)
204017c4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
204017c8:	2ab5                	jal	20401944 <__errno>
204017ca:	872a                	mv	a4,a0
204017cc:	fa800793          	li	a5,-88
204017d0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
204017d2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
204017d4:	853e                	mv	a0,a5
204017d6:	40f2                	lw	ra,28(sp)
204017d8:	4462                	lw	s0,24(sp)
204017da:	6105                	addi	sp,sp,32
204017dc:	8082                	ret

204017de <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
204017de:	1101                	addi	sp,sp,-32
204017e0:	ce22                	sw	s0,28(sp)
204017e2:	1000                	addi	s0,sp,32
204017e4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
204017e8:	fec42783          	lw	a5,-20(s0)
204017ec:	17fd                	addi	a5,a5,-1
204017ee:	0017b793          	seqz	a5,a5
204017f2:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
204017f6:	853e                	mv	a0,a5
204017f8:	4472                	lw	s0,28(sp)
204017fa:	6105                	addi	sp,sp,32
204017fc:	8082                	ret

204017fe <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
204017fe:	1101                	addi	sp,sp,-32
20401800:	ce06                	sw	ra,28(sp)
20401802:	cc22                	sw	s0,24(sp)
20401804:	1000                	addi	s0,sp,32
20401806:	fea42623          	sw	a0,-20(s0)
2040180a:	feb42423          	sw	a1,-24(s0)
2040180e:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401812:	2a0d                	jal	20401944 <__errno>
20401814:	872a                	mv	a4,a0
20401816:	05800793          	li	a5,88
2040181a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040181c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040181e:	853e                	mv	a0,a5
20401820:	40f2                	lw	ra,28(sp)
20401822:	4462                	lw	s0,24(sp)
20401824:	6105                	addi	sp,sp,32
20401826:	8082                	ret

20401828 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401828:	1101                	addi	sp,sp,-32
2040182a:	ce06                	sw	ra,28(sp)
2040182c:	cc22                	sw	s0,24(sp)
2040182e:	1000                	addi	s0,sp,32
20401830:	fea42623          	sw	a0,-20(s0)
20401834:	feb42423          	sw	a1,-24(s0)
20401838:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
2040183c:	2221                	jal	20401944 <__errno>
2040183e:	872a                	mv	a4,a0
20401840:	05800793          	li	a5,88
20401844:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401846:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401848:	853e                	mv	a0,a5
2040184a:	40f2                	lw	ra,28(sp)
2040184c:	4462                	lw	s0,24(sp)
2040184e:	6105                	addi	sp,sp,32
20401850:	8082                	ret

20401852 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401852:	7179                	addi	sp,sp,-48
20401854:	d622                	sw	s0,44(sp)
20401856:	1800                	addi	s0,sp,48
20401858:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
2040185c:	800007b7          	lui	a5,0x80000
20401860:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffeb74>
20401864:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401868:	49418713          	addi	a4,gp,1172 # 800013dc <_sp>
2040186c:	800027b7          	lui	a5,0x80002
20401870:	bdc78793          	addi	a5,a5,-1060 # 80001bdc <metal_segment_heap_target_end+0x0>
20401874:	00f71463          	bne	a4,a5,2040187c <_sbrk+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401878:	57fd                	li	a5,-1
2040187a:	a0a9                	j	204018c4 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
2040187c:	800007b7          	lui	a5,0x80000
20401880:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffeb74>
20401884:	fdc42783          	lw	a5,-36(s0)
20401888:	973e                	add	a4,a4,a5
2040188a:	800027b7          	lui	a5,0x80002
2040188e:	bdc78793          	addi	a5,a5,-1060 # 80001bdc <metal_segment_heap_target_end+0x0>
20401892:	02f77063          	bgeu	a4,a5,204018b2 <_sbrk+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401896:	800007b7          	lui	a5,0x80000
2040189a:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffeb74>
2040189e:	fdc42783          	lw	a5,-36(s0)
204018a2:	973e                	add	a4,a4,a5
204018a4:	800007b7          	lui	a5,0x80000
204018a8:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffeb74>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
204018ac:	fec42783          	lw	a5,-20(s0)
204018b0:	a811                	j	204018c4 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
204018b2:	800007b7          	lui	a5,0x80000
204018b6:	80002737          	lui	a4,0x80002
204018ba:	bdc70713          	addi	a4,a4,-1060 # 80001bdc <metal_segment_heap_target_end+0x0>
204018be:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffeb74>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
204018c2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
204018c4:	853e                	mv	a0,a5
204018c6:	5432                	lw	s0,44(sp)
204018c8:	6145                	addi	sp,sp,48
204018ca:	8082                	ret

204018cc <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
204018cc:	7179                	addi	sp,sp,-48
204018ce:	d606                	sw	ra,44(sp)
204018d0:	d422                	sw	s0,40(sp)
204018d2:	1800                	addi	s0,sp,48
204018d4:	fca42e23          	sw	a0,-36(s0)
204018d8:	fcb42c23          	sw	a1,-40(s0)
204018dc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
204018e0:	fdc42703          	lw	a4,-36(s0)
204018e4:	4785                	li	a5,1
204018e6:	00f70963          	beq	a4,a5,204018f8 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
204018ea:	28a9                	jal	20401944 <__errno>
204018ec:	872a                	mv	a4,a0
204018ee:	05800793          	li	a5,88
204018f2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204018f4:	57fd                	li	a5,-1
204018f6:	a82d                	j	20401930 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204018f8:	fd842783          	lw	a5,-40(s0)
204018fc:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401900:	fe042623          	sw	zero,-20(s0)
20401904:	a839                	j	20401922 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401906:	fe842703          	lw	a4,-24(s0)
2040190a:	fec42783          	lw	a5,-20(s0)
2040190e:	97ba                	add	a5,a5,a4
20401910:	0007c783          	lbu	a5,0(a5)
20401914:	853e                	mv	a0,a5
20401916:	2c91                	jal	20401b6a <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401918:	fec42783          	lw	a5,-20(s0)
2040191c:	0785                	addi	a5,a5,1
2040191e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401922:	fec42703          	lw	a4,-20(s0)
20401926:	fd442783          	lw	a5,-44(s0)
2040192a:	fcf76ee3          	bltu	a4,a5,20401906 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
2040192e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401930:	853e                	mv	a0,a5
20401932:	50b2                	lw	ra,44(sp)
20401934:	5422                	lw	s0,40(sp)
20401936:	6145                	addi	sp,sp,48
20401938:	8082                	ret

2040193a <atexit>:
atexit():
2040193a:	85aa                	mv	a1,a0
2040193c:	4681                	li	a3,0
2040193e:	4601                	li	a2,0
20401940:	4501                	li	a0,0
20401942:	a8f1                	j	20401a1e <__register_exitproc>

20401944 <__errno>:
__errno():
20401944:	5fbff797          	auipc	a5,0x5fbff
20401948:	e0478793          	addi	a5,a5,-508 # 80000748 <_impure_ptr>
2040194c:	4388                	lw	a0,0(a5)
2040194e:	8082                	ret

20401950 <exit>:
exit():
20401950:	1141                	addi	sp,sp,-16
20401952:	c422                	sw	s0,8(sp)
20401954:	c606                	sw	ra,12(sp)
20401956:	00000797          	auipc	a5,0x0
2040195a:	14c78793          	addi	a5,a5,332 # 20401aa2 <__call_exitprocs>
2040195e:	842a                	mv	s0,a0
20401960:	c399                	beqz	a5,20401966 <exit+0x16>
20401962:	4581                	li	a1,0
20401964:	2a3d                	jal	20401aa2 <__call_exitprocs>
20401966:	5fbff797          	auipc	a5,0x5fbff
2040196a:	de678793          	addi	a5,a5,-538 # 8000074c <_global_impure_ptr>
2040196e:	4388                	lw	a0,0(a5)
20401970:	551c                	lw	a5,40(a0)
20401972:	c391                	beqz	a5,20401976 <exit+0x26>
20401974:	9782                	jalr	a5
20401976:	8522                	mv	a0,s0
20401978:	077030ef          	jal	ra,204051ee <_exit>

2040197c <__libc_fini_array>:
__libc_fini_array():
2040197c:	1141                	addi	sp,sp,-16
2040197e:	00004797          	auipc	a5,0x4
20401982:	de678793          	addi	a5,a5,-538 # 20405764 <__fini_array_end>
20401986:	c422                	sw	s0,8(sp)
20401988:	00004417          	auipc	s0,0x4
2040198c:	ddc40413          	addi	s0,s0,-548 # 20405764 <__fini_array_end>
20401990:	8c1d                	sub	s0,s0,a5
20401992:	c226                	sw	s1,4(sp)
20401994:	c606                	sw	ra,12(sp)
20401996:	8409                	srai	s0,s0,0x2
20401998:	84be                	mv	s1,a5
2040199a:	e411                	bnez	s0,204019a6 <__libc_fini_array+0x2a>
2040199c:	40b2                	lw	ra,12(sp)
2040199e:	4422                	lw	s0,8(sp)
204019a0:	4492                	lw	s1,4(sp)
204019a2:	0141                	addi	sp,sp,16
204019a4:	8082                	ret
204019a6:	147d                	addi	s0,s0,-1
204019a8:	00241793          	slli	a5,s0,0x2
204019ac:	97a6                	add	a5,a5,s1
204019ae:	439c                	lw	a5,0(a5)
204019b0:	9782                	jalr	a5
204019b2:	b7e5                	j	2040199a <__libc_fini_array+0x1e>

204019b4 <__libc_init_array>:
__libc_init_array():
204019b4:	1141                	addi	sp,sp,-16
204019b6:	00004797          	auipc	a5,0x4
204019ba:	daa78793          	addi	a5,a5,-598 # 20405760 <__init_array_start>
204019be:	c422                	sw	s0,8(sp)
204019c0:	00004417          	auipc	s0,0x4
204019c4:	da040413          	addi	s0,s0,-608 # 20405760 <__init_array_start>
204019c8:	8c1d                	sub	s0,s0,a5
204019ca:	c226                	sw	s1,4(sp)
204019cc:	c04a                	sw	s2,0(sp)
204019ce:	c606                	sw	ra,12(sp)
204019d0:	8409                	srai	s0,s0,0x2
204019d2:	4481                	li	s1,0
204019d4:	893e                	mv	s2,a5
204019d6:	02849663          	bne	s1,s0,20401a02 <__libc_init_array+0x4e>
204019da:	00004797          	auipc	a5,0x4
204019de:	d8678793          	addi	a5,a5,-634 # 20405760 <__init_array_start>
204019e2:	00004417          	auipc	s0,0x4
204019e6:	d8240413          	addi	s0,s0,-638 # 20405764 <__fini_array_end>
204019ea:	8c1d                	sub	s0,s0,a5
204019ec:	8409                	srai	s0,s0,0x2
204019ee:	4481                	li	s1,0
204019f0:	893e                	mv	s2,a5
204019f2:	00849f63          	bne	s1,s0,20401a10 <__libc_init_array+0x5c>
204019f6:	40b2                	lw	ra,12(sp)
204019f8:	4422                	lw	s0,8(sp)
204019fa:	4492                	lw	s1,4(sp)
204019fc:	4902                	lw	s2,0(sp)
204019fe:	0141                	addi	sp,sp,16
20401a00:	8082                	ret
20401a02:	00249793          	slli	a5,s1,0x2
20401a06:	97ca                	add	a5,a5,s2
20401a08:	439c                	lw	a5,0(a5)
20401a0a:	0485                	addi	s1,s1,1
20401a0c:	9782                	jalr	a5
20401a0e:	b7e1                	j	204019d6 <__libc_init_array+0x22>
20401a10:	00249793          	slli	a5,s1,0x2
20401a14:	97ca                	add	a5,a5,s2
20401a16:	439c                	lw	a5,0(a5)
20401a18:	0485                	addi	s1,s1,1
20401a1a:	9782                	jalr	a5
20401a1c:	bfd9                	j	204019f2 <__libc_init_array+0x3e>

20401a1e <__register_exitproc>:
__register_exitproc():
20401a1e:	5fbff797          	auipc	a5,0x5fbff
20401a22:	d5a78793          	addi	a5,a5,-678 # 80000778 <_global_atexit>
20401a26:	439c                	lw	a5,0(a5)
20401a28:	8e2a                	mv	t3,a0
20401a2a:	e38d                	bnez	a5,20401a4c <__register_exitproc+0x2e>
20401a2c:	00418713          	addi	a4,gp,4 # 80000f4c <_global_atexit0>
20401a30:	5fbff797          	auipc	a5,0x5fbff
20401a34:	d4e7a423          	sw	a4,-696(a5) # 80000778 <_global_atexit>
20401a38:	dfbfe517          	auipc	a0,0xdfbfe
20401a3c:	5c850513          	addi	a0,a0,1480 # 0 <__metal_boot_hart>
20401a40:	87ba                	mv	a5,a4
20401a42:	c509                	beqz	a0,20401a4c <__register_exitproc+0x2e>
20401a44:	411c                	lw	a5,0(a0)
20401a46:	08f1a623          	sw	a5,140(gp) # 80000fd4 <_global_atexit0+0x88>
20401a4a:	87ba                	mv	a5,a4
20401a4c:	43d8                	lw	a4,4(a5)
20401a4e:	487d                	li	a6,31
20401a50:	557d                	li	a0,-1
20401a52:	04e84763          	blt	a6,a4,20401aa0 <__register_exitproc+0x82>
20401a56:	020e0e63          	beqz	t3,20401a92 <__register_exitproc+0x74>
20401a5a:	0887a803          	lw	a6,136(a5)
20401a5e:	04080163          	beqz	a6,20401aa0 <__register_exitproc+0x82>
20401a62:	00271893          	slli	a7,a4,0x2
20401a66:	98c2                	add	a7,a7,a6
20401a68:	00c8a023          	sw	a2,0(a7)
20401a6c:	10082303          	lw	t1,256(a6)
20401a70:	4605                	li	a2,1
20401a72:	00e61633          	sll	a2,a2,a4
20401a76:	00c36333          	or	t1,t1,a2
20401a7a:	10682023          	sw	t1,256(a6)
20401a7e:	08d8a023          	sw	a3,128(a7)
20401a82:	4689                	li	a3,2
20401a84:	00de1763          	bne	t3,a3,20401a92 <__register_exitproc+0x74>
20401a88:	10482683          	lw	a3,260(a6)
20401a8c:	8e55                	or	a2,a2,a3
20401a8e:	10c82223          	sw	a2,260(a6)
20401a92:	00170693          	addi	a3,a4,1
20401a96:	070a                	slli	a4,a4,0x2
20401a98:	c3d4                	sw	a3,4(a5)
20401a9a:	97ba                	add	a5,a5,a4
20401a9c:	c78c                	sw	a1,8(a5)
20401a9e:	4501                	li	a0,0
20401aa0:	8082                	ret

20401aa2 <__call_exitprocs>:
__call_exitprocs():
20401aa2:	7179                	addi	sp,sp,-48
20401aa4:	cc52                	sw	s4,24(sp)
20401aa6:	ca56                	sw	s5,20(sp)
20401aa8:	c85a                	sw	s6,16(sp)
20401aaa:	c65e                	sw	s7,12(sp)
20401aac:	d606                	sw	ra,44(sp)
20401aae:	d422                	sw	s0,40(sp)
20401ab0:	d226                	sw	s1,36(sp)
20401ab2:	d04a                	sw	s2,32(sp)
20401ab4:	ce4e                	sw	s3,28(sp)
20401ab6:	c462                	sw	s8,8(sp)
20401ab8:	8b2a                	mv	s6,a0
20401aba:	8a2e                	mv	s4,a1
20401abc:	5fbffa97          	auipc	s5,0x5fbff
20401ac0:	cbca8a93          	addi	s5,s5,-836 # 80000778 <_global_atexit>
20401ac4:	4b85                	li	s7,1
20401ac6:	000aa403          	lw	s0,0(s5)
20401aca:	c811                	beqz	s0,20401ade <__call_exitprocs+0x3c>
20401acc:	4044                	lw	s1,4(s0)
20401ace:	08842983          	lw	s3,136(s0)
20401ad2:	fff48913          	addi	s2,s1,-1
20401ad6:	048a                	slli	s1,s1,0x2
20401ad8:	94a2                	add	s1,s1,s0
20401ada:	00095e63          	bgez	s2,20401af6 <__call_exitprocs+0x54>
20401ade:	50b2                	lw	ra,44(sp)
20401ae0:	5422                	lw	s0,40(sp)
20401ae2:	5492                	lw	s1,36(sp)
20401ae4:	5902                	lw	s2,32(sp)
20401ae6:	49f2                	lw	s3,28(sp)
20401ae8:	4a62                	lw	s4,24(sp)
20401aea:	4ad2                	lw	s5,20(sp)
20401aec:	4b42                	lw	s6,16(sp)
20401aee:	4bb2                	lw	s7,12(sp)
20401af0:	4c22                	lw	s8,8(sp)
20401af2:	6145                	addi	sp,sp,48
20401af4:	8082                	ret
20401af6:	000a0e63          	beqz	s4,20401b12 <__call_exitprocs+0x70>
20401afa:	00099563          	bnez	s3,20401b04 <__call_exitprocs+0x62>
20401afe:	197d                	addi	s2,s2,-1
20401b00:	14f1                	addi	s1,s1,-4
20401b02:	bfe1                	j	20401ada <__call_exitprocs+0x38>
20401b04:	00291793          	slli	a5,s2,0x2
20401b08:	97ce                	add	a5,a5,s3
20401b0a:	0807a783          	lw	a5,128(a5)
20401b0e:	ff4798e3          	bne	a5,s4,20401afe <__call_exitprocs+0x5c>
20401b12:	4058                	lw	a4,4(s0)
20401b14:	40dc                	lw	a5,4(s1)
20401b16:	177d                	addi	a4,a4,-1
20401b18:	03271863          	bne	a4,s2,20401b48 <__call_exitprocs+0xa6>
20401b1c:	01242223          	sw	s2,4(s0)
20401b20:	dff9                	beqz	a5,20401afe <__call_exitprocs+0x5c>
20401b22:	00442c03          	lw	s8,4(s0)
20401b26:	00098863          	beqz	s3,20401b36 <__call_exitprocs+0x94>
20401b2a:	1009a683          	lw	a3,256(s3)
20401b2e:	012b9733          	sll	a4,s7,s2
20401b32:	8ef9                	and	a3,a3,a4
20401b34:	ee89                	bnez	a3,20401b4e <__call_exitprocs+0xac>
20401b36:	9782                	jalr	a5
20401b38:	4058                	lw	a4,4(s0)
20401b3a:	000aa783          	lw	a5,0(s5)
20401b3e:	f98714e3          	bne	a4,s8,20401ac6 <__call_exitprocs+0x24>
20401b42:	faf40ee3          	beq	s0,a5,20401afe <__call_exitprocs+0x5c>
20401b46:	b741                	j	20401ac6 <__call_exitprocs+0x24>
20401b48:	0004a223          	sw	zero,4(s1)
20401b4c:	bfd1                	j	20401b20 <__call_exitprocs+0x7e>
20401b4e:	00291693          	slli	a3,s2,0x2
20401b52:	96ce                	add	a3,a3,s3
20401b54:	428c                	lw	a1,0(a3)
20401b56:	1049a683          	lw	a3,260(s3)
20401b5a:	8f75                	and	a4,a4,a3
20401b5c:	e701                	bnez	a4,20401b64 <__call_exitprocs+0xc2>
20401b5e:	855a                	mv	a0,s6
20401b60:	9782                	jalr	a5
20401b62:	bfd9                	j	20401b38 <__call_exitprocs+0x96>
20401b64:	852e                	mv	a0,a1
20401b66:	9782                	jalr	a5
20401b68:	bfc1                	j	20401b38 <__call_exitprocs+0x96>

20401b6a <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401b6a:	1101                	addi	sp,sp,-32
20401b6c:	ce06                	sw	ra,28(sp)
20401b6e:	cc22                	sw	s0,24(sp)
20401b70:	1000                	addi	s0,sp,32
20401b72:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401b76:	fec42703          	lw	a4,-20(s0)
20401b7a:	47a9                	li	a5,10
20401b7c:	00f71463          	bne	a4,a5,20401b84 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401b80:	4535                	li	a0,13
20401b82:	2811                	jal	20401b96 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401b84:	fec42503          	lw	a0,-20(s0)
20401b88:	2039                	jal	20401b96 <metal_tty_putc_raw>
20401b8a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401b8c:	853e                	mv	a0,a5
20401b8e:	40f2                	lw	ra,28(sp)
20401b90:	4462                	lw	s0,24(sp)
20401b92:	6105                	addi	sp,sp,32
20401b94:	8082                	ret

20401b96 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401b96:	1101                	addi	sp,sp,-32
20401b98:	ce06                	sw	ra,28(sp)
20401b9a:	cc22                	sw	s0,24(sp)
20401b9c:	1000                	addi	s0,sp,32
20401b9e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401ba2:	fec42583          	lw	a1,-20(s0)
20401ba6:	800007b7          	lui	a5,0x80000
20401baa:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20401bae:	28b1                	jal	20401c0a <metal_uart_putc>
20401bb0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401bb2:	853e                	mv	a0,a5
20401bb4:	40f2                	lw	ra,28(sp)
20401bb6:	4462                	lw	s0,24(sp)
20401bb8:	6105                	addi	sp,sp,32
20401bba:	8082                	ret

20401bbc <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401bbc:	1141                	addi	sp,sp,-16
20401bbe:	c606                	sw	ra,12(sp)
20401bc0:	c422                	sw	s0,8(sp)
20401bc2:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401bc4:	67f1                	lui	a5,0x1c
20401bc6:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401bca:	800007b7          	lui	a5,0x80000
20401bce:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20401bd2:	2031                	jal	20401bde <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401bd4:	0001                	nop
20401bd6:	40b2                	lw	ra,12(sp)
20401bd8:	4422                	lw	s0,8(sp)
20401bda:	0141                	addi	sp,sp,16
20401bdc:	8082                	ret

20401bde <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401bde:	1101                	addi	sp,sp,-32
20401be0:	ce06                	sw	ra,28(sp)
20401be2:	cc22                	sw	s0,24(sp)
20401be4:	1000                	addi	s0,sp,32
20401be6:	fea42623          	sw	a0,-20(s0)
20401bea:	feb42423          	sw	a1,-24(s0)
20401bee:	fec42783          	lw	a5,-20(s0)
20401bf2:	439c                	lw	a5,0(a5)
20401bf4:	439c                	lw	a5,0(a5)
20401bf6:	fe842583          	lw	a1,-24(s0)
20401bfa:	fec42503          	lw	a0,-20(s0)
20401bfe:	9782                	jalr	a5
20401c00:	0001                	nop
20401c02:	40f2                	lw	ra,28(sp)
20401c04:	4462                	lw	s0,24(sp)
20401c06:	6105                	addi	sp,sp,32
20401c08:	8082                	ret

20401c0a <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401c0a:	1101                	addi	sp,sp,-32
20401c0c:	ce06                	sw	ra,28(sp)
20401c0e:	cc22                	sw	s0,24(sp)
20401c10:	1000                	addi	s0,sp,32
20401c12:	fea42623          	sw	a0,-20(s0)
20401c16:	feb42423          	sw	a1,-24(s0)
20401c1a:	fec42783          	lw	a5,-20(s0)
20401c1e:	439c                	lw	a5,0(a5)
20401c20:	43dc                	lw	a5,4(a5)
20401c22:	fe842583          	lw	a1,-24(s0)
20401c26:	fec42503          	lw	a0,-20(s0)
20401c2a:	9782                	jalr	a5
20401c2c:	87aa                	mv	a5,a0
20401c2e:	853e                	mv	a0,a5
20401c30:	40f2                	lw	ra,28(sp)
20401c32:	4462                	lw	s0,24(sp)
20401c34:	6105                	addi	sp,sp,32
20401c36:	8082                	ret

20401c38 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401c38:	1101                	addi	sp,sp,-32
20401c3a:	ce06                	sw	ra,28(sp)
20401c3c:	cc22                	sw	s0,24(sp)
20401c3e:	1000                	addi	s0,sp,32
20401c40:	fea42623          	sw	a0,-20(s0)
20401c44:	feb42423          	sw	a1,-24(s0)
20401c48:	fec42783          	lw	a5,-20(s0)
20401c4c:	439c                	lw	a5,0(a5)
20401c4e:	4bdc                	lw	a5,20(a5)
20401c50:	fe842583          	lw	a1,-24(s0)
20401c54:	fec42503          	lw	a0,-20(s0)
20401c58:	9782                	jalr	a5
20401c5a:	87aa                	mv	a5,a0
20401c5c:	853e                	mv	a0,a5
20401c5e:	40f2                	lw	ra,28(sp)
20401c60:	4462                	lw	s0,24(sp)
20401c62:	6105                	addi	sp,sp,32
20401c64:	8082                	ret

20401c66 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401c66:	1101                	addi	sp,sp,-32
20401c68:	ce22                	sw	s0,28(sp)
20401c6a:	1000                	addi	s0,sp,32
20401c6c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401c70:	fec42703          	lw	a4,-20(s0)
20401c74:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401c78:	00f71563          	bne	a4,a5,20401c82 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401c7c:	020007b7          	lui	a5,0x2000
20401c80:	a011                	j	20401c84 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401c82:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401c84:	853e                	mv	a0,a5
20401c86:	4472                	lw	s0,28(sp)
20401c88:	6105                	addi	sp,sp,32
20401c8a:	8082                	ret

20401c8c <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401c8c:	1101                	addi	sp,sp,-32
20401c8e:	ce22                	sw	s0,28(sp)
20401c90:	1000                	addi	s0,sp,32
20401c92:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401c96:	fec42703          	lw	a4,-20(s0)
20401c9a:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401c9e:	00f71463          	bne	a4,a5,20401ca6 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401ca2:	4789                	li	a5,2
20401ca4:	a011                	j	20401ca8 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401ca6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401ca8:	853e                	mv	a0,a5
20401caa:	4472                	lw	s0,28(sp)
20401cac:	6105                	addi	sp,sp,32
20401cae:	8082                	ret

20401cb0 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401cb0:	1101                	addi	sp,sp,-32
20401cb2:	ce22                	sw	s0,28(sp)
20401cb4:	1000                	addi	s0,sp,32
20401cb6:	fea42623          	sw	a0,-20(s0)
20401cba:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401cbe:	fe842783          	lw	a5,-24(s0)
20401cc2:	e791                	bnez	a5,20401cce <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401cc4:	800007b7          	lui	a5,0x80000
20401cc8:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe494>
20401ccc:	a821                	j	20401ce4 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401cce:	fe842703          	lw	a4,-24(s0)
20401cd2:	4785                	li	a5,1
20401cd4:	00f71763          	bne	a4,a5,20401ce2 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401cd8:	800007b7          	lui	a5,0x80000
20401cdc:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe494>
20401ce0:	a011                	j	20401ce4 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401ce2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20401ce4:	853e                	mv	a0,a5
20401ce6:	4472                	lw	s0,28(sp)
20401ce8:	6105                	addi	sp,sp,32
20401cea:	8082                	ret

20401cec <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401cec:	1101                	addi	sp,sp,-32
20401cee:	ce22                	sw	s0,28(sp)
20401cf0:	1000                	addi	s0,sp,32
20401cf2:	fea42623          	sw	a0,-20(s0)
20401cf6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401cfa:	fe842783          	lw	a5,-24(s0)
20401cfe:	e399                	bnez	a5,20401d04 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20401d00:	478d                	li	a5,3
20401d02:	a809                	j	20401d14 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401d04:	fe842703          	lw	a4,-24(s0)
20401d08:	4785                	li	a5,1
20401d0a:	00f71463          	bne	a4,a5,20401d12 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20401d0e:	479d                	li	a5,7
20401d10:	a011                	j	20401d14 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401d12:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20401d14:	853e                	mv	a0,a5
20401d16:	4472                	lw	s0,28(sp)
20401d18:	6105                	addi	sp,sp,32
20401d1a:	8082                	ret

20401d1c <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401d1c:	715d                	addi	sp,sp,-80
20401d1e:	c686                	sw	ra,76(sp)
20401d20:	c4a2                	sw	s0,72(sp)
20401d22:	c2ca                	sw	s2,68(sp)
20401d24:	c0ce                	sw	s3,64(sp)
20401d26:	de52                	sw	s4,60(sp)
20401d28:	dc56                	sw	s5,56(sp)
20401d2a:	da5a                	sw	s6,52(sp)
20401d2c:	d85e                	sw	s7,48(sp)
20401d2e:	d662                	sw	s8,44(sp)
20401d30:	d466                	sw	s9,40(sp)
20401d32:	0880                	addi	s0,sp,80
20401d34:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401d38:	fbc42783          	lw	a5,-68(s0)
20401d3c:	853e                	mv	a0,a5
20401d3e:	3725                	jal	20401c66 <__metal_driver_sifive_clint0_control_base>
20401d40:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401d44:	fcc42703          	lw	a4,-52(s0)
20401d48:	67b1                	lui	a5,0xc
20401d4a:	17f1                	addi	a5,a5,-4
20401d4c:	97ba                	add	a5,a5,a4
20401d4e:	439c                	lw	a5,0(a5)
20401d50:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401d54:	fcc42703          	lw	a4,-52(s0)
20401d58:	67b1                	lui	a5,0xc
20401d5a:	17e1                	addi	a5,a5,-8
20401d5c:	97ba                	add	a5,a5,a4
20401d5e:	439c                	lw	a5,0(a5)
20401d60:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401d64:	fcc42703          	lw	a4,-52(s0)
20401d68:	67b1                	lui	a5,0xc
20401d6a:	17f1                	addi	a5,a5,-4
20401d6c:	97ba                	add	a5,a5,a4
20401d6e:	439c                	lw	a5,0(a5)
20401d70:	fc842703          	lw	a4,-56(s0)
20401d74:	fcf718e3          	bne	a4,a5,20401d44 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401d78:	fc842783          	lw	a5,-56(s0)
20401d7c:	8c3e                	mv	s8,a5
20401d7e:	4c81                	li	s9,0
20401d80:	000c1993          	slli	s3,s8,0x0
20401d84:	4901                	li	s2,0
20401d86:	fc442783          	lw	a5,-60(s0)
20401d8a:	8a3e                	mv	s4,a5
20401d8c:	4a81                	li	s5,0
20401d8e:	01496b33          	or	s6,s2,s4
20401d92:	0159ebb3          	or	s7,s3,s5
20401d96:	87da                	mv	a5,s6
20401d98:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401d9a:	853e                	mv	a0,a5
20401d9c:	85c2                	mv	a1,a6
20401d9e:	40b6                	lw	ra,76(sp)
20401da0:	4426                	lw	s0,72(sp)
20401da2:	4916                	lw	s2,68(sp)
20401da4:	4986                	lw	s3,64(sp)
20401da6:	5a72                	lw	s4,60(sp)
20401da8:	5ae2                	lw	s5,56(sp)
20401daa:	5b52                	lw	s6,52(sp)
20401dac:	5bc2                	lw	s7,48(sp)
20401dae:	5c32                	lw	s8,44(sp)
20401db0:	5ca2                	lw	s9,40(sp)
20401db2:	6161                	addi	sp,sp,80
20401db4:	8082                	ret

20401db6 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401db6:	7179                	addi	sp,sp,-48
20401db8:	d606                	sw	ra,44(sp)
20401dba:	d422                	sw	s0,40(sp)
20401dbc:	d24a                	sw	s2,36(sp)
20401dbe:	d04e                	sw	s3,32(sp)
20401dc0:	1800                	addi	s0,sp,48
20401dc2:	fca42e23          	sw	a0,-36(s0)
20401dc6:	fcb42c23          	sw	a1,-40(s0)
20401dca:	fcc42823          	sw	a2,-48(s0)
20401dce:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401dd2:	fdc42783          	lw	a5,-36(s0)
20401dd6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401dda:	fec42783          	lw	a5,-20(s0)
20401dde:	853e                	mv	a0,a5
20401de0:	3559                	jal	20401c66 <__metal_driver_sifive_clint0_control_base>
20401de2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401de6:	fd842783          	lw	a5,-40(s0)
20401dea:	078e                	slli	a5,a5,0x3
20401dec:	873e                	mv	a4,a5
20401dee:	fe842783          	lw	a5,-24(s0)
20401df2:	973e                	add	a4,a4,a5
20401df4:	6791                	lui	a5,0x4
20401df6:	0791                	addi	a5,a5,4
20401df8:	97ba                	add	a5,a5,a4
20401dfa:	873e                	mv	a4,a5
20401dfc:	57fd                	li	a5,-1
20401dfe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401e00:	fd842783          	lw	a5,-40(s0)
20401e04:	078e                	slli	a5,a5,0x3
20401e06:	873e                	mv	a4,a5
20401e08:	fe842783          	lw	a5,-24(s0)
20401e0c:	973e                	add	a4,a4,a5
20401e0e:	6791                	lui	a5,0x4
20401e10:	97ba                	add	a5,a5,a4
20401e12:	873e                	mv	a4,a5
20401e14:	fd042783          	lw	a5,-48(s0)
20401e18:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401e1a:	fd442783          	lw	a5,-44(s0)
20401e1e:	0007d913          	srli	s2,a5,0x0
20401e22:	4981                	li	s3,0
20401e24:	fd842783          	lw	a5,-40(s0)
20401e28:	078e                	slli	a5,a5,0x3
20401e2a:	873e                	mv	a4,a5
20401e2c:	fe842783          	lw	a5,-24(s0)
20401e30:	973e                	add	a4,a4,a5
20401e32:	6791                	lui	a5,0x4
20401e34:	0791                	addi	a5,a5,4
20401e36:	97ba                	add	a5,a5,a4
20401e38:	874a                	mv	a4,s2
20401e3a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401e3c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401e3e:	853e                	mv	a0,a5
20401e40:	50b2                	lw	ra,44(sp)
20401e42:	5422                	lw	s0,40(sp)
20401e44:	5912                	lw	s2,36(sp)
20401e46:	5982                	lw	s3,32(sp)
20401e48:	6145                	addi	sp,sp,48
20401e4a:	8082                	ret

20401e4c <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401e4c:	1101                	addi	sp,sp,-32
20401e4e:	ce06                	sw	ra,28(sp)
20401e50:	cc22                	sw	s0,24(sp)
20401e52:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401e54:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401e58:	f14027f3          	csrr	a5,mhartid
20401e5c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401e60:	fec42783          	lw	a5,-20(s0)
20401e64:	853e                	mv	a0,a5
20401e66:	1f2030ef          	jal	ra,20405058 <metal_cpu_get>
20401e6a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401e6e:	fe842503          	lw	a0,-24(s0)
20401e72:	1c0030ef          	jal	ra,20405032 <metal_cpu_interrupt_controller>
20401e76:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401e78:	853e                	mv	a0,a5
20401e7a:	40f2                	lw	ra,28(sp)
20401e7c:	4462                	lw	s0,24(sp)
20401e7e:	6105                	addi	sp,sp,32
20401e80:	8082                	ret

20401e82 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401e82:	7139                	addi	sp,sp,-64
20401e84:	de06                	sw	ra,60(sp)
20401e86:	dc22                	sw	s0,56(sp)
20401e88:	0080                	addi	s0,sp,64
20401e8a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401e8e:	fcc42503          	lw	a0,-52(s0)
20401e92:	3bed                	jal	20401c8c <__metal_driver_sifive_clint0_num_interrupts>
20401e94:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401e98:	fcc42783          	lw	a5,-52(s0)
20401e9c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401ea0:	fe442783          	lw	a5,-28(s0)
20401ea4:	43dc                	lw	a5,4(a5)
20401ea6:	efa9                	bnez	a5,20401f00 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401ea8:	fe042623          	sw	zero,-20(s0)
20401eac:	a081                	j	20401eec <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401eae:	fec42583          	lw	a1,-20(s0)
20401eb2:	fcc42503          	lw	a0,-52(s0)
20401eb6:	3bed                	jal	20401cb0 <__metal_driver_sifive_clint0_interrupt_parents>
20401eb8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401ebc:	fec42583          	lw	a1,-20(s0)
20401ec0:	fcc42503          	lw	a0,-52(s0)
20401ec4:	3525                	jal	20401cec <__metal_driver_sifive_clint0_interrupt_lines>
20401ec6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401eca:	fe042783          	lw	a5,-32(s0)
20401ece:	439c                	lw	a5,0(a5)
20401ed0:	4fdc                	lw	a5,28(a5)
20401ed2:	fcc42683          	lw	a3,-52(s0)
20401ed6:	4601                	li	a2,0
20401ed8:	fdc42583          	lw	a1,-36(s0)
20401edc:	fe042503          	lw	a0,-32(s0)
20401ee0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401ee2:	fec42783          	lw	a5,-20(s0)
20401ee6:	0785                	addi	a5,a5,1
20401ee8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401eec:	fec42703          	lw	a4,-20(s0)
20401ef0:	fe842783          	lw	a5,-24(s0)
20401ef4:	faf74de3          	blt	a4,a5,20401eae <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401ef8:	fe442783          	lw	a5,-28(s0)
20401efc:	4705                	li	a4,1
20401efe:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401f00:	0001                	nop
20401f02:	50f2                	lw	ra,60(sp)
20401f04:	5462                	lw	s0,56(sp)
20401f06:	6121                	addi	sp,sp,64
20401f08:	8082                	ret

20401f0a <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401f0a:	7139                	addi	sp,sp,-64
20401f0c:	de06                	sw	ra,60(sp)
20401f0e:	dc22                	sw	s0,56(sp)
20401f10:	0080                	addi	s0,sp,64
20401f12:	fca42623          	sw	a0,-52(s0)
20401f16:	fcb42423          	sw	a1,-56(s0)
20401f1a:	fcc42223          	sw	a2,-60(s0)
20401f1e:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401f22:	57fd                	li	a5,-1
20401f24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401f28:	36c010ef          	jal	ra,20403294 <__metal_controller_interrupt_vector_mode>
20401f2c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401f30:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401f34:	3f21                	jal	20401e4c <_get_cpu_intc>
20401f36:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401f3a:	fcc42503          	lw	a0,-52(s0)
20401f3e:	33b9                	jal	20401c8c <__metal_driver_sifive_clint0_num_interrupts>
20401f40:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401f44:	fe042703          	lw	a4,-32(s0)
20401f48:	4785                	li	a5,1
20401f4a:	00f70863          	beq	a4,a5,20401f5a <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401f4e:	fe042783          	lw	a5,-32(s0)
20401f52:	c781                	beqz	a5,20401f5a <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401f54:	fec42783          	lw	a5,-20(s0)
20401f58:	a049                	j	20401fda <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401f5a:	fe042223          	sw	zero,-28(s0)
20401f5e:	a091                	j	20401fa2 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401f60:	fe442583          	lw	a1,-28(s0)
20401f64:	fcc42503          	lw	a0,-52(s0)
20401f68:	3351                	jal	20401cec <__metal_driver_sifive_clint0_interrupt_lines>
20401f6a:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401f6e:	fe442583          	lw	a1,-28(s0)
20401f72:	fcc42503          	lw	a0,-52(s0)
20401f76:	3b2d                	jal	20401cb0 <__metal_driver_sifive_clint0_interrupt_parents>
20401f78:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401f7c:	fdc42703          	lw	a4,-36(s0)
20401f80:	fe842783          	lw	a5,-24(s0)
20401f84:	00f71863          	bne	a4,a5,20401f94 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401f88:	fc842703          	lw	a4,-56(s0)
20401f8c:	fd442783          	lw	a5,-44(s0)
20401f90:	02f70063          	beq	a4,a5,20401fb0 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401f94:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20401f98:	fe442783          	lw	a5,-28(s0)
20401f9c:	0785                	addi	a5,a5,1
20401f9e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401fa2:	fe442703          	lw	a4,-28(s0)
20401fa6:	fd842783          	lw	a5,-40(s0)
20401faa:	faf74be3          	blt	a4,a5,20401f60 <__metal_driver_riscv_clint0_register+0x56>
20401fae:	a011                	j	20401fb2 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20401fb0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401fb2:	fe842783          	lw	a5,-24(s0)
20401fb6:	c385                	beqz	a5,20401fd6 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401fb8:	fe842783          	lw	a5,-24(s0)
20401fbc:	439c                	lw	a5,0(a5)
20401fbe:	4fdc                	lw	a5,28(a5)
20401fc0:	fc042683          	lw	a3,-64(s0)
20401fc4:	fc442603          	lw	a2,-60(s0)
20401fc8:	fc842583          	lw	a1,-56(s0)
20401fcc:	fe842503          	lw	a0,-24(s0)
20401fd0:	9782                	jalr	a5
20401fd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401fd6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401fda:	853e                	mv	a0,a5
20401fdc:	50f2                	lw	ra,60(sp)
20401fde:	5462                	lw	s0,56(sp)
20401fe0:	6121                	addi	sp,sp,64
20401fe2:	8082                	ret

20401fe4 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401fe4:	7179                	addi	sp,sp,-48
20401fe6:	d622                	sw	s0,44(sp)
20401fe8:	1800                	addi	s0,sp,48
20401fea:	fca42e23          	sw	a0,-36(s0)
20401fee:	fcb42c23          	sw	a1,-40(s0)
20401ff2:	fcc42a23          	sw	a2,-44(s0)
20401ff6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401ffa:	57fd                	li	a5,-1
20401ffc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402000:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402004:	853e                	mv	a0,a5
20402006:	5432                	lw	s0,44(sp)
20402008:	6145                	addi	sp,sp,48
2040200a:	8082                	ret

2040200c <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
2040200c:	1101                	addi	sp,sp,-32
2040200e:	ce06                	sw	ra,28(sp)
20402010:	cc22                	sw	s0,24(sp)
20402012:	1000                	addi	s0,sp,32
20402014:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402018:	27c010ef          	jal	ra,20403294 <__metal_controller_interrupt_vector_mode>
2040201c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
2040201e:	853e                	mv	a0,a5
20402020:	40f2                	lw	ra,28(sp)
20402022:	4462                	lw	s0,24(sp)
20402024:	6105                	addi	sp,sp,32
20402026:	8082                	ret

20402028 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402028:	7179                	addi	sp,sp,-48
2040202a:	d606                	sw	ra,44(sp)
2040202c:	d422                	sw	s0,40(sp)
2040202e:	1800                	addi	s0,sp,48
20402030:	fca42e23          	sw	a0,-36(s0)
20402034:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402038:	57fd                	li	a5,-1
2040203a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
2040203e:	3539                	jal	20401e4c <_get_cpu_intc>
20402040:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402044:	fe842783          	lw	a5,-24(s0)
20402048:	c395                	beqz	a5,2040206c <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
2040204a:	fd842703          	lw	a4,-40(s0)
2040204e:	4785                	li	a5,1
20402050:	00e7ef63          	bltu	a5,a4,2040206e <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402054:	fe842783          	lw	a5,-24(s0)
20402058:	439c                	lw	a5,0(a5)
2040205a:	43dc                	lw	a5,4(a5)
2040205c:	fd842583          	lw	a1,-40(s0)
20402060:	fe842503          	lw	a0,-24(s0)
20402064:	9782                	jalr	a5
20402066:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
2040206a:	a011                	j	2040206e <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
2040206c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
2040206e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402072:	853e                	mv	a0,a5
20402074:	50b2                	lw	ra,44(sp)
20402076:	5422                	lw	s0,40(sp)
20402078:	6145                	addi	sp,sp,48
2040207a:	8082                	ret

2040207c <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
2040207c:	7139                	addi	sp,sp,-64
2040207e:	de06                	sw	ra,60(sp)
20402080:	dc22                	sw	s0,56(sp)
20402082:	0080                	addi	s0,sp,64
20402084:	fca42623          	sw	a0,-52(s0)
20402088:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
2040208c:	57fd                	li	a5,-1
2040208e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402092:	fc842783          	lw	a5,-56(s0)
20402096:	c7c9                	beqz	a5,20402120 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402098:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040209c:	3b45                	jal	20401e4c <_get_cpu_intc>
2040209e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204020a2:	fcc42503          	lw	a0,-52(s0)
204020a6:	36dd                	jal	20401c8c <__metal_driver_sifive_clint0_num_interrupts>
204020a8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
204020ac:	fe042223          	sw	zero,-28(s0)
204020b0:	a091                	j	204020f4 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204020b2:	fe442583          	lw	a1,-28(s0)
204020b6:	fcc42503          	lw	a0,-52(s0)
204020ba:	390d                	jal	20401cec <__metal_driver_sifive_clint0_interrupt_lines>
204020bc:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204020c0:	fe442583          	lw	a1,-28(s0)
204020c4:	fcc42503          	lw	a0,-52(s0)
204020c8:	36e5                	jal	20401cb0 <__metal_driver_sifive_clint0_interrupt_parents>
204020ca:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
204020ce:	fe042703          	lw	a4,-32(s0)
204020d2:	fe842783          	lw	a5,-24(s0)
204020d6:	00f71863          	bne	a4,a5,204020e6 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
204020da:	fc842703          	lw	a4,-56(s0)
204020de:	fd842783          	lw	a5,-40(s0)
204020e2:	02f70063          	beq	a4,a5,20402102 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
204020e6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204020ea:	fe442783          	lw	a5,-28(s0)
204020ee:	0785                	addi	a5,a5,1
204020f0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
204020f4:	fe442703          	lw	a4,-28(s0)
204020f8:	fdc42783          	lw	a5,-36(s0)
204020fc:	faf74be3          	blt	a4,a5,204020b2 <__metal_driver_riscv_clint0_enable+0x36>
20402100:	a011                	j	20402104 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402102:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402104:	fe842783          	lw	a5,-24(s0)
20402108:	cf81                	beqz	a5,20402120 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
2040210a:	fe842783          	lw	a5,-24(s0)
2040210e:	439c                	lw	a5,0(a5)
20402110:	53dc                	lw	a5,36(a5)
20402112:	fc842583          	lw	a1,-56(s0)
20402116:	fe842503          	lw	a0,-24(s0)
2040211a:	9782                	jalr	a5
2040211c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402120:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402124:	853e                	mv	a0,a5
20402126:	50f2                	lw	ra,60(sp)
20402128:	5462                	lw	s0,56(sp)
2040212a:	6121                	addi	sp,sp,64
2040212c:	8082                	ret

2040212e <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
2040212e:	7139                	addi	sp,sp,-64
20402130:	de06                	sw	ra,60(sp)
20402132:	dc22                	sw	s0,56(sp)
20402134:	0080                	addi	s0,sp,64
20402136:	fca42623          	sw	a0,-52(s0)
2040213a:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
2040213e:	57fd                	li	a5,-1
20402140:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402144:	fc842783          	lw	a5,-56(s0)
20402148:	c7c9                	beqz	a5,204021d2 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
2040214a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040214e:	39fd                	jal	20401e4c <_get_cpu_intc>
20402150:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402154:	fcc42503          	lw	a0,-52(s0)
20402158:	3e15                	jal	20401c8c <__metal_driver_sifive_clint0_num_interrupts>
2040215a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
2040215e:	fe042223          	sw	zero,-28(s0)
20402162:	a091                	j	204021a6 <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402164:	fe442583          	lw	a1,-28(s0)
20402168:	fcc42503          	lw	a0,-52(s0)
2040216c:	3641                	jal	20401cec <__metal_driver_sifive_clint0_interrupt_lines>
2040216e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402172:	fe442583          	lw	a1,-28(s0)
20402176:	fcc42503          	lw	a0,-52(s0)
2040217a:	3e1d                	jal	20401cb0 <__metal_driver_sifive_clint0_interrupt_parents>
2040217c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402180:	fe042703          	lw	a4,-32(s0)
20402184:	fe842783          	lw	a5,-24(s0)
20402188:	00f71863          	bne	a4,a5,20402198 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
2040218c:	fc842703          	lw	a4,-56(s0)
20402190:	fd842783          	lw	a5,-40(s0)
20402194:	02f70063          	beq	a4,a5,204021b4 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402198:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040219c:	fe442783          	lw	a5,-28(s0)
204021a0:	0785                	addi	a5,a5,1
204021a2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
204021a6:	fe442703          	lw	a4,-28(s0)
204021aa:	fdc42783          	lw	a5,-36(s0)
204021ae:	faf74be3          	blt	a4,a5,20402164 <__metal_driver_riscv_clint0_disable+0x36>
204021b2:	a011                	j	204021b6 <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
204021b4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
204021b6:	fe842783          	lw	a5,-24(s0)
204021ba:	cf81                	beqz	a5,204021d2 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
204021bc:	fe842783          	lw	a5,-24(s0)
204021c0:	439c                	lw	a5,0(a5)
204021c2:	579c                	lw	a5,40(a5)
204021c4:	fc842583          	lw	a1,-56(s0)
204021c8:	fe842503          	lw	a0,-24(s0)
204021cc:	9782                	jalr	a5
204021ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
204021d2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
204021d6:	853e                	mv	a0,a5
204021d8:	50f2                	lw	ra,60(sp)
204021da:	5462                	lw	s0,56(sp)
204021dc:	6121                	addi	sp,sp,64
204021de:	8082                	ret

204021e0 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204021e0:	7179                	addi	sp,sp,-48
204021e2:	d606                	sw	ra,44(sp)
204021e4:	d422                	sw	s0,40(sp)
204021e6:	1800                	addi	s0,sp,48
204021e8:	fca42e23          	sw	a0,-36(s0)
204021ec:	fcb42c23          	sw	a1,-40(s0)
204021f0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204021f4:	57fd                	li	a5,-1
204021f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204021fa:	fdc42783          	lw	a5,-36(s0)
204021fe:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402202:	fdc42503          	lw	a0,-36(s0)
20402206:	a61ff0ef          	jal	ra,20401c66 <__metal_driver_sifive_clint0_control_base>
2040220a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
2040220e:	fd842703          	lw	a4,-40(s0)
20402212:	4789                	li	a5,2
20402214:	04f70963          	beq	a4,a5,20402266 <__metal_driver_riscv_clint0_command_request+0x86>
20402218:	fd842703          	lw	a4,-40(s0)
2040221c:	4789                	li	a5,2
2040221e:	00e7c863          	blt	a5,a4,2040222e <__metal_driver_riscv_clint0_command_request+0x4e>
20402222:	fd842703          	lw	a4,-40(s0)
20402226:	4785                	li	a5,1
20402228:	00f70e63          	beq	a4,a5,20402244 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
2040222c:	a8f1                	j	20402308 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
2040222e:	fd842703          	lw	a4,-40(s0)
20402232:	478d                	li	a5,3
20402234:	04f70d63          	beq	a4,a5,2040228e <__metal_driver_riscv_clint0_command_request+0xae>
20402238:	fd842703          	lw	a4,-40(s0)
2040223c:	4791                	li	a5,4
2040223e:	08f70963          	beq	a4,a5,204022d0 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402242:	a0d9                	j	20402308 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402244:	fd442783          	lw	a5,-44(s0)
20402248:	cbcd                	beqz	a5,204022fa <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
2040224a:	fe842503          	lw	a0,-24(s0)
2040224e:	acfff0ef          	jal	ra,20401d1c <__metal_clint0_mtime_get>
20402252:	87aa                	mv	a5,a0
20402254:	882e                	mv	a6,a1
20402256:	fd442703          	lw	a4,-44(s0)
2040225a:	c31c                	sw	a5,0(a4)
2040225c:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402260:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402264:	a859                	j	204022fa <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402266:	fd442783          	lw	a5,-44(s0)
2040226a:	cbd1                	beqz	a5,204022fe <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
2040226c:	fd442783          	lw	a5,-44(s0)
20402270:	439c                	lw	a5,0(a5)
20402272:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402276:	fe042783          	lw	a5,-32(s0)
2040227a:	078a                	slli	a5,a5,0x2
2040227c:	873e                	mv	a4,a5
2040227e:	fe442783          	lw	a5,-28(s0)
20402282:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402284:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402288:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040228c:	a88d                	j	204022fe <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
2040228e:	fd442783          	lw	a5,-44(s0)
20402292:	cba5                	beqz	a5,20402302 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402294:	fd442783          	lw	a5,-44(s0)
20402298:	439c                	lw	a5,0(a5)
2040229a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040229e:	fe042783          	lw	a5,-32(s0)
204022a2:	078a                	slli	a5,a5,0x2
204022a4:	873e                	mv	a4,a5
204022a6:	fe442783          	lw	a5,-28(s0)
204022aa:	97ba                	add	a5,a5,a4
204022ac:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
204022ae:	4785                	li	a5,1
204022b0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
204022b2:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204022b6:	fe042783          	lw	a5,-32(s0)
204022ba:	078a                	slli	a5,a5,0x2
204022bc:	873e                	mv	a4,a5
204022be:	fe442783          	lw	a5,-28(s0)
204022c2:	97ba                	add	a5,a5,a4
204022c4:	439c                	lw	a5,0(a5)
204022c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
204022ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204022ce:	a815                	j	20402302 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
204022d0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
204022d4:	fd442783          	lw	a5,-44(s0)
204022d8:	c79d                	beqz	a5,20402306 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
204022da:	fd442783          	lw	a5,-44(s0)
204022de:	439c                	lw	a5,0(a5)
204022e0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204022e4:	fe042783          	lw	a5,-32(s0)
204022e8:	078a                	slli	a5,a5,0x2
204022ea:	873e                	mv	a4,a5
204022ec:	fe442783          	lw	a5,-28(s0)
204022f0:	97ba                	add	a5,a5,a4
204022f2:	439c                	lw	a5,0(a5)
204022f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204022f8:	a039                	j	20402306 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204022fa:	0001                	nop
204022fc:	a031                	j	20402308 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204022fe:	0001                	nop
20402300:	a021                	j	20402308 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402302:	0001                	nop
20402304:	a011                	j	20402308 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402306:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402308:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
2040230c:	853e                	mv	a0,a5
2040230e:	50b2                	lw	ra,44(sp)
20402310:	5422                	lw	s0,40(sp)
20402312:	6145                	addi	sp,sp,48
20402314:	8082                	ret

20402316 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402316:	7179                	addi	sp,sp,-48
20402318:	d606                	sw	ra,44(sp)
2040231a:	d422                	sw	s0,40(sp)
2040231c:	1800                	addi	s0,sp,48
2040231e:	fca42e23          	sw	a0,-36(s0)
20402322:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402326:	55d020ef          	jal	ra,20405082 <metal_cpu_get_current_hartid>
2040232a:	87aa                	mv	a5,a0
2040232c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402330:	fec40793          	addi	a5,s0,-20
20402334:	863e                	mv	a2,a5
20402336:	4589                	li	a1,2
20402338:	fdc42503          	lw	a0,-36(s0)
2040233c:	3555                	jal	204021e0 <__metal_driver_riscv_clint0_command_request>
2040233e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402340:	853e                	mv	a0,a5
20402342:	50b2                	lw	ra,44(sp)
20402344:	5422                	lw	s0,40(sp)
20402346:	6145                	addi	sp,sp,48
20402348:	8082                	ret

2040234a <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
2040234a:	7179                	addi	sp,sp,-48
2040234c:	d606                	sw	ra,44(sp)
2040234e:	d422                	sw	s0,40(sp)
20402350:	1800                	addi	s0,sp,48
20402352:	fca42e23          	sw	a0,-36(s0)
20402356:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
2040235a:	529020ef          	jal	ra,20405082 <metal_cpu_get_current_hartid>
2040235e:	87aa                	mv	a5,a0
20402360:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402364:	fec40793          	addi	a5,s0,-20
20402368:	863e                	mv	a2,a5
2040236a:	458d                	li	a1,3
2040236c:	fdc42503          	lw	a0,-36(s0)
20402370:	3d85                	jal	204021e0 <__metal_driver_riscv_clint0_command_request>
20402372:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402374:	853e                	mv	a0,a5
20402376:	50b2                	lw	ra,44(sp)
20402378:	5422                	lw	s0,40(sp)
2040237a:	6145                	addi	sp,sp,48
2040237c:	8082                	ret

2040237e <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
2040237e:	1101                	addi	sp,sp,-32
20402380:	ce22                	sw	s0,28(sp)
20402382:	1000                	addi	s0,sp,32
20402384:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402388:	fec42703          	lw	a4,-20(s0)
2040238c:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402390:	00f71463          	bne	a4,a5,20402398 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402394:	4781                	li	a5,0
20402396:	a011                	j	2040239a <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402398:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
2040239a:	853e                	mv	a0,a5
2040239c:	4472                	lw	s0,28(sp)
2040239e:	6105                	addi	sp,sp,32
204023a0:	8082                	ret

204023a2 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
204023a2:	1101                	addi	sp,sp,-32
204023a4:	ce22                	sw	s0,28(sp)
204023a6:	1000                	addi	s0,sp,32
204023a8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204023ac:	fec42703          	lw	a4,-20(s0)
204023b0:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204023b4:	00f71763          	bne	a4,a5,204023c2 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
204023b8:	000f47b7          	lui	a5,0xf4
204023bc:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
204023c0:	a011                	j	204023c4 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
204023c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
204023c4:	853e                	mv	a0,a5
204023c6:	4472                	lw	s0,28(sp)
204023c8:	6105                	addi	sp,sp,32
204023ca:	8082                	ret

204023cc <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204023cc:	1101                	addi	sp,sp,-32
204023ce:	ce22                	sw	s0,28(sp)
204023d0:	1000                	addi	s0,sp,32
204023d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204023d6:	fec42703          	lw	a4,-20(s0)
204023da:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204023de:	00f71763          	bne	a4,a5,204023ec <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204023e2:	800007b7          	lui	a5,0x80000
204023e6:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe494>
204023ea:	a011                	j	204023ee <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
204023ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
204023ee:	853e                	mv	a0,a5
204023f0:	4472                	lw	s0,28(sp)
204023f2:	6105                	addi	sp,sp,32
204023f4:	8082                	ret

204023f6 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204023f6:	1101                	addi	sp,sp,-32
204023f8:	ce22                	sw	s0,28(sp)
204023fa:	1000                	addi	s0,sp,32
204023fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402400:	fec42783          	lw	a5,-20(s0)
20402404:	00f04a63          	bgtz	a5,20402418 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402408:	fec42703          	lw	a4,-20(s0)
2040240c:	070a                	slli	a4,a4,0x2
2040240e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402412:	97ba                	add	a5,a5,a4
20402414:	439c                	lw	a5,0(a5)
20402416:	a011                	j	2040241a <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402418:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040241a:	853e                	mv	a0,a5
2040241c:	4472                	lw	s0,28(sp)
2040241e:	6105                	addi	sp,sp,32
20402420:	8082                	ret

20402422 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402422:	1101                	addi	sp,sp,-32
20402424:	ce22                	sw	s0,28(sp)
20402426:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402428:	f14027f3          	csrr	a5,mhartid
2040242c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402430:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402434:	853e                	mv	a0,a5
20402436:	4472                	lw	s0,28(sp)
20402438:	6105                	addi	sp,sp,32
2040243a:	8082                	ret

2040243c <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040243c:	1101                	addi	sp,sp,-32
2040243e:	ce22                	sw	s0,28(sp)
20402440:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402442:	47a1                	li	a5,8
20402444:	3007a7f3          	csrrs	a5,mstatus,a5
20402448:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
2040244c:	0001                	nop
2040244e:	4472                	lw	s0,28(sp)
20402450:	6105                	addi	sp,sp,32
20402452:	8082                	ret

20402454 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402454:	1101                	addi	sp,sp,-32
20402456:	ce22                	sw	s0,28(sp)
20402458:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040245a:	47a1                	li	a5,8
2040245c:	3007b7f3          	csrrc	a5,mstatus,a5
20402460:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402464:	0001                	nop
20402466:	4472                	lw	s0,28(sp)
20402468:	6105                	addi	sp,sp,32
2040246a:	8082                	ret

2040246c <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
2040246c:	1101                	addi	sp,sp,-32
2040246e:	ce22                	sw	s0,28(sp)
20402470:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402472:	47a1                	li	a5,8
20402474:	3047a7f3          	csrrs	a5,mie,a5
20402478:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
2040247c:	0001                	nop
2040247e:	4472                	lw	s0,28(sp)
20402480:	6105                	addi	sp,sp,32
20402482:	8082                	ret

20402484 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402484:	1101                	addi	sp,sp,-32
20402486:	ce22                	sw	s0,28(sp)
20402488:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040248a:	47a1                	li	a5,8
2040248c:	3047b7f3          	csrrc	a5,mie,a5
20402490:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402494:	0001                	nop
20402496:	4472                	lw	s0,28(sp)
20402498:	6105                	addi	sp,sp,32
2040249a:	8082                	ret

2040249c <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
2040249c:	1101                	addi	sp,sp,-32
2040249e:	ce22                	sw	s0,28(sp)
204024a0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204024a2:	08000793          	li	a5,128
204024a6:	3047a7f3          	csrrs	a5,mie,a5
204024aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204024ae:	0001                	nop
204024b0:	4472                	lw	s0,28(sp)
204024b2:	6105                	addi	sp,sp,32
204024b4:	8082                	ret

204024b6 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204024b6:	1101                	addi	sp,sp,-32
204024b8:	ce22                	sw	s0,28(sp)
204024ba:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204024bc:	08000793          	li	a5,128
204024c0:	3047b7f3          	csrrc	a5,mie,a5
204024c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
204024c8:	0001                	nop
204024ca:	4472                	lw	s0,28(sp)
204024cc:	6105                	addi	sp,sp,32
204024ce:	8082                	ret

204024d0 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
204024d0:	1101                	addi	sp,sp,-32
204024d2:	ce22                	sw	s0,28(sp)
204024d4:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204024d6:	6785                	lui	a5,0x1
204024d8:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204024dc:	3047a7f3          	csrrs	a5,mie,a5
204024e0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
204024e4:	0001                	nop
204024e6:	4472                	lw	s0,28(sp)
204024e8:	6105                	addi	sp,sp,32
204024ea:	8082                	ret

204024ec <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
204024ec:	1101                	addi	sp,sp,-32
204024ee:	ce22                	sw	s0,28(sp)
204024f0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204024f2:	6785                	lui	a5,0x1
204024f4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204024f8:	3047b7f3          	csrrc	a5,mie,a5
204024fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402500:	0001                	nop
20402502:	4472                	lw	s0,28(sp)
20402504:	6105                	addi	sp,sp,32
20402506:	8082                	ret

20402508 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402508:	7179                	addi	sp,sp,-48
2040250a:	d622                	sw	s0,44(sp)
2040250c:	1800                	addi	s0,sp,48
2040250e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402512:	fdc42783          	lw	a5,-36(s0)
20402516:	4705                	li	a4,1
20402518:	00f717b3          	sll	a5,a4,a5
2040251c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402520:	fec42783          	lw	a5,-20(s0)
20402524:	3047a7f3          	csrrs	a5,mie,a5
20402528:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040252c:	0001                	nop
2040252e:	5432                	lw	s0,44(sp)
20402530:	6145                	addi	sp,sp,48
20402532:	8082                	ret

20402534 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402534:	7179                	addi	sp,sp,-48
20402536:	d622                	sw	s0,44(sp)
20402538:	1800                	addi	s0,sp,48
2040253a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040253e:	fdc42783          	lw	a5,-36(s0)
20402542:	4705                	li	a4,1
20402544:	00f717b3          	sll	a5,a4,a5
20402548:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040254c:	fec42783          	lw	a5,-20(s0)
20402550:	3047b7f3          	csrrc	a5,mie,a5
20402554:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402558:	0001                	nop
2040255a:	5432                	lw	s0,44(sp)
2040255c:	6145                	addi	sp,sp,48
2040255e:	8082                	ret

20402560 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402560:	1101                	addi	sp,sp,-32
20402562:	ce06                	sw	ra,28(sp)
20402564:	cc22                	sw	s0,24(sp)
20402566:	1000                	addi	s0,sp,32
20402568:	fea42623          	sw	a0,-20(s0)
2040256c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402570:	06400513          	li	a0,100
20402574:	329020ef          	jal	ra,2040509c <metal_shutdown>

20402578 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402578:	1101                	addi	sp,sp,-32
2040257a:	ce06                	sw	ra,28(sp)
2040257c:	cc22                	sw	s0,24(sp)
2040257e:	1000                	addi	s0,sp,32
20402580:	fea42623          	sw	a0,-20(s0)
20402584:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402588:	0c800513          	li	a0,200
2040258c:	311020ef          	jal	ra,2040509c <metal_shutdown>

20402590 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402590:	715d                	addi	sp,sp,-80
20402592:	c686                	sw	ra,76(sp)
20402594:	c496                	sw	t0,72(sp)
20402596:	c29a                	sw	t1,68(sp)
20402598:	c09e                	sw	t2,64(sp)
2040259a:	de22                	sw	s0,60(sp)
2040259c:	dc2a                	sw	a0,56(sp)
2040259e:	da2e                	sw	a1,52(sp)
204025a0:	d832                	sw	a2,48(sp)
204025a2:	d636                	sw	a3,44(sp)
204025a4:	d43a                	sw	a4,40(sp)
204025a6:	d23e                	sw	a5,36(sp)
204025a8:	d042                	sw	a6,32(sp)
204025aa:	ce46                	sw	a7,28(sp)
204025ac:	cc72                	sw	t3,24(sp)
204025ae:	ca76                	sw	t4,20(sp)
204025b0:	c87a                	sw	t5,16(sp)
204025b2:	c67e                	sw	t6,12(sp)
204025b4:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
204025b6:	12c00513          	li	a0,300
204025ba:	2e3020ef          	jal	ra,2040509c <metal_shutdown>

204025be <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
204025be:	711d                	addi	sp,sp,-96
204025c0:	ce86                	sw	ra,92(sp)
204025c2:	cc96                	sw	t0,88(sp)
204025c4:	ca9a                	sw	t1,84(sp)
204025c6:	c89e                	sw	t2,80(sp)
204025c8:	c6a2                	sw	s0,76(sp)
204025ca:	c4aa                	sw	a0,72(sp)
204025cc:	c2ae                	sw	a1,68(sp)
204025ce:	c0b2                	sw	a2,64(sp)
204025d0:	de36                	sw	a3,60(sp)
204025d2:	dc3a                	sw	a4,56(sp)
204025d4:	da3e                	sw	a5,52(sp)
204025d6:	d842                	sw	a6,48(sp)
204025d8:	d646                	sw	a7,44(sp)
204025da:	d472                	sw	t3,40(sp)
204025dc:	d276                	sw	t4,36(sp)
204025de:	d07a                	sw	t5,32(sp)
204025e0:	ce7e                	sw	t6,28(sp)
204025e2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204025e4:	3d3d                	jal	20402422 <__metal_myhart_id>
204025e6:	872a                	mv	a4,a0
204025e8:	070a                	slli	a4,a4,0x2
204025ea:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204025ee:	97ba                	add	a5,a5,a4
204025f0:	439c                	lw	a5,0(a5)
204025f2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
204025f6:	fac42783          	lw	a5,-84(s0)
204025fa:	c785                	beqz	a5,20402622 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204025fc:	fac42503          	lw	a0,-84(s0)
20402600:	33f1                	jal	204023cc <__metal_driver_cpu_interrupt_controller>
20402602:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402606:	fa842783          	lw	a5,-88(s0)
2040260a:	0e07a783          	lw	a5,224(a5)
2040260e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402612:	fa842783          	lw	a5,-88(s0)
20402616:	0d87a783          	lw	a5,216(a5)
2040261a:	fa442583          	lw	a1,-92(s0)
2040261e:	450d                	li	a0,3
20402620:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402622:	0001                	nop
20402624:	40f6                	lw	ra,92(sp)
20402626:	42e6                	lw	t0,88(sp)
20402628:	4356                	lw	t1,84(sp)
2040262a:	43c6                	lw	t2,80(sp)
2040262c:	4436                	lw	s0,76(sp)
2040262e:	4526                	lw	a0,72(sp)
20402630:	4596                	lw	a1,68(sp)
20402632:	4606                	lw	a2,64(sp)
20402634:	56f2                	lw	a3,60(sp)
20402636:	5762                	lw	a4,56(sp)
20402638:	57d2                	lw	a5,52(sp)
2040263a:	5842                	lw	a6,48(sp)
2040263c:	58b2                	lw	a7,44(sp)
2040263e:	5e22                	lw	t3,40(sp)
20402640:	5e92                	lw	t4,36(sp)
20402642:	5f02                	lw	t5,32(sp)
20402644:	4ff2                	lw	t6,28(sp)
20402646:	6125                	addi	sp,sp,96
20402648:	30200073          	mret

2040264c <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
2040264c:	7179                	addi	sp,sp,-48
2040264e:	d606                	sw	ra,44(sp)
20402650:	d422                	sw	s0,40(sp)
20402652:	1800                	addi	s0,sp,48
20402654:	fca42e23          	sw	a0,-36(s0)
20402658:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040265c:	33d9                	jal	20402422 <__metal_myhart_id>
2040265e:	872a                	mv	a4,a0
20402660:	070a                	slli	a4,a4,0x2
20402662:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402666:	97ba                	add	a5,a5,a4
20402668:	439c                	lw	a5,0(a5)
2040266a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040266e:	342027f3          	csrr	a5,mcause
20402672:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402676:	fec42783          	lw	a5,-20(s0)
2040267a:	c795                	beqz	a5,204026a6 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040267c:	fec42503          	lw	a0,-20(s0)
20402680:	33b1                	jal	204023cc <__metal_driver_cpu_interrupt_controller>
20402682:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402686:	fe842783          	lw	a5,-24(s0)
2040268a:	3ff7f793          	andi	a5,a5,1023
2040268e:	fe442703          	lw	a4,-28(s0)
20402692:	0e078793          	addi	a5,a5,224
20402696:	078a                	slli	a5,a5,0x2
20402698:	97ba                	add	a5,a5,a4
2040269a:	479c                	lw	a5,8(a5)
2040269c:	fdc42583          	lw	a1,-36(s0)
204026a0:	fec42503          	lw	a0,-20(s0)
204026a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
204026a6:	0001                	nop
204026a8:	50b2                	lw	ra,44(sp)
204026aa:	5422                	lw	s0,40(sp)
204026ac:	6145                	addi	sp,sp,48
204026ae:	8082                	ret

204026b0 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204026b0:	711d                	addi	sp,sp,-96
204026b2:	ce86                	sw	ra,92(sp)
204026b4:	cc96                	sw	t0,88(sp)
204026b6:	ca9a                	sw	t1,84(sp)
204026b8:	c89e                	sw	t2,80(sp)
204026ba:	c6a2                	sw	s0,76(sp)
204026bc:	c4aa                	sw	a0,72(sp)
204026be:	c2ae                	sw	a1,68(sp)
204026c0:	c0b2                	sw	a2,64(sp)
204026c2:	de36                	sw	a3,60(sp)
204026c4:	dc3a                	sw	a4,56(sp)
204026c6:	da3e                	sw	a5,52(sp)
204026c8:	d842                	sw	a6,48(sp)
204026ca:	d646                	sw	a7,44(sp)
204026cc:	d472                	sw	t3,40(sp)
204026ce:	d276                	sw	t4,36(sp)
204026d0:	d07a                	sw	t5,32(sp)
204026d2:	ce7e                	sw	t6,28(sp)
204026d4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204026d6:	33b1                	jal	20402422 <__metal_myhart_id>
204026d8:	872a                	mv	a4,a0
204026da:	070a                	slli	a4,a4,0x2
204026dc:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204026e0:	97ba                	add	a5,a5,a4
204026e2:	439c                	lw	a5,0(a5)
204026e4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
204026e8:	fac42783          	lw	a5,-84(s0)
204026ec:	c785                	beqz	a5,20402714 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204026ee:	fac42503          	lw	a0,-84(s0)
204026f2:	39e9                	jal	204023cc <__metal_driver_cpu_interrupt_controller>
204026f4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
204026f8:	fa842783          	lw	a5,-88(s0)
204026fc:	1407a783          	lw	a5,320(a5)
20402700:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402704:	fa842783          	lw	a5,-88(s0)
20402708:	1387a783          	lw	a5,312(a5)
2040270c:	fa442583          	lw	a1,-92(s0)
20402710:	451d                	li	a0,7
20402712:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402714:	0001                	nop
20402716:	40f6                	lw	ra,92(sp)
20402718:	42e6                	lw	t0,88(sp)
2040271a:	4356                	lw	t1,84(sp)
2040271c:	43c6                	lw	t2,80(sp)
2040271e:	4436                	lw	s0,76(sp)
20402720:	4526                	lw	a0,72(sp)
20402722:	4596                	lw	a1,68(sp)
20402724:	4606                	lw	a2,64(sp)
20402726:	56f2                	lw	a3,60(sp)
20402728:	5762                	lw	a4,56(sp)
2040272a:	57d2                	lw	a5,52(sp)
2040272c:	5842                	lw	a6,48(sp)
2040272e:	58b2                	lw	a7,44(sp)
20402730:	5e22                	lw	t3,40(sp)
20402732:	5e92                	lw	t4,36(sp)
20402734:	5f02                	lw	t5,32(sp)
20402736:	4ff2                	lw	t6,28(sp)
20402738:	6125                	addi	sp,sp,96
2040273a:	30200073          	mret

2040273e <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
2040273e:	7179                	addi	sp,sp,-48
20402740:	d606                	sw	ra,44(sp)
20402742:	d422                	sw	s0,40(sp)
20402744:	1800                	addi	s0,sp,48
20402746:	fca42e23          	sw	a0,-36(s0)
2040274a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040274e:	39d1                	jal	20402422 <__metal_myhart_id>
20402750:	87aa                	mv	a5,a0
20402752:	853e                	mv	a0,a5
20402754:	314d                	jal	204023f6 <__metal_driver_cpu_get>
20402756:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
2040275a:	fec42503          	lw	a0,-20(s0)
2040275e:	190010ef          	jal	ra,204038ee <__metal_driver_cpu_mtime_get>
20402762:	fea42023          	sw	a0,-32(s0)
20402766:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
2040276a:	fe042783          	lw	a5,-32(s0)
2040276e:	fe442803          	lw	a6,-28(s0)
20402772:	45a9                	li	a1,10
20402774:	4601                	li	a2,0
20402776:	00b786b3          	add	a3,a5,a1
2040277a:	8536                	mv	a0,a3
2040277c:	00f53533          	sltu	a0,a0,a5
20402780:	00c80733          	add	a4,a6,a2
20402784:	00e507b3          	add	a5,a0,a4
20402788:	873e                	mv	a4,a5
2040278a:	87b6                	mv	a5,a3
2040278c:	883a                	mv	a6,a4
2040278e:	85be                	mv	a1,a5
20402790:	8642                	mv	a2,a6
20402792:	fec42503          	lw	a0,-20(s0)
20402796:	1be010ef          	jal	ra,20403954 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040279a:	0001                	nop
2040279c:	50b2                	lw	ra,44(sp)
2040279e:	5422                	lw	s0,40(sp)
204027a0:	6145                	addi	sp,sp,48
204027a2:	8082                	ret
	...

20402800 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402800:	7119                	addi	sp,sp,-128
20402802:	de86                	sw	ra,124(sp)
20402804:	dc96                	sw	t0,120(sp)
20402806:	da9a                	sw	t1,116(sp)
20402808:	d89e                	sw	t2,112(sp)
2040280a:	d6a2                	sw	s0,108(sp)
2040280c:	d4aa                	sw	a0,104(sp)
2040280e:	d2ae                	sw	a1,100(sp)
20402810:	d0b2                	sw	a2,96(sp)
20402812:	ceb6                	sw	a3,92(sp)
20402814:	ccba                	sw	a4,88(sp)
20402816:	cabe                	sw	a5,84(sp)
20402818:	c8c2                	sw	a6,80(sp)
2040281a:	c6c6                	sw	a7,76(sp)
2040281c:	c4f2                	sw	t3,72(sp)
2040281e:	c2f6                	sw	t4,68(sp)
20402820:	c0fa                	sw	t5,64(sp)
20402822:	de7e                	sw	t6,60(sp)
20402824:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402826:	3ef5                	jal	20402422 <__metal_myhart_id>
20402828:	872a                	mv	a4,a0
2040282a:	070a                	slli	a4,a4,0x2
2040282c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402830:	97ba                	add	a5,a5,a4
20402832:	439c                	lw	a5,0(a5)
20402834:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402838:	342027f3          	csrr	a5,mcause
2040283c:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402840:	341027f3          	csrr	a5,mepc
20402844:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402848:	343027f3          	csrr	a5,mtval
2040284c:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402850:	305027f3          	csrr	a5,mtvec
20402854:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402858:	fac42783          	lw	a5,-84(s0)
2040285c:	c7e9                	beqz	a5,20402926 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040285e:	fac42503          	lw	a0,-84(s0)
20402862:	b6bff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402866:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040286a:	fa842783          	lw	a5,-88(s0)
2040286e:	3ff7f793          	andi	a5,a5,1023
20402872:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402876:	fa842783          	lw	a5,-88(s0)
2040287a:	0807d863          	bgez	a5,2040290a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2040287e:	f9442703          	lw	a4,-108(s0)
20402882:	47ad                	li	a5,11
20402884:	00e7d763          	bge	a5,a4,20402892 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402888:	f9c42783          	lw	a5,-100(s0)
2040288c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402890:	ef9d                	bnez	a5,204028ce <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402892:	f9842683          	lw	a3,-104(s0)
20402896:	f9442703          	lw	a4,-108(s0)
2040289a:	87ba                	mv	a5,a4
2040289c:	0786                	slli	a5,a5,0x1
2040289e:	97ba                	add	a5,a5,a4
204028a0:	078e                	slli	a5,a5,0x3
204028a2:	97b6                	add	a5,a5,a3
204028a4:	0987a783          	lw	a5,152(a5)
204028a8:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204028ac:	f9842683          	lw	a3,-104(s0)
204028b0:	f9442703          	lw	a4,-108(s0)
204028b4:	87ba                	mv	a5,a4
204028b6:	0786                	slli	a5,a5,0x1
204028b8:	97ba                	add	a5,a5,a4
204028ba:	078e                	slli	a5,a5,0x3
204028bc:	97b6                	add	a5,a5,a3
204028be:	0907a783          	lw	a5,144(a5)
204028c2:	f8c42583          	lw	a1,-116(s0)
204028c6:	f9442503          	lw	a0,-108(s0)
204028ca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204028cc:	a8a9                	j	20402926 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204028ce:	f9c42783          	lw	a5,-100(s0)
204028d2:	03f7f713          	andi	a4,a5,63
204028d6:	4789                	li	a5,2
204028d8:	04f71763          	bne	a4,a5,20402926 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204028dc:	307027f3          	csrr	a5,mtvt
204028e0:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204028e4:	f9842783          	lw	a5,-104(s0)
204028e8:	0dc7a783          	lw	a5,220(a5)
204028ec:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204028f0:	f9042783          	lw	a5,-112(s0)
204028f4:	439c                	lw	a5,0(a5)
204028f6:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204028fa:	f8842783          	lw	a5,-120(s0)
204028fe:	f8c42583          	lw	a1,-116(s0)
20402902:	f9442503          	lw	a0,-108(s0)
20402906:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402908:	a839                	j	20402926 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040290a:	f9842703          	lw	a4,-104(s0)
2040290e:	f9442783          	lw	a5,-108(s0)
20402912:	0e078793          	addi	a5,a5,224
20402916:	078a                	slli	a5,a5,0x2
20402918:	97ba                	add	a5,a5,a4
2040291a:	479c                	lw	a5,8(a5)
2040291c:	f9442583          	lw	a1,-108(s0)
20402920:	fac42503          	lw	a0,-84(s0)
20402924:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402926:	50f6                	lw	ra,124(sp)
20402928:	52e6                	lw	t0,120(sp)
2040292a:	5356                	lw	t1,116(sp)
2040292c:	53c6                	lw	t2,112(sp)
2040292e:	5436                	lw	s0,108(sp)
20402930:	5526                	lw	a0,104(sp)
20402932:	5596                	lw	a1,100(sp)
20402934:	5606                	lw	a2,96(sp)
20402936:	46f6                	lw	a3,92(sp)
20402938:	4766                	lw	a4,88(sp)
2040293a:	47d6                	lw	a5,84(sp)
2040293c:	4846                	lw	a6,80(sp)
2040293e:	48b6                	lw	a7,76(sp)
20402940:	4e26                	lw	t3,72(sp)
20402942:	4e96                	lw	t4,68(sp)
20402944:	4f06                	lw	t5,64(sp)
20402946:	5ff2                	lw	t6,60(sp)
20402948:	6109                	addi	sp,sp,128
2040294a:	30200073          	mret
	...

20402974 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402974:	711d                	addi	sp,sp,-96
20402976:	ce86                	sw	ra,92(sp)
20402978:	cc96                	sw	t0,88(sp)
2040297a:	ca9a                	sw	t1,84(sp)
2040297c:	c89e                	sw	t2,80(sp)
2040297e:	c6a2                	sw	s0,76(sp)
20402980:	c4aa                	sw	a0,72(sp)
20402982:	c2ae                	sw	a1,68(sp)
20402984:	c0b2                	sw	a2,64(sp)
20402986:	de36                	sw	a3,60(sp)
20402988:	dc3a                	sw	a4,56(sp)
2040298a:	da3e                	sw	a5,52(sp)
2040298c:	d842                	sw	a6,48(sp)
2040298e:	d646                	sw	a7,44(sp)
20402990:	d472                	sw	t3,40(sp)
20402992:	d276                	sw	t4,36(sp)
20402994:	d07a                	sw	t5,32(sp)
20402996:	ce7e                	sw	t6,28(sp)
20402998:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040299a:	a89ff0ef          	jal	ra,20402422 <__metal_myhart_id>
2040299e:	872a                	mv	a4,a0
204029a0:	070a                	slli	a4,a4,0x2
204029a2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204029a6:	97ba                	add	a5,a5,a4
204029a8:	439c                	lw	a5,0(a5)
204029aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204029ae:	fac42783          	lw	a5,-84(s0)
204029b2:	c78d                	beqz	a5,204029dc <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029b4:	fac42503          	lw	a0,-84(s0)
204029b8:	a15ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
204029bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204029c0:	fa842783          	lw	a5,-88(s0)
204029c4:	2187a783          	lw	a5,536(a5)
204029c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204029cc:	fa842783          	lw	a5,-88(s0)
204029d0:	2107a783          	lw	a5,528(a5)
204029d4:	fa442583          	lw	a1,-92(s0)
204029d8:	4541                	li	a0,16
204029da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204029dc:	0001                	nop
204029de:	40f6                	lw	ra,92(sp)
204029e0:	42e6                	lw	t0,88(sp)
204029e2:	4356                	lw	t1,84(sp)
204029e4:	43c6                	lw	t2,80(sp)
204029e6:	4436                	lw	s0,76(sp)
204029e8:	4526                	lw	a0,72(sp)
204029ea:	4596                	lw	a1,68(sp)
204029ec:	4606                	lw	a2,64(sp)
204029ee:	56f2                	lw	a3,60(sp)
204029f0:	5762                	lw	a4,56(sp)
204029f2:	57d2                	lw	a5,52(sp)
204029f4:	5842                	lw	a6,48(sp)
204029f6:	58b2                	lw	a7,44(sp)
204029f8:	5e22                	lw	t3,40(sp)
204029fa:	5e92                	lw	t4,36(sp)
204029fc:	5f02                	lw	t5,32(sp)
204029fe:	4ff2                	lw	t6,28(sp)
20402a00:	6125                	addi	sp,sp,96
20402a02:	30200073          	mret

20402a06 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402a06:	711d                	addi	sp,sp,-96
20402a08:	ce86                	sw	ra,92(sp)
20402a0a:	cc96                	sw	t0,88(sp)
20402a0c:	ca9a                	sw	t1,84(sp)
20402a0e:	c89e                	sw	t2,80(sp)
20402a10:	c6a2                	sw	s0,76(sp)
20402a12:	c4aa                	sw	a0,72(sp)
20402a14:	c2ae                	sw	a1,68(sp)
20402a16:	c0b2                	sw	a2,64(sp)
20402a18:	de36                	sw	a3,60(sp)
20402a1a:	dc3a                	sw	a4,56(sp)
20402a1c:	da3e                	sw	a5,52(sp)
20402a1e:	d842                	sw	a6,48(sp)
20402a20:	d646                	sw	a7,44(sp)
20402a22:	d472                	sw	t3,40(sp)
20402a24:	d276                	sw	t4,36(sp)
20402a26:	d07a                	sw	t5,32(sp)
20402a28:	ce7e                	sw	t6,28(sp)
20402a2a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a2c:	9f7ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402a30:	872a                	mv	a4,a0
20402a32:	070a                	slli	a4,a4,0x2
20402a34:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402a38:	97ba                	add	a5,a5,a4
20402a3a:	439c                	lw	a5,0(a5)
20402a3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402a40:	fac42783          	lw	a5,-84(s0)
20402a44:	c78d                	beqz	a5,20402a6e <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a46:	fac42503          	lw	a0,-84(s0)
20402a4a:	983ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402a4e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402a52:	fa842783          	lw	a5,-88(s0)
20402a56:	2307a783          	lw	a5,560(a5)
20402a5a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402a5e:	fa842783          	lw	a5,-88(s0)
20402a62:	2287a783          	lw	a5,552(a5)
20402a66:	fa442583          	lw	a1,-92(s0)
20402a6a:	4545                	li	a0,17
20402a6c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402a6e:	0001                	nop
20402a70:	40f6                	lw	ra,92(sp)
20402a72:	42e6                	lw	t0,88(sp)
20402a74:	4356                	lw	t1,84(sp)
20402a76:	43c6                	lw	t2,80(sp)
20402a78:	4436                	lw	s0,76(sp)
20402a7a:	4526                	lw	a0,72(sp)
20402a7c:	4596                	lw	a1,68(sp)
20402a7e:	4606                	lw	a2,64(sp)
20402a80:	56f2                	lw	a3,60(sp)
20402a82:	5762                	lw	a4,56(sp)
20402a84:	57d2                	lw	a5,52(sp)
20402a86:	5842                	lw	a6,48(sp)
20402a88:	58b2                	lw	a7,44(sp)
20402a8a:	5e22                	lw	t3,40(sp)
20402a8c:	5e92                	lw	t4,36(sp)
20402a8e:	5f02                	lw	t5,32(sp)
20402a90:	4ff2                	lw	t6,28(sp)
20402a92:	6125                	addi	sp,sp,96
20402a94:	30200073          	mret

20402a98 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402a98:	711d                	addi	sp,sp,-96
20402a9a:	ce86                	sw	ra,92(sp)
20402a9c:	cc96                	sw	t0,88(sp)
20402a9e:	ca9a                	sw	t1,84(sp)
20402aa0:	c89e                	sw	t2,80(sp)
20402aa2:	c6a2                	sw	s0,76(sp)
20402aa4:	c4aa                	sw	a0,72(sp)
20402aa6:	c2ae                	sw	a1,68(sp)
20402aa8:	c0b2                	sw	a2,64(sp)
20402aaa:	de36                	sw	a3,60(sp)
20402aac:	dc3a                	sw	a4,56(sp)
20402aae:	da3e                	sw	a5,52(sp)
20402ab0:	d842                	sw	a6,48(sp)
20402ab2:	d646                	sw	a7,44(sp)
20402ab4:	d472                	sw	t3,40(sp)
20402ab6:	d276                	sw	t4,36(sp)
20402ab8:	d07a                	sw	t5,32(sp)
20402aba:	ce7e                	sw	t6,28(sp)
20402abc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402abe:	965ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402ac2:	872a                	mv	a4,a0
20402ac4:	070a                	slli	a4,a4,0x2
20402ac6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402aca:	97ba                	add	a5,a5,a4
20402acc:	439c                	lw	a5,0(a5)
20402ace:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402ad2:	fac42783          	lw	a5,-84(s0)
20402ad6:	c78d                	beqz	a5,20402b00 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ad8:	fac42503          	lw	a0,-84(s0)
20402adc:	8f1ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402ae0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402ae4:	fa842783          	lw	a5,-88(s0)
20402ae8:	2487a783          	lw	a5,584(a5)
20402aec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402af0:	fa842783          	lw	a5,-88(s0)
20402af4:	2407a783          	lw	a5,576(a5)
20402af8:	fa442583          	lw	a1,-92(s0)
20402afc:	4549                	li	a0,18
20402afe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402b00:	0001                	nop
20402b02:	40f6                	lw	ra,92(sp)
20402b04:	42e6                	lw	t0,88(sp)
20402b06:	4356                	lw	t1,84(sp)
20402b08:	43c6                	lw	t2,80(sp)
20402b0a:	4436                	lw	s0,76(sp)
20402b0c:	4526                	lw	a0,72(sp)
20402b0e:	4596                	lw	a1,68(sp)
20402b10:	4606                	lw	a2,64(sp)
20402b12:	56f2                	lw	a3,60(sp)
20402b14:	5762                	lw	a4,56(sp)
20402b16:	57d2                	lw	a5,52(sp)
20402b18:	5842                	lw	a6,48(sp)
20402b1a:	58b2                	lw	a7,44(sp)
20402b1c:	5e22                	lw	t3,40(sp)
20402b1e:	5e92                	lw	t4,36(sp)
20402b20:	5f02                	lw	t5,32(sp)
20402b22:	4ff2                	lw	t6,28(sp)
20402b24:	6125                	addi	sp,sp,96
20402b26:	30200073          	mret

20402b2a <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402b2a:	711d                	addi	sp,sp,-96
20402b2c:	ce86                	sw	ra,92(sp)
20402b2e:	cc96                	sw	t0,88(sp)
20402b30:	ca9a                	sw	t1,84(sp)
20402b32:	c89e                	sw	t2,80(sp)
20402b34:	c6a2                	sw	s0,76(sp)
20402b36:	c4aa                	sw	a0,72(sp)
20402b38:	c2ae                	sw	a1,68(sp)
20402b3a:	c0b2                	sw	a2,64(sp)
20402b3c:	de36                	sw	a3,60(sp)
20402b3e:	dc3a                	sw	a4,56(sp)
20402b40:	da3e                	sw	a5,52(sp)
20402b42:	d842                	sw	a6,48(sp)
20402b44:	d646                	sw	a7,44(sp)
20402b46:	d472                	sw	t3,40(sp)
20402b48:	d276                	sw	t4,36(sp)
20402b4a:	d07a                	sw	t5,32(sp)
20402b4c:	ce7e                	sw	t6,28(sp)
20402b4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b50:	8d3ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402b54:	872a                	mv	a4,a0
20402b56:	070a                	slli	a4,a4,0x2
20402b58:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b5c:	97ba                	add	a5,a5,a4
20402b5e:	439c                	lw	a5,0(a5)
20402b60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402b64:	fac42783          	lw	a5,-84(s0)
20402b68:	c78d                	beqz	a5,20402b92 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b6a:	fac42503          	lw	a0,-84(s0)
20402b6e:	85fff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402b72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402b76:	fa842783          	lw	a5,-88(s0)
20402b7a:	2607a783          	lw	a5,608(a5)
20402b7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402b82:	fa842783          	lw	a5,-88(s0)
20402b86:	2587a783          	lw	a5,600(a5)
20402b8a:	fa442583          	lw	a1,-92(s0)
20402b8e:	454d                	li	a0,19
20402b90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402b92:	0001                	nop
20402b94:	40f6                	lw	ra,92(sp)
20402b96:	42e6                	lw	t0,88(sp)
20402b98:	4356                	lw	t1,84(sp)
20402b9a:	43c6                	lw	t2,80(sp)
20402b9c:	4436                	lw	s0,76(sp)
20402b9e:	4526                	lw	a0,72(sp)
20402ba0:	4596                	lw	a1,68(sp)
20402ba2:	4606                	lw	a2,64(sp)
20402ba4:	56f2                	lw	a3,60(sp)
20402ba6:	5762                	lw	a4,56(sp)
20402ba8:	57d2                	lw	a5,52(sp)
20402baa:	5842                	lw	a6,48(sp)
20402bac:	58b2                	lw	a7,44(sp)
20402bae:	5e22                	lw	t3,40(sp)
20402bb0:	5e92                	lw	t4,36(sp)
20402bb2:	5f02                	lw	t5,32(sp)
20402bb4:	4ff2                	lw	t6,28(sp)
20402bb6:	6125                	addi	sp,sp,96
20402bb8:	30200073          	mret

20402bbc <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402bbc:	711d                	addi	sp,sp,-96
20402bbe:	ce86                	sw	ra,92(sp)
20402bc0:	cc96                	sw	t0,88(sp)
20402bc2:	ca9a                	sw	t1,84(sp)
20402bc4:	c89e                	sw	t2,80(sp)
20402bc6:	c6a2                	sw	s0,76(sp)
20402bc8:	c4aa                	sw	a0,72(sp)
20402bca:	c2ae                	sw	a1,68(sp)
20402bcc:	c0b2                	sw	a2,64(sp)
20402bce:	de36                	sw	a3,60(sp)
20402bd0:	dc3a                	sw	a4,56(sp)
20402bd2:	da3e                	sw	a5,52(sp)
20402bd4:	d842                	sw	a6,48(sp)
20402bd6:	d646                	sw	a7,44(sp)
20402bd8:	d472                	sw	t3,40(sp)
20402bda:	d276                	sw	t4,36(sp)
20402bdc:	d07a                	sw	t5,32(sp)
20402bde:	ce7e                	sw	t6,28(sp)
20402be0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402be2:	841ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402be6:	872a                	mv	a4,a0
20402be8:	070a                	slli	a4,a4,0x2
20402bea:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402bee:	97ba                	add	a5,a5,a4
20402bf0:	439c                	lw	a5,0(a5)
20402bf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402bf6:	fac42783          	lw	a5,-84(s0)
20402bfa:	c78d                	beqz	a5,20402c24 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402bfc:	fac42503          	lw	a0,-84(s0)
20402c00:	fccff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402c04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402c08:	fa842783          	lw	a5,-88(s0)
20402c0c:	2787a783          	lw	a5,632(a5)
20402c10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402c14:	fa842783          	lw	a5,-88(s0)
20402c18:	2707a783          	lw	a5,624(a5)
20402c1c:	fa442583          	lw	a1,-92(s0)
20402c20:	4551                	li	a0,20
20402c22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402c24:	0001                	nop
20402c26:	40f6                	lw	ra,92(sp)
20402c28:	42e6                	lw	t0,88(sp)
20402c2a:	4356                	lw	t1,84(sp)
20402c2c:	43c6                	lw	t2,80(sp)
20402c2e:	4436                	lw	s0,76(sp)
20402c30:	4526                	lw	a0,72(sp)
20402c32:	4596                	lw	a1,68(sp)
20402c34:	4606                	lw	a2,64(sp)
20402c36:	56f2                	lw	a3,60(sp)
20402c38:	5762                	lw	a4,56(sp)
20402c3a:	57d2                	lw	a5,52(sp)
20402c3c:	5842                	lw	a6,48(sp)
20402c3e:	58b2                	lw	a7,44(sp)
20402c40:	5e22                	lw	t3,40(sp)
20402c42:	5e92                	lw	t4,36(sp)
20402c44:	5f02                	lw	t5,32(sp)
20402c46:	4ff2                	lw	t6,28(sp)
20402c48:	6125                	addi	sp,sp,96
20402c4a:	30200073          	mret

20402c4e <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402c4e:	711d                	addi	sp,sp,-96
20402c50:	ce86                	sw	ra,92(sp)
20402c52:	cc96                	sw	t0,88(sp)
20402c54:	ca9a                	sw	t1,84(sp)
20402c56:	c89e                	sw	t2,80(sp)
20402c58:	c6a2                	sw	s0,76(sp)
20402c5a:	c4aa                	sw	a0,72(sp)
20402c5c:	c2ae                	sw	a1,68(sp)
20402c5e:	c0b2                	sw	a2,64(sp)
20402c60:	de36                	sw	a3,60(sp)
20402c62:	dc3a                	sw	a4,56(sp)
20402c64:	da3e                	sw	a5,52(sp)
20402c66:	d842                	sw	a6,48(sp)
20402c68:	d646                	sw	a7,44(sp)
20402c6a:	d472                	sw	t3,40(sp)
20402c6c:	d276                	sw	t4,36(sp)
20402c6e:	d07a                	sw	t5,32(sp)
20402c70:	ce7e                	sw	t6,28(sp)
20402c72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c74:	faeff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402c78:	872a                	mv	a4,a0
20402c7a:	070a                	slli	a4,a4,0x2
20402c7c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c80:	97ba                	add	a5,a5,a4
20402c82:	439c                	lw	a5,0(a5)
20402c84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402c88:	fac42783          	lw	a5,-84(s0)
20402c8c:	c78d                	beqz	a5,20402cb6 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c8e:	fac42503          	lw	a0,-84(s0)
20402c92:	f3aff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402c96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402c9a:	fa842783          	lw	a5,-88(s0)
20402c9e:	2907a783          	lw	a5,656(a5)
20402ca2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402ca6:	fa842783          	lw	a5,-88(s0)
20402caa:	2887a783          	lw	a5,648(a5)
20402cae:	fa442583          	lw	a1,-92(s0)
20402cb2:	4555                	li	a0,21
20402cb4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402cb6:	0001                	nop
20402cb8:	40f6                	lw	ra,92(sp)
20402cba:	42e6                	lw	t0,88(sp)
20402cbc:	4356                	lw	t1,84(sp)
20402cbe:	43c6                	lw	t2,80(sp)
20402cc0:	4436                	lw	s0,76(sp)
20402cc2:	4526                	lw	a0,72(sp)
20402cc4:	4596                	lw	a1,68(sp)
20402cc6:	4606                	lw	a2,64(sp)
20402cc8:	56f2                	lw	a3,60(sp)
20402cca:	5762                	lw	a4,56(sp)
20402ccc:	57d2                	lw	a5,52(sp)
20402cce:	5842                	lw	a6,48(sp)
20402cd0:	58b2                	lw	a7,44(sp)
20402cd2:	5e22                	lw	t3,40(sp)
20402cd4:	5e92                	lw	t4,36(sp)
20402cd6:	5f02                	lw	t5,32(sp)
20402cd8:	4ff2                	lw	t6,28(sp)
20402cda:	6125                	addi	sp,sp,96
20402cdc:	30200073          	mret

20402ce0 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402ce0:	711d                	addi	sp,sp,-96
20402ce2:	ce86                	sw	ra,92(sp)
20402ce4:	cc96                	sw	t0,88(sp)
20402ce6:	ca9a                	sw	t1,84(sp)
20402ce8:	c89e                	sw	t2,80(sp)
20402cea:	c6a2                	sw	s0,76(sp)
20402cec:	c4aa                	sw	a0,72(sp)
20402cee:	c2ae                	sw	a1,68(sp)
20402cf0:	c0b2                	sw	a2,64(sp)
20402cf2:	de36                	sw	a3,60(sp)
20402cf4:	dc3a                	sw	a4,56(sp)
20402cf6:	da3e                	sw	a5,52(sp)
20402cf8:	d842                	sw	a6,48(sp)
20402cfa:	d646                	sw	a7,44(sp)
20402cfc:	d472                	sw	t3,40(sp)
20402cfe:	d276                	sw	t4,36(sp)
20402d00:	d07a                	sw	t5,32(sp)
20402d02:	ce7e                	sw	t6,28(sp)
20402d04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d06:	f1cff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402d0a:	872a                	mv	a4,a0
20402d0c:	070a                	slli	a4,a4,0x2
20402d0e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d12:	97ba                	add	a5,a5,a4
20402d14:	439c                	lw	a5,0(a5)
20402d16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402d1a:	fac42783          	lw	a5,-84(s0)
20402d1e:	c78d                	beqz	a5,20402d48 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d20:	fac42503          	lw	a0,-84(s0)
20402d24:	ea8ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402d28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402d2c:	fa842783          	lw	a5,-88(s0)
20402d30:	2a87a783          	lw	a5,680(a5)
20402d34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402d38:	fa842783          	lw	a5,-88(s0)
20402d3c:	2a07a783          	lw	a5,672(a5)
20402d40:	fa442583          	lw	a1,-92(s0)
20402d44:	4559                	li	a0,22
20402d46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402d48:	0001                	nop
20402d4a:	40f6                	lw	ra,92(sp)
20402d4c:	42e6                	lw	t0,88(sp)
20402d4e:	4356                	lw	t1,84(sp)
20402d50:	43c6                	lw	t2,80(sp)
20402d52:	4436                	lw	s0,76(sp)
20402d54:	4526                	lw	a0,72(sp)
20402d56:	4596                	lw	a1,68(sp)
20402d58:	4606                	lw	a2,64(sp)
20402d5a:	56f2                	lw	a3,60(sp)
20402d5c:	5762                	lw	a4,56(sp)
20402d5e:	57d2                	lw	a5,52(sp)
20402d60:	5842                	lw	a6,48(sp)
20402d62:	58b2                	lw	a7,44(sp)
20402d64:	5e22                	lw	t3,40(sp)
20402d66:	5e92                	lw	t4,36(sp)
20402d68:	5f02                	lw	t5,32(sp)
20402d6a:	4ff2                	lw	t6,28(sp)
20402d6c:	6125                	addi	sp,sp,96
20402d6e:	30200073          	mret

20402d72 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402d72:	711d                	addi	sp,sp,-96
20402d74:	ce86                	sw	ra,92(sp)
20402d76:	cc96                	sw	t0,88(sp)
20402d78:	ca9a                	sw	t1,84(sp)
20402d7a:	c89e                	sw	t2,80(sp)
20402d7c:	c6a2                	sw	s0,76(sp)
20402d7e:	c4aa                	sw	a0,72(sp)
20402d80:	c2ae                	sw	a1,68(sp)
20402d82:	c0b2                	sw	a2,64(sp)
20402d84:	de36                	sw	a3,60(sp)
20402d86:	dc3a                	sw	a4,56(sp)
20402d88:	da3e                	sw	a5,52(sp)
20402d8a:	d842                	sw	a6,48(sp)
20402d8c:	d646                	sw	a7,44(sp)
20402d8e:	d472                	sw	t3,40(sp)
20402d90:	d276                	sw	t4,36(sp)
20402d92:	d07a                	sw	t5,32(sp)
20402d94:	ce7e                	sw	t6,28(sp)
20402d96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d98:	e8aff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402d9c:	872a                	mv	a4,a0
20402d9e:	070a                	slli	a4,a4,0x2
20402da0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402da4:	97ba                	add	a5,a5,a4
20402da6:	439c                	lw	a5,0(a5)
20402da8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402dac:	fac42783          	lw	a5,-84(s0)
20402db0:	c78d                	beqz	a5,20402dda <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402db2:	fac42503          	lw	a0,-84(s0)
20402db6:	e16ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402dba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402dbe:	fa842783          	lw	a5,-88(s0)
20402dc2:	2c07a783          	lw	a5,704(a5)
20402dc6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402dca:	fa842783          	lw	a5,-88(s0)
20402dce:	2b87a783          	lw	a5,696(a5)
20402dd2:	fa442583          	lw	a1,-92(s0)
20402dd6:	455d                	li	a0,23
20402dd8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402dda:	0001                	nop
20402ddc:	40f6                	lw	ra,92(sp)
20402dde:	42e6                	lw	t0,88(sp)
20402de0:	4356                	lw	t1,84(sp)
20402de2:	43c6                	lw	t2,80(sp)
20402de4:	4436                	lw	s0,76(sp)
20402de6:	4526                	lw	a0,72(sp)
20402de8:	4596                	lw	a1,68(sp)
20402dea:	4606                	lw	a2,64(sp)
20402dec:	56f2                	lw	a3,60(sp)
20402dee:	5762                	lw	a4,56(sp)
20402df0:	57d2                	lw	a5,52(sp)
20402df2:	5842                	lw	a6,48(sp)
20402df4:	58b2                	lw	a7,44(sp)
20402df6:	5e22                	lw	t3,40(sp)
20402df8:	5e92                	lw	t4,36(sp)
20402dfa:	5f02                	lw	t5,32(sp)
20402dfc:	4ff2                	lw	t6,28(sp)
20402dfe:	6125                	addi	sp,sp,96
20402e00:	30200073          	mret

20402e04 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402e04:	711d                	addi	sp,sp,-96
20402e06:	ce86                	sw	ra,92(sp)
20402e08:	cc96                	sw	t0,88(sp)
20402e0a:	ca9a                	sw	t1,84(sp)
20402e0c:	c89e                	sw	t2,80(sp)
20402e0e:	c6a2                	sw	s0,76(sp)
20402e10:	c4aa                	sw	a0,72(sp)
20402e12:	c2ae                	sw	a1,68(sp)
20402e14:	c0b2                	sw	a2,64(sp)
20402e16:	de36                	sw	a3,60(sp)
20402e18:	dc3a                	sw	a4,56(sp)
20402e1a:	da3e                	sw	a5,52(sp)
20402e1c:	d842                	sw	a6,48(sp)
20402e1e:	d646                	sw	a7,44(sp)
20402e20:	d472                	sw	t3,40(sp)
20402e22:	d276                	sw	t4,36(sp)
20402e24:	d07a                	sw	t5,32(sp)
20402e26:	ce7e                	sw	t6,28(sp)
20402e28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e2a:	df8ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402e2e:	872a                	mv	a4,a0
20402e30:	070a                	slli	a4,a4,0x2
20402e32:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e36:	97ba                	add	a5,a5,a4
20402e38:	439c                	lw	a5,0(a5)
20402e3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402e3e:	fac42783          	lw	a5,-84(s0)
20402e42:	c78d                	beqz	a5,20402e6c <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e44:	fac42503          	lw	a0,-84(s0)
20402e48:	d84ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402e4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402e50:	fa842783          	lw	a5,-88(s0)
20402e54:	2d87a783          	lw	a5,728(a5)
20402e58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402e5c:	fa842783          	lw	a5,-88(s0)
20402e60:	2d07a783          	lw	a5,720(a5)
20402e64:	fa442583          	lw	a1,-92(s0)
20402e68:	4561                	li	a0,24
20402e6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402e6c:	0001                	nop
20402e6e:	40f6                	lw	ra,92(sp)
20402e70:	42e6                	lw	t0,88(sp)
20402e72:	4356                	lw	t1,84(sp)
20402e74:	43c6                	lw	t2,80(sp)
20402e76:	4436                	lw	s0,76(sp)
20402e78:	4526                	lw	a0,72(sp)
20402e7a:	4596                	lw	a1,68(sp)
20402e7c:	4606                	lw	a2,64(sp)
20402e7e:	56f2                	lw	a3,60(sp)
20402e80:	5762                	lw	a4,56(sp)
20402e82:	57d2                	lw	a5,52(sp)
20402e84:	5842                	lw	a6,48(sp)
20402e86:	58b2                	lw	a7,44(sp)
20402e88:	5e22                	lw	t3,40(sp)
20402e8a:	5e92                	lw	t4,36(sp)
20402e8c:	5f02                	lw	t5,32(sp)
20402e8e:	4ff2                	lw	t6,28(sp)
20402e90:	6125                	addi	sp,sp,96
20402e92:	30200073          	mret

20402e96 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402e96:	711d                	addi	sp,sp,-96
20402e98:	ce86                	sw	ra,92(sp)
20402e9a:	cc96                	sw	t0,88(sp)
20402e9c:	ca9a                	sw	t1,84(sp)
20402e9e:	c89e                	sw	t2,80(sp)
20402ea0:	c6a2                	sw	s0,76(sp)
20402ea2:	c4aa                	sw	a0,72(sp)
20402ea4:	c2ae                	sw	a1,68(sp)
20402ea6:	c0b2                	sw	a2,64(sp)
20402ea8:	de36                	sw	a3,60(sp)
20402eaa:	dc3a                	sw	a4,56(sp)
20402eac:	da3e                	sw	a5,52(sp)
20402eae:	d842                	sw	a6,48(sp)
20402eb0:	d646                	sw	a7,44(sp)
20402eb2:	d472                	sw	t3,40(sp)
20402eb4:	d276                	sw	t4,36(sp)
20402eb6:	d07a                	sw	t5,32(sp)
20402eb8:	ce7e                	sw	t6,28(sp)
20402eba:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ebc:	d66ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402ec0:	872a                	mv	a4,a0
20402ec2:	070a                	slli	a4,a4,0x2
20402ec4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402ec8:	97ba                	add	a5,a5,a4
20402eca:	439c                	lw	a5,0(a5)
20402ecc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402ed0:	fac42783          	lw	a5,-84(s0)
20402ed4:	c78d                	beqz	a5,20402efe <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ed6:	fac42503          	lw	a0,-84(s0)
20402eda:	cf2ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402ede:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402ee2:	fa842783          	lw	a5,-88(s0)
20402ee6:	2f07a783          	lw	a5,752(a5)
20402eea:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402eee:	fa842783          	lw	a5,-88(s0)
20402ef2:	2e87a783          	lw	a5,744(a5)
20402ef6:	fa442583          	lw	a1,-92(s0)
20402efa:	4565                	li	a0,25
20402efc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402efe:	0001                	nop
20402f00:	40f6                	lw	ra,92(sp)
20402f02:	42e6                	lw	t0,88(sp)
20402f04:	4356                	lw	t1,84(sp)
20402f06:	43c6                	lw	t2,80(sp)
20402f08:	4436                	lw	s0,76(sp)
20402f0a:	4526                	lw	a0,72(sp)
20402f0c:	4596                	lw	a1,68(sp)
20402f0e:	4606                	lw	a2,64(sp)
20402f10:	56f2                	lw	a3,60(sp)
20402f12:	5762                	lw	a4,56(sp)
20402f14:	57d2                	lw	a5,52(sp)
20402f16:	5842                	lw	a6,48(sp)
20402f18:	58b2                	lw	a7,44(sp)
20402f1a:	5e22                	lw	t3,40(sp)
20402f1c:	5e92                	lw	t4,36(sp)
20402f1e:	5f02                	lw	t5,32(sp)
20402f20:	4ff2                	lw	t6,28(sp)
20402f22:	6125                	addi	sp,sp,96
20402f24:	30200073          	mret

20402f28 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402f28:	711d                	addi	sp,sp,-96
20402f2a:	ce86                	sw	ra,92(sp)
20402f2c:	cc96                	sw	t0,88(sp)
20402f2e:	ca9a                	sw	t1,84(sp)
20402f30:	c89e                	sw	t2,80(sp)
20402f32:	c6a2                	sw	s0,76(sp)
20402f34:	c4aa                	sw	a0,72(sp)
20402f36:	c2ae                	sw	a1,68(sp)
20402f38:	c0b2                	sw	a2,64(sp)
20402f3a:	de36                	sw	a3,60(sp)
20402f3c:	dc3a                	sw	a4,56(sp)
20402f3e:	da3e                	sw	a5,52(sp)
20402f40:	d842                	sw	a6,48(sp)
20402f42:	d646                	sw	a7,44(sp)
20402f44:	d472                	sw	t3,40(sp)
20402f46:	d276                	sw	t4,36(sp)
20402f48:	d07a                	sw	t5,32(sp)
20402f4a:	ce7e                	sw	t6,28(sp)
20402f4c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f4e:	cd4ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402f52:	872a                	mv	a4,a0
20402f54:	070a                	slli	a4,a4,0x2
20402f56:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f5a:	97ba                	add	a5,a5,a4
20402f5c:	439c                	lw	a5,0(a5)
20402f5e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402f62:	fac42783          	lw	a5,-84(s0)
20402f66:	c78d                	beqz	a5,20402f90 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f68:	fac42503          	lw	a0,-84(s0)
20402f6c:	c60ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20402f70:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402f74:	fa842783          	lw	a5,-88(s0)
20402f78:	3087a783          	lw	a5,776(a5)
20402f7c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402f80:	fa842783          	lw	a5,-88(s0)
20402f84:	3007a783          	lw	a5,768(a5)
20402f88:	fa442583          	lw	a1,-92(s0)
20402f8c:	4569                	li	a0,26
20402f8e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402f90:	0001                	nop
20402f92:	40f6                	lw	ra,92(sp)
20402f94:	42e6                	lw	t0,88(sp)
20402f96:	4356                	lw	t1,84(sp)
20402f98:	43c6                	lw	t2,80(sp)
20402f9a:	4436                	lw	s0,76(sp)
20402f9c:	4526                	lw	a0,72(sp)
20402f9e:	4596                	lw	a1,68(sp)
20402fa0:	4606                	lw	a2,64(sp)
20402fa2:	56f2                	lw	a3,60(sp)
20402fa4:	5762                	lw	a4,56(sp)
20402fa6:	57d2                	lw	a5,52(sp)
20402fa8:	5842                	lw	a6,48(sp)
20402faa:	58b2                	lw	a7,44(sp)
20402fac:	5e22                	lw	t3,40(sp)
20402fae:	5e92                	lw	t4,36(sp)
20402fb0:	5f02                	lw	t5,32(sp)
20402fb2:	4ff2                	lw	t6,28(sp)
20402fb4:	6125                	addi	sp,sp,96
20402fb6:	30200073          	mret

20402fba <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20402fba:	711d                	addi	sp,sp,-96
20402fbc:	ce86                	sw	ra,92(sp)
20402fbe:	cc96                	sw	t0,88(sp)
20402fc0:	ca9a                	sw	t1,84(sp)
20402fc2:	c89e                	sw	t2,80(sp)
20402fc4:	c6a2                	sw	s0,76(sp)
20402fc6:	c4aa                	sw	a0,72(sp)
20402fc8:	c2ae                	sw	a1,68(sp)
20402fca:	c0b2                	sw	a2,64(sp)
20402fcc:	de36                	sw	a3,60(sp)
20402fce:	dc3a                	sw	a4,56(sp)
20402fd0:	da3e                	sw	a5,52(sp)
20402fd2:	d842                	sw	a6,48(sp)
20402fd4:	d646                	sw	a7,44(sp)
20402fd6:	d472                	sw	t3,40(sp)
20402fd8:	d276                	sw	t4,36(sp)
20402fda:	d07a                	sw	t5,32(sp)
20402fdc:	ce7e                	sw	t6,28(sp)
20402fde:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fe0:	c42ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20402fe4:	872a                	mv	a4,a0
20402fe6:	070a                	slli	a4,a4,0x2
20402fe8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402fec:	97ba                	add	a5,a5,a4
20402fee:	439c                	lw	a5,0(a5)
20402ff0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20402ff4:	fac42783          	lw	a5,-84(s0)
20402ff8:	c78d                	beqz	a5,20403022 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ffa:	fac42503          	lw	a0,-84(s0)
20402ffe:	bceff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403002:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403006:	fa842783          	lw	a5,-88(s0)
2040300a:	3207a783          	lw	a5,800(a5)
2040300e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403012:	fa842783          	lw	a5,-88(s0)
20403016:	3187a783          	lw	a5,792(a5)
2040301a:	fa442583          	lw	a1,-92(s0)
2040301e:	456d                	li	a0,27
20403020:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403022:	0001                	nop
20403024:	40f6                	lw	ra,92(sp)
20403026:	42e6                	lw	t0,88(sp)
20403028:	4356                	lw	t1,84(sp)
2040302a:	43c6                	lw	t2,80(sp)
2040302c:	4436                	lw	s0,76(sp)
2040302e:	4526                	lw	a0,72(sp)
20403030:	4596                	lw	a1,68(sp)
20403032:	4606                	lw	a2,64(sp)
20403034:	56f2                	lw	a3,60(sp)
20403036:	5762                	lw	a4,56(sp)
20403038:	57d2                	lw	a5,52(sp)
2040303a:	5842                	lw	a6,48(sp)
2040303c:	58b2                	lw	a7,44(sp)
2040303e:	5e22                	lw	t3,40(sp)
20403040:	5e92                	lw	t4,36(sp)
20403042:	5f02                	lw	t5,32(sp)
20403044:	4ff2                	lw	t6,28(sp)
20403046:	6125                	addi	sp,sp,96
20403048:	30200073          	mret

2040304c <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
2040304c:	711d                	addi	sp,sp,-96
2040304e:	ce86                	sw	ra,92(sp)
20403050:	cc96                	sw	t0,88(sp)
20403052:	ca9a                	sw	t1,84(sp)
20403054:	c89e                	sw	t2,80(sp)
20403056:	c6a2                	sw	s0,76(sp)
20403058:	c4aa                	sw	a0,72(sp)
2040305a:	c2ae                	sw	a1,68(sp)
2040305c:	c0b2                	sw	a2,64(sp)
2040305e:	de36                	sw	a3,60(sp)
20403060:	dc3a                	sw	a4,56(sp)
20403062:	da3e                	sw	a5,52(sp)
20403064:	d842                	sw	a6,48(sp)
20403066:	d646                	sw	a7,44(sp)
20403068:	d472                	sw	t3,40(sp)
2040306a:	d276                	sw	t4,36(sp)
2040306c:	d07a                	sw	t5,32(sp)
2040306e:	ce7e                	sw	t6,28(sp)
20403070:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403072:	bb0ff0ef          	jal	ra,20402422 <__metal_myhart_id>
20403076:	872a                	mv	a4,a0
20403078:	070a                	slli	a4,a4,0x2
2040307a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040307e:	97ba                	add	a5,a5,a4
20403080:	439c                	lw	a5,0(a5)
20403082:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403086:	fac42783          	lw	a5,-84(s0)
2040308a:	c78d                	beqz	a5,204030b4 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040308c:	fac42503          	lw	a0,-84(s0)
20403090:	b3cff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403094:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403098:	fa842783          	lw	a5,-88(s0)
2040309c:	3387a783          	lw	a5,824(a5)
204030a0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
204030a4:	fa842783          	lw	a5,-88(s0)
204030a8:	3307a783          	lw	a5,816(a5)
204030ac:	fa442583          	lw	a1,-92(s0)
204030b0:	4571                	li	a0,28
204030b2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
204030b4:	0001                	nop
204030b6:	40f6                	lw	ra,92(sp)
204030b8:	42e6                	lw	t0,88(sp)
204030ba:	4356                	lw	t1,84(sp)
204030bc:	43c6                	lw	t2,80(sp)
204030be:	4436                	lw	s0,76(sp)
204030c0:	4526                	lw	a0,72(sp)
204030c2:	4596                	lw	a1,68(sp)
204030c4:	4606                	lw	a2,64(sp)
204030c6:	56f2                	lw	a3,60(sp)
204030c8:	5762                	lw	a4,56(sp)
204030ca:	57d2                	lw	a5,52(sp)
204030cc:	5842                	lw	a6,48(sp)
204030ce:	58b2                	lw	a7,44(sp)
204030d0:	5e22                	lw	t3,40(sp)
204030d2:	5e92                	lw	t4,36(sp)
204030d4:	5f02                	lw	t5,32(sp)
204030d6:	4ff2                	lw	t6,28(sp)
204030d8:	6125                	addi	sp,sp,96
204030da:	30200073          	mret

204030de <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
204030de:	711d                	addi	sp,sp,-96
204030e0:	ce86                	sw	ra,92(sp)
204030e2:	cc96                	sw	t0,88(sp)
204030e4:	ca9a                	sw	t1,84(sp)
204030e6:	c89e                	sw	t2,80(sp)
204030e8:	c6a2                	sw	s0,76(sp)
204030ea:	c4aa                	sw	a0,72(sp)
204030ec:	c2ae                	sw	a1,68(sp)
204030ee:	c0b2                	sw	a2,64(sp)
204030f0:	de36                	sw	a3,60(sp)
204030f2:	dc3a                	sw	a4,56(sp)
204030f4:	da3e                	sw	a5,52(sp)
204030f6:	d842                	sw	a6,48(sp)
204030f8:	d646                	sw	a7,44(sp)
204030fa:	d472                	sw	t3,40(sp)
204030fc:	d276                	sw	t4,36(sp)
204030fe:	d07a                	sw	t5,32(sp)
20403100:	ce7e                	sw	t6,28(sp)
20403102:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403104:	b1eff0ef          	jal	ra,20402422 <__metal_myhart_id>
20403108:	872a                	mv	a4,a0
2040310a:	070a                	slli	a4,a4,0x2
2040310c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403110:	97ba                	add	a5,a5,a4
20403112:	439c                	lw	a5,0(a5)
20403114:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403118:	fac42783          	lw	a5,-84(s0)
2040311c:	c78d                	beqz	a5,20403146 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040311e:	fac42503          	lw	a0,-84(s0)
20403122:	aaaff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403126:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
2040312a:	fa842783          	lw	a5,-88(s0)
2040312e:	3507a783          	lw	a5,848(a5)
20403132:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403136:	fa842783          	lw	a5,-88(s0)
2040313a:	3487a783          	lw	a5,840(a5)
2040313e:	fa442583          	lw	a1,-92(s0)
20403142:	4575                	li	a0,29
20403144:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403146:	0001                	nop
20403148:	40f6                	lw	ra,92(sp)
2040314a:	42e6                	lw	t0,88(sp)
2040314c:	4356                	lw	t1,84(sp)
2040314e:	43c6                	lw	t2,80(sp)
20403150:	4436                	lw	s0,76(sp)
20403152:	4526                	lw	a0,72(sp)
20403154:	4596                	lw	a1,68(sp)
20403156:	4606                	lw	a2,64(sp)
20403158:	56f2                	lw	a3,60(sp)
2040315a:	5762                	lw	a4,56(sp)
2040315c:	57d2                	lw	a5,52(sp)
2040315e:	5842                	lw	a6,48(sp)
20403160:	58b2                	lw	a7,44(sp)
20403162:	5e22                	lw	t3,40(sp)
20403164:	5e92                	lw	t4,36(sp)
20403166:	5f02                	lw	t5,32(sp)
20403168:	4ff2                	lw	t6,28(sp)
2040316a:	6125                	addi	sp,sp,96
2040316c:	30200073          	mret

20403170 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403170:	711d                	addi	sp,sp,-96
20403172:	ce86                	sw	ra,92(sp)
20403174:	cc96                	sw	t0,88(sp)
20403176:	ca9a                	sw	t1,84(sp)
20403178:	c89e                	sw	t2,80(sp)
2040317a:	c6a2                	sw	s0,76(sp)
2040317c:	c4aa                	sw	a0,72(sp)
2040317e:	c2ae                	sw	a1,68(sp)
20403180:	c0b2                	sw	a2,64(sp)
20403182:	de36                	sw	a3,60(sp)
20403184:	dc3a                	sw	a4,56(sp)
20403186:	da3e                	sw	a5,52(sp)
20403188:	d842                	sw	a6,48(sp)
2040318a:	d646                	sw	a7,44(sp)
2040318c:	d472                	sw	t3,40(sp)
2040318e:	d276                	sw	t4,36(sp)
20403190:	d07a                	sw	t5,32(sp)
20403192:	ce7e                	sw	t6,28(sp)
20403194:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403196:	a8cff0ef          	jal	ra,20402422 <__metal_myhart_id>
2040319a:	872a                	mv	a4,a0
2040319c:	070a                	slli	a4,a4,0x2
2040319e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204031a2:	97ba                	add	a5,a5,a4
204031a4:	439c                	lw	a5,0(a5)
204031a6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204031aa:	fac42783          	lw	a5,-84(s0)
204031ae:	c78d                	beqz	a5,204031d8 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031b0:	fac42503          	lw	a0,-84(s0)
204031b4:	a18ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
204031b8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204031bc:	fa842783          	lw	a5,-88(s0)
204031c0:	3687a783          	lw	a5,872(a5)
204031c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
204031c8:	fa842783          	lw	a5,-88(s0)
204031cc:	3607a783          	lw	a5,864(a5)
204031d0:	fa442583          	lw	a1,-92(s0)
204031d4:	4579                	li	a0,30
204031d6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
204031d8:	0001                	nop
204031da:	40f6                	lw	ra,92(sp)
204031dc:	42e6                	lw	t0,88(sp)
204031de:	4356                	lw	t1,84(sp)
204031e0:	43c6                	lw	t2,80(sp)
204031e2:	4436                	lw	s0,76(sp)
204031e4:	4526                	lw	a0,72(sp)
204031e6:	4596                	lw	a1,68(sp)
204031e8:	4606                	lw	a2,64(sp)
204031ea:	56f2                	lw	a3,60(sp)
204031ec:	5762                	lw	a4,56(sp)
204031ee:	57d2                	lw	a5,52(sp)
204031f0:	5842                	lw	a6,48(sp)
204031f2:	58b2                	lw	a7,44(sp)
204031f4:	5e22                	lw	t3,40(sp)
204031f6:	5e92                	lw	t4,36(sp)
204031f8:	5f02                	lw	t5,32(sp)
204031fa:	4ff2                	lw	t6,28(sp)
204031fc:	6125                	addi	sp,sp,96
204031fe:	30200073          	mret

20403202 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403202:	711d                	addi	sp,sp,-96
20403204:	ce86                	sw	ra,92(sp)
20403206:	cc96                	sw	t0,88(sp)
20403208:	ca9a                	sw	t1,84(sp)
2040320a:	c89e                	sw	t2,80(sp)
2040320c:	c6a2                	sw	s0,76(sp)
2040320e:	c4aa                	sw	a0,72(sp)
20403210:	c2ae                	sw	a1,68(sp)
20403212:	c0b2                	sw	a2,64(sp)
20403214:	de36                	sw	a3,60(sp)
20403216:	dc3a                	sw	a4,56(sp)
20403218:	da3e                	sw	a5,52(sp)
2040321a:	d842                	sw	a6,48(sp)
2040321c:	d646                	sw	a7,44(sp)
2040321e:	d472                	sw	t3,40(sp)
20403220:	d276                	sw	t4,36(sp)
20403222:	d07a                	sw	t5,32(sp)
20403224:	ce7e                	sw	t6,28(sp)
20403226:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403228:	9faff0ef          	jal	ra,20402422 <__metal_myhart_id>
2040322c:	872a                	mv	a4,a0
2040322e:	070a                	slli	a4,a4,0x2
20403230:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403234:	97ba                	add	a5,a5,a4
20403236:	439c                	lw	a5,0(a5)
20403238:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2040323c:	fac42783          	lw	a5,-84(s0)
20403240:	c78d                	beqz	a5,2040326a <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403242:	fac42503          	lw	a0,-84(s0)
20403246:	986ff0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
2040324a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
2040324e:	fa842783          	lw	a5,-88(s0)
20403252:	3807a783          	lw	a5,896(a5)
20403256:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
2040325a:	fa842783          	lw	a5,-88(s0)
2040325e:	3787a783          	lw	a5,888(a5)
20403262:	fa442583          	lw	a1,-92(s0)
20403266:	457d                	li	a0,31
20403268:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
2040326a:	0001                	nop
2040326c:	40f6                	lw	ra,92(sp)
2040326e:	42e6                	lw	t0,88(sp)
20403270:	4356                	lw	t1,84(sp)
20403272:	43c6                	lw	t2,80(sp)
20403274:	4436                	lw	s0,76(sp)
20403276:	4526                	lw	a0,72(sp)
20403278:	4596                	lw	a1,68(sp)
2040327a:	4606                	lw	a2,64(sp)
2040327c:	56f2                	lw	a3,60(sp)
2040327e:	5762                	lw	a4,56(sp)
20403280:	57d2                	lw	a5,52(sp)
20403282:	5842                	lw	a6,48(sp)
20403284:	58b2                	lw	a7,44(sp)
20403286:	5e22                	lw	t3,40(sp)
20403288:	5e92                	lw	t4,36(sp)
2040328a:	5f02                	lw	t5,32(sp)
2040328c:	4ff2                	lw	t6,28(sp)
2040328e:	6125                	addi	sp,sp,96
20403290:	30200073          	mret

20403294 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403294:	1101                	addi	sp,sp,-32
20403296:	ce22                	sw	s0,28(sp)
20403298:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040329a:	305027f3          	csrr	a5,mtvec
2040329e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204032a2:	fec42783          	lw	a5,-20(s0)
204032a6:	03f7f793          	andi	a5,a5,63
204032aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204032ae:	fec42703          	lw	a4,-20(s0)
204032b2:	4789                	li	a5,2
204032b4:	00f70d63          	beq	a4,a5,204032ce <__metal_controller_interrupt_vector_mode+0x3a>
204032b8:	fec42703          	lw	a4,-20(s0)
204032bc:	478d                	li	a5,3
204032be:	00f70a63          	beq	a4,a5,204032d2 <__metal_controller_interrupt_vector_mode+0x3e>
204032c2:	fec42703          	lw	a4,-20(s0)
204032c6:	4785                	li	a5,1
204032c8:	00f70763          	beq	a4,a5,204032d6 <__metal_controller_interrupt_vector_mode+0x42>
204032cc:	a039                	j	204032da <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
204032ce:	478d                	li	a5,3
204032d0:	a031                	j	204032dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204032d2:	4791                	li	a5,4
204032d4:	a021                	j	204032dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204032d6:	4785                	li	a5,1
204032d8:	a011                	j	204032dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
204032da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
204032dc:	853e                	mv	a0,a5
204032de:	4472                	lw	s0,28(sp)
204032e0:	6105                	addi	sp,sp,32
204032e2:	8082                	ret

204032e4 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204032e4:	7179                	addi	sp,sp,-48
204032e6:	d622                	sw	s0,44(sp)
204032e8:	1800                	addi	s0,sp,48
204032ea:	fca42e23          	sw	a0,-36(s0)
204032ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
204032f2:	305027f3          	csrr	a5,mtvec
204032f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204032fa:	fec42783          	lw	a5,-20(s0)
204032fe:	fc07f793          	andi	a5,a5,-64
20403302:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403306:	fd842783          	lw	a5,-40(s0)
2040330a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040330e:	fdc42703          	lw	a4,-36(s0)
20403312:	4791                	li	a5,4
20403314:	06e7e063          	bltu	a5,a4,20403374 <__metal_controller_interrupt_vector+0x90>
20403318:	fdc42783          	lw	a5,-36(s0)
2040331c:	00279713          	slli	a4,a5,0x2
20403320:	204057b7          	lui	a5,0x20405
20403324:	46c78793          	addi	a5,a5,1132 # 2040546c <__metal_driver_vtable_riscv_clint0+0x4c>
20403328:	97ba                	add	a5,a5,a4
2040332a:	439c                	lw	a5,0(a5)
2040332c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
2040332e:	fe842783          	lw	a5,-24(s0)
20403332:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403336:	fec42783          	lw	a5,-20(s0)
2040333a:	0027e793          	ori	a5,a5,2
2040333e:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403342:	a80d                	j	20403374 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403344:	fe842783          	lw	a5,-24(s0)
20403348:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040334c:	fec42783          	lw	a5,-20(s0)
20403350:	0037e793          	ori	a5,a5,3
20403354:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403358:	a831                	j	20403374 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040335a:	fe842783          	lw	a5,-24(s0)
2040335e:	0017e793          	ori	a5,a5,1
20403362:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403366:	a039                	j	20403374 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403368:	fe842783          	lw	a5,-24(s0)
2040336c:	9bf1                	andi	a5,a5,-4
2040336e:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403372:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403374:	0001                	nop
20403376:	5432                	lw	s0,44(sp)
20403378:	6145                	addi	sp,sp,48
2040337a:	8082                	ret

2040337c <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040337c:	1101                	addi	sp,sp,-32
2040337e:	ce22                	sw	s0,28(sp)
20403380:	1000                	addi	s0,sp,32
20403382:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403386:	fec42783          	lw	a5,-20(s0)
2040338a:	17f5                	addi	a5,a5,-3
2040338c:	4771                	li	a4,28
2040338e:	00f76d63          	bltu	a4,a5,204033a8 <__metal_valid_interrupt_id+0x2c>
20403392:	00279713          	slli	a4,a5,0x2
20403396:	204057b7          	lui	a5,0x20405
2040339a:	48078793          	addi	a5,a5,1152 # 20405480 <__metal_driver_vtable_riscv_clint0+0x60>
2040339e:	97ba                	add	a5,a5,a4
204033a0:	439c                	lw	a5,0(a5)
204033a2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204033a4:	4785                	li	a5,1
204033a6:	a019                	j	204033ac <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204033a8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204033aa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204033ac:	853e                	mv	a0,a5
204033ae:	4472                	lw	s0,28(sp)
204033b0:	6105                	addi	sp,sp,32
204033b2:	8082                	ret

204033b4 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204033b4:	7179                	addi	sp,sp,-48
204033b6:	d606                	sw	ra,44(sp)
204033b8:	d422                	sw	s0,40(sp)
204033ba:	1800                	addi	s0,sp,48
204033bc:	fca42e23          	sw	a0,-36(s0)
204033c0:	fcb42c23          	sw	a1,-40(s0)
204033c4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204033c8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204033cc:	fdc42783          	lw	a5,-36(s0)
204033d0:	e399                	bnez	a5,204033d6 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204033d2:	57fd                	li	a5,-1
204033d4:	a849                	j	20403466 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204033d6:	fd842703          	lw	a4,-40(s0)
204033da:	47fd                	li	a5,31
204033dc:	08e7e063          	bltu	a5,a4,2040345c <__metal_local_interrupt_enable+0xa8>
204033e0:	fd842783          	lw	a5,-40(s0)
204033e4:	00279713          	slli	a4,a5,0x2
204033e8:	204057b7          	lui	a5,0x20405
204033ec:	4f478793          	addi	a5,a5,1268 # 204054f4 <__metal_driver_vtable_riscv_clint0+0xd4>
204033f0:	97ba                	add	a5,a5,a4
204033f2:	439c                	lw	a5,0(a5)
204033f4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204033f6:	fd442783          	lw	a5,-44(s0)
204033fa:	c781                	beqz	a5,20403402 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204033fc:	840ff0ef          	jal	ra,2040243c <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403400:	a08d                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403402:	852ff0ef          	jal	ra,20402454 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403406:	a8b1                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403408:	fd442783          	lw	a5,-44(s0)
2040340c:	c781                	beqz	a5,20403414 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040340e:	85eff0ef          	jal	ra,2040246c <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403412:	a881                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403414:	870ff0ef          	jal	ra,20402484 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403418:	a0a9                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040341a:	fd442783          	lw	a5,-44(s0)
2040341e:	c781                	beqz	a5,20403426 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403420:	87cff0ef          	jal	ra,2040249c <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403424:	a83d                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403426:	890ff0ef          	jal	ra,204024b6 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040342a:	a825                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040342c:	fd442783          	lw	a5,-44(s0)
20403430:	c781                	beqz	a5,20403438 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403432:	89eff0ef          	jal	ra,204024d0 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403436:	a035                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20403438:	8b4ff0ef          	jal	ra,204024ec <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040343c:	a01d                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
2040343e:	fd442783          	lw	a5,-44(s0)
20403442:	c799                	beqz	a5,20403450 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403444:	fd842783          	lw	a5,-40(s0)
20403448:	853e                	mv	a0,a5
2040344a:	8beff0ef          	jal	ra,20402508 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
2040344e:	a811                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403450:	fd842783          	lw	a5,-40(s0)
20403454:	853e                	mv	a0,a5
20403456:	8deff0ef          	jal	ra,20402534 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040345a:	a021                	j	20403462 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040345c:	57fd                	li	a5,-1
2040345e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403462:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403466:	853e                	mv	a0,a5
20403468:	50b2                	lw	ra,44(sp)
2040346a:	5422                	lw	s0,40(sp)
2040346c:	6145                	addi	sp,sp,48
2040346e:	8082                	ret

20403470 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403470:	7179                	addi	sp,sp,-48
20403472:	d622                	sw	s0,44(sp)
20403474:	1800                	addi	s0,sp,48
20403476:	fca42e23          	sw	a0,-36(s0)
2040347a:	fcb42c23          	sw	a1,-40(s0)
2040347e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403482:	fdc42783          	lw	a5,-36(s0)
20403486:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040348a:	fd842703          	lw	a4,-40(s0)
2040348e:	47ad                	li	a5,11
20403490:	02e7c263          	blt	a5,a4,204034b4 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403494:	fd442783          	lw	a5,-44(s0)
20403498:	cf91                	beqz	a5,204034b4 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040349a:	fec42703          	lw	a4,-20(s0)
2040349e:	fd842783          	lw	a5,-40(s0)
204034a2:	0e078793          	addi	a5,a5,224
204034a6:	078a                	slli	a5,a5,0x2
204034a8:	97ba                	add	a5,a5,a4
204034aa:	fd442703          	lw	a4,-44(s0)
204034ae:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204034b0:	4781                	li	a5,0
204034b2:	a011                	j	204034b6 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204034b4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204034b6:	853e                	mv	a0,a5
204034b8:	5432                	lw	s0,44(sp)
204034ba:	6145                	addi	sp,sp,48
204034bc:	8082                	ret

204034be <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204034be:	7139                	addi	sp,sp,-64
204034c0:	de06                	sw	ra,60(sp)
204034c2:	dc22                	sw	s0,56(sp)
204034c4:	0080                	addi	s0,sp,64
204034c6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204034ca:	fcc42783          	lw	a5,-52(s0)
204034ce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204034d2:	fe442783          	lw	a5,-28(s0)
204034d6:	43dc                	lw	a5,4(a5)
204034d8:	10079d63          	bnez	a5,204035f2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204034dc:	57fd                	li	a5,-1
204034de:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204034e2:	57fd                	li	a5,-1
204034e4:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204034e8:	301027f3          	csrr	a5,misa
204034ec:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204034f0:	fe042703          	lw	a4,-32(s0)
204034f4:	6789                	lui	a5,0x2
204034f6:	8ff9                	and	a5,a5,a4
204034f8:	e799                	bnez	a5,20403506 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204034fa:	fe042703          	lw	a4,-32(s0)
204034fe:	000407b7          	lui	a5,0x40
20403502:	8ff9                	and	a5,a5,a4
20403504:	c799                	beqz	a5,20403512 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403506:	57fd                	li	a5,-1
20403508:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040350c:	57fd                	li	a5,-1
2040350e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403512:	fe042703          	lw	a4,-32(s0)
20403516:	000407b7          	lui	a5,0x40
2040351a:	8ff9                	and	a5,a5,a4
2040351c:	c781                	beqz	a5,20403524 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040351e:	57fd                	li	a5,-1
20403520:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403524:	fe042623          	sw	zero,-20(s0)
20403528:	a0b9                	j	20403576 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040352a:	fe442683          	lw	a3,-28(s0)
2040352e:	fec42703          	lw	a4,-20(s0)
20403532:	87ba                	mv	a5,a4
20403534:	0786                	slli	a5,a5,0x1
20403536:	97ba                	add	a5,a5,a4
20403538:	078e                	slli	a5,a5,0x3
2040353a:	97b6                	add	a5,a5,a3
2040353c:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403540:	fe442683          	lw	a3,-28(s0)
20403544:	fec42703          	lw	a4,-20(s0)
20403548:	87ba                	mv	a5,a4
2040354a:	0786                	slli	a5,a5,0x1
2040354c:	97ba                	add	a5,a5,a4
2040354e:	078e                	slli	a5,a5,0x3
20403550:	97b6                	add	a5,a5,a3
20403552:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403556:	fe442683          	lw	a3,-28(s0)
2040355a:	fec42703          	lw	a4,-20(s0)
2040355e:	87ba                	mv	a5,a4
20403560:	0786                	slli	a5,a5,0x1
20403562:	97ba                	add	a5,a5,a4
20403564:	078e                	slli	a5,a5,0x3
20403566:	97b6                	add	a5,a5,a3
20403568:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040356c:	fec42783          	lw	a5,-20(s0)
20403570:	0785                	addi	a5,a5,1
20403572:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403576:	fec42703          	lw	a4,-20(s0)
2040357a:	47fd                	li	a5,31
2040357c:	fae7d7e3          	bge	a5,a4,2040352a <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403580:	fe042423          	sw	zero,-24(s0)
20403584:	a01d                	j	204035aa <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403586:	fe442703          	lw	a4,-28(s0)
2040358a:	fe842783          	lw	a5,-24(s0)
2040358e:	0e078793          	addi	a5,a5,224
20403592:	078a                	slli	a5,a5,0x2
20403594:	97ba                	add	a5,a5,a4
20403596:	20402737          	lui	a4,0x20402
2040359a:	56070713          	addi	a4,a4,1376 # 20402560 <__metal_default_exception_handler>
2040359e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204035a0:	fe842783          	lw	a5,-24(s0)
204035a4:	0785                	addi	a5,a5,1
204035a6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204035aa:	fe842703          	lw	a4,-24(s0)
204035ae:	47ad                	li	a5,11
204035b0:	fce7dbe3          	bge	a5,a4,20403586 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204035b4:	204037b7          	lui	a5,0x20403
204035b8:	80078593          	addi	a1,a5,-2048 # 20402800 <__metal_exception_handler>
204035bc:	4501                	li	a0,0
204035be:	331d                	jal	204032e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204035c0:	301027f3          	csrr	a5,misa
204035c4:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204035c8:	fdc42703          	lw	a4,-36(s0)
204035cc:	67c1                	lui	a5,0x10
204035ce:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204035d2:	8ff9                	and	a5,a5,a4
204035d4:	cb99                	beqz	a5,204035ea <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204035d6:	300027f3          	csrr	a5,mstatus
204035da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204035de:	fdc42703          	lw	a4,-36(s0)
204035e2:	6789                	lui	a5,0x2
204035e4:	8fd9                	or	a5,a5,a4
204035e6:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204035ea:	fe442783          	lw	a5,-28(s0)
204035ee:	4705                	li	a4,1
204035f0:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204035f2:	0001                	nop
204035f4:	50f2                	lw	ra,60(sp)
204035f6:	5462                	lw	s0,56(sp)
204035f8:	6121                	addi	sp,sp,64
204035fa:	8082                	ret

204035fc <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204035fc:	7179                	addi	sp,sp,-48
204035fe:	d606                	sw	ra,44(sp)
20403600:	d422                	sw	s0,40(sp)
20403602:	1800                	addi	s0,sp,48
20403604:	fca42e23          	sw	a0,-36(s0)
20403608:	fcb42c23          	sw	a1,-40(s0)
2040360c:	fcc42a23          	sw	a2,-44(s0)
20403610:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403614:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403618:	fdc42783          	lw	a5,-36(s0)
2040361c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403620:	fd842503          	lw	a0,-40(s0)
20403624:	3ba1                	jal	2040337c <__metal_valid_interrupt_id>
20403626:	87aa                	mv	a5,a0
20403628:	e399                	bnez	a5,2040362e <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
2040362a:	57d5                	li	a5,-11
2040362c:	aa11                	j	20403740 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
2040362e:	fd442783          	lw	a5,-44(s0)
20403632:	cf85                	beqz	a5,2040366a <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403634:	fe842683          	lw	a3,-24(s0)
20403638:	fd842703          	lw	a4,-40(s0)
2040363c:	87ba                	mv	a5,a4
2040363e:	0786                	slli	a5,a5,0x1
20403640:	97ba                	add	a5,a5,a4
20403642:	078e                	slli	a5,a5,0x3
20403644:	97b6                	add	a5,a5,a3
20403646:	fd442703          	lw	a4,-44(s0)
2040364a:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
2040364e:	fe842683          	lw	a3,-24(s0)
20403652:	fd842703          	lw	a4,-40(s0)
20403656:	87ba                	mv	a5,a4
20403658:	0786                	slli	a5,a5,0x1
2040365a:	97ba                	add	a5,a5,a4
2040365c:	078e                	slli	a5,a5,0x3
2040365e:	97b6                	add	a5,a5,a3
20403660:	fd042703          	lw	a4,-48(s0)
20403664:	08e7ac23          	sw	a4,152(a5)
20403668:	a8d1                	j	2040373c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
2040366a:	fd842783          	lw	a5,-40(s0)
2040366e:	17f5                	addi	a5,a5,-3
20403670:	4771                	li	a4,28
20403672:	0cf76263          	bltu	a4,a5,20403736 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403676:	00279713          	slli	a4,a5,0x2
2040367a:	204057b7          	lui	a5,0x20405
2040367e:	57478793          	addi	a5,a5,1396 # 20405574 <__metal_driver_vtable_riscv_clint0+0x154>
20403682:	97ba                	add	a5,a5,a4
20403684:	439c                	lw	a5,0(a5)
20403686:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403688:	fe842683          	lw	a3,-24(s0)
2040368c:	fd842703          	lw	a4,-40(s0)
20403690:	87ba                	mv	a5,a4
20403692:	0786                	slli	a5,a5,0x1
20403694:	97ba                	add	a5,a5,a4
20403696:	078e                	slli	a5,a5,0x3
20403698:	97b6                	add	a5,a5,a3
2040369a:	20402737          	lui	a4,0x20402
2040369e:	64c70713          	addi	a4,a4,1612 # 2040264c <__metal_default_sw_handler>
204036a2:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204036a6:	fe842683          	lw	a3,-24(s0)
204036aa:	fd842703          	lw	a4,-40(s0)
204036ae:	87ba                	mv	a5,a4
204036b0:	0786                	slli	a5,a5,0x1
204036b2:	97ba                	add	a5,a5,a4
204036b4:	078e                	slli	a5,a5,0x3
204036b6:	97b6                	add	a5,a5,a3
204036b8:	fd042703          	lw	a4,-48(s0)
204036bc:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204036c0:	a8b5                	j	2040373c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204036c2:	fe842683          	lw	a3,-24(s0)
204036c6:	fd842703          	lw	a4,-40(s0)
204036ca:	87ba                	mv	a5,a4
204036cc:	0786                	slli	a5,a5,0x1
204036ce:	97ba                	add	a5,a5,a4
204036d0:	078e                	slli	a5,a5,0x3
204036d2:	97b6                	add	a5,a5,a3
204036d4:	20402737          	lui	a4,0x20402
204036d8:	73e70713          	addi	a4,a4,1854 # 2040273e <__metal_default_timer_handler>
204036dc:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204036e0:	fe842683          	lw	a3,-24(s0)
204036e4:	fd842703          	lw	a4,-40(s0)
204036e8:	87ba                	mv	a5,a4
204036ea:	0786                	slli	a5,a5,0x1
204036ec:	97ba                	add	a5,a5,a4
204036ee:	078e                	slli	a5,a5,0x3
204036f0:	97b6                	add	a5,a5,a3
204036f2:	fd042703          	lw	a4,-48(s0)
204036f6:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
204036fa:	a089                	j	2040373c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204036fc:	fe842683          	lw	a3,-24(s0)
20403700:	fd842703          	lw	a4,-40(s0)
20403704:	87ba                	mv	a5,a4
20403706:	0786                	slli	a5,a5,0x1
20403708:	97ba                	add	a5,a5,a4
2040370a:	078e                	slli	a5,a5,0x3
2040370c:	97b6                	add	a5,a5,a3
2040370e:	20402737          	lui	a4,0x20402
20403712:	57870713          	addi	a4,a4,1400 # 20402578 <__metal_default_interrupt_handler>
20403716:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040371a:	fe842683          	lw	a3,-24(s0)
2040371e:	fd842703          	lw	a4,-40(s0)
20403722:	87ba                	mv	a5,a4
20403724:	0786                	slli	a5,a5,0x1
20403726:	97ba                	add	a5,a5,a4
20403728:	078e                	slli	a5,a5,0x3
2040372a:	97b6                	add	a5,a5,a3
2040372c:	fd042703          	lw	a4,-48(s0)
20403730:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403734:	a021                	j	2040373c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403736:	57d1                	li	a5,-12
20403738:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
2040373c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403740:	853e                	mv	a0,a5
20403742:	50b2                	lw	ra,44(sp)
20403744:	5422                	lw	s0,40(sp)
20403746:	6145                	addi	sp,sp,48
20403748:	8082                	ret

2040374a <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
2040374a:	1101                	addi	sp,sp,-32
2040374c:	ce06                	sw	ra,28(sp)
2040374e:	cc22                	sw	s0,24(sp)
20403750:	1000                	addi	s0,sp,32
20403752:	fea42623          	sw	a0,-20(s0)
20403756:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
2040375a:	fe842783          	lw	a5,-24(s0)
2040375e:	4605                	li	a2,1
20403760:	85be                	mv	a1,a5
20403762:	fec42503          	lw	a0,-20(s0)
20403766:	c4fff0ef          	jal	ra,204033b4 <__metal_local_interrupt_enable>
2040376a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
2040376c:	853e                	mv	a0,a5
2040376e:	40f2                	lw	ra,28(sp)
20403770:	4462                	lw	s0,24(sp)
20403772:	6105                	addi	sp,sp,32
20403774:	8082                	ret

20403776 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403776:	1101                	addi	sp,sp,-32
20403778:	ce06                	sw	ra,28(sp)
2040377a:	cc22                	sw	s0,24(sp)
2040377c:	1000                	addi	s0,sp,32
2040377e:	fea42623          	sw	a0,-20(s0)
20403782:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403786:	fe842783          	lw	a5,-24(s0)
2040378a:	4601                	li	a2,0
2040378c:	85be                	mv	a1,a5
2040378e:	fec42503          	lw	a0,-20(s0)
20403792:	c23ff0ef          	jal	ra,204033b4 <__metal_local_interrupt_enable>
20403796:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403798:	853e                	mv	a0,a5
2040379a:	40f2                	lw	ra,28(sp)
2040379c:	4462                	lw	s0,24(sp)
2040379e:	6105                	addi	sp,sp,32
204037a0:	8082                	ret

204037a2 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
204037a2:	1101                	addi	sp,sp,-32
204037a4:	ce06                	sw	ra,28(sp)
204037a6:	cc22                	sw	s0,24(sp)
204037a8:	1000                	addi	s0,sp,32
204037aa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204037ae:	ae7ff0ef          	jal	ra,20403294 <__metal_controller_interrupt_vector_mode>
204037b2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204037b4:	853e                	mv	a0,a5
204037b6:	40f2                	lw	ra,28(sp)
204037b8:	4462                	lw	s0,24(sp)
204037ba:	6105                	addi	sp,sp,32
204037bc:	8082                	ret

204037be <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204037be:	7179                	addi	sp,sp,-48
204037c0:	d606                	sw	ra,44(sp)
204037c2:	d422                	sw	s0,40(sp)
204037c4:	1800                	addi	s0,sp,48
204037c6:	fca42e23          	sw	a0,-36(s0)
204037ca:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204037ce:	fdc42783          	lw	a5,-36(s0)
204037d2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204037d6:	fd842783          	lw	a5,-40(s0)
204037da:	eb99                	bnez	a5,204037f0 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204037dc:	204037b7          	lui	a5,0x20403
204037e0:	80078593          	addi	a1,a5,-2048 # 20402800 <__metal_exception_handler>
204037e4:	fd842503          	lw	a0,-40(s0)
204037e8:	afdff0ef          	jal	ra,204032e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204037ec:	4781                	li	a5,0
204037ee:	a00d                	j	20403810 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204037f0:	fd842703          	lw	a4,-40(s0)
204037f4:	4785                	li	a5,1
204037f6:	00f71c63          	bne	a4,a5,2040380e <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
204037fa:	204057b7          	lui	a5,0x20405
204037fe:	10078593          	addi	a1,a5,256 # 20405100 <__metal_vector_table>
20403802:	fd842503          	lw	a0,-40(s0)
20403806:	adfff0ef          	jal	ra,204032e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2040380a:	4781                	li	a5,0
2040380c:	a011                	j	20403810 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040380e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403810:	853e                	mv	a0,a5
20403812:	50b2                	lw	ra,44(sp)
20403814:	5422                	lw	s0,40(sp)
20403816:	6145                	addi	sp,sp,48
20403818:	8082                	ret

2040381a <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2040381a:	1101                	addi	sp,sp,-32
2040381c:	ce22                	sw	s0,28(sp)
2040381e:	1000                	addi	s0,sp,32
20403820:	fea42623          	sw	a0,-20(s0)
20403824:	feb42423          	sw	a1,-24(s0)
20403828:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
2040382c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
2040382e:	853e                	mv	a0,a5
20403830:	4472                	lw	s0,28(sp)
20403832:	6105                	addi	sp,sp,32
20403834:	8082                	ret

20403836 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403836:	7139                	addi	sp,sp,-64
20403838:	de22                	sw	s0,60(sp)
2040383a:	0080                	addi	s0,sp,64
2040383c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403840:	4301                	li	t1,0
20403842:	4381                	li	t2,0
20403844:	fe642423          	sw	t1,-24(s0)
20403848:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
2040384c:	b8002573          	csrr	a0,mcycleh
20403850:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403854:	b0002573          	csrr	a0,mcycle
20403858:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
2040385c:	b8002573          	csrr	a0,mcycleh
20403860:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403864:	fe442883          	lw	a7,-28(s0)
20403868:	fdc42503          	lw	a0,-36(s0)
2040386c:	02a89563          	bne	a7,a0,20403896 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403870:	fe442503          	lw	a0,-28(s0)
20403874:	85aa                	mv	a1,a0
20403876:	4601                	li	a2,0
20403878:	00059813          	slli	a6,a1,0x0
2040387c:	4781                	li	a5,0
2040387e:	fe042603          	lw	a2,-32(s0)
20403882:	86b2                	mv	a3,a2
20403884:	4701                	li	a4,0
20403886:	00d7e633          	or	a2,a5,a3
2040388a:	fec42423          	sw	a2,-24(s0)
2040388e:	00e867b3          	or	a5,a6,a4
20403892:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403896:	fe842783          	lw	a5,-24(s0)
2040389a:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
2040389e:	853e                	mv	a0,a5
204038a0:	85c2                	mv	a1,a6
204038a2:	5472                	lw	s0,60(sp)
204038a4:	6121                	addi	sp,sp,64
204038a6:	8082                	ret

204038a8 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204038a8:	7179                	addi	sp,sp,-48
204038aa:	d606                	sw	ra,44(sp)
204038ac:	d422                	sw	s0,40(sp)
204038ae:	d24a                	sw	s2,36(sp)
204038b0:	d04e                	sw	s3,32(sp)
204038b2:	1800                	addi	s0,sp,48
204038b4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204038b8:	fdc42783          	lw	a5,-36(s0)
204038bc:	e781                	bnez	a5,204038c4 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204038be:	4901                	li	s2,0
204038c0:	4981                	li	s3,0
204038c2:	a821                	j	204038da <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204038c4:	fdc42503          	lw	a0,-36(s0)
204038c8:	adbfe0ef          	jal	ra,204023a2 <__metal_driver_cpu_timebase>
204038cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204038d0:	fec42783          	lw	a5,-20(s0)
204038d4:	893e                	mv	s2,a5
204038d6:	87fd                	srai	a5,a5,0x1f
204038d8:	89be                	mv	s3,a5
204038da:	87ca                	mv	a5,s2
204038dc:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204038de:	853e                	mv	a0,a5
204038e0:	85c2                	mv	a1,a6
204038e2:	50b2                	lw	ra,44(sp)
204038e4:	5422                	lw	s0,40(sp)
204038e6:	5912                	lw	s2,36(sp)
204038e8:	5982                	lw	s3,32(sp)
204038ea:	6145                	addi	sp,sp,48
204038ec:	8082                	ret

204038ee <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204038ee:	7179                	addi	sp,sp,-48
204038f0:	d606                	sw	ra,44(sp)
204038f2:	d422                	sw	s0,40(sp)
204038f4:	1800                	addi	s0,sp,48
204038f6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
204038fa:	4781                	li	a5,0
204038fc:	4801                	li	a6,0
204038fe:	fef42023          	sw	a5,-32(s0)
20403902:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403906:	fdc42503          	lw	a0,-36(s0)
2040390a:	ac3fe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
2040390e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403912:	fec42783          	lw	a5,-20(s0)
20403916:	c78d                	beqz	a5,20403940 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403918:	fec42783          	lw	a5,-20(s0)
2040391c:	13c7a783          	lw	a5,316(a5)
20403920:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403924:	fe842783          	lw	a5,-24(s0)
20403928:	cf81                	beqz	a5,20403940 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
2040392a:	fe842783          	lw	a5,-24(s0)
2040392e:	439c                	lw	a5,0(a5)
20403930:	43f8                	lw	a4,68(a5)
20403932:	fe040793          	addi	a5,s0,-32
20403936:	863e                	mv	a2,a5
20403938:	4585                	li	a1,1
2040393a:	fe842503          	lw	a0,-24(s0)
2040393e:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403940:	fe042783          	lw	a5,-32(s0)
20403944:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403948:	853e                	mv	a0,a5
2040394a:	85c2                	mv	a1,a6
2040394c:	50b2                	lw	ra,44(sp)
2040394e:	5422                	lw	s0,40(sp)
20403950:	6145                	addi	sp,sp,48
20403952:	8082                	ret

20403954 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403954:	7179                	addi	sp,sp,-48
20403956:	d606                	sw	ra,44(sp)
20403958:	d422                	sw	s0,40(sp)
2040395a:	d226                	sw	s1,36(sp)
2040395c:	1800                	addi	s0,sp,48
2040395e:	fca42e23          	sw	a0,-36(s0)
20403962:	fcb42823          	sw	a1,-48(s0)
20403966:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
2040396a:	57fd                	li	a5,-1
2040396c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403970:	fdc42503          	lw	a0,-36(s0)
20403974:	a59fe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403978:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
2040397c:	fe842783          	lw	a5,-24(s0)
20403980:	cf8d                	beqz	a5,204039ba <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403982:	fe842783          	lw	a5,-24(s0)
20403986:	13c7a783          	lw	a5,316(a5)
2040398a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
2040398e:	fe442783          	lw	a5,-28(s0)
20403992:	c785                	beqz	a5,204039ba <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403994:	fe442783          	lw	a5,-28(s0)
20403998:	439c                	lw	a5,0(a5)
2040399a:	47a4                	lw	s1,72(a5)
2040399c:	fdc42503          	lw	a0,-36(s0)
204039a0:	9dffe0ef          	jal	ra,2040237e <__metal_driver_cpu_hartid>
204039a4:	87aa                	mv	a5,a0
204039a6:	fd042603          	lw	a2,-48(s0)
204039aa:	fd442683          	lw	a3,-44(s0)
204039ae:	85be                	mv	a1,a5
204039b0:	fe442503          	lw	a0,-28(s0)
204039b4:	9482                	jalr	s1
204039b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
204039ba:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
204039be:	853e                	mv	a0,a5
204039c0:	50b2                	lw	ra,44(sp)
204039c2:	5422                	lw	s0,40(sp)
204039c4:	5492                	lw	s1,36(sp)
204039c6:	6145                	addi	sp,sp,48
204039c8:	8082                	ret

204039ca <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
204039ca:	1101                	addi	sp,sp,-32
204039cc:	ce22                	sw	s0,28(sp)
204039ce:	1000                	addi	s0,sp,32
204039d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204039d4:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204039d8:	853e                	mv	a0,a5
204039da:	4472                	lw	s0,28(sp)
204039dc:	6105                	addi	sp,sp,32
204039de:	8082                	ret

204039e0 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204039e0:	1101                	addi	sp,sp,-32
204039e2:	ce22                	sw	s0,28(sp)
204039e4:	1000                	addi	s0,sp,32
204039e6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204039ea:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204039ec:	853e                	mv	a0,a5
204039ee:	4472                	lw	s0,28(sp)
204039f0:	6105                	addi	sp,sp,32
204039f2:	8082                	ret

204039f4 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204039f4:	1101                	addi	sp,sp,-32
204039f6:	ce22                	sw	s0,28(sp)
204039f8:	1000                	addi	s0,sp,32
204039fa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204039fe:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403a02:	853e                	mv	a0,a5
20403a04:	4472                	lw	s0,28(sp)
20403a06:	6105                	addi	sp,sp,32
20403a08:	8082                	ret

20403a0a <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403a0a:	1101                	addi	sp,sp,-32
20403a0c:	ce22                	sw	s0,28(sp)
20403a0e:	1000                	addi	s0,sp,32
20403a10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403a14:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403a16:	853e                	mv	a0,a5
20403a18:	4472                	lw	s0,28(sp)
20403a1a:	6105                	addi	sp,sp,32
20403a1c:	8082                	ret

20403a1e <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403a1e:	7179                	addi	sp,sp,-48
20403a20:	d606                	sw	ra,44(sp)
20403a22:	d422                	sw	s0,40(sp)
20403a24:	1800                	addi	s0,sp,48
20403a26:	fca42e23          	sw	a0,-36(s0)
20403a2a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403a2e:	57fd                	li	a5,-1
20403a30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a34:	fdc42503          	lw	a0,-36(s0)
20403a38:	995fe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403a3c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403a40:	fe842783          	lw	a5,-24(s0)
20403a44:	c79d                	beqz	a5,20403a72 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403a46:	fe842783          	lw	a5,-24(s0)
20403a4a:	0dc7a783          	lw	a5,220(a5)
20403a4e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403a52:	fe442783          	lw	a5,-28(s0)
20403a56:	cf91                	beqz	a5,20403a72 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403a58:	fe442783          	lw	a5,-28(s0)
20403a5c:	439c                	lw	a5,0(a5)
20403a5e:	43f8                	lw	a4,68(a5)
20403a60:	fd840793          	addi	a5,s0,-40
20403a64:	863e                	mv	a2,a5
20403a66:	458d                	li	a1,3
20403a68:	fe442503          	lw	a0,-28(s0)
20403a6c:	9702                	jalr	a4
20403a6e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403a72:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403a76:	853e                	mv	a0,a5
20403a78:	50b2                	lw	ra,44(sp)
20403a7a:	5422                	lw	s0,40(sp)
20403a7c:	6145                	addi	sp,sp,48
20403a7e:	8082                	ret

20403a80 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403a80:	7179                	addi	sp,sp,-48
20403a82:	d606                	sw	ra,44(sp)
20403a84:	d422                	sw	s0,40(sp)
20403a86:	1800                	addi	s0,sp,48
20403a88:	fca42e23          	sw	a0,-36(s0)
20403a8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403a90:	57fd                	li	a5,-1
20403a92:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a96:	fdc42503          	lw	a0,-36(s0)
20403a9a:	933fe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403a9e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403aa2:	fe842783          	lw	a5,-24(s0)
20403aa6:	c79d                	beqz	a5,20403ad4 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403aa8:	fe842783          	lw	a5,-24(s0)
20403aac:	0dc7a783          	lw	a5,220(a5)
20403ab0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403ab4:	fe442783          	lw	a5,-28(s0)
20403ab8:	cf91                	beqz	a5,20403ad4 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403aba:	fe442783          	lw	a5,-28(s0)
20403abe:	439c                	lw	a5,0(a5)
20403ac0:	43f8                	lw	a4,68(a5)
20403ac2:	fd840793          	addi	a5,s0,-40
20403ac6:	863e                	mv	a2,a5
20403ac8:	4589                	li	a1,2
20403aca:	fe442503          	lw	a0,-28(s0)
20403ace:	9702                	jalr	a4
20403ad0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403ad4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403ad8:	853e                	mv	a0,a5
20403ada:	50b2                	lw	ra,44(sp)
20403adc:	5422                	lw	s0,40(sp)
20403ade:	6145                	addi	sp,sp,48
20403ae0:	8082                	ret

20403ae2 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403ae2:	7179                	addi	sp,sp,-48
20403ae4:	d606                	sw	ra,44(sp)
20403ae6:	d422                	sw	s0,40(sp)
20403ae8:	1800                	addi	s0,sp,48
20403aea:	fca42e23          	sw	a0,-36(s0)
20403aee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403af2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403af6:	fdc42503          	lw	a0,-36(s0)
20403afa:	8d3fe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403afe:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403b02:	fe842783          	lw	a5,-24(s0)
20403b06:	c79d                	beqz	a5,20403b34 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403b08:	fe842783          	lw	a5,-24(s0)
20403b0c:	0dc7a783          	lw	a5,220(a5)
20403b10:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403b14:	fe442783          	lw	a5,-28(s0)
20403b18:	cf91                	beqz	a5,20403b34 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403b1a:	fe442783          	lw	a5,-28(s0)
20403b1e:	439c                	lw	a5,0(a5)
20403b20:	43f8                	lw	a4,68(a5)
20403b22:	fd840793          	addi	a5,s0,-40
20403b26:	863e                	mv	a2,a5
20403b28:	4591                	li	a1,4
20403b2a:	fe442503          	lw	a0,-28(s0)
20403b2e:	9702                	jalr	a4
20403b30:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403b34:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403b38:	853e                	mv	a0,a5
20403b3a:	50b2                	lw	ra,44(sp)
20403b3c:	5422                	lw	s0,40(sp)
20403b3e:	6145                	addi	sp,sp,48
20403b40:	8082                	ret

20403b42 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403b42:	1101                	addi	sp,sp,-32
20403b44:	ce06                	sw	ra,28(sp)
20403b46:	cc22                	sw	s0,24(sp)
20403b48:	1000                	addi	s0,sp,32
20403b4a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403b4e:	fec42503          	lw	a0,-20(s0)
20403b52:	87bfe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403b56:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403b58:	853e                	mv	a0,a5
20403b5a:	40f2                	lw	ra,28(sp)
20403b5c:	4462                	lw	s0,24(sp)
20403b5e:	6105                	addi	sp,sp,32
20403b60:	8082                	ret

20403b62 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403b62:	7179                	addi	sp,sp,-48
20403b64:	d606                	sw	ra,44(sp)
20403b66:	d422                	sw	s0,40(sp)
20403b68:	1800                	addi	s0,sp,48
20403b6a:	fca42e23          	sw	a0,-36(s0)
20403b6e:	fcb42c23          	sw	a1,-40(s0)
20403b72:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403b76:	fdc42503          	lw	a0,-36(s0)
20403b7a:	853fe0ef          	jal	ra,204023cc <__metal_driver_cpu_interrupt_controller>
20403b7e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403b82:	fec42783          	lw	a5,-20(s0)
20403b86:	cb99                	beqz	a5,20403b9c <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403b88:	fd442603          	lw	a2,-44(s0)
20403b8c:	fd842583          	lw	a1,-40(s0)
20403b90:	fec42503          	lw	a0,-20(s0)
20403b94:	8ddff0ef          	jal	ra,20403470 <__metal_exception_register>
20403b98:	87aa                	mv	a5,a0
20403b9a:	a011                	j	20403b9e <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403b9c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403b9e:	853e                	mv	a0,a5
20403ba0:	50b2                	lw	ra,44(sp)
20403ba2:	5422                	lw	s0,40(sp)
20403ba4:	6145                	addi	sp,sp,48
20403ba6:	8082                	ret

20403ba8 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403ba8:	1101                	addi	sp,sp,-32
20403baa:	ce22                	sw	s0,28(sp)
20403bac:	1000                	addi	s0,sp,32
20403bae:	fea42623          	sw	a0,-20(s0)
20403bb2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403bb6:	fe842783          	lw	a5,-24(s0)
20403bba:	0007d783          	lhu	a5,0(a5)
20403bbe:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403bc2:	478d                	li	a5,3
20403bc4:	00f71463          	bne	a4,a5,20403bcc <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403bc8:	4791                	li	a5,4
20403bca:	a011                	j	20403bce <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403bcc:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403bce:	853e                	mv	a0,a5
20403bd0:	4472                	lw	s0,28(sp)
20403bd2:	6105                	addi	sp,sp,32
20403bd4:	8082                	ret

20403bd6 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403bd6:	7179                	addi	sp,sp,-48
20403bd8:	d622                	sw	s0,44(sp)
20403bda:	1800                	addi	s0,sp,48
20403bdc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403be0:	341027f3          	csrr	a5,mepc
20403be4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403be8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403bec:	853e                	mv	a0,a5
20403bee:	5432                	lw	s0,44(sp)
20403bf0:	6145                	addi	sp,sp,48
20403bf2:	8082                	ret

20403bf4 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403bf4:	1101                	addi	sp,sp,-32
20403bf6:	ce22                	sw	s0,28(sp)
20403bf8:	1000                	addi	s0,sp,32
20403bfa:	fea42623          	sw	a0,-20(s0)
20403bfe:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403c02:	fe842783          	lw	a5,-24(s0)
20403c06:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403c0a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403c0c:	853e                	mv	a0,a5
20403c0e:	4472                	lw	s0,28(sp)
20403c10:	6105                	addi	sp,sp,32
20403c12:	8082                	ret

20403c14 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403c14:	1101                	addi	sp,sp,-32
20403c16:	ce22                	sw	s0,28(sp)
20403c18:	1000                	addi	s0,sp,32
20403c1a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403c1e:	fec42703          	lw	a4,-20(s0)
20403c22:	800007b7          	lui	a5,0x80000
20403c26:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffe84c>
20403c2a:	00f71563          	bne	a4,a5,20403c34 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403c2e:	0c0007b7          	lui	a5,0xc000
20403c32:	a011                	j	20403c36 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403c34:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403c36:	853e                	mv	a0,a5
20403c38:	4472                	lw	s0,28(sp)
20403c3a:	6105                	addi	sp,sp,32
20403c3c:	8082                	ret

20403c3e <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403c3e:	1101                	addi	sp,sp,-32
20403c40:	ce22                	sw	s0,28(sp)
20403c42:	1000                	addi	s0,sp,32
20403c44:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403c48:	fec42703          	lw	a4,-20(s0)
20403c4c:	800007b7          	lui	a5,0x80000
20403c50:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffe84c>
20403c54:	00f71463          	bne	a4,a5,20403c5c <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403c58:	47ed                	li	a5,27
20403c5a:	a011                	j	20403c5e <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403c5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403c5e:	853e                	mv	a0,a5
20403c60:	4472                	lw	s0,28(sp)
20403c62:	6105                	addi	sp,sp,32
20403c64:	8082                	ret

20403c66 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403c66:	1101                	addi	sp,sp,-32
20403c68:	ce22                	sw	s0,28(sp)
20403c6a:	1000                	addi	s0,sp,32
20403c6c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403c70:	fec42703          	lw	a4,-20(s0)
20403c74:	800007b7          	lui	a5,0x80000
20403c78:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffe84c>
20403c7c:	00f71463          	bne	a4,a5,20403c84 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403c80:	479d                	li	a5,7
20403c82:	a011                	j	20403c86 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403c84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403c86:	853e                	mv	a0,a5
20403c88:	4472                	lw	s0,28(sp)
20403c8a:	6105                	addi	sp,sp,32
20403c8c:	8082                	ret

20403c8e <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403c8e:	1101                	addi	sp,sp,-32
20403c90:	ce22                	sw	s0,28(sp)
20403c92:	1000                	addi	s0,sp,32
20403c94:	fea42623          	sw	a0,-20(s0)
20403c98:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403c9c:	fe842783          	lw	a5,-24(s0)
20403ca0:	e791                	bnez	a5,20403cac <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403ca2:	800007b7          	lui	a5,0x80000
20403ca6:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe494>
20403caa:	a011                	j	20403cae <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403cac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403cae:	853e                	mv	a0,a5
20403cb0:	4472                	lw	s0,28(sp)
20403cb2:	6105                	addi	sp,sp,32
20403cb4:	8082                	ret

20403cb6 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403cb6:	1101                	addi	sp,sp,-32
20403cb8:	ce22                	sw	s0,28(sp)
20403cba:	1000                	addi	s0,sp,32
20403cbc:	fea42623          	sw	a0,-20(s0)
20403cc0:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403cc4:	fe842783          	lw	a5,-24(s0)
20403cc8:	e399                	bnez	a5,20403cce <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403cca:	47ad                	li	a5,11
20403ccc:	a011                	j	20403cd0 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403cce:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403cd0:	853e                	mv	a0,a5
20403cd2:	4472                	lw	s0,28(sp)
20403cd4:	6105                	addi	sp,sp,32
20403cd6:	8082                	ret

20403cd8 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403cd8:	7179                	addi	sp,sp,-48
20403cda:	d606                	sw	ra,44(sp)
20403cdc:	d422                	sw	s0,40(sp)
20403cde:	1800                	addi	s0,sp,48
20403ce0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403ce4:	fdc42503          	lw	a0,-36(s0)
20403ce8:	3735                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403cea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403cee:	fec42703          	lw	a4,-20(s0)
20403cf2:	002007b7          	lui	a5,0x200
20403cf6:	0791                	addi	a5,a5,4
20403cf8:	97ba                	add	a5,a5,a4
20403cfa:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403cfc:	853e                	mv	a0,a5
20403cfe:	50b2                	lw	ra,44(sp)
20403d00:	5422                	lw	s0,40(sp)
20403d02:	6145                	addi	sp,sp,48
20403d04:	8082                	ret

20403d06 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403d06:	7179                	addi	sp,sp,-48
20403d08:	d606                	sw	ra,44(sp)
20403d0a:	d422                	sw	s0,40(sp)
20403d0c:	1800                	addi	s0,sp,48
20403d0e:	fca42e23          	sw	a0,-36(s0)
20403d12:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403d16:	fdc42503          	lw	a0,-36(s0)
20403d1a:	3ded                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403d1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d20:	fec42703          	lw	a4,-20(s0)
20403d24:	002007b7          	lui	a5,0x200
20403d28:	0791                	addi	a5,a5,4
20403d2a:	97ba                	add	a5,a5,a4
20403d2c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403d2e:	fd842783          	lw	a5,-40(s0)
20403d32:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403d34:	0001                	nop
20403d36:	50b2                	lw	ra,44(sp)
20403d38:	5422                	lw	s0,40(sp)
20403d3a:	6145                	addi	sp,sp,48
20403d3c:	8082                	ret

20403d3e <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403d3e:	7179                	addi	sp,sp,-48
20403d40:	d606                	sw	ra,44(sp)
20403d42:	d422                	sw	s0,40(sp)
20403d44:	1800                	addi	s0,sp,48
20403d46:	fca42e23          	sw	a0,-36(s0)
20403d4a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403d4e:	fdc42503          	lw	a0,-36(s0)
20403d52:	35c9                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403d54:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d58:	fec42703          	lw	a4,-20(s0)
20403d5c:	002007b7          	lui	a5,0x200
20403d60:	97ba                	add	a5,a5,a4
20403d62:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403d64:	fd842783          	lw	a5,-40(s0)
20403d68:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403d6a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403d6c:	853e                	mv	a0,a5
20403d6e:	50b2                	lw	ra,44(sp)
20403d70:	5422                	lw	s0,40(sp)
20403d72:	6145                	addi	sp,sp,48
20403d74:	8082                	ret

20403d76 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403d76:	7179                	addi	sp,sp,-48
20403d78:	d606                	sw	ra,44(sp)
20403d7a:	d422                	sw	s0,40(sp)
20403d7c:	1800                	addi	s0,sp,48
20403d7e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403d82:	fdc42503          	lw	a0,-36(s0)
20403d86:	3579                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403d88:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d8c:	fec42703          	lw	a4,-20(s0)
20403d90:	002007b7          	lui	a5,0x200
20403d94:	97ba                	add	a5,a5,a4
20403d96:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403d98:	853e                	mv	a0,a5
20403d9a:	50b2                	lw	ra,44(sp)
20403d9c:	5422                	lw	s0,40(sp)
20403d9e:	6145                	addi	sp,sp,48
20403da0:	8082                	ret

20403da2 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403da2:	7179                	addi	sp,sp,-48
20403da4:	d606                	sw	ra,44(sp)
20403da6:	d422                	sw	s0,40(sp)
20403da8:	1800                	addi	s0,sp,48
20403daa:	fca42e23          	sw	a0,-36(s0)
20403dae:	fcb42c23          	sw	a1,-40(s0)
20403db2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403db6:	fdc42503          	lw	a0,-36(s0)
20403dba:	3da9                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403dbc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403dc0:	fdc42503          	lw	a0,-36(s0)
20403dc4:	354d                	jal	20403c66 <__metal_driver_sifive_plic0_max_priority>
20403dc6:	87aa                	mv	a5,a0
20403dc8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403dcc:	fe842783          	lw	a5,-24(s0)
20403dd0:	c785                	beqz	a5,20403df8 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403dd2:	fd442703          	lw	a4,-44(s0)
20403dd6:	fe842783          	lw	a5,-24(s0)
20403dda:	00f77f63          	bgeu	a4,a5,20403df8 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403dde:	fd842783          	lw	a5,-40(s0)
20403de2:	078a                	slli	a5,a5,0x2
20403de4:	873e                	mv	a4,a5
20403de6:	fec42783          	lw	a5,-20(s0)
20403dea:	97ba                	add	a5,a5,a4
20403dec:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403dee:	fd442783          	lw	a5,-44(s0)
20403df2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403df4:	4781                	li	a5,0
20403df6:	a011                	j	20403dfa <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403df8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403dfa:	853e                	mv	a0,a5
20403dfc:	50b2                	lw	ra,44(sp)
20403dfe:	5422                	lw	s0,40(sp)
20403e00:	6145                	addi	sp,sp,48
20403e02:	8082                	ret

20403e04 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403e04:	7179                	addi	sp,sp,-48
20403e06:	d606                	sw	ra,44(sp)
20403e08:	d422                	sw	s0,40(sp)
20403e0a:	1800                	addi	s0,sp,48
20403e0c:	fca42e23          	sw	a0,-36(s0)
20403e10:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403e14:	fdc42503          	lw	a0,-36(s0)
20403e18:	3bf5                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403e1a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e1e:	fd842783          	lw	a5,-40(s0)
20403e22:	078a                	slli	a5,a5,0x2
20403e24:	873e                	mv	a4,a5
20403e26:	fec42783          	lw	a5,-20(s0)
20403e2a:	97ba                	add	a5,a5,a4
20403e2c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403e2e:	853e                	mv	a0,a5
20403e30:	50b2                	lw	ra,44(sp)
20403e32:	5422                	lw	s0,40(sp)
20403e34:	6145                	addi	sp,sp,48
20403e36:	8082                	ret

20403e38 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403e38:	7179                	addi	sp,sp,-48
20403e3a:	d606                	sw	ra,44(sp)
20403e3c:	d422                	sw	s0,40(sp)
20403e3e:	1800                	addi	s0,sp,48
20403e40:	fca42e23          	sw	a0,-36(s0)
20403e44:	fcb42c23          	sw	a1,-40(s0)
20403e48:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403e4c:	fdc42503          	lw	a0,-36(s0)
20403e50:	33d1                	jal	20403c14 <__metal_driver_sifive_plic0_control_base>
20403e52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e56:	fd842783          	lw	a5,-40(s0)
20403e5a:	8795                	srai	a5,a5,0x5
20403e5c:	078a                	slli	a5,a5,0x2
20403e5e:	873e                	mv	a4,a5
20403e60:	fec42783          	lw	a5,-20(s0)
20403e64:	973e                	add	a4,a4,a5
20403e66:	6789                	lui	a5,0x2
20403e68:	97ba                	add	a5,a5,a4
20403e6a:	439c                	lw	a5,0(a5)
20403e6c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403e70:	fd442783          	lw	a5,-44(s0)
20403e74:	cf81                	beqz	a5,20403e8c <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403e76:	fd842783          	lw	a5,-40(s0)
20403e7a:	8bfd                	andi	a5,a5,31
20403e7c:	4705                	li	a4,1
20403e7e:	00f717b3          	sll	a5,a4,a5
20403e82:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403e84:	fe842783          	lw	a5,-24(s0)
20403e88:	8fd9                	or	a5,a5,a4
20403e8a:	a829                	j	20403ea4 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403e8c:	fd842783          	lw	a5,-40(s0)
20403e90:	8bfd                	andi	a5,a5,31
20403e92:	4705                	li	a4,1
20403e94:	00f717b3          	sll	a5,a4,a5
20403e98:	fff7c793          	not	a5,a5
20403e9c:	873e                	mv	a4,a5
20403e9e:	fe842783          	lw	a5,-24(s0)
20403ea2:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ea4:	fd842703          	lw	a4,-40(s0)
20403ea8:	8715                	srai	a4,a4,0x5
20403eaa:	070a                	slli	a4,a4,0x2
20403eac:	86ba                	mv	a3,a4
20403eae:	fec42703          	lw	a4,-20(s0)
20403eb2:	96ba                	add	a3,a3,a4
20403eb4:	6709                	lui	a4,0x2
20403eb6:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403eb8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403eba:	0001                	nop
20403ebc:	50b2                	lw	ra,44(sp)
20403ebe:	5422                	lw	s0,40(sp)
20403ec0:	6145                	addi	sp,sp,48
20403ec2:	8082                	ret

20403ec4 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403ec4:	1101                	addi	sp,sp,-32
20403ec6:	ce06                	sw	ra,28(sp)
20403ec8:	cc22                	sw	s0,24(sp)
20403eca:	1000                	addi	s0,sp,32
20403ecc:	fea42623          	sw	a0,-20(s0)
20403ed0:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403ed4:	12c00513          	li	a0,300
20403ed8:	1c4010ef          	jal	ra,2040509c <metal_shutdown>

20403edc <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403edc:	7179                	addi	sp,sp,-48
20403ede:	d606                	sw	ra,44(sp)
20403ee0:	d422                	sw	s0,40(sp)
20403ee2:	1800                	addi	s0,sp,48
20403ee4:	fca42e23          	sw	a0,-36(s0)
20403ee8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403eec:	fd842783          	lw	a5,-40(s0)
20403ef0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403ef4:	fec42503          	lw	a0,-20(s0)
20403ef8:	33c5                	jal	20403cd8 <__metal_plic0_claim_interrupt>
20403efa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403efe:	fec42503          	lw	a0,-20(s0)
20403f02:	3b35                	jal	20403c3e <__metal_driver_sifive_plic0_num_interrupts>
20403f04:	87aa                	mv	a5,a0
20403f06:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403f0a:	fe842703          	lw	a4,-24(s0)
20403f0e:	fe442783          	lw	a5,-28(s0)
20403f12:	04f77263          	bgeu	a4,a5,20403f56 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403f16:	fec42703          	lw	a4,-20(s0)
20403f1a:	fe842783          	lw	a5,-24(s0)
20403f1e:	078a                	slli	a5,a5,0x2
20403f20:	97ba                	add	a5,a5,a4
20403f22:	479c                	lw	a5,8(a5)
20403f24:	cb8d                	beqz	a5,20403f56 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403f26:	fec42703          	lw	a4,-20(s0)
20403f2a:	fe842783          	lw	a5,-24(s0)
20403f2e:	078a                	slli	a5,a5,0x2
20403f30:	97ba                	add	a5,a5,a4
20403f32:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403f36:	fe842603          	lw	a2,-24(s0)
20403f3a:	fec42683          	lw	a3,-20(s0)
20403f3e:	fe842703          	lw	a4,-24(s0)
20403f42:	87ba                	mv	a5,a4
20403f44:	0786                	slli	a5,a5,0x1
20403f46:	97ba                	add	a5,a5,a4
20403f48:	078e                	slli	a5,a5,0x3
20403f4a:	97b6                	add	a5,a5,a3
20403f4c:	0887a783          	lw	a5,136(a5)
20403f50:	85be                	mv	a1,a5
20403f52:	8532                	mv	a0,a2
20403f54:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403f56:	fe842583          	lw	a1,-24(s0)
20403f5a:	fec42503          	lw	a0,-20(s0)
20403f5e:	3365                	jal	20403d06 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403f60:	0001                	nop
20403f62:	50b2                	lw	ra,44(sp)
20403f64:	5422                	lw	s0,40(sp)
20403f66:	6145                	addi	sp,sp,48
20403f68:	8082                	ret

20403f6a <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403f6a:	7139                	addi	sp,sp,-64
20403f6c:	de06                	sw	ra,60(sp)
20403f6e:	dc22                	sw	s0,56(sp)
20403f70:	0080                	addi	s0,sp,64
20403f72:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403f76:	fcc42783          	lw	a5,-52(s0)
20403f7a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403f7e:	fe442783          	lw	a5,-28(s0)
20403f82:	43dc                	lw	a5,4(a5)
20403f84:	12079063          	bnez	a5,204040a4 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403f88:	fe042623          	sw	zero,-20(s0)
20403f8c:	a221                	j	20404094 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20403f8e:	fcc42503          	lw	a0,-52(s0)
20403f92:	cadff0ef          	jal	ra,20403c3e <__metal_driver_sifive_plic0_num_interrupts>
20403f96:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403f9a:	fec42583          	lw	a1,-20(s0)
20403f9e:	fcc42503          	lw	a0,-52(s0)
20403fa2:	cedff0ef          	jal	ra,20403c8e <__metal_driver_sifive_plic0_interrupt_parents>
20403fa6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403faa:	fec42583          	lw	a1,-20(s0)
20403fae:	fcc42503          	lw	a0,-52(s0)
20403fb2:	d05ff0ef          	jal	ra,20403cb6 <__metal_driver_sifive_plic0_interrupt_lines>
20403fb6:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403fba:	fdc42783          	lw	a5,-36(s0)
20403fbe:	439c                	lw	a5,0(a5)
20403fc0:	439c                	lw	a5,0(a5)
20403fc2:	fdc42503          	lw	a0,-36(s0)
20403fc6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403fc8:	fe042423          	sw	zero,-24(s0)
20403fcc:	a085                	j	2040402c <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20403fce:	4601                	li	a2,0
20403fd0:	fe842583          	lw	a1,-24(s0)
20403fd4:	fe442503          	lw	a0,-28(s0)
20403fd8:	3585                	jal	20403e38 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20403fda:	4601                	li	a2,0
20403fdc:	fe842583          	lw	a1,-24(s0)
20403fe0:	fcc42503          	lw	a0,-52(s0)
20403fe4:	3b7d                	jal	20403da2 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20403fe6:	fe442703          	lw	a4,-28(s0)
20403fea:	fe842783          	lw	a5,-24(s0)
20403fee:	078a                	slli	a5,a5,0x2
20403ff0:	97ba                	add	a5,a5,a4
20403ff2:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20403ff6:	fe442683          	lw	a3,-28(s0)
20403ffa:	fe842703          	lw	a4,-24(s0)
20403ffe:	87ba                	mv	a5,a4
20404000:	0786                	slli	a5,a5,0x1
20404002:	97ba                	add	a5,a5,a4
20404004:	078e                	slli	a5,a5,0x3
20404006:	97b6                	add	a5,a5,a3
20404008:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
2040400c:	fe442683          	lw	a3,-28(s0)
20404010:	fe842703          	lw	a4,-24(s0)
20404014:	87ba                	mv	a5,a4
20404016:	0786                	slli	a5,a5,0x1
20404018:	97ba                	add	a5,a5,a4
2040401a:	078e                	slli	a5,a5,0x3
2040401c:	97b6                	add	a5,a5,a3
2040401e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404022:	fe842783          	lw	a5,-24(s0)
20404026:	0785                	addi	a5,a5,1
20404028:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
2040402c:	fe842703          	lw	a4,-24(s0)
20404030:	fe042783          	lw	a5,-32(s0)
20404034:	f8f74de3          	blt	a4,a5,20403fce <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20404038:	4581                	li	a1,0
2040403a:	fcc42503          	lw	a0,-52(s0)
2040403e:	d01ff0ef          	jal	ra,20403d3e <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404042:	fdc42783          	lw	a5,-36(s0)
20404046:	439c                	lw	a5,0(a5)
20404048:	4fdc                	lw	a5,28(a5)
2040404a:	fe442683          	lw	a3,-28(s0)
2040404e:	4601                	li	a2,0
20404050:	fd842583          	lw	a1,-40(s0)
20404054:	fdc42503          	lw	a0,-36(s0)
20404058:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
2040405a:	fdc42783          	lw	a5,-36(s0)
2040405e:	439c                	lw	a5,0(a5)
20404060:	4fd8                	lw	a4,28(a5)
20404062:	fe442683          	lw	a3,-28(s0)
20404066:	204047b7          	lui	a5,0x20404
2040406a:	edc78613          	addi	a2,a5,-292 # 20403edc <__metal_plic0_handler>
2040406e:	fd842583          	lw	a1,-40(s0)
20404072:	fdc42503          	lw	a0,-36(s0)
20404076:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20404078:	fdc42783          	lw	a5,-36(s0)
2040407c:	439c                	lw	a5,0(a5)
2040407e:	53dc                	lw	a5,36(a5)
20404080:	fd842583          	lw	a1,-40(s0)
20404084:	fdc42503          	lw	a0,-36(s0)
20404088:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040408a:	fec42783          	lw	a5,-20(s0)
2040408e:	0785                	addi	a5,a5,1
20404090:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404094:	fec42783          	lw	a5,-20(s0)
20404098:	eef05be3          	blez	a5,20403f8e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
2040409c:	fe442783          	lw	a5,-28(s0)
204040a0:	4705                	li	a4,1
204040a2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
204040a4:	0001                	nop
204040a6:	50f2                	lw	ra,60(sp)
204040a8:	5462                	lw	s0,56(sp)
204040aa:	6121                	addi	sp,sp,64
204040ac:	8082                	ret

204040ae <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
204040ae:	7179                	addi	sp,sp,-48
204040b0:	d606                	sw	ra,44(sp)
204040b2:	d422                	sw	s0,40(sp)
204040b4:	1800                	addi	s0,sp,48
204040b6:	fca42e23          	sw	a0,-36(s0)
204040ba:	fcb42c23          	sw	a1,-40(s0)
204040be:	fcc42a23          	sw	a2,-44(s0)
204040c2:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204040c6:	fdc42783          	lw	a5,-36(s0)
204040ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204040ce:	fdc42503          	lw	a0,-36(s0)
204040d2:	b6dff0ef          	jal	ra,20403c3e <__metal_driver_sifive_plic0_num_interrupts>
204040d6:	872a                	mv	a4,a0
204040d8:	fd842783          	lw	a5,-40(s0)
204040dc:	00e7c463          	blt	a5,a4,204040e4 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
204040e0:	57fd                	li	a5,-1
204040e2:	a051                	j	20404166 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
204040e4:	fd442783          	lw	a5,-44(s0)
204040e8:	cf9d                	beqz	a5,20404126 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
204040ea:	4609                	li	a2,2
204040ec:	fd842583          	lw	a1,-40(s0)
204040f0:	fdc42503          	lw	a0,-36(s0)
204040f4:	cafff0ef          	jal	ra,20403da2 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
204040f8:	fec42703          	lw	a4,-20(s0)
204040fc:	fd842783          	lw	a5,-40(s0)
20404100:	078a                	slli	a5,a5,0x2
20404102:	97ba                	add	a5,a5,a4
20404104:	fd442703          	lw	a4,-44(s0)
20404108:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040410a:	fec42683          	lw	a3,-20(s0)
2040410e:	fd842703          	lw	a4,-40(s0)
20404112:	87ba                	mv	a5,a4
20404114:	0786                	slli	a5,a5,0x1
20404116:	97ba                	add	a5,a5,a4
20404118:	078e                	slli	a5,a5,0x3
2040411a:	97b6                	add	a5,a5,a3
2040411c:	fd042703          	lw	a4,-48(s0)
20404120:	08e7a423          	sw	a4,136(a5)
20404124:	a081                	j	20404164 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404126:	4605                	li	a2,1
20404128:	fd842583          	lw	a1,-40(s0)
2040412c:	fdc42503          	lw	a0,-36(s0)
20404130:	c73ff0ef          	jal	ra,20403da2 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404134:	fec42703          	lw	a4,-20(s0)
20404138:	fd842783          	lw	a5,-40(s0)
2040413c:	078a                	slli	a5,a5,0x2
2040413e:	97ba                	add	a5,a5,a4
20404140:	20404737          	lui	a4,0x20404
20404144:	ec470713          	addi	a4,a4,-316 # 20403ec4 <__metal_plic0_default_handler>
20404148:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2040414a:	fec42683          	lw	a3,-20(s0)
2040414e:	fd842703          	lw	a4,-40(s0)
20404152:	87ba                	mv	a5,a4
20404154:	0786                	slli	a5,a5,0x1
20404156:	97ba                	add	a5,a5,a4
20404158:	078e                	slli	a5,a5,0x3
2040415a:	97b6                	add	a5,a5,a3
2040415c:	fd042703          	lw	a4,-48(s0)
20404160:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404164:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404166:	853e                	mv	a0,a5
20404168:	50b2                	lw	ra,44(sp)
2040416a:	5422                	lw	s0,40(sp)
2040416c:	6145                	addi	sp,sp,48
2040416e:	8082                	ret

20404170 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404170:	7179                	addi	sp,sp,-48
20404172:	d606                	sw	ra,44(sp)
20404174:	d422                	sw	s0,40(sp)
20404176:	1800                	addi	s0,sp,48
20404178:	fca42e23          	sw	a0,-36(s0)
2040417c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404180:	fdc42783          	lw	a5,-36(s0)
20404184:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404188:	fdc42503          	lw	a0,-36(s0)
2040418c:	ab3ff0ef          	jal	ra,20403c3e <__metal_driver_sifive_plic0_num_interrupts>
20404190:	872a                	mv	a4,a0
20404192:	fd842783          	lw	a5,-40(s0)
20404196:	00e7c463          	blt	a5,a4,2040419e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040419a:	57fd                	li	a5,-1
2040419c:	a809                	j	204041ae <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040419e:	4605                	li	a2,1
204041a0:	fd842583          	lw	a1,-40(s0)
204041a4:	fec42503          	lw	a0,-20(s0)
204041a8:	c91ff0ef          	jal	ra,20403e38 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
204041ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
204041ae:	853e                	mv	a0,a5
204041b0:	50b2                	lw	ra,44(sp)
204041b2:	5422                	lw	s0,40(sp)
204041b4:	6145                	addi	sp,sp,48
204041b6:	8082                	ret

204041b8 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204041b8:	7179                	addi	sp,sp,-48
204041ba:	d606                	sw	ra,44(sp)
204041bc:	d422                	sw	s0,40(sp)
204041be:	1800                	addi	s0,sp,48
204041c0:	fca42e23          	sw	a0,-36(s0)
204041c4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204041c8:	fdc42783          	lw	a5,-36(s0)
204041cc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204041d0:	fdc42503          	lw	a0,-36(s0)
204041d4:	a6bff0ef          	jal	ra,20403c3e <__metal_driver_sifive_plic0_num_interrupts>
204041d8:	872a                	mv	a4,a0
204041da:	fd842783          	lw	a5,-40(s0)
204041de:	00e7c463          	blt	a5,a4,204041e6 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
204041e2:	57fd                	li	a5,-1
204041e4:	a809                	j	204041f6 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204041e6:	4601                	li	a2,0
204041e8:	fd842583          	lw	a1,-40(s0)
204041ec:	fec42503          	lw	a0,-20(s0)
204041f0:	c49ff0ef          	jal	ra,20403e38 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
204041f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
204041f6:	853e                	mv	a0,a5
204041f8:	50b2                	lw	ra,44(sp)
204041fa:	5422                	lw	s0,40(sp)
204041fc:	6145                	addi	sp,sp,48
204041fe:	8082                	ret

20404200 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404200:	1101                	addi	sp,sp,-32
20404202:	ce22                	sw	s0,28(sp)
20404204:	1000                	addi	s0,sp,32
20404206:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040420a:	fec42703          	lw	a4,-20(s0)
2040420e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404212:	00f71563          	bne	a4,a5,2040421c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404216:	100127b7          	lui	a5,0x10012
2040421a:	a011                	j	2040421e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040421c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
2040421e:	853e                	mv	a0,a5
20404220:	4472                	lw	s0,28(sp)
20404222:	6105                	addi	sp,sp,32
20404224:	8082                	ret

20404226 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404226:	1101                	addi	sp,sp,-32
20404228:	ce22                	sw	s0,28(sp)
2040422a:	1000                	addi	s0,sp,32
2040422c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404230:	fec42703          	lw	a4,-20(s0)
20404234:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404238:	00f71763          	bne	a4,a5,20404246 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040423c:	800007b7          	lui	a5,0x80000
20404240:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffe84c>
20404244:	a011                	j	20404248 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404246:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
20404248:	853e                	mv	a0,a5
2040424a:	4472                	lw	s0,28(sp)
2040424c:	6105                	addi	sp,sp,32
2040424e:	8082                	ret

20404250 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404250:	1101                	addi	sp,sp,-32
20404252:	ce22                	sw	s0,28(sp)
20404254:	1000                	addi	s0,sp,32
20404256:	fea42623          	sw	a0,-20(s0)
2040425a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
2040425e:	fec42703          	lw	a4,-20(s0)
20404262:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404266:	00f71763          	bne	a4,a5,20404274 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
2040426a:	fe842783          	lw	a5,-24(s0)
2040426e:	e399                	bnez	a5,20404274 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404270:	479d                	li	a5,7
20404272:	a269                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404274:	fec42703          	lw	a4,-20(s0)
20404278:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040427c:	00f71963          	bne	a4,a5,2040428e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404280:	fe842703          	lw	a4,-24(s0)
20404284:	4785                	li	a5,1
20404286:	00f71463          	bne	a4,a5,2040428e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040428a:	47a1                	li	a5,8
2040428c:	aa85                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040428e:	fec42703          	lw	a4,-20(s0)
20404292:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404296:	00f71963          	bne	a4,a5,204042a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040429a:	fe842703          	lw	a4,-24(s0)
2040429e:	4789                	li	a5,2
204042a0:	00f71463          	bne	a4,a5,204042a8 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
204042a4:	47a5                	li	a5,9
204042a6:	aa99                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
204042a8:	fec42703          	lw	a4,-20(s0)
204042ac:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042b0:	00f71963          	bne	a4,a5,204042c2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
204042b4:	fe842703          	lw	a4,-24(s0)
204042b8:	478d                	li	a5,3
204042ba:	00f71463          	bne	a4,a5,204042c2 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
204042be:	47a9                	li	a5,10
204042c0:	aa35                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204042c2:	fec42703          	lw	a4,-20(s0)
204042c6:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042ca:	00f71963          	bne	a4,a5,204042dc <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
204042ce:	fe842703          	lw	a4,-24(s0)
204042d2:	4791                	li	a5,4
204042d4:	00f71463          	bne	a4,a5,204042dc <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
204042d8:	47ad                	li	a5,11
204042da:	a20d                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204042dc:	fec42703          	lw	a4,-20(s0)
204042e0:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042e4:	00f71963          	bne	a4,a5,204042f6 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
204042e8:	fe842703          	lw	a4,-24(s0)
204042ec:	4795                	li	a5,5
204042ee:	00f71463          	bne	a4,a5,204042f6 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
204042f2:	47b1                	li	a5,12
204042f4:	a221                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204042f6:	fec42703          	lw	a4,-20(s0)
204042fa:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042fe:	00f71963          	bne	a4,a5,20404310 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404302:	fe842703          	lw	a4,-24(s0)
20404306:	4799                	li	a5,6
20404308:	00f71463          	bne	a4,a5,20404310 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
2040430c:	47b5                	li	a5,13
2040430e:	a0fd                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404310:	fec42703          	lw	a4,-20(s0)
20404314:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404318:	00f71963          	bne	a4,a5,2040432a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040431c:	fe842703          	lw	a4,-24(s0)
20404320:	479d                	li	a5,7
20404322:	00f71463          	bne	a4,a5,2040432a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404326:	47b9                	li	a5,14
20404328:	a8d1                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040432a:	fec42703          	lw	a4,-20(s0)
2040432e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404332:	00f71963          	bne	a4,a5,20404344 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20404336:	fe842703          	lw	a4,-24(s0)
2040433a:	47a1                	li	a5,8
2040433c:	00f71463          	bne	a4,a5,20404344 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404340:	47bd                	li	a5,15
20404342:	a86d                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404344:	fec42703          	lw	a4,-20(s0)
20404348:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040434c:	00f71963          	bne	a4,a5,2040435e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404350:	fe842703          	lw	a4,-24(s0)
20404354:	47a5                	li	a5,9
20404356:	00f71463          	bne	a4,a5,2040435e <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040435a:	47c1                	li	a5,16
2040435c:	a045                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
2040435e:	fec42703          	lw	a4,-20(s0)
20404362:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404366:	00f71963          	bne	a4,a5,20404378 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040436a:	fe842703          	lw	a4,-24(s0)
2040436e:	47a9                	li	a5,10
20404370:	00f71463          	bne	a4,a5,20404378 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404374:	47c5                	li	a5,17
20404376:	a059                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20404378:	fec42703          	lw	a4,-20(s0)
2040437c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404380:	00f71963          	bne	a4,a5,20404392 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404384:	fe842703          	lw	a4,-24(s0)
20404388:	47ad                	li	a5,11
2040438a:	00f71463          	bne	a4,a5,20404392 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
2040438e:	47c9                	li	a5,18
20404390:	a0b5                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404392:	fec42703          	lw	a4,-20(s0)
20404396:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040439a:	00f71963          	bne	a4,a5,204043ac <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
2040439e:	fe842703          	lw	a4,-24(s0)
204043a2:	47b1                	li	a5,12
204043a4:	00f71463          	bne	a4,a5,204043ac <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
204043a8:	47cd                	li	a5,19
204043aa:	a889                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204043ac:	fec42703          	lw	a4,-20(s0)
204043b0:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043b4:	00f71963          	bne	a4,a5,204043c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204043b8:	fe842703          	lw	a4,-24(s0)
204043bc:	47b5                	li	a5,13
204043be:	00f71463          	bne	a4,a5,204043c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204043c2:	47d1                	li	a5,20
204043c4:	a825                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204043c6:	fec42703          	lw	a4,-20(s0)
204043ca:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043ce:	00f71963          	bne	a4,a5,204043e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204043d2:	fe842703          	lw	a4,-24(s0)
204043d6:	47b9                	li	a5,14
204043d8:	00f71463          	bne	a4,a5,204043e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204043dc:	47d5                	li	a5,21
204043de:	a839                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204043e0:	fec42703          	lw	a4,-20(s0)
204043e4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043e8:	00f71963          	bne	a4,a5,204043fa <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204043ec:	fe842703          	lw	a4,-24(s0)
204043f0:	47bd                	li	a5,15
204043f2:	00f71463          	bne	a4,a5,204043fa <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
204043f6:	47d9                	li	a5,22
204043f8:	a011                	j	204043fc <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
204043fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
204043fc:	853e                	mv	a0,a5
204043fe:	4472                	lw	s0,28(sp)
20404400:	6105                	addi	sp,sp,32
20404402:	8082                	ret

20404404 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404404:	7179                	addi	sp,sp,-48
20404406:	d606                	sw	ra,44(sp)
20404408:	d422                	sw	s0,40(sp)
2040440a:	1800                	addi	s0,sp,48
2040440c:	fca42e23          	sw	a0,-36(s0)
20404410:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404414:	fdc42503          	lw	a0,-36(s0)
20404418:	33e5                	jal	20404200 <__metal_driver_sifive_gpio0_base>
2040441a:	87aa                	mv	a5,a0
2040441c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404420:	fec42783          	lw	a5,-20(s0)
20404424:	0791                	addi	a5,a5,4
20404426:	4398                	lw	a4,0(a5)
20404428:	fd842783          	lw	a5,-40(s0)
2040442c:	fec42683          	lw	a3,-20(s0)
20404430:	0691                	addi	a3,a3,4
20404432:	8fd9                	or	a5,a5,a4
20404434:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404436:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20404438:	853e                	mv	a0,a5
2040443a:	50b2                	lw	ra,44(sp)
2040443c:	5422                	lw	s0,40(sp)
2040443e:	6145                	addi	sp,sp,48
20404440:	8082                	ret

20404442 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404442:	7179                	addi	sp,sp,-48
20404444:	d606                	sw	ra,44(sp)
20404446:	d422                	sw	s0,40(sp)
20404448:	1800                	addi	s0,sp,48
2040444a:	fca42e23          	sw	a0,-36(s0)
2040444e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404452:	fdc42503          	lw	a0,-36(s0)
20404456:	336d                	jal	20404200 <__metal_driver_sifive_gpio0_base>
20404458:	87aa                	mv	a5,a0
2040445a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
2040445e:	fec42783          	lw	a5,-20(s0)
20404462:	0791                	addi	a5,a5,4
20404464:	439c                	lw	a5,0(a5)
20404466:	fd842703          	lw	a4,-40(s0)
2040446a:	fff74713          	not	a4,a4
2040446e:	86ba                	mv	a3,a4
20404470:	fec42703          	lw	a4,-20(s0)
20404474:	0711                	addi	a4,a4,4
20404476:	8ff5                	and	a5,a5,a3
20404478:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
2040447a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
2040447c:	853e                	mv	a0,a5
2040447e:	50b2                	lw	ra,44(sp)
20404480:	5422                	lw	s0,40(sp)
20404482:	6145                	addi	sp,sp,48
20404484:	8082                	ret

20404486 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404486:	7179                	addi	sp,sp,-48
20404488:	d606                	sw	ra,44(sp)
2040448a:	d422                	sw	s0,40(sp)
2040448c:	1800                	addi	s0,sp,48
2040448e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404492:	fdc42503          	lw	a0,-36(s0)
20404496:	d6bff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
2040449a:	87aa                	mv	a5,a0
2040449c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204044a0:	fec42783          	lw	a5,-20(s0)
204044a4:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204044a6:	853e                	mv	a0,a5
204044a8:	50b2                	lw	ra,44(sp)
204044aa:	5422                	lw	s0,40(sp)
204044ac:	6145                	addi	sp,sp,48
204044ae:	8082                	ret

204044b0 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204044b0:	7179                	addi	sp,sp,-48
204044b2:	d606                	sw	ra,44(sp)
204044b4:	d422                	sw	s0,40(sp)
204044b6:	1800                	addi	s0,sp,48
204044b8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044bc:	fdc42503          	lw	a0,-36(s0)
204044c0:	d41ff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
204044c4:	87aa                	mv	a5,a0
204044c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204044ca:	fec42783          	lw	a5,-20(s0)
204044ce:	07b1                	addi	a5,a5,12
204044d0:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204044d2:	853e                	mv	a0,a5
204044d4:	50b2                	lw	ra,44(sp)
204044d6:	5422                	lw	s0,40(sp)
204044d8:	6145                	addi	sp,sp,48
204044da:	8082                	ret

204044dc <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204044dc:	7179                	addi	sp,sp,-48
204044de:	d606                	sw	ra,44(sp)
204044e0:	d422                	sw	s0,40(sp)
204044e2:	1800                	addi	s0,sp,48
204044e4:	fca42e23          	sw	a0,-36(s0)
204044e8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044ec:	fdc42503          	lw	a0,-36(s0)
204044f0:	d11ff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
204044f4:	87aa                	mv	a5,a0
204044f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
204044fa:	fec42783          	lw	a5,-20(s0)
204044fe:	07a1                	addi	a5,a5,8
20404500:	439c                	lw	a5,0(a5)
20404502:	fd842703          	lw	a4,-40(s0)
20404506:	fff74713          	not	a4,a4
2040450a:	86ba                	mv	a3,a4
2040450c:	fec42703          	lw	a4,-20(s0)
20404510:	0721                	addi	a4,a4,8
20404512:	8ff5                	and	a5,a5,a3
20404514:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404516:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404518:	853e                	mv	a0,a5
2040451a:	50b2                	lw	ra,44(sp)
2040451c:	5422                	lw	s0,40(sp)
2040451e:	6145                	addi	sp,sp,48
20404520:	8082                	ret

20404522 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404522:	7179                	addi	sp,sp,-48
20404524:	d606                	sw	ra,44(sp)
20404526:	d422                	sw	s0,40(sp)
20404528:	1800                	addi	s0,sp,48
2040452a:	fca42e23          	sw	a0,-36(s0)
2040452e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404532:	fdc42503          	lw	a0,-36(s0)
20404536:	ccbff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
2040453a:	87aa                	mv	a5,a0
2040453c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404540:	fec42783          	lw	a5,-20(s0)
20404544:	07a1                	addi	a5,a5,8
20404546:	4398                	lw	a4,0(a5)
20404548:	fd842783          	lw	a5,-40(s0)
2040454c:	fec42683          	lw	a3,-20(s0)
20404550:	06a1                	addi	a3,a3,8
20404552:	8fd9                	or	a5,a5,a4
20404554:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404556:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404558:	853e                	mv	a0,a5
2040455a:	50b2                	lw	ra,44(sp)
2040455c:	5422                	lw	s0,40(sp)
2040455e:	6145                	addi	sp,sp,48
20404560:	8082                	ret

20404562 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404562:	7179                	addi	sp,sp,-48
20404564:	d606                	sw	ra,44(sp)
20404566:	d422                	sw	s0,40(sp)
20404568:	1800                	addi	s0,sp,48
2040456a:	fca42e23          	sw	a0,-36(s0)
2040456e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404572:	fdc42503          	lw	a0,-36(s0)
20404576:	c8bff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
2040457a:	87aa                	mv	a5,a0
2040457c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404580:	fec42783          	lw	a5,-20(s0)
20404584:	07b1                	addi	a5,a5,12
20404586:	4398                	lw	a4,0(a5)
20404588:	fd842783          	lw	a5,-40(s0)
2040458c:	fec42683          	lw	a3,-20(s0)
20404590:	06b1                	addi	a3,a3,12
20404592:	8fd9                	or	a5,a5,a4
20404594:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404596:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404598:	853e                	mv	a0,a5
2040459a:	50b2                	lw	ra,44(sp)
2040459c:	5422                	lw	s0,40(sp)
2040459e:	6145                	addi	sp,sp,48
204045a0:	8082                	ret

204045a2 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204045a2:	7179                	addi	sp,sp,-48
204045a4:	d606                	sw	ra,44(sp)
204045a6:	d422                	sw	s0,40(sp)
204045a8:	1800                	addi	s0,sp,48
204045aa:	fca42e23          	sw	a0,-36(s0)
204045ae:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045b2:	fdc42503          	lw	a0,-36(s0)
204045b6:	c4bff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
204045ba:	87aa                	mv	a5,a0
204045bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204045c0:	fec42783          	lw	a5,-20(s0)
204045c4:	07b1                	addi	a5,a5,12
204045c6:	439c                	lw	a5,0(a5)
204045c8:	fd842703          	lw	a4,-40(s0)
204045cc:	fff74713          	not	a4,a4
204045d0:	86ba                	mv	a3,a4
204045d2:	fec42703          	lw	a4,-20(s0)
204045d6:	0731                	addi	a4,a4,12
204045d8:	8ff5                	and	a5,a5,a3
204045da:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204045dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204045de:	853e                	mv	a0,a5
204045e0:	50b2                	lw	ra,44(sp)
204045e2:	5422                	lw	s0,40(sp)
204045e4:	6145                	addi	sp,sp,48
204045e6:	8082                	ret

204045e8 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204045e8:	7179                	addi	sp,sp,-48
204045ea:	d606                	sw	ra,44(sp)
204045ec:	d422                	sw	s0,40(sp)
204045ee:	1800                	addi	s0,sp,48
204045f0:	fca42e23          	sw	a0,-36(s0)
204045f4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045f8:	fdc42503          	lw	a0,-36(s0)
204045fc:	c05ff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
20404600:	87aa                	mv	a5,a0
20404602:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404606:	fec42783          	lw	a5,-20(s0)
2040460a:	07b1                	addi	a5,a5,12
2040460c:	4398                	lw	a4,0(a5)
2040460e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404612:	fec42683          	lw	a3,-20(s0)
20404616:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404618:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040461a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040461c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040461e:	853e                	mv	a0,a5
20404620:	50b2                	lw	ra,44(sp)
20404622:	5422                	lw	s0,40(sp)
20404624:	6145                	addi	sp,sp,48
20404626:	8082                	ret

20404628 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404628:	7179                	addi	sp,sp,-48
2040462a:	d606                	sw	ra,44(sp)
2040462c:	d422                	sw	s0,40(sp)
2040462e:	1800                	addi	s0,sp,48
20404630:	fca42e23          	sw	a0,-36(s0)
20404634:	fcb42c23          	sw	a1,-40(s0)
20404638:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040463c:	fdc42503          	lw	a0,-36(s0)
20404640:	bc1ff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
20404644:	87aa                	mv	a5,a0
20404646:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
2040464a:	fec42783          	lw	a5,-20(s0)
2040464e:	03c78793          	addi	a5,a5,60
20404652:	439c                	lw	a5,0(a5)
20404654:	fd842703          	lw	a4,-40(s0)
20404658:	fff74713          	not	a4,a4
2040465c:	86ba                	mv	a3,a4
2040465e:	fec42703          	lw	a4,-20(s0)
20404662:	03c70713          	addi	a4,a4,60
20404666:	8ff5                	and	a5,a5,a3
20404668:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
2040466a:	fec42783          	lw	a5,-20(s0)
2040466e:	03878793          	addi	a5,a5,56
20404672:	4398                	lw	a4,0(a5)
20404674:	fd442783          	lw	a5,-44(s0)
20404678:	fec42683          	lw	a3,-20(s0)
2040467c:	03868693          	addi	a3,a3,56
20404680:	8fd9                	or	a5,a5,a4
20404682:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404684:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404686:	853e                	mv	a0,a5
20404688:	50b2                	lw	ra,44(sp)
2040468a:	5422                	lw	s0,40(sp)
2040468c:	6145                	addi	sp,sp,48
2040468e:	8082                	ret

20404690 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404690:	7179                	addi	sp,sp,-48
20404692:	d606                	sw	ra,44(sp)
20404694:	d422                	sw	s0,40(sp)
20404696:	1800                	addi	s0,sp,48
20404698:	fca42e23          	sw	a0,-36(s0)
2040469c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046a0:	fdc42503          	lw	a0,-36(s0)
204046a4:	b5dff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
204046a8:	87aa                	mv	a5,a0
204046aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
204046ae:	fec42783          	lw	a5,-20(s0)
204046b2:	03878793          	addi	a5,a5,56
204046b6:	439c                	lw	a5,0(a5)
204046b8:	fd842703          	lw	a4,-40(s0)
204046bc:	fff74713          	not	a4,a4
204046c0:	86ba                	mv	a3,a4
204046c2:	fec42703          	lw	a4,-20(s0)
204046c6:	03870713          	addi	a4,a4,56
204046ca:	8ff5                	and	a5,a5,a3
204046cc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204046ce:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204046d0:	853e                	mv	a0,a5
204046d2:	50b2                	lw	ra,44(sp)
204046d4:	5422                	lw	s0,40(sp)
204046d6:	6145                	addi	sp,sp,48
204046d8:	8082                	ret

204046da <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204046da:	7179                	addi	sp,sp,-48
204046dc:	d606                	sw	ra,44(sp)
204046de:	d422                	sw	s0,40(sp)
204046e0:	1800                	addi	s0,sp,48
204046e2:	fca42e23          	sw	a0,-36(s0)
204046e6:	fcb42c23          	sw	a1,-40(s0)
204046ea:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046ee:	fdc42503          	lw	a0,-36(s0)
204046f2:	b0fff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
204046f6:	87aa                	mv	a5,a0
204046f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
204046fc:	fd442703          	lw	a4,-44(s0)
20404700:	479d                	li	a5,7
20404702:	1ce7e963          	bltu	a5,a4,204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404706:	fd442783          	lw	a5,-44(s0)
2040470a:	00279713          	slli	a4,a5,0x2
2040470e:	204057b7          	lui	a5,0x20405
20404712:	6c078793          	addi	a5,a5,1728 # 204056c0 <__metal_driver_vtable_riscv_plic0+0x4c>
20404716:	97ba                	add	a5,a5,a4
20404718:	439c                	lw	a5,0(a5)
2040471a:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040471c:	fec42783          	lw	a5,-20(s0)
20404720:	07e1                	addi	a5,a5,24
20404722:	439c                	lw	a5,0(a5)
20404724:	fd842703          	lw	a4,-40(s0)
20404728:	fff74713          	not	a4,a4
2040472c:	86ba                	mv	a3,a4
2040472e:	fec42703          	lw	a4,-20(s0)
20404732:	0761                	addi	a4,a4,24
20404734:	8ff5                	and	a5,a5,a3
20404736:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404738:	fec42783          	lw	a5,-20(s0)
2040473c:	02078793          	addi	a5,a5,32
20404740:	439c                	lw	a5,0(a5)
20404742:	fd842703          	lw	a4,-40(s0)
20404746:	fff74713          	not	a4,a4
2040474a:	86ba                	mv	a3,a4
2040474c:	fec42703          	lw	a4,-20(s0)
20404750:	02070713          	addi	a4,a4,32
20404754:	8ff5                	and	a5,a5,a3
20404756:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404758:	fec42783          	lw	a5,-20(s0)
2040475c:	02878793          	addi	a5,a5,40
20404760:	439c                	lw	a5,0(a5)
20404762:	fd842703          	lw	a4,-40(s0)
20404766:	fff74713          	not	a4,a4
2040476a:	86ba                	mv	a3,a4
2040476c:	fec42703          	lw	a4,-20(s0)
20404770:	02870713          	addi	a4,a4,40
20404774:	8ff5                	and	a5,a5,a3
20404776:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404778:	fec42783          	lw	a5,-20(s0)
2040477c:	03078793          	addi	a5,a5,48
20404780:	439c                	lw	a5,0(a5)
20404782:	fd842703          	lw	a4,-40(s0)
20404786:	fff74713          	not	a4,a4
2040478a:	86ba                	mv	a3,a4
2040478c:	fec42703          	lw	a4,-20(s0)
20404790:	03070713          	addi	a4,a4,48
20404794:	8ff5                	and	a5,a5,a3
20404796:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404798:	aa35                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040479a:	fec42783          	lw	a5,-20(s0)
2040479e:	07e1                	addi	a5,a5,24
204047a0:	4398                	lw	a4,0(a5)
204047a2:	fd842783          	lw	a5,-40(s0)
204047a6:	fec42683          	lw	a3,-20(s0)
204047aa:	06e1                	addi	a3,a3,24
204047ac:	8fd9                	or	a5,a5,a4
204047ae:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
204047b0:	a215                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204047b2:	fec42783          	lw	a5,-20(s0)
204047b6:	02078793          	addi	a5,a5,32
204047ba:	4398                	lw	a4,0(a5)
204047bc:	fd842783          	lw	a5,-40(s0)
204047c0:	fec42683          	lw	a3,-20(s0)
204047c4:	02068693          	addi	a3,a3,32
204047c8:	8fd9                	or	a5,a5,a4
204047ca:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204047cc:	a221                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204047ce:	fec42783          	lw	a5,-20(s0)
204047d2:	07e1                	addi	a5,a5,24
204047d4:	4398                	lw	a4,0(a5)
204047d6:	fd842783          	lw	a5,-40(s0)
204047da:	fec42683          	lw	a3,-20(s0)
204047de:	06e1                	addi	a3,a3,24
204047e0:	8fd9                	or	a5,a5,a4
204047e2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204047e4:	fec42783          	lw	a5,-20(s0)
204047e8:	02078793          	addi	a5,a5,32
204047ec:	4398                	lw	a4,0(a5)
204047ee:	fd842783          	lw	a5,-40(s0)
204047f2:	fec42683          	lw	a3,-20(s0)
204047f6:	02068693          	addi	a3,a3,32
204047fa:	8fd9                	or	a5,a5,a4
204047fc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
204047fe:	a8d9                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404800:	fec42783          	lw	a5,-20(s0)
20404804:	02878793          	addi	a5,a5,40
20404808:	4398                	lw	a4,0(a5)
2040480a:	fd842783          	lw	a5,-40(s0)
2040480e:	fec42683          	lw	a3,-20(s0)
20404812:	02868693          	addi	a3,a3,40
20404816:	8fd9                	or	a5,a5,a4
20404818:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2040481a:	a86d                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040481c:	fec42783          	lw	a5,-20(s0)
20404820:	03078793          	addi	a5,a5,48
20404824:	4398                	lw	a4,0(a5)
20404826:	fd842783          	lw	a5,-40(s0)
2040482a:	fec42683          	lw	a3,-20(s0)
2040482e:	03068693          	addi	a3,a3,48
20404832:	8fd9                	or	a5,a5,a4
20404834:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404836:	a879                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404838:	fec42783          	lw	a5,-20(s0)
2040483c:	02878793          	addi	a5,a5,40
20404840:	4398                	lw	a4,0(a5)
20404842:	fd842783          	lw	a5,-40(s0)
20404846:	fec42683          	lw	a3,-20(s0)
2040484a:	02868693          	addi	a3,a3,40
2040484e:	8fd9                	or	a5,a5,a4
20404850:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404852:	fec42783          	lw	a5,-20(s0)
20404856:	03078793          	addi	a5,a5,48
2040485a:	4398                	lw	a4,0(a5)
2040485c:	fd842783          	lw	a5,-40(s0)
20404860:	fec42683          	lw	a3,-20(s0)
20404864:	03068693          	addi	a3,a3,48
20404868:	8fd9                	or	a5,a5,a4
2040486a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
2040486c:	a0a5                	j	204048d4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040486e:	fec42783          	lw	a5,-20(s0)
20404872:	07e1                	addi	a5,a5,24
20404874:	4398                	lw	a4,0(a5)
20404876:	fd842783          	lw	a5,-40(s0)
2040487a:	fec42683          	lw	a3,-20(s0)
2040487e:	06e1                	addi	a3,a3,24
20404880:	8fd9                	or	a5,a5,a4
20404882:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404884:	fec42783          	lw	a5,-20(s0)
20404888:	02078793          	addi	a5,a5,32
2040488c:	4398                	lw	a4,0(a5)
2040488e:	fd842783          	lw	a5,-40(s0)
20404892:	fec42683          	lw	a3,-20(s0)
20404896:	02068693          	addi	a3,a3,32
2040489a:	8fd9                	or	a5,a5,a4
2040489c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040489e:	fec42783          	lw	a5,-20(s0)
204048a2:	02878793          	addi	a5,a5,40
204048a6:	4398                	lw	a4,0(a5)
204048a8:	fd842783          	lw	a5,-40(s0)
204048ac:	fec42683          	lw	a3,-20(s0)
204048b0:	02868693          	addi	a3,a3,40
204048b4:	8fd9                	or	a5,a5,a4
204048b6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204048b8:	fec42783          	lw	a5,-20(s0)
204048bc:	03078793          	addi	a5,a5,48
204048c0:	4398                	lw	a4,0(a5)
204048c2:	fd842783          	lw	a5,-40(s0)
204048c6:	fec42683          	lw	a3,-20(s0)
204048ca:	03068693          	addi	a3,a3,48
204048ce:	8fd9                	or	a5,a5,a4
204048d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204048d2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204048d4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204048d6:	853e                	mv	a0,a5
204048d8:	50b2                	lw	ra,44(sp)
204048da:	5422                	lw	s0,40(sp)
204048dc:	6145                	addi	sp,sp,48
204048de:	8082                	ret

204048e0 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204048e0:	7179                	addi	sp,sp,-48
204048e2:	d606                	sw	ra,44(sp)
204048e4:	d422                	sw	s0,40(sp)
204048e6:	1800                	addi	s0,sp,48
204048e8:	fca42e23          	sw	a0,-36(s0)
204048ec:	fcb42c23          	sw	a1,-40(s0)
204048f0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048f4:	fdc42503          	lw	a0,-36(s0)
204048f8:	909ff0ef          	jal	ra,20404200 <__metal_driver_sifive_gpio0_base>
204048fc:	87aa                	mv	a5,a0
204048fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404902:	fd442703          	lw	a4,-44(s0)
20404906:	479d                	li	a5,7
20404908:	14e7ea63          	bltu	a5,a4,20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
2040490c:	fd442783          	lw	a5,-44(s0)
20404910:	00279713          	slli	a4,a5,0x2
20404914:	204057b7          	lui	a5,0x20405
20404918:	6e078793          	addi	a5,a5,1760 # 204056e0 <__metal_driver_vtable_riscv_plic0+0x6c>
2040491c:	97ba                	add	a5,a5,a4
2040491e:	439c                	lw	a5,0(a5)
20404920:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404922:	fec42783          	lw	a5,-20(s0)
20404926:	07f1                	addi	a5,a5,28
20404928:	4398                	lw	a4,0(a5)
2040492a:	fd842783          	lw	a5,-40(s0)
2040492e:	fec42683          	lw	a3,-20(s0)
20404932:	06f1                	addi	a3,a3,28
20404934:	8fd9                	or	a5,a5,a4
20404936:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404938:	a215                	j	20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040493a:	fec42783          	lw	a5,-20(s0)
2040493e:	02478793          	addi	a5,a5,36
20404942:	4398                	lw	a4,0(a5)
20404944:	fd842783          	lw	a5,-40(s0)
20404948:	fec42683          	lw	a3,-20(s0)
2040494c:	02468693          	addi	a3,a3,36
20404950:	8fd9                	or	a5,a5,a4
20404952:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404954:	a221                	j	20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404956:	fec42783          	lw	a5,-20(s0)
2040495a:	07f1                	addi	a5,a5,28
2040495c:	4398                	lw	a4,0(a5)
2040495e:	fd842783          	lw	a5,-40(s0)
20404962:	fec42683          	lw	a3,-20(s0)
20404966:	06f1                	addi	a3,a3,28
20404968:	8fd9                	or	a5,a5,a4
2040496a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040496c:	fec42783          	lw	a5,-20(s0)
20404970:	02478793          	addi	a5,a5,36
20404974:	4398                	lw	a4,0(a5)
20404976:	fd842783          	lw	a5,-40(s0)
2040497a:	fec42683          	lw	a3,-20(s0)
2040497e:	02468693          	addi	a3,a3,36
20404982:	8fd9                	or	a5,a5,a4
20404984:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404986:	a8d9                	j	20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404988:	fec42783          	lw	a5,-20(s0)
2040498c:	02c78793          	addi	a5,a5,44
20404990:	4398                	lw	a4,0(a5)
20404992:	fd842783          	lw	a5,-40(s0)
20404996:	fec42683          	lw	a3,-20(s0)
2040499a:	02c68693          	addi	a3,a3,44
2040499e:	8fd9                	or	a5,a5,a4
204049a0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
204049a2:	a86d                	j	20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204049a4:	fec42783          	lw	a5,-20(s0)
204049a8:	03478793          	addi	a5,a5,52
204049ac:	4398                	lw	a4,0(a5)
204049ae:	fd842783          	lw	a5,-40(s0)
204049b2:	fec42683          	lw	a3,-20(s0)
204049b6:	03468693          	addi	a3,a3,52
204049ba:	8fd9                	or	a5,a5,a4
204049bc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
204049be:	a879                	j	20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204049c0:	fec42783          	lw	a5,-20(s0)
204049c4:	02c78793          	addi	a5,a5,44
204049c8:	4398                	lw	a4,0(a5)
204049ca:	fd842783          	lw	a5,-40(s0)
204049ce:	fec42683          	lw	a3,-20(s0)
204049d2:	02c68693          	addi	a3,a3,44
204049d6:	8fd9                	or	a5,a5,a4
204049d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204049da:	fec42783          	lw	a5,-20(s0)
204049de:	03478793          	addi	a5,a5,52
204049e2:	4398                	lw	a4,0(a5)
204049e4:	fd842783          	lw	a5,-40(s0)
204049e8:	fec42683          	lw	a3,-20(s0)
204049ec:	03468693          	addi	a3,a3,52
204049f0:	8fd9                	or	a5,a5,a4
204049f2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
204049f4:	a0a5                	j	20404a5c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204049f6:	fec42783          	lw	a5,-20(s0)
204049fa:	07f1                	addi	a5,a5,28
204049fc:	4398                	lw	a4,0(a5)
204049fe:	fd842783          	lw	a5,-40(s0)
20404a02:	fec42683          	lw	a3,-20(s0)
20404a06:	06f1                	addi	a3,a3,28
20404a08:	8fd9                	or	a5,a5,a4
20404a0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404a0c:	fec42783          	lw	a5,-20(s0)
20404a10:	02478793          	addi	a5,a5,36
20404a14:	4398                	lw	a4,0(a5)
20404a16:	fd842783          	lw	a5,-40(s0)
20404a1a:	fec42683          	lw	a3,-20(s0)
20404a1e:	02468693          	addi	a3,a3,36
20404a22:	8fd9                	or	a5,a5,a4
20404a24:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404a26:	fec42783          	lw	a5,-20(s0)
20404a2a:	02c78793          	addi	a5,a5,44
20404a2e:	4398                	lw	a4,0(a5)
20404a30:	fd842783          	lw	a5,-40(s0)
20404a34:	fec42683          	lw	a3,-20(s0)
20404a38:	02c68693          	addi	a3,a3,44
20404a3c:	8fd9                	or	a5,a5,a4
20404a3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404a40:	fec42783          	lw	a5,-20(s0)
20404a44:	03478793          	addi	a5,a5,52
20404a48:	4398                	lw	a4,0(a5)
20404a4a:	fd842783          	lw	a5,-40(s0)
20404a4e:	fec42683          	lw	a3,-20(s0)
20404a52:	03468693          	addi	a3,a3,52
20404a56:	8fd9                	or	a5,a5,a4
20404a58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404a5a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404a5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404a5e:	853e                	mv	a0,a5
20404a60:	50b2                	lw	ra,44(sp)
20404a62:	5422                	lw	s0,40(sp)
20404a64:	6145                	addi	sp,sp,48
20404a66:	8082                	ret

20404a68 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404a68:	1101                	addi	sp,sp,-32
20404a6a:	ce06                	sw	ra,28(sp)
20404a6c:	cc22                	sw	s0,24(sp)
20404a6e:	1000                	addi	s0,sp,32
20404a70:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404a74:	fec42503          	lw	a0,-20(s0)
20404a78:	faeff0ef          	jal	ra,20404226 <__metal_driver_sifive_gpio0_interrupt_parent>
20404a7c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404a7e:	853e                	mv	a0,a5
20404a80:	40f2                	lw	ra,28(sp)
20404a82:	4462                	lw	s0,24(sp)
20404a84:	6105                	addi	sp,sp,32
20404a86:	8082                	ret

20404a88 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404a88:	7179                	addi	sp,sp,-48
20404a8a:	d606                	sw	ra,44(sp)
20404a8c:	d422                	sw	s0,40(sp)
20404a8e:	1800                	addi	s0,sp,48
20404a90:	fca42e23          	sw	a0,-36(s0)
20404a94:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404a98:	fd842583          	lw	a1,-40(s0)
20404a9c:	fdc42503          	lw	a0,-36(s0)
20404aa0:	fb0ff0ef          	jal	ra,20404250 <__metal_driver_sifive_gpio0_interrupt_lines>
20404aa4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404aa8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404aac:	853e                	mv	a0,a5
20404aae:	50b2                	lw	ra,44(sp)
20404ab0:	5422                	lw	s0,40(sp)
20404ab2:	6145                	addi	sp,sp,48
20404ab4:	8082                	ret

20404ab6 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404ab6:	1101                	addi	sp,sp,-32
20404ab8:	ce22                	sw	s0,28(sp)
20404aba:	1000                	addi	s0,sp,32
20404abc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ac0:	fec42703          	lw	a4,-20(s0)
20404ac4:	800007b7          	lui	a5,0x80000
20404ac8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404acc:	00f71563          	bne	a4,a5,20404ad6 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404ad0:	100137b7          	lui	a5,0x10013
20404ad4:	a011                	j	20404ad8 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404ad6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404ad8:	853e                	mv	a0,a5
20404ada:	4472                	lw	s0,28(sp)
20404adc:	6105                	addi	sp,sp,32
20404ade:	8082                	ret

20404ae0 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404ae0:	1101                	addi	sp,sp,-32
20404ae2:	ce22                	sw	s0,28(sp)
20404ae4:	1000                	addi	s0,sp,32
20404ae6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404aea:	fec42703          	lw	a4,-20(s0)
20404aee:	800007b7          	lui	a5,0x80000
20404af2:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404af6:	00f71763          	bne	a4,a5,20404b04 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404afa:	800007b7          	lui	a5,0x80000
20404afe:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffe84c>
20404b02:	a011                	j	20404b06 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404b04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404b06:	853e                	mv	a0,a5
20404b08:	4472                	lw	s0,28(sp)
20404b0a:	6105                	addi	sp,sp,32
20404b0c:	8082                	ret

20404b0e <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404b0e:	1101                	addi	sp,sp,-32
20404b10:	ce22                	sw	s0,28(sp)
20404b12:	1000                	addi	s0,sp,32
20404b14:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b18:	fec42703          	lw	a4,-20(s0)
20404b1c:	800007b7          	lui	a5,0x80000
20404b20:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404b24:	00f71463          	bne	a4,a5,20404b2c <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404b28:	4795                	li	a5,5
20404b2a:	a011                	j	20404b2e <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404b2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404b2e:	853e                	mv	a0,a5
20404b30:	4472                	lw	s0,28(sp)
20404b32:	6105                	addi	sp,sp,32
20404b34:	8082                	ret

20404b36 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404b36:	1101                	addi	sp,sp,-32
20404b38:	ce22                	sw	s0,28(sp)
20404b3a:	1000                	addi	s0,sp,32
20404b3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b40:	fec42703          	lw	a4,-20(s0)
20404b44:	800007b7          	lui	a5,0x80000
20404b48:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404b4c:	00f71763          	bne	a4,a5,20404b5a <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404b50:	800007b7          	lui	a5,0x80000
20404b54:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe484>
20404b58:	a011                	j	20404b5c <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404b5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404b5c:	853e                	mv	a0,a5
20404b5e:	4472                	lw	s0,28(sp)
20404b60:	6105                	addi	sp,sp,32
20404b62:	8082                	ret

20404b64 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404b64:	1101                	addi	sp,sp,-32
20404b66:	ce22                	sw	s0,28(sp)
20404b68:	1000                	addi	s0,sp,32
20404b6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b6e:	fec42703          	lw	a4,-20(s0)
20404b72:	800007b7          	lui	a5,0x80000
20404b76:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404b7a:	00f71563          	bne	a4,a5,20404b84 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404b7e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404b82:	a011                	j	20404b86 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404b84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404b86:	853e                	mv	a0,a5
20404b88:	4472                	lw	s0,28(sp)
20404b8a:	6105                	addi	sp,sp,32
20404b8c:	8082                	ret

20404b8e <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404b8e:	1101                	addi	sp,sp,-32
20404b90:	ce22                	sw	s0,28(sp)
20404b92:	1000                	addi	s0,sp,32
20404b94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b98:	fec42703          	lw	a4,-20(s0)
20404b9c:	800007b7          	lui	a5,0x80000
20404ba0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404ba4:	00f71563          	bne	a4,a5,20404bae <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404ba8:	000307b7          	lui	a5,0x30
20404bac:	a011                	j	20404bb0 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404bae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404bb0:	853e                	mv	a0,a5
20404bb2:	4472                	lw	s0,28(sp)
20404bb4:	6105                	addi	sp,sp,32
20404bb6:	8082                	ret

20404bb8 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404bb8:	1101                	addi	sp,sp,-32
20404bba:	ce22                	sw	s0,28(sp)
20404bbc:	1000                	addi	s0,sp,32
20404bbe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404bc2:	fec42703          	lw	a4,-20(s0)
20404bc6:	800007b7          	lui	a5,0x80000
20404bca:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffeb4c>
20404bce:	00f71563          	bne	a4,a5,20404bd8 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404bd2:	000307b7          	lui	a5,0x30
20404bd6:	a011                	j	20404bda <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404bd8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404bda:	853e                	mv	a0,a5
20404bdc:	4472                	lw	s0,28(sp)
20404bde:	6105                	addi	sp,sp,32
20404be0:	8082                	ret

20404be2 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404be2:	1101                	addi	sp,sp,-32
20404be4:	ce06                	sw	ra,28(sp)
20404be6:	cc22                	sw	s0,24(sp)
20404be8:	1000                	addi	s0,sp,32
20404bea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404bee:	fec42503          	lw	a0,-20(s0)
20404bf2:	35fd                	jal	20404ae0 <__metal_driver_sifive_uart0_interrupt_parent>
20404bf4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404bf6:	853e                	mv	a0,a5
20404bf8:	40f2                	lw	ra,28(sp)
20404bfa:	4462                	lw	s0,24(sp)
20404bfc:	6105                	addi	sp,sp,32
20404bfe:	8082                	ret

20404c00 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404c00:	1101                	addi	sp,sp,-32
20404c02:	ce06                	sw	ra,28(sp)
20404c04:	cc22                	sw	s0,24(sp)
20404c06:	1000                	addi	s0,sp,32
20404c08:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404c0c:	fec42503          	lw	a0,-20(s0)
20404c10:	3dfd                	jal	20404b0e <__metal_driver_sifive_uart0_interrupt_line>
20404c12:	87aa                	mv	a5,a0
20404c14:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404c18:	853e                	mv	a0,a5
20404c1a:	40f2                	lw	ra,28(sp)
20404c1c:	4462                	lw	s0,24(sp)
20404c1e:	6105                	addi	sp,sp,32
20404c20:	8082                	ret

20404c22 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404c22:	7179                	addi	sp,sp,-48
20404c24:	d606                	sw	ra,44(sp)
20404c26:	d422                	sw	s0,40(sp)
20404c28:	1800                	addi	s0,sp,48
20404c2a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404c2e:	fdc42503          	lw	a0,-36(s0)
20404c32:	3551                	jal	20404ab6 <__metal_driver_sifive_uart0_control_base>
20404c34:	87aa                	mv	a5,a0
20404c36:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404c3a:	fec42783          	lw	a5,-20(s0)
20404c3e:	439c                	lw	a5,0(a5)
20404c40:	fff7c793          	not	a5,a5
20404c44:	83fd                	srli	a5,a5,0x1f
20404c46:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404c4a:	853e                	mv	a0,a5
20404c4c:	50b2                	lw	ra,44(sp)
20404c4e:	5422                	lw	s0,40(sp)
20404c50:	6145                	addi	sp,sp,48
20404c52:	8082                	ret

20404c54 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404c54:	7179                	addi	sp,sp,-48
20404c56:	d606                	sw	ra,44(sp)
20404c58:	d422                	sw	s0,40(sp)
20404c5a:	1800                	addi	s0,sp,48
20404c5c:	fca42e23          	sw	a0,-36(s0)
20404c60:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404c64:	fdc42503          	lw	a0,-36(s0)
20404c68:	35b9                	jal	20404ab6 <__metal_driver_sifive_uart0_control_base>
20404c6a:	87aa                	mv	a5,a0
20404c6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404c70:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404c72:	fdc42503          	lw	a0,-36(s0)
20404c76:	3775                	jal	20404c22 <__metal_driver_sifive_uart0_txready>
20404c78:	87aa                	mv	a5,a0
20404c7a:	dfe5                	beqz	a5,20404c72 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404c7c:	fec42783          	lw	a5,-20(s0)
20404c80:	fd842703          	lw	a4,-40(s0)
20404c84:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404c86:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404c88:	853e                	mv	a0,a5
20404c8a:	50b2                	lw	ra,44(sp)
20404c8c:	5422                	lw	s0,40(sp)
20404c8e:	6145                	addi	sp,sp,48
20404c90:	8082                	ret

20404c92 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404c92:	7179                	addi	sp,sp,-48
20404c94:	d606                	sw	ra,44(sp)
20404c96:	d422                	sw	s0,40(sp)
20404c98:	1800                	addi	s0,sp,48
20404c9a:	fca42e23          	sw	a0,-36(s0)
20404c9e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404ca2:	fdc42503          	lw	a0,-36(s0)
20404ca6:	3d01                	jal	20404ab6 <__metal_driver_sifive_uart0_control_base>
20404ca8:	87aa                	mv	a5,a0
20404caa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404cae:	fec42783          	lw	a5,-20(s0)
20404cb2:	0791                	addi	a5,a5,4
20404cb4:	439c                	lw	a5,0(a5)
20404cb6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404cba:	fe842783          	lw	a5,-24(s0)
20404cbe:	0007d763          	bgez	a5,20404ccc <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404cc2:	fd842783          	lw	a5,-40(s0)
20404cc6:	577d                	li	a4,-1
20404cc8:	c398                	sw	a4,0(a5)
20404cca:	a801                	j	20404cda <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404ccc:	fe842783          	lw	a5,-24(s0)
20404cd0:	0ff7f713          	andi	a4,a5,255
20404cd4:	fd842783          	lw	a5,-40(s0)
20404cd8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404cda:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404cdc:	853e                	mv	a0,a5
20404cde:	50b2                	lw	ra,44(sp)
20404ce0:	5422                	lw	s0,40(sp)
20404ce2:	6145                	addi	sp,sp,48
20404ce4:	8082                	ret

20404ce6 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404ce6:	7179                	addi	sp,sp,-48
20404ce8:	d622                	sw	s0,44(sp)
20404cea:	1800                	addi	s0,sp,48
20404cec:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404cf0:	fdc42783          	lw	a5,-36(s0)
20404cf4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404cf8:	fec42783          	lw	a5,-20(s0)
20404cfc:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404cfe:	853e                	mv	a0,a5
20404d00:	5432                	lw	s0,44(sp)
20404d02:	6145                	addi	sp,sp,48
20404d04:	8082                	ret

20404d06 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404d06:	7179                	addi	sp,sp,-48
20404d08:	d606                	sw	ra,44(sp)
20404d0a:	d422                	sw	s0,40(sp)
20404d0c:	1800                	addi	s0,sp,48
20404d0e:	fca42e23          	sw	a0,-36(s0)
20404d12:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404d16:	fdc42783          	lw	a5,-36(s0)
20404d1a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404d1e:	fdc42503          	lw	a0,-36(s0)
20404d22:	d95ff0ef          	jal	ra,20404ab6 <__metal_driver_sifive_uart0_control_base>
20404d26:	87aa                	mv	a5,a0
20404d28:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404d2c:	fdc42503          	lw	a0,-36(s0)
20404d30:	3519                	jal	20404b36 <__metal_driver_sifive_uart0_clock>
20404d32:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404d36:	fd842703          	lw	a4,-40(s0)
20404d3a:	fec42783          	lw	a5,-20(s0)
20404d3e:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404d40:	fe442783          	lw	a5,-28(s0)
20404d44:	cbb1                	beqz	a5,20404d98 <__metal_driver_sifive_uart0_set_baud_rate+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404d46:	fe442783          	lw	a5,-28(s0)
20404d4a:	439c                	lw	a5,0(a5)
20404d4c:	439c                	lw	a5,0(a5)
20404d4e:	fe442503          	lw	a0,-28(s0)
20404d52:	9782                	jalr	a5
20404d54:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404d58:	fe042703          	lw	a4,-32(s0)
20404d5c:	fd842783          	lw	a5,-40(s0)
20404d60:	02f747b3          	div	a5,a4,a5
20404d64:	fff78713          	addi	a4,a5,-1
20404d68:	fe842783          	lw	a5,-24(s0)
20404d6c:	07e1                	addi	a5,a5,24
20404d6e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404d70:	fe842783          	lw	a5,-24(s0)
20404d74:	07a1                	addi	a5,a5,8
20404d76:	439c                	lw	a5,0(a5)
20404d78:	fe842703          	lw	a4,-24(s0)
20404d7c:	0721                	addi	a4,a4,8
20404d7e:	0017e793          	ori	a5,a5,1
20404d82:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404d84:	fe842783          	lw	a5,-24(s0)
20404d88:	07b1                	addi	a5,a5,12
20404d8a:	439c                	lw	a5,0(a5)
20404d8c:	fe842703          	lw	a4,-24(s0)
20404d90:	0731                	addi	a4,a4,12
20404d92:	0017e793          	ori	a5,a5,1
20404d96:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404d98:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404d9a:	853e                	mv	a0,a5
20404d9c:	50b2                	lw	ra,44(sp)
20404d9e:	5422                	lw	s0,40(sp)
20404da0:	6145                	addi	sp,sp,48
20404da2:	8082                	ret

20404da4 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404da4:	7139                	addi	sp,sp,-64
20404da6:	de06                	sw	ra,60(sp)
20404da8:	dc22                	sw	s0,56(sp)
20404daa:	0080                	addi	s0,sp,64
20404dac:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404db0:	fcc42783          	lw	a5,-52(s0)
20404db4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404db8:	fcc42503          	lw	a0,-52(s0)
20404dbc:	cfbff0ef          	jal	ra,20404ab6 <__metal_driver_sifive_uart0_control_base>
20404dc0:	87aa                	mv	a5,a0
20404dc2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404dc6:	fcc42503          	lw	a0,-52(s0)
20404dca:	d6dff0ef          	jal	ra,20404b36 <__metal_driver_sifive_uart0_clock>
20404dce:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404dd2:	fe842783          	lw	a5,-24(s0)
20404dd6:	07a1                	addi	a5,a5,8
20404dd8:	4398                	lw	a4,0(a5)
20404dda:	fe842783          	lw	a5,-24(s0)
20404dde:	07a1                	addi	a5,a5,8
20404de0:	86be                	mv	a3,a5
20404de2:	fff907b7          	lui	a5,0xfff90
20404de6:	17fd                	addi	a5,a5,-1
20404de8:	8ff9                	and	a5,a5,a4
20404dea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404dec:	fe842783          	lw	a5,-24(s0)
20404df0:	07a1                	addi	a5,a5,8
20404df2:	4398                	lw	a4,0(a5)
20404df4:	fe842783          	lw	a5,-24(s0)
20404df8:	07a1                	addi	a5,a5,8
20404dfa:	86be                	mv	a3,a5
20404dfc:	67c1                	lui	a5,0x10
20404dfe:	8fd9                	or	a5,a5,a4
20404e00:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404e02:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404e04:	fe842783          	lw	a5,-24(s0)
20404e08:	07d1                	addi	a5,a5,20
20404e0a:	439c                	lw	a5,0(a5)
20404e0c:	8b85                	andi	a5,a5,1
20404e0e:	dbfd                	beqz	a5,20404e04 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404e10:	fe842783          	lw	a5,-24(s0)
20404e14:	07a1                	addi	a5,a5,8
20404e16:	439c                	lw	a5,0(a5)
20404e18:	8b89                	andi	a5,a5,2
20404e1a:	c399                	beqz	a5,20404e20 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404e1c:	47a5                	li	a5,9
20404e1e:	a011                	j	20404e22 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404e20:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404e22:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404e26:	fe442783          	lw	a5,-28(s0)
20404e2a:	439c                	lw	a5,0(a5)
20404e2c:	439c                	lw	a5,0(a5)
20404e2e:	fe442503          	lw	a0,-28(s0)
20404e32:	9782                	jalr	a5
20404e34:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404e38:	fe042703          	lw	a4,-32(s0)
20404e3c:	fdc42783          	lw	a5,-36(s0)
20404e40:	02f707b3          	mul	a5,a4,a5
20404e44:	873e                	mv	a4,a5
20404e46:	fec42783          	lw	a5,-20(s0)
20404e4a:	43dc                	lw	a5,4(a5)
20404e4c:	02f757b3          	divu	a5,a4,a5
20404e50:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404e54:	fc042a23          	sw	zero,-44(s0)
20404e58:	a039                	j	20404e66 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404e5a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404e5c:	fd442783          	lw	a5,-44(s0)
20404e60:	0785                	addi	a5,a5,1
20404e62:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404e66:	fd442783          	lw	a5,-44(s0)
20404e6a:	fd842703          	lw	a4,-40(s0)
20404e6e:	fee7c6e3          	blt	a5,a4,20404e5a <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404e72:	0001                	nop
20404e74:	50f2                	lw	ra,60(sp)
20404e76:	5462                	lw	s0,56(sp)
20404e78:	6121                	addi	sp,sp,64
20404e7a:	8082                	ret

20404e7c <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404e7c:	7179                	addi	sp,sp,-48
20404e7e:	d606                	sw	ra,44(sp)
20404e80:	d422                	sw	s0,40(sp)
20404e82:	1800                	addi	s0,sp,48
20404e84:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404e88:	fdc42783          	lw	a5,-36(s0)
20404e8c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404e90:	fec42703          	lw	a4,-20(s0)
20404e94:	fec42783          	lw	a5,-20(s0)
20404e98:	43dc                	lw	a5,4(a5)
20404e9a:	85be                	mv	a1,a5
20404e9c:	853a                	mv	a0,a4
20404e9e:	d9bfc0ef          	jal	ra,20401c38 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404ea2:	0001                	nop
20404ea4:	50b2                	lw	ra,44(sp)
20404ea6:	5422                	lw	s0,40(sp)
20404ea8:	6145                	addi	sp,sp,48
20404eaa:	8082                	ret

20404eac <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404eac:	7139                	addi	sp,sp,-64
20404eae:	de06                	sw	ra,60(sp)
20404eb0:	dc22                	sw	s0,56(sp)
20404eb2:	0080                	addi	s0,sp,64
20404eb4:	fca42623          	sw	a0,-52(s0)
20404eb8:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404ebc:	fcc42783          	lw	a5,-52(s0)
20404ec0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404ec4:	fcc42503          	lw	a0,-52(s0)
20404ec8:	c6fff0ef          	jal	ra,20404b36 <__metal_driver_sifive_uart0_clock>
20404ecc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404ed0:	fcc42503          	lw	a0,-52(s0)
20404ed4:	c91ff0ef          	jal	ra,20404b64 <__metal_driver_sifive_uart0_pinmux>
20404ed8:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404edc:	fe842783          	lw	a5,-24(s0)
20404ee0:	c7b9                	beqz	a5,20404f2e <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404ee2:	fec42783          	lw	a5,-20(s0)
20404ee6:	20405737          	lui	a4,0x20405
20404eea:	da470713          	addi	a4,a4,-604 # 20404da4 <pre_rate_change_callback_func>
20404eee:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404ef0:	fec42783          	lw	a5,-20(s0)
20404ef4:	fcc42703          	lw	a4,-52(s0)
20404ef8:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404efa:	fec42783          	lw	a5,-20(s0)
20404efe:	07a1                	addi	a5,a5,8
20404f00:	85be                	mv	a1,a5
20404f02:	fe842503          	lw	a0,-24(s0)
20404f06:	20f1                	jal	20404fd2 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404f08:	fec42783          	lw	a5,-20(s0)
20404f0c:	20405737          	lui	a4,0x20405
20404f10:	e7c70713          	addi	a4,a4,-388 # 20404e7c <post_rate_change_callback_func>
20404f14:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20404f16:	fec42783          	lw	a5,-20(s0)
20404f1a:	fcc42703          	lw	a4,-52(s0)
20404f1e:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20404f20:	fec42783          	lw	a5,-20(s0)
20404f24:	07d1                	addi	a5,a5,20
20404f26:	85be                	mv	a1,a5
20404f28:	fe842503          	lw	a0,-24(s0)
20404f2c:	28d9                	jal	20405002 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20404f2e:	fec42783          	lw	a5,-20(s0)
20404f32:	fc842583          	lw	a1,-56(s0)
20404f36:	853e                	mv	a0,a5
20404f38:	d01fc0ef          	jal	ra,20401c38 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20404f3c:	fe442783          	lw	a5,-28(s0)
20404f40:	cb95                	beqz	a5,20404f74 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20404f42:	fcc42503          	lw	a0,-52(s0)
20404f46:	c49ff0ef          	jal	ra,20404b8e <__metal_driver_sifive_uart0_pinmux_output_selector>
20404f4a:	87aa                	mv	a5,a0
20404f4c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20404f50:	fcc42503          	lw	a0,-52(s0)
20404f54:	c65ff0ef          	jal	ra,20404bb8 <__metal_driver_sifive_uart0_pinmux_source_selector>
20404f58:	87aa                	mv	a5,a0
20404f5a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20404f5e:	fe442783          	lw	a5,-28(s0)
20404f62:	439c                	lw	a5,0(a5)
20404f64:	53dc                	lw	a5,36(a5)
20404f66:	fdc42603          	lw	a2,-36(s0)
20404f6a:	fe042583          	lw	a1,-32(s0)
20404f6e:	fe442503          	lw	a0,-28(s0)
20404f72:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20404f74:	0001                	nop
20404f76:	50f2                	lw	ra,60(sp)
20404f78:	5462                	lw	s0,56(sp)
20404f7a:	6121                	addi	sp,sp,64
20404f7c:	8082                	ret

20404f7e <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20404f7e:	7179                	addi	sp,sp,-48
20404f80:	d622                	sw	s0,44(sp)
20404f82:	1800                	addi	s0,sp,48
20404f84:	fca42e23          	sw	a0,-36(s0)
20404f88:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20404f8c:	fd842783          	lw	a5,-40(s0)
20404f90:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20404f94:	fdc42783          	lw	a5,-36(s0)
20404f98:	e781                	bnez	a5,20404fa0 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20404f9a:	fd842783          	lw	a5,-40(s0)
20404f9e:	a035                	j	20404fca <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20404fa0:	fdc42783          	lw	a5,-36(s0)
20404fa4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20404fa8:	a031                	j	20404fb4 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20404faa:	fec42783          	lw	a5,-20(s0)
20404fae:	479c                	lw	a5,8(a5)
20404fb0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20404fb4:	fec42783          	lw	a5,-20(s0)
20404fb8:	479c                	lw	a5,8(a5)
20404fba:	fbe5                	bnez	a5,20404faa <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20404fbc:	fec42783          	lw	a5,-20(s0)
20404fc0:	fd842703          	lw	a4,-40(s0)
20404fc4:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20404fc6:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20404fca:	853e                	mv	a0,a5
20404fcc:	5432                	lw	s0,44(sp)
20404fce:	6145                	addi	sp,sp,48
20404fd0:	8082                	ret

20404fd2 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404fd2:	1101                	addi	sp,sp,-32
20404fd4:	ce06                	sw	ra,28(sp)
20404fd6:	cc22                	sw	s0,24(sp)
20404fd8:	1000                	addi	s0,sp,32
20404fda:	fea42623          	sw	a0,-20(s0)
20404fde:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20404fe2:	fec42783          	lw	a5,-20(s0)
20404fe6:	43dc                	lw	a5,4(a5)
20404fe8:	fe842583          	lw	a1,-24(s0)
20404fec:	853e                	mv	a0,a5
20404fee:	3f41                	jal	20404f7e <_metal_clock_append_to_callbacks>
20404ff0:	872a                	mv	a4,a0
20404ff2:	fec42783          	lw	a5,-20(s0)
20404ff6:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20404ff8:	0001                	nop
20404ffa:	40f2                	lw	ra,28(sp)
20404ffc:	4462                	lw	s0,24(sp)
20404ffe:	6105                	addi	sp,sp,32
20405000:	8082                	ret

20405002 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405002:	1101                	addi	sp,sp,-32
20405004:	ce06                	sw	ra,28(sp)
20405006:	cc22                	sw	s0,24(sp)
20405008:	1000                	addi	s0,sp,32
2040500a:	fea42623          	sw	a0,-20(s0)
2040500e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405012:	fec42783          	lw	a5,-20(s0)
20405016:	479c                	lw	a5,8(a5)
20405018:	fe842583          	lw	a1,-24(s0)
2040501c:	853e                	mv	a0,a5
2040501e:	3785                	jal	20404f7e <_metal_clock_append_to_callbacks>
20405020:	872a                	mv	a4,a0
20405022:	fec42783          	lw	a5,-20(s0)
20405026:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405028:	0001                	nop
2040502a:	40f2                	lw	ra,28(sp)
2040502c:	4462                	lw	s0,24(sp)
2040502e:	6105                	addi	sp,sp,32
20405030:	8082                	ret

20405032 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405032:	1101                	addi	sp,sp,-32
20405034:	ce06                	sw	ra,28(sp)
20405036:	cc22                	sw	s0,24(sp)
20405038:	1000                	addi	s0,sp,32
2040503a:	fea42623          	sw	a0,-20(s0)
2040503e:	fec42783          	lw	a5,-20(s0)
20405042:	439c                	lw	a5,0(a5)
20405044:	57dc                	lw	a5,44(a5)
20405046:	fec42503          	lw	a0,-20(s0)
2040504a:	9782                	jalr	a5
2040504c:	87aa                	mv	a5,a0
2040504e:	853e                	mv	a0,a5
20405050:	40f2                	lw	ra,28(sp)
20405052:	4462                	lw	s0,24(sp)
20405054:	6105                	addi	sp,sp,32
20405056:	8082                	ret

20405058 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405058:	1101                	addi	sp,sp,-32
2040505a:	ce22                	sw	s0,28(sp)
2040505c:	1000                	addi	s0,sp,32
2040505e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405062:	fec42783          	lw	a5,-20(s0)
20405066:	eb89                	bnez	a5,20405078 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405068:	fec42703          	lw	a4,-20(s0)
2040506c:	070a                	slli	a4,a4,0x2
2040506e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20405072:	97ba                	add	a5,a5,a4
20405074:	439c                	lw	a5,0(a5)
20405076:	a011                	j	2040507a <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405078:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
2040507a:	853e                	mv	a0,a5
2040507c:	4472                	lw	s0,28(sp)
2040507e:	6105                	addi	sp,sp,32
20405080:	8082                	ret

20405082 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405082:	1101                	addi	sp,sp,-32
20405084:	ce22                	sw	s0,28(sp)
20405086:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405088:	f14027f3          	csrr	a5,mhartid
2040508c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405090:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405094:	853e                	mv	a0,a5
20405096:	4472                	lw	s0,28(sp)
20405098:	6105                	addi	sp,sp,32
2040509a:	8082                	ret

2040509c <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040509c:	1101                	addi	sp,sp,-32
2040509e:	ce22                	sw	s0,28(sp)
204050a0:	1000                	addi	s0,sp,32
204050a2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
204050a6:	0001                	nop
204050a8:	bffd                	j	204050a6 <metal_shutdown+0xa>
	...

20405100 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405100:	c90fd06f          	j	20402590 <metal_interrupt_vector_handler>

20405104 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405104:	c8cfd06f          	j	20402590 <metal_interrupt_vector_handler>

20405108 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405108:	c88fd06f          	j	20402590 <metal_interrupt_vector_handler>

2040510c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040510c:	cb2fd06f          	j	204025be <metal_software_interrupt_vector_handler>

20405110 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405110:	c80fd06f          	j	20402590 <metal_interrupt_vector_handler>

20405114 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405114:	c7cfd06f          	j	20402590 <metal_interrupt_vector_handler>

20405118 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405118:	c78fd06f          	j	20402590 <metal_interrupt_vector_handler>

2040511c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040511c:	d94fd06f          	j	204026b0 <metal_timer_interrupt_vector_handler>

20405120 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405120:	c70fd06f          	j	20402590 <metal_interrupt_vector_handler>

20405124 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405124:	c6cfd06f          	j	20402590 <metal_interrupt_vector_handler>

20405128 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405128:	c68fd06f          	j	20402590 <metal_interrupt_vector_handler>

2040512c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040512c:	c64fd06f          	j	20402590 <metal_interrupt_vector_handler>

20405130 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405130:	c60fd06f          	j	20402590 <metal_interrupt_vector_handler>

20405134 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405134:	c5cfd06f          	j	20402590 <metal_interrupt_vector_handler>

20405138 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405138:	c58fd06f          	j	20402590 <metal_interrupt_vector_handler>

2040513c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040513c:	c54fd06f          	j	20402590 <metal_interrupt_vector_handler>

20405140 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405140:	835fd06f          	j	20402974 <metal_lc0_interrupt_vector_handler>

20405144 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405144:	8c3fd06f          	j	20402a06 <metal_lc1_interrupt_vector_handler>

20405148 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405148:	951fd06f          	j	20402a98 <metal_lc2_interrupt_vector_handler>

2040514c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040514c:	9dffd06f          	j	20402b2a <metal_lc3_interrupt_vector_handler>

20405150 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405150:	a6dfd06f          	j	20402bbc <metal_lc4_interrupt_vector_handler>

20405154 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405154:	afbfd06f          	j	20402c4e <metal_lc5_interrupt_vector_handler>

20405158 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405158:	b89fd06f          	j	20402ce0 <metal_lc6_interrupt_vector_handler>

2040515c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040515c:	c17fd06f          	j	20402d72 <metal_lc7_interrupt_vector_handler>

20405160 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405160:	ca5fd06f          	j	20402e04 <metal_lc8_interrupt_vector_handler>

20405164 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405164:	d33fd06f          	j	20402e96 <metal_lc9_interrupt_vector_handler>

20405168 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405168:	dc1fd06f          	j	20402f28 <metal_lc10_interrupt_vector_handler>

2040516c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040516c:	e4ffd06f          	j	20402fba <metal_lc11_interrupt_vector_handler>

20405170 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405170:	eddfd06f          	j	2040304c <metal_lc12_interrupt_vector_handler>

20405174 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405174:	f6bfd06f          	j	204030de <metal_lc13_interrupt_vector_handler>

20405178 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405178:	ff9fd06f          	j	20403170 <metal_lc14_interrupt_vector_handler>

2040517c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040517c:	886fe06f          	j	20403202 <metal_lc15_interrupt_vector_handler>

20405180 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405180:	1101                	addi	sp,sp,-32
20405182:	ce22                	sw	s0,28(sp)
20405184:	1000                	addi	s0,sp,32
20405186:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040518a:	fec42703          	lw	a4,-20(s0)
2040518e:	800007b7          	lui	a5,0x80000
20405192:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe484>
20405196:	00f71763          	bne	a4,a5,204051a4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040519a:	03dfd7b7          	lui	a5,0x3dfd
2040519e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
204051a2:	a011                	j	204051a6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
204051a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
204051a6:	853e                	mv	a0,a5
204051a8:	4472                	lw	s0,28(sp)
204051aa:	6105                	addi	sp,sp,32
204051ac:	8082                	ret

204051ae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204051ae:	1101                	addi	sp,sp,-32
204051b0:	ce06                	sw	ra,28(sp)
204051b2:	cc22                	sw	s0,24(sp)
204051b4:	1000                	addi	s0,sp,32
204051b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
204051ba:	fec42503          	lw	a0,-20(s0)
204051be:	37c9                	jal	20405180 <__metal_driver_fixed_clock_rate>
204051c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
204051c2:	853e                	mv	a0,a5
204051c4:	40f2                	lw	ra,28(sp)
204051c6:	4462                	lw	s0,24(sp)
204051c8:	6105                	addi	sp,sp,32
204051ca:	8082                	ret

204051cc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204051cc:	1101                	addi	sp,sp,-32
204051ce:	ce06                	sw	ra,28(sp)
204051d0:	cc22                	sw	s0,24(sp)
204051d2:	1000                	addi	s0,sp,32
204051d4:	fea42623          	sw	a0,-20(s0)
204051d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204051dc:	fec42503          	lw	a0,-20(s0)
204051e0:	37f9                	jal	204051ae <__metal_driver_fixed_clock_get_rate_hz>
204051e2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
204051e4:	853e                	mv	a0,a5
204051e6:	40f2                	lw	ra,28(sp)
204051e8:	4462                	lw	s0,24(sp)
204051ea:	6105                	addi	sp,sp,32
204051ec:	8082                	ret

204051ee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204051ee:	1101                	addi	sp,sp,-32
204051f0:	ce06                	sw	ra,28(sp)
204051f2:	cc22                	sw	s0,24(sp)
204051f4:	1000                	addi	s0,sp,32
204051f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204051fa:	fec42503          	lw	a0,-20(s0)
204051fe:	3d79                	jal	2040509c <metal_shutdown>
