
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/debug/MyRoCC2.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/debug/MyRoCC2.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x000054f4 memsz 0x000054f4 flags rwx
    LOAD off    0x00006770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x00005ca4 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x204054f8 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00004e80  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000470  20405080  20405080  00006080  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  204054f0  204054f0  000064f0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  204054f8  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000050a4  80000770  80000770  00006770  2**3  ALLOC
  6 .stack            00000400  80005814  80005814  00006770  2**0  ALLOC
  7 .heap             00000800  80005c14  80005c14  00006770  2**0  ALLOC
  8 .debug_info       00014162  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026af  00000000  00000000  0001b8d2  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000898  00000000  00000000  0001df88  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000730  00000000  00000000  0001e820  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       0000768f  00000000  00000000  0001ef50  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036a4  00000000  00000000  000265df  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00029c83  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  00029cab  2**0  CONTENTS, READONLY
 16 .debug_frame      0000238c  00000000  00000000  00029cd8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405080 l    d  .rodata	00000000 .rodata
204054f0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
80005814 l    d  .stack	00000000 .stack
80005c14 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
2040519c l       .rodata	00000000 argv
204051a0 l       .rodata	00000000 envp
204051a4 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 MyRoCC2.c
8000077c l     O .bss	00002804 arrHW.2576
80002f80 l     O .bss	00002804 resHW.2577
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400806 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400d56 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80005784 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401a70 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401b1a l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401b40 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401b64 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401ba0 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401d00 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402230 l     F .text	00000024 __metal_driver_cpu_hartid
20402254 l     F .text	0000002a __metal_driver_cpu_timebase
2040227e l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403a8e l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403ab8 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403ae0 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403b08 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403b30 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404070 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404096 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204040c0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404922 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
2040494c l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
2040497a l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
204049a2 l     F .text	0000002e __metal_driver_sifive_uart0_clock
204049d0 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
204049fa l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404a24 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404c0e l     F .text	000000d8 pre_rate_change_callback_func
20404ce6 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20404f80 l       .text	00000000 IRQ_0
20404f84 l       .text	00000000 IRQ_1
20404f88 l       .text	00000000 IRQ_2
20404f8c l       .text	00000000 IRQ_3
20404f90 l       .text	00000000 IRQ_4
20404f94 l       .text	00000000 IRQ_5
20404f98 l       .text	00000000 IRQ_6
20404f9c l       .text	00000000 IRQ_7
20404fa0 l       .text	00000000 IRQ_8
20404fa4 l       .text	00000000 IRQ_9
20404fa8 l       .text	00000000 IRQ_10
20404fac l       .text	00000000 IRQ_11
20404fb0 l       .text	00000000 IRQ_12
20404fb4 l       .text	00000000 IRQ_13
20404fb8 l       .text	00000000 IRQ_14
20404fbc l       .text	00000000 IRQ_15
20404fc0 l       .text	00000000 IRQ_LC0
20404fc4 l       .text	00000000 IRQ_LC1
20404fc8 l       .text	00000000 IRQ_LC2
20404fcc l       .text	00000000 IRQ_LC3
20404fd0 l       .text	00000000 IRQ_LC4
20404fd4 l       .text	00000000 IRQ_LC5
20404fd8 l       .text	00000000 IRQ_LC6
20404fdc l       .text	00000000 IRQ_LC7
20404fe0 l       .text	00000000 IRQ_LC8
20404fe4 l       .text	00000000 IRQ_LC9
20404fe8 l       .text	00000000 IRQ_LC10
20404fec l       .text	00000000 IRQ_LC11
20404ff0 l       .text	00000000 IRQ_LC12
20404ff4 l       .text	00000000 IRQ_LC13
20404ff8 l       .text	00000000 IRQ_LC14
20404ffc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405000 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
204054f4 l       .init_array	00000000 __fini_array_end
204054f4 l       .init_array	00000000 __fini_array_start
204054f4 l       .init_array	00000000 __init_array_end
204054f0 l       .init_array	00000000 __preinit_array_end
204054f0 l       .init_array	00000000 __init_array_start
204054f0 l       .init_array	00000000 __preinit_array_start
204054cc g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204011da g     F .text	00000030 _isatty_r
20402a3a  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204003a0 g     F .text	000000da _puts_r
2040120a g     F .text	00000034 _lseek_r
20404b72 g     F .text	0000009c __metal_driver_sifive_uart0_set_baud_rate
20401edc g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204029a8  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204031fa g     F .text	00000038 __metal_valid_interrupt_id
2040035c g     F .text	00000044 printf
2040361c g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
20404de8 g     F .text	00000054 _metal_clock_append_to_callbacks
20403b80 g     F .text	00000038 __metal_plic0_complete_interrupt
2040347a g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401108 g     F .text	00000036 __sseek
204008bc g     F .text	0000006a __sinit
20400488 g     F .text	000000c0 __swbuf_r
20400878 g     F .text	00000044 __sfmoreglue
2040125a g     F .text	00000002 __malloc_unlock
20404ec2 g     F .text	0000002a metal_cpu_get
80000728 g     O .data	00000020 __metal_dt_serial_10013000
204044fc g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
204051b0 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80005814 g       .bss	00000000 metal_segment_bss_target_end
20401bd0 g     F .text	0000009a __metal_clint0_mtime_get
20403a22 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204042b2 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
204017f0 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404a8e g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20401c6a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
204011a8 g     F .text	00000032 _fstat_r
2040474c g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80005810 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20404e3c g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402d14  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405404 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
204053c4 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401aec g     F .text	0000002e metal_uart_set_baud_rate
20404d16 g     F .text	000000d2 __metal_driver_sifive_uart0_init
204036b0 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80005c14 g       .heap	00000000 metal_segment_heap_target_start
2040086e g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20402c82  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040047a g     F .text	0000000e puts
20402f5c  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402412 g     F .text	00000018 __metal_default_exception_handler
20401660 g     F .text	00000026 _fstat
204021fc g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403c1c g     F .text	00000062 __metal_plic0_set_priority
20403638 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204022a8 g     F .text	0000002c __metal_driver_cpu_get
20405378 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402306 g     F .text	00000018 __metal_interrupt_global_disable
20402bf0  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402da6  w    F .text	00000092 metal_lc10_interrupt_vector_handler
2040105a g     F .text	00000030 _sbrk_r
20404028 g     F .text	00000048 __metal_driver_riscv_plic0_disable
204032ee g     F .text	0000004e __metal_exception_register
2040160a g     F .text	00000034 _read_r
20403844 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
2040438e g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204024fe g     F .text	00000064 __metal_default_sw_handler
20404e6c g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404a4e g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401686 g     F .text	00000020 _isatty
20404454 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
20402562  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401860 g     F .text	0000006a __libc_init_array
204043ce g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20402e38  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204035c8 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
204016fa g     F .text	0000007e _sbrk
20404348 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
20402368 g     F .text	0000001a __metal_interrupt_timer_disable
20404546 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
204038fa g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405490 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404494 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401828 g     F .text	00000038 __libc_fini_array
204048d4 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403884 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
204023ba g     F .text	0000002c __metal_interrupt_local_enable
204021c8 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401a1e g     F .text	0000002c metal_tty_putc
20403d3e g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405100 g     O .rodata	00000020 __sf_fake_stderr
2040239e g     F .text	0000001c __metal_interrupt_external_disable
20404a6c g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403694 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040333c g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400d80 g     F .text	00000042 __sfputs_r
204039dc g     F .text	00000046 __metal_driver_cpu_exception_register
2040231e g     F .text	00000018 __metal_interrupt_software_enable
20402884  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040123e g     F .text	0000001a memchr
20400bcc g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403112 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401956 g     F .text	000000c8 __call_exitprocs
80005c14 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
204016a6 g     F .text	0000002a _lseek
204039bc g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403a50 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402382 g     F .text	0000001c __metal_interrupt_external_enable
204018ca g     F .text	0000008c __register_exitproc
20404ac0 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20403de4 g     F .text	0000013c __metal_driver_riscv_plic0_init
20403fe0 g     F .text	00000048 __metal_driver_riscv_plic0_enable
2040431e g     F .text	0000002a __metal_driver_sifive_gpio0_output
20402b5e  w    F .text	00000092 metal_lc6_interrupt_vector_handler
204022d4 g     F .text	0000001a __metal_myhart_id
204048f4 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402470  w    F .text	0000008e metal_software_interrupt_vector_handler
204035f2 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401178 g     F .text	00000030 _close_r
20404b52 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401dbe g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
20400548 g     F .text	00000110 __swsetup_r
20400926 g     F .text	0000009e __sfp
2040108a g     F .text	00000030 __sread
20404274 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20402442  w    F .text	0000002e metal_interrupt_vector_handler
20401258 g     F .text	00000002 __malloc_lock
204007a2 g     F .text	00000064 _fflush_r
20403bf0 g     F .text	0000002c __metal_plic0_get_threshold
20405120 g     O .rodata	00000020 __sf_fake_stdin
20403232 g     F .text	000000bc __metal_local_interrupt_enable
20402094 g     F .text	00000134 __metal_driver_riscv_clint0_command_request
20400b24 g     F .text	000000a8 memset
20402acc  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040021e g     F .text	0000013e main
80000770 g       .data	00000000 metal_segment_data_target_end
20403898 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
2040395c g     F .text	00000060 __metal_driver_cpu_get_msip
20404f06 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403a6e g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403b52 g     F .text	0000002e __metal_plic0_claim_interrupt
2040113e g     F .text	00000006 __sclose
20402eca  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400c78 g     F .text	000000de _malloc_r
20401ec0 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403722 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20404eec g     F .text	0000001a metal_cpu_get_current_hartid
20404f80 g       .text	00000000 __metal_vector_table
204054f8 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
2040035c g     F .text	00000044 iprintf
204022ee g     F .text	00000018 __metal_interrupt_global_enable
204017e6 g     F .text	0000000a atexit
20401a4a g     F .text	00000026 metal_tty_putc_raw
20401144 g     F .text	00000034 _write_r
2040234e g     F .text	0000001a __metal_interrupt_timer_enable
20404afe g     F .text	00000054 __metal_driver_sifive_uart0_getc
20401fe2 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2040125c g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
204037ce g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400658 g     F .text	0000014a __sflush_r
2040502e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20401f30 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
204054f8 g       *ABS*	00000000 metal_segment_data_source_start
80006414 g       .heap	00000000 metal_segment_heap_target_end
20403162 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400a30 g     F .text	00000058 __swhatbuf_r
2040440e g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204025f0 g     F .text	00000066 __metal_default_timer_handler
20401778 g     F .text	0000006e _write
20403d56 g     F .text	0000008e __metal_plic0_handler
20402916  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403080  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20404e9c g     F .text	00000026 metal_cpu_interrupt_controller
204010ba g     F .text	0000004e __swrite
204017fc g     F .text	0000002c exit
20400dc2 g     F .text	00000298 _vfiprintf_r
204009c4 g     F .text	0000006c _fwalk_reent
2040504c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405140 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
2040242a g     F .text	00000018 __metal_default_interrupt_handler
20401abe g     F .text	0000002e metal_uart_putc
204016d0 g     F .text	0000002a _read
204042f6 g     F .text	00000028 __metal_driver_sifive_gpio0_input
20402680 g     F .text	0000014c __metal_exception_handler
204027f2  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040506e g     F .text	00000012 _exit
20403768 g     F .text	00000066 __metal_driver_cpu_mtime_get
20400a88 g     F .text	0000009c __smakebuf_r
20401e98 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401368 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
20402fee  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401d36 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
20400dc2 g     F .text	00000298 _vfprintf_r
2040385a g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403cb2 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
2040386e g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
204023e6 g     F .text	0000002c __metal_interrupt_local_disable
20402336 g     F .text	00000018 __metal_interrupt_software_disable
20403c7e g     F .text	00000034 __metal_plic0_get_priority
20401a92 g     F .text	0000002c metal_uart_init
20403bb8 g     F .text	00000038 __metal_plic0_set_threshold
2040163e g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20403f20 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc06117          	auipc	sp,0x5fc06
2040008c:	b8c10113          	addi	sp,sp,-1140 # 80005c14 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00005297          	auipc	t0,0x5
204000b0:	44c28293          	addi	t0,t0,1100 # 204054f8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00005297          	auipc	t0,0x5
204000dc:	42028293          	addi	t0,t0,1056 # 204054f8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc00317          	auipc	t1,0x5fc00
20400110:	66430313          	addi	t1,t1,1636 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc05397          	auipc	t2,0x5fc05
20400118:	70038393          	addi	t2,t2,1792 # 80005814 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00001517          	auipc	a0,0x1
20400132:	6fa50513          	addi	a0,a0,1786 # 20401828 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	6b0010ef          	jal	ra,204017e6 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	726010ef          	jal	ra,20401860 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00005597          	auipc	a1,0x5
20400166:	03a58593          	addi	a1,a1,58 # 2040519c <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00005617          	auipc	a2,0x5
2040016e:	03660613          	addi	a2,a2,54 # 204051a0 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	688010ef          	jal	ra,204017fc <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	2069                	jal	2040021e <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:8

#include <stdio.h>


#define  mlen 1280
int main(void){
2040021e:	7179                	addi	sp,sp,-48
20400220:	d606                	sw	ra,44(sp)
20400222:	d422                	sw	s0,40(sp)
20400224:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:9
    printf("Hi");
20400226:	204057b7          	lui	a5,0x20405
2040022a:	08078513          	addi	a0,a5,128 # 20405080 <_exit+0x12>
2040022e:	223d                	jal	2040035c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:18
//    0x12fad895, 0x0934af66, 0x8922fade, 0x67e34ead,0};
    static unsigned resHW [mlen * 2+1] = {0};
    //unsigned prueba [1000] = {0};


    printf("Init SofftW \n");
20400230:	204057b7          	lui	a5,0x20405
20400234:	08478513          	addi	a0,a5,132 # 20405084 <_exit+0x16>
20400238:	2489                	jal	2040047a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:23
    unsigned start, end;
    unsigned HWcycles;


    int i = 0;
2040023a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:26


    unsigned rd = 0;
2040023e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:28
    // RoCC
    start = rdcycle();
20400242:	3f7d                	jal	20400200 <rdcycle>
20400244:	87aa                	mv	a5,a0
20400246:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:29
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
2040024a:	67e1                	lui	a5,0x18
2040024c:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:30
    asm volatile("fence"); // always add it, this instrucction waits till all memory acceses have finished
20400250:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:31
    ROCC_INSTRUCTION_DSS(0,rd,arrHW,resHW,0); // Destiny, Source, Source = xd = 1, xs1 = 1, xs2 = 1
20400254:	800007b7          	lui	a5,0x80000
20400258:	77c78793          	addi	a5,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffa368>
2040025c:	85be                	mv	a1,a5
2040025e:	800037b7          	lui	a5,0x80003
20400262:	f8078793          	addi	a5,a5,-128 # 80002f80 <metal_segment_heap_target_end+0xffffcb6c>
20400266:	863e                	mv	a2,a5
20400268:	00c5f50b          	0xc5f50b
2040026c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:33
    // 0 = Custom_opcode0 := 0b, rd = return value most be 1, rs1 = addr, rs2 = addr, func7 = 0
    asm volatile("fence" ::: "memory");
20400270:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:34
    printf("Second instruction \n");
20400274:	204057b7          	lui	a5,0x20405
20400278:	09478513          	addi	a0,a5,148 # 20405094 <_exit+0x26>
2040027c:	2afd                	jal	2040047a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:36

    asm volatile("fence"); // always add it, this instrucction waits till all memory acceses have finished
2040027e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:37
    ROCC_INSTRUCTION_DSS(0,rd,8,0,1); // Destiny, Source, Source = xd = 1, xs1 = 1, xs2 = 1
20400282:	45a1                	li	a1,8
20400284:	4601                	li	a2,0
20400286:	02c5f50b          	0x2c5f50b
2040028a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:39
    // 0 = custom0 , rd= destination, 2 message len , 0 from the other source, function 1 =
    asm volatile("fence" ::: "memory");
2040028e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:40
    printf("Third instruction \n");
20400292:	204057b7          	lui	a5,0x20405
20400296:	0a878513          	addi	a0,a5,168 # 204050a8 <_exit+0x3a>
2040029a:	22c5                	jal	2040047a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:42

    end = rdcycle();
2040029c:	3795                	jal	20400200 <rdcycle>
2040029e:	87aa                	mv	a5,a0
204002a0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:43
    HWcycles = end - start;
204002a4:	fe042703          	lw	a4,-32(s0)
204002a8:	fe442783          	lw	a5,-28(s0)
204002ac:	40f707b3          	sub	a5,a4,a5
204002b0:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:45

    printf("Hw finish %d \n", rd); // most be 2
204002b4:	fe842583          	lw	a1,-24(s0)
204002b8:	204057b7          	lui	a5,0x20405
204002bc:	0bc78513          	addi	a0,a5,188 # 204050bc <_exit+0x4e>
204002c0:	2871                	jal	2040035c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:46
    for(i = 0; i< mlen *2+1 ; i ++){
204002c2:	fe042623          	sw	zero,-20(s0)
204002c6:	a03d                	j	204002f4 <main+0xd6>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:47 (discriminator 3)
        printf("arrHW[%d]  =  %x \n", i, arrHW[i]);
204002c8:	800007b7          	lui	a5,0x80000
204002cc:	77c78713          	addi	a4,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffa368>
204002d0:	fec42783          	lw	a5,-20(s0)
204002d4:	078a                	slli	a5,a5,0x2
204002d6:	97ba                	add	a5,a5,a4
204002d8:	439c                	lw	a5,0(a5)
204002da:	863e                	mv	a2,a5
204002dc:	fec42583          	lw	a1,-20(s0)
204002e0:	204057b7          	lui	a5,0x20405
204002e4:	0cc78513          	addi	a0,a5,204 # 204050cc <_exit+0x5e>
204002e8:	2895                	jal	2040035c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:46 (discriminator 3)
    for(i = 0; i< mlen *2+1 ; i ++){
204002ea:	fec42783          	lw	a5,-20(s0)
204002ee:	0785                	addi	a5,a5,1
204002f0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:46 (discriminator 1)
204002f4:	fec42703          	lw	a4,-20(s0)
204002f8:	6785                	lui	a5,0x1
204002fa:	a0078793          	addi	a5,a5,-1536 # a00 <__heap_size+0x200>
204002fe:	fce7d5e3          	bge	a5,a4,204002c8 <main+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:49
    }
    for(i = 0; i<mlen *2+1; i ++){
20400302:	fe042623          	sw	zero,-20(s0)
20400306:	a03d                	j	20400334 <main+0x116>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:50 (discriminator 3)
        printf("resHW[%d]  =  %x \n", i, resHW[i]);
20400308:	800037b7          	lui	a5,0x80003
2040030c:	f8078713          	addi	a4,a5,-128 # 80002f80 <metal_segment_heap_target_end+0xffffcb6c>
20400310:	fec42783          	lw	a5,-20(s0)
20400314:	078a                	slli	a5,a5,0x2
20400316:	97ba                	add	a5,a5,a4
20400318:	439c                	lw	a5,0(a5)
2040031a:	863e                	mv	a2,a5
2040031c:	fec42583          	lw	a1,-20(s0)
20400320:	204057b7          	lui	a5,0x20405
20400324:	0e078513          	addi	a0,a5,224 # 204050e0 <_exit+0x72>
20400328:	2815                	jal	2040035c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:49 (discriminator 3)
    for(i = 0; i<mlen *2+1; i ++){
2040032a:	fec42783          	lw	a5,-20(s0)
2040032e:	0785                	addi	a5,a5,1
20400330:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:49 (discriminator 1)
20400334:	fec42703          	lw	a4,-20(s0)
20400338:	6785                	lui	a5,0x1
2040033a:	a0078793          	addi	a5,a5,-1536 # a00 <__heap_size+0x200>
2040033e:	fce7d5e3          	bge	a5,a4,20400308 <main+0xea>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:52
    }
    printf("cycles %d \n", HWcycles);
20400342:	fdc42583          	lw	a1,-36(s0)
20400346:	204057b7          	lui	a5,0x20405
2040034a:	0f478513          	addi	a0,a5,244 # 204050f4 <_exit+0x86>
2040034e:	2039                	jal	2040035c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:57

//    for(i = 0; i<1000; i ++){
//        printf("prueba[%d]  =  %x \n", i, prueba[i]);
//    }
    return 0;
20400350:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC2/MyRoCC2.c:58
20400352:	853e                	mv	a0,a5
20400354:	50b2                	lw	ra,44(sp)
20400356:	5422                	lw	s0,40(sp)
20400358:	6145                	addi	sp,sp,48
2040035a:	8082                	ret

2040035c <iprintf>:
printf():
2040035c:	7139                	addi	sp,sp,-64
2040035e:	da3e                	sw	a5,52(sp)
20400360:	d22e                	sw	a1,36(sp)
20400362:	d432                	sw	a2,40(sp)
20400364:	d636                	sw	a3,44(sp)
20400366:	d83a                	sw	a4,48(sp)
20400368:	dc42                	sw	a6,56(sp)
2040036a:	de46                	sw	a7,60(sp)
2040036c:	5fc00797          	auipc	a5,0x5fc00
20400370:	3dc78793          	addi	a5,a5,988 # 80000748 <_impure_ptr>
20400374:	cc22                	sw	s0,24(sp)
20400376:	4380                	lw	s0,0(a5)
20400378:	ca26                	sw	s1,20(sp)
2040037a:	ce06                	sw	ra,28(sp)
2040037c:	84aa                	mv	s1,a0
2040037e:	c409                	beqz	s0,20400388 <iprintf+0x2c>
20400380:	4c1c                	lw	a5,24(s0)
20400382:	e399                	bnez	a5,20400388 <iprintf+0x2c>
20400384:	8522                	mv	a0,s0
20400386:	2b1d                	jal	204008bc <__sinit>
20400388:	440c                	lw	a1,8(s0)
2040038a:	1054                	addi	a3,sp,36
2040038c:	8626                	mv	a2,s1
2040038e:	8522                	mv	a0,s0
20400390:	c636                	sw	a3,12(sp)
20400392:	231000ef          	jal	ra,20400dc2 <_vfiprintf_r>
20400396:	40f2                	lw	ra,28(sp)
20400398:	4462                	lw	s0,24(sp)
2040039a:	44d2                	lw	s1,20(sp)
2040039c:	6121                	addi	sp,sp,64
2040039e:	8082                	ret

204003a0 <_puts_r>:
_puts_r():
204003a0:	1101                	addi	sp,sp,-32
204003a2:	ca26                	sw	s1,20(sp)
204003a4:	c84a                	sw	s2,16(sp)
204003a6:	ce06                	sw	ra,28(sp)
204003a8:	cc22                	sw	s0,24(sp)
204003aa:	c64e                	sw	s3,12(sp)
204003ac:	c452                	sw	s4,8(sp)
204003ae:	84aa                	mv	s1,a0
204003b0:	892e                	mv	s2,a1
204003b2:	c501                	beqz	a0,204003ba <_puts_r+0x1a>
204003b4:	4d1c                	lw	a5,24(a0)
204003b6:	e391                	bnez	a5,204003ba <_puts_r+0x1a>
204003b8:	2311                	jal	204008bc <__sinit>
204003ba:	4c9c                	lw	a5,24(s1)
204003bc:	4480                	lw	s0,8(s1)
204003be:	e399                	bnez	a5,204003c4 <_puts_r+0x24>
204003c0:	8526                	mv	a0,s1
204003c2:	29ed                	jal	204008bc <__sinit>
204003c4:	00005797          	auipc	a5,0x5
204003c8:	d5c78793          	addi	a5,a5,-676 # 20405120 <__sf_fake_stdin>
204003cc:	02f41c63          	bne	s0,a5,20400404 <_puts_r+0x64>
204003d0:	40c0                	lw	s0,4(s1)
204003d2:	00c45783          	lhu	a5,12(s0)
204003d6:	8ba1                	andi	a5,a5,8
204003d8:	c7b1                	beqz	a5,20400424 <_puts_r+0x84>
204003da:	481c                	lw	a5,16(s0)
204003dc:	c7a1                	beqz	a5,20400424 <_puts_r+0x84>
204003de:	59fd                	li	s3,-1
204003e0:	4a29                	li	s4,10
204003e2:	441c                	lw	a5,8(s0)
204003e4:	00094583          	lbu	a1,0(s2)
204003e8:	17fd                	addi	a5,a5,-1
204003ea:	e9b1                	bnez	a1,2040043e <_puts_r+0x9e>
204003ec:	c41c                	sw	a5,8(s0)
204003ee:	0607de63          	bgez	a5,2040046a <_puts_r+0xca>
204003f2:	8622                	mv	a2,s0
204003f4:	45a9                	li	a1,10
204003f6:	8526                	mv	a0,s1
204003f8:	2841                	jal	20400488 <__swbuf_r>
204003fa:	57fd                	li	a5,-1
204003fc:	02f50863          	beq	a0,a5,2040042c <_puts_r+0x8c>
20400400:	4529                	li	a0,10
20400402:	a035                	j	2040042e <_puts_r+0x8e>
20400404:	00005797          	auipc	a5,0x5
20400408:	d3c78793          	addi	a5,a5,-708 # 20405140 <__sf_fake_stdout>
2040040c:	00f41463          	bne	s0,a5,20400414 <_puts_r+0x74>
20400410:	4480                	lw	s0,8(s1)
20400412:	b7c1                	j	204003d2 <_puts_r+0x32>
20400414:	00005797          	auipc	a5,0x5
20400418:	cec78793          	addi	a5,a5,-788 # 20405100 <__sf_fake_stderr>
2040041c:	faf41be3          	bne	s0,a5,204003d2 <_puts_r+0x32>
20400420:	44c0                	lw	s0,12(s1)
20400422:	bf45                	j	204003d2 <_puts_r+0x32>
20400424:	85a2                	mv	a1,s0
20400426:	8526                	mv	a0,s1
20400428:	2205                	jal	20400548 <__swsetup_r>
2040042a:	d955                	beqz	a0,204003de <_puts_r+0x3e>
2040042c:	557d                	li	a0,-1
2040042e:	40f2                	lw	ra,28(sp)
20400430:	4462                	lw	s0,24(sp)
20400432:	44d2                	lw	s1,20(sp)
20400434:	4942                	lw	s2,16(sp)
20400436:	49b2                	lw	s3,12(sp)
20400438:	4a22                	lw	s4,8(sp)
2040043a:	6105                	addi	sp,sp,32
2040043c:	8082                	ret
2040043e:	c41c                	sw	a5,8(s0)
20400440:	0905                	addi	s2,s2,1
20400442:	0007d763          	bgez	a5,20400450 <_puts_r+0xb0>
20400446:	4c18                	lw	a4,24(s0)
20400448:	00e7cb63          	blt	a5,a4,2040045e <_puts_r+0xbe>
2040044c:	01458963          	beq	a1,s4,2040045e <_puts_r+0xbe>
20400450:	401c                	lw	a5,0(s0)
20400452:	00178713          	addi	a4,a5,1
20400456:	c018                	sw	a4,0(s0)
20400458:	00b78023          	sb	a1,0(a5)
2040045c:	b759                	j	204003e2 <_puts_r+0x42>
2040045e:	8622                	mv	a2,s0
20400460:	8526                	mv	a0,s1
20400462:	201d                	jal	20400488 <__swbuf_r>
20400464:	f7351fe3          	bne	a0,s3,204003e2 <_puts_r+0x42>
20400468:	b7d1                	j	2040042c <_puts_r+0x8c>
2040046a:	401c                	lw	a5,0(s0)
2040046c:	00178713          	addi	a4,a5,1
20400470:	c018                	sw	a4,0(s0)
20400472:	4729                	li	a4,10
20400474:	00e78023          	sb	a4,0(a5)
20400478:	b761                	j	20400400 <_puts_r+0x60>

2040047a <puts>:
puts():
2040047a:	5fc00797          	auipc	a5,0x5fc00
2040047e:	2ce78793          	addi	a5,a5,718 # 80000748 <_impure_ptr>
20400482:	85aa                	mv	a1,a0
20400484:	4388                	lw	a0,0(a5)
20400486:	bf29                	j	204003a0 <_puts_r>

20400488 <__swbuf_r>:
__swbuf_r():
20400488:	1101                	addi	sp,sp,-32
2040048a:	cc22                	sw	s0,24(sp)
2040048c:	ca26                	sw	s1,20(sp)
2040048e:	c84a                	sw	s2,16(sp)
20400490:	ce06                	sw	ra,28(sp)
20400492:	c64e                	sw	s3,12(sp)
20400494:	84aa                	mv	s1,a0
20400496:	892e                	mv	s2,a1
20400498:	8432                	mv	s0,a2
2040049a:	c501                	beqz	a0,204004a2 <__swbuf_r+0x1a>
2040049c:	4d1c                	lw	a5,24(a0)
2040049e:	e391                	bnez	a5,204004a2 <__swbuf_r+0x1a>
204004a0:	2931                	jal	204008bc <__sinit>
204004a2:	00005797          	auipc	a5,0x5
204004a6:	c7e78793          	addi	a5,a5,-898 # 20405120 <__sf_fake_stdin>
204004aa:	06f41963          	bne	s0,a5,2040051c <__swbuf_r+0x94>
204004ae:	40c0                	lw	s0,4(s1)
204004b0:	4c1c                	lw	a5,24(s0)
204004b2:	c41c                	sw	a5,8(s0)
204004b4:	00c45783          	lhu	a5,12(s0)
204004b8:	8ba1                	andi	a5,a5,8
204004ba:	c3c9                	beqz	a5,2040053c <__swbuf_r+0xb4>
204004bc:	481c                	lw	a5,16(s0)
204004be:	cfbd                	beqz	a5,2040053c <__swbuf_r+0xb4>
204004c0:	481c                	lw	a5,16(s0)
204004c2:	4008                	lw	a0,0(s0)
204004c4:	0ff97993          	andi	s3,s2,255
204004c8:	0ff97913          	andi	s2,s2,255
204004cc:	8d1d                	sub	a0,a0,a5
204004ce:	485c                	lw	a5,20(s0)
204004d0:	00f54663          	blt	a0,a5,204004dc <__swbuf_r+0x54>
204004d4:	85a2                	mv	a1,s0
204004d6:	8526                	mv	a0,s1
204004d8:	24e9                	jal	204007a2 <_fflush_r>
204004da:	e52d                	bnez	a0,20400544 <__swbuf_r+0xbc>
204004dc:	441c                	lw	a5,8(s0)
204004de:	0505                	addi	a0,a0,1
204004e0:	17fd                	addi	a5,a5,-1
204004e2:	c41c                	sw	a5,8(s0)
204004e4:	401c                	lw	a5,0(s0)
204004e6:	00178713          	addi	a4,a5,1
204004ea:	c018                	sw	a4,0(s0)
204004ec:	01378023          	sb	s3,0(a5)
204004f0:	485c                	lw	a5,20(s0)
204004f2:	00a78963          	beq	a5,a0,20400504 <__swbuf_r+0x7c>
204004f6:	00c45783          	lhu	a5,12(s0)
204004fa:	8b85                	andi	a5,a5,1
204004fc:	cb81                	beqz	a5,2040050c <__swbuf_r+0x84>
204004fe:	47a9                	li	a5,10
20400500:	00f91663          	bne	s2,a5,2040050c <__swbuf_r+0x84>
20400504:	85a2                	mv	a1,s0
20400506:	8526                	mv	a0,s1
20400508:	2c69                	jal	204007a2 <_fflush_r>
2040050a:	ed0d                	bnez	a0,20400544 <__swbuf_r+0xbc>
2040050c:	40f2                	lw	ra,28(sp)
2040050e:	4462                	lw	s0,24(sp)
20400510:	854a                	mv	a0,s2
20400512:	44d2                	lw	s1,20(sp)
20400514:	4942                	lw	s2,16(sp)
20400516:	49b2                	lw	s3,12(sp)
20400518:	6105                	addi	sp,sp,32
2040051a:	8082                	ret
2040051c:	00005797          	auipc	a5,0x5
20400520:	c2478793          	addi	a5,a5,-988 # 20405140 <__sf_fake_stdout>
20400524:	00f41463          	bne	s0,a5,2040052c <__swbuf_r+0xa4>
20400528:	4480                	lw	s0,8(s1)
2040052a:	b759                	j	204004b0 <__swbuf_r+0x28>
2040052c:	00005797          	auipc	a5,0x5
20400530:	bd478793          	addi	a5,a5,-1068 # 20405100 <__sf_fake_stderr>
20400534:	f6f41ee3          	bne	s0,a5,204004b0 <__swbuf_r+0x28>
20400538:	44c0                	lw	s0,12(s1)
2040053a:	bf9d                	j	204004b0 <__swbuf_r+0x28>
2040053c:	85a2                	mv	a1,s0
2040053e:	8526                	mv	a0,s1
20400540:	2021                	jal	20400548 <__swsetup_r>
20400542:	dd3d                	beqz	a0,204004c0 <__swbuf_r+0x38>
20400544:	597d                	li	s2,-1
20400546:	b7d9                	j	2040050c <__swbuf_r+0x84>

20400548 <__swsetup_r>:
__swsetup_r():
20400548:	1141                	addi	sp,sp,-16
2040054a:	5fc00797          	auipc	a5,0x5fc00
2040054e:	1fe78793          	addi	a5,a5,510 # 80000748 <_impure_ptr>
20400552:	c226                	sw	s1,4(sp)
20400554:	4384                	lw	s1,0(a5)
20400556:	c422                	sw	s0,8(sp)
20400558:	c04a                	sw	s2,0(sp)
2040055a:	c606                	sw	ra,12(sp)
2040055c:	892a                	mv	s2,a0
2040055e:	842e                	mv	s0,a1
20400560:	c489                	beqz	s1,2040056a <__swsetup_r+0x22>
20400562:	4c9c                	lw	a5,24(s1)
20400564:	e399                	bnez	a5,2040056a <__swsetup_r+0x22>
20400566:	8526                	mv	a0,s1
20400568:	2e91                	jal	204008bc <__sinit>
2040056a:	00005797          	auipc	a5,0x5
2040056e:	bb678793          	addi	a5,a5,-1098 # 20405120 <__sf_fake_stdin>
20400572:	02f41c63          	bne	s0,a5,204005aa <__swsetup_r+0x62>
20400576:	40c0                	lw	s0,4(s1)
20400578:	00c41703          	lh	a4,12(s0)
2040057c:	01071793          	slli	a5,a4,0x10
20400580:	83c1                	srli	a5,a5,0x10
20400582:	0087f693          	andi	a3,a5,8
20400586:	eeb5                	bnez	a3,20400602 <__swsetup_r+0xba>
20400588:	0107f693          	andi	a3,a5,16
2040058c:	ee9d                	bnez	a3,204005ca <__swsetup_r+0x82>
2040058e:	47a5                	li	a5,9
20400590:	00f92023          	sw	a5,0(s2)
20400594:	04076713          	ori	a4,a4,64
20400598:	00e41623          	sh	a4,12(s0)
2040059c:	557d                	li	a0,-1
2040059e:	40b2                	lw	ra,12(sp)
204005a0:	4422                	lw	s0,8(sp)
204005a2:	4492                	lw	s1,4(sp)
204005a4:	4902                	lw	s2,0(sp)
204005a6:	0141                	addi	sp,sp,16
204005a8:	8082                	ret
204005aa:	00005797          	auipc	a5,0x5
204005ae:	b9678793          	addi	a5,a5,-1130 # 20405140 <__sf_fake_stdout>
204005b2:	00f41463          	bne	s0,a5,204005ba <__swsetup_r+0x72>
204005b6:	4480                	lw	s0,8(s1)
204005b8:	b7c1                	j	20400578 <__swsetup_r+0x30>
204005ba:	00005797          	auipc	a5,0x5
204005be:	b4678793          	addi	a5,a5,-1210 # 20405100 <__sf_fake_stderr>
204005c2:	faf41be3          	bne	s0,a5,20400578 <__swsetup_r+0x30>
204005c6:	44c0                	lw	s0,12(s1)
204005c8:	bf45                	j	20400578 <__swsetup_r+0x30>
204005ca:	8b91                	andi	a5,a5,4
204005cc:	c78d                	beqz	a5,204005f6 <__swsetup_r+0xae>
204005ce:	584c                	lw	a1,52(s0)
204005d0:	c989                	beqz	a1,204005e2 <__swsetup_r+0x9a>
204005d2:	04440793          	addi	a5,s0,68
204005d6:	00f58463          	beq	a1,a5,204005de <__swsetup_r+0x96>
204005da:	854a                	mv	a0,s2
204005dc:	2bc5                	jal	20400bcc <_free_r>
204005de:	02042a23          	sw	zero,52(s0)
204005e2:	00c45783          	lhu	a5,12(s0)
204005e6:	00042223          	sw	zero,4(s0)
204005ea:	fdb7f793          	andi	a5,a5,-37
204005ee:	00f41623          	sh	a5,12(s0)
204005f2:	481c                	lw	a5,16(s0)
204005f4:	c01c                	sw	a5,0(s0)
204005f6:	00c45783          	lhu	a5,12(s0)
204005fa:	0087e793          	ori	a5,a5,8
204005fe:	00f41623          	sh	a5,12(s0)
20400602:	481c                	lw	a5,16(s0)
20400604:	ef81                	bnez	a5,2040061c <__swsetup_r+0xd4>
20400606:	00c45783          	lhu	a5,12(s0)
2040060a:	20000713          	li	a4,512
2040060e:	2807f793          	andi	a5,a5,640
20400612:	00e78563          	beq	a5,a4,2040061c <__swsetup_r+0xd4>
20400616:	85a2                	mv	a1,s0
20400618:	854a                	mv	a0,s2
2040061a:	21bd                	jal	20400a88 <__smakebuf_r>
2040061c:	00c45783          	lhu	a5,12(s0)
20400620:	0017f713          	andi	a4,a5,1
20400624:	c705                	beqz	a4,2040064c <__swsetup_r+0x104>
20400626:	485c                	lw	a5,20(s0)
20400628:	00042423          	sw	zero,8(s0)
2040062c:	40f007b3          	neg	a5,a5
20400630:	cc1c                	sw	a5,24(s0)
20400632:	481c                	lw	a5,16(s0)
20400634:	4501                	li	a0,0
20400636:	f7a5                	bnez	a5,2040059e <__swsetup_r+0x56>
20400638:	00c41783          	lh	a5,12(s0)
2040063c:	0807f713          	andi	a4,a5,128
20400640:	df39                	beqz	a4,2040059e <__swsetup_r+0x56>
20400642:	0407e793          	ori	a5,a5,64
20400646:	00f41623          	sh	a5,12(s0)
2040064a:	bf89                	j	2040059c <__swsetup_r+0x54>
2040064c:	8b89                	andi	a5,a5,2
2040064e:	4701                	li	a4,0
20400650:	e391                	bnez	a5,20400654 <__swsetup_r+0x10c>
20400652:	4858                	lw	a4,20(s0)
20400654:	c418                	sw	a4,8(s0)
20400656:	bff1                	j	20400632 <__swsetup_r+0xea>

20400658 <__sflush_r>:
__sflush_r():
20400658:	00c5d783          	lhu	a5,12(a1)
2040065c:	1101                	addi	sp,sp,-32
2040065e:	cc22                	sw	s0,24(sp)
20400660:	ca26                	sw	s1,20(sp)
20400662:	ce06                	sw	ra,28(sp)
20400664:	c84a                	sw	s2,16(sp)
20400666:	c64e                	sw	s3,12(sp)
20400668:	0087f713          	andi	a4,a5,8
2040066c:	84aa                	mv	s1,a0
2040066e:	842e                	mv	s0,a1
20400670:	e765                	bnez	a4,20400758 <__sflush_r+0x100>
20400672:	41d8                	lw	a4,4(a1)
20400674:	00e04763          	bgtz	a4,20400682 <__sflush_r+0x2a>
20400678:	41b8                	lw	a4,64(a1)
2040067a:	00e04463          	bgtz	a4,20400682 <__sflush_r+0x2a>
2040067e:	4501                	li	a0,0
20400680:	a0c1                	j	20400740 <__sflush_r+0xe8>
20400682:	5458                	lw	a4,44(s0)
20400684:	df6d                	beqz	a4,2040067e <__sflush_r+0x26>
20400686:	0004a903          	lw	s2,0(s1)
2040068a:	01379693          	slli	a3,a5,0x13
2040068e:	0004a023          	sw	zero,0(s1)
20400692:	0606de63          	bgez	a3,2040070e <__sflush_r+0xb6>
20400696:	4868                	lw	a0,84(s0)
20400698:	00c45783          	lhu	a5,12(s0)
2040069c:	8b91                	andi	a5,a5,4
2040069e:	c799                	beqz	a5,204006ac <__sflush_r+0x54>
204006a0:	405c                	lw	a5,4(s0)
204006a2:	8d1d                	sub	a0,a0,a5
204006a4:	585c                	lw	a5,52(s0)
204006a6:	c399                	beqz	a5,204006ac <__sflush_r+0x54>
204006a8:	403c                	lw	a5,64(s0)
204006aa:	8d1d                	sub	a0,a0,a5
204006ac:	545c                	lw	a5,44(s0)
204006ae:	500c                	lw	a1,32(s0)
204006b0:	862a                	mv	a2,a0
204006b2:	4681                	li	a3,0
204006b4:	8526                	mv	a0,s1
204006b6:	9782                	jalr	a5
204006b8:	57fd                	li	a5,-1
204006ba:	00c45703          	lhu	a4,12(s0)
204006be:	00f51d63          	bne	a0,a5,204006d8 <__sflush_r+0x80>
204006c2:	4094                	lw	a3,0(s1)
204006c4:	47f5                	li	a5,29
204006c6:	08d7e463          	bltu	a5,a3,2040074e <__sflush_r+0xf6>
204006ca:	204007b7          	lui	a5,0x20400
204006ce:	0785                	addi	a5,a5,1
204006d0:	00d7d7b3          	srl	a5,a5,a3
204006d4:	8b85                	andi	a5,a5,1
204006d6:	cfa5                	beqz	a5,2040074e <__sflush_r+0xf6>
204006d8:	481c                	lw	a5,16(s0)
204006da:	00042223          	sw	zero,4(s0)
204006de:	c01c                	sw	a5,0(s0)
204006e0:	01371793          	slli	a5,a4,0x13
204006e4:	0007d863          	bgez	a5,204006f4 <__sflush_r+0x9c>
204006e8:	57fd                	li	a5,-1
204006ea:	00f51463          	bne	a0,a5,204006f2 <__sflush_r+0x9a>
204006ee:	409c                	lw	a5,0(s1)
204006f0:	e391                	bnez	a5,204006f4 <__sflush_r+0x9c>
204006f2:	c868                	sw	a0,84(s0)
204006f4:	584c                	lw	a1,52(s0)
204006f6:	0124a023          	sw	s2,0(s1)
204006fa:	d1d1                	beqz	a1,2040067e <__sflush_r+0x26>
204006fc:	04440793          	addi	a5,s0,68
20400700:	00f58463          	beq	a1,a5,20400708 <__sflush_r+0xb0>
20400704:	8526                	mv	a0,s1
20400706:	21d9                	jal	20400bcc <_free_r>
20400708:	02042a23          	sw	zero,52(s0)
2040070c:	bf8d                	j	2040067e <__sflush_r+0x26>
2040070e:	500c                	lw	a1,32(s0)
20400710:	4685                	li	a3,1
20400712:	4601                	li	a2,0
20400714:	8526                	mv	a0,s1
20400716:	9702                	jalr	a4
20400718:	57fd                	li	a5,-1
2040071a:	f6f51fe3          	bne	a0,a5,20400698 <__sflush_r+0x40>
2040071e:	409c                	lw	a5,0(s1)
20400720:	dfa5                	beqz	a5,20400698 <__sflush_r+0x40>
20400722:	4775                	li	a4,29
20400724:	00e78563          	beq	a5,a4,2040072e <__sflush_r+0xd6>
20400728:	4759                	li	a4,22
2040072a:	00e79563          	bne	a5,a4,20400734 <__sflush_r+0xdc>
2040072e:	0124a023          	sw	s2,0(s1)
20400732:	b7b1                	j	2040067e <__sflush_r+0x26>
20400734:	00c45783          	lhu	a5,12(s0)
20400738:	0407e793          	ori	a5,a5,64
2040073c:	00f41623          	sh	a5,12(s0)
20400740:	40f2                	lw	ra,28(sp)
20400742:	4462                	lw	s0,24(sp)
20400744:	44d2                	lw	s1,20(sp)
20400746:	4942                	lw	s2,16(sp)
20400748:	49b2                	lw	s3,12(sp)
2040074a:	6105                	addi	sp,sp,32
2040074c:	8082                	ret
2040074e:	04076713          	ori	a4,a4,64
20400752:	00e41623          	sh	a4,12(s0)
20400756:	b7ed                	j	20400740 <__sflush_r+0xe8>
20400758:	0105a983          	lw	s3,16(a1)
2040075c:	f20981e3          	beqz	s3,2040067e <__sflush_r+0x26>
20400760:	0005a903          	lw	s2,0(a1)
20400764:	8b8d                	andi	a5,a5,3
20400766:	0135a023          	sw	s3,0(a1)
2040076a:	41390933          	sub	s2,s2,s3
2040076e:	4701                	li	a4,0
20400770:	e391                	bnez	a5,20400774 <__sflush_r+0x11c>
20400772:	49d8                	lw	a4,20(a1)
20400774:	c418                	sw	a4,8(s0)
20400776:	f12054e3          	blez	s2,2040067e <__sflush_r+0x26>
2040077a:	541c                	lw	a5,40(s0)
2040077c:	500c                	lw	a1,32(s0)
2040077e:	86ca                	mv	a3,s2
20400780:	864e                	mv	a2,s3
20400782:	8526                	mv	a0,s1
20400784:	9782                	jalr	a5
20400786:	00a04a63          	bgtz	a0,2040079a <__sflush_r+0x142>
2040078a:	00c45783          	lhu	a5,12(s0)
2040078e:	557d                	li	a0,-1
20400790:	0407e793          	ori	a5,a5,64
20400794:	00f41623          	sh	a5,12(s0)
20400798:	b765                	j	20400740 <__sflush_r+0xe8>
2040079a:	99aa                	add	s3,s3,a0
2040079c:	40a90933          	sub	s2,s2,a0
204007a0:	bfd9                	j	20400776 <__sflush_r+0x11e>

204007a2 <_fflush_r>:
_fflush_r():
204007a2:	499c                	lw	a5,16(a1)
204007a4:	cfb9                	beqz	a5,20400802 <_fflush_r+0x60>
204007a6:	1101                	addi	sp,sp,-32
204007a8:	cc22                	sw	s0,24(sp)
204007aa:	ce06                	sw	ra,28(sp)
204007ac:	842a                	mv	s0,a0
204007ae:	c511                	beqz	a0,204007ba <_fflush_r+0x18>
204007b0:	4d1c                	lw	a5,24(a0)
204007b2:	e781                	bnez	a5,204007ba <_fflush_r+0x18>
204007b4:	c62e                	sw	a1,12(sp)
204007b6:	2219                	jal	204008bc <__sinit>
204007b8:	45b2                	lw	a1,12(sp)
204007ba:	00005797          	auipc	a5,0x5
204007be:	96678793          	addi	a5,a5,-1690 # 20405120 <__sf_fake_stdin>
204007c2:	00f59b63          	bne	a1,a5,204007d8 <_fflush_r+0x36>
204007c6:	404c                	lw	a1,4(s0)
204007c8:	00c59783          	lh	a5,12(a1)
204007cc:	c795                	beqz	a5,204007f8 <_fflush_r+0x56>
204007ce:	8522                	mv	a0,s0
204007d0:	4462                	lw	s0,24(sp)
204007d2:	40f2                	lw	ra,28(sp)
204007d4:	6105                	addi	sp,sp,32
204007d6:	b549                	j	20400658 <__sflush_r>
204007d8:	00005797          	auipc	a5,0x5
204007dc:	96878793          	addi	a5,a5,-1688 # 20405140 <__sf_fake_stdout>
204007e0:	00f59463          	bne	a1,a5,204007e8 <_fflush_r+0x46>
204007e4:	440c                	lw	a1,8(s0)
204007e6:	b7cd                	j	204007c8 <_fflush_r+0x26>
204007e8:	00005797          	auipc	a5,0x5
204007ec:	91878793          	addi	a5,a5,-1768 # 20405100 <__sf_fake_stderr>
204007f0:	fcf59ce3          	bne	a1,a5,204007c8 <_fflush_r+0x26>
204007f4:	444c                	lw	a1,12(s0)
204007f6:	bfc9                	j	204007c8 <_fflush_r+0x26>
204007f8:	40f2                	lw	ra,28(sp)
204007fa:	4462                	lw	s0,24(sp)
204007fc:	4501                	li	a0,0
204007fe:	6105                	addi	sp,sp,32
20400800:	8082                	ret
20400802:	4501                	li	a0,0
20400804:	8082                	ret

20400806 <std>:
std():
20400806:	1141                	addi	sp,sp,-16
20400808:	c422                	sw	s0,8(sp)
2040080a:	c606                	sw	ra,12(sp)
2040080c:	842a                	mv	s0,a0
2040080e:	00b51623          	sh	a1,12(a0)
20400812:	00c51723          	sh	a2,14(a0)
20400816:	00052023          	sw	zero,0(a0)
2040081a:	00052223          	sw	zero,4(a0)
2040081e:	00052423          	sw	zero,8(a0)
20400822:	06052223          	sw	zero,100(a0)
20400826:	00052823          	sw	zero,16(a0)
2040082a:	00052a23          	sw	zero,20(a0)
2040082e:	00052c23          	sw	zero,24(a0)
20400832:	4621                	li	a2,8
20400834:	4581                	li	a1,0
20400836:	05c50513          	addi	a0,a0,92
2040083a:	24ed                	jal	20400b24 <memset>
2040083c:	00001797          	auipc	a5,0x1
20400840:	84e78793          	addi	a5,a5,-1970 # 2040108a <__sread>
20400844:	d05c                	sw	a5,36(s0)
20400846:	00001797          	auipc	a5,0x1
2040084a:	87478793          	addi	a5,a5,-1932 # 204010ba <__swrite>
2040084e:	d41c                	sw	a5,40(s0)
20400850:	00001797          	auipc	a5,0x1
20400854:	8b878793          	addi	a5,a5,-1864 # 20401108 <__sseek>
20400858:	d45c                	sw	a5,44(s0)
2040085a:	00001797          	auipc	a5,0x1
2040085e:	8e478793          	addi	a5,a5,-1820 # 2040113e <__sclose>
20400862:	d000                	sw	s0,32(s0)
20400864:	d81c                	sw	a5,48(s0)
20400866:	40b2                	lw	ra,12(sp)
20400868:	4422                	lw	s0,8(sp)
2040086a:	0141                	addi	sp,sp,16
2040086c:	8082                	ret

2040086e <_cleanup_r>:
_cleanup_r():
2040086e:	00000597          	auipc	a1,0x0
20400872:	f3458593          	addi	a1,a1,-204 # 204007a2 <_fflush_r>
20400876:	a2b9                	j	204009c4 <_fwalk_reent>

20400878 <__sfmoreglue>:
__sfmoreglue():
20400878:	1141                	addi	sp,sp,-16
2040087a:	c226                	sw	s1,4(sp)
2040087c:	06800613          	li	a2,104
20400880:	fff58493          	addi	s1,a1,-1
20400884:	02c484b3          	mul	s1,s1,a2
20400888:	c04a                	sw	s2,0(sp)
2040088a:	892e                	mv	s2,a1
2040088c:	c422                	sw	s0,8(sp)
2040088e:	c606                	sw	ra,12(sp)
20400890:	07448593          	addi	a1,s1,116
20400894:	26d5                	jal	20400c78 <_malloc_r>
20400896:	842a                	mv	s0,a0
20400898:	c919                	beqz	a0,204008ae <__sfmoreglue+0x36>
2040089a:	00052023          	sw	zero,0(a0)
2040089e:	01252223          	sw	s2,4(a0)
204008a2:	0531                	addi	a0,a0,12
204008a4:	c408                	sw	a0,8(s0)
204008a6:	06848613          	addi	a2,s1,104
204008aa:	4581                	li	a1,0
204008ac:	2ca5                	jal	20400b24 <memset>
204008ae:	8522                	mv	a0,s0
204008b0:	40b2                	lw	ra,12(sp)
204008b2:	4422                	lw	s0,8(sp)
204008b4:	4492                	lw	s1,4(sp)
204008b6:	4902                	lw	s2,0(sp)
204008b8:	0141                	addi	sp,sp,16
204008ba:	8082                	ret

204008bc <__sinit>:
__sinit():
204008bc:	4d1c                	lw	a5,24(a0)
204008be:	e3bd                	bnez	a5,20400924 <__sinit+0x68>
204008c0:	1141                	addi	sp,sp,-16
204008c2:	c606                	sw	ra,12(sp)
204008c4:	c422                	sw	s0,8(sp)
204008c6:	00000797          	auipc	a5,0x0
204008ca:	fa878793          	addi	a5,a5,-88 # 2040086e <_cleanup_r>
204008ce:	d51c                	sw	a5,40(a0)
204008d0:	5fc00797          	auipc	a5,0x5fc00
204008d4:	e7c78793          	addi	a5,a5,-388 # 8000074c <_global_impure_ptr>
204008d8:	439c                	lw	a5,0(a5)
204008da:	04052423          	sw	zero,72(a0)
204008de:	04052623          	sw	zero,76(a0)
204008e2:	04052823          	sw	zero,80(a0)
204008e6:	00f51463          	bne	a0,a5,204008ee <__sinit+0x32>
204008ea:	4785                	li	a5,1
204008ec:	cd1c                	sw	a5,24(a0)
204008ee:	842a                	mv	s0,a0
204008f0:	281d                	jal	20400926 <__sfp>
204008f2:	c048                	sw	a0,4(s0)
204008f4:	8522                	mv	a0,s0
204008f6:	2805                	jal	20400926 <__sfp>
204008f8:	c408                	sw	a0,8(s0)
204008fa:	8522                	mv	a0,s0
204008fc:	202d                	jal	20400926 <__sfp>
204008fe:	c448                	sw	a0,12(s0)
20400900:	4048                	lw	a0,4(s0)
20400902:	4601                	li	a2,0
20400904:	4591                	li	a1,4
20400906:	3701                	jal	20400806 <std>
20400908:	4408                	lw	a0,8(s0)
2040090a:	4605                	li	a2,1
2040090c:	45a5                	li	a1,9
2040090e:	3de5                	jal	20400806 <std>
20400910:	4448                	lw	a0,12(s0)
20400912:	4609                	li	a2,2
20400914:	45c9                	li	a1,18
20400916:	3dc5                	jal	20400806 <std>
20400918:	4785                	li	a5,1
2040091a:	cc1c                	sw	a5,24(s0)
2040091c:	40b2                	lw	ra,12(sp)
2040091e:	4422                	lw	s0,8(sp)
20400920:	0141                	addi	sp,sp,16
20400922:	8082                	ret
20400924:	8082                	ret

20400926 <__sfp>:
__sfp():
20400926:	1141                	addi	sp,sp,-16
20400928:	5fc00797          	auipc	a5,0x5fc00
2040092c:	e2478793          	addi	a5,a5,-476 # 8000074c <_global_impure_ptr>
20400930:	c226                	sw	s1,4(sp)
20400932:	4384                	lw	s1,0(a5)
20400934:	c04a                	sw	s2,0(sp)
20400936:	c606                	sw	ra,12(sp)
20400938:	4c9c                	lw	a5,24(s1)
2040093a:	c422                	sw	s0,8(sp)
2040093c:	892a                	mv	s2,a0
2040093e:	e399                	bnez	a5,20400944 <__sfp+0x1e>
20400940:	8526                	mv	a0,s1
20400942:	3fad                	jal	204008bc <__sinit>
20400944:	04848493          	addi	s1,s1,72
20400948:	4480                	lw	s0,8(s1)
2040094a:	40dc                	lw	a5,4(s1)
2040094c:	17fd                	addi	a5,a5,-1
2040094e:	0007d663          	bgez	a5,2040095a <__sfp+0x34>
20400952:	409c                	lw	a5,0(s1)
20400954:	cfb1                	beqz	a5,204009b0 <__sfp+0x8a>
20400956:	4084                	lw	s1,0(s1)
20400958:	bfc5                	j	20400948 <__sfp+0x22>
2040095a:	00c41703          	lh	a4,12(s0)
2040095e:	e731                	bnez	a4,204009aa <__sfp+0x84>
20400960:	77c1                	lui	a5,0xffff0
20400962:	0785                	addi	a5,a5,1
20400964:	06042223          	sw	zero,100(s0)
20400968:	00042023          	sw	zero,0(s0)
2040096c:	00042223          	sw	zero,4(s0)
20400970:	00042423          	sw	zero,8(s0)
20400974:	c45c                	sw	a5,12(s0)
20400976:	00042823          	sw	zero,16(s0)
2040097a:	00042a23          	sw	zero,20(s0)
2040097e:	00042c23          	sw	zero,24(s0)
20400982:	4621                	li	a2,8
20400984:	4581                	li	a1,0
20400986:	05c40513          	addi	a0,s0,92
2040098a:	2a69                	jal	20400b24 <memset>
2040098c:	02042a23          	sw	zero,52(s0)
20400990:	02042c23          	sw	zero,56(s0)
20400994:	04042423          	sw	zero,72(s0)
20400998:	04042623          	sw	zero,76(s0)
2040099c:	8522                	mv	a0,s0
2040099e:	40b2                	lw	ra,12(sp)
204009a0:	4422                	lw	s0,8(sp)
204009a2:	4492                	lw	s1,4(sp)
204009a4:	4902                	lw	s2,0(sp)
204009a6:	0141                	addi	sp,sp,16
204009a8:	8082                	ret
204009aa:	06840413          	addi	s0,s0,104
204009ae:	bf79                	j	2040094c <__sfp+0x26>
204009b0:	4591                	li	a1,4
204009b2:	854a                	mv	a0,s2
204009b4:	35d1                	jal	20400878 <__sfmoreglue>
204009b6:	c088                	sw	a0,0(s1)
204009b8:	842a                	mv	s0,a0
204009ba:	fd51                	bnez	a0,20400956 <__sfp+0x30>
204009bc:	47b1                	li	a5,12
204009be:	00f92023          	sw	a5,0(s2)
204009c2:	bfe9                	j	2040099c <__sfp+0x76>

204009c4 <_fwalk_reent>:
_fwalk_reent():
204009c4:	7179                	addi	sp,sp,-48
204009c6:	d422                	sw	s0,40(sp)
204009c8:	d04a                	sw	s2,32(sp)
204009ca:	cc52                	sw	s4,24(sp)
204009cc:	ca56                	sw	s5,20(sp)
204009ce:	c85a                	sw	s6,16(sp)
204009d0:	c65e                	sw	s7,12(sp)
204009d2:	d606                	sw	ra,44(sp)
204009d4:	d226                	sw	s1,36(sp)
204009d6:	ce4e                	sw	s3,28(sp)
204009d8:	8a2a                	mv	s4,a0
204009da:	8aae                	mv	s5,a1
204009dc:	04850413          	addi	s0,a0,72
204009e0:	4901                	li	s2,0
204009e2:	4b05                	li	s6,1
204009e4:	5bfd                	li	s7,-1
204009e6:	ec09                	bnez	s0,20400a00 <_fwalk_reent+0x3c>
204009e8:	50b2                	lw	ra,44(sp)
204009ea:	5422                	lw	s0,40(sp)
204009ec:	854a                	mv	a0,s2
204009ee:	5492                	lw	s1,36(sp)
204009f0:	5902                	lw	s2,32(sp)
204009f2:	49f2                	lw	s3,28(sp)
204009f4:	4a62                	lw	s4,24(sp)
204009f6:	4ad2                	lw	s5,20(sp)
204009f8:	4b42                	lw	s6,16(sp)
204009fa:	4bb2                	lw	s7,12(sp)
204009fc:	6145                	addi	sp,sp,48
204009fe:	8082                	ret
20400a00:	4404                	lw	s1,8(s0)
20400a02:	00442983          	lw	s3,4(s0)
20400a06:	19fd                	addi	s3,s3,-1
20400a08:	0009d463          	bgez	s3,20400a10 <_fwalk_reent+0x4c>
20400a0c:	4000                	lw	s0,0(s0)
20400a0e:	bfe1                	j	204009e6 <_fwalk_reent+0x22>
20400a10:	00c4d783          	lhu	a5,12(s1)
20400a14:	00fb7b63          	bgeu	s6,a5,20400a2a <_fwalk_reent+0x66>
20400a18:	00e49783          	lh	a5,14(s1)
20400a1c:	01778763          	beq	a5,s7,20400a2a <_fwalk_reent+0x66>
20400a20:	85a6                	mv	a1,s1
20400a22:	8552                	mv	a0,s4
20400a24:	9a82                	jalr	s5
20400a26:	00a96933          	or	s2,s2,a0
20400a2a:	06848493          	addi	s1,s1,104
20400a2e:	bfe1                	j	20400a06 <_fwalk_reent+0x42>

20400a30 <__swhatbuf_r>:
__swhatbuf_r():
20400a30:	7119                	addi	sp,sp,-128
20400a32:	daa6                	sw	s1,116(sp)
20400a34:	84ae                	mv	s1,a1
20400a36:	00e59583          	lh	a1,14(a1)
20400a3a:	dca2                	sw	s0,120(sp)
20400a3c:	de86                	sw	ra,124(sp)
20400a3e:	8432                	mv	s0,a2
20400a40:	0005dc63          	bgez	a1,20400a58 <__swhatbuf_r+0x28>
20400a44:	00c4d783          	lhu	a5,12(s1)
20400a48:	0006a023          	sw	zero,0(a3)
20400a4c:	0807f793          	andi	a5,a5,128
20400a50:	e39d                	bnez	a5,20400a76 <__swhatbuf_r+0x46>
20400a52:	40000793          	li	a5,1024
20400a56:	a015                	j	20400a7a <__swhatbuf_r+0x4a>
20400a58:	0830                	addi	a2,sp,24
20400a5a:	c636                	sw	a3,12(sp)
20400a5c:	27b1                	jal	204011a8 <_fstat_r>
20400a5e:	46b2                	lw	a3,12(sp)
20400a60:	fe0542e3          	bltz	a0,20400a44 <__swhatbuf_r+0x14>
20400a64:	4772                	lw	a4,28(sp)
20400a66:	67bd                	lui	a5,0xf
20400a68:	8ff9                	and	a5,a5,a4
20400a6a:	7779                	lui	a4,0xffffe
20400a6c:	97ba                	add	a5,a5,a4
20400a6e:	0017b793          	seqz	a5,a5
20400a72:	c29c                	sw	a5,0(a3)
20400a74:	bff9                	j	20400a52 <__swhatbuf_r+0x22>
20400a76:	04000793          	li	a5,64
20400a7a:	c01c                	sw	a5,0(s0)
20400a7c:	50f6                	lw	ra,124(sp)
20400a7e:	5466                	lw	s0,120(sp)
20400a80:	54d6                	lw	s1,116(sp)
20400a82:	4501                	li	a0,0
20400a84:	6109                	addi	sp,sp,128
20400a86:	8082                	ret

20400a88 <__smakebuf_r>:
__smakebuf_r():
20400a88:	00c5d783          	lhu	a5,12(a1)
20400a8c:	1101                	addi	sp,sp,-32
20400a8e:	cc22                	sw	s0,24(sp)
20400a90:	ce06                	sw	ra,28(sp)
20400a92:	ca26                	sw	s1,20(sp)
20400a94:	c84a                	sw	s2,16(sp)
20400a96:	8b89                	andi	a5,a5,2
20400a98:	842e                	mv	s0,a1
20400a9a:	cf89                	beqz	a5,20400ab4 <__smakebuf_r+0x2c>
20400a9c:	04740793          	addi	a5,s0,71
20400aa0:	c01c                	sw	a5,0(s0)
20400aa2:	c81c                	sw	a5,16(s0)
20400aa4:	4785                	li	a5,1
20400aa6:	c85c                	sw	a5,20(s0)
20400aa8:	40f2                	lw	ra,28(sp)
20400aaa:	4462                	lw	s0,24(sp)
20400aac:	44d2                	lw	s1,20(sp)
20400aae:	4942                	lw	s2,16(sp)
20400ab0:	6105                	addi	sp,sp,32
20400ab2:	8082                	ret
20400ab4:	0074                	addi	a3,sp,12
20400ab6:	0030                	addi	a2,sp,8
20400ab8:	84aa                	mv	s1,a0
20400aba:	3f9d                	jal	20400a30 <__swhatbuf_r>
20400abc:	45a2                	lw	a1,8(sp)
20400abe:	892a                	mv	s2,a0
20400ac0:	8526                	mv	a0,s1
20400ac2:	2a5d                	jal	20400c78 <_malloc_r>
20400ac4:	ed01                	bnez	a0,20400adc <__smakebuf_r+0x54>
20400ac6:	00c41783          	lh	a5,12(s0)
20400aca:	2007f713          	andi	a4,a5,512
20400ace:	ff69                	bnez	a4,20400aa8 <__smakebuf_r+0x20>
20400ad0:	9bf1                	andi	a5,a5,-4
20400ad2:	0027e793          	ori	a5,a5,2
20400ad6:	00f41623          	sh	a5,12(s0)
20400ada:	b7c9                	j	20400a9c <__smakebuf_r+0x14>
20400adc:	00000797          	auipc	a5,0x0
20400ae0:	d9278793          	addi	a5,a5,-622 # 2040086e <_cleanup_r>
20400ae4:	d49c                	sw	a5,40(s1)
20400ae6:	00c45783          	lhu	a5,12(s0)
20400aea:	c008                	sw	a0,0(s0)
20400aec:	c808                	sw	a0,16(s0)
20400aee:	0807e793          	ori	a5,a5,128
20400af2:	00f41623          	sh	a5,12(s0)
20400af6:	47a2                	lw	a5,8(sp)
20400af8:	c85c                	sw	a5,20(s0)
20400afa:	47b2                	lw	a5,12(sp)
20400afc:	cf89                	beqz	a5,20400b16 <__smakebuf_r+0x8e>
20400afe:	00e41583          	lh	a1,14(s0)
20400b02:	8526                	mv	a0,s1
20400b04:	2dd9                	jal	204011da <_isatty_r>
20400b06:	c901                	beqz	a0,20400b16 <__smakebuf_r+0x8e>
20400b08:	00c45783          	lhu	a5,12(s0)
20400b0c:	9bf1                	andi	a5,a5,-4
20400b0e:	0017e793          	ori	a5,a5,1
20400b12:	00f41623          	sh	a5,12(s0)
20400b16:	00c45783          	lhu	a5,12(s0)
20400b1a:	00f96933          	or	s2,s2,a5
20400b1e:	01241623          	sh	s2,12(s0)
20400b22:	b759                	j	20400aa8 <__smakebuf_r+0x20>

20400b24 <memset>:
memset():
20400b24:	433d                	li	t1,15
20400b26:	872a                	mv	a4,a0
20400b28:	02c37363          	bgeu	t1,a2,20400b4e <memset+0x2a>
20400b2c:	00f77793          	andi	a5,a4,15
20400b30:	efbd                	bnez	a5,20400bae <memset+0x8a>
20400b32:	e5ad                	bnez	a1,20400b9c <memset+0x78>
20400b34:	ff067693          	andi	a3,a2,-16
20400b38:	8a3d                	andi	a2,a2,15
20400b3a:	96ba                	add	a3,a3,a4
20400b3c:	c30c                	sw	a1,0(a4)
20400b3e:	c34c                	sw	a1,4(a4)
20400b40:	c70c                	sw	a1,8(a4)
20400b42:	c74c                	sw	a1,12(a4)
20400b44:	0741                	addi	a4,a4,16
20400b46:	fed76be3          	bltu	a4,a3,20400b3c <memset+0x18>
20400b4a:	e211                	bnez	a2,20400b4e <memset+0x2a>
20400b4c:	8082                	ret
20400b4e:	40c306b3          	sub	a3,t1,a2
20400b52:	068a                	slli	a3,a3,0x2
20400b54:	00000297          	auipc	t0,0x0
20400b58:	9696                	add	a3,a3,t0
20400b5a:	00a68067          	jr	10(a3)
20400b5e:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fff7bfa>
20400b62:	00b706a3          	sb	a1,13(a4)
20400b66:	00b70623          	sb	a1,12(a4)
20400b6a:	00b705a3          	sb	a1,11(a4)
20400b6e:	00b70523          	sb	a1,10(a4)
20400b72:	00b704a3          	sb	a1,9(a4)
20400b76:	00b70423          	sb	a1,8(a4)
20400b7a:	00b703a3          	sb	a1,7(a4)
20400b7e:	00b70323          	sb	a1,6(a4)
20400b82:	00b702a3          	sb	a1,5(a4)
20400b86:	00b70223          	sb	a1,4(a4)
20400b8a:	00b701a3          	sb	a1,3(a4)
20400b8e:	00b70123          	sb	a1,2(a4)
20400b92:	00b700a3          	sb	a1,1(a4)
20400b96:	00b70023          	sb	a1,0(a4)
20400b9a:	8082                	ret
20400b9c:	0ff5f593          	andi	a1,a1,255
20400ba0:	00859693          	slli	a3,a1,0x8
20400ba4:	8dd5                	or	a1,a1,a3
20400ba6:	01059693          	slli	a3,a1,0x10
20400baa:	8dd5                	or	a1,a1,a3
20400bac:	b761                	j	20400b34 <memset+0x10>
20400bae:	00279693          	slli	a3,a5,0x2
20400bb2:	00000297          	auipc	t0,0x0
20400bb6:	9696                	add	a3,a3,t0
20400bb8:	8286                	mv	t0,ra
20400bba:	fa8680e7          	jalr	-88(a3)
20400bbe:	8096                	mv	ra,t0
20400bc0:	17c1                	addi	a5,a5,-16
20400bc2:	8f1d                	sub	a4,a4,a5
20400bc4:	963e                	add	a2,a2,a5
20400bc6:	f8c374e3          	bgeu	t1,a2,20400b4e <memset+0x2a>
20400bca:	b7a5                	j	20400b32 <memset+0xe>

20400bcc <_free_r>:
_free_r():
20400bcc:	c5cd                	beqz	a1,20400c76 <_free_r+0xaa>
20400bce:	ffc5a783          	lw	a5,-4(a1)
20400bd2:	1141                	addi	sp,sp,-16
20400bd4:	c422                	sw	s0,8(sp)
20400bd6:	c606                	sw	ra,12(sp)
20400bd8:	c226                	sw	s1,4(sp)
20400bda:	ffc58413          	addi	s0,a1,-4
20400bde:	0007d363          	bgez	a5,20400be4 <_free_r+0x18>
20400be2:	943e                	add	s0,s0,a5
20400be4:	84aa                	mv	s1,a0
20400be6:	2d8d                	jal	20401258 <__malloc_lock>
20400be8:	5fc00797          	auipc	a5,0x5fc00
20400bec:	b8878793          	addi	a5,a5,-1144 # 80000770 <metal_segment_data_target_end>
20400bf0:	439c                	lw	a5,0(a5)
20400bf2:	ef89                	bnez	a5,20400c0c <_free_r+0x40>
20400bf4:	00042223          	sw	zero,4(s0)
20400bf8:	5fc00797          	auipc	a5,0x5fc00
20400bfc:	b687ac23          	sw	s0,-1160(a5) # 80000770 <metal_segment_data_target_end>
20400c00:	4422                	lw	s0,8(sp)
20400c02:	40b2                	lw	ra,12(sp)
20400c04:	8526                	mv	a0,s1
20400c06:	4492                	lw	s1,4(sp)
20400c08:	0141                	addi	sp,sp,16
20400c0a:	ad81                	j	2040125a <__malloc_unlock>
20400c0c:	00f47e63          	bgeu	s0,a5,20400c28 <_free_r+0x5c>
20400c10:	4014                	lw	a3,0(s0)
20400c12:	00d40733          	add	a4,s0,a3
20400c16:	00e79663          	bne	a5,a4,20400c22 <_free_r+0x56>
20400c1a:	4398                	lw	a4,0(a5)
20400c1c:	43dc                	lw	a5,4(a5)
20400c1e:	9736                	add	a4,a4,a3
20400c20:	c018                	sw	a4,0(s0)
20400c22:	c05c                	sw	a5,4(s0)
20400c24:	bfd1                	j	20400bf8 <_free_r+0x2c>
20400c26:	87ba                	mv	a5,a4
20400c28:	43d8                	lw	a4,4(a5)
20400c2a:	c319                	beqz	a4,20400c30 <_free_r+0x64>
20400c2c:	fee47de3          	bgeu	s0,a4,20400c26 <_free_r+0x5a>
20400c30:	4394                	lw	a3,0(a5)
20400c32:	00d78633          	add	a2,a5,a3
20400c36:	00861f63          	bne	a2,s0,20400c54 <_free_r+0x88>
20400c3a:	4010                	lw	a2,0(s0)
20400c3c:	96b2                	add	a3,a3,a2
20400c3e:	c394                	sw	a3,0(a5)
20400c40:	00d78633          	add	a2,a5,a3
20400c44:	fac71ee3          	bne	a4,a2,20400c00 <_free_r+0x34>
20400c48:	4310                	lw	a2,0(a4)
20400c4a:	4358                	lw	a4,4(a4)
20400c4c:	96b2                	add	a3,a3,a2
20400c4e:	c394                	sw	a3,0(a5)
20400c50:	c3d8                	sw	a4,4(a5)
20400c52:	b77d                	j	20400c00 <_free_r+0x34>
20400c54:	00c47563          	bgeu	s0,a2,20400c5e <_free_r+0x92>
20400c58:	47b1                	li	a5,12
20400c5a:	c09c                	sw	a5,0(s1)
20400c5c:	b755                	j	20400c00 <_free_r+0x34>
20400c5e:	4010                	lw	a2,0(s0)
20400c60:	00c406b3          	add	a3,s0,a2
20400c64:	00d71663          	bne	a4,a3,20400c70 <_free_r+0xa4>
20400c68:	4314                	lw	a3,0(a4)
20400c6a:	4358                	lw	a4,4(a4)
20400c6c:	96b2                	add	a3,a3,a2
20400c6e:	c014                	sw	a3,0(s0)
20400c70:	c058                	sw	a4,4(s0)
20400c72:	c3c0                	sw	s0,4(a5)
20400c74:	b771                	j	20400c00 <_free_r+0x34>
20400c76:	8082                	ret

20400c78 <_malloc_r>:
_malloc_r():
20400c78:	1101                	addi	sp,sp,-32
20400c7a:	ca26                	sw	s1,20(sp)
20400c7c:	00358493          	addi	s1,a1,3
20400c80:	98f1                	andi	s1,s1,-4
20400c82:	ce06                	sw	ra,28(sp)
20400c84:	cc22                	sw	s0,24(sp)
20400c86:	c84a                	sw	s2,16(sp)
20400c88:	c64e                	sw	s3,12(sp)
20400c8a:	04a1                	addi	s1,s1,8
20400c8c:	47b1                	li	a5,12
20400c8e:	04f4f763          	bgeu	s1,a5,20400cdc <_malloc_r+0x64>
20400c92:	44b1                	li	s1,12
20400c94:	04b4e663          	bltu	s1,a1,20400ce0 <_malloc_r+0x68>
20400c98:	892a                	mv	s2,a0
20400c9a:	2b7d                	jal	20401258 <__malloc_lock>
20400c9c:	5fc00797          	auipc	a5,0x5fc00
20400ca0:	ad478793          	addi	a5,a5,-1324 # 80000770 <metal_segment_data_target_end>
20400ca4:	4398                	lw	a4,0(a5)
20400ca6:	843a                	mv	s0,a4
20400ca8:	e431                	bnez	s0,20400cf4 <_malloc_r+0x7c>
20400caa:	5fc00797          	auipc	a5,0x5fc00
20400cae:	aca78793          	addi	a5,a5,-1334 # 80000774 <__malloc_sbrk_start>
20400cb2:	439c                	lw	a5,0(a5)
20400cb4:	eb81                	bnez	a5,20400cc4 <_malloc_r+0x4c>
20400cb6:	4581                	li	a1,0
20400cb8:	854a                	mv	a0,s2
20400cba:	2645                	jal	2040105a <_sbrk_r>
20400cbc:	5fc00797          	auipc	a5,0x5fc00
20400cc0:	aaa7ac23          	sw	a0,-1352(a5) # 80000774 <__malloc_sbrk_start>
20400cc4:	85a6                	mv	a1,s1
20400cc6:	854a                	mv	a0,s2
20400cc8:	2e49                	jal	2040105a <_sbrk_r>
20400cca:	59fd                	li	s3,-1
20400ccc:	07351963          	bne	a0,s3,20400d3e <_malloc_r+0xc6>
20400cd0:	47b1                	li	a5,12
20400cd2:	00f92023          	sw	a5,0(s2)
20400cd6:	854a                	mv	a0,s2
20400cd8:	2349                	jal	2040125a <__malloc_unlock>
20400cda:	a029                	j	20400ce4 <_malloc_r+0x6c>
20400cdc:	fa04dce3          	bgez	s1,20400c94 <_malloc_r+0x1c>
20400ce0:	47b1                	li	a5,12
20400ce2:	c11c                	sw	a5,0(a0)
20400ce4:	4501                	li	a0,0
20400ce6:	40f2                	lw	ra,28(sp)
20400ce8:	4462                	lw	s0,24(sp)
20400cea:	44d2                	lw	s1,20(sp)
20400cec:	4942                	lw	s2,16(sp)
20400cee:	49b2                	lw	s3,12(sp)
20400cf0:	6105                	addi	sp,sp,32
20400cf2:	8082                	ret
20400cf4:	401c                	lw	a5,0(s0)
20400cf6:	8f85                	sub	a5,a5,s1
20400cf8:	0407c063          	bltz	a5,20400d38 <_malloc_r+0xc0>
20400cfc:	46ad                	li	a3,11
20400cfe:	00f6f663          	bgeu	a3,a5,20400d0a <_malloc_r+0x92>
20400d02:	c01c                	sw	a5,0(s0)
20400d04:	943e                	add	s0,s0,a5
20400d06:	c004                	sw	s1,0(s0)
20400d08:	a801                	j	20400d18 <_malloc_r+0xa0>
20400d0a:	405c                	lw	a5,4(s0)
20400d0c:	02871463          	bne	a4,s0,20400d34 <_malloc_r+0xbc>
20400d10:	5fc00717          	auipc	a4,0x5fc00
20400d14:	a6f72023          	sw	a5,-1440(a4) # 80000770 <metal_segment_data_target_end>
20400d18:	854a                	mv	a0,s2
20400d1a:	2381                	jal	2040125a <__malloc_unlock>
20400d1c:	00b40513          	addi	a0,s0,11
20400d20:	00440793          	addi	a5,s0,4
20400d24:	9961                	andi	a0,a0,-8
20400d26:	40f50733          	sub	a4,a0,a5
20400d2a:	df55                	beqz	a4,20400ce6 <_malloc_r+0x6e>
20400d2c:	943a                	add	s0,s0,a4
20400d2e:	8f89                	sub	a5,a5,a0
20400d30:	c01c                	sw	a5,0(s0)
20400d32:	bf55                	j	20400ce6 <_malloc_r+0x6e>
20400d34:	c35c                	sw	a5,4(a4)
20400d36:	b7cd                	j	20400d18 <_malloc_r+0xa0>
20400d38:	8722                	mv	a4,s0
20400d3a:	4040                	lw	s0,4(s0)
20400d3c:	b7b5                	j	20400ca8 <_malloc_r+0x30>
20400d3e:	00350413          	addi	s0,a0,3
20400d42:	9871                	andi	s0,s0,-4
20400d44:	fc8501e3          	beq	a0,s0,20400d06 <_malloc_r+0x8e>
20400d48:	40a405b3          	sub	a1,s0,a0
20400d4c:	854a                	mv	a0,s2
20400d4e:	2631                	jal	2040105a <_sbrk_r>
20400d50:	fb351be3          	bne	a0,s3,20400d06 <_malloc_r+0x8e>
20400d54:	bfb5                	j	20400cd0 <_malloc_r+0x58>

20400d56 <__sfputc_r>:
__sfputc_r():
20400d56:	461c                	lw	a5,8(a2)
20400d58:	17fd                	addi	a5,a5,-1
20400d5a:	c61c                	sw	a5,8(a2)
20400d5c:	0007da63          	bgez	a5,20400d70 <__sfputc_r+0x1a>
20400d60:	4e18                	lw	a4,24(a2)
20400d62:	00e7c563          	blt	a5,a4,20400d6c <__sfputc_r+0x16>
20400d66:	47a9                	li	a5,10
20400d68:	00f59463          	bne	a1,a5,20400d70 <__sfputc_r+0x1a>
20400d6c:	f1cff06f          	j	20400488 <__swbuf_r>
20400d70:	421c                	lw	a5,0(a2)
20400d72:	852e                	mv	a0,a1
20400d74:	00178713          	addi	a4,a5,1
20400d78:	c218                	sw	a4,0(a2)
20400d7a:	00b78023          	sb	a1,0(a5)
20400d7e:	8082                	ret

20400d80 <__sfputs_r>:
__sfputs_r():
20400d80:	1101                	addi	sp,sp,-32
20400d82:	cc22                	sw	s0,24(sp)
20400d84:	ca26                	sw	s1,20(sp)
20400d86:	c84a                	sw	s2,16(sp)
20400d88:	c64e                	sw	s3,12(sp)
20400d8a:	c452                	sw	s4,8(sp)
20400d8c:	ce06                	sw	ra,28(sp)
20400d8e:	892a                	mv	s2,a0
20400d90:	89ae                	mv	s3,a1
20400d92:	8432                	mv	s0,a2
20400d94:	00d604b3          	add	s1,a2,a3
20400d98:	5a7d                	li	s4,-1
20400d9a:	00941463          	bne	s0,s1,20400da2 <__sfputs_r+0x22>
20400d9e:	4501                	li	a0,0
20400da0:	a809                	j	20400db2 <__sfputs_r+0x32>
20400da2:	00044583          	lbu	a1,0(s0)
20400da6:	864e                	mv	a2,s3
20400da8:	854a                	mv	a0,s2
20400daa:	3775                	jal	20400d56 <__sfputc_r>
20400dac:	0405                	addi	s0,s0,1
20400dae:	ff4516e3          	bne	a0,s4,20400d9a <__sfputs_r+0x1a>
20400db2:	40f2                	lw	ra,28(sp)
20400db4:	4462                	lw	s0,24(sp)
20400db6:	44d2                	lw	s1,20(sp)
20400db8:	4942                	lw	s2,16(sp)
20400dba:	49b2                	lw	s3,12(sp)
20400dbc:	4a22                	lw	s4,8(sp)
20400dbe:	6105                	addi	sp,sp,32
20400dc0:	8082                	ret

20400dc2 <_vfiprintf_r>:
_vfiprintf_r():
20400dc2:	7135                	addi	sp,sp,-160
20400dc4:	cd22                	sw	s0,152(sp)
20400dc6:	cb26                	sw	s1,148(sp)
20400dc8:	c94a                	sw	s2,144(sp)
20400dca:	c74e                	sw	s3,140(sp)
20400dcc:	cf06                	sw	ra,156(sp)
20400dce:	c552                	sw	s4,136(sp)
20400dd0:	c356                	sw	s5,132(sp)
20400dd2:	c15a                	sw	s6,128(sp)
20400dd4:	dede                	sw	s7,124(sp)
20400dd6:	dce2                	sw	s8,120(sp)
20400dd8:	dae6                	sw	s9,116(sp)
20400dda:	89aa                	mv	s3,a0
20400ddc:	84ae                	mv	s1,a1
20400dde:	8932                	mv	s2,a2
20400de0:	8436                	mv	s0,a3
20400de2:	c501                	beqz	a0,20400dea <_vfiprintf_r+0x28>
20400de4:	4d1c                	lw	a5,24(a0)
20400de6:	e391                	bnez	a5,20400dea <_vfiprintf_r+0x28>
20400de8:	3cd1                	jal	204008bc <__sinit>
20400dea:	00004797          	auipc	a5,0x4
20400dee:	33678793          	addi	a5,a5,822 # 20405120 <__sf_fake_stdin>
20400df2:	0cf49b63          	bne	s1,a5,20400ec8 <_vfiprintf_r+0x106>
20400df6:	0049a483          	lw	s1,4(s3)
20400dfa:	00c4d783          	lhu	a5,12(s1)
20400dfe:	8ba1                	andi	a5,a5,8
20400e00:	c7f5                	beqz	a5,20400eec <_vfiprintf_r+0x12a>
20400e02:	489c                	lw	a5,16(s1)
20400e04:	c7e5                	beqz	a5,20400eec <_vfiprintf_r+0x12a>
20400e06:	02000793          	li	a5,32
20400e0a:	02f104a3          	sb	a5,41(sp)
20400e0e:	03000793          	li	a5,48
20400e12:	d202                	sw	zero,36(sp)
20400e14:	02f10523          	sb	a5,42(sp)
20400e18:	c622                	sw	s0,12(sp)
20400e1a:	02500b93          	li	s7,37
20400e1e:	00004a97          	auipc	s5,0x4
20400e22:	342a8a93          	addi	s5,s5,834 # 20405160 <__sf_fake_stdout+0x20>
20400e26:	4c05                	li	s8,1
20400e28:	4b29                	li	s6,10
20400e2a:	844a                	mv	s0,s2
20400e2c:	00044783          	lbu	a5,0(s0)
20400e30:	c399                	beqz	a5,20400e36 <_vfiprintf_r+0x74>
20400e32:	0f779063          	bne	a5,s7,20400f12 <_vfiprintf_r+0x150>
20400e36:	41240cb3          	sub	s9,s0,s2
20400e3a:	000c8d63          	beqz	s9,20400e54 <_vfiprintf_r+0x92>
20400e3e:	86e6                	mv	a3,s9
20400e40:	864a                	mv	a2,s2
20400e42:	85a6                	mv	a1,s1
20400e44:	854e                	mv	a0,s3
20400e46:	3f2d                	jal	20400d80 <__sfputs_r>
20400e48:	57fd                	li	a5,-1
20400e4a:	1ef50663          	beq	a0,a5,20401036 <_vfiprintf_r+0x274>
20400e4e:	5692                	lw	a3,36(sp)
20400e50:	96e6                	add	a3,a3,s9
20400e52:	d236                	sw	a3,36(sp)
20400e54:	00044783          	lbu	a5,0(s0)
20400e58:	1c078f63          	beqz	a5,20401036 <_vfiprintf_r+0x274>
20400e5c:	57fd                	li	a5,-1
20400e5e:	00140913          	addi	s2,s0,1
20400e62:	c802                	sw	zero,16(sp)
20400e64:	ce02                	sw	zero,28(sp)
20400e66:	ca3e                	sw	a5,20(sp)
20400e68:	cc02                	sw	zero,24(sp)
20400e6a:	040109a3          	sb	zero,83(sp)
20400e6e:	d482                	sw	zero,104(sp)
20400e70:	00094583          	lbu	a1,0(s2)
20400e74:	4615                	li	a2,5
20400e76:	8556                	mv	a0,s5
20400e78:	26d9                	jal	2040123e <memchr>
20400e7a:	00190413          	addi	s0,s2,1
20400e7e:	47c2                	lw	a5,16(sp)
20400e80:	e959                	bnez	a0,20400f16 <_vfiprintf_r+0x154>
20400e82:	0107f713          	andi	a4,a5,16
20400e86:	c709                	beqz	a4,20400e90 <_vfiprintf_r+0xce>
20400e88:	02000713          	li	a4,32
20400e8c:	04e109a3          	sb	a4,83(sp)
20400e90:	0087f713          	andi	a4,a5,8
20400e94:	c709                	beqz	a4,20400e9e <_vfiprintf_r+0xdc>
20400e96:	02b00713          	li	a4,43
20400e9a:	04e109a3          	sb	a4,83(sp)
20400e9e:	00094683          	lbu	a3,0(s2)
20400ea2:	02a00713          	li	a4,42
20400ea6:	08e68063          	beq	a3,a4,20400f26 <_vfiprintf_r+0x164>
20400eaa:	47f2                	lw	a5,28(sp)
20400eac:	844a                	mv	s0,s2
20400eae:	4681                	li	a3,0
20400eb0:	4625                	li	a2,9
20400eb2:	00044703          	lbu	a4,0(s0)
20400eb6:	00140593          	addi	a1,s0,1
20400eba:	fd070713          	addi	a4,a4,-48
20400ebe:	0ae67963          	bgeu	a2,a4,20400f70 <_vfiprintf_r+0x1ae>
20400ec2:	cab5                	beqz	a3,20400f36 <_vfiprintf_r+0x174>
20400ec4:	ce3e                	sw	a5,28(sp)
20400ec6:	a885                	j	20400f36 <_vfiprintf_r+0x174>
20400ec8:	00004797          	auipc	a5,0x4
20400ecc:	27878793          	addi	a5,a5,632 # 20405140 <__sf_fake_stdout>
20400ed0:	00f49563          	bne	s1,a5,20400eda <_vfiprintf_r+0x118>
20400ed4:	0089a483          	lw	s1,8(s3)
20400ed8:	b70d                	j	20400dfa <_vfiprintf_r+0x38>
20400eda:	00004797          	auipc	a5,0x4
20400ede:	22678793          	addi	a5,a5,550 # 20405100 <__sf_fake_stderr>
20400ee2:	f0f49ce3          	bne	s1,a5,20400dfa <_vfiprintf_r+0x38>
20400ee6:	00c9a483          	lw	s1,12(s3)
20400eea:	bf01                	j	20400dfa <_vfiprintf_r+0x38>
20400eec:	85a6                	mv	a1,s1
20400eee:	854e                	mv	a0,s3
20400ef0:	e58ff0ef          	jal	ra,20400548 <__swsetup_r>
20400ef4:	d909                	beqz	a0,20400e06 <_vfiprintf_r+0x44>
20400ef6:	557d                	li	a0,-1
20400ef8:	40fa                	lw	ra,156(sp)
20400efa:	446a                	lw	s0,152(sp)
20400efc:	44da                	lw	s1,148(sp)
20400efe:	494a                	lw	s2,144(sp)
20400f00:	49ba                	lw	s3,140(sp)
20400f02:	4a2a                	lw	s4,136(sp)
20400f04:	4a9a                	lw	s5,132(sp)
20400f06:	4b0a                	lw	s6,128(sp)
20400f08:	5bf6                	lw	s7,124(sp)
20400f0a:	5c66                	lw	s8,120(sp)
20400f0c:	5cd6                	lw	s9,116(sp)
20400f0e:	610d                	addi	sp,sp,160
20400f10:	8082                	ret
20400f12:	0405                	addi	s0,s0,1
20400f14:	bf21                	j	20400e2c <_vfiprintf_r+0x6a>
20400f16:	41550533          	sub	a0,a0,s5
20400f1a:	00ac1533          	sll	a0,s8,a0
20400f1e:	8fc9                	or	a5,a5,a0
20400f20:	c83e                	sw	a5,16(sp)
20400f22:	8922                	mv	s2,s0
20400f24:	b7b1                	j	20400e70 <_vfiprintf_r+0xae>
20400f26:	4732                	lw	a4,12(sp)
20400f28:	00470693          	addi	a3,a4,4
20400f2c:	4318                	lw	a4,0(a4)
20400f2e:	c636                	sw	a3,12(sp)
20400f30:	02074963          	bltz	a4,20400f62 <_vfiprintf_r+0x1a0>
20400f34:	ce3a                	sw	a4,28(sp)
20400f36:	00044703          	lbu	a4,0(s0)
20400f3a:	02e00793          	li	a5,46
20400f3e:	04f71f63          	bne	a4,a5,20400f9c <_vfiprintf_r+0x1da>
20400f42:	00144703          	lbu	a4,1(s0)
20400f46:	02a00793          	li	a5,42
20400f4a:	02f71b63          	bne	a4,a5,20400f80 <_vfiprintf_r+0x1be>
20400f4e:	47b2                	lw	a5,12(sp)
20400f50:	0409                	addi	s0,s0,2
20400f52:	00478713          	addi	a4,a5,4
20400f56:	439c                	lw	a5,0(a5)
20400f58:	c63a                	sw	a4,12(sp)
20400f5a:	0207c163          	bltz	a5,20400f7c <_vfiprintf_r+0x1ba>
20400f5e:	ca3e                	sw	a5,20(sp)
20400f60:	a835                	j	20400f9c <_vfiprintf_r+0x1da>
20400f62:	40e00733          	neg	a4,a4
20400f66:	0027e793          	ori	a5,a5,2
20400f6a:	ce3a                	sw	a4,28(sp)
20400f6c:	c83e                	sw	a5,16(sp)
20400f6e:	b7e1                	j	20400f36 <_vfiprintf_r+0x174>
20400f70:	036787b3          	mul	a5,a5,s6
20400f74:	4685                	li	a3,1
20400f76:	842e                	mv	s0,a1
20400f78:	97ba                	add	a5,a5,a4
20400f7a:	bf25                	j	20400eb2 <_vfiprintf_r+0xf0>
20400f7c:	57fd                	li	a5,-1
20400f7e:	b7c5                	j	20400f5e <_vfiprintf_r+0x19c>
20400f80:	0405                	addi	s0,s0,1
20400f82:	ca02                	sw	zero,20(sp)
20400f84:	4681                	li	a3,0
20400f86:	4781                	li	a5,0
20400f88:	4625                	li	a2,9
20400f8a:	00044703          	lbu	a4,0(s0)
20400f8e:	00140593          	addi	a1,s0,1
20400f92:	fd070713          	addi	a4,a4,-48
20400f96:	06e67663          	bgeu	a2,a4,20401002 <_vfiprintf_r+0x240>
20400f9a:	f2f1                	bnez	a3,20400f5e <_vfiprintf_r+0x19c>
20400f9c:	00044583          	lbu	a1,0(s0)
20400fa0:	460d                	li	a2,3
20400fa2:	00004517          	auipc	a0,0x4
20400fa6:	1c650513          	addi	a0,a0,454 # 20405168 <__sf_fake_stdout+0x28>
20400faa:	2c51                	jal	2040123e <memchr>
20400fac:	cd11                	beqz	a0,20400fc8 <_vfiprintf_r+0x206>
20400fae:	00004797          	auipc	a5,0x4
20400fb2:	1ba78793          	addi	a5,a5,442 # 20405168 <__sf_fake_stdout+0x28>
20400fb6:	8d1d                	sub	a0,a0,a5
20400fb8:	04000793          	li	a5,64
20400fbc:	00a797b3          	sll	a5,a5,a0
20400fc0:	4542                	lw	a0,16(sp)
20400fc2:	0405                	addi	s0,s0,1
20400fc4:	8d5d                	or	a0,a0,a5
20400fc6:	c82a                	sw	a0,16(sp)
20400fc8:	00044583          	lbu	a1,0(s0)
20400fcc:	4619                	li	a2,6
20400fce:	00004517          	auipc	a0,0x4
20400fd2:	19e50513          	addi	a0,a0,414 # 2040516c <__sf_fake_stdout+0x2c>
20400fd6:	00140913          	addi	s2,s0,1
20400fda:	02b10423          	sb	a1,40(sp)
20400fde:	2485                	jal	2040123e <memchr>
20400fe0:	c13d                	beqz	a0,20401046 <_vfiprintf_r+0x284>
20400fe2:	dfbff797          	auipc	a5,0xdfbff
20400fe6:	01e78793          	addi	a5,a5,30 # 0 <__metal_boot_hart>
20400fea:	e795                	bnez	a5,20401016 <_vfiprintf_r+0x254>
20400fec:	4742                	lw	a4,16(sp)
20400fee:	47b2                	lw	a5,12(sp)
20400ff0:	10077713          	andi	a4,a4,256
20400ff4:	cf09                	beqz	a4,2040100e <_vfiprintf_r+0x24c>
20400ff6:	0791                	addi	a5,a5,4
20400ff8:	c63e                	sw	a5,12(sp)
20400ffa:	5792                	lw	a5,36(sp)
20400ffc:	97d2                	add	a5,a5,s4
20400ffe:	d23e                	sw	a5,36(sp)
20401000:	b52d                	j	20400e2a <_vfiprintf_r+0x68>
20401002:	036787b3          	mul	a5,a5,s6
20401006:	4685                	li	a3,1
20401008:	842e                	mv	s0,a1
2040100a:	97ba                	add	a5,a5,a4
2040100c:	bfbd                	j	20400f8a <_vfiprintf_r+0x1c8>
2040100e:	079d                	addi	a5,a5,7
20401010:	9be1                	andi	a5,a5,-8
20401012:	07a1                	addi	a5,a5,8
20401014:	b7d5                	j	20400ff8 <_vfiprintf_r+0x236>
20401016:	0078                	addi	a4,sp,12
20401018:	00000697          	auipc	a3,0x0
2040101c:	d6868693          	addi	a3,a3,-664 # 20400d80 <__sfputs_r>
20401020:	8626                	mv	a2,s1
20401022:	080c                	addi	a1,sp,16
20401024:	854e                	mv	a0,s3
20401026:	00000097          	auipc	ra,0x0
2040102a:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040102e:	57fd                	li	a5,-1
20401030:	8a2a                	mv	s4,a0
20401032:	fcf514e3          	bne	a0,a5,20400ffa <_vfiprintf_r+0x238>
20401036:	00c4d783          	lhu	a5,12(s1)
2040103a:	0407f793          	andi	a5,a5,64
2040103e:	ea079ce3          	bnez	a5,20400ef6 <_vfiprintf_r+0x134>
20401042:	5512                	lw	a0,36(sp)
20401044:	bd55                	j	20400ef8 <_vfiprintf_r+0x136>
20401046:	0078                	addi	a4,sp,12
20401048:	00000697          	auipc	a3,0x0
2040104c:	d3868693          	addi	a3,a3,-712 # 20400d80 <__sfputs_r>
20401050:	8626                	mv	a2,s1
20401052:	080c                	addi	a1,sp,16
20401054:	854e                	mv	a0,s3
20401056:	2e09                	jal	20401368 <_printf_i>
20401058:	bfd9                	j	2040102e <_vfiprintf_r+0x26c>

2040105a <_sbrk_r>:
_sbrk_r():
2040105a:	1141                	addi	sp,sp,-16
2040105c:	c422                	sw	s0,8(sp)
2040105e:	842a                	mv	s0,a0
20401060:	852e                	mv	a0,a1
20401062:	5fc04797          	auipc	a5,0x5fc04
20401066:	7a07a723          	sw	zero,1966(a5) # 80005810 <errno>
2040106a:	c606                	sw	ra,12(sp)
2040106c:	2579                	jal	204016fa <_sbrk>
2040106e:	57fd                	li	a5,-1
20401070:	00f51963          	bne	a0,a5,20401082 <_sbrk_r+0x28>
20401074:	5fc04797          	auipc	a5,0x5fc04
20401078:	79c78793          	addi	a5,a5,1948 # 80005810 <errno>
2040107c:	439c                	lw	a5,0(a5)
2040107e:	c391                	beqz	a5,20401082 <_sbrk_r+0x28>
20401080:	c01c                	sw	a5,0(s0)
20401082:	40b2                	lw	ra,12(sp)
20401084:	4422                	lw	s0,8(sp)
20401086:	0141                	addi	sp,sp,16
20401088:	8082                	ret

2040108a <__sread>:
__sread():
2040108a:	1141                	addi	sp,sp,-16
2040108c:	c422                	sw	s0,8(sp)
2040108e:	842e                	mv	s0,a1
20401090:	00e59583          	lh	a1,14(a1)
20401094:	c606                	sw	ra,12(sp)
20401096:	2b95                	jal	2040160a <_read_r>
20401098:	00054963          	bltz	a0,204010aa <__sread+0x20>
2040109c:	487c                	lw	a5,84(s0)
2040109e:	97aa                	add	a5,a5,a0
204010a0:	c87c                	sw	a5,84(s0)
204010a2:	40b2                	lw	ra,12(sp)
204010a4:	4422                	lw	s0,8(sp)
204010a6:	0141                	addi	sp,sp,16
204010a8:	8082                	ret
204010aa:	00c45783          	lhu	a5,12(s0)
204010ae:	777d                	lui	a4,0xfffff
204010b0:	177d                	addi	a4,a4,-1
204010b2:	8ff9                	and	a5,a5,a4
204010b4:	00f41623          	sh	a5,12(s0)
204010b8:	b7ed                	j	204010a2 <__sread+0x18>

204010ba <__swrite>:
__swrite():
204010ba:	00c5d783          	lhu	a5,12(a1)
204010be:	1101                	addi	sp,sp,-32
204010c0:	cc22                	sw	s0,24(sp)
204010c2:	ca26                	sw	s1,20(sp)
204010c4:	c84a                	sw	s2,16(sp)
204010c6:	c64e                	sw	s3,12(sp)
204010c8:	ce06                	sw	ra,28(sp)
204010ca:	1007f793          	andi	a5,a5,256
204010ce:	84aa                	mv	s1,a0
204010d0:	842e                	mv	s0,a1
204010d2:	8932                	mv	s2,a2
204010d4:	89b6                	mv	s3,a3
204010d6:	c791                	beqz	a5,204010e2 <__swrite+0x28>
204010d8:	00e59583          	lh	a1,14(a1)
204010dc:	4689                	li	a3,2
204010de:	4601                	li	a2,0
204010e0:	222d                	jal	2040120a <_lseek_r>
204010e2:	00c45783          	lhu	a5,12(s0)
204010e6:	777d                	lui	a4,0xfffff
204010e8:	177d                	addi	a4,a4,-1
204010ea:	8ff9                	and	a5,a5,a4
204010ec:	00f41623          	sh	a5,12(s0)
204010f0:	00e41583          	lh	a1,14(s0)
204010f4:	4462                	lw	s0,24(sp)
204010f6:	40f2                	lw	ra,28(sp)
204010f8:	86ce                	mv	a3,s3
204010fa:	864a                	mv	a2,s2
204010fc:	49b2                	lw	s3,12(sp)
204010fe:	4942                	lw	s2,16(sp)
20401100:	8526                	mv	a0,s1
20401102:	44d2                	lw	s1,20(sp)
20401104:	6105                	addi	sp,sp,32
20401106:	a83d                	j	20401144 <_write_r>

20401108 <__sseek>:
__sseek():
20401108:	1141                	addi	sp,sp,-16
2040110a:	c422                	sw	s0,8(sp)
2040110c:	842e                	mv	s0,a1
2040110e:	00e59583          	lh	a1,14(a1)
20401112:	c606                	sw	ra,12(sp)
20401114:	28dd                	jal	2040120a <_lseek_r>
20401116:	57fd                	li	a5,-1
20401118:	00c45703          	lhu	a4,12(s0)
2040111c:	00f51b63          	bne	a0,a5,20401132 <__sseek+0x2a>
20401120:	77fd                	lui	a5,0xfffff
20401122:	17fd                	addi	a5,a5,-1
20401124:	8ff9                	and	a5,a5,a4
20401126:	00f41623          	sh	a5,12(s0)
2040112a:	40b2                	lw	ra,12(sp)
2040112c:	4422                	lw	s0,8(sp)
2040112e:	0141                	addi	sp,sp,16
20401130:	8082                	ret
20401132:	6785                	lui	a5,0x1
20401134:	8fd9                	or	a5,a5,a4
20401136:	00f41623          	sh	a5,12(s0)
2040113a:	c868                	sw	a0,84(s0)
2040113c:	b7fd                	j	2040112a <__sseek+0x22>

2040113e <__sclose>:
__sclose():
2040113e:	00e59583          	lh	a1,14(a1)
20401142:	a81d                	j	20401178 <_close_r>

20401144 <_write_r>:
_write_r():
20401144:	1141                	addi	sp,sp,-16
20401146:	c422                	sw	s0,8(sp)
20401148:	842a                	mv	s0,a0
2040114a:	852e                	mv	a0,a1
2040114c:	85b2                	mv	a1,a2
2040114e:	8636                	mv	a2,a3
20401150:	5fc04797          	auipc	a5,0x5fc04
20401154:	6c07a023          	sw	zero,1728(a5) # 80005810 <errno>
20401158:	c606                	sw	ra,12(sp)
2040115a:	2d39                	jal	20401778 <_write>
2040115c:	57fd                	li	a5,-1
2040115e:	00f51963          	bne	a0,a5,20401170 <_write_r+0x2c>
20401162:	5fc04797          	auipc	a5,0x5fc04
20401166:	6ae78793          	addi	a5,a5,1710 # 80005810 <errno>
2040116a:	439c                	lw	a5,0(a5)
2040116c:	c391                	beqz	a5,20401170 <_write_r+0x2c>
2040116e:	c01c                	sw	a5,0(s0)
20401170:	40b2                	lw	ra,12(sp)
20401172:	4422                	lw	s0,8(sp)
20401174:	0141                	addi	sp,sp,16
20401176:	8082                	ret

20401178 <_close_r>:
_close_r():
20401178:	1141                	addi	sp,sp,-16
2040117a:	c422                	sw	s0,8(sp)
2040117c:	842a                	mv	s0,a0
2040117e:	852e                	mv	a0,a1
20401180:	5fc04797          	auipc	a5,0x5fc04
20401184:	6807a823          	sw	zero,1680(a5) # 80005810 <errno>
20401188:	c606                	sw	ra,12(sp)
2040118a:	2955                	jal	2040163e <_close>
2040118c:	57fd                	li	a5,-1
2040118e:	00f51963          	bne	a0,a5,204011a0 <_close_r+0x28>
20401192:	5fc04797          	auipc	a5,0x5fc04
20401196:	67e78793          	addi	a5,a5,1662 # 80005810 <errno>
2040119a:	439c                	lw	a5,0(a5)
2040119c:	c391                	beqz	a5,204011a0 <_close_r+0x28>
2040119e:	c01c                	sw	a5,0(s0)
204011a0:	40b2                	lw	ra,12(sp)
204011a2:	4422                	lw	s0,8(sp)
204011a4:	0141                	addi	sp,sp,16
204011a6:	8082                	ret

204011a8 <_fstat_r>:
_fstat_r():
204011a8:	1141                	addi	sp,sp,-16
204011aa:	c422                	sw	s0,8(sp)
204011ac:	842a                	mv	s0,a0
204011ae:	852e                	mv	a0,a1
204011b0:	85b2                	mv	a1,a2
204011b2:	5fc04797          	auipc	a5,0x5fc04
204011b6:	6407af23          	sw	zero,1630(a5) # 80005810 <errno>
204011ba:	c606                	sw	ra,12(sp)
204011bc:	2155                	jal	20401660 <_fstat>
204011be:	57fd                	li	a5,-1
204011c0:	00f51963          	bne	a0,a5,204011d2 <_fstat_r+0x2a>
204011c4:	5fc04797          	auipc	a5,0x5fc04
204011c8:	64c78793          	addi	a5,a5,1612 # 80005810 <errno>
204011cc:	439c                	lw	a5,0(a5)
204011ce:	c391                	beqz	a5,204011d2 <_fstat_r+0x2a>
204011d0:	c01c                	sw	a5,0(s0)
204011d2:	40b2                	lw	ra,12(sp)
204011d4:	4422                	lw	s0,8(sp)
204011d6:	0141                	addi	sp,sp,16
204011d8:	8082                	ret

204011da <_isatty_r>:
_isatty_r():
204011da:	1141                	addi	sp,sp,-16
204011dc:	c422                	sw	s0,8(sp)
204011de:	842a                	mv	s0,a0
204011e0:	852e                	mv	a0,a1
204011e2:	5fc04797          	auipc	a5,0x5fc04
204011e6:	6207a723          	sw	zero,1582(a5) # 80005810 <errno>
204011ea:	c606                	sw	ra,12(sp)
204011ec:	2969                	jal	20401686 <_isatty>
204011ee:	57fd                	li	a5,-1
204011f0:	00f51963          	bne	a0,a5,20401202 <_isatty_r+0x28>
204011f4:	5fc04797          	auipc	a5,0x5fc04
204011f8:	61c78793          	addi	a5,a5,1564 # 80005810 <errno>
204011fc:	439c                	lw	a5,0(a5)
204011fe:	c391                	beqz	a5,20401202 <_isatty_r+0x28>
20401200:	c01c                	sw	a5,0(s0)
20401202:	40b2                	lw	ra,12(sp)
20401204:	4422                	lw	s0,8(sp)
20401206:	0141                	addi	sp,sp,16
20401208:	8082                	ret

2040120a <_lseek_r>:
_lseek_r():
2040120a:	1141                	addi	sp,sp,-16
2040120c:	c422                	sw	s0,8(sp)
2040120e:	842a                	mv	s0,a0
20401210:	852e                	mv	a0,a1
20401212:	85b2                	mv	a1,a2
20401214:	8636                	mv	a2,a3
20401216:	5fc04797          	auipc	a5,0x5fc04
2040121a:	5e07ad23          	sw	zero,1530(a5) # 80005810 <errno>
2040121e:	c606                	sw	ra,12(sp)
20401220:	2159                	jal	204016a6 <_lseek>
20401222:	57fd                	li	a5,-1
20401224:	00f51963          	bne	a0,a5,20401236 <_lseek_r+0x2c>
20401228:	5fc04797          	auipc	a5,0x5fc04
2040122c:	5e878793          	addi	a5,a5,1512 # 80005810 <errno>
20401230:	439c                	lw	a5,0(a5)
20401232:	c391                	beqz	a5,20401236 <_lseek_r+0x2c>
20401234:	c01c                	sw	a5,0(s0)
20401236:	40b2                	lw	ra,12(sp)
20401238:	4422                	lw	s0,8(sp)
2040123a:	0141                	addi	sp,sp,16
2040123c:	8082                	ret

2040123e <memchr>:
memchr():
2040123e:	0ff5f593          	andi	a1,a1,255
20401242:	962a                	add	a2,a2,a0
20401244:	00c51463          	bne	a0,a2,2040124c <memchr+0xe>
20401248:	4501                	li	a0,0
2040124a:	8082                	ret
2040124c:	00054783          	lbu	a5,0(a0)
20401250:	feb78de3          	beq	a5,a1,2040124a <memchr+0xc>
20401254:	0505                	addi	a0,a0,1
20401256:	b7fd                	j	20401244 <memchr+0x6>

20401258 <__malloc_lock>:
__malloc_lock():
20401258:	8082                	ret

2040125a <__malloc_unlock>:
__malloc_unlock():
2040125a:	8082                	ret

2040125c <_printf_common>:
_printf_common():
2040125c:	7179                	addi	sp,sp,-48
2040125e:	ca56                	sw	s5,20(sp)
20401260:	499c                	lw	a5,16(a1)
20401262:	8aba                	mv	s5,a4
20401264:	4598                	lw	a4,8(a1)
20401266:	d422                	sw	s0,40(sp)
20401268:	d226                	sw	s1,36(sp)
2040126a:	ce4e                	sw	s3,28(sp)
2040126c:	cc52                	sw	s4,24(sp)
2040126e:	d606                	sw	ra,44(sp)
20401270:	d04a                	sw	s2,32(sp)
20401272:	c85a                	sw	s6,16(sp)
20401274:	c65e                	sw	s7,12(sp)
20401276:	89aa                	mv	s3,a0
20401278:	842e                	mv	s0,a1
2040127a:	84b2                	mv	s1,a2
2040127c:	8a36                	mv	s4,a3
2040127e:	00e7d363          	bge	a5,a4,20401284 <_printf_common+0x28>
20401282:	87ba                	mv	a5,a4
20401284:	c09c                	sw	a5,0(s1)
20401286:	04344703          	lbu	a4,67(s0)
2040128a:	c319                	beqz	a4,20401290 <_printf_common+0x34>
2040128c:	0785                	addi	a5,a5,1
2040128e:	c09c                	sw	a5,0(s1)
20401290:	401c                	lw	a5,0(s0)
20401292:	0207f793          	andi	a5,a5,32
20401296:	c781                	beqz	a5,2040129e <_printf_common+0x42>
20401298:	409c                	lw	a5,0(s1)
2040129a:	0789                	addi	a5,a5,2
2040129c:	c09c                	sw	a5,0(s1)
2040129e:	00042903          	lw	s2,0(s0)
204012a2:	00697913          	andi	s2,s2,6
204012a6:	00091a63          	bnez	s2,204012ba <_printf_common+0x5e>
204012aa:	01940b13          	addi	s6,s0,25
204012ae:	5bfd                	li	s7,-1
204012b0:	445c                	lw	a5,12(s0)
204012b2:	4098                	lw	a4,0(s1)
204012b4:	8f99                	sub	a5,a5,a4
204012b6:	04f94c63          	blt	s2,a5,2040130e <_printf_common+0xb2>
204012ba:	401c                	lw	a5,0(s0)
204012bc:	04344683          	lbu	a3,67(s0)
204012c0:	0207f793          	andi	a5,a5,32
204012c4:	00d036b3          	snez	a3,a3
204012c8:	eba5                	bnez	a5,20401338 <_printf_common+0xdc>
204012ca:	04340613          	addi	a2,s0,67
204012ce:	85d2                	mv	a1,s4
204012d0:	854e                	mv	a0,s3
204012d2:	9a82                	jalr	s5
204012d4:	57fd                	li	a5,-1
204012d6:	04f50363          	beq	a0,a5,2040131c <_printf_common+0xc0>
204012da:	401c                	lw	a5,0(s0)
204012dc:	4611                	li	a2,4
204012de:	4098                	lw	a4,0(s1)
204012e0:	8b99                	andi	a5,a5,6
204012e2:	4454                	lw	a3,12(s0)
204012e4:	4481                	li	s1,0
204012e6:	00c79763          	bne	a5,a2,204012f4 <_printf_common+0x98>
204012ea:	40e684b3          	sub	s1,a3,a4
204012ee:	0004d363          	bgez	s1,204012f4 <_printf_common+0x98>
204012f2:	4481                	li	s1,0
204012f4:	441c                	lw	a5,8(s0)
204012f6:	4818                	lw	a4,16(s0)
204012f8:	00f75463          	bge	a4,a5,20401300 <_printf_common+0xa4>
204012fc:	8f99                	sub	a5,a5,a4
204012fe:	94be                	add	s1,s1,a5
20401300:	4901                	li	s2,0
20401302:	0469                	addi	s0,s0,26
20401304:	5b7d                	li	s6,-1
20401306:	05249863          	bne	s1,s2,20401356 <_printf_common+0xfa>
2040130a:	4501                	li	a0,0
2040130c:	a809                	j	2040131e <_printf_common+0xc2>
2040130e:	4685                	li	a3,1
20401310:	865a                	mv	a2,s6
20401312:	85d2                	mv	a1,s4
20401314:	854e                	mv	a0,s3
20401316:	9a82                	jalr	s5
20401318:	01751e63          	bne	a0,s7,20401334 <_printf_common+0xd8>
2040131c:	557d                	li	a0,-1
2040131e:	50b2                	lw	ra,44(sp)
20401320:	5422                	lw	s0,40(sp)
20401322:	5492                	lw	s1,36(sp)
20401324:	5902                	lw	s2,32(sp)
20401326:	49f2                	lw	s3,28(sp)
20401328:	4a62                	lw	s4,24(sp)
2040132a:	4ad2                	lw	s5,20(sp)
2040132c:	4b42                	lw	s6,16(sp)
2040132e:	4bb2                	lw	s7,12(sp)
20401330:	6145                	addi	sp,sp,48
20401332:	8082                	ret
20401334:	0905                	addi	s2,s2,1
20401336:	bfad                	j	204012b0 <_printf_common+0x54>
20401338:	00d40733          	add	a4,s0,a3
2040133c:	03000613          	li	a2,48
20401340:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fff8c2f>
20401344:	04544703          	lbu	a4,69(s0)
20401348:	00168793          	addi	a5,a3,1
2040134c:	97a2                	add	a5,a5,s0
2040134e:	0689                	addi	a3,a3,2
20401350:	04e781a3          	sb	a4,67(a5)
20401354:	bf9d                	j	204012ca <_printf_common+0x6e>
20401356:	4685                	li	a3,1
20401358:	8622                	mv	a2,s0
2040135a:	85d2                	mv	a1,s4
2040135c:	854e                	mv	a0,s3
2040135e:	9a82                	jalr	s5
20401360:	fb650ee3          	beq	a0,s6,2040131c <_printf_common+0xc0>
20401364:	0905                	addi	s2,s2,1
20401366:	b745                	j	20401306 <_printf_common+0xaa>

20401368 <_printf_i>:
_printf_i():
20401368:	7179                	addi	sp,sp,-48
2040136a:	d422                	sw	s0,40(sp)
2040136c:	d226                	sw	s1,36(sp)
2040136e:	d04a                	sw	s2,32(sp)
20401370:	ce4e                	sw	s3,28(sp)
20401372:	d606                	sw	ra,44(sp)
20401374:	cc52                	sw	s4,24(sp)
20401376:	ca56                	sw	s5,20(sp)
20401378:	c85a                	sw	s6,16(sp)
2040137a:	89b6                	mv	s3,a3
2040137c:	0185c683          	lbu	a3,24(a1)
20401380:	06e00793          	li	a5,110
20401384:	8932                	mv	s2,a2
20401386:	84aa                	mv	s1,a0
20401388:	842e                	mv	s0,a1
2040138a:	04358613          	addi	a2,a1,67
2040138e:	1ef68063          	beq	a3,a5,2040156e <_printf_i+0x206>
20401392:	06d7e263          	bltu	a5,a3,204013f6 <_printf_i+0x8e>
20401396:	06300793          	li	a5,99
2040139a:	0af68263          	beq	a3,a5,2040143e <_printf_i+0xd6>
2040139e:	00d7ed63          	bltu	a5,a3,204013b8 <_printf_i+0x50>
204013a2:	1e068a63          	beqz	a3,20401596 <_printf_i+0x22e>
204013a6:	05800793          	li	a5,88
204013aa:	16f68663          	beq	a3,a5,20401516 <_printf_i+0x1ae>
204013ae:	04240a93          	addi	s5,s0,66
204013b2:	04d40123          	sb	a3,66(s0)
204013b6:	a869                	j	20401450 <_printf_i+0xe8>
204013b8:	06400793          	li	a5,100
204013bc:	00f68663          	beq	a3,a5,204013c8 <_printf_i+0x60>
204013c0:	06900793          	li	a5,105
204013c4:	fef695e3          	bne	a3,a5,204013ae <_printf_i+0x46>
204013c8:	401c                	lw	a5,0(s0)
204013ca:	4308                	lw	a0,0(a4)
204013cc:	0807f693          	andi	a3,a5,128
204013d0:	00450593          	addi	a1,a0,4
204013d4:	c2c1                	beqz	a3,20401454 <_printf_i+0xec>
204013d6:	411c                	lw	a5,0(a0)
204013d8:	c30c                	sw	a1,0(a4)
204013da:	0007d863          	bgez	a5,204013ea <_printf_i+0x82>
204013de:	02d00713          	li	a4,45
204013e2:	40f007b3          	neg	a5,a5
204013e6:	04e401a3          	sb	a4,67(s0)
204013ea:	00004697          	auipc	a3,0x4
204013ee:	d8a68693          	addi	a3,a3,-630 # 20405174 <__sf_fake_stdout+0x34>
204013f2:	4729                	li	a4,10
204013f4:	a065                	j	2040149c <_printf_i+0x134>
204013f6:	07300793          	li	a5,115
204013fa:	1af68263          	beq	a3,a5,2040159e <_printf_i+0x236>
204013fe:	00d7ef63          	bltu	a5,a3,2040141c <_printf_i+0xb4>
20401402:	06f00793          	li	a5,111
20401406:	04f68f63          	beq	a3,a5,20401464 <_printf_i+0xfc>
2040140a:	07000793          	li	a5,112
2040140e:	faf690e3          	bne	a3,a5,204013ae <_printf_i+0x46>
20401412:	419c                	lw	a5,0(a1)
20401414:	0207e793          	ori	a5,a5,32
20401418:	c19c                	sw	a5,0(a1)
2040141a:	a809                	j	2040142c <_printf_i+0xc4>
2040141c:	07500793          	li	a5,117
20401420:	04f68263          	beq	a3,a5,20401464 <_printf_i+0xfc>
20401424:	07800793          	li	a5,120
20401428:	f8f693e3          	bne	a3,a5,204013ae <_printf_i+0x46>
2040142c:	07800793          	li	a5,120
20401430:	04f402a3          	sb	a5,69(s0)
20401434:	00004697          	auipc	a3,0x4
20401438:	d5468693          	addi	a3,a3,-684 # 20405188 <__sf_fake_stdout+0x48>
2040143c:	a0dd                	j	20401522 <_printf_i+0x1ba>
2040143e:	431c                	lw	a5,0(a4)
20401440:	04258a93          	addi	s5,a1,66
20401444:	00478693          	addi	a3,a5,4
20401448:	439c                	lw	a5,0(a5)
2040144a:	c314                	sw	a3,0(a4)
2040144c:	04f58123          	sb	a5,66(a1)
20401450:	4785                	li	a5,1
20401452:	a2ad                	j	204015bc <_printf_i+0x254>
20401454:	0407f693          	andi	a3,a5,64
20401458:	411c                	lw	a5,0(a0)
2040145a:	c30c                	sw	a1,0(a4)
2040145c:	debd                	beqz	a3,204013da <_printf_i+0x72>
2040145e:	07c2                	slli	a5,a5,0x10
20401460:	87c1                	srai	a5,a5,0x10
20401462:	bfa5                	j	204013da <_printf_i+0x72>
20401464:	400c                	lw	a1,0(s0)
20401466:	431c                	lw	a5,0(a4)
20401468:	0805f813          	andi	a6,a1,128
2040146c:	00478513          	addi	a0,a5,4
20401470:	00080563          	beqz	a6,2040147a <_printf_i+0x112>
20401474:	c308                	sw	a0,0(a4)
20401476:	439c                	lw	a5,0(a5)
20401478:	a039                	j	20401486 <_printf_i+0x11e>
2040147a:	0405f593          	andi	a1,a1,64
2040147e:	c308                	sw	a0,0(a4)
20401480:	d9fd                	beqz	a1,20401476 <_printf_i+0x10e>
20401482:	0007d783          	lhu	a5,0(a5)
20401486:	06f00713          	li	a4,111
2040148a:	0ce68a63          	beq	a3,a4,2040155e <_printf_i+0x1f6>
2040148e:	00004697          	auipc	a3,0x4
20401492:	ce668693          	addi	a3,a3,-794 # 20405174 <__sf_fake_stdout+0x34>
20401496:	4729                	li	a4,10
20401498:	040401a3          	sb	zero,67(s0)
2040149c:	404c                	lw	a1,4(s0)
2040149e:	c40c                	sw	a1,8(s0)
204014a0:	0005c563          	bltz	a1,204014aa <_printf_i+0x142>
204014a4:	4008                	lw	a0,0(s0)
204014a6:	996d                	andi	a0,a0,-5
204014a8:	c008                	sw	a0,0(s0)
204014aa:	e399                	bnez	a5,204014b0 <_printf_i+0x148>
204014ac:	8ab2                	mv	s5,a2
204014ae:	cd91                	beqz	a1,204014ca <_printf_i+0x162>
204014b0:	8ab2                	mv	s5,a2
204014b2:	02e7f5b3          	remu	a1,a5,a4
204014b6:	1afd                	addi	s5,s5,-1
204014b8:	95b6                	add	a1,a1,a3
204014ba:	0005c583          	lbu	a1,0(a1)
204014be:	00ba8023          	sb	a1,0(s5)
204014c2:	02e7d5b3          	divu	a1,a5,a4
204014c6:	0ae7f263          	bgeu	a5,a4,2040156a <_printf_i+0x202>
204014ca:	47a1                	li	a5,8
204014cc:	00f71e63          	bne	a4,a5,204014e8 <_printf_i+0x180>
204014d0:	401c                	lw	a5,0(s0)
204014d2:	8b85                	andi	a5,a5,1
204014d4:	cb91                	beqz	a5,204014e8 <_printf_i+0x180>
204014d6:	4058                	lw	a4,4(s0)
204014d8:	481c                	lw	a5,16(s0)
204014da:	00e7c763          	blt	a5,a4,204014e8 <_printf_i+0x180>
204014de:	03000793          	li	a5,48
204014e2:	fefa8fa3          	sb	a5,-1(s5)
204014e6:	1afd                	addi	s5,s5,-1
204014e8:	41560633          	sub	a2,a2,s5
204014ec:	c810                	sw	a2,16(s0)
204014ee:	874e                	mv	a4,s3
204014f0:	86ca                	mv	a3,s2
204014f2:	0070                	addi	a2,sp,12
204014f4:	85a2                	mv	a1,s0
204014f6:	8526                	mv	a0,s1
204014f8:	3395                	jal	2040125c <_printf_common>
204014fa:	5a7d                	li	s4,-1
204014fc:	0d451463          	bne	a0,s4,204015c4 <_printf_i+0x25c>
20401500:	557d                	li	a0,-1
20401502:	50b2                	lw	ra,44(sp)
20401504:	5422                	lw	s0,40(sp)
20401506:	5492                	lw	s1,36(sp)
20401508:	5902                	lw	s2,32(sp)
2040150a:	49f2                	lw	s3,28(sp)
2040150c:	4a62                	lw	s4,24(sp)
2040150e:	4ad2                	lw	s5,20(sp)
20401510:	4b42                	lw	s6,16(sp)
20401512:	6145                	addi	sp,sp,48
20401514:	8082                	ret
20401516:	04d582a3          	sb	a3,69(a1)
2040151a:	00004697          	auipc	a3,0x4
2040151e:	c5a68693          	addi	a3,a3,-934 # 20405174 <__sf_fake_stdout+0x34>
20401522:	400c                	lw	a1,0(s0)
20401524:	4308                	lw	a0,0(a4)
20401526:	0805f813          	andi	a6,a1,128
2040152a:	411c                	lw	a5,0(a0)
2040152c:	0511                	addi	a0,a0,4
2040152e:	02080063          	beqz	a6,2040154e <_printf_i+0x1e6>
20401532:	c308                	sw	a0,0(a4)
20401534:	0015f713          	andi	a4,a1,1
20401538:	c701                	beqz	a4,20401540 <_printf_i+0x1d8>
2040153a:	0205e593          	ori	a1,a1,32
2040153e:	c00c                	sw	a1,0(s0)
20401540:	4741                	li	a4,16
20401542:	fbb9                	bnez	a5,20401498 <_printf_i+0x130>
20401544:	400c                	lw	a1,0(s0)
20401546:	fdf5f593          	andi	a1,a1,-33
2040154a:	c00c                	sw	a1,0(s0)
2040154c:	b7b1                	j	20401498 <_printf_i+0x130>
2040154e:	0405f813          	andi	a6,a1,64
20401552:	c308                	sw	a0,0(a4)
20401554:	fe0800e3          	beqz	a6,20401534 <_printf_i+0x1cc>
20401558:	07c2                	slli	a5,a5,0x10
2040155a:	83c1                	srli	a5,a5,0x10
2040155c:	bfe1                	j	20401534 <_printf_i+0x1cc>
2040155e:	00004697          	auipc	a3,0x4
20401562:	c1668693          	addi	a3,a3,-1002 # 20405174 <__sf_fake_stdout+0x34>
20401566:	4721                	li	a4,8
20401568:	bf05                	j	20401498 <_printf_i+0x130>
2040156a:	87ae                	mv	a5,a1
2040156c:	b799                	j	204014b2 <_printf_i+0x14a>
2040156e:	4194                	lw	a3,0(a1)
20401570:	431c                	lw	a5,0(a4)
20401572:	49cc                	lw	a1,20(a1)
20401574:	0806f813          	andi	a6,a3,128
20401578:	00478513          	addi	a0,a5,4
2040157c:	00080663          	beqz	a6,20401588 <_printf_i+0x220>
20401580:	c308                	sw	a0,0(a4)
20401582:	439c                	lw	a5,0(a5)
20401584:	c38c                	sw	a1,0(a5)
20401586:	a801                	j	20401596 <_printf_i+0x22e>
20401588:	c308                	sw	a0,0(a4)
2040158a:	0406f693          	andi	a3,a3,64
2040158e:	439c                	lw	a5,0(a5)
20401590:	daf5                	beqz	a3,20401584 <_printf_i+0x21c>
20401592:	00b79023          	sh	a1,0(a5)
20401596:	00042823          	sw	zero,16(s0)
2040159a:	8ab2                	mv	s5,a2
2040159c:	bf89                	j	204014ee <_printf_i+0x186>
2040159e:	431c                	lw	a5,0(a4)
204015a0:	41d0                	lw	a2,4(a1)
204015a2:	4581                	li	a1,0
204015a4:	00478693          	addi	a3,a5,4
204015a8:	c314                	sw	a3,0(a4)
204015aa:	0007aa83          	lw	s5,0(a5)
204015ae:	8556                	mv	a0,s5
204015b0:	3179                	jal	2040123e <memchr>
204015b2:	c501                	beqz	a0,204015ba <_printf_i+0x252>
204015b4:	41550533          	sub	a0,a0,s5
204015b8:	c048                	sw	a0,4(s0)
204015ba:	405c                	lw	a5,4(s0)
204015bc:	c81c                	sw	a5,16(s0)
204015be:	040401a3          	sb	zero,67(s0)
204015c2:	b735                	j	204014ee <_printf_i+0x186>
204015c4:	4814                	lw	a3,16(s0)
204015c6:	8656                	mv	a2,s5
204015c8:	85ca                	mv	a1,s2
204015ca:	8526                	mv	a0,s1
204015cc:	9982                	jalr	s3
204015ce:	f34509e3          	beq	a0,s4,20401500 <_printf_i+0x198>
204015d2:	401c                	lw	a5,0(s0)
204015d4:	8b89                	andi	a5,a5,2
204015d6:	e78d                	bnez	a5,20401600 <_printf_i+0x298>
204015d8:	47b2                	lw	a5,12(sp)
204015da:	4448                	lw	a0,12(s0)
204015dc:	f2f553e3          	bge	a0,a5,20401502 <_printf_i+0x19a>
204015e0:	853e                	mv	a0,a5
204015e2:	b705                	j	20401502 <_printf_i+0x19a>
204015e4:	4685                	li	a3,1
204015e6:	8656                	mv	a2,s5
204015e8:	85ca                	mv	a1,s2
204015ea:	8526                	mv	a0,s1
204015ec:	9982                	jalr	s3
204015ee:	f16509e3          	beq	a0,s6,20401500 <_printf_i+0x198>
204015f2:	0a05                	addi	s4,s4,1
204015f4:	445c                	lw	a5,12(s0)
204015f6:	4732                	lw	a4,12(sp)
204015f8:	8f99                	sub	a5,a5,a4
204015fa:	fefa45e3          	blt	s4,a5,204015e4 <_printf_i+0x27c>
204015fe:	bfe9                	j	204015d8 <_printf_i+0x270>
20401600:	4a01                	li	s4,0
20401602:	01940a93          	addi	s5,s0,25
20401606:	5b7d                	li	s6,-1
20401608:	b7f5                	j	204015f4 <_printf_i+0x28c>

2040160a <_read_r>:
_read_r():
2040160a:	1141                	addi	sp,sp,-16
2040160c:	c422                	sw	s0,8(sp)
2040160e:	842a                	mv	s0,a0
20401610:	852e                	mv	a0,a1
20401612:	85b2                	mv	a1,a2
20401614:	8636                	mv	a2,a3
20401616:	5fc04797          	auipc	a5,0x5fc04
2040161a:	1e07ad23          	sw	zero,506(a5) # 80005810 <errno>
2040161e:	c606                	sw	ra,12(sp)
20401620:	2845                	jal	204016d0 <_read>
20401622:	57fd                	li	a5,-1
20401624:	00f51963          	bne	a0,a5,20401636 <_read_r+0x2c>
20401628:	5fc04797          	auipc	a5,0x5fc04
2040162c:	1e878793          	addi	a5,a5,488 # 80005810 <errno>
20401630:	439c                	lw	a5,0(a5)
20401632:	c391                	beqz	a5,20401636 <_read_r+0x2c>
20401634:	c01c                	sw	a5,0(s0)
20401636:	40b2                	lw	ra,12(sp)
20401638:	4422                	lw	s0,8(sp)
2040163a:	0141                	addi	sp,sp,16
2040163c:	8082                	ret

2040163e <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
2040163e:	1101                	addi	sp,sp,-32
20401640:	ce06                	sw	ra,28(sp)
20401642:	cc22                	sw	s0,24(sp)
20401644:	1000                	addi	s0,sp,32
20401646:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
2040164a:	225d                	jal	204017f0 <__errno>
2040164c:	872a                	mv	a4,a0
2040164e:	05800793          	li	a5,88
20401652:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401654:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401656:	853e                	mv	a0,a5
20401658:	40f2                	lw	ra,28(sp)
2040165a:	4462                	lw	s0,24(sp)
2040165c:	6105                	addi	sp,sp,32
2040165e:	8082                	ret

20401660 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401660:	1101                	addi	sp,sp,-32
20401662:	ce06                	sw	ra,28(sp)
20401664:	cc22                	sw	s0,24(sp)
20401666:	1000                	addi	s0,sp,32
20401668:	fea42623          	sw	a0,-20(s0)
2040166c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401670:	2241                	jal	204017f0 <__errno>
20401672:	872a                	mv	a4,a0
20401674:	fa800793          	li	a5,-88
20401678:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
2040167a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
2040167c:	853e                	mv	a0,a5
2040167e:	40f2                	lw	ra,28(sp)
20401680:	4462                	lw	s0,24(sp)
20401682:	6105                	addi	sp,sp,32
20401684:	8082                	ret

20401686 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401686:	1101                	addi	sp,sp,-32
20401688:	ce22                	sw	s0,28(sp)
2040168a:	1000                	addi	s0,sp,32
2040168c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401690:	fec42783          	lw	a5,-20(s0)
20401694:	17fd                	addi	a5,a5,-1
20401696:	0017b793          	seqz	a5,a5
2040169a:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
2040169e:	853e                	mv	a0,a5
204016a0:	4472                	lw	s0,28(sp)
204016a2:	6105                	addi	sp,sp,32
204016a4:	8082                	ret

204016a6 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
204016a6:	1101                	addi	sp,sp,-32
204016a8:	ce06                	sw	ra,28(sp)
204016aa:	cc22                	sw	s0,24(sp)
204016ac:	1000                	addi	s0,sp,32
204016ae:	fea42623          	sw	a0,-20(s0)
204016b2:	feb42423          	sw	a1,-24(s0)
204016b6:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204016ba:	2a1d                	jal	204017f0 <__errno>
204016bc:	872a                	mv	a4,a0
204016be:	05800793          	li	a5,88
204016c2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
204016c4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
204016c6:	853e                	mv	a0,a5
204016c8:	40f2                	lw	ra,28(sp)
204016ca:	4462                	lw	s0,24(sp)
204016cc:	6105                	addi	sp,sp,32
204016ce:	8082                	ret

204016d0 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
204016d0:	1101                	addi	sp,sp,-32
204016d2:	ce06                	sw	ra,28(sp)
204016d4:	cc22                	sw	s0,24(sp)
204016d6:	1000                	addi	s0,sp,32
204016d8:	fea42623          	sw	a0,-20(s0)
204016dc:	feb42423          	sw	a1,-24(s0)
204016e0:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204016e4:	2231                	jal	204017f0 <__errno>
204016e6:	872a                	mv	a4,a0
204016e8:	05800793          	li	a5,88
204016ec:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204016ee:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204016f0:	853e                	mv	a0,a5
204016f2:	40f2                	lw	ra,28(sp)
204016f4:	4462                	lw	s0,24(sp)
204016f6:	6105                	addi	sp,sp,32
204016f8:	8082                	ret

204016fa <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204016fa:	7179                	addi	sp,sp,-48
204016fc:	d622                	sw	s0,44(sp)
204016fe:	1800                	addi	s0,sp,48
20401700:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401704:	800007b7          	lui	a5,0x80000
20401708:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffa33c>
2040170c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401710:	800067b7          	lui	a5,0x80006
20401714:	c1478713          	addi	a4,a5,-1004 # 80005c14 <metal_segment_heap_target_end+0xfffff800>
20401718:	800067b7          	lui	a5,0x80006
2040171c:	41478793          	addi	a5,a5,1044 # 80006414 <metal_segment_heap_target_end+0x0>
20401720:	00f71463          	bne	a4,a5,20401728 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401724:	57fd                	li	a5,-1
20401726:	a0a9                	j	20401770 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401728:	800007b7          	lui	a5,0x80000
2040172c:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffa33c>
20401730:	fdc42783          	lw	a5,-36(s0)
20401734:	973e                	add	a4,a4,a5
20401736:	800067b7          	lui	a5,0x80006
2040173a:	41478793          	addi	a5,a5,1044 # 80006414 <metal_segment_heap_target_end+0x0>
2040173e:	02f77063          	bgeu	a4,a5,2040175e <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401742:	800007b7          	lui	a5,0x80000
20401746:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffa33c>
2040174a:	fdc42783          	lw	a5,-36(s0)
2040174e:	973e                	add	a4,a4,a5
20401750:	800007b7          	lui	a5,0x80000
20401754:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffa33c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401758:	fec42783          	lw	a5,-20(s0)
2040175c:	a811                	j	20401770 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040175e:	800007b7          	lui	a5,0x80000
20401762:	80006737          	lui	a4,0x80006
20401766:	41470713          	addi	a4,a4,1044 # 80006414 <metal_segment_heap_target_end+0x0>
2040176a:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffa33c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
2040176e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401770:	853e                	mv	a0,a5
20401772:	5432                	lw	s0,44(sp)
20401774:	6145                	addi	sp,sp,48
20401776:	8082                	ret

20401778 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401778:	7179                	addi	sp,sp,-48
2040177a:	d606                	sw	ra,44(sp)
2040177c:	d422                	sw	s0,40(sp)
2040177e:	1800                	addi	s0,sp,48
20401780:	fca42e23          	sw	a0,-36(s0)
20401784:	fcb42c23          	sw	a1,-40(s0)
20401788:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
2040178c:	fdc42703          	lw	a4,-36(s0)
20401790:	4785                	li	a5,1
20401792:	00f70963          	beq	a4,a5,204017a4 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401796:	28a9                	jal	204017f0 <__errno>
20401798:	872a                	mv	a4,a0
2040179a:	05800793          	li	a5,88
2040179e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204017a0:	57fd                	li	a5,-1
204017a2:	a82d                	j	204017dc <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204017a4:	fd842783          	lw	a5,-40(s0)
204017a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
204017ac:	fe042623          	sw	zero,-20(s0)
204017b0:	a839                	j	204017ce <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204017b2:	fe842703          	lw	a4,-24(s0)
204017b6:	fec42783          	lw	a5,-20(s0)
204017ba:	97ba                	add	a5,a5,a4
204017bc:	0007c783          	lbu	a5,0(a5)
204017c0:	853e                	mv	a0,a5
204017c2:	2cb1                	jal	20401a1e <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
204017c4:	fec42783          	lw	a5,-20(s0)
204017c8:	0785                	addi	a5,a5,1
204017ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204017ce:	fec42703          	lw	a4,-20(s0)
204017d2:	fd442783          	lw	a5,-44(s0)
204017d6:	fcf76ee3          	bltu	a4,a5,204017b2 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204017da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204017dc:	853e                	mv	a0,a5
204017de:	50b2                	lw	ra,44(sp)
204017e0:	5422                	lw	s0,40(sp)
204017e2:	6145                	addi	sp,sp,48
204017e4:	8082                	ret

204017e6 <atexit>:
atexit():
204017e6:	85aa                	mv	a1,a0
204017e8:	4681                	li	a3,0
204017ea:	4601                	li	a2,0
204017ec:	4501                	li	a0,0
204017ee:	a8f1                	j	204018ca <__register_exitproc>

204017f0 <__errno>:
__errno():
204017f0:	5fbff797          	auipc	a5,0x5fbff
204017f4:	f5878793          	addi	a5,a5,-168 # 80000748 <_impure_ptr>
204017f8:	4388                	lw	a0,0(a5)
204017fa:	8082                	ret

204017fc <exit>:
exit():
204017fc:	1141                	addi	sp,sp,-16
204017fe:	c422                	sw	s0,8(sp)
20401800:	c606                	sw	ra,12(sp)
20401802:	00000797          	auipc	a5,0x0
20401806:	15478793          	addi	a5,a5,340 # 20401956 <__call_exitprocs>
2040180a:	842a                	mv	s0,a0
2040180c:	c399                	beqz	a5,20401812 <exit+0x16>
2040180e:	4581                	li	a1,0
20401810:	2299                	jal	20401956 <__call_exitprocs>
20401812:	5fbff797          	auipc	a5,0x5fbff
20401816:	f3a78793          	addi	a5,a5,-198 # 8000074c <_global_impure_ptr>
2040181a:	4388                	lw	a0,0(a5)
2040181c:	551c                	lw	a5,40(a0)
2040181e:	c391                	beqz	a5,20401822 <exit+0x26>
20401820:	9782                	jalr	a5
20401822:	8522                	mv	a0,s0
20401824:	04b030ef          	jal	ra,2040506e <_exit>

20401828 <__libc_fini_array>:
__libc_fini_array():
20401828:	1141                	addi	sp,sp,-16
2040182a:	00004797          	auipc	a5,0x4
2040182e:	cca78793          	addi	a5,a5,-822 # 204054f4 <__fini_array_end>
20401832:	c422                	sw	s0,8(sp)
20401834:	00004417          	auipc	s0,0x4
20401838:	cc040413          	addi	s0,s0,-832 # 204054f4 <__fini_array_end>
2040183c:	8c1d                	sub	s0,s0,a5
2040183e:	c226                	sw	s1,4(sp)
20401840:	c606                	sw	ra,12(sp)
20401842:	8409                	srai	s0,s0,0x2
20401844:	84be                	mv	s1,a5
20401846:	e411                	bnez	s0,20401852 <__libc_fini_array+0x2a>
20401848:	40b2                	lw	ra,12(sp)
2040184a:	4422                	lw	s0,8(sp)
2040184c:	4492                	lw	s1,4(sp)
2040184e:	0141                	addi	sp,sp,16
20401850:	8082                	ret
20401852:	147d                	addi	s0,s0,-1
20401854:	00241793          	slli	a5,s0,0x2
20401858:	97a6                	add	a5,a5,s1
2040185a:	439c                	lw	a5,0(a5)
2040185c:	9782                	jalr	a5
2040185e:	b7e5                	j	20401846 <__libc_fini_array+0x1e>

20401860 <__libc_init_array>:
__libc_init_array():
20401860:	1141                	addi	sp,sp,-16
20401862:	00004797          	auipc	a5,0x4
20401866:	c8e78793          	addi	a5,a5,-882 # 204054f0 <__init_array_start>
2040186a:	c422                	sw	s0,8(sp)
2040186c:	00004417          	auipc	s0,0x4
20401870:	c8440413          	addi	s0,s0,-892 # 204054f0 <__init_array_start>
20401874:	8c1d                	sub	s0,s0,a5
20401876:	c226                	sw	s1,4(sp)
20401878:	c04a                	sw	s2,0(sp)
2040187a:	c606                	sw	ra,12(sp)
2040187c:	8409                	srai	s0,s0,0x2
2040187e:	4481                	li	s1,0
20401880:	893e                	mv	s2,a5
20401882:	02849663          	bne	s1,s0,204018ae <__libc_init_array+0x4e>
20401886:	00004797          	auipc	a5,0x4
2040188a:	c6a78793          	addi	a5,a5,-918 # 204054f0 <__init_array_start>
2040188e:	00004417          	auipc	s0,0x4
20401892:	c6640413          	addi	s0,s0,-922 # 204054f4 <__fini_array_end>
20401896:	8c1d                	sub	s0,s0,a5
20401898:	8409                	srai	s0,s0,0x2
2040189a:	4481                	li	s1,0
2040189c:	893e                	mv	s2,a5
2040189e:	00849f63          	bne	s1,s0,204018bc <__libc_init_array+0x5c>
204018a2:	40b2                	lw	ra,12(sp)
204018a4:	4422                	lw	s0,8(sp)
204018a6:	4492                	lw	s1,4(sp)
204018a8:	4902                	lw	s2,0(sp)
204018aa:	0141                	addi	sp,sp,16
204018ac:	8082                	ret
204018ae:	00249793          	slli	a5,s1,0x2
204018b2:	97ca                	add	a5,a5,s2
204018b4:	439c                	lw	a5,0(a5)
204018b6:	0485                	addi	s1,s1,1
204018b8:	9782                	jalr	a5
204018ba:	b7e1                	j	20401882 <__libc_init_array+0x22>
204018bc:	00249793          	slli	a5,s1,0x2
204018c0:	97ca                	add	a5,a5,s2
204018c2:	439c                	lw	a5,0(a5)
204018c4:	0485                	addi	s1,s1,1
204018c6:	9782                	jalr	a5
204018c8:	bfd9                	j	2040189e <__libc_init_array+0x3e>

204018ca <__register_exitproc>:
__register_exitproc():
204018ca:	5fbff797          	auipc	a5,0x5fbff
204018ce:	eae78793          	addi	a5,a5,-338 # 80000778 <_global_atexit>
204018d2:	439c                	lw	a5,0(a5)
204018d4:	8e2a                	mv	t3,a0
204018d6:	e78d                	bnez	a5,20401900 <__register_exitproc+0x36>
204018d8:	5fc04717          	auipc	a4,0x5fc04
204018dc:	eac70713          	addi	a4,a4,-340 # 80005784 <_global_atexit0>
204018e0:	5fbff797          	auipc	a5,0x5fbff
204018e4:	e8e7ac23          	sw	a4,-360(a5) # 80000778 <_global_atexit>
204018e8:	dfbfe517          	auipc	a0,0xdfbfe
204018ec:	71850513          	addi	a0,a0,1816 # 0 <__metal_boot_hart>
204018f0:	87ba                	mv	a5,a4
204018f2:	c519                	beqz	a0,20401900 <__register_exitproc+0x36>
204018f4:	411c                	lw	a5,0(a0)
204018f6:	5fc04517          	auipc	a0,0x5fc04
204018fa:	f0f52b23          	sw	a5,-234(a0) # 8000580c <_global_atexit0+0x88>
204018fe:	87ba                	mv	a5,a4
20401900:	43d8                	lw	a4,4(a5)
20401902:	487d                	li	a6,31
20401904:	557d                	li	a0,-1
20401906:	04e84763          	blt	a6,a4,20401954 <__register_exitproc+0x8a>
2040190a:	020e0e63          	beqz	t3,20401946 <__register_exitproc+0x7c>
2040190e:	0887a803          	lw	a6,136(a5)
20401912:	04080163          	beqz	a6,20401954 <__register_exitproc+0x8a>
20401916:	00271893          	slli	a7,a4,0x2
2040191a:	98c2                	add	a7,a7,a6
2040191c:	00c8a023          	sw	a2,0(a7)
20401920:	10082303          	lw	t1,256(a6)
20401924:	4605                	li	a2,1
20401926:	00e61633          	sll	a2,a2,a4
2040192a:	00c36333          	or	t1,t1,a2
2040192e:	10682023          	sw	t1,256(a6)
20401932:	08d8a023          	sw	a3,128(a7)
20401936:	4689                	li	a3,2
20401938:	00de1763          	bne	t3,a3,20401946 <__register_exitproc+0x7c>
2040193c:	10482683          	lw	a3,260(a6)
20401940:	8e55                	or	a2,a2,a3
20401942:	10c82223          	sw	a2,260(a6)
20401946:	00170693          	addi	a3,a4,1
2040194a:	070a                	slli	a4,a4,0x2
2040194c:	c3d4                	sw	a3,4(a5)
2040194e:	97ba                	add	a5,a5,a4
20401950:	c78c                	sw	a1,8(a5)
20401952:	4501                	li	a0,0
20401954:	8082                	ret

20401956 <__call_exitprocs>:
__call_exitprocs():
20401956:	7179                	addi	sp,sp,-48
20401958:	cc52                	sw	s4,24(sp)
2040195a:	ca56                	sw	s5,20(sp)
2040195c:	c85a                	sw	s6,16(sp)
2040195e:	c65e                	sw	s7,12(sp)
20401960:	d606                	sw	ra,44(sp)
20401962:	d422                	sw	s0,40(sp)
20401964:	d226                	sw	s1,36(sp)
20401966:	d04a                	sw	s2,32(sp)
20401968:	ce4e                	sw	s3,28(sp)
2040196a:	c462                	sw	s8,8(sp)
2040196c:	8b2a                	mv	s6,a0
2040196e:	8a2e                	mv	s4,a1
20401970:	5fbffa97          	auipc	s5,0x5fbff
20401974:	e08a8a93          	addi	s5,s5,-504 # 80000778 <_global_atexit>
20401978:	4b85                	li	s7,1
2040197a:	000aa403          	lw	s0,0(s5)
2040197e:	c811                	beqz	s0,20401992 <__call_exitprocs+0x3c>
20401980:	4044                	lw	s1,4(s0)
20401982:	08842983          	lw	s3,136(s0)
20401986:	fff48913          	addi	s2,s1,-1
2040198a:	048a                	slli	s1,s1,0x2
2040198c:	94a2                	add	s1,s1,s0
2040198e:	00095e63          	bgez	s2,204019aa <__call_exitprocs+0x54>
20401992:	50b2                	lw	ra,44(sp)
20401994:	5422                	lw	s0,40(sp)
20401996:	5492                	lw	s1,36(sp)
20401998:	5902                	lw	s2,32(sp)
2040199a:	49f2                	lw	s3,28(sp)
2040199c:	4a62                	lw	s4,24(sp)
2040199e:	4ad2                	lw	s5,20(sp)
204019a0:	4b42                	lw	s6,16(sp)
204019a2:	4bb2                	lw	s7,12(sp)
204019a4:	4c22                	lw	s8,8(sp)
204019a6:	6145                	addi	sp,sp,48
204019a8:	8082                	ret
204019aa:	000a0e63          	beqz	s4,204019c6 <__call_exitprocs+0x70>
204019ae:	00099563          	bnez	s3,204019b8 <__call_exitprocs+0x62>
204019b2:	197d                	addi	s2,s2,-1
204019b4:	14f1                	addi	s1,s1,-4
204019b6:	bfe1                	j	2040198e <__call_exitprocs+0x38>
204019b8:	00291793          	slli	a5,s2,0x2
204019bc:	97ce                	add	a5,a5,s3
204019be:	0807a783          	lw	a5,128(a5)
204019c2:	ff4798e3          	bne	a5,s4,204019b2 <__call_exitprocs+0x5c>
204019c6:	4058                	lw	a4,4(s0)
204019c8:	40dc                	lw	a5,4(s1)
204019ca:	177d                	addi	a4,a4,-1
204019cc:	03271863          	bne	a4,s2,204019fc <__call_exitprocs+0xa6>
204019d0:	01242223          	sw	s2,4(s0)
204019d4:	dff9                	beqz	a5,204019b2 <__call_exitprocs+0x5c>
204019d6:	00442c03          	lw	s8,4(s0)
204019da:	00098863          	beqz	s3,204019ea <__call_exitprocs+0x94>
204019de:	1009a683          	lw	a3,256(s3)
204019e2:	012b9733          	sll	a4,s7,s2
204019e6:	8ef9                	and	a3,a3,a4
204019e8:	ee89                	bnez	a3,20401a02 <__call_exitprocs+0xac>
204019ea:	9782                	jalr	a5
204019ec:	4058                	lw	a4,4(s0)
204019ee:	000aa783          	lw	a5,0(s5)
204019f2:	f98714e3          	bne	a4,s8,2040197a <__call_exitprocs+0x24>
204019f6:	faf40ee3          	beq	s0,a5,204019b2 <__call_exitprocs+0x5c>
204019fa:	b741                	j	2040197a <__call_exitprocs+0x24>
204019fc:	0004a223          	sw	zero,4(s1)
20401a00:	bfd1                	j	204019d4 <__call_exitprocs+0x7e>
20401a02:	00291693          	slli	a3,s2,0x2
20401a06:	96ce                	add	a3,a3,s3
20401a08:	428c                	lw	a1,0(a3)
20401a0a:	1049a683          	lw	a3,260(s3)
20401a0e:	8f75                	and	a4,a4,a3
20401a10:	e701                	bnez	a4,20401a18 <__call_exitprocs+0xc2>
20401a12:	855a                	mv	a0,s6
20401a14:	9782                	jalr	a5
20401a16:	bfd9                	j	204019ec <__call_exitprocs+0x96>
20401a18:	852e                	mv	a0,a1
20401a1a:	9782                	jalr	a5
20401a1c:	bfc1                	j	204019ec <__call_exitprocs+0x96>

20401a1e <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401a1e:	1101                	addi	sp,sp,-32
20401a20:	ce06                	sw	ra,28(sp)
20401a22:	cc22                	sw	s0,24(sp)
20401a24:	1000                	addi	s0,sp,32
20401a26:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401a2a:	fec42703          	lw	a4,-20(s0)
20401a2e:	47a9                	li	a5,10
20401a30:	00f71463          	bne	a4,a5,20401a38 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401a34:	4535                	li	a0,13
20401a36:	2811                	jal	20401a4a <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401a38:	fec42503          	lw	a0,-20(s0)
20401a3c:	2039                	jal	20401a4a <metal_tty_putc_raw>
20401a3e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401a40:	853e                	mv	a0,a5
20401a42:	40f2                	lw	ra,28(sp)
20401a44:	4462                	lw	s0,24(sp)
20401a46:	6105                	addi	sp,sp,32
20401a48:	8082                	ret

20401a4a <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401a4a:	1101                	addi	sp,sp,-32
20401a4c:	ce06                	sw	ra,28(sp)
20401a4e:	cc22                	sw	s0,24(sp)
20401a50:	1000                	addi	s0,sp,32
20401a52:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401a56:	fec42583          	lw	a1,-20(s0)
20401a5a:	800007b7          	lui	a5,0x80000
20401a5e:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20401a62:	28b1                	jal	20401abe <metal_uart_putc>
20401a64:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401a66:	853e                	mv	a0,a5
20401a68:	40f2                	lw	ra,28(sp)
20401a6a:	4462                	lw	s0,24(sp)
20401a6c:	6105                	addi	sp,sp,32
20401a6e:	8082                	ret

20401a70 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401a70:	1141                	addi	sp,sp,-16
20401a72:	c606                	sw	ra,12(sp)
20401a74:	c422                	sw	s0,8(sp)
20401a76:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401a78:	67f1                	lui	a5,0x1c
20401a7a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401a7e:	800007b7          	lui	a5,0x80000
20401a82:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20401a86:	2031                	jal	20401a92 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401a88:	0001                	nop
20401a8a:	40b2                	lw	ra,12(sp)
20401a8c:	4422                	lw	s0,8(sp)
20401a8e:	0141                	addi	sp,sp,16
20401a90:	8082                	ret

20401a92 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401a92:	1101                	addi	sp,sp,-32
20401a94:	ce06                	sw	ra,28(sp)
20401a96:	cc22                	sw	s0,24(sp)
20401a98:	1000                	addi	s0,sp,32
20401a9a:	fea42623          	sw	a0,-20(s0)
20401a9e:	feb42423          	sw	a1,-24(s0)
20401aa2:	fec42783          	lw	a5,-20(s0)
20401aa6:	439c                	lw	a5,0(a5)
20401aa8:	439c                	lw	a5,0(a5)
20401aaa:	fe842583          	lw	a1,-24(s0)
20401aae:	fec42503          	lw	a0,-20(s0)
20401ab2:	9782                	jalr	a5
20401ab4:	0001                	nop
20401ab6:	40f2                	lw	ra,28(sp)
20401ab8:	4462                	lw	s0,24(sp)
20401aba:	6105                	addi	sp,sp,32
20401abc:	8082                	ret

20401abe <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401abe:	1101                	addi	sp,sp,-32
20401ac0:	ce06                	sw	ra,28(sp)
20401ac2:	cc22                	sw	s0,24(sp)
20401ac4:	1000                	addi	s0,sp,32
20401ac6:	fea42623          	sw	a0,-20(s0)
20401aca:	feb42423          	sw	a1,-24(s0)
20401ace:	fec42783          	lw	a5,-20(s0)
20401ad2:	439c                	lw	a5,0(a5)
20401ad4:	43dc                	lw	a5,4(a5)
20401ad6:	fe842583          	lw	a1,-24(s0)
20401ada:	fec42503          	lw	a0,-20(s0)
20401ade:	9782                	jalr	a5
20401ae0:	87aa                	mv	a5,a0
20401ae2:	853e                	mv	a0,a5
20401ae4:	40f2                	lw	ra,28(sp)
20401ae6:	4462                	lw	s0,24(sp)
20401ae8:	6105                	addi	sp,sp,32
20401aea:	8082                	ret

20401aec <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401aec:	1101                	addi	sp,sp,-32
20401aee:	ce06                	sw	ra,28(sp)
20401af0:	cc22                	sw	s0,24(sp)
20401af2:	1000                	addi	s0,sp,32
20401af4:	fea42623          	sw	a0,-20(s0)
20401af8:	feb42423          	sw	a1,-24(s0)
20401afc:	fec42783          	lw	a5,-20(s0)
20401b00:	439c                	lw	a5,0(a5)
20401b02:	4bdc                	lw	a5,20(a5)
20401b04:	fe842583          	lw	a1,-24(s0)
20401b08:	fec42503          	lw	a0,-20(s0)
20401b0c:	9782                	jalr	a5
20401b0e:	87aa                	mv	a5,a0
20401b10:	853e                	mv	a0,a5
20401b12:	40f2                	lw	ra,28(sp)
20401b14:	4462                	lw	s0,24(sp)
20401b16:	6105                	addi	sp,sp,32
20401b18:	8082                	ret

20401b1a <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401b1a:	1101                	addi	sp,sp,-32
20401b1c:	ce22                	sw	s0,28(sp)
20401b1e:	1000                	addi	s0,sp,32
20401b20:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401b24:	fec42703          	lw	a4,-20(s0)
20401b28:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401b2c:	00f71563          	bne	a4,a5,20401b36 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401b30:	020007b7          	lui	a5,0x2000
20401b34:	a011                	j	20401b38 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401b36:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401b38:	853e                	mv	a0,a5
20401b3a:	4472                	lw	s0,28(sp)
20401b3c:	6105                	addi	sp,sp,32
20401b3e:	8082                	ret

20401b40 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401b40:	1101                	addi	sp,sp,-32
20401b42:	ce22                	sw	s0,28(sp)
20401b44:	1000                	addi	s0,sp,32
20401b46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401b4a:	fec42703          	lw	a4,-20(s0)
20401b4e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401b52:	00f71463          	bne	a4,a5,20401b5a <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401b56:	4789                	li	a5,2
20401b58:	a011                	j	20401b5c <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401b5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401b5c:	853e                	mv	a0,a5
20401b5e:	4472                	lw	s0,28(sp)
20401b60:	6105                	addi	sp,sp,32
20401b62:	8082                	ret

20401b64 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401b64:	1101                	addi	sp,sp,-32
20401b66:	ce22                	sw	s0,28(sp)
20401b68:	1000                	addi	s0,sp,32
20401b6a:	fea42623          	sw	a0,-20(s0)
20401b6e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401b72:	fe842783          	lw	a5,-24(s0)
20401b76:	e791                	bnez	a5,20401b82 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401b78:	800007b7          	lui	a5,0x80000
20401b7c:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffff9c5c>
20401b80:	a821                	j	20401b98 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401b82:	fe842703          	lw	a4,-24(s0)
20401b86:	4785                	li	a5,1
20401b88:	00f71763          	bne	a4,a5,20401b96 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401b8c:	800007b7          	lui	a5,0x80000
20401b90:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffff9c5c>
20401b94:	a011                	j	20401b98 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401b96:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20401b98:	853e                	mv	a0,a5
20401b9a:	4472                	lw	s0,28(sp)
20401b9c:	6105                	addi	sp,sp,32
20401b9e:	8082                	ret

20401ba0 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401ba0:	1101                	addi	sp,sp,-32
20401ba2:	ce22                	sw	s0,28(sp)
20401ba4:	1000                	addi	s0,sp,32
20401ba6:	fea42623          	sw	a0,-20(s0)
20401baa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401bae:	fe842783          	lw	a5,-24(s0)
20401bb2:	e399                	bnez	a5,20401bb8 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20401bb4:	478d                	li	a5,3
20401bb6:	a809                	j	20401bc8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401bb8:	fe842703          	lw	a4,-24(s0)
20401bbc:	4785                	li	a5,1
20401bbe:	00f71463          	bne	a4,a5,20401bc6 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20401bc2:	479d                	li	a5,7
20401bc4:	a011                	j	20401bc8 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401bc6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20401bc8:	853e                	mv	a0,a5
20401bca:	4472                	lw	s0,28(sp)
20401bcc:	6105                	addi	sp,sp,32
20401bce:	8082                	ret

20401bd0 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401bd0:	715d                	addi	sp,sp,-80
20401bd2:	c686                	sw	ra,76(sp)
20401bd4:	c4a2                	sw	s0,72(sp)
20401bd6:	c2ca                	sw	s2,68(sp)
20401bd8:	c0ce                	sw	s3,64(sp)
20401bda:	de52                	sw	s4,60(sp)
20401bdc:	dc56                	sw	s5,56(sp)
20401bde:	da5a                	sw	s6,52(sp)
20401be0:	d85e                	sw	s7,48(sp)
20401be2:	d662                	sw	s8,44(sp)
20401be4:	d466                	sw	s9,40(sp)
20401be6:	0880                	addi	s0,sp,80
20401be8:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401bec:	fbc42783          	lw	a5,-68(s0)
20401bf0:	853e                	mv	a0,a5
20401bf2:	3725                	jal	20401b1a <__metal_driver_sifive_clint0_control_base>
20401bf4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401bf8:	fcc42703          	lw	a4,-52(s0)
20401bfc:	67b1                	lui	a5,0xc
20401bfe:	17f1                	addi	a5,a5,-4
20401c00:	97ba                	add	a5,a5,a4
20401c02:	439c                	lw	a5,0(a5)
20401c04:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401c08:	fcc42703          	lw	a4,-52(s0)
20401c0c:	67b1                	lui	a5,0xc
20401c0e:	17e1                	addi	a5,a5,-8
20401c10:	97ba                	add	a5,a5,a4
20401c12:	439c                	lw	a5,0(a5)
20401c14:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401c18:	fcc42703          	lw	a4,-52(s0)
20401c1c:	67b1                	lui	a5,0xc
20401c1e:	17f1                	addi	a5,a5,-4
20401c20:	97ba                	add	a5,a5,a4
20401c22:	439c                	lw	a5,0(a5)
20401c24:	fc842703          	lw	a4,-56(s0)
20401c28:	fcf718e3          	bne	a4,a5,20401bf8 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401c2c:	fc842783          	lw	a5,-56(s0)
20401c30:	8c3e                	mv	s8,a5
20401c32:	4c81                	li	s9,0
20401c34:	000c1993          	slli	s3,s8,0x0
20401c38:	4901                	li	s2,0
20401c3a:	fc442783          	lw	a5,-60(s0)
20401c3e:	8a3e                	mv	s4,a5
20401c40:	4a81                	li	s5,0
20401c42:	01496b33          	or	s6,s2,s4
20401c46:	0159ebb3          	or	s7,s3,s5
20401c4a:	87da                	mv	a5,s6
20401c4c:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401c4e:	853e                	mv	a0,a5
20401c50:	85c2                	mv	a1,a6
20401c52:	40b6                	lw	ra,76(sp)
20401c54:	4426                	lw	s0,72(sp)
20401c56:	4916                	lw	s2,68(sp)
20401c58:	4986                	lw	s3,64(sp)
20401c5a:	5a72                	lw	s4,60(sp)
20401c5c:	5ae2                	lw	s5,56(sp)
20401c5e:	5b52                	lw	s6,52(sp)
20401c60:	5bc2                	lw	s7,48(sp)
20401c62:	5c32                	lw	s8,44(sp)
20401c64:	5ca2                	lw	s9,40(sp)
20401c66:	6161                	addi	sp,sp,80
20401c68:	8082                	ret

20401c6a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401c6a:	7179                	addi	sp,sp,-48
20401c6c:	d606                	sw	ra,44(sp)
20401c6e:	d422                	sw	s0,40(sp)
20401c70:	d24a                	sw	s2,36(sp)
20401c72:	d04e                	sw	s3,32(sp)
20401c74:	1800                	addi	s0,sp,48
20401c76:	fca42e23          	sw	a0,-36(s0)
20401c7a:	fcb42c23          	sw	a1,-40(s0)
20401c7e:	fcc42823          	sw	a2,-48(s0)
20401c82:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401c86:	fdc42783          	lw	a5,-36(s0)
20401c8a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401c8e:	fec42783          	lw	a5,-20(s0)
20401c92:	853e                	mv	a0,a5
20401c94:	3559                	jal	20401b1a <__metal_driver_sifive_clint0_control_base>
20401c96:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401c9a:	fd842783          	lw	a5,-40(s0)
20401c9e:	078e                	slli	a5,a5,0x3
20401ca0:	873e                	mv	a4,a5
20401ca2:	fe842783          	lw	a5,-24(s0)
20401ca6:	973e                	add	a4,a4,a5
20401ca8:	6791                	lui	a5,0x4
20401caa:	0791                	addi	a5,a5,4
20401cac:	97ba                	add	a5,a5,a4
20401cae:	873e                	mv	a4,a5
20401cb0:	57fd                	li	a5,-1
20401cb2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401cb4:	fd842783          	lw	a5,-40(s0)
20401cb8:	078e                	slli	a5,a5,0x3
20401cba:	873e                	mv	a4,a5
20401cbc:	fe842783          	lw	a5,-24(s0)
20401cc0:	973e                	add	a4,a4,a5
20401cc2:	6791                	lui	a5,0x4
20401cc4:	97ba                	add	a5,a5,a4
20401cc6:	873e                	mv	a4,a5
20401cc8:	fd042783          	lw	a5,-48(s0)
20401ccc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401cce:	fd442783          	lw	a5,-44(s0)
20401cd2:	0007d913          	srli	s2,a5,0x0
20401cd6:	4981                	li	s3,0
20401cd8:	fd842783          	lw	a5,-40(s0)
20401cdc:	078e                	slli	a5,a5,0x3
20401cde:	873e                	mv	a4,a5
20401ce0:	fe842783          	lw	a5,-24(s0)
20401ce4:	973e                	add	a4,a4,a5
20401ce6:	6791                	lui	a5,0x4
20401ce8:	0791                	addi	a5,a5,4
20401cea:	97ba                	add	a5,a5,a4
20401cec:	874a                	mv	a4,s2
20401cee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401cf0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401cf2:	853e                	mv	a0,a5
20401cf4:	50b2                	lw	ra,44(sp)
20401cf6:	5422                	lw	s0,40(sp)
20401cf8:	5912                	lw	s2,36(sp)
20401cfa:	5982                	lw	s3,32(sp)
20401cfc:	6145                	addi	sp,sp,48
20401cfe:	8082                	ret

20401d00 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401d00:	1101                	addi	sp,sp,-32
20401d02:	ce06                	sw	ra,28(sp)
20401d04:	cc22                	sw	s0,24(sp)
20401d06:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401d08:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401d0c:	f14027f3          	csrr	a5,mhartid
20401d10:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401d14:	fec42783          	lw	a5,-20(s0)
20401d18:	853e                	mv	a0,a5
20401d1a:	1a8030ef          	jal	ra,20404ec2 <metal_cpu_get>
20401d1e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401d22:	fe842503          	lw	a0,-24(s0)
20401d26:	176030ef          	jal	ra,20404e9c <metal_cpu_interrupt_controller>
20401d2a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401d2c:	853e                	mv	a0,a5
20401d2e:	40f2                	lw	ra,28(sp)
20401d30:	4462                	lw	s0,24(sp)
20401d32:	6105                	addi	sp,sp,32
20401d34:	8082                	ret

20401d36 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401d36:	7139                	addi	sp,sp,-64
20401d38:	de06                	sw	ra,60(sp)
20401d3a:	dc22                	sw	s0,56(sp)
20401d3c:	0080                	addi	s0,sp,64
20401d3e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401d42:	fcc42503          	lw	a0,-52(s0)
20401d46:	3bed                	jal	20401b40 <__metal_driver_sifive_clint0_num_interrupts>
20401d48:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401d4c:	fcc42783          	lw	a5,-52(s0)
20401d50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401d54:	fe442783          	lw	a5,-28(s0)
20401d58:	43dc                	lw	a5,4(a5)
20401d5a:	efa9                	bnez	a5,20401db4 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401d5c:	fe042623          	sw	zero,-20(s0)
20401d60:	a081                	j	20401da0 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401d62:	fec42583          	lw	a1,-20(s0)
20401d66:	fcc42503          	lw	a0,-52(s0)
20401d6a:	3bed                	jal	20401b64 <__metal_driver_sifive_clint0_interrupt_parents>
20401d6c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401d70:	fec42583          	lw	a1,-20(s0)
20401d74:	fcc42503          	lw	a0,-52(s0)
20401d78:	3525                	jal	20401ba0 <__metal_driver_sifive_clint0_interrupt_lines>
20401d7a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401d7e:	fe042783          	lw	a5,-32(s0)
20401d82:	439c                	lw	a5,0(a5)
20401d84:	4fdc                	lw	a5,28(a5)
20401d86:	fcc42683          	lw	a3,-52(s0)
20401d8a:	4601                	li	a2,0
20401d8c:	fdc42583          	lw	a1,-36(s0)
20401d90:	fe042503          	lw	a0,-32(s0)
20401d94:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401d96:	fec42783          	lw	a5,-20(s0)
20401d9a:	0785                	addi	a5,a5,1
20401d9c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401da0:	fec42703          	lw	a4,-20(s0)
20401da4:	fe842783          	lw	a5,-24(s0)
20401da8:	faf74de3          	blt	a4,a5,20401d62 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401dac:	fe442783          	lw	a5,-28(s0)
20401db0:	4705                	li	a4,1
20401db2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401db4:	0001                	nop
20401db6:	50f2                	lw	ra,60(sp)
20401db8:	5462                	lw	s0,56(sp)
20401dba:	6121                	addi	sp,sp,64
20401dbc:	8082                	ret

20401dbe <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401dbe:	7139                	addi	sp,sp,-64
20401dc0:	de06                	sw	ra,60(sp)
20401dc2:	dc22                	sw	s0,56(sp)
20401dc4:	0080                	addi	s0,sp,64
20401dc6:	fca42623          	sw	a0,-52(s0)
20401dca:	fcb42423          	sw	a1,-56(s0)
20401dce:	fcc42223          	sw	a2,-60(s0)
20401dd2:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401dd6:	57fd                	li	a5,-1
20401dd8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401ddc:	336010ef          	jal	ra,20403112 <__metal_controller_interrupt_vector_mode>
20401de0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401de4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401de8:	3f21                	jal	20401d00 <_get_cpu_intc>
20401dea:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401dee:	fcc42503          	lw	a0,-52(s0)
20401df2:	33b9                	jal	20401b40 <__metal_driver_sifive_clint0_num_interrupts>
20401df4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401df8:	fe042703          	lw	a4,-32(s0)
20401dfc:	4785                	li	a5,1
20401dfe:	00f70863          	beq	a4,a5,20401e0e <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401e02:	fe042783          	lw	a5,-32(s0)
20401e06:	c781                	beqz	a5,20401e0e <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401e08:	fec42783          	lw	a5,-20(s0)
20401e0c:	a049                	j	20401e8e <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401e0e:	fe042223          	sw	zero,-28(s0)
20401e12:	a091                	j	20401e56 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401e14:	fe442583          	lw	a1,-28(s0)
20401e18:	fcc42503          	lw	a0,-52(s0)
20401e1c:	3351                	jal	20401ba0 <__metal_driver_sifive_clint0_interrupt_lines>
20401e1e:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401e22:	fe442583          	lw	a1,-28(s0)
20401e26:	fcc42503          	lw	a0,-52(s0)
20401e2a:	3b2d                	jal	20401b64 <__metal_driver_sifive_clint0_interrupt_parents>
20401e2c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401e30:	fdc42703          	lw	a4,-36(s0)
20401e34:	fe842783          	lw	a5,-24(s0)
20401e38:	00f71863          	bne	a4,a5,20401e48 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401e3c:	fc842703          	lw	a4,-56(s0)
20401e40:	fd442783          	lw	a5,-44(s0)
20401e44:	02f70063          	beq	a4,a5,20401e64 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401e48:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20401e4c:	fe442783          	lw	a5,-28(s0)
20401e50:	0785                	addi	a5,a5,1
20401e52:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401e56:	fe442703          	lw	a4,-28(s0)
20401e5a:	fd842783          	lw	a5,-40(s0)
20401e5e:	faf74be3          	blt	a4,a5,20401e14 <__metal_driver_riscv_clint0_register+0x56>
20401e62:	a011                	j	20401e66 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20401e64:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401e66:	fe842783          	lw	a5,-24(s0)
20401e6a:	c385                	beqz	a5,20401e8a <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401e6c:	fe842783          	lw	a5,-24(s0)
20401e70:	439c                	lw	a5,0(a5)
20401e72:	4fdc                	lw	a5,28(a5)
20401e74:	fc042683          	lw	a3,-64(s0)
20401e78:	fc442603          	lw	a2,-60(s0)
20401e7c:	fc842583          	lw	a1,-56(s0)
20401e80:	fe842503          	lw	a0,-24(s0)
20401e84:	9782                	jalr	a5
20401e86:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401e8a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401e8e:	853e                	mv	a0,a5
20401e90:	50f2                	lw	ra,60(sp)
20401e92:	5462                	lw	s0,56(sp)
20401e94:	6121                	addi	sp,sp,64
20401e96:	8082                	ret

20401e98 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401e98:	7179                	addi	sp,sp,-48
20401e9a:	d622                	sw	s0,44(sp)
20401e9c:	1800                	addi	s0,sp,48
20401e9e:	fca42e23          	sw	a0,-36(s0)
20401ea2:	fcb42c23          	sw	a1,-40(s0)
20401ea6:	fcc42a23          	sw	a2,-44(s0)
20401eaa:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401eae:	57fd                	li	a5,-1
20401eb0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20401eb4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20401eb8:	853e                	mv	a0,a5
20401eba:	5432                	lw	s0,44(sp)
20401ebc:	6145                	addi	sp,sp,48
20401ebe:	8082                	ret

20401ec0 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20401ec0:	1101                	addi	sp,sp,-32
20401ec2:	ce06                	sw	ra,28(sp)
20401ec4:	cc22                	sw	s0,24(sp)
20401ec6:	1000                	addi	s0,sp,32
20401ec8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20401ecc:	246010ef          	jal	ra,20403112 <__metal_controller_interrupt_vector_mode>
20401ed0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20401ed2:	853e                	mv	a0,a5
20401ed4:	40f2                	lw	ra,28(sp)
20401ed6:	4462                	lw	s0,24(sp)
20401ed8:	6105                	addi	sp,sp,32
20401eda:	8082                	ret

20401edc <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20401edc:	7179                	addi	sp,sp,-48
20401ede:	d606                	sw	ra,44(sp)
20401ee0:	d422                	sw	s0,40(sp)
20401ee2:	1800                	addi	s0,sp,48
20401ee4:	fca42e23          	sw	a0,-36(s0)
20401ee8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20401eec:	57fd                	li	a5,-1
20401eee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20401ef2:	3539                	jal	20401d00 <_get_cpu_intc>
20401ef4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20401ef8:	fe842783          	lw	a5,-24(s0)
20401efc:	c395                	beqz	a5,20401f20 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20401efe:	fd842703          	lw	a4,-40(s0)
20401f02:	4785                	li	a5,1
20401f04:	00e7ef63          	bltu	a5,a4,20401f22 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20401f08:	fe842783          	lw	a5,-24(s0)
20401f0c:	439c                	lw	a5,0(a5)
20401f0e:	43dc                	lw	a5,4(a5)
20401f10:	fd842583          	lw	a1,-40(s0)
20401f14:	fe842503          	lw	a0,-24(s0)
20401f18:	9782                	jalr	a5
20401f1a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20401f1e:	a011                	j	20401f22 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20401f20:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20401f22:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20401f26:	853e                	mv	a0,a5
20401f28:	50b2                	lw	ra,44(sp)
20401f2a:	5422                	lw	s0,40(sp)
20401f2c:	6145                	addi	sp,sp,48
20401f2e:	8082                	ret

20401f30 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20401f30:	7139                	addi	sp,sp,-64
20401f32:	de06                	sw	ra,60(sp)
20401f34:	dc22                	sw	s0,56(sp)
20401f36:	0080                	addi	s0,sp,64
20401f38:	fca42623          	sw	a0,-52(s0)
20401f3c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20401f40:	57fd                	li	a5,-1
20401f42:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20401f46:	fc842783          	lw	a5,-56(s0)
20401f4a:	c7c9                	beqz	a5,20401fd4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20401f4c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401f50:	3b45                	jal	20401d00 <_get_cpu_intc>
20401f52:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401f56:	fcc42503          	lw	a0,-52(s0)
20401f5a:	36dd                	jal	20401b40 <__metal_driver_sifive_clint0_num_interrupts>
20401f5c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20401f60:	fe042223          	sw	zero,-28(s0)
20401f64:	a091                	j	20401fa8 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401f66:	fe442583          	lw	a1,-28(s0)
20401f6a:	fcc42503          	lw	a0,-52(s0)
20401f6e:	390d                	jal	20401ba0 <__metal_driver_sifive_clint0_interrupt_lines>
20401f70:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401f74:	fe442583          	lw	a1,-28(s0)
20401f78:	fcc42503          	lw	a0,-52(s0)
20401f7c:	36e5                	jal	20401b64 <__metal_driver_sifive_clint0_interrupt_parents>
20401f7e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20401f82:	fe042703          	lw	a4,-32(s0)
20401f86:	fe842783          	lw	a5,-24(s0)
20401f8a:	00f71863          	bne	a4,a5,20401f9a <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20401f8e:	fc842703          	lw	a4,-56(s0)
20401f92:	fd842783          	lw	a5,-40(s0)
20401f96:	02f70063          	beq	a4,a5,20401fb6 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20401f9a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20401f9e:	fe442783          	lw	a5,-28(s0)
20401fa2:	0785                	addi	a5,a5,1
20401fa4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20401fa8:	fe442703          	lw	a4,-28(s0)
20401fac:	fdc42783          	lw	a5,-36(s0)
20401fb0:	faf74be3          	blt	a4,a5,20401f66 <__metal_driver_riscv_clint0_enable+0x36>
20401fb4:	a011                	j	20401fb8 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20401fb6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20401fb8:	fe842783          	lw	a5,-24(s0)
20401fbc:	cf81                	beqz	a5,20401fd4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20401fbe:	fe842783          	lw	a5,-24(s0)
20401fc2:	439c                	lw	a5,0(a5)
20401fc4:	53dc                	lw	a5,36(a5)
20401fc6:	fc842583          	lw	a1,-56(s0)
20401fca:	fe842503          	lw	a0,-24(s0)
20401fce:	9782                	jalr	a5
20401fd0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20401fd4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20401fd8:	853e                	mv	a0,a5
20401fda:	50f2                	lw	ra,60(sp)
20401fdc:	5462                	lw	s0,56(sp)
20401fde:	6121                	addi	sp,sp,64
20401fe0:	8082                	ret

20401fe2 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20401fe2:	7139                	addi	sp,sp,-64
20401fe4:	de06                	sw	ra,60(sp)
20401fe6:	dc22                	sw	s0,56(sp)
20401fe8:	0080                	addi	s0,sp,64
20401fea:	fca42623          	sw	a0,-52(s0)
20401fee:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20401ff2:	57fd                	li	a5,-1
20401ff4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20401ff8:	fc842783          	lw	a5,-56(s0)
20401ffc:	c7c9                	beqz	a5,20402086 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20401ffe:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402002:	39fd                	jal	20401d00 <_get_cpu_intc>
20402004:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402008:	fcc42503          	lw	a0,-52(s0)
2040200c:	3e15                	jal	20401b40 <__metal_driver_sifive_clint0_num_interrupts>
2040200e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402012:	fe042223          	sw	zero,-28(s0)
20402016:	a091                	j	2040205a <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402018:	fe442583          	lw	a1,-28(s0)
2040201c:	fcc42503          	lw	a0,-52(s0)
20402020:	3641                	jal	20401ba0 <__metal_driver_sifive_clint0_interrupt_lines>
20402022:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402026:	fe442583          	lw	a1,-28(s0)
2040202a:	fcc42503          	lw	a0,-52(s0)
2040202e:	3e1d                	jal	20401b64 <__metal_driver_sifive_clint0_interrupt_parents>
20402030:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402034:	fe042703          	lw	a4,-32(s0)
20402038:	fe842783          	lw	a5,-24(s0)
2040203c:	00f71863          	bne	a4,a5,2040204c <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402040:	fc842703          	lw	a4,-56(s0)
20402044:	fd842783          	lw	a5,-40(s0)
20402048:	02f70063          	beq	a4,a5,20402068 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
2040204c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402050:	fe442783          	lw	a5,-28(s0)
20402054:	0785                	addi	a5,a5,1
20402056:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2040205a:	fe442703          	lw	a4,-28(s0)
2040205e:	fdc42783          	lw	a5,-36(s0)
20402062:	faf74be3          	blt	a4,a5,20402018 <__metal_driver_riscv_clint0_disable+0x36>
20402066:	a011                	j	2040206a <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402068:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2040206a:	fe842783          	lw	a5,-24(s0)
2040206e:	cf81                	beqz	a5,20402086 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402070:	fe842783          	lw	a5,-24(s0)
20402074:	439c                	lw	a5,0(a5)
20402076:	579c                	lw	a5,40(a5)
20402078:	fc842583          	lw	a1,-56(s0)
2040207c:	fe842503          	lw	a0,-24(s0)
20402080:	9782                	jalr	a5
20402082:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402086:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2040208a:	853e                	mv	a0,a5
2040208c:	50f2                	lw	ra,60(sp)
2040208e:	5462                	lw	s0,56(sp)
20402090:	6121                	addi	sp,sp,64
20402092:	8082                	ret

20402094 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402094:	7179                	addi	sp,sp,-48
20402096:	d606                	sw	ra,44(sp)
20402098:	d422                	sw	s0,40(sp)
2040209a:	1800                	addi	s0,sp,48
2040209c:	fca42e23          	sw	a0,-36(s0)
204020a0:	fcb42c23          	sw	a1,-40(s0)
204020a4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204020a8:	57fd                	li	a5,-1
204020aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204020ae:	fdc42783          	lw	a5,-36(s0)
204020b2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204020b6:	fdc42503          	lw	a0,-36(s0)
204020ba:	a61ff0ef          	jal	ra,20401b1a <__metal_driver_sifive_clint0_control_base>
204020be:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204020c2:	fd842703          	lw	a4,-40(s0)
204020c6:	4789                	li	a5,2
204020c8:	04f70863          	beq	a4,a5,20402118 <__metal_driver_riscv_clint0_command_request+0x84>
204020cc:	fd842703          	lw	a4,-40(s0)
204020d0:	4789                	li	a5,2
204020d2:	00e7c863          	blt	a5,a4,204020e2 <__metal_driver_riscv_clint0_command_request+0x4e>
204020d6:	fd842703          	lw	a4,-40(s0)
204020da:	4785                	li	a5,1
204020dc:	00f70e63          	beq	a4,a5,204020f8 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204020e0:	a8e9                	j	204021ba <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204020e2:	fd842703          	lw	a4,-40(s0)
204020e6:	478d                	li	a5,3
204020e8:	04f70c63          	beq	a4,a5,20402140 <__metal_driver_riscv_clint0_command_request+0xac>
204020ec:	fd842703          	lw	a4,-40(s0)
204020f0:	4791                	li	a5,4
204020f2:	08f70863          	beq	a4,a5,20402182 <__metal_driver_riscv_clint0_command_request+0xee>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204020f6:	a0d1                	j	204021ba <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204020f8:	fd442783          	lw	a5,-44(s0)
204020fc:	cbc5                	beqz	a5,204021ac <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204020fe:	fe842503          	lw	a0,-24(s0)
20402102:	34f9                	jal	20401bd0 <__metal_clint0_mtime_get>
20402104:	87aa                	mv	a5,a0
20402106:	882e                	mv	a6,a1
20402108:	fd442703          	lw	a4,-44(s0)
2040210c:	c31c                	sw	a5,0(a4)
2040210e:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402112:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402116:	a859                	j	204021ac <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402118:	fd442783          	lw	a5,-44(s0)
2040211c:	cbd1                	beqz	a5,204021b0 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
2040211e:	fd442783          	lw	a5,-44(s0)
20402122:	439c                	lw	a5,0(a5)
20402124:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402128:	fe042783          	lw	a5,-32(s0)
2040212c:	078a                	slli	a5,a5,0x2
2040212e:	873e                	mv	a4,a5
20402130:	fe442783          	lw	a5,-28(s0)
20402134:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402136:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
2040213a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040213e:	a88d                	j	204021b0 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402140:	fd442783          	lw	a5,-44(s0)
20402144:	cba5                	beqz	a5,204021b4 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402146:	fd442783          	lw	a5,-44(s0)
2040214a:	439c                	lw	a5,0(a5)
2040214c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402150:	fe042783          	lw	a5,-32(s0)
20402154:	078a                	slli	a5,a5,0x2
20402156:	873e                	mv	a4,a5
20402158:	fe442783          	lw	a5,-28(s0)
2040215c:	97ba                	add	a5,a5,a4
2040215e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402160:	4785                	li	a5,1
20402162:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402164:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402168:	fe042783          	lw	a5,-32(s0)
2040216c:	078a                	slli	a5,a5,0x2
2040216e:	873e                	mv	a4,a5
20402170:	fe442783          	lw	a5,-28(s0)
20402174:	97ba                	add	a5,a5,a4
20402176:	439c                	lw	a5,0(a5)
20402178:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
2040217c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402180:	a815                	j	204021b4 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402182:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402186:	fd442783          	lw	a5,-44(s0)
2040218a:	c79d                	beqz	a5,204021b8 <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
2040218c:	fd442783          	lw	a5,-44(s0)
20402190:	439c                	lw	a5,0(a5)
20402192:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402196:	fe042783          	lw	a5,-32(s0)
2040219a:	078a                	slli	a5,a5,0x2
2040219c:	873e                	mv	a4,a5
2040219e:	fe442783          	lw	a5,-28(s0)
204021a2:	97ba                	add	a5,a5,a4
204021a4:	439c                	lw	a5,0(a5)
204021a6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204021aa:	a039                	j	204021b8 <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204021ac:	0001                	nop
204021ae:	a031                	j	204021ba <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204021b0:	0001                	nop
204021b2:	a021                	j	204021ba <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204021b4:	0001                	nop
204021b6:	a011                	j	204021ba <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204021b8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204021ba:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204021be:	853e                	mv	a0,a5
204021c0:	50b2                	lw	ra,44(sp)
204021c2:	5422                	lw	s0,40(sp)
204021c4:	6145                	addi	sp,sp,48
204021c6:	8082                	ret

204021c8 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
204021c8:	7179                	addi	sp,sp,-48
204021ca:	d606                	sw	ra,44(sp)
204021cc:	d422                	sw	s0,40(sp)
204021ce:	1800                	addi	s0,sp,48
204021d0:	fca42e23          	sw	a0,-36(s0)
204021d4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
204021d8:	515020ef          	jal	ra,20404eec <metal_cpu_get_current_hartid>
204021dc:	87aa                	mv	a5,a0
204021de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
204021e2:	fec40793          	addi	a5,s0,-20
204021e6:	863e                	mv	a2,a5
204021e8:	4589                	li	a1,2
204021ea:	fdc42503          	lw	a0,-36(s0)
204021ee:	355d                	jal	20402094 <__metal_driver_riscv_clint0_command_request>
204021f0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204021f2:	853e                	mv	a0,a5
204021f4:	50b2                	lw	ra,44(sp)
204021f6:	5422                	lw	s0,40(sp)
204021f8:	6145                	addi	sp,sp,48
204021fa:	8082                	ret

204021fc <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204021fc:	7179                	addi	sp,sp,-48
204021fe:	d606                	sw	ra,44(sp)
20402200:	d422                	sw	s0,40(sp)
20402202:	1800                	addi	s0,sp,48
20402204:	fca42e23          	sw	a0,-36(s0)
20402208:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
2040220c:	4e1020ef          	jal	ra,20404eec <metal_cpu_get_current_hartid>
20402210:	87aa                	mv	a5,a0
20402212:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402216:	fec40793          	addi	a5,s0,-20
2040221a:	863e                	mv	a2,a5
2040221c:	458d                	li	a1,3
2040221e:	fdc42503          	lw	a0,-36(s0)
20402222:	3d8d                	jal	20402094 <__metal_driver_riscv_clint0_command_request>
20402224:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402226:	853e                	mv	a0,a5
20402228:	50b2                	lw	ra,44(sp)
2040222a:	5422                	lw	s0,40(sp)
2040222c:	6145                	addi	sp,sp,48
2040222e:	8082                	ret

20402230 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402230:	1101                	addi	sp,sp,-32
20402232:	ce22                	sw	s0,28(sp)
20402234:	1000                	addi	s0,sp,32
20402236:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040223a:	fec42703          	lw	a4,-20(s0)
2040223e:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402242:	00f71463          	bne	a4,a5,2040224a <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402246:	4781                	li	a5,0
20402248:	a011                	j	2040224c <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
2040224a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
2040224c:	853e                	mv	a0,a5
2040224e:	4472                	lw	s0,28(sp)
20402250:	6105                	addi	sp,sp,32
20402252:	8082                	ret

20402254 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402254:	1101                	addi	sp,sp,-32
20402256:	ce22                	sw	s0,28(sp)
20402258:	1000                	addi	s0,sp,32
2040225a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040225e:	fec42703          	lw	a4,-20(s0)
20402262:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402266:	00f71763          	bne	a4,a5,20402274 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
2040226a:	000f47b7          	lui	a5,0xf4
2040226e:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402272:	a011                	j	20402276 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402274:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20402276:	853e                	mv	a0,a5
20402278:	4472                	lw	s0,28(sp)
2040227a:	6105                	addi	sp,sp,32
2040227c:	8082                	ret

2040227e <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040227e:	1101                	addi	sp,sp,-32
20402280:	ce22                	sw	s0,28(sp)
20402282:	1000                	addi	s0,sp,32
20402284:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402288:	fec42703          	lw	a4,-20(s0)
2040228c:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402290:	00f71763          	bne	a4,a5,2040229e <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402294:	800007b7          	lui	a5,0x80000
20402298:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffff9c5c>
2040229c:	a011                	j	204022a0 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040229e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
204022a0:	853e                	mv	a0,a5
204022a2:	4472                	lw	s0,28(sp)
204022a4:	6105                	addi	sp,sp,32
204022a6:	8082                	ret

204022a8 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204022a8:	1101                	addi	sp,sp,-32
204022aa:	ce22                	sw	s0,28(sp)
204022ac:	1000                	addi	s0,sp,32
204022ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
204022b2:	fec42783          	lw	a5,-20(s0)
204022b6:	00f04a63          	bgtz	a5,204022ca <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204022ba:	fec42703          	lw	a4,-20(s0)
204022be:	070a                	slli	a4,a4,0x2
204022c0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204022c4:	97ba                	add	a5,a5,a4
204022c6:	439c                	lw	a5,0(a5)
204022c8:	a011                	j	204022cc <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
204022ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
204022cc:	853e                	mv	a0,a5
204022ce:	4472                	lw	s0,28(sp)
204022d0:	6105                	addi	sp,sp,32
204022d2:	8082                	ret

204022d4 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
204022d4:	1101                	addi	sp,sp,-32
204022d6:	ce22                	sw	s0,28(sp)
204022d8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
204022da:	f14027f3          	csrr	a5,mhartid
204022de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
204022e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
204022e6:	853e                	mv	a0,a5
204022e8:	4472                	lw	s0,28(sp)
204022ea:	6105                	addi	sp,sp,32
204022ec:	8082                	ret

204022ee <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204022ee:	1101                	addi	sp,sp,-32
204022f0:	ce22                	sw	s0,28(sp)
204022f2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204022f4:	47a1                	li	a5,8
204022f6:	3007a7f3          	csrrs	a5,mstatus,a5
204022fa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
204022fe:	0001                	nop
20402300:	4472                	lw	s0,28(sp)
20402302:	6105                	addi	sp,sp,32
20402304:	8082                	ret

20402306 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402306:	1101                	addi	sp,sp,-32
20402308:	ce22                	sw	s0,28(sp)
2040230a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040230c:	47a1                	li	a5,8
2040230e:	3007b7f3          	csrrc	a5,mstatus,a5
20402312:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402316:	0001                	nop
20402318:	4472                	lw	s0,28(sp)
2040231a:	6105                	addi	sp,sp,32
2040231c:	8082                	ret

2040231e <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
2040231e:	1101                	addi	sp,sp,-32
20402320:	ce22                	sw	s0,28(sp)
20402322:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402324:	47a1                	li	a5,8
20402326:	3047a7f3          	csrrs	a5,mie,a5
2040232a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
2040232e:	0001                	nop
20402330:	4472                	lw	s0,28(sp)
20402332:	6105                	addi	sp,sp,32
20402334:	8082                	ret

20402336 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402336:	1101                	addi	sp,sp,-32
20402338:	ce22                	sw	s0,28(sp)
2040233a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040233c:	47a1                	li	a5,8
2040233e:	3047b7f3          	csrrc	a5,mie,a5
20402342:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402346:	0001                	nop
20402348:	4472                	lw	s0,28(sp)
2040234a:	6105                	addi	sp,sp,32
2040234c:	8082                	ret

2040234e <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
2040234e:	1101                	addi	sp,sp,-32
20402350:	ce22                	sw	s0,28(sp)
20402352:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402354:	08000793          	li	a5,128
20402358:	3047a7f3          	csrrs	a5,mie,a5
2040235c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402360:	0001                	nop
20402362:	4472                	lw	s0,28(sp)
20402364:	6105                	addi	sp,sp,32
20402366:	8082                	ret

20402368 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402368:	1101                	addi	sp,sp,-32
2040236a:	ce22                	sw	s0,28(sp)
2040236c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040236e:	08000793          	li	a5,128
20402372:	3047b7f3          	csrrc	a5,mie,a5
20402376:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
2040237a:	0001                	nop
2040237c:	4472                	lw	s0,28(sp)
2040237e:	6105                	addi	sp,sp,32
20402380:	8082                	ret

20402382 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402382:	1101                	addi	sp,sp,-32
20402384:	ce22                	sw	s0,28(sp)
20402386:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402388:	6785                	lui	a5,0x1
2040238a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040238e:	3047a7f3          	csrrs	a5,mie,a5
20402392:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402396:	0001                	nop
20402398:	4472                	lw	s0,28(sp)
2040239a:	6105                	addi	sp,sp,32
2040239c:	8082                	ret

2040239e <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040239e:	1101                	addi	sp,sp,-32
204023a0:	ce22                	sw	s0,28(sp)
204023a2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204023a4:	6785                	lui	a5,0x1
204023a6:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204023aa:	3047b7f3          	csrrc	a5,mie,a5
204023ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
204023b2:	0001                	nop
204023b4:	4472                	lw	s0,28(sp)
204023b6:	6105                	addi	sp,sp,32
204023b8:	8082                	ret

204023ba <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
204023ba:	7179                	addi	sp,sp,-48
204023bc:	d622                	sw	s0,44(sp)
204023be:	1800                	addi	s0,sp,48
204023c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
204023c4:	fdc42783          	lw	a5,-36(s0)
204023c8:	4705                	li	a4,1
204023ca:	00f717b3          	sll	a5,a4,a5
204023ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204023d2:	fec42783          	lw	a5,-20(s0)
204023d6:	3047a7f3          	csrrs	a5,mie,a5
204023da:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
204023de:	0001                	nop
204023e0:	5432                	lw	s0,44(sp)
204023e2:	6145                	addi	sp,sp,48
204023e4:	8082                	ret

204023e6 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
204023e6:	7179                	addi	sp,sp,-48
204023e8:	d622                	sw	s0,44(sp)
204023ea:	1800                	addi	s0,sp,48
204023ec:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204023f0:	fdc42783          	lw	a5,-36(s0)
204023f4:	4705                	li	a4,1
204023f6:	00f717b3          	sll	a5,a4,a5
204023fa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204023fe:	fec42783          	lw	a5,-20(s0)
20402402:	3047b7f3          	csrrc	a5,mie,a5
20402406:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
2040240a:	0001                	nop
2040240c:	5432                	lw	s0,44(sp)
2040240e:	6145                	addi	sp,sp,48
20402410:	8082                	ret

20402412 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402412:	1101                	addi	sp,sp,-32
20402414:	ce06                	sw	ra,28(sp)
20402416:	cc22                	sw	s0,24(sp)
20402418:	1000                	addi	s0,sp,32
2040241a:	fea42623          	sw	a0,-20(s0)
2040241e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402422:	06400513          	li	a0,100
20402426:	2e1020ef          	jal	ra,20404f06 <metal_shutdown>

2040242a <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
2040242a:	1101                	addi	sp,sp,-32
2040242c:	ce06                	sw	ra,28(sp)
2040242e:	cc22                	sw	s0,24(sp)
20402430:	1000                	addi	s0,sp,32
20402432:	fea42623          	sw	a0,-20(s0)
20402436:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
2040243a:	0c800513          	li	a0,200
2040243e:	2c9020ef          	jal	ra,20404f06 <metal_shutdown>

20402442 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402442:	715d                	addi	sp,sp,-80
20402444:	c686                	sw	ra,76(sp)
20402446:	c496                	sw	t0,72(sp)
20402448:	c29a                	sw	t1,68(sp)
2040244a:	c09e                	sw	t2,64(sp)
2040244c:	de22                	sw	s0,60(sp)
2040244e:	dc2a                	sw	a0,56(sp)
20402450:	da2e                	sw	a1,52(sp)
20402452:	d832                	sw	a2,48(sp)
20402454:	d636                	sw	a3,44(sp)
20402456:	d43a                	sw	a4,40(sp)
20402458:	d23e                	sw	a5,36(sp)
2040245a:	d042                	sw	a6,32(sp)
2040245c:	ce46                	sw	a7,28(sp)
2040245e:	cc72                	sw	t3,24(sp)
20402460:	ca76                	sw	t4,20(sp)
20402462:	c87a                	sw	t5,16(sp)
20402464:	c67e                	sw	t6,12(sp)
20402466:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402468:	12c00513          	li	a0,300
2040246c:	29b020ef          	jal	ra,20404f06 <metal_shutdown>

20402470 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402470:	711d                	addi	sp,sp,-96
20402472:	ce86                	sw	ra,92(sp)
20402474:	cc96                	sw	t0,88(sp)
20402476:	ca9a                	sw	t1,84(sp)
20402478:	c89e                	sw	t2,80(sp)
2040247a:	c6a2                	sw	s0,76(sp)
2040247c:	c4aa                	sw	a0,72(sp)
2040247e:	c2ae                	sw	a1,68(sp)
20402480:	c0b2                	sw	a2,64(sp)
20402482:	de36                	sw	a3,60(sp)
20402484:	dc3a                	sw	a4,56(sp)
20402486:	da3e                	sw	a5,52(sp)
20402488:	d842                	sw	a6,48(sp)
2040248a:	d646                	sw	a7,44(sp)
2040248c:	d472                	sw	t3,40(sp)
2040248e:	d276                	sw	t4,36(sp)
20402490:	d07a                	sw	t5,32(sp)
20402492:	ce7e                	sw	t6,28(sp)
20402494:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402496:	3d3d                	jal	204022d4 <__metal_myhart_id>
20402498:	872a                	mv	a4,a0
2040249a:	070a                	slli	a4,a4,0x2
2040249c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204024a0:	97ba                	add	a5,a5,a4
204024a2:	439c                	lw	a5,0(a5)
204024a4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
204024a8:	fac42783          	lw	a5,-84(s0)
204024ac:	c785                	beqz	a5,204024d4 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204024ae:	fac42503          	lw	a0,-84(s0)
204024b2:	33f1                	jal	2040227e <__metal_driver_cpu_interrupt_controller>
204024b4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
204024b8:	fa842783          	lw	a5,-88(s0)
204024bc:	0e07a783          	lw	a5,224(a5)
204024c0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
204024c4:	fa842783          	lw	a5,-88(s0)
204024c8:	0d87a783          	lw	a5,216(a5)
204024cc:	fa442583          	lw	a1,-92(s0)
204024d0:	450d                	li	a0,3
204024d2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
204024d4:	0001                	nop
204024d6:	40f6                	lw	ra,92(sp)
204024d8:	42e6                	lw	t0,88(sp)
204024da:	4356                	lw	t1,84(sp)
204024dc:	43c6                	lw	t2,80(sp)
204024de:	4436                	lw	s0,76(sp)
204024e0:	4526                	lw	a0,72(sp)
204024e2:	4596                	lw	a1,68(sp)
204024e4:	4606                	lw	a2,64(sp)
204024e6:	56f2                	lw	a3,60(sp)
204024e8:	5762                	lw	a4,56(sp)
204024ea:	57d2                	lw	a5,52(sp)
204024ec:	5842                	lw	a6,48(sp)
204024ee:	58b2                	lw	a7,44(sp)
204024f0:	5e22                	lw	t3,40(sp)
204024f2:	5e92                	lw	t4,36(sp)
204024f4:	5f02                	lw	t5,32(sp)
204024f6:	4ff2                	lw	t6,28(sp)
204024f8:	6125                	addi	sp,sp,96
204024fa:	30200073          	mret

204024fe <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204024fe:	7179                	addi	sp,sp,-48
20402500:	d606                	sw	ra,44(sp)
20402502:	d422                	sw	s0,40(sp)
20402504:	1800                	addi	s0,sp,48
20402506:	fca42e23          	sw	a0,-36(s0)
2040250a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040250e:	33d9                	jal	204022d4 <__metal_myhart_id>
20402510:	872a                	mv	a4,a0
20402512:	070a                	slli	a4,a4,0x2
20402514:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402518:	97ba                	add	a5,a5,a4
2040251a:	439c                	lw	a5,0(a5)
2040251c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402520:	342027f3          	csrr	a5,mcause
20402524:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402528:	fec42783          	lw	a5,-20(s0)
2040252c:	c795                	beqz	a5,20402558 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040252e:	fec42503          	lw	a0,-20(s0)
20402532:	33b1                	jal	2040227e <__metal_driver_cpu_interrupt_controller>
20402534:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402538:	fe842783          	lw	a5,-24(s0)
2040253c:	3ff7f793          	andi	a5,a5,1023
20402540:	fe442703          	lw	a4,-28(s0)
20402544:	0e078793          	addi	a5,a5,224
20402548:	078a                	slli	a5,a5,0x2
2040254a:	97ba                	add	a5,a5,a4
2040254c:	479c                	lw	a5,8(a5)
2040254e:	fdc42583          	lw	a1,-36(s0)
20402552:	fec42503          	lw	a0,-20(s0)
20402556:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402558:	0001                	nop
2040255a:	50b2                	lw	ra,44(sp)
2040255c:	5422                	lw	s0,40(sp)
2040255e:	6145                	addi	sp,sp,48
20402560:	8082                	ret

20402562 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402562:	711d                	addi	sp,sp,-96
20402564:	ce86                	sw	ra,92(sp)
20402566:	cc96                	sw	t0,88(sp)
20402568:	ca9a                	sw	t1,84(sp)
2040256a:	c89e                	sw	t2,80(sp)
2040256c:	c6a2                	sw	s0,76(sp)
2040256e:	c4aa                	sw	a0,72(sp)
20402570:	c2ae                	sw	a1,68(sp)
20402572:	c0b2                	sw	a2,64(sp)
20402574:	de36                	sw	a3,60(sp)
20402576:	dc3a                	sw	a4,56(sp)
20402578:	da3e                	sw	a5,52(sp)
2040257a:	d842                	sw	a6,48(sp)
2040257c:	d646                	sw	a7,44(sp)
2040257e:	d472                	sw	t3,40(sp)
20402580:	d276                	sw	t4,36(sp)
20402582:	d07a                	sw	t5,32(sp)
20402584:	ce7e                	sw	t6,28(sp)
20402586:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402588:	33b1                	jal	204022d4 <__metal_myhart_id>
2040258a:	872a                	mv	a4,a0
2040258c:	070a                	slli	a4,a4,0x2
2040258e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402592:	97ba                	add	a5,a5,a4
20402594:	439c                	lw	a5,0(a5)
20402596:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
2040259a:	fac42783          	lw	a5,-84(s0)
2040259e:	c785                	beqz	a5,204025c6 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204025a0:	fac42503          	lw	a0,-84(s0)
204025a4:	39e9                	jal	2040227e <__metal_driver_cpu_interrupt_controller>
204025a6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
204025aa:	fa842783          	lw	a5,-88(s0)
204025ae:	1407a783          	lw	a5,320(a5)
204025b2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
204025b6:	fa842783          	lw	a5,-88(s0)
204025ba:	1387a783          	lw	a5,312(a5)
204025be:	fa442583          	lw	a1,-92(s0)
204025c2:	451d                	li	a0,7
204025c4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
204025c6:	0001                	nop
204025c8:	40f6                	lw	ra,92(sp)
204025ca:	42e6                	lw	t0,88(sp)
204025cc:	4356                	lw	t1,84(sp)
204025ce:	43c6                	lw	t2,80(sp)
204025d0:	4436                	lw	s0,76(sp)
204025d2:	4526                	lw	a0,72(sp)
204025d4:	4596                	lw	a1,68(sp)
204025d6:	4606                	lw	a2,64(sp)
204025d8:	56f2                	lw	a3,60(sp)
204025da:	5762                	lw	a4,56(sp)
204025dc:	57d2                	lw	a5,52(sp)
204025de:	5842                	lw	a6,48(sp)
204025e0:	58b2                	lw	a7,44(sp)
204025e2:	5e22                	lw	t3,40(sp)
204025e4:	5e92                	lw	t4,36(sp)
204025e6:	5f02                	lw	t5,32(sp)
204025e8:	4ff2                	lw	t6,28(sp)
204025ea:	6125                	addi	sp,sp,96
204025ec:	30200073          	mret

204025f0 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204025f0:	7179                	addi	sp,sp,-48
204025f2:	d606                	sw	ra,44(sp)
204025f4:	d422                	sw	s0,40(sp)
204025f6:	1800                	addi	s0,sp,48
204025f8:	fca42e23          	sw	a0,-36(s0)
204025fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402600:	39d1                	jal	204022d4 <__metal_myhart_id>
20402602:	87aa                	mv	a5,a0
20402604:	853e                	mv	a0,a5
20402606:	314d                	jal	204022a8 <__metal_driver_cpu_get>
20402608:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
2040260c:	fec42503          	lw	a0,-20(s0)
20402610:	158010ef          	jal	ra,20403768 <__metal_driver_cpu_mtime_get>
20402614:	fea42023          	sw	a0,-32(s0)
20402618:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
2040261c:	fe042783          	lw	a5,-32(s0)
20402620:	fe442803          	lw	a6,-28(s0)
20402624:	45a9                	li	a1,10
20402626:	4601                	li	a2,0
20402628:	00b786b3          	add	a3,a5,a1
2040262c:	8536                	mv	a0,a3
2040262e:	00f53533          	sltu	a0,a0,a5
20402632:	00c80733          	add	a4,a6,a2
20402636:	00e507b3          	add	a5,a0,a4
2040263a:	873e                	mv	a4,a5
2040263c:	87b6                	mv	a5,a3
2040263e:	883a                	mv	a6,a4
20402640:	85be                	mv	a1,a5
20402642:	8642                	mv	a2,a6
20402644:	fec42503          	lw	a0,-20(s0)
20402648:	186010ef          	jal	ra,204037ce <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040264c:	0001                	nop
2040264e:	50b2                	lw	ra,44(sp)
20402650:	5422                	lw	s0,40(sp)
20402652:	6145                	addi	sp,sp,48
20402654:	8082                	ret
	...

20402680 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402680:	7119                	addi	sp,sp,-128
20402682:	de86                	sw	ra,124(sp)
20402684:	dc96                	sw	t0,120(sp)
20402686:	da9a                	sw	t1,116(sp)
20402688:	d89e                	sw	t2,112(sp)
2040268a:	d6a2                	sw	s0,108(sp)
2040268c:	d4aa                	sw	a0,104(sp)
2040268e:	d2ae                	sw	a1,100(sp)
20402690:	d0b2                	sw	a2,96(sp)
20402692:	ceb6                	sw	a3,92(sp)
20402694:	ccba                	sw	a4,88(sp)
20402696:	cabe                	sw	a5,84(sp)
20402698:	c8c2                	sw	a6,80(sp)
2040269a:	c6c6                	sw	a7,76(sp)
2040269c:	c4f2                	sw	t3,72(sp)
2040269e:	c2f6                	sw	t4,68(sp)
204026a0:	c0fa                	sw	t5,64(sp)
204026a2:	de7e                	sw	t6,60(sp)
204026a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204026a6:	313d                	jal	204022d4 <__metal_myhart_id>
204026a8:	872a                	mv	a4,a0
204026aa:	070a                	slli	a4,a4,0x2
204026ac:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204026b0:	97ba                	add	a5,a5,a4
204026b2:	439c                	lw	a5,0(a5)
204026b4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204026b8:	342027f3          	csrr	a5,mcause
204026bc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204026c0:	341027f3          	csrr	a5,mepc
204026c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204026c8:	343027f3          	csrr	a5,mtval
204026cc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204026d0:	305027f3          	csrr	a5,mtvec
204026d4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204026d8:	fac42783          	lw	a5,-84(s0)
204026dc:	c7e1                	beqz	a5,204027a4 <__metal_exception_handler+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204026de:	fac42503          	lw	a0,-84(s0)
204026e2:	3e71                	jal	2040227e <__metal_driver_cpu_interrupt_controller>
204026e4:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204026e8:	fa842783          	lw	a5,-88(s0)
204026ec:	3ff7f793          	andi	a5,a5,1023
204026f0:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204026f4:	fa842783          	lw	a5,-88(s0)
204026f8:	0807d863          	bgez	a5,20402788 <__metal_exception_handler+0x108>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
204026fc:	f9442703          	lw	a4,-108(s0)
20402700:	47ad                	li	a5,11
20402702:	00e7d763          	bge	a5,a4,20402710 <__metal_exception_handler+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402706:	f9c42783          	lw	a5,-100(s0)
2040270a:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2040270e:	ef9d                	bnez	a5,2040274c <__metal_exception_handler+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402710:	f9842683          	lw	a3,-104(s0)
20402714:	f9442703          	lw	a4,-108(s0)
20402718:	87ba                	mv	a5,a4
2040271a:	0786                	slli	a5,a5,0x1
2040271c:	97ba                	add	a5,a5,a4
2040271e:	078e                	slli	a5,a5,0x3
20402720:	97b6                	add	a5,a5,a3
20402722:	0987a783          	lw	a5,152(a5)
20402726:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040272a:	f9842683          	lw	a3,-104(s0)
2040272e:	f9442703          	lw	a4,-108(s0)
20402732:	87ba                	mv	a5,a4
20402734:	0786                	slli	a5,a5,0x1
20402736:	97ba                	add	a5,a5,a4
20402738:	078e                	slli	a5,a5,0x3
2040273a:	97b6                	add	a5,a5,a3
2040273c:	0907a783          	lw	a5,144(a5)
20402740:	f8c42583          	lw	a1,-116(s0)
20402744:	f9442503          	lw	a0,-108(s0)
20402748:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040274a:	a8a9                	j	204027a4 <__metal_exception_handler+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040274c:	f9c42783          	lw	a5,-100(s0)
20402750:	03f7f713          	andi	a4,a5,63
20402754:	4789                	li	a5,2
20402756:	04f71763          	bne	a4,a5,204027a4 <__metal_exception_handler+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040275a:	307027f3          	csrr	a5,mtvt
2040275e:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402762:	f9842783          	lw	a5,-104(s0)
20402766:	0dc7a783          	lw	a5,220(a5)
2040276a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
2040276e:	f9042783          	lw	a5,-112(s0)
20402772:	439c                	lw	a5,0(a5)
20402774:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402778:	f8842783          	lw	a5,-120(s0)
2040277c:	f8c42583          	lw	a1,-116(s0)
20402780:	f9442503          	lw	a0,-108(s0)
20402784:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402786:	a839                	j	204027a4 <__metal_exception_handler+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402788:	f9842703          	lw	a4,-104(s0)
2040278c:	f9442783          	lw	a5,-108(s0)
20402790:	0e078793          	addi	a5,a5,224
20402794:	078a                	slli	a5,a5,0x2
20402796:	97ba                	add	a5,a5,a4
20402798:	479c                	lw	a5,8(a5)
2040279a:	f9442583          	lw	a1,-108(s0)
2040279e:	fac42503          	lw	a0,-84(s0)
204027a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204027a4:	50f6                	lw	ra,124(sp)
204027a6:	52e6                	lw	t0,120(sp)
204027a8:	5356                	lw	t1,116(sp)
204027aa:	53c6                	lw	t2,112(sp)
204027ac:	5436                	lw	s0,108(sp)
204027ae:	5526                	lw	a0,104(sp)
204027b0:	5596                	lw	a1,100(sp)
204027b2:	5606                	lw	a2,96(sp)
204027b4:	46f6                	lw	a3,92(sp)
204027b6:	4766                	lw	a4,88(sp)
204027b8:	47d6                	lw	a5,84(sp)
204027ba:	4846                	lw	a6,80(sp)
204027bc:	48b6                	lw	a7,76(sp)
204027be:	4e26                	lw	t3,72(sp)
204027c0:	4e96                	lw	t4,68(sp)
204027c2:	4f06                	lw	t5,64(sp)
204027c4:	5ff2                	lw	t6,60(sp)
204027c6:	6109                	addi	sp,sp,128
204027c8:	30200073          	mret
	...

204027f2 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204027f2:	711d                	addi	sp,sp,-96
204027f4:	ce86                	sw	ra,92(sp)
204027f6:	cc96                	sw	t0,88(sp)
204027f8:	ca9a                	sw	t1,84(sp)
204027fa:	c89e                	sw	t2,80(sp)
204027fc:	c6a2                	sw	s0,76(sp)
204027fe:	c4aa                	sw	a0,72(sp)
20402800:	c2ae                	sw	a1,68(sp)
20402802:	c0b2                	sw	a2,64(sp)
20402804:	de36                	sw	a3,60(sp)
20402806:	dc3a                	sw	a4,56(sp)
20402808:	da3e                	sw	a5,52(sp)
2040280a:	d842                	sw	a6,48(sp)
2040280c:	d646                	sw	a7,44(sp)
2040280e:	d472                	sw	t3,40(sp)
20402810:	d276                	sw	t4,36(sp)
20402812:	d07a                	sw	t5,32(sp)
20402814:	ce7e                	sw	t6,28(sp)
20402816:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402818:	abdff0ef          	jal	ra,204022d4 <__metal_myhart_id>
2040281c:	872a                	mv	a4,a0
2040281e:	070a                	slli	a4,a4,0x2
20402820:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402824:	97ba                	add	a5,a5,a4
20402826:	439c                	lw	a5,0(a5)
20402828:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
2040282c:	fac42783          	lw	a5,-84(s0)
20402830:	c78d                	beqz	a5,2040285a <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402832:	fac42503          	lw	a0,-84(s0)
20402836:	a49ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
2040283a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
2040283e:	fa842783          	lw	a5,-88(s0)
20402842:	2187a783          	lw	a5,536(a5)
20402846:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040284a:	fa842783          	lw	a5,-88(s0)
2040284e:	2107a783          	lw	a5,528(a5)
20402852:	fa442583          	lw	a1,-92(s0)
20402856:	4541                	li	a0,16
20402858:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040285a:	0001                	nop
2040285c:	40f6                	lw	ra,92(sp)
2040285e:	42e6                	lw	t0,88(sp)
20402860:	4356                	lw	t1,84(sp)
20402862:	43c6                	lw	t2,80(sp)
20402864:	4436                	lw	s0,76(sp)
20402866:	4526                	lw	a0,72(sp)
20402868:	4596                	lw	a1,68(sp)
2040286a:	4606                	lw	a2,64(sp)
2040286c:	56f2                	lw	a3,60(sp)
2040286e:	5762                	lw	a4,56(sp)
20402870:	57d2                	lw	a5,52(sp)
20402872:	5842                	lw	a6,48(sp)
20402874:	58b2                	lw	a7,44(sp)
20402876:	5e22                	lw	t3,40(sp)
20402878:	5e92                	lw	t4,36(sp)
2040287a:	5f02                	lw	t5,32(sp)
2040287c:	4ff2                	lw	t6,28(sp)
2040287e:	6125                	addi	sp,sp,96
20402880:	30200073          	mret

20402884 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402884:	711d                	addi	sp,sp,-96
20402886:	ce86                	sw	ra,92(sp)
20402888:	cc96                	sw	t0,88(sp)
2040288a:	ca9a                	sw	t1,84(sp)
2040288c:	c89e                	sw	t2,80(sp)
2040288e:	c6a2                	sw	s0,76(sp)
20402890:	c4aa                	sw	a0,72(sp)
20402892:	c2ae                	sw	a1,68(sp)
20402894:	c0b2                	sw	a2,64(sp)
20402896:	de36                	sw	a3,60(sp)
20402898:	dc3a                	sw	a4,56(sp)
2040289a:	da3e                	sw	a5,52(sp)
2040289c:	d842                	sw	a6,48(sp)
2040289e:	d646                	sw	a7,44(sp)
204028a0:	d472                	sw	t3,40(sp)
204028a2:	d276                	sw	t4,36(sp)
204028a4:	d07a                	sw	t5,32(sp)
204028a6:	ce7e                	sw	t6,28(sp)
204028a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204028aa:	a2bff0ef          	jal	ra,204022d4 <__metal_myhart_id>
204028ae:	872a                	mv	a4,a0
204028b0:	070a                	slli	a4,a4,0x2
204028b2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204028b6:	97ba                	add	a5,a5,a4
204028b8:	439c                	lw	a5,0(a5)
204028ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204028be:	fac42783          	lw	a5,-84(s0)
204028c2:	c78d                	beqz	a5,204028ec <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028c4:	fac42503          	lw	a0,-84(s0)
204028c8:	9b7ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204028cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204028d0:	fa842783          	lw	a5,-88(s0)
204028d4:	2307a783          	lw	a5,560(a5)
204028d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204028dc:	fa842783          	lw	a5,-88(s0)
204028e0:	2287a783          	lw	a5,552(a5)
204028e4:	fa442583          	lw	a1,-92(s0)
204028e8:	4545                	li	a0,17
204028ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204028ec:	0001                	nop
204028ee:	40f6                	lw	ra,92(sp)
204028f0:	42e6                	lw	t0,88(sp)
204028f2:	4356                	lw	t1,84(sp)
204028f4:	43c6                	lw	t2,80(sp)
204028f6:	4436                	lw	s0,76(sp)
204028f8:	4526                	lw	a0,72(sp)
204028fa:	4596                	lw	a1,68(sp)
204028fc:	4606                	lw	a2,64(sp)
204028fe:	56f2                	lw	a3,60(sp)
20402900:	5762                	lw	a4,56(sp)
20402902:	57d2                	lw	a5,52(sp)
20402904:	5842                	lw	a6,48(sp)
20402906:	58b2                	lw	a7,44(sp)
20402908:	5e22                	lw	t3,40(sp)
2040290a:	5e92                	lw	t4,36(sp)
2040290c:	5f02                	lw	t5,32(sp)
2040290e:	4ff2                	lw	t6,28(sp)
20402910:	6125                	addi	sp,sp,96
20402912:	30200073          	mret

20402916 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402916:	711d                	addi	sp,sp,-96
20402918:	ce86                	sw	ra,92(sp)
2040291a:	cc96                	sw	t0,88(sp)
2040291c:	ca9a                	sw	t1,84(sp)
2040291e:	c89e                	sw	t2,80(sp)
20402920:	c6a2                	sw	s0,76(sp)
20402922:	c4aa                	sw	a0,72(sp)
20402924:	c2ae                	sw	a1,68(sp)
20402926:	c0b2                	sw	a2,64(sp)
20402928:	de36                	sw	a3,60(sp)
2040292a:	dc3a                	sw	a4,56(sp)
2040292c:	da3e                	sw	a5,52(sp)
2040292e:	d842                	sw	a6,48(sp)
20402930:	d646                	sw	a7,44(sp)
20402932:	d472                	sw	t3,40(sp)
20402934:	d276                	sw	t4,36(sp)
20402936:	d07a                	sw	t5,32(sp)
20402938:	ce7e                	sw	t6,28(sp)
2040293a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040293c:	999ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402940:	872a                	mv	a4,a0
20402942:	070a                	slli	a4,a4,0x2
20402944:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402948:	97ba                	add	a5,a5,a4
2040294a:	439c                	lw	a5,0(a5)
2040294c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402950:	fac42783          	lw	a5,-84(s0)
20402954:	c78d                	beqz	a5,2040297e <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402956:	fac42503          	lw	a0,-84(s0)
2040295a:	925ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
2040295e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402962:	fa842783          	lw	a5,-88(s0)
20402966:	2487a783          	lw	a5,584(a5)
2040296a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
2040296e:	fa842783          	lw	a5,-88(s0)
20402972:	2407a783          	lw	a5,576(a5)
20402976:	fa442583          	lw	a1,-92(s0)
2040297a:	4549                	li	a0,18
2040297c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
2040297e:	0001                	nop
20402980:	40f6                	lw	ra,92(sp)
20402982:	42e6                	lw	t0,88(sp)
20402984:	4356                	lw	t1,84(sp)
20402986:	43c6                	lw	t2,80(sp)
20402988:	4436                	lw	s0,76(sp)
2040298a:	4526                	lw	a0,72(sp)
2040298c:	4596                	lw	a1,68(sp)
2040298e:	4606                	lw	a2,64(sp)
20402990:	56f2                	lw	a3,60(sp)
20402992:	5762                	lw	a4,56(sp)
20402994:	57d2                	lw	a5,52(sp)
20402996:	5842                	lw	a6,48(sp)
20402998:	58b2                	lw	a7,44(sp)
2040299a:	5e22                	lw	t3,40(sp)
2040299c:	5e92                	lw	t4,36(sp)
2040299e:	5f02                	lw	t5,32(sp)
204029a0:	4ff2                	lw	t6,28(sp)
204029a2:	6125                	addi	sp,sp,96
204029a4:	30200073          	mret

204029a8 <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204029a8:	711d                	addi	sp,sp,-96
204029aa:	ce86                	sw	ra,92(sp)
204029ac:	cc96                	sw	t0,88(sp)
204029ae:	ca9a                	sw	t1,84(sp)
204029b0:	c89e                	sw	t2,80(sp)
204029b2:	c6a2                	sw	s0,76(sp)
204029b4:	c4aa                	sw	a0,72(sp)
204029b6:	c2ae                	sw	a1,68(sp)
204029b8:	c0b2                	sw	a2,64(sp)
204029ba:	de36                	sw	a3,60(sp)
204029bc:	dc3a                	sw	a4,56(sp)
204029be:	da3e                	sw	a5,52(sp)
204029c0:	d842                	sw	a6,48(sp)
204029c2:	d646                	sw	a7,44(sp)
204029c4:	d472                	sw	t3,40(sp)
204029c6:	d276                	sw	t4,36(sp)
204029c8:	d07a                	sw	t5,32(sp)
204029ca:	ce7e                	sw	t6,28(sp)
204029cc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029ce:	907ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
204029d2:	872a                	mv	a4,a0
204029d4:	070a                	slli	a4,a4,0x2
204029d6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204029da:	97ba                	add	a5,a5,a4
204029dc:	439c                	lw	a5,0(a5)
204029de:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204029e2:	fac42783          	lw	a5,-84(s0)
204029e6:	c78d                	beqz	a5,20402a10 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029e8:	fac42503          	lw	a0,-84(s0)
204029ec:	893ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204029f0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204029f4:	fa842783          	lw	a5,-88(s0)
204029f8:	2607a783          	lw	a5,608(a5)
204029fc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402a00:	fa842783          	lw	a5,-88(s0)
20402a04:	2587a783          	lw	a5,600(a5)
20402a08:	fa442583          	lw	a1,-92(s0)
20402a0c:	454d                	li	a0,19
20402a0e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402a10:	0001                	nop
20402a12:	40f6                	lw	ra,92(sp)
20402a14:	42e6                	lw	t0,88(sp)
20402a16:	4356                	lw	t1,84(sp)
20402a18:	43c6                	lw	t2,80(sp)
20402a1a:	4436                	lw	s0,76(sp)
20402a1c:	4526                	lw	a0,72(sp)
20402a1e:	4596                	lw	a1,68(sp)
20402a20:	4606                	lw	a2,64(sp)
20402a22:	56f2                	lw	a3,60(sp)
20402a24:	5762                	lw	a4,56(sp)
20402a26:	57d2                	lw	a5,52(sp)
20402a28:	5842                	lw	a6,48(sp)
20402a2a:	58b2                	lw	a7,44(sp)
20402a2c:	5e22                	lw	t3,40(sp)
20402a2e:	5e92                	lw	t4,36(sp)
20402a30:	5f02                	lw	t5,32(sp)
20402a32:	4ff2                	lw	t6,28(sp)
20402a34:	6125                	addi	sp,sp,96
20402a36:	30200073          	mret

20402a3a <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402a3a:	711d                	addi	sp,sp,-96
20402a3c:	ce86                	sw	ra,92(sp)
20402a3e:	cc96                	sw	t0,88(sp)
20402a40:	ca9a                	sw	t1,84(sp)
20402a42:	c89e                	sw	t2,80(sp)
20402a44:	c6a2                	sw	s0,76(sp)
20402a46:	c4aa                	sw	a0,72(sp)
20402a48:	c2ae                	sw	a1,68(sp)
20402a4a:	c0b2                	sw	a2,64(sp)
20402a4c:	de36                	sw	a3,60(sp)
20402a4e:	dc3a                	sw	a4,56(sp)
20402a50:	da3e                	sw	a5,52(sp)
20402a52:	d842                	sw	a6,48(sp)
20402a54:	d646                	sw	a7,44(sp)
20402a56:	d472                	sw	t3,40(sp)
20402a58:	d276                	sw	t4,36(sp)
20402a5a:	d07a                	sw	t5,32(sp)
20402a5c:	ce7e                	sw	t6,28(sp)
20402a5e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a60:	875ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402a64:	872a                	mv	a4,a0
20402a66:	070a                	slli	a4,a4,0x2
20402a68:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402a6c:	97ba                	add	a5,a5,a4
20402a6e:	439c                	lw	a5,0(a5)
20402a70:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402a74:	fac42783          	lw	a5,-84(s0)
20402a78:	c78d                	beqz	a5,20402aa2 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a7a:	fac42503          	lw	a0,-84(s0)
20402a7e:	801ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402a82:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402a86:	fa842783          	lw	a5,-88(s0)
20402a8a:	2787a783          	lw	a5,632(a5)
20402a8e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402a92:	fa842783          	lw	a5,-88(s0)
20402a96:	2707a783          	lw	a5,624(a5)
20402a9a:	fa442583          	lw	a1,-92(s0)
20402a9e:	4551                	li	a0,20
20402aa0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402aa2:	0001                	nop
20402aa4:	40f6                	lw	ra,92(sp)
20402aa6:	42e6                	lw	t0,88(sp)
20402aa8:	4356                	lw	t1,84(sp)
20402aaa:	43c6                	lw	t2,80(sp)
20402aac:	4436                	lw	s0,76(sp)
20402aae:	4526                	lw	a0,72(sp)
20402ab0:	4596                	lw	a1,68(sp)
20402ab2:	4606                	lw	a2,64(sp)
20402ab4:	56f2                	lw	a3,60(sp)
20402ab6:	5762                	lw	a4,56(sp)
20402ab8:	57d2                	lw	a5,52(sp)
20402aba:	5842                	lw	a6,48(sp)
20402abc:	58b2                	lw	a7,44(sp)
20402abe:	5e22                	lw	t3,40(sp)
20402ac0:	5e92                	lw	t4,36(sp)
20402ac2:	5f02                	lw	t5,32(sp)
20402ac4:	4ff2                	lw	t6,28(sp)
20402ac6:	6125                	addi	sp,sp,96
20402ac8:	30200073          	mret

20402acc <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402acc:	711d                	addi	sp,sp,-96
20402ace:	ce86                	sw	ra,92(sp)
20402ad0:	cc96                	sw	t0,88(sp)
20402ad2:	ca9a                	sw	t1,84(sp)
20402ad4:	c89e                	sw	t2,80(sp)
20402ad6:	c6a2                	sw	s0,76(sp)
20402ad8:	c4aa                	sw	a0,72(sp)
20402ada:	c2ae                	sw	a1,68(sp)
20402adc:	c0b2                	sw	a2,64(sp)
20402ade:	de36                	sw	a3,60(sp)
20402ae0:	dc3a                	sw	a4,56(sp)
20402ae2:	da3e                	sw	a5,52(sp)
20402ae4:	d842                	sw	a6,48(sp)
20402ae6:	d646                	sw	a7,44(sp)
20402ae8:	d472                	sw	t3,40(sp)
20402aea:	d276                	sw	t4,36(sp)
20402aec:	d07a                	sw	t5,32(sp)
20402aee:	ce7e                	sw	t6,28(sp)
20402af0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402af2:	fe2ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402af6:	872a                	mv	a4,a0
20402af8:	070a                	slli	a4,a4,0x2
20402afa:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402afe:	97ba                	add	a5,a5,a4
20402b00:	439c                	lw	a5,0(a5)
20402b02:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402b06:	fac42783          	lw	a5,-84(s0)
20402b0a:	c78d                	beqz	a5,20402b34 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b0c:	fac42503          	lw	a0,-84(s0)
20402b10:	f6eff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402b14:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402b18:	fa842783          	lw	a5,-88(s0)
20402b1c:	2907a783          	lw	a5,656(a5)
20402b20:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402b24:	fa842783          	lw	a5,-88(s0)
20402b28:	2887a783          	lw	a5,648(a5)
20402b2c:	fa442583          	lw	a1,-92(s0)
20402b30:	4555                	li	a0,21
20402b32:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402b34:	0001                	nop
20402b36:	40f6                	lw	ra,92(sp)
20402b38:	42e6                	lw	t0,88(sp)
20402b3a:	4356                	lw	t1,84(sp)
20402b3c:	43c6                	lw	t2,80(sp)
20402b3e:	4436                	lw	s0,76(sp)
20402b40:	4526                	lw	a0,72(sp)
20402b42:	4596                	lw	a1,68(sp)
20402b44:	4606                	lw	a2,64(sp)
20402b46:	56f2                	lw	a3,60(sp)
20402b48:	5762                	lw	a4,56(sp)
20402b4a:	57d2                	lw	a5,52(sp)
20402b4c:	5842                	lw	a6,48(sp)
20402b4e:	58b2                	lw	a7,44(sp)
20402b50:	5e22                	lw	t3,40(sp)
20402b52:	5e92                	lw	t4,36(sp)
20402b54:	5f02                	lw	t5,32(sp)
20402b56:	4ff2                	lw	t6,28(sp)
20402b58:	6125                	addi	sp,sp,96
20402b5a:	30200073          	mret

20402b5e <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402b5e:	711d                	addi	sp,sp,-96
20402b60:	ce86                	sw	ra,92(sp)
20402b62:	cc96                	sw	t0,88(sp)
20402b64:	ca9a                	sw	t1,84(sp)
20402b66:	c89e                	sw	t2,80(sp)
20402b68:	c6a2                	sw	s0,76(sp)
20402b6a:	c4aa                	sw	a0,72(sp)
20402b6c:	c2ae                	sw	a1,68(sp)
20402b6e:	c0b2                	sw	a2,64(sp)
20402b70:	de36                	sw	a3,60(sp)
20402b72:	dc3a                	sw	a4,56(sp)
20402b74:	da3e                	sw	a5,52(sp)
20402b76:	d842                	sw	a6,48(sp)
20402b78:	d646                	sw	a7,44(sp)
20402b7a:	d472                	sw	t3,40(sp)
20402b7c:	d276                	sw	t4,36(sp)
20402b7e:	d07a                	sw	t5,32(sp)
20402b80:	ce7e                	sw	t6,28(sp)
20402b82:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b84:	f50ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402b88:	872a                	mv	a4,a0
20402b8a:	070a                	slli	a4,a4,0x2
20402b8c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b90:	97ba                	add	a5,a5,a4
20402b92:	439c                	lw	a5,0(a5)
20402b94:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402b98:	fac42783          	lw	a5,-84(s0)
20402b9c:	c78d                	beqz	a5,20402bc6 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b9e:	fac42503          	lw	a0,-84(s0)
20402ba2:	edcff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402ba6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402baa:	fa842783          	lw	a5,-88(s0)
20402bae:	2a87a783          	lw	a5,680(a5)
20402bb2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402bb6:	fa842783          	lw	a5,-88(s0)
20402bba:	2a07a783          	lw	a5,672(a5)
20402bbe:	fa442583          	lw	a1,-92(s0)
20402bc2:	4559                	li	a0,22
20402bc4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402bc6:	0001                	nop
20402bc8:	40f6                	lw	ra,92(sp)
20402bca:	42e6                	lw	t0,88(sp)
20402bcc:	4356                	lw	t1,84(sp)
20402bce:	43c6                	lw	t2,80(sp)
20402bd0:	4436                	lw	s0,76(sp)
20402bd2:	4526                	lw	a0,72(sp)
20402bd4:	4596                	lw	a1,68(sp)
20402bd6:	4606                	lw	a2,64(sp)
20402bd8:	56f2                	lw	a3,60(sp)
20402bda:	5762                	lw	a4,56(sp)
20402bdc:	57d2                	lw	a5,52(sp)
20402bde:	5842                	lw	a6,48(sp)
20402be0:	58b2                	lw	a7,44(sp)
20402be2:	5e22                	lw	t3,40(sp)
20402be4:	5e92                	lw	t4,36(sp)
20402be6:	5f02                	lw	t5,32(sp)
20402be8:	4ff2                	lw	t6,28(sp)
20402bea:	6125                	addi	sp,sp,96
20402bec:	30200073          	mret

20402bf0 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402bf0:	711d                	addi	sp,sp,-96
20402bf2:	ce86                	sw	ra,92(sp)
20402bf4:	cc96                	sw	t0,88(sp)
20402bf6:	ca9a                	sw	t1,84(sp)
20402bf8:	c89e                	sw	t2,80(sp)
20402bfa:	c6a2                	sw	s0,76(sp)
20402bfc:	c4aa                	sw	a0,72(sp)
20402bfe:	c2ae                	sw	a1,68(sp)
20402c00:	c0b2                	sw	a2,64(sp)
20402c02:	de36                	sw	a3,60(sp)
20402c04:	dc3a                	sw	a4,56(sp)
20402c06:	da3e                	sw	a5,52(sp)
20402c08:	d842                	sw	a6,48(sp)
20402c0a:	d646                	sw	a7,44(sp)
20402c0c:	d472                	sw	t3,40(sp)
20402c0e:	d276                	sw	t4,36(sp)
20402c10:	d07a                	sw	t5,32(sp)
20402c12:	ce7e                	sw	t6,28(sp)
20402c14:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c16:	ebeff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402c1a:	872a                	mv	a4,a0
20402c1c:	070a                	slli	a4,a4,0x2
20402c1e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c22:	97ba                	add	a5,a5,a4
20402c24:	439c                	lw	a5,0(a5)
20402c26:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402c2a:	fac42783          	lw	a5,-84(s0)
20402c2e:	c78d                	beqz	a5,20402c58 <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c30:	fac42503          	lw	a0,-84(s0)
20402c34:	e4aff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402c38:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402c3c:	fa842783          	lw	a5,-88(s0)
20402c40:	2c07a783          	lw	a5,704(a5)
20402c44:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402c48:	fa842783          	lw	a5,-88(s0)
20402c4c:	2b87a783          	lw	a5,696(a5)
20402c50:	fa442583          	lw	a1,-92(s0)
20402c54:	455d                	li	a0,23
20402c56:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402c58:	0001                	nop
20402c5a:	40f6                	lw	ra,92(sp)
20402c5c:	42e6                	lw	t0,88(sp)
20402c5e:	4356                	lw	t1,84(sp)
20402c60:	43c6                	lw	t2,80(sp)
20402c62:	4436                	lw	s0,76(sp)
20402c64:	4526                	lw	a0,72(sp)
20402c66:	4596                	lw	a1,68(sp)
20402c68:	4606                	lw	a2,64(sp)
20402c6a:	56f2                	lw	a3,60(sp)
20402c6c:	5762                	lw	a4,56(sp)
20402c6e:	57d2                	lw	a5,52(sp)
20402c70:	5842                	lw	a6,48(sp)
20402c72:	58b2                	lw	a7,44(sp)
20402c74:	5e22                	lw	t3,40(sp)
20402c76:	5e92                	lw	t4,36(sp)
20402c78:	5f02                	lw	t5,32(sp)
20402c7a:	4ff2                	lw	t6,28(sp)
20402c7c:	6125                	addi	sp,sp,96
20402c7e:	30200073          	mret

20402c82 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402c82:	711d                	addi	sp,sp,-96
20402c84:	ce86                	sw	ra,92(sp)
20402c86:	cc96                	sw	t0,88(sp)
20402c88:	ca9a                	sw	t1,84(sp)
20402c8a:	c89e                	sw	t2,80(sp)
20402c8c:	c6a2                	sw	s0,76(sp)
20402c8e:	c4aa                	sw	a0,72(sp)
20402c90:	c2ae                	sw	a1,68(sp)
20402c92:	c0b2                	sw	a2,64(sp)
20402c94:	de36                	sw	a3,60(sp)
20402c96:	dc3a                	sw	a4,56(sp)
20402c98:	da3e                	sw	a5,52(sp)
20402c9a:	d842                	sw	a6,48(sp)
20402c9c:	d646                	sw	a7,44(sp)
20402c9e:	d472                	sw	t3,40(sp)
20402ca0:	d276                	sw	t4,36(sp)
20402ca2:	d07a                	sw	t5,32(sp)
20402ca4:	ce7e                	sw	t6,28(sp)
20402ca6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ca8:	e2cff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402cac:	872a                	mv	a4,a0
20402cae:	070a                	slli	a4,a4,0x2
20402cb0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402cb4:	97ba                	add	a5,a5,a4
20402cb6:	439c                	lw	a5,0(a5)
20402cb8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402cbc:	fac42783          	lw	a5,-84(s0)
20402cc0:	c78d                	beqz	a5,20402cea <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cc2:	fac42503          	lw	a0,-84(s0)
20402cc6:	db8ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402cca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402cce:	fa842783          	lw	a5,-88(s0)
20402cd2:	2d87a783          	lw	a5,728(a5)
20402cd6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402cda:	fa842783          	lw	a5,-88(s0)
20402cde:	2d07a783          	lw	a5,720(a5)
20402ce2:	fa442583          	lw	a1,-92(s0)
20402ce6:	4561                	li	a0,24
20402ce8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402cea:	0001                	nop
20402cec:	40f6                	lw	ra,92(sp)
20402cee:	42e6                	lw	t0,88(sp)
20402cf0:	4356                	lw	t1,84(sp)
20402cf2:	43c6                	lw	t2,80(sp)
20402cf4:	4436                	lw	s0,76(sp)
20402cf6:	4526                	lw	a0,72(sp)
20402cf8:	4596                	lw	a1,68(sp)
20402cfa:	4606                	lw	a2,64(sp)
20402cfc:	56f2                	lw	a3,60(sp)
20402cfe:	5762                	lw	a4,56(sp)
20402d00:	57d2                	lw	a5,52(sp)
20402d02:	5842                	lw	a6,48(sp)
20402d04:	58b2                	lw	a7,44(sp)
20402d06:	5e22                	lw	t3,40(sp)
20402d08:	5e92                	lw	t4,36(sp)
20402d0a:	5f02                	lw	t5,32(sp)
20402d0c:	4ff2                	lw	t6,28(sp)
20402d0e:	6125                	addi	sp,sp,96
20402d10:	30200073          	mret

20402d14 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402d14:	711d                	addi	sp,sp,-96
20402d16:	ce86                	sw	ra,92(sp)
20402d18:	cc96                	sw	t0,88(sp)
20402d1a:	ca9a                	sw	t1,84(sp)
20402d1c:	c89e                	sw	t2,80(sp)
20402d1e:	c6a2                	sw	s0,76(sp)
20402d20:	c4aa                	sw	a0,72(sp)
20402d22:	c2ae                	sw	a1,68(sp)
20402d24:	c0b2                	sw	a2,64(sp)
20402d26:	de36                	sw	a3,60(sp)
20402d28:	dc3a                	sw	a4,56(sp)
20402d2a:	da3e                	sw	a5,52(sp)
20402d2c:	d842                	sw	a6,48(sp)
20402d2e:	d646                	sw	a7,44(sp)
20402d30:	d472                	sw	t3,40(sp)
20402d32:	d276                	sw	t4,36(sp)
20402d34:	d07a                	sw	t5,32(sp)
20402d36:	ce7e                	sw	t6,28(sp)
20402d38:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d3a:	d9aff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402d3e:	872a                	mv	a4,a0
20402d40:	070a                	slli	a4,a4,0x2
20402d42:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d46:	97ba                	add	a5,a5,a4
20402d48:	439c                	lw	a5,0(a5)
20402d4a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402d4e:	fac42783          	lw	a5,-84(s0)
20402d52:	c78d                	beqz	a5,20402d7c <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d54:	fac42503          	lw	a0,-84(s0)
20402d58:	d26ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402d5c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402d60:	fa842783          	lw	a5,-88(s0)
20402d64:	2f07a783          	lw	a5,752(a5)
20402d68:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402d6c:	fa842783          	lw	a5,-88(s0)
20402d70:	2e87a783          	lw	a5,744(a5)
20402d74:	fa442583          	lw	a1,-92(s0)
20402d78:	4565                	li	a0,25
20402d7a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402d7c:	0001                	nop
20402d7e:	40f6                	lw	ra,92(sp)
20402d80:	42e6                	lw	t0,88(sp)
20402d82:	4356                	lw	t1,84(sp)
20402d84:	43c6                	lw	t2,80(sp)
20402d86:	4436                	lw	s0,76(sp)
20402d88:	4526                	lw	a0,72(sp)
20402d8a:	4596                	lw	a1,68(sp)
20402d8c:	4606                	lw	a2,64(sp)
20402d8e:	56f2                	lw	a3,60(sp)
20402d90:	5762                	lw	a4,56(sp)
20402d92:	57d2                	lw	a5,52(sp)
20402d94:	5842                	lw	a6,48(sp)
20402d96:	58b2                	lw	a7,44(sp)
20402d98:	5e22                	lw	t3,40(sp)
20402d9a:	5e92                	lw	t4,36(sp)
20402d9c:	5f02                	lw	t5,32(sp)
20402d9e:	4ff2                	lw	t6,28(sp)
20402da0:	6125                	addi	sp,sp,96
20402da2:	30200073          	mret

20402da6 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402da6:	711d                	addi	sp,sp,-96
20402da8:	ce86                	sw	ra,92(sp)
20402daa:	cc96                	sw	t0,88(sp)
20402dac:	ca9a                	sw	t1,84(sp)
20402dae:	c89e                	sw	t2,80(sp)
20402db0:	c6a2                	sw	s0,76(sp)
20402db2:	c4aa                	sw	a0,72(sp)
20402db4:	c2ae                	sw	a1,68(sp)
20402db6:	c0b2                	sw	a2,64(sp)
20402db8:	de36                	sw	a3,60(sp)
20402dba:	dc3a                	sw	a4,56(sp)
20402dbc:	da3e                	sw	a5,52(sp)
20402dbe:	d842                	sw	a6,48(sp)
20402dc0:	d646                	sw	a7,44(sp)
20402dc2:	d472                	sw	t3,40(sp)
20402dc4:	d276                	sw	t4,36(sp)
20402dc6:	d07a                	sw	t5,32(sp)
20402dc8:	ce7e                	sw	t6,28(sp)
20402dca:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402dcc:	d08ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402dd0:	872a                	mv	a4,a0
20402dd2:	070a                	slli	a4,a4,0x2
20402dd4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402dd8:	97ba                	add	a5,a5,a4
20402dda:	439c                	lw	a5,0(a5)
20402ddc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402de0:	fac42783          	lw	a5,-84(s0)
20402de4:	c78d                	beqz	a5,20402e0e <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402de6:	fac42503          	lw	a0,-84(s0)
20402dea:	c94ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402dee:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402df2:	fa842783          	lw	a5,-88(s0)
20402df6:	3087a783          	lw	a5,776(a5)
20402dfa:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402dfe:	fa842783          	lw	a5,-88(s0)
20402e02:	3007a783          	lw	a5,768(a5)
20402e06:	fa442583          	lw	a1,-92(s0)
20402e0a:	4569                	li	a0,26
20402e0c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402e0e:	0001                	nop
20402e10:	40f6                	lw	ra,92(sp)
20402e12:	42e6                	lw	t0,88(sp)
20402e14:	4356                	lw	t1,84(sp)
20402e16:	43c6                	lw	t2,80(sp)
20402e18:	4436                	lw	s0,76(sp)
20402e1a:	4526                	lw	a0,72(sp)
20402e1c:	4596                	lw	a1,68(sp)
20402e1e:	4606                	lw	a2,64(sp)
20402e20:	56f2                	lw	a3,60(sp)
20402e22:	5762                	lw	a4,56(sp)
20402e24:	57d2                	lw	a5,52(sp)
20402e26:	5842                	lw	a6,48(sp)
20402e28:	58b2                	lw	a7,44(sp)
20402e2a:	5e22                	lw	t3,40(sp)
20402e2c:	5e92                	lw	t4,36(sp)
20402e2e:	5f02                	lw	t5,32(sp)
20402e30:	4ff2                	lw	t6,28(sp)
20402e32:	6125                	addi	sp,sp,96
20402e34:	30200073          	mret

20402e38 <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20402e38:	711d                	addi	sp,sp,-96
20402e3a:	ce86                	sw	ra,92(sp)
20402e3c:	cc96                	sw	t0,88(sp)
20402e3e:	ca9a                	sw	t1,84(sp)
20402e40:	c89e                	sw	t2,80(sp)
20402e42:	c6a2                	sw	s0,76(sp)
20402e44:	c4aa                	sw	a0,72(sp)
20402e46:	c2ae                	sw	a1,68(sp)
20402e48:	c0b2                	sw	a2,64(sp)
20402e4a:	de36                	sw	a3,60(sp)
20402e4c:	dc3a                	sw	a4,56(sp)
20402e4e:	da3e                	sw	a5,52(sp)
20402e50:	d842                	sw	a6,48(sp)
20402e52:	d646                	sw	a7,44(sp)
20402e54:	d472                	sw	t3,40(sp)
20402e56:	d276                	sw	t4,36(sp)
20402e58:	d07a                	sw	t5,32(sp)
20402e5a:	ce7e                	sw	t6,28(sp)
20402e5c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e5e:	c76ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402e62:	872a                	mv	a4,a0
20402e64:	070a                	slli	a4,a4,0x2
20402e66:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e6a:	97ba                	add	a5,a5,a4
20402e6c:	439c                	lw	a5,0(a5)
20402e6e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20402e72:	fac42783          	lw	a5,-84(s0)
20402e76:	c78d                	beqz	a5,20402ea0 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e78:	fac42503          	lw	a0,-84(s0)
20402e7c:	c02ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402e80:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20402e84:	fa842783          	lw	a5,-88(s0)
20402e88:	3207a783          	lw	a5,800(a5)
20402e8c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20402e90:	fa842783          	lw	a5,-88(s0)
20402e94:	3187a783          	lw	a5,792(a5)
20402e98:	fa442583          	lw	a1,-92(s0)
20402e9c:	456d                	li	a0,27
20402e9e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20402ea0:	0001                	nop
20402ea2:	40f6                	lw	ra,92(sp)
20402ea4:	42e6                	lw	t0,88(sp)
20402ea6:	4356                	lw	t1,84(sp)
20402ea8:	43c6                	lw	t2,80(sp)
20402eaa:	4436                	lw	s0,76(sp)
20402eac:	4526                	lw	a0,72(sp)
20402eae:	4596                	lw	a1,68(sp)
20402eb0:	4606                	lw	a2,64(sp)
20402eb2:	56f2                	lw	a3,60(sp)
20402eb4:	5762                	lw	a4,56(sp)
20402eb6:	57d2                	lw	a5,52(sp)
20402eb8:	5842                	lw	a6,48(sp)
20402eba:	58b2                	lw	a7,44(sp)
20402ebc:	5e22                	lw	t3,40(sp)
20402ebe:	5e92                	lw	t4,36(sp)
20402ec0:	5f02                	lw	t5,32(sp)
20402ec2:	4ff2                	lw	t6,28(sp)
20402ec4:	6125                	addi	sp,sp,96
20402ec6:	30200073          	mret

20402eca <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20402eca:	711d                	addi	sp,sp,-96
20402ecc:	ce86                	sw	ra,92(sp)
20402ece:	cc96                	sw	t0,88(sp)
20402ed0:	ca9a                	sw	t1,84(sp)
20402ed2:	c89e                	sw	t2,80(sp)
20402ed4:	c6a2                	sw	s0,76(sp)
20402ed6:	c4aa                	sw	a0,72(sp)
20402ed8:	c2ae                	sw	a1,68(sp)
20402eda:	c0b2                	sw	a2,64(sp)
20402edc:	de36                	sw	a3,60(sp)
20402ede:	dc3a                	sw	a4,56(sp)
20402ee0:	da3e                	sw	a5,52(sp)
20402ee2:	d842                	sw	a6,48(sp)
20402ee4:	d646                	sw	a7,44(sp)
20402ee6:	d472                	sw	t3,40(sp)
20402ee8:	d276                	sw	t4,36(sp)
20402eea:	d07a                	sw	t5,32(sp)
20402eec:	ce7e                	sw	t6,28(sp)
20402eee:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ef0:	be4ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402ef4:	872a                	mv	a4,a0
20402ef6:	070a                	slli	a4,a4,0x2
20402ef8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402efc:	97ba                	add	a5,a5,a4
20402efe:	439c                	lw	a5,0(a5)
20402f00:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20402f04:	fac42783          	lw	a5,-84(s0)
20402f08:	c78d                	beqz	a5,20402f32 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f0a:	fac42503          	lw	a0,-84(s0)
20402f0e:	b70ff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402f12:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20402f16:	fa842783          	lw	a5,-88(s0)
20402f1a:	3387a783          	lw	a5,824(a5)
20402f1e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20402f22:	fa842783          	lw	a5,-88(s0)
20402f26:	3307a783          	lw	a5,816(a5)
20402f2a:	fa442583          	lw	a1,-92(s0)
20402f2e:	4571                	li	a0,28
20402f30:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20402f32:	0001                	nop
20402f34:	40f6                	lw	ra,92(sp)
20402f36:	42e6                	lw	t0,88(sp)
20402f38:	4356                	lw	t1,84(sp)
20402f3a:	43c6                	lw	t2,80(sp)
20402f3c:	4436                	lw	s0,76(sp)
20402f3e:	4526                	lw	a0,72(sp)
20402f40:	4596                	lw	a1,68(sp)
20402f42:	4606                	lw	a2,64(sp)
20402f44:	56f2                	lw	a3,60(sp)
20402f46:	5762                	lw	a4,56(sp)
20402f48:	57d2                	lw	a5,52(sp)
20402f4a:	5842                	lw	a6,48(sp)
20402f4c:	58b2                	lw	a7,44(sp)
20402f4e:	5e22                	lw	t3,40(sp)
20402f50:	5e92                	lw	t4,36(sp)
20402f52:	5f02                	lw	t5,32(sp)
20402f54:	4ff2                	lw	t6,28(sp)
20402f56:	6125                	addi	sp,sp,96
20402f58:	30200073          	mret

20402f5c <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20402f5c:	711d                	addi	sp,sp,-96
20402f5e:	ce86                	sw	ra,92(sp)
20402f60:	cc96                	sw	t0,88(sp)
20402f62:	ca9a                	sw	t1,84(sp)
20402f64:	c89e                	sw	t2,80(sp)
20402f66:	c6a2                	sw	s0,76(sp)
20402f68:	c4aa                	sw	a0,72(sp)
20402f6a:	c2ae                	sw	a1,68(sp)
20402f6c:	c0b2                	sw	a2,64(sp)
20402f6e:	de36                	sw	a3,60(sp)
20402f70:	dc3a                	sw	a4,56(sp)
20402f72:	da3e                	sw	a5,52(sp)
20402f74:	d842                	sw	a6,48(sp)
20402f76:	d646                	sw	a7,44(sp)
20402f78:	d472                	sw	t3,40(sp)
20402f7a:	d276                	sw	t4,36(sp)
20402f7c:	d07a                	sw	t5,32(sp)
20402f7e:	ce7e                	sw	t6,28(sp)
20402f80:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f82:	b52ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20402f86:	872a                	mv	a4,a0
20402f88:	070a                	slli	a4,a4,0x2
20402f8a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f8e:	97ba                	add	a5,a5,a4
20402f90:	439c                	lw	a5,0(a5)
20402f92:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20402f96:	fac42783          	lw	a5,-84(s0)
20402f9a:	c78d                	beqz	a5,20402fc4 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f9c:	fac42503          	lw	a0,-84(s0)
20402fa0:	adeff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20402fa4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20402fa8:	fa842783          	lw	a5,-88(s0)
20402fac:	3507a783          	lw	a5,848(a5)
20402fb0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20402fb4:	fa842783          	lw	a5,-88(s0)
20402fb8:	3487a783          	lw	a5,840(a5)
20402fbc:	fa442583          	lw	a1,-92(s0)
20402fc0:	4575                	li	a0,29
20402fc2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20402fc4:	0001                	nop
20402fc6:	40f6                	lw	ra,92(sp)
20402fc8:	42e6                	lw	t0,88(sp)
20402fca:	4356                	lw	t1,84(sp)
20402fcc:	43c6                	lw	t2,80(sp)
20402fce:	4436                	lw	s0,76(sp)
20402fd0:	4526                	lw	a0,72(sp)
20402fd2:	4596                	lw	a1,68(sp)
20402fd4:	4606                	lw	a2,64(sp)
20402fd6:	56f2                	lw	a3,60(sp)
20402fd8:	5762                	lw	a4,56(sp)
20402fda:	57d2                	lw	a5,52(sp)
20402fdc:	5842                	lw	a6,48(sp)
20402fde:	58b2                	lw	a7,44(sp)
20402fe0:	5e22                	lw	t3,40(sp)
20402fe2:	5e92                	lw	t4,36(sp)
20402fe4:	5f02                	lw	t5,32(sp)
20402fe6:	4ff2                	lw	t6,28(sp)
20402fe8:	6125                	addi	sp,sp,96
20402fea:	30200073          	mret

20402fee <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20402fee:	711d                	addi	sp,sp,-96
20402ff0:	ce86                	sw	ra,92(sp)
20402ff2:	cc96                	sw	t0,88(sp)
20402ff4:	ca9a                	sw	t1,84(sp)
20402ff6:	c89e                	sw	t2,80(sp)
20402ff8:	c6a2                	sw	s0,76(sp)
20402ffa:	c4aa                	sw	a0,72(sp)
20402ffc:	c2ae                	sw	a1,68(sp)
20402ffe:	c0b2                	sw	a2,64(sp)
20403000:	de36                	sw	a3,60(sp)
20403002:	dc3a                	sw	a4,56(sp)
20403004:	da3e                	sw	a5,52(sp)
20403006:	d842                	sw	a6,48(sp)
20403008:	d646                	sw	a7,44(sp)
2040300a:	d472                	sw	t3,40(sp)
2040300c:	d276                	sw	t4,36(sp)
2040300e:	d07a                	sw	t5,32(sp)
20403010:	ce7e                	sw	t6,28(sp)
20403012:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403014:	ac0ff0ef          	jal	ra,204022d4 <__metal_myhart_id>
20403018:	872a                	mv	a4,a0
2040301a:	070a                	slli	a4,a4,0x2
2040301c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403020:	97ba                	add	a5,a5,a4
20403022:	439c                	lw	a5,0(a5)
20403024:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20403028:	fac42783          	lw	a5,-84(s0)
2040302c:	c78d                	beqz	a5,20403056 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040302e:	fac42503          	lw	a0,-84(s0)
20403032:	a4cff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20403036:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040303a:	fa842783          	lw	a5,-88(s0)
2040303e:	3687a783          	lw	a5,872(a5)
20403042:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403046:	fa842783          	lw	a5,-88(s0)
2040304a:	3607a783          	lw	a5,864(a5)
2040304e:	fa442583          	lw	a1,-92(s0)
20403052:	4579                	li	a0,30
20403054:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403056:	0001                	nop
20403058:	40f6                	lw	ra,92(sp)
2040305a:	42e6                	lw	t0,88(sp)
2040305c:	4356                	lw	t1,84(sp)
2040305e:	43c6                	lw	t2,80(sp)
20403060:	4436                	lw	s0,76(sp)
20403062:	4526                	lw	a0,72(sp)
20403064:	4596                	lw	a1,68(sp)
20403066:	4606                	lw	a2,64(sp)
20403068:	56f2                	lw	a3,60(sp)
2040306a:	5762                	lw	a4,56(sp)
2040306c:	57d2                	lw	a5,52(sp)
2040306e:	5842                	lw	a6,48(sp)
20403070:	58b2                	lw	a7,44(sp)
20403072:	5e22                	lw	t3,40(sp)
20403074:	5e92                	lw	t4,36(sp)
20403076:	5f02                	lw	t5,32(sp)
20403078:	4ff2                	lw	t6,28(sp)
2040307a:	6125                	addi	sp,sp,96
2040307c:	30200073          	mret

20403080 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403080:	711d                	addi	sp,sp,-96
20403082:	ce86                	sw	ra,92(sp)
20403084:	cc96                	sw	t0,88(sp)
20403086:	ca9a                	sw	t1,84(sp)
20403088:	c89e                	sw	t2,80(sp)
2040308a:	c6a2                	sw	s0,76(sp)
2040308c:	c4aa                	sw	a0,72(sp)
2040308e:	c2ae                	sw	a1,68(sp)
20403090:	c0b2                	sw	a2,64(sp)
20403092:	de36                	sw	a3,60(sp)
20403094:	dc3a                	sw	a4,56(sp)
20403096:	da3e                	sw	a5,52(sp)
20403098:	d842                	sw	a6,48(sp)
2040309a:	d646                	sw	a7,44(sp)
2040309c:	d472                	sw	t3,40(sp)
2040309e:	d276                	sw	t4,36(sp)
204030a0:	d07a                	sw	t5,32(sp)
204030a2:	ce7e                	sw	t6,28(sp)
204030a4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030a6:	a2eff0ef          	jal	ra,204022d4 <__metal_myhart_id>
204030aa:	872a                	mv	a4,a0
204030ac:	070a                	slli	a4,a4,0x2
204030ae:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204030b2:	97ba                	add	a5,a5,a4
204030b4:	439c                	lw	a5,0(a5)
204030b6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204030ba:	fac42783          	lw	a5,-84(s0)
204030be:	c78d                	beqz	a5,204030e8 <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030c0:	fac42503          	lw	a0,-84(s0)
204030c4:	9baff0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204030c8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204030cc:	fa842783          	lw	a5,-88(s0)
204030d0:	3807a783          	lw	a5,896(a5)
204030d4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204030d8:	fa842783          	lw	a5,-88(s0)
204030dc:	3787a783          	lw	a5,888(a5)
204030e0:	fa442583          	lw	a1,-92(s0)
204030e4:	457d                	li	a0,31
204030e6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204030e8:	0001                	nop
204030ea:	40f6                	lw	ra,92(sp)
204030ec:	42e6                	lw	t0,88(sp)
204030ee:	4356                	lw	t1,84(sp)
204030f0:	43c6                	lw	t2,80(sp)
204030f2:	4436                	lw	s0,76(sp)
204030f4:	4526                	lw	a0,72(sp)
204030f6:	4596                	lw	a1,68(sp)
204030f8:	4606                	lw	a2,64(sp)
204030fa:	56f2                	lw	a3,60(sp)
204030fc:	5762                	lw	a4,56(sp)
204030fe:	57d2                	lw	a5,52(sp)
20403100:	5842                	lw	a6,48(sp)
20403102:	58b2                	lw	a7,44(sp)
20403104:	5e22                	lw	t3,40(sp)
20403106:	5e92                	lw	t4,36(sp)
20403108:	5f02                	lw	t5,32(sp)
2040310a:	4ff2                	lw	t6,28(sp)
2040310c:	6125                	addi	sp,sp,96
2040310e:	30200073          	mret

20403112 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403112:	1101                	addi	sp,sp,-32
20403114:	ce22                	sw	s0,28(sp)
20403116:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403118:	305027f3          	csrr	a5,mtvec
2040311c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403120:	fec42783          	lw	a5,-20(s0)
20403124:	03f7f793          	andi	a5,a5,63
20403128:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040312c:	fec42703          	lw	a4,-20(s0)
20403130:	4789                	li	a5,2
20403132:	00f70d63          	beq	a4,a5,2040314c <__metal_controller_interrupt_vector_mode+0x3a>
20403136:	fec42703          	lw	a4,-20(s0)
2040313a:	478d                	li	a5,3
2040313c:	00f70a63          	beq	a4,a5,20403150 <__metal_controller_interrupt_vector_mode+0x3e>
20403140:	fec42703          	lw	a4,-20(s0)
20403144:	4785                	li	a5,1
20403146:	00f70763          	beq	a4,a5,20403154 <__metal_controller_interrupt_vector_mode+0x42>
2040314a:	a039                	j	20403158 <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040314c:	478d                	li	a5,3
2040314e:	a031                	j	2040315a <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403150:	4791                	li	a5,4
20403152:	a021                	j	2040315a <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403154:	4785                	li	a5,1
20403156:	a011                	j	2040315a <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403158:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040315a:	853e                	mv	a0,a5
2040315c:	4472                	lw	s0,28(sp)
2040315e:	6105                	addi	sp,sp,32
20403160:	8082                	ret

20403162 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403162:	7179                	addi	sp,sp,-48
20403164:	d622                	sw	s0,44(sp)
20403166:	1800                	addi	s0,sp,48
20403168:	fca42e23          	sw	a0,-36(s0)
2040316c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403170:	305027f3          	csrr	a5,mtvec
20403174:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403178:	fec42783          	lw	a5,-20(s0)
2040317c:	fc07f793          	andi	a5,a5,-64
20403180:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403184:	fd842783          	lw	a5,-40(s0)
20403188:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040318c:	fdc42703          	lw	a4,-36(s0)
20403190:	4791                	li	a5,4
20403192:	06e7e063          	bltu	a5,a4,204031f2 <__metal_controller_interrupt_vector+0x90>
20403196:	fdc42783          	lw	a5,-36(s0)
2040319a:	00279713          	slli	a4,a5,0x2
2040319e:	204057b7          	lui	a5,0x20405
204031a2:	1fc78793          	addi	a5,a5,508 # 204051fc <__metal_driver_vtable_riscv_clint0+0x4c>
204031a6:	97ba                	add	a5,a5,a4
204031a8:	439c                	lw	a5,0(a5)
204031aa:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204031ac:	fe842783          	lw	a5,-24(s0)
204031b0:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204031b4:	fec42783          	lw	a5,-20(s0)
204031b8:	0027e793          	ori	a5,a5,2
204031bc:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204031c0:	a80d                	j	204031f2 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204031c2:	fe842783          	lw	a5,-24(s0)
204031c6:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204031ca:	fec42783          	lw	a5,-20(s0)
204031ce:	0037e793          	ori	a5,a5,3
204031d2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204031d6:	a831                	j	204031f2 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204031d8:	fe842783          	lw	a5,-24(s0)
204031dc:	0017e793          	ori	a5,a5,1
204031e0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204031e4:	a039                	j	204031f2 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204031e6:	fe842783          	lw	a5,-24(s0)
204031ea:	9bf1                	andi	a5,a5,-4
204031ec:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204031f0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204031f2:	0001                	nop
204031f4:	5432                	lw	s0,44(sp)
204031f6:	6145                	addi	sp,sp,48
204031f8:	8082                	ret

204031fa <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204031fa:	1101                	addi	sp,sp,-32
204031fc:	ce22                	sw	s0,28(sp)
204031fe:	1000                	addi	s0,sp,32
20403200:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403204:	fec42783          	lw	a5,-20(s0)
20403208:	17f5                	addi	a5,a5,-3
2040320a:	4771                	li	a4,28
2040320c:	00f76d63          	bltu	a4,a5,20403226 <__metal_valid_interrupt_id+0x2c>
20403210:	00279713          	slli	a4,a5,0x2
20403214:	204057b7          	lui	a5,0x20405
20403218:	21078793          	addi	a5,a5,528 # 20405210 <__metal_driver_vtable_riscv_clint0+0x60>
2040321c:	97ba                	add	a5,a5,a4
2040321e:	439c                	lw	a5,0(a5)
20403220:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403222:	4785                	li	a5,1
20403224:	a019                	j	2040322a <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403226:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20403228:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040322a:	853e                	mv	a0,a5
2040322c:	4472                	lw	s0,28(sp)
2040322e:	6105                	addi	sp,sp,32
20403230:	8082                	ret

20403232 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403232:	7179                	addi	sp,sp,-48
20403234:	d606                	sw	ra,44(sp)
20403236:	d422                	sw	s0,40(sp)
20403238:	1800                	addi	s0,sp,48
2040323a:	fca42e23          	sw	a0,-36(s0)
2040323e:	fcb42c23          	sw	a1,-40(s0)
20403242:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403246:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040324a:	fdc42783          	lw	a5,-36(s0)
2040324e:	e399                	bnez	a5,20403254 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403250:	57fd                	li	a5,-1
20403252:	a849                	j	204032e4 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403254:	fd842703          	lw	a4,-40(s0)
20403258:	47fd                	li	a5,31
2040325a:	08e7e063          	bltu	a5,a4,204032da <__metal_local_interrupt_enable+0xa8>
2040325e:	fd842783          	lw	a5,-40(s0)
20403262:	00279713          	slli	a4,a5,0x2
20403266:	204057b7          	lui	a5,0x20405
2040326a:	28478793          	addi	a5,a5,644 # 20405284 <__metal_driver_vtable_riscv_clint0+0xd4>
2040326e:	97ba                	add	a5,a5,a4
20403270:	439c                	lw	a5,0(a5)
20403272:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403274:	fd442783          	lw	a5,-44(s0)
20403278:	c781                	beqz	a5,20403280 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040327a:	874ff0ef          	jal	ra,204022ee <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
2040327e:	a08d                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403280:	886ff0ef          	jal	ra,20402306 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403284:	a8b1                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403286:	fd442783          	lw	a5,-44(s0)
2040328a:	c781                	beqz	a5,20403292 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040328c:	892ff0ef          	jal	ra,2040231e <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403290:	a881                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403292:	8a4ff0ef          	jal	ra,20402336 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403296:	a0a9                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20403298:	fd442783          	lw	a5,-44(s0)
2040329c:	c781                	beqz	a5,204032a4 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
2040329e:	8b0ff0ef          	jal	ra,2040234e <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204032a2:	a83d                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204032a4:	8c4ff0ef          	jal	ra,20402368 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204032a8:	a825                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204032aa:	fd442783          	lw	a5,-44(s0)
204032ae:	c781                	beqz	a5,204032b6 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204032b0:	8d2ff0ef          	jal	ra,20402382 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204032b4:	a035                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204032b6:	8e8ff0ef          	jal	ra,2040239e <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204032ba:	a01d                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204032bc:	fd442783          	lw	a5,-44(s0)
204032c0:	c799                	beqz	a5,204032ce <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204032c2:	fd842783          	lw	a5,-40(s0)
204032c6:	853e                	mv	a0,a5
204032c8:	8f2ff0ef          	jal	ra,204023ba <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204032cc:	a811                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204032ce:	fd842783          	lw	a5,-40(s0)
204032d2:	853e                	mv	a0,a5
204032d4:	912ff0ef          	jal	ra,204023e6 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204032d8:	a021                	j	204032e0 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204032da:	57fd                	li	a5,-1
204032dc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204032e0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204032e4:	853e                	mv	a0,a5
204032e6:	50b2                	lw	ra,44(sp)
204032e8:	5422                	lw	s0,40(sp)
204032ea:	6145                	addi	sp,sp,48
204032ec:	8082                	ret

204032ee <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204032ee:	7179                	addi	sp,sp,-48
204032f0:	d622                	sw	s0,44(sp)
204032f2:	1800                	addi	s0,sp,48
204032f4:	fca42e23          	sw	a0,-36(s0)
204032f8:	fcb42c23          	sw	a1,-40(s0)
204032fc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403300:	fdc42783          	lw	a5,-36(s0)
20403304:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403308:	fd842703          	lw	a4,-40(s0)
2040330c:	47ad                	li	a5,11
2040330e:	02e7c263          	blt	a5,a4,20403332 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403312:	fd442783          	lw	a5,-44(s0)
20403316:	cf91                	beqz	a5,20403332 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20403318:	fec42703          	lw	a4,-20(s0)
2040331c:	fd842783          	lw	a5,-40(s0)
20403320:	0e078793          	addi	a5,a5,224
20403324:	078a                	slli	a5,a5,0x2
20403326:	97ba                	add	a5,a5,a4
20403328:	fd442703          	lw	a4,-44(s0)
2040332c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
2040332e:	4781                	li	a5,0
20403330:	a011                	j	20403334 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403332:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403334:	853e                	mv	a0,a5
20403336:	5432                	lw	s0,44(sp)
20403338:	6145                	addi	sp,sp,48
2040333a:	8082                	ret

2040333c <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040333c:	7139                	addi	sp,sp,-64
2040333e:	de06                	sw	ra,60(sp)
20403340:	dc22                	sw	s0,56(sp)
20403342:	0080                	addi	s0,sp,64
20403344:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403348:	fcc42783          	lw	a5,-52(s0)
2040334c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403350:	fe442783          	lw	a5,-28(s0)
20403354:	43dc                	lw	a5,4(a5)
20403356:	10079d63          	bnez	a5,20403470 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040335a:	57fd                	li	a5,-1
2040335c:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403360:	57fd                	li	a5,-1
20403362:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403366:	301027f3          	csrr	a5,misa
2040336a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
2040336e:	fe042703          	lw	a4,-32(s0)
20403372:	6789                	lui	a5,0x2
20403374:	8ff9                	and	a5,a5,a4
20403376:	e799                	bnez	a5,20403384 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20403378:	fe042703          	lw	a4,-32(s0)
2040337c:	000407b7          	lui	a5,0x40
20403380:	8ff9                	and	a5,a5,a4
20403382:	c799                	beqz	a5,20403390 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403384:	57fd                	li	a5,-1
20403386:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040338a:	57fd                	li	a5,-1
2040338c:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403390:	fe042703          	lw	a4,-32(s0)
20403394:	000407b7          	lui	a5,0x40
20403398:	8ff9                	and	a5,a5,a4
2040339a:	c781                	beqz	a5,204033a2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040339c:	57fd                	li	a5,-1
2040339e:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204033a2:	fe042623          	sw	zero,-20(s0)
204033a6:	a0b9                	j	204033f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204033a8:	fe442683          	lw	a3,-28(s0)
204033ac:	fec42703          	lw	a4,-20(s0)
204033b0:	87ba                	mv	a5,a4
204033b2:	0786                	slli	a5,a5,0x1
204033b4:	97ba                	add	a5,a5,a4
204033b6:	078e                	slli	a5,a5,0x3
204033b8:	97b6                	add	a5,a5,a3
204033ba:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204033be:	fe442683          	lw	a3,-28(s0)
204033c2:	fec42703          	lw	a4,-20(s0)
204033c6:	87ba                	mv	a5,a4
204033c8:	0786                	slli	a5,a5,0x1
204033ca:	97ba                	add	a5,a5,a4
204033cc:	078e                	slli	a5,a5,0x3
204033ce:	97b6                	add	a5,a5,a3
204033d0:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204033d4:	fe442683          	lw	a3,-28(s0)
204033d8:	fec42703          	lw	a4,-20(s0)
204033dc:	87ba                	mv	a5,a4
204033de:	0786                	slli	a5,a5,0x1
204033e0:	97ba                	add	a5,a5,a4
204033e2:	078e                	slli	a5,a5,0x3
204033e4:	97b6                	add	a5,a5,a3
204033e6:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204033ea:	fec42783          	lw	a5,-20(s0)
204033ee:	0785                	addi	a5,a5,1
204033f0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204033f4:	fec42703          	lw	a4,-20(s0)
204033f8:	47fd                	li	a5,31
204033fa:	fae7d7e3          	bge	a5,a4,204033a8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
204033fe:	fe042423          	sw	zero,-24(s0)
20403402:	a01d                	j	20403428 <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403404:	fe442703          	lw	a4,-28(s0)
20403408:	fe842783          	lw	a5,-24(s0)
2040340c:	0e078793          	addi	a5,a5,224
20403410:	078a                	slli	a5,a5,0x2
20403412:	97ba                	add	a5,a5,a4
20403414:	20402737          	lui	a4,0x20402
20403418:	41270713          	addi	a4,a4,1042 # 20402412 <__metal_default_exception_handler>
2040341c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
2040341e:	fe842783          	lw	a5,-24(s0)
20403422:	0785                	addi	a5,a5,1
20403424:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403428:	fe842703          	lw	a4,-24(s0)
2040342c:	47ad                	li	a5,11
2040342e:	fce7dbe3          	bge	a5,a4,20403404 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403432:	204027b7          	lui	a5,0x20402
20403436:	68078593          	addi	a1,a5,1664 # 20402680 <__metal_exception_handler>
2040343a:	4501                	li	a0,0
2040343c:	331d                	jal	20403162 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
2040343e:	301027f3          	csrr	a5,misa
20403442:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403446:	fdc42703          	lw	a4,-36(s0)
2040344a:	67c1                	lui	a5,0x10
2040344c:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403450:	8ff9                	and	a5,a5,a4
20403452:	cb99                	beqz	a5,20403468 <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403454:	300027f3          	csrr	a5,mstatus
20403458:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040345c:	fdc42703          	lw	a4,-36(s0)
20403460:	6789                	lui	a5,0x2
20403462:	8fd9                	or	a5,a5,a4
20403464:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403468:	fe442783          	lw	a5,-28(s0)
2040346c:	4705                	li	a4,1
2040346e:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403470:	0001                	nop
20403472:	50f2                	lw	ra,60(sp)
20403474:	5462                	lw	s0,56(sp)
20403476:	6121                	addi	sp,sp,64
20403478:	8082                	ret

2040347a <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040347a:	7179                	addi	sp,sp,-48
2040347c:	d606                	sw	ra,44(sp)
2040347e:	d422                	sw	s0,40(sp)
20403480:	1800                	addi	s0,sp,48
20403482:	fca42e23          	sw	a0,-36(s0)
20403486:	fcb42c23          	sw	a1,-40(s0)
2040348a:	fcc42a23          	sw	a2,-44(s0)
2040348e:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403492:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403496:	fdc42783          	lw	a5,-36(s0)
2040349a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
2040349e:	fd842503          	lw	a0,-40(s0)
204034a2:	3ba1                	jal	204031fa <__metal_valid_interrupt_id>
204034a4:	87aa                	mv	a5,a0
204034a6:	e399                	bnez	a5,204034ac <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204034a8:	57d5                	li	a5,-11
204034aa:	aa11                	j	204035be <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204034ac:	fd442783          	lw	a5,-44(s0)
204034b0:	cf85                	beqz	a5,204034e8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204034b2:	fe842683          	lw	a3,-24(s0)
204034b6:	fd842703          	lw	a4,-40(s0)
204034ba:	87ba                	mv	a5,a4
204034bc:	0786                	slli	a5,a5,0x1
204034be:	97ba                	add	a5,a5,a4
204034c0:	078e                	slli	a5,a5,0x3
204034c2:	97b6                	add	a5,a5,a3
204034c4:	fd442703          	lw	a4,-44(s0)
204034c8:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204034cc:	fe842683          	lw	a3,-24(s0)
204034d0:	fd842703          	lw	a4,-40(s0)
204034d4:	87ba                	mv	a5,a4
204034d6:	0786                	slli	a5,a5,0x1
204034d8:	97ba                	add	a5,a5,a4
204034da:	078e                	slli	a5,a5,0x3
204034dc:	97b6                	add	a5,a5,a3
204034de:	fd042703          	lw	a4,-48(s0)
204034e2:	08e7ac23          	sw	a4,152(a5)
204034e6:	a8d1                	j	204035ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204034e8:	fd842783          	lw	a5,-40(s0)
204034ec:	17f5                	addi	a5,a5,-3
204034ee:	4771                	li	a4,28
204034f0:	0cf76263          	bltu	a4,a5,204035b4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204034f4:	00279713          	slli	a4,a5,0x2
204034f8:	204057b7          	lui	a5,0x20405
204034fc:	30478793          	addi	a5,a5,772 # 20405304 <__metal_driver_vtable_riscv_clint0+0x154>
20403500:	97ba                	add	a5,a5,a4
20403502:	439c                	lw	a5,0(a5)
20403504:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403506:	fe842683          	lw	a3,-24(s0)
2040350a:	fd842703          	lw	a4,-40(s0)
2040350e:	87ba                	mv	a5,a4
20403510:	0786                	slli	a5,a5,0x1
20403512:	97ba                	add	a5,a5,a4
20403514:	078e                	slli	a5,a5,0x3
20403516:	97b6                	add	a5,a5,a3
20403518:	20402737          	lui	a4,0x20402
2040351c:	4fe70713          	addi	a4,a4,1278 # 204024fe <__metal_default_sw_handler>
20403520:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403524:	fe842683          	lw	a3,-24(s0)
20403528:	fd842703          	lw	a4,-40(s0)
2040352c:	87ba                	mv	a5,a4
2040352e:	0786                	slli	a5,a5,0x1
20403530:	97ba                	add	a5,a5,a4
20403532:	078e                	slli	a5,a5,0x3
20403534:	97b6                	add	a5,a5,a3
20403536:	fd042703          	lw	a4,-48(s0)
2040353a:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
2040353e:	a8b5                	j	204035ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403540:	fe842683          	lw	a3,-24(s0)
20403544:	fd842703          	lw	a4,-40(s0)
20403548:	87ba                	mv	a5,a4
2040354a:	0786                	slli	a5,a5,0x1
2040354c:	97ba                	add	a5,a5,a4
2040354e:	078e                	slli	a5,a5,0x3
20403550:	97b6                	add	a5,a5,a3
20403552:	20402737          	lui	a4,0x20402
20403556:	5f070713          	addi	a4,a4,1520 # 204025f0 <__metal_default_timer_handler>
2040355a:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
2040355e:	fe842683          	lw	a3,-24(s0)
20403562:	fd842703          	lw	a4,-40(s0)
20403566:	87ba                	mv	a5,a4
20403568:	0786                	slli	a5,a5,0x1
2040356a:	97ba                	add	a5,a5,a4
2040356c:	078e                	slli	a5,a5,0x3
2040356e:	97b6                	add	a5,a5,a3
20403570:	fd042703          	lw	a4,-48(s0)
20403574:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403578:	a089                	j	204035ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040357a:	fe842683          	lw	a3,-24(s0)
2040357e:	fd842703          	lw	a4,-40(s0)
20403582:	87ba                	mv	a5,a4
20403584:	0786                	slli	a5,a5,0x1
20403586:	97ba                	add	a5,a5,a4
20403588:	078e                	slli	a5,a5,0x3
2040358a:	97b6                	add	a5,a5,a3
2040358c:	20402737          	lui	a4,0x20402
20403590:	42a70713          	addi	a4,a4,1066 # 2040242a <__metal_default_interrupt_handler>
20403594:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403598:	fe842683          	lw	a3,-24(s0)
2040359c:	fd842703          	lw	a4,-40(s0)
204035a0:	87ba                	mv	a5,a4
204035a2:	0786                	slli	a5,a5,0x1
204035a4:	97ba                	add	a5,a5,a4
204035a6:	078e                	slli	a5,a5,0x3
204035a8:	97b6                	add	a5,a5,a3
204035aa:	fd042703          	lw	a4,-48(s0)
204035ae:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204035b2:	a021                	j	204035ba <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204035b4:	57d1                	li	a5,-12
204035b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204035ba:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204035be:	853e                	mv	a0,a5
204035c0:	50b2                	lw	ra,44(sp)
204035c2:	5422                	lw	s0,40(sp)
204035c4:	6145                	addi	sp,sp,48
204035c6:	8082                	ret

204035c8 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204035c8:	1101                	addi	sp,sp,-32
204035ca:	ce06                	sw	ra,28(sp)
204035cc:	cc22                	sw	s0,24(sp)
204035ce:	1000                	addi	s0,sp,32
204035d0:	fea42623          	sw	a0,-20(s0)
204035d4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204035d8:	fe842783          	lw	a5,-24(s0)
204035dc:	4605                	li	a2,1
204035de:	85be                	mv	a1,a5
204035e0:	fec42503          	lw	a0,-20(s0)
204035e4:	31b9                	jal	20403232 <__metal_local_interrupt_enable>
204035e6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204035e8:	853e                	mv	a0,a5
204035ea:	40f2                	lw	ra,28(sp)
204035ec:	4462                	lw	s0,24(sp)
204035ee:	6105                	addi	sp,sp,32
204035f0:	8082                	ret

204035f2 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204035f2:	1101                	addi	sp,sp,-32
204035f4:	ce06                	sw	ra,28(sp)
204035f6:	cc22                	sw	s0,24(sp)
204035f8:	1000                	addi	s0,sp,32
204035fa:	fea42623          	sw	a0,-20(s0)
204035fe:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403602:	fe842783          	lw	a5,-24(s0)
20403606:	4601                	li	a2,0
20403608:	85be                	mv	a1,a5
2040360a:	fec42503          	lw	a0,-20(s0)
2040360e:	3115                	jal	20403232 <__metal_local_interrupt_enable>
20403610:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403612:	853e                	mv	a0,a5
20403614:	40f2                	lw	ra,28(sp)
20403616:	4462                	lw	s0,24(sp)
20403618:	6105                	addi	sp,sp,32
2040361a:	8082                	ret

2040361c <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
2040361c:	1101                	addi	sp,sp,-32
2040361e:	ce06                	sw	ra,28(sp)
20403620:	cc22                	sw	s0,24(sp)
20403622:	1000                	addi	s0,sp,32
20403624:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403628:	aebff0ef          	jal	ra,20403112 <__metal_controller_interrupt_vector_mode>
2040362c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
2040362e:	853e                	mv	a0,a5
20403630:	40f2                	lw	ra,28(sp)
20403632:	4462                	lw	s0,24(sp)
20403634:	6105                	addi	sp,sp,32
20403636:	8082                	ret

20403638 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403638:	7179                	addi	sp,sp,-48
2040363a:	d606                	sw	ra,44(sp)
2040363c:	d422                	sw	s0,40(sp)
2040363e:	1800                	addi	s0,sp,48
20403640:	fca42e23          	sw	a0,-36(s0)
20403644:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403648:	fdc42783          	lw	a5,-36(s0)
2040364c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403650:	fd842783          	lw	a5,-40(s0)
20403654:	eb99                	bnez	a5,2040366a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403656:	204027b7          	lui	a5,0x20402
2040365a:	68078593          	addi	a1,a5,1664 # 20402680 <__metal_exception_handler>
2040365e:	fd842503          	lw	a0,-40(s0)
20403662:	b01ff0ef          	jal	ra,20403162 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403666:	4781                	li	a5,0
20403668:	a00d                	j	2040368a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
2040366a:	fd842703          	lw	a4,-40(s0)
2040366e:	4785                	li	a5,1
20403670:	00f71c63          	bne	a4,a5,20403688 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403674:	204057b7          	lui	a5,0x20405
20403678:	f8078593          	addi	a1,a5,-128 # 20404f80 <__metal_vector_table>
2040367c:	fd842503          	lw	a0,-40(s0)
20403680:	ae3ff0ef          	jal	ra,20403162 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403684:	4781                	li	a5,0
20403686:	a011                	j	2040368a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403688:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
2040368a:	853e                	mv	a0,a5
2040368c:	50b2                	lw	ra,44(sp)
2040368e:	5422                	lw	s0,40(sp)
20403690:	6145                	addi	sp,sp,48
20403692:	8082                	ret

20403694 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403694:	1101                	addi	sp,sp,-32
20403696:	ce22                	sw	s0,28(sp)
20403698:	1000                	addi	s0,sp,32
2040369a:	fea42623          	sw	a0,-20(s0)
2040369e:	feb42423          	sw	a1,-24(s0)
204036a2:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204036a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204036a8:	853e                	mv	a0,a5
204036aa:	4472                	lw	s0,28(sp)
204036ac:	6105                	addi	sp,sp,32
204036ae:	8082                	ret

204036b0 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204036b0:	7139                	addi	sp,sp,-64
204036b2:	de22                	sw	s0,60(sp)
204036b4:	0080                	addi	s0,sp,64
204036b6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204036ba:	4301                	li	t1,0
204036bc:	4381                	li	t2,0
204036be:	fe642423          	sw	t1,-24(s0)
204036c2:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204036c6:	b8002573          	csrr	a0,mcycleh
204036ca:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204036ce:	b0002573          	csrr	a0,mcycle
204036d2:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204036d6:	b8002573          	csrr	a0,mcycleh
204036da:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204036de:	fe442883          	lw	a7,-28(s0)
204036e2:	fdc42503          	lw	a0,-36(s0)
204036e6:	02a89563          	bne	a7,a0,20403710 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204036ea:	fe442503          	lw	a0,-28(s0)
204036ee:	85aa                	mv	a1,a0
204036f0:	4601                	li	a2,0
204036f2:	00059813          	slli	a6,a1,0x0
204036f6:	4781                	li	a5,0
204036f8:	fe042603          	lw	a2,-32(s0)
204036fc:	86b2                	mv	a3,a2
204036fe:	4701                	li	a4,0
20403700:	00d7e633          	or	a2,a5,a3
20403704:	fec42423          	sw	a2,-24(s0)
20403708:	00e867b3          	or	a5,a6,a4
2040370c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403710:	fe842783          	lw	a5,-24(s0)
20403714:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403718:	853e                	mv	a0,a5
2040371a:	85c2                	mv	a1,a6
2040371c:	5472                	lw	s0,60(sp)
2040371e:	6121                	addi	sp,sp,64
20403720:	8082                	ret

20403722 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403722:	7179                	addi	sp,sp,-48
20403724:	d606                	sw	ra,44(sp)
20403726:	d422                	sw	s0,40(sp)
20403728:	d24a                	sw	s2,36(sp)
2040372a:	d04e                	sw	s3,32(sp)
2040372c:	1800                	addi	s0,sp,48
2040372e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403732:	fdc42783          	lw	a5,-36(s0)
20403736:	e781                	bnez	a5,2040373e <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403738:	4901                	li	s2,0
2040373a:	4981                	li	s3,0
2040373c:	a821                	j	20403754 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2040373e:	fdc42503          	lw	a0,-36(s0)
20403742:	b13fe0ef          	jal	ra,20402254 <__metal_driver_cpu_timebase>
20403746:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
2040374a:	fec42783          	lw	a5,-20(s0)
2040374e:	893e                	mv	s2,a5
20403750:	87fd                	srai	a5,a5,0x1f
20403752:	89be                	mv	s3,a5
20403754:	87ca                	mv	a5,s2
20403756:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403758:	853e                	mv	a0,a5
2040375a:	85c2                	mv	a1,a6
2040375c:	50b2                	lw	ra,44(sp)
2040375e:	5422                	lw	s0,40(sp)
20403760:	5912                	lw	s2,36(sp)
20403762:	5982                	lw	s3,32(sp)
20403764:	6145                	addi	sp,sp,48
20403766:	8082                	ret

20403768 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403768:	7179                	addi	sp,sp,-48
2040376a:	d606                	sw	ra,44(sp)
2040376c:	d422                	sw	s0,40(sp)
2040376e:	1800                	addi	s0,sp,48
20403770:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403774:	4781                	li	a5,0
20403776:	4801                	li	a6,0
20403778:	fef42023          	sw	a5,-32(s0)
2040377c:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403780:	fdc42503          	lw	a0,-36(s0)
20403784:	afbfe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20403788:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
2040378c:	fec42783          	lw	a5,-20(s0)
20403790:	c78d                	beqz	a5,204037ba <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403792:	fec42783          	lw	a5,-20(s0)
20403796:	13c7a783          	lw	a5,316(a5)
2040379a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
2040379e:	fe842783          	lw	a5,-24(s0)
204037a2:	cf81                	beqz	a5,204037ba <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204037a4:	fe842783          	lw	a5,-24(s0)
204037a8:	439c                	lw	a5,0(a5)
204037aa:	43f8                	lw	a4,68(a5)
204037ac:	fe040793          	addi	a5,s0,-32
204037b0:	863e                	mv	a2,a5
204037b2:	4585                	li	a1,1
204037b4:	fe842503          	lw	a0,-24(s0)
204037b8:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204037ba:	fe042783          	lw	a5,-32(s0)
204037be:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204037c2:	853e                	mv	a0,a5
204037c4:	85c2                	mv	a1,a6
204037c6:	50b2                	lw	ra,44(sp)
204037c8:	5422                	lw	s0,40(sp)
204037ca:	6145                	addi	sp,sp,48
204037cc:	8082                	ret

204037ce <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204037ce:	7179                	addi	sp,sp,-48
204037d0:	d606                	sw	ra,44(sp)
204037d2:	d422                	sw	s0,40(sp)
204037d4:	d226                	sw	s1,36(sp)
204037d6:	1800                	addi	s0,sp,48
204037d8:	fca42e23          	sw	a0,-36(s0)
204037dc:	fcb42823          	sw	a1,-48(s0)
204037e0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204037e4:	57fd                	li	a5,-1
204037e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204037ea:	fdc42503          	lw	a0,-36(s0)
204037ee:	a91fe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204037f2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204037f6:	fe842783          	lw	a5,-24(s0)
204037fa:	cf8d                	beqz	a5,20403834 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204037fc:	fe842783          	lw	a5,-24(s0)
20403800:	13c7a783          	lw	a5,316(a5)
20403804:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403808:	fe442783          	lw	a5,-28(s0)
2040380c:	c785                	beqz	a5,20403834 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040380e:	fe442783          	lw	a5,-28(s0)
20403812:	439c                	lw	a5,0(a5)
20403814:	47a4                	lw	s1,72(a5)
20403816:	fdc42503          	lw	a0,-36(s0)
2040381a:	a17fe0ef          	jal	ra,20402230 <__metal_driver_cpu_hartid>
2040381e:	87aa                	mv	a5,a0
20403820:	fd042603          	lw	a2,-48(s0)
20403824:	fd442683          	lw	a3,-44(s0)
20403828:	85be                	mv	a1,a5
2040382a:	fe442503          	lw	a0,-28(s0)
2040382e:	9482                	jalr	s1
20403830:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403834:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403838:	853e                	mv	a0,a5
2040383a:	50b2                	lw	ra,44(sp)
2040383c:	5422                	lw	s0,40(sp)
2040383e:	5492                	lw	s1,36(sp)
20403840:	6145                	addi	sp,sp,48
20403842:	8082                	ret

20403844 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403844:	1101                	addi	sp,sp,-32
20403846:	ce22                	sw	s0,28(sp)
20403848:	1000                	addi	s0,sp,32
2040384a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040384e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403852:	853e                	mv	a0,a5
20403854:	4472                	lw	s0,28(sp)
20403856:	6105                	addi	sp,sp,32
20403858:	8082                	ret

2040385a <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
2040385a:	1101                	addi	sp,sp,-32
2040385c:	ce22                	sw	s0,28(sp)
2040385e:	1000                	addi	s0,sp,32
20403860:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403864:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403866:	853e                	mv	a0,a5
20403868:	4472                	lw	s0,28(sp)
2040386a:	6105                	addi	sp,sp,32
2040386c:	8082                	ret

2040386e <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
2040386e:	1101                	addi	sp,sp,-32
20403870:	ce22                	sw	s0,28(sp)
20403872:	1000                	addi	s0,sp,32
20403874:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403878:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
2040387c:	853e                	mv	a0,a5
2040387e:	4472                	lw	s0,28(sp)
20403880:	6105                	addi	sp,sp,32
20403882:	8082                	ret

20403884 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403884:	1101                	addi	sp,sp,-32
20403886:	ce22                	sw	s0,28(sp)
20403888:	1000                	addi	s0,sp,32
2040388a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040388e:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403890:	853e                	mv	a0,a5
20403892:	4472                	lw	s0,28(sp)
20403894:	6105                	addi	sp,sp,32
20403896:	8082                	ret

20403898 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403898:	7179                	addi	sp,sp,-48
2040389a:	d606                	sw	ra,44(sp)
2040389c:	d422                	sw	s0,40(sp)
2040389e:	1800                	addi	s0,sp,48
204038a0:	fca42e23          	sw	a0,-36(s0)
204038a4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204038a8:	57fd                	li	a5,-1
204038aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204038ae:	fdc42503          	lw	a0,-36(s0)
204038b2:	9cdfe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204038b6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204038ba:	fe842783          	lw	a5,-24(s0)
204038be:	c79d                	beqz	a5,204038ec <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204038c0:	fe842783          	lw	a5,-24(s0)
204038c4:	0dc7a783          	lw	a5,220(a5)
204038c8:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204038cc:	fe442783          	lw	a5,-28(s0)
204038d0:	cf91                	beqz	a5,204038ec <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204038d2:	fe442783          	lw	a5,-28(s0)
204038d6:	439c                	lw	a5,0(a5)
204038d8:	43f8                	lw	a4,68(a5)
204038da:	fd840793          	addi	a5,s0,-40
204038de:	863e                	mv	a2,a5
204038e0:	458d                	li	a1,3
204038e2:	fe442503          	lw	a0,-28(s0)
204038e6:	9702                	jalr	a4
204038e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204038ec:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204038f0:	853e                	mv	a0,a5
204038f2:	50b2                	lw	ra,44(sp)
204038f4:	5422                	lw	s0,40(sp)
204038f6:	6145                	addi	sp,sp,48
204038f8:	8082                	ret

204038fa <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204038fa:	7179                	addi	sp,sp,-48
204038fc:	d606                	sw	ra,44(sp)
204038fe:	d422                	sw	s0,40(sp)
20403900:	1800                	addi	s0,sp,48
20403902:	fca42e23          	sw	a0,-36(s0)
20403906:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
2040390a:	57fd                	li	a5,-1
2040390c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403910:	fdc42503          	lw	a0,-36(s0)
20403914:	96bfe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20403918:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
2040391c:	fe842783          	lw	a5,-24(s0)
20403920:	c79d                	beqz	a5,2040394e <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403922:	fe842783          	lw	a5,-24(s0)
20403926:	0dc7a783          	lw	a5,220(a5)
2040392a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
2040392e:	fe442783          	lw	a5,-28(s0)
20403932:	cf91                	beqz	a5,2040394e <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403934:	fe442783          	lw	a5,-28(s0)
20403938:	439c                	lw	a5,0(a5)
2040393a:	43f8                	lw	a4,68(a5)
2040393c:	fd840793          	addi	a5,s0,-40
20403940:	863e                	mv	a2,a5
20403942:	4589                	li	a1,2
20403944:	fe442503          	lw	a0,-28(s0)
20403948:	9702                	jalr	a4
2040394a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040394e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403952:	853e                	mv	a0,a5
20403954:	50b2                	lw	ra,44(sp)
20403956:	5422                	lw	s0,40(sp)
20403958:	6145                	addi	sp,sp,48
2040395a:	8082                	ret

2040395c <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
2040395c:	7179                	addi	sp,sp,-48
2040395e:	d606                	sw	ra,44(sp)
20403960:	d422                	sw	s0,40(sp)
20403962:	1800                	addi	s0,sp,48
20403964:	fca42e23          	sw	a0,-36(s0)
20403968:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
2040396c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403970:	fdc42503          	lw	a0,-36(s0)
20403974:	90bfe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
20403978:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
2040397c:	fe842783          	lw	a5,-24(s0)
20403980:	c79d                	beqz	a5,204039ae <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403982:	fe842783          	lw	a5,-24(s0)
20403986:	0dc7a783          	lw	a5,220(a5)
2040398a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040398e:	fe442783          	lw	a5,-28(s0)
20403992:	cf91                	beqz	a5,204039ae <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403994:	fe442783          	lw	a5,-28(s0)
20403998:	439c                	lw	a5,0(a5)
2040399a:	43f8                	lw	a4,68(a5)
2040399c:	fd840793          	addi	a5,s0,-40
204039a0:	863e                	mv	a2,a5
204039a2:	4591                	li	a1,4
204039a4:	fe442503          	lw	a0,-28(s0)
204039a8:	9702                	jalr	a4
204039aa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204039ae:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
204039b2:	853e                	mv	a0,a5
204039b4:	50b2                	lw	ra,44(sp)
204039b6:	5422                	lw	s0,40(sp)
204039b8:	6145                	addi	sp,sp,48
204039ba:	8082                	ret

204039bc <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204039bc:	1101                	addi	sp,sp,-32
204039be:	ce06                	sw	ra,28(sp)
204039c0:	cc22                	sw	s0,24(sp)
204039c2:	1000                	addi	s0,sp,32
204039c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204039c8:	fec42503          	lw	a0,-20(s0)
204039cc:	8b3fe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204039d0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204039d2:	853e                	mv	a0,a5
204039d4:	40f2                	lw	ra,28(sp)
204039d6:	4462                	lw	s0,24(sp)
204039d8:	6105                	addi	sp,sp,32
204039da:	8082                	ret

204039dc <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204039dc:	7179                	addi	sp,sp,-48
204039de:	d606                	sw	ra,44(sp)
204039e0:	d422                	sw	s0,40(sp)
204039e2:	1800                	addi	s0,sp,48
204039e4:	fca42e23          	sw	a0,-36(s0)
204039e8:	fcb42c23          	sw	a1,-40(s0)
204039ec:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204039f0:	fdc42503          	lw	a0,-36(s0)
204039f4:	88bfe0ef          	jal	ra,2040227e <__metal_driver_cpu_interrupt_controller>
204039f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
204039fc:	fec42783          	lw	a5,-20(s0)
20403a00:	cb99                	beqz	a5,20403a16 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403a02:	fd442603          	lw	a2,-44(s0)
20403a06:	fd842583          	lw	a1,-40(s0)
20403a0a:	fec42503          	lw	a0,-20(s0)
20403a0e:	8e1ff0ef          	jal	ra,204032ee <__metal_exception_register>
20403a12:	87aa                	mv	a5,a0
20403a14:	a011                	j	20403a18 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403a16:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403a18:	853e                	mv	a0,a5
20403a1a:	50b2                	lw	ra,44(sp)
20403a1c:	5422                	lw	s0,40(sp)
20403a1e:	6145                	addi	sp,sp,48
20403a20:	8082                	ret

20403a22 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403a22:	1101                	addi	sp,sp,-32
20403a24:	ce22                	sw	s0,28(sp)
20403a26:	1000                	addi	s0,sp,32
20403a28:	fea42623          	sw	a0,-20(s0)
20403a2c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403a30:	fe842783          	lw	a5,-24(s0)
20403a34:	0007d783          	lhu	a5,0(a5)
20403a38:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403a3c:	478d                	li	a5,3
20403a3e:	00f71463          	bne	a4,a5,20403a46 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403a42:	4791                	li	a5,4
20403a44:	a011                	j	20403a48 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403a46:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403a48:	853e                	mv	a0,a5
20403a4a:	4472                	lw	s0,28(sp)
20403a4c:	6105                	addi	sp,sp,32
20403a4e:	8082                	ret

20403a50 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403a50:	7179                	addi	sp,sp,-48
20403a52:	d622                	sw	s0,44(sp)
20403a54:	1800                	addi	s0,sp,48
20403a56:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403a5a:	341027f3          	csrr	a5,mepc
20403a5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403a62:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403a66:	853e                	mv	a0,a5
20403a68:	5432                	lw	s0,44(sp)
20403a6a:	6145                	addi	sp,sp,48
20403a6c:	8082                	ret

20403a6e <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403a6e:	1101                	addi	sp,sp,-32
20403a70:	ce22                	sw	s0,28(sp)
20403a72:	1000                	addi	s0,sp,32
20403a74:	fea42623          	sw	a0,-20(s0)
20403a78:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403a7c:	fe842783          	lw	a5,-24(s0)
20403a80:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403a84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403a86:	853e                	mv	a0,a5
20403a88:	4472                	lw	s0,28(sp)
20403a8a:	6105                	addi	sp,sp,32
20403a8c:	8082                	ret

20403a8e <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403a8e:	1101                	addi	sp,sp,-32
20403a90:	ce22                	sw	s0,28(sp)
20403a92:	1000                	addi	s0,sp,32
20403a94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403a98:	fec42703          	lw	a4,-20(s0)
20403a9c:	800007b7          	lui	a5,0x80000
20403aa0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffa014>
20403aa4:	00f71563          	bne	a4,a5,20403aae <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403aa8:	0c0007b7          	lui	a5,0xc000
20403aac:	a011                	j	20403ab0 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403aae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403ab0:	853e                	mv	a0,a5
20403ab2:	4472                	lw	s0,28(sp)
20403ab4:	6105                	addi	sp,sp,32
20403ab6:	8082                	ret

20403ab8 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403ab8:	1101                	addi	sp,sp,-32
20403aba:	ce22                	sw	s0,28(sp)
20403abc:	1000                	addi	s0,sp,32
20403abe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403ac2:	fec42703          	lw	a4,-20(s0)
20403ac6:	800007b7          	lui	a5,0x80000
20403aca:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffa014>
20403ace:	00f71463          	bne	a4,a5,20403ad6 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403ad2:	47ed                	li	a5,27
20403ad4:	a011                	j	20403ad8 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403ad6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403ad8:	853e                	mv	a0,a5
20403ada:	4472                	lw	s0,28(sp)
20403adc:	6105                	addi	sp,sp,32
20403ade:	8082                	ret

20403ae0 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403ae0:	1101                	addi	sp,sp,-32
20403ae2:	ce22                	sw	s0,28(sp)
20403ae4:	1000                	addi	s0,sp,32
20403ae6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403aea:	fec42703          	lw	a4,-20(s0)
20403aee:	800007b7          	lui	a5,0x80000
20403af2:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffa014>
20403af6:	00f71463          	bne	a4,a5,20403afe <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403afa:	479d                	li	a5,7
20403afc:	a011                	j	20403b00 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403afe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403b00:	853e                	mv	a0,a5
20403b02:	4472                	lw	s0,28(sp)
20403b04:	6105                	addi	sp,sp,32
20403b06:	8082                	ret

20403b08 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403b08:	1101                	addi	sp,sp,-32
20403b0a:	ce22                	sw	s0,28(sp)
20403b0c:	1000                	addi	s0,sp,32
20403b0e:	fea42623          	sw	a0,-20(s0)
20403b12:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403b16:	fe842783          	lw	a5,-24(s0)
20403b1a:	e791                	bnez	a5,20403b26 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403b1c:	800007b7          	lui	a5,0x80000
20403b20:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffff9c5c>
20403b24:	a011                	j	20403b28 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403b26:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403b28:	853e                	mv	a0,a5
20403b2a:	4472                	lw	s0,28(sp)
20403b2c:	6105                	addi	sp,sp,32
20403b2e:	8082                	ret

20403b30 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403b30:	1101                	addi	sp,sp,-32
20403b32:	ce22                	sw	s0,28(sp)
20403b34:	1000                	addi	s0,sp,32
20403b36:	fea42623          	sw	a0,-20(s0)
20403b3a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403b3e:	fe842783          	lw	a5,-24(s0)
20403b42:	e399                	bnez	a5,20403b48 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403b44:	47ad                	li	a5,11
20403b46:	a011                	j	20403b4a <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403b48:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403b4a:	853e                	mv	a0,a5
20403b4c:	4472                	lw	s0,28(sp)
20403b4e:	6105                	addi	sp,sp,32
20403b50:	8082                	ret

20403b52 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403b52:	7179                	addi	sp,sp,-48
20403b54:	d606                	sw	ra,44(sp)
20403b56:	d422                	sw	s0,40(sp)
20403b58:	1800                	addi	s0,sp,48
20403b5a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403b5e:	fdc42503          	lw	a0,-36(s0)
20403b62:	3735                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403b64:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403b68:	fec42703          	lw	a4,-20(s0)
20403b6c:	002007b7          	lui	a5,0x200
20403b70:	0791                	addi	a5,a5,4
20403b72:	97ba                	add	a5,a5,a4
20403b74:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403b76:	853e                	mv	a0,a5
20403b78:	50b2                	lw	ra,44(sp)
20403b7a:	5422                	lw	s0,40(sp)
20403b7c:	6145                	addi	sp,sp,48
20403b7e:	8082                	ret

20403b80 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403b80:	7179                	addi	sp,sp,-48
20403b82:	d606                	sw	ra,44(sp)
20403b84:	d422                	sw	s0,40(sp)
20403b86:	1800                	addi	s0,sp,48
20403b88:	fca42e23          	sw	a0,-36(s0)
20403b8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403b90:	fdc42503          	lw	a0,-36(s0)
20403b94:	3ded                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403b96:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403b9a:	fec42703          	lw	a4,-20(s0)
20403b9e:	002007b7          	lui	a5,0x200
20403ba2:	0791                	addi	a5,a5,4
20403ba4:	97ba                	add	a5,a5,a4
20403ba6:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403ba8:	fd842783          	lw	a5,-40(s0)
20403bac:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403bae:	0001                	nop
20403bb0:	50b2                	lw	ra,44(sp)
20403bb2:	5422                	lw	s0,40(sp)
20403bb4:	6145                	addi	sp,sp,48
20403bb6:	8082                	ret

20403bb8 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403bb8:	7179                	addi	sp,sp,-48
20403bba:	d606                	sw	ra,44(sp)
20403bbc:	d422                	sw	s0,40(sp)
20403bbe:	1800                	addi	s0,sp,48
20403bc0:	fca42e23          	sw	a0,-36(s0)
20403bc4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403bc8:	fdc42503          	lw	a0,-36(s0)
20403bcc:	35c9                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403bce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403bd2:	fec42703          	lw	a4,-20(s0)
20403bd6:	002007b7          	lui	a5,0x200
20403bda:	97ba                	add	a5,a5,a4
20403bdc:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403bde:	fd842783          	lw	a5,-40(s0)
20403be2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403be4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403be6:	853e                	mv	a0,a5
20403be8:	50b2                	lw	ra,44(sp)
20403bea:	5422                	lw	s0,40(sp)
20403bec:	6145                	addi	sp,sp,48
20403bee:	8082                	ret

20403bf0 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403bf0:	7179                	addi	sp,sp,-48
20403bf2:	d606                	sw	ra,44(sp)
20403bf4:	d422                	sw	s0,40(sp)
20403bf6:	1800                	addi	s0,sp,48
20403bf8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403bfc:	fdc42503          	lw	a0,-36(s0)
20403c00:	3579                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403c02:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c06:	fec42703          	lw	a4,-20(s0)
20403c0a:	002007b7          	lui	a5,0x200
20403c0e:	97ba                	add	a5,a5,a4
20403c10:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403c12:	853e                	mv	a0,a5
20403c14:	50b2                	lw	ra,44(sp)
20403c16:	5422                	lw	s0,40(sp)
20403c18:	6145                	addi	sp,sp,48
20403c1a:	8082                	ret

20403c1c <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403c1c:	7179                	addi	sp,sp,-48
20403c1e:	d606                	sw	ra,44(sp)
20403c20:	d422                	sw	s0,40(sp)
20403c22:	1800                	addi	s0,sp,48
20403c24:	fca42e23          	sw	a0,-36(s0)
20403c28:	fcb42c23          	sw	a1,-40(s0)
20403c2c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403c30:	fdc42503          	lw	a0,-36(s0)
20403c34:	3da9                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403c36:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403c3a:	fdc42503          	lw	a0,-36(s0)
20403c3e:	354d                	jal	20403ae0 <__metal_driver_sifive_plic0_max_priority>
20403c40:	87aa                	mv	a5,a0
20403c42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403c46:	fe842783          	lw	a5,-24(s0)
20403c4a:	c785                	beqz	a5,20403c72 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403c4c:	fd442703          	lw	a4,-44(s0)
20403c50:	fe842783          	lw	a5,-24(s0)
20403c54:	00f77f63          	bgeu	a4,a5,20403c72 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c58:	fd842783          	lw	a5,-40(s0)
20403c5c:	078a                	slli	a5,a5,0x2
20403c5e:	873e                	mv	a4,a5
20403c60:	fec42783          	lw	a5,-20(s0)
20403c64:	97ba                	add	a5,a5,a4
20403c66:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403c68:	fd442783          	lw	a5,-44(s0)
20403c6c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403c6e:	4781                	li	a5,0
20403c70:	a011                	j	20403c74 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403c72:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403c74:	853e                	mv	a0,a5
20403c76:	50b2                	lw	ra,44(sp)
20403c78:	5422                	lw	s0,40(sp)
20403c7a:	6145                	addi	sp,sp,48
20403c7c:	8082                	ret

20403c7e <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403c7e:	7179                	addi	sp,sp,-48
20403c80:	d606                	sw	ra,44(sp)
20403c82:	d422                	sw	s0,40(sp)
20403c84:	1800                	addi	s0,sp,48
20403c86:	fca42e23          	sw	a0,-36(s0)
20403c8a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403c8e:	fdc42503          	lw	a0,-36(s0)
20403c92:	3bf5                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403c94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c98:	fd842783          	lw	a5,-40(s0)
20403c9c:	078a                	slli	a5,a5,0x2
20403c9e:	873e                	mv	a4,a5
20403ca0:	fec42783          	lw	a5,-20(s0)
20403ca4:	97ba                	add	a5,a5,a4
20403ca6:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403ca8:	853e                	mv	a0,a5
20403caa:	50b2                	lw	ra,44(sp)
20403cac:	5422                	lw	s0,40(sp)
20403cae:	6145                	addi	sp,sp,48
20403cb0:	8082                	ret

20403cb2 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403cb2:	7179                	addi	sp,sp,-48
20403cb4:	d606                	sw	ra,44(sp)
20403cb6:	d422                	sw	s0,40(sp)
20403cb8:	1800                	addi	s0,sp,48
20403cba:	fca42e23          	sw	a0,-36(s0)
20403cbe:	fcb42c23          	sw	a1,-40(s0)
20403cc2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403cc6:	fdc42503          	lw	a0,-36(s0)
20403cca:	33d1                	jal	20403a8e <__metal_driver_sifive_plic0_control_base>
20403ccc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403cd0:	fd842783          	lw	a5,-40(s0)
20403cd4:	8795                	srai	a5,a5,0x5
20403cd6:	078a                	slli	a5,a5,0x2
20403cd8:	873e                	mv	a4,a5
20403cda:	fec42783          	lw	a5,-20(s0)
20403cde:	973e                	add	a4,a4,a5
20403ce0:	6789                	lui	a5,0x2
20403ce2:	97ba                	add	a5,a5,a4
20403ce4:	439c                	lw	a5,0(a5)
20403ce6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403cea:	fd442783          	lw	a5,-44(s0)
20403cee:	cf81                	beqz	a5,20403d06 <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403cf0:	fd842783          	lw	a5,-40(s0)
20403cf4:	8bfd                	andi	a5,a5,31
20403cf6:	4705                	li	a4,1
20403cf8:	00f717b3          	sll	a5,a4,a5
20403cfc:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403cfe:	fe842783          	lw	a5,-24(s0)
20403d02:	8fd9                	or	a5,a5,a4
20403d04:	a829                	j	20403d1e <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403d06:	fd842783          	lw	a5,-40(s0)
20403d0a:	8bfd                	andi	a5,a5,31
20403d0c:	4705                	li	a4,1
20403d0e:	00f717b3          	sll	a5,a4,a5
20403d12:	fff7c793          	not	a5,a5
20403d16:	873e                	mv	a4,a5
20403d18:	fe842783          	lw	a5,-24(s0)
20403d1c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d1e:	fd842703          	lw	a4,-40(s0)
20403d22:	8715                	srai	a4,a4,0x5
20403d24:	070a                	slli	a4,a4,0x2
20403d26:	86ba                	mv	a3,a4
20403d28:	fec42703          	lw	a4,-20(s0)
20403d2c:	96ba                	add	a3,a3,a4
20403d2e:	6709                	lui	a4,0x2
20403d30:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403d32:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403d34:	0001                	nop
20403d36:	50b2                	lw	ra,44(sp)
20403d38:	5422                	lw	s0,40(sp)
20403d3a:	6145                	addi	sp,sp,48
20403d3c:	8082                	ret

20403d3e <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403d3e:	1101                	addi	sp,sp,-32
20403d40:	ce06                	sw	ra,28(sp)
20403d42:	cc22                	sw	s0,24(sp)
20403d44:	1000                	addi	s0,sp,32
20403d46:	fea42623          	sw	a0,-20(s0)
20403d4a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403d4e:	12c00513          	li	a0,300
20403d52:	1b4010ef          	jal	ra,20404f06 <metal_shutdown>

20403d56 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403d56:	7179                	addi	sp,sp,-48
20403d58:	d606                	sw	ra,44(sp)
20403d5a:	d422                	sw	s0,40(sp)
20403d5c:	1800                	addi	s0,sp,48
20403d5e:	fca42e23          	sw	a0,-36(s0)
20403d62:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403d66:	fd842783          	lw	a5,-40(s0)
20403d6a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403d6e:	fec42503          	lw	a0,-20(s0)
20403d72:	33c5                	jal	20403b52 <__metal_plic0_claim_interrupt>
20403d74:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403d78:	fec42503          	lw	a0,-20(s0)
20403d7c:	3b35                	jal	20403ab8 <__metal_driver_sifive_plic0_num_interrupts>
20403d7e:	87aa                	mv	a5,a0
20403d80:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403d84:	fe842703          	lw	a4,-24(s0)
20403d88:	fe442783          	lw	a5,-28(s0)
20403d8c:	04f77263          	bgeu	a4,a5,20403dd0 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403d90:	fec42703          	lw	a4,-20(s0)
20403d94:	fe842783          	lw	a5,-24(s0)
20403d98:	078a                	slli	a5,a5,0x2
20403d9a:	97ba                	add	a5,a5,a4
20403d9c:	479c                	lw	a5,8(a5)
20403d9e:	cb8d                	beqz	a5,20403dd0 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403da0:	fec42703          	lw	a4,-20(s0)
20403da4:	fe842783          	lw	a5,-24(s0)
20403da8:	078a                	slli	a5,a5,0x2
20403daa:	97ba                	add	a5,a5,a4
20403dac:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403db0:	fe842603          	lw	a2,-24(s0)
20403db4:	fec42683          	lw	a3,-20(s0)
20403db8:	fe842703          	lw	a4,-24(s0)
20403dbc:	87ba                	mv	a5,a4
20403dbe:	0786                	slli	a5,a5,0x1
20403dc0:	97ba                	add	a5,a5,a4
20403dc2:	078e                	slli	a5,a5,0x3
20403dc4:	97b6                	add	a5,a5,a3
20403dc6:	0887a783          	lw	a5,136(a5)
20403dca:	85be                	mv	a1,a5
20403dcc:	8532                	mv	a0,a2
20403dce:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403dd0:	fe842583          	lw	a1,-24(s0)
20403dd4:	fec42503          	lw	a0,-20(s0)
20403dd8:	3365                	jal	20403b80 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403dda:	0001                	nop
20403ddc:	50b2                	lw	ra,44(sp)
20403dde:	5422                	lw	s0,40(sp)
20403de0:	6145                	addi	sp,sp,48
20403de2:	8082                	ret

20403de4 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403de4:	7139                	addi	sp,sp,-64
20403de6:	de06                	sw	ra,60(sp)
20403de8:	dc22                	sw	s0,56(sp)
20403dea:	0080                	addi	s0,sp,64
20403dec:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403df0:	fcc42783          	lw	a5,-52(s0)
20403df4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403df8:	fe442783          	lw	a5,-28(s0)
20403dfc:	43dc                	lw	a5,4(a5)
20403dfe:	10079c63          	bnez	a5,20403f16 <__metal_driver_riscv_plic0_init+0x132>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403e02:	fe042623          	sw	zero,-20(s0)
20403e06:	a201                	j	20403f06 <__metal_driver_riscv_plic0_init+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20403e08:	fcc42503          	lw	a0,-52(s0)
20403e0c:	3175                	jal	20403ab8 <__metal_driver_sifive_plic0_num_interrupts>
20403e0e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403e12:	fec42583          	lw	a1,-20(s0)
20403e16:	fcc42503          	lw	a0,-52(s0)
20403e1a:	31fd                	jal	20403b08 <__metal_driver_sifive_plic0_interrupt_parents>
20403e1c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403e20:	fec42583          	lw	a1,-20(s0)
20403e24:	fcc42503          	lw	a0,-52(s0)
20403e28:	3321                	jal	20403b30 <__metal_driver_sifive_plic0_interrupt_lines>
20403e2a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403e2e:	fdc42783          	lw	a5,-36(s0)
20403e32:	439c                	lw	a5,0(a5)
20403e34:	439c                	lw	a5,0(a5)
20403e36:	fdc42503          	lw	a0,-36(s0)
20403e3a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403e3c:	fe042423          	sw	zero,-24(s0)
20403e40:	a085                	j	20403ea0 <__metal_driver_riscv_plic0_init+0xbc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20403e42:	4601                	li	a2,0
20403e44:	fe842583          	lw	a1,-24(s0)
20403e48:	fe442503          	lw	a0,-28(s0)
20403e4c:	359d                	jal	20403cb2 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20403e4e:	4601                	li	a2,0
20403e50:	fe842583          	lw	a1,-24(s0)
20403e54:	fcc42503          	lw	a0,-52(s0)
20403e58:	33d1                	jal	20403c1c <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20403e5a:	fe442703          	lw	a4,-28(s0)
20403e5e:	fe842783          	lw	a5,-24(s0)
20403e62:	078a                	slli	a5,a5,0x2
20403e64:	97ba                	add	a5,a5,a4
20403e66:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20403e6a:	fe442683          	lw	a3,-28(s0)
20403e6e:	fe842703          	lw	a4,-24(s0)
20403e72:	87ba                	mv	a5,a4
20403e74:	0786                	slli	a5,a5,0x1
20403e76:	97ba                	add	a5,a5,a4
20403e78:	078e                	slli	a5,a5,0x3
20403e7a:	97b6                	add	a5,a5,a3
20403e7c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20403e80:	fe442683          	lw	a3,-28(s0)
20403e84:	fe842703          	lw	a4,-24(s0)
20403e88:	87ba                	mv	a5,a4
20403e8a:	0786                	slli	a5,a5,0x1
20403e8c:	97ba                	add	a5,a5,a4
20403e8e:	078e                	slli	a5,a5,0x3
20403e90:	97b6                	add	a5,a5,a3
20403e92:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20403e96:	fe842783          	lw	a5,-24(s0)
20403e9a:	0785                	addi	a5,a5,1
20403e9c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20403ea0:	fe842703          	lw	a4,-24(s0)
20403ea4:	fe042783          	lw	a5,-32(s0)
20403ea8:	f8f74de3          	blt	a4,a5,20403e42 <__metal_driver_riscv_plic0_init+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20403eac:	4581                	li	a1,0
20403eae:	fcc42503          	lw	a0,-52(s0)
20403eb2:	3319                	jal	20403bb8 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20403eb4:	fdc42783          	lw	a5,-36(s0)
20403eb8:	439c                	lw	a5,0(a5)
20403eba:	4fdc                	lw	a5,28(a5)
20403ebc:	fe442683          	lw	a3,-28(s0)
20403ec0:	4601                	li	a2,0
20403ec2:	fd842583          	lw	a1,-40(s0)
20403ec6:	fdc42503          	lw	a0,-36(s0)
20403eca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20403ecc:	fdc42783          	lw	a5,-36(s0)
20403ed0:	439c                	lw	a5,0(a5)
20403ed2:	4fd8                	lw	a4,28(a5)
20403ed4:	fe442683          	lw	a3,-28(s0)
20403ed8:	204047b7          	lui	a5,0x20404
20403edc:	d5678613          	addi	a2,a5,-682 # 20403d56 <__metal_plic0_handler>
20403ee0:	fd842583          	lw	a1,-40(s0)
20403ee4:	fdc42503          	lw	a0,-36(s0)
20403ee8:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20403eea:	fdc42783          	lw	a5,-36(s0)
20403eee:	439c                	lw	a5,0(a5)
20403ef0:	53dc                	lw	a5,36(a5)
20403ef2:	fd842583          	lw	a1,-40(s0)
20403ef6:	fdc42503          	lw	a0,-36(s0)
20403efa:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403efc:	fec42783          	lw	a5,-20(s0)
20403f00:	0785                	addi	a5,a5,1
20403f02:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20403f06:	fec42783          	lw	a5,-20(s0)
20403f0a:	eef05fe3          	blez	a5,20403e08 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20403f0e:	fe442783          	lw	a5,-28(s0)
20403f12:	4705                	li	a4,1
20403f14:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20403f16:	0001                	nop
20403f18:	50f2                	lw	ra,60(sp)
20403f1a:	5462                	lw	s0,56(sp)
20403f1c:	6121                	addi	sp,sp,64
20403f1e:	8082                	ret

20403f20 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20403f20:	7179                	addi	sp,sp,-48
20403f22:	d606                	sw	ra,44(sp)
20403f24:	d422                	sw	s0,40(sp)
20403f26:	1800                	addi	s0,sp,48
20403f28:	fca42e23          	sw	a0,-36(s0)
20403f2c:	fcb42c23          	sw	a1,-40(s0)
20403f30:	fcc42a23          	sw	a2,-44(s0)
20403f34:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403f38:	fdc42783          	lw	a5,-36(s0)
20403f3c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403f40:	fdc42503          	lw	a0,-36(s0)
20403f44:	b75ff0ef          	jal	ra,20403ab8 <__metal_driver_sifive_plic0_num_interrupts>
20403f48:	872a                	mv	a4,a0
20403f4a:	fd842783          	lw	a5,-40(s0)
20403f4e:	00e7c463          	blt	a5,a4,20403f56 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20403f52:	57fd                	li	a5,-1
20403f54:	a049                	j	20403fd6 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20403f56:	fd442783          	lw	a5,-44(s0)
20403f5a:	cf95                	beqz	a5,20403f96 <__metal_driver_riscv_plic0_register+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20403f5c:	4609                	li	a2,2
20403f5e:	fd842583          	lw	a1,-40(s0)
20403f62:	fdc42503          	lw	a0,-36(s0)
20403f66:	395d                	jal	20403c1c <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20403f68:	fec42703          	lw	a4,-20(s0)
20403f6c:	fd842783          	lw	a5,-40(s0)
20403f70:	078a                	slli	a5,a5,0x2
20403f72:	97ba                	add	a5,a5,a4
20403f74:	fd442703          	lw	a4,-44(s0)
20403f78:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20403f7a:	fec42683          	lw	a3,-20(s0)
20403f7e:	fd842703          	lw	a4,-40(s0)
20403f82:	87ba                	mv	a5,a4
20403f84:	0786                	slli	a5,a5,0x1
20403f86:	97ba                	add	a5,a5,a4
20403f88:	078e                	slli	a5,a5,0x3
20403f8a:	97b6                	add	a5,a5,a3
20403f8c:	fd042703          	lw	a4,-48(s0)
20403f90:	08e7a423          	sw	a4,136(a5)
20403f94:	a081                	j	20403fd4 <__metal_driver_riscv_plic0_register+0xb4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20403f96:	4605                	li	a2,1
20403f98:	fd842583          	lw	a1,-40(s0)
20403f9c:	fdc42503          	lw	a0,-36(s0)
20403fa0:	c7dff0ef          	jal	ra,20403c1c <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20403fa4:	fec42703          	lw	a4,-20(s0)
20403fa8:	fd842783          	lw	a5,-40(s0)
20403fac:	078a                	slli	a5,a5,0x2
20403fae:	97ba                	add	a5,a5,a4
20403fb0:	20404737          	lui	a4,0x20404
20403fb4:	d3e70713          	addi	a4,a4,-706 # 20403d3e <__metal_plic0_default_handler>
20403fb8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20403fba:	fec42683          	lw	a3,-20(s0)
20403fbe:	fd842703          	lw	a4,-40(s0)
20403fc2:	87ba                	mv	a5,a4
20403fc4:	0786                	slli	a5,a5,0x1
20403fc6:	97ba                	add	a5,a5,a4
20403fc8:	078e                	slli	a5,a5,0x3
20403fca:	97b6                	add	a5,a5,a3
20403fcc:	fd042703          	lw	a4,-48(s0)
20403fd0:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20403fd4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20403fd6:	853e                	mv	a0,a5
20403fd8:	50b2                	lw	ra,44(sp)
20403fda:	5422                	lw	s0,40(sp)
20403fdc:	6145                	addi	sp,sp,48
20403fde:	8082                	ret

20403fe0 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20403fe0:	7179                	addi	sp,sp,-48
20403fe2:	d606                	sw	ra,44(sp)
20403fe4:	d422                	sw	s0,40(sp)
20403fe6:	1800                	addi	s0,sp,48
20403fe8:	fca42e23          	sw	a0,-36(s0)
20403fec:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403ff0:	fdc42783          	lw	a5,-36(s0)
20403ff4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403ff8:	fdc42503          	lw	a0,-36(s0)
20403ffc:	abdff0ef          	jal	ra,20403ab8 <__metal_driver_sifive_plic0_num_interrupts>
20404000:	872a                	mv	a4,a0
20404002:	fd842783          	lw	a5,-40(s0)
20404006:	00e7c463          	blt	a5,a4,2040400e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040400a:	57fd                	li	a5,-1
2040400c:	a809                	j	2040401e <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040400e:	4605                	li	a2,1
20404010:	fd842583          	lw	a1,-40(s0)
20404014:	fec42503          	lw	a0,-20(s0)
20404018:	c9bff0ef          	jal	ra,20403cb2 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040401c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
2040401e:	853e                	mv	a0,a5
20404020:	50b2                	lw	ra,44(sp)
20404022:	5422                	lw	s0,40(sp)
20404024:	6145                	addi	sp,sp,48
20404026:	8082                	ret

20404028 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404028:	7179                	addi	sp,sp,-48
2040402a:	d606                	sw	ra,44(sp)
2040402c:	d422                	sw	s0,40(sp)
2040402e:	1800                	addi	s0,sp,48
20404030:	fca42e23          	sw	a0,-36(s0)
20404034:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404038:	fdc42783          	lw	a5,-36(s0)
2040403c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404040:	fdc42503          	lw	a0,-36(s0)
20404044:	a75ff0ef          	jal	ra,20403ab8 <__metal_driver_sifive_plic0_num_interrupts>
20404048:	872a                	mv	a4,a0
2040404a:	fd842783          	lw	a5,-40(s0)
2040404e:	00e7c463          	blt	a5,a4,20404056 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404052:	57fd                	li	a5,-1
20404054:	a809                	j	20404066 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404056:	4601                	li	a2,0
20404058:	fd842583          	lw	a1,-40(s0)
2040405c:	fec42503          	lw	a0,-20(s0)
20404060:	c53ff0ef          	jal	ra,20403cb2 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404064:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404066:	853e                	mv	a0,a5
20404068:	50b2                	lw	ra,44(sp)
2040406a:	5422                	lw	s0,40(sp)
2040406c:	6145                	addi	sp,sp,48
2040406e:	8082                	ret

20404070 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404070:	1101                	addi	sp,sp,-32
20404072:	ce22                	sw	s0,28(sp)
20404074:	1000                	addi	s0,sp,32
20404076:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040407a:	fec42703          	lw	a4,-20(s0)
2040407e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404082:	00f71563          	bne	a4,a5,2040408c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404086:	100127b7          	lui	a5,0x10012
2040408a:	a011                	j	2040408e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040408c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
2040408e:	853e                	mv	a0,a5
20404090:	4472                	lw	s0,28(sp)
20404092:	6105                	addi	sp,sp,32
20404094:	8082                	ret

20404096 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404096:	1101                	addi	sp,sp,-32
20404098:	ce22                	sw	s0,28(sp)
2040409a:	1000                	addi	s0,sp,32
2040409c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204040a0:	fec42703          	lw	a4,-20(s0)
204040a4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204040a8:	00f71763          	bne	a4,a5,204040b6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204040ac:	800007b7          	lui	a5,0x80000
204040b0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffa014>
204040b4:	a011                	j	204040b8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204040b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204040b8:	853e                	mv	a0,a5
204040ba:	4472                	lw	s0,28(sp)
204040bc:	6105                	addi	sp,sp,32
204040be:	8082                	ret

204040c0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204040c0:	1101                	addi	sp,sp,-32
204040c2:	ce22                	sw	s0,28(sp)
204040c4:	1000                	addi	s0,sp,32
204040c6:	fea42623          	sw	a0,-20(s0)
204040ca:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204040ce:	fec42703          	lw	a4,-20(s0)
204040d2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204040d6:	00f71763          	bne	a4,a5,204040e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204040da:	fe842783          	lw	a5,-24(s0)
204040de:	e399                	bnez	a5,204040e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204040e0:	479d                	li	a5,7
204040e2:	a269                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204040e4:	fec42703          	lw	a4,-20(s0)
204040e8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204040ec:	00f71963          	bne	a4,a5,204040fe <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
204040f0:	fe842703          	lw	a4,-24(s0)
204040f4:	4785                	li	a5,1
204040f6:	00f71463          	bne	a4,a5,204040fe <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
204040fa:	47a1                	li	a5,8
204040fc:	aa85                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
204040fe:	fec42703          	lw	a4,-20(s0)
20404102:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404106:	00f71963          	bne	a4,a5,20404118 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040410a:	fe842703          	lw	a4,-24(s0)
2040410e:	4789                	li	a5,2
20404110:	00f71463          	bne	a4,a5,20404118 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404114:	47a5                	li	a5,9
20404116:	aa99                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404118:	fec42703          	lw	a4,-20(s0)
2040411c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404120:	00f71963          	bne	a4,a5,20404132 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404124:	fe842703          	lw	a4,-24(s0)
20404128:	478d                	li	a5,3
2040412a:	00f71463          	bne	a4,a5,20404132 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
2040412e:	47a9                	li	a5,10
20404130:	aa35                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404132:	fec42703          	lw	a4,-20(s0)
20404136:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040413a:	00f71963          	bne	a4,a5,2040414c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
2040413e:	fe842703          	lw	a4,-24(s0)
20404142:	4791                	li	a5,4
20404144:	00f71463          	bne	a4,a5,2040414c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
20404148:	47ad                	li	a5,11
2040414a:	a20d                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040414c:	fec42703          	lw	a4,-20(s0)
20404150:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404154:	00f71963          	bne	a4,a5,20404166 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
20404158:	fe842703          	lw	a4,-24(s0)
2040415c:	4795                	li	a5,5
2040415e:	00f71463          	bne	a4,a5,20404166 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404162:	47b1                	li	a5,12
20404164:	a221                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404166:	fec42703          	lw	a4,-20(s0)
2040416a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040416e:	00f71963          	bne	a4,a5,20404180 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404172:	fe842703          	lw	a4,-24(s0)
20404176:	4799                	li	a5,6
20404178:	00f71463          	bne	a4,a5,20404180 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
2040417c:	47b5                	li	a5,13
2040417e:	a0fd                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404180:	fec42703          	lw	a4,-20(s0)
20404184:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404188:	00f71963          	bne	a4,a5,2040419a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040418c:	fe842703          	lw	a4,-24(s0)
20404190:	479d                	li	a5,7
20404192:	00f71463          	bne	a4,a5,2040419a <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404196:	47b9                	li	a5,14
20404198:	a8d1                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040419a:	fec42703          	lw	a4,-20(s0)
2040419e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041a2:	00f71963          	bne	a4,a5,204041b4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
204041a6:	fe842703          	lw	a4,-24(s0)
204041aa:	47a1                	li	a5,8
204041ac:	00f71463          	bne	a4,a5,204041b4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
204041b0:	47bd                	li	a5,15
204041b2:	a86d                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204041b4:	fec42703          	lw	a4,-20(s0)
204041b8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041bc:	00f71963          	bne	a4,a5,204041ce <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
204041c0:	fe842703          	lw	a4,-24(s0)
204041c4:	47a5                	li	a5,9
204041c6:	00f71463          	bne	a4,a5,204041ce <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
204041ca:	47c1                	li	a5,16
204041cc:	a045                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204041ce:	fec42703          	lw	a4,-20(s0)
204041d2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041d6:	00f71963          	bne	a4,a5,204041e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
204041da:	fe842703          	lw	a4,-24(s0)
204041de:	47a9                	li	a5,10
204041e0:	00f71463          	bne	a4,a5,204041e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
204041e4:	47c5                	li	a5,17
204041e6:	a059                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204041e8:	fec42703          	lw	a4,-20(s0)
204041ec:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041f0:	00f71963          	bne	a4,a5,20404202 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
204041f4:	fe842703          	lw	a4,-24(s0)
204041f8:	47ad                	li	a5,11
204041fa:	00f71463          	bne	a4,a5,20404202 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
204041fe:	47c9                	li	a5,18
20404200:	a0b5                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404202:	fec42703          	lw	a4,-20(s0)
20404206:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040420a:	00f71963          	bne	a4,a5,2040421c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
2040420e:	fe842703          	lw	a4,-24(s0)
20404212:	47b1                	li	a5,12
20404214:	00f71463          	bne	a4,a5,2040421c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
20404218:	47cd                	li	a5,19
2040421a:	a889                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040421c:	fec42703          	lw	a4,-20(s0)
20404220:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404224:	00f71963          	bne	a4,a5,20404236 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
20404228:	fe842703          	lw	a4,-24(s0)
2040422c:	47b5                	li	a5,13
2040422e:	00f71463          	bne	a4,a5,20404236 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404232:	47d1                	li	a5,20
20404234:	a825                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404236:	fec42703          	lw	a4,-20(s0)
2040423a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040423e:	00f71963          	bne	a4,a5,20404250 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404242:	fe842703          	lw	a4,-24(s0)
20404246:	47b9                	li	a5,14
20404248:	00f71463          	bne	a4,a5,20404250 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
2040424c:	47d5                	li	a5,21
2040424e:	a839                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404250:	fec42703          	lw	a4,-20(s0)
20404254:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404258:	00f71963          	bne	a4,a5,2040426a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
2040425c:	fe842703          	lw	a4,-24(s0)
20404260:	47bd                	li	a5,15
20404262:	00f71463          	bne	a4,a5,2040426a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20404266:	47d9                	li	a5,22
20404268:	a011                	j	2040426c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040426a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
2040426c:	853e                	mv	a0,a5
2040426e:	4472                	lw	s0,28(sp)
20404270:	6105                	addi	sp,sp,32
20404272:	8082                	ret

20404274 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404274:	7179                	addi	sp,sp,-48
20404276:	d606                	sw	ra,44(sp)
20404278:	d422                	sw	s0,40(sp)
2040427a:	1800                	addi	s0,sp,48
2040427c:	fca42e23          	sw	a0,-36(s0)
20404280:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404284:	fdc42503          	lw	a0,-36(s0)
20404288:	33e5                	jal	20404070 <__metal_driver_sifive_gpio0_base>
2040428a:	87aa                	mv	a5,a0
2040428c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404290:	fec42783          	lw	a5,-20(s0)
20404294:	0791                	addi	a5,a5,4
20404296:	4398                	lw	a4,0(a5)
20404298:	fd842783          	lw	a5,-40(s0)
2040429c:	fec42683          	lw	a3,-20(s0)
204042a0:	0691                	addi	a3,a3,4
204042a2:	8fd9                	or	a5,a5,a4
204042a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204042a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204042a8:	853e                	mv	a0,a5
204042aa:	50b2                	lw	ra,44(sp)
204042ac:	5422                	lw	s0,40(sp)
204042ae:	6145                	addi	sp,sp,48
204042b0:	8082                	ret

204042b2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204042b2:	7179                	addi	sp,sp,-48
204042b4:	d606                	sw	ra,44(sp)
204042b6:	d422                	sw	s0,40(sp)
204042b8:	1800                	addi	s0,sp,48
204042ba:	fca42e23          	sw	a0,-36(s0)
204042be:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204042c2:	fdc42503          	lw	a0,-36(s0)
204042c6:	336d                	jal	20404070 <__metal_driver_sifive_gpio0_base>
204042c8:	87aa                	mv	a5,a0
204042ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204042ce:	fec42783          	lw	a5,-20(s0)
204042d2:	0791                	addi	a5,a5,4
204042d4:	439c                	lw	a5,0(a5)
204042d6:	fd842703          	lw	a4,-40(s0)
204042da:	fff74713          	not	a4,a4
204042de:	86ba                	mv	a3,a4
204042e0:	fec42703          	lw	a4,-20(s0)
204042e4:	0711                	addi	a4,a4,4
204042e6:	8ff5                	and	a5,a5,a3
204042e8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204042ea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204042ec:	853e                	mv	a0,a5
204042ee:	50b2                	lw	ra,44(sp)
204042f0:	5422                	lw	s0,40(sp)
204042f2:	6145                	addi	sp,sp,48
204042f4:	8082                	ret

204042f6 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
204042f6:	7179                	addi	sp,sp,-48
204042f8:	d606                	sw	ra,44(sp)
204042fa:	d422                	sw	s0,40(sp)
204042fc:	1800                	addi	s0,sp,48
204042fe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404302:	fdc42503          	lw	a0,-36(s0)
20404306:	33ad                	jal	20404070 <__metal_driver_sifive_gpio0_base>
20404308:	87aa                	mv	a5,a0
2040430a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
2040430e:	fec42783          	lw	a5,-20(s0)
20404312:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404314:	853e                	mv	a0,a5
20404316:	50b2                	lw	ra,44(sp)
20404318:	5422                	lw	s0,40(sp)
2040431a:	6145                	addi	sp,sp,48
2040431c:	8082                	ret

2040431e <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
2040431e:	7179                	addi	sp,sp,-48
20404320:	d606                	sw	ra,44(sp)
20404322:	d422                	sw	s0,40(sp)
20404324:	1800                	addi	s0,sp,48
20404326:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040432a:	fdc42503          	lw	a0,-36(s0)
2040432e:	3389                	jal	20404070 <__metal_driver_sifive_gpio0_base>
20404330:	87aa                	mv	a5,a0
20404332:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404336:	fec42783          	lw	a5,-20(s0)
2040433a:	07b1                	addi	a5,a5,12
2040433c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
2040433e:	853e                	mv	a0,a5
20404340:	50b2                	lw	ra,44(sp)
20404342:	5422                	lw	s0,40(sp)
20404344:	6145                	addi	sp,sp,48
20404346:	8082                	ret

20404348 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404348:	7179                	addi	sp,sp,-48
2040434a:	d606                	sw	ra,44(sp)
2040434c:	d422                	sw	s0,40(sp)
2040434e:	1800                	addi	s0,sp,48
20404350:	fca42e23          	sw	a0,-36(s0)
20404354:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404358:	fdc42503          	lw	a0,-36(s0)
2040435c:	d15ff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
20404360:	87aa                	mv	a5,a0
20404362:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404366:	fec42783          	lw	a5,-20(s0)
2040436a:	07a1                	addi	a5,a5,8
2040436c:	439c                	lw	a5,0(a5)
2040436e:	fd842703          	lw	a4,-40(s0)
20404372:	fff74713          	not	a4,a4
20404376:	86ba                	mv	a3,a4
20404378:	fec42703          	lw	a4,-20(s0)
2040437c:	0721                	addi	a4,a4,8
2040437e:	8ff5                	and	a5,a5,a3
20404380:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404382:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404384:	853e                	mv	a0,a5
20404386:	50b2                	lw	ra,44(sp)
20404388:	5422                	lw	s0,40(sp)
2040438a:	6145                	addi	sp,sp,48
2040438c:	8082                	ret

2040438e <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040438e:	7179                	addi	sp,sp,-48
20404390:	d606                	sw	ra,44(sp)
20404392:	d422                	sw	s0,40(sp)
20404394:	1800                	addi	s0,sp,48
20404396:	fca42e23          	sw	a0,-36(s0)
2040439a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040439e:	fdc42503          	lw	a0,-36(s0)
204043a2:	ccfff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
204043a6:	87aa                	mv	a5,a0
204043a8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204043ac:	fec42783          	lw	a5,-20(s0)
204043b0:	07a1                	addi	a5,a5,8
204043b2:	4398                	lw	a4,0(a5)
204043b4:	fd842783          	lw	a5,-40(s0)
204043b8:	fec42683          	lw	a3,-20(s0)
204043bc:	06a1                	addi	a3,a3,8
204043be:	8fd9                	or	a5,a5,a4
204043c0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204043c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204043c4:	853e                	mv	a0,a5
204043c6:	50b2                	lw	ra,44(sp)
204043c8:	5422                	lw	s0,40(sp)
204043ca:	6145                	addi	sp,sp,48
204043cc:	8082                	ret

204043ce <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204043ce:	7179                	addi	sp,sp,-48
204043d0:	d606                	sw	ra,44(sp)
204043d2:	d422                	sw	s0,40(sp)
204043d4:	1800                	addi	s0,sp,48
204043d6:	fca42e23          	sw	a0,-36(s0)
204043da:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204043de:	fdc42503          	lw	a0,-36(s0)
204043e2:	c8fff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
204043e6:	87aa                	mv	a5,a0
204043e8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
204043ec:	fec42783          	lw	a5,-20(s0)
204043f0:	07b1                	addi	a5,a5,12
204043f2:	4398                	lw	a4,0(a5)
204043f4:	fd842783          	lw	a5,-40(s0)
204043f8:	fec42683          	lw	a3,-20(s0)
204043fc:	06b1                	addi	a3,a3,12
204043fe:	8fd9                	or	a5,a5,a4
20404400:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404402:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404404:	853e                	mv	a0,a5
20404406:	50b2                	lw	ra,44(sp)
20404408:	5422                	lw	s0,40(sp)
2040440a:	6145                	addi	sp,sp,48
2040440c:	8082                	ret

2040440e <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
2040440e:	7179                	addi	sp,sp,-48
20404410:	d606                	sw	ra,44(sp)
20404412:	d422                	sw	s0,40(sp)
20404414:	1800                	addi	s0,sp,48
20404416:	fca42e23          	sw	a0,-36(s0)
2040441a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040441e:	fdc42503          	lw	a0,-36(s0)
20404422:	c4fff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
20404426:	87aa                	mv	a5,a0
20404428:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
2040442c:	fec42783          	lw	a5,-20(s0)
20404430:	07b1                	addi	a5,a5,12
20404432:	439c                	lw	a5,0(a5)
20404434:	fd842703          	lw	a4,-40(s0)
20404438:	fff74713          	not	a4,a4
2040443c:	86ba                	mv	a3,a4
2040443e:	fec42703          	lw	a4,-20(s0)
20404442:	0731                	addi	a4,a4,12
20404444:	8ff5                	and	a5,a5,a3
20404446:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404448:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2040444a:	853e                	mv	a0,a5
2040444c:	50b2                	lw	ra,44(sp)
2040444e:	5422                	lw	s0,40(sp)
20404450:	6145                	addi	sp,sp,48
20404452:	8082                	ret

20404454 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404454:	7179                	addi	sp,sp,-48
20404456:	d606                	sw	ra,44(sp)
20404458:	d422                	sw	s0,40(sp)
2040445a:	1800                	addi	s0,sp,48
2040445c:	fca42e23          	sw	a0,-36(s0)
20404460:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404464:	fdc42503          	lw	a0,-36(s0)
20404468:	c09ff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
2040446c:	87aa                	mv	a5,a0
2040446e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404472:	fec42783          	lw	a5,-20(s0)
20404476:	07b1                	addi	a5,a5,12
20404478:	4398                	lw	a4,0(a5)
2040447a:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040447e:	fec42683          	lw	a3,-20(s0)
20404482:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404484:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404486:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404488:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040448a:	853e                	mv	a0,a5
2040448c:	50b2                	lw	ra,44(sp)
2040448e:	5422                	lw	s0,40(sp)
20404490:	6145                	addi	sp,sp,48
20404492:	8082                	ret

20404494 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404494:	7179                	addi	sp,sp,-48
20404496:	d606                	sw	ra,44(sp)
20404498:	d422                	sw	s0,40(sp)
2040449a:	1800                	addi	s0,sp,48
2040449c:	fca42e23          	sw	a0,-36(s0)
204044a0:	fcb42c23          	sw	a1,-40(s0)
204044a4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044a8:	fdc42503          	lw	a0,-36(s0)
204044ac:	bc5ff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
204044b0:	87aa                	mv	a5,a0
204044b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204044b6:	fec42783          	lw	a5,-20(s0)
204044ba:	03c78793          	addi	a5,a5,60
204044be:	439c                	lw	a5,0(a5)
204044c0:	fd842703          	lw	a4,-40(s0)
204044c4:	fff74713          	not	a4,a4
204044c8:	86ba                	mv	a3,a4
204044ca:	fec42703          	lw	a4,-20(s0)
204044ce:	03c70713          	addi	a4,a4,60
204044d2:	8ff5                	and	a5,a5,a3
204044d4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204044d6:	fec42783          	lw	a5,-20(s0)
204044da:	03878793          	addi	a5,a5,56
204044de:	4398                	lw	a4,0(a5)
204044e0:	fd442783          	lw	a5,-44(s0)
204044e4:	fec42683          	lw	a3,-20(s0)
204044e8:	03868693          	addi	a3,a3,56
204044ec:	8fd9                	or	a5,a5,a4
204044ee:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
204044f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
204044f2:	853e                	mv	a0,a5
204044f4:	50b2                	lw	ra,44(sp)
204044f6:	5422                	lw	s0,40(sp)
204044f8:	6145                	addi	sp,sp,48
204044fa:	8082                	ret

204044fc <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
204044fc:	7179                	addi	sp,sp,-48
204044fe:	d606                	sw	ra,44(sp)
20404500:	d422                	sw	s0,40(sp)
20404502:	1800                	addi	s0,sp,48
20404504:	fca42e23          	sw	a0,-36(s0)
20404508:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040450c:	fdc42503          	lw	a0,-36(s0)
20404510:	b61ff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
20404514:	87aa                	mv	a5,a0
20404516:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040451a:	fec42783          	lw	a5,-20(s0)
2040451e:	03878793          	addi	a5,a5,56
20404522:	439c                	lw	a5,0(a5)
20404524:	fd842703          	lw	a4,-40(s0)
20404528:	fff74713          	not	a4,a4
2040452c:	86ba                	mv	a3,a4
2040452e:	fec42703          	lw	a4,-20(s0)
20404532:	03870713          	addi	a4,a4,56
20404536:	8ff5                	and	a5,a5,a3
20404538:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2040453a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
2040453c:	853e                	mv	a0,a5
2040453e:	50b2                	lw	ra,44(sp)
20404540:	5422                	lw	s0,40(sp)
20404542:	6145                	addi	sp,sp,48
20404544:	8082                	ret

20404546 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404546:	7179                	addi	sp,sp,-48
20404548:	d606                	sw	ra,44(sp)
2040454a:	d422                	sw	s0,40(sp)
2040454c:	1800                	addi	s0,sp,48
2040454e:	fca42e23          	sw	a0,-36(s0)
20404552:	fcb42c23          	sw	a1,-40(s0)
20404556:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040455a:	fdc42503          	lw	a0,-36(s0)
2040455e:	b13ff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
20404562:	87aa                	mv	a5,a0
20404564:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404568:	fd442703          	lw	a4,-44(s0)
2040456c:	479d                	li	a5,7
2040456e:	1ce7e963          	bltu	a5,a4,20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404572:	fd442783          	lw	a5,-44(s0)
20404576:	00279713          	slli	a4,a5,0x2
2040457a:	204057b7          	lui	a5,0x20405
2040457e:	45078793          	addi	a5,a5,1104 # 20405450 <__metal_driver_vtable_riscv_plic0+0x4c>
20404582:	97ba                	add	a5,a5,a4
20404584:	439c                	lw	a5,0(a5)
20404586:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404588:	fec42783          	lw	a5,-20(s0)
2040458c:	07e1                	addi	a5,a5,24
2040458e:	439c                	lw	a5,0(a5)
20404590:	fd842703          	lw	a4,-40(s0)
20404594:	fff74713          	not	a4,a4
20404598:	86ba                	mv	a3,a4
2040459a:	fec42703          	lw	a4,-20(s0)
2040459e:	0761                	addi	a4,a4,24
204045a0:	8ff5                	and	a5,a5,a3
204045a2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204045a4:	fec42783          	lw	a5,-20(s0)
204045a8:	02078793          	addi	a5,a5,32
204045ac:	439c                	lw	a5,0(a5)
204045ae:	fd842703          	lw	a4,-40(s0)
204045b2:	fff74713          	not	a4,a4
204045b6:	86ba                	mv	a3,a4
204045b8:	fec42703          	lw	a4,-20(s0)
204045bc:	02070713          	addi	a4,a4,32
204045c0:	8ff5                	and	a5,a5,a3
204045c2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204045c4:	fec42783          	lw	a5,-20(s0)
204045c8:	02878793          	addi	a5,a5,40
204045cc:	439c                	lw	a5,0(a5)
204045ce:	fd842703          	lw	a4,-40(s0)
204045d2:	fff74713          	not	a4,a4
204045d6:	86ba                	mv	a3,a4
204045d8:	fec42703          	lw	a4,-20(s0)
204045dc:	02870713          	addi	a4,a4,40
204045e0:	8ff5                	and	a5,a5,a3
204045e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
204045e4:	fec42783          	lw	a5,-20(s0)
204045e8:	03078793          	addi	a5,a5,48
204045ec:	439c                	lw	a5,0(a5)
204045ee:	fd842703          	lw	a4,-40(s0)
204045f2:	fff74713          	not	a4,a4
204045f6:	86ba                	mv	a3,a4
204045f8:	fec42703          	lw	a4,-20(s0)
204045fc:	03070713          	addi	a4,a4,48
20404600:	8ff5                	and	a5,a5,a3
20404602:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404604:	aa35                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404606:	fec42783          	lw	a5,-20(s0)
2040460a:	07e1                	addi	a5,a5,24
2040460c:	4398                	lw	a4,0(a5)
2040460e:	fd842783          	lw	a5,-40(s0)
20404612:	fec42683          	lw	a3,-20(s0)
20404616:	06e1                	addi	a3,a3,24
20404618:	8fd9                	or	a5,a5,a4
2040461a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
2040461c:	a215                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040461e:	fec42783          	lw	a5,-20(s0)
20404622:	02078793          	addi	a5,a5,32
20404626:	4398                	lw	a4,0(a5)
20404628:	fd842783          	lw	a5,-40(s0)
2040462c:	fec42683          	lw	a3,-20(s0)
20404630:	02068693          	addi	a3,a3,32
20404634:	8fd9                	or	a5,a5,a4
20404636:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404638:	a221                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040463a:	fec42783          	lw	a5,-20(s0)
2040463e:	07e1                	addi	a5,a5,24
20404640:	4398                	lw	a4,0(a5)
20404642:	fd842783          	lw	a5,-40(s0)
20404646:	fec42683          	lw	a3,-20(s0)
2040464a:	06e1                	addi	a3,a3,24
2040464c:	8fd9                	or	a5,a5,a4
2040464e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404650:	fec42783          	lw	a5,-20(s0)
20404654:	02078793          	addi	a5,a5,32
20404658:	4398                	lw	a4,0(a5)
2040465a:	fd842783          	lw	a5,-40(s0)
2040465e:	fec42683          	lw	a3,-20(s0)
20404662:	02068693          	addi	a3,a3,32
20404666:	8fd9                	or	a5,a5,a4
20404668:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2040466a:	a8d9                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040466c:	fec42783          	lw	a5,-20(s0)
20404670:	02878793          	addi	a5,a5,40
20404674:	4398                	lw	a4,0(a5)
20404676:	fd842783          	lw	a5,-40(s0)
2040467a:	fec42683          	lw	a3,-20(s0)
2040467e:	02868693          	addi	a3,a3,40
20404682:	8fd9                	or	a5,a5,a4
20404684:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404686:	a86d                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404688:	fec42783          	lw	a5,-20(s0)
2040468c:	03078793          	addi	a5,a5,48
20404690:	4398                	lw	a4,0(a5)
20404692:	fd842783          	lw	a5,-40(s0)
20404696:	fec42683          	lw	a3,-20(s0)
2040469a:	03068693          	addi	a3,a3,48
2040469e:	8fd9                	or	a5,a5,a4
204046a0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204046a2:	a879                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204046a4:	fec42783          	lw	a5,-20(s0)
204046a8:	02878793          	addi	a5,a5,40
204046ac:	4398                	lw	a4,0(a5)
204046ae:	fd842783          	lw	a5,-40(s0)
204046b2:	fec42683          	lw	a3,-20(s0)
204046b6:	02868693          	addi	a3,a3,40
204046ba:	8fd9                	or	a5,a5,a4
204046bc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204046be:	fec42783          	lw	a5,-20(s0)
204046c2:	03078793          	addi	a5,a5,48
204046c6:	4398                	lw	a4,0(a5)
204046c8:	fd842783          	lw	a5,-40(s0)
204046cc:	fec42683          	lw	a3,-20(s0)
204046d0:	03068693          	addi	a3,a3,48
204046d4:	8fd9                	or	a5,a5,a4
204046d6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
204046d8:	a0a5                	j	20404740 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204046da:	fec42783          	lw	a5,-20(s0)
204046de:	07e1                	addi	a5,a5,24
204046e0:	4398                	lw	a4,0(a5)
204046e2:	fd842783          	lw	a5,-40(s0)
204046e6:	fec42683          	lw	a3,-20(s0)
204046ea:	06e1                	addi	a3,a3,24
204046ec:	8fd9                	or	a5,a5,a4
204046ee:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204046f0:	fec42783          	lw	a5,-20(s0)
204046f4:	02078793          	addi	a5,a5,32
204046f8:	4398                	lw	a4,0(a5)
204046fa:	fd842783          	lw	a5,-40(s0)
204046fe:	fec42683          	lw	a3,-20(s0)
20404702:	02068693          	addi	a3,a3,32
20404706:	8fd9                	or	a5,a5,a4
20404708:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040470a:	fec42783          	lw	a5,-20(s0)
2040470e:	02878793          	addi	a5,a5,40
20404712:	4398                	lw	a4,0(a5)
20404714:	fd842783          	lw	a5,-40(s0)
20404718:	fec42683          	lw	a3,-20(s0)
2040471c:	02868693          	addi	a3,a3,40
20404720:	8fd9                	or	a5,a5,a4
20404722:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404724:	fec42783          	lw	a5,-20(s0)
20404728:	03078793          	addi	a5,a5,48
2040472c:	4398                	lw	a4,0(a5)
2040472e:	fd842783          	lw	a5,-40(s0)
20404732:	fec42683          	lw	a3,-20(s0)
20404736:	03068693          	addi	a3,a3,48
2040473a:	8fd9                	or	a5,a5,a4
2040473c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
2040473e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404740:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404742:	853e                	mv	a0,a5
20404744:	50b2                	lw	ra,44(sp)
20404746:	5422                	lw	s0,40(sp)
20404748:	6145                	addi	sp,sp,48
2040474a:	8082                	ret

2040474c <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040474c:	7179                	addi	sp,sp,-48
2040474e:	d606                	sw	ra,44(sp)
20404750:	d422                	sw	s0,40(sp)
20404752:	1800                	addi	s0,sp,48
20404754:	fca42e23          	sw	a0,-36(s0)
20404758:	fcb42c23          	sw	a1,-40(s0)
2040475c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404760:	fdc42503          	lw	a0,-36(s0)
20404764:	90dff0ef          	jal	ra,20404070 <__metal_driver_sifive_gpio0_base>
20404768:	87aa                	mv	a5,a0
2040476a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
2040476e:	fd442703          	lw	a4,-44(s0)
20404772:	479d                	li	a5,7
20404774:	14e7ea63          	bltu	a5,a4,204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404778:	fd442783          	lw	a5,-44(s0)
2040477c:	00279713          	slli	a4,a5,0x2
20404780:	204057b7          	lui	a5,0x20405
20404784:	47078793          	addi	a5,a5,1136 # 20405470 <__metal_driver_vtable_riscv_plic0+0x6c>
20404788:	97ba                	add	a5,a5,a4
2040478a:	439c                	lw	a5,0(a5)
2040478c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040478e:	fec42783          	lw	a5,-20(s0)
20404792:	07f1                	addi	a5,a5,28
20404794:	4398                	lw	a4,0(a5)
20404796:	fd842783          	lw	a5,-40(s0)
2040479a:	fec42683          	lw	a3,-20(s0)
2040479e:	06f1                	addi	a3,a3,28
204047a0:	8fd9                	or	a5,a5,a4
204047a2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204047a4:	a215                	j	204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204047a6:	fec42783          	lw	a5,-20(s0)
204047aa:	02478793          	addi	a5,a5,36
204047ae:	4398                	lw	a4,0(a5)
204047b0:	fd842783          	lw	a5,-40(s0)
204047b4:	fec42683          	lw	a3,-20(s0)
204047b8:	02468693          	addi	a3,a3,36
204047bc:	8fd9                	or	a5,a5,a4
204047be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204047c0:	a221                	j	204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204047c2:	fec42783          	lw	a5,-20(s0)
204047c6:	07f1                	addi	a5,a5,28
204047c8:	4398                	lw	a4,0(a5)
204047ca:	fd842783          	lw	a5,-40(s0)
204047ce:	fec42683          	lw	a3,-20(s0)
204047d2:	06f1                	addi	a3,a3,28
204047d4:	8fd9                	or	a5,a5,a4
204047d6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204047d8:	fec42783          	lw	a5,-20(s0)
204047dc:	02478793          	addi	a5,a5,36
204047e0:	4398                	lw	a4,0(a5)
204047e2:	fd842783          	lw	a5,-40(s0)
204047e6:	fec42683          	lw	a3,-20(s0)
204047ea:	02468693          	addi	a3,a3,36
204047ee:	8fd9                	or	a5,a5,a4
204047f0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
204047f2:	a8d9                	j	204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204047f4:	fec42783          	lw	a5,-20(s0)
204047f8:	02c78793          	addi	a5,a5,44
204047fc:	4398                	lw	a4,0(a5)
204047fe:	fd842783          	lw	a5,-40(s0)
20404802:	fec42683          	lw	a3,-20(s0)
20404806:	02c68693          	addi	a3,a3,44
2040480a:	8fd9                	or	a5,a5,a4
2040480c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
2040480e:	a86d                	j	204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404810:	fec42783          	lw	a5,-20(s0)
20404814:	03478793          	addi	a5,a5,52
20404818:	4398                	lw	a4,0(a5)
2040481a:	fd842783          	lw	a5,-40(s0)
2040481e:	fec42683          	lw	a3,-20(s0)
20404822:	03468693          	addi	a3,a3,52
20404826:	8fd9                	or	a5,a5,a4
20404828:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
2040482a:	a879                	j	204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040482c:	fec42783          	lw	a5,-20(s0)
20404830:	02c78793          	addi	a5,a5,44
20404834:	4398                	lw	a4,0(a5)
20404836:	fd842783          	lw	a5,-40(s0)
2040483a:	fec42683          	lw	a3,-20(s0)
2040483e:	02c68693          	addi	a3,a3,44
20404842:	8fd9                	or	a5,a5,a4
20404844:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404846:	fec42783          	lw	a5,-20(s0)
2040484a:	03478793          	addi	a5,a5,52
2040484e:	4398                	lw	a4,0(a5)
20404850:	fd842783          	lw	a5,-40(s0)
20404854:	fec42683          	lw	a3,-20(s0)
20404858:	03468693          	addi	a3,a3,52
2040485c:	8fd9                	or	a5,a5,a4
2040485e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404860:	a0a5                	j	204048c8 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404862:	fec42783          	lw	a5,-20(s0)
20404866:	07f1                	addi	a5,a5,28
20404868:	4398                	lw	a4,0(a5)
2040486a:	fd842783          	lw	a5,-40(s0)
2040486e:	fec42683          	lw	a3,-20(s0)
20404872:	06f1                	addi	a3,a3,28
20404874:	8fd9                	or	a5,a5,a4
20404876:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404878:	fec42783          	lw	a5,-20(s0)
2040487c:	02478793          	addi	a5,a5,36
20404880:	4398                	lw	a4,0(a5)
20404882:	fd842783          	lw	a5,-40(s0)
20404886:	fec42683          	lw	a3,-20(s0)
2040488a:	02468693          	addi	a3,a3,36
2040488e:	8fd9                	or	a5,a5,a4
20404890:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404892:	fec42783          	lw	a5,-20(s0)
20404896:	02c78793          	addi	a5,a5,44
2040489a:	4398                	lw	a4,0(a5)
2040489c:	fd842783          	lw	a5,-40(s0)
204048a0:	fec42683          	lw	a3,-20(s0)
204048a4:	02c68693          	addi	a3,a3,44
204048a8:	8fd9                	or	a5,a5,a4
204048aa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204048ac:	fec42783          	lw	a5,-20(s0)
204048b0:	03478793          	addi	a5,a5,52
204048b4:	4398                	lw	a4,0(a5)
204048b6:	fd842783          	lw	a5,-40(s0)
204048ba:	fec42683          	lw	a3,-20(s0)
204048be:	03468693          	addi	a3,a3,52
204048c2:	8fd9                	or	a5,a5,a4
204048c4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204048c6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
204048c8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
204048ca:	853e                	mv	a0,a5
204048cc:	50b2                	lw	ra,44(sp)
204048ce:	5422                	lw	s0,40(sp)
204048d0:	6145                	addi	sp,sp,48
204048d2:	8082                	ret

204048d4 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
204048d4:	1101                	addi	sp,sp,-32
204048d6:	ce06                	sw	ra,28(sp)
204048d8:	cc22                	sw	s0,24(sp)
204048da:	1000                	addi	s0,sp,32
204048dc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
204048e0:	fec42503          	lw	a0,-20(s0)
204048e4:	fb2ff0ef          	jal	ra,20404096 <__metal_driver_sifive_gpio0_interrupt_parent>
204048e8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
204048ea:	853e                	mv	a0,a5
204048ec:	40f2                	lw	ra,28(sp)
204048ee:	4462                	lw	s0,24(sp)
204048f0:	6105                	addi	sp,sp,32
204048f2:	8082                	ret

204048f4 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
204048f4:	7179                	addi	sp,sp,-48
204048f6:	d606                	sw	ra,44(sp)
204048f8:	d422                	sw	s0,40(sp)
204048fa:	1800                	addi	s0,sp,48
204048fc:	fca42e23          	sw	a0,-36(s0)
20404900:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404904:	fd842583          	lw	a1,-40(s0)
20404908:	fdc42503          	lw	a0,-36(s0)
2040490c:	fb4ff0ef          	jal	ra,204040c0 <__metal_driver_sifive_gpio0_interrupt_lines>
20404910:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404914:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404918:	853e                	mv	a0,a5
2040491a:	50b2                	lw	ra,44(sp)
2040491c:	5422                	lw	s0,40(sp)
2040491e:	6145                	addi	sp,sp,48
20404920:	8082                	ret

20404922 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404922:	1101                	addi	sp,sp,-32
20404924:	ce22                	sw	s0,28(sp)
20404926:	1000                	addi	s0,sp,32
20404928:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040492c:	fec42703          	lw	a4,-20(s0)
20404930:	800007b7          	lui	a5,0x80000
20404934:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20404938:	00f71563          	bne	a4,a5,20404942 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
2040493c:	100137b7          	lui	a5,0x10013
20404940:	a011                	j	20404944 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404942:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404944:	853e                	mv	a0,a5
20404946:	4472                	lw	s0,28(sp)
20404948:	6105                	addi	sp,sp,32
2040494a:	8082                	ret

2040494c <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
2040494c:	1101                	addi	sp,sp,-32
2040494e:	ce22                	sw	s0,28(sp)
20404950:	1000                	addi	s0,sp,32
20404952:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404956:	fec42703          	lw	a4,-20(s0)
2040495a:	800007b7          	lui	a5,0x80000
2040495e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20404962:	00f71763          	bne	a4,a5,20404970 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404966:	800007b7          	lui	a5,0x80000
2040496a:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffa014>
2040496e:	a011                	j	20404972 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404970:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404972:	853e                	mv	a0,a5
20404974:	4472                	lw	s0,28(sp)
20404976:	6105                	addi	sp,sp,32
20404978:	8082                	ret

2040497a <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
2040497a:	1101                	addi	sp,sp,-32
2040497c:	ce22                	sw	s0,28(sp)
2040497e:	1000                	addi	s0,sp,32
20404980:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404984:	fec42703          	lw	a4,-20(s0)
20404988:	800007b7          	lui	a5,0x80000
2040498c:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20404990:	00f71463          	bne	a4,a5,20404998 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404994:	4795                	li	a5,5
20404996:	a011                	j	2040499a <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404998:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
2040499a:	853e                	mv	a0,a5
2040499c:	4472                	lw	s0,28(sp)
2040499e:	6105                	addi	sp,sp,32
204049a0:	8082                	ret

204049a2 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
204049a2:	1101                	addi	sp,sp,-32
204049a4:	ce22                	sw	s0,28(sp)
204049a6:	1000                	addi	s0,sp,32
204049a8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204049ac:	fec42703          	lw	a4,-20(s0)
204049b0:	800007b7          	lui	a5,0x80000
204049b4:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
204049b8:	00f71763          	bne	a4,a5,204049c6 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
204049bc:	800007b7          	lui	a5,0x80000
204049c0:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffff9c4c>
204049c4:	a011                	j	204049c8 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
204049c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
204049c8:	853e                	mv	a0,a5
204049ca:	4472                	lw	s0,28(sp)
204049cc:	6105                	addi	sp,sp,32
204049ce:	8082                	ret

204049d0 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
204049d0:	1101                	addi	sp,sp,-32
204049d2:	ce22                	sw	s0,28(sp)
204049d4:	1000                	addi	s0,sp,32
204049d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204049da:	fec42703          	lw	a4,-20(s0)
204049de:	800007b7          	lui	a5,0x80000
204049e2:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
204049e6:	00f71563          	bne	a4,a5,204049f0 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
204049ea:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204049ee:	a011                	j	204049f2 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
204049f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
204049f2:	853e                	mv	a0,a5
204049f4:	4472                	lw	s0,28(sp)
204049f6:	6105                	addi	sp,sp,32
204049f8:	8082                	ret

204049fa <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
204049fa:	1101                	addi	sp,sp,-32
204049fc:	ce22                	sw	s0,28(sp)
204049fe:	1000                	addi	s0,sp,32
20404a00:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a04:	fec42703          	lw	a4,-20(s0)
20404a08:	800007b7          	lui	a5,0x80000
20404a0c:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20404a10:	00f71563          	bne	a4,a5,20404a1a <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404a14:	000307b7          	lui	a5,0x30
20404a18:	a011                	j	20404a1c <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404a1a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404a1c:	853e                	mv	a0,a5
20404a1e:	4472                	lw	s0,28(sp)
20404a20:	6105                	addi	sp,sp,32
20404a22:	8082                	ret

20404a24 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404a24:	1101                	addi	sp,sp,-32
20404a26:	ce22                	sw	s0,28(sp)
20404a28:	1000                	addi	s0,sp,32
20404a2a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a2e:	fec42703          	lw	a4,-20(s0)
20404a32:	800007b7          	lui	a5,0x80000
20404a36:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffa314>
20404a3a:	00f71563          	bne	a4,a5,20404a44 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404a3e:	000307b7          	lui	a5,0x30
20404a42:	a011                	j	20404a46 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404a44:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404a46:	853e                	mv	a0,a5
20404a48:	4472                	lw	s0,28(sp)
20404a4a:	6105                	addi	sp,sp,32
20404a4c:	8082                	ret

20404a4e <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404a4e:	1101                	addi	sp,sp,-32
20404a50:	ce06                	sw	ra,28(sp)
20404a52:	cc22                	sw	s0,24(sp)
20404a54:	1000                	addi	s0,sp,32
20404a56:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404a5a:	fec42503          	lw	a0,-20(s0)
20404a5e:	35fd                	jal	2040494c <__metal_driver_sifive_uart0_interrupt_parent>
20404a60:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404a62:	853e                	mv	a0,a5
20404a64:	40f2                	lw	ra,28(sp)
20404a66:	4462                	lw	s0,24(sp)
20404a68:	6105                	addi	sp,sp,32
20404a6a:	8082                	ret

20404a6c <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404a6c:	1101                	addi	sp,sp,-32
20404a6e:	ce06                	sw	ra,28(sp)
20404a70:	cc22                	sw	s0,24(sp)
20404a72:	1000                	addi	s0,sp,32
20404a74:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404a78:	fec42503          	lw	a0,-20(s0)
20404a7c:	3dfd                	jal	2040497a <__metal_driver_sifive_uart0_interrupt_line>
20404a7e:	87aa                	mv	a5,a0
20404a80:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404a84:	853e                	mv	a0,a5
20404a86:	40f2                	lw	ra,28(sp)
20404a88:	4462                	lw	s0,24(sp)
20404a8a:	6105                	addi	sp,sp,32
20404a8c:	8082                	ret

20404a8e <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404a8e:	7179                	addi	sp,sp,-48
20404a90:	d606                	sw	ra,44(sp)
20404a92:	d422                	sw	s0,40(sp)
20404a94:	1800                	addi	s0,sp,48
20404a96:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404a9a:	fdc42503          	lw	a0,-36(s0)
20404a9e:	3551                	jal	20404922 <__metal_driver_sifive_uart0_control_base>
20404aa0:	87aa                	mv	a5,a0
20404aa2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404aa6:	fec42783          	lw	a5,-20(s0)
20404aaa:	439c                	lw	a5,0(a5)
20404aac:	fff7c793          	not	a5,a5
20404ab0:	83fd                	srli	a5,a5,0x1f
20404ab2:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404ab6:	853e                	mv	a0,a5
20404ab8:	50b2                	lw	ra,44(sp)
20404aba:	5422                	lw	s0,40(sp)
20404abc:	6145                	addi	sp,sp,48
20404abe:	8082                	ret

20404ac0 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404ac0:	7179                	addi	sp,sp,-48
20404ac2:	d606                	sw	ra,44(sp)
20404ac4:	d422                	sw	s0,40(sp)
20404ac6:	1800                	addi	s0,sp,48
20404ac8:	fca42e23          	sw	a0,-36(s0)
20404acc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404ad0:	fdc42503          	lw	a0,-36(s0)
20404ad4:	35b9                	jal	20404922 <__metal_driver_sifive_uart0_control_base>
20404ad6:	87aa                	mv	a5,a0
20404ad8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404adc:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404ade:	fdc42503          	lw	a0,-36(s0)
20404ae2:	3775                	jal	20404a8e <__metal_driver_sifive_uart0_txready>
20404ae4:	87aa                	mv	a5,a0
20404ae6:	dfe5                	beqz	a5,20404ade <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404ae8:	fec42783          	lw	a5,-20(s0)
20404aec:	fd842703          	lw	a4,-40(s0)
20404af0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404af2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404af4:	853e                	mv	a0,a5
20404af6:	50b2                	lw	ra,44(sp)
20404af8:	5422                	lw	s0,40(sp)
20404afa:	6145                	addi	sp,sp,48
20404afc:	8082                	ret

20404afe <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404afe:	7179                	addi	sp,sp,-48
20404b00:	d606                	sw	ra,44(sp)
20404b02:	d422                	sw	s0,40(sp)
20404b04:	1800                	addi	s0,sp,48
20404b06:	fca42e23          	sw	a0,-36(s0)
20404b0a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404b0e:	fdc42503          	lw	a0,-36(s0)
20404b12:	3d01                	jal	20404922 <__metal_driver_sifive_uart0_control_base>
20404b14:	87aa                	mv	a5,a0
20404b16:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404b1a:	fec42783          	lw	a5,-20(s0)
20404b1e:	0791                	addi	a5,a5,4
20404b20:	439c                	lw	a5,0(a5)
20404b22:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404b26:	fe842783          	lw	a5,-24(s0)
20404b2a:	0007d763          	bgez	a5,20404b38 <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404b2e:	fd842783          	lw	a5,-40(s0)
20404b32:	577d                	li	a4,-1
20404b34:	c398                	sw	a4,0(a5)
20404b36:	a801                	j	20404b46 <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404b38:	fe842783          	lw	a5,-24(s0)
20404b3c:	0ff7f713          	andi	a4,a5,255
20404b40:	fd842783          	lw	a5,-40(s0)
20404b44:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404b46:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404b48:	853e                	mv	a0,a5
20404b4a:	50b2                	lw	ra,44(sp)
20404b4c:	5422                	lw	s0,40(sp)
20404b4e:	6145                	addi	sp,sp,48
20404b50:	8082                	ret

20404b52 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404b52:	7179                	addi	sp,sp,-48
20404b54:	d622                	sw	s0,44(sp)
20404b56:	1800                	addi	s0,sp,48
20404b58:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404b5c:	fdc42783          	lw	a5,-36(s0)
20404b60:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404b64:	fec42783          	lw	a5,-20(s0)
20404b68:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404b6a:	853e                	mv	a0,a5
20404b6c:	5432                	lw	s0,44(sp)
20404b6e:	6145                	addi	sp,sp,48
20404b70:	8082                	ret

20404b72 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404b72:	7179                	addi	sp,sp,-48
20404b74:	d606                	sw	ra,44(sp)
20404b76:	d422                	sw	s0,40(sp)
20404b78:	1800                	addi	s0,sp,48
20404b7a:	fca42e23          	sw	a0,-36(s0)
20404b7e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404b82:	fdc42783          	lw	a5,-36(s0)
20404b86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404b8a:	fdc42503          	lw	a0,-36(s0)
20404b8e:	3b51                	jal	20404922 <__metal_driver_sifive_uart0_control_base>
20404b90:	87aa                	mv	a5,a0
20404b92:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404b96:	fdc42503          	lw	a0,-36(s0)
20404b9a:	3521                	jal	204049a2 <__metal_driver_sifive_uart0_clock>
20404b9c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404ba0:	fd842703          	lw	a4,-40(s0)
20404ba4:	fec42783          	lw	a5,-20(s0)
20404ba8:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404baa:	fe442783          	lw	a5,-28(s0)
20404bae:	cbb1                	beqz	a5,20404c02 <__metal_driver_sifive_uart0_set_baud_rate+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404bb0:	fe442783          	lw	a5,-28(s0)
20404bb4:	439c                	lw	a5,0(a5)
20404bb6:	439c                	lw	a5,0(a5)
20404bb8:	fe442503          	lw	a0,-28(s0)
20404bbc:	9782                	jalr	a5
20404bbe:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404bc2:	fe042703          	lw	a4,-32(s0)
20404bc6:	fd842783          	lw	a5,-40(s0)
20404bca:	02f747b3          	div	a5,a4,a5
20404bce:	fff78713          	addi	a4,a5,-1
20404bd2:	fe842783          	lw	a5,-24(s0)
20404bd6:	07e1                	addi	a5,a5,24
20404bd8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404bda:	fe842783          	lw	a5,-24(s0)
20404bde:	07a1                	addi	a5,a5,8
20404be0:	439c                	lw	a5,0(a5)
20404be2:	fe842703          	lw	a4,-24(s0)
20404be6:	0721                	addi	a4,a4,8
20404be8:	0017e793          	ori	a5,a5,1
20404bec:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404bee:	fe842783          	lw	a5,-24(s0)
20404bf2:	07b1                	addi	a5,a5,12
20404bf4:	439c                	lw	a5,0(a5)
20404bf6:	fe842703          	lw	a4,-24(s0)
20404bfa:	0731                	addi	a4,a4,12
20404bfc:	0017e793          	ori	a5,a5,1
20404c00:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404c02:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404c04:	853e                	mv	a0,a5
20404c06:	50b2                	lw	ra,44(sp)
20404c08:	5422                	lw	s0,40(sp)
20404c0a:	6145                	addi	sp,sp,48
20404c0c:	8082                	ret

20404c0e <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404c0e:	7139                	addi	sp,sp,-64
20404c10:	de06                	sw	ra,60(sp)
20404c12:	dc22                	sw	s0,56(sp)
20404c14:	0080                	addi	s0,sp,64
20404c16:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404c1a:	fcc42783          	lw	a5,-52(s0)
20404c1e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404c22:	fcc42503          	lw	a0,-52(s0)
20404c26:	cfdff0ef          	jal	ra,20404922 <__metal_driver_sifive_uart0_control_base>
20404c2a:	87aa                	mv	a5,a0
20404c2c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404c30:	fcc42503          	lw	a0,-52(s0)
20404c34:	d6fff0ef          	jal	ra,204049a2 <__metal_driver_sifive_uart0_clock>
20404c38:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404c3c:	fe842783          	lw	a5,-24(s0)
20404c40:	07a1                	addi	a5,a5,8
20404c42:	4398                	lw	a4,0(a5)
20404c44:	fe842783          	lw	a5,-24(s0)
20404c48:	07a1                	addi	a5,a5,8
20404c4a:	86be                	mv	a3,a5
20404c4c:	fff907b7          	lui	a5,0xfff90
20404c50:	17fd                	addi	a5,a5,-1
20404c52:	8ff9                	and	a5,a5,a4
20404c54:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404c56:	fe842783          	lw	a5,-24(s0)
20404c5a:	07a1                	addi	a5,a5,8
20404c5c:	4398                	lw	a4,0(a5)
20404c5e:	fe842783          	lw	a5,-24(s0)
20404c62:	07a1                	addi	a5,a5,8
20404c64:	86be                	mv	a3,a5
20404c66:	67c1                	lui	a5,0x10
20404c68:	8fd9                	or	a5,a5,a4
20404c6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404c6c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404c6e:	fe842783          	lw	a5,-24(s0)
20404c72:	07d1                	addi	a5,a5,20
20404c74:	439c                	lw	a5,0(a5)
20404c76:	8b85                	andi	a5,a5,1
20404c78:	dbfd                	beqz	a5,20404c6e <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404c7a:	fe842783          	lw	a5,-24(s0)
20404c7e:	07a1                	addi	a5,a5,8
20404c80:	439c                	lw	a5,0(a5)
20404c82:	8b89                	andi	a5,a5,2
20404c84:	c399                	beqz	a5,20404c8a <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404c86:	47a5                	li	a5,9
20404c88:	a011                	j	20404c8c <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404c8a:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404c8c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404c90:	fe442783          	lw	a5,-28(s0)
20404c94:	439c                	lw	a5,0(a5)
20404c96:	439c                	lw	a5,0(a5)
20404c98:	fe442503          	lw	a0,-28(s0)
20404c9c:	9782                	jalr	a5
20404c9e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404ca2:	fe042703          	lw	a4,-32(s0)
20404ca6:	fdc42783          	lw	a5,-36(s0)
20404caa:	02f707b3          	mul	a5,a4,a5
20404cae:	873e                	mv	a4,a5
20404cb0:	fec42783          	lw	a5,-20(s0)
20404cb4:	43dc                	lw	a5,4(a5)
20404cb6:	02f757b3          	divu	a5,a4,a5
20404cba:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404cbe:	fc042a23          	sw	zero,-44(s0)
20404cc2:	a039                	j	20404cd0 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404cc4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404cc6:	fd442783          	lw	a5,-44(s0)
20404cca:	0785                	addi	a5,a5,1
20404ccc:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404cd0:	fd442783          	lw	a5,-44(s0)
20404cd4:	fd842703          	lw	a4,-40(s0)
20404cd8:	fee7c6e3          	blt	a5,a4,20404cc4 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404cdc:	0001                	nop
20404cde:	50f2                	lw	ra,60(sp)
20404ce0:	5462                	lw	s0,56(sp)
20404ce2:	6121                	addi	sp,sp,64
20404ce4:	8082                	ret

20404ce6 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404ce6:	7179                	addi	sp,sp,-48
20404ce8:	d606                	sw	ra,44(sp)
20404cea:	d422                	sw	s0,40(sp)
20404cec:	1800                	addi	s0,sp,48
20404cee:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404cf2:	fdc42783          	lw	a5,-36(s0)
20404cf6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404cfa:	fec42703          	lw	a4,-20(s0)
20404cfe:	fec42783          	lw	a5,-20(s0)
20404d02:	43dc                	lw	a5,4(a5)
20404d04:	85be                	mv	a1,a5
20404d06:	853a                	mv	a0,a4
20404d08:	de5fc0ef          	jal	ra,20401aec <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404d0c:	0001                	nop
20404d0e:	50b2                	lw	ra,44(sp)
20404d10:	5422                	lw	s0,40(sp)
20404d12:	6145                	addi	sp,sp,48
20404d14:	8082                	ret

20404d16 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404d16:	7139                	addi	sp,sp,-64
20404d18:	de06                	sw	ra,60(sp)
20404d1a:	dc22                	sw	s0,56(sp)
20404d1c:	0080                	addi	s0,sp,64
20404d1e:	fca42623          	sw	a0,-52(s0)
20404d22:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404d26:	fcc42783          	lw	a5,-52(s0)
20404d2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404d2e:	fcc42503          	lw	a0,-52(s0)
20404d32:	c71ff0ef          	jal	ra,204049a2 <__metal_driver_sifive_uart0_clock>
20404d36:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404d3a:	fcc42503          	lw	a0,-52(s0)
20404d3e:	c93ff0ef          	jal	ra,204049d0 <__metal_driver_sifive_uart0_pinmux>
20404d42:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404d46:	fe842783          	lw	a5,-24(s0)
20404d4a:	c7b9                	beqz	a5,20404d98 <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404d4c:	fec42783          	lw	a5,-20(s0)
20404d50:	20405737          	lui	a4,0x20405
20404d54:	c0e70713          	addi	a4,a4,-1010 # 20404c0e <pre_rate_change_callback_func>
20404d58:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404d5a:	fec42783          	lw	a5,-20(s0)
20404d5e:	fcc42703          	lw	a4,-52(s0)
20404d62:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404d64:	fec42783          	lw	a5,-20(s0)
20404d68:	07a1                	addi	a5,a5,8
20404d6a:	85be                	mv	a1,a5
20404d6c:	fe842503          	lw	a0,-24(s0)
20404d70:	20f1                	jal	20404e3c <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404d72:	fec42783          	lw	a5,-20(s0)
20404d76:	20405737          	lui	a4,0x20405
20404d7a:	ce670713          	addi	a4,a4,-794 # 20404ce6 <post_rate_change_callback_func>
20404d7e:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20404d80:	fec42783          	lw	a5,-20(s0)
20404d84:	fcc42703          	lw	a4,-52(s0)
20404d88:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20404d8a:	fec42783          	lw	a5,-20(s0)
20404d8e:	07d1                	addi	a5,a5,20
20404d90:	85be                	mv	a1,a5
20404d92:	fe842503          	lw	a0,-24(s0)
20404d96:	28d9                	jal	20404e6c <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20404d98:	fec42783          	lw	a5,-20(s0)
20404d9c:	fc842583          	lw	a1,-56(s0)
20404da0:	853e                	mv	a0,a5
20404da2:	d4bfc0ef          	jal	ra,20401aec <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20404da6:	fe442783          	lw	a5,-28(s0)
20404daa:	cb95                	beqz	a5,20404dde <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20404dac:	fcc42503          	lw	a0,-52(s0)
20404db0:	c4bff0ef          	jal	ra,204049fa <__metal_driver_sifive_uart0_pinmux_output_selector>
20404db4:	87aa                	mv	a5,a0
20404db6:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20404dba:	fcc42503          	lw	a0,-52(s0)
20404dbe:	c67ff0ef          	jal	ra,20404a24 <__metal_driver_sifive_uart0_pinmux_source_selector>
20404dc2:	87aa                	mv	a5,a0
20404dc4:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20404dc8:	fe442783          	lw	a5,-28(s0)
20404dcc:	439c                	lw	a5,0(a5)
20404dce:	53dc                	lw	a5,36(a5)
20404dd0:	fdc42603          	lw	a2,-36(s0)
20404dd4:	fe042583          	lw	a1,-32(s0)
20404dd8:	fe442503          	lw	a0,-28(s0)
20404ddc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20404dde:	0001                	nop
20404de0:	50f2                	lw	ra,60(sp)
20404de2:	5462                	lw	s0,56(sp)
20404de4:	6121                	addi	sp,sp,64
20404de6:	8082                	ret

20404de8 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20404de8:	7179                	addi	sp,sp,-48
20404dea:	d622                	sw	s0,44(sp)
20404dec:	1800                	addi	s0,sp,48
20404dee:	fca42e23          	sw	a0,-36(s0)
20404df2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20404df6:	fd842783          	lw	a5,-40(s0)
20404dfa:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20404dfe:	fdc42783          	lw	a5,-36(s0)
20404e02:	e781                	bnez	a5,20404e0a <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20404e04:	fd842783          	lw	a5,-40(s0)
20404e08:	a035                	j	20404e34 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20404e0a:	fdc42783          	lw	a5,-36(s0)
20404e0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20404e12:	a031                	j	20404e1e <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20404e14:	fec42783          	lw	a5,-20(s0)
20404e18:	479c                	lw	a5,8(a5)
20404e1a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20404e1e:	fec42783          	lw	a5,-20(s0)
20404e22:	479c                	lw	a5,8(a5)
20404e24:	fbe5                	bnez	a5,20404e14 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20404e26:	fec42783          	lw	a5,-20(s0)
20404e2a:	fd842703          	lw	a4,-40(s0)
20404e2e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20404e30:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20404e34:	853e                	mv	a0,a5
20404e36:	5432                	lw	s0,44(sp)
20404e38:	6145                	addi	sp,sp,48
20404e3a:	8082                	ret

20404e3c <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404e3c:	1101                	addi	sp,sp,-32
20404e3e:	ce06                	sw	ra,28(sp)
20404e40:	cc22                	sw	s0,24(sp)
20404e42:	1000                	addi	s0,sp,32
20404e44:	fea42623          	sw	a0,-20(s0)
20404e48:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20404e4c:	fec42783          	lw	a5,-20(s0)
20404e50:	43dc                	lw	a5,4(a5)
20404e52:	fe842583          	lw	a1,-24(s0)
20404e56:	853e                	mv	a0,a5
20404e58:	3f41                	jal	20404de8 <_metal_clock_append_to_callbacks>
20404e5a:	872a                	mv	a4,a0
20404e5c:	fec42783          	lw	a5,-20(s0)
20404e60:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20404e62:	0001                	nop
20404e64:	40f2                	lw	ra,28(sp)
20404e66:	4462                	lw	s0,24(sp)
20404e68:	6105                	addi	sp,sp,32
20404e6a:	8082                	ret

20404e6c <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404e6c:	1101                	addi	sp,sp,-32
20404e6e:	ce06                	sw	ra,28(sp)
20404e70:	cc22                	sw	s0,24(sp)
20404e72:	1000                	addi	s0,sp,32
20404e74:	fea42623          	sw	a0,-20(s0)
20404e78:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20404e7c:	fec42783          	lw	a5,-20(s0)
20404e80:	479c                	lw	a5,8(a5)
20404e82:	fe842583          	lw	a1,-24(s0)
20404e86:	853e                	mv	a0,a5
20404e88:	3785                	jal	20404de8 <_metal_clock_append_to_callbacks>
20404e8a:	872a                	mv	a4,a0
20404e8c:	fec42783          	lw	a5,-20(s0)
20404e90:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20404e92:	0001                	nop
20404e94:	40f2                	lw	ra,28(sp)
20404e96:	4462                	lw	s0,24(sp)
20404e98:	6105                	addi	sp,sp,32
20404e9a:	8082                	ret

20404e9c <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20404e9c:	1101                	addi	sp,sp,-32
20404e9e:	ce06                	sw	ra,28(sp)
20404ea0:	cc22                	sw	s0,24(sp)
20404ea2:	1000                	addi	s0,sp,32
20404ea4:	fea42623          	sw	a0,-20(s0)
20404ea8:	fec42783          	lw	a5,-20(s0)
20404eac:	439c                	lw	a5,0(a5)
20404eae:	57dc                	lw	a5,44(a5)
20404eb0:	fec42503          	lw	a0,-20(s0)
20404eb4:	9782                	jalr	a5
20404eb6:	87aa                	mv	a5,a0
20404eb8:	853e                	mv	a0,a5
20404eba:	40f2                	lw	ra,28(sp)
20404ebc:	4462                	lw	s0,24(sp)
20404ebe:	6105                	addi	sp,sp,32
20404ec0:	8082                	ret

20404ec2 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20404ec2:	1101                	addi	sp,sp,-32
20404ec4:	ce22                	sw	s0,28(sp)
20404ec6:	1000                	addi	s0,sp,32
20404ec8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20404ecc:	fec42783          	lw	a5,-20(s0)
20404ed0:	eb89                	bnez	a5,20404ee2 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20404ed2:	fec42703          	lw	a4,-20(s0)
20404ed6:	070a                	slli	a4,a4,0x2
20404ed8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20404edc:	97ba                	add	a5,a5,a4
20404ede:	439c                	lw	a5,0(a5)
20404ee0:	a011                	j	20404ee4 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20404ee2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20404ee4:	853e                	mv	a0,a5
20404ee6:	4472                	lw	s0,28(sp)
20404ee8:	6105                	addi	sp,sp,32
20404eea:	8082                	ret

20404eec <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20404eec:	1101                	addi	sp,sp,-32
20404eee:	ce22                	sw	s0,28(sp)
20404ef0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20404ef2:	f14027f3          	csrr	a5,mhartid
20404ef6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20404efa:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20404efe:	853e                	mv	a0,a5
20404f00:	4472                	lw	s0,28(sp)
20404f02:	6105                	addi	sp,sp,32
20404f04:	8082                	ret

20404f06 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20404f06:	1101                	addi	sp,sp,-32
20404f08:	ce22                	sw	s0,28(sp)
20404f0a:	1000                	addi	s0,sp,32
20404f0c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20404f10:	0001                	nop
20404f12:	bffd                	j	20404f10 <metal_shutdown+0xa>
	...

20404f80 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20404f80:	cc2fd06f          	j	20402442 <metal_interrupt_vector_handler>

20404f84 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20404f84:	cbefd06f          	j	20402442 <metal_interrupt_vector_handler>

20404f88 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20404f88:	cbafd06f          	j	20402442 <metal_interrupt_vector_handler>

20404f8c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20404f8c:	ce4fd06f          	j	20402470 <metal_software_interrupt_vector_handler>

20404f90 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20404f90:	cb2fd06f          	j	20402442 <metal_interrupt_vector_handler>

20404f94 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20404f94:	caefd06f          	j	20402442 <metal_interrupt_vector_handler>

20404f98 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20404f98:	caafd06f          	j	20402442 <metal_interrupt_vector_handler>

20404f9c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20404f9c:	dc6fd06f          	j	20402562 <metal_timer_interrupt_vector_handler>

20404fa0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20404fa0:	ca2fd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fa4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20404fa4:	c9efd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fa8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20404fa8:	c9afd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20404fac:	c96fd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fb0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20404fb0:	c92fd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fb4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20404fb4:	c8efd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fb8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20404fb8:	c8afd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fbc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20404fbc:	c86fd06f          	j	20402442 <metal_interrupt_vector_handler>

20404fc0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20404fc0:	833fd06f          	j	204027f2 <metal_lc0_interrupt_vector_handler>

20404fc4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20404fc4:	8c1fd06f          	j	20402884 <metal_lc1_interrupt_vector_handler>

20404fc8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20404fc8:	94ffd06f          	j	20402916 <metal_lc2_interrupt_vector_handler>

20404fcc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20404fcc:	9ddfd06f          	j	204029a8 <metal_lc3_interrupt_vector_handler>

20404fd0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20404fd0:	a6bfd06f          	j	20402a3a <metal_lc4_interrupt_vector_handler>

20404fd4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20404fd4:	af9fd06f          	j	20402acc <metal_lc5_interrupt_vector_handler>

20404fd8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20404fd8:	b87fd06f          	j	20402b5e <metal_lc6_interrupt_vector_handler>

20404fdc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20404fdc:	c15fd06f          	j	20402bf0 <metal_lc7_interrupt_vector_handler>

20404fe0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20404fe0:	ca3fd06f          	j	20402c82 <metal_lc8_interrupt_vector_handler>

20404fe4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20404fe4:	d31fd06f          	j	20402d14 <metal_lc9_interrupt_vector_handler>

20404fe8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20404fe8:	dbffd06f          	j	20402da6 <metal_lc10_interrupt_vector_handler>

20404fec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20404fec:	e4dfd06f          	j	20402e38 <metal_lc11_interrupt_vector_handler>

20404ff0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20404ff0:	edbfd06f          	j	20402eca <metal_lc12_interrupt_vector_handler>

20404ff4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20404ff4:	f69fd06f          	j	20402f5c <metal_lc13_interrupt_vector_handler>

20404ff8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20404ff8:	ff7fd06f          	j	20402fee <metal_lc14_interrupt_vector_handler>

20404ffc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20404ffc:	884fe06f          	j	20403080 <metal_lc15_interrupt_vector_handler>

20405000 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405000:	1101                	addi	sp,sp,-32
20405002:	ce22                	sw	s0,28(sp)
20405004:	1000                	addi	s0,sp,32
20405006:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040500a:	fec42703          	lw	a4,-20(s0)
2040500e:	800007b7          	lui	a5,0x80000
20405012:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffff9c4c>
20405016:	00f71763          	bne	a4,a5,20405024 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040501a:	03dfd7b7          	lui	a5,0x3dfd
2040501e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405022:	a011                	j	20405026 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405024:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405026:	853e                	mv	a0,a5
20405028:	4472                	lw	s0,28(sp)
2040502a:	6105                	addi	sp,sp,32
2040502c:	8082                	ret

2040502e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040502e:	1101                	addi	sp,sp,-32
20405030:	ce06                	sw	ra,28(sp)
20405032:	cc22                	sw	s0,24(sp)
20405034:	1000                	addi	s0,sp,32
20405036:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040503a:	fec42503          	lw	a0,-20(s0)
2040503e:	37c9                	jal	20405000 <__metal_driver_fixed_clock_rate>
20405040:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405042:	853e                	mv	a0,a5
20405044:	40f2                	lw	ra,28(sp)
20405046:	4462                	lw	s0,24(sp)
20405048:	6105                	addi	sp,sp,32
2040504a:	8082                	ret

2040504c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040504c:	1101                	addi	sp,sp,-32
2040504e:	ce06                	sw	ra,28(sp)
20405050:	cc22                	sw	s0,24(sp)
20405052:	1000                	addi	s0,sp,32
20405054:	fea42623          	sw	a0,-20(s0)
20405058:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040505c:	fec42503          	lw	a0,-20(s0)
20405060:	37f9                	jal	2040502e <__metal_driver_fixed_clock_get_rate_hz>
20405062:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405064:	853e                	mv	a0,a5
20405066:	40f2                	lw	ra,28(sp)
20405068:	4462                	lw	s0,24(sp)
2040506a:	6105                	addi	sp,sp,32
2040506c:	8082                	ret

2040506e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040506e:	1101                	addi	sp,sp,-32
20405070:	ce06                	sw	ra,28(sp)
20405072:	cc22                	sw	s0,24(sp)
20405074:	1000                	addi	s0,sp,32
20405076:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040507a:	fec42503          	lw	a0,-20(s0)
2040507e:	3561                	jal	20404f06 <metal_shutdown>
