
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/debug/MyRoCC3.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/debug/MyRoCC3.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005574 memsz 0x00005574 flags rwx
    LOAD off    0x00006770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x00004b24 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405578 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00004f00  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000470  20405100  20405100  00006100  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405570  20405570  00006570  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405578  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              00003f24  80000770  80000770  00006770  2**3  ALLOC
  6 .stack            00000400  80004694  80004694  00006770  2**0  ALLOC
  7 .heap             00000800  80004a94  80004a94  00006770  2**0  ALLOC
  8 .debug_info       0001417d  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026af  00000000  00000000  0001b8ed  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000898  00000000  00000000  0001dfa0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000730  00000000  00000000  0001e838  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000076cb  00000000  00000000  0001ef68  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036a4  00000000  00000000  00026633  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00029cd7  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  00029cff  2**0  CONTENTS, READONLY
 16 .debug_frame      0000238c  00000000  00000000  00029d2c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405100 l    d  .rodata	00000000 .rodata
20405570 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
80004694 l    d  .stack	00000000 .stack
80004a94 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
20405220 l       .rodata	00000000 argv
20405224 l       .rodata	00000000 envp
20405228 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 MyRoCC3.c
8000077c l     O .bss	00001f44 arrHW.2576
800026c0 l     O .bss	00001f44 resHW.2577
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400844 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400d94 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80004604 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401aae l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401b58 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401b7e l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401ba2 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401bde l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401d3e l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
2040226e l     F .text	00000024 __metal_driver_cpu_hartid
20402292 l     F .text	0000002a __metal_driver_cpu_timebase
204022bc l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403b10 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403b3a l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403b62 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403b8a l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403bb2 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
204040f2 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404118 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404142 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
204049a4 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
204049ce l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
204049fc l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404a24 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404a52 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404a7c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404aa6 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404c90 l     F .text	000000d8 pre_rate_change_callback_func
20404d68 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405000 l       .text	00000000 IRQ_0
20405004 l       .text	00000000 IRQ_1
20405008 l       .text	00000000 IRQ_2
2040500c l       .text	00000000 IRQ_3
20405010 l       .text	00000000 IRQ_4
20405014 l       .text	00000000 IRQ_5
20405018 l       .text	00000000 IRQ_6
2040501c l       .text	00000000 IRQ_7
20405020 l       .text	00000000 IRQ_8
20405024 l       .text	00000000 IRQ_9
20405028 l       .text	00000000 IRQ_10
2040502c l       .text	00000000 IRQ_11
20405030 l       .text	00000000 IRQ_12
20405034 l       .text	00000000 IRQ_13
20405038 l       .text	00000000 IRQ_14
2040503c l       .text	00000000 IRQ_15
20405040 l       .text	00000000 IRQ_LC0
20405044 l       .text	00000000 IRQ_LC1
20405048 l       .text	00000000 IRQ_LC2
2040504c l       .text	00000000 IRQ_LC3
20405050 l       .text	00000000 IRQ_LC4
20405054 l       .text	00000000 IRQ_LC5
20405058 l       .text	00000000 IRQ_LC6
2040505c l       .text	00000000 IRQ_LC7
20405060 l       .text	00000000 IRQ_LC8
20405064 l       .text	00000000 IRQ_LC9
20405068 l       .text	00000000 IRQ_LC10
2040506c l       .text	00000000 IRQ_LC11
20405070 l       .text	00000000 IRQ_LC12
20405074 l       .text	00000000 IRQ_LC13
20405078 l       .text	00000000 IRQ_LC14
2040507c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405080 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405574 l       .init_array	00000000 __fini_array_end
20405574 l       .init_array	00000000 __fini_array_start
20405574 l       .init_array	00000000 __init_array_end
20405570 l       .init_array	00000000 __preinit_array_end
20405570 l       .init_array	00000000 __init_array_start
20405570 l       .init_array	00000000 __preinit_array_start
20405550 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401218 g     F .text	00000030 _isatty_r
20402abc  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204003de g     F .text	000000da _puts_r
20401248 g     F .text	00000034 _lseek_r
20404bf4 g     F .text	0000009c __metal_driver_sifive_uart0_set_baud_rate
20401f1a g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402a2a  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
2040327c g     F .text	00000038 __metal_valid_interrupt_id
2040039a g     F .text	00000044 printf
2040369e g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
20404e6a g     F .text	00000054 _metal_clock_append_to_callbacks
20403c02 g     F .text	00000038 __metal_plic0_complete_interrupt
204034fc g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401146 g     F .text	00000036 __sseek
204008fa g     F .text	0000006a __sinit
204004c6 g     F .text	000000c0 __swbuf_r
204008b6 g     F .text	00000044 __sfmoreglue
20401298 g     F .text	00000002 __malloc_unlock
20404f44 g     F .text	0000002a metal_cpu_get
80000728 g     O .data	00000020 __metal_dt_serial_10013000
2040457e g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405234 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80004694 g       .bss	00000000 metal_segment_bss_target_end
20401c0e g     F .text	0000009a __metal_clint0_mtime_get
20403aa4 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404334 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
2040182e g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404b10 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20401ca8 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
204011e6 g     F .text	00000032 _fstat_r
204047ce g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80004690 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20404ebe g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402d96  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405488 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405448 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401b2a g     F .text	0000002e metal_uart_set_baud_rate
20404d98 g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403732 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80004a94 g       .heap	00000000 metal_segment_heap_target_start
204008ac g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20402d04  w    F .text	00000092 metal_lc8_interrupt_vector_handler
204004b8 g     F .text	0000000e puts
20402fde  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402450 g     F .text	00000018 __metal_default_exception_handler
2040169e g     F .text	00000026 _fstat
2040223a g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403c9e g     F .text	00000062 __metal_plic0_set_priority
204036ba g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204022e6 g     F .text	0000002c __metal_driver_cpu_get
204053fc g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402344 g     F .text	00000018 __metal_interrupt_global_disable
20402c72  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402e28  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401098 g     F .text	00000030 _sbrk_r
204040aa g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403370 g     F .text	0000004e __metal_exception_register
20401648 g     F .text	00000034 _read_r
204038c6 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404410 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
2040253c g     F .text	00000064 __metal_default_sw_handler
20404eee g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404ad0 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
204016c4 g     F .text	00000020 _isatty
204044d6 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
204025a0  w    F .text	0000008e metal_timer_interrupt_vector_handler
2040189e g     F .text	0000006a __libc_init_array
20404450 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20402eba  w    F .text	00000092 metal_lc11_interrupt_vector_handler
2040364a g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20401738 g     F .text	0000007e _sbrk
204043ca g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
204023a6 g     F .text	0000001a __metal_interrupt_timer_disable
204045c8 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
2040397c g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405514 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404516 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401866 g     F .text	00000038 __libc_fini_array
20404956 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403906 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
204023f8 g     F .text	0000002c __metal_interrupt_local_enable
20402206 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401a5c g     F .text	0000002c metal_tty_putc
20403dc0 g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405184 g     O .rodata	00000020 __sf_fake_stderr
204023dc g     F .text	0000001c __metal_interrupt_external_disable
20404aee g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403716 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204033be g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400dbe g     F .text	00000042 __sfputs_r
20403a5e g     F .text	00000046 __metal_driver_cpu_exception_register
2040235c g     F .text	00000018 __metal_interrupt_software_enable
20402906  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040127c g     F .text	0000001a memchr
20400c0a g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403194 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401994 g     F .text	000000c8 __call_exitprocs
80004a94 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
204016e4 g     F .text	0000002a _lseek
20403a3e g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403ad2 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
204023c0 g     F .text	0000001c __metal_interrupt_external_enable
20401908 g     F .text	0000008c __register_exitproc
20404b42 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20403e66 g     F .text	0000013c __metal_driver_riscv_plic0_init
20404062 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204043a0 g     F .text	0000002a __metal_driver_sifive_gpio0_output
20402be0  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402312 g     F .text	0000001a __metal_myhart_id
20404976 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204024ae  w    F .text	0000008e metal_software_interrupt_vector_handler
20403674 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
204011b6 g     F .text	00000030 _close_r
20404bd4 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401dfc g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
20400586 g     F .text	00000110 __swsetup_r
20400964 g     F .text	0000009e __sfp
204010c8 g     F .text	00000030 __sread
204042f6 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20402480  w    F .text	0000002e metal_interrupt_vector_handler
20401296 g     F .text	00000002 __malloc_lock
204007e0 g     F .text	00000064 _fflush_r
20403c72 g     F .text	0000002c __metal_plic0_get_threshold
204051a4 g     O .rodata	00000020 __sf_fake_stdin
204032b4 g     F .text	000000bc __metal_local_interrupt_enable
204020d2 g     F .text	00000134 __metal_driver_riscv_clint0_command_request
20400b62 g     F .text	000000a8 memset
20402b4e  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040021e g     F .text	0000017c main
80000770 g       .data	00000000 metal_segment_data_target_end
2040391a g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
204039de g     F .text	00000060 __metal_driver_cpu_get_msip
20404f88 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403af0 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403bd4 g     F .text	0000002e __metal_plic0_claim_interrupt
2040117c g     F .text	00000006 __sclose
20402f4c  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400cb6 g     F .text	000000de _malloc_r
20401efe g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204037a4 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20404f6e g     F .text	0000001a metal_cpu_get_current_hartid
20405000 g       .text	00000000 __metal_vector_table
20405578 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
2040039a g     F .text	00000044 iprintf
2040232c g     F .text	00000018 __metal_interrupt_global_enable
20401824 g     F .text	0000000a atexit
20401a88 g     F .text	00000026 metal_tty_putc_raw
20401182 g     F .text	00000034 _write_r
2040238c g     F .text	0000001a __metal_interrupt_timer_enable
20404b80 g     F .text	00000054 __metal_driver_sifive_uart0_getc
20402020 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2040129a g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
20403850 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400696 g     F .text	0000014a __sflush_r
204050ae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20401f6e g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405578 g       *ABS*	00000000 metal_segment_data_source_start
80005294 g       .heap	00000000 metal_segment_heap_target_end
204031e4 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400a6e g     F .text	00000058 __swhatbuf_r
20404490 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040262e g     F .text	00000066 __metal_default_timer_handler
204017b6 g     F .text	0000006e _write
20403dd8 g     F .text	0000008e __metal_plic0_handler
20402998  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403102  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20404f1e g     F .text	00000026 metal_cpu_interrupt_controller
204010f8 g     F .text	0000004e __swrite
2040183a g     F .text	0000002c exit
20400e00 g     F .text	00000298 _vfiprintf_r
20400a02 g     F .text	0000006c _fwalk_reent
204050cc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
204051c4 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
20402468 g     F .text	00000018 __metal_default_interrupt_handler
20401afc g     F .text	0000002e metal_uart_putc
2040170e g     F .text	0000002a _read
20404378 g     F .text	00000028 __metal_driver_sifive_gpio0_input
20402700 g     F .text	0000014e __metal_exception_handler
20402874  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204050ee g     F .text	00000012 _exit
204037ea g     F .text	00000066 __metal_driver_cpu_mtime_get
20400ac6 g     F .text	0000009c __smakebuf_r
20401ed6 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204013a6 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
20403070  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401d74 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
20400e00 g     F .text	00000298 _vfprintf_r
204038dc g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403d34 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
204038f0 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402424 g     F .text	0000002c __metal_interrupt_local_disable
20402374 g     F .text	00000018 __metal_interrupt_software_disable
20403d00 g     F .text	00000034 __metal_plic0_get_priority
20401ad0 g     F .text	0000002c metal_uart_init
20403c3a g     F .text	00000038 __metal_plic0_set_threshold
2040167c g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20403fa2 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc05117          	auipc	sp,0x5fc05
2040008c:	a0c10113          	addi	sp,sp,-1524 # 80004a94 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00005297          	auipc	t0,0x5
204000b0:	4cc28293          	addi	t0,t0,1228 # 20405578 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00005297          	auipc	t0,0x5
204000dc:	4a028293          	addi	t0,t0,1184 # 20405578 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc00317          	auipc	t1,0x5fc00
20400110:	66430313          	addi	t1,t1,1636 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc04397          	auipc	t2,0x5fc04
20400118:	58038393          	addi	t2,t2,1408 # 80004694 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00001517          	auipc	a0,0x1
20400132:	73850513          	addi	a0,a0,1848 # 20401866 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	6ee010ef          	jal	ra,20401824 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	764010ef          	jal	ra,2040189e <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00005597          	auipc	a1,0x5
20400166:	0be58593          	addi	a1,a1,190 # 20405220 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00005617          	auipc	a2,0x5
2040016e:	0ba60613          	addi	a2,a2,186 # 20405224 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	6c6010ef          	jal	ra,2040183a <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	2069                	jal	2040021e <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:9
#include <stdio.h>


#define  mlen 1000

int main(void) {
2040021e:	7179                	addi	sp,sp,-48
20400220:	d606                	sw	ra,44(sp)
20400222:	d422                	sw	s0,40(sp)
20400224:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:10
    printf("Hi \n");
20400226:	204057b7          	lui	a5,0x20405
2040022a:	10078513          	addi	a0,a5,256 # 20405100 <_exit+0x12>
2040022e:	2469                	jal	204004b8 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:14

    static unsigned arrHW[mlen * 2 + 1] = {0};
    static unsigned resHW[mlen * 2 + 1] = {0};
    for (int j = 0; j < mlen * 2 + 1; j++) {
20400230:	fe042623          	sw	zero,-20(s0)
20400234:	a0a5                	j	2040029c <main+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:15 (discriminator 3)
        arrHW[j] = ((j+1) * 0x576a08e2) % (0x4fed1298 + j);
20400236:	fec42783          	lw	a5,-20(s0)
2040023a:	00178713          	addi	a4,a5,1
2040023e:	576a17b7          	lui	a5,0x576a1
20400242:	8e278793          	addi	a5,a5,-1822 # 576a08e2 <metal_segment_data_source_start+0x3729b36a>
20400246:	02f70733          	mul	a4,a4,a5
2040024a:	fec42683          	lw	a3,-20(s0)
2040024e:	4fed17b7          	lui	a5,0x4fed1
20400252:	29878793          	addi	a5,a5,664 # 4fed1298 <metal_segment_data_source_start+0x2facbd20>
20400256:	97b6                	add	a5,a5,a3
20400258:	02f767b3          	rem	a5,a4,a5
2040025c:	86be                	mv	a3,a5
2040025e:	800007b7          	lui	a5,0x80000
20400262:	77c78713          	addi	a4,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffb4e8>
20400266:	fec42783          	lw	a5,-20(s0)
2040026a:	078a                	slli	a5,a5,0x2
2040026c:	97ba                	add	a5,a5,a4
2040026e:	c394                	sw	a3,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:16 (discriminator 3)
        printf("arrHW[%d]  =  %08x \n", j, arrHW[j]);
20400270:	800007b7          	lui	a5,0x80000
20400274:	77c78713          	addi	a4,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffb4e8>
20400278:	fec42783          	lw	a5,-20(s0)
2040027c:	078a                	slli	a5,a5,0x2
2040027e:	97ba                	add	a5,a5,a4
20400280:	439c                	lw	a5,0(a5)
20400282:	863e                	mv	a2,a5
20400284:	fec42583          	lw	a1,-20(s0)
20400288:	204057b7          	lui	a5,0x20405
2040028c:	10478513          	addi	a0,a5,260 # 20405104 <_exit+0x16>
20400290:	2229                	jal	2040039a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:14 (discriminator 3)
    for (int j = 0; j < mlen * 2 + 1; j++) {
20400292:	fec42783          	lw	a5,-20(s0)
20400296:	0785                	addi	a5,a5,1
20400298:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:14 (discriminator 1)
2040029c:	fec42703          	lw	a4,-20(s0)
204002a0:	7d000793          	li	a5,2000
204002a4:	f8e7d9e3          	bge	a5,a4,20400236 <main+0x18>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:20
    }


    printf("Init SofftW \n");
204002a8:	204057b7          	lui	a5,0x20405
204002ac:	11c78513          	addi	a0,a5,284 # 2040511c <_exit+0x2e>
204002b0:	2421                	jal	204004b8 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:25
    unsigned start, end;
    unsigned HWcycles;


    int i = 0;
204002b2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:28


    unsigned rd = 0;
204002b6:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:30
    // RoCC
    start = rdcycle();
204002ba:	3799                	jal	20400200 <rdcycle>
204002bc:	87aa                	mv	a5,a0
204002be:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:31
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
204002c2:	67e1                	lui	a5,0x18
204002c4:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:32
    asm volatile("fence"); // always add it, this instrucction waits till all memory acceses have finished
204002c8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:33
    ROCC_INSTRUCTION_DSS(0, rd, arrHW, resHW, 0); // Destiny, Source, Source = xd = 1, xs1 = 1, xs2 = 1
204002cc:	800007b7          	lui	a5,0x80000
204002d0:	77c78793          	addi	a5,a5,1916 # 8000077c <metal_segment_heap_target_end+0xffffb4e8>
204002d4:	85be                	mv	a1,a5
204002d6:	800027b7          	lui	a5,0x80002
204002da:	6c078793          	addi	a5,a5,1728 # 800026c0 <metal_segment_heap_target_end+0xffffd42c>
204002de:	863e                	mv	a2,a5
204002e0:	00c5f50b          	0xc5f50b
204002e4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:35
    // 0 = Custom_opcode0 := 0b, rd = return value most be 1, rs1 = addr, rs2 = addr, func7 = 0
    asm volatile("fence":: : "memory");
204002e8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:36
    printf("Second instruction \n");
204002ec:	204057b7          	lui	a5,0x20405
204002f0:	12c78513          	addi	a0,a5,300 # 2040512c <_exit+0x3e>
204002f4:	22d1                	jal	204004b8 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:38

    asm volatile("fence"); // always add it, this instrucction waits till all memory acceses have finished
204002f6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:39
    ROCC_INSTRUCTION_DSS(0, rd, mlen *2 , 0x4392abce, 1); // Destiny, Source, Source = xd = 1, xs1 = 1, xs2 = 1
204002fa:	7d000593          	li	a1,2000
204002fe:	4392b7b7          	lui	a5,0x4392b
20400302:	bce78613          	addi	a2,a5,-1074 # 4392abce <metal_segment_data_source_start+0x23525656>
20400306:	02c5f50b          	0x2c5f50b
2040030a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:41
    // 0 = custom0 , rd= destination, 2 message len , 0 from the other source, function 1 =
    asm volatile("fence":: : "memory");
2040030e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:42
    printf("Third instruction \n");
20400312:	204057b7          	lui	a5,0x20405
20400316:	14078513          	addi	a0,a5,320 # 20405140 <_exit+0x52>
2040031a:	2a79                	jal	204004b8 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:44

    end = rdcycle();
2040031c:	35d5                	jal	20400200 <rdcycle>
2040031e:	87aa                	mv	a5,a0
20400320:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:45
    HWcycles = end - start;
20400324:	fdc42703          	lw	a4,-36(s0)
20400328:	fe042783          	lw	a5,-32(s0)
2040032c:	40f707b3          	sub	a5,a4,a5
20400330:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:47

    printf("Hw finish %d \n", rd); // most be 2
20400334:	fe442583          	lw	a1,-28(s0)
20400338:	204057b7          	lui	a5,0x20405
2040033c:	15478513          	addi	a0,a5,340 # 20405154 <_exit+0x66>
20400340:	28a9                	jal	2040039a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:49

    for (i = 0; i < mlen * 2 + 1; i++) {
20400342:	fe042423          	sw	zero,-24(s0)
20400346:	a03d                	j	20400374 <main+0x156>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:50 (discriminator 3)
        printf("resHW[%d]  =  %x \n", i, resHW[i]);
20400348:	800027b7          	lui	a5,0x80002
2040034c:	6c078713          	addi	a4,a5,1728 # 800026c0 <metal_segment_heap_target_end+0xffffd42c>
20400350:	fe842783          	lw	a5,-24(s0)
20400354:	078a                	slli	a5,a5,0x2
20400356:	97ba                	add	a5,a5,a4
20400358:	439c                	lw	a5,0(a5)
2040035a:	863e                	mv	a2,a5
2040035c:	fe842583          	lw	a1,-24(s0)
20400360:	204057b7          	lui	a5,0x20405
20400364:	16478513          	addi	a0,a5,356 # 20405164 <_exit+0x76>
20400368:	280d                	jal	2040039a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:49 (discriminator 3)
    for (i = 0; i < mlen * 2 + 1; i++) {
2040036a:	fe842783          	lw	a5,-24(s0)
2040036e:	0785                	addi	a5,a5,1
20400370:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:49 (discriminator 1)
20400374:	fe842703          	lw	a4,-24(s0)
20400378:	7d000793          	li	a5,2000
2040037c:	fce7d6e3          	bge	a5,a4,20400348 <main+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:52
    }
    printf("cycles %d \n", HWcycles);
20400380:	fd842583          	lw	a1,-40(s0)
20400384:	204057b7          	lui	a5,0x20405
20400388:	17878513          	addi	a0,a5,376 # 20405178 <_exit+0x8a>
2040038c:	2039                	jal	2040039a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:57

//    for(i = 0; i<1000; i ++){
//        printf("prueba[%d]  =  %x \n", i, prueba[i]);
//    }
    return 0;
2040038e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC3/MyRoCC3.c:58
20400390:	853e                	mv	a0,a5
20400392:	50b2                	lw	ra,44(sp)
20400394:	5422                	lw	s0,40(sp)
20400396:	6145                	addi	sp,sp,48
20400398:	8082                	ret

2040039a <iprintf>:
printf():
2040039a:	7139                	addi	sp,sp,-64
2040039c:	da3e                	sw	a5,52(sp)
2040039e:	d22e                	sw	a1,36(sp)
204003a0:	d432                	sw	a2,40(sp)
204003a2:	d636                	sw	a3,44(sp)
204003a4:	d83a                	sw	a4,48(sp)
204003a6:	dc42                	sw	a6,56(sp)
204003a8:	de46                	sw	a7,60(sp)
204003aa:	5fc00797          	auipc	a5,0x5fc00
204003ae:	39e78793          	addi	a5,a5,926 # 80000748 <_impure_ptr>
204003b2:	cc22                	sw	s0,24(sp)
204003b4:	4380                	lw	s0,0(a5)
204003b6:	ca26                	sw	s1,20(sp)
204003b8:	ce06                	sw	ra,28(sp)
204003ba:	84aa                	mv	s1,a0
204003bc:	c409                	beqz	s0,204003c6 <iprintf+0x2c>
204003be:	4c1c                	lw	a5,24(s0)
204003c0:	e399                	bnez	a5,204003c6 <iprintf+0x2c>
204003c2:	8522                	mv	a0,s0
204003c4:	2b1d                	jal	204008fa <__sinit>
204003c6:	440c                	lw	a1,8(s0)
204003c8:	1054                	addi	a3,sp,36
204003ca:	8626                	mv	a2,s1
204003cc:	8522                	mv	a0,s0
204003ce:	c636                	sw	a3,12(sp)
204003d0:	231000ef          	jal	ra,20400e00 <_vfiprintf_r>
204003d4:	40f2                	lw	ra,28(sp)
204003d6:	4462                	lw	s0,24(sp)
204003d8:	44d2                	lw	s1,20(sp)
204003da:	6121                	addi	sp,sp,64
204003dc:	8082                	ret

204003de <_puts_r>:
_puts_r():
204003de:	1101                	addi	sp,sp,-32
204003e0:	ca26                	sw	s1,20(sp)
204003e2:	c84a                	sw	s2,16(sp)
204003e4:	ce06                	sw	ra,28(sp)
204003e6:	cc22                	sw	s0,24(sp)
204003e8:	c64e                	sw	s3,12(sp)
204003ea:	c452                	sw	s4,8(sp)
204003ec:	84aa                	mv	s1,a0
204003ee:	892e                	mv	s2,a1
204003f0:	c501                	beqz	a0,204003f8 <_puts_r+0x1a>
204003f2:	4d1c                	lw	a5,24(a0)
204003f4:	e391                	bnez	a5,204003f8 <_puts_r+0x1a>
204003f6:	2311                	jal	204008fa <__sinit>
204003f8:	4c9c                	lw	a5,24(s1)
204003fa:	4480                	lw	s0,8(s1)
204003fc:	e399                	bnez	a5,20400402 <_puts_r+0x24>
204003fe:	8526                	mv	a0,s1
20400400:	29ed                	jal	204008fa <__sinit>
20400402:	00005797          	auipc	a5,0x5
20400406:	da278793          	addi	a5,a5,-606 # 204051a4 <__sf_fake_stdin>
2040040a:	02f41c63          	bne	s0,a5,20400442 <_puts_r+0x64>
2040040e:	40c0                	lw	s0,4(s1)
20400410:	00c45783          	lhu	a5,12(s0)
20400414:	8ba1                	andi	a5,a5,8
20400416:	c7b1                	beqz	a5,20400462 <_puts_r+0x84>
20400418:	481c                	lw	a5,16(s0)
2040041a:	c7a1                	beqz	a5,20400462 <_puts_r+0x84>
2040041c:	59fd                	li	s3,-1
2040041e:	4a29                	li	s4,10
20400420:	441c                	lw	a5,8(s0)
20400422:	00094583          	lbu	a1,0(s2)
20400426:	17fd                	addi	a5,a5,-1
20400428:	e9b1                	bnez	a1,2040047c <_puts_r+0x9e>
2040042a:	c41c                	sw	a5,8(s0)
2040042c:	0607de63          	bgez	a5,204004a8 <_puts_r+0xca>
20400430:	8622                	mv	a2,s0
20400432:	45a9                	li	a1,10
20400434:	8526                	mv	a0,s1
20400436:	2841                	jal	204004c6 <__swbuf_r>
20400438:	57fd                	li	a5,-1
2040043a:	02f50863          	beq	a0,a5,2040046a <_puts_r+0x8c>
2040043e:	4529                	li	a0,10
20400440:	a035                	j	2040046c <_puts_r+0x8e>
20400442:	00005797          	auipc	a5,0x5
20400446:	d8278793          	addi	a5,a5,-638 # 204051c4 <__sf_fake_stdout>
2040044a:	00f41463          	bne	s0,a5,20400452 <_puts_r+0x74>
2040044e:	4480                	lw	s0,8(s1)
20400450:	b7c1                	j	20400410 <_puts_r+0x32>
20400452:	00005797          	auipc	a5,0x5
20400456:	d3278793          	addi	a5,a5,-718 # 20405184 <__sf_fake_stderr>
2040045a:	faf41be3          	bne	s0,a5,20400410 <_puts_r+0x32>
2040045e:	44c0                	lw	s0,12(s1)
20400460:	bf45                	j	20400410 <_puts_r+0x32>
20400462:	85a2                	mv	a1,s0
20400464:	8526                	mv	a0,s1
20400466:	2205                	jal	20400586 <__swsetup_r>
20400468:	d955                	beqz	a0,2040041c <_puts_r+0x3e>
2040046a:	557d                	li	a0,-1
2040046c:	40f2                	lw	ra,28(sp)
2040046e:	4462                	lw	s0,24(sp)
20400470:	44d2                	lw	s1,20(sp)
20400472:	4942                	lw	s2,16(sp)
20400474:	49b2                	lw	s3,12(sp)
20400476:	4a22                	lw	s4,8(sp)
20400478:	6105                	addi	sp,sp,32
2040047a:	8082                	ret
2040047c:	c41c                	sw	a5,8(s0)
2040047e:	0905                	addi	s2,s2,1
20400480:	0007d763          	bgez	a5,2040048e <_puts_r+0xb0>
20400484:	4c18                	lw	a4,24(s0)
20400486:	00e7cb63          	blt	a5,a4,2040049c <_puts_r+0xbe>
2040048a:	01458963          	beq	a1,s4,2040049c <_puts_r+0xbe>
2040048e:	401c                	lw	a5,0(s0)
20400490:	00178713          	addi	a4,a5,1
20400494:	c018                	sw	a4,0(s0)
20400496:	00b78023          	sb	a1,0(a5)
2040049a:	b759                	j	20400420 <_puts_r+0x42>
2040049c:	8622                	mv	a2,s0
2040049e:	8526                	mv	a0,s1
204004a0:	201d                	jal	204004c6 <__swbuf_r>
204004a2:	f7351fe3          	bne	a0,s3,20400420 <_puts_r+0x42>
204004a6:	b7d1                	j	2040046a <_puts_r+0x8c>
204004a8:	401c                	lw	a5,0(s0)
204004aa:	00178713          	addi	a4,a5,1
204004ae:	c018                	sw	a4,0(s0)
204004b0:	4729                	li	a4,10
204004b2:	00e78023          	sb	a4,0(a5)
204004b6:	b761                	j	2040043e <_puts_r+0x60>

204004b8 <puts>:
puts():
204004b8:	5fc00797          	auipc	a5,0x5fc00
204004bc:	29078793          	addi	a5,a5,656 # 80000748 <_impure_ptr>
204004c0:	85aa                	mv	a1,a0
204004c2:	4388                	lw	a0,0(a5)
204004c4:	bf29                	j	204003de <_puts_r>

204004c6 <__swbuf_r>:
__swbuf_r():
204004c6:	1101                	addi	sp,sp,-32
204004c8:	cc22                	sw	s0,24(sp)
204004ca:	ca26                	sw	s1,20(sp)
204004cc:	c84a                	sw	s2,16(sp)
204004ce:	ce06                	sw	ra,28(sp)
204004d0:	c64e                	sw	s3,12(sp)
204004d2:	84aa                	mv	s1,a0
204004d4:	892e                	mv	s2,a1
204004d6:	8432                	mv	s0,a2
204004d8:	c501                	beqz	a0,204004e0 <__swbuf_r+0x1a>
204004da:	4d1c                	lw	a5,24(a0)
204004dc:	e391                	bnez	a5,204004e0 <__swbuf_r+0x1a>
204004de:	2931                	jal	204008fa <__sinit>
204004e0:	00005797          	auipc	a5,0x5
204004e4:	cc478793          	addi	a5,a5,-828 # 204051a4 <__sf_fake_stdin>
204004e8:	06f41963          	bne	s0,a5,2040055a <__swbuf_r+0x94>
204004ec:	40c0                	lw	s0,4(s1)
204004ee:	4c1c                	lw	a5,24(s0)
204004f0:	c41c                	sw	a5,8(s0)
204004f2:	00c45783          	lhu	a5,12(s0)
204004f6:	8ba1                	andi	a5,a5,8
204004f8:	c3c9                	beqz	a5,2040057a <__swbuf_r+0xb4>
204004fa:	481c                	lw	a5,16(s0)
204004fc:	cfbd                	beqz	a5,2040057a <__swbuf_r+0xb4>
204004fe:	481c                	lw	a5,16(s0)
20400500:	4008                	lw	a0,0(s0)
20400502:	0ff97993          	andi	s3,s2,255
20400506:	0ff97913          	andi	s2,s2,255
2040050a:	8d1d                	sub	a0,a0,a5
2040050c:	485c                	lw	a5,20(s0)
2040050e:	00f54663          	blt	a0,a5,2040051a <__swbuf_r+0x54>
20400512:	85a2                	mv	a1,s0
20400514:	8526                	mv	a0,s1
20400516:	24e9                	jal	204007e0 <_fflush_r>
20400518:	e52d                	bnez	a0,20400582 <__swbuf_r+0xbc>
2040051a:	441c                	lw	a5,8(s0)
2040051c:	0505                	addi	a0,a0,1
2040051e:	17fd                	addi	a5,a5,-1
20400520:	c41c                	sw	a5,8(s0)
20400522:	401c                	lw	a5,0(s0)
20400524:	00178713          	addi	a4,a5,1
20400528:	c018                	sw	a4,0(s0)
2040052a:	01378023          	sb	s3,0(a5)
2040052e:	485c                	lw	a5,20(s0)
20400530:	00a78963          	beq	a5,a0,20400542 <__swbuf_r+0x7c>
20400534:	00c45783          	lhu	a5,12(s0)
20400538:	8b85                	andi	a5,a5,1
2040053a:	cb81                	beqz	a5,2040054a <__swbuf_r+0x84>
2040053c:	47a9                	li	a5,10
2040053e:	00f91663          	bne	s2,a5,2040054a <__swbuf_r+0x84>
20400542:	85a2                	mv	a1,s0
20400544:	8526                	mv	a0,s1
20400546:	2c69                	jal	204007e0 <_fflush_r>
20400548:	ed0d                	bnez	a0,20400582 <__swbuf_r+0xbc>
2040054a:	40f2                	lw	ra,28(sp)
2040054c:	4462                	lw	s0,24(sp)
2040054e:	854a                	mv	a0,s2
20400550:	44d2                	lw	s1,20(sp)
20400552:	4942                	lw	s2,16(sp)
20400554:	49b2                	lw	s3,12(sp)
20400556:	6105                	addi	sp,sp,32
20400558:	8082                	ret
2040055a:	00005797          	auipc	a5,0x5
2040055e:	c6a78793          	addi	a5,a5,-918 # 204051c4 <__sf_fake_stdout>
20400562:	00f41463          	bne	s0,a5,2040056a <__swbuf_r+0xa4>
20400566:	4480                	lw	s0,8(s1)
20400568:	b759                	j	204004ee <__swbuf_r+0x28>
2040056a:	00005797          	auipc	a5,0x5
2040056e:	c1a78793          	addi	a5,a5,-998 # 20405184 <__sf_fake_stderr>
20400572:	f6f41ee3          	bne	s0,a5,204004ee <__swbuf_r+0x28>
20400576:	44c0                	lw	s0,12(s1)
20400578:	bf9d                	j	204004ee <__swbuf_r+0x28>
2040057a:	85a2                	mv	a1,s0
2040057c:	8526                	mv	a0,s1
2040057e:	2021                	jal	20400586 <__swsetup_r>
20400580:	dd3d                	beqz	a0,204004fe <__swbuf_r+0x38>
20400582:	597d                	li	s2,-1
20400584:	b7d9                	j	2040054a <__swbuf_r+0x84>

20400586 <__swsetup_r>:
__swsetup_r():
20400586:	1141                	addi	sp,sp,-16
20400588:	5fc00797          	auipc	a5,0x5fc00
2040058c:	1c078793          	addi	a5,a5,448 # 80000748 <_impure_ptr>
20400590:	c226                	sw	s1,4(sp)
20400592:	4384                	lw	s1,0(a5)
20400594:	c422                	sw	s0,8(sp)
20400596:	c04a                	sw	s2,0(sp)
20400598:	c606                	sw	ra,12(sp)
2040059a:	892a                	mv	s2,a0
2040059c:	842e                	mv	s0,a1
2040059e:	c489                	beqz	s1,204005a8 <__swsetup_r+0x22>
204005a0:	4c9c                	lw	a5,24(s1)
204005a2:	e399                	bnez	a5,204005a8 <__swsetup_r+0x22>
204005a4:	8526                	mv	a0,s1
204005a6:	2e91                	jal	204008fa <__sinit>
204005a8:	00005797          	auipc	a5,0x5
204005ac:	bfc78793          	addi	a5,a5,-1028 # 204051a4 <__sf_fake_stdin>
204005b0:	02f41c63          	bne	s0,a5,204005e8 <__swsetup_r+0x62>
204005b4:	40c0                	lw	s0,4(s1)
204005b6:	00c41703          	lh	a4,12(s0)
204005ba:	01071793          	slli	a5,a4,0x10
204005be:	83c1                	srli	a5,a5,0x10
204005c0:	0087f693          	andi	a3,a5,8
204005c4:	eeb5                	bnez	a3,20400640 <__swsetup_r+0xba>
204005c6:	0107f693          	andi	a3,a5,16
204005ca:	ee9d                	bnez	a3,20400608 <__swsetup_r+0x82>
204005cc:	47a5                	li	a5,9
204005ce:	00f92023          	sw	a5,0(s2)
204005d2:	04076713          	ori	a4,a4,64
204005d6:	00e41623          	sh	a4,12(s0)
204005da:	557d                	li	a0,-1
204005dc:	40b2                	lw	ra,12(sp)
204005de:	4422                	lw	s0,8(sp)
204005e0:	4492                	lw	s1,4(sp)
204005e2:	4902                	lw	s2,0(sp)
204005e4:	0141                	addi	sp,sp,16
204005e6:	8082                	ret
204005e8:	00005797          	auipc	a5,0x5
204005ec:	bdc78793          	addi	a5,a5,-1060 # 204051c4 <__sf_fake_stdout>
204005f0:	00f41463          	bne	s0,a5,204005f8 <__swsetup_r+0x72>
204005f4:	4480                	lw	s0,8(s1)
204005f6:	b7c1                	j	204005b6 <__swsetup_r+0x30>
204005f8:	00005797          	auipc	a5,0x5
204005fc:	b8c78793          	addi	a5,a5,-1140 # 20405184 <__sf_fake_stderr>
20400600:	faf41be3          	bne	s0,a5,204005b6 <__swsetup_r+0x30>
20400604:	44c0                	lw	s0,12(s1)
20400606:	bf45                	j	204005b6 <__swsetup_r+0x30>
20400608:	8b91                	andi	a5,a5,4
2040060a:	c78d                	beqz	a5,20400634 <__swsetup_r+0xae>
2040060c:	584c                	lw	a1,52(s0)
2040060e:	c989                	beqz	a1,20400620 <__swsetup_r+0x9a>
20400610:	04440793          	addi	a5,s0,68
20400614:	00f58463          	beq	a1,a5,2040061c <__swsetup_r+0x96>
20400618:	854a                	mv	a0,s2
2040061a:	2bc5                	jal	20400c0a <_free_r>
2040061c:	02042a23          	sw	zero,52(s0)
20400620:	00c45783          	lhu	a5,12(s0)
20400624:	00042223          	sw	zero,4(s0)
20400628:	fdb7f793          	andi	a5,a5,-37
2040062c:	00f41623          	sh	a5,12(s0)
20400630:	481c                	lw	a5,16(s0)
20400632:	c01c                	sw	a5,0(s0)
20400634:	00c45783          	lhu	a5,12(s0)
20400638:	0087e793          	ori	a5,a5,8
2040063c:	00f41623          	sh	a5,12(s0)
20400640:	481c                	lw	a5,16(s0)
20400642:	ef81                	bnez	a5,2040065a <__swsetup_r+0xd4>
20400644:	00c45783          	lhu	a5,12(s0)
20400648:	20000713          	li	a4,512
2040064c:	2807f793          	andi	a5,a5,640
20400650:	00e78563          	beq	a5,a4,2040065a <__swsetup_r+0xd4>
20400654:	85a2                	mv	a1,s0
20400656:	854a                	mv	a0,s2
20400658:	21bd                	jal	20400ac6 <__smakebuf_r>
2040065a:	00c45783          	lhu	a5,12(s0)
2040065e:	0017f713          	andi	a4,a5,1
20400662:	c705                	beqz	a4,2040068a <__swsetup_r+0x104>
20400664:	485c                	lw	a5,20(s0)
20400666:	00042423          	sw	zero,8(s0)
2040066a:	40f007b3          	neg	a5,a5
2040066e:	cc1c                	sw	a5,24(s0)
20400670:	481c                	lw	a5,16(s0)
20400672:	4501                	li	a0,0
20400674:	f7a5                	bnez	a5,204005dc <__swsetup_r+0x56>
20400676:	00c41783          	lh	a5,12(s0)
2040067a:	0807f713          	andi	a4,a5,128
2040067e:	df39                	beqz	a4,204005dc <__swsetup_r+0x56>
20400680:	0407e793          	ori	a5,a5,64
20400684:	00f41623          	sh	a5,12(s0)
20400688:	bf89                	j	204005da <__swsetup_r+0x54>
2040068a:	8b89                	andi	a5,a5,2
2040068c:	4701                	li	a4,0
2040068e:	e391                	bnez	a5,20400692 <__swsetup_r+0x10c>
20400690:	4858                	lw	a4,20(s0)
20400692:	c418                	sw	a4,8(s0)
20400694:	bff1                	j	20400670 <__swsetup_r+0xea>

20400696 <__sflush_r>:
__sflush_r():
20400696:	00c5d783          	lhu	a5,12(a1)
2040069a:	1101                	addi	sp,sp,-32
2040069c:	cc22                	sw	s0,24(sp)
2040069e:	ca26                	sw	s1,20(sp)
204006a0:	ce06                	sw	ra,28(sp)
204006a2:	c84a                	sw	s2,16(sp)
204006a4:	c64e                	sw	s3,12(sp)
204006a6:	0087f713          	andi	a4,a5,8
204006aa:	84aa                	mv	s1,a0
204006ac:	842e                	mv	s0,a1
204006ae:	e765                	bnez	a4,20400796 <__sflush_r+0x100>
204006b0:	41d8                	lw	a4,4(a1)
204006b2:	00e04763          	bgtz	a4,204006c0 <__sflush_r+0x2a>
204006b6:	41b8                	lw	a4,64(a1)
204006b8:	00e04463          	bgtz	a4,204006c0 <__sflush_r+0x2a>
204006bc:	4501                	li	a0,0
204006be:	a0c1                	j	2040077e <__sflush_r+0xe8>
204006c0:	5458                	lw	a4,44(s0)
204006c2:	df6d                	beqz	a4,204006bc <__sflush_r+0x26>
204006c4:	0004a903          	lw	s2,0(s1)
204006c8:	01379693          	slli	a3,a5,0x13
204006cc:	0004a023          	sw	zero,0(s1)
204006d0:	0606de63          	bgez	a3,2040074c <__sflush_r+0xb6>
204006d4:	4868                	lw	a0,84(s0)
204006d6:	00c45783          	lhu	a5,12(s0)
204006da:	8b91                	andi	a5,a5,4
204006dc:	c799                	beqz	a5,204006ea <__sflush_r+0x54>
204006de:	405c                	lw	a5,4(s0)
204006e0:	8d1d                	sub	a0,a0,a5
204006e2:	585c                	lw	a5,52(s0)
204006e4:	c399                	beqz	a5,204006ea <__sflush_r+0x54>
204006e6:	403c                	lw	a5,64(s0)
204006e8:	8d1d                	sub	a0,a0,a5
204006ea:	545c                	lw	a5,44(s0)
204006ec:	500c                	lw	a1,32(s0)
204006ee:	862a                	mv	a2,a0
204006f0:	4681                	li	a3,0
204006f2:	8526                	mv	a0,s1
204006f4:	9782                	jalr	a5
204006f6:	57fd                	li	a5,-1
204006f8:	00c45703          	lhu	a4,12(s0)
204006fc:	00f51d63          	bne	a0,a5,20400716 <__sflush_r+0x80>
20400700:	4094                	lw	a3,0(s1)
20400702:	47f5                	li	a5,29
20400704:	08d7e463          	bltu	a5,a3,2040078c <__sflush_r+0xf6>
20400708:	204007b7          	lui	a5,0x20400
2040070c:	0785                	addi	a5,a5,1
2040070e:	00d7d7b3          	srl	a5,a5,a3
20400712:	8b85                	andi	a5,a5,1
20400714:	cfa5                	beqz	a5,2040078c <__sflush_r+0xf6>
20400716:	481c                	lw	a5,16(s0)
20400718:	00042223          	sw	zero,4(s0)
2040071c:	c01c                	sw	a5,0(s0)
2040071e:	01371793          	slli	a5,a4,0x13
20400722:	0007d863          	bgez	a5,20400732 <__sflush_r+0x9c>
20400726:	57fd                	li	a5,-1
20400728:	00f51463          	bne	a0,a5,20400730 <__sflush_r+0x9a>
2040072c:	409c                	lw	a5,0(s1)
2040072e:	e391                	bnez	a5,20400732 <__sflush_r+0x9c>
20400730:	c868                	sw	a0,84(s0)
20400732:	584c                	lw	a1,52(s0)
20400734:	0124a023          	sw	s2,0(s1)
20400738:	d1d1                	beqz	a1,204006bc <__sflush_r+0x26>
2040073a:	04440793          	addi	a5,s0,68
2040073e:	00f58463          	beq	a1,a5,20400746 <__sflush_r+0xb0>
20400742:	8526                	mv	a0,s1
20400744:	21d9                	jal	20400c0a <_free_r>
20400746:	02042a23          	sw	zero,52(s0)
2040074a:	bf8d                	j	204006bc <__sflush_r+0x26>
2040074c:	500c                	lw	a1,32(s0)
2040074e:	4685                	li	a3,1
20400750:	4601                	li	a2,0
20400752:	8526                	mv	a0,s1
20400754:	9702                	jalr	a4
20400756:	57fd                	li	a5,-1
20400758:	f6f51fe3          	bne	a0,a5,204006d6 <__sflush_r+0x40>
2040075c:	409c                	lw	a5,0(s1)
2040075e:	dfa5                	beqz	a5,204006d6 <__sflush_r+0x40>
20400760:	4775                	li	a4,29
20400762:	00e78563          	beq	a5,a4,2040076c <__sflush_r+0xd6>
20400766:	4759                	li	a4,22
20400768:	00e79563          	bne	a5,a4,20400772 <__sflush_r+0xdc>
2040076c:	0124a023          	sw	s2,0(s1)
20400770:	b7b1                	j	204006bc <__sflush_r+0x26>
20400772:	00c45783          	lhu	a5,12(s0)
20400776:	0407e793          	ori	a5,a5,64
2040077a:	00f41623          	sh	a5,12(s0)
2040077e:	40f2                	lw	ra,28(sp)
20400780:	4462                	lw	s0,24(sp)
20400782:	44d2                	lw	s1,20(sp)
20400784:	4942                	lw	s2,16(sp)
20400786:	49b2                	lw	s3,12(sp)
20400788:	6105                	addi	sp,sp,32
2040078a:	8082                	ret
2040078c:	04076713          	ori	a4,a4,64
20400790:	00e41623          	sh	a4,12(s0)
20400794:	b7ed                	j	2040077e <__sflush_r+0xe8>
20400796:	0105a983          	lw	s3,16(a1)
2040079a:	f20981e3          	beqz	s3,204006bc <__sflush_r+0x26>
2040079e:	0005a903          	lw	s2,0(a1)
204007a2:	8b8d                	andi	a5,a5,3
204007a4:	0135a023          	sw	s3,0(a1)
204007a8:	41390933          	sub	s2,s2,s3
204007ac:	4701                	li	a4,0
204007ae:	e391                	bnez	a5,204007b2 <__sflush_r+0x11c>
204007b0:	49d8                	lw	a4,20(a1)
204007b2:	c418                	sw	a4,8(s0)
204007b4:	f12054e3          	blez	s2,204006bc <__sflush_r+0x26>
204007b8:	541c                	lw	a5,40(s0)
204007ba:	500c                	lw	a1,32(s0)
204007bc:	86ca                	mv	a3,s2
204007be:	864e                	mv	a2,s3
204007c0:	8526                	mv	a0,s1
204007c2:	9782                	jalr	a5
204007c4:	00a04a63          	bgtz	a0,204007d8 <__sflush_r+0x142>
204007c8:	00c45783          	lhu	a5,12(s0)
204007cc:	557d                	li	a0,-1
204007ce:	0407e793          	ori	a5,a5,64
204007d2:	00f41623          	sh	a5,12(s0)
204007d6:	b765                	j	2040077e <__sflush_r+0xe8>
204007d8:	99aa                	add	s3,s3,a0
204007da:	40a90933          	sub	s2,s2,a0
204007de:	bfd9                	j	204007b4 <__sflush_r+0x11e>

204007e0 <_fflush_r>:
_fflush_r():
204007e0:	499c                	lw	a5,16(a1)
204007e2:	cfb9                	beqz	a5,20400840 <_fflush_r+0x60>
204007e4:	1101                	addi	sp,sp,-32
204007e6:	cc22                	sw	s0,24(sp)
204007e8:	ce06                	sw	ra,28(sp)
204007ea:	842a                	mv	s0,a0
204007ec:	c511                	beqz	a0,204007f8 <_fflush_r+0x18>
204007ee:	4d1c                	lw	a5,24(a0)
204007f0:	e781                	bnez	a5,204007f8 <_fflush_r+0x18>
204007f2:	c62e                	sw	a1,12(sp)
204007f4:	2219                	jal	204008fa <__sinit>
204007f6:	45b2                	lw	a1,12(sp)
204007f8:	00005797          	auipc	a5,0x5
204007fc:	9ac78793          	addi	a5,a5,-1620 # 204051a4 <__sf_fake_stdin>
20400800:	00f59b63          	bne	a1,a5,20400816 <_fflush_r+0x36>
20400804:	404c                	lw	a1,4(s0)
20400806:	00c59783          	lh	a5,12(a1)
2040080a:	c795                	beqz	a5,20400836 <_fflush_r+0x56>
2040080c:	8522                	mv	a0,s0
2040080e:	4462                	lw	s0,24(sp)
20400810:	40f2                	lw	ra,28(sp)
20400812:	6105                	addi	sp,sp,32
20400814:	b549                	j	20400696 <__sflush_r>
20400816:	00005797          	auipc	a5,0x5
2040081a:	9ae78793          	addi	a5,a5,-1618 # 204051c4 <__sf_fake_stdout>
2040081e:	00f59463          	bne	a1,a5,20400826 <_fflush_r+0x46>
20400822:	440c                	lw	a1,8(s0)
20400824:	b7cd                	j	20400806 <_fflush_r+0x26>
20400826:	00005797          	auipc	a5,0x5
2040082a:	95e78793          	addi	a5,a5,-1698 # 20405184 <__sf_fake_stderr>
2040082e:	fcf59ce3          	bne	a1,a5,20400806 <_fflush_r+0x26>
20400832:	444c                	lw	a1,12(s0)
20400834:	bfc9                	j	20400806 <_fflush_r+0x26>
20400836:	40f2                	lw	ra,28(sp)
20400838:	4462                	lw	s0,24(sp)
2040083a:	4501                	li	a0,0
2040083c:	6105                	addi	sp,sp,32
2040083e:	8082                	ret
20400840:	4501                	li	a0,0
20400842:	8082                	ret

20400844 <std>:
std():
20400844:	1141                	addi	sp,sp,-16
20400846:	c422                	sw	s0,8(sp)
20400848:	c606                	sw	ra,12(sp)
2040084a:	842a                	mv	s0,a0
2040084c:	00b51623          	sh	a1,12(a0)
20400850:	00c51723          	sh	a2,14(a0)
20400854:	00052023          	sw	zero,0(a0)
20400858:	00052223          	sw	zero,4(a0)
2040085c:	00052423          	sw	zero,8(a0)
20400860:	06052223          	sw	zero,100(a0)
20400864:	00052823          	sw	zero,16(a0)
20400868:	00052a23          	sw	zero,20(a0)
2040086c:	00052c23          	sw	zero,24(a0)
20400870:	4621                	li	a2,8
20400872:	4581                	li	a1,0
20400874:	05c50513          	addi	a0,a0,92
20400878:	24ed                	jal	20400b62 <memset>
2040087a:	00001797          	auipc	a5,0x1
2040087e:	84e78793          	addi	a5,a5,-1970 # 204010c8 <__sread>
20400882:	d05c                	sw	a5,36(s0)
20400884:	00001797          	auipc	a5,0x1
20400888:	87478793          	addi	a5,a5,-1932 # 204010f8 <__swrite>
2040088c:	d41c                	sw	a5,40(s0)
2040088e:	00001797          	auipc	a5,0x1
20400892:	8b878793          	addi	a5,a5,-1864 # 20401146 <__sseek>
20400896:	d45c                	sw	a5,44(s0)
20400898:	00001797          	auipc	a5,0x1
2040089c:	8e478793          	addi	a5,a5,-1820 # 2040117c <__sclose>
204008a0:	d000                	sw	s0,32(s0)
204008a2:	d81c                	sw	a5,48(s0)
204008a4:	40b2                	lw	ra,12(sp)
204008a6:	4422                	lw	s0,8(sp)
204008a8:	0141                	addi	sp,sp,16
204008aa:	8082                	ret

204008ac <_cleanup_r>:
_cleanup_r():
204008ac:	00000597          	auipc	a1,0x0
204008b0:	f3458593          	addi	a1,a1,-204 # 204007e0 <_fflush_r>
204008b4:	a2b9                	j	20400a02 <_fwalk_reent>

204008b6 <__sfmoreglue>:
__sfmoreglue():
204008b6:	1141                	addi	sp,sp,-16
204008b8:	c226                	sw	s1,4(sp)
204008ba:	06800613          	li	a2,104
204008be:	fff58493          	addi	s1,a1,-1
204008c2:	02c484b3          	mul	s1,s1,a2
204008c6:	c04a                	sw	s2,0(sp)
204008c8:	892e                	mv	s2,a1
204008ca:	c422                	sw	s0,8(sp)
204008cc:	c606                	sw	ra,12(sp)
204008ce:	07448593          	addi	a1,s1,116
204008d2:	26d5                	jal	20400cb6 <_malloc_r>
204008d4:	842a                	mv	s0,a0
204008d6:	c919                	beqz	a0,204008ec <__sfmoreglue+0x36>
204008d8:	00052023          	sw	zero,0(a0)
204008dc:	01252223          	sw	s2,4(a0)
204008e0:	0531                	addi	a0,a0,12
204008e2:	c408                	sw	a0,8(s0)
204008e4:	06848613          	addi	a2,s1,104
204008e8:	4581                	li	a1,0
204008ea:	2ca5                	jal	20400b62 <memset>
204008ec:	8522                	mv	a0,s0
204008ee:	40b2                	lw	ra,12(sp)
204008f0:	4422                	lw	s0,8(sp)
204008f2:	4492                	lw	s1,4(sp)
204008f4:	4902                	lw	s2,0(sp)
204008f6:	0141                	addi	sp,sp,16
204008f8:	8082                	ret

204008fa <__sinit>:
__sinit():
204008fa:	4d1c                	lw	a5,24(a0)
204008fc:	e3bd                	bnez	a5,20400962 <__sinit+0x68>
204008fe:	1141                	addi	sp,sp,-16
20400900:	c606                	sw	ra,12(sp)
20400902:	c422                	sw	s0,8(sp)
20400904:	00000797          	auipc	a5,0x0
20400908:	fa878793          	addi	a5,a5,-88 # 204008ac <_cleanup_r>
2040090c:	d51c                	sw	a5,40(a0)
2040090e:	5fc00797          	auipc	a5,0x5fc00
20400912:	e3e78793          	addi	a5,a5,-450 # 8000074c <_global_impure_ptr>
20400916:	439c                	lw	a5,0(a5)
20400918:	04052423          	sw	zero,72(a0)
2040091c:	04052623          	sw	zero,76(a0)
20400920:	04052823          	sw	zero,80(a0)
20400924:	00f51463          	bne	a0,a5,2040092c <__sinit+0x32>
20400928:	4785                	li	a5,1
2040092a:	cd1c                	sw	a5,24(a0)
2040092c:	842a                	mv	s0,a0
2040092e:	281d                	jal	20400964 <__sfp>
20400930:	c048                	sw	a0,4(s0)
20400932:	8522                	mv	a0,s0
20400934:	2805                	jal	20400964 <__sfp>
20400936:	c408                	sw	a0,8(s0)
20400938:	8522                	mv	a0,s0
2040093a:	202d                	jal	20400964 <__sfp>
2040093c:	c448                	sw	a0,12(s0)
2040093e:	4048                	lw	a0,4(s0)
20400940:	4601                	li	a2,0
20400942:	4591                	li	a1,4
20400944:	3701                	jal	20400844 <std>
20400946:	4408                	lw	a0,8(s0)
20400948:	4605                	li	a2,1
2040094a:	45a5                	li	a1,9
2040094c:	3de5                	jal	20400844 <std>
2040094e:	4448                	lw	a0,12(s0)
20400950:	4609                	li	a2,2
20400952:	45c9                	li	a1,18
20400954:	3dc5                	jal	20400844 <std>
20400956:	4785                	li	a5,1
20400958:	cc1c                	sw	a5,24(s0)
2040095a:	40b2                	lw	ra,12(sp)
2040095c:	4422                	lw	s0,8(sp)
2040095e:	0141                	addi	sp,sp,16
20400960:	8082                	ret
20400962:	8082                	ret

20400964 <__sfp>:
__sfp():
20400964:	1141                	addi	sp,sp,-16
20400966:	5fc00797          	auipc	a5,0x5fc00
2040096a:	de678793          	addi	a5,a5,-538 # 8000074c <_global_impure_ptr>
2040096e:	c226                	sw	s1,4(sp)
20400970:	4384                	lw	s1,0(a5)
20400972:	c04a                	sw	s2,0(sp)
20400974:	c606                	sw	ra,12(sp)
20400976:	4c9c                	lw	a5,24(s1)
20400978:	c422                	sw	s0,8(sp)
2040097a:	892a                	mv	s2,a0
2040097c:	e399                	bnez	a5,20400982 <__sfp+0x1e>
2040097e:	8526                	mv	a0,s1
20400980:	3fad                	jal	204008fa <__sinit>
20400982:	04848493          	addi	s1,s1,72
20400986:	4480                	lw	s0,8(s1)
20400988:	40dc                	lw	a5,4(s1)
2040098a:	17fd                	addi	a5,a5,-1
2040098c:	0007d663          	bgez	a5,20400998 <__sfp+0x34>
20400990:	409c                	lw	a5,0(s1)
20400992:	cfb1                	beqz	a5,204009ee <__sfp+0x8a>
20400994:	4084                	lw	s1,0(s1)
20400996:	bfc5                	j	20400986 <__sfp+0x22>
20400998:	00c41703          	lh	a4,12(s0)
2040099c:	e731                	bnez	a4,204009e8 <__sfp+0x84>
2040099e:	77c1                	lui	a5,0xffff0
204009a0:	0785                	addi	a5,a5,1
204009a2:	06042223          	sw	zero,100(s0)
204009a6:	00042023          	sw	zero,0(s0)
204009aa:	00042223          	sw	zero,4(s0)
204009ae:	00042423          	sw	zero,8(s0)
204009b2:	c45c                	sw	a5,12(s0)
204009b4:	00042823          	sw	zero,16(s0)
204009b8:	00042a23          	sw	zero,20(s0)
204009bc:	00042c23          	sw	zero,24(s0)
204009c0:	4621                	li	a2,8
204009c2:	4581                	li	a1,0
204009c4:	05c40513          	addi	a0,s0,92
204009c8:	2a69                	jal	20400b62 <memset>
204009ca:	02042a23          	sw	zero,52(s0)
204009ce:	02042c23          	sw	zero,56(s0)
204009d2:	04042423          	sw	zero,72(s0)
204009d6:	04042623          	sw	zero,76(s0)
204009da:	8522                	mv	a0,s0
204009dc:	40b2                	lw	ra,12(sp)
204009de:	4422                	lw	s0,8(sp)
204009e0:	4492                	lw	s1,4(sp)
204009e2:	4902                	lw	s2,0(sp)
204009e4:	0141                	addi	sp,sp,16
204009e6:	8082                	ret
204009e8:	06840413          	addi	s0,s0,104
204009ec:	bf79                	j	2040098a <__sfp+0x26>
204009ee:	4591                	li	a1,4
204009f0:	854a                	mv	a0,s2
204009f2:	35d1                	jal	204008b6 <__sfmoreglue>
204009f4:	c088                	sw	a0,0(s1)
204009f6:	842a                	mv	s0,a0
204009f8:	fd51                	bnez	a0,20400994 <__sfp+0x30>
204009fa:	47b1                	li	a5,12
204009fc:	00f92023          	sw	a5,0(s2)
20400a00:	bfe9                	j	204009da <__sfp+0x76>

20400a02 <_fwalk_reent>:
_fwalk_reent():
20400a02:	7179                	addi	sp,sp,-48
20400a04:	d422                	sw	s0,40(sp)
20400a06:	d04a                	sw	s2,32(sp)
20400a08:	cc52                	sw	s4,24(sp)
20400a0a:	ca56                	sw	s5,20(sp)
20400a0c:	c85a                	sw	s6,16(sp)
20400a0e:	c65e                	sw	s7,12(sp)
20400a10:	d606                	sw	ra,44(sp)
20400a12:	d226                	sw	s1,36(sp)
20400a14:	ce4e                	sw	s3,28(sp)
20400a16:	8a2a                	mv	s4,a0
20400a18:	8aae                	mv	s5,a1
20400a1a:	04850413          	addi	s0,a0,72
20400a1e:	4901                	li	s2,0
20400a20:	4b05                	li	s6,1
20400a22:	5bfd                	li	s7,-1
20400a24:	ec09                	bnez	s0,20400a3e <_fwalk_reent+0x3c>
20400a26:	50b2                	lw	ra,44(sp)
20400a28:	5422                	lw	s0,40(sp)
20400a2a:	854a                	mv	a0,s2
20400a2c:	5492                	lw	s1,36(sp)
20400a2e:	5902                	lw	s2,32(sp)
20400a30:	49f2                	lw	s3,28(sp)
20400a32:	4a62                	lw	s4,24(sp)
20400a34:	4ad2                	lw	s5,20(sp)
20400a36:	4b42                	lw	s6,16(sp)
20400a38:	4bb2                	lw	s7,12(sp)
20400a3a:	6145                	addi	sp,sp,48
20400a3c:	8082                	ret
20400a3e:	4404                	lw	s1,8(s0)
20400a40:	00442983          	lw	s3,4(s0)
20400a44:	19fd                	addi	s3,s3,-1
20400a46:	0009d463          	bgez	s3,20400a4e <_fwalk_reent+0x4c>
20400a4a:	4000                	lw	s0,0(s0)
20400a4c:	bfe1                	j	20400a24 <_fwalk_reent+0x22>
20400a4e:	00c4d783          	lhu	a5,12(s1)
20400a52:	00fb7b63          	bgeu	s6,a5,20400a68 <_fwalk_reent+0x66>
20400a56:	00e49783          	lh	a5,14(s1)
20400a5a:	01778763          	beq	a5,s7,20400a68 <_fwalk_reent+0x66>
20400a5e:	85a6                	mv	a1,s1
20400a60:	8552                	mv	a0,s4
20400a62:	9a82                	jalr	s5
20400a64:	00a96933          	or	s2,s2,a0
20400a68:	06848493          	addi	s1,s1,104
20400a6c:	bfe1                	j	20400a44 <_fwalk_reent+0x42>

20400a6e <__swhatbuf_r>:
__swhatbuf_r():
20400a6e:	7119                	addi	sp,sp,-128
20400a70:	daa6                	sw	s1,116(sp)
20400a72:	84ae                	mv	s1,a1
20400a74:	00e59583          	lh	a1,14(a1)
20400a78:	dca2                	sw	s0,120(sp)
20400a7a:	de86                	sw	ra,124(sp)
20400a7c:	8432                	mv	s0,a2
20400a7e:	0005dc63          	bgez	a1,20400a96 <__swhatbuf_r+0x28>
20400a82:	00c4d783          	lhu	a5,12(s1)
20400a86:	0006a023          	sw	zero,0(a3)
20400a8a:	0807f793          	andi	a5,a5,128
20400a8e:	e39d                	bnez	a5,20400ab4 <__swhatbuf_r+0x46>
20400a90:	40000793          	li	a5,1024
20400a94:	a015                	j	20400ab8 <__swhatbuf_r+0x4a>
20400a96:	0830                	addi	a2,sp,24
20400a98:	c636                	sw	a3,12(sp)
20400a9a:	27b1                	jal	204011e6 <_fstat_r>
20400a9c:	46b2                	lw	a3,12(sp)
20400a9e:	fe0542e3          	bltz	a0,20400a82 <__swhatbuf_r+0x14>
20400aa2:	4772                	lw	a4,28(sp)
20400aa4:	67bd                	lui	a5,0xf
20400aa6:	8ff9                	and	a5,a5,a4
20400aa8:	7779                	lui	a4,0xffffe
20400aaa:	97ba                	add	a5,a5,a4
20400aac:	0017b793          	seqz	a5,a5
20400ab0:	c29c                	sw	a5,0(a3)
20400ab2:	bff9                	j	20400a90 <__swhatbuf_r+0x22>
20400ab4:	04000793          	li	a5,64
20400ab8:	c01c                	sw	a5,0(s0)
20400aba:	50f6                	lw	ra,124(sp)
20400abc:	5466                	lw	s0,120(sp)
20400abe:	54d6                	lw	s1,116(sp)
20400ac0:	4501                	li	a0,0
20400ac2:	6109                	addi	sp,sp,128
20400ac4:	8082                	ret

20400ac6 <__smakebuf_r>:
__smakebuf_r():
20400ac6:	00c5d783          	lhu	a5,12(a1)
20400aca:	1101                	addi	sp,sp,-32
20400acc:	cc22                	sw	s0,24(sp)
20400ace:	ce06                	sw	ra,28(sp)
20400ad0:	ca26                	sw	s1,20(sp)
20400ad2:	c84a                	sw	s2,16(sp)
20400ad4:	8b89                	andi	a5,a5,2
20400ad6:	842e                	mv	s0,a1
20400ad8:	cf89                	beqz	a5,20400af2 <__smakebuf_r+0x2c>
20400ada:	04740793          	addi	a5,s0,71
20400ade:	c01c                	sw	a5,0(s0)
20400ae0:	c81c                	sw	a5,16(s0)
20400ae2:	4785                	li	a5,1
20400ae4:	c85c                	sw	a5,20(s0)
20400ae6:	40f2                	lw	ra,28(sp)
20400ae8:	4462                	lw	s0,24(sp)
20400aea:	44d2                	lw	s1,20(sp)
20400aec:	4942                	lw	s2,16(sp)
20400aee:	6105                	addi	sp,sp,32
20400af0:	8082                	ret
20400af2:	0074                	addi	a3,sp,12
20400af4:	0030                	addi	a2,sp,8
20400af6:	84aa                	mv	s1,a0
20400af8:	3f9d                	jal	20400a6e <__swhatbuf_r>
20400afa:	45a2                	lw	a1,8(sp)
20400afc:	892a                	mv	s2,a0
20400afe:	8526                	mv	a0,s1
20400b00:	2a5d                	jal	20400cb6 <_malloc_r>
20400b02:	ed01                	bnez	a0,20400b1a <__smakebuf_r+0x54>
20400b04:	00c41783          	lh	a5,12(s0)
20400b08:	2007f713          	andi	a4,a5,512
20400b0c:	ff69                	bnez	a4,20400ae6 <__smakebuf_r+0x20>
20400b0e:	9bf1                	andi	a5,a5,-4
20400b10:	0027e793          	ori	a5,a5,2
20400b14:	00f41623          	sh	a5,12(s0)
20400b18:	b7c9                	j	20400ada <__smakebuf_r+0x14>
20400b1a:	00000797          	auipc	a5,0x0
20400b1e:	d9278793          	addi	a5,a5,-622 # 204008ac <_cleanup_r>
20400b22:	d49c                	sw	a5,40(s1)
20400b24:	00c45783          	lhu	a5,12(s0)
20400b28:	c008                	sw	a0,0(s0)
20400b2a:	c808                	sw	a0,16(s0)
20400b2c:	0807e793          	ori	a5,a5,128
20400b30:	00f41623          	sh	a5,12(s0)
20400b34:	47a2                	lw	a5,8(sp)
20400b36:	c85c                	sw	a5,20(s0)
20400b38:	47b2                	lw	a5,12(sp)
20400b3a:	cf89                	beqz	a5,20400b54 <__smakebuf_r+0x8e>
20400b3c:	00e41583          	lh	a1,14(s0)
20400b40:	8526                	mv	a0,s1
20400b42:	2dd9                	jal	20401218 <_isatty_r>
20400b44:	c901                	beqz	a0,20400b54 <__smakebuf_r+0x8e>
20400b46:	00c45783          	lhu	a5,12(s0)
20400b4a:	9bf1                	andi	a5,a5,-4
20400b4c:	0017e793          	ori	a5,a5,1
20400b50:	00f41623          	sh	a5,12(s0)
20400b54:	00c45783          	lhu	a5,12(s0)
20400b58:	00f96933          	or	s2,s2,a5
20400b5c:	01241623          	sh	s2,12(s0)
20400b60:	b759                	j	20400ae6 <__smakebuf_r+0x20>

20400b62 <memset>:
memset():
20400b62:	433d                	li	t1,15
20400b64:	872a                	mv	a4,a0
20400b66:	02c37363          	bgeu	t1,a2,20400b8c <memset+0x2a>
20400b6a:	00f77793          	andi	a5,a4,15
20400b6e:	efbd                	bnez	a5,20400bec <memset+0x8a>
20400b70:	e5ad                	bnez	a1,20400bda <memset+0x78>
20400b72:	ff067693          	andi	a3,a2,-16
20400b76:	8a3d                	andi	a2,a2,15
20400b78:	96ba                	add	a3,a3,a4
20400b7a:	c30c                	sw	a1,0(a4)
20400b7c:	c34c                	sw	a1,4(a4)
20400b7e:	c70c                	sw	a1,8(a4)
20400b80:	c74c                	sw	a1,12(a4)
20400b82:	0741                	addi	a4,a4,16
20400b84:	fed76be3          	bltu	a4,a3,20400b7a <memset+0x18>
20400b88:	e211                	bnez	a2,20400b8c <memset+0x2a>
20400b8a:	8082                	ret
20400b8c:	40c306b3          	sub	a3,t1,a2
20400b90:	068a                	slli	a3,a3,0x2
20400b92:	00000297          	auipc	t0,0x0
20400b96:	9696                	add	a3,a3,t0
20400b98:	00a68067          	jr	10(a3)
20400b9c:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fff8d7a>
20400ba0:	00b706a3          	sb	a1,13(a4)
20400ba4:	00b70623          	sb	a1,12(a4)
20400ba8:	00b705a3          	sb	a1,11(a4)
20400bac:	00b70523          	sb	a1,10(a4)
20400bb0:	00b704a3          	sb	a1,9(a4)
20400bb4:	00b70423          	sb	a1,8(a4)
20400bb8:	00b703a3          	sb	a1,7(a4)
20400bbc:	00b70323          	sb	a1,6(a4)
20400bc0:	00b702a3          	sb	a1,5(a4)
20400bc4:	00b70223          	sb	a1,4(a4)
20400bc8:	00b701a3          	sb	a1,3(a4)
20400bcc:	00b70123          	sb	a1,2(a4)
20400bd0:	00b700a3          	sb	a1,1(a4)
20400bd4:	00b70023          	sb	a1,0(a4)
20400bd8:	8082                	ret
20400bda:	0ff5f593          	andi	a1,a1,255
20400bde:	00859693          	slli	a3,a1,0x8
20400be2:	8dd5                	or	a1,a1,a3
20400be4:	01059693          	slli	a3,a1,0x10
20400be8:	8dd5                	or	a1,a1,a3
20400bea:	b761                	j	20400b72 <memset+0x10>
20400bec:	00279693          	slli	a3,a5,0x2
20400bf0:	00000297          	auipc	t0,0x0
20400bf4:	9696                	add	a3,a3,t0
20400bf6:	8286                	mv	t0,ra
20400bf8:	fa8680e7          	jalr	-88(a3)
20400bfc:	8096                	mv	ra,t0
20400bfe:	17c1                	addi	a5,a5,-16
20400c00:	8f1d                	sub	a4,a4,a5
20400c02:	963e                	add	a2,a2,a5
20400c04:	f8c374e3          	bgeu	t1,a2,20400b8c <memset+0x2a>
20400c08:	b7a5                	j	20400b70 <memset+0xe>

20400c0a <_free_r>:
_free_r():
20400c0a:	c5cd                	beqz	a1,20400cb4 <_free_r+0xaa>
20400c0c:	ffc5a783          	lw	a5,-4(a1)
20400c10:	1141                	addi	sp,sp,-16
20400c12:	c422                	sw	s0,8(sp)
20400c14:	c606                	sw	ra,12(sp)
20400c16:	c226                	sw	s1,4(sp)
20400c18:	ffc58413          	addi	s0,a1,-4
20400c1c:	0007d363          	bgez	a5,20400c22 <_free_r+0x18>
20400c20:	943e                	add	s0,s0,a5
20400c22:	84aa                	mv	s1,a0
20400c24:	2d8d                	jal	20401296 <__malloc_lock>
20400c26:	5fc00797          	auipc	a5,0x5fc00
20400c2a:	b4a78793          	addi	a5,a5,-1206 # 80000770 <metal_segment_data_target_end>
20400c2e:	439c                	lw	a5,0(a5)
20400c30:	ef89                	bnez	a5,20400c4a <_free_r+0x40>
20400c32:	00042223          	sw	zero,4(s0)
20400c36:	5fc00797          	auipc	a5,0x5fc00
20400c3a:	b287ad23          	sw	s0,-1222(a5) # 80000770 <metal_segment_data_target_end>
20400c3e:	4422                	lw	s0,8(sp)
20400c40:	40b2                	lw	ra,12(sp)
20400c42:	8526                	mv	a0,s1
20400c44:	4492                	lw	s1,4(sp)
20400c46:	0141                	addi	sp,sp,16
20400c48:	ad81                	j	20401298 <__malloc_unlock>
20400c4a:	00f47e63          	bgeu	s0,a5,20400c66 <_free_r+0x5c>
20400c4e:	4014                	lw	a3,0(s0)
20400c50:	00d40733          	add	a4,s0,a3
20400c54:	00e79663          	bne	a5,a4,20400c60 <_free_r+0x56>
20400c58:	4398                	lw	a4,0(a5)
20400c5a:	43dc                	lw	a5,4(a5)
20400c5c:	9736                	add	a4,a4,a3
20400c5e:	c018                	sw	a4,0(s0)
20400c60:	c05c                	sw	a5,4(s0)
20400c62:	bfd1                	j	20400c36 <_free_r+0x2c>
20400c64:	87ba                	mv	a5,a4
20400c66:	43d8                	lw	a4,4(a5)
20400c68:	c319                	beqz	a4,20400c6e <_free_r+0x64>
20400c6a:	fee47de3          	bgeu	s0,a4,20400c64 <_free_r+0x5a>
20400c6e:	4394                	lw	a3,0(a5)
20400c70:	00d78633          	add	a2,a5,a3
20400c74:	00861f63          	bne	a2,s0,20400c92 <_free_r+0x88>
20400c78:	4010                	lw	a2,0(s0)
20400c7a:	96b2                	add	a3,a3,a2
20400c7c:	c394                	sw	a3,0(a5)
20400c7e:	00d78633          	add	a2,a5,a3
20400c82:	fac71ee3          	bne	a4,a2,20400c3e <_free_r+0x34>
20400c86:	4310                	lw	a2,0(a4)
20400c88:	4358                	lw	a4,4(a4)
20400c8a:	96b2                	add	a3,a3,a2
20400c8c:	c394                	sw	a3,0(a5)
20400c8e:	c3d8                	sw	a4,4(a5)
20400c90:	b77d                	j	20400c3e <_free_r+0x34>
20400c92:	00c47563          	bgeu	s0,a2,20400c9c <_free_r+0x92>
20400c96:	47b1                	li	a5,12
20400c98:	c09c                	sw	a5,0(s1)
20400c9a:	b755                	j	20400c3e <_free_r+0x34>
20400c9c:	4010                	lw	a2,0(s0)
20400c9e:	00c406b3          	add	a3,s0,a2
20400ca2:	00d71663          	bne	a4,a3,20400cae <_free_r+0xa4>
20400ca6:	4314                	lw	a3,0(a4)
20400ca8:	4358                	lw	a4,4(a4)
20400caa:	96b2                	add	a3,a3,a2
20400cac:	c014                	sw	a3,0(s0)
20400cae:	c058                	sw	a4,4(s0)
20400cb0:	c3c0                	sw	s0,4(a5)
20400cb2:	b771                	j	20400c3e <_free_r+0x34>
20400cb4:	8082                	ret

20400cb6 <_malloc_r>:
_malloc_r():
20400cb6:	1101                	addi	sp,sp,-32
20400cb8:	ca26                	sw	s1,20(sp)
20400cba:	00358493          	addi	s1,a1,3
20400cbe:	98f1                	andi	s1,s1,-4
20400cc0:	ce06                	sw	ra,28(sp)
20400cc2:	cc22                	sw	s0,24(sp)
20400cc4:	c84a                	sw	s2,16(sp)
20400cc6:	c64e                	sw	s3,12(sp)
20400cc8:	04a1                	addi	s1,s1,8
20400cca:	47b1                	li	a5,12
20400ccc:	04f4f763          	bgeu	s1,a5,20400d1a <_malloc_r+0x64>
20400cd0:	44b1                	li	s1,12
20400cd2:	04b4e663          	bltu	s1,a1,20400d1e <_malloc_r+0x68>
20400cd6:	892a                	mv	s2,a0
20400cd8:	2b7d                	jal	20401296 <__malloc_lock>
20400cda:	5fc00797          	auipc	a5,0x5fc00
20400cde:	a9678793          	addi	a5,a5,-1386 # 80000770 <metal_segment_data_target_end>
20400ce2:	4398                	lw	a4,0(a5)
20400ce4:	843a                	mv	s0,a4
20400ce6:	e431                	bnez	s0,20400d32 <_malloc_r+0x7c>
20400ce8:	5fc00797          	auipc	a5,0x5fc00
20400cec:	a8c78793          	addi	a5,a5,-1396 # 80000774 <__malloc_sbrk_start>
20400cf0:	439c                	lw	a5,0(a5)
20400cf2:	eb81                	bnez	a5,20400d02 <_malloc_r+0x4c>
20400cf4:	4581                	li	a1,0
20400cf6:	854a                	mv	a0,s2
20400cf8:	2645                	jal	20401098 <_sbrk_r>
20400cfa:	5fc00797          	auipc	a5,0x5fc00
20400cfe:	a6a7ad23          	sw	a0,-1414(a5) # 80000774 <__malloc_sbrk_start>
20400d02:	85a6                	mv	a1,s1
20400d04:	854a                	mv	a0,s2
20400d06:	2e49                	jal	20401098 <_sbrk_r>
20400d08:	59fd                	li	s3,-1
20400d0a:	07351963          	bne	a0,s3,20400d7c <_malloc_r+0xc6>
20400d0e:	47b1                	li	a5,12
20400d10:	00f92023          	sw	a5,0(s2)
20400d14:	854a                	mv	a0,s2
20400d16:	2349                	jal	20401298 <__malloc_unlock>
20400d18:	a029                	j	20400d22 <_malloc_r+0x6c>
20400d1a:	fa04dce3          	bgez	s1,20400cd2 <_malloc_r+0x1c>
20400d1e:	47b1                	li	a5,12
20400d20:	c11c                	sw	a5,0(a0)
20400d22:	4501                	li	a0,0
20400d24:	40f2                	lw	ra,28(sp)
20400d26:	4462                	lw	s0,24(sp)
20400d28:	44d2                	lw	s1,20(sp)
20400d2a:	4942                	lw	s2,16(sp)
20400d2c:	49b2                	lw	s3,12(sp)
20400d2e:	6105                	addi	sp,sp,32
20400d30:	8082                	ret
20400d32:	401c                	lw	a5,0(s0)
20400d34:	8f85                	sub	a5,a5,s1
20400d36:	0407c063          	bltz	a5,20400d76 <_malloc_r+0xc0>
20400d3a:	46ad                	li	a3,11
20400d3c:	00f6f663          	bgeu	a3,a5,20400d48 <_malloc_r+0x92>
20400d40:	c01c                	sw	a5,0(s0)
20400d42:	943e                	add	s0,s0,a5
20400d44:	c004                	sw	s1,0(s0)
20400d46:	a801                	j	20400d56 <_malloc_r+0xa0>
20400d48:	405c                	lw	a5,4(s0)
20400d4a:	02871463          	bne	a4,s0,20400d72 <_malloc_r+0xbc>
20400d4e:	5fc00717          	auipc	a4,0x5fc00
20400d52:	a2f72123          	sw	a5,-1502(a4) # 80000770 <metal_segment_data_target_end>
20400d56:	854a                	mv	a0,s2
20400d58:	2381                	jal	20401298 <__malloc_unlock>
20400d5a:	00b40513          	addi	a0,s0,11
20400d5e:	00440793          	addi	a5,s0,4
20400d62:	9961                	andi	a0,a0,-8
20400d64:	40f50733          	sub	a4,a0,a5
20400d68:	df55                	beqz	a4,20400d24 <_malloc_r+0x6e>
20400d6a:	943a                	add	s0,s0,a4
20400d6c:	8f89                	sub	a5,a5,a0
20400d6e:	c01c                	sw	a5,0(s0)
20400d70:	bf55                	j	20400d24 <_malloc_r+0x6e>
20400d72:	c35c                	sw	a5,4(a4)
20400d74:	b7cd                	j	20400d56 <_malloc_r+0xa0>
20400d76:	8722                	mv	a4,s0
20400d78:	4040                	lw	s0,4(s0)
20400d7a:	b7b5                	j	20400ce6 <_malloc_r+0x30>
20400d7c:	00350413          	addi	s0,a0,3
20400d80:	9871                	andi	s0,s0,-4
20400d82:	fc8501e3          	beq	a0,s0,20400d44 <_malloc_r+0x8e>
20400d86:	40a405b3          	sub	a1,s0,a0
20400d8a:	854a                	mv	a0,s2
20400d8c:	2631                	jal	20401098 <_sbrk_r>
20400d8e:	fb351be3          	bne	a0,s3,20400d44 <_malloc_r+0x8e>
20400d92:	bfb5                	j	20400d0e <_malloc_r+0x58>

20400d94 <__sfputc_r>:
__sfputc_r():
20400d94:	461c                	lw	a5,8(a2)
20400d96:	17fd                	addi	a5,a5,-1
20400d98:	c61c                	sw	a5,8(a2)
20400d9a:	0007da63          	bgez	a5,20400dae <__sfputc_r+0x1a>
20400d9e:	4e18                	lw	a4,24(a2)
20400da0:	00e7c563          	blt	a5,a4,20400daa <__sfputc_r+0x16>
20400da4:	47a9                	li	a5,10
20400da6:	00f59463          	bne	a1,a5,20400dae <__sfputc_r+0x1a>
20400daa:	f1cff06f          	j	204004c6 <__swbuf_r>
20400dae:	421c                	lw	a5,0(a2)
20400db0:	852e                	mv	a0,a1
20400db2:	00178713          	addi	a4,a5,1
20400db6:	c218                	sw	a4,0(a2)
20400db8:	00b78023          	sb	a1,0(a5)
20400dbc:	8082                	ret

20400dbe <__sfputs_r>:
__sfputs_r():
20400dbe:	1101                	addi	sp,sp,-32
20400dc0:	cc22                	sw	s0,24(sp)
20400dc2:	ca26                	sw	s1,20(sp)
20400dc4:	c84a                	sw	s2,16(sp)
20400dc6:	c64e                	sw	s3,12(sp)
20400dc8:	c452                	sw	s4,8(sp)
20400dca:	ce06                	sw	ra,28(sp)
20400dcc:	892a                	mv	s2,a0
20400dce:	89ae                	mv	s3,a1
20400dd0:	8432                	mv	s0,a2
20400dd2:	00d604b3          	add	s1,a2,a3
20400dd6:	5a7d                	li	s4,-1
20400dd8:	00941463          	bne	s0,s1,20400de0 <__sfputs_r+0x22>
20400ddc:	4501                	li	a0,0
20400dde:	a809                	j	20400df0 <__sfputs_r+0x32>
20400de0:	00044583          	lbu	a1,0(s0)
20400de4:	864e                	mv	a2,s3
20400de6:	854a                	mv	a0,s2
20400de8:	3775                	jal	20400d94 <__sfputc_r>
20400dea:	0405                	addi	s0,s0,1
20400dec:	ff4516e3          	bne	a0,s4,20400dd8 <__sfputs_r+0x1a>
20400df0:	40f2                	lw	ra,28(sp)
20400df2:	4462                	lw	s0,24(sp)
20400df4:	44d2                	lw	s1,20(sp)
20400df6:	4942                	lw	s2,16(sp)
20400df8:	49b2                	lw	s3,12(sp)
20400dfa:	4a22                	lw	s4,8(sp)
20400dfc:	6105                	addi	sp,sp,32
20400dfe:	8082                	ret

20400e00 <_vfiprintf_r>:
_vfiprintf_r():
20400e00:	7135                	addi	sp,sp,-160
20400e02:	cd22                	sw	s0,152(sp)
20400e04:	cb26                	sw	s1,148(sp)
20400e06:	c94a                	sw	s2,144(sp)
20400e08:	c74e                	sw	s3,140(sp)
20400e0a:	cf06                	sw	ra,156(sp)
20400e0c:	c552                	sw	s4,136(sp)
20400e0e:	c356                	sw	s5,132(sp)
20400e10:	c15a                	sw	s6,128(sp)
20400e12:	dede                	sw	s7,124(sp)
20400e14:	dce2                	sw	s8,120(sp)
20400e16:	dae6                	sw	s9,116(sp)
20400e18:	89aa                	mv	s3,a0
20400e1a:	84ae                	mv	s1,a1
20400e1c:	8932                	mv	s2,a2
20400e1e:	8436                	mv	s0,a3
20400e20:	c501                	beqz	a0,20400e28 <_vfiprintf_r+0x28>
20400e22:	4d1c                	lw	a5,24(a0)
20400e24:	e391                	bnez	a5,20400e28 <_vfiprintf_r+0x28>
20400e26:	3cd1                	jal	204008fa <__sinit>
20400e28:	00004797          	auipc	a5,0x4
20400e2c:	37c78793          	addi	a5,a5,892 # 204051a4 <__sf_fake_stdin>
20400e30:	0cf49b63          	bne	s1,a5,20400f06 <_vfiprintf_r+0x106>
20400e34:	0049a483          	lw	s1,4(s3)
20400e38:	00c4d783          	lhu	a5,12(s1)
20400e3c:	8ba1                	andi	a5,a5,8
20400e3e:	c7f5                	beqz	a5,20400f2a <_vfiprintf_r+0x12a>
20400e40:	489c                	lw	a5,16(s1)
20400e42:	c7e5                	beqz	a5,20400f2a <_vfiprintf_r+0x12a>
20400e44:	02000793          	li	a5,32
20400e48:	02f104a3          	sb	a5,41(sp)
20400e4c:	03000793          	li	a5,48
20400e50:	d202                	sw	zero,36(sp)
20400e52:	02f10523          	sb	a5,42(sp)
20400e56:	c622                	sw	s0,12(sp)
20400e58:	02500b93          	li	s7,37
20400e5c:	00004a97          	auipc	s5,0x4
20400e60:	388a8a93          	addi	s5,s5,904 # 204051e4 <__sf_fake_stdout+0x20>
20400e64:	4c05                	li	s8,1
20400e66:	4b29                	li	s6,10
20400e68:	844a                	mv	s0,s2
20400e6a:	00044783          	lbu	a5,0(s0)
20400e6e:	c399                	beqz	a5,20400e74 <_vfiprintf_r+0x74>
20400e70:	0f779063          	bne	a5,s7,20400f50 <_vfiprintf_r+0x150>
20400e74:	41240cb3          	sub	s9,s0,s2
20400e78:	000c8d63          	beqz	s9,20400e92 <_vfiprintf_r+0x92>
20400e7c:	86e6                	mv	a3,s9
20400e7e:	864a                	mv	a2,s2
20400e80:	85a6                	mv	a1,s1
20400e82:	854e                	mv	a0,s3
20400e84:	3f2d                	jal	20400dbe <__sfputs_r>
20400e86:	57fd                	li	a5,-1
20400e88:	1ef50663          	beq	a0,a5,20401074 <_vfiprintf_r+0x274>
20400e8c:	5692                	lw	a3,36(sp)
20400e8e:	96e6                	add	a3,a3,s9
20400e90:	d236                	sw	a3,36(sp)
20400e92:	00044783          	lbu	a5,0(s0)
20400e96:	1c078f63          	beqz	a5,20401074 <_vfiprintf_r+0x274>
20400e9a:	57fd                	li	a5,-1
20400e9c:	00140913          	addi	s2,s0,1
20400ea0:	c802                	sw	zero,16(sp)
20400ea2:	ce02                	sw	zero,28(sp)
20400ea4:	ca3e                	sw	a5,20(sp)
20400ea6:	cc02                	sw	zero,24(sp)
20400ea8:	040109a3          	sb	zero,83(sp)
20400eac:	d482                	sw	zero,104(sp)
20400eae:	00094583          	lbu	a1,0(s2)
20400eb2:	4615                	li	a2,5
20400eb4:	8556                	mv	a0,s5
20400eb6:	26d9                	jal	2040127c <memchr>
20400eb8:	00190413          	addi	s0,s2,1
20400ebc:	47c2                	lw	a5,16(sp)
20400ebe:	e959                	bnez	a0,20400f54 <_vfiprintf_r+0x154>
20400ec0:	0107f713          	andi	a4,a5,16
20400ec4:	c709                	beqz	a4,20400ece <_vfiprintf_r+0xce>
20400ec6:	02000713          	li	a4,32
20400eca:	04e109a3          	sb	a4,83(sp)
20400ece:	0087f713          	andi	a4,a5,8
20400ed2:	c709                	beqz	a4,20400edc <_vfiprintf_r+0xdc>
20400ed4:	02b00713          	li	a4,43
20400ed8:	04e109a3          	sb	a4,83(sp)
20400edc:	00094683          	lbu	a3,0(s2)
20400ee0:	02a00713          	li	a4,42
20400ee4:	08e68063          	beq	a3,a4,20400f64 <_vfiprintf_r+0x164>
20400ee8:	47f2                	lw	a5,28(sp)
20400eea:	844a                	mv	s0,s2
20400eec:	4681                	li	a3,0
20400eee:	4625                	li	a2,9
20400ef0:	00044703          	lbu	a4,0(s0)
20400ef4:	00140593          	addi	a1,s0,1
20400ef8:	fd070713          	addi	a4,a4,-48
20400efc:	0ae67963          	bgeu	a2,a4,20400fae <_vfiprintf_r+0x1ae>
20400f00:	cab5                	beqz	a3,20400f74 <_vfiprintf_r+0x174>
20400f02:	ce3e                	sw	a5,28(sp)
20400f04:	a885                	j	20400f74 <_vfiprintf_r+0x174>
20400f06:	00004797          	auipc	a5,0x4
20400f0a:	2be78793          	addi	a5,a5,702 # 204051c4 <__sf_fake_stdout>
20400f0e:	00f49563          	bne	s1,a5,20400f18 <_vfiprintf_r+0x118>
20400f12:	0089a483          	lw	s1,8(s3)
20400f16:	b70d                	j	20400e38 <_vfiprintf_r+0x38>
20400f18:	00004797          	auipc	a5,0x4
20400f1c:	26c78793          	addi	a5,a5,620 # 20405184 <__sf_fake_stderr>
20400f20:	f0f49ce3          	bne	s1,a5,20400e38 <_vfiprintf_r+0x38>
20400f24:	00c9a483          	lw	s1,12(s3)
20400f28:	bf01                	j	20400e38 <_vfiprintf_r+0x38>
20400f2a:	85a6                	mv	a1,s1
20400f2c:	854e                	mv	a0,s3
20400f2e:	e58ff0ef          	jal	ra,20400586 <__swsetup_r>
20400f32:	d909                	beqz	a0,20400e44 <_vfiprintf_r+0x44>
20400f34:	557d                	li	a0,-1
20400f36:	40fa                	lw	ra,156(sp)
20400f38:	446a                	lw	s0,152(sp)
20400f3a:	44da                	lw	s1,148(sp)
20400f3c:	494a                	lw	s2,144(sp)
20400f3e:	49ba                	lw	s3,140(sp)
20400f40:	4a2a                	lw	s4,136(sp)
20400f42:	4a9a                	lw	s5,132(sp)
20400f44:	4b0a                	lw	s6,128(sp)
20400f46:	5bf6                	lw	s7,124(sp)
20400f48:	5c66                	lw	s8,120(sp)
20400f4a:	5cd6                	lw	s9,116(sp)
20400f4c:	610d                	addi	sp,sp,160
20400f4e:	8082                	ret
20400f50:	0405                	addi	s0,s0,1
20400f52:	bf21                	j	20400e6a <_vfiprintf_r+0x6a>
20400f54:	41550533          	sub	a0,a0,s5
20400f58:	00ac1533          	sll	a0,s8,a0
20400f5c:	8fc9                	or	a5,a5,a0
20400f5e:	c83e                	sw	a5,16(sp)
20400f60:	8922                	mv	s2,s0
20400f62:	b7b1                	j	20400eae <_vfiprintf_r+0xae>
20400f64:	4732                	lw	a4,12(sp)
20400f66:	00470693          	addi	a3,a4,4
20400f6a:	4318                	lw	a4,0(a4)
20400f6c:	c636                	sw	a3,12(sp)
20400f6e:	02074963          	bltz	a4,20400fa0 <_vfiprintf_r+0x1a0>
20400f72:	ce3a                	sw	a4,28(sp)
20400f74:	00044703          	lbu	a4,0(s0)
20400f78:	02e00793          	li	a5,46
20400f7c:	04f71f63          	bne	a4,a5,20400fda <_vfiprintf_r+0x1da>
20400f80:	00144703          	lbu	a4,1(s0)
20400f84:	02a00793          	li	a5,42
20400f88:	02f71b63          	bne	a4,a5,20400fbe <_vfiprintf_r+0x1be>
20400f8c:	47b2                	lw	a5,12(sp)
20400f8e:	0409                	addi	s0,s0,2
20400f90:	00478713          	addi	a4,a5,4
20400f94:	439c                	lw	a5,0(a5)
20400f96:	c63a                	sw	a4,12(sp)
20400f98:	0207c163          	bltz	a5,20400fba <_vfiprintf_r+0x1ba>
20400f9c:	ca3e                	sw	a5,20(sp)
20400f9e:	a835                	j	20400fda <_vfiprintf_r+0x1da>
20400fa0:	40e00733          	neg	a4,a4
20400fa4:	0027e793          	ori	a5,a5,2
20400fa8:	ce3a                	sw	a4,28(sp)
20400faa:	c83e                	sw	a5,16(sp)
20400fac:	b7e1                	j	20400f74 <_vfiprintf_r+0x174>
20400fae:	036787b3          	mul	a5,a5,s6
20400fb2:	4685                	li	a3,1
20400fb4:	842e                	mv	s0,a1
20400fb6:	97ba                	add	a5,a5,a4
20400fb8:	bf25                	j	20400ef0 <_vfiprintf_r+0xf0>
20400fba:	57fd                	li	a5,-1
20400fbc:	b7c5                	j	20400f9c <_vfiprintf_r+0x19c>
20400fbe:	0405                	addi	s0,s0,1
20400fc0:	ca02                	sw	zero,20(sp)
20400fc2:	4681                	li	a3,0
20400fc4:	4781                	li	a5,0
20400fc6:	4625                	li	a2,9
20400fc8:	00044703          	lbu	a4,0(s0)
20400fcc:	00140593          	addi	a1,s0,1
20400fd0:	fd070713          	addi	a4,a4,-48
20400fd4:	06e67663          	bgeu	a2,a4,20401040 <_vfiprintf_r+0x240>
20400fd8:	f2f1                	bnez	a3,20400f9c <_vfiprintf_r+0x19c>
20400fda:	00044583          	lbu	a1,0(s0)
20400fde:	460d                	li	a2,3
20400fe0:	00004517          	auipc	a0,0x4
20400fe4:	20c50513          	addi	a0,a0,524 # 204051ec <__sf_fake_stdout+0x28>
20400fe8:	2c51                	jal	2040127c <memchr>
20400fea:	cd11                	beqz	a0,20401006 <_vfiprintf_r+0x206>
20400fec:	00004797          	auipc	a5,0x4
20400ff0:	20078793          	addi	a5,a5,512 # 204051ec <__sf_fake_stdout+0x28>
20400ff4:	8d1d                	sub	a0,a0,a5
20400ff6:	04000793          	li	a5,64
20400ffa:	00a797b3          	sll	a5,a5,a0
20400ffe:	4542                	lw	a0,16(sp)
20401000:	0405                	addi	s0,s0,1
20401002:	8d5d                	or	a0,a0,a5
20401004:	c82a                	sw	a0,16(sp)
20401006:	00044583          	lbu	a1,0(s0)
2040100a:	4619                	li	a2,6
2040100c:	00004517          	auipc	a0,0x4
20401010:	1e450513          	addi	a0,a0,484 # 204051f0 <__sf_fake_stdout+0x2c>
20401014:	00140913          	addi	s2,s0,1
20401018:	02b10423          	sb	a1,40(sp)
2040101c:	2485                	jal	2040127c <memchr>
2040101e:	c13d                	beqz	a0,20401084 <_vfiprintf_r+0x284>
20401020:	dfbff797          	auipc	a5,0xdfbff
20401024:	fe078793          	addi	a5,a5,-32 # 0 <__metal_boot_hart>
20401028:	e795                	bnez	a5,20401054 <_vfiprintf_r+0x254>
2040102a:	4742                	lw	a4,16(sp)
2040102c:	47b2                	lw	a5,12(sp)
2040102e:	10077713          	andi	a4,a4,256
20401032:	cf09                	beqz	a4,2040104c <_vfiprintf_r+0x24c>
20401034:	0791                	addi	a5,a5,4
20401036:	c63e                	sw	a5,12(sp)
20401038:	5792                	lw	a5,36(sp)
2040103a:	97d2                	add	a5,a5,s4
2040103c:	d23e                	sw	a5,36(sp)
2040103e:	b52d                	j	20400e68 <_vfiprintf_r+0x68>
20401040:	036787b3          	mul	a5,a5,s6
20401044:	4685                	li	a3,1
20401046:	842e                	mv	s0,a1
20401048:	97ba                	add	a5,a5,a4
2040104a:	bfbd                	j	20400fc8 <_vfiprintf_r+0x1c8>
2040104c:	079d                	addi	a5,a5,7
2040104e:	9be1                	andi	a5,a5,-8
20401050:	07a1                	addi	a5,a5,8
20401052:	b7d5                	j	20401036 <_vfiprintf_r+0x236>
20401054:	0078                	addi	a4,sp,12
20401056:	00000697          	auipc	a3,0x0
2040105a:	d6868693          	addi	a3,a3,-664 # 20400dbe <__sfputs_r>
2040105e:	8626                	mv	a2,s1
20401060:	080c                	addi	a1,sp,16
20401062:	854e                	mv	a0,s3
20401064:	00000097          	auipc	ra,0x0
20401068:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040106c:	57fd                	li	a5,-1
2040106e:	8a2a                	mv	s4,a0
20401070:	fcf514e3          	bne	a0,a5,20401038 <_vfiprintf_r+0x238>
20401074:	00c4d783          	lhu	a5,12(s1)
20401078:	0407f793          	andi	a5,a5,64
2040107c:	ea079ce3          	bnez	a5,20400f34 <_vfiprintf_r+0x134>
20401080:	5512                	lw	a0,36(sp)
20401082:	bd55                	j	20400f36 <_vfiprintf_r+0x136>
20401084:	0078                	addi	a4,sp,12
20401086:	00000697          	auipc	a3,0x0
2040108a:	d3868693          	addi	a3,a3,-712 # 20400dbe <__sfputs_r>
2040108e:	8626                	mv	a2,s1
20401090:	080c                	addi	a1,sp,16
20401092:	854e                	mv	a0,s3
20401094:	2e09                	jal	204013a6 <_printf_i>
20401096:	bfd9                	j	2040106c <_vfiprintf_r+0x26c>

20401098 <_sbrk_r>:
_sbrk_r():
20401098:	1141                	addi	sp,sp,-16
2040109a:	c422                	sw	s0,8(sp)
2040109c:	842a                	mv	s0,a0
2040109e:	852e                	mv	a0,a1
204010a0:	5fc03797          	auipc	a5,0x5fc03
204010a4:	5e07a823          	sw	zero,1520(a5) # 80004690 <errno>
204010a8:	c606                	sw	ra,12(sp)
204010aa:	2579                	jal	20401738 <_sbrk>
204010ac:	57fd                	li	a5,-1
204010ae:	00f51963          	bne	a0,a5,204010c0 <_sbrk_r+0x28>
204010b2:	5fc03797          	auipc	a5,0x5fc03
204010b6:	5de78793          	addi	a5,a5,1502 # 80004690 <errno>
204010ba:	439c                	lw	a5,0(a5)
204010bc:	c391                	beqz	a5,204010c0 <_sbrk_r+0x28>
204010be:	c01c                	sw	a5,0(s0)
204010c0:	40b2                	lw	ra,12(sp)
204010c2:	4422                	lw	s0,8(sp)
204010c4:	0141                	addi	sp,sp,16
204010c6:	8082                	ret

204010c8 <__sread>:
__sread():
204010c8:	1141                	addi	sp,sp,-16
204010ca:	c422                	sw	s0,8(sp)
204010cc:	842e                	mv	s0,a1
204010ce:	00e59583          	lh	a1,14(a1)
204010d2:	c606                	sw	ra,12(sp)
204010d4:	2b95                	jal	20401648 <_read_r>
204010d6:	00054963          	bltz	a0,204010e8 <__sread+0x20>
204010da:	487c                	lw	a5,84(s0)
204010dc:	97aa                	add	a5,a5,a0
204010de:	c87c                	sw	a5,84(s0)
204010e0:	40b2                	lw	ra,12(sp)
204010e2:	4422                	lw	s0,8(sp)
204010e4:	0141                	addi	sp,sp,16
204010e6:	8082                	ret
204010e8:	00c45783          	lhu	a5,12(s0)
204010ec:	777d                	lui	a4,0xfffff
204010ee:	177d                	addi	a4,a4,-1
204010f0:	8ff9                	and	a5,a5,a4
204010f2:	00f41623          	sh	a5,12(s0)
204010f6:	b7ed                	j	204010e0 <__sread+0x18>

204010f8 <__swrite>:
__swrite():
204010f8:	00c5d783          	lhu	a5,12(a1)
204010fc:	1101                	addi	sp,sp,-32
204010fe:	cc22                	sw	s0,24(sp)
20401100:	ca26                	sw	s1,20(sp)
20401102:	c84a                	sw	s2,16(sp)
20401104:	c64e                	sw	s3,12(sp)
20401106:	ce06                	sw	ra,28(sp)
20401108:	1007f793          	andi	a5,a5,256
2040110c:	84aa                	mv	s1,a0
2040110e:	842e                	mv	s0,a1
20401110:	8932                	mv	s2,a2
20401112:	89b6                	mv	s3,a3
20401114:	c791                	beqz	a5,20401120 <__swrite+0x28>
20401116:	00e59583          	lh	a1,14(a1)
2040111a:	4689                	li	a3,2
2040111c:	4601                	li	a2,0
2040111e:	222d                	jal	20401248 <_lseek_r>
20401120:	00c45783          	lhu	a5,12(s0)
20401124:	777d                	lui	a4,0xfffff
20401126:	177d                	addi	a4,a4,-1
20401128:	8ff9                	and	a5,a5,a4
2040112a:	00f41623          	sh	a5,12(s0)
2040112e:	00e41583          	lh	a1,14(s0)
20401132:	4462                	lw	s0,24(sp)
20401134:	40f2                	lw	ra,28(sp)
20401136:	86ce                	mv	a3,s3
20401138:	864a                	mv	a2,s2
2040113a:	49b2                	lw	s3,12(sp)
2040113c:	4942                	lw	s2,16(sp)
2040113e:	8526                	mv	a0,s1
20401140:	44d2                	lw	s1,20(sp)
20401142:	6105                	addi	sp,sp,32
20401144:	a83d                	j	20401182 <_write_r>

20401146 <__sseek>:
__sseek():
20401146:	1141                	addi	sp,sp,-16
20401148:	c422                	sw	s0,8(sp)
2040114a:	842e                	mv	s0,a1
2040114c:	00e59583          	lh	a1,14(a1)
20401150:	c606                	sw	ra,12(sp)
20401152:	28dd                	jal	20401248 <_lseek_r>
20401154:	57fd                	li	a5,-1
20401156:	00c45703          	lhu	a4,12(s0)
2040115a:	00f51b63          	bne	a0,a5,20401170 <__sseek+0x2a>
2040115e:	77fd                	lui	a5,0xfffff
20401160:	17fd                	addi	a5,a5,-1
20401162:	8ff9                	and	a5,a5,a4
20401164:	00f41623          	sh	a5,12(s0)
20401168:	40b2                	lw	ra,12(sp)
2040116a:	4422                	lw	s0,8(sp)
2040116c:	0141                	addi	sp,sp,16
2040116e:	8082                	ret
20401170:	6785                	lui	a5,0x1
20401172:	8fd9                	or	a5,a5,a4
20401174:	00f41623          	sh	a5,12(s0)
20401178:	c868                	sw	a0,84(s0)
2040117a:	b7fd                	j	20401168 <__sseek+0x22>

2040117c <__sclose>:
__sclose():
2040117c:	00e59583          	lh	a1,14(a1)
20401180:	a81d                	j	204011b6 <_close_r>

20401182 <_write_r>:
_write_r():
20401182:	1141                	addi	sp,sp,-16
20401184:	c422                	sw	s0,8(sp)
20401186:	842a                	mv	s0,a0
20401188:	852e                	mv	a0,a1
2040118a:	85b2                	mv	a1,a2
2040118c:	8636                	mv	a2,a3
2040118e:	5fc03797          	auipc	a5,0x5fc03
20401192:	5007a123          	sw	zero,1282(a5) # 80004690 <errno>
20401196:	c606                	sw	ra,12(sp)
20401198:	2d39                	jal	204017b6 <_write>
2040119a:	57fd                	li	a5,-1
2040119c:	00f51963          	bne	a0,a5,204011ae <_write_r+0x2c>
204011a0:	5fc03797          	auipc	a5,0x5fc03
204011a4:	4f078793          	addi	a5,a5,1264 # 80004690 <errno>
204011a8:	439c                	lw	a5,0(a5)
204011aa:	c391                	beqz	a5,204011ae <_write_r+0x2c>
204011ac:	c01c                	sw	a5,0(s0)
204011ae:	40b2                	lw	ra,12(sp)
204011b0:	4422                	lw	s0,8(sp)
204011b2:	0141                	addi	sp,sp,16
204011b4:	8082                	ret

204011b6 <_close_r>:
_close_r():
204011b6:	1141                	addi	sp,sp,-16
204011b8:	c422                	sw	s0,8(sp)
204011ba:	842a                	mv	s0,a0
204011bc:	852e                	mv	a0,a1
204011be:	5fc03797          	auipc	a5,0x5fc03
204011c2:	4c07a923          	sw	zero,1234(a5) # 80004690 <errno>
204011c6:	c606                	sw	ra,12(sp)
204011c8:	2955                	jal	2040167c <_close>
204011ca:	57fd                	li	a5,-1
204011cc:	00f51963          	bne	a0,a5,204011de <_close_r+0x28>
204011d0:	5fc03797          	auipc	a5,0x5fc03
204011d4:	4c078793          	addi	a5,a5,1216 # 80004690 <errno>
204011d8:	439c                	lw	a5,0(a5)
204011da:	c391                	beqz	a5,204011de <_close_r+0x28>
204011dc:	c01c                	sw	a5,0(s0)
204011de:	40b2                	lw	ra,12(sp)
204011e0:	4422                	lw	s0,8(sp)
204011e2:	0141                	addi	sp,sp,16
204011e4:	8082                	ret

204011e6 <_fstat_r>:
_fstat_r():
204011e6:	1141                	addi	sp,sp,-16
204011e8:	c422                	sw	s0,8(sp)
204011ea:	842a                	mv	s0,a0
204011ec:	852e                	mv	a0,a1
204011ee:	85b2                	mv	a1,a2
204011f0:	5fc03797          	auipc	a5,0x5fc03
204011f4:	4a07a023          	sw	zero,1184(a5) # 80004690 <errno>
204011f8:	c606                	sw	ra,12(sp)
204011fa:	2155                	jal	2040169e <_fstat>
204011fc:	57fd                	li	a5,-1
204011fe:	00f51963          	bne	a0,a5,20401210 <_fstat_r+0x2a>
20401202:	5fc03797          	auipc	a5,0x5fc03
20401206:	48e78793          	addi	a5,a5,1166 # 80004690 <errno>
2040120a:	439c                	lw	a5,0(a5)
2040120c:	c391                	beqz	a5,20401210 <_fstat_r+0x2a>
2040120e:	c01c                	sw	a5,0(s0)
20401210:	40b2                	lw	ra,12(sp)
20401212:	4422                	lw	s0,8(sp)
20401214:	0141                	addi	sp,sp,16
20401216:	8082                	ret

20401218 <_isatty_r>:
_isatty_r():
20401218:	1141                	addi	sp,sp,-16
2040121a:	c422                	sw	s0,8(sp)
2040121c:	842a                	mv	s0,a0
2040121e:	852e                	mv	a0,a1
20401220:	5fc03797          	auipc	a5,0x5fc03
20401224:	4607a823          	sw	zero,1136(a5) # 80004690 <errno>
20401228:	c606                	sw	ra,12(sp)
2040122a:	2969                	jal	204016c4 <_isatty>
2040122c:	57fd                	li	a5,-1
2040122e:	00f51963          	bne	a0,a5,20401240 <_isatty_r+0x28>
20401232:	5fc03797          	auipc	a5,0x5fc03
20401236:	45e78793          	addi	a5,a5,1118 # 80004690 <errno>
2040123a:	439c                	lw	a5,0(a5)
2040123c:	c391                	beqz	a5,20401240 <_isatty_r+0x28>
2040123e:	c01c                	sw	a5,0(s0)
20401240:	40b2                	lw	ra,12(sp)
20401242:	4422                	lw	s0,8(sp)
20401244:	0141                	addi	sp,sp,16
20401246:	8082                	ret

20401248 <_lseek_r>:
_lseek_r():
20401248:	1141                	addi	sp,sp,-16
2040124a:	c422                	sw	s0,8(sp)
2040124c:	842a                	mv	s0,a0
2040124e:	852e                	mv	a0,a1
20401250:	85b2                	mv	a1,a2
20401252:	8636                	mv	a2,a3
20401254:	5fc03797          	auipc	a5,0x5fc03
20401258:	4207ae23          	sw	zero,1084(a5) # 80004690 <errno>
2040125c:	c606                	sw	ra,12(sp)
2040125e:	2159                	jal	204016e4 <_lseek>
20401260:	57fd                	li	a5,-1
20401262:	00f51963          	bne	a0,a5,20401274 <_lseek_r+0x2c>
20401266:	5fc03797          	auipc	a5,0x5fc03
2040126a:	42a78793          	addi	a5,a5,1066 # 80004690 <errno>
2040126e:	439c                	lw	a5,0(a5)
20401270:	c391                	beqz	a5,20401274 <_lseek_r+0x2c>
20401272:	c01c                	sw	a5,0(s0)
20401274:	40b2                	lw	ra,12(sp)
20401276:	4422                	lw	s0,8(sp)
20401278:	0141                	addi	sp,sp,16
2040127a:	8082                	ret

2040127c <memchr>:
memchr():
2040127c:	0ff5f593          	andi	a1,a1,255
20401280:	962a                	add	a2,a2,a0
20401282:	00c51463          	bne	a0,a2,2040128a <memchr+0xe>
20401286:	4501                	li	a0,0
20401288:	8082                	ret
2040128a:	00054783          	lbu	a5,0(a0)
2040128e:	feb78de3          	beq	a5,a1,20401288 <memchr+0xc>
20401292:	0505                	addi	a0,a0,1
20401294:	b7fd                	j	20401282 <memchr+0x6>

20401296 <__malloc_lock>:
__malloc_lock():
20401296:	8082                	ret

20401298 <__malloc_unlock>:
__malloc_unlock():
20401298:	8082                	ret

2040129a <_printf_common>:
_printf_common():
2040129a:	7179                	addi	sp,sp,-48
2040129c:	ca56                	sw	s5,20(sp)
2040129e:	499c                	lw	a5,16(a1)
204012a0:	8aba                	mv	s5,a4
204012a2:	4598                	lw	a4,8(a1)
204012a4:	d422                	sw	s0,40(sp)
204012a6:	d226                	sw	s1,36(sp)
204012a8:	ce4e                	sw	s3,28(sp)
204012aa:	cc52                	sw	s4,24(sp)
204012ac:	d606                	sw	ra,44(sp)
204012ae:	d04a                	sw	s2,32(sp)
204012b0:	c85a                	sw	s6,16(sp)
204012b2:	c65e                	sw	s7,12(sp)
204012b4:	89aa                	mv	s3,a0
204012b6:	842e                	mv	s0,a1
204012b8:	84b2                	mv	s1,a2
204012ba:	8a36                	mv	s4,a3
204012bc:	00e7d363          	bge	a5,a4,204012c2 <_printf_common+0x28>
204012c0:	87ba                	mv	a5,a4
204012c2:	c09c                	sw	a5,0(s1)
204012c4:	04344703          	lbu	a4,67(s0)
204012c8:	c319                	beqz	a4,204012ce <_printf_common+0x34>
204012ca:	0785                	addi	a5,a5,1
204012cc:	c09c                	sw	a5,0(s1)
204012ce:	401c                	lw	a5,0(s0)
204012d0:	0207f793          	andi	a5,a5,32
204012d4:	c781                	beqz	a5,204012dc <_printf_common+0x42>
204012d6:	409c                	lw	a5,0(s1)
204012d8:	0789                	addi	a5,a5,2
204012da:	c09c                	sw	a5,0(s1)
204012dc:	00042903          	lw	s2,0(s0)
204012e0:	00697913          	andi	s2,s2,6
204012e4:	00091a63          	bnez	s2,204012f8 <_printf_common+0x5e>
204012e8:	01940b13          	addi	s6,s0,25
204012ec:	5bfd                	li	s7,-1
204012ee:	445c                	lw	a5,12(s0)
204012f0:	4098                	lw	a4,0(s1)
204012f2:	8f99                	sub	a5,a5,a4
204012f4:	04f94c63          	blt	s2,a5,2040134c <_printf_common+0xb2>
204012f8:	401c                	lw	a5,0(s0)
204012fa:	04344683          	lbu	a3,67(s0)
204012fe:	0207f793          	andi	a5,a5,32
20401302:	00d036b3          	snez	a3,a3
20401306:	eba5                	bnez	a5,20401376 <_printf_common+0xdc>
20401308:	04340613          	addi	a2,s0,67
2040130c:	85d2                	mv	a1,s4
2040130e:	854e                	mv	a0,s3
20401310:	9a82                	jalr	s5
20401312:	57fd                	li	a5,-1
20401314:	04f50363          	beq	a0,a5,2040135a <_printf_common+0xc0>
20401318:	401c                	lw	a5,0(s0)
2040131a:	4611                	li	a2,4
2040131c:	4098                	lw	a4,0(s1)
2040131e:	8b99                	andi	a5,a5,6
20401320:	4454                	lw	a3,12(s0)
20401322:	4481                	li	s1,0
20401324:	00c79763          	bne	a5,a2,20401332 <_printf_common+0x98>
20401328:	40e684b3          	sub	s1,a3,a4
2040132c:	0004d363          	bgez	s1,20401332 <_printf_common+0x98>
20401330:	4481                	li	s1,0
20401332:	441c                	lw	a5,8(s0)
20401334:	4818                	lw	a4,16(s0)
20401336:	00f75463          	bge	a4,a5,2040133e <_printf_common+0xa4>
2040133a:	8f99                	sub	a5,a5,a4
2040133c:	94be                	add	s1,s1,a5
2040133e:	4901                	li	s2,0
20401340:	0469                	addi	s0,s0,26
20401342:	5b7d                	li	s6,-1
20401344:	05249863          	bne	s1,s2,20401394 <_printf_common+0xfa>
20401348:	4501                	li	a0,0
2040134a:	a809                	j	2040135c <_printf_common+0xc2>
2040134c:	4685                	li	a3,1
2040134e:	865a                	mv	a2,s6
20401350:	85d2                	mv	a1,s4
20401352:	854e                	mv	a0,s3
20401354:	9a82                	jalr	s5
20401356:	01751e63          	bne	a0,s7,20401372 <_printf_common+0xd8>
2040135a:	557d                	li	a0,-1
2040135c:	50b2                	lw	ra,44(sp)
2040135e:	5422                	lw	s0,40(sp)
20401360:	5492                	lw	s1,36(sp)
20401362:	5902                	lw	s2,32(sp)
20401364:	49f2                	lw	s3,28(sp)
20401366:	4a62                	lw	s4,24(sp)
20401368:	4ad2                	lw	s5,20(sp)
2040136a:	4b42                	lw	s6,16(sp)
2040136c:	4bb2                	lw	s7,12(sp)
2040136e:	6145                	addi	sp,sp,48
20401370:	8082                	ret
20401372:	0905                	addi	s2,s2,1
20401374:	bfad                	j	204012ee <_printf_common+0x54>
20401376:	00d40733          	add	a4,s0,a3
2040137a:	03000613          	li	a2,48
2040137e:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fff9daf>
20401382:	04544703          	lbu	a4,69(s0)
20401386:	00168793          	addi	a5,a3,1
2040138a:	97a2                	add	a5,a5,s0
2040138c:	0689                	addi	a3,a3,2
2040138e:	04e781a3          	sb	a4,67(a5)
20401392:	bf9d                	j	20401308 <_printf_common+0x6e>
20401394:	4685                	li	a3,1
20401396:	8622                	mv	a2,s0
20401398:	85d2                	mv	a1,s4
2040139a:	854e                	mv	a0,s3
2040139c:	9a82                	jalr	s5
2040139e:	fb650ee3          	beq	a0,s6,2040135a <_printf_common+0xc0>
204013a2:	0905                	addi	s2,s2,1
204013a4:	b745                	j	20401344 <_printf_common+0xaa>

204013a6 <_printf_i>:
_printf_i():
204013a6:	7179                	addi	sp,sp,-48
204013a8:	d422                	sw	s0,40(sp)
204013aa:	d226                	sw	s1,36(sp)
204013ac:	d04a                	sw	s2,32(sp)
204013ae:	ce4e                	sw	s3,28(sp)
204013b0:	d606                	sw	ra,44(sp)
204013b2:	cc52                	sw	s4,24(sp)
204013b4:	ca56                	sw	s5,20(sp)
204013b6:	c85a                	sw	s6,16(sp)
204013b8:	89b6                	mv	s3,a3
204013ba:	0185c683          	lbu	a3,24(a1)
204013be:	06e00793          	li	a5,110
204013c2:	8932                	mv	s2,a2
204013c4:	84aa                	mv	s1,a0
204013c6:	842e                	mv	s0,a1
204013c8:	04358613          	addi	a2,a1,67
204013cc:	1ef68063          	beq	a3,a5,204015ac <_printf_i+0x206>
204013d0:	06d7e263          	bltu	a5,a3,20401434 <_printf_i+0x8e>
204013d4:	06300793          	li	a5,99
204013d8:	0af68263          	beq	a3,a5,2040147c <_printf_i+0xd6>
204013dc:	00d7ed63          	bltu	a5,a3,204013f6 <_printf_i+0x50>
204013e0:	1e068a63          	beqz	a3,204015d4 <_printf_i+0x22e>
204013e4:	05800793          	li	a5,88
204013e8:	16f68663          	beq	a3,a5,20401554 <_printf_i+0x1ae>
204013ec:	04240a93          	addi	s5,s0,66
204013f0:	04d40123          	sb	a3,66(s0)
204013f4:	a869                	j	2040148e <_printf_i+0xe8>
204013f6:	06400793          	li	a5,100
204013fa:	00f68663          	beq	a3,a5,20401406 <_printf_i+0x60>
204013fe:	06900793          	li	a5,105
20401402:	fef695e3          	bne	a3,a5,204013ec <_printf_i+0x46>
20401406:	401c                	lw	a5,0(s0)
20401408:	4308                	lw	a0,0(a4)
2040140a:	0807f693          	andi	a3,a5,128
2040140e:	00450593          	addi	a1,a0,4
20401412:	c2c1                	beqz	a3,20401492 <_printf_i+0xec>
20401414:	411c                	lw	a5,0(a0)
20401416:	c30c                	sw	a1,0(a4)
20401418:	0007d863          	bgez	a5,20401428 <_printf_i+0x82>
2040141c:	02d00713          	li	a4,45
20401420:	40f007b3          	neg	a5,a5
20401424:	04e401a3          	sb	a4,67(s0)
20401428:	00004697          	auipc	a3,0x4
2040142c:	dd068693          	addi	a3,a3,-560 # 204051f8 <__sf_fake_stdout+0x34>
20401430:	4729                	li	a4,10
20401432:	a065                	j	204014da <_printf_i+0x134>
20401434:	07300793          	li	a5,115
20401438:	1af68263          	beq	a3,a5,204015dc <_printf_i+0x236>
2040143c:	00d7ef63          	bltu	a5,a3,2040145a <_printf_i+0xb4>
20401440:	06f00793          	li	a5,111
20401444:	04f68f63          	beq	a3,a5,204014a2 <_printf_i+0xfc>
20401448:	07000793          	li	a5,112
2040144c:	faf690e3          	bne	a3,a5,204013ec <_printf_i+0x46>
20401450:	419c                	lw	a5,0(a1)
20401452:	0207e793          	ori	a5,a5,32
20401456:	c19c                	sw	a5,0(a1)
20401458:	a809                	j	2040146a <_printf_i+0xc4>
2040145a:	07500793          	li	a5,117
2040145e:	04f68263          	beq	a3,a5,204014a2 <_printf_i+0xfc>
20401462:	07800793          	li	a5,120
20401466:	f8f693e3          	bne	a3,a5,204013ec <_printf_i+0x46>
2040146a:	07800793          	li	a5,120
2040146e:	04f402a3          	sb	a5,69(s0)
20401472:	00004697          	auipc	a3,0x4
20401476:	d9a68693          	addi	a3,a3,-614 # 2040520c <__sf_fake_stdout+0x48>
2040147a:	a0dd                	j	20401560 <_printf_i+0x1ba>
2040147c:	431c                	lw	a5,0(a4)
2040147e:	04258a93          	addi	s5,a1,66
20401482:	00478693          	addi	a3,a5,4
20401486:	439c                	lw	a5,0(a5)
20401488:	c314                	sw	a3,0(a4)
2040148a:	04f58123          	sb	a5,66(a1)
2040148e:	4785                	li	a5,1
20401490:	a2ad                	j	204015fa <_printf_i+0x254>
20401492:	0407f693          	andi	a3,a5,64
20401496:	411c                	lw	a5,0(a0)
20401498:	c30c                	sw	a1,0(a4)
2040149a:	debd                	beqz	a3,20401418 <_printf_i+0x72>
2040149c:	07c2                	slli	a5,a5,0x10
2040149e:	87c1                	srai	a5,a5,0x10
204014a0:	bfa5                	j	20401418 <_printf_i+0x72>
204014a2:	400c                	lw	a1,0(s0)
204014a4:	431c                	lw	a5,0(a4)
204014a6:	0805f813          	andi	a6,a1,128
204014aa:	00478513          	addi	a0,a5,4
204014ae:	00080563          	beqz	a6,204014b8 <_printf_i+0x112>
204014b2:	c308                	sw	a0,0(a4)
204014b4:	439c                	lw	a5,0(a5)
204014b6:	a039                	j	204014c4 <_printf_i+0x11e>
204014b8:	0405f593          	andi	a1,a1,64
204014bc:	c308                	sw	a0,0(a4)
204014be:	d9fd                	beqz	a1,204014b4 <_printf_i+0x10e>
204014c0:	0007d783          	lhu	a5,0(a5)
204014c4:	06f00713          	li	a4,111
204014c8:	0ce68a63          	beq	a3,a4,2040159c <_printf_i+0x1f6>
204014cc:	00004697          	auipc	a3,0x4
204014d0:	d2c68693          	addi	a3,a3,-724 # 204051f8 <__sf_fake_stdout+0x34>
204014d4:	4729                	li	a4,10
204014d6:	040401a3          	sb	zero,67(s0)
204014da:	404c                	lw	a1,4(s0)
204014dc:	c40c                	sw	a1,8(s0)
204014de:	0005c563          	bltz	a1,204014e8 <_printf_i+0x142>
204014e2:	4008                	lw	a0,0(s0)
204014e4:	996d                	andi	a0,a0,-5
204014e6:	c008                	sw	a0,0(s0)
204014e8:	e399                	bnez	a5,204014ee <_printf_i+0x148>
204014ea:	8ab2                	mv	s5,a2
204014ec:	cd91                	beqz	a1,20401508 <_printf_i+0x162>
204014ee:	8ab2                	mv	s5,a2
204014f0:	02e7f5b3          	remu	a1,a5,a4
204014f4:	1afd                	addi	s5,s5,-1
204014f6:	95b6                	add	a1,a1,a3
204014f8:	0005c583          	lbu	a1,0(a1)
204014fc:	00ba8023          	sb	a1,0(s5)
20401500:	02e7d5b3          	divu	a1,a5,a4
20401504:	0ae7f263          	bgeu	a5,a4,204015a8 <_printf_i+0x202>
20401508:	47a1                	li	a5,8
2040150a:	00f71e63          	bne	a4,a5,20401526 <_printf_i+0x180>
2040150e:	401c                	lw	a5,0(s0)
20401510:	8b85                	andi	a5,a5,1
20401512:	cb91                	beqz	a5,20401526 <_printf_i+0x180>
20401514:	4058                	lw	a4,4(s0)
20401516:	481c                	lw	a5,16(s0)
20401518:	00e7c763          	blt	a5,a4,20401526 <_printf_i+0x180>
2040151c:	03000793          	li	a5,48
20401520:	fefa8fa3          	sb	a5,-1(s5)
20401524:	1afd                	addi	s5,s5,-1
20401526:	41560633          	sub	a2,a2,s5
2040152a:	c810                	sw	a2,16(s0)
2040152c:	874e                	mv	a4,s3
2040152e:	86ca                	mv	a3,s2
20401530:	0070                	addi	a2,sp,12
20401532:	85a2                	mv	a1,s0
20401534:	8526                	mv	a0,s1
20401536:	3395                	jal	2040129a <_printf_common>
20401538:	5a7d                	li	s4,-1
2040153a:	0d451463          	bne	a0,s4,20401602 <_printf_i+0x25c>
2040153e:	557d                	li	a0,-1
20401540:	50b2                	lw	ra,44(sp)
20401542:	5422                	lw	s0,40(sp)
20401544:	5492                	lw	s1,36(sp)
20401546:	5902                	lw	s2,32(sp)
20401548:	49f2                	lw	s3,28(sp)
2040154a:	4a62                	lw	s4,24(sp)
2040154c:	4ad2                	lw	s5,20(sp)
2040154e:	4b42                	lw	s6,16(sp)
20401550:	6145                	addi	sp,sp,48
20401552:	8082                	ret
20401554:	04d582a3          	sb	a3,69(a1)
20401558:	00004697          	auipc	a3,0x4
2040155c:	ca068693          	addi	a3,a3,-864 # 204051f8 <__sf_fake_stdout+0x34>
20401560:	400c                	lw	a1,0(s0)
20401562:	4308                	lw	a0,0(a4)
20401564:	0805f813          	andi	a6,a1,128
20401568:	411c                	lw	a5,0(a0)
2040156a:	0511                	addi	a0,a0,4
2040156c:	02080063          	beqz	a6,2040158c <_printf_i+0x1e6>
20401570:	c308                	sw	a0,0(a4)
20401572:	0015f713          	andi	a4,a1,1
20401576:	c701                	beqz	a4,2040157e <_printf_i+0x1d8>
20401578:	0205e593          	ori	a1,a1,32
2040157c:	c00c                	sw	a1,0(s0)
2040157e:	4741                	li	a4,16
20401580:	fbb9                	bnez	a5,204014d6 <_printf_i+0x130>
20401582:	400c                	lw	a1,0(s0)
20401584:	fdf5f593          	andi	a1,a1,-33
20401588:	c00c                	sw	a1,0(s0)
2040158a:	b7b1                	j	204014d6 <_printf_i+0x130>
2040158c:	0405f813          	andi	a6,a1,64
20401590:	c308                	sw	a0,0(a4)
20401592:	fe0800e3          	beqz	a6,20401572 <_printf_i+0x1cc>
20401596:	07c2                	slli	a5,a5,0x10
20401598:	83c1                	srli	a5,a5,0x10
2040159a:	bfe1                	j	20401572 <_printf_i+0x1cc>
2040159c:	00004697          	auipc	a3,0x4
204015a0:	c5c68693          	addi	a3,a3,-932 # 204051f8 <__sf_fake_stdout+0x34>
204015a4:	4721                	li	a4,8
204015a6:	bf05                	j	204014d6 <_printf_i+0x130>
204015a8:	87ae                	mv	a5,a1
204015aa:	b799                	j	204014f0 <_printf_i+0x14a>
204015ac:	4194                	lw	a3,0(a1)
204015ae:	431c                	lw	a5,0(a4)
204015b0:	49cc                	lw	a1,20(a1)
204015b2:	0806f813          	andi	a6,a3,128
204015b6:	00478513          	addi	a0,a5,4
204015ba:	00080663          	beqz	a6,204015c6 <_printf_i+0x220>
204015be:	c308                	sw	a0,0(a4)
204015c0:	439c                	lw	a5,0(a5)
204015c2:	c38c                	sw	a1,0(a5)
204015c4:	a801                	j	204015d4 <_printf_i+0x22e>
204015c6:	c308                	sw	a0,0(a4)
204015c8:	0406f693          	andi	a3,a3,64
204015cc:	439c                	lw	a5,0(a5)
204015ce:	daf5                	beqz	a3,204015c2 <_printf_i+0x21c>
204015d0:	00b79023          	sh	a1,0(a5)
204015d4:	00042823          	sw	zero,16(s0)
204015d8:	8ab2                	mv	s5,a2
204015da:	bf89                	j	2040152c <_printf_i+0x186>
204015dc:	431c                	lw	a5,0(a4)
204015de:	41d0                	lw	a2,4(a1)
204015e0:	4581                	li	a1,0
204015e2:	00478693          	addi	a3,a5,4
204015e6:	c314                	sw	a3,0(a4)
204015e8:	0007aa83          	lw	s5,0(a5)
204015ec:	8556                	mv	a0,s5
204015ee:	3179                	jal	2040127c <memchr>
204015f0:	c501                	beqz	a0,204015f8 <_printf_i+0x252>
204015f2:	41550533          	sub	a0,a0,s5
204015f6:	c048                	sw	a0,4(s0)
204015f8:	405c                	lw	a5,4(s0)
204015fa:	c81c                	sw	a5,16(s0)
204015fc:	040401a3          	sb	zero,67(s0)
20401600:	b735                	j	2040152c <_printf_i+0x186>
20401602:	4814                	lw	a3,16(s0)
20401604:	8656                	mv	a2,s5
20401606:	85ca                	mv	a1,s2
20401608:	8526                	mv	a0,s1
2040160a:	9982                	jalr	s3
2040160c:	f34509e3          	beq	a0,s4,2040153e <_printf_i+0x198>
20401610:	401c                	lw	a5,0(s0)
20401612:	8b89                	andi	a5,a5,2
20401614:	e78d                	bnez	a5,2040163e <_printf_i+0x298>
20401616:	47b2                	lw	a5,12(sp)
20401618:	4448                	lw	a0,12(s0)
2040161a:	f2f553e3          	bge	a0,a5,20401540 <_printf_i+0x19a>
2040161e:	853e                	mv	a0,a5
20401620:	b705                	j	20401540 <_printf_i+0x19a>
20401622:	4685                	li	a3,1
20401624:	8656                	mv	a2,s5
20401626:	85ca                	mv	a1,s2
20401628:	8526                	mv	a0,s1
2040162a:	9982                	jalr	s3
2040162c:	f16509e3          	beq	a0,s6,2040153e <_printf_i+0x198>
20401630:	0a05                	addi	s4,s4,1
20401632:	445c                	lw	a5,12(s0)
20401634:	4732                	lw	a4,12(sp)
20401636:	8f99                	sub	a5,a5,a4
20401638:	fefa45e3          	blt	s4,a5,20401622 <_printf_i+0x27c>
2040163c:	bfe9                	j	20401616 <_printf_i+0x270>
2040163e:	4a01                	li	s4,0
20401640:	01940a93          	addi	s5,s0,25
20401644:	5b7d                	li	s6,-1
20401646:	b7f5                	j	20401632 <_printf_i+0x28c>

20401648 <_read_r>:
_read_r():
20401648:	1141                	addi	sp,sp,-16
2040164a:	c422                	sw	s0,8(sp)
2040164c:	842a                	mv	s0,a0
2040164e:	852e                	mv	a0,a1
20401650:	85b2                	mv	a1,a2
20401652:	8636                	mv	a2,a3
20401654:	5fc03797          	auipc	a5,0x5fc03
20401658:	0207ae23          	sw	zero,60(a5) # 80004690 <errno>
2040165c:	c606                	sw	ra,12(sp)
2040165e:	2845                	jal	2040170e <_read>
20401660:	57fd                	li	a5,-1
20401662:	00f51963          	bne	a0,a5,20401674 <_read_r+0x2c>
20401666:	5fc03797          	auipc	a5,0x5fc03
2040166a:	02a78793          	addi	a5,a5,42 # 80004690 <errno>
2040166e:	439c                	lw	a5,0(a5)
20401670:	c391                	beqz	a5,20401674 <_read_r+0x2c>
20401672:	c01c                	sw	a5,0(s0)
20401674:	40b2                	lw	ra,12(sp)
20401676:	4422                	lw	s0,8(sp)
20401678:	0141                	addi	sp,sp,16
2040167a:	8082                	ret

2040167c <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
2040167c:	1101                	addi	sp,sp,-32
2040167e:	ce06                	sw	ra,28(sp)
20401680:	cc22                	sw	s0,24(sp)
20401682:	1000                	addi	s0,sp,32
20401684:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401688:	225d                	jal	2040182e <__errno>
2040168a:	872a                	mv	a4,a0
2040168c:	05800793          	li	a5,88
20401690:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401692:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401694:	853e                	mv	a0,a5
20401696:	40f2                	lw	ra,28(sp)
20401698:	4462                	lw	s0,24(sp)
2040169a:	6105                	addi	sp,sp,32
2040169c:	8082                	ret

2040169e <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
2040169e:	1101                	addi	sp,sp,-32
204016a0:	ce06                	sw	ra,28(sp)
204016a2:	cc22                	sw	s0,24(sp)
204016a4:	1000                	addi	s0,sp,32
204016a6:	fea42623          	sw	a0,-20(s0)
204016aa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
204016ae:	2241                	jal	2040182e <__errno>
204016b0:	872a                	mv	a4,a0
204016b2:	fa800793          	li	a5,-88
204016b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
204016b8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
204016ba:	853e                	mv	a0,a5
204016bc:	40f2                	lw	ra,28(sp)
204016be:	4462                	lw	s0,24(sp)
204016c0:	6105                	addi	sp,sp,32
204016c2:	8082                	ret

204016c4 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
204016c4:	1101                	addi	sp,sp,-32
204016c6:	ce22                	sw	s0,28(sp)
204016c8:	1000                	addi	s0,sp,32
204016ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
204016ce:	fec42783          	lw	a5,-20(s0)
204016d2:	17fd                	addi	a5,a5,-1
204016d4:	0017b793          	seqz	a5,a5
204016d8:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
204016dc:	853e                	mv	a0,a5
204016de:	4472                	lw	s0,28(sp)
204016e0:	6105                	addi	sp,sp,32
204016e2:	8082                	ret

204016e4 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
204016e4:	1101                	addi	sp,sp,-32
204016e6:	ce06                	sw	ra,28(sp)
204016e8:	cc22                	sw	s0,24(sp)
204016ea:	1000                	addi	s0,sp,32
204016ec:	fea42623          	sw	a0,-20(s0)
204016f0:	feb42423          	sw	a1,-24(s0)
204016f4:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204016f8:	2a1d                	jal	2040182e <__errno>
204016fa:	872a                	mv	a4,a0
204016fc:	05800793          	li	a5,88
20401700:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401702:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401704:	853e                	mv	a0,a5
20401706:	40f2                	lw	ra,28(sp)
20401708:	4462                	lw	s0,24(sp)
2040170a:	6105                	addi	sp,sp,32
2040170c:	8082                	ret

2040170e <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
2040170e:	1101                	addi	sp,sp,-32
20401710:	ce06                	sw	ra,28(sp)
20401712:	cc22                	sw	s0,24(sp)
20401714:	1000                	addi	s0,sp,32
20401716:	fea42623          	sw	a0,-20(s0)
2040171a:	feb42423          	sw	a1,-24(s0)
2040171e:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401722:	2231                	jal	2040182e <__errno>
20401724:	872a                	mv	a4,a0
20401726:	05800793          	li	a5,88
2040172a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
2040172c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
2040172e:	853e                	mv	a0,a5
20401730:	40f2                	lw	ra,28(sp)
20401732:	4462                	lw	s0,24(sp)
20401734:	6105                	addi	sp,sp,32
20401736:	8082                	ret

20401738 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401738:	7179                	addi	sp,sp,-48
2040173a:	d622                	sw	s0,44(sp)
2040173c:	1800                	addi	s0,sp,48
2040173e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401742:	800007b7          	lui	a5,0x80000
20401746:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffb4bc>
2040174a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
2040174e:	800057b7          	lui	a5,0x80005
20401752:	a9478713          	addi	a4,a5,-1388 # 80004a94 <metal_segment_heap_target_end+0xfffff800>
20401756:	800057b7          	lui	a5,0x80005
2040175a:	29478793          	addi	a5,a5,660 # 80005294 <metal_segment_heap_target_end+0x0>
2040175e:	00f71463          	bne	a4,a5,20401766 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401762:	57fd                	li	a5,-1
20401764:	a0a9                	j	204017ae <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401766:	800007b7          	lui	a5,0x80000
2040176a:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffb4bc>
2040176e:	fdc42783          	lw	a5,-36(s0)
20401772:	973e                	add	a4,a4,a5
20401774:	800057b7          	lui	a5,0x80005
20401778:	29478793          	addi	a5,a5,660 # 80005294 <metal_segment_heap_target_end+0x0>
2040177c:	02f77063          	bgeu	a4,a5,2040179c <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401780:	800007b7          	lui	a5,0x80000
20401784:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffb4bc>
20401788:	fdc42783          	lw	a5,-36(s0)
2040178c:	973e                	add	a4,a4,a5
2040178e:	800007b7          	lui	a5,0x80000
20401792:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffb4bc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401796:	fec42783          	lw	a5,-20(s0)
2040179a:	a811                	j	204017ae <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040179c:	800007b7          	lui	a5,0x80000
204017a0:	80005737          	lui	a4,0x80005
204017a4:	29470713          	addi	a4,a4,660 # 80005294 <metal_segment_heap_target_end+0x0>
204017a8:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffb4bc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
204017ac:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
204017ae:	853e                	mv	a0,a5
204017b0:	5432                	lw	s0,44(sp)
204017b2:	6145                	addi	sp,sp,48
204017b4:	8082                	ret

204017b6 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
204017b6:	7179                	addi	sp,sp,-48
204017b8:	d606                	sw	ra,44(sp)
204017ba:	d422                	sw	s0,40(sp)
204017bc:	1800                	addi	s0,sp,48
204017be:	fca42e23          	sw	a0,-36(s0)
204017c2:	fcb42c23          	sw	a1,-40(s0)
204017c6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
204017ca:	fdc42703          	lw	a4,-36(s0)
204017ce:	4785                	li	a5,1
204017d0:	00f70963          	beq	a4,a5,204017e2 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
204017d4:	28a9                	jal	2040182e <__errno>
204017d6:	872a                	mv	a4,a0
204017d8:	05800793          	li	a5,88
204017dc:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204017de:	57fd                	li	a5,-1
204017e0:	a82d                	j	2040181a <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204017e2:	fd842783          	lw	a5,-40(s0)
204017e6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
204017ea:	fe042623          	sw	zero,-20(s0)
204017ee:	a839                	j	2040180c <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204017f0:	fe842703          	lw	a4,-24(s0)
204017f4:	fec42783          	lw	a5,-20(s0)
204017f8:	97ba                	add	a5,a5,a4
204017fa:	0007c783          	lbu	a5,0(a5)
204017fe:	853e                	mv	a0,a5
20401800:	2cb1                	jal	20401a5c <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401802:	fec42783          	lw	a5,-20(s0)
20401806:	0785                	addi	a5,a5,1
20401808:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
2040180c:	fec42703          	lw	a4,-20(s0)
20401810:	fd442783          	lw	a5,-44(s0)
20401814:	fcf76ee3          	bltu	a4,a5,204017f0 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401818:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
2040181a:	853e                	mv	a0,a5
2040181c:	50b2                	lw	ra,44(sp)
2040181e:	5422                	lw	s0,40(sp)
20401820:	6145                	addi	sp,sp,48
20401822:	8082                	ret

20401824 <atexit>:
atexit():
20401824:	85aa                	mv	a1,a0
20401826:	4681                	li	a3,0
20401828:	4601                	li	a2,0
2040182a:	4501                	li	a0,0
2040182c:	a8f1                	j	20401908 <__register_exitproc>

2040182e <__errno>:
__errno():
2040182e:	5fbff797          	auipc	a5,0x5fbff
20401832:	f1a78793          	addi	a5,a5,-230 # 80000748 <_impure_ptr>
20401836:	4388                	lw	a0,0(a5)
20401838:	8082                	ret

2040183a <exit>:
exit():
2040183a:	1141                	addi	sp,sp,-16
2040183c:	c422                	sw	s0,8(sp)
2040183e:	c606                	sw	ra,12(sp)
20401840:	00000797          	auipc	a5,0x0
20401844:	15478793          	addi	a5,a5,340 # 20401994 <__call_exitprocs>
20401848:	842a                	mv	s0,a0
2040184a:	c399                	beqz	a5,20401850 <exit+0x16>
2040184c:	4581                	li	a1,0
2040184e:	2299                	jal	20401994 <__call_exitprocs>
20401850:	5fbff797          	auipc	a5,0x5fbff
20401854:	efc78793          	addi	a5,a5,-260 # 8000074c <_global_impure_ptr>
20401858:	4388                	lw	a0,0(a5)
2040185a:	551c                	lw	a5,40(a0)
2040185c:	c391                	beqz	a5,20401860 <exit+0x26>
2040185e:	9782                	jalr	a5
20401860:	8522                	mv	a0,s0
20401862:	08d030ef          	jal	ra,204050ee <_exit>

20401866 <__libc_fini_array>:
__libc_fini_array():
20401866:	1141                	addi	sp,sp,-16
20401868:	00004797          	auipc	a5,0x4
2040186c:	d0c78793          	addi	a5,a5,-756 # 20405574 <__fini_array_end>
20401870:	c422                	sw	s0,8(sp)
20401872:	00004417          	auipc	s0,0x4
20401876:	d0240413          	addi	s0,s0,-766 # 20405574 <__fini_array_end>
2040187a:	8c1d                	sub	s0,s0,a5
2040187c:	c226                	sw	s1,4(sp)
2040187e:	c606                	sw	ra,12(sp)
20401880:	8409                	srai	s0,s0,0x2
20401882:	84be                	mv	s1,a5
20401884:	e411                	bnez	s0,20401890 <__libc_fini_array+0x2a>
20401886:	40b2                	lw	ra,12(sp)
20401888:	4422                	lw	s0,8(sp)
2040188a:	4492                	lw	s1,4(sp)
2040188c:	0141                	addi	sp,sp,16
2040188e:	8082                	ret
20401890:	147d                	addi	s0,s0,-1
20401892:	00241793          	slli	a5,s0,0x2
20401896:	97a6                	add	a5,a5,s1
20401898:	439c                	lw	a5,0(a5)
2040189a:	9782                	jalr	a5
2040189c:	b7e5                	j	20401884 <__libc_fini_array+0x1e>

2040189e <__libc_init_array>:
__libc_init_array():
2040189e:	1141                	addi	sp,sp,-16
204018a0:	00004797          	auipc	a5,0x4
204018a4:	cd078793          	addi	a5,a5,-816 # 20405570 <__init_array_start>
204018a8:	c422                	sw	s0,8(sp)
204018aa:	00004417          	auipc	s0,0x4
204018ae:	cc640413          	addi	s0,s0,-826 # 20405570 <__init_array_start>
204018b2:	8c1d                	sub	s0,s0,a5
204018b4:	c226                	sw	s1,4(sp)
204018b6:	c04a                	sw	s2,0(sp)
204018b8:	c606                	sw	ra,12(sp)
204018ba:	8409                	srai	s0,s0,0x2
204018bc:	4481                	li	s1,0
204018be:	893e                	mv	s2,a5
204018c0:	02849663          	bne	s1,s0,204018ec <__libc_init_array+0x4e>
204018c4:	00004797          	auipc	a5,0x4
204018c8:	cac78793          	addi	a5,a5,-852 # 20405570 <__init_array_start>
204018cc:	00004417          	auipc	s0,0x4
204018d0:	ca840413          	addi	s0,s0,-856 # 20405574 <__fini_array_end>
204018d4:	8c1d                	sub	s0,s0,a5
204018d6:	8409                	srai	s0,s0,0x2
204018d8:	4481                	li	s1,0
204018da:	893e                	mv	s2,a5
204018dc:	00849f63          	bne	s1,s0,204018fa <__libc_init_array+0x5c>
204018e0:	40b2                	lw	ra,12(sp)
204018e2:	4422                	lw	s0,8(sp)
204018e4:	4492                	lw	s1,4(sp)
204018e6:	4902                	lw	s2,0(sp)
204018e8:	0141                	addi	sp,sp,16
204018ea:	8082                	ret
204018ec:	00249793          	slli	a5,s1,0x2
204018f0:	97ca                	add	a5,a5,s2
204018f2:	439c                	lw	a5,0(a5)
204018f4:	0485                	addi	s1,s1,1
204018f6:	9782                	jalr	a5
204018f8:	b7e1                	j	204018c0 <__libc_init_array+0x22>
204018fa:	00249793          	slli	a5,s1,0x2
204018fe:	97ca                	add	a5,a5,s2
20401900:	439c                	lw	a5,0(a5)
20401902:	0485                	addi	s1,s1,1
20401904:	9782                	jalr	a5
20401906:	bfd9                	j	204018dc <__libc_init_array+0x3e>

20401908 <__register_exitproc>:
__register_exitproc():
20401908:	5fbff797          	auipc	a5,0x5fbff
2040190c:	e7078793          	addi	a5,a5,-400 # 80000778 <_global_atexit>
20401910:	439c                	lw	a5,0(a5)
20401912:	8e2a                	mv	t3,a0
20401914:	e78d                	bnez	a5,2040193e <__register_exitproc+0x36>
20401916:	5fc03717          	auipc	a4,0x5fc03
2040191a:	cee70713          	addi	a4,a4,-786 # 80004604 <_global_atexit0>
2040191e:	5fbff797          	auipc	a5,0x5fbff
20401922:	e4e7ad23          	sw	a4,-422(a5) # 80000778 <_global_atexit>
20401926:	dfbfe517          	auipc	a0,0xdfbfe
2040192a:	6da50513          	addi	a0,a0,1754 # 0 <__metal_boot_hart>
2040192e:	87ba                	mv	a5,a4
20401930:	c519                	beqz	a0,2040193e <__register_exitproc+0x36>
20401932:	411c                	lw	a5,0(a0)
20401934:	5fc03517          	auipc	a0,0x5fc03
20401938:	d4f52c23          	sw	a5,-680(a0) # 8000468c <_global_atexit0+0x88>
2040193c:	87ba                	mv	a5,a4
2040193e:	43d8                	lw	a4,4(a5)
20401940:	487d                	li	a6,31
20401942:	557d                	li	a0,-1
20401944:	04e84763          	blt	a6,a4,20401992 <__register_exitproc+0x8a>
20401948:	020e0e63          	beqz	t3,20401984 <__register_exitproc+0x7c>
2040194c:	0887a803          	lw	a6,136(a5)
20401950:	04080163          	beqz	a6,20401992 <__register_exitproc+0x8a>
20401954:	00271893          	slli	a7,a4,0x2
20401958:	98c2                	add	a7,a7,a6
2040195a:	00c8a023          	sw	a2,0(a7)
2040195e:	10082303          	lw	t1,256(a6)
20401962:	4605                	li	a2,1
20401964:	00e61633          	sll	a2,a2,a4
20401968:	00c36333          	or	t1,t1,a2
2040196c:	10682023          	sw	t1,256(a6)
20401970:	08d8a023          	sw	a3,128(a7)
20401974:	4689                	li	a3,2
20401976:	00de1763          	bne	t3,a3,20401984 <__register_exitproc+0x7c>
2040197a:	10482683          	lw	a3,260(a6)
2040197e:	8e55                	or	a2,a2,a3
20401980:	10c82223          	sw	a2,260(a6)
20401984:	00170693          	addi	a3,a4,1
20401988:	070a                	slli	a4,a4,0x2
2040198a:	c3d4                	sw	a3,4(a5)
2040198c:	97ba                	add	a5,a5,a4
2040198e:	c78c                	sw	a1,8(a5)
20401990:	4501                	li	a0,0
20401992:	8082                	ret

20401994 <__call_exitprocs>:
__call_exitprocs():
20401994:	7179                	addi	sp,sp,-48
20401996:	cc52                	sw	s4,24(sp)
20401998:	ca56                	sw	s5,20(sp)
2040199a:	c85a                	sw	s6,16(sp)
2040199c:	c65e                	sw	s7,12(sp)
2040199e:	d606                	sw	ra,44(sp)
204019a0:	d422                	sw	s0,40(sp)
204019a2:	d226                	sw	s1,36(sp)
204019a4:	d04a                	sw	s2,32(sp)
204019a6:	ce4e                	sw	s3,28(sp)
204019a8:	c462                	sw	s8,8(sp)
204019aa:	8b2a                	mv	s6,a0
204019ac:	8a2e                	mv	s4,a1
204019ae:	5fbffa97          	auipc	s5,0x5fbff
204019b2:	dcaa8a93          	addi	s5,s5,-566 # 80000778 <_global_atexit>
204019b6:	4b85                	li	s7,1
204019b8:	000aa403          	lw	s0,0(s5)
204019bc:	c811                	beqz	s0,204019d0 <__call_exitprocs+0x3c>
204019be:	4044                	lw	s1,4(s0)
204019c0:	08842983          	lw	s3,136(s0)
204019c4:	fff48913          	addi	s2,s1,-1
204019c8:	048a                	slli	s1,s1,0x2
204019ca:	94a2                	add	s1,s1,s0
204019cc:	00095e63          	bgez	s2,204019e8 <__call_exitprocs+0x54>
204019d0:	50b2                	lw	ra,44(sp)
204019d2:	5422                	lw	s0,40(sp)
204019d4:	5492                	lw	s1,36(sp)
204019d6:	5902                	lw	s2,32(sp)
204019d8:	49f2                	lw	s3,28(sp)
204019da:	4a62                	lw	s4,24(sp)
204019dc:	4ad2                	lw	s5,20(sp)
204019de:	4b42                	lw	s6,16(sp)
204019e0:	4bb2                	lw	s7,12(sp)
204019e2:	4c22                	lw	s8,8(sp)
204019e4:	6145                	addi	sp,sp,48
204019e6:	8082                	ret
204019e8:	000a0e63          	beqz	s4,20401a04 <__call_exitprocs+0x70>
204019ec:	00099563          	bnez	s3,204019f6 <__call_exitprocs+0x62>
204019f0:	197d                	addi	s2,s2,-1
204019f2:	14f1                	addi	s1,s1,-4
204019f4:	bfe1                	j	204019cc <__call_exitprocs+0x38>
204019f6:	00291793          	slli	a5,s2,0x2
204019fa:	97ce                	add	a5,a5,s3
204019fc:	0807a783          	lw	a5,128(a5)
20401a00:	ff4798e3          	bne	a5,s4,204019f0 <__call_exitprocs+0x5c>
20401a04:	4058                	lw	a4,4(s0)
20401a06:	40dc                	lw	a5,4(s1)
20401a08:	177d                	addi	a4,a4,-1
20401a0a:	03271863          	bne	a4,s2,20401a3a <__call_exitprocs+0xa6>
20401a0e:	01242223          	sw	s2,4(s0)
20401a12:	dff9                	beqz	a5,204019f0 <__call_exitprocs+0x5c>
20401a14:	00442c03          	lw	s8,4(s0)
20401a18:	00098863          	beqz	s3,20401a28 <__call_exitprocs+0x94>
20401a1c:	1009a683          	lw	a3,256(s3)
20401a20:	012b9733          	sll	a4,s7,s2
20401a24:	8ef9                	and	a3,a3,a4
20401a26:	ee89                	bnez	a3,20401a40 <__call_exitprocs+0xac>
20401a28:	9782                	jalr	a5
20401a2a:	4058                	lw	a4,4(s0)
20401a2c:	000aa783          	lw	a5,0(s5)
20401a30:	f98714e3          	bne	a4,s8,204019b8 <__call_exitprocs+0x24>
20401a34:	faf40ee3          	beq	s0,a5,204019f0 <__call_exitprocs+0x5c>
20401a38:	b741                	j	204019b8 <__call_exitprocs+0x24>
20401a3a:	0004a223          	sw	zero,4(s1)
20401a3e:	bfd1                	j	20401a12 <__call_exitprocs+0x7e>
20401a40:	00291693          	slli	a3,s2,0x2
20401a44:	96ce                	add	a3,a3,s3
20401a46:	428c                	lw	a1,0(a3)
20401a48:	1049a683          	lw	a3,260(s3)
20401a4c:	8f75                	and	a4,a4,a3
20401a4e:	e701                	bnez	a4,20401a56 <__call_exitprocs+0xc2>
20401a50:	855a                	mv	a0,s6
20401a52:	9782                	jalr	a5
20401a54:	bfd9                	j	20401a2a <__call_exitprocs+0x96>
20401a56:	852e                	mv	a0,a1
20401a58:	9782                	jalr	a5
20401a5a:	bfc1                	j	20401a2a <__call_exitprocs+0x96>

20401a5c <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401a5c:	1101                	addi	sp,sp,-32
20401a5e:	ce06                	sw	ra,28(sp)
20401a60:	cc22                	sw	s0,24(sp)
20401a62:	1000                	addi	s0,sp,32
20401a64:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401a68:	fec42703          	lw	a4,-20(s0)
20401a6c:	47a9                	li	a5,10
20401a6e:	00f71463          	bne	a4,a5,20401a76 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401a72:	4535                	li	a0,13
20401a74:	2811                	jal	20401a88 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401a76:	fec42503          	lw	a0,-20(s0)
20401a7a:	2039                	jal	20401a88 <metal_tty_putc_raw>
20401a7c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401a7e:	853e                	mv	a0,a5
20401a80:	40f2                	lw	ra,28(sp)
20401a82:	4462                	lw	s0,24(sp)
20401a84:	6105                	addi	sp,sp,32
20401a86:	8082                	ret

20401a88 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401a88:	1101                	addi	sp,sp,-32
20401a8a:	ce06                	sw	ra,28(sp)
20401a8c:	cc22                	sw	s0,24(sp)
20401a8e:	1000                	addi	s0,sp,32
20401a90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401a94:	fec42583          	lw	a1,-20(s0)
20401a98:	800007b7          	lui	a5,0x80000
20401a9c:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20401aa0:	28b1                	jal	20401afc <metal_uart_putc>
20401aa2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401aa4:	853e                	mv	a0,a5
20401aa6:	40f2                	lw	ra,28(sp)
20401aa8:	4462                	lw	s0,24(sp)
20401aaa:	6105                	addi	sp,sp,32
20401aac:	8082                	ret

20401aae <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401aae:	1141                	addi	sp,sp,-16
20401ab0:	c606                	sw	ra,12(sp)
20401ab2:	c422                	sw	s0,8(sp)
20401ab4:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401ab6:	67f1                	lui	a5,0x1c
20401ab8:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401abc:	800007b7          	lui	a5,0x80000
20401ac0:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20401ac4:	2031                	jal	20401ad0 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401ac6:	0001                	nop
20401ac8:	40b2                	lw	ra,12(sp)
20401aca:	4422                	lw	s0,8(sp)
20401acc:	0141                	addi	sp,sp,16
20401ace:	8082                	ret

20401ad0 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401ad0:	1101                	addi	sp,sp,-32
20401ad2:	ce06                	sw	ra,28(sp)
20401ad4:	cc22                	sw	s0,24(sp)
20401ad6:	1000                	addi	s0,sp,32
20401ad8:	fea42623          	sw	a0,-20(s0)
20401adc:	feb42423          	sw	a1,-24(s0)
20401ae0:	fec42783          	lw	a5,-20(s0)
20401ae4:	439c                	lw	a5,0(a5)
20401ae6:	439c                	lw	a5,0(a5)
20401ae8:	fe842583          	lw	a1,-24(s0)
20401aec:	fec42503          	lw	a0,-20(s0)
20401af0:	9782                	jalr	a5
20401af2:	0001                	nop
20401af4:	40f2                	lw	ra,28(sp)
20401af6:	4462                	lw	s0,24(sp)
20401af8:	6105                	addi	sp,sp,32
20401afa:	8082                	ret

20401afc <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401afc:	1101                	addi	sp,sp,-32
20401afe:	ce06                	sw	ra,28(sp)
20401b00:	cc22                	sw	s0,24(sp)
20401b02:	1000                	addi	s0,sp,32
20401b04:	fea42623          	sw	a0,-20(s0)
20401b08:	feb42423          	sw	a1,-24(s0)
20401b0c:	fec42783          	lw	a5,-20(s0)
20401b10:	439c                	lw	a5,0(a5)
20401b12:	43dc                	lw	a5,4(a5)
20401b14:	fe842583          	lw	a1,-24(s0)
20401b18:	fec42503          	lw	a0,-20(s0)
20401b1c:	9782                	jalr	a5
20401b1e:	87aa                	mv	a5,a0
20401b20:	853e                	mv	a0,a5
20401b22:	40f2                	lw	ra,28(sp)
20401b24:	4462                	lw	s0,24(sp)
20401b26:	6105                	addi	sp,sp,32
20401b28:	8082                	ret

20401b2a <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401b2a:	1101                	addi	sp,sp,-32
20401b2c:	ce06                	sw	ra,28(sp)
20401b2e:	cc22                	sw	s0,24(sp)
20401b30:	1000                	addi	s0,sp,32
20401b32:	fea42623          	sw	a0,-20(s0)
20401b36:	feb42423          	sw	a1,-24(s0)
20401b3a:	fec42783          	lw	a5,-20(s0)
20401b3e:	439c                	lw	a5,0(a5)
20401b40:	4bdc                	lw	a5,20(a5)
20401b42:	fe842583          	lw	a1,-24(s0)
20401b46:	fec42503          	lw	a0,-20(s0)
20401b4a:	9782                	jalr	a5
20401b4c:	87aa                	mv	a5,a0
20401b4e:	853e                	mv	a0,a5
20401b50:	40f2                	lw	ra,28(sp)
20401b52:	4462                	lw	s0,24(sp)
20401b54:	6105                	addi	sp,sp,32
20401b56:	8082                	ret

20401b58 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401b58:	1101                	addi	sp,sp,-32
20401b5a:	ce22                	sw	s0,28(sp)
20401b5c:	1000                	addi	s0,sp,32
20401b5e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401b62:	fec42703          	lw	a4,-20(s0)
20401b66:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401b6a:	00f71563          	bne	a4,a5,20401b74 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401b6e:	020007b7          	lui	a5,0x2000
20401b72:	a011                	j	20401b76 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401b74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401b76:	853e                	mv	a0,a5
20401b78:	4472                	lw	s0,28(sp)
20401b7a:	6105                	addi	sp,sp,32
20401b7c:	8082                	ret

20401b7e <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401b7e:	1101                	addi	sp,sp,-32
20401b80:	ce22                	sw	s0,28(sp)
20401b82:	1000                	addi	s0,sp,32
20401b84:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401b88:	fec42703          	lw	a4,-20(s0)
20401b8c:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401b90:	00f71463          	bne	a4,a5,20401b98 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401b94:	4789                	li	a5,2
20401b96:	a011                	j	20401b9a <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401b98:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401b9a:	853e                	mv	a0,a5
20401b9c:	4472                	lw	s0,28(sp)
20401b9e:	6105                	addi	sp,sp,32
20401ba0:	8082                	ret

20401ba2 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401ba2:	1101                	addi	sp,sp,-32
20401ba4:	ce22                	sw	s0,28(sp)
20401ba6:	1000                	addi	s0,sp,32
20401ba8:	fea42623          	sw	a0,-20(s0)
20401bac:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401bb0:	fe842783          	lw	a5,-24(s0)
20401bb4:	e791                	bnez	a5,20401bc0 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401bb6:	800007b7          	lui	a5,0x80000
20401bba:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffaddc>
20401bbe:	a821                	j	20401bd6 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401bc0:	fe842703          	lw	a4,-24(s0)
20401bc4:	4785                	li	a5,1
20401bc6:	00f71763          	bne	a4,a5,20401bd4 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401bca:	800007b7          	lui	a5,0x80000
20401bce:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffaddc>
20401bd2:	a011                	j	20401bd6 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401bd4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20401bd6:	853e                	mv	a0,a5
20401bd8:	4472                	lw	s0,28(sp)
20401bda:	6105                	addi	sp,sp,32
20401bdc:	8082                	ret

20401bde <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401bde:	1101                	addi	sp,sp,-32
20401be0:	ce22                	sw	s0,28(sp)
20401be2:	1000                	addi	s0,sp,32
20401be4:	fea42623          	sw	a0,-20(s0)
20401be8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401bec:	fe842783          	lw	a5,-24(s0)
20401bf0:	e399                	bnez	a5,20401bf6 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20401bf2:	478d                	li	a5,3
20401bf4:	a809                	j	20401c06 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401bf6:	fe842703          	lw	a4,-24(s0)
20401bfa:	4785                	li	a5,1
20401bfc:	00f71463          	bne	a4,a5,20401c04 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20401c00:	479d                	li	a5,7
20401c02:	a011                	j	20401c06 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401c04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20401c06:	853e                	mv	a0,a5
20401c08:	4472                	lw	s0,28(sp)
20401c0a:	6105                	addi	sp,sp,32
20401c0c:	8082                	ret

20401c0e <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401c0e:	715d                	addi	sp,sp,-80
20401c10:	c686                	sw	ra,76(sp)
20401c12:	c4a2                	sw	s0,72(sp)
20401c14:	c2ca                	sw	s2,68(sp)
20401c16:	c0ce                	sw	s3,64(sp)
20401c18:	de52                	sw	s4,60(sp)
20401c1a:	dc56                	sw	s5,56(sp)
20401c1c:	da5a                	sw	s6,52(sp)
20401c1e:	d85e                	sw	s7,48(sp)
20401c20:	d662                	sw	s8,44(sp)
20401c22:	d466                	sw	s9,40(sp)
20401c24:	0880                	addi	s0,sp,80
20401c26:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401c2a:	fbc42783          	lw	a5,-68(s0)
20401c2e:	853e                	mv	a0,a5
20401c30:	3725                	jal	20401b58 <__metal_driver_sifive_clint0_control_base>
20401c32:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401c36:	fcc42703          	lw	a4,-52(s0)
20401c3a:	67b1                	lui	a5,0xc
20401c3c:	17f1                	addi	a5,a5,-4
20401c3e:	97ba                	add	a5,a5,a4
20401c40:	439c                	lw	a5,0(a5)
20401c42:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401c46:	fcc42703          	lw	a4,-52(s0)
20401c4a:	67b1                	lui	a5,0xc
20401c4c:	17e1                	addi	a5,a5,-8
20401c4e:	97ba                	add	a5,a5,a4
20401c50:	439c                	lw	a5,0(a5)
20401c52:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401c56:	fcc42703          	lw	a4,-52(s0)
20401c5a:	67b1                	lui	a5,0xc
20401c5c:	17f1                	addi	a5,a5,-4
20401c5e:	97ba                	add	a5,a5,a4
20401c60:	439c                	lw	a5,0(a5)
20401c62:	fc842703          	lw	a4,-56(s0)
20401c66:	fcf718e3          	bne	a4,a5,20401c36 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401c6a:	fc842783          	lw	a5,-56(s0)
20401c6e:	8c3e                	mv	s8,a5
20401c70:	4c81                	li	s9,0
20401c72:	000c1993          	slli	s3,s8,0x0
20401c76:	4901                	li	s2,0
20401c78:	fc442783          	lw	a5,-60(s0)
20401c7c:	8a3e                	mv	s4,a5
20401c7e:	4a81                	li	s5,0
20401c80:	01496b33          	or	s6,s2,s4
20401c84:	0159ebb3          	or	s7,s3,s5
20401c88:	87da                	mv	a5,s6
20401c8a:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401c8c:	853e                	mv	a0,a5
20401c8e:	85c2                	mv	a1,a6
20401c90:	40b6                	lw	ra,76(sp)
20401c92:	4426                	lw	s0,72(sp)
20401c94:	4916                	lw	s2,68(sp)
20401c96:	4986                	lw	s3,64(sp)
20401c98:	5a72                	lw	s4,60(sp)
20401c9a:	5ae2                	lw	s5,56(sp)
20401c9c:	5b52                	lw	s6,52(sp)
20401c9e:	5bc2                	lw	s7,48(sp)
20401ca0:	5c32                	lw	s8,44(sp)
20401ca2:	5ca2                	lw	s9,40(sp)
20401ca4:	6161                	addi	sp,sp,80
20401ca6:	8082                	ret

20401ca8 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401ca8:	7179                	addi	sp,sp,-48
20401caa:	d606                	sw	ra,44(sp)
20401cac:	d422                	sw	s0,40(sp)
20401cae:	d24a                	sw	s2,36(sp)
20401cb0:	d04e                	sw	s3,32(sp)
20401cb2:	1800                	addi	s0,sp,48
20401cb4:	fca42e23          	sw	a0,-36(s0)
20401cb8:	fcb42c23          	sw	a1,-40(s0)
20401cbc:	fcc42823          	sw	a2,-48(s0)
20401cc0:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401cc4:	fdc42783          	lw	a5,-36(s0)
20401cc8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401ccc:	fec42783          	lw	a5,-20(s0)
20401cd0:	853e                	mv	a0,a5
20401cd2:	3559                	jal	20401b58 <__metal_driver_sifive_clint0_control_base>
20401cd4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401cd8:	fd842783          	lw	a5,-40(s0)
20401cdc:	078e                	slli	a5,a5,0x3
20401cde:	873e                	mv	a4,a5
20401ce0:	fe842783          	lw	a5,-24(s0)
20401ce4:	973e                	add	a4,a4,a5
20401ce6:	6791                	lui	a5,0x4
20401ce8:	0791                	addi	a5,a5,4
20401cea:	97ba                	add	a5,a5,a4
20401cec:	873e                	mv	a4,a5
20401cee:	57fd                	li	a5,-1
20401cf0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401cf2:	fd842783          	lw	a5,-40(s0)
20401cf6:	078e                	slli	a5,a5,0x3
20401cf8:	873e                	mv	a4,a5
20401cfa:	fe842783          	lw	a5,-24(s0)
20401cfe:	973e                	add	a4,a4,a5
20401d00:	6791                	lui	a5,0x4
20401d02:	97ba                	add	a5,a5,a4
20401d04:	873e                	mv	a4,a5
20401d06:	fd042783          	lw	a5,-48(s0)
20401d0a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401d0c:	fd442783          	lw	a5,-44(s0)
20401d10:	0007d913          	srli	s2,a5,0x0
20401d14:	4981                	li	s3,0
20401d16:	fd842783          	lw	a5,-40(s0)
20401d1a:	078e                	slli	a5,a5,0x3
20401d1c:	873e                	mv	a4,a5
20401d1e:	fe842783          	lw	a5,-24(s0)
20401d22:	973e                	add	a4,a4,a5
20401d24:	6791                	lui	a5,0x4
20401d26:	0791                	addi	a5,a5,4
20401d28:	97ba                	add	a5,a5,a4
20401d2a:	874a                	mv	a4,s2
20401d2c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401d2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401d30:	853e                	mv	a0,a5
20401d32:	50b2                	lw	ra,44(sp)
20401d34:	5422                	lw	s0,40(sp)
20401d36:	5912                	lw	s2,36(sp)
20401d38:	5982                	lw	s3,32(sp)
20401d3a:	6145                	addi	sp,sp,48
20401d3c:	8082                	ret

20401d3e <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401d3e:	1101                	addi	sp,sp,-32
20401d40:	ce06                	sw	ra,28(sp)
20401d42:	cc22                	sw	s0,24(sp)
20401d44:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401d46:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401d4a:	f14027f3          	csrr	a5,mhartid
20401d4e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401d52:	fec42783          	lw	a5,-20(s0)
20401d56:	853e                	mv	a0,a5
20401d58:	1ec030ef          	jal	ra,20404f44 <metal_cpu_get>
20401d5c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401d60:	fe842503          	lw	a0,-24(s0)
20401d64:	1ba030ef          	jal	ra,20404f1e <metal_cpu_interrupt_controller>
20401d68:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401d6a:	853e                	mv	a0,a5
20401d6c:	40f2                	lw	ra,28(sp)
20401d6e:	4462                	lw	s0,24(sp)
20401d70:	6105                	addi	sp,sp,32
20401d72:	8082                	ret

20401d74 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401d74:	7139                	addi	sp,sp,-64
20401d76:	de06                	sw	ra,60(sp)
20401d78:	dc22                	sw	s0,56(sp)
20401d7a:	0080                	addi	s0,sp,64
20401d7c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401d80:	fcc42503          	lw	a0,-52(s0)
20401d84:	3bed                	jal	20401b7e <__metal_driver_sifive_clint0_num_interrupts>
20401d86:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401d8a:	fcc42783          	lw	a5,-52(s0)
20401d8e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401d92:	fe442783          	lw	a5,-28(s0)
20401d96:	43dc                	lw	a5,4(a5)
20401d98:	efa9                	bnez	a5,20401df2 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401d9a:	fe042623          	sw	zero,-20(s0)
20401d9e:	a081                	j	20401dde <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401da0:	fec42583          	lw	a1,-20(s0)
20401da4:	fcc42503          	lw	a0,-52(s0)
20401da8:	3bed                	jal	20401ba2 <__metal_driver_sifive_clint0_interrupt_parents>
20401daa:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401dae:	fec42583          	lw	a1,-20(s0)
20401db2:	fcc42503          	lw	a0,-52(s0)
20401db6:	3525                	jal	20401bde <__metal_driver_sifive_clint0_interrupt_lines>
20401db8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401dbc:	fe042783          	lw	a5,-32(s0)
20401dc0:	439c                	lw	a5,0(a5)
20401dc2:	4fdc                	lw	a5,28(a5)
20401dc4:	fcc42683          	lw	a3,-52(s0)
20401dc8:	4601                	li	a2,0
20401dca:	fdc42583          	lw	a1,-36(s0)
20401dce:	fe042503          	lw	a0,-32(s0)
20401dd2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401dd4:	fec42783          	lw	a5,-20(s0)
20401dd8:	0785                	addi	a5,a5,1
20401dda:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401dde:	fec42703          	lw	a4,-20(s0)
20401de2:	fe842783          	lw	a5,-24(s0)
20401de6:	faf74de3          	blt	a4,a5,20401da0 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401dea:	fe442783          	lw	a5,-28(s0)
20401dee:	4705                	li	a4,1
20401df0:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401df2:	0001                	nop
20401df4:	50f2                	lw	ra,60(sp)
20401df6:	5462                	lw	s0,56(sp)
20401df8:	6121                	addi	sp,sp,64
20401dfa:	8082                	ret

20401dfc <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401dfc:	7139                	addi	sp,sp,-64
20401dfe:	de06                	sw	ra,60(sp)
20401e00:	dc22                	sw	s0,56(sp)
20401e02:	0080                	addi	s0,sp,64
20401e04:	fca42623          	sw	a0,-52(s0)
20401e08:	fcb42423          	sw	a1,-56(s0)
20401e0c:	fcc42223          	sw	a2,-60(s0)
20401e10:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401e14:	57fd                	li	a5,-1
20401e16:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401e1a:	37a010ef          	jal	ra,20403194 <__metal_controller_interrupt_vector_mode>
20401e1e:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401e22:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401e26:	3f21                	jal	20401d3e <_get_cpu_intc>
20401e28:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401e2c:	fcc42503          	lw	a0,-52(s0)
20401e30:	33b9                	jal	20401b7e <__metal_driver_sifive_clint0_num_interrupts>
20401e32:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401e36:	fe042703          	lw	a4,-32(s0)
20401e3a:	4785                	li	a5,1
20401e3c:	00f70863          	beq	a4,a5,20401e4c <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401e40:	fe042783          	lw	a5,-32(s0)
20401e44:	c781                	beqz	a5,20401e4c <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401e46:	fec42783          	lw	a5,-20(s0)
20401e4a:	a049                	j	20401ecc <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401e4c:	fe042223          	sw	zero,-28(s0)
20401e50:	a091                	j	20401e94 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401e52:	fe442583          	lw	a1,-28(s0)
20401e56:	fcc42503          	lw	a0,-52(s0)
20401e5a:	3351                	jal	20401bde <__metal_driver_sifive_clint0_interrupt_lines>
20401e5c:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401e60:	fe442583          	lw	a1,-28(s0)
20401e64:	fcc42503          	lw	a0,-52(s0)
20401e68:	3b2d                	jal	20401ba2 <__metal_driver_sifive_clint0_interrupt_parents>
20401e6a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401e6e:	fdc42703          	lw	a4,-36(s0)
20401e72:	fe842783          	lw	a5,-24(s0)
20401e76:	00f71863          	bne	a4,a5,20401e86 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401e7a:	fc842703          	lw	a4,-56(s0)
20401e7e:	fd442783          	lw	a5,-44(s0)
20401e82:	02f70063          	beq	a4,a5,20401ea2 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401e86:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20401e8a:	fe442783          	lw	a5,-28(s0)
20401e8e:	0785                	addi	a5,a5,1
20401e90:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401e94:	fe442703          	lw	a4,-28(s0)
20401e98:	fd842783          	lw	a5,-40(s0)
20401e9c:	faf74be3          	blt	a4,a5,20401e52 <__metal_driver_riscv_clint0_register+0x56>
20401ea0:	a011                	j	20401ea4 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20401ea2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401ea4:	fe842783          	lw	a5,-24(s0)
20401ea8:	c385                	beqz	a5,20401ec8 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401eaa:	fe842783          	lw	a5,-24(s0)
20401eae:	439c                	lw	a5,0(a5)
20401eb0:	4fdc                	lw	a5,28(a5)
20401eb2:	fc042683          	lw	a3,-64(s0)
20401eb6:	fc442603          	lw	a2,-60(s0)
20401eba:	fc842583          	lw	a1,-56(s0)
20401ebe:	fe842503          	lw	a0,-24(s0)
20401ec2:	9782                	jalr	a5
20401ec4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401ec8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401ecc:	853e                	mv	a0,a5
20401ece:	50f2                	lw	ra,60(sp)
20401ed0:	5462                	lw	s0,56(sp)
20401ed2:	6121                	addi	sp,sp,64
20401ed4:	8082                	ret

20401ed6 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401ed6:	7179                	addi	sp,sp,-48
20401ed8:	d622                	sw	s0,44(sp)
20401eda:	1800                	addi	s0,sp,48
20401edc:	fca42e23          	sw	a0,-36(s0)
20401ee0:	fcb42c23          	sw	a1,-40(s0)
20401ee4:	fcc42a23          	sw	a2,-44(s0)
20401ee8:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401eec:	57fd                	li	a5,-1
20401eee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20401ef2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20401ef6:	853e                	mv	a0,a5
20401ef8:	5432                	lw	s0,44(sp)
20401efa:	6145                	addi	sp,sp,48
20401efc:	8082                	ret

20401efe <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20401efe:	1101                	addi	sp,sp,-32
20401f00:	ce06                	sw	ra,28(sp)
20401f02:	cc22                	sw	s0,24(sp)
20401f04:	1000                	addi	s0,sp,32
20401f06:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20401f0a:	28a010ef          	jal	ra,20403194 <__metal_controller_interrupt_vector_mode>
20401f0e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20401f10:	853e                	mv	a0,a5
20401f12:	40f2                	lw	ra,28(sp)
20401f14:	4462                	lw	s0,24(sp)
20401f16:	6105                	addi	sp,sp,32
20401f18:	8082                	ret

20401f1a <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20401f1a:	7179                	addi	sp,sp,-48
20401f1c:	d606                	sw	ra,44(sp)
20401f1e:	d422                	sw	s0,40(sp)
20401f20:	1800                	addi	s0,sp,48
20401f22:	fca42e23          	sw	a0,-36(s0)
20401f26:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20401f2a:	57fd                	li	a5,-1
20401f2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20401f30:	3539                	jal	20401d3e <_get_cpu_intc>
20401f32:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20401f36:	fe842783          	lw	a5,-24(s0)
20401f3a:	c395                	beqz	a5,20401f5e <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20401f3c:	fd842703          	lw	a4,-40(s0)
20401f40:	4785                	li	a5,1
20401f42:	00e7ef63          	bltu	a5,a4,20401f60 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20401f46:	fe842783          	lw	a5,-24(s0)
20401f4a:	439c                	lw	a5,0(a5)
20401f4c:	43dc                	lw	a5,4(a5)
20401f4e:	fd842583          	lw	a1,-40(s0)
20401f52:	fe842503          	lw	a0,-24(s0)
20401f56:	9782                	jalr	a5
20401f58:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20401f5c:	a011                	j	20401f60 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20401f5e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20401f60:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20401f64:	853e                	mv	a0,a5
20401f66:	50b2                	lw	ra,44(sp)
20401f68:	5422                	lw	s0,40(sp)
20401f6a:	6145                	addi	sp,sp,48
20401f6c:	8082                	ret

20401f6e <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20401f6e:	7139                	addi	sp,sp,-64
20401f70:	de06                	sw	ra,60(sp)
20401f72:	dc22                	sw	s0,56(sp)
20401f74:	0080                	addi	s0,sp,64
20401f76:	fca42623          	sw	a0,-52(s0)
20401f7a:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20401f7e:	57fd                	li	a5,-1
20401f80:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20401f84:	fc842783          	lw	a5,-56(s0)
20401f88:	c7c9                	beqz	a5,20402012 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20401f8a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401f8e:	3b45                	jal	20401d3e <_get_cpu_intc>
20401f90:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401f94:	fcc42503          	lw	a0,-52(s0)
20401f98:	36dd                	jal	20401b7e <__metal_driver_sifive_clint0_num_interrupts>
20401f9a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20401f9e:	fe042223          	sw	zero,-28(s0)
20401fa2:	a091                	j	20401fe6 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401fa4:	fe442583          	lw	a1,-28(s0)
20401fa8:	fcc42503          	lw	a0,-52(s0)
20401fac:	390d                	jal	20401bde <__metal_driver_sifive_clint0_interrupt_lines>
20401fae:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401fb2:	fe442583          	lw	a1,-28(s0)
20401fb6:	fcc42503          	lw	a0,-52(s0)
20401fba:	36e5                	jal	20401ba2 <__metal_driver_sifive_clint0_interrupt_parents>
20401fbc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20401fc0:	fe042703          	lw	a4,-32(s0)
20401fc4:	fe842783          	lw	a5,-24(s0)
20401fc8:	00f71863          	bne	a4,a5,20401fd8 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20401fcc:	fc842703          	lw	a4,-56(s0)
20401fd0:	fd842783          	lw	a5,-40(s0)
20401fd4:	02f70063          	beq	a4,a5,20401ff4 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20401fd8:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20401fdc:	fe442783          	lw	a5,-28(s0)
20401fe0:	0785                	addi	a5,a5,1
20401fe2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20401fe6:	fe442703          	lw	a4,-28(s0)
20401fea:	fdc42783          	lw	a5,-36(s0)
20401fee:	faf74be3          	blt	a4,a5,20401fa4 <__metal_driver_riscv_clint0_enable+0x36>
20401ff2:	a011                	j	20401ff6 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20401ff4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20401ff6:	fe842783          	lw	a5,-24(s0)
20401ffa:	cf81                	beqz	a5,20402012 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20401ffc:	fe842783          	lw	a5,-24(s0)
20402000:	439c                	lw	a5,0(a5)
20402002:	53dc                	lw	a5,36(a5)
20402004:	fc842583          	lw	a1,-56(s0)
20402008:	fe842503          	lw	a0,-24(s0)
2040200c:	9782                	jalr	a5
2040200e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402012:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402016:	853e                	mv	a0,a5
20402018:	50f2                	lw	ra,60(sp)
2040201a:	5462                	lw	s0,56(sp)
2040201c:	6121                	addi	sp,sp,64
2040201e:	8082                	ret

20402020 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402020:	7139                	addi	sp,sp,-64
20402022:	de06                	sw	ra,60(sp)
20402024:	dc22                	sw	s0,56(sp)
20402026:	0080                	addi	s0,sp,64
20402028:	fca42623          	sw	a0,-52(s0)
2040202c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402030:	57fd                	li	a5,-1
20402032:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402036:	fc842783          	lw	a5,-56(s0)
2040203a:	c7c9                	beqz	a5,204020c4 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
2040203c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402040:	39fd                	jal	20401d3e <_get_cpu_intc>
20402042:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402046:	fcc42503          	lw	a0,-52(s0)
2040204a:	3e15                	jal	20401b7e <__metal_driver_sifive_clint0_num_interrupts>
2040204c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402050:	fe042223          	sw	zero,-28(s0)
20402054:	a091                	j	20402098 <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402056:	fe442583          	lw	a1,-28(s0)
2040205a:	fcc42503          	lw	a0,-52(s0)
2040205e:	3641                	jal	20401bde <__metal_driver_sifive_clint0_interrupt_lines>
20402060:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402064:	fe442583          	lw	a1,-28(s0)
20402068:	fcc42503          	lw	a0,-52(s0)
2040206c:	3e1d                	jal	20401ba2 <__metal_driver_sifive_clint0_interrupt_parents>
2040206e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402072:	fe042703          	lw	a4,-32(s0)
20402076:	fe842783          	lw	a5,-24(s0)
2040207a:	00f71863          	bne	a4,a5,2040208a <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
2040207e:	fc842703          	lw	a4,-56(s0)
20402082:	fd842783          	lw	a5,-40(s0)
20402086:	02f70063          	beq	a4,a5,204020a6 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
2040208a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040208e:	fe442783          	lw	a5,-28(s0)
20402092:	0785                	addi	a5,a5,1
20402094:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402098:	fe442703          	lw	a4,-28(s0)
2040209c:	fdc42783          	lw	a5,-36(s0)
204020a0:	faf74be3          	blt	a4,a5,20402056 <__metal_driver_riscv_clint0_disable+0x36>
204020a4:	a011                	j	204020a8 <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
204020a6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
204020a8:	fe842783          	lw	a5,-24(s0)
204020ac:	cf81                	beqz	a5,204020c4 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
204020ae:	fe842783          	lw	a5,-24(s0)
204020b2:	439c                	lw	a5,0(a5)
204020b4:	579c                	lw	a5,40(a5)
204020b6:	fc842583          	lw	a1,-56(s0)
204020ba:	fe842503          	lw	a0,-24(s0)
204020be:	9782                	jalr	a5
204020c0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
204020c4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
204020c8:	853e                	mv	a0,a5
204020ca:	50f2                	lw	ra,60(sp)
204020cc:	5462                	lw	s0,56(sp)
204020ce:	6121                	addi	sp,sp,64
204020d0:	8082                	ret

204020d2 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204020d2:	7179                	addi	sp,sp,-48
204020d4:	d606                	sw	ra,44(sp)
204020d6:	d422                	sw	s0,40(sp)
204020d8:	1800                	addi	s0,sp,48
204020da:	fca42e23          	sw	a0,-36(s0)
204020de:	fcb42c23          	sw	a1,-40(s0)
204020e2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204020e6:	57fd                	li	a5,-1
204020e8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204020ec:	fdc42783          	lw	a5,-36(s0)
204020f0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204020f4:	fdc42503          	lw	a0,-36(s0)
204020f8:	a61ff0ef          	jal	ra,20401b58 <__metal_driver_sifive_clint0_control_base>
204020fc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402100:	fd842703          	lw	a4,-40(s0)
20402104:	4789                	li	a5,2
20402106:	04f70863          	beq	a4,a5,20402156 <__metal_driver_riscv_clint0_command_request+0x84>
2040210a:	fd842703          	lw	a4,-40(s0)
2040210e:	4789                	li	a5,2
20402110:	00e7c863          	blt	a5,a4,20402120 <__metal_driver_riscv_clint0_command_request+0x4e>
20402114:	fd842703          	lw	a4,-40(s0)
20402118:	4785                	li	a5,1
2040211a:	00f70e63          	beq	a4,a5,20402136 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
2040211e:	a8e9                	j	204021f8 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402120:	fd842703          	lw	a4,-40(s0)
20402124:	478d                	li	a5,3
20402126:	04f70c63          	beq	a4,a5,2040217e <__metal_driver_riscv_clint0_command_request+0xac>
2040212a:	fd842703          	lw	a4,-40(s0)
2040212e:	4791                	li	a5,4
20402130:	08f70863          	beq	a4,a5,204021c0 <__metal_driver_riscv_clint0_command_request+0xee>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402134:	a0d1                	j	204021f8 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402136:	fd442783          	lw	a5,-44(s0)
2040213a:	cbc5                	beqz	a5,204021ea <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
2040213c:	fe842503          	lw	a0,-24(s0)
20402140:	34f9                	jal	20401c0e <__metal_clint0_mtime_get>
20402142:	87aa                	mv	a5,a0
20402144:	882e                	mv	a6,a1
20402146:	fd442703          	lw	a4,-44(s0)
2040214a:	c31c                	sw	a5,0(a4)
2040214c:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402150:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402154:	a859                	j	204021ea <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402156:	fd442783          	lw	a5,-44(s0)
2040215a:	cbd1                	beqz	a5,204021ee <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
2040215c:	fd442783          	lw	a5,-44(s0)
20402160:	439c                	lw	a5,0(a5)
20402162:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402166:	fe042783          	lw	a5,-32(s0)
2040216a:	078a                	slli	a5,a5,0x2
2040216c:	873e                	mv	a4,a5
2040216e:	fe442783          	lw	a5,-28(s0)
20402172:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402174:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402178:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040217c:	a88d                	j	204021ee <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
2040217e:	fd442783          	lw	a5,-44(s0)
20402182:	cba5                	beqz	a5,204021f2 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402184:	fd442783          	lw	a5,-44(s0)
20402188:	439c                	lw	a5,0(a5)
2040218a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040218e:	fe042783          	lw	a5,-32(s0)
20402192:	078a                	slli	a5,a5,0x2
20402194:	873e                	mv	a4,a5
20402196:	fe442783          	lw	a5,-28(s0)
2040219a:	97ba                	add	a5,a5,a4
2040219c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
2040219e:	4785                	li	a5,1
204021a0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
204021a2:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204021a6:	fe042783          	lw	a5,-32(s0)
204021aa:	078a                	slli	a5,a5,0x2
204021ac:	873e                	mv	a4,a5
204021ae:	fe442783          	lw	a5,-28(s0)
204021b2:	97ba                	add	a5,a5,a4
204021b4:	439c                	lw	a5,0(a5)
204021b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
204021ba:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204021be:	a815                	j	204021f2 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
204021c0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
204021c4:	fd442783          	lw	a5,-44(s0)
204021c8:	c79d                	beqz	a5,204021f6 <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
204021ca:	fd442783          	lw	a5,-44(s0)
204021ce:	439c                	lw	a5,0(a5)
204021d0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204021d4:	fe042783          	lw	a5,-32(s0)
204021d8:	078a                	slli	a5,a5,0x2
204021da:	873e                	mv	a4,a5
204021dc:	fe442783          	lw	a5,-28(s0)
204021e0:	97ba                	add	a5,a5,a4
204021e2:	439c                	lw	a5,0(a5)
204021e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204021e8:	a039                	j	204021f6 <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204021ea:	0001                	nop
204021ec:	a031                	j	204021f8 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204021ee:	0001                	nop
204021f0:	a021                	j	204021f8 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204021f2:	0001                	nop
204021f4:	a011                	j	204021f8 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204021f6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204021f8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204021fc:	853e                	mv	a0,a5
204021fe:	50b2                	lw	ra,44(sp)
20402200:	5422                	lw	s0,40(sp)
20402202:	6145                	addi	sp,sp,48
20402204:	8082                	ret

20402206 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402206:	7179                	addi	sp,sp,-48
20402208:	d606                	sw	ra,44(sp)
2040220a:	d422                	sw	s0,40(sp)
2040220c:	1800                	addi	s0,sp,48
2040220e:	fca42e23          	sw	a0,-36(s0)
20402212:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402216:	559020ef          	jal	ra,20404f6e <metal_cpu_get_current_hartid>
2040221a:	87aa                	mv	a5,a0
2040221c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402220:	fec40793          	addi	a5,s0,-20
20402224:	863e                	mv	a2,a5
20402226:	4589                	li	a1,2
20402228:	fdc42503          	lw	a0,-36(s0)
2040222c:	355d                	jal	204020d2 <__metal_driver_riscv_clint0_command_request>
2040222e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402230:	853e                	mv	a0,a5
20402232:	50b2                	lw	ra,44(sp)
20402234:	5422                	lw	s0,40(sp)
20402236:	6145                	addi	sp,sp,48
20402238:	8082                	ret

2040223a <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
2040223a:	7179                	addi	sp,sp,-48
2040223c:	d606                	sw	ra,44(sp)
2040223e:	d422                	sw	s0,40(sp)
20402240:	1800                	addi	s0,sp,48
20402242:	fca42e23          	sw	a0,-36(s0)
20402246:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
2040224a:	525020ef          	jal	ra,20404f6e <metal_cpu_get_current_hartid>
2040224e:	87aa                	mv	a5,a0
20402250:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402254:	fec40793          	addi	a5,s0,-20
20402258:	863e                	mv	a2,a5
2040225a:	458d                	li	a1,3
2040225c:	fdc42503          	lw	a0,-36(s0)
20402260:	3d8d                	jal	204020d2 <__metal_driver_riscv_clint0_command_request>
20402262:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402264:	853e                	mv	a0,a5
20402266:	50b2                	lw	ra,44(sp)
20402268:	5422                	lw	s0,40(sp)
2040226a:	6145                	addi	sp,sp,48
2040226c:	8082                	ret

2040226e <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
2040226e:	1101                	addi	sp,sp,-32
20402270:	ce22                	sw	s0,28(sp)
20402272:	1000                	addi	s0,sp,32
20402274:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402278:	fec42703          	lw	a4,-20(s0)
2040227c:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402280:	00f71463          	bne	a4,a5,20402288 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402284:	4781                	li	a5,0
20402286:	a011                	j	2040228a <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402288:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
2040228a:	853e                	mv	a0,a5
2040228c:	4472                	lw	s0,28(sp)
2040228e:	6105                	addi	sp,sp,32
20402290:	8082                	ret

20402292 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402292:	1101                	addi	sp,sp,-32
20402294:	ce22                	sw	s0,28(sp)
20402296:	1000                	addi	s0,sp,32
20402298:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040229c:	fec42703          	lw	a4,-20(s0)
204022a0:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204022a4:	00f71763          	bne	a4,a5,204022b2 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
204022a8:	000f47b7          	lui	a5,0xf4
204022ac:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
204022b0:	a011                	j	204022b4 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
204022b2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
204022b4:	853e                	mv	a0,a5
204022b6:	4472                	lw	s0,28(sp)
204022b8:	6105                	addi	sp,sp,32
204022ba:	8082                	ret

204022bc <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204022bc:	1101                	addi	sp,sp,-32
204022be:	ce22                	sw	s0,28(sp)
204022c0:	1000                	addi	s0,sp,32
204022c2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204022c6:	fec42703          	lw	a4,-20(s0)
204022ca:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204022ce:	00f71763          	bne	a4,a5,204022dc <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204022d2:	800007b7          	lui	a5,0x80000
204022d6:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffaddc>
204022da:	a011                	j	204022de <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
204022dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
204022de:	853e                	mv	a0,a5
204022e0:	4472                	lw	s0,28(sp)
204022e2:	6105                	addi	sp,sp,32
204022e4:	8082                	ret

204022e6 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204022e6:	1101                	addi	sp,sp,-32
204022e8:	ce22                	sw	s0,28(sp)
204022ea:	1000                	addi	s0,sp,32
204022ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
204022f0:	fec42783          	lw	a5,-20(s0)
204022f4:	00f04a63          	bgtz	a5,20402308 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204022f8:	fec42703          	lw	a4,-20(s0)
204022fc:	070a                	slli	a4,a4,0x2
204022fe:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402302:	97ba                	add	a5,a5,a4
20402304:	439c                	lw	a5,0(a5)
20402306:	a011                	j	2040230a <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402308:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040230a:	853e                	mv	a0,a5
2040230c:	4472                	lw	s0,28(sp)
2040230e:	6105                	addi	sp,sp,32
20402310:	8082                	ret

20402312 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402312:	1101                	addi	sp,sp,-32
20402314:	ce22                	sw	s0,28(sp)
20402316:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402318:	f14027f3          	csrr	a5,mhartid
2040231c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402320:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402324:	853e                	mv	a0,a5
20402326:	4472                	lw	s0,28(sp)
20402328:	6105                	addi	sp,sp,32
2040232a:	8082                	ret

2040232c <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040232c:	1101                	addi	sp,sp,-32
2040232e:	ce22                	sw	s0,28(sp)
20402330:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402332:	47a1                	li	a5,8
20402334:	3007a7f3          	csrrs	a5,mstatus,a5
20402338:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
2040233c:	0001                	nop
2040233e:	4472                	lw	s0,28(sp)
20402340:	6105                	addi	sp,sp,32
20402342:	8082                	ret

20402344 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402344:	1101                	addi	sp,sp,-32
20402346:	ce22                	sw	s0,28(sp)
20402348:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040234a:	47a1                	li	a5,8
2040234c:	3007b7f3          	csrrc	a5,mstatus,a5
20402350:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402354:	0001                	nop
20402356:	4472                	lw	s0,28(sp)
20402358:	6105                	addi	sp,sp,32
2040235a:	8082                	ret

2040235c <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
2040235c:	1101                	addi	sp,sp,-32
2040235e:	ce22                	sw	s0,28(sp)
20402360:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402362:	47a1                	li	a5,8
20402364:	3047a7f3          	csrrs	a5,mie,a5
20402368:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
2040236c:	0001                	nop
2040236e:	4472                	lw	s0,28(sp)
20402370:	6105                	addi	sp,sp,32
20402372:	8082                	ret

20402374 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402374:	1101                	addi	sp,sp,-32
20402376:	ce22                	sw	s0,28(sp)
20402378:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040237a:	47a1                	li	a5,8
2040237c:	3047b7f3          	csrrc	a5,mie,a5
20402380:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402384:	0001                	nop
20402386:	4472                	lw	s0,28(sp)
20402388:	6105                	addi	sp,sp,32
2040238a:	8082                	ret

2040238c <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
2040238c:	1101                	addi	sp,sp,-32
2040238e:	ce22                	sw	s0,28(sp)
20402390:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402392:	08000793          	li	a5,128
20402396:	3047a7f3          	csrrs	a5,mie,a5
2040239a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
2040239e:	0001                	nop
204023a0:	4472                	lw	s0,28(sp)
204023a2:	6105                	addi	sp,sp,32
204023a4:	8082                	ret

204023a6 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204023a6:	1101                	addi	sp,sp,-32
204023a8:	ce22                	sw	s0,28(sp)
204023aa:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204023ac:	08000793          	li	a5,128
204023b0:	3047b7f3          	csrrc	a5,mie,a5
204023b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
204023b8:	0001                	nop
204023ba:	4472                	lw	s0,28(sp)
204023bc:	6105                	addi	sp,sp,32
204023be:	8082                	ret

204023c0 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
204023c0:	1101                	addi	sp,sp,-32
204023c2:	ce22                	sw	s0,28(sp)
204023c4:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204023c6:	6785                	lui	a5,0x1
204023c8:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204023cc:	3047a7f3          	csrrs	a5,mie,a5
204023d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
204023d4:	0001                	nop
204023d6:	4472                	lw	s0,28(sp)
204023d8:	6105                	addi	sp,sp,32
204023da:	8082                	ret

204023dc <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
204023dc:	1101                	addi	sp,sp,-32
204023de:	ce22                	sw	s0,28(sp)
204023e0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
204023e2:	6785                	lui	a5,0x1
204023e4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204023e8:	3047b7f3          	csrrc	a5,mie,a5
204023ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
204023f0:	0001                	nop
204023f2:	4472                	lw	s0,28(sp)
204023f4:	6105                	addi	sp,sp,32
204023f6:	8082                	ret

204023f8 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
204023f8:	7179                	addi	sp,sp,-48
204023fa:	d622                	sw	s0,44(sp)
204023fc:	1800                	addi	s0,sp,48
204023fe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402402:	fdc42783          	lw	a5,-36(s0)
20402406:	4705                	li	a4,1
20402408:	00f717b3          	sll	a5,a4,a5
2040240c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402410:	fec42783          	lw	a5,-20(s0)
20402414:	3047a7f3          	csrrs	a5,mie,a5
20402418:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040241c:	0001                	nop
2040241e:	5432                	lw	s0,44(sp)
20402420:	6145                	addi	sp,sp,48
20402422:	8082                	ret

20402424 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402424:	7179                	addi	sp,sp,-48
20402426:	d622                	sw	s0,44(sp)
20402428:	1800                	addi	s0,sp,48
2040242a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040242e:	fdc42783          	lw	a5,-36(s0)
20402432:	4705                	li	a4,1
20402434:	00f717b3          	sll	a5,a4,a5
20402438:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040243c:	fec42783          	lw	a5,-20(s0)
20402440:	3047b7f3          	csrrc	a5,mie,a5
20402444:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402448:	0001                	nop
2040244a:	5432                	lw	s0,44(sp)
2040244c:	6145                	addi	sp,sp,48
2040244e:	8082                	ret

20402450 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402450:	1101                	addi	sp,sp,-32
20402452:	ce06                	sw	ra,28(sp)
20402454:	cc22                	sw	s0,24(sp)
20402456:	1000                	addi	s0,sp,32
20402458:	fea42623          	sw	a0,-20(s0)
2040245c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402460:	06400513          	li	a0,100
20402464:	325020ef          	jal	ra,20404f88 <metal_shutdown>

20402468 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402468:	1101                	addi	sp,sp,-32
2040246a:	ce06                	sw	ra,28(sp)
2040246c:	cc22                	sw	s0,24(sp)
2040246e:	1000                	addi	s0,sp,32
20402470:	fea42623          	sw	a0,-20(s0)
20402474:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402478:	0c800513          	li	a0,200
2040247c:	30d020ef          	jal	ra,20404f88 <metal_shutdown>

20402480 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402480:	715d                	addi	sp,sp,-80
20402482:	c686                	sw	ra,76(sp)
20402484:	c496                	sw	t0,72(sp)
20402486:	c29a                	sw	t1,68(sp)
20402488:	c09e                	sw	t2,64(sp)
2040248a:	de22                	sw	s0,60(sp)
2040248c:	dc2a                	sw	a0,56(sp)
2040248e:	da2e                	sw	a1,52(sp)
20402490:	d832                	sw	a2,48(sp)
20402492:	d636                	sw	a3,44(sp)
20402494:	d43a                	sw	a4,40(sp)
20402496:	d23e                	sw	a5,36(sp)
20402498:	d042                	sw	a6,32(sp)
2040249a:	ce46                	sw	a7,28(sp)
2040249c:	cc72                	sw	t3,24(sp)
2040249e:	ca76                	sw	t4,20(sp)
204024a0:	c87a                	sw	t5,16(sp)
204024a2:	c67e                	sw	t6,12(sp)
204024a4:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
204024a6:	12c00513          	li	a0,300
204024aa:	2df020ef          	jal	ra,20404f88 <metal_shutdown>

204024ae <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
204024ae:	711d                	addi	sp,sp,-96
204024b0:	ce86                	sw	ra,92(sp)
204024b2:	cc96                	sw	t0,88(sp)
204024b4:	ca9a                	sw	t1,84(sp)
204024b6:	c89e                	sw	t2,80(sp)
204024b8:	c6a2                	sw	s0,76(sp)
204024ba:	c4aa                	sw	a0,72(sp)
204024bc:	c2ae                	sw	a1,68(sp)
204024be:	c0b2                	sw	a2,64(sp)
204024c0:	de36                	sw	a3,60(sp)
204024c2:	dc3a                	sw	a4,56(sp)
204024c4:	da3e                	sw	a5,52(sp)
204024c6:	d842                	sw	a6,48(sp)
204024c8:	d646                	sw	a7,44(sp)
204024ca:	d472                	sw	t3,40(sp)
204024cc:	d276                	sw	t4,36(sp)
204024ce:	d07a                	sw	t5,32(sp)
204024d0:	ce7e                	sw	t6,28(sp)
204024d2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204024d4:	3d3d                	jal	20402312 <__metal_myhart_id>
204024d6:	872a                	mv	a4,a0
204024d8:	070a                	slli	a4,a4,0x2
204024da:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204024de:	97ba                	add	a5,a5,a4
204024e0:	439c                	lw	a5,0(a5)
204024e2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
204024e6:	fac42783          	lw	a5,-84(s0)
204024ea:	c785                	beqz	a5,20402512 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204024ec:	fac42503          	lw	a0,-84(s0)
204024f0:	33f1                	jal	204022bc <__metal_driver_cpu_interrupt_controller>
204024f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
204024f6:	fa842783          	lw	a5,-88(s0)
204024fa:	0e07a783          	lw	a5,224(a5)
204024fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402502:	fa842783          	lw	a5,-88(s0)
20402506:	0d87a783          	lw	a5,216(a5)
2040250a:	fa442583          	lw	a1,-92(s0)
2040250e:	450d                	li	a0,3
20402510:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402512:	0001                	nop
20402514:	40f6                	lw	ra,92(sp)
20402516:	42e6                	lw	t0,88(sp)
20402518:	4356                	lw	t1,84(sp)
2040251a:	43c6                	lw	t2,80(sp)
2040251c:	4436                	lw	s0,76(sp)
2040251e:	4526                	lw	a0,72(sp)
20402520:	4596                	lw	a1,68(sp)
20402522:	4606                	lw	a2,64(sp)
20402524:	56f2                	lw	a3,60(sp)
20402526:	5762                	lw	a4,56(sp)
20402528:	57d2                	lw	a5,52(sp)
2040252a:	5842                	lw	a6,48(sp)
2040252c:	58b2                	lw	a7,44(sp)
2040252e:	5e22                	lw	t3,40(sp)
20402530:	5e92                	lw	t4,36(sp)
20402532:	5f02                	lw	t5,32(sp)
20402534:	4ff2                	lw	t6,28(sp)
20402536:	6125                	addi	sp,sp,96
20402538:	30200073          	mret

2040253c <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
2040253c:	7179                	addi	sp,sp,-48
2040253e:	d606                	sw	ra,44(sp)
20402540:	d422                	sw	s0,40(sp)
20402542:	1800                	addi	s0,sp,48
20402544:	fca42e23          	sw	a0,-36(s0)
20402548:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040254c:	33d9                	jal	20402312 <__metal_myhart_id>
2040254e:	872a                	mv	a4,a0
20402550:	070a                	slli	a4,a4,0x2
20402552:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402556:	97ba                	add	a5,a5,a4
20402558:	439c                	lw	a5,0(a5)
2040255a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040255e:	342027f3          	csrr	a5,mcause
20402562:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402566:	fec42783          	lw	a5,-20(s0)
2040256a:	c795                	beqz	a5,20402596 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040256c:	fec42503          	lw	a0,-20(s0)
20402570:	33b1                	jal	204022bc <__metal_driver_cpu_interrupt_controller>
20402572:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402576:	fe842783          	lw	a5,-24(s0)
2040257a:	3ff7f793          	andi	a5,a5,1023
2040257e:	fe442703          	lw	a4,-28(s0)
20402582:	0e078793          	addi	a5,a5,224
20402586:	078a                	slli	a5,a5,0x2
20402588:	97ba                	add	a5,a5,a4
2040258a:	479c                	lw	a5,8(a5)
2040258c:	fdc42583          	lw	a1,-36(s0)
20402590:	fec42503          	lw	a0,-20(s0)
20402594:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402596:	0001                	nop
20402598:	50b2                	lw	ra,44(sp)
2040259a:	5422                	lw	s0,40(sp)
2040259c:	6145                	addi	sp,sp,48
2040259e:	8082                	ret

204025a0 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204025a0:	711d                	addi	sp,sp,-96
204025a2:	ce86                	sw	ra,92(sp)
204025a4:	cc96                	sw	t0,88(sp)
204025a6:	ca9a                	sw	t1,84(sp)
204025a8:	c89e                	sw	t2,80(sp)
204025aa:	c6a2                	sw	s0,76(sp)
204025ac:	c4aa                	sw	a0,72(sp)
204025ae:	c2ae                	sw	a1,68(sp)
204025b0:	c0b2                	sw	a2,64(sp)
204025b2:	de36                	sw	a3,60(sp)
204025b4:	dc3a                	sw	a4,56(sp)
204025b6:	da3e                	sw	a5,52(sp)
204025b8:	d842                	sw	a6,48(sp)
204025ba:	d646                	sw	a7,44(sp)
204025bc:	d472                	sw	t3,40(sp)
204025be:	d276                	sw	t4,36(sp)
204025c0:	d07a                	sw	t5,32(sp)
204025c2:	ce7e                	sw	t6,28(sp)
204025c4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204025c6:	33b1                	jal	20402312 <__metal_myhart_id>
204025c8:	872a                	mv	a4,a0
204025ca:	070a                	slli	a4,a4,0x2
204025cc:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204025d0:	97ba                	add	a5,a5,a4
204025d2:	439c                	lw	a5,0(a5)
204025d4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
204025d8:	fac42783          	lw	a5,-84(s0)
204025dc:	c785                	beqz	a5,20402604 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204025de:	fac42503          	lw	a0,-84(s0)
204025e2:	39e9                	jal	204022bc <__metal_driver_cpu_interrupt_controller>
204025e4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
204025e8:	fa842783          	lw	a5,-88(s0)
204025ec:	1407a783          	lw	a5,320(a5)
204025f0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
204025f4:	fa842783          	lw	a5,-88(s0)
204025f8:	1387a783          	lw	a5,312(a5)
204025fc:	fa442583          	lw	a1,-92(s0)
20402600:	451d                	li	a0,7
20402602:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402604:	0001                	nop
20402606:	40f6                	lw	ra,92(sp)
20402608:	42e6                	lw	t0,88(sp)
2040260a:	4356                	lw	t1,84(sp)
2040260c:	43c6                	lw	t2,80(sp)
2040260e:	4436                	lw	s0,76(sp)
20402610:	4526                	lw	a0,72(sp)
20402612:	4596                	lw	a1,68(sp)
20402614:	4606                	lw	a2,64(sp)
20402616:	56f2                	lw	a3,60(sp)
20402618:	5762                	lw	a4,56(sp)
2040261a:	57d2                	lw	a5,52(sp)
2040261c:	5842                	lw	a6,48(sp)
2040261e:	58b2                	lw	a7,44(sp)
20402620:	5e22                	lw	t3,40(sp)
20402622:	5e92                	lw	t4,36(sp)
20402624:	5f02                	lw	t5,32(sp)
20402626:	4ff2                	lw	t6,28(sp)
20402628:	6125                	addi	sp,sp,96
2040262a:	30200073          	mret

2040262e <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
2040262e:	7179                	addi	sp,sp,-48
20402630:	d606                	sw	ra,44(sp)
20402632:	d422                	sw	s0,40(sp)
20402634:	1800                	addi	s0,sp,48
20402636:	fca42e23          	sw	a0,-36(s0)
2040263a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040263e:	39d1                	jal	20402312 <__metal_myhart_id>
20402640:	87aa                	mv	a5,a0
20402642:	853e                	mv	a0,a5
20402644:	314d                	jal	204022e6 <__metal_driver_cpu_get>
20402646:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
2040264a:	fec42503          	lw	a0,-20(s0)
2040264e:	19c010ef          	jal	ra,204037ea <__metal_driver_cpu_mtime_get>
20402652:	fea42023          	sw	a0,-32(s0)
20402656:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
2040265a:	fe042783          	lw	a5,-32(s0)
2040265e:	fe442803          	lw	a6,-28(s0)
20402662:	45a9                	li	a1,10
20402664:	4601                	li	a2,0
20402666:	00b786b3          	add	a3,a5,a1
2040266a:	8536                	mv	a0,a3
2040266c:	00f53533          	sltu	a0,a0,a5
20402670:	00c80733          	add	a4,a6,a2
20402674:	00e507b3          	add	a5,a0,a4
20402678:	873e                	mv	a4,a5
2040267a:	87b6                	mv	a5,a3
2040267c:	883a                	mv	a6,a4
2040267e:	85be                	mv	a1,a5
20402680:	8642                	mv	a2,a6
20402682:	fec42503          	lw	a0,-20(s0)
20402686:	1ca010ef          	jal	ra,20403850 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040268a:	0001                	nop
2040268c:	50b2                	lw	ra,44(sp)
2040268e:	5422                	lw	s0,40(sp)
20402690:	6145                	addi	sp,sp,48
20402692:	8082                	ret
	...

20402700 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402700:	7119                	addi	sp,sp,-128
20402702:	de86                	sw	ra,124(sp)
20402704:	dc96                	sw	t0,120(sp)
20402706:	da9a                	sw	t1,116(sp)
20402708:	d89e                	sw	t2,112(sp)
2040270a:	d6a2                	sw	s0,108(sp)
2040270c:	d4aa                	sw	a0,104(sp)
2040270e:	d2ae                	sw	a1,100(sp)
20402710:	d0b2                	sw	a2,96(sp)
20402712:	ceb6                	sw	a3,92(sp)
20402714:	ccba                	sw	a4,88(sp)
20402716:	cabe                	sw	a5,84(sp)
20402718:	c8c2                	sw	a6,80(sp)
2040271a:	c6c6                	sw	a7,76(sp)
2040271c:	c4f2                	sw	t3,72(sp)
2040271e:	c2f6                	sw	t4,68(sp)
20402720:	c0fa                	sw	t5,64(sp)
20402722:	de7e                	sw	t6,60(sp)
20402724:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402726:	36f5                	jal	20402312 <__metal_myhart_id>
20402728:	872a                	mv	a4,a0
2040272a:	070a                	slli	a4,a4,0x2
2040272c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402730:	97ba                	add	a5,a5,a4
20402732:	439c                	lw	a5,0(a5)
20402734:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402738:	342027f3          	csrr	a5,mcause
2040273c:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402740:	341027f3          	csrr	a5,mepc
20402744:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402748:	343027f3          	csrr	a5,mtval
2040274c:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402750:	305027f3          	csrr	a5,mtvec
20402754:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402758:	fac42783          	lw	a5,-84(s0)
2040275c:	c7e9                	beqz	a5,20402826 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040275e:	fac42503          	lw	a0,-84(s0)
20402762:	b5bff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402766:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040276a:	fa842783          	lw	a5,-88(s0)
2040276e:	3ff7f793          	andi	a5,a5,1023
20402772:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402776:	fa842783          	lw	a5,-88(s0)
2040277a:	0807d863          	bgez	a5,2040280a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2040277e:	f9442703          	lw	a4,-108(s0)
20402782:	47ad                	li	a5,11
20402784:	00e7d763          	bge	a5,a4,20402792 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402788:	f9c42783          	lw	a5,-100(s0)
2040278c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402790:	ef9d                	bnez	a5,204027ce <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402792:	f9842683          	lw	a3,-104(s0)
20402796:	f9442703          	lw	a4,-108(s0)
2040279a:	87ba                	mv	a5,a4
2040279c:	0786                	slli	a5,a5,0x1
2040279e:	97ba                	add	a5,a5,a4
204027a0:	078e                	slli	a5,a5,0x3
204027a2:	97b6                	add	a5,a5,a3
204027a4:	0987a783          	lw	a5,152(a5)
204027a8:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204027ac:	f9842683          	lw	a3,-104(s0)
204027b0:	f9442703          	lw	a4,-108(s0)
204027b4:	87ba                	mv	a5,a4
204027b6:	0786                	slli	a5,a5,0x1
204027b8:	97ba                	add	a5,a5,a4
204027ba:	078e                	slli	a5,a5,0x3
204027bc:	97b6                	add	a5,a5,a3
204027be:	0907a783          	lw	a5,144(a5)
204027c2:	f8c42583          	lw	a1,-116(s0)
204027c6:	f9442503          	lw	a0,-108(s0)
204027ca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204027cc:	a8a9                	j	20402826 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204027ce:	f9c42783          	lw	a5,-100(s0)
204027d2:	03f7f713          	andi	a4,a5,63
204027d6:	4789                	li	a5,2
204027d8:	04f71763          	bne	a4,a5,20402826 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204027dc:	307027f3          	csrr	a5,mtvt
204027e0:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204027e4:	f9842783          	lw	a5,-104(s0)
204027e8:	0dc7a783          	lw	a5,220(a5)
204027ec:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204027f0:	f9042783          	lw	a5,-112(s0)
204027f4:	439c                	lw	a5,0(a5)
204027f6:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204027fa:	f8842783          	lw	a5,-120(s0)
204027fe:	f8c42583          	lw	a1,-116(s0)
20402802:	f9442503          	lw	a0,-108(s0)
20402806:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402808:	a839                	j	20402826 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040280a:	f9842703          	lw	a4,-104(s0)
2040280e:	f9442783          	lw	a5,-108(s0)
20402812:	0e078793          	addi	a5,a5,224
20402816:	078a                	slli	a5,a5,0x2
20402818:	97ba                	add	a5,a5,a4
2040281a:	479c                	lw	a5,8(a5)
2040281c:	f9442583          	lw	a1,-108(s0)
20402820:	fac42503          	lw	a0,-84(s0)
20402824:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402826:	50f6                	lw	ra,124(sp)
20402828:	52e6                	lw	t0,120(sp)
2040282a:	5356                	lw	t1,116(sp)
2040282c:	53c6                	lw	t2,112(sp)
2040282e:	5436                	lw	s0,108(sp)
20402830:	5526                	lw	a0,104(sp)
20402832:	5596                	lw	a1,100(sp)
20402834:	5606                	lw	a2,96(sp)
20402836:	46f6                	lw	a3,92(sp)
20402838:	4766                	lw	a4,88(sp)
2040283a:	47d6                	lw	a5,84(sp)
2040283c:	4846                	lw	a6,80(sp)
2040283e:	48b6                	lw	a7,76(sp)
20402840:	4e26                	lw	t3,72(sp)
20402842:	4e96                	lw	t4,68(sp)
20402844:	4f06                	lw	t5,64(sp)
20402846:	5ff2                	lw	t6,60(sp)
20402848:	6109                	addi	sp,sp,128
2040284a:	30200073          	mret
	...

20402874 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402874:	711d                	addi	sp,sp,-96
20402876:	ce86                	sw	ra,92(sp)
20402878:	cc96                	sw	t0,88(sp)
2040287a:	ca9a                	sw	t1,84(sp)
2040287c:	c89e                	sw	t2,80(sp)
2040287e:	c6a2                	sw	s0,76(sp)
20402880:	c4aa                	sw	a0,72(sp)
20402882:	c2ae                	sw	a1,68(sp)
20402884:	c0b2                	sw	a2,64(sp)
20402886:	de36                	sw	a3,60(sp)
20402888:	dc3a                	sw	a4,56(sp)
2040288a:	da3e                	sw	a5,52(sp)
2040288c:	d842                	sw	a6,48(sp)
2040288e:	d646                	sw	a7,44(sp)
20402890:	d472                	sw	t3,40(sp)
20402892:	d276                	sw	t4,36(sp)
20402894:	d07a                	sw	t5,32(sp)
20402896:	ce7e                	sw	t6,28(sp)
20402898:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040289a:	a79ff0ef          	jal	ra,20402312 <__metal_myhart_id>
2040289e:	872a                	mv	a4,a0
204028a0:	070a                	slli	a4,a4,0x2
204028a2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204028a6:	97ba                	add	a5,a5,a4
204028a8:	439c                	lw	a5,0(a5)
204028aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
204028ae:	fac42783          	lw	a5,-84(s0)
204028b2:	c78d                	beqz	a5,204028dc <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028b4:	fac42503          	lw	a0,-84(s0)
204028b8:	a05ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
204028bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
204028c0:	fa842783          	lw	a5,-88(s0)
204028c4:	2187a783          	lw	a5,536(a5)
204028c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
204028cc:	fa842783          	lw	a5,-88(s0)
204028d0:	2107a783          	lw	a5,528(a5)
204028d4:	fa442583          	lw	a1,-92(s0)
204028d8:	4541                	li	a0,16
204028da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
204028dc:	0001                	nop
204028de:	40f6                	lw	ra,92(sp)
204028e0:	42e6                	lw	t0,88(sp)
204028e2:	4356                	lw	t1,84(sp)
204028e4:	43c6                	lw	t2,80(sp)
204028e6:	4436                	lw	s0,76(sp)
204028e8:	4526                	lw	a0,72(sp)
204028ea:	4596                	lw	a1,68(sp)
204028ec:	4606                	lw	a2,64(sp)
204028ee:	56f2                	lw	a3,60(sp)
204028f0:	5762                	lw	a4,56(sp)
204028f2:	57d2                	lw	a5,52(sp)
204028f4:	5842                	lw	a6,48(sp)
204028f6:	58b2                	lw	a7,44(sp)
204028f8:	5e22                	lw	t3,40(sp)
204028fa:	5e92                	lw	t4,36(sp)
204028fc:	5f02                	lw	t5,32(sp)
204028fe:	4ff2                	lw	t6,28(sp)
20402900:	6125                	addi	sp,sp,96
20402902:	30200073          	mret

20402906 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402906:	711d                	addi	sp,sp,-96
20402908:	ce86                	sw	ra,92(sp)
2040290a:	cc96                	sw	t0,88(sp)
2040290c:	ca9a                	sw	t1,84(sp)
2040290e:	c89e                	sw	t2,80(sp)
20402910:	c6a2                	sw	s0,76(sp)
20402912:	c4aa                	sw	a0,72(sp)
20402914:	c2ae                	sw	a1,68(sp)
20402916:	c0b2                	sw	a2,64(sp)
20402918:	de36                	sw	a3,60(sp)
2040291a:	dc3a                	sw	a4,56(sp)
2040291c:	da3e                	sw	a5,52(sp)
2040291e:	d842                	sw	a6,48(sp)
20402920:	d646                	sw	a7,44(sp)
20402922:	d472                	sw	t3,40(sp)
20402924:	d276                	sw	t4,36(sp)
20402926:	d07a                	sw	t5,32(sp)
20402928:	ce7e                	sw	t6,28(sp)
2040292a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040292c:	9e7ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402930:	872a                	mv	a4,a0
20402932:	070a                	slli	a4,a4,0x2
20402934:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402938:	97ba                	add	a5,a5,a4
2040293a:	439c                	lw	a5,0(a5)
2040293c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402940:	fac42783          	lw	a5,-84(s0)
20402944:	c78d                	beqz	a5,2040296e <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402946:	fac42503          	lw	a0,-84(s0)
2040294a:	973ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
2040294e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402952:	fa842783          	lw	a5,-88(s0)
20402956:	2307a783          	lw	a5,560(a5)
2040295a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
2040295e:	fa842783          	lw	a5,-88(s0)
20402962:	2287a783          	lw	a5,552(a5)
20402966:	fa442583          	lw	a1,-92(s0)
2040296a:	4545                	li	a0,17
2040296c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
2040296e:	0001                	nop
20402970:	40f6                	lw	ra,92(sp)
20402972:	42e6                	lw	t0,88(sp)
20402974:	4356                	lw	t1,84(sp)
20402976:	43c6                	lw	t2,80(sp)
20402978:	4436                	lw	s0,76(sp)
2040297a:	4526                	lw	a0,72(sp)
2040297c:	4596                	lw	a1,68(sp)
2040297e:	4606                	lw	a2,64(sp)
20402980:	56f2                	lw	a3,60(sp)
20402982:	5762                	lw	a4,56(sp)
20402984:	57d2                	lw	a5,52(sp)
20402986:	5842                	lw	a6,48(sp)
20402988:	58b2                	lw	a7,44(sp)
2040298a:	5e22                	lw	t3,40(sp)
2040298c:	5e92                	lw	t4,36(sp)
2040298e:	5f02                	lw	t5,32(sp)
20402990:	4ff2                	lw	t6,28(sp)
20402992:	6125                	addi	sp,sp,96
20402994:	30200073          	mret

20402998 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402998:	711d                	addi	sp,sp,-96
2040299a:	ce86                	sw	ra,92(sp)
2040299c:	cc96                	sw	t0,88(sp)
2040299e:	ca9a                	sw	t1,84(sp)
204029a0:	c89e                	sw	t2,80(sp)
204029a2:	c6a2                	sw	s0,76(sp)
204029a4:	c4aa                	sw	a0,72(sp)
204029a6:	c2ae                	sw	a1,68(sp)
204029a8:	c0b2                	sw	a2,64(sp)
204029aa:	de36                	sw	a3,60(sp)
204029ac:	dc3a                	sw	a4,56(sp)
204029ae:	da3e                	sw	a5,52(sp)
204029b0:	d842                	sw	a6,48(sp)
204029b2:	d646                	sw	a7,44(sp)
204029b4:	d472                	sw	t3,40(sp)
204029b6:	d276                	sw	t4,36(sp)
204029b8:	d07a                	sw	t5,32(sp)
204029ba:	ce7e                	sw	t6,28(sp)
204029bc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029be:	955ff0ef          	jal	ra,20402312 <__metal_myhart_id>
204029c2:	872a                	mv	a4,a0
204029c4:	070a                	slli	a4,a4,0x2
204029c6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204029ca:	97ba                	add	a5,a5,a4
204029cc:	439c                	lw	a5,0(a5)
204029ce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
204029d2:	fac42783          	lw	a5,-84(s0)
204029d6:	c78d                	beqz	a5,20402a00 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029d8:	fac42503          	lw	a0,-84(s0)
204029dc:	8e1ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
204029e0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
204029e4:	fa842783          	lw	a5,-88(s0)
204029e8:	2487a783          	lw	a5,584(a5)
204029ec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
204029f0:	fa842783          	lw	a5,-88(s0)
204029f4:	2407a783          	lw	a5,576(a5)
204029f8:	fa442583          	lw	a1,-92(s0)
204029fc:	4549                	li	a0,18
204029fe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402a00:	0001                	nop
20402a02:	40f6                	lw	ra,92(sp)
20402a04:	42e6                	lw	t0,88(sp)
20402a06:	4356                	lw	t1,84(sp)
20402a08:	43c6                	lw	t2,80(sp)
20402a0a:	4436                	lw	s0,76(sp)
20402a0c:	4526                	lw	a0,72(sp)
20402a0e:	4596                	lw	a1,68(sp)
20402a10:	4606                	lw	a2,64(sp)
20402a12:	56f2                	lw	a3,60(sp)
20402a14:	5762                	lw	a4,56(sp)
20402a16:	57d2                	lw	a5,52(sp)
20402a18:	5842                	lw	a6,48(sp)
20402a1a:	58b2                	lw	a7,44(sp)
20402a1c:	5e22                	lw	t3,40(sp)
20402a1e:	5e92                	lw	t4,36(sp)
20402a20:	5f02                	lw	t5,32(sp)
20402a22:	4ff2                	lw	t6,28(sp)
20402a24:	6125                	addi	sp,sp,96
20402a26:	30200073          	mret

20402a2a <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402a2a:	711d                	addi	sp,sp,-96
20402a2c:	ce86                	sw	ra,92(sp)
20402a2e:	cc96                	sw	t0,88(sp)
20402a30:	ca9a                	sw	t1,84(sp)
20402a32:	c89e                	sw	t2,80(sp)
20402a34:	c6a2                	sw	s0,76(sp)
20402a36:	c4aa                	sw	a0,72(sp)
20402a38:	c2ae                	sw	a1,68(sp)
20402a3a:	c0b2                	sw	a2,64(sp)
20402a3c:	de36                	sw	a3,60(sp)
20402a3e:	dc3a                	sw	a4,56(sp)
20402a40:	da3e                	sw	a5,52(sp)
20402a42:	d842                	sw	a6,48(sp)
20402a44:	d646                	sw	a7,44(sp)
20402a46:	d472                	sw	t3,40(sp)
20402a48:	d276                	sw	t4,36(sp)
20402a4a:	d07a                	sw	t5,32(sp)
20402a4c:	ce7e                	sw	t6,28(sp)
20402a4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a50:	8c3ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402a54:	872a                	mv	a4,a0
20402a56:	070a                	slli	a4,a4,0x2
20402a58:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402a5c:	97ba                	add	a5,a5,a4
20402a5e:	439c                	lw	a5,0(a5)
20402a60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402a64:	fac42783          	lw	a5,-84(s0)
20402a68:	c78d                	beqz	a5,20402a92 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a6a:	fac42503          	lw	a0,-84(s0)
20402a6e:	84fff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402a72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402a76:	fa842783          	lw	a5,-88(s0)
20402a7a:	2607a783          	lw	a5,608(a5)
20402a7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402a82:	fa842783          	lw	a5,-88(s0)
20402a86:	2587a783          	lw	a5,600(a5)
20402a8a:	fa442583          	lw	a1,-92(s0)
20402a8e:	454d                	li	a0,19
20402a90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402a92:	0001                	nop
20402a94:	40f6                	lw	ra,92(sp)
20402a96:	42e6                	lw	t0,88(sp)
20402a98:	4356                	lw	t1,84(sp)
20402a9a:	43c6                	lw	t2,80(sp)
20402a9c:	4436                	lw	s0,76(sp)
20402a9e:	4526                	lw	a0,72(sp)
20402aa0:	4596                	lw	a1,68(sp)
20402aa2:	4606                	lw	a2,64(sp)
20402aa4:	56f2                	lw	a3,60(sp)
20402aa6:	5762                	lw	a4,56(sp)
20402aa8:	57d2                	lw	a5,52(sp)
20402aaa:	5842                	lw	a6,48(sp)
20402aac:	58b2                	lw	a7,44(sp)
20402aae:	5e22                	lw	t3,40(sp)
20402ab0:	5e92                	lw	t4,36(sp)
20402ab2:	5f02                	lw	t5,32(sp)
20402ab4:	4ff2                	lw	t6,28(sp)
20402ab6:	6125                	addi	sp,sp,96
20402ab8:	30200073          	mret

20402abc <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402abc:	711d                	addi	sp,sp,-96
20402abe:	ce86                	sw	ra,92(sp)
20402ac0:	cc96                	sw	t0,88(sp)
20402ac2:	ca9a                	sw	t1,84(sp)
20402ac4:	c89e                	sw	t2,80(sp)
20402ac6:	c6a2                	sw	s0,76(sp)
20402ac8:	c4aa                	sw	a0,72(sp)
20402aca:	c2ae                	sw	a1,68(sp)
20402acc:	c0b2                	sw	a2,64(sp)
20402ace:	de36                	sw	a3,60(sp)
20402ad0:	dc3a                	sw	a4,56(sp)
20402ad2:	da3e                	sw	a5,52(sp)
20402ad4:	d842                	sw	a6,48(sp)
20402ad6:	d646                	sw	a7,44(sp)
20402ad8:	d472                	sw	t3,40(sp)
20402ada:	d276                	sw	t4,36(sp)
20402adc:	d07a                	sw	t5,32(sp)
20402ade:	ce7e                	sw	t6,28(sp)
20402ae0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ae2:	831ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402ae6:	872a                	mv	a4,a0
20402ae8:	070a                	slli	a4,a4,0x2
20402aea:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402aee:	97ba                	add	a5,a5,a4
20402af0:	439c                	lw	a5,0(a5)
20402af2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402af6:	fac42783          	lw	a5,-84(s0)
20402afa:	c78d                	beqz	a5,20402b24 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402afc:	fac42503          	lw	a0,-84(s0)
20402b00:	fbcff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402b04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402b08:	fa842783          	lw	a5,-88(s0)
20402b0c:	2787a783          	lw	a5,632(a5)
20402b10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402b14:	fa842783          	lw	a5,-88(s0)
20402b18:	2707a783          	lw	a5,624(a5)
20402b1c:	fa442583          	lw	a1,-92(s0)
20402b20:	4551                	li	a0,20
20402b22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402b24:	0001                	nop
20402b26:	40f6                	lw	ra,92(sp)
20402b28:	42e6                	lw	t0,88(sp)
20402b2a:	4356                	lw	t1,84(sp)
20402b2c:	43c6                	lw	t2,80(sp)
20402b2e:	4436                	lw	s0,76(sp)
20402b30:	4526                	lw	a0,72(sp)
20402b32:	4596                	lw	a1,68(sp)
20402b34:	4606                	lw	a2,64(sp)
20402b36:	56f2                	lw	a3,60(sp)
20402b38:	5762                	lw	a4,56(sp)
20402b3a:	57d2                	lw	a5,52(sp)
20402b3c:	5842                	lw	a6,48(sp)
20402b3e:	58b2                	lw	a7,44(sp)
20402b40:	5e22                	lw	t3,40(sp)
20402b42:	5e92                	lw	t4,36(sp)
20402b44:	5f02                	lw	t5,32(sp)
20402b46:	4ff2                	lw	t6,28(sp)
20402b48:	6125                	addi	sp,sp,96
20402b4a:	30200073          	mret

20402b4e <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402b4e:	711d                	addi	sp,sp,-96
20402b50:	ce86                	sw	ra,92(sp)
20402b52:	cc96                	sw	t0,88(sp)
20402b54:	ca9a                	sw	t1,84(sp)
20402b56:	c89e                	sw	t2,80(sp)
20402b58:	c6a2                	sw	s0,76(sp)
20402b5a:	c4aa                	sw	a0,72(sp)
20402b5c:	c2ae                	sw	a1,68(sp)
20402b5e:	c0b2                	sw	a2,64(sp)
20402b60:	de36                	sw	a3,60(sp)
20402b62:	dc3a                	sw	a4,56(sp)
20402b64:	da3e                	sw	a5,52(sp)
20402b66:	d842                	sw	a6,48(sp)
20402b68:	d646                	sw	a7,44(sp)
20402b6a:	d472                	sw	t3,40(sp)
20402b6c:	d276                	sw	t4,36(sp)
20402b6e:	d07a                	sw	t5,32(sp)
20402b70:	ce7e                	sw	t6,28(sp)
20402b72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b74:	f9eff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402b78:	872a                	mv	a4,a0
20402b7a:	070a                	slli	a4,a4,0x2
20402b7c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b80:	97ba                	add	a5,a5,a4
20402b82:	439c                	lw	a5,0(a5)
20402b84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402b88:	fac42783          	lw	a5,-84(s0)
20402b8c:	c78d                	beqz	a5,20402bb6 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b8e:	fac42503          	lw	a0,-84(s0)
20402b92:	f2aff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402b96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402b9a:	fa842783          	lw	a5,-88(s0)
20402b9e:	2907a783          	lw	a5,656(a5)
20402ba2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402ba6:	fa842783          	lw	a5,-88(s0)
20402baa:	2887a783          	lw	a5,648(a5)
20402bae:	fa442583          	lw	a1,-92(s0)
20402bb2:	4555                	li	a0,21
20402bb4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402bb6:	0001                	nop
20402bb8:	40f6                	lw	ra,92(sp)
20402bba:	42e6                	lw	t0,88(sp)
20402bbc:	4356                	lw	t1,84(sp)
20402bbe:	43c6                	lw	t2,80(sp)
20402bc0:	4436                	lw	s0,76(sp)
20402bc2:	4526                	lw	a0,72(sp)
20402bc4:	4596                	lw	a1,68(sp)
20402bc6:	4606                	lw	a2,64(sp)
20402bc8:	56f2                	lw	a3,60(sp)
20402bca:	5762                	lw	a4,56(sp)
20402bcc:	57d2                	lw	a5,52(sp)
20402bce:	5842                	lw	a6,48(sp)
20402bd0:	58b2                	lw	a7,44(sp)
20402bd2:	5e22                	lw	t3,40(sp)
20402bd4:	5e92                	lw	t4,36(sp)
20402bd6:	5f02                	lw	t5,32(sp)
20402bd8:	4ff2                	lw	t6,28(sp)
20402bda:	6125                	addi	sp,sp,96
20402bdc:	30200073          	mret

20402be0 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402be0:	711d                	addi	sp,sp,-96
20402be2:	ce86                	sw	ra,92(sp)
20402be4:	cc96                	sw	t0,88(sp)
20402be6:	ca9a                	sw	t1,84(sp)
20402be8:	c89e                	sw	t2,80(sp)
20402bea:	c6a2                	sw	s0,76(sp)
20402bec:	c4aa                	sw	a0,72(sp)
20402bee:	c2ae                	sw	a1,68(sp)
20402bf0:	c0b2                	sw	a2,64(sp)
20402bf2:	de36                	sw	a3,60(sp)
20402bf4:	dc3a                	sw	a4,56(sp)
20402bf6:	da3e                	sw	a5,52(sp)
20402bf8:	d842                	sw	a6,48(sp)
20402bfa:	d646                	sw	a7,44(sp)
20402bfc:	d472                	sw	t3,40(sp)
20402bfe:	d276                	sw	t4,36(sp)
20402c00:	d07a                	sw	t5,32(sp)
20402c02:	ce7e                	sw	t6,28(sp)
20402c04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c06:	f0cff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402c0a:	872a                	mv	a4,a0
20402c0c:	070a                	slli	a4,a4,0x2
20402c0e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c12:	97ba                	add	a5,a5,a4
20402c14:	439c                	lw	a5,0(a5)
20402c16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402c1a:	fac42783          	lw	a5,-84(s0)
20402c1e:	c78d                	beqz	a5,20402c48 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c20:	fac42503          	lw	a0,-84(s0)
20402c24:	e98ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402c28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402c2c:	fa842783          	lw	a5,-88(s0)
20402c30:	2a87a783          	lw	a5,680(a5)
20402c34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402c38:	fa842783          	lw	a5,-88(s0)
20402c3c:	2a07a783          	lw	a5,672(a5)
20402c40:	fa442583          	lw	a1,-92(s0)
20402c44:	4559                	li	a0,22
20402c46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402c48:	0001                	nop
20402c4a:	40f6                	lw	ra,92(sp)
20402c4c:	42e6                	lw	t0,88(sp)
20402c4e:	4356                	lw	t1,84(sp)
20402c50:	43c6                	lw	t2,80(sp)
20402c52:	4436                	lw	s0,76(sp)
20402c54:	4526                	lw	a0,72(sp)
20402c56:	4596                	lw	a1,68(sp)
20402c58:	4606                	lw	a2,64(sp)
20402c5a:	56f2                	lw	a3,60(sp)
20402c5c:	5762                	lw	a4,56(sp)
20402c5e:	57d2                	lw	a5,52(sp)
20402c60:	5842                	lw	a6,48(sp)
20402c62:	58b2                	lw	a7,44(sp)
20402c64:	5e22                	lw	t3,40(sp)
20402c66:	5e92                	lw	t4,36(sp)
20402c68:	5f02                	lw	t5,32(sp)
20402c6a:	4ff2                	lw	t6,28(sp)
20402c6c:	6125                	addi	sp,sp,96
20402c6e:	30200073          	mret

20402c72 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402c72:	711d                	addi	sp,sp,-96
20402c74:	ce86                	sw	ra,92(sp)
20402c76:	cc96                	sw	t0,88(sp)
20402c78:	ca9a                	sw	t1,84(sp)
20402c7a:	c89e                	sw	t2,80(sp)
20402c7c:	c6a2                	sw	s0,76(sp)
20402c7e:	c4aa                	sw	a0,72(sp)
20402c80:	c2ae                	sw	a1,68(sp)
20402c82:	c0b2                	sw	a2,64(sp)
20402c84:	de36                	sw	a3,60(sp)
20402c86:	dc3a                	sw	a4,56(sp)
20402c88:	da3e                	sw	a5,52(sp)
20402c8a:	d842                	sw	a6,48(sp)
20402c8c:	d646                	sw	a7,44(sp)
20402c8e:	d472                	sw	t3,40(sp)
20402c90:	d276                	sw	t4,36(sp)
20402c92:	d07a                	sw	t5,32(sp)
20402c94:	ce7e                	sw	t6,28(sp)
20402c96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c98:	e7aff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402c9c:	872a                	mv	a4,a0
20402c9e:	070a                	slli	a4,a4,0x2
20402ca0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402ca4:	97ba                	add	a5,a5,a4
20402ca6:	439c                	lw	a5,0(a5)
20402ca8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402cac:	fac42783          	lw	a5,-84(s0)
20402cb0:	c78d                	beqz	a5,20402cda <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cb2:	fac42503          	lw	a0,-84(s0)
20402cb6:	e06ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402cba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402cbe:	fa842783          	lw	a5,-88(s0)
20402cc2:	2c07a783          	lw	a5,704(a5)
20402cc6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402cca:	fa842783          	lw	a5,-88(s0)
20402cce:	2b87a783          	lw	a5,696(a5)
20402cd2:	fa442583          	lw	a1,-92(s0)
20402cd6:	455d                	li	a0,23
20402cd8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402cda:	0001                	nop
20402cdc:	40f6                	lw	ra,92(sp)
20402cde:	42e6                	lw	t0,88(sp)
20402ce0:	4356                	lw	t1,84(sp)
20402ce2:	43c6                	lw	t2,80(sp)
20402ce4:	4436                	lw	s0,76(sp)
20402ce6:	4526                	lw	a0,72(sp)
20402ce8:	4596                	lw	a1,68(sp)
20402cea:	4606                	lw	a2,64(sp)
20402cec:	56f2                	lw	a3,60(sp)
20402cee:	5762                	lw	a4,56(sp)
20402cf0:	57d2                	lw	a5,52(sp)
20402cf2:	5842                	lw	a6,48(sp)
20402cf4:	58b2                	lw	a7,44(sp)
20402cf6:	5e22                	lw	t3,40(sp)
20402cf8:	5e92                	lw	t4,36(sp)
20402cfa:	5f02                	lw	t5,32(sp)
20402cfc:	4ff2                	lw	t6,28(sp)
20402cfe:	6125                	addi	sp,sp,96
20402d00:	30200073          	mret

20402d04 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402d04:	711d                	addi	sp,sp,-96
20402d06:	ce86                	sw	ra,92(sp)
20402d08:	cc96                	sw	t0,88(sp)
20402d0a:	ca9a                	sw	t1,84(sp)
20402d0c:	c89e                	sw	t2,80(sp)
20402d0e:	c6a2                	sw	s0,76(sp)
20402d10:	c4aa                	sw	a0,72(sp)
20402d12:	c2ae                	sw	a1,68(sp)
20402d14:	c0b2                	sw	a2,64(sp)
20402d16:	de36                	sw	a3,60(sp)
20402d18:	dc3a                	sw	a4,56(sp)
20402d1a:	da3e                	sw	a5,52(sp)
20402d1c:	d842                	sw	a6,48(sp)
20402d1e:	d646                	sw	a7,44(sp)
20402d20:	d472                	sw	t3,40(sp)
20402d22:	d276                	sw	t4,36(sp)
20402d24:	d07a                	sw	t5,32(sp)
20402d26:	ce7e                	sw	t6,28(sp)
20402d28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d2a:	de8ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402d2e:	872a                	mv	a4,a0
20402d30:	070a                	slli	a4,a4,0x2
20402d32:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d36:	97ba                	add	a5,a5,a4
20402d38:	439c                	lw	a5,0(a5)
20402d3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402d3e:	fac42783          	lw	a5,-84(s0)
20402d42:	c78d                	beqz	a5,20402d6c <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d44:	fac42503          	lw	a0,-84(s0)
20402d48:	d74ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402d4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402d50:	fa842783          	lw	a5,-88(s0)
20402d54:	2d87a783          	lw	a5,728(a5)
20402d58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402d5c:	fa842783          	lw	a5,-88(s0)
20402d60:	2d07a783          	lw	a5,720(a5)
20402d64:	fa442583          	lw	a1,-92(s0)
20402d68:	4561                	li	a0,24
20402d6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402d6c:	0001                	nop
20402d6e:	40f6                	lw	ra,92(sp)
20402d70:	42e6                	lw	t0,88(sp)
20402d72:	4356                	lw	t1,84(sp)
20402d74:	43c6                	lw	t2,80(sp)
20402d76:	4436                	lw	s0,76(sp)
20402d78:	4526                	lw	a0,72(sp)
20402d7a:	4596                	lw	a1,68(sp)
20402d7c:	4606                	lw	a2,64(sp)
20402d7e:	56f2                	lw	a3,60(sp)
20402d80:	5762                	lw	a4,56(sp)
20402d82:	57d2                	lw	a5,52(sp)
20402d84:	5842                	lw	a6,48(sp)
20402d86:	58b2                	lw	a7,44(sp)
20402d88:	5e22                	lw	t3,40(sp)
20402d8a:	5e92                	lw	t4,36(sp)
20402d8c:	5f02                	lw	t5,32(sp)
20402d8e:	4ff2                	lw	t6,28(sp)
20402d90:	6125                	addi	sp,sp,96
20402d92:	30200073          	mret

20402d96 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402d96:	711d                	addi	sp,sp,-96
20402d98:	ce86                	sw	ra,92(sp)
20402d9a:	cc96                	sw	t0,88(sp)
20402d9c:	ca9a                	sw	t1,84(sp)
20402d9e:	c89e                	sw	t2,80(sp)
20402da0:	c6a2                	sw	s0,76(sp)
20402da2:	c4aa                	sw	a0,72(sp)
20402da4:	c2ae                	sw	a1,68(sp)
20402da6:	c0b2                	sw	a2,64(sp)
20402da8:	de36                	sw	a3,60(sp)
20402daa:	dc3a                	sw	a4,56(sp)
20402dac:	da3e                	sw	a5,52(sp)
20402dae:	d842                	sw	a6,48(sp)
20402db0:	d646                	sw	a7,44(sp)
20402db2:	d472                	sw	t3,40(sp)
20402db4:	d276                	sw	t4,36(sp)
20402db6:	d07a                	sw	t5,32(sp)
20402db8:	ce7e                	sw	t6,28(sp)
20402dba:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402dbc:	d56ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402dc0:	872a                	mv	a4,a0
20402dc2:	070a                	slli	a4,a4,0x2
20402dc4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402dc8:	97ba                	add	a5,a5,a4
20402dca:	439c                	lw	a5,0(a5)
20402dcc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402dd0:	fac42783          	lw	a5,-84(s0)
20402dd4:	c78d                	beqz	a5,20402dfe <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dd6:	fac42503          	lw	a0,-84(s0)
20402dda:	ce2ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402dde:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402de2:	fa842783          	lw	a5,-88(s0)
20402de6:	2f07a783          	lw	a5,752(a5)
20402dea:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402dee:	fa842783          	lw	a5,-88(s0)
20402df2:	2e87a783          	lw	a5,744(a5)
20402df6:	fa442583          	lw	a1,-92(s0)
20402dfa:	4565                	li	a0,25
20402dfc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402dfe:	0001                	nop
20402e00:	40f6                	lw	ra,92(sp)
20402e02:	42e6                	lw	t0,88(sp)
20402e04:	4356                	lw	t1,84(sp)
20402e06:	43c6                	lw	t2,80(sp)
20402e08:	4436                	lw	s0,76(sp)
20402e0a:	4526                	lw	a0,72(sp)
20402e0c:	4596                	lw	a1,68(sp)
20402e0e:	4606                	lw	a2,64(sp)
20402e10:	56f2                	lw	a3,60(sp)
20402e12:	5762                	lw	a4,56(sp)
20402e14:	57d2                	lw	a5,52(sp)
20402e16:	5842                	lw	a6,48(sp)
20402e18:	58b2                	lw	a7,44(sp)
20402e1a:	5e22                	lw	t3,40(sp)
20402e1c:	5e92                	lw	t4,36(sp)
20402e1e:	5f02                	lw	t5,32(sp)
20402e20:	4ff2                	lw	t6,28(sp)
20402e22:	6125                	addi	sp,sp,96
20402e24:	30200073          	mret

20402e28 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402e28:	711d                	addi	sp,sp,-96
20402e2a:	ce86                	sw	ra,92(sp)
20402e2c:	cc96                	sw	t0,88(sp)
20402e2e:	ca9a                	sw	t1,84(sp)
20402e30:	c89e                	sw	t2,80(sp)
20402e32:	c6a2                	sw	s0,76(sp)
20402e34:	c4aa                	sw	a0,72(sp)
20402e36:	c2ae                	sw	a1,68(sp)
20402e38:	c0b2                	sw	a2,64(sp)
20402e3a:	de36                	sw	a3,60(sp)
20402e3c:	dc3a                	sw	a4,56(sp)
20402e3e:	da3e                	sw	a5,52(sp)
20402e40:	d842                	sw	a6,48(sp)
20402e42:	d646                	sw	a7,44(sp)
20402e44:	d472                	sw	t3,40(sp)
20402e46:	d276                	sw	t4,36(sp)
20402e48:	d07a                	sw	t5,32(sp)
20402e4a:	ce7e                	sw	t6,28(sp)
20402e4c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e4e:	cc4ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402e52:	872a                	mv	a4,a0
20402e54:	070a                	slli	a4,a4,0x2
20402e56:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e5a:	97ba                	add	a5,a5,a4
20402e5c:	439c                	lw	a5,0(a5)
20402e5e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402e62:	fac42783          	lw	a5,-84(s0)
20402e66:	c78d                	beqz	a5,20402e90 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e68:	fac42503          	lw	a0,-84(s0)
20402e6c:	c50ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402e70:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402e74:	fa842783          	lw	a5,-88(s0)
20402e78:	3087a783          	lw	a5,776(a5)
20402e7c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402e80:	fa842783          	lw	a5,-88(s0)
20402e84:	3007a783          	lw	a5,768(a5)
20402e88:	fa442583          	lw	a1,-92(s0)
20402e8c:	4569                	li	a0,26
20402e8e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402e90:	0001                	nop
20402e92:	40f6                	lw	ra,92(sp)
20402e94:	42e6                	lw	t0,88(sp)
20402e96:	4356                	lw	t1,84(sp)
20402e98:	43c6                	lw	t2,80(sp)
20402e9a:	4436                	lw	s0,76(sp)
20402e9c:	4526                	lw	a0,72(sp)
20402e9e:	4596                	lw	a1,68(sp)
20402ea0:	4606                	lw	a2,64(sp)
20402ea2:	56f2                	lw	a3,60(sp)
20402ea4:	5762                	lw	a4,56(sp)
20402ea6:	57d2                	lw	a5,52(sp)
20402ea8:	5842                	lw	a6,48(sp)
20402eaa:	58b2                	lw	a7,44(sp)
20402eac:	5e22                	lw	t3,40(sp)
20402eae:	5e92                	lw	t4,36(sp)
20402eb0:	5f02                	lw	t5,32(sp)
20402eb2:	4ff2                	lw	t6,28(sp)
20402eb4:	6125                	addi	sp,sp,96
20402eb6:	30200073          	mret

20402eba <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20402eba:	711d                	addi	sp,sp,-96
20402ebc:	ce86                	sw	ra,92(sp)
20402ebe:	cc96                	sw	t0,88(sp)
20402ec0:	ca9a                	sw	t1,84(sp)
20402ec2:	c89e                	sw	t2,80(sp)
20402ec4:	c6a2                	sw	s0,76(sp)
20402ec6:	c4aa                	sw	a0,72(sp)
20402ec8:	c2ae                	sw	a1,68(sp)
20402eca:	c0b2                	sw	a2,64(sp)
20402ecc:	de36                	sw	a3,60(sp)
20402ece:	dc3a                	sw	a4,56(sp)
20402ed0:	da3e                	sw	a5,52(sp)
20402ed2:	d842                	sw	a6,48(sp)
20402ed4:	d646                	sw	a7,44(sp)
20402ed6:	d472                	sw	t3,40(sp)
20402ed8:	d276                	sw	t4,36(sp)
20402eda:	d07a                	sw	t5,32(sp)
20402edc:	ce7e                	sw	t6,28(sp)
20402ede:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ee0:	c32ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402ee4:	872a                	mv	a4,a0
20402ee6:	070a                	slli	a4,a4,0x2
20402ee8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402eec:	97ba                	add	a5,a5,a4
20402eee:	439c                	lw	a5,0(a5)
20402ef0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20402ef4:	fac42783          	lw	a5,-84(s0)
20402ef8:	c78d                	beqz	a5,20402f22 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402efa:	fac42503          	lw	a0,-84(s0)
20402efe:	bbeff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402f02:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20402f06:	fa842783          	lw	a5,-88(s0)
20402f0a:	3207a783          	lw	a5,800(a5)
20402f0e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20402f12:	fa842783          	lw	a5,-88(s0)
20402f16:	3187a783          	lw	a5,792(a5)
20402f1a:	fa442583          	lw	a1,-92(s0)
20402f1e:	456d                	li	a0,27
20402f20:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20402f22:	0001                	nop
20402f24:	40f6                	lw	ra,92(sp)
20402f26:	42e6                	lw	t0,88(sp)
20402f28:	4356                	lw	t1,84(sp)
20402f2a:	43c6                	lw	t2,80(sp)
20402f2c:	4436                	lw	s0,76(sp)
20402f2e:	4526                	lw	a0,72(sp)
20402f30:	4596                	lw	a1,68(sp)
20402f32:	4606                	lw	a2,64(sp)
20402f34:	56f2                	lw	a3,60(sp)
20402f36:	5762                	lw	a4,56(sp)
20402f38:	57d2                	lw	a5,52(sp)
20402f3a:	5842                	lw	a6,48(sp)
20402f3c:	58b2                	lw	a7,44(sp)
20402f3e:	5e22                	lw	t3,40(sp)
20402f40:	5e92                	lw	t4,36(sp)
20402f42:	5f02                	lw	t5,32(sp)
20402f44:	4ff2                	lw	t6,28(sp)
20402f46:	6125                	addi	sp,sp,96
20402f48:	30200073          	mret

20402f4c <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20402f4c:	711d                	addi	sp,sp,-96
20402f4e:	ce86                	sw	ra,92(sp)
20402f50:	cc96                	sw	t0,88(sp)
20402f52:	ca9a                	sw	t1,84(sp)
20402f54:	c89e                	sw	t2,80(sp)
20402f56:	c6a2                	sw	s0,76(sp)
20402f58:	c4aa                	sw	a0,72(sp)
20402f5a:	c2ae                	sw	a1,68(sp)
20402f5c:	c0b2                	sw	a2,64(sp)
20402f5e:	de36                	sw	a3,60(sp)
20402f60:	dc3a                	sw	a4,56(sp)
20402f62:	da3e                	sw	a5,52(sp)
20402f64:	d842                	sw	a6,48(sp)
20402f66:	d646                	sw	a7,44(sp)
20402f68:	d472                	sw	t3,40(sp)
20402f6a:	d276                	sw	t4,36(sp)
20402f6c:	d07a                	sw	t5,32(sp)
20402f6e:	ce7e                	sw	t6,28(sp)
20402f70:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f72:	ba0ff0ef          	jal	ra,20402312 <__metal_myhart_id>
20402f76:	872a                	mv	a4,a0
20402f78:	070a                	slli	a4,a4,0x2
20402f7a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f7e:	97ba                	add	a5,a5,a4
20402f80:	439c                	lw	a5,0(a5)
20402f82:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20402f86:	fac42783          	lw	a5,-84(s0)
20402f8a:	c78d                	beqz	a5,20402fb4 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f8c:	fac42503          	lw	a0,-84(s0)
20402f90:	b2cff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20402f94:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20402f98:	fa842783          	lw	a5,-88(s0)
20402f9c:	3387a783          	lw	a5,824(a5)
20402fa0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20402fa4:	fa842783          	lw	a5,-88(s0)
20402fa8:	3307a783          	lw	a5,816(a5)
20402fac:	fa442583          	lw	a1,-92(s0)
20402fb0:	4571                	li	a0,28
20402fb2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20402fb4:	0001                	nop
20402fb6:	40f6                	lw	ra,92(sp)
20402fb8:	42e6                	lw	t0,88(sp)
20402fba:	4356                	lw	t1,84(sp)
20402fbc:	43c6                	lw	t2,80(sp)
20402fbe:	4436                	lw	s0,76(sp)
20402fc0:	4526                	lw	a0,72(sp)
20402fc2:	4596                	lw	a1,68(sp)
20402fc4:	4606                	lw	a2,64(sp)
20402fc6:	56f2                	lw	a3,60(sp)
20402fc8:	5762                	lw	a4,56(sp)
20402fca:	57d2                	lw	a5,52(sp)
20402fcc:	5842                	lw	a6,48(sp)
20402fce:	58b2                	lw	a7,44(sp)
20402fd0:	5e22                	lw	t3,40(sp)
20402fd2:	5e92                	lw	t4,36(sp)
20402fd4:	5f02                	lw	t5,32(sp)
20402fd6:	4ff2                	lw	t6,28(sp)
20402fd8:	6125                	addi	sp,sp,96
20402fda:	30200073          	mret

20402fde <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20402fde:	711d                	addi	sp,sp,-96
20402fe0:	ce86                	sw	ra,92(sp)
20402fe2:	cc96                	sw	t0,88(sp)
20402fe4:	ca9a                	sw	t1,84(sp)
20402fe6:	c89e                	sw	t2,80(sp)
20402fe8:	c6a2                	sw	s0,76(sp)
20402fea:	c4aa                	sw	a0,72(sp)
20402fec:	c2ae                	sw	a1,68(sp)
20402fee:	c0b2                	sw	a2,64(sp)
20402ff0:	de36                	sw	a3,60(sp)
20402ff2:	dc3a                	sw	a4,56(sp)
20402ff4:	da3e                	sw	a5,52(sp)
20402ff6:	d842                	sw	a6,48(sp)
20402ff8:	d646                	sw	a7,44(sp)
20402ffa:	d472                	sw	t3,40(sp)
20402ffc:	d276                	sw	t4,36(sp)
20402ffe:	d07a                	sw	t5,32(sp)
20403000:	ce7e                	sw	t6,28(sp)
20403002:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403004:	b0eff0ef          	jal	ra,20402312 <__metal_myhart_id>
20403008:	872a                	mv	a4,a0
2040300a:	070a                	slli	a4,a4,0x2
2040300c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403010:	97ba                	add	a5,a5,a4
20403012:	439c                	lw	a5,0(a5)
20403014:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403018:	fac42783          	lw	a5,-84(s0)
2040301c:	c78d                	beqz	a5,20403046 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040301e:	fac42503          	lw	a0,-84(s0)
20403022:	a9aff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20403026:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
2040302a:	fa842783          	lw	a5,-88(s0)
2040302e:	3507a783          	lw	a5,848(a5)
20403032:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403036:	fa842783          	lw	a5,-88(s0)
2040303a:	3487a783          	lw	a5,840(a5)
2040303e:	fa442583          	lw	a1,-92(s0)
20403042:	4575                	li	a0,29
20403044:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403046:	0001                	nop
20403048:	40f6                	lw	ra,92(sp)
2040304a:	42e6                	lw	t0,88(sp)
2040304c:	4356                	lw	t1,84(sp)
2040304e:	43c6                	lw	t2,80(sp)
20403050:	4436                	lw	s0,76(sp)
20403052:	4526                	lw	a0,72(sp)
20403054:	4596                	lw	a1,68(sp)
20403056:	4606                	lw	a2,64(sp)
20403058:	56f2                	lw	a3,60(sp)
2040305a:	5762                	lw	a4,56(sp)
2040305c:	57d2                	lw	a5,52(sp)
2040305e:	5842                	lw	a6,48(sp)
20403060:	58b2                	lw	a7,44(sp)
20403062:	5e22                	lw	t3,40(sp)
20403064:	5e92                	lw	t4,36(sp)
20403066:	5f02                	lw	t5,32(sp)
20403068:	4ff2                	lw	t6,28(sp)
2040306a:	6125                	addi	sp,sp,96
2040306c:	30200073          	mret

20403070 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403070:	711d                	addi	sp,sp,-96
20403072:	ce86                	sw	ra,92(sp)
20403074:	cc96                	sw	t0,88(sp)
20403076:	ca9a                	sw	t1,84(sp)
20403078:	c89e                	sw	t2,80(sp)
2040307a:	c6a2                	sw	s0,76(sp)
2040307c:	c4aa                	sw	a0,72(sp)
2040307e:	c2ae                	sw	a1,68(sp)
20403080:	c0b2                	sw	a2,64(sp)
20403082:	de36                	sw	a3,60(sp)
20403084:	dc3a                	sw	a4,56(sp)
20403086:	da3e                	sw	a5,52(sp)
20403088:	d842                	sw	a6,48(sp)
2040308a:	d646                	sw	a7,44(sp)
2040308c:	d472                	sw	t3,40(sp)
2040308e:	d276                	sw	t4,36(sp)
20403090:	d07a                	sw	t5,32(sp)
20403092:	ce7e                	sw	t6,28(sp)
20403094:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403096:	a7cff0ef          	jal	ra,20402312 <__metal_myhart_id>
2040309a:	872a                	mv	a4,a0
2040309c:	070a                	slli	a4,a4,0x2
2040309e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204030a2:	97ba                	add	a5,a5,a4
204030a4:	439c                	lw	a5,0(a5)
204030a6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204030aa:	fac42783          	lw	a5,-84(s0)
204030ae:	c78d                	beqz	a5,204030d8 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030b0:	fac42503          	lw	a0,-84(s0)
204030b4:	a08ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
204030b8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204030bc:	fa842783          	lw	a5,-88(s0)
204030c0:	3687a783          	lw	a5,872(a5)
204030c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
204030c8:	fa842783          	lw	a5,-88(s0)
204030cc:	3607a783          	lw	a5,864(a5)
204030d0:	fa442583          	lw	a1,-92(s0)
204030d4:	4579                	li	a0,30
204030d6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
204030d8:	0001                	nop
204030da:	40f6                	lw	ra,92(sp)
204030dc:	42e6                	lw	t0,88(sp)
204030de:	4356                	lw	t1,84(sp)
204030e0:	43c6                	lw	t2,80(sp)
204030e2:	4436                	lw	s0,76(sp)
204030e4:	4526                	lw	a0,72(sp)
204030e6:	4596                	lw	a1,68(sp)
204030e8:	4606                	lw	a2,64(sp)
204030ea:	56f2                	lw	a3,60(sp)
204030ec:	5762                	lw	a4,56(sp)
204030ee:	57d2                	lw	a5,52(sp)
204030f0:	5842                	lw	a6,48(sp)
204030f2:	58b2                	lw	a7,44(sp)
204030f4:	5e22                	lw	t3,40(sp)
204030f6:	5e92                	lw	t4,36(sp)
204030f8:	5f02                	lw	t5,32(sp)
204030fa:	4ff2                	lw	t6,28(sp)
204030fc:	6125                	addi	sp,sp,96
204030fe:	30200073          	mret

20403102 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403102:	711d                	addi	sp,sp,-96
20403104:	ce86                	sw	ra,92(sp)
20403106:	cc96                	sw	t0,88(sp)
20403108:	ca9a                	sw	t1,84(sp)
2040310a:	c89e                	sw	t2,80(sp)
2040310c:	c6a2                	sw	s0,76(sp)
2040310e:	c4aa                	sw	a0,72(sp)
20403110:	c2ae                	sw	a1,68(sp)
20403112:	c0b2                	sw	a2,64(sp)
20403114:	de36                	sw	a3,60(sp)
20403116:	dc3a                	sw	a4,56(sp)
20403118:	da3e                	sw	a5,52(sp)
2040311a:	d842                	sw	a6,48(sp)
2040311c:	d646                	sw	a7,44(sp)
2040311e:	d472                	sw	t3,40(sp)
20403120:	d276                	sw	t4,36(sp)
20403122:	d07a                	sw	t5,32(sp)
20403124:	ce7e                	sw	t6,28(sp)
20403126:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403128:	9eaff0ef          	jal	ra,20402312 <__metal_myhart_id>
2040312c:	872a                	mv	a4,a0
2040312e:	070a                	slli	a4,a4,0x2
20403130:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403134:	97ba                	add	a5,a5,a4
20403136:	439c                	lw	a5,0(a5)
20403138:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2040313c:	fac42783          	lw	a5,-84(s0)
20403140:	c78d                	beqz	a5,2040316a <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403142:	fac42503          	lw	a0,-84(s0)
20403146:	976ff0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
2040314a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
2040314e:	fa842783          	lw	a5,-88(s0)
20403152:	3807a783          	lw	a5,896(a5)
20403156:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
2040315a:	fa842783          	lw	a5,-88(s0)
2040315e:	3787a783          	lw	a5,888(a5)
20403162:	fa442583          	lw	a1,-92(s0)
20403166:	457d                	li	a0,31
20403168:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
2040316a:	0001                	nop
2040316c:	40f6                	lw	ra,92(sp)
2040316e:	42e6                	lw	t0,88(sp)
20403170:	4356                	lw	t1,84(sp)
20403172:	43c6                	lw	t2,80(sp)
20403174:	4436                	lw	s0,76(sp)
20403176:	4526                	lw	a0,72(sp)
20403178:	4596                	lw	a1,68(sp)
2040317a:	4606                	lw	a2,64(sp)
2040317c:	56f2                	lw	a3,60(sp)
2040317e:	5762                	lw	a4,56(sp)
20403180:	57d2                	lw	a5,52(sp)
20403182:	5842                	lw	a6,48(sp)
20403184:	58b2                	lw	a7,44(sp)
20403186:	5e22                	lw	t3,40(sp)
20403188:	5e92                	lw	t4,36(sp)
2040318a:	5f02                	lw	t5,32(sp)
2040318c:	4ff2                	lw	t6,28(sp)
2040318e:	6125                	addi	sp,sp,96
20403190:	30200073          	mret

20403194 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403194:	1101                	addi	sp,sp,-32
20403196:	ce22                	sw	s0,28(sp)
20403198:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040319a:	305027f3          	csrr	a5,mtvec
2040319e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204031a2:	fec42783          	lw	a5,-20(s0)
204031a6:	03f7f793          	andi	a5,a5,63
204031aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204031ae:	fec42703          	lw	a4,-20(s0)
204031b2:	4789                	li	a5,2
204031b4:	00f70d63          	beq	a4,a5,204031ce <__metal_controller_interrupt_vector_mode+0x3a>
204031b8:	fec42703          	lw	a4,-20(s0)
204031bc:	478d                	li	a5,3
204031be:	00f70a63          	beq	a4,a5,204031d2 <__metal_controller_interrupt_vector_mode+0x3e>
204031c2:	fec42703          	lw	a4,-20(s0)
204031c6:	4785                	li	a5,1
204031c8:	00f70763          	beq	a4,a5,204031d6 <__metal_controller_interrupt_vector_mode+0x42>
204031cc:	a039                	j	204031da <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
204031ce:	478d                	li	a5,3
204031d0:	a031                	j	204031dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204031d2:	4791                	li	a5,4
204031d4:	a021                	j	204031dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204031d6:	4785                	li	a5,1
204031d8:	a011                	j	204031dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
204031da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
204031dc:	853e                	mv	a0,a5
204031de:	4472                	lw	s0,28(sp)
204031e0:	6105                	addi	sp,sp,32
204031e2:	8082                	ret

204031e4 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204031e4:	7179                	addi	sp,sp,-48
204031e6:	d622                	sw	s0,44(sp)
204031e8:	1800                	addi	s0,sp,48
204031ea:	fca42e23          	sw	a0,-36(s0)
204031ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
204031f2:	305027f3          	csrr	a5,mtvec
204031f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204031fa:	fec42783          	lw	a5,-20(s0)
204031fe:	fc07f793          	andi	a5,a5,-64
20403202:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403206:	fd842783          	lw	a5,-40(s0)
2040320a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040320e:	fdc42703          	lw	a4,-36(s0)
20403212:	4791                	li	a5,4
20403214:	06e7e063          	bltu	a5,a4,20403274 <__metal_controller_interrupt_vector+0x90>
20403218:	fdc42783          	lw	a5,-36(s0)
2040321c:	00279713          	slli	a4,a5,0x2
20403220:	204057b7          	lui	a5,0x20405
20403224:	28078793          	addi	a5,a5,640 # 20405280 <__metal_driver_vtable_riscv_clint0+0x4c>
20403228:	97ba                	add	a5,a5,a4
2040322a:	439c                	lw	a5,0(a5)
2040322c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
2040322e:	fe842783          	lw	a5,-24(s0)
20403232:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403236:	fec42783          	lw	a5,-20(s0)
2040323a:	0027e793          	ori	a5,a5,2
2040323e:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403242:	a80d                	j	20403274 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403244:	fe842783          	lw	a5,-24(s0)
20403248:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040324c:	fec42783          	lw	a5,-20(s0)
20403250:	0037e793          	ori	a5,a5,3
20403254:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403258:	a831                	j	20403274 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040325a:	fe842783          	lw	a5,-24(s0)
2040325e:	0017e793          	ori	a5,a5,1
20403262:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403266:	a039                	j	20403274 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403268:	fe842783          	lw	a5,-24(s0)
2040326c:	9bf1                	andi	a5,a5,-4
2040326e:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403272:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403274:	0001                	nop
20403276:	5432                	lw	s0,44(sp)
20403278:	6145                	addi	sp,sp,48
2040327a:	8082                	ret

2040327c <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040327c:	1101                	addi	sp,sp,-32
2040327e:	ce22                	sw	s0,28(sp)
20403280:	1000                	addi	s0,sp,32
20403282:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403286:	fec42783          	lw	a5,-20(s0)
2040328a:	17f5                	addi	a5,a5,-3
2040328c:	4771                	li	a4,28
2040328e:	00f76d63          	bltu	a4,a5,204032a8 <__metal_valid_interrupt_id+0x2c>
20403292:	00279713          	slli	a4,a5,0x2
20403296:	204057b7          	lui	a5,0x20405
2040329a:	29478793          	addi	a5,a5,660 # 20405294 <__metal_driver_vtable_riscv_clint0+0x60>
2040329e:	97ba                	add	a5,a5,a4
204032a0:	439c                	lw	a5,0(a5)
204032a2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204032a4:	4785                	li	a5,1
204032a6:	a019                	j	204032ac <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204032a8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204032aa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204032ac:	853e                	mv	a0,a5
204032ae:	4472                	lw	s0,28(sp)
204032b0:	6105                	addi	sp,sp,32
204032b2:	8082                	ret

204032b4 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204032b4:	7179                	addi	sp,sp,-48
204032b6:	d606                	sw	ra,44(sp)
204032b8:	d422                	sw	s0,40(sp)
204032ba:	1800                	addi	s0,sp,48
204032bc:	fca42e23          	sw	a0,-36(s0)
204032c0:	fcb42c23          	sw	a1,-40(s0)
204032c4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204032c8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204032cc:	fdc42783          	lw	a5,-36(s0)
204032d0:	e399                	bnez	a5,204032d6 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204032d2:	57fd                	li	a5,-1
204032d4:	a849                	j	20403366 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204032d6:	fd842703          	lw	a4,-40(s0)
204032da:	47fd                	li	a5,31
204032dc:	08e7e063          	bltu	a5,a4,2040335c <__metal_local_interrupt_enable+0xa8>
204032e0:	fd842783          	lw	a5,-40(s0)
204032e4:	00279713          	slli	a4,a5,0x2
204032e8:	204057b7          	lui	a5,0x20405
204032ec:	30878793          	addi	a5,a5,776 # 20405308 <__metal_driver_vtable_riscv_clint0+0xd4>
204032f0:	97ba                	add	a5,a5,a4
204032f2:	439c                	lw	a5,0(a5)
204032f4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204032f6:	fd442783          	lw	a5,-44(s0)
204032fa:	c781                	beqz	a5,20403302 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204032fc:	830ff0ef          	jal	ra,2040232c <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403300:	a08d                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403302:	842ff0ef          	jal	ra,20402344 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403306:	a8b1                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403308:	fd442783          	lw	a5,-44(s0)
2040330c:	c781                	beqz	a5,20403314 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040330e:	84eff0ef          	jal	ra,2040235c <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403312:	a881                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403314:	860ff0ef          	jal	ra,20402374 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403318:	a0a9                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040331a:	fd442783          	lw	a5,-44(s0)
2040331e:	c781                	beqz	a5,20403326 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403320:	86cff0ef          	jal	ra,2040238c <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403324:	a83d                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403326:	880ff0ef          	jal	ra,204023a6 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040332a:	a825                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040332c:	fd442783          	lw	a5,-44(s0)
20403330:	c781                	beqz	a5,20403338 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403332:	88eff0ef          	jal	ra,204023c0 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403336:	a035                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20403338:	8a4ff0ef          	jal	ra,204023dc <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040333c:	a01d                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
2040333e:	fd442783          	lw	a5,-44(s0)
20403342:	c799                	beqz	a5,20403350 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403344:	fd842783          	lw	a5,-40(s0)
20403348:	853e                	mv	a0,a5
2040334a:	8aeff0ef          	jal	ra,204023f8 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
2040334e:	a811                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403350:	fd842783          	lw	a5,-40(s0)
20403354:	853e                	mv	a0,a5
20403356:	8ceff0ef          	jal	ra,20402424 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040335a:	a021                	j	20403362 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040335c:	57fd                	li	a5,-1
2040335e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403362:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403366:	853e                	mv	a0,a5
20403368:	50b2                	lw	ra,44(sp)
2040336a:	5422                	lw	s0,40(sp)
2040336c:	6145                	addi	sp,sp,48
2040336e:	8082                	ret

20403370 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403370:	7179                	addi	sp,sp,-48
20403372:	d622                	sw	s0,44(sp)
20403374:	1800                	addi	s0,sp,48
20403376:	fca42e23          	sw	a0,-36(s0)
2040337a:	fcb42c23          	sw	a1,-40(s0)
2040337e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403382:	fdc42783          	lw	a5,-36(s0)
20403386:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040338a:	fd842703          	lw	a4,-40(s0)
2040338e:	47ad                	li	a5,11
20403390:	02e7c263          	blt	a5,a4,204033b4 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403394:	fd442783          	lw	a5,-44(s0)
20403398:	cf91                	beqz	a5,204033b4 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040339a:	fec42703          	lw	a4,-20(s0)
2040339e:	fd842783          	lw	a5,-40(s0)
204033a2:	0e078793          	addi	a5,a5,224
204033a6:	078a                	slli	a5,a5,0x2
204033a8:	97ba                	add	a5,a5,a4
204033aa:	fd442703          	lw	a4,-44(s0)
204033ae:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204033b0:	4781                	li	a5,0
204033b2:	a011                	j	204033b6 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204033b4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204033b6:	853e                	mv	a0,a5
204033b8:	5432                	lw	s0,44(sp)
204033ba:	6145                	addi	sp,sp,48
204033bc:	8082                	ret

204033be <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204033be:	7139                	addi	sp,sp,-64
204033c0:	de06                	sw	ra,60(sp)
204033c2:	dc22                	sw	s0,56(sp)
204033c4:	0080                	addi	s0,sp,64
204033c6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204033ca:	fcc42783          	lw	a5,-52(s0)
204033ce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204033d2:	fe442783          	lw	a5,-28(s0)
204033d6:	43dc                	lw	a5,4(a5)
204033d8:	10079d63          	bnez	a5,204034f2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204033dc:	57fd                	li	a5,-1
204033de:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204033e2:	57fd                	li	a5,-1
204033e4:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204033e8:	301027f3          	csrr	a5,misa
204033ec:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204033f0:	fe042703          	lw	a4,-32(s0)
204033f4:	6789                	lui	a5,0x2
204033f6:	8ff9                	and	a5,a5,a4
204033f8:	e799                	bnez	a5,20403406 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204033fa:	fe042703          	lw	a4,-32(s0)
204033fe:	000407b7          	lui	a5,0x40
20403402:	8ff9                	and	a5,a5,a4
20403404:	c799                	beqz	a5,20403412 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403406:	57fd                	li	a5,-1
20403408:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040340c:	57fd                	li	a5,-1
2040340e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403412:	fe042703          	lw	a4,-32(s0)
20403416:	000407b7          	lui	a5,0x40
2040341a:	8ff9                	and	a5,a5,a4
2040341c:	c781                	beqz	a5,20403424 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040341e:	57fd                	li	a5,-1
20403420:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403424:	fe042623          	sw	zero,-20(s0)
20403428:	a0b9                	j	20403476 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040342a:	fe442683          	lw	a3,-28(s0)
2040342e:	fec42703          	lw	a4,-20(s0)
20403432:	87ba                	mv	a5,a4
20403434:	0786                	slli	a5,a5,0x1
20403436:	97ba                	add	a5,a5,a4
20403438:	078e                	slli	a5,a5,0x3
2040343a:	97b6                	add	a5,a5,a3
2040343c:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403440:	fe442683          	lw	a3,-28(s0)
20403444:	fec42703          	lw	a4,-20(s0)
20403448:	87ba                	mv	a5,a4
2040344a:	0786                	slli	a5,a5,0x1
2040344c:	97ba                	add	a5,a5,a4
2040344e:	078e                	slli	a5,a5,0x3
20403450:	97b6                	add	a5,a5,a3
20403452:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403456:	fe442683          	lw	a3,-28(s0)
2040345a:	fec42703          	lw	a4,-20(s0)
2040345e:	87ba                	mv	a5,a4
20403460:	0786                	slli	a5,a5,0x1
20403462:	97ba                	add	a5,a5,a4
20403464:	078e                	slli	a5,a5,0x3
20403466:	97b6                	add	a5,a5,a3
20403468:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040346c:	fec42783          	lw	a5,-20(s0)
20403470:	0785                	addi	a5,a5,1
20403472:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403476:	fec42703          	lw	a4,-20(s0)
2040347a:	47fd                	li	a5,31
2040347c:	fae7d7e3          	bge	a5,a4,2040342a <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403480:	fe042423          	sw	zero,-24(s0)
20403484:	a01d                	j	204034aa <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403486:	fe442703          	lw	a4,-28(s0)
2040348a:	fe842783          	lw	a5,-24(s0)
2040348e:	0e078793          	addi	a5,a5,224
20403492:	078a                	slli	a5,a5,0x2
20403494:	97ba                	add	a5,a5,a4
20403496:	20402737          	lui	a4,0x20402
2040349a:	45070713          	addi	a4,a4,1104 # 20402450 <__metal_default_exception_handler>
2040349e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204034a0:	fe842783          	lw	a5,-24(s0)
204034a4:	0785                	addi	a5,a5,1
204034a6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204034aa:	fe842703          	lw	a4,-24(s0)
204034ae:	47ad                	li	a5,11
204034b0:	fce7dbe3          	bge	a5,a4,20403486 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204034b4:	204027b7          	lui	a5,0x20402
204034b8:	70078593          	addi	a1,a5,1792 # 20402700 <__metal_exception_handler>
204034bc:	4501                	li	a0,0
204034be:	331d                	jal	204031e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204034c0:	301027f3          	csrr	a5,misa
204034c4:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204034c8:	fdc42703          	lw	a4,-36(s0)
204034cc:	67c1                	lui	a5,0x10
204034ce:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204034d2:	8ff9                	and	a5,a5,a4
204034d4:	cb99                	beqz	a5,204034ea <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204034d6:	300027f3          	csrr	a5,mstatus
204034da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204034de:	fdc42703          	lw	a4,-36(s0)
204034e2:	6789                	lui	a5,0x2
204034e4:	8fd9                	or	a5,a5,a4
204034e6:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204034ea:	fe442783          	lw	a5,-28(s0)
204034ee:	4705                	li	a4,1
204034f0:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204034f2:	0001                	nop
204034f4:	50f2                	lw	ra,60(sp)
204034f6:	5462                	lw	s0,56(sp)
204034f8:	6121                	addi	sp,sp,64
204034fa:	8082                	ret

204034fc <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204034fc:	7179                	addi	sp,sp,-48
204034fe:	d606                	sw	ra,44(sp)
20403500:	d422                	sw	s0,40(sp)
20403502:	1800                	addi	s0,sp,48
20403504:	fca42e23          	sw	a0,-36(s0)
20403508:	fcb42c23          	sw	a1,-40(s0)
2040350c:	fcc42a23          	sw	a2,-44(s0)
20403510:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403514:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403518:	fdc42783          	lw	a5,-36(s0)
2040351c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403520:	fd842503          	lw	a0,-40(s0)
20403524:	3ba1                	jal	2040327c <__metal_valid_interrupt_id>
20403526:	87aa                	mv	a5,a0
20403528:	e399                	bnez	a5,2040352e <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
2040352a:	57d5                	li	a5,-11
2040352c:	aa11                	j	20403640 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
2040352e:	fd442783          	lw	a5,-44(s0)
20403532:	cf85                	beqz	a5,2040356a <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403534:	fe842683          	lw	a3,-24(s0)
20403538:	fd842703          	lw	a4,-40(s0)
2040353c:	87ba                	mv	a5,a4
2040353e:	0786                	slli	a5,a5,0x1
20403540:	97ba                	add	a5,a5,a4
20403542:	078e                	slli	a5,a5,0x3
20403544:	97b6                	add	a5,a5,a3
20403546:	fd442703          	lw	a4,-44(s0)
2040354a:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
2040354e:	fe842683          	lw	a3,-24(s0)
20403552:	fd842703          	lw	a4,-40(s0)
20403556:	87ba                	mv	a5,a4
20403558:	0786                	slli	a5,a5,0x1
2040355a:	97ba                	add	a5,a5,a4
2040355c:	078e                	slli	a5,a5,0x3
2040355e:	97b6                	add	a5,a5,a3
20403560:	fd042703          	lw	a4,-48(s0)
20403564:	08e7ac23          	sw	a4,152(a5)
20403568:	a8d1                	j	2040363c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
2040356a:	fd842783          	lw	a5,-40(s0)
2040356e:	17f5                	addi	a5,a5,-3
20403570:	4771                	li	a4,28
20403572:	0cf76263          	bltu	a4,a5,20403636 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403576:	00279713          	slli	a4,a5,0x2
2040357a:	204057b7          	lui	a5,0x20405
2040357e:	38878793          	addi	a5,a5,904 # 20405388 <__metal_driver_vtable_riscv_clint0+0x154>
20403582:	97ba                	add	a5,a5,a4
20403584:	439c                	lw	a5,0(a5)
20403586:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403588:	fe842683          	lw	a3,-24(s0)
2040358c:	fd842703          	lw	a4,-40(s0)
20403590:	87ba                	mv	a5,a4
20403592:	0786                	slli	a5,a5,0x1
20403594:	97ba                	add	a5,a5,a4
20403596:	078e                	slli	a5,a5,0x3
20403598:	97b6                	add	a5,a5,a3
2040359a:	20402737          	lui	a4,0x20402
2040359e:	53c70713          	addi	a4,a4,1340 # 2040253c <__metal_default_sw_handler>
204035a2:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204035a6:	fe842683          	lw	a3,-24(s0)
204035aa:	fd842703          	lw	a4,-40(s0)
204035ae:	87ba                	mv	a5,a4
204035b0:	0786                	slli	a5,a5,0x1
204035b2:	97ba                	add	a5,a5,a4
204035b4:	078e                	slli	a5,a5,0x3
204035b6:	97b6                	add	a5,a5,a3
204035b8:	fd042703          	lw	a4,-48(s0)
204035bc:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204035c0:	a8b5                	j	2040363c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204035c2:	fe842683          	lw	a3,-24(s0)
204035c6:	fd842703          	lw	a4,-40(s0)
204035ca:	87ba                	mv	a5,a4
204035cc:	0786                	slli	a5,a5,0x1
204035ce:	97ba                	add	a5,a5,a4
204035d0:	078e                	slli	a5,a5,0x3
204035d2:	97b6                	add	a5,a5,a3
204035d4:	20402737          	lui	a4,0x20402
204035d8:	62e70713          	addi	a4,a4,1582 # 2040262e <__metal_default_timer_handler>
204035dc:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204035e0:	fe842683          	lw	a3,-24(s0)
204035e4:	fd842703          	lw	a4,-40(s0)
204035e8:	87ba                	mv	a5,a4
204035ea:	0786                	slli	a5,a5,0x1
204035ec:	97ba                	add	a5,a5,a4
204035ee:	078e                	slli	a5,a5,0x3
204035f0:	97b6                	add	a5,a5,a3
204035f2:	fd042703          	lw	a4,-48(s0)
204035f6:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
204035fa:	a089                	j	2040363c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204035fc:	fe842683          	lw	a3,-24(s0)
20403600:	fd842703          	lw	a4,-40(s0)
20403604:	87ba                	mv	a5,a4
20403606:	0786                	slli	a5,a5,0x1
20403608:	97ba                	add	a5,a5,a4
2040360a:	078e                	slli	a5,a5,0x3
2040360c:	97b6                	add	a5,a5,a3
2040360e:	20402737          	lui	a4,0x20402
20403612:	46870713          	addi	a4,a4,1128 # 20402468 <__metal_default_interrupt_handler>
20403616:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040361a:	fe842683          	lw	a3,-24(s0)
2040361e:	fd842703          	lw	a4,-40(s0)
20403622:	87ba                	mv	a5,a4
20403624:	0786                	slli	a5,a5,0x1
20403626:	97ba                	add	a5,a5,a4
20403628:	078e                	slli	a5,a5,0x3
2040362a:	97b6                	add	a5,a5,a3
2040362c:	fd042703          	lw	a4,-48(s0)
20403630:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403634:	a021                	j	2040363c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403636:	57d1                	li	a5,-12
20403638:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
2040363c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403640:	853e                	mv	a0,a5
20403642:	50b2                	lw	ra,44(sp)
20403644:	5422                	lw	s0,40(sp)
20403646:	6145                	addi	sp,sp,48
20403648:	8082                	ret

2040364a <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
2040364a:	1101                	addi	sp,sp,-32
2040364c:	ce06                	sw	ra,28(sp)
2040364e:	cc22                	sw	s0,24(sp)
20403650:	1000                	addi	s0,sp,32
20403652:	fea42623          	sw	a0,-20(s0)
20403656:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
2040365a:	fe842783          	lw	a5,-24(s0)
2040365e:	4605                	li	a2,1
20403660:	85be                	mv	a1,a5
20403662:	fec42503          	lw	a0,-20(s0)
20403666:	31b9                	jal	204032b4 <__metal_local_interrupt_enable>
20403668:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
2040366a:	853e                	mv	a0,a5
2040366c:	40f2                	lw	ra,28(sp)
2040366e:	4462                	lw	s0,24(sp)
20403670:	6105                	addi	sp,sp,32
20403672:	8082                	ret

20403674 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403674:	1101                	addi	sp,sp,-32
20403676:	ce06                	sw	ra,28(sp)
20403678:	cc22                	sw	s0,24(sp)
2040367a:	1000                	addi	s0,sp,32
2040367c:	fea42623          	sw	a0,-20(s0)
20403680:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403684:	fe842783          	lw	a5,-24(s0)
20403688:	4601                	li	a2,0
2040368a:	85be                	mv	a1,a5
2040368c:	fec42503          	lw	a0,-20(s0)
20403690:	3115                	jal	204032b4 <__metal_local_interrupt_enable>
20403692:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403694:	853e                	mv	a0,a5
20403696:	40f2                	lw	ra,28(sp)
20403698:	4462                	lw	s0,24(sp)
2040369a:	6105                	addi	sp,sp,32
2040369c:	8082                	ret

2040369e <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
2040369e:	1101                	addi	sp,sp,-32
204036a0:	ce06                	sw	ra,28(sp)
204036a2:	cc22                	sw	s0,24(sp)
204036a4:	1000                	addi	s0,sp,32
204036a6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204036aa:	aebff0ef          	jal	ra,20403194 <__metal_controller_interrupt_vector_mode>
204036ae:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204036b0:	853e                	mv	a0,a5
204036b2:	40f2                	lw	ra,28(sp)
204036b4:	4462                	lw	s0,24(sp)
204036b6:	6105                	addi	sp,sp,32
204036b8:	8082                	ret

204036ba <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204036ba:	7179                	addi	sp,sp,-48
204036bc:	d606                	sw	ra,44(sp)
204036be:	d422                	sw	s0,40(sp)
204036c0:	1800                	addi	s0,sp,48
204036c2:	fca42e23          	sw	a0,-36(s0)
204036c6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204036ca:	fdc42783          	lw	a5,-36(s0)
204036ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204036d2:	fd842783          	lw	a5,-40(s0)
204036d6:	eb99                	bnez	a5,204036ec <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204036d8:	204027b7          	lui	a5,0x20402
204036dc:	70078593          	addi	a1,a5,1792 # 20402700 <__metal_exception_handler>
204036e0:	fd842503          	lw	a0,-40(s0)
204036e4:	b01ff0ef          	jal	ra,204031e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204036e8:	4781                	li	a5,0
204036ea:	a00d                	j	2040370c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204036ec:	fd842703          	lw	a4,-40(s0)
204036f0:	4785                	li	a5,1
204036f2:	00f71c63          	bne	a4,a5,2040370a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
204036f6:	204057b7          	lui	a5,0x20405
204036fa:	00078593          	mv	a1,a5
204036fe:	fd842503          	lw	a0,-40(s0)
20403702:	ae3ff0ef          	jal	ra,204031e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403706:	4781                	li	a5,0
20403708:	a011                	j	2040370c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040370a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
2040370c:	853e                	mv	a0,a5
2040370e:	50b2                	lw	ra,44(sp)
20403710:	5422                	lw	s0,40(sp)
20403712:	6145                	addi	sp,sp,48
20403714:	8082                	ret

20403716 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403716:	1101                	addi	sp,sp,-32
20403718:	ce22                	sw	s0,28(sp)
2040371a:	1000                	addi	s0,sp,32
2040371c:	fea42623          	sw	a0,-20(s0)
20403720:	feb42423          	sw	a1,-24(s0)
20403724:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403728:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
2040372a:	853e                	mv	a0,a5
2040372c:	4472                	lw	s0,28(sp)
2040372e:	6105                	addi	sp,sp,32
20403730:	8082                	ret

20403732 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403732:	7139                	addi	sp,sp,-64
20403734:	de22                	sw	s0,60(sp)
20403736:	0080                	addi	s0,sp,64
20403738:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
2040373c:	4301                	li	t1,0
2040373e:	4381                	li	t2,0
20403740:	fe642423          	sw	t1,-24(s0)
20403744:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403748:	b8002573          	csrr	a0,mcycleh
2040374c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403750:	b0002573          	csrr	a0,mcycle
20403754:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403758:	b8002573          	csrr	a0,mcycleh
2040375c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403760:	fe442883          	lw	a7,-28(s0)
20403764:	fdc42503          	lw	a0,-36(s0)
20403768:	02a89563          	bne	a7,a0,20403792 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
2040376c:	fe442503          	lw	a0,-28(s0)
20403770:	85aa                	mv	a1,a0
20403772:	4601                	li	a2,0
20403774:	00059813          	slli	a6,a1,0x0
20403778:	4781                	li	a5,0
2040377a:	fe042603          	lw	a2,-32(s0)
2040377e:	86b2                	mv	a3,a2
20403780:	4701                	li	a4,0
20403782:	00d7e633          	or	a2,a5,a3
20403786:	fec42423          	sw	a2,-24(s0)
2040378a:	00e867b3          	or	a5,a6,a4
2040378e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403792:	fe842783          	lw	a5,-24(s0)
20403796:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
2040379a:	853e                	mv	a0,a5
2040379c:	85c2                	mv	a1,a6
2040379e:	5472                	lw	s0,60(sp)
204037a0:	6121                	addi	sp,sp,64
204037a2:	8082                	ret

204037a4 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204037a4:	7179                	addi	sp,sp,-48
204037a6:	d606                	sw	ra,44(sp)
204037a8:	d422                	sw	s0,40(sp)
204037aa:	d24a                	sw	s2,36(sp)
204037ac:	d04e                	sw	s3,32(sp)
204037ae:	1800                	addi	s0,sp,48
204037b0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204037b4:	fdc42783          	lw	a5,-36(s0)
204037b8:	e781                	bnez	a5,204037c0 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204037ba:	4901                	li	s2,0
204037bc:	4981                	li	s3,0
204037be:	a821                	j	204037d6 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204037c0:	fdc42503          	lw	a0,-36(s0)
204037c4:	acffe0ef          	jal	ra,20402292 <__metal_driver_cpu_timebase>
204037c8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204037cc:	fec42783          	lw	a5,-20(s0)
204037d0:	893e                	mv	s2,a5
204037d2:	87fd                	srai	a5,a5,0x1f
204037d4:	89be                	mv	s3,a5
204037d6:	87ca                	mv	a5,s2
204037d8:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204037da:	853e                	mv	a0,a5
204037dc:	85c2                	mv	a1,a6
204037de:	50b2                	lw	ra,44(sp)
204037e0:	5422                	lw	s0,40(sp)
204037e2:	5912                	lw	s2,36(sp)
204037e4:	5982                	lw	s3,32(sp)
204037e6:	6145                	addi	sp,sp,48
204037e8:	8082                	ret

204037ea <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204037ea:	7179                	addi	sp,sp,-48
204037ec:	d606                	sw	ra,44(sp)
204037ee:	d422                	sw	s0,40(sp)
204037f0:	1800                	addi	s0,sp,48
204037f2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
204037f6:	4781                	li	a5,0
204037f8:	4801                	li	a6,0
204037fa:	fef42023          	sw	a5,-32(s0)
204037fe:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403802:	fdc42503          	lw	a0,-36(s0)
20403806:	ab7fe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
2040380a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
2040380e:	fec42783          	lw	a5,-20(s0)
20403812:	c78d                	beqz	a5,2040383c <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403814:	fec42783          	lw	a5,-20(s0)
20403818:	13c7a783          	lw	a5,316(a5) # 2040513c <_exit+0x4e>
2040381c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403820:	fe842783          	lw	a5,-24(s0)
20403824:	cf81                	beqz	a5,2040383c <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403826:	fe842783          	lw	a5,-24(s0)
2040382a:	439c                	lw	a5,0(a5)
2040382c:	43f8                	lw	a4,68(a5)
2040382e:	fe040793          	addi	a5,s0,-32
20403832:	863e                	mv	a2,a5
20403834:	4585                	li	a1,1
20403836:	fe842503          	lw	a0,-24(s0)
2040383a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
2040383c:	fe042783          	lw	a5,-32(s0)
20403840:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403844:	853e                	mv	a0,a5
20403846:	85c2                	mv	a1,a6
20403848:	50b2                	lw	ra,44(sp)
2040384a:	5422                	lw	s0,40(sp)
2040384c:	6145                	addi	sp,sp,48
2040384e:	8082                	ret

20403850 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403850:	7179                	addi	sp,sp,-48
20403852:	d606                	sw	ra,44(sp)
20403854:	d422                	sw	s0,40(sp)
20403856:	d226                	sw	s1,36(sp)
20403858:	1800                	addi	s0,sp,48
2040385a:	fca42e23          	sw	a0,-36(s0)
2040385e:	fcb42823          	sw	a1,-48(s0)
20403862:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403866:	57fd                	li	a5,-1
20403868:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040386c:	fdc42503          	lw	a0,-36(s0)
20403870:	a4dfe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20403874:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403878:	fe842783          	lw	a5,-24(s0)
2040387c:	cf8d                	beqz	a5,204038b6 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040387e:	fe842783          	lw	a5,-24(s0)
20403882:	13c7a783          	lw	a5,316(a5)
20403886:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
2040388a:	fe442783          	lw	a5,-28(s0)
2040388e:	c785                	beqz	a5,204038b6 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403890:	fe442783          	lw	a5,-28(s0)
20403894:	439c                	lw	a5,0(a5)
20403896:	47a4                	lw	s1,72(a5)
20403898:	fdc42503          	lw	a0,-36(s0)
2040389c:	9d3fe0ef          	jal	ra,2040226e <__metal_driver_cpu_hartid>
204038a0:	87aa                	mv	a5,a0
204038a2:	fd042603          	lw	a2,-48(s0)
204038a6:	fd442683          	lw	a3,-44(s0)
204038aa:	85be                	mv	a1,a5
204038ac:	fe442503          	lw	a0,-28(s0)
204038b0:	9482                	jalr	s1
204038b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
204038b6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
204038ba:	853e                	mv	a0,a5
204038bc:	50b2                	lw	ra,44(sp)
204038be:	5422                	lw	s0,40(sp)
204038c0:	5492                	lw	s1,36(sp)
204038c2:	6145                	addi	sp,sp,48
204038c4:	8082                	ret

204038c6 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
204038c6:	1101                	addi	sp,sp,-32
204038c8:	ce22                	sw	s0,28(sp)
204038ca:	1000                	addi	s0,sp,32
204038cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204038d0:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
204038d4:	853e                	mv	a0,a5
204038d6:	4472                	lw	s0,28(sp)
204038d8:	6105                	addi	sp,sp,32
204038da:	8082                	ret

204038dc <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
204038dc:	1101                	addi	sp,sp,-32
204038de:	ce22                	sw	s0,28(sp)
204038e0:	1000                	addi	s0,sp,32
204038e2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
204038e6:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
204038e8:	853e                	mv	a0,a5
204038ea:	4472                	lw	s0,28(sp)
204038ec:	6105                	addi	sp,sp,32
204038ee:	8082                	ret

204038f0 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
204038f0:	1101                	addi	sp,sp,-32
204038f2:	ce22                	sw	s0,28(sp)
204038f4:	1000                	addi	s0,sp,32
204038f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
204038fa:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
204038fe:	853e                	mv	a0,a5
20403900:	4472                	lw	s0,28(sp)
20403902:	6105                	addi	sp,sp,32
20403904:	8082                	ret

20403906 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403906:	1101                	addi	sp,sp,-32
20403908:	ce22                	sw	s0,28(sp)
2040390a:	1000                	addi	s0,sp,32
2040390c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403910:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403912:	853e                	mv	a0,a5
20403914:	4472                	lw	s0,28(sp)
20403916:	6105                	addi	sp,sp,32
20403918:	8082                	ret

2040391a <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
2040391a:	7179                	addi	sp,sp,-48
2040391c:	d606                	sw	ra,44(sp)
2040391e:	d422                	sw	s0,40(sp)
20403920:	1800                	addi	s0,sp,48
20403922:	fca42e23          	sw	a0,-36(s0)
20403926:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
2040392a:	57fd                	li	a5,-1
2040392c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403930:	fdc42503          	lw	a0,-36(s0)
20403934:	989fe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20403938:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
2040393c:	fe842783          	lw	a5,-24(s0)
20403940:	c79d                	beqz	a5,2040396e <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403942:	fe842783          	lw	a5,-24(s0)
20403946:	0dc7a783          	lw	a5,220(a5)
2040394a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
2040394e:	fe442783          	lw	a5,-28(s0)
20403952:	cf91                	beqz	a5,2040396e <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403954:	fe442783          	lw	a5,-28(s0)
20403958:	439c                	lw	a5,0(a5)
2040395a:	43f8                	lw	a4,68(a5)
2040395c:	fd840793          	addi	a5,s0,-40
20403960:	863e                	mv	a2,a5
20403962:	458d                	li	a1,3
20403964:	fe442503          	lw	a0,-28(s0)
20403968:	9702                	jalr	a4
2040396a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
2040396e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403972:	853e                	mv	a0,a5
20403974:	50b2                	lw	ra,44(sp)
20403976:	5422                	lw	s0,40(sp)
20403978:	6145                	addi	sp,sp,48
2040397a:	8082                	ret

2040397c <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
2040397c:	7179                	addi	sp,sp,-48
2040397e:	d606                	sw	ra,44(sp)
20403980:	d422                	sw	s0,40(sp)
20403982:	1800                	addi	s0,sp,48
20403984:	fca42e23          	sw	a0,-36(s0)
20403988:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
2040398c:	57fd                	li	a5,-1
2040398e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403992:	fdc42503          	lw	a0,-36(s0)
20403996:	927fe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
2040399a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
2040399e:	fe842783          	lw	a5,-24(s0)
204039a2:	c79d                	beqz	a5,204039d0 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204039a4:	fe842783          	lw	a5,-24(s0)
204039a8:	0dc7a783          	lw	a5,220(a5)
204039ac:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
204039b0:	fe442783          	lw	a5,-28(s0)
204039b4:	cf91                	beqz	a5,204039d0 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
204039b6:	fe442783          	lw	a5,-28(s0)
204039ba:	439c                	lw	a5,0(a5)
204039bc:	43f8                	lw	a4,68(a5)
204039be:	fd840793          	addi	a5,s0,-40
204039c2:	863e                	mv	a2,a5
204039c4:	4589                	li	a1,2
204039c6:	fe442503          	lw	a0,-28(s0)
204039ca:	9702                	jalr	a4
204039cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
204039d0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
204039d4:	853e                	mv	a0,a5
204039d6:	50b2                	lw	ra,44(sp)
204039d8:	5422                	lw	s0,40(sp)
204039da:	6145                	addi	sp,sp,48
204039dc:	8082                	ret

204039de <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
204039de:	7179                	addi	sp,sp,-48
204039e0:	d606                	sw	ra,44(sp)
204039e2:	d422                	sw	s0,40(sp)
204039e4:	1800                	addi	s0,sp,48
204039e6:	fca42e23          	sw	a0,-36(s0)
204039ea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
204039ee:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204039f2:	fdc42503          	lw	a0,-36(s0)
204039f6:	8c7fe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
204039fa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
204039fe:	fe842783          	lw	a5,-24(s0)
20403a02:	c79d                	beqz	a5,20403a30 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403a04:	fe842783          	lw	a5,-24(s0)
20403a08:	0dc7a783          	lw	a5,220(a5)
20403a0c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403a10:	fe442783          	lw	a5,-28(s0)
20403a14:	cf91                	beqz	a5,20403a30 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403a16:	fe442783          	lw	a5,-28(s0)
20403a1a:	439c                	lw	a5,0(a5)
20403a1c:	43f8                	lw	a4,68(a5)
20403a1e:	fd840793          	addi	a5,s0,-40
20403a22:	863e                	mv	a2,a5
20403a24:	4591                	li	a1,4
20403a26:	fe442503          	lw	a0,-28(s0)
20403a2a:	9702                	jalr	a4
20403a2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403a30:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403a34:	853e                	mv	a0,a5
20403a36:	50b2                	lw	ra,44(sp)
20403a38:	5422                	lw	s0,40(sp)
20403a3a:	6145                	addi	sp,sp,48
20403a3c:	8082                	ret

20403a3e <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403a3e:	1101                	addi	sp,sp,-32
20403a40:	ce06                	sw	ra,28(sp)
20403a42:	cc22                	sw	s0,24(sp)
20403a44:	1000                	addi	s0,sp,32
20403a46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403a4a:	fec42503          	lw	a0,-20(s0)
20403a4e:	86ffe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20403a52:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403a54:	853e                	mv	a0,a5
20403a56:	40f2                	lw	ra,28(sp)
20403a58:	4462                	lw	s0,24(sp)
20403a5a:	6105                	addi	sp,sp,32
20403a5c:	8082                	ret

20403a5e <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403a5e:	7179                	addi	sp,sp,-48
20403a60:	d606                	sw	ra,44(sp)
20403a62:	d422                	sw	s0,40(sp)
20403a64:	1800                	addi	s0,sp,48
20403a66:	fca42e23          	sw	a0,-36(s0)
20403a6a:	fcb42c23          	sw	a1,-40(s0)
20403a6e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a72:	fdc42503          	lw	a0,-36(s0)
20403a76:	847fe0ef          	jal	ra,204022bc <__metal_driver_cpu_interrupt_controller>
20403a7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403a7e:	fec42783          	lw	a5,-20(s0)
20403a82:	cb99                	beqz	a5,20403a98 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403a84:	fd442603          	lw	a2,-44(s0)
20403a88:	fd842583          	lw	a1,-40(s0)
20403a8c:	fec42503          	lw	a0,-20(s0)
20403a90:	8e1ff0ef          	jal	ra,20403370 <__metal_exception_register>
20403a94:	87aa                	mv	a5,a0
20403a96:	a011                	j	20403a9a <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403a98:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403a9a:	853e                	mv	a0,a5
20403a9c:	50b2                	lw	ra,44(sp)
20403a9e:	5422                	lw	s0,40(sp)
20403aa0:	6145                	addi	sp,sp,48
20403aa2:	8082                	ret

20403aa4 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403aa4:	1101                	addi	sp,sp,-32
20403aa6:	ce22                	sw	s0,28(sp)
20403aa8:	1000                	addi	s0,sp,32
20403aaa:	fea42623          	sw	a0,-20(s0)
20403aae:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403ab2:	fe842783          	lw	a5,-24(s0)
20403ab6:	0007d783          	lhu	a5,0(a5)
20403aba:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403abe:	478d                	li	a5,3
20403ac0:	00f71463          	bne	a4,a5,20403ac8 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403ac4:	4791                	li	a5,4
20403ac6:	a011                	j	20403aca <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403ac8:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403aca:	853e                	mv	a0,a5
20403acc:	4472                	lw	s0,28(sp)
20403ace:	6105                	addi	sp,sp,32
20403ad0:	8082                	ret

20403ad2 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403ad2:	7179                	addi	sp,sp,-48
20403ad4:	d622                	sw	s0,44(sp)
20403ad6:	1800                	addi	s0,sp,48
20403ad8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403adc:	341027f3          	csrr	a5,mepc
20403ae0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403ae4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403ae8:	853e                	mv	a0,a5
20403aea:	5432                	lw	s0,44(sp)
20403aec:	6145                	addi	sp,sp,48
20403aee:	8082                	ret

20403af0 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403af0:	1101                	addi	sp,sp,-32
20403af2:	ce22                	sw	s0,28(sp)
20403af4:	1000                	addi	s0,sp,32
20403af6:	fea42623          	sw	a0,-20(s0)
20403afa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403afe:	fe842783          	lw	a5,-24(s0)
20403b02:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403b06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403b08:	853e                	mv	a0,a5
20403b0a:	4472                	lw	s0,28(sp)
20403b0c:	6105                	addi	sp,sp,32
20403b0e:	8082                	ret

20403b10 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403b10:	1101                	addi	sp,sp,-32
20403b12:	ce22                	sw	s0,28(sp)
20403b14:	1000                	addi	s0,sp,32
20403b16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403b1a:	fec42703          	lw	a4,-20(s0)
20403b1e:	800007b7          	lui	a5,0x80000
20403b22:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffb194>
20403b26:	00f71563          	bne	a4,a5,20403b30 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403b2a:	0c0007b7          	lui	a5,0xc000
20403b2e:	a011                	j	20403b32 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403b30:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403b32:	853e                	mv	a0,a5
20403b34:	4472                	lw	s0,28(sp)
20403b36:	6105                	addi	sp,sp,32
20403b38:	8082                	ret

20403b3a <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403b3a:	1101                	addi	sp,sp,-32
20403b3c:	ce22                	sw	s0,28(sp)
20403b3e:	1000                	addi	s0,sp,32
20403b40:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403b44:	fec42703          	lw	a4,-20(s0)
20403b48:	800007b7          	lui	a5,0x80000
20403b4c:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffb194>
20403b50:	00f71463          	bne	a4,a5,20403b58 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403b54:	47ed                	li	a5,27
20403b56:	a011                	j	20403b5a <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403b58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403b5a:	853e                	mv	a0,a5
20403b5c:	4472                	lw	s0,28(sp)
20403b5e:	6105                	addi	sp,sp,32
20403b60:	8082                	ret

20403b62 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403b62:	1101                	addi	sp,sp,-32
20403b64:	ce22                	sw	s0,28(sp)
20403b66:	1000                	addi	s0,sp,32
20403b68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403b6c:	fec42703          	lw	a4,-20(s0)
20403b70:	800007b7          	lui	a5,0x80000
20403b74:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffb194>
20403b78:	00f71463          	bne	a4,a5,20403b80 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403b7c:	479d                	li	a5,7
20403b7e:	a011                	j	20403b82 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403b80:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403b82:	853e                	mv	a0,a5
20403b84:	4472                	lw	s0,28(sp)
20403b86:	6105                	addi	sp,sp,32
20403b88:	8082                	ret

20403b8a <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403b8a:	1101                	addi	sp,sp,-32
20403b8c:	ce22                	sw	s0,28(sp)
20403b8e:	1000                	addi	s0,sp,32
20403b90:	fea42623          	sw	a0,-20(s0)
20403b94:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403b98:	fe842783          	lw	a5,-24(s0)
20403b9c:	e791                	bnez	a5,20403ba8 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403b9e:	800007b7          	lui	a5,0x80000
20403ba2:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffaddc>
20403ba6:	a011                	j	20403baa <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403ba8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403baa:	853e                	mv	a0,a5
20403bac:	4472                	lw	s0,28(sp)
20403bae:	6105                	addi	sp,sp,32
20403bb0:	8082                	ret

20403bb2 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403bb2:	1101                	addi	sp,sp,-32
20403bb4:	ce22                	sw	s0,28(sp)
20403bb6:	1000                	addi	s0,sp,32
20403bb8:	fea42623          	sw	a0,-20(s0)
20403bbc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403bc0:	fe842783          	lw	a5,-24(s0)
20403bc4:	e399                	bnez	a5,20403bca <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403bc6:	47ad                	li	a5,11
20403bc8:	a011                	j	20403bcc <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403bca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403bcc:	853e                	mv	a0,a5
20403bce:	4472                	lw	s0,28(sp)
20403bd0:	6105                	addi	sp,sp,32
20403bd2:	8082                	ret

20403bd4 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403bd4:	7179                	addi	sp,sp,-48
20403bd6:	d606                	sw	ra,44(sp)
20403bd8:	d422                	sw	s0,40(sp)
20403bda:	1800                	addi	s0,sp,48
20403bdc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403be0:	fdc42503          	lw	a0,-36(s0)
20403be4:	3735                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403be6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403bea:	fec42703          	lw	a4,-20(s0)
20403bee:	002007b7          	lui	a5,0x200
20403bf2:	0791                	addi	a5,a5,4
20403bf4:	97ba                	add	a5,a5,a4
20403bf6:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403bf8:	853e                	mv	a0,a5
20403bfa:	50b2                	lw	ra,44(sp)
20403bfc:	5422                	lw	s0,40(sp)
20403bfe:	6145                	addi	sp,sp,48
20403c00:	8082                	ret

20403c02 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403c02:	7179                	addi	sp,sp,-48
20403c04:	d606                	sw	ra,44(sp)
20403c06:	d422                	sw	s0,40(sp)
20403c08:	1800                	addi	s0,sp,48
20403c0a:	fca42e23          	sw	a0,-36(s0)
20403c0e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403c12:	fdc42503          	lw	a0,-36(s0)
20403c16:	3ded                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403c18:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c1c:	fec42703          	lw	a4,-20(s0)
20403c20:	002007b7          	lui	a5,0x200
20403c24:	0791                	addi	a5,a5,4
20403c26:	97ba                	add	a5,a5,a4
20403c28:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403c2a:	fd842783          	lw	a5,-40(s0)
20403c2e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403c30:	0001                	nop
20403c32:	50b2                	lw	ra,44(sp)
20403c34:	5422                	lw	s0,40(sp)
20403c36:	6145                	addi	sp,sp,48
20403c38:	8082                	ret

20403c3a <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403c3a:	7179                	addi	sp,sp,-48
20403c3c:	d606                	sw	ra,44(sp)
20403c3e:	d422                	sw	s0,40(sp)
20403c40:	1800                	addi	s0,sp,48
20403c42:	fca42e23          	sw	a0,-36(s0)
20403c46:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403c4a:	fdc42503          	lw	a0,-36(s0)
20403c4e:	35c9                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403c50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c54:	fec42703          	lw	a4,-20(s0)
20403c58:	002007b7          	lui	a5,0x200
20403c5c:	97ba                	add	a5,a5,a4
20403c5e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403c60:	fd842783          	lw	a5,-40(s0)
20403c64:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403c66:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403c68:	853e                	mv	a0,a5
20403c6a:	50b2                	lw	ra,44(sp)
20403c6c:	5422                	lw	s0,40(sp)
20403c6e:	6145                	addi	sp,sp,48
20403c70:	8082                	ret

20403c72 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403c72:	7179                	addi	sp,sp,-48
20403c74:	d606                	sw	ra,44(sp)
20403c76:	d422                	sw	s0,40(sp)
20403c78:	1800                	addi	s0,sp,48
20403c7a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403c7e:	fdc42503          	lw	a0,-36(s0)
20403c82:	3579                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403c84:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c88:	fec42703          	lw	a4,-20(s0)
20403c8c:	002007b7          	lui	a5,0x200
20403c90:	97ba                	add	a5,a5,a4
20403c92:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403c94:	853e                	mv	a0,a5
20403c96:	50b2                	lw	ra,44(sp)
20403c98:	5422                	lw	s0,40(sp)
20403c9a:	6145                	addi	sp,sp,48
20403c9c:	8082                	ret

20403c9e <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403c9e:	7179                	addi	sp,sp,-48
20403ca0:	d606                	sw	ra,44(sp)
20403ca2:	d422                	sw	s0,40(sp)
20403ca4:	1800                	addi	s0,sp,48
20403ca6:	fca42e23          	sw	a0,-36(s0)
20403caa:	fcb42c23          	sw	a1,-40(s0)
20403cae:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403cb2:	fdc42503          	lw	a0,-36(s0)
20403cb6:	3da9                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403cb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403cbc:	fdc42503          	lw	a0,-36(s0)
20403cc0:	354d                	jal	20403b62 <__metal_driver_sifive_plic0_max_priority>
20403cc2:	87aa                	mv	a5,a0
20403cc4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403cc8:	fe842783          	lw	a5,-24(s0)
20403ccc:	c785                	beqz	a5,20403cf4 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403cce:	fd442703          	lw	a4,-44(s0)
20403cd2:	fe842783          	lw	a5,-24(s0)
20403cd6:	00f77f63          	bgeu	a4,a5,20403cf4 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403cda:	fd842783          	lw	a5,-40(s0)
20403cde:	078a                	slli	a5,a5,0x2
20403ce0:	873e                	mv	a4,a5
20403ce2:	fec42783          	lw	a5,-20(s0)
20403ce6:	97ba                	add	a5,a5,a4
20403ce8:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403cea:	fd442783          	lw	a5,-44(s0)
20403cee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403cf0:	4781                	li	a5,0
20403cf2:	a011                	j	20403cf6 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403cf4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403cf6:	853e                	mv	a0,a5
20403cf8:	50b2                	lw	ra,44(sp)
20403cfa:	5422                	lw	s0,40(sp)
20403cfc:	6145                	addi	sp,sp,48
20403cfe:	8082                	ret

20403d00 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403d00:	7179                	addi	sp,sp,-48
20403d02:	d606                	sw	ra,44(sp)
20403d04:	d422                	sw	s0,40(sp)
20403d06:	1800                	addi	s0,sp,48
20403d08:	fca42e23          	sw	a0,-36(s0)
20403d0c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403d10:	fdc42503          	lw	a0,-36(s0)
20403d14:	3bf5                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403d16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d1a:	fd842783          	lw	a5,-40(s0)
20403d1e:	078a                	slli	a5,a5,0x2
20403d20:	873e                	mv	a4,a5
20403d22:	fec42783          	lw	a5,-20(s0)
20403d26:	97ba                	add	a5,a5,a4
20403d28:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403d2a:	853e                	mv	a0,a5
20403d2c:	50b2                	lw	ra,44(sp)
20403d2e:	5422                	lw	s0,40(sp)
20403d30:	6145                	addi	sp,sp,48
20403d32:	8082                	ret

20403d34 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403d34:	7179                	addi	sp,sp,-48
20403d36:	d606                	sw	ra,44(sp)
20403d38:	d422                	sw	s0,40(sp)
20403d3a:	1800                	addi	s0,sp,48
20403d3c:	fca42e23          	sw	a0,-36(s0)
20403d40:	fcb42c23          	sw	a1,-40(s0)
20403d44:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403d48:	fdc42503          	lw	a0,-36(s0)
20403d4c:	33d1                	jal	20403b10 <__metal_driver_sifive_plic0_control_base>
20403d4e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d52:	fd842783          	lw	a5,-40(s0)
20403d56:	8795                	srai	a5,a5,0x5
20403d58:	078a                	slli	a5,a5,0x2
20403d5a:	873e                	mv	a4,a5
20403d5c:	fec42783          	lw	a5,-20(s0)
20403d60:	973e                	add	a4,a4,a5
20403d62:	6789                	lui	a5,0x2
20403d64:	97ba                	add	a5,a5,a4
20403d66:	439c                	lw	a5,0(a5)
20403d68:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403d6c:	fd442783          	lw	a5,-44(s0)
20403d70:	cf81                	beqz	a5,20403d88 <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403d72:	fd842783          	lw	a5,-40(s0)
20403d76:	8bfd                	andi	a5,a5,31
20403d78:	4705                	li	a4,1
20403d7a:	00f717b3          	sll	a5,a4,a5
20403d7e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403d80:	fe842783          	lw	a5,-24(s0)
20403d84:	8fd9                	or	a5,a5,a4
20403d86:	a829                	j	20403da0 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403d88:	fd842783          	lw	a5,-40(s0)
20403d8c:	8bfd                	andi	a5,a5,31
20403d8e:	4705                	li	a4,1
20403d90:	00f717b3          	sll	a5,a4,a5
20403d94:	fff7c793          	not	a5,a5
20403d98:	873e                	mv	a4,a5
20403d9a:	fe842783          	lw	a5,-24(s0)
20403d9e:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403da0:	fd842703          	lw	a4,-40(s0)
20403da4:	8715                	srai	a4,a4,0x5
20403da6:	070a                	slli	a4,a4,0x2
20403da8:	86ba                	mv	a3,a4
20403daa:	fec42703          	lw	a4,-20(s0)
20403dae:	96ba                	add	a3,a3,a4
20403db0:	6709                	lui	a4,0x2
20403db2:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403db4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403db6:	0001                	nop
20403db8:	50b2                	lw	ra,44(sp)
20403dba:	5422                	lw	s0,40(sp)
20403dbc:	6145                	addi	sp,sp,48
20403dbe:	8082                	ret

20403dc0 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403dc0:	1101                	addi	sp,sp,-32
20403dc2:	ce06                	sw	ra,28(sp)
20403dc4:	cc22                	sw	s0,24(sp)
20403dc6:	1000                	addi	s0,sp,32
20403dc8:	fea42623          	sw	a0,-20(s0)
20403dcc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403dd0:	12c00513          	li	a0,300
20403dd4:	1b4010ef          	jal	ra,20404f88 <metal_shutdown>

20403dd8 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403dd8:	7179                	addi	sp,sp,-48
20403dda:	d606                	sw	ra,44(sp)
20403ddc:	d422                	sw	s0,40(sp)
20403dde:	1800                	addi	s0,sp,48
20403de0:	fca42e23          	sw	a0,-36(s0)
20403de4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403de8:	fd842783          	lw	a5,-40(s0)
20403dec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403df0:	fec42503          	lw	a0,-20(s0)
20403df4:	33c5                	jal	20403bd4 <__metal_plic0_claim_interrupt>
20403df6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403dfa:	fec42503          	lw	a0,-20(s0)
20403dfe:	3b35                	jal	20403b3a <__metal_driver_sifive_plic0_num_interrupts>
20403e00:	87aa                	mv	a5,a0
20403e02:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403e06:	fe842703          	lw	a4,-24(s0)
20403e0a:	fe442783          	lw	a5,-28(s0)
20403e0e:	04f77263          	bgeu	a4,a5,20403e52 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403e12:	fec42703          	lw	a4,-20(s0)
20403e16:	fe842783          	lw	a5,-24(s0)
20403e1a:	078a                	slli	a5,a5,0x2
20403e1c:	97ba                	add	a5,a5,a4
20403e1e:	479c                	lw	a5,8(a5)
20403e20:	cb8d                	beqz	a5,20403e52 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403e22:	fec42703          	lw	a4,-20(s0)
20403e26:	fe842783          	lw	a5,-24(s0)
20403e2a:	078a                	slli	a5,a5,0x2
20403e2c:	97ba                	add	a5,a5,a4
20403e2e:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403e32:	fe842603          	lw	a2,-24(s0)
20403e36:	fec42683          	lw	a3,-20(s0)
20403e3a:	fe842703          	lw	a4,-24(s0)
20403e3e:	87ba                	mv	a5,a4
20403e40:	0786                	slli	a5,a5,0x1
20403e42:	97ba                	add	a5,a5,a4
20403e44:	078e                	slli	a5,a5,0x3
20403e46:	97b6                	add	a5,a5,a3
20403e48:	0887a783          	lw	a5,136(a5)
20403e4c:	85be                	mv	a1,a5
20403e4e:	8532                	mv	a0,a2
20403e50:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403e52:	fe842583          	lw	a1,-24(s0)
20403e56:	fec42503          	lw	a0,-20(s0)
20403e5a:	3365                	jal	20403c02 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403e5c:	0001                	nop
20403e5e:	50b2                	lw	ra,44(sp)
20403e60:	5422                	lw	s0,40(sp)
20403e62:	6145                	addi	sp,sp,48
20403e64:	8082                	ret

20403e66 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403e66:	7139                	addi	sp,sp,-64
20403e68:	de06                	sw	ra,60(sp)
20403e6a:	dc22                	sw	s0,56(sp)
20403e6c:	0080                	addi	s0,sp,64
20403e6e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403e72:	fcc42783          	lw	a5,-52(s0)
20403e76:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403e7a:	fe442783          	lw	a5,-28(s0)
20403e7e:	43dc                	lw	a5,4(a5)
20403e80:	10079c63          	bnez	a5,20403f98 <__metal_driver_riscv_plic0_init+0x132>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403e84:	fe042623          	sw	zero,-20(s0)
20403e88:	a201                	j	20403f88 <__metal_driver_riscv_plic0_init+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20403e8a:	fcc42503          	lw	a0,-52(s0)
20403e8e:	3175                	jal	20403b3a <__metal_driver_sifive_plic0_num_interrupts>
20403e90:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403e94:	fec42583          	lw	a1,-20(s0)
20403e98:	fcc42503          	lw	a0,-52(s0)
20403e9c:	31fd                	jal	20403b8a <__metal_driver_sifive_plic0_interrupt_parents>
20403e9e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403ea2:	fec42583          	lw	a1,-20(s0)
20403ea6:	fcc42503          	lw	a0,-52(s0)
20403eaa:	3321                	jal	20403bb2 <__metal_driver_sifive_plic0_interrupt_lines>
20403eac:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403eb0:	fdc42783          	lw	a5,-36(s0)
20403eb4:	439c                	lw	a5,0(a5)
20403eb6:	439c                	lw	a5,0(a5)
20403eb8:	fdc42503          	lw	a0,-36(s0)
20403ebc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403ebe:	fe042423          	sw	zero,-24(s0)
20403ec2:	a085                	j	20403f22 <__metal_driver_riscv_plic0_init+0xbc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20403ec4:	4601                	li	a2,0
20403ec6:	fe842583          	lw	a1,-24(s0)
20403eca:	fe442503          	lw	a0,-28(s0)
20403ece:	359d                	jal	20403d34 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20403ed0:	4601                	li	a2,0
20403ed2:	fe842583          	lw	a1,-24(s0)
20403ed6:	fcc42503          	lw	a0,-52(s0)
20403eda:	33d1                	jal	20403c9e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20403edc:	fe442703          	lw	a4,-28(s0)
20403ee0:	fe842783          	lw	a5,-24(s0)
20403ee4:	078a                	slli	a5,a5,0x2
20403ee6:	97ba                	add	a5,a5,a4
20403ee8:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20403eec:	fe442683          	lw	a3,-28(s0)
20403ef0:	fe842703          	lw	a4,-24(s0)
20403ef4:	87ba                	mv	a5,a4
20403ef6:	0786                	slli	a5,a5,0x1
20403ef8:	97ba                	add	a5,a5,a4
20403efa:	078e                	slli	a5,a5,0x3
20403efc:	97b6                	add	a5,a5,a3
20403efe:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20403f02:	fe442683          	lw	a3,-28(s0)
20403f06:	fe842703          	lw	a4,-24(s0)
20403f0a:	87ba                	mv	a5,a4
20403f0c:	0786                	slli	a5,a5,0x1
20403f0e:	97ba                	add	a5,a5,a4
20403f10:	078e                	slli	a5,a5,0x3
20403f12:	97b6                	add	a5,a5,a3
20403f14:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20403f18:	fe842783          	lw	a5,-24(s0)
20403f1c:	0785                	addi	a5,a5,1
20403f1e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20403f22:	fe842703          	lw	a4,-24(s0)
20403f26:	fe042783          	lw	a5,-32(s0)
20403f2a:	f8f74de3          	blt	a4,a5,20403ec4 <__metal_driver_riscv_plic0_init+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20403f2e:	4581                	li	a1,0
20403f30:	fcc42503          	lw	a0,-52(s0)
20403f34:	3319                	jal	20403c3a <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20403f36:	fdc42783          	lw	a5,-36(s0)
20403f3a:	439c                	lw	a5,0(a5)
20403f3c:	4fdc                	lw	a5,28(a5)
20403f3e:	fe442683          	lw	a3,-28(s0)
20403f42:	4601                	li	a2,0
20403f44:	fd842583          	lw	a1,-40(s0)
20403f48:	fdc42503          	lw	a0,-36(s0)
20403f4c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20403f4e:	fdc42783          	lw	a5,-36(s0)
20403f52:	439c                	lw	a5,0(a5)
20403f54:	4fd8                	lw	a4,28(a5)
20403f56:	fe442683          	lw	a3,-28(s0)
20403f5a:	204047b7          	lui	a5,0x20404
20403f5e:	dd878613          	addi	a2,a5,-552 # 20403dd8 <__metal_plic0_handler>
20403f62:	fd842583          	lw	a1,-40(s0)
20403f66:	fdc42503          	lw	a0,-36(s0)
20403f6a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20403f6c:	fdc42783          	lw	a5,-36(s0)
20403f70:	439c                	lw	a5,0(a5)
20403f72:	53dc                	lw	a5,36(a5)
20403f74:	fd842583          	lw	a1,-40(s0)
20403f78:	fdc42503          	lw	a0,-36(s0)
20403f7c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403f7e:	fec42783          	lw	a5,-20(s0)
20403f82:	0785                	addi	a5,a5,1
20403f84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20403f88:	fec42783          	lw	a5,-20(s0)
20403f8c:	eef05fe3          	blez	a5,20403e8a <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20403f90:	fe442783          	lw	a5,-28(s0)
20403f94:	4705                	li	a4,1
20403f96:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20403f98:	0001                	nop
20403f9a:	50f2                	lw	ra,60(sp)
20403f9c:	5462                	lw	s0,56(sp)
20403f9e:	6121                	addi	sp,sp,64
20403fa0:	8082                	ret

20403fa2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20403fa2:	7179                	addi	sp,sp,-48
20403fa4:	d606                	sw	ra,44(sp)
20403fa6:	d422                	sw	s0,40(sp)
20403fa8:	1800                	addi	s0,sp,48
20403faa:	fca42e23          	sw	a0,-36(s0)
20403fae:	fcb42c23          	sw	a1,-40(s0)
20403fb2:	fcc42a23          	sw	a2,-44(s0)
20403fb6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403fba:	fdc42783          	lw	a5,-36(s0)
20403fbe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403fc2:	fdc42503          	lw	a0,-36(s0)
20403fc6:	b75ff0ef          	jal	ra,20403b3a <__metal_driver_sifive_plic0_num_interrupts>
20403fca:	872a                	mv	a4,a0
20403fcc:	fd842783          	lw	a5,-40(s0)
20403fd0:	00e7c463          	blt	a5,a4,20403fd8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20403fd4:	57fd                	li	a5,-1
20403fd6:	a049                	j	20404058 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20403fd8:	fd442783          	lw	a5,-44(s0)
20403fdc:	cf95                	beqz	a5,20404018 <__metal_driver_riscv_plic0_register+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20403fde:	4609                	li	a2,2
20403fe0:	fd842583          	lw	a1,-40(s0)
20403fe4:	fdc42503          	lw	a0,-36(s0)
20403fe8:	395d                	jal	20403c9e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20403fea:	fec42703          	lw	a4,-20(s0)
20403fee:	fd842783          	lw	a5,-40(s0)
20403ff2:	078a                	slli	a5,a5,0x2
20403ff4:	97ba                	add	a5,a5,a4
20403ff6:	fd442703          	lw	a4,-44(s0)
20403ffa:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20403ffc:	fec42683          	lw	a3,-20(s0)
20404000:	fd842703          	lw	a4,-40(s0)
20404004:	87ba                	mv	a5,a4
20404006:	0786                	slli	a5,a5,0x1
20404008:	97ba                	add	a5,a5,a4
2040400a:	078e                	slli	a5,a5,0x3
2040400c:	97b6                	add	a5,a5,a3
2040400e:	fd042703          	lw	a4,-48(s0)
20404012:	08e7a423          	sw	a4,136(a5)
20404016:	a081                	j	20404056 <__metal_driver_riscv_plic0_register+0xb4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404018:	4605                	li	a2,1
2040401a:	fd842583          	lw	a1,-40(s0)
2040401e:	fdc42503          	lw	a0,-36(s0)
20404022:	c7dff0ef          	jal	ra,20403c9e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404026:	fec42703          	lw	a4,-20(s0)
2040402a:	fd842783          	lw	a5,-40(s0)
2040402e:	078a                	slli	a5,a5,0x2
20404030:	97ba                	add	a5,a5,a4
20404032:	20404737          	lui	a4,0x20404
20404036:	dc070713          	addi	a4,a4,-576 # 20403dc0 <__metal_plic0_default_handler>
2040403a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2040403c:	fec42683          	lw	a3,-20(s0)
20404040:	fd842703          	lw	a4,-40(s0)
20404044:	87ba                	mv	a5,a4
20404046:	0786                	slli	a5,a5,0x1
20404048:	97ba                	add	a5,a5,a4
2040404a:	078e                	slli	a5,a5,0x3
2040404c:	97b6                	add	a5,a5,a3
2040404e:	fd042703          	lw	a4,-48(s0)
20404052:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404056:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404058:	853e                	mv	a0,a5
2040405a:	50b2                	lw	ra,44(sp)
2040405c:	5422                	lw	s0,40(sp)
2040405e:	6145                	addi	sp,sp,48
20404060:	8082                	ret

20404062 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404062:	7179                	addi	sp,sp,-48
20404064:	d606                	sw	ra,44(sp)
20404066:	d422                	sw	s0,40(sp)
20404068:	1800                	addi	s0,sp,48
2040406a:	fca42e23          	sw	a0,-36(s0)
2040406e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404072:	fdc42783          	lw	a5,-36(s0)
20404076:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040407a:	fdc42503          	lw	a0,-36(s0)
2040407e:	abdff0ef          	jal	ra,20403b3a <__metal_driver_sifive_plic0_num_interrupts>
20404082:	872a                	mv	a4,a0
20404084:	fd842783          	lw	a5,-40(s0)
20404088:	00e7c463          	blt	a5,a4,20404090 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040408c:	57fd                	li	a5,-1
2040408e:	a809                	j	204040a0 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404090:	4605                	li	a2,1
20404092:	fd842583          	lw	a1,-40(s0)
20404096:	fec42503          	lw	a0,-20(s0)
2040409a:	c9bff0ef          	jal	ra,20403d34 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040409e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
204040a0:	853e                	mv	a0,a5
204040a2:	50b2                	lw	ra,44(sp)
204040a4:	5422                	lw	s0,40(sp)
204040a6:	6145                	addi	sp,sp,48
204040a8:	8082                	ret

204040aa <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204040aa:	7179                	addi	sp,sp,-48
204040ac:	d606                	sw	ra,44(sp)
204040ae:	d422                	sw	s0,40(sp)
204040b0:	1800                	addi	s0,sp,48
204040b2:	fca42e23          	sw	a0,-36(s0)
204040b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204040ba:	fdc42783          	lw	a5,-36(s0)
204040be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204040c2:	fdc42503          	lw	a0,-36(s0)
204040c6:	a75ff0ef          	jal	ra,20403b3a <__metal_driver_sifive_plic0_num_interrupts>
204040ca:	872a                	mv	a4,a0
204040cc:	fd842783          	lw	a5,-40(s0)
204040d0:	00e7c463          	blt	a5,a4,204040d8 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
204040d4:	57fd                	li	a5,-1
204040d6:	a809                	j	204040e8 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204040d8:	4601                	li	a2,0
204040da:	fd842583          	lw	a1,-40(s0)
204040de:	fec42503          	lw	a0,-20(s0)
204040e2:	c53ff0ef          	jal	ra,20403d34 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
204040e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
204040e8:	853e                	mv	a0,a5
204040ea:	50b2                	lw	ra,44(sp)
204040ec:	5422                	lw	s0,40(sp)
204040ee:	6145                	addi	sp,sp,48
204040f0:	8082                	ret

204040f2 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
204040f2:	1101                	addi	sp,sp,-32
204040f4:	ce22                	sw	s0,28(sp)
204040f6:	1000                	addi	s0,sp,32
204040f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204040fc:	fec42703          	lw	a4,-20(s0)
20404100:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404104:	00f71563          	bne	a4,a5,2040410e <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404108:	100127b7          	lui	a5,0x10012
2040410c:	a011                	j	20404110 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040410e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404110:	853e                	mv	a0,a5
20404112:	4472                	lw	s0,28(sp)
20404114:	6105                	addi	sp,sp,32
20404116:	8082                	ret

20404118 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404118:	1101                	addi	sp,sp,-32
2040411a:	ce22                	sw	s0,28(sp)
2040411c:	1000                	addi	s0,sp,32
2040411e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404122:	fec42703          	lw	a4,-20(s0)
20404126:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040412a:	00f71763          	bne	a4,a5,20404138 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040412e:	800007b7          	lui	a5,0x80000
20404132:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffb194>
20404136:	a011                	j	2040413a <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404138:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
2040413a:	853e                	mv	a0,a5
2040413c:	4472                	lw	s0,28(sp)
2040413e:	6105                	addi	sp,sp,32
20404140:	8082                	ret

20404142 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404142:	1101                	addi	sp,sp,-32
20404144:	ce22                	sw	s0,28(sp)
20404146:	1000                	addi	s0,sp,32
20404148:	fea42623          	sw	a0,-20(s0)
2040414c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404150:	fec42703          	lw	a4,-20(s0)
20404154:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404158:	00f71763          	bne	a4,a5,20404166 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
2040415c:	fe842783          	lw	a5,-24(s0)
20404160:	e399                	bnez	a5,20404166 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404162:	479d                	li	a5,7
20404164:	a269                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404166:	fec42703          	lw	a4,-20(s0)
2040416a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040416e:	00f71963          	bne	a4,a5,20404180 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404172:	fe842703          	lw	a4,-24(s0)
20404176:	4785                	li	a5,1
20404178:	00f71463          	bne	a4,a5,20404180 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040417c:	47a1                	li	a5,8
2040417e:	aa85                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404180:	fec42703          	lw	a4,-20(s0)
20404184:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404188:	00f71963          	bne	a4,a5,2040419a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040418c:	fe842703          	lw	a4,-24(s0)
20404190:	4789                	li	a5,2
20404192:	00f71463          	bne	a4,a5,2040419a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404196:	47a5                	li	a5,9
20404198:	aa99                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2040419a:	fec42703          	lw	a4,-20(s0)
2040419e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041a2:	00f71963          	bne	a4,a5,204041b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
204041a6:	fe842703          	lw	a4,-24(s0)
204041aa:	478d                	li	a5,3
204041ac:	00f71463          	bne	a4,a5,204041b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
204041b0:	47a9                	li	a5,10
204041b2:	aa35                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204041b4:	fec42703          	lw	a4,-20(s0)
204041b8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041bc:	00f71963          	bne	a4,a5,204041ce <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
204041c0:	fe842703          	lw	a4,-24(s0)
204041c4:	4791                	li	a5,4
204041c6:	00f71463          	bne	a4,a5,204041ce <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
204041ca:	47ad                	li	a5,11
204041cc:	a20d                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204041ce:	fec42703          	lw	a4,-20(s0)
204041d2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041d6:	00f71963          	bne	a4,a5,204041e8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
204041da:	fe842703          	lw	a4,-24(s0)
204041de:	4795                	li	a5,5
204041e0:	00f71463          	bne	a4,a5,204041e8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
204041e4:	47b1                	li	a5,12
204041e6:	a221                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204041e8:	fec42703          	lw	a4,-20(s0)
204041ec:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204041f0:	00f71963          	bne	a4,a5,20404202 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
204041f4:	fe842703          	lw	a4,-24(s0)
204041f8:	4799                	li	a5,6
204041fa:	00f71463          	bne	a4,a5,20404202 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
204041fe:	47b5                	li	a5,13
20404200:	a0fd                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404202:	fec42703          	lw	a4,-20(s0)
20404206:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040420a:	00f71963          	bne	a4,a5,2040421c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040420e:	fe842703          	lw	a4,-24(s0)
20404212:	479d                	li	a5,7
20404214:	00f71463          	bne	a4,a5,2040421c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404218:	47b9                	li	a5,14
2040421a:	a8d1                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040421c:	fec42703          	lw	a4,-20(s0)
20404220:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404224:	00f71963          	bne	a4,a5,20404236 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20404228:	fe842703          	lw	a4,-24(s0)
2040422c:	47a1                	li	a5,8
2040422e:	00f71463          	bne	a4,a5,20404236 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404232:	47bd                	li	a5,15
20404234:	a86d                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404236:	fec42703          	lw	a4,-20(s0)
2040423a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040423e:	00f71963          	bne	a4,a5,20404250 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404242:	fe842703          	lw	a4,-24(s0)
20404246:	47a5                	li	a5,9
20404248:	00f71463          	bne	a4,a5,20404250 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040424c:	47c1                	li	a5,16
2040424e:	a045                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404250:	fec42703          	lw	a4,-20(s0)
20404254:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404258:	00f71963          	bne	a4,a5,2040426a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040425c:	fe842703          	lw	a4,-24(s0)
20404260:	47a9                	li	a5,10
20404262:	00f71463          	bne	a4,a5,2040426a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404266:	47c5                	li	a5,17
20404268:	a059                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2040426a:	fec42703          	lw	a4,-20(s0)
2040426e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404272:	00f71963          	bne	a4,a5,20404284 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404276:	fe842703          	lw	a4,-24(s0)
2040427a:	47ad                	li	a5,11
2040427c:	00f71463          	bne	a4,a5,20404284 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404280:	47c9                	li	a5,18
20404282:	a0b5                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404284:	fec42703          	lw	a4,-20(s0)
20404288:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040428c:	00f71963          	bne	a4,a5,2040429e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404290:	fe842703          	lw	a4,-24(s0)
20404294:	47b1                	li	a5,12
20404296:	00f71463          	bne	a4,a5,2040429e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
2040429a:	47cd                	li	a5,19
2040429c:	a889                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040429e:	fec42703          	lw	a4,-20(s0)
204042a2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042a6:	00f71963          	bne	a4,a5,204042b8 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204042aa:	fe842703          	lw	a4,-24(s0)
204042ae:	47b5                	li	a5,13
204042b0:	00f71463          	bne	a4,a5,204042b8 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204042b4:	47d1                	li	a5,20
204042b6:	a825                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204042b8:	fec42703          	lw	a4,-20(s0)
204042bc:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042c0:	00f71963          	bne	a4,a5,204042d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204042c4:	fe842703          	lw	a4,-24(s0)
204042c8:	47b9                	li	a5,14
204042ca:	00f71463          	bne	a4,a5,204042d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204042ce:	47d5                	li	a5,21
204042d0:	a839                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204042d2:	fec42703          	lw	a4,-20(s0)
204042d6:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042da:	00f71963          	bne	a4,a5,204042ec <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204042de:	fe842703          	lw	a4,-24(s0)
204042e2:	47bd                	li	a5,15
204042e4:	00f71463          	bne	a4,a5,204042ec <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
204042e8:	47d9                	li	a5,22
204042ea:	a011                	j	204042ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
204042ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
204042ee:	853e                	mv	a0,a5
204042f0:	4472                	lw	s0,28(sp)
204042f2:	6105                	addi	sp,sp,32
204042f4:	8082                	ret

204042f6 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
204042f6:	7179                	addi	sp,sp,-48
204042f8:	d606                	sw	ra,44(sp)
204042fa:	d422                	sw	s0,40(sp)
204042fc:	1800                	addi	s0,sp,48
204042fe:	fca42e23          	sw	a0,-36(s0)
20404302:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404306:	fdc42503          	lw	a0,-36(s0)
2040430a:	33e5                	jal	204040f2 <__metal_driver_sifive_gpio0_base>
2040430c:	87aa                	mv	a5,a0
2040430e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404312:	fec42783          	lw	a5,-20(s0)
20404316:	0791                	addi	a5,a5,4
20404318:	4398                	lw	a4,0(a5)
2040431a:	fd842783          	lw	a5,-40(s0)
2040431e:	fec42683          	lw	a3,-20(s0)
20404322:	0691                	addi	a3,a3,4
20404324:	8fd9                	or	a5,a5,a4
20404326:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404328:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040432a:	853e                	mv	a0,a5
2040432c:	50b2                	lw	ra,44(sp)
2040432e:	5422                	lw	s0,40(sp)
20404330:	6145                	addi	sp,sp,48
20404332:	8082                	ret

20404334 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404334:	7179                	addi	sp,sp,-48
20404336:	d606                	sw	ra,44(sp)
20404338:	d422                	sw	s0,40(sp)
2040433a:	1800                	addi	s0,sp,48
2040433c:	fca42e23          	sw	a0,-36(s0)
20404340:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404344:	fdc42503          	lw	a0,-36(s0)
20404348:	336d                	jal	204040f2 <__metal_driver_sifive_gpio0_base>
2040434a:	87aa                	mv	a5,a0
2040434c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404350:	fec42783          	lw	a5,-20(s0)
20404354:	0791                	addi	a5,a5,4
20404356:	439c                	lw	a5,0(a5)
20404358:	fd842703          	lw	a4,-40(s0)
2040435c:	fff74713          	not	a4,a4
20404360:	86ba                	mv	a3,a4
20404362:	fec42703          	lw	a4,-20(s0)
20404366:	0711                	addi	a4,a4,4
20404368:	8ff5                	and	a5,a5,a3
2040436a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
2040436c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
2040436e:	853e                	mv	a0,a5
20404370:	50b2                	lw	ra,44(sp)
20404372:	5422                	lw	s0,40(sp)
20404374:	6145                	addi	sp,sp,48
20404376:	8082                	ret

20404378 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404378:	7179                	addi	sp,sp,-48
2040437a:	d606                	sw	ra,44(sp)
2040437c:	d422                	sw	s0,40(sp)
2040437e:	1800                	addi	s0,sp,48
20404380:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404384:	fdc42503          	lw	a0,-36(s0)
20404388:	33ad                	jal	204040f2 <__metal_driver_sifive_gpio0_base>
2040438a:	87aa                	mv	a5,a0
2040438c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404390:	fec42783          	lw	a5,-20(s0)
20404394:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404396:	853e                	mv	a0,a5
20404398:	50b2                	lw	ra,44(sp)
2040439a:	5422                	lw	s0,40(sp)
2040439c:	6145                	addi	sp,sp,48
2040439e:	8082                	ret

204043a0 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204043a0:	7179                	addi	sp,sp,-48
204043a2:	d606                	sw	ra,44(sp)
204043a4:	d422                	sw	s0,40(sp)
204043a6:	1800                	addi	s0,sp,48
204043a8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204043ac:	fdc42503          	lw	a0,-36(s0)
204043b0:	3389                	jal	204040f2 <__metal_driver_sifive_gpio0_base>
204043b2:	87aa                	mv	a5,a0
204043b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204043b8:	fec42783          	lw	a5,-20(s0)
204043bc:	07b1                	addi	a5,a5,12
204043be:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204043c0:	853e                	mv	a0,a5
204043c2:	50b2                	lw	ra,44(sp)
204043c4:	5422                	lw	s0,40(sp)
204043c6:	6145                	addi	sp,sp,48
204043c8:	8082                	ret

204043ca <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204043ca:	7179                	addi	sp,sp,-48
204043cc:	d606                	sw	ra,44(sp)
204043ce:	d422                	sw	s0,40(sp)
204043d0:	1800                	addi	s0,sp,48
204043d2:	fca42e23          	sw	a0,-36(s0)
204043d6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204043da:	fdc42503          	lw	a0,-36(s0)
204043de:	d15ff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
204043e2:	87aa                	mv	a5,a0
204043e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
204043e8:	fec42783          	lw	a5,-20(s0)
204043ec:	07a1                	addi	a5,a5,8
204043ee:	439c                	lw	a5,0(a5)
204043f0:	fd842703          	lw	a4,-40(s0)
204043f4:	fff74713          	not	a4,a4
204043f8:	86ba                	mv	a3,a4
204043fa:	fec42703          	lw	a4,-20(s0)
204043fe:	0721                	addi	a4,a4,8
20404400:	8ff5                	and	a5,a5,a3
20404402:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404404:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404406:	853e                	mv	a0,a5
20404408:	50b2                	lw	ra,44(sp)
2040440a:	5422                	lw	s0,40(sp)
2040440c:	6145                	addi	sp,sp,48
2040440e:	8082                	ret

20404410 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404410:	7179                	addi	sp,sp,-48
20404412:	d606                	sw	ra,44(sp)
20404414:	d422                	sw	s0,40(sp)
20404416:	1800                	addi	s0,sp,48
20404418:	fca42e23          	sw	a0,-36(s0)
2040441c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404420:	fdc42503          	lw	a0,-36(s0)
20404424:	ccfff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
20404428:	87aa                	mv	a5,a0
2040442a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
2040442e:	fec42783          	lw	a5,-20(s0)
20404432:	07a1                	addi	a5,a5,8
20404434:	4398                	lw	a4,0(a5)
20404436:	fd842783          	lw	a5,-40(s0)
2040443a:	fec42683          	lw	a3,-20(s0)
2040443e:	06a1                	addi	a3,a3,8
20404440:	8fd9                	or	a5,a5,a4
20404442:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404444:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404446:	853e                	mv	a0,a5
20404448:	50b2                	lw	ra,44(sp)
2040444a:	5422                	lw	s0,40(sp)
2040444c:	6145                	addi	sp,sp,48
2040444e:	8082                	ret

20404450 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404450:	7179                	addi	sp,sp,-48
20404452:	d606                	sw	ra,44(sp)
20404454:	d422                	sw	s0,40(sp)
20404456:	1800                	addi	s0,sp,48
20404458:	fca42e23          	sw	a0,-36(s0)
2040445c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404460:	fdc42503          	lw	a0,-36(s0)
20404464:	c8fff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
20404468:	87aa                	mv	a5,a0
2040446a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
2040446e:	fec42783          	lw	a5,-20(s0)
20404472:	07b1                	addi	a5,a5,12
20404474:	4398                	lw	a4,0(a5)
20404476:	fd842783          	lw	a5,-40(s0)
2040447a:	fec42683          	lw	a3,-20(s0)
2040447e:	06b1                	addi	a3,a3,12
20404480:	8fd9                	or	a5,a5,a4
20404482:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404484:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404486:	853e                	mv	a0,a5
20404488:	50b2                	lw	ra,44(sp)
2040448a:	5422                	lw	s0,40(sp)
2040448c:	6145                	addi	sp,sp,48
2040448e:	8082                	ret

20404490 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404490:	7179                	addi	sp,sp,-48
20404492:	d606                	sw	ra,44(sp)
20404494:	d422                	sw	s0,40(sp)
20404496:	1800                	addi	s0,sp,48
20404498:	fca42e23          	sw	a0,-36(s0)
2040449c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044a0:	fdc42503          	lw	a0,-36(s0)
204044a4:	c4fff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
204044a8:	87aa                	mv	a5,a0
204044aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204044ae:	fec42783          	lw	a5,-20(s0)
204044b2:	07b1                	addi	a5,a5,12
204044b4:	439c                	lw	a5,0(a5)
204044b6:	fd842703          	lw	a4,-40(s0)
204044ba:	fff74713          	not	a4,a4
204044be:	86ba                	mv	a3,a4
204044c0:	fec42703          	lw	a4,-20(s0)
204044c4:	0731                	addi	a4,a4,12
204044c6:	8ff5                	and	a5,a5,a3
204044c8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204044ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204044cc:	853e                	mv	a0,a5
204044ce:	50b2                	lw	ra,44(sp)
204044d0:	5422                	lw	s0,40(sp)
204044d2:	6145                	addi	sp,sp,48
204044d4:	8082                	ret

204044d6 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204044d6:	7179                	addi	sp,sp,-48
204044d8:	d606                	sw	ra,44(sp)
204044da:	d422                	sw	s0,40(sp)
204044dc:	1800                	addi	s0,sp,48
204044de:	fca42e23          	sw	a0,-36(s0)
204044e2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044e6:	fdc42503          	lw	a0,-36(s0)
204044ea:	c09ff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
204044ee:	87aa                	mv	a5,a0
204044f0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
204044f4:	fec42783          	lw	a5,-20(s0)
204044f8:	07b1                	addi	a5,a5,12
204044fa:	4398                	lw	a4,0(a5)
204044fc:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404500:	fec42683          	lw	a3,-20(s0)
20404504:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404506:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404508:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040450a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040450c:	853e                	mv	a0,a5
2040450e:	50b2                	lw	ra,44(sp)
20404510:	5422                	lw	s0,40(sp)
20404512:	6145                	addi	sp,sp,48
20404514:	8082                	ret

20404516 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404516:	7179                	addi	sp,sp,-48
20404518:	d606                	sw	ra,44(sp)
2040451a:	d422                	sw	s0,40(sp)
2040451c:	1800                	addi	s0,sp,48
2040451e:	fca42e23          	sw	a0,-36(s0)
20404522:	fcb42c23          	sw	a1,-40(s0)
20404526:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040452a:	fdc42503          	lw	a0,-36(s0)
2040452e:	bc5ff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
20404532:	87aa                	mv	a5,a0
20404534:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404538:	fec42783          	lw	a5,-20(s0)
2040453c:	03c78793          	addi	a5,a5,60
20404540:	439c                	lw	a5,0(a5)
20404542:	fd842703          	lw	a4,-40(s0)
20404546:	fff74713          	not	a4,a4
2040454a:	86ba                	mv	a3,a4
2040454c:	fec42703          	lw	a4,-20(s0)
20404550:	03c70713          	addi	a4,a4,60
20404554:	8ff5                	and	a5,a5,a3
20404556:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404558:	fec42783          	lw	a5,-20(s0)
2040455c:	03878793          	addi	a5,a5,56
20404560:	4398                	lw	a4,0(a5)
20404562:	fd442783          	lw	a5,-44(s0)
20404566:	fec42683          	lw	a3,-20(s0)
2040456a:	03868693          	addi	a3,a3,56
2040456e:	8fd9                	or	a5,a5,a4
20404570:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404572:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404574:	853e                	mv	a0,a5
20404576:	50b2                	lw	ra,44(sp)
20404578:	5422                	lw	s0,40(sp)
2040457a:	6145                	addi	sp,sp,48
2040457c:	8082                	ret

2040457e <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
2040457e:	7179                	addi	sp,sp,-48
20404580:	d606                	sw	ra,44(sp)
20404582:	d422                	sw	s0,40(sp)
20404584:	1800                	addi	s0,sp,48
20404586:	fca42e23          	sw	a0,-36(s0)
2040458a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040458e:	fdc42503          	lw	a0,-36(s0)
20404592:	b61ff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
20404596:	87aa                	mv	a5,a0
20404598:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040459c:	fec42783          	lw	a5,-20(s0)
204045a0:	03878793          	addi	a5,a5,56
204045a4:	439c                	lw	a5,0(a5)
204045a6:	fd842703          	lw	a4,-40(s0)
204045aa:	fff74713          	not	a4,a4
204045ae:	86ba                	mv	a3,a4
204045b0:	fec42703          	lw	a4,-20(s0)
204045b4:	03870713          	addi	a4,a4,56
204045b8:	8ff5                	and	a5,a5,a3
204045ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204045bc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204045be:	853e                	mv	a0,a5
204045c0:	50b2                	lw	ra,44(sp)
204045c2:	5422                	lw	s0,40(sp)
204045c4:	6145                	addi	sp,sp,48
204045c6:	8082                	ret

204045c8 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204045c8:	7179                	addi	sp,sp,-48
204045ca:	d606                	sw	ra,44(sp)
204045cc:	d422                	sw	s0,40(sp)
204045ce:	1800                	addi	s0,sp,48
204045d0:	fca42e23          	sw	a0,-36(s0)
204045d4:	fcb42c23          	sw	a1,-40(s0)
204045d8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045dc:	fdc42503          	lw	a0,-36(s0)
204045e0:	b13ff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
204045e4:	87aa                	mv	a5,a0
204045e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
204045ea:	fd442703          	lw	a4,-44(s0)
204045ee:	479d                	li	a5,7
204045f0:	1ce7e963          	bltu	a5,a4,204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
204045f4:	fd442783          	lw	a5,-44(s0)
204045f8:	00279713          	slli	a4,a5,0x2
204045fc:	204057b7          	lui	a5,0x20405
20404600:	4d478793          	addi	a5,a5,1236 # 204054d4 <__metal_driver_vtable_riscv_plic0+0x4c>
20404604:	97ba                	add	a5,a5,a4
20404606:	439c                	lw	a5,0(a5)
20404608:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040460a:	fec42783          	lw	a5,-20(s0)
2040460e:	07e1                	addi	a5,a5,24
20404610:	439c                	lw	a5,0(a5)
20404612:	fd842703          	lw	a4,-40(s0)
20404616:	fff74713          	not	a4,a4
2040461a:	86ba                	mv	a3,a4
2040461c:	fec42703          	lw	a4,-20(s0)
20404620:	0761                	addi	a4,a4,24
20404622:	8ff5                	and	a5,a5,a3
20404624:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404626:	fec42783          	lw	a5,-20(s0)
2040462a:	02078793          	addi	a5,a5,32
2040462e:	439c                	lw	a5,0(a5)
20404630:	fd842703          	lw	a4,-40(s0)
20404634:	fff74713          	not	a4,a4
20404638:	86ba                	mv	a3,a4
2040463a:	fec42703          	lw	a4,-20(s0)
2040463e:	02070713          	addi	a4,a4,32
20404642:	8ff5                	and	a5,a5,a3
20404644:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404646:	fec42783          	lw	a5,-20(s0)
2040464a:	02878793          	addi	a5,a5,40
2040464e:	439c                	lw	a5,0(a5)
20404650:	fd842703          	lw	a4,-40(s0)
20404654:	fff74713          	not	a4,a4
20404658:	86ba                	mv	a3,a4
2040465a:	fec42703          	lw	a4,-20(s0)
2040465e:	02870713          	addi	a4,a4,40
20404662:	8ff5                	and	a5,a5,a3
20404664:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404666:	fec42783          	lw	a5,-20(s0)
2040466a:	03078793          	addi	a5,a5,48
2040466e:	439c                	lw	a5,0(a5)
20404670:	fd842703          	lw	a4,-40(s0)
20404674:	fff74713          	not	a4,a4
20404678:	86ba                	mv	a3,a4
2040467a:	fec42703          	lw	a4,-20(s0)
2040467e:	03070713          	addi	a4,a4,48
20404682:	8ff5                	and	a5,a5,a3
20404684:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404686:	aa35                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404688:	fec42783          	lw	a5,-20(s0)
2040468c:	07e1                	addi	a5,a5,24
2040468e:	4398                	lw	a4,0(a5)
20404690:	fd842783          	lw	a5,-40(s0)
20404694:	fec42683          	lw	a3,-20(s0)
20404698:	06e1                	addi	a3,a3,24
2040469a:	8fd9                	or	a5,a5,a4
2040469c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
2040469e:	a215                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204046a0:	fec42783          	lw	a5,-20(s0)
204046a4:	02078793          	addi	a5,a5,32
204046a8:	4398                	lw	a4,0(a5)
204046aa:	fd842783          	lw	a5,-40(s0)
204046ae:	fec42683          	lw	a3,-20(s0)
204046b2:	02068693          	addi	a3,a3,32
204046b6:	8fd9                	or	a5,a5,a4
204046b8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204046ba:	a221                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204046bc:	fec42783          	lw	a5,-20(s0)
204046c0:	07e1                	addi	a5,a5,24
204046c2:	4398                	lw	a4,0(a5)
204046c4:	fd842783          	lw	a5,-40(s0)
204046c8:	fec42683          	lw	a3,-20(s0)
204046cc:	06e1                	addi	a3,a3,24
204046ce:	8fd9                	or	a5,a5,a4
204046d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204046d2:	fec42783          	lw	a5,-20(s0)
204046d6:	02078793          	addi	a5,a5,32
204046da:	4398                	lw	a4,0(a5)
204046dc:	fd842783          	lw	a5,-40(s0)
204046e0:	fec42683          	lw	a3,-20(s0)
204046e4:	02068693          	addi	a3,a3,32
204046e8:	8fd9                	or	a5,a5,a4
204046ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
204046ec:	a8d9                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204046ee:	fec42783          	lw	a5,-20(s0)
204046f2:	02878793          	addi	a5,a5,40
204046f6:	4398                	lw	a4,0(a5)
204046f8:	fd842783          	lw	a5,-40(s0)
204046fc:	fec42683          	lw	a3,-20(s0)
20404700:	02868693          	addi	a3,a3,40
20404704:	8fd9                	or	a5,a5,a4
20404706:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404708:	a86d                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040470a:	fec42783          	lw	a5,-20(s0)
2040470e:	03078793          	addi	a5,a5,48
20404712:	4398                	lw	a4,0(a5)
20404714:	fd842783          	lw	a5,-40(s0)
20404718:	fec42683          	lw	a3,-20(s0)
2040471c:	03068693          	addi	a3,a3,48
20404720:	8fd9                	or	a5,a5,a4
20404722:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404724:	a879                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404726:	fec42783          	lw	a5,-20(s0)
2040472a:	02878793          	addi	a5,a5,40
2040472e:	4398                	lw	a4,0(a5)
20404730:	fd842783          	lw	a5,-40(s0)
20404734:	fec42683          	lw	a3,-20(s0)
20404738:	02868693          	addi	a3,a3,40
2040473c:	8fd9                	or	a5,a5,a4
2040473e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404740:	fec42783          	lw	a5,-20(s0)
20404744:	03078793          	addi	a5,a5,48
20404748:	4398                	lw	a4,0(a5)
2040474a:	fd842783          	lw	a5,-40(s0)
2040474e:	fec42683          	lw	a3,-20(s0)
20404752:	03068693          	addi	a3,a3,48
20404756:	8fd9                	or	a5,a5,a4
20404758:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
2040475a:	a0a5                	j	204047c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040475c:	fec42783          	lw	a5,-20(s0)
20404760:	07e1                	addi	a5,a5,24
20404762:	4398                	lw	a4,0(a5)
20404764:	fd842783          	lw	a5,-40(s0)
20404768:	fec42683          	lw	a3,-20(s0)
2040476c:	06e1                	addi	a3,a3,24
2040476e:	8fd9                	or	a5,a5,a4
20404770:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404772:	fec42783          	lw	a5,-20(s0)
20404776:	02078793          	addi	a5,a5,32
2040477a:	4398                	lw	a4,0(a5)
2040477c:	fd842783          	lw	a5,-40(s0)
20404780:	fec42683          	lw	a3,-20(s0)
20404784:	02068693          	addi	a3,a3,32
20404788:	8fd9                	or	a5,a5,a4
2040478a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040478c:	fec42783          	lw	a5,-20(s0)
20404790:	02878793          	addi	a5,a5,40
20404794:	4398                	lw	a4,0(a5)
20404796:	fd842783          	lw	a5,-40(s0)
2040479a:	fec42683          	lw	a3,-20(s0)
2040479e:	02868693          	addi	a3,a3,40
204047a2:	8fd9                	or	a5,a5,a4
204047a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204047a6:	fec42783          	lw	a5,-20(s0)
204047aa:	03078793          	addi	a5,a5,48
204047ae:	4398                	lw	a4,0(a5)
204047b0:	fd842783          	lw	a5,-40(s0)
204047b4:	fec42683          	lw	a3,-20(s0)
204047b8:	03068693          	addi	a3,a3,48
204047bc:	8fd9                	or	a5,a5,a4
204047be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204047c0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204047c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204047c4:	853e                	mv	a0,a5
204047c6:	50b2                	lw	ra,44(sp)
204047c8:	5422                	lw	s0,40(sp)
204047ca:	6145                	addi	sp,sp,48
204047cc:	8082                	ret

204047ce <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204047ce:	7179                	addi	sp,sp,-48
204047d0:	d606                	sw	ra,44(sp)
204047d2:	d422                	sw	s0,40(sp)
204047d4:	1800                	addi	s0,sp,48
204047d6:	fca42e23          	sw	a0,-36(s0)
204047da:	fcb42c23          	sw	a1,-40(s0)
204047de:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047e2:	fdc42503          	lw	a0,-36(s0)
204047e6:	90dff0ef          	jal	ra,204040f2 <__metal_driver_sifive_gpio0_base>
204047ea:	87aa                	mv	a5,a0
204047ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
204047f0:	fd442703          	lw	a4,-44(s0)
204047f4:	479d                	li	a5,7
204047f6:	14e7ea63          	bltu	a5,a4,2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
204047fa:	fd442783          	lw	a5,-44(s0)
204047fe:	00279713          	slli	a4,a5,0x2
20404802:	204057b7          	lui	a5,0x20405
20404806:	4f478793          	addi	a5,a5,1268 # 204054f4 <__metal_driver_vtable_riscv_plic0+0x6c>
2040480a:	97ba                	add	a5,a5,a4
2040480c:	439c                	lw	a5,0(a5)
2040480e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404810:	fec42783          	lw	a5,-20(s0)
20404814:	07f1                	addi	a5,a5,28
20404816:	4398                	lw	a4,0(a5)
20404818:	fd842783          	lw	a5,-40(s0)
2040481c:	fec42683          	lw	a3,-20(s0)
20404820:	06f1                	addi	a3,a3,28
20404822:	8fd9                	or	a5,a5,a4
20404824:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404826:	a215                	j	2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404828:	fec42783          	lw	a5,-20(s0)
2040482c:	02478793          	addi	a5,a5,36
20404830:	4398                	lw	a4,0(a5)
20404832:	fd842783          	lw	a5,-40(s0)
20404836:	fec42683          	lw	a3,-20(s0)
2040483a:	02468693          	addi	a3,a3,36
2040483e:	8fd9                	or	a5,a5,a4
20404840:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404842:	a221                	j	2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404844:	fec42783          	lw	a5,-20(s0)
20404848:	07f1                	addi	a5,a5,28
2040484a:	4398                	lw	a4,0(a5)
2040484c:	fd842783          	lw	a5,-40(s0)
20404850:	fec42683          	lw	a3,-20(s0)
20404854:	06f1                	addi	a3,a3,28
20404856:	8fd9                	or	a5,a5,a4
20404858:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040485a:	fec42783          	lw	a5,-20(s0)
2040485e:	02478793          	addi	a5,a5,36
20404862:	4398                	lw	a4,0(a5)
20404864:	fd842783          	lw	a5,-40(s0)
20404868:	fec42683          	lw	a3,-20(s0)
2040486c:	02468693          	addi	a3,a3,36
20404870:	8fd9                	or	a5,a5,a4
20404872:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404874:	a8d9                	j	2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404876:	fec42783          	lw	a5,-20(s0)
2040487a:	02c78793          	addi	a5,a5,44
2040487e:	4398                	lw	a4,0(a5)
20404880:	fd842783          	lw	a5,-40(s0)
20404884:	fec42683          	lw	a3,-20(s0)
20404888:	02c68693          	addi	a3,a3,44
2040488c:	8fd9                	or	a5,a5,a4
2040488e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404890:	a86d                	j	2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404892:	fec42783          	lw	a5,-20(s0)
20404896:	03478793          	addi	a5,a5,52
2040489a:	4398                	lw	a4,0(a5)
2040489c:	fd842783          	lw	a5,-40(s0)
204048a0:	fec42683          	lw	a3,-20(s0)
204048a4:	03468693          	addi	a3,a3,52
204048a8:	8fd9                	or	a5,a5,a4
204048aa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
204048ac:	a879                	j	2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204048ae:	fec42783          	lw	a5,-20(s0)
204048b2:	02c78793          	addi	a5,a5,44
204048b6:	4398                	lw	a4,0(a5)
204048b8:	fd842783          	lw	a5,-40(s0)
204048bc:	fec42683          	lw	a3,-20(s0)
204048c0:	02c68693          	addi	a3,a3,44
204048c4:	8fd9                	or	a5,a5,a4
204048c6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204048c8:	fec42783          	lw	a5,-20(s0)
204048cc:	03478793          	addi	a5,a5,52
204048d0:	4398                	lw	a4,0(a5)
204048d2:	fd842783          	lw	a5,-40(s0)
204048d6:	fec42683          	lw	a3,-20(s0)
204048da:	03468693          	addi	a3,a3,52
204048de:	8fd9                	or	a5,a5,a4
204048e0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
204048e2:	a0a5                	j	2040494a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204048e4:	fec42783          	lw	a5,-20(s0)
204048e8:	07f1                	addi	a5,a5,28
204048ea:	4398                	lw	a4,0(a5)
204048ec:	fd842783          	lw	a5,-40(s0)
204048f0:	fec42683          	lw	a3,-20(s0)
204048f4:	06f1                	addi	a3,a3,28
204048f6:	8fd9                	or	a5,a5,a4
204048f8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204048fa:	fec42783          	lw	a5,-20(s0)
204048fe:	02478793          	addi	a5,a5,36
20404902:	4398                	lw	a4,0(a5)
20404904:	fd842783          	lw	a5,-40(s0)
20404908:	fec42683          	lw	a3,-20(s0)
2040490c:	02468693          	addi	a3,a3,36
20404910:	8fd9                	or	a5,a5,a4
20404912:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404914:	fec42783          	lw	a5,-20(s0)
20404918:	02c78793          	addi	a5,a5,44
2040491c:	4398                	lw	a4,0(a5)
2040491e:	fd842783          	lw	a5,-40(s0)
20404922:	fec42683          	lw	a3,-20(s0)
20404926:	02c68693          	addi	a3,a3,44
2040492a:	8fd9                	or	a5,a5,a4
2040492c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
2040492e:	fec42783          	lw	a5,-20(s0)
20404932:	03478793          	addi	a5,a5,52
20404936:	4398                	lw	a4,0(a5)
20404938:	fd842783          	lw	a5,-40(s0)
2040493c:	fec42683          	lw	a3,-20(s0)
20404940:	03468693          	addi	a3,a3,52
20404944:	8fd9                	or	a5,a5,a4
20404946:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404948:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
2040494a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
2040494c:	853e                	mv	a0,a5
2040494e:	50b2                	lw	ra,44(sp)
20404950:	5422                	lw	s0,40(sp)
20404952:	6145                	addi	sp,sp,48
20404954:	8082                	ret

20404956 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404956:	1101                	addi	sp,sp,-32
20404958:	ce06                	sw	ra,28(sp)
2040495a:	cc22                	sw	s0,24(sp)
2040495c:	1000                	addi	s0,sp,32
2040495e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404962:	fec42503          	lw	a0,-20(s0)
20404966:	fb2ff0ef          	jal	ra,20404118 <__metal_driver_sifive_gpio0_interrupt_parent>
2040496a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
2040496c:	853e                	mv	a0,a5
2040496e:	40f2                	lw	ra,28(sp)
20404970:	4462                	lw	s0,24(sp)
20404972:	6105                	addi	sp,sp,32
20404974:	8082                	ret

20404976 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404976:	7179                	addi	sp,sp,-48
20404978:	d606                	sw	ra,44(sp)
2040497a:	d422                	sw	s0,40(sp)
2040497c:	1800                	addi	s0,sp,48
2040497e:	fca42e23          	sw	a0,-36(s0)
20404982:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404986:	fd842583          	lw	a1,-40(s0)
2040498a:	fdc42503          	lw	a0,-36(s0)
2040498e:	fb4ff0ef          	jal	ra,20404142 <__metal_driver_sifive_gpio0_interrupt_lines>
20404992:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404996:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
2040499a:	853e                	mv	a0,a5
2040499c:	50b2                	lw	ra,44(sp)
2040499e:	5422                	lw	s0,40(sp)
204049a0:	6145                	addi	sp,sp,48
204049a2:	8082                	ret

204049a4 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
204049a4:	1101                	addi	sp,sp,-32
204049a6:	ce22                	sw	s0,28(sp)
204049a8:	1000                	addi	s0,sp,32
204049aa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204049ae:	fec42703          	lw	a4,-20(s0)
204049b2:	800007b7          	lui	a5,0x80000
204049b6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
204049ba:	00f71563          	bne	a4,a5,204049c4 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204049be:	100137b7          	lui	a5,0x10013
204049c2:	a011                	j	204049c6 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
204049c4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
204049c6:	853e                	mv	a0,a5
204049c8:	4472                	lw	s0,28(sp)
204049ca:	6105                	addi	sp,sp,32
204049cc:	8082                	ret

204049ce <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
204049ce:	1101                	addi	sp,sp,-32
204049d0:	ce22                	sw	s0,28(sp)
204049d2:	1000                	addi	s0,sp,32
204049d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204049d8:	fec42703          	lw	a4,-20(s0)
204049dc:	800007b7          	lui	a5,0x80000
204049e0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
204049e4:	00f71763          	bne	a4,a5,204049f2 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204049e8:	800007b7          	lui	a5,0x80000
204049ec:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffb194>
204049f0:	a011                	j	204049f4 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
204049f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
204049f4:	853e                	mv	a0,a5
204049f6:	4472                	lw	s0,28(sp)
204049f8:	6105                	addi	sp,sp,32
204049fa:	8082                	ret

204049fc <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
204049fc:	1101                	addi	sp,sp,-32
204049fe:	ce22                	sw	s0,28(sp)
20404a00:	1000                	addi	s0,sp,32
20404a02:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a06:	fec42703          	lw	a4,-20(s0)
20404a0a:	800007b7          	lui	a5,0x80000
20404a0e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20404a12:	00f71463          	bne	a4,a5,20404a1a <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404a16:	4795                	li	a5,5
20404a18:	a011                	j	20404a1c <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404a1a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404a1c:	853e                	mv	a0,a5
20404a1e:	4472                	lw	s0,28(sp)
20404a20:	6105                	addi	sp,sp,32
20404a22:	8082                	ret

20404a24 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404a24:	1101                	addi	sp,sp,-32
20404a26:	ce22                	sw	s0,28(sp)
20404a28:	1000                	addi	s0,sp,32
20404a2a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a2e:	fec42703          	lw	a4,-20(s0)
20404a32:	800007b7          	lui	a5,0x80000
20404a36:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20404a3a:	00f71763          	bne	a4,a5,20404a48 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404a3e:	800007b7          	lui	a5,0x80000
20404a42:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffadcc>
20404a46:	a011                	j	20404a4a <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404a48:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404a4a:	853e                	mv	a0,a5
20404a4c:	4472                	lw	s0,28(sp)
20404a4e:	6105                	addi	sp,sp,32
20404a50:	8082                	ret

20404a52 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404a52:	1101                	addi	sp,sp,-32
20404a54:	ce22                	sw	s0,28(sp)
20404a56:	1000                	addi	s0,sp,32
20404a58:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a5c:	fec42703          	lw	a4,-20(s0)
20404a60:	800007b7          	lui	a5,0x80000
20404a64:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20404a68:	00f71563          	bne	a4,a5,20404a72 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404a6c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404a70:	a011                	j	20404a74 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404a72:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404a74:	853e                	mv	a0,a5
20404a76:	4472                	lw	s0,28(sp)
20404a78:	6105                	addi	sp,sp,32
20404a7a:	8082                	ret

20404a7c <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404a7c:	1101                	addi	sp,sp,-32
20404a7e:	ce22                	sw	s0,28(sp)
20404a80:	1000                	addi	s0,sp,32
20404a82:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a86:	fec42703          	lw	a4,-20(s0)
20404a8a:	800007b7          	lui	a5,0x80000
20404a8e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20404a92:	00f71563          	bne	a4,a5,20404a9c <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404a96:	000307b7          	lui	a5,0x30
20404a9a:	a011                	j	20404a9e <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404a9c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404a9e:	853e                	mv	a0,a5
20404aa0:	4472                	lw	s0,28(sp)
20404aa2:	6105                	addi	sp,sp,32
20404aa4:	8082                	ret

20404aa6 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404aa6:	1101                	addi	sp,sp,-32
20404aa8:	ce22                	sw	s0,28(sp)
20404aaa:	1000                	addi	s0,sp,32
20404aac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ab0:	fec42703          	lw	a4,-20(s0)
20404ab4:	800007b7          	lui	a5,0x80000
20404ab8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffb494>
20404abc:	00f71563          	bne	a4,a5,20404ac6 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404ac0:	000307b7          	lui	a5,0x30
20404ac4:	a011                	j	20404ac8 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404ac6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404ac8:	853e                	mv	a0,a5
20404aca:	4472                	lw	s0,28(sp)
20404acc:	6105                	addi	sp,sp,32
20404ace:	8082                	ret

20404ad0 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404ad0:	1101                	addi	sp,sp,-32
20404ad2:	ce06                	sw	ra,28(sp)
20404ad4:	cc22                	sw	s0,24(sp)
20404ad6:	1000                	addi	s0,sp,32
20404ad8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404adc:	fec42503          	lw	a0,-20(s0)
20404ae0:	35fd                	jal	204049ce <__metal_driver_sifive_uart0_interrupt_parent>
20404ae2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404ae4:	853e                	mv	a0,a5
20404ae6:	40f2                	lw	ra,28(sp)
20404ae8:	4462                	lw	s0,24(sp)
20404aea:	6105                	addi	sp,sp,32
20404aec:	8082                	ret

20404aee <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404aee:	1101                	addi	sp,sp,-32
20404af0:	ce06                	sw	ra,28(sp)
20404af2:	cc22                	sw	s0,24(sp)
20404af4:	1000                	addi	s0,sp,32
20404af6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404afa:	fec42503          	lw	a0,-20(s0)
20404afe:	3dfd                	jal	204049fc <__metal_driver_sifive_uart0_interrupt_line>
20404b00:	87aa                	mv	a5,a0
20404b02:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404b06:	853e                	mv	a0,a5
20404b08:	40f2                	lw	ra,28(sp)
20404b0a:	4462                	lw	s0,24(sp)
20404b0c:	6105                	addi	sp,sp,32
20404b0e:	8082                	ret

20404b10 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404b10:	7179                	addi	sp,sp,-48
20404b12:	d606                	sw	ra,44(sp)
20404b14:	d422                	sw	s0,40(sp)
20404b16:	1800                	addi	s0,sp,48
20404b18:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404b1c:	fdc42503          	lw	a0,-36(s0)
20404b20:	3551                	jal	204049a4 <__metal_driver_sifive_uart0_control_base>
20404b22:	87aa                	mv	a5,a0
20404b24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404b28:	fec42783          	lw	a5,-20(s0)
20404b2c:	439c                	lw	a5,0(a5)
20404b2e:	fff7c793          	not	a5,a5
20404b32:	83fd                	srli	a5,a5,0x1f
20404b34:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404b38:	853e                	mv	a0,a5
20404b3a:	50b2                	lw	ra,44(sp)
20404b3c:	5422                	lw	s0,40(sp)
20404b3e:	6145                	addi	sp,sp,48
20404b40:	8082                	ret

20404b42 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404b42:	7179                	addi	sp,sp,-48
20404b44:	d606                	sw	ra,44(sp)
20404b46:	d422                	sw	s0,40(sp)
20404b48:	1800                	addi	s0,sp,48
20404b4a:	fca42e23          	sw	a0,-36(s0)
20404b4e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404b52:	fdc42503          	lw	a0,-36(s0)
20404b56:	35b9                	jal	204049a4 <__metal_driver_sifive_uart0_control_base>
20404b58:	87aa                	mv	a5,a0
20404b5a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404b5e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404b60:	fdc42503          	lw	a0,-36(s0)
20404b64:	3775                	jal	20404b10 <__metal_driver_sifive_uart0_txready>
20404b66:	87aa                	mv	a5,a0
20404b68:	dfe5                	beqz	a5,20404b60 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404b6a:	fec42783          	lw	a5,-20(s0)
20404b6e:	fd842703          	lw	a4,-40(s0)
20404b72:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404b74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404b76:	853e                	mv	a0,a5
20404b78:	50b2                	lw	ra,44(sp)
20404b7a:	5422                	lw	s0,40(sp)
20404b7c:	6145                	addi	sp,sp,48
20404b7e:	8082                	ret

20404b80 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404b80:	7179                	addi	sp,sp,-48
20404b82:	d606                	sw	ra,44(sp)
20404b84:	d422                	sw	s0,40(sp)
20404b86:	1800                	addi	s0,sp,48
20404b88:	fca42e23          	sw	a0,-36(s0)
20404b8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404b90:	fdc42503          	lw	a0,-36(s0)
20404b94:	3d01                	jal	204049a4 <__metal_driver_sifive_uart0_control_base>
20404b96:	87aa                	mv	a5,a0
20404b98:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404b9c:	fec42783          	lw	a5,-20(s0)
20404ba0:	0791                	addi	a5,a5,4
20404ba2:	439c                	lw	a5,0(a5)
20404ba4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404ba8:	fe842783          	lw	a5,-24(s0)
20404bac:	0007d763          	bgez	a5,20404bba <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404bb0:	fd842783          	lw	a5,-40(s0)
20404bb4:	577d                	li	a4,-1
20404bb6:	c398                	sw	a4,0(a5)
20404bb8:	a801                	j	20404bc8 <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404bba:	fe842783          	lw	a5,-24(s0)
20404bbe:	0ff7f713          	andi	a4,a5,255
20404bc2:	fd842783          	lw	a5,-40(s0)
20404bc6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404bc8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404bca:	853e                	mv	a0,a5
20404bcc:	50b2                	lw	ra,44(sp)
20404bce:	5422                	lw	s0,40(sp)
20404bd0:	6145                	addi	sp,sp,48
20404bd2:	8082                	ret

20404bd4 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404bd4:	7179                	addi	sp,sp,-48
20404bd6:	d622                	sw	s0,44(sp)
20404bd8:	1800                	addi	s0,sp,48
20404bda:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404bde:	fdc42783          	lw	a5,-36(s0)
20404be2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404be6:	fec42783          	lw	a5,-20(s0)
20404bea:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404bec:	853e                	mv	a0,a5
20404bee:	5432                	lw	s0,44(sp)
20404bf0:	6145                	addi	sp,sp,48
20404bf2:	8082                	ret

20404bf4 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404bf4:	7179                	addi	sp,sp,-48
20404bf6:	d606                	sw	ra,44(sp)
20404bf8:	d422                	sw	s0,40(sp)
20404bfa:	1800                	addi	s0,sp,48
20404bfc:	fca42e23          	sw	a0,-36(s0)
20404c00:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404c04:	fdc42783          	lw	a5,-36(s0)
20404c08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404c0c:	fdc42503          	lw	a0,-36(s0)
20404c10:	3b51                	jal	204049a4 <__metal_driver_sifive_uart0_control_base>
20404c12:	87aa                	mv	a5,a0
20404c14:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404c18:	fdc42503          	lw	a0,-36(s0)
20404c1c:	3521                	jal	20404a24 <__metal_driver_sifive_uart0_clock>
20404c1e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404c22:	fd842703          	lw	a4,-40(s0)
20404c26:	fec42783          	lw	a5,-20(s0)
20404c2a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404c2c:	fe442783          	lw	a5,-28(s0)
20404c30:	cbb1                	beqz	a5,20404c84 <__metal_driver_sifive_uart0_set_baud_rate+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404c32:	fe442783          	lw	a5,-28(s0)
20404c36:	439c                	lw	a5,0(a5)
20404c38:	439c                	lw	a5,0(a5)
20404c3a:	fe442503          	lw	a0,-28(s0)
20404c3e:	9782                	jalr	a5
20404c40:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404c44:	fe042703          	lw	a4,-32(s0)
20404c48:	fd842783          	lw	a5,-40(s0)
20404c4c:	02f747b3          	div	a5,a4,a5
20404c50:	fff78713          	addi	a4,a5,-1
20404c54:	fe842783          	lw	a5,-24(s0)
20404c58:	07e1                	addi	a5,a5,24
20404c5a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404c5c:	fe842783          	lw	a5,-24(s0)
20404c60:	07a1                	addi	a5,a5,8
20404c62:	439c                	lw	a5,0(a5)
20404c64:	fe842703          	lw	a4,-24(s0)
20404c68:	0721                	addi	a4,a4,8
20404c6a:	0017e793          	ori	a5,a5,1
20404c6e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404c70:	fe842783          	lw	a5,-24(s0)
20404c74:	07b1                	addi	a5,a5,12
20404c76:	439c                	lw	a5,0(a5)
20404c78:	fe842703          	lw	a4,-24(s0)
20404c7c:	0731                	addi	a4,a4,12
20404c7e:	0017e793          	ori	a5,a5,1
20404c82:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404c84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404c86:	853e                	mv	a0,a5
20404c88:	50b2                	lw	ra,44(sp)
20404c8a:	5422                	lw	s0,40(sp)
20404c8c:	6145                	addi	sp,sp,48
20404c8e:	8082                	ret

20404c90 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404c90:	7139                	addi	sp,sp,-64
20404c92:	de06                	sw	ra,60(sp)
20404c94:	dc22                	sw	s0,56(sp)
20404c96:	0080                	addi	s0,sp,64
20404c98:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404c9c:	fcc42783          	lw	a5,-52(s0)
20404ca0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404ca4:	fcc42503          	lw	a0,-52(s0)
20404ca8:	cfdff0ef          	jal	ra,204049a4 <__metal_driver_sifive_uart0_control_base>
20404cac:	87aa                	mv	a5,a0
20404cae:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404cb2:	fcc42503          	lw	a0,-52(s0)
20404cb6:	d6fff0ef          	jal	ra,20404a24 <__metal_driver_sifive_uart0_clock>
20404cba:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404cbe:	fe842783          	lw	a5,-24(s0)
20404cc2:	07a1                	addi	a5,a5,8
20404cc4:	4398                	lw	a4,0(a5)
20404cc6:	fe842783          	lw	a5,-24(s0)
20404cca:	07a1                	addi	a5,a5,8
20404ccc:	86be                	mv	a3,a5
20404cce:	fff907b7          	lui	a5,0xfff90
20404cd2:	17fd                	addi	a5,a5,-1
20404cd4:	8ff9                	and	a5,a5,a4
20404cd6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404cd8:	fe842783          	lw	a5,-24(s0)
20404cdc:	07a1                	addi	a5,a5,8
20404cde:	4398                	lw	a4,0(a5)
20404ce0:	fe842783          	lw	a5,-24(s0)
20404ce4:	07a1                	addi	a5,a5,8
20404ce6:	86be                	mv	a3,a5
20404ce8:	67c1                	lui	a5,0x10
20404cea:	8fd9                	or	a5,a5,a4
20404cec:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404cee:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404cf0:	fe842783          	lw	a5,-24(s0)
20404cf4:	07d1                	addi	a5,a5,20
20404cf6:	439c                	lw	a5,0(a5)
20404cf8:	8b85                	andi	a5,a5,1
20404cfa:	dbfd                	beqz	a5,20404cf0 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404cfc:	fe842783          	lw	a5,-24(s0)
20404d00:	07a1                	addi	a5,a5,8
20404d02:	439c                	lw	a5,0(a5)
20404d04:	8b89                	andi	a5,a5,2
20404d06:	c399                	beqz	a5,20404d0c <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404d08:	47a5                	li	a5,9
20404d0a:	a011                	j	20404d0e <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404d0c:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404d0e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404d12:	fe442783          	lw	a5,-28(s0)
20404d16:	439c                	lw	a5,0(a5)
20404d18:	439c                	lw	a5,0(a5)
20404d1a:	fe442503          	lw	a0,-28(s0)
20404d1e:	9782                	jalr	a5
20404d20:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404d24:	fe042703          	lw	a4,-32(s0)
20404d28:	fdc42783          	lw	a5,-36(s0)
20404d2c:	02f707b3          	mul	a5,a4,a5
20404d30:	873e                	mv	a4,a5
20404d32:	fec42783          	lw	a5,-20(s0)
20404d36:	43dc                	lw	a5,4(a5)
20404d38:	02f757b3          	divu	a5,a4,a5
20404d3c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404d40:	fc042a23          	sw	zero,-44(s0)
20404d44:	a039                	j	20404d52 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404d46:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404d48:	fd442783          	lw	a5,-44(s0)
20404d4c:	0785                	addi	a5,a5,1
20404d4e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404d52:	fd442783          	lw	a5,-44(s0)
20404d56:	fd842703          	lw	a4,-40(s0)
20404d5a:	fee7c6e3          	blt	a5,a4,20404d46 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404d5e:	0001                	nop
20404d60:	50f2                	lw	ra,60(sp)
20404d62:	5462                	lw	s0,56(sp)
20404d64:	6121                	addi	sp,sp,64
20404d66:	8082                	ret

20404d68 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404d68:	7179                	addi	sp,sp,-48
20404d6a:	d606                	sw	ra,44(sp)
20404d6c:	d422                	sw	s0,40(sp)
20404d6e:	1800                	addi	s0,sp,48
20404d70:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404d74:	fdc42783          	lw	a5,-36(s0)
20404d78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404d7c:	fec42703          	lw	a4,-20(s0)
20404d80:	fec42783          	lw	a5,-20(s0)
20404d84:	43dc                	lw	a5,4(a5)
20404d86:	85be                	mv	a1,a5
20404d88:	853a                	mv	a0,a4
20404d8a:	da1fc0ef          	jal	ra,20401b2a <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404d8e:	0001                	nop
20404d90:	50b2                	lw	ra,44(sp)
20404d92:	5422                	lw	s0,40(sp)
20404d94:	6145                	addi	sp,sp,48
20404d96:	8082                	ret

20404d98 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404d98:	7139                	addi	sp,sp,-64
20404d9a:	de06                	sw	ra,60(sp)
20404d9c:	dc22                	sw	s0,56(sp)
20404d9e:	0080                	addi	s0,sp,64
20404da0:	fca42623          	sw	a0,-52(s0)
20404da4:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404da8:	fcc42783          	lw	a5,-52(s0)
20404dac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404db0:	fcc42503          	lw	a0,-52(s0)
20404db4:	c71ff0ef          	jal	ra,20404a24 <__metal_driver_sifive_uart0_clock>
20404db8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404dbc:	fcc42503          	lw	a0,-52(s0)
20404dc0:	c93ff0ef          	jal	ra,20404a52 <__metal_driver_sifive_uart0_pinmux>
20404dc4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404dc8:	fe842783          	lw	a5,-24(s0)
20404dcc:	c7b9                	beqz	a5,20404e1a <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404dce:	fec42783          	lw	a5,-20(s0)
20404dd2:	20405737          	lui	a4,0x20405
20404dd6:	c9070713          	addi	a4,a4,-880 # 20404c90 <pre_rate_change_callback_func>
20404dda:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404ddc:	fec42783          	lw	a5,-20(s0)
20404de0:	fcc42703          	lw	a4,-52(s0)
20404de4:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404de6:	fec42783          	lw	a5,-20(s0)
20404dea:	07a1                	addi	a5,a5,8
20404dec:	85be                	mv	a1,a5
20404dee:	fe842503          	lw	a0,-24(s0)
20404df2:	20f1                	jal	20404ebe <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404df4:	fec42783          	lw	a5,-20(s0)
20404df8:	20405737          	lui	a4,0x20405
20404dfc:	d6870713          	addi	a4,a4,-664 # 20404d68 <post_rate_change_callback_func>
20404e00:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20404e02:	fec42783          	lw	a5,-20(s0)
20404e06:	fcc42703          	lw	a4,-52(s0)
20404e0a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20404e0c:	fec42783          	lw	a5,-20(s0)
20404e10:	07d1                	addi	a5,a5,20
20404e12:	85be                	mv	a1,a5
20404e14:	fe842503          	lw	a0,-24(s0)
20404e18:	28d9                	jal	20404eee <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20404e1a:	fec42783          	lw	a5,-20(s0)
20404e1e:	fc842583          	lw	a1,-56(s0)
20404e22:	853e                	mv	a0,a5
20404e24:	d07fc0ef          	jal	ra,20401b2a <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20404e28:	fe442783          	lw	a5,-28(s0)
20404e2c:	cb95                	beqz	a5,20404e60 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20404e2e:	fcc42503          	lw	a0,-52(s0)
20404e32:	c4bff0ef          	jal	ra,20404a7c <__metal_driver_sifive_uart0_pinmux_output_selector>
20404e36:	87aa                	mv	a5,a0
20404e38:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20404e3c:	fcc42503          	lw	a0,-52(s0)
20404e40:	c67ff0ef          	jal	ra,20404aa6 <__metal_driver_sifive_uart0_pinmux_source_selector>
20404e44:	87aa                	mv	a5,a0
20404e46:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20404e4a:	fe442783          	lw	a5,-28(s0)
20404e4e:	439c                	lw	a5,0(a5)
20404e50:	53dc                	lw	a5,36(a5)
20404e52:	fdc42603          	lw	a2,-36(s0)
20404e56:	fe042583          	lw	a1,-32(s0)
20404e5a:	fe442503          	lw	a0,-28(s0)
20404e5e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20404e60:	0001                	nop
20404e62:	50f2                	lw	ra,60(sp)
20404e64:	5462                	lw	s0,56(sp)
20404e66:	6121                	addi	sp,sp,64
20404e68:	8082                	ret

20404e6a <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20404e6a:	7179                	addi	sp,sp,-48
20404e6c:	d622                	sw	s0,44(sp)
20404e6e:	1800                	addi	s0,sp,48
20404e70:	fca42e23          	sw	a0,-36(s0)
20404e74:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20404e78:	fd842783          	lw	a5,-40(s0)
20404e7c:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20404e80:	fdc42783          	lw	a5,-36(s0)
20404e84:	e781                	bnez	a5,20404e8c <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20404e86:	fd842783          	lw	a5,-40(s0)
20404e8a:	a035                	j	20404eb6 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20404e8c:	fdc42783          	lw	a5,-36(s0)
20404e90:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20404e94:	a031                	j	20404ea0 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20404e96:	fec42783          	lw	a5,-20(s0)
20404e9a:	479c                	lw	a5,8(a5)
20404e9c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20404ea0:	fec42783          	lw	a5,-20(s0)
20404ea4:	479c                	lw	a5,8(a5)
20404ea6:	fbe5                	bnez	a5,20404e96 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20404ea8:	fec42783          	lw	a5,-20(s0)
20404eac:	fd842703          	lw	a4,-40(s0)
20404eb0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20404eb2:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20404eb6:	853e                	mv	a0,a5
20404eb8:	5432                	lw	s0,44(sp)
20404eba:	6145                	addi	sp,sp,48
20404ebc:	8082                	ret

20404ebe <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404ebe:	1101                	addi	sp,sp,-32
20404ec0:	ce06                	sw	ra,28(sp)
20404ec2:	cc22                	sw	s0,24(sp)
20404ec4:	1000                	addi	s0,sp,32
20404ec6:	fea42623          	sw	a0,-20(s0)
20404eca:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20404ece:	fec42783          	lw	a5,-20(s0)
20404ed2:	43dc                	lw	a5,4(a5)
20404ed4:	fe842583          	lw	a1,-24(s0)
20404ed8:	853e                	mv	a0,a5
20404eda:	3f41                	jal	20404e6a <_metal_clock_append_to_callbacks>
20404edc:	872a                	mv	a4,a0
20404ede:	fec42783          	lw	a5,-20(s0)
20404ee2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20404ee4:	0001                	nop
20404ee6:	40f2                	lw	ra,28(sp)
20404ee8:	4462                	lw	s0,24(sp)
20404eea:	6105                	addi	sp,sp,32
20404eec:	8082                	ret

20404eee <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404eee:	1101                	addi	sp,sp,-32
20404ef0:	ce06                	sw	ra,28(sp)
20404ef2:	cc22                	sw	s0,24(sp)
20404ef4:	1000                	addi	s0,sp,32
20404ef6:	fea42623          	sw	a0,-20(s0)
20404efa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20404efe:	fec42783          	lw	a5,-20(s0)
20404f02:	479c                	lw	a5,8(a5)
20404f04:	fe842583          	lw	a1,-24(s0)
20404f08:	853e                	mv	a0,a5
20404f0a:	3785                	jal	20404e6a <_metal_clock_append_to_callbacks>
20404f0c:	872a                	mv	a4,a0
20404f0e:	fec42783          	lw	a5,-20(s0)
20404f12:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20404f14:	0001                	nop
20404f16:	40f2                	lw	ra,28(sp)
20404f18:	4462                	lw	s0,24(sp)
20404f1a:	6105                	addi	sp,sp,32
20404f1c:	8082                	ret

20404f1e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20404f1e:	1101                	addi	sp,sp,-32
20404f20:	ce06                	sw	ra,28(sp)
20404f22:	cc22                	sw	s0,24(sp)
20404f24:	1000                	addi	s0,sp,32
20404f26:	fea42623          	sw	a0,-20(s0)
20404f2a:	fec42783          	lw	a5,-20(s0)
20404f2e:	439c                	lw	a5,0(a5)
20404f30:	57dc                	lw	a5,44(a5)
20404f32:	fec42503          	lw	a0,-20(s0)
20404f36:	9782                	jalr	a5
20404f38:	87aa                	mv	a5,a0
20404f3a:	853e                	mv	a0,a5
20404f3c:	40f2                	lw	ra,28(sp)
20404f3e:	4462                	lw	s0,24(sp)
20404f40:	6105                	addi	sp,sp,32
20404f42:	8082                	ret

20404f44 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20404f44:	1101                	addi	sp,sp,-32
20404f46:	ce22                	sw	s0,28(sp)
20404f48:	1000                	addi	s0,sp,32
20404f4a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20404f4e:	fec42783          	lw	a5,-20(s0)
20404f52:	eb89                	bnez	a5,20404f64 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20404f54:	fec42703          	lw	a4,-20(s0)
20404f58:	070a                	slli	a4,a4,0x2
20404f5a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20404f5e:	97ba                	add	a5,a5,a4
20404f60:	439c                	lw	a5,0(a5)
20404f62:	a011                	j	20404f66 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20404f64:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20404f66:	853e                	mv	a0,a5
20404f68:	4472                	lw	s0,28(sp)
20404f6a:	6105                	addi	sp,sp,32
20404f6c:	8082                	ret

20404f6e <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20404f6e:	1101                	addi	sp,sp,-32
20404f70:	ce22                	sw	s0,28(sp)
20404f72:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20404f74:	f14027f3          	csrr	a5,mhartid
20404f78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20404f7c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20404f80:	853e                	mv	a0,a5
20404f82:	4472                	lw	s0,28(sp)
20404f84:	6105                	addi	sp,sp,32
20404f86:	8082                	ret

20404f88 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20404f88:	1101                	addi	sp,sp,-32
20404f8a:	ce22                	sw	s0,28(sp)
20404f8c:	1000                	addi	s0,sp,32
20404f8e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20404f92:	0001                	nop
20404f94:	bffd                	j	20404f92 <metal_shutdown+0xa>
	...

20405000 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405000:	c80fd06f          	j	20402480 <metal_interrupt_vector_handler>

20405004 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405004:	c7cfd06f          	j	20402480 <metal_interrupt_vector_handler>

20405008 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405008:	c78fd06f          	j	20402480 <metal_interrupt_vector_handler>

2040500c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040500c:	ca2fd06f          	j	204024ae <metal_software_interrupt_vector_handler>

20405010 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405010:	c70fd06f          	j	20402480 <metal_interrupt_vector_handler>

20405014 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405014:	c6cfd06f          	j	20402480 <metal_interrupt_vector_handler>

20405018 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405018:	c68fd06f          	j	20402480 <metal_interrupt_vector_handler>

2040501c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040501c:	d84fd06f          	j	204025a0 <metal_timer_interrupt_vector_handler>

20405020 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405020:	c60fd06f          	j	20402480 <metal_interrupt_vector_handler>

20405024 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405024:	c5cfd06f          	j	20402480 <metal_interrupt_vector_handler>

20405028 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405028:	c58fd06f          	j	20402480 <metal_interrupt_vector_handler>

2040502c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040502c:	c54fd06f          	j	20402480 <metal_interrupt_vector_handler>

20405030 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405030:	c50fd06f          	j	20402480 <metal_interrupt_vector_handler>

20405034 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405034:	c4cfd06f          	j	20402480 <metal_interrupt_vector_handler>

20405038 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405038:	c48fd06f          	j	20402480 <metal_interrupt_vector_handler>

2040503c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040503c:	c44fd06f          	j	20402480 <metal_interrupt_vector_handler>

20405040 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405040:	835fd06f          	j	20402874 <metal_lc0_interrupt_vector_handler>

20405044 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405044:	8c3fd06f          	j	20402906 <metal_lc1_interrupt_vector_handler>

20405048 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405048:	951fd06f          	j	20402998 <metal_lc2_interrupt_vector_handler>

2040504c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040504c:	9dffd06f          	j	20402a2a <metal_lc3_interrupt_vector_handler>

20405050 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405050:	a6dfd06f          	j	20402abc <metal_lc4_interrupt_vector_handler>

20405054 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405054:	afbfd06f          	j	20402b4e <metal_lc5_interrupt_vector_handler>

20405058 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405058:	b89fd06f          	j	20402be0 <metal_lc6_interrupt_vector_handler>

2040505c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040505c:	c17fd06f          	j	20402c72 <metal_lc7_interrupt_vector_handler>

20405060 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405060:	ca5fd06f          	j	20402d04 <metal_lc8_interrupt_vector_handler>

20405064 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405064:	d33fd06f          	j	20402d96 <metal_lc9_interrupt_vector_handler>

20405068 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405068:	dc1fd06f          	j	20402e28 <metal_lc10_interrupt_vector_handler>

2040506c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040506c:	e4ffd06f          	j	20402eba <metal_lc11_interrupt_vector_handler>

20405070 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405070:	eddfd06f          	j	20402f4c <metal_lc12_interrupt_vector_handler>

20405074 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405074:	f6bfd06f          	j	20402fde <metal_lc13_interrupt_vector_handler>

20405078 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405078:	ff9fd06f          	j	20403070 <metal_lc14_interrupt_vector_handler>

2040507c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040507c:	886fe06f          	j	20403102 <metal_lc15_interrupt_vector_handler>

20405080 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405080:	1101                	addi	sp,sp,-32
20405082:	ce22                	sw	s0,28(sp)
20405084:	1000                	addi	s0,sp,32
20405086:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040508a:	fec42703          	lw	a4,-20(s0)
2040508e:	800007b7          	lui	a5,0x80000
20405092:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffadcc>
20405096:	00f71763          	bne	a4,a5,204050a4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040509a:	03dfd7b7          	lui	a5,0x3dfd
2040509e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
204050a2:	a011                	j	204050a6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
204050a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
204050a6:	853e                	mv	a0,a5
204050a8:	4472                	lw	s0,28(sp)
204050aa:	6105                	addi	sp,sp,32
204050ac:	8082                	ret

204050ae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204050ae:	1101                	addi	sp,sp,-32
204050b0:	ce06                	sw	ra,28(sp)
204050b2:	cc22                	sw	s0,24(sp)
204050b4:	1000                	addi	s0,sp,32
204050b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
204050ba:	fec42503          	lw	a0,-20(s0)
204050be:	37c9                	jal	20405080 <__metal_driver_fixed_clock_rate>
204050c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
204050c2:	853e                	mv	a0,a5
204050c4:	40f2                	lw	ra,28(sp)
204050c6:	4462                	lw	s0,24(sp)
204050c8:	6105                	addi	sp,sp,32
204050ca:	8082                	ret

204050cc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204050cc:	1101                	addi	sp,sp,-32
204050ce:	ce06                	sw	ra,28(sp)
204050d0:	cc22                	sw	s0,24(sp)
204050d2:	1000                	addi	s0,sp,32
204050d4:	fea42623          	sw	a0,-20(s0)
204050d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204050dc:	fec42503          	lw	a0,-20(s0)
204050e0:	37f9                	jal	204050ae <__metal_driver_fixed_clock_get_rate_hz>
204050e2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
204050e4:	853e                	mv	a0,a5
204050e6:	40f2                	lw	ra,28(sp)
204050e8:	4462                	lw	s0,24(sp)
204050ea:	6105                	addi	sp,sp,32
204050ec:	8082                	ret

204050ee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204050ee:	1101                	addi	sp,sp,-32
204050f0:	ce06                	sw	ra,28(sp)
204050f2:	cc22                	sw	s0,24(sp)
204050f4:	1000                	addi	s0,sp,32
204050f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204050fa:	fec42503          	lw	a0,-20(s0)
204050fe:	3569                	jal	20404f88 <metal_shutdown>
