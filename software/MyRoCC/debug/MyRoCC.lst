
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/debug/MyRoCC.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/debug/MyRoCC.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005744 memsz 0x00005744 flags rwx
    LOAD off    0x00006770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x00000c9c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405748 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005080  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000004c0  20405280  20405280  00006280  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405740  20405740  00006740  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405748  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000009c  80000770  80000770  00006770  2**3  ALLOC
  6 .stack            00000400  8000080c  8000080c  00006770  2**0  ALLOC
  7 .heap             00000800  80000c0c  80000c0c  00006770  2**0  ALLOC
  8 .debug_info       0001423c  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026e6  00000000  00000000  0001b9ac  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008a0  00000000  00000000  0001e098  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000738  00000000  00000000  0001e938  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007786  00000000  00000000  0001f070  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036e5  00000000  00000000  000267f6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00029edb  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  00029f03  2**0  CONTENTS, READONLY
 16 .debug_frame      000023cc  00000000  00000000  00029f30  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405280 l    d  .rodata	00000000 .rodata
20405740 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
8000080c l    d  .stack	00000000 .stack
80000c0c l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
204053f0 l       .rodata	00000000 argv
204053f4 l       .rodata	00000000 envp
204053f8 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 MyRoCC.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400a06 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400f56 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
8000077c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401c24 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401cce l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401cf4 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401d18 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401d54 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401eb4 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204023e4 l     F .text	00000024 __metal_driver_cpu_hartid
20402408 l     F .text	0000002a __metal_driver_cpu_timebase
20402432 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403c94 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403cbe l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403ce6 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403d0e l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403d36 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404280 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204042a6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204042d0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404b36 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404b60 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404b8e l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404bb6 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404be4 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404c0e l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404c38 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404e24 l     F .text	000000d8 pre_rate_change_callback_func
20404efc l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-vector.o
20405180 l       .text	00000000 IRQ_0
20405184 l       .text	00000000 IRQ_1
20405188 l       .text	00000000 IRQ_2
2040518c l       .text	00000000 IRQ_3
20405190 l       .text	00000000 IRQ_4
20405194 l       .text	00000000 IRQ_5
20405198 l       .text	00000000 IRQ_6
2040519c l       .text	00000000 IRQ_7
204051a0 l       .text	00000000 IRQ_8
204051a4 l       .text	00000000 IRQ_9
204051a8 l       .text	00000000 IRQ_10
204051ac l       .text	00000000 IRQ_11
204051b0 l       .text	00000000 IRQ_12
204051b4 l       .text	00000000 IRQ_13
204051b8 l       .text	00000000 IRQ_14
204051bc l       .text	00000000 IRQ_15
204051c0 l       .text	00000000 IRQ_LC0
204051c4 l       .text	00000000 IRQ_LC1
204051c8 l       .text	00000000 IRQ_LC2
204051cc l       .text	00000000 IRQ_LC3
204051d0 l       .text	00000000 IRQ_LC4
204051d4 l       .text	00000000 IRQ_LC5
204051d8 l       .text	00000000 IRQ_LC6
204051dc l       .text	00000000 IRQ_LC7
204051e0 l       .text	00000000 IRQ_LC8
204051e4 l       .text	00000000 IRQ_LC9
204051e8 l       .text	00000000 IRQ_LC10
204051ec l       .text	00000000 IRQ_LC11
204051f0 l       .text	00000000 IRQ_LC12
204051f4 l       .text	00000000 IRQ_LC13
204051f8 l       .text	00000000 IRQ_LC14
204051fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405200 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405744 l       .init_array	00000000 __fini_array_end
20405744 l       .init_array	00000000 __fini_array_start
20405744 l       .init_array	00000000 __init_array_end
20405740 l       .init_array	00000000 __preinit_array_end
20405740 l       .init_array	00000000 __init_array_start
20405740 l       .init_array	00000000 __preinit_array_start
20405720 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204013ba g     F .text	00000028 _isatty_r
20402c3c  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204005a0 g     F .text	000000da _puts_r
204013e2 g     F .text	0000002c _lseek_r
20404d86 g     F .text	0000009e __metal_driver_sifive_uart0_set_baud_rate
20402090 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402baa  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204033fc g     F .text	00000038 __metal_valid_interrupt_id
2040055c g     F .text	00000044 printf
20403822 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
20404ffe g     F .text	00000054 _metal_clock_append_to_callbacks
20403d86 g     F .text	00000038 __metal_plic0_complete_interrupt
2040367c g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401300 g     F .text	00000036 __sseek
20400abc g     F .text	0000006a __sinit
20400688 g     F .text	000000c0 __swbuf_r
20400a78 g     F .text	00000044 __sfmoreglue
2040142a g     F .text	00000002 __malloc_unlock
204050d8 g     F .text	0000002a metal_cpu_get
80000728 g     O .data	00000020 __metal_dt_serial_10013000
20404710 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405404 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
8000080c g       .bss	00000000 metal_segment_bss_target_end
20401d84 g     F .text	0000009a __metal_clint0_mtime_get
20403c28 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204044c2 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
204019a8 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404ca2 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20401e1e g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401390 g     F .text	0000002a _fstat_r
20404960 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000808 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405052 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402f16  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405658 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405618 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401ca0 g     F .text	0000002e metal_uart_set_baud_rate
20404f2c g     F .text	000000d2 __metal_driver_sifive_uart0_init
204038b6 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80000c0c g       .heap	00000000 metal_segment_heap_target_start
20400a6e g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20402e84  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040067a g     F .text	0000000e puts
2040315e  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204025c6 g     F .text	00000018 __metal_default_exception_handler
20401828 g     F .text	00000026 _fstat
204023b0 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403e22 g     F .text	00000062 __metal_plic0_set_priority
2040383e g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
2040245c g     F .text	0000002c __metal_driver_cpu_get
204055cc g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204024ba g     F .text	00000018 __metal_interrupt_global_disable
20402df2  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402fa8  w    F .text	00000092 metal_lc10_interrupt_vector_handler
2040125a g     F .text	00000028 _sbrk_r
20404238 g     F .text	00000048 __metal_driver_riscv_plic0_disable
204034f0 g     F .text	0000004e __metal_exception_register
204017da g     F .text	0000002c _read_r
20403a4a g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
204045a2 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204026b2 g     F .text	00000064 __metal_default_sw_handler
20405082 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404c62 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
2040184e g     F .text	00000020 _isatty
20404668 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
20402716  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401a18 g     F .text	0000006a __libc_init_array
204045e2 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040303a  w    F .text	00000092 metal_lc11_interrupt_vector_handler
2040021e g     F .text	00000074 xorSW
204037ca g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
204018c2 g     F .text	0000006e _sbrk
2040455c g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
2040251c g     F .text	0000001a __metal_interrupt_timer_disable
2040475a g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403b00 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204056e4 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204046a8 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204019e0 g     F .text	00000038 __libc_fini_array
20404ae8 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403a8a g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
2040256e g     F .text	0000002c __metal_interrupt_local_enable
2040237c g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401bd2 g     F .text	0000002c metal_tty_putc
20403f44 g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405354 g     O .rodata	00000020 __sf_fake_stderr
20402552 g     F .text	0000001c __metal_interrupt_external_disable
20404c80 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
2040389a g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040353e g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400f80 g     F .text	00000042 __sfputs_r
20403be2 g     F .text	00000046 __metal_driver_cpu_exception_register
204024d2 g     F .text	00000018 __metal_interrupt_software_enable
20402a86  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040140e g     F .text	0000001a memchr
20400dcc g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403314 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401b0a g     F .text	000000c8 __call_exitprocs
80000c0c g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040186e g     F .text	0000002a _lseek
20403bc2 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403c56 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402536 g     F .text	0000001c __metal_interrupt_external_enable
20401a82 g     F .text	00000088 __register_exitproc
20404cd4 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20403fea g     F .text	00000144 __metal_driver_riscv_plic0_init
204041f0 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404530 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402d60  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402488 g     F .text	0000001a __metal_myhart_id
20404b08 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402624  w    F .text	0000008e metal_software_interrupt_vector_handler
204037f6 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401368 g     F .text	00000028 _close_r
20404d66 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401f72 g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
20400748 g     F .text	00000110 __swsetup_r
20400b26 g     F .text	0000009e __sfp
20401282 g     F .text	00000030 __sread
20404484 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
204025f6  w    F .text	0000002e metal_interrupt_vector_handler
20401428 g     F .text	00000002 __malloc_lock
204009a2 g     F .text	00000064 _fflush_r
20403df6 g     F .text	0000002c __metal_plic0_get_threshold
20405374 g     O .rodata	00000020 __sf_fake_stdin
20403434 g     F .text	000000bc __metal_local_interrupt_enable
20402248 g     F .text	00000134 __metal_driver_riscv_clint0_command_request
20400d24 g     F .text	000000a8 memset
20402cce  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400292 g     F .text	000002ca main
80000770 g       .data	00000000 metal_segment_data_target_end
20403a9e g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403b62 g     F .text	00000060 __metal_driver_cpu_get_msip
2040511c g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403c74 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403d58 g     F .text	0000002e __metal_plic0_claim_interrupt
20401336 g     F .text	00000006 __sclose
204030cc  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400e78 g     F .text	000000de _malloc_r
20402074 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403928 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405102 g     F .text	0000001a metal_cpu_get_current_hartid
20405180 g       .text	00000000 __metal_vector_table
20405748 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
2040055c g     F .text	00000044 iprintf
204024a2 g     F .text	00000018 __metal_interrupt_global_enable
2040199e g     F .text	0000000a atexit
20401bfe g     F .text	00000026 metal_tty_putc_raw
2040133c g     F .text	0000002c _write_r
20402502 g     F .text	0000001a __metal_interrupt_timer_enable
20404d12 g     F .text	00000054 __metal_driver_sifive_uart0_getc
20402196 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2040142c g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
204039d4 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400858 g     F .text	0000014a __sflush_r
2040522e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204020e4 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405748 g       *ABS*	00000000 metal_segment_data_source_start
8000140c g       .heap	00000000 metal_segment_heap_target_end
20403364 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400c30 g     F .text	00000058 __swhatbuf_r
20404622 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204027a4 g     F .text	00000066 __metal_default_timer_handler
20401930 g     F .text	0000006e _write
20403f5c g     F .text	0000008e __metal_plic0_handler
20402b18  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403282  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204050b2 g     F .text	00000026 metal_cpu_interrupt_controller
204012b2 g     F .text	0000004e __swrite
204019b4 g     F .text	0000002c exit
20400fc2 g     F .text	00000298 _vfiprintf_r
20400bc4 g     F .text	0000006c _fwalk_reent
2040524c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405394 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
204025de g     F .text	00000018 __metal_default_interrupt_handler
20401c72 g     F .text	0000002e metal_uart_putc
20401898 g     F .text	0000002a _read
20404506 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402880 g     F .text	0000014e __metal_exception_handler
204029f4  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040526e g     F .text	00000012 _exit
2040396e g     F .text	00000066 __metal_driver_cpu_mtime_get
20400c88 g     F .text	0000009c __smakebuf_r
2040204c g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401538 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
204031f0  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401eea g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
20400fc2 g     F .text	00000298 _vfprintf_r
20403a60 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403eb8 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403a74 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
2040259a g     F .text	0000002c __metal_interrupt_local_disable
204024ea g     F .text	00000018 __metal_interrupt_software_disable
20403e84 g     F .text	00000034 __metal_plic0_get_priority
20401c46 g     F .text	0000002c metal_uart_init
20403dbe g     F .text	00000038 __metal_plic0_set_threshold
20401806 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
2040412e g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	cc418113          	addi	sp,gp,-828 # 80000c0c <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00005297          	auipc	t0,0x5
204000ac:	6a028293          	addi	t0,t0,1696 # 20405748 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00005297          	auipc	t0,0x5
204000d8:	67428293          	addi	t0,t0,1652 # 20405748 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	66830313          	addi	t1,t1,1640 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	8c418393          	addi	t2,gp,-1852 # 8000080c <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	8ba50513          	addi	a0,a0,-1862 # 204019e0 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	071010ef          	jal	ra,2040199e <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	0e7010ef          	jal	ra,20401a18 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	29658593          	addi	a1,a1,662 # 204053f0 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	29260613          	addi	a2,a2,658 # 204053f4 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	049010ef          	jal	ra,204019b4 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2219                	jal	20400292 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/../RoCCcommon/csr.h:50

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/../RoCCcommon/csr.h:51
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/../RoCCcommon/csr.h:52
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/../RoCCcommon/csr.h:53
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/../RoCCcommon/csr.h:54
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <xorSW>:
xorSW():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:7
#include "../RoCCcommon/rocc.h"

#include <stdio.h>
#define ARRAY_LEN 10

unsigned xorSW(unsigned arr[], unsigned res[], unsigned init_val){
2040021e:	7179                	addi	sp,sp,-48
20400220:	d622                	sw	s0,44(sp)
20400222:	1800                	addi	s0,sp,48
20400224:	fca42e23          	sw	a0,-36(s0)
20400228:	fcb42c23          	sw	a1,-40(s0)
2040022c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:8
    unsigned xor_val = init_val;
20400230:	fd442783          	lw	a5,-44(s0)
20400234:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:9
    unsigned aux_val = 0;
20400238:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:10
    for(int i = 0; i < 10 ; i++){
2040023c:	fe042423          	sw	zero,-24(s0)
20400240:	a83d                	j	2040027e <xorSW+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:11 (discriminator 3)
       aux_val = xor_val ^ arr[i];
20400242:	fe842783          	lw	a5,-24(s0)
20400246:	078a                	slli	a5,a5,0x2
20400248:	fdc42703          	lw	a4,-36(s0)
2040024c:	97ba                	add	a5,a5,a4
2040024e:	439c                	lw	a5,0(a5)
20400250:	fec42703          	lw	a4,-20(s0)
20400254:	8fb9                	xor	a5,a5,a4
20400256:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:12 (discriminator 3)
       xor_val = aux_val;
2040025a:	fe442783          	lw	a5,-28(s0)
2040025e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:13 (discriminator 3)
       res[i] = xor_val;
20400262:	fe842783          	lw	a5,-24(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fd842703          	lw	a4,-40(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	fec42703          	lw	a4,-20(s0)
20400272:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:10 (discriminator 3)
    for(int i = 0; i < 10 ; i++){
20400274:	fe842783          	lw	a5,-24(s0)
20400278:	0785                	addi	a5,a5,1
2040027a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:10 (discriminator 1)
2040027e:	fe842703          	lw	a4,-24(s0)
20400282:	47a5                	li	a5,9
20400284:	fae7dfe3          	bge	a5,a4,20400242 <xorSW+0x24>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:16

    }
    return 0;
20400288:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:17
}
2040028a:	853e                	mv	a0,a5
2040028c:	5432                	lw	s0,44(sp)
2040028e:	6145                	addi	sp,sp,48
20400290:	8082                	ret

20400292 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:19

int main(void){
20400292:	7115                	addi	sp,sp,-224
20400294:	cf86                	sw	ra,220(sp)
20400296:	cda2                	sw	s0,216(sp)
20400298:	cbca                	sw	s2,212(sp)
2040029a:	c9ce                	sw	s3,208(sp)
2040029c:	c7d2                	sw	s4,204(sp)
2040029e:	c5d6                	sw	s5,200(sp)
204002a0:	c3da                	sw	s6,196(sp)
204002a2:	c1de                	sw	s7,192(sp)
204002a4:	1180                	addi	s0,sp,224
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:20
    unsigned arrSW [ARRAY_LEN] = {0,1,2,3,4,5,6,7,8,9};
204002a6:	204057b7          	lui	a5,0x20405
204002aa:	32c78793          	addi	a5,a5,812 # 2040532c <_exit+0xbe>
204002ae:	0007ae03          	lw	t3,0(a5)
204002b2:	0047a303          	lw	t1,4(a5)
204002b6:	0087a883          	lw	a7,8(a5)
204002ba:	00c7a803          	lw	a6,12(a5)
204002be:	4b88                	lw	a0,16(a5)
204002c0:	4bcc                	lw	a1,20(a5)
204002c2:	4f90                	lw	a2,24(a5)
204002c4:	4fd4                	lw	a3,28(a5)
204002c6:	5398                	lw	a4,32(a5)
204002c8:	53dc                	lw	a5,36(a5)
204002ca:	f9c42e23          	sw	t3,-100(s0)
204002ce:	fa642023          	sw	t1,-96(s0)
204002d2:	fb142223          	sw	a7,-92(s0)
204002d6:	fb042423          	sw	a6,-88(s0)
204002da:	faa42623          	sw	a0,-84(s0)
204002de:	fab42823          	sw	a1,-80(s0)
204002e2:	fac42a23          	sw	a2,-76(s0)
204002e6:	fad42c23          	sw	a3,-72(s0)
204002ea:	fae42e23          	sw	a4,-68(s0)
204002ee:	fcf42023          	sw	a5,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:21
    unsigned resSW [ARRAY_LEN] = {0};
204002f2:	f6042a23          	sw	zero,-140(s0)
204002f6:	f6042c23          	sw	zero,-136(s0)
204002fa:	f6042e23          	sw	zero,-132(s0)
204002fe:	f8042023          	sw	zero,-128(s0)
20400302:	f8042223          	sw	zero,-124(s0)
20400306:	f8042423          	sw	zero,-120(s0)
2040030a:	f8042623          	sw	zero,-116(s0)
2040030e:	f8042823          	sw	zero,-112(s0)
20400312:	f8042a23          	sw	zero,-108(s0)
20400316:	f8042c23          	sw	zero,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:22
    unsigned arrHW [ARRAY_LEN] = {0,1,2,3,4,5,6,7,8,9};
2040031a:	204057b7          	lui	a5,0x20405
2040031e:	32c78793          	addi	a5,a5,812 # 2040532c <_exit+0xbe>
20400322:	0007ae03          	lw	t3,0(a5)
20400326:	0047a303          	lw	t1,4(a5)
2040032a:	0087a883          	lw	a7,8(a5)
2040032e:	00c7a803          	lw	a6,12(a5)
20400332:	4b88                	lw	a0,16(a5)
20400334:	4bcc                	lw	a1,20(a5)
20400336:	4f90                	lw	a2,24(a5)
20400338:	4fd4                	lw	a3,28(a5)
2040033a:	5398                	lw	a4,32(a5)
2040033c:	53dc                	lw	a5,36(a5)
2040033e:	f5c42623          	sw	t3,-180(s0)
20400342:	f4642823          	sw	t1,-176(s0)
20400346:	f5142a23          	sw	a7,-172(s0)
2040034a:	f5042c23          	sw	a6,-168(s0)
2040034e:	f4a42e23          	sw	a0,-164(s0)
20400352:	f6b42023          	sw	a1,-160(s0)
20400356:	f6c42223          	sw	a2,-156(s0)
2040035a:	f6d42423          	sw	a3,-152(s0)
2040035e:	f6e42623          	sw	a4,-148(s0)
20400362:	f6f42823          	sw	a5,-144(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:23
    unsigned resHW [ARRAY_LEN] = {0};
20400366:	f2042223          	sw	zero,-220(s0)
2040036a:	f2042423          	sw	zero,-216(s0)
2040036e:	f2042623          	sw	zero,-212(s0)
20400372:	f2042823          	sw	zero,-208(s0)
20400376:	f2042a23          	sw	zero,-204(s0)
2040037a:	f2042c23          	sw	zero,-200(s0)
2040037e:	f2042e23          	sw	zero,-196(s0)
20400382:	f4042023          	sw	zero,-192(s0)
20400386:	f4042223          	sw	zero,-188(s0)
2040038a:	f4042423          	sw	zero,-184(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:25

    unsigned init_xor = 12;
2040038e:	47b1                	li	a5,12
20400390:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:27

    printf("Init SW \n");
20400394:	204057b7          	lui	a5,0x20405
20400398:	28078513          	addi	a0,a5,640 # 20405280 <_exit+0x12>
2040039c:	2cf9                	jal	2040067a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:31
    unsigned start, end;
    unsigned SWcycles, HWcycles;

    xorSW(arrSW, resSW, init_xor);
2040039e:	f7440713          	addi	a4,s0,-140
204003a2:	f9c40793          	addi	a5,s0,-100
204003a6:	fd842603          	lw	a2,-40(s0)
204003aa:	85ba                	mv	a1,a4
204003ac:	853e                	mv	a0,a5
204003ae:	3d85                	jal	2040021e <xorSW>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:32
    int i = 0;
204003b0:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:33
    start = rdcycle();
204003b4:	35b1                	jal	20400200 <rdcycle>
204003b6:	87aa                	mv	a5,a0
204003b8:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:34
    for(i = 0; i< ARRAY_LEN; i ++){
204003bc:	fc042e23          	sw	zero,-36(s0)
204003c0:	a035                	j	204003ec <main+0x15a>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:35 (discriminator 3)
        printf("resSW[%d]  =  %d \n", i, resSW[i]);
204003c2:	fdc42783          	lw	a5,-36(s0)
204003c6:	078a                	slli	a5,a5,0x2
204003c8:	fe040713          	addi	a4,s0,-32
204003cc:	97ba                	add	a5,a5,a4
204003ce:	f947a783          	lw	a5,-108(a5)
204003d2:	863e                	mv	a2,a5
204003d4:	fdc42583          	lw	a1,-36(s0)
204003d8:	204057b7          	lui	a5,0x20405
204003dc:	28c78513          	addi	a0,a5,652 # 2040528c <_exit+0x1e>
204003e0:	2ab5                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:34 (discriminator 3)
    for(i = 0; i< ARRAY_LEN; i ++){
204003e2:	fdc42783          	lw	a5,-36(s0)
204003e6:	0785                	addi	a5,a5,1
204003e8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:34 (discriminator 1)
204003ec:	fdc42703          	lw	a4,-36(s0)
204003f0:	47a5                	li	a5,9
204003f2:	fce7d8e3          	bge	a5,a4,204003c2 <main+0x130>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:37
    }
    end = rdcycle();
204003f6:	3529                	jal	20400200 <rdcycle>
204003f8:	87aa                	mv	a5,a0
204003fa:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:38
    SWcycles = end - start;
204003fe:	fd042703          	lw	a4,-48(s0)
20400402:	fd442783          	lw	a5,-44(s0)
20400406:	40f707b3          	sub	a5,a4,a5
2040040a:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:39
    printf("SW cycles = %d \n", SWcycles);
2040040e:	fcc42583          	lw	a1,-52(s0)
20400412:	204057b7          	lui	a5,0x20405
20400416:	2a078513          	addi	a0,a5,672 # 204052a0 <_exit+0x32>
2040041a:	2289                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:40
    printf("Init HW \n");
2040041c:	204057b7          	lui	a5,0x20405
20400420:	2b478513          	addi	a0,a5,692 # 204052b4 <_exit+0x46>
20400424:	2c99                	jal	2040067a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:41
    printf("%x  %x \n", arrSW, arrHW);
20400426:	f4c40713          	addi	a4,s0,-180
2040042a:	f9c40793          	addi	a5,s0,-100
2040042e:	863a                	mv	a2,a4
20400430:	85be                	mv	a1,a5
20400432:	204057b7          	lui	a5,0x20405
20400436:	2c078513          	addi	a0,a5,704 # 204052c0 <_exit+0x52>
2040043a:	220d                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:42
    printf("%x  \n", arrHW + 1);
2040043c:	f4c40793          	addi	a5,s0,-180
20400440:	0791                	addi	a5,a5,4
20400442:	85be                	mv	a1,a5
20400444:	204057b7          	lui	a5,0x20405
20400448:	2cc78513          	addi	a0,a5,716 # 204052cc <_exit+0x5e>
2040044c:	2a01                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:44

    unsigned rd = 0;
2040044e:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:46
    // RoCC
    start = rdcycle();
20400452:	337d                	jal	20400200 <rdcycle>
20400454:	87aa                	mv	a5,a0
20400456:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:47
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
2040045a:	67e1                	lui	a5,0x18
2040045c:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:48
    asm volatile("fence"); // always add it, this instrucction waits till all memory acceses have finished
20400460:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:49
    ROCC_INSTRUCTION_DSS(0,rd,arrHW,resHW,0); // Destiny, Source, Source = xd = 1, xs1 = 1, xs2 = 1
20400464:	f4c40793          	addi	a5,s0,-180
20400468:	8b3e                	mv	s6,a5
2040046a:	87fd                	srai	a5,a5,0x1f
2040046c:	8bbe                	mv	s7,a5
2040046e:	85da                	mv	a1,s6
20400470:	865e                	mv	a2,s7
20400472:	f2440793          	addi	a5,s0,-220
20400476:	8a3e                	mv	s4,a5
20400478:	87fd                	srai	a5,a5,0x1f
2040047a:	8abe                	mv	s5,a5
2040047c:	8652                	mv	a2,s4
2040047e:	86d6                	mv	a3,s5
20400480:	00c5f50b          	0xc5f50b
20400484:	87aa                	mv	a5,a0
20400486:	882e                	mv	a6,a1
20400488:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:51
    // 0 = Custom_opcode0 := 0b, rd = return value most be 1, rs1 = addr, rs2 = addr, func7 = 0
    asm volatile("fence" ::: "memory");
2040048c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:52
    printf("Second instruction \n");
20400490:	204057b7          	lui	a5,0x20405
20400494:	2d478513          	addi	a0,a5,724 # 204052d4 <_exit+0x66>
20400498:	22cd                	jal	2040067a <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:54

    asm volatile("fence"); // always add it, this instrucction waits till all memory acceses have finished
2040049a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:55
    ROCC_INSTRUCTION_DSS(0,rd,ARRAY_LEN,init_xor,1); // Destiny, Source, Source = xd = 1, xs1 = 1, xs2 = 1
2040049e:	45a9                	li	a1,10
204004a0:	4601                	li	a2,0
204004a2:	fd842783          	lw	a5,-40(s0)
204004a6:	893e                	mv	s2,a5
204004a8:	4981                	li	s3,0
204004aa:	864a                	mv	a2,s2
204004ac:	86ce                	mv	a3,s3
204004ae:	02c5f50b          	0x2c5f50b
204004b2:	87aa                	mv	a5,a0
204004b4:	882e                	mv	a6,a1
204004b6:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:56
    asm volatile("fence" ::: "memory");
204004ba:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:57
    end = rdcycle();
204004be:	3389                	jal	20400200 <rdcycle>
204004c0:	87aa                	mv	a5,a0
204004c2:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:58
    HWcycles = end - start;
204004c6:	fd042703          	lw	a4,-48(s0)
204004ca:	fd442783          	lw	a5,-44(s0)
204004ce:	40f707b3          	sub	a5,a4,a5
204004d2:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:60

    printf("Hw finish %d \n", rd); // most be 2
204004d6:	fc842583          	lw	a1,-56(s0)
204004da:	204057b7          	lui	a5,0x20405
204004de:	2e878513          	addi	a0,a5,744 # 204052e8 <_exit+0x7a>
204004e2:	28ad                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:61
    for(i = 0; i< ARRAY_LEN; i ++){
204004e4:	fc042e23          	sw	zero,-36(s0)
204004e8:	a035                	j	20400514 <main+0x282>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:62 (discriminator 3)
        printf("resHW[%d]  =  %d \n", i, resHW[i]);
204004ea:	fdc42783          	lw	a5,-36(s0)
204004ee:	078a                	slli	a5,a5,0x2
204004f0:	fe040713          	addi	a4,s0,-32
204004f4:	97ba                	add	a5,a5,a4
204004f6:	f447a783          	lw	a5,-188(a5)
204004fa:	863e                	mv	a2,a5
204004fc:	fdc42583          	lw	a1,-36(s0)
20400500:	204057b7          	lui	a5,0x20405
20400504:	2f878513          	addi	a0,a5,760 # 204052f8 <_exit+0x8a>
20400508:	2891                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:61 (discriminator 3)
    for(i = 0; i< ARRAY_LEN; i ++){
2040050a:	fdc42783          	lw	a5,-36(s0)
2040050e:	0785                	addi	a5,a5,1
20400510:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:61 (discriminator 1)
20400514:	fdc42703          	lw	a4,-36(s0)
20400518:	47a5                	li	a5,9
2040051a:	fce7d8e3          	bge	a5,a4,204004ea <main+0x258>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:64
    }
     printf("HW cycles = %d \n", HWcycles);
2040051e:	fc442583          	lw	a1,-60(s0)
20400522:	204057b7          	lui	a5,0x20405
20400526:	30c78513          	addi	a0,a5,780 # 2040530c <_exit+0x9e>
2040052a:	280d                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:65
    printf("Acc = %dX", SWcycles/HWcycles);
2040052c:	fcc42703          	lw	a4,-52(s0)
20400530:	fc442783          	lw	a5,-60(s0)
20400534:	02f757b3          	divu	a5,a4,a5
20400538:	85be                	mv	a1,a5
2040053a:	204057b7          	lui	a5,0x20405
2040053e:	32078513          	addi	a0,a5,800 # 20405320 <_exit+0xb2>
20400542:	2829                	jal	2040055c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:66
    return 0;
20400544:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/MyRoCC/MyRoCC.c:67
20400546:	853e                	mv	a0,a5
20400548:	40fe                	lw	ra,220(sp)
2040054a:	446e                	lw	s0,216(sp)
2040054c:	495e                	lw	s2,212(sp)
2040054e:	49ce                	lw	s3,208(sp)
20400550:	4a3e                	lw	s4,204(sp)
20400552:	4aae                	lw	s5,200(sp)
20400554:	4b1e                	lw	s6,196(sp)
20400556:	4b8e                	lw	s7,192(sp)
20400558:	612d                	addi	sp,sp,224
2040055a:	8082                	ret

2040055c <iprintf>:
printf():
2040055c:	7139                	addi	sp,sp,-64
2040055e:	da3e                	sw	a5,52(sp)
20400560:	d22e                	sw	a1,36(sp)
20400562:	d432                	sw	a2,40(sp)
20400564:	d636                	sw	a3,44(sp)
20400566:	d83a                	sw	a4,48(sp)
20400568:	dc42                	sw	a6,56(sp)
2040056a:	de46                	sw	a7,60(sp)
2040056c:	5fc00797          	auipc	a5,0x5fc00
20400570:	1dc78793          	addi	a5,a5,476 # 80000748 <_impure_ptr>
20400574:	cc22                	sw	s0,24(sp)
20400576:	4380                	lw	s0,0(a5)
20400578:	ca26                	sw	s1,20(sp)
2040057a:	ce06                	sw	ra,28(sp)
2040057c:	84aa                	mv	s1,a0
2040057e:	c409                	beqz	s0,20400588 <iprintf+0x2c>
20400580:	4c1c                	lw	a5,24(s0)
20400582:	e399                	bnez	a5,20400588 <iprintf+0x2c>
20400584:	8522                	mv	a0,s0
20400586:	2b1d                	jal	20400abc <__sinit>
20400588:	440c                	lw	a1,8(s0)
2040058a:	1054                	addi	a3,sp,36
2040058c:	8626                	mv	a2,s1
2040058e:	8522                	mv	a0,s0
20400590:	c636                	sw	a3,12(sp)
20400592:	231000ef          	jal	ra,20400fc2 <_vfiprintf_r>
20400596:	40f2                	lw	ra,28(sp)
20400598:	4462                	lw	s0,24(sp)
2040059a:	44d2                	lw	s1,20(sp)
2040059c:	6121                	addi	sp,sp,64
2040059e:	8082                	ret

204005a0 <_puts_r>:
_puts_r():
204005a0:	1101                	addi	sp,sp,-32
204005a2:	ca26                	sw	s1,20(sp)
204005a4:	c84a                	sw	s2,16(sp)
204005a6:	ce06                	sw	ra,28(sp)
204005a8:	cc22                	sw	s0,24(sp)
204005aa:	c64e                	sw	s3,12(sp)
204005ac:	c452                	sw	s4,8(sp)
204005ae:	84aa                	mv	s1,a0
204005b0:	892e                	mv	s2,a1
204005b2:	c501                	beqz	a0,204005ba <_puts_r+0x1a>
204005b4:	4d1c                	lw	a5,24(a0)
204005b6:	e391                	bnez	a5,204005ba <_puts_r+0x1a>
204005b8:	2311                	jal	20400abc <__sinit>
204005ba:	4c9c                	lw	a5,24(s1)
204005bc:	4480                	lw	s0,8(s1)
204005be:	e399                	bnez	a5,204005c4 <_puts_r+0x24>
204005c0:	8526                	mv	a0,s1
204005c2:	29ed                	jal	20400abc <__sinit>
204005c4:	00005797          	auipc	a5,0x5
204005c8:	db078793          	addi	a5,a5,-592 # 20405374 <__sf_fake_stdin>
204005cc:	02f41c63          	bne	s0,a5,20400604 <_puts_r+0x64>
204005d0:	40c0                	lw	s0,4(s1)
204005d2:	00c45783          	lhu	a5,12(s0)
204005d6:	8ba1                	andi	a5,a5,8
204005d8:	c7b1                	beqz	a5,20400624 <_puts_r+0x84>
204005da:	481c                	lw	a5,16(s0)
204005dc:	c7a1                	beqz	a5,20400624 <_puts_r+0x84>
204005de:	59fd                	li	s3,-1
204005e0:	4a29                	li	s4,10
204005e2:	441c                	lw	a5,8(s0)
204005e4:	00094583          	lbu	a1,0(s2)
204005e8:	17fd                	addi	a5,a5,-1
204005ea:	e9b1                	bnez	a1,2040063e <_puts_r+0x9e>
204005ec:	c41c                	sw	a5,8(s0)
204005ee:	0607de63          	bgez	a5,2040066a <_puts_r+0xca>
204005f2:	8622                	mv	a2,s0
204005f4:	45a9                	li	a1,10
204005f6:	8526                	mv	a0,s1
204005f8:	2841                	jal	20400688 <__swbuf_r>
204005fa:	57fd                	li	a5,-1
204005fc:	02f50863          	beq	a0,a5,2040062c <_puts_r+0x8c>
20400600:	4529                	li	a0,10
20400602:	a035                	j	2040062e <_puts_r+0x8e>
20400604:	00005797          	auipc	a5,0x5
20400608:	d9078793          	addi	a5,a5,-624 # 20405394 <__sf_fake_stdout>
2040060c:	00f41463          	bne	s0,a5,20400614 <_puts_r+0x74>
20400610:	4480                	lw	s0,8(s1)
20400612:	b7c1                	j	204005d2 <_puts_r+0x32>
20400614:	00005797          	auipc	a5,0x5
20400618:	d4078793          	addi	a5,a5,-704 # 20405354 <__sf_fake_stderr>
2040061c:	faf41be3          	bne	s0,a5,204005d2 <_puts_r+0x32>
20400620:	44c0                	lw	s0,12(s1)
20400622:	bf45                	j	204005d2 <_puts_r+0x32>
20400624:	85a2                	mv	a1,s0
20400626:	8526                	mv	a0,s1
20400628:	2205                	jal	20400748 <__swsetup_r>
2040062a:	d955                	beqz	a0,204005de <_puts_r+0x3e>
2040062c:	557d                	li	a0,-1
2040062e:	40f2                	lw	ra,28(sp)
20400630:	4462                	lw	s0,24(sp)
20400632:	44d2                	lw	s1,20(sp)
20400634:	4942                	lw	s2,16(sp)
20400636:	49b2                	lw	s3,12(sp)
20400638:	4a22                	lw	s4,8(sp)
2040063a:	6105                	addi	sp,sp,32
2040063c:	8082                	ret
2040063e:	c41c                	sw	a5,8(s0)
20400640:	0905                	addi	s2,s2,1
20400642:	0007d763          	bgez	a5,20400650 <_puts_r+0xb0>
20400646:	4c18                	lw	a4,24(s0)
20400648:	00e7cb63          	blt	a5,a4,2040065e <_puts_r+0xbe>
2040064c:	01458963          	beq	a1,s4,2040065e <_puts_r+0xbe>
20400650:	401c                	lw	a5,0(s0)
20400652:	00178713          	addi	a4,a5,1
20400656:	c018                	sw	a4,0(s0)
20400658:	00b78023          	sb	a1,0(a5)
2040065c:	b759                	j	204005e2 <_puts_r+0x42>
2040065e:	8622                	mv	a2,s0
20400660:	8526                	mv	a0,s1
20400662:	201d                	jal	20400688 <__swbuf_r>
20400664:	f7351fe3          	bne	a0,s3,204005e2 <_puts_r+0x42>
20400668:	b7d1                	j	2040062c <_puts_r+0x8c>
2040066a:	401c                	lw	a5,0(s0)
2040066c:	00178713          	addi	a4,a5,1
20400670:	c018                	sw	a4,0(s0)
20400672:	4729                	li	a4,10
20400674:	00e78023          	sb	a4,0(a5)
20400678:	b761                	j	20400600 <_puts_r+0x60>

2040067a <puts>:
puts():
2040067a:	5fc00797          	auipc	a5,0x5fc00
2040067e:	0ce78793          	addi	a5,a5,206 # 80000748 <_impure_ptr>
20400682:	85aa                	mv	a1,a0
20400684:	4388                	lw	a0,0(a5)
20400686:	bf29                	j	204005a0 <_puts_r>

20400688 <__swbuf_r>:
__swbuf_r():
20400688:	1101                	addi	sp,sp,-32
2040068a:	cc22                	sw	s0,24(sp)
2040068c:	ca26                	sw	s1,20(sp)
2040068e:	c84a                	sw	s2,16(sp)
20400690:	ce06                	sw	ra,28(sp)
20400692:	c64e                	sw	s3,12(sp)
20400694:	84aa                	mv	s1,a0
20400696:	892e                	mv	s2,a1
20400698:	8432                	mv	s0,a2
2040069a:	c501                	beqz	a0,204006a2 <__swbuf_r+0x1a>
2040069c:	4d1c                	lw	a5,24(a0)
2040069e:	e391                	bnez	a5,204006a2 <__swbuf_r+0x1a>
204006a0:	2931                	jal	20400abc <__sinit>
204006a2:	00005797          	auipc	a5,0x5
204006a6:	cd278793          	addi	a5,a5,-814 # 20405374 <__sf_fake_stdin>
204006aa:	06f41963          	bne	s0,a5,2040071c <__swbuf_r+0x94>
204006ae:	40c0                	lw	s0,4(s1)
204006b0:	4c1c                	lw	a5,24(s0)
204006b2:	c41c                	sw	a5,8(s0)
204006b4:	00c45783          	lhu	a5,12(s0)
204006b8:	8ba1                	andi	a5,a5,8
204006ba:	c3c9                	beqz	a5,2040073c <__swbuf_r+0xb4>
204006bc:	481c                	lw	a5,16(s0)
204006be:	cfbd                	beqz	a5,2040073c <__swbuf_r+0xb4>
204006c0:	481c                	lw	a5,16(s0)
204006c2:	4008                	lw	a0,0(s0)
204006c4:	0ff97993          	andi	s3,s2,255
204006c8:	0ff97913          	andi	s2,s2,255
204006cc:	8d1d                	sub	a0,a0,a5
204006ce:	485c                	lw	a5,20(s0)
204006d0:	00f54663          	blt	a0,a5,204006dc <__swbuf_r+0x54>
204006d4:	85a2                	mv	a1,s0
204006d6:	8526                	mv	a0,s1
204006d8:	24e9                	jal	204009a2 <_fflush_r>
204006da:	e52d                	bnez	a0,20400744 <__swbuf_r+0xbc>
204006dc:	441c                	lw	a5,8(s0)
204006de:	0505                	addi	a0,a0,1
204006e0:	17fd                	addi	a5,a5,-1
204006e2:	c41c                	sw	a5,8(s0)
204006e4:	401c                	lw	a5,0(s0)
204006e6:	00178713          	addi	a4,a5,1
204006ea:	c018                	sw	a4,0(s0)
204006ec:	01378023          	sb	s3,0(a5)
204006f0:	485c                	lw	a5,20(s0)
204006f2:	00a78963          	beq	a5,a0,20400704 <__swbuf_r+0x7c>
204006f6:	00c45783          	lhu	a5,12(s0)
204006fa:	8b85                	andi	a5,a5,1
204006fc:	cb81                	beqz	a5,2040070c <__swbuf_r+0x84>
204006fe:	47a9                	li	a5,10
20400700:	00f91663          	bne	s2,a5,2040070c <__swbuf_r+0x84>
20400704:	85a2                	mv	a1,s0
20400706:	8526                	mv	a0,s1
20400708:	2c69                	jal	204009a2 <_fflush_r>
2040070a:	ed0d                	bnez	a0,20400744 <__swbuf_r+0xbc>
2040070c:	40f2                	lw	ra,28(sp)
2040070e:	4462                	lw	s0,24(sp)
20400710:	854a                	mv	a0,s2
20400712:	44d2                	lw	s1,20(sp)
20400714:	4942                	lw	s2,16(sp)
20400716:	49b2                	lw	s3,12(sp)
20400718:	6105                	addi	sp,sp,32
2040071a:	8082                	ret
2040071c:	00005797          	auipc	a5,0x5
20400720:	c7878793          	addi	a5,a5,-904 # 20405394 <__sf_fake_stdout>
20400724:	00f41463          	bne	s0,a5,2040072c <__swbuf_r+0xa4>
20400728:	4480                	lw	s0,8(s1)
2040072a:	b759                	j	204006b0 <__swbuf_r+0x28>
2040072c:	00005797          	auipc	a5,0x5
20400730:	c2878793          	addi	a5,a5,-984 # 20405354 <__sf_fake_stderr>
20400734:	f6f41ee3          	bne	s0,a5,204006b0 <__swbuf_r+0x28>
20400738:	44c0                	lw	s0,12(s1)
2040073a:	bf9d                	j	204006b0 <__swbuf_r+0x28>
2040073c:	85a2                	mv	a1,s0
2040073e:	8526                	mv	a0,s1
20400740:	2021                	jal	20400748 <__swsetup_r>
20400742:	dd3d                	beqz	a0,204006c0 <__swbuf_r+0x38>
20400744:	597d                	li	s2,-1
20400746:	b7d9                	j	2040070c <__swbuf_r+0x84>

20400748 <__swsetup_r>:
__swsetup_r():
20400748:	1141                	addi	sp,sp,-16
2040074a:	5fc00797          	auipc	a5,0x5fc00
2040074e:	ffe78793          	addi	a5,a5,-2 # 80000748 <_impure_ptr>
20400752:	c226                	sw	s1,4(sp)
20400754:	4384                	lw	s1,0(a5)
20400756:	c422                	sw	s0,8(sp)
20400758:	c04a                	sw	s2,0(sp)
2040075a:	c606                	sw	ra,12(sp)
2040075c:	892a                	mv	s2,a0
2040075e:	842e                	mv	s0,a1
20400760:	c489                	beqz	s1,2040076a <__swsetup_r+0x22>
20400762:	4c9c                	lw	a5,24(s1)
20400764:	e399                	bnez	a5,2040076a <__swsetup_r+0x22>
20400766:	8526                	mv	a0,s1
20400768:	2e91                	jal	20400abc <__sinit>
2040076a:	00005797          	auipc	a5,0x5
2040076e:	c0a78793          	addi	a5,a5,-1014 # 20405374 <__sf_fake_stdin>
20400772:	02f41c63          	bne	s0,a5,204007aa <__swsetup_r+0x62>
20400776:	40c0                	lw	s0,4(s1)
20400778:	00c41703          	lh	a4,12(s0)
2040077c:	01071793          	slli	a5,a4,0x10
20400780:	83c1                	srli	a5,a5,0x10
20400782:	0087f693          	andi	a3,a5,8
20400786:	eeb5                	bnez	a3,20400802 <__swsetup_r+0xba>
20400788:	0107f693          	andi	a3,a5,16
2040078c:	ee9d                	bnez	a3,204007ca <__swsetup_r+0x82>
2040078e:	47a5                	li	a5,9
20400790:	00f92023          	sw	a5,0(s2)
20400794:	04076713          	ori	a4,a4,64
20400798:	00e41623          	sh	a4,12(s0)
2040079c:	557d                	li	a0,-1
2040079e:	40b2                	lw	ra,12(sp)
204007a0:	4422                	lw	s0,8(sp)
204007a2:	4492                	lw	s1,4(sp)
204007a4:	4902                	lw	s2,0(sp)
204007a6:	0141                	addi	sp,sp,16
204007a8:	8082                	ret
204007aa:	00005797          	auipc	a5,0x5
204007ae:	bea78793          	addi	a5,a5,-1046 # 20405394 <__sf_fake_stdout>
204007b2:	00f41463          	bne	s0,a5,204007ba <__swsetup_r+0x72>
204007b6:	4480                	lw	s0,8(s1)
204007b8:	b7c1                	j	20400778 <__swsetup_r+0x30>
204007ba:	00005797          	auipc	a5,0x5
204007be:	b9a78793          	addi	a5,a5,-1126 # 20405354 <__sf_fake_stderr>
204007c2:	faf41be3          	bne	s0,a5,20400778 <__swsetup_r+0x30>
204007c6:	44c0                	lw	s0,12(s1)
204007c8:	bf45                	j	20400778 <__swsetup_r+0x30>
204007ca:	8b91                	andi	a5,a5,4
204007cc:	c78d                	beqz	a5,204007f6 <__swsetup_r+0xae>
204007ce:	584c                	lw	a1,52(s0)
204007d0:	c989                	beqz	a1,204007e2 <__swsetup_r+0x9a>
204007d2:	04440793          	addi	a5,s0,68
204007d6:	00f58463          	beq	a1,a5,204007de <__swsetup_r+0x96>
204007da:	854a                	mv	a0,s2
204007dc:	2bc5                	jal	20400dcc <_free_r>
204007de:	02042a23          	sw	zero,52(s0)
204007e2:	00c45783          	lhu	a5,12(s0)
204007e6:	00042223          	sw	zero,4(s0)
204007ea:	fdb7f793          	andi	a5,a5,-37
204007ee:	00f41623          	sh	a5,12(s0)
204007f2:	481c                	lw	a5,16(s0)
204007f4:	c01c                	sw	a5,0(s0)
204007f6:	00c45783          	lhu	a5,12(s0)
204007fa:	0087e793          	ori	a5,a5,8
204007fe:	00f41623          	sh	a5,12(s0)
20400802:	481c                	lw	a5,16(s0)
20400804:	ef81                	bnez	a5,2040081c <__swsetup_r+0xd4>
20400806:	00c45783          	lhu	a5,12(s0)
2040080a:	20000713          	li	a4,512
2040080e:	2807f793          	andi	a5,a5,640
20400812:	00e78563          	beq	a5,a4,2040081c <__swsetup_r+0xd4>
20400816:	85a2                	mv	a1,s0
20400818:	854a                	mv	a0,s2
2040081a:	21bd                	jal	20400c88 <__smakebuf_r>
2040081c:	00c45783          	lhu	a5,12(s0)
20400820:	0017f713          	andi	a4,a5,1
20400824:	c705                	beqz	a4,2040084c <__swsetup_r+0x104>
20400826:	485c                	lw	a5,20(s0)
20400828:	00042423          	sw	zero,8(s0)
2040082c:	40f007b3          	neg	a5,a5
20400830:	cc1c                	sw	a5,24(s0)
20400832:	481c                	lw	a5,16(s0)
20400834:	4501                	li	a0,0
20400836:	f7a5                	bnez	a5,2040079e <__swsetup_r+0x56>
20400838:	00c41783          	lh	a5,12(s0)
2040083c:	0807f713          	andi	a4,a5,128
20400840:	df39                	beqz	a4,2040079e <__swsetup_r+0x56>
20400842:	0407e793          	ori	a5,a5,64
20400846:	00f41623          	sh	a5,12(s0)
2040084a:	bf89                	j	2040079c <__swsetup_r+0x54>
2040084c:	8b89                	andi	a5,a5,2
2040084e:	4701                	li	a4,0
20400850:	e391                	bnez	a5,20400854 <__swsetup_r+0x10c>
20400852:	4858                	lw	a4,20(s0)
20400854:	c418                	sw	a4,8(s0)
20400856:	bff1                	j	20400832 <__swsetup_r+0xea>

20400858 <__sflush_r>:
__sflush_r():
20400858:	00c5d783          	lhu	a5,12(a1)
2040085c:	1101                	addi	sp,sp,-32
2040085e:	cc22                	sw	s0,24(sp)
20400860:	ca26                	sw	s1,20(sp)
20400862:	ce06                	sw	ra,28(sp)
20400864:	c84a                	sw	s2,16(sp)
20400866:	c64e                	sw	s3,12(sp)
20400868:	0087f713          	andi	a4,a5,8
2040086c:	84aa                	mv	s1,a0
2040086e:	842e                	mv	s0,a1
20400870:	e765                	bnez	a4,20400958 <__sflush_r+0x100>
20400872:	41d8                	lw	a4,4(a1)
20400874:	00e04763          	bgtz	a4,20400882 <__sflush_r+0x2a>
20400878:	41b8                	lw	a4,64(a1)
2040087a:	00e04463          	bgtz	a4,20400882 <__sflush_r+0x2a>
2040087e:	4501                	li	a0,0
20400880:	a0c1                	j	20400940 <__sflush_r+0xe8>
20400882:	5458                	lw	a4,44(s0)
20400884:	df6d                	beqz	a4,2040087e <__sflush_r+0x26>
20400886:	0004a903          	lw	s2,0(s1)
2040088a:	01379693          	slli	a3,a5,0x13
2040088e:	0004a023          	sw	zero,0(s1)
20400892:	0606de63          	bgez	a3,2040090e <__sflush_r+0xb6>
20400896:	4868                	lw	a0,84(s0)
20400898:	00c45783          	lhu	a5,12(s0)
2040089c:	8b91                	andi	a5,a5,4
2040089e:	c799                	beqz	a5,204008ac <__sflush_r+0x54>
204008a0:	405c                	lw	a5,4(s0)
204008a2:	8d1d                	sub	a0,a0,a5
204008a4:	585c                	lw	a5,52(s0)
204008a6:	c399                	beqz	a5,204008ac <__sflush_r+0x54>
204008a8:	403c                	lw	a5,64(s0)
204008aa:	8d1d                	sub	a0,a0,a5
204008ac:	545c                	lw	a5,44(s0)
204008ae:	500c                	lw	a1,32(s0)
204008b0:	862a                	mv	a2,a0
204008b2:	4681                	li	a3,0
204008b4:	8526                	mv	a0,s1
204008b6:	9782                	jalr	a5
204008b8:	57fd                	li	a5,-1
204008ba:	00c45703          	lhu	a4,12(s0)
204008be:	00f51d63          	bne	a0,a5,204008d8 <__sflush_r+0x80>
204008c2:	4094                	lw	a3,0(s1)
204008c4:	47f5                	li	a5,29
204008c6:	08d7e463          	bltu	a5,a3,2040094e <__sflush_r+0xf6>
204008ca:	204007b7          	lui	a5,0x20400
204008ce:	0785                	addi	a5,a5,1
204008d0:	00d7d7b3          	srl	a5,a5,a3
204008d4:	8b85                	andi	a5,a5,1
204008d6:	cfa5                	beqz	a5,2040094e <__sflush_r+0xf6>
204008d8:	481c                	lw	a5,16(s0)
204008da:	00042223          	sw	zero,4(s0)
204008de:	c01c                	sw	a5,0(s0)
204008e0:	01371793          	slli	a5,a4,0x13
204008e4:	0007d863          	bgez	a5,204008f4 <__sflush_r+0x9c>
204008e8:	57fd                	li	a5,-1
204008ea:	00f51463          	bne	a0,a5,204008f2 <__sflush_r+0x9a>
204008ee:	409c                	lw	a5,0(s1)
204008f0:	e391                	bnez	a5,204008f4 <__sflush_r+0x9c>
204008f2:	c868                	sw	a0,84(s0)
204008f4:	584c                	lw	a1,52(s0)
204008f6:	0124a023          	sw	s2,0(s1)
204008fa:	d1d1                	beqz	a1,2040087e <__sflush_r+0x26>
204008fc:	04440793          	addi	a5,s0,68
20400900:	00f58463          	beq	a1,a5,20400908 <__sflush_r+0xb0>
20400904:	8526                	mv	a0,s1
20400906:	21d9                	jal	20400dcc <_free_r>
20400908:	02042a23          	sw	zero,52(s0)
2040090c:	bf8d                	j	2040087e <__sflush_r+0x26>
2040090e:	500c                	lw	a1,32(s0)
20400910:	4685                	li	a3,1
20400912:	4601                	li	a2,0
20400914:	8526                	mv	a0,s1
20400916:	9702                	jalr	a4
20400918:	57fd                	li	a5,-1
2040091a:	f6f51fe3          	bne	a0,a5,20400898 <__sflush_r+0x40>
2040091e:	409c                	lw	a5,0(s1)
20400920:	dfa5                	beqz	a5,20400898 <__sflush_r+0x40>
20400922:	4775                	li	a4,29
20400924:	00e78563          	beq	a5,a4,2040092e <__sflush_r+0xd6>
20400928:	4759                	li	a4,22
2040092a:	00e79563          	bne	a5,a4,20400934 <__sflush_r+0xdc>
2040092e:	0124a023          	sw	s2,0(s1)
20400932:	b7b1                	j	2040087e <__sflush_r+0x26>
20400934:	00c45783          	lhu	a5,12(s0)
20400938:	0407e793          	ori	a5,a5,64
2040093c:	00f41623          	sh	a5,12(s0)
20400940:	40f2                	lw	ra,28(sp)
20400942:	4462                	lw	s0,24(sp)
20400944:	44d2                	lw	s1,20(sp)
20400946:	4942                	lw	s2,16(sp)
20400948:	49b2                	lw	s3,12(sp)
2040094a:	6105                	addi	sp,sp,32
2040094c:	8082                	ret
2040094e:	04076713          	ori	a4,a4,64
20400952:	00e41623          	sh	a4,12(s0)
20400956:	b7ed                	j	20400940 <__sflush_r+0xe8>
20400958:	0105a983          	lw	s3,16(a1)
2040095c:	f20981e3          	beqz	s3,2040087e <__sflush_r+0x26>
20400960:	0005a903          	lw	s2,0(a1)
20400964:	8b8d                	andi	a5,a5,3
20400966:	0135a023          	sw	s3,0(a1)
2040096a:	41390933          	sub	s2,s2,s3
2040096e:	4701                	li	a4,0
20400970:	e391                	bnez	a5,20400974 <__sflush_r+0x11c>
20400972:	49d8                	lw	a4,20(a1)
20400974:	c418                	sw	a4,8(s0)
20400976:	f12054e3          	blez	s2,2040087e <__sflush_r+0x26>
2040097a:	541c                	lw	a5,40(s0)
2040097c:	500c                	lw	a1,32(s0)
2040097e:	86ca                	mv	a3,s2
20400980:	864e                	mv	a2,s3
20400982:	8526                	mv	a0,s1
20400984:	9782                	jalr	a5
20400986:	00a04a63          	bgtz	a0,2040099a <__sflush_r+0x142>
2040098a:	00c45783          	lhu	a5,12(s0)
2040098e:	557d                	li	a0,-1
20400990:	0407e793          	ori	a5,a5,64
20400994:	00f41623          	sh	a5,12(s0)
20400998:	b765                	j	20400940 <__sflush_r+0xe8>
2040099a:	99aa                	add	s3,s3,a0
2040099c:	40a90933          	sub	s2,s2,a0
204009a0:	bfd9                	j	20400976 <__sflush_r+0x11e>

204009a2 <_fflush_r>:
_fflush_r():
204009a2:	499c                	lw	a5,16(a1)
204009a4:	cfb9                	beqz	a5,20400a02 <_fflush_r+0x60>
204009a6:	1101                	addi	sp,sp,-32
204009a8:	cc22                	sw	s0,24(sp)
204009aa:	ce06                	sw	ra,28(sp)
204009ac:	842a                	mv	s0,a0
204009ae:	c511                	beqz	a0,204009ba <_fflush_r+0x18>
204009b0:	4d1c                	lw	a5,24(a0)
204009b2:	e781                	bnez	a5,204009ba <_fflush_r+0x18>
204009b4:	c62e                	sw	a1,12(sp)
204009b6:	2219                	jal	20400abc <__sinit>
204009b8:	45b2                	lw	a1,12(sp)
204009ba:	00005797          	auipc	a5,0x5
204009be:	9ba78793          	addi	a5,a5,-1606 # 20405374 <__sf_fake_stdin>
204009c2:	00f59b63          	bne	a1,a5,204009d8 <_fflush_r+0x36>
204009c6:	404c                	lw	a1,4(s0)
204009c8:	00c59783          	lh	a5,12(a1)
204009cc:	c795                	beqz	a5,204009f8 <_fflush_r+0x56>
204009ce:	8522                	mv	a0,s0
204009d0:	4462                	lw	s0,24(sp)
204009d2:	40f2                	lw	ra,28(sp)
204009d4:	6105                	addi	sp,sp,32
204009d6:	b549                	j	20400858 <__sflush_r>
204009d8:	00005797          	auipc	a5,0x5
204009dc:	9bc78793          	addi	a5,a5,-1604 # 20405394 <__sf_fake_stdout>
204009e0:	00f59463          	bne	a1,a5,204009e8 <_fflush_r+0x46>
204009e4:	440c                	lw	a1,8(s0)
204009e6:	b7cd                	j	204009c8 <_fflush_r+0x26>
204009e8:	00005797          	auipc	a5,0x5
204009ec:	96c78793          	addi	a5,a5,-1684 # 20405354 <__sf_fake_stderr>
204009f0:	fcf59ce3          	bne	a1,a5,204009c8 <_fflush_r+0x26>
204009f4:	444c                	lw	a1,12(s0)
204009f6:	bfc9                	j	204009c8 <_fflush_r+0x26>
204009f8:	40f2                	lw	ra,28(sp)
204009fa:	4462                	lw	s0,24(sp)
204009fc:	4501                	li	a0,0
204009fe:	6105                	addi	sp,sp,32
20400a00:	8082                	ret
20400a02:	4501                	li	a0,0
20400a04:	8082                	ret

20400a06 <std>:
std():
20400a06:	1141                	addi	sp,sp,-16
20400a08:	c422                	sw	s0,8(sp)
20400a0a:	c606                	sw	ra,12(sp)
20400a0c:	842a                	mv	s0,a0
20400a0e:	00b51623          	sh	a1,12(a0)
20400a12:	00c51723          	sh	a2,14(a0)
20400a16:	00052023          	sw	zero,0(a0)
20400a1a:	00052223          	sw	zero,4(a0)
20400a1e:	00052423          	sw	zero,8(a0)
20400a22:	06052223          	sw	zero,100(a0)
20400a26:	00052823          	sw	zero,16(a0)
20400a2a:	00052a23          	sw	zero,20(a0)
20400a2e:	00052c23          	sw	zero,24(a0)
20400a32:	4621                	li	a2,8
20400a34:	4581                	li	a1,0
20400a36:	05c50513          	addi	a0,a0,92
20400a3a:	24ed                	jal	20400d24 <memset>
20400a3c:	00001797          	auipc	a5,0x1
20400a40:	84678793          	addi	a5,a5,-1978 # 20401282 <__sread>
20400a44:	d05c                	sw	a5,36(s0)
20400a46:	00001797          	auipc	a5,0x1
20400a4a:	86c78793          	addi	a5,a5,-1940 # 204012b2 <__swrite>
20400a4e:	d41c                	sw	a5,40(s0)
20400a50:	00001797          	auipc	a5,0x1
20400a54:	8b078793          	addi	a5,a5,-1872 # 20401300 <__sseek>
20400a58:	d45c                	sw	a5,44(s0)
20400a5a:	00001797          	auipc	a5,0x1
20400a5e:	8dc78793          	addi	a5,a5,-1828 # 20401336 <__sclose>
20400a62:	d000                	sw	s0,32(s0)
20400a64:	d81c                	sw	a5,48(s0)
20400a66:	40b2                	lw	ra,12(sp)
20400a68:	4422                	lw	s0,8(sp)
20400a6a:	0141                	addi	sp,sp,16
20400a6c:	8082                	ret

20400a6e <_cleanup_r>:
_cleanup_r():
20400a6e:	00000597          	auipc	a1,0x0
20400a72:	f3458593          	addi	a1,a1,-204 # 204009a2 <_fflush_r>
20400a76:	a2b9                	j	20400bc4 <_fwalk_reent>

20400a78 <__sfmoreglue>:
__sfmoreglue():
20400a78:	1141                	addi	sp,sp,-16
20400a7a:	c226                	sw	s1,4(sp)
20400a7c:	06800613          	li	a2,104
20400a80:	fff58493          	addi	s1,a1,-1
20400a84:	02c484b3          	mul	s1,s1,a2
20400a88:	c04a                	sw	s2,0(sp)
20400a8a:	892e                	mv	s2,a1
20400a8c:	c422                	sw	s0,8(sp)
20400a8e:	c606                	sw	ra,12(sp)
20400a90:	07448593          	addi	a1,s1,116
20400a94:	26d5                	jal	20400e78 <_malloc_r>
20400a96:	842a                	mv	s0,a0
20400a98:	c919                	beqz	a0,20400aae <__sfmoreglue+0x36>
20400a9a:	00052023          	sw	zero,0(a0)
20400a9e:	01252223          	sw	s2,4(a0)
20400aa2:	0531                	addi	a0,a0,12
20400aa4:	c408                	sw	a0,8(s0)
20400aa6:	06848613          	addi	a2,s1,104
20400aaa:	4581                	li	a1,0
20400aac:	2ca5                	jal	20400d24 <memset>
20400aae:	8522                	mv	a0,s0
20400ab0:	40b2                	lw	ra,12(sp)
20400ab2:	4422                	lw	s0,8(sp)
20400ab4:	4492                	lw	s1,4(sp)
20400ab6:	4902                	lw	s2,0(sp)
20400ab8:	0141                	addi	sp,sp,16
20400aba:	8082                	ret

20400abc <__sinit>:
__sinit():
20400abc:	4d1c                	lw	a5,24(a0)
20400abe:	e3bd                	bnez	a5,20400b24 <__sinit+0x68>
20400ac0:	1141                	addi	sp,sp,-16
20400ac2:	c606                	sw	ra,12(sp)
20400ac4:	c422                	sw	s0,8(sp)
20400ac6:	00000797          	auipc	a5,0x0
20400aca:	fa878793          	addi	a5,a5,-88 # 20400a6e <_cleanup_r>
20400ace:	d51c                	sw	a5,40(a0)
20400ad0:	5fc00797          	auipc	a5,0x5fc00
20400ad4:	c7c78793          	addi	a5,a5,-900 # 8000074c <_global_impure_ptr>
20400ad8:	439c                	lw	a5,0(a5)
20400ada:	04052423          	sw	zero,72(a0)
20400ade:	04052623          	sw	zero,76(a0)
20400ae2:	04052823          	sw	zero,80(a0)
20400ae6:	00f51463          	bne	a0,a5,20400aee <__sinit+0x32>
20400aea:	4785                	li	a5,1
20400aec:	cd1c                	sw	a5,24(a0)
20400aee:	842a                	mv	s0,a0
20400af0:	281d                	jal	20400b26 <__sfp>
20400af2:	c048                	sw	a0,4(s0)
20400af4:	8522                	mv	a0,s0
20400af6:	2805                	jal	20400b26 <__sfp>
20400af8:	c408                	sw	a0,8(s0)
20400afa:	8522                	mv	a0,s0
20400afc:	202d                	jal	20400b26 <__sfp>
20400afe:	c448                	sw	a0,12(s0)
20400b00:	4048                	lw	a0,4(s0)
20400b02:	4601                	li	a2,0
20400b04:	4591                	li	a1,4
20400b06:	3701                	jal	20400a06 <std>
20400b08:	4408                	lw	a0,8(s0)
20400b0a:	4605                	li	a2,1
20400b0c:	45a5                	li	a1,9
20400b0e:	3de5                	jal	20400a06 <std>
20400b10:	4448                	lw	a0,12(s0)
20400b12:	4609                	li	a2,2
20400b14:	45c9                	li	a1,18
20400b16:	3dc5                	jal	20400a06 <std>
20400b18:	4785                	li	a5,1
20400b1a:	cc1c                	sw	a5,24(s0)
20400b1c:	40b2                	lw	ra,12(sp)
20400b1e:	4422                	lw	s0,8(sp)
20400b20:	0141                	addi	sp,sp,16
20400b22:	8082                	ret
20400b24:	8082                	ret

20400b26 <__sfp>:
__sfp():
20400b26:	1141                	addi	sp,sp,-16
20400b28:	5fc00797          	auipc	a5,0x5fc00
20400b2c:	c2478793          	addi	a5,a5,-988 # 8000074c <_global_impure_ptr>
20400b30:	c226                	sw	s1,4(sp)
20400b32:	4384                	lw	s1,0(a5)
20400b34:	c04a                	sw	s2,0(sp)
20400b36:	c606                	sw	ra,12(sp)
20400b38:	4c9c                	lw	a5,24(s1)
20400b3a:	c422                	sw	s0,8(sp)
20400b3c:	892a                	mv	s2,a0
20400b3e:	e399                	bnez	a5,20400b44 <__sfp+0x1e>
20400b40:	8526                	mv	a0,s1
20400b42:	3fad                	jal	20400abc <__sinit>
20400b44:	04848493          	addi	s1,s1,72
20400b48:	4480                	lw	s0,8(s1)
20400b4a:	40dc                	lw	a5,4(s1)
20400b4c:	17fd                	addi	a5,a5,-1
20400b4e:	0007d663          	bgez	a5,20400b5a <__sfp+0x34>
20400b52:	409c                	lw	a5,0(s1)
20400b54:	cfb1                	beqz	a5,20400bb0 <__sfp+0x8a>
20400b56:	4084                	lw	s1,0(s1)
20400b58:	bfc5                	j	20400b48 <__sfp+0x22>
20400b5a:	00c41703          	lh	a4,12(s0)
20400b5e:	e731                	bnez	a4,20400baa <__sfp+0x84>
20400b60:	77c1                	lui	a5,0xffff0
20400b62:	0785                	addi	a5,a5,1
20400b64:	06042223          	sw	zero,100(s0)
20400b68:	00042023          	sw	zero,0(s0)
20400b6c:	00042223          	sw	zero,4(s0)
20400b70:	00042423          	sw	zero,8(s0)
20400b74:	c45c                	sw	a5,12(s0)
20400b76:	00042823          	sw	zero,16(s0)
20400b7a:	00042a23          	sw	zero,20(s0)
20400b7e:	00042c23          	sw	zero,24(s0)
20400b82:	4621                	li	a2,8
20400b84:	4581                	li	a1,0
20400b86:	05c40513          	addi	a0,s0,92
20400b8a:	2a69                	jal	20400d24 <memset>
20400b8c:	02042a23          	sw	zero,52(s0)
20400b90:	02042c23          	sw	zero,56(s0)
20400b94:	04042423          	sw	zero,72(s0)
20400b98:	04042623          	sw	zero,76(s0)
20400b9c:	8522                	mv	a0,s0
20400b9e:	40b2                	lw	ra,12(sp)
20400ba0:	4422                	lw	s0,8(sp)
20400ba2:	4492                	lw	s1,4(sp)
20400ba4:	4902                	lw	s2,0(sp)
20400ba6:	0141                	addi	sp,sp,16
20400ba8:	8082                	ret
20400baa:	06840413          	addi	s0,s0,104
20400bae:	bf79                	j	20400b4c <__sfp+0x26>
20400bb0:	4591                	li	a1,4
20400bb2:	854a                	mv	a0,s2
20400bb4:	35d1                	jal	20400a78 <__sfmoreglue>
20400bb6:	c088                	sw	a0,0(s1)
20400bb8:	842a                	mv	s0,a0
20400bba:	fd51                	bnez	a0,20400b56 <__sfp+0x30>
20400bbc:	47b1                	li	a5,12
20400bbe:	00f92023          	sw	a5,0(s2)
20400bc2:	bfe9                	j	20400b9c <__sfp+0x76>

20400bc4 <_fwalk_reent>:
_fwalk_reent():
20400bc4:	7179                	addi	sp,sp,-48
20400bc6:	d422                	sw	s0,40(sp)
20400bc8:	d04a                	sw	s2,32(sp)
20400bca:	cc52                	sw	s4,24(sp)
20400bcc:	ca56                	sw	s5,20(sp)
20400bce:	c85a                	sw	s6,16(sp)
20400bd0:	c65e                	sw	s7,12(sp)
20400bd2:	d606                	sw	ra,44(sp)
20400bd4:	d226                	sw	s1,36(sp)
20400bd6:	ce4e                	sw	s3,28(sp)
20400bd8:	8a2a                	mv	s4,a0
20400bda:	8aae                	mv	s5,a1
20400bdc:	04850413          	addi	s0,a0,72
20400be0:	4901                	li	s2,0
20400be2:	4b05                	li	s6,1
20400be4:	5bfd                	li	s7,-1
20400be6:	ec09                	bnez	s0,20400c00 <_fwalk_reent+0x3c>
20400be8:	50b2                	lw	ra,44(sp)
20400bea:	5422                	lw	s0,40(sp)
20400bec:	854a                	mv	a0,s2
20400bee:	5492                	lw	s1,36(sp)
20400bf0:	5902                	lw	s2,32(sp)
20400bf2:	49f2                	lw	s3,28(sp)
20400bf4:	4a62                	lw	s4,24(sp)
20400bf6:	4ad2                	lw	s5,20(sp)
20400bf8:	4b42                	lw	s6,16(sp)
20400bfa:	4bb2                	lw	s7,12(sp)
20400bfc:	6145                	addi	sp,sp,48
20400bfe:	8082                	ret
20400c00:	4404                	lw	s1,8(s0)
20400c02:	00442983          	lw	s3,4(s0)
20400c06:	19fd                	addi	s3,s3,-1
20400c08:	0009d463          	bgez	s3,20400c10 <_fwalk_reent+0x4c>
20400c0c:	4000                	lw	s0,0(s0)
20400c0e:	bfe1                	j	20400be6 <_fwalk_reent+0x22>
20400c10:	00c4d783          	lhu	a5,12(s1)
20400c14:	00fb7b63          	bgeu	s6,a5,20400c2a <_fwalk_reent+0x66>
20400c18:	00e49783          	lh	a5,14(s1)
20400c1c:	01778763          	beq	a5,s7,20400c2a <_fwalk_reent+0x66>
20400c20:	85a6                	mv	a1,s1
20400c22:	8552                	mv	a0,s4
20400c24:	9a82                	jalr	s5
20400c26:	00a96933          	or	s2,s2,a0
20400c2a:	06848493          	addi	s1,s1,104
20400c2e:	bfe1                	j	20400c06 <_fwalk_reent+0x42>

20400c30 <__swhatbuf_r>:
__swhatbuf_r():
20400c30:	7119                	addi	sp,sp,-128
20400c32:	daa6                	sw	s1,116(sp)
20400c34:	84ae                	mv	s1,a1
20400c36:	00e59583          	lh	a1,14(a1)
20400c3a:	dca2                	sw	s0,120(sp)
20400c3c:	de86                	sw	ra,124(sp)
20400c3e:	8432                	mv	s0,a2
20400c40:	0005dc63          	bgez	a1,20400c58 <__swhatbuf_r+0x28>
20400c44:	00c4d783          	lhu	a5,12(s1)
20400c48:	0006a023          	sw	zero,0(a3)
20400c4c:	0807f793          	andi	a5,a5,128
20400c50:	e39d                	bnez	a5,20400c76 <__swhatbuf_r+0x46>
20400c52:	40000793          	li	a5,1024
20400c56:	a015                	j	20400c7a <__swhatbuf_r+0x4a>
20400c58:	0830                	addi	a2,sp,24
20400c5a:	c636                	sw	a3,12(sp)
20400c5c:	2f15                	jal	20401390 <_fstat_r>
20400c5e:	46b2                	lw	a3,12(sp)
20400c60:	fe0542e3          	bltz	a0,20400c44 <__swhatbuf_r+0x14>
20400c64:	4772                	lw	a4,28(sp)
20400c66:	67bd                	lui	a5,0xf
20400c68:	8ff9                	and	a5,a5,a4
20400c6a:	7779                	lui	a4,0xffffe
20400c6c:	97ba                	add	a5,a5,a4
20400c6e:	0017b793          	seqz	a5,a5
20400c72:	c29c                	sw	a5,0(a3)
20400c74:	bff9                	j	20400c52 <__swhatbuf_r+0x22>
20400c76:	04000793          	li	a5,64
20400c7a:	c01c                	sw	a5,0(s0)
20400c7c:	50f6                	lw	ra,124(sp)
20400c7e:	5466                	lw	s0,120(sp)
20400c80:	54d6                	lw	s1,116(sp)
20400c82:	4501                	li	a0,0
20400c84:	6109                	addi	sp,sp,128
20400c86:	8082                	ret

20400c88 <__smakebuf_r>:
__smakebuf_r():
20400c88:	00c5d783          	lhu	a5,12(a1)
20400c8c:	1101                	addi	sp,sp,-32
20400c8e:	cc22                	sw	s0,24(sp)
20400c90:	ce06                	sw	ra,28(sp)
20400c92:	ca26                	sw	s1,20(sp)
20400c94:	c84a                	sw	s2,16(sp)
20400c96:	8b89                	andi	a5,a5,2
20400c98:	842e                	mv	s0,a1
20400c9a:	cf89                	beqz	a5,20400cb4 <__smakebuf_r+0x2c>
20400c9c:	04740793          	addi	a5,s0,71
20400ca0:	c01c                	sw	a5,0(s0)
20400ca2:	c81c                	sw	a5,16(s0)
20400ca4:	4785                	li	a5,1
20400ca6:	c85c                	sw	a5,20(s0)
20400ca8:	40f2                	lw	ra,28(sp)
20400caa:	4462                	lw	s0,24(sp)
20400cac:	44d2                	lw	s1,20(sp)
20400cae:	4942                	lw	s2,16(sp)
20400cb0:	6105                	addi	sp,sp,32
20400cb2:	8082                	ret
20400cb4:	0074                	addi	a3,sp,12
20400cb6:	0030                	addi	a2,sp,8
20400cb8:	84aa                	mv	s1,a0
20400cba:	3f9d                	jal	20400c30 <__swhatbuf_r>
20400cbc:	45a2                	lw	a1,8(sp)
20400cbe:	892a                	mv	s2,a0
20400cc0:	8526                	mv	a0,s1
20400cc2:	2a5d                	jal	20400e78 <_malloc_r>
20400cc4:	ed01                	bnez	a0,20400cdc <__smakebuf_r+0x54>
20400cc6:	00c41783          	lh	a5,12(s0)
20400cca:	2007f713          	andi	a4,a5,512
20400cce:	ff69                	bnez	a4,20400ca8 <__smakebuf_r+0x20>
20400cd0:	9bf1                	andi	a5,a5,-4
20400cd2:	0027e793          	ori	a5,a5,2
20400cd6:	00f41623          	sh	a5,12(s0)
20400cda:	b7c9                	j	20400c9c <__smakebuf_r+0x14>
20400cdc:	00000797          	auipc	a5,0x0
20400ce0:	d9278793          	addi	a5,a5,-622 # 20400a6e <_cleanup_r>
20400ce4:	d49c                	sw	a5,40(s1)
20400ce6:	00c45783          	lhu	a5,12(s0)
20400cea:	c008                	sw	a0,0(s0)
20400cec:	c808                	sw	a0,16(s0)
20400cee:	0807e793          	ori	a5,a5,128
20400cf2:	00f41623          	sh	a5,12(s0)
20400cf6:	47a2                	lw	a5,8(sp)
20400cf8:	c85c                	sw	a5,20(s0)
20400cfa:	47b2                	lw	a5,12(sp)
20400cfc:	cf89                	beqz	a5,20400d16 <__smakebuf_r+0x8e>
20400cfe:	00e41583          	lh	a1,14(s0)
20400d02:	8526                	mv	a0,s1
20400d04:	2d5d                	jal	204013ba <_isatty_r>
20400d06:	c901                	beqz	a0,20400d16 <__smakebuf_r+0x8e>
20400d08:	00c45783          	lhu	a5,12(s0)
20400d0c:	9bf1                	andi	a5,a5,-4
20400d0e:	0017e793          	ori	a5,a5,1
20400d12:	00f41623          	sh	a5,12(s0)
20400d16:	00c45783          	lhu	a5,12(s0)
20400d1a:	00f96933          	or	s2,s2,a5
20400d1e:	01241623          	sh	s2,12(s0)
20400d22:	b759                	j	20400ca8 <__smakebuf_r+0x20>

20400d24 <memset>:
memset():
20400d24:	433d                	li	t1,15
20400d26:	872a                	mv	a4,a0
20400d28:	02c37363          	bgeu	t1,a2,20400d4e <memset+0x2a>
20400d2c:	00f77793          	andi	a5,a4,15
20400d30:	efbd                	bnez	a5,20400dae <memset+0x8a>
20400d32:	e5ad                	bnez	a1,20400d9c <memset+0x78>
20400d34:	ff067693          	andi	a3,a2,-16
20400d38:	8a3d                	andi	a2,a2,15
20400d3a:	96ba                	add	a3,a3,a4
20400d3c:	c30c                	sw	a1,0(a4)
20400d3e:	c34c                	sw	a1,4(a4)
20400d40:	c70c                	sw	a1,8(a4)
20400d42:	c74c                	sw	a1,12(a4)
20400d44:	0741                	addi	a4,a4,16
20400d46:	fed76be3          	bltu	a4,a3,20400d3c <memset+0x18>
20400d4a:	e211                	bnez	a2,20400d4e <memset+0x2a>
20400d4c:	8082                	ret
20400d4e:	40c306b3          	sub	a3,t1,a2
20400d52:	068a                	slli	a3,a3,0x2
20400d54:	00000297          	auipc	t0,0x0
20400d58:	9696                	add	a3,a3,t0
20400d5a:	00a68067          	jr	10(a3)
20400d5e:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcc02>
20400d62:	00b706a3          	sb	a1,13(a4)
20400d66:	00b70623          	sb	a1,12(a4)
20400d6a:	00b705a3          	sb	a1,11(a4)
20400d6e:	00b70523          	sb	a1,10(a4)
20400d72:	00b704a3          	sb	a1,9(a4)
20400d76:	00b70423          	sb	a1,8(a4)
20400d7a:	00b703a3          	sb	a1,7(a4)
20400d7e:	00b70323          	sb	a1,6(a4)
20400d82:	00b702a3          	sb	a1,5(a4)
20400d86:	00b70223          	sb	a1,4(a4)
20400d8a:	00b701a3          	sb	a1,3(a4)
20400d8e:	00b70123          	sb	a1,2(a4)
20400d92:	00b700a3          	sb	a1,1(a4)
20400d96:	00b70023          	sb	a1,0(a4)
20400d9a:	8082                	ret
20400d9c:	0ff5f593          	andi	a1,a1,255
20400da0:	00859693          	slli	a3,a1,0x8
20400da4:	8dd5                	or	a1,a1,a3
20400da6:	01059693          	slli	a3,a1,0x10
20400daa:	8dd5                	or	a1,a1,a3
20400dac:	b761                	j	20400d34 <memset+0x10>
20400dae:	00279693          	slli	a3,a5,0x2
20400db2:	00000297          	auipc	t0,0x0
20400db6:	9696                	add	a3,a3,t0
20400db8:	8286                	mv	t0,ra
20400dba:	fa8680e7          	jalr	-88(a3)
20400dbe:	8096                	mv	ra,t0
20400dc0:	17c1                	addi	a5,a5,-16
20400dc2:	8f1d                	sub	a4,a4,a5
20400dc4:	963e                	add	a2,a2,a5
20400dc6:	f8c374e3          	bgeu	t1,a2,20400d4e <memset+0x2a>
20400dca:	b7a5                	j	20400d32 <memset+0xe>

20400dcc <_free_r>:
_free_r():
20400dcc:	c5cd                	beqz	a1,20400e76 <_free_r+0xaa>
20400dce:	ffc5a783          	lw	a5,-4(a1)
20400dd2:	1141                	addi	sp,sp,-16
20400dd4:	c422                	sw	s0,8(sp)
20400dd6:	c606                	sw	ra,12(sp)
20400dd8:	c226                	sw	s1,4(sp)
20400dda:	ffc58413          	addi	s0,a1,-4
20400dde:	0007d363          	bgez	a5,20400de4 <_free_r+0x18>
20400de2:	943e                	add	s0,s0,a5
20400de4:	84aa                	mv	s1,a0
20400de6:	2589                	jal	20401428 <__malloc_lock>
20400de8:	5fc00797          	auipc	a5,0x5fc00
20400dec:	98878793          	addi	a5,a5,-1656 # 80000770 <metal_segment_data_target_end>
20400df0:	439c                	lw	a5,0(a5)
20400df2:	ef89                	bnez	a5,20400e0c <_free_r+0x40>
20400df4:	00042223          	sw	zero,4(s0)
20400df8:	5fc00797          	auipc	a5,0x5fc00
20400dfc:	9687ac23          	sw	s0,-1672(a5) # 80000770 <metal_segment_data_target_end>
20400e00:	4422                	lw	s0,8(sp)
20400e02:	40b2                	lw	ra,12(sp)
20400e04:	8526                	mv	a0,s1
20400e06:	4492                	lw	s1,4(sp)
20400e08:	0141                	addi	sp,sp,16
20400e0a:	a505                	j	2040142a <__malloc_unlock>
20400e0c:	00f47e63          	bgeu	s0,a5,20400e28 <_free_r+0x5c>
20400e10:	4014                	lw	a3,0(s0)
20400e12:	00d40733          	add	a4,s0,a3
20400e16:	00e79663          	bne	a5,a4,20400e22 <_free_r+0x56>
20400e1a:	4398                	lw	a4,0(a5)
20400e1c:	43dc                	lw	a5,4(a5)
20400e1e:	9736                	add	a4,a4,a3
20400e20:	c018                	sw	a4,0(s0)
20400e22:	c05c                	sw	a5,4(s0)
20400e24:	bfd1                	j	20400df8 <_free_r+0x2c>
20400e26:	87ba                	mv	a5,a4
20400e28:	43d8                	lw	a4,4(a5)
20400e2a:	c319                	beqz	a4,20400e30 <_free_r+0x64>
20400e2c:	fee47de3          	bgeu	s0,a4,20400e26 <_free_r+0x5a>
20400e30:	4394                	lw	a3,0(a5)
20400e32:	00d78633          	add	a2,a5,a3
20400e36:	00861f63          	bne	a2,s0,20400e54 <_free_r+0x88>
20400e3a:	4010                	lw	a2,0(s0)
20400e3c:	96b2                	add	a3,a3,a2
20400e3e:	c394                	sw	a3,0(a5)
20400e40:	00d78633          	add	a2,a5,a3
20400e44:	fac71ee3          	bne	a4,a2,20400e00 <_free_r+0x34>
20400e48:	4310                	lw	a2,0(a4)
20400e4a:	4358                	lw	a4,4(a4)
20400e4c:	96b2                	add	a3,a3,a2
20400e4e:	c394                	sw	a3,0(a5)
20400e50:	c3d8                	sw	a4,4(a5)
20400e52:	b77d                	j	20400e00 <_free_r+0x34>
20400e54:	00c47563          	bgeu	s0,a2,20400e5e <_free_r+0x92>
20400e58:	47b1                	li	a5,12
20400e5a:	c09c                	sw	a5,0(s1)
20400e5c:	b755                	j	20400e00 <_free_r+0x34>
20400e5e:	4010                	lw	a2,0(s0)
20400e60:	00c406b3          	add	a3,s0,a2
20400e64:	00d71663          	bne	a4,a3,20400e70 <_free_r+0xa4>
20400e68:	4314                	lw	a3,0(a4)
20400e6a:	4358                	lw	a4,4(a4)
20400e6c:	96b2                	add	a3,a3,a2
20400e6e:	c014                	sw	a3,0(s0)
20400e70:	c058                	sw	a4,4(s0)
20400e72:	c3c0                	sw	s0,4(a5)
20400e74:	b771                	j	20400e00 <_free_r+0x34>
20400e76:	8082                	ret

20400e78 <_malloc_r>:
_malloc_r():
20400e78:	1101                	addi	sp,sp,-32
20400e7a:	ca26                	sw	s1,20(sp)
20400e7c:	00358493          	addi	s1,a1,3
20400e80:	98f1                	andi	s1,s1,-4
20400e82:	ce06                	sw	ra,28(sp)
20400e84:	cc22                	sw	s0,24(sp)
20400e86:	c84a                	sw	s2,16(sp)
20400e88:	c64e                	sw	s3,12(sp)
20400e8a:	04a1                	addi	s1,s1,8
20400e8c:	47b1                	li	a5,12
20400e8e:	04f4f763          	bgeu	s1,a5,20400edc <_malloc_r+0x64>
20400e92:	44b1                	li	s1,12
20400e94:	04b4e663          	bltu	s1,a1,20400ee0 <_malloc_r+0x68>
20400e98:	892a                	mv	s2,a0
20400e9a:	2379                	jal	20401428 <__malloc_lock>
20400e9c:	5fc00797          	auipc	a5,0x5fc00
20400ea0:	8d478793          	addi	a5,a5,-1836 # 80000770 <metal_segment_data_target_end>
20400ea4:	4398                	lw	a4,0(a5)
20400ea6:	843a                	mv	s0,a4
20400ea8:	e431                	bnez	s0,20400ef4 <_malloc_r+0x7c>
20400eaa:	5fc00797          	auipc	a5,0x5fc00
20400eae:	8ca78793          	addi	a5,a5,-1846 # 80000774 <__malloc_sbrk_start>
20400eb2:	439c                	lw	a5,0(a5)
20400eb4:	eb81                	bnez	a5,20400ec4 <_malloc_r+0x4c>
20400eb6:	4581                	li	a1,0
20400eb8:	854a                	mv	a0,s2
20400eba:	2645                	jal	2040125a <_sbrk_r>
20400ebc:	5fc00797          	auipc	a5,0x5fc00
20400ec0:	8aa7ac23          	sw	a0,-1864(a5) # 80000774 <__malloc_sbrk_start>
20400ec4:	85a6                	mv	a1,s1
20400ec6:	854a                	mv	a0,s2
20400ec8:	2e49                	jal	2040125a <_sbrk_r>
20400eca:	59fd                	li	s3,-1
20400ecc:	07351963          	bne	a0,s3,20400f3e <_malloc_r+0xc6>
20400ed0:	47b1                	li	a5,12
20400ed2:	00f92023          	sw	a5,0(s2)
20400ed6:	854a                	mv	a0,s2
20400ed8:	2b89                	jal	2040142a <__malloc_unlock>
20400eda:	a029                	j	20400ee4 <_malloc_r+0x6c>
20400edc:	fa04dce3          	bgez	s1,20400e94 <_malloc_r+0x1c>
20400ee0:	47b1                	li	a5,12
20400ee2:	c11c                	sw	a5,0(a0)
20400ee4:	4501                	li	a0,0
20400ee6:	40f2                	lw	ra,28(sp)
20400ee8:	4462                	lw	s0,24(sp)
20400eea:	44d2                	lw	s1,20(sp)
20400eec:	4942                	lw	s2,16(sp)
20400eee:	49b2                	lw	s3,12(sp)
20400ef0:	6105                	addi	sp,sp,32
20400ef2:	8082                	ret
20400ef4:	401c                	lw	a5,0(s0)
20400ef6:	8f85                	sub	a5,a5,s1
20400ef8:	0407c063          	bltz	a5,20400f38 <_malloc_r+0xc0>
20400efc:	46ad                	li	a3,11
20400efe:	00f6f663          	bgeu	a3,a5,20400f0a <_malloc_r+0x92>
20400f02:	c01c                	sw	a5,0(s0)
20400f04:	943e                	add	s0,s0,a5
20400f06:	c004                	sw	s1,0(s0)
20400f08:	a801                	j	20400f18 <_malloc_r+0xa0>
20400f0a:	405c                	lw	a5,4(s0)
20400f0c:	02871463          	bne	a4,s0,20400f34 <_malloc_r+0xbc>
20400f10:	5fc00717          	auipc	a4,0x5fc00
20400f14:	86f72023          	sw	a5,-1952(a4) # 80000770 <metal_segment_data_target_end>
20400f18:	854a                	mv	a0,s2
20400f1a:	2b01                	jal	2040142a <__malloc_unlock>
20400f1c:	00b40513          	addi	a0,s0,11
20400f20:	00440793          	addi	a5,s0,4
20400f24:	9961                	andi	a0,a0,-8
20400f26:	40f50733          	sub	a4,a0,a5
20400f2a:	df55                	beqz	a4,20400ee6 <_malloc_r+0x6e>
20400f2c:	943a                	add	s0,s0,a4
20400f2e:	8f89                	sub	a5,a5,a0
20400f30:	c01c                	sw	a5,0(s0)
20400f32:	bf55                	j	20400ee6 <_malloc_r+0x6e>
20400f34:	c35c                	sw	a5,4(a4)
20400f36:	b7cd                	j	20400f18 <_malloc_r+0xa0>
20400f38:	8722                	mv	a4,s0
20400f3a:	4040                	lw	s0,4(s0)
20400f3c:	b7b5                	j	20400ea8 <_malloc_r+0x30>
20400f3e:	00350413          	addi	s0,a0,3
20400f42:	9871                	andi	s0,s0,-4
20400f44:	fc8501e3          	beq	a0,s0,20400f06 <_malloc_r+0x8e>
20400f48:	40a405b3          	sub	a1,s0,a0
20400f4c:	854a                	mv	a0,s2
20400f4e:	2631                	jal	2040125a <_sbrk_r>
20400f50:	fb351be3          	bne	a0,s3,20400f06 <_malloc_r+0x8e>
20400f54:	bfb5                	j	20400ed0 <_malloc_r+0x58>

20400f56 <__sfputc_r>:
__sfputc_r():
20400f56:	461c                	lw	a5,8(a2)
20400f58:	17fd                	addi	a5,a5,-1
20400f5a:	c61c                	sw	a5,8(a2)
20400f5c:	0007da63          	bgez	a5,20400f70 <__sfputc_r+0x1a>
20400f60:	4e18                	lw	a4,24(a2)
20400f62:	00e7c563          	blt	a5,a4,20400f6c <__sfputc_r+0x16>
20400f66:	47a9                	li	a5,10
20400f68:	00f59463          	bne	a1,a5,20400f70 <__sfputc_r+0x1a>
20400f6c:	f1cff06f          	j	20400688 <__swbuf_r>
20400f70:	421c                	lw	a5,0(a2)
20400f72:	852e                	mv	a0,a1
20400f74:	00178713          	addi	a4,a5,1
20400f78:	c218                	sw	a4,0(a2)
20400f7a:	00b78023          	sb	a1,0(a5)
20400f7e:	8082                	ret

20400f80 <__sfputs_r>:
__sfputs_r():
20400f80:	1101                	addi	sp,sp,-32
20400f82:	cc22                	sw	s0,24(sp)
20400f84:	ca26                	sw	s1,20(sp)
20400f86:	c84a                	sw	s2,16(sp)
20400f88:	c64e                	sw	s3,12(sp)
20400f8a:	c452                	sw	s4,8(sp)
20400f8c:	ce06                	sw	ra,28(sp)
20400f8e:	892a                	mv	s2,a0
20400f90:	89ae                	mv	s3,a1
20400f92:	8432                	mv	s0,a2
20400f94:	00d604b3          	add	s1,a2,a3
20400f98:	5a7d                	li	s4,-1
20400f9a:	00941463          	bne	s0,s1,20400fa2 <__sfputs_r+0x22>
20400f9e:	4501                	li	a0,0
20400fa0:	a809                	j	20400fb2 <__sfputs_r+0x32>
20400fa2:	00044583          	lbu	a1,0(s0)
20400fa6:	864e                	mv	a2,s3
20400fa8:	854a                	mv	a0,s2
20400faa:	3775                	jal	20400f56 <__sfputc_r>
20400fac:	0405                	addi	s0,s0,1
20400fae:	ff4516e3          	bne	a0,s4,20400f9a <__sfputs_r+0x1a>
20400fb2:	40f2                	lw	ra,28(sp)
20400fb4:	4462                	lw	s0,24(sp)
20400fb6:	44d2                	lw	s1,20(sp)
20400fb8:	4942                	lw	s2,16(sp)
20400fba:	49b2                	lw	s3,12(sp)
20400fbc:	4a22                	lw	s4,8(sp)
20400fbe:	6105                	addi	sp,sp,32
20400fc0:	8082                	ret

20400fc2 <_vfiprintf_r>:
_vfiprintf_r():
20400fc2:	7135                	addi	sp,sp,-160
20400fc4:	cd22                	sw	s0,152(sp)
20400fc6:	cb26                	sw	s1,148(sp)
20400fc8:	c94a                	sw	s2,144(sp)
20400fca:	c74e                	sw	s3,140(sp)
20400fcc:	cf06                	sw	ra,156(sp)
20400fce:	c552                	sw	s4,136(sp)
20400fd0:	c356                	sw	s5,132(sp)
20400fd2:	c15a                	sw	s6,128(sp)
20400fd4:	dede                	sw	s7,124(sp)
20400fd6:	dce2                	sw	s8,120(sp)
20400fd8:	dae6                	sw	s9,116(sp)
20400fda:	89aa                	mv	s3,a0
20400fdc:	84ae                	mv	s1,a1
20400fde:	8932                	mv	s2,a2
20400fe0:	8436                	mv	s0,a3
20400fe2:	c501                	beqz	a0,20400fea <_vfiprintf_r+0x28>
20400fe4:	4d1c                	lw	a5,24(a0)
20400fe6:	e391                	bnez	a5,20400fea <_vfiprintf_r+0x28>
20400fe8:	3cd1                	jal	20400abc <__sinit>
20400fea:	00004797          	auipc	a5,0x4
20400fee:	38a78793          	addi	a5,a5,906 # 20405374 <__sf_fake_stdin>
20400ff2:	0cf49b63          	bne	s1,a5,204010c8 <_vfiprintf_r+0x106>
20400ff6:	0049a483          	lw	s1,4(s3)
20400ffa:	00c4d783          	lhu	a5,12(s1)
20400ffe:	8ba1                	andi	a5,a5,8
20401000:	c7f5                	beqz	a5,204010ec <_vfiprintf_r+0x12a>
20401002:	489c                	lw	a5,16(s1)
20401004:	c7e5                	beqz	a5,204010ec <_vfiprintf_r+0x12a>
20401006:	02000793          	li	a5,32
2040100a:	02f104a3          	sb	a5,41(sp)
2040100e:	03000793          	li	a5,48
20401012:	d202                	sw	zero,36(sp)
20401014:	02f10523          	sb	a5,42(sp)
20401018:	c622                	sw	s0,12(sp)
2040101a:	02500b93          	li	s7,37
2040101e:	00004a97          	auipc	s5,0x4
20401022:	396a8a93          	addi	s5,s5,918 # 204053b4 <__sf_fake_stdout+0x20>
20401026:	4c05                	li	s8,1
20401028:	4b29                	li	s6,10
2040102a:	844a                	mv	s0,s2
2040102c:	00044783          	lbu	a5,0(s0)
20401030:	c399                	beqz	a5,20401036 <_vfiprintf_r+0x74>
20401032:	0f779063          	bne	a5,s7,20401112 <_vfiprintf_r+0x150>
20401036:	41240cb3          	sub	s9,s0,s2
2040103a:	000c8d63          	beqz	s9,20401054 <_vfiprintf_r+0x92>
2040103e:	86e6                	mv	a3,s9
20401040:	864a                	mv	a2,s2
20401042:	85a6                	mv	a1,s1
20401044:	854e                	mv	a0,s3
20401046:	3f2d                	jal	20400f80 <__sfputs_r>
20401048:	57fd                	li	a5,-1
2040104a:	1ef50663          	beq	a0,a5,20401236 <_vfiprintf_r+0x274>
2040104e:	5692                	lw	a3,36(sp)
20401050:	96e6                	add	a3,a3,s9
20401052:	d236                	sw	a3,36(sp)
20401054:	00044783          	lbu	a5,0(s0)
20401058:	1c078f63          	beqz	a5,20401236 <_vfiprintf_r+0x274>
2040105c:	57fd                	li	a5,-1
2040105e:	00140913          	addi	s2,s0,1
20401062:	c802                	sw	zero,16(sp)
20401064:	ce02                	sw	zero,28(sp)
20401066:	ca3e                	sw	a5,20(sp)
20401068:	cc02                	sw	zero,24(sp)
2040106a:	040109a3          	sb	zero,83(sp)
2040106e:	d482                	sw	zero,104(sp)
20401070:	00094583          	lbu	a1,0(s2)
20401074:	4615                	li	a2,5
20401076:	8556                	mv	a0,s5
20401078:	2e59                	jal	2040140e <memchr>
2040107a:	00190413          	addi	s0,s2,1
2040107e:	47c2                	lw	a5,16(sp)
20401080:	e959                	bnez	a0,20401116 <_vfiprintf_r+0x154>
20401082:	0107f713          	andi	a4,a5,16
20401086:	c709                	beqz	a4,20401090 <_vfiprintf_r+0xce>
20401088:	02000713          	li	a4,32
2040108c:	04e109a3          	sb	a4,83(sp)
20401090:	0087f713          	andi	a4,a5,8
20401094:	c709                	beqz	a4,2040109e <_vfiprintf_r+0xdc>
20401096:	02b00713          	li	a4,43
2040109a:	04e109a3          	sb	a4,83(sp)
2040109e:	00094683          	lbu	a3,0(s2)
204010a2:	02a00713          	li	a4,42
204010a6:	08e68063          	beq	a3,a4,20401126 <_vfiprintf_r+0x164>
204010aa:	47f2                	lw	a5,28(sp)
204010ac:	844a                	mv	s0,s2
204010ae:	4681                	li	a3,0
204010b0:	4625                	li	a2,9
204010b2:	00044703          	lbu	a4,0(s0)
204010b6:	00140593          	addi	a1,s0,1
204010ba:	fd070713          	addi	a4,a4,-48
204010be:	0ae67963          	bgeu	a2,a4,20401170 <_vfiprintf_r+0x1ae>
204010c2:	cab5                	beqz	a3,20401136 <_vfiprintf_r+0x174>
204010c4:	ce3e                	sw	a5,28(sp)
204010c6:	a885                	j	20401136 <_vfiprintf_r+0x174>
204010c8:	00004797          	auipc	a5,0x4
204010cc:	2cc78793          	addi	a5,a5,716 # 20405394 <__sf_fake_stdout>
204010d0:	00f49563          	bne	s1,a5,204010da <_vfiprintf_r+0x118>
204010d4:	0089a483          	lw	s1,8(s3)
204010d8:	b70d                	j	20400ffa <_vfiprintf_r+0x38>
204010da:	00004797          	auipc	a5,0x4
204010de:	27a78793          	addi	a5,a5,634 # 20405354 <__sf_fake_stderr>
204010e2:	f0f49ce3          	bne	s1,a5,20400ffa <_vfiprintf_r+0x38>
204010e6:	00c9a483          	lw	s1,12(s3)
204010ea:	bf01                	j	20400ffa <_vfiprintf_r+0x38>
204010ec:	85a6                	mv	a1,s1
204010ee:	854e                	mv	a0,s3
204010f0:	e58ff0ef          	jal	ra,20400748 <__swsetup_r>
204010f4:	d909                	beqz	a0,20401006 <_vfiprintf_r+0x44>
204010f6:	557d                	li	a0,-1
204010f8:	40fa                	lw	ra,156(sp)
204010fa:	446a                	lw	s0,152(sp)
204010fc:	44da                	lw	s1,148(sp)
204010fe:	494a                	lw	s2,144(sp)
20401100:	49ba                	lw	s3,140(sp)
20401102:	4a2a                	lw	s4,136(sp)
20401104:	4a9a                	lw	s5,132(sp)
20401106:	4b0a                	lw	s6,128(sp)
20401108:	5bf6                	lw	s7,124(sp)
2040110a:	5c66                	lw	s8,120(sp)
2040110c:	5cd6                	lw	s9,116(sp)
2040110e:	610d                	addi	sp,sp,160
20401110:	8082                	ret
20401112:	0405                	addi	s0,s0,1
20401114:	bf21                	j	2040102c <_vfiprintf_r+0x6a>
20401116:	41550533          	sub	a0,a0,s5
2040111a:	00ac1533          	sll	a0,s8,a0
2040111e:	8fc9                	or	a5,a5,a0
20401120:	c83e                	sw	a5,16(sp)
20401122:	8922                	mv	s2,s0
20401124:	b7b1                	j	20401070 <_vfiprintf_r+0xae>
20401126:	4732                	lw	a4,12(sp)
20401128:	00470693          	addi	a3,a4,4
2040112c:	4318                	lw	a4,0(a4)
2040112e:	c636                	sw	a3,12(sp)
20401130:	02074963          	bltz	a4,20401162 <_vfiprintf_r+0x1a0>
20401134:	ce3a                	sw	a4,28(sp)
20401136:	00044703          	lbu	a4,0(s0)
2040113a:	02e00793          	li	a5,46
2040113e:	04f71f63          	bne	a4,a5,2040119c <_vfiprintf_r+0x1da>
20401142:	00144703          	lbu	a4,1(s0)
20401146:	02a00793          	li	a5,42
2040114a:	02f71b63          	bne	a4,a5,20401180 <_vfiprintf_r+0x1be>
2040114e:	47b2                	lw	a5,12(sp)
20401150:	0409                	addi	s0,s0,2
20401152:	00478713          	addi	a4,a5,4
20401156:	439c                	lw	a5,0(a5)
20401158:	c63a                	sw	a4,12(sp)
2040115a:	0207c163          	bltz	a5,2040117c <_vfiprintf_r+0x1ba>
2040115e:	ca3e                	sw	a5,20(sp)
20401160:	a835                	j	2040119c <_vfiprintf_r+0x1da>
20401162:	40e00733          	neg	a4,a4
20401166:	0027e793          	ori	a5,a5,2
2040116a:	ce3a                	sw	a4,28(sp)
2040116c:	c83e                	sw	a5,16(sp)
2040116e:	b7e1                	j	20401136 <_vfiprintf_r+0x174>
20401170:	036787b3          	mul	a5,a5,s6
20401174:	4685                	li	a3,1
20401176:	842e                	mv	s0,a1
20401178:	97ba                	add	a5,a5,a4
2040117a:	bf25                	j	204010b2 <_vfiprintf_r+0xf0>
2040117c:	57fd                	li	a5,-1
2040117e:	b7c5                	j	2040115e <_vfiprintf_r+0x19c>
20401180:	0405                	addi	s0,s0,1
20401182:	ca02                	sw	zero,20(sp)
20401184:	4681                	li	a3,0
20401186:	4781                	li	a5,0
20401188:	4625                	li	a2,9
2040118a:	00044703          	lbu	a4,0(s0)
2040118e:	00140593          	addi	a1,s0,1
20401192:	fd070713          	addi	a4,a4,-48
20401196:	06e67663          	bgeu	a2,a4,20401202 <_vfiprintf_r+0x240>
2040119a:	f2f1                	bnez	a3,2040115e <_vfiprintf_r+0x19c>
2040119c:	00044583          	lbu	a1,0(s0)
204011a0:	460d                	li	a2,3
204011a2:	00004517          	auipc	a0,0x4
204011a6:	21a50513          	addi	a0,a0,538 # 204053bc <__sf_fake_stdout+0x28>
204011aa:	2495                	jal	2040140e <memchr>
204011ac:	cd11                	beqz	a0,204011c8 <_vfiprintf_r+0x206>
204011ae:	00004797          	auipc	a5,0x4
204011b2:	20e78793          	addi	a5,a5,526 # 204053bc <__sf_fake_stdout+0x28>
204011b6:	8d1d                	sub	a0,a0,a5
204011b8:	04000793          	li	a5,64
204011bc:	00a797b3          	sll	a5,a5,a0
204011c0:	4542                	lw	a0,16(sp)
204011c2:	0405                	addi	s0,s0,1
204011c4:	8d5d                	or	a0,a0,a5
204011c6:	c82a                	sw	a0,16(sp)
204011c8:	00044583          	lbu	a1,0(s0)
204011cc:	4619                	li	a2,6
204011ce:	00004517          	auipc	a0,0x4
204011d2:	1f250513          	addi	a0,a0,498 # 204053c0 <__sf_fake_stdout+0x2c>
204011d6:	00140913          	addi	s2,s0,1
204011da:	02b10423          	sb	a1,40(sp)
204011de:	2c05                	jal	2040140e <memchr>
204011e0:	c13d                	beqz	a0,20401246 <_vfiprintf_r+0x284>
204011e2:	dfbff797          	auipc	a5,0xdfbff
204011e6:	e1e78793          	addi	a5,a5,-482 # 0 <__metal_boot_hart>
204011ea:	e795                	bnez	a5,20401216 <_vfiprintf_r+0x254>
204011ec:	4742                	lw	a4,16(sp)
204011ee:	47b2                	lw	a5,12(sp)
204011f0:	10077713          	andi	a4,a4,256
204011f4:	cf09                	beqz	a4,2040120e <_vfiprintf_r+0x24c>
204011f6:	0791                	addi	a5,a5,4
204011f8:	c63e                	sw	a5,12(sp)
204011fa:	5792                	lw	a5,36(sp)
204011fc:	97d2                	add	a5,a5,s4
204011fe:	d23e                	sw	a5,36(sp)
20401200:	b52d                	j	2040102a <_vfiprintf_r+0x68>
20401202:	036787b3          	mul	a5,a5,s6
20401206:	4685                	li	a3,1
20401208:	842e                	mv	s0,a1
2040120a:	97ba                	add	a5,a5,a4
2040120c:	bfbd                	j	2040118a <_vfiprintf_r+0x1c8>
2040120e:	079d                	addi	a5,a5,7
20401210:	9be1                	andi	a5,a5,-8
20401212:	07a1                	addi	a5,a5,8
20401214:	b7d5                	j	204011f8 <_vfiprintf_r+0x236>
20401216:	0078                	addi	a4,sp,12
20401218:	00000697          	auipc	a3,0x0
2040121c:	d6868693          	addi	a3,a3,-664 # 20400f80 <__sfputs_r>
20401220:	8626                	mv	a2,s1
20401222:	080c                	addi	a1,sp,16
20401224:	854e                	mv	a0,s3
20401226:	00000097          	auipc	ra,0x0
2040122a:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040122e:	57fd                	li	a5,-1
20401230:	8a2a                	mv	s4,a0
20401232:	fcf514e3          	bne	a0,a5,204011fa <_vfiprintf_r+0x238>
20401236:	00c4d783          	lhu	a5,12(s1)
2040123a:	0407f793          	andi	a5,a5,64
2040123e:	ea079ce3          	bnez	a5,204010f6 <_vfiprintf_r+0x134>
20401242:	5512                	lw	a0,36(sp)
20401244:	bd55                	j	204010f8 <_vfiprintf_r+0x136>
20401246:	0078                	addi	a4,sp,12
20401248:	00000697          	auipc	a3,0x0
2040124c:	d3868693          	addi	a3,a3,-712 # 20400f80 <__sfputs_r>
20401250:	8626                	mv	a2,s1
20401252:	080c                	addi	a1,sp,16
20401254:	854e                	mv	a0,s3
20401256:	24cd                	jal	20401538 <_printf_i>
20401258:	bfd9                	j	2040122e <_vfiprintf_r+0x26c>

2040125a <_sbrk_r>:
_sbrk_r():
2040125a:	1141                	addi	sp,sp,-16
2040125c:	c422                	sw	s0,8(sp)
2040125e:	842a                	mv	s0,a0
20401260:	852e                	mv	a0,a1
20401262:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
20401266:	c606                	sw	ra,12(sp)
20401268:	2da9                	jal	204018c2 <_sbrk>
2040126a:	57fd                	li	a5,-1
2040126c:	00f51763          	bne	a0,a5,2040127a <_sbrk_r+0x20>
20401270:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
20401274:	439c                	lw	a5,0(a5)
20401276:	c391                	beqz	a5,2040127a <_sbrk_r+0x20>
20401278:	c01c                	sw	a5,0(s0)
2040127a:	40b2                	lw	ra,12(sp)
2040127c:	4422                	lw	s0,8(sp)
2040127e:	0141                	addi	sp,sp,16
20401280:	8082                	ret

20401282 <__sread>:
__sread():
20401282:	1141                	addi	sp,sp,-16
20401284:	c422                	sw	s0,8(sp)
20401286:	842e                	mv	s0,a1
20401288:	00e59583          	lh	a1,14(a1)
2040128c:	c606                	sw	ra,12(sp)
2040128e:	23b1                	jal	204017da <_read_r>
20401290:	00054963          	bltz	a0,204012a2 <__sread+0x20>
20401294:	487c                	lw	a5,84(s0)
20401296:	97aa                	add	a5,a5,a0
20401298:	c87c                	sw	a5,84(s0)
2040129a:	40b2                	lw	ra,12(sp)
2040129c:	4422                	lw	s0,8(sp)
2040129e:	0141                	addi	sp,sp,16
204012a0:	8082                	ret
204012a2:	00c45783          	lhu	a5,12(s0)
204012a6:	777d                	lui	a4,0xfffff
204012a8:	177d                	addi	a4,a4,-1
204012aa:	8ff9                	and	a5,a5,a4
204012ac:	00f41623          	sh	a5,12(s0)
204012b0:	b7ed                	j	2040129a <__sread+0x18>

204012b2 <__swrite>:
__swrite():
204012b2:	00c5d783          	lhu	a5,12(a1)
204012b6:	1101                	addi	sp,sp,-32
204012b8:	cc22                	sw	s0,24(sp)
204012ba:	ca26                	sw	s1,20(sp)
204012bc:	c84a                	sw	s2,16(sp)
204012be:	c64e                	sw	s3,12(sp)
204012c0:	ce06                	sw	ra,28(sp)
204012c2:	1007f793          	andi	a5,a5,256
204012c6:	84aa                	mv	s1,a0
204012c8:	842e                	mv	s0,a1
204012ca:	8932                	mv	s2,a2
204012cc:	89b6                	mv	s3,a3
204012ce:	c791                	beqz	a5,204012da <__swrite+0x28>
204012d0:	00e59583          	lh	a1,14(a1)
204012d4:	4689                	li	a3,2
204012d6:	4601                	li	a2,0
204012d8:	2229                	jal	204013e2 <_lseek_r>
204012da:	00c45783          	lhu	a5,12(s0)
204012de:	777d                	lui	a4,0xfffff
204012e0:	177d                	addi	a4,a4,-1
204012e2:	8ff9                	and	a5,a5,a4
204012e4:	00f41623          	sh	a5,12(s0)
204012e8:	00e41583          	lh	a1,14(s0)
204012ec:	4462                	lw	s0,24(sp)
204012ee:	40f2                	lw	ra,28(sp)
204012f0:	86ce                	mv	a3,s3
204012f2:	864a                	mv	a2,s2
204012f4:	49b2                	lw	s3,12(sp)
204012f6:	4942                	lw	s2,16(sp)
204012f8:	8526                	mv	a0,s1
204012fa:	44d2                	lw	s1,20(sp)
204012fc:	6105                	addi	sp,sp,32
204012fe:	a83d                	j	2040133c <_write_r>

20401300 <__sseek>:
__sseek():
20401300:	1141                	addi	sp,sp,-16
20401302:	c422                	sw	s0,8(sp)
20401304:	842e                	mv	s0,a1
20401306:	00e59583          	lh	a1,14(a1)
2040130a:	c606                	sw	ra,12(sp)
2040130c:	28d9                	jal	204013e2 <_lseek_r>
2040130e:	57fd                	li	a5,-1
20401310:	00c45703          	lhu	a4,12(s0)
20401314:	00f51b63          	bne	a0,a5,2040132a <__sseek+0x2a>
20401318:	77fd                	lui	a5,0xfffff
2040131a:	17fd                	addi	a5,a5,-1
2040131c:	8ff9                	and	a5,a5,a4
2040131e:	00f41623          	sh	a5,12(s0)
20401322:	40b2                	lw	ra,12(sp)
20401324:	4422                	lw	s0,8(sp)
20401326:	0141                	addi	sp,sp,16
20401328:	8082                	ret
2040132a:	6785                	lui	a5,0x1
2040132c:	8fd9                	or	a5,a5,a4
2040132e:	00f41623          	sh	a5,12(s0)
20401332:	c868                	sw	a0,84(s0)
20401334:	b7fd                	j	20401322 <__sseek+0x22>

20401336 <__sclose>:
__sclose():
20401336:	00e59583          	lh	a1,14(a1)
2040133a:	a03d                	j	20401368 <_close_r>

2040133c <_write_r>:
_write_r():
2040133c:	1141                	addi	sp,sp,-16
2040133e:	c422                	sw	s0,8(sp)
20401340:	842a                	mv	s0,a0
20401342:	852e                	mv	a0,a1
20401344:	85b2                	mv	a1,a2
20401346:	8636                	mv	a2,a3
20401348:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
2040134c:	c606                	sw	ra,12(sp)
2040134e:	23cd                	jal	20401930 <_write>
20401350:	57fd                	li	a5,-1
20401352:	00f51763          	bne	a0,a5,20401360 <_write_r+0x24>
20401356:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
2040135a:	439c                	lw	a5,0(a5)
2040135c:	c391                	beqz	a5,20401360 <_write_r+0x24>
2040135e:	c01c                	sw	a5,0(s0)
20401360:	40b2                	lw	ra,12(sp)
20401362:	4422                	lw	s0,8(sp)
20401364:	0141                	addi	sp,sp,16
20401366:	8082                	ret

20401368 <_close_r>:
_close_r():
20401368:	1141                	addi	sp,sp,-16
2040136a:	c422                	sw	s0,8(sp)
2040136c:	842a                	mv	s0,a0
2040136e:	852e                	mv	a0,a1
20401370:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
20401374:	c606                	sw	ra,12(sp)
20401376:	2941                	jal	20401806 <_close>
20401378:	57fd                	li	a5,-1
2040137a:	00f51763          	bne	a0,a5,20401388 <_close_r+0x20>
2040137e:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
20401382:	439c                	lw	a5,0(a5)
20401384:	c391                	beqz	a5,20401388 <_close_r+0x20>
20401386:	c01c                	sw	a5,0(s0)
20401388:	40b2                	lw	ra,12(sp)
2040138a:	4422                	lw	s0,8(sp)
2040138c:	0141                	addi	sp,sp,16
2040138e:	8082                	ret

20401390 <_fstat_r>:
_fstat_r():
20401390:	1141                	addi	sp,sp,-16
20401392:	c422                	sw	s0,8(sp)
20401394:	842a                	mv	s0,a0
20401396:	852e                	mv	a0,a1
20401398:	85b2                	mv	a1,a2
2040139a:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
2040139e:	c606                	sw	ra,12(sp)
204013a0:	2161                	jal	20401828 <_fstat>
204013a2:	57fd                	li	a5,-1
204013a4:	00f51763          	bne	a0,a5,204013b2 <_fstat_r+0x22>
204013a8:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
204013ac:	439c                	lw	a5,0(a5)
204013ae:	c391                	beqz	a5,204013b2 <_fstat_r+0x22>
204013b0:	c01c                	sw	a5,0(s0)
204013b2:	40b2                	lw	ra,12(sp)
204013b4:	4422                	lw	s0,8(sp)
204013b6:	0141                	addi	sp,sp,16
204013b8:	8082                	ret

204013ba <_isatty_r>:
_isatty_r():
204013ba:	1141                	addi	sp,sp,-16
204013bc:	c422                	sw	s0,8(sp)
204013be:	842a                	mv	s0,a0
204013c0:	852e                	mv	a0,a1
204013c2:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204013c6:	c606                	sw	ra,12(sp)
204013c8:	2159                	jal	2040184e <_isatty>
204013ca:	57fd                	li	a5,-1
204013cc:	00f51763          	bne	a0,a5,204013da <_isatty_r+0x20>
204013d0:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
204013d4:	439c                	lw	a5,0(a5)
204013d6:	c391                	beqz	a5,204013da <_isatty_r+0x20>
204013d8:	c01c                	sw	a5,0(s0)
204013da:	40b2                	lw	ra,12(sp)
204013dc:	4422                	lw	s0,8(sp)
204013de:	0141                	addi	sp,sp,16
204013e0:	8082                	ret

204013e2 <_lseek_r>:
_lseek_r():
204013e2:	1141                	addi	sp,sp,-16
204013e4:	c422                	sw	s0,8(sp)
204013e6:	842a                	mv	s0,a0
204013e8:	852e                	mv	a0,a1
204013ea:	85b2                	mv	a1,a2
204013ec:	8636                	mv	a2,a3
204013ee:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204013f2:	c606                	sw	ra,12(sp)
204013f4:	29ad                	jal	2040186e <_lseek>
204013f6:	57fd                	li	a5,-1
204013f8:	00f51763          	bne	a0,a5,20401406 <_lseek_r+0x24>
204013fc:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
20401400:	439c                	lw	a5,0(a5)
20401402:	c391                	beqz	a5,20401406 <_lseek_r+0x24>
20401404:	c01c                	sw	a5,0(s0)
20401406:	40b2                	lw	ra,12(sp)
20401408:	4422                	lw	s0,8(sp)
2040140a:	0141                	addi	sp,sp,16
2040140c:	8082                	ret

2040140e <memchr>:
memchr():
2040140e:	0ff5f593          	andi	a1,a1,255
20401412:	962a                	add	a2,a2,a0
20401414:	00c51463          	bne	a0,a2,2040141c <memchr+0xe>
20401418:	4501                	li	a0,0
2040141a:	8082                	ret
2040141c:	00054783          	lbu	a5,0(a0)
20401420:	feb78de3          	beq	a5,a1,2040141a <memchr+0xc>
20401424:	0505                	addi	a0,a0,1
20401426:	b7fd                	j	20401414 <memchr+0x6>

20401428 <__malloc_lock>:
__malloc_lock():
20401428:	8082                	ret

2040142a <__malloc_unlock>:
__malloc_unlock():
2040142a:	8082                	ret

2040142c <_printf_common>:
_printf_common():
2040142c:	7179                	addi	sp,sp,-48
2040142e:	ca56                	sw	s5,20(sp)
20401430:	499c                	lw	a5,16(a1)
20401432:	8aba                	mv	s5,a4
20401434:	4598                	lw	a4,8(a1)
20401436:	d422                	sw	s0,40(sp)
20401438:	d226                	sw	s1,36(sp)
2040143a:	ce4e                	sw	s3,28(sp)
2040143c:	cc52                	sw	s4,24(sp)
2040143e:	d606                	sw	ra,44(sp)
20401440:	d04a                	sw	s2,32(sp)
20401442:	c85a                	sw	s6,16(sp)
20401444:	c65e                	sw	s7,12(sp)
20401446:	89aa                	mv	s3,a0
20401448:	842e                	mv	s0,a1
2040144a:	84b2                	mv	s1,a2
2040144c:	8a36                	mv	s4,a3
2040144e:	00e7d363          	bge	a5,a4,20401454 <_printf_common+0x28>
20401452:	87ba                	mv	a5,a4
20401454:	c09c                	sw	a5,0(s1)
20401456:	04344703          	lbu	a4,67(s0)
2040145a:	c319                	beqz	a4,20401460 <_printf_common+0x34>
2040145c:	0785                	addi	a5,a5,1
2040145e:	c09c                	sw	a5,0(s1)
20401460:	401c                	lw	a5,0(s0)
20401462:	0207f793          	andi	a5,a5,32
20401466:	c781                	beqz	a5,2040146e <_printf_common+0x42>
20401468:	409c                	lw	a5,0(s1)
2040146a:	0789                	addi	a5,a5,2
2040146c:	c09c                	sw	a5,0(s1)
2040146e:	00042903          	lw	s2,0(s0)
20401472:	00697913          	andi	s2,s2,6
20401476:	00091a63          	bnez	s2,2040148a <_printf_common+0x5e>
2040147a:	01940b13          	addi	s6,s0,25
2040147e:	5bfd                	li	s7,-1
20401480:	445c                	lw	a5,12(s0)
20401482:	4098                	lw	a4,0(s1)
20401484:	8f99                	sub	a5,a5,a4
20401486:	04f94c63          	blt	s2,a5,204014de <_printf_common+0xb2>
2040148a:	401c                	lw	a5,0(s0)
2040148c:	04344683          	lbu	a3,67(s0)
20401490:	0207f793          	andi	a5,a5,32
20401494:	00d036b3          	snez	a3,a3
20401498:	eba5                	bnez	a5,20401508 <_printf_common+0xdc>
2040149a:	04340613          	addi	a2,s0,67
2040149e:	85d2                	mv	a1,s4
204014a0:	854e                	mv	a0,s3
204014a2:	9a82                	jalr	s5
204014a4:	57fd                	li	a5,-1
204014a6:	04f50363          	beq	a0,a5,204014ec <_printf_common+0xc0>
204014aa:	401c                	lw	a5,0(s0)
204014ac:	4611                	li	a2,4
204014ae:	4098                	lw	a4,0(s1)
204014b0:	8b99                	andi	a5,a5,6
204014b2:	4454                	lw	a3,12(s0)
204014b4:	4481                	li	s1,0
204014b6:	00c79763          	bne	a5,a2,204014c4 <_printf_common+0x98>
204014ba:	40e684b3          	sub	s1,a3,a4
204014be:	0004d363          	bgez	s1,204014c4 <_printf_common+0x98>
204014c2:	4481                	li	s1,0
204014c4:	441c                	lw	a5,8(s0)
204014c6:	4818                	lw	a4,16(s0)
204014c8:	00f75463          	bge	a4,a5,204014d0 <_printf_common+0xa4>
204014cc:	8f99                	sub	a5,a5,a4
204014ce:	94be                	add	s1,s1,a5
204014d0:	4901                	li	s2,0
204014d2:	0469                	addi	s0,s0,26
204014d4:	5b7d                	li	s6,-1
204014d6:	05249863          	bne	s1,s2,20401526 <_printf_common+0xfa>
204014da:	4501                	li	a0,0
204014dc:	a809                	j	204014ee <_printf_common+0xc2>
204014de:	4685                	li	a3,1
204014e0:	865a                	mv	a2,s6
204014e2:	85d2                	mv	a1,s4
204014e4:	854e                	mv	a0,s3
204014e6:	9a82                	jalr	s5
204014e8:	01751e63          	bne	a0,s7,20401504 <_printf_common+0xd8>
204014ec:	557d                	li	a0,-1
204014ee:	50b2                	lw	ra,44(sp)
204014f0:	5422                	lw	s0,40(sp)
204014f2:	5492                	lw	s1,36(sp)
204014f4:	5902                	lw	s2,32(sp)
204014f6:	49f2                	lw	s3,28(sp)
204014f8:	4a62                	lw	s4,24(sp)
204014fa:	4ad2                	lw	s5,20(sp)
204014fc:	4b42                	lw	s6,16(sp)
204014fe:	4bb2                	lw	s7,12(sp)
20401500:	6145                	addi	sp,sp,48
20401502:	8082                	ret
20401504:	0905                	addi	s2,s2,1
20401506:	bfad                	j	20401480 <_printf_common+0x54>
20401508:	00d40733          	add	a4,s0,a3
2040150c:	03000613          	li	a2,48
20401510:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffdc37>
20401514:	04544703          	lbu	a4,69(s0)
20401518:	00168793          	addi	a5,a3,1
2040151c:	97a2                	add	a5,a5,s0
2040151e:	0689                	addi	a3,a3,2
20401520:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20401524:	bf9d                	j	2040149a <_printf_common+0x6e>
20401526:	4685                	li	a3,1
20401528:	8622                	mv	a2,s0
2040152a:	85d2                	mv	a1,s4
2040152c:	854e                	mv	a0,s3
2040152e:	9a82                	jalr	s5
20401530:	fb650ee3          	beq	a0,s6,204014ec <_printf_common+0xc0>
20401534:	0905                	addi	s2,s2,1
20401536:	b745                	j	204014d6 <_printf_common+0xaa>

20401538 <_printf_i>:
_printf_i():
20401538:	7179                	addi	sp,sp,-48
2040153a:	d422                	sw	s0,40(sp)
2040153c:	d226                	sw	s1,36(sp)
2040153e:	d04a                	sw	s2,32(sp)
20401540:	ce4e                	sw	s3,28(sp)
20401542:	d606                	sw	ra,44(sp)
20401544:	cc52                	sw	s4,24(sp)
20401546:	ca56                	sw	s5,20(sp)
20401548:	c85a                	sw	s6,16(sp)
2040154a:	89b6                	mv	s3,a3
2040154c:	0185c683          	lbu	a3,24(a1)
20401550:	06e00793          	li	a5,110
20401554:	8932                	mv	s2,a2
20401556:	84aa                	mv	s1,a0
20401558:	842e                	mv	s0,a1
2040155a:	04358613          	addi	a2,a1,67
2040155e:	1ef68063          	beq	a3,a5,2040173e <_printf_i+0x206>
20401562:	06d7e263          	bltu	a5,a3,204015c6 <_printf_i+0x8e>
20401566:	06300793          	li	a5,99
2040156a:	0af68263          	beq	a3,a5,2040160e <_printf_i+0xd6>
2040156e:	00d7ed63          	bltu	a5,a3,20401588 <_printf_i+0x50>
20401572:	1e068a63          	beqz	a3,20401766 <_printf_i+0x22e>
20401576:	05800793          	li	a5,88
2040157a:	16f68663          	beq	a3,a5,204016e6 <_printf_i+0x1ae>
2040157e:	04240a93          	addi	s5,s0,66
20401582:	04d40123          	sb	a3,66(s0)
20401586:	a869                	j	20401620 <_printf_i+0xe8>
20401588:	06400793          	li	a5,100
2040158c:	00f68663          	beq	a3,a5,20401598 <_printf_i+0x60>
20401590:	06900793          	li	a5,105
20401594:	fef695e3          	bne	a3,a5,2040157e <_printf_i+0x46>
20401598:	401c                	lw	a5,0(s0)
2040159a:	4308                	lw	a0,0(a4)
2040159c:	0807f693          	andi	a3,a5,128
204015a0:	00450593          	addi	a1,a0,4
204015a4:	c2c1                	beqz	a3,20401624 <_printf_i+0xec>
204015a6:	411c                	lw	a5,0(a0)
204015a8:	c30c                	sw	a1,0(a4)
204015aa:	0007d863          	bgez	a5,204015ba <_printf_i+0x82>
204015ae:	02d00713          	li	a4,45
204015b2:	40f007b3          	neg	a5,a5
204015b6:	04e401a3          	sb	a4,67(s0)
204015ba:	00004697          	auipc	a3,0x4
204015be:	e0e68693          	addi	a3,a3,-498 # 204053c8 <__sf_fake_stdout+0x34>
204015c2:	4729                	li	a4,10
204015c4:	a065                	j	2040166c <_printf_i+0x134>
204015c6:	07300793          	li	a5,115
204015ca:	1af68263          	beq	a3,a5,2040176e <_printf_i+0x236>
204015ce:	00d7ef63          	bltu	a5,a3,204015ec <_printf_i+0xb4>
204015d2:	06f00793          	li	a5,111
204015d6:	04f68f63          	beq	a3,a5,20401634 <_printf_i+0xfc>
204015da:	07000793          	li	a5,112
204015de:	faf690e3          	bne	a3,a5,2040157e <_printf_i+0x46>
204015e2:	419c                	lw	a5,0(a1)
204015e4:	0207e793          	ori	a5,a5,32
204015e8:	c19c                	sw	a5,0(a1)
204015ea:	a809                	j	204015fc <_printf_i+0xc4>
204015ec:	07500793          	li	a5,117
204015f0:	04f68263          	beq	a3,a5,20401634 <_printf_i+0xfc>
204015f4:	07800793          	li	a5,120
204015f8:	f8f693e3          	bne	a3,a5,2040157e <_printf_i+0x46>
204015fc:	07800793          	li	a5,120
20401600:	04f402a3          	sb	a5,69(s0)
20401604:	00004697          	auipc	a3,0x4
20401608:	dd868693          	addi	a3,a3,-552 # 204053dc <__sf_fake_stdout+0x48>
2040160c:	a0dd                	j	204016f2 <_printf_i+0x1ba>
2040160e:	431c                	lw	a5,0(a4)
20401610:	04258a93          	addi	s5,a1,66
20401614:	00478693          	addi	a3,a5,4
20401618:	439c                	lw	a5,0(a5)
2040161a:	c314                	sw	a3,0(a4)
2040161c:	04f58123          	sb	a5,66(a1)
20401620:	4785                	li	a5,1
20401622:	a2ad                	j	2040178c <_printf_i+0x254>
20401624:	0407f693          	andi	a3,a5,64
20401628:	411c                	lw	a5,0(a0)
2040162a:	c30c                	sw	a1,0(a4)
2040162c:	debd                	beqz	a3,204015aa <_printf_i+0x72>
2040162e:	07c2                	slli	a5,a5,0x10
20401630:	87c1                	srai	a5,a5,0x10
20401632:	bfa5                	j	204015aa <_printf_i+0x72>
20401634:	400c                	lw	a1,0(s0)
20401636:	431c                	lw	a5,0(a4)
20401638:	0805f813          	andi	a6,a1,128
2040163c:	00478513          	addi	a0,a5,4
20401640:	00080563          	beqz	a6,2040164a <_printf_i+0x112>
20401644:	c308                	sw	a0,0(a4)
20401646:	439c                	lw	a5,0(a5)
20401648:	a039                	j	20401656 <_printf_i+0x11e>
2040164a:	0405f593          	andi	a1,a1,64
2040164e:	c308                	sw	a0,0(a4)
20401650:	d9fd                	beqz	a1,20401646 <_printf_i+0x10e>
20401652:	0007d783          	lhu	a5,0(a5)
20401656:	06f00713          	li	a4,111
2040165a:	0ce68a63          	beq	a3,a4,2040172e <_printf_i+0x1f6>
2040165e:	00004697          	auipc	a3,0x4
20401662:	d6a68693          	addi	a3,a3,-662 # 204053c8 <__sf_fake_stdout+0x34>
20401666:	4729                	li	a4,10
20401668:	040401a3          	sb	zero,67(s0)
2040166c:	404c                	lw	a1,4(s0)
2040166e:	c40c                	sw	a1,8(s0)
20401670:	0005c563          	bltz	a1,2040167a <_printf_i+0x142>
20401674:	4008                	lw	a0,0(s0)
20401676:	996d                	andi	a0,a0,-5
20401678:	c008                	sw	a0,0(s0)
2040167a:	e399                	bnez	a5,20401680 <_printf_i+0x148>
2040167c:	8ab2                	mv	s5,a2
2040167e:	cd91                	beqz	a1,2040169a <_printf_i+0x162>
20401680:	8ab2                	mv	s5,a2
20401682:	02e7f5b3          	remu	a1,a5,a4
20401686:	1afd                	addi	s5,s5,-1
20401688:	95b6                	add	a1,a1,a3
2040168a:	0005c583          	lbu	a1,0(a1)
2040168e:	00ba8023          	sb	a1,0(s5)
20401692:	02e7d5b3          	divu	a1,a5,a4
20401696:	0ae7f263          	bgeu	a5,a4,2040173a <_printf_i+0x202>
2040169a:	47a1                	li	a5,8
2040169c:	00f71e63          	bne	a4,a5,204016b8 <_printf_i+0x180>
204016a0:	401c                	lw	a5,0(s0)
204016a2:	8b85                	andi	a5,a5,1
204016a4:	cb91                	beqz	a5,204016b8 <_printf_i+0x180>
204016a6:	4058                	lw	a4,4(s0)
204016a8:	481c                	lw	a5,16(s0)
204016aa:	00e7c763          	blt	a5,a4,204016b8 <_printf_i+0x180>
204016ae:	03000793          	li	a5,48
204016b2:	fefa8fa3          	sb	a5,-1(s5)
204016b6:	1afd                	addi	s5,s5,-1
204016b8:	41560633          	sub	a2,a2,s5
204016bc:	c810                	sw	a2,16(s0)
204016be:	874e                	mv	a4,s3
204016c0:	86ca                	mv	a3,s2
204016c2:	0070                	addi	a2,sp,12
204016c4:	85a2                	mv	a1,s0
204016c6:	8526                	mv	a0,s1
204016c8:	3395                	jal	2040142c <_printf_common>
204016ca:	5a7d                	li	s4,-1
204016cc:	0d451463          	bne	a0,s4,20401794 <_printf_i+0x25c>
204016d0:	557d                	li	a0,-1
204016d2:	50b2                	lw	ra,44(sp)
204016d4:	5422                	lw	s0,40(sp)
204016d6:	5492                	lw	s1,36(sp)
204016d8:	5902                	lw	s2,32(sp)
204016da:	49f2                	lw	s3,28(sp)
204016dc:	4a62                	lw	s4,24(sp)
204016de:	4ad2                	lw	s5,20(sp)
204016e0:	4b42                	lw	s6,16(sp)
204016e2:	6145                	addi	sp,sp,48
204016e4:	8082                	ret
204016e6:	04d582a3          	sb	a3,69(a1)
204016ea:	00004697          	auipc	a3,0x4
204016ee:	cde68693          	addi	a3,a3,-802 # 204053c8 <__sf_fake_stdout+0x34>
204016f2:	400c                	lw	a1,0(s0)
204016f4:	4308                	lw	a0,0(a4)
204016f6:	0805f813          	andi	a6,a1,128
204016fa:	411c                	lw	a5,0(a0)
204016fc:	0511                	addi	a0,a0,4
204016fe:	02080063          	beqz	a6,2040171e <_printf_i+0x1e6>
20401702:	c308                	sw	a0,0(a4)
20401704:	0015f713          	andi	a4,a1,1
20401708:	c701                	beqz	a4,20401710 <_printf_i+0x1d8>
2040170a:	0205e593          	ori	a1,a1,32
2040170e:	c00c                	sw	a1,0(s0)
20401710:	4741                	li	a4,16
20401712:	fbb9                	bnez	a5,20401668 <_printf_i+0x130>
20401714:	400c                	lw	a1,0(s0)
20401716:	fdf5f593          	andi	a1,a1,-33
2040171a:	c00c                	sw	a1,0(s0)
2040171c:	b7b1                	j	20401668 <_printf_i+0x130>
2040171e:	0405f813          	andi	a6,a1,64
20401722:	c308                	sw	a0,0(a4)
20401724:	fe0800e3          	beqz	a6,20401704 <_printf_i+0x1cc>
20401728:	07c2                	slli	a5,a5,0x10
2040172a:	83c1                	srli	a5,a5,0x10
2040172c:	bfe1                	j	20401704 <_printf_i+0x1cc>
2040172e:	00004697          	auipc	a3,0x4
20401732:	c9a68693          	addi	a3,a3,-870 # 204053c8 <__sf_fake_stdout+0x34>
20401736:	4721                	li	a4,8
20401738:	bf05                	j	20401668 <_printf_i+0x130>
2040173a:	87ae                	mv	a5,a1
2040173c:	b799                	j	20401682 <_printf_i+0x14a>
2040173e:	4194                	lw	a3,0(a1)
20401740:	431c                	lw	a5,0(a4)
20401742:	49cc                	lw	a1,20(a1)
20401744:	0806f813          	andi	a6,a3,128
20401748:	00478513          	addi	a0,a5,4
2040174c:	00080663          	beqz	a6,20401758 <_printf_i+0x220>
20401750:	c308                	sw	a0,0(a4)
20401752:	439c                	lw	a5,0(a5)
20401754:	c38c                	sw	a1,0(a5)
20401756:	a801                	j	20401766 <_printf_i+0x22e>
20401758:	c308                	sw	a0,0(a4)
2040175a:	0406f693          	andi	a3,a3,64
2040175e:	439c                	lw	a5,0(a5)
20401760:	daf5                	beqz	a3,20401754 <_printf_i+0x21c>
20401762:	00b79023          	sh	a1,0(a5)
20401766:	00042823          	sw	zero,16(s0)
2040176a:	8ab2                	mv	s5,a2
2040176c:	bf89                	j	204016be <_printf_i+0x186>
2040176e:	431c                	lw	a5,0(a4)
20401770:	41d0                	lw	a2,4(a1)
20401772:	4581                	li	a1,0
20401774:	00478693          	addi	a3,a5,4
20401778:	c314                	sw	a3,0(a4)
2040177a:	0007aa83          	lw	s5,0(a5)
2040177e:	8556                	mv	a0,s5
20401780:	3179                	jal	2040140e <memchr>
20401782:	c501                	beqz	a0,2040178a <_printf_i+0x252>
20401784:	41550533          	sub	a0,a0,s5
20401788:	c048                	sw	a0,4(s0)
2040178a:	405c                	lw	a5,4(s0)
2040178c:	c81c                	sw	a5,16(s0)
2040178e:	040401a3          	sb	zero,67(s0)
20401792:	b735                	j	204016be <_printf_i+0x186>
20401794:	4814                	lw	a3,16(s0)
20401796:	8656                	mv	a2,s5
20401798:	85ca                	mv	a1,s2
2040179a:	8526                	mv	a0,s1
2040179c:	9982                	jalr	s3
2040179e:	f34509e3          	beq	a0,s4,204016d0 <_printf_i+0x198>
204017a2:	401c                	lw	a5,0(s0)
204017a4:	8b89                	andi	a5,a5,2
204017a6:	e78d                	bnez	a5,204017d0 <_printf_i+0x298>
204017a8:	47b2                	lw	a5,12(sp)
204017aa:	4448                	lw	a0,12(s0)
204017ac:	f2f553e3          	bge	a0,a5,204016d2 <_printf_i+0x19a>
204017b0:	853e                	mv	a0,a5
204017b2:	b705                	j	204016d2 <_printf_i+0x19a>
204017b4:	4685                	li	a3,1
204017b6:	8656                	mv	a2,s5
204017b8:	85ca                	mv	a1,s2
204017ba:	8526                	mv	a0,s1
204017bc:	9982                	jalr	s3
204017be:	f16509e3          	beq	a0,s6,204016d0 <_printf_i+0x198>
204017c2:	0a05                	addi	s4,s4,1
204017c4:	445c                	lw	a5,12(s0)
204017c6:	4732                	lw	a4,12(sp)
204017c8:	8f99                	sub	a5,a5,a4
204017ca:	fefa45e3          	blt	s4,a5,204017b4 <_printf_i+0x27c>
204017ce:	bfe9                	j	204017a8 <_printf_i+0x270>
204017d0:	4a01                	li	s4,0
204017d2:	01940a93          	addi	s5,s0,25
204017d6:	5b7d                	li	s6,-1
204017d8:	b7f5                	j	204017c4 <_printf_i+0x28c>

204017da <_read_r>:
_read_r():
204017da:	1141                	addi	sp,sp,-16
204017dc:	c422                	sw	s0,8(sp)
204017de:	842a                	mv	s0,a0
204017e0:	852e                	mv	a0,a1
204017e2:	85b2                	mv	a1,a2
204017e4:	8636                	mv	a2,a3
204017e6:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204017ea:	c606                	sw	ra,12(sp)
204017ec:	2075                	jal	20401898 <_read>
204017ee:	57fd                	li	a5,-1
204017f0:	00f51763          	bne	a0,a5,204017fe <_read_r+0x24>
204017f4:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
204017f8:	439c                	lw	a5,0(a5)
204017fa:	c391                	beqz	a5,204017fe <_read_r+0x24>
204017fc:	c01c                	sw	a5,0(s0)
204017fe:	40b2                	lw	ra,12(sp)
20401800:	4422                	lw	s0,8(sp)
20401802:	0141                	addi	sp,sp,16
20401804:	8082                	ret

20401806 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401806:	1101                	addi	sp,sp,-32
20401808:	ce06                	sw	ra,28(sp)
2040180a:	cc22                	sw	s0,24(sp)
2040180c:	1000                	addi	s0,sp,32
2040180e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401812:	2a59                	jal	204019a8 <__errno>
20401814:	872a                	mv	a4,a0
20401816:	05800793          	li	a5,88
2040181a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
2040181c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2040181e:	853e                	mv	a0,a5
20401820:	40f2                	lw	ra,28(sp)
20401822:	4462                	lw	s0,24(sp)
20401824:	6105                	addi	sp,sp,32
20401826:	8082                	ret

20401828 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401828:	1101                	addi	sp,sp,-32
2040182a:	ce06                	sw	ra,28(sp)
2040182c:	cc22                	sw	s0,24(sp)
2040182e:	1000                	addi	s0,sp,32
20401830:	fea42623          	sw	a0,-20(s0)
20401834:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401838:	2a85                	jal	204019a8 <__errno>
2040183a:	872a                	mv	a4,a0
2040183c:	fa800793          	li	a5,-88
20401840:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401842:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401844:	853e                	mv	a0,a5
20401846:	40f2                	lw	ra,28(sp)
20401848:	4462                	lw	s0,24(sp)
2040184a:	6105                	addi	sp,sp,32
2040184c:	8082                	ret

2040184e <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040184e:	1101                	addi	sp,sp,-32
20401850:	ce22                	sw	s0,28(sp)
20401852:	1000                	addi	s0,sp,32
20401854:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401858:	fec42783          	lw	a5,-20(s0)
2040185c:	17fd                	addi	a5,a5,-1
2040185e:	0017b793          	seqz	a5,a5
20401862:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401866:	853e                	mv	a0,a5
20401868:	4472                	lw	s0,28(sp)
2040186a:	6105                	addi	sp,sp,32
2040186c:	8082                	ret

2040186e <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040186e:	1101                	addi	sp,sp,-32
20401870:	ce06                	sw	ra,28(sp)
20401872:	cc22                	sw	s0,24(sp)
20401874:	1000                	addi	s0,sp,32
20401876:	fea42623          	sw	a0,-20(s0)
2040187a:	feb42423          	sw	a1,-24(s0)
2040187e:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401882:	221d                	jal	204019a8 <__errno>
20401884:	872a                	mv	a4,a0
20401886:	05800793          	li	a5,88
2040188a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040188c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040188e:	853e                	mv	a0,a5
20401890:	40f2                	lw	ra,28(sp)
20401892:	4462                	lw	s0,24(sp)
20401894:	6105                	addi	sp,sp,32
20401896:	8082                	ret

20401898 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401898:	1101                	addi	sp,sp,-32
2040189a:	ce06                	sw	ra,28(sp)
2040189c:	cc22                	sw	s0,24(sp)
2040189e:	1000                	addi	s0,sp,32
204018a0:	fea42623          	sw	a0,-20(s0)
204018a4:	feb42423          	sw	a1,-24(s0)
204018a8:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204018ac:	28f5                	jal	204019a8 <__errno>
204018ae:	872a                	mv	a4,a0
204018b0:	05800793          	li	a5,88
204018b4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204018b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204018b8:	853e                	mv	a0,a5
204018ba:	40f2                	lw	ra,28(sp)
204018bc:	4462                	lw	s0,24(sp)
204018be:	6105                	addi	sp,sp,32
204018c0:	8082                	ret

204018c2 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204018c2:	7179                	addi	sp,sp,-48
204018c4:	d622                	sw	s0,44(sp)
204018c6:	1800                	addi	s0,sp,48
204018c8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204018cc:	800007b7          	lui	a5,0x80000
204018d0:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
204018d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204018d8:	cc418713          	addi	a4,gp,-828 # 80000c0c <_sp>
204018dc:	4c418793          	addi	a5,gp,1220 # 8000140c <metal_segment_heap_target_end>
204018e0:	00f71463          	bne	a4,a5,204018e8 <_sbrk+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204018e4:	57fd                	li	a5,-1
204018e6:	a089                	j	20401928 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204018e8:	800007b7          	lui	a5,0x80000
204018ec:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
204018f0:	fdc42783          	lw	a5,-36(s0)
204018f4:	973e                	add	a4,a4,a5
204018f6:	4c418793          	addi	a5,gp,1220 # 8000140c <metal_segment_heap_target_end>
204018fa:	02f77063          	bgeu	a4,a5,2040191a <_sbrk+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204018fe:	800007b7          	lui	a5,0x80000
20401902:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
20401906:	fdc42783          	lw	a5,-36(s0)
2040190a:	973e                	add	a4,a4,a5
2040190c:	800007b7          	lui	a5,0x80000
20401910:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401914:	fec42783          	lw	a5,-20(s0)
20401918:	a801                	j	20401928 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040191a:	800007b7          	lui	a5,0x80000
2040191e:	4c418713          	addi	a4,gp,1220 # 8000140c <metal_segment_heap_target_end>
20401922:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401926:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401928:	853e                	mv	a0,a5
2040192a:	5432                	lw	s0,44(sp)
2040192c:	6145                	addi	sp,sp,48
2040192e:	8082                	ret

20401930 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401930:	7179                	addi	sp,sp,-48
20401932:	d606                	sw	ra,44(sp)
20401934:	d422                	sw	s0,40(sp)
20401936:	1800                	addi	s0,sp,48
20401938:	fca42e23          	sw	a0,-36(s0)
2040193c:	fcb42c23          	sw	a1,-40(s0)
20401940:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401944:	fdc42703          	lw	a4,-36(s0)
20401948:	4785                	li	a5,1
2040194a:	00f70963          	beq	a4,a5,2040195c <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2040194e:	28a9                	jal	204019a8 <__errno>
20401950:	872a                	mv	a4,a0
20401952:	05800793          	li	a5,88
20401956:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401958:	57fd                	li	a5,-1
2040195a:	a82d                	j	20401994 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
2040195c:	fd842783          	lw	a5,-40(s0)
20401960:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401964:	fe042623          	sw	zero,-20(s0)
20401968:	a839                	j	20401986 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
2040196a:	fe842703          	lw	a4,-24(s0)
2040196e:	fec42783          	lw	a5,-20(s0)
20401972:	97ba                	add	a5,a5,a4
20401974:	0007c783          	lbu	a5,0(a5)
20401978:	853e                	mv	a0,a5
2040197a:	2ca1                	jal	20401bd2 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
2040197c:	fec42783          	lw	a5,-20(s0)
20401980:	0785                	addi	a5,a5,1
20401982:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401986:	fec42703          	lw	a4,-20(s0)
2040198a:	fd442783          	lw	a5,-44(s0)
2040198e:	fcf76ee3          	bltu	a4,a5,2040196a <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401992:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401994:	853e                	mv	a0,a5
20401996:	50b2                	lw	ra,44(sp)
20401998:	5422                	lw	s0,40(sp)
2040199a:	6145                	addi	sp,sp,48
2040199c:	8082                	ret

2040199e <atexit>:
atexit():
2040199e:	85aa                	mv	a1,a0
204019a0:	4681                	li	a3,0
204019a2:	4601                	li	a2,0
204019a4:	4501                	li	a0,0
204019a6:	a8f1                	j	20401a82 <__register_exitproc>

204019a8 <__errno>:
__errno():
204019a8:	5fbff797          	auipc	a5,0x5fbff
204019ac:	da078793          	addi	a5,a5,-608 # 80000748 <_impure_ptr>
204019b0:	4388                	lw	a0,0(a5)
204019b2:	8082                	ret

204019b4 <exit>:
exit():
204019b4:	1141                	addi	sp,sp,-16
204019b6:	c422                	sw	s0,8(sp)
204019b8:	c606                	sw	ra,12(sp)
204019ba:	00000797          	auipc	a5,0x0
204019be:	15078793          	addi	a5,a5,336 # 20401b0a <__call_exitprocs>
204019c2:	842a                	mv	s0,a0
204019c4:	c399                	beqz	a5,204019ca <exit+0x16>
204019c6:	4581                	li	a1,0
204019c8:	2289                	jal	20401b0a <__call_exitprocs>
204019ca:	5fbff797          	auipc	a5,0x5fbff
204019ce:	d8278793          	addi	a5,a5,-638 # 8000074c <_global_impure_ptr>
204019d2:	4388                	lw	a0,0(a5)
204019d4:	551c                	lw	a5,40(a0)
204019d6:	c391                	beqz	a5,204019da <exit+0x26>
204019d8:	9782                	jalr	a5
204019da:	8522                	mv	a0,s0
204019dc:	093030ef          	jal	ra,2040526e <_exit>

204019e0 <__libc_fini_array>:
__libc_fini_array():
204019e0:	1141                	addi	sp,sp,-16
204019e2:	00004797          	auipc	a5,0x4
204019e6:	d6278793          	addi	a5,a5,-670 # 20405744 <__fini_array_end>
204019ea:	c422                	sw	s0,8(sp)
204019ec:	00004417          	auipc	s0,0x4
204019f0:	d5840413          	addi	s0,s0,-680 # 20405744 <__fini_array_end>
204019f4:	8c1d                	sub	s0,s0,a5
204019f6:	c226                	sw	s1,4(sp)
204019f8:	c606                	sw	ra,12(sp)
204019fa:	8409                	srai	s0,s0,0x2
204019fc:	84be                	mv	s1,a5
204019fe:	e411                	bnez	s0,20401a0a <__libc_fini_array+0x2a>
20401a00:	40b2                	lw	ra,12(sp)
20401a02:	4422                	lw	s0,8(sp)
20401a04:	4492                	lw	s1,4(sp)
20401a06:	0141                	addi	sp,sp,16
20401a08:	8082                	ret
20401a0a:	147d                	addi	s0,s0,-1
20401a0c:	00241793          	slli	a5,s0,0x2
20401a10:	97a6                	add	a5,a5,s1
20401a12:	439c                	lw	a5,0(a5)
20401a14:	9782                	jalr	a5
20401a16:	b7e5                	j	204019fe <__libc_fini_array+0x1e>

20401a18 <__libc_init_array>:
__libc_init_array():
20401a18:	1141                	addi	sp,sp,-16
20401a1a:	00004797          	auipc	a5,0x4
20401a1e:	d2678793          	addi	a5,a5,-730 # 20405740 <__init_array_start>
20401a22:	c422                	sw	s0,8(sp)
20401a24:	00004417          	auipc	s0,0x4
20401a28:	d1c40413          	addi	s0,s0,-740 # 20405740 <__init_array_start>
20401a2c:	8c1d                	sub	s0,s0,a5
20401a2e:	c226                	sw	s1,4(sp)
20401a30:	c04a                	sw	s2,0(sp)
20401a32:	c606                	sw	ra,12(sp)
20401a34:	8409                	srai	s0,s0,0x2
20401a36:	4481                	li	s1,0
20401a38:	893e                	mv	s2,a5
20401a3a:	02849663          	bne	s1,s0,20401a66 <__libc_init_array+0x4e>
20401a3e:	00004797          	auipc	a5,0x4
20401a42:	d0278793          	addi	a5,a5,-766 # 20405740 <__init_array_start>
20401a46:	00004417          	auipc	s0,0x4
20401a4a:	cfe40413          	addi	s0,s0,-770 # 20405744 <__fini_array_end>
20401a4e:	8c1d                	sub	s0,s0,a5
20401a50:	8409                	srai	s0,s0,0x2
20401a52:	4481                	li	s1,0
20401a54:	893e                	mv	s2,a5
20401a56:	00849f63          	bne	s1,s0,20401a74 <__libc_init_array+0x5c>
20401a5a:	40b2                	lw	ra,12(sp)
20401a5c:	4422                	lw	s0,8(sp)
20401a5e:	4492                	lw	s1,4(sp)
20401a60:	4902                	lw	s2,0(sp)
20401a62:	0141                	addi	sp,sp,16
20401a64:	8082                	ret
20401a66:	00249793          	slli	a5,s1,0x2
20401a6a:	97ca                	add	a5,a5,s2
20401a6c:	439c                	lw	a5,0(a5)
20401a6e:	0485                	addi	s1,s1,1
20401a70:	9782                	jalr	a5
20401a72:	b7e1                	j	20401a3a <__libc_init_array+0x22>
20401a74:	00249793          	slli	a5,s1,0x2
20401a78:	97ca                	add	a5,a5,s2
20401a7a:	439c                	lw	a5,0(a5)
20401a7c:	0485                	addi	s1,s1,1
20401a7e:	9782                	jalr	a5
20401a80:	bfd9                	j	20401a56 <__libc_init_array+0x3e>

20401a82 <__register_exitproc>:
__register_exitproc():
20401a82:	5fbff797          	auipc	a5,0x5fbff
20401a86:	cf678793          	addi	a5,a5,-778 # 80000778 <_global_atexit>
20401a8a:	439c                	lw	a5,0(a5)
20401a8c:	8e2a                	mv	t3,a0
20401a8e:	e39d                	bnez	a5,20401ab4 <__register_exitproc+0x32>
20401a90:	5fbff717          	auipc	a4,0x5fbff
20401a94:	cec70713          	addi	a4,a4,-788 # 8000077c <_global_atexit0>
20401a98:	5fbff797          	auipc	a5,0x5fbff
20401a9c:	cee7a023          	sw	a4,-800(a5) # 80000778 <_global_atexit>
20401aa0:	dfbfe517          	auipc	a0,0xdfbfe
20401aa4:	56050513          	addi	a0,a0,1376 # 0 <__metal_boot_hart>
20401aa8:	87ba                	mv	a5,a4
20401aaa:	c509                	beqz	a0,20401ab4 <__register_exitproc+0x32>
20401aac:	411c                	lw	a5,0(a0)
20401aae:	8af1ae23          	sw	a5,-1860(gp) # 80000804 <_global_atexit0+0x88>
20401ab2:	87ba                	mv	a5,a4
20401ab4:	43d8                	lw	a4,4(a5)
20401ab6:	487d                	li	a6,31
20401ab8:	557d                	li	a0,-1
20401aba:	04e84763          	blt	a6,a4,20401b08 <__register_exitproc+0x86>
20401abe:	020e0e63          	beqz	t3,20401afa <__register_exitproc+0x78>
20401ac2:	0887a803          	lw	a6,136(a5)
20401ac6:	04080163          	beqz	a6,20401b08 <__register_exitproc+0x86>
20401aca:	00271893          	slli	a7,a4,0x2
20401ace:	98c2                	add	a7,a7,a6
20401ad0:	00c8a023          	sw	a2,0(a7)
20401ad4:	10082303          	lw	t1,256(a6)
20401ad8:	4605                	li	a2,1
20401ada:	00e61633          	sll	a2,a2,a4
20401ade:	00c36333          	or	t1,t1,a2
20401ae2:	10682023          	sw	t1,256(a6)
20401ae6:	08d8a023          	sw	a3,128(a7)
20401aea:	4689                	li	a3,2
20401aec:	00de1763          	bne	t3,a3,20401afa <__register_exitproc+0x78>
20401af0:	10482683          	lw	a3,260(a6)
20401af4:	8e55                	or	a2,a2,a3
20401af6:	10c82223          	sw	a2,260(a6)
20401afa:	00170693          	addi	a3,a4,1
20401afe:	070a                	slli	a4,a4,0x2
20401b00:	c3d4                	sw	a3,4(a5)
20401b02:	97ba                	add	a5,a5,a4
20401b04:	c78c                	sw	a1,8(a5)
20401b06:	4501                	li	a0,0
20401b08:	8082                	ret

20401b0a <__call_exitprocs>:
__call_exitprocs():
20401b0a:	7179                	addi	sp,sp,-48
20401b0c:	cc52                	sw	s4,24(sp)
20401b0e:	ca56                	sw	s5,20(sp)
20401b10:	c85a                	sw	s6,16(sp)
20401b12:	c65e                	sw	s7,12(sp)
20401b14:	d606                	sw	ra,44(sp)
20401b16:	d422                	sw	s0,40(sp)
20401b18:	d226                	sw	s1,36(sp)
20401b1a:	d04a                	sw	s2,32(sp)
20401b1c:	ce4e                	sw	s3,28(sp)
20401b1e:	c462                	sw	s8,8(sp)
20401b20:	8b2a                	mv	s6,a0
20401b22:	8a2e                	mv	s4,a1
20401b24:	5fbffa97          	auipc	s5,0x5fbff
20401b28:	c54a8a93          	addi	s5,s5,-940 # 80000778 <_global_atexit>
20401b2c:	4b85                	li	s7,1
20401b2e:	000aa403          	lw	s0,0(s5)
20401b32:	c811                	beqz	s0,20401b46 <__call_exitprocs+0x3c>
20401b34:	4044                	lw	s1,4(s0)
20401b36:	08842983          	lw	s3,136(s0)
20401b3a:	fff48913          	addi	s2,s1,-1
20401b3e:	048a                	slli	s1,s1,0x2
20401b40:	94a2                	add	s1,s1,s0
20401b42:	00095e63          	bgez	s2,20401b5e <__call_exitprocs+0x54>
20401b46:	50b2                	lw	ra,44(sp)
20401b48:	5422                	lw	s0,40(sp)
20401b4a:	5492                	lw	s1,36(sp)
20401b4c:	5902                	lw	s2,32(sp)
20401b4e:	49f2                	lw	s3,28(sp)
20401b50:	4a62                	lw	s4,24(sp)
20401b52:	4ad2                	lw	s5,20(sp)
20401b54:	4b42                	lw	s6,16(sp)
20401b56:	4bb2                	lw	s7,12(sp)
20401b58:	4c22                	lw	s8,8(sp)
20401b5a:	6145                	addi	sp,sp,48
20401b5c:	8082                	ret
20401b5e:	000a0e63          	beqz	s4,20401b7a <__call_exitprocs+0x70>
20401b62:	00099563          	bnez	s3,20401b6c <__call_exitprocs+0x62>
20401b66:	197d                	addi	s2,s2,-1
20401b68:	14f1                	addi	s1,s1,-4
20401b6a:	bfe1                	j	20401b42 <__call_exitprocs+0x38>
20401b6c:	00291793          	slli	a5,s2,0x2
20401b70:	97ce                	add	a5,a5,s3
20401b72:	0807a783          	lw	a5,128(a5)
20401b76:	ff4798e3          	bne	a5,s4,20401b66 <__call_exitprocs+0x5c>
20401b7a:	4058                	lw	a4,4(s0)
20401b7c:	40dc                	lw	a5,4(s1)
20401b7e:	177d                	addi	a4,a4,-1
20401b80:	03271863          	bne	a4,s2,20401bb0 <__call_exitprocs+0xa6>
20401b84:	01242223          	sw	s2,4(s0)
20401b88:	dff9                	beqz	a5,20401b66 <__call_exitprocs+0x5c>
20401b8a:	00442c03          	lw	s8,4(s0)
20401b8e:	00098863          	beqz	s3,20401b9e <__call_exitprocs+0x94>
20401b92:	1009a683          	lw	a3,256(s3)
20401b96:	012b9733          	sll	a4,s7,s2
20401b9a:	8ef9                	and	a3,a3,a4
20401b9c:	ee89                	bnez	a3,20401bb6 <__call_exitprocs+0xac>
20401b9e:	9782                	jalr	a5
20401ba0:	4058                	lw	a4,4(s0)
20401ba2:	000aa783          	lw	a5,0(s5)
20401ba6:	f98714e3          	bne	a4,s8,20401b2e <__call_exitprocs+0x24>
20401baa:	faf40ee3          	beq	s0,a5,20401b66 <__call_exitprocs+0x5c>
20401bae:	b741                	j	20401b2e <__call_exitprocs+0x24>
20401bb0:	0004a223          	sw	zero,4(s1)
20401bb4:	bfd1                	j	20401b88 <__call_exitprocs+0x7e>
20401bb6:	00291693          	slli	a3,s2,0x2
20401bba:	96ce                	add	a3,a3,s3
20401bbc:	428c                	lw	a1,0(a3)
20401bbe:	1049a683          	lw	a3,260(s3)
20401bc2:	8f75                	and	a4,a4,a3
20401bc4:	e701                	bnez	a4,20401bcc <__call_exitprocs+0xc2>
20401bc6:	855a                	mv	a0,s6
20401bc8:	9782                	jalr	a5
20401bca:	bfd9                	j	20401ba0 <__call_exitprocs+0x96>
20401bcc:	852e                	mv	a0,a1
20401bce:	9782                	jalr	a5
20401bd0:	bfc1                	j	20401ba0 <__call_exitprocs+0x96>

20401bd2 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401bd2:	1101                	addi	sp,sp,-32
20401bd4:	ce06                	sw	ra,28(sp)
20401bd6:	cc22                	sw	s0,24(sp)
20401bd8:	1000                	addi	s0,sp,32
20401bda:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401bde:	fec42703          	lw	a4,-20(s0)
20401be2:	47a9                	li	a5,10
20401be4:	00f71463          	bne	a4,a5,20401bec <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401be8:	4535                	li	a0,13
20401bea:	2811                	jal	20401bfe <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401bec:	fec42503          	lw	a0,-20(s0)
20401bf0:	2039                	jal	20401bfe <metal_tty_putc_raw>
20401bf2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401bf4:	853e                	mv	a0,a5
20401bf6:	40f2                	lw	ra,28(sp)
20401bf8:	4462                	lw	s0,24(sp)
20401bfa:	6105                	addi	sp,sp,32
20401bfc:	8082                	ret

20401bfe <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401bfe:	1101                	addi	sp,sp,-32
20401c00:	ce06                	sw	ra,28(sp)
20401c02:	cc22                	sw	s0,24(sp)
20401c04:	1000                	addi	s0,sp,32
20401c06:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401c0a:	fec42583          	lw	a1,-20(s0)
20401c0e:	800007b7          	lui	a5,0x80000
20401c12:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20401c16:	28b1                	jal	20401c72 <metal_uart_putc>
20401c18:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401c1a:	853e                	mv	a0,a5
20401c1c:	40f2                	lw	ra,28(sp)
20401c1e:	4462                	lw	s0,24(sp)
20401c20:	6105                	addi	sp,sp,32
20401c22:	8082                	ret

20401c24 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401c24:	1141                	addi	sp,sp,-16
20401c26:	c606                	sw	ra,12(sp)
20401c28:	c422                	sw	s0,8(sp)
20401c2a:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401c2c:	67f1                	lui	a5,0x1c
20401c2e:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401c32:	800007b7          	lui	a5,0x80000
20401c36:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20401c3a:	2031                	jal	20401c46 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401c3c:	0001                	nop
20401c3e:	40b2                	lw	ra,12(sp)
20401c40:	4422                	lw	s0,8(sp)
20401c42:	0141                	addi	sp,sp,16
20401c44:	8082                	ret

20401c46 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401c46:	1101                	addi	sp,sp,-32
20401c48:	ce06                	sw	ra,28(sp)
20401c4a:	cc22                	sw	s0,24(sp)
20401c4c:	1000                	addi	s0,sp,32
20401c4e:	fea42623          	sw	a0,-20(s0)
20401c52:	feb42423          	sw	a1,-24(s0)
20401c56:	fec42783          	lw	a5,-20(s0)
20401c5a:	439c                	lw	a5,0(a5)
20401c5c:	439c                	lw	a5,0(a5)
20401c5e:	fe842583          	lw	a1,-24(s0)
20401c62:	fec42503          	lw	a0,-20(s0)
20401c66:	9782                	jalr	a5
20401c68:	0001                	nop
20401c6a:	40f2                	lw	ra,28(sp)
20401c6c:	4462                	lw	s0,24(sp)
20401c6e:	6105                	addi	sp,sp,32
20401c70:	8082                	ret

20401c72 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401c72:	1101                	addi	sp,sp,-32
20401c74:	ce06                	sw	ra,28(sp)
20401c76:	cc22                	sw	s0,24(sp)
20401c78:	1000                	addi	s0,sp,32
20401c7a:	fea42623          	sw	a0,-20(s0)
20401c7e:	feb42423          	sw	a1,-24(s0)
20401c82:	fec42783          	lw	a5,-20(s0)
20401c86:	439c                	lw	a5,0(a5)
20401c88:	43dc                	lw	a5,4(a5)
20401c8a:	fe842583          	lw	a1,-24(s0)
20401c8e:	fec42503          	lw	a0,-20(s0)
20401c92:	9782                	jalr	a5
20401c94:	87aa                	mv	a5,a0
20401c96:	853e                	mv	a0,a5
20401c98:	40f2                	lw	ra,28(sp)
20401c9a:	4462                	lw	s0,24(sp)
20401c9c:	6105                	addi	sp,sp,32
20401c9e:	8082                	ret

20401ca0 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401ca0:	1101                	addi	sp,sp,-32
20401ca2:	ce06                	sw	ra,28(sp)
20401ca4:	cc22                	sw	s0,24(sp)
20401ca6:	1000                	addi	s0,sp,32
20401ca8:	fea42623          	sw	a0,-20(s0)
20401cac:	feb42423          	sw	a1,-24(s0)
20401cb0:	fec42783          	lw	a5,-20(s0)
20401cb4:	439c                	lw	a5,0(a5)
20401cb6:	4bdc                	lw	a5,20(a5)
20401cb8:	fe842583          	lw	a1,-24(s0)
20401cbc:	fec42503          	lw	a0,-20(s0)
20401cc0:	9782                	jalr	a5
20401cc2:	87aa                	mv	a5,a0
20401cc4:	853e                	mv	a0,a5
20401cc6:	40f2                	lw	ra,28(sp)
20401cc8:	4462                	lw	s0,24(sp)
20401cca:	6105                	addi	sp,sp,32
20401ccc:	8082                	ret

20401cce <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401cce:	1101                	addi	sp,sp,-32
20401cd0:	ce22                	sw	s0,28(sp)
20401cd2:	1000                	addi	s0,sp,32
20401cd4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401cd8:	fec42703          	lw	a4,-20(s0)
20401cdc:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401ce0:	00f71563          	bne	a4,a5,20401cea <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401ce4:	020007b7          	lui	a5,0x2000
20401ce8:	a011                	j	20401cec <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401cea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:143
	}
}
20401cec:	853e                	mv	a0,a5
20401cee:	4472                	lw	s0,28(sp)
20401cf0:	6105                	addi	sp,sp,32
20401cf2:	8082                	ret

20401cf4 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401cf4:	1101                	addi	sp,sp,-32
20401cf6:	ce22                	sw	s0,28(sp)
20401cf8:	1000                	addi	s0,sp,32
20401cfa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401cfe:	fec42703          	lw	a4,-20(s0)
20401d02:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401d06:	00f71463          	bne	a4,a5,20401d0e <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401d0a:	4789                	li	a5,2
20401d0c:	a011                	j	20401d10 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401d0e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:163
	}
}
20401d10:	853e                	mv	a0,a5
20401d12:	4472                	lw	s0,28(sp)
20401d14:	6105                	addi	sp,sp,32
20401d16:	8082                	ret

20401d18 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401d18:	1101                	addi	sp,sp,-32
20401d1a:	ce22                	sw	s0,28(sp)
20401d1c:	1000                	addi	s0,sp,32
20401d1e:	fea42623          	sw	a0,-20(s0)
20401d22:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401d26:	fe842783          	lw	a5,-24(s0)
20401d2a:	e791                	bnez	a5,20401d36 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401d2c:	800007b7          	lui	a5,0x80000
20401d30:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20401d34:	a821                	j	20401d4c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401d36:	fe842703          	lw	a4,-24(s0)
20401d3a:	4785                	li	a5,1
20401d3c:	00f71763          	bne	a4,a5,20401d4a <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401d40:	800007b7          	lui	a5,0x80000
20401d44:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20401d48:	a011                	j	20401d4c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401d4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:176
	}
}
20401d4c:	853e                	mv	a0,a5
20401d4e:	4472                	lw	s0,28(sp)
20401d50:	6105                	addi	sp,sp,32
20401d52:	8082                	ret

20401d54 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401d54:	1101                	addi	sp,sp,-32
20401d56:	ce22                	sw	s0,28(sp)
20401d58:	1000                	addi	s0,sp,32
20401d5a:	fea42623          	sw	a0,-20(s0)
20401d5e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401d62:	fe842783          	lw	a5,-24(s0)
20401d66:	e399                	bnez	a5,20401d6c <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
		return 3;
20401d68:	478d                	li	a5,3
20401d6a:	a809                	j	20401d7c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401d6c:	fe842703          	lw	a4,-24(s0)
20401d70:	4785                	li	a5,1
20401d72:	00f71463          	bne	a4,a5,20401d7a <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
		return 7;
20401d76:	479d                	li	a5,7
20401d78:	a011                	j	20401d7c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401d7a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:189
	}
}
20401d7c:	853e                	mv	a0,a5
20401d7e:	4472                	lw	s0,28(sp)
20401d80:	6105                	addi	sp,sp,32
20401d82:	8082                	ret

20401d84 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401d84:	715d                	addi	sp,sp,-80
20401d86:	c686                	sw	ra,76(sp)
20401d88:	c4a2                	sw	s0,72(sp)
20401d8a:	c2ca                	sw	s2,68(sp)
20401d8c:	c0ce                	sw	s3,64(sp)
20401d8e:	de52                	sw	s4,60(sp)
20401d90:	dc56                	sw	s5,56(sp)
20401d92:	da5a                	sw	s6,52(sp)
20401d94:	d85e                	sw	s7,48(sp)
20401d96:	d662                	sw	s8,44(sp)
20401d98:	d466                	sw	s9,40(sp)
20401d9a:	0880                	addi	s0,sp,80
20401d9c:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401da0:	fbc42783          	lw	a5,-68(s0)
20401da4:	853e                	mv	a0,a5
20401da6:	3725                	jal	20401cce <__metal_driver_sifive_clint0_control_base>
20401da8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401dac:	fcc42703          	lw	a4,-52(s0)
20401db0:	67b1                	lui	a5,0xc
20401db2:	17f1                	addi	a5,a5,-4
20401db4:	97ba                	add	a5,a5,a4
20401db6:	439c                	lw	a5,0(a5)
20401db8:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401dbc:	fcc42703          	lw	a4,-52(s0)
20401dc0:	67b1                	lui	a5,0xc
20401dc2:	17e1                	addi	a5,a5,-8
20401dc4:	97ba                	add	a5,a5,a4
20401dc6:	439c                	lw	a5,0(a5)
20401dc8:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401dcc:	fcc42703          	lw	a4,-52(s0)
20401dd0:	67b1                	lui	a5,0xc
20401dd2:	17f1                	addi	a5,a5,-4
20401dd4:	97ba                	add	a5,a5,a4
20401dd6:	439c                	lw	a5,0(a5)
20401dd8:	fc842703          	lw	a4,-56(s0)
20401ddc:	fcf718e3          	bne	a4,a5,20401dac <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401de0:	fc842783          	lw	a5,-56(s0)
20401de4:	8c3e                	mv	s8,a5
20401de6:	4c81                	li	s9,0
20401de8:	000c1993          	slli	s3,s8,0x0
20401dec:	4901                	li	s2,0
20401dee:	fc442783          	lw	a5,-60(s0)
20401df2:	8a3e                	mv	s4,a5
20401df4:	4a81                	li	s5,0
20401df6:	01496b33          	or	s6,s2,s4
20401dfa:	0159ebb3          	or	s7,s3,s5
20401dfe:	87da                	mv	a5,s6
20401e00:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401e02:	853e                	mv	a0,a5
20401e04:	85c2                	mv	a1,a6
20401e06:	40b6                	lw	ra,76(sp)
20401e08:	4426                	lw	s0,72(sp)
20401e0a:	4916                	lw	s2,68(sp)
20401e0c:	4986                	lw	s3,64(sp)
20401e0e:	5a72                	lw	s4,60(sp)
20401e10:	5ae2                	lw	s5,56(sp)
20401e12:	5b52                	lw	s6,52(sp)
20401e14:	5bc2                	lw	s7,48(sp)
20401e16:	5c32                	lw	s8,44(sp)
20401e18:	5ca2                	lw	s9,40(sp)
20401e1a:	6161                	addi	sp,sp,80
20401e1c:	8082                	ret

20401e1e <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401e1e:	7179                	addi	sp,sp,-48
20401e20:	d606                	sw	ra,44(sp)
20401e22:	d422                	sw	s0,40(sp)
20401e24:	d24a                	sw	s2,36(sp)
20401e26:	d04e                	sw	s3,32(sp)
20401e28:	1800                	addi	s0,sp,48
20401e2a:	fca42e23          	sw	a0,-36(s0)
20401e2e:	fcb42c23          	sw	a1,-40(s0)
20401e32:	fcc42823          	sw	a2,-48(s0)
20401e36:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401e3a:	fdc42783          	lw	a5,-36(s0)
20401e3e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401e42:	fec42783          	lw	a5,-20(s0)
20401e46:	853e                	mv	a0,a5
20401e48:	3559                	jal	20401cce <__metal_driver_sifive_clint0_control_base>
20401e4a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401e4e:	fd842783          	lw	a5,-40(s0)
20401e52:	078e                	slli	a5,a5,0x3
20401e54:	873e                	mv	a4,a5
20401e56:	fe842783          	lw	a5,-24(s0)
20401e5a:	973e                	add	a4,a4,a5
20401e5c:	6791                	lui	a5,0x4
20401e5e:	0791                	addi	a5,a5,4
20401e60:	97ba                	add	a5,a5,a4
20401e62:	873e                	mv	a4,a5
20401e64:	57fd                	li	a5,-1
20401e66:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401e68:	fd842783          	lw	a5,-40(s0)
20401e6c:	078e                	slli	a5,a5,0x3
20401e6e:	873e                	mv	a4,a5
20401e70:	fe842783          	lw	a5,-24(s0)
20401e74:	973e                	add	a4,a4,a5
20401e76:	6791                	lui	a5,0x4
20401e78:	97ba                	add	a5,a5,a4
20401e7a:	873e                	mv	a4,a5
20401e7c:	fd042783          	lw	a5,-48(s0)
20401e80:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401e82:	fd442783          	lw	a5,-44(s0)
20401e86:	0007d913          	srli	s2,a5,0x0
20401e8a:	4981                	li	s3,0
20401e8c:	fd842783          	lw	a5,-40(s0)
20401e90:	078e                	slli	a5,a5,0x3
20401e92:	873e                	mv	a4,a5
20401e94:	fe842783          	lw	a5,-24(s0)
20401e98:	973e                	add	a4,a4,a5
20401e9a:	6791                	lui	a5,0x4
20401e9c:	0791                	addi	a5,a5,4
20401e9e:	97ba                	add	a5,a5,a4
20401ea0:	874a                	mv	a4,s2
20401ea2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401ea4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401ea6:	853e                	mv	a0,a5
20401ea8:	50b2                	lw	ra,44(sp)
20401eaa:	5422                	lw	s0,40(sp)
20401eac:	5912                	lw	s2,36(sp)
20401eae:	5982                	lw	s3,32(sp)
20401eb0:	6145                	addi	sp,sp,48
20401eb2:	8082                	ret

20401eb4 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401eb4:	1101                	addi	sp,sp,-32
20401eb6:	ce06                	sw	ra,28(sp)
20401eb8:	cc22                	sw	s0,24(sp)
20401eba:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401ebc:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401ec0:	f14027f3          	csrr	a5,mhartid
20401ec4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401ec8:	fec42783          	lw	a5,-20(s0)
20401ecc:	853e                	mv	a0,a5
20401ece:	20a030ef          	jal	ra,204050d8 <metal_cpu_get>
20401ed2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401ed6:	fe842503          	lw	a0,-24(s0)
20401eda:	1d8030ef          	jal	ra,204050b2 <metal_cpu_interrupt_controller>
20401ede:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401ee0:	853e                	mv	a0,a5
20401ee2:	40f2                	lw	ra,28(sp)
20401ee4:	4462                	lw	s0,24(sp)
20401ee6:	6105                	addi	sp,sp,32
20401ee8:	8082                	ret

20401eea <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401eea:	7139                	addi	sp,sp,-64
20401eec:	de06                	sw	ra,60(sp)
20401eee:	dc22                	sw	s0,56(sp)
20401ef0:	0080                	addi	s0,sp,64
20401ef2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401ef6:	fcc42503          	lw	a0,-52(s0)
20401efa:	3bed                	jal	20401cf4 <__metal_driver_sifive_clint0_num_interrupts>
20401efc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401f00:	fcc42783          	lw	a5,-52(s0)
20401f04:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401f08:	fe442783          	lw	a5,-28(s0)
20401f0c:	43dc                	lw	a5,4(a5)
20401f0e:	efa9                	bnez	a5,20401f68 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401f10:	fe042623          	sw	zero,-20(s0)
20401f14:	a081                	j	20401f54 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401f16:	fec42583          	lw	a1,-20(s0)
20401f1a:	fcc42503          	lw	a0,-52(s0)
20401f1e:	3bed                	jal	20401d18 <__metal_driver_sifive_clint0_interrupt_parents>
20401f20:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401f24:	fec42583          	lw	a1,-20(s0)
20401f28:	fcc42503          	lw	a0,-52(s0)
20401f2c:	3525                	jal	20401d54 <__metal_driver_sifive_clint0_interrupt_lines>
20401f2e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401f32:	fe042783          	lw	a5,-32(s0)
20401f36:	439c                	lw	a5,0(a5)
20401f38:	4fdc                	lw	a5,28(a5)
20401f3a:	fcc42683          	lw	a3,-52(s0)
20401f3e:	4601                	li	a2,0
20401f40:	fdc42583          	lw	a1,-36(s0)
20401f44:	fe042503          	lw	a0,-32(s0)
20401f48:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401f4a:	fec42783          	lw	a5,-20(s0)
20401f4e:	0785                	addi	a5,a5,1
20401f50:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401f54:	fec42703          	lw	a4,-20(s0)
20401f58:	fe842783          	lw	a5,-24(s0)
20401f5c:	faf74de3          	blt	a4,a5,20401f16 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401f60:	fe442783          	lw	a5,-28(s0)
20401f64:	4705                	li	a4,1
20401f66:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401f68:	0001                	nop
20401f6a:	50f2                	lw	ra,60(sp)
20401f6c:	5462                	lw	s0,56(sp)
20401f6e:	6121                	addi	sp,sp,64
20401f70:	8082                	ret

20401f72 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401f72:	7139                	addi	sp,sp,-64
20401f74:	de06                	sw	ra,60(sp)
20401f76:	dc22                	sw	s0,56(sp)
20401f78:	0080                	addi	s0,sp,64
20401f7a:	fca42623          	sw	a0,-52(s0)
20401f7e:	fcb42423          	sw	a1,-56(s0)
20401f82:	fcc42223          	sw	a2,-60(s0)
20401f86:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401f8a:	57fd                	li	a5,-1
20401f8c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401f90:	384010ef          	jal	ra,20403314 <__metal_controller_interrupt_vector_mode>
20401f94:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401f98:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401f9c:	3f21                	jal	20401eb4 <_get_cpu_intc>
20401f9e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401fa2:	fcc42503          	lw	a0,-52(s0)
20401fa6:	33b9                	jal	20401cf4 <__metal_driver_sifive_clint0_num_interrupts>
20401fa8:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401fac:	fe042703          	lw	a4,-32(s0)
20401fb0:	4785                	li	a5,1
20401fb2:	00f70863          	beq	a4,a5,20401fc2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401fb6:	fe042783          	lw	a5,-32(s0)
20401fba:	c781                	beqz	a5,20401fc2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401fbc:	fec42783          	lw	a5,-20(s0)
20401fc0:	a049                	j	20402042 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401fc2:	fe042223          	sw	zero,-28(s0)
20401fc6:	a091                	j	2040200a <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401fc8:	fe442583          	lw	a1,-28(s0)
20401fcc:	fcc42503          	lw	a0,-52(s0)
20401fd0:	3351                	jal	20401d54 <__metal_driver_sifive_clint0_interrupt_lines>
20401fd2:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401fd6:	fe442583          	lw	a1,-28(s0)
20401fda:	fcc42503          	lw	a0,-52(s0)
20401fde:	3b2d                	jal	20401d18 <__metal_driver_sifive_clint0_interrupt_parents>
20401fe0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401fe4:	fdc42703          	lw	a4,-36(s0)
20401fe8:	fe842783          	lw	a5,-24(s0)
20401fec:	00f71863          	bne	a4,a5,20401ffc <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401ff0:	fc842703          	lw	a4,-56(s0)
20401ff4:	fd442783          	lw	a5,-44(s0)
20401ff8:	02f70063          	beq	a4,a5,20402018 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401ffc:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402000:	fe442783          	lw	a5,-28(s0)
20402004:	0785                	addi	a5,a5,1
20402006:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
2040200a:	fe442703          	lw	a4,-28(s0)
2040200e:	fd842783          	lw	a5,-40(s0)
20402012:	faf74be3          	blt	a4,a5,20401fc8 <__metal_driver_riscv_clint0_register+0x56>
20402016:	a011                	j	2040201a <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402018:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
2040201a:	fe842783          	lw	a5,-24(s0)
2040201e:	c385                	beqz	a5,2040203e <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402020:	fe842783          	lw	a5,-24(s0)
20402024:	439c                	lw	a5,0(a5)
20402026:	4fdc                	lw	a5,28(a5)
20402028:	fc042683          	lw	a3,-64(s0)
2040202c:	fc442603          	lw	a2,-60(s0)
20402030:	fc842583          	lw	a1,-56(s0)
20402034:	fe842503          	lw	a0,-24(s0)
20402038:	9782                	jalr	a5
2040203a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2040203e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402042:	853e                	mv	a0,a5
20402044:	50f2                	lw	ra,60(sp)
20402046:	5462                	lw	s0,56(sp)
20402048:	6121                	addi	sp,sp,64
2040204a:	8082                	ret

2040204c <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
2040204c:	7179                	addi	sp,sp,-48
2040204e:	d622                	sw	s0,44(sp)
20402050:	1800                	addi	s0,sp,48
20402052:	fca42e23          	sw	a0,-36(s0)
20402056:	fcb42c23          	sw	a1,-40(s0)
2040205a:	fcc42a23          	sw	a2,-44(s0)
2040205e:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402062:	57fd                	li	a5,-1
20402064:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402068:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
2040206c:	853e                	mv	a0,a5
2040206e:	5432                	lw	s0,44(sp)
20402070:	6145                	addi	sp,sp,48
20402072:	8082                	ret

20402074 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402074:	1101                	addi	sp,sp,-32
20402076:	ce06                	sw	ra,28(sp)
20402078:	cc22                	sw	s0,24(sp)
2040207a:	1000                	addi	s0,sp,32
2040207c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402080:	294010ef          	jal	ra,20403314 <__metal_controller_interrupt_vector_mode>
20402084:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402086:	853e                	mv	a0,a5
20402088:	40f2                	lw	ra,28(sp)
2040208a:	4462                	lw	s0,24(sp)
2040208c:	6105                	addi	sp,sp,32
2040208e:	8082                	ret

20402090 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402090:	7179                	addi	sp,sp,-48
20402092:	d606                	sw	ra,44(sp)
20402094:	d422                	sw	s0,40(sp)
20402096:	1800                	addi	s0,sp,48
20402098:	fca42e23          	sw	a0,-36(s0)
2040209c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
204020a0:	57fd                	li	a5,-1
204020a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
204020a6:	3539                	jal	20401eb4 <_get_cpu_intc>
204020a8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
204020ac:	fe842783          	lw	a5,-24(s0)
204020b0:	c395                	beqz	a5,204020d4 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
204020b2:	fd842703          	lw	a4,-40(s0)
204020b6:	4785                	li	a5,1
204020b8:	00e7ef63          	bltu	a5,a4,204020d6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
204020bc:	fe842783          	lw	a5,-24(s0)
204020c0:	439c                	lw	a5,0(a5)
204020c2:	43dc                	lw	a5,4(a5)
204020c4:	fd842583          	lw	a1,-40(s0)
204020c8:	fe842503          	lw	a0,-24(s0)
204020cc:	9782                	jalr	a5
204020ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204020d2:	a011                	j	204020d6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204020d4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204020d6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204020da:	853e                	mv	a0,a5
204020dc:	50b2                	lw	ra,44(sp)
204020de:	5422                	lw	s0,40(sp)
204020e0:	6145                	addi	sp,sp,48
204020e2:	8082                	ret

204020e4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204020e4:	7139                	addi	sp,sp,-64
204020e6:	de06                	sw	ra,60(sp)
204020e8:	dc22                	sw	s0,56(sp)
204020ea:	0080                	addi	s0,sp,64
204020ec:	fca42623          	sw	a0,-52(s0)
204020f0:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204020f4:	57fd                	li	a5,-1
204020f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204020fa:	fc842783          	lw	a5,-56(s0)
204020fe:	c7c9                	beqz	a5,20402188 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402100:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402104:	3b45                	jal	20401eb4 <_get_cpu_intc>
20402106:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040210a:	fcc42503          	lw	a0,-52(s0)
2040210e:	36dd                	jal	20401cf4 <__metal_driver_sifive_clint0_num_interrupts>
20402110:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402114:	fe042223          	sw	zero,-28(s0)
20402118:	a091                	j	2040215c <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040211a:	fe442583          	lw	a1,-28(s0)
2040211e:	fcc42503          	lw	a0,-52(s0)
20402122:	390d                	jal	20401d54 <__metal_driver_sifive_clint0_interrupt_lines>
20402124:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402128:	fe442583          	lw	a1,-28(s0)
2040212c:	fcc42503          	lw	a0,-52(s0)
20402130:	36e5                	jal	20401d18 <__metal_driver_sifive_clint0_interrupt_parents>
20402132:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402136:	fe042703          	lw	a4,-32(s0)
2040213a:	fe842783          	lw	a5,-24(s0)
2040213e:	00f71863          	bne	a4,a5,2040214e <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402142:	fc842703          	lw	a4,-56(s0)
20402146:	fd842783          	lw	a5,-40(s0)
2040214a:	02f70063          	beq	a4,a5,2040216a <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
2040214e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402152:	fe442783          	lw	a5,-28(s0)
20402156:	0785                	addi	a5,a5,1
20402158:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
2040215c:	fe442703          	lw	a4,-28(s0)
20402160:	fdc42783          	lw	a5,-36(s0)
20402164:	faf74be3          	blt	a4,a5,2040211a <__metal_driver_riscv_clint0_enable+0x36>
20402168:	a011                	j	2040216c <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
2040216a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
2040216c:	fe842783          	lw	a5,-24(s0)
20402170:	cf81                	beqz	a5,20402188 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402172:	fe842783          	lw	a5,-24(s0)
20402176:	439c                	lw	a5,0(a5)
20402178:	53dc                	lw	a5,36(a5)
2040217a:	fc842583          	lw	a1,-56(s0)
2040217e:	fe842503          	lw	a0,-24(s0)
20402182:	9782                	jalr	a5
20402184:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402188:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
2040218c:	853e                	mv	a0,a5
2040218e:	50f2                	lw	ra,60(sp)
20402190:	5462                	lw	s0,56(sp)
20402192:	6121                	addi	sp,sp,64
20402194:	8082                	ret

20402196 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402196:	7139                	addi	sp,sp,-64
20402198:	de06                	sw	ra,60(sp)
2040219a:	dc22                	sw	s0,56(sp)
2040219c:	0080                	addi	s0,sp,64
2040219e:	fca42623          	sw	a0,-52(s0)
204021a2:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
204021a6:	57fd                	li	a5,-1
204021a8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
204021ac:	fc842783          	lw	a5,-56(s0)
204021b0:	c7c9                	beqz	a5,2040223a <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
204021b2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204021b6:	39fd                	jal	20401eb4 <_get_cpu_intc>
204021b8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204021bc:	fcc42503          	lw	a0,-52(s0)
204021c0:	3e15                	jal	20401cf4 <__metal_driver_sifive_clint0_num_interrupts>
204021c2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
204021c6:	fe042223          	sw	zero,-28(s0)
204021ca:	a091                	j	2040220e <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204021cc:	fe442583          	lw	a1,-28(s0)
204021d0:	fcc42503          	lw	a0,-52(s0)
204021d4:	3641                	jal	20401d54 <__metal_driver_sifive_clint0_interrupt_lines>
204021d6:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204021da:	fe442583          	lw	a1,-28(s0)
204021de:	fcc42503          	lw	a0,-52(s0)
204021e2:	3e1d                	jal	20401d18 <__metal_driver_sifive_clint0_interrupt_parents>
204021e4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204021e8:	fe042703          	lw	a4,-32(s0)
204021ec:	fe842783          	lw	a5,-24(s0)
204021f0:	00f71863          	bne	a4,a5,20402200 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204021f4:	fc842703          	lw	a4,-56(s0)
204021f8:	fd842783          	lw	a5,-40(s0)
204021fc:	02f70063          	beq	a4,a5,2040221c <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402200:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402204:	fe442783          	lw	a5,-28(s0)
20402208:	0785                	addi	a5,a5,1
2040220a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2040220e:	fe442703          	lw	a4,-28(s0)
20402212:	fdc42783          	lw	a5,-36(s0)
20402216:	faf74be3          	blt	a4,a5,204021cc <__metal_driver_riscv_clint0_disable+0x36>
2040221a:	a011                	j	2040221e <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
2040221c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2040221e:	fe842783          	lw	a5,-24(s0)
20402222:	cf81                	beqz	a5,2040223a <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402224:	fe842783          	lw	a5,-24(s0)
20402228:	439c                	lw	a5,0(a5)
2040222a:	579c                	lw	a5,40(a5)
2040222c:	fc842583          	lw	a1,-56(s0)
20402230:	fe842503          	lw	a0,-24(s0)
20402234:	9782                	jalr	a5
20402236:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
2040223a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2040223e:	853e                	mv	a0,a5
20402240:	50f2                	lw	ra,60(sp)
20402242:	5462                	lw	s0,56(sp)
20402244:	6121                	addi	sp,sp,64
20402246:	8082                	ret

20402248 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402248:	7179                	addi	sp,sp,-48
2040224a:	d606                	sw	ra,44(sp)
2040224c:	d422                	sw	s0,40(sp)
2040224e:	1800                	addi	s0,sp,48
20402250:	fca42e23          	sw	a0,-36(s0)
20402254:	fcb42c23          	sw	a1,-40(s0)
20402258:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
2040225c:	57fd                	li	a5,-1
2040225e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402262:	fdc42783          	lw	a5,-36(s0)
20402266:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
2040226a:	fdc42503          	lw	a0,-36(s0)
2040226e:	a61ff0ef          	jal	ra,20401cce <__metal_driver_sifive_clint0_control_base>
20402272:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402276:	fd842703          	lw	a4,-40(s0)
2040227a:	4789                	li	a5,2
2040227c:	04f70863          	beq	a4,a5,204022cc <__metal_driver_riscv_clint0_command_request+0x84>
20402280:	fd842703          	lw	a4,-40(s0)
20402284:	4789                	li	a5,2
20402286:	00e7c863          	blt	a5,a4,20402296 <__metal_driver_riscv_clint0_command_request+0x4e>
2040228a:	fd842703          	lw	a4,-40(s0)
2040228e:	4785                	li	a5,1
20402290:	00f70e63          	beq	a4,a5,204022ac <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402294:	a8e9                	j	2040236e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402296:	fd842703          	lw	a4,-40(s0)
2040229a:	478d                	li	a5,3
2040229c:	04f70c63          	beq	a4,a5,204022f4 <__metal_driver_riscv_clint0_command_request+0xac>
204022a0:	fd842703          	lw	a4,-40(s0)
204022a4:	4791                	li	a5,4
204022a6:	08f70863          	beq	a4,a5,20402336 <__metal_driver_riscv_clint0_command_request+0xee>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204022aa:	a0d1                	j	2040236e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204022ac:	fd442783          	lw	a5,-44(s0)
204022b0:	cbc5                	beqz	a5,20402360 <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204022b2:	fe842503          	lw	a0,-24(s0)
204022b6:	34f9                	jal	20401d84 <__metal_clint0_mtime_get>
204022b8:	87aa                	mv	a5,a0
204022ba:	882e                	mv	a6,a1
204022bc:	fd442703          	lw	a4,-44(s0)
204022c0:	c31c                	sw	a5,0(a4)
204022c2:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204022c6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204022ca:	a859                	j	20402360 <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
204022cc:	fd442783          	lw	a5,-44(s0)
204022d0:	cbd1                	beqz	a5,20402364 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204022d2:	fd442783          	lw	a5,-44(s0)
204022d6:	439c                	lw	a5,0(a5)
204022d8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204022dc:	fe042783          	lw	a5,-32(s0)
204022e0:	078a                	slli	a5,a5,0x2
204022e2:	873e                	mv	a4,a5
204022e4:	fe442783          	lw	a5,-28(s0)
204022e8:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
204022ea:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
204022ee:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204022f2:	a88d                	j	20402364 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
204022f4:	fd442783          	lw	a5,-44(s0)
204022f8:	cba5                	beqz	a5,20402368 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
204022fa:	fd442783          	lw	a5,-44(s0)
204022fe:	439c                	lw	a5,0(a5)
20402300:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402304:	fe042783          	lw	a5,-32(s0)
20402308:	078a                	slli	a5,a5,0x2
2040230a:	873e                	mv	a4,a5
2040230c:	fe442783          	lw	a5,-28(s0)
20402310:	97ba                	add	a5,a5,a4
20402312:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402314:	4785                	li	a5,1
20402316:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402318:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040231c:	fe042783          	lw	a5,-32(s0)
20402320:	078a                	slli	a5,a5,0x2
20402322:	873e                	mv	a4,a5
20402324:	fe442783          	lw	a5,-28(s0)
20402328:	97ba                	add	a5,a5,a4
2040232a:	439c                	lw	a5,0(a5)
2040232c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402330:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402334:	a815                	j	20402368 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402336:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
2040233a:	fd442783          	lw	a5,-44(s0)
2040233e:	c79d                	beqz	a5,2040236c <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402340:	fd442783          	lw	a5,-44(s0)
20402344:	439c                	lw	a5,0(a5)
20402346:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040234a:	fe042783          	lw	a5,-32(s0)
2040234e:	078a                	slli	a5,a5,0x2
20402350:	873e                	mv	a4,a5
20402352:	fe442783          	lw	a5,-28(s0)
20402356:	97ba                	add	a5,a5,a4
20402358:	439c                	lw	a5,0(a5)
2040235a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040235e:	a039                	j	2040236c <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402360:	0001                	nop
20402362:	a031                	j	2040236e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402364:	0001                	nop
20402366:	a021                	j	2040236e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402368:	0001                	nop
2040236a:	a011                	j	2040236e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040236c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
2040236e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402372:	853e                	mv	a0,a5
20402374:	50b2                	lw	ra,44(sp)
20402376:	5422                	lw	s0,40(sp)
20402378:	6145                	addi	sp,sp,48
2040237a:	8082                	ret

2040237c <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
2040237c:	7179                	addi	sp,sp,-48
2040237e:	d606                	sw	ra,44(sp)
20402380:	d422                	sw	s0,40(sp)
20402382:	1800                	addi	s0,sp,48
20402384:	fca42e23          	sw	a0,-36(s0)
20402388:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
2040238c:	577020ef          	jal	ra,20405102 <metal_cpu_get_current_hartid>
20402390:	87aa                	mv	a5,a0
20402392:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402396:	fec40793          	addi	a5,s0,-20
2040239a:	863e                	mv	a2,a5
2040239c:	4589                	li	a1,2
2040239e:	fdc42503          	lw	a0,-36(s0)
204023a2:	355d                	jal	20402248 <__metal_driver_riscv_clint0_command_request>
204023a4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204023a6:	853e                	mv	a0,a5
204023a8:	50b2                	lw	ra,44(sp)
204023aa:	5422                	lw	s0,40(sp)
204023ac:	6145                	addi	sp,sp,48
204023ae:	8082                	ret

204023b0 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204023b0:	7179                	addi	sp,sp,-48
204023b2:	d606                	sw	ra,44(sp)
204023b4:	d422                	sw	s0,40(sp)
204023b6:	1800                	addi	s0,sp,48
204023b8:	fca42e23          	sw	a0,-36(s0)
204023bc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204023c0:	543020ef          	jal	ra,20405102 <metal_cpu_get_current_hartid>
204023c4:	87aa                	mv	a5,a0
204023c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204023ca:	fec40793          	addi	a5,s0,-20
204023ce:	863e                	mv	a2,a5
204023d0:	458d                	li	a1,3
204023d2:	fdc42503          	lw	a0,-36(s0)
204023d6:	3d8d                	jal	20402248 <__metal_driver_riscv_clint0_command_request>
204023d8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204023da:	853e                	mv	a0,a5
204023dc:	50b2                	lw	ra,44(sp)
204023de:	5422                	lw	s0,40(sp)
204023e0:	6145                	addi	sp,sp,48
204023e2:	8082                	ret

204023e4 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204023e4:	1101                	addi	sp,sp,-32
204023e6:	ce22                	sw	s0,28(sp)
204023e8:	1000                	addi	s0,sp,32
204023ea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204023ee:	fec42703          	lw	a4,-20(s0)
204023f2:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204023f6:	00f71463          	bne	a4,a5,204023fe <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
		return 0;
204023fa:	4781                	li	a5,0
204023fc:	a011                	j	20402400 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
204023fe:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:202
	}
}
20402400:	853e                	mv	a0,a5
20402402:	4472                	lw	s0,28(sp)
20402404:	6105                	addi	sp,sp,32
20402406:	8082                	ret

20402408 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402408:	1101                	addi	sp,sp,-32
2040240a:	ce22                	sw	s0,28(sp)
2040240c:	1000                	addi	s0,sp,32
2040240e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402412:	fec42703          	lw	a4,-20(s0)
20402416:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
2040241a:	00f71763          	bne	a4,a5,20402428 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:207
		return 1000000;
2040241e:	000f47b7          	lui	a5,0xf4
20402422:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402426:	a011                	j	2040242a <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402428:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:212
	}
}
2040242a:	853e                	mv	a0,a5
2040242c:	4472                	lw	s0,28(sp)
2040242e:	6105                	addi	sp,sp,32
20402430:	8082                	ret

20402432 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402432:	1101                	addi	sp,sp,-32
20402434:	ce22                	sw	s0,28(sp)
20402436:	1000                	addi	s0,sp,32
20402438:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040243c:	fec42703          	lw	a4,-20(s0)
20402440:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402444:	00f71763          	bne	a4,a5,20402452 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402448:	800007b7          	lui	a5,0x80000
2040244c:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20402450:	a011                	j	20402454 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402452:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:222
	}
}
20402454:	853e                	mv	a0,a5
20402456:	4472                	lw	s0,28(sp)
20402458:	6105                	addi	sp,sp,32
2040245a:	8082                	ret

2040245c <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2040245c:	1101                	addi	sp,sp,-32
2040245e:	ce22                	sw	s0,28(sp)
20402460:	1000                	addi	s0,sp,32
20402462:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402466:	fec42783          	lw	a5,-20(s0)
2040246a:	00f04a63          	bgtz	a5,2040247e <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
2040246e:	fec42703          	lw	a4,-20(s0)
20402472:	070a                	slli	a4,a4,0x2
20402474:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402478:	97ba                	add	a5,a5,a4
2040247a:	439c                	lw	a5,0(a5)
2040247c:	a011                	j	20402480 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
2040247e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402480:	853e                	mv	a0,a5
20402482:	4472                	lw	s0,28(sp)
20402484:	6105                	addi	sp,sp,32
20402486:	8082                	ret

20402488 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402488:	1101                	addi	sp,sp,-32
2040248a:	ce22                	sw	s0,28(sp)
2040248c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
2040248e:	f14027f3          	csrr	a5,mhartid
20402492:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402496:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
2040249a:	853e                	mv	a0,a5
2040249c:	4472                	lw	s0,28(sp)
2040249e:	6105                	addi	sp,sp,32
204024a0:	8082                	ret

204024a2 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204024a2:	1101                	addi	sp,sp,-32
204024a4:	ce22                	sw	s0,28(sp)
204024a6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204024a8:	47a1                	li	a5,8
204024aa:	3007a7f3          	csrrs	a5,mstatus,a5
204024ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
204024b2:	0001                	nop
204024b4:	4472                	lw	s0,28(sp)
204024b6:	6105                	addi	sp,sp,32
204024b8:	8082                	ret

204024ba <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204024ba:	1101                	addi	sp,sp,-32
204024bc:	ce22                	sw	s0,28(sp)
204024be:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204024c0:	47a1                	li	a5,8
204024c2:	3007b7f3          	csrrc	a5,mstatus,a5
204024c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204024ca:	0001                	nop
204024cc:	4472                	lw	s0,28(sp)
204024ce:	6105                	addi	sp,sp,32
204024d0:	8082                	ret

204024d2 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204024d2:	1101                	addi	sp,sp,-32
204024d4:	ce22                	sw	s0,28(sp)
204024d6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204024d8:	47a1                	li	a5,8
204024da:	3047a7f3          	csrrs	a5,mie,a5
204024de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204024e2:	0001                	nop
204024e4:	4472                	lw	s0,28(sp)
204024e6:	6105                	addi	sp,sp,32
204024e8:	8082                	ret

204024ea <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204024ea:	1101                	addi	sp,sp,-32
204024ec:	ce22                	sw	s0,28(sp)
204024ee:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204024f0:	47a1                	li	a5,8
204024f2:	3047b7f3          	csrrc	a5,mie,a5
204024f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204024fa:	0001                	nop
204024fc:	4472                	lw	s0,28(sp)
204024fe:	6105                	addi	sp,sp,32
20402500:	8082                	ret

20402502 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402502:	1101                	addi	sp,sp,-32
20402504:	ce22                	sw	s0,28(sp)
20402506:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402508:	08000793          	li	a5,128
2040250c:	3047a7f3          	csrrs	a5,mie,a5
20402510:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402514:	0001                	nop
20402516:	4472                	lw	s0,28(sp)
20402518:	6105                	addi	sp,sp,32
2040251a:	8082                	ret

2040251c <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
2040251c:	1101                	addi	sp,sp,-32
2040251e:	ce22                	sw	s0,28(sp)
20402520:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402522:	08000793          	li	a5,128
20402526:	3047b7f3          	csrrc	a5,mie,a5
2040252a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
2040252e:	0001                	nop
20402530:	4472                	lw	s0,28(sp)
20402532:	6105                	addi	sp,sp,32
20402534:	8082                	ret

20402536 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402536:	1101                	addi	sp,sp,-32
20402538:	ce22                	sw	s0,28(sp)
2040253a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040253c:	6785                	lui	a5,0x1
2040253e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402542:	3047a7f3          	csrrs	a5,mie,a5
20402546:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
2040254a:	0001                	nop
2040254c:	4472                	lw	s0,28(sp)
2040254e:	6105                	addi	sp,sp,32
20402550:	8082                	ret

20402552 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402552:	1101                	addi	sp,sp,-32
20402554:	ce22                	sw	s0,28(sp)
20402556:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402558:	6785                	lui	a5,0x1
2040255a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040255e:	3047b7f3          	csrrc	a5,mie,a5
20402562:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402566:	0001                	nop
20402568:	4472                	lw	s0,28(sp)
2040256a:	6105                	addi	sp,sp,32
2040256c:	8082                	ret

2040256e <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
2040256e:	7179                	addi	sp,sp,-48
20402570:	d622                	sw	s0,44(sp)
20402572:	1800                	addi	s0,sp,48
20402574:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402578:	fdc42783          	lw	a5,-36(s0)
2040257c:	4705                	li	a4,1
2040257e:	00f717b3          	sll	a5,a4,a5
20402582:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402586:	fec42783          	lw	a5,-20(s0)
2040258a:	3047a7f3          	csrrs	a5,mie,a5
2040258e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402592:	0001                	nop
20402594:	5432                	lw	s0,44(sp)
20402596:	6145                	addi	sp,sp,48
20402598:	8082                	ret

2040259a <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
2040259a:	7179                	addi	sp,sp,-48
2040259c:	d622                	sw	s0,44(sp)
2040259e:	1800                	addi	s0,sp,48
204025a0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204025a4:	fdc42783          	lw	a5,-36(s0)
204025a8:	4705                	li	a4,1
204025aa:	00f717b3          	sll	a5,a4,a5
204025ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204025b2:	fec42783          	lw	a5,-20(s0)
204025b6:	3047b7f3          	csrrc	a5,mie,a5
204025ba:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204025be:	0001                	nop
204025c0:	5432                	lw	s0,44(sp)
204025c2:	6145                	addi	sp,sp,48
204025c4:	8082                	ret

204025c6 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204025c6:	1101                	addi	sp,sp,-32
204025c8:	ce06                	sw	ra,28(sp)
204025ca:	cc22                	sw	s0,24(sp)
204025cc:	1000                	addi	s0,sp,32
204025ce:	fea42623          	sw	a0,-20(s0)
204025d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204025d6:	06400513          	li	a0,100
204025da:	343020ef          	jal	ra,2040511c <metal_shutdown>

204025de <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204025de:	1101                	addi	sp,sp,-32
204025e0:	ce06                	sw	ra,28(sp)
204025e2:	cc22                	sw	s0,24(sp)
204025e4:	1000                	addi	s0,sp,32
204025e6:	fea42623          	sw	a0,-20(s0)
204025ea:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204025ee:	0c800513          	li	a0,200
204025f2:	32b020ef          	jal	ra,2040511c <metal_shutdown>

204025f6 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204025f6:	715d                	addi	sp,sp,-80
204025f8:	c686                	sw	ra,76(sp)
204025fa:	c496                	sw	t0,72(sp)
204025fc:	c29a                	sw	t1,68(sp)
204025fe:	c09e                	sw	t2,64(sp)
20402600:	de22                	sw	s0,60(sp)
20402602:	dc2a                	sw	a0,56(sp)
20402604:	da2e                	sw	a1,52(sp)
20402606:	d832                	sw	a2,48(sp)
20402608:	d636                	sw	a3,44(sp)
2040260a:	d43a                	sw	a4,40(sp)
2040260c:	d23e                	sw	a5,36(sp)
2040260e:	d042                	sw	a6,32(sp)
20402610:	ce46                	sw	a7,28(sp)
20402612:	cc72                	sw	t3,24(sp)
20402614:	ca76                	sw	t4,20(sp)
20402616:	c87a                	sw	t5,16(sp)
20402618:	c67e                	sw	t6,12(sp)
2040261a:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
2040261c:	12c00513          	li	a0,300
20402620:	2fd020ef          	jal	ra,2040511c <metal_shutdown>

20402624 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402624:	711d                	addi	sp,sp,-96
20402626:	ce86                	sw	ra,92(sp)
20402628:	cc96                	sw	t0,88(sp)
2040262a:	ca9a                	sw	t1,84(sp)
2040262c:	c89e                	sw	t2,80(sp)
2040262e:	c6a2                	sw	s0,76(sp)
20402630:	c4aa                	sw	a0,72(sp)
20402632:	c2ae                	sw	a1,68(sp)
20402634:	c0b2                	sw	a2,64(sp)
20402636:	de36                	sw	a3,60(sp)
20402638:	dc3a                	sw	a4,56(sp)
2040263a:	da3e                	sw	a5,52(sp)
2040263c:	d842                	sw	a6,48(sp)
2040263e:	d646                	sw	a7,44(sp)
20402640:	d472                	sw	t3,40(sp)
20402642:	d276                	sw	t4,36(sp)
20402644:	d07a                	sw	t5,32(sp)
20402646:	ce7e                	sw	t6,28(sp)
20402648:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040264a:	3d3d                	jal	20402488 <__metal_myhart_id>
2040264c:	872a                	mv	a4,a0
2040264e:	070a                	slli	a4,a4,0x2
20402650:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402654:	97ba                	add	a5,a5,a4
20402656:	439c                	lw	a5,0(a5)
20402658:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
2040265c:	fac42783          	lw	a5,-84(s0)
20402660:	c785                	beqz	a5,20402688 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402662:	fac42503          	lw	a0,-84(s0)
20402666:	33f1                	jal	20402432 <__metal_driver_cpu_interrupt_controller>
20402668:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
2040266c:	fa842783          	lw	a5,-88(s0)
20402670:	0e07a783          	lw	a5,224(a5)
20402674:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402678:	fa842783          	lw	a5,-88(s0)
2040267c:	0d87a783          	lw	a5,216(a5)
20402680:	fa442583          	lw	a1,-92(s0)
20402684:	450d                	li	a0,3
20402686:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402688:	0001                	nop
2040268a:	40f6                	lw	ra,92(sp)
2040268c:	42e6                	lw	t0,88(sp)
2040268e:	4356                	lw	t1,84(sp)
20402690:	43c6                	lw	t2,80(sp)
20402692:	4436                	lw	s0,76(sp)
20402694:	4526                	lw	a0,72(sp)
20402696:	4596                	lw	a1,68(sp)
20402698:	4606                	lw	a2,64(sp)
2040269a:	56f2                	lw	a3,60(sp)
2040269c:	5762                	lw	a4,56(sp)
2040269e:	57d2                	lw	a5,52(sp)
204026a0:	5842                	lw	a6,48(sp)
204026a2:	58b2                	lw	a7,44(sp)
204026a4:	5e22                	lw	t3,40(sp)
204026a6:	5e92                	lw	t4,36(sp)
204026a8:	5f02                	lw	t5,32(sp)
204026aa:	4ff2                	lw	t6,28(sp)
204026ac:	6125                	addi	sp,sp,96
204026ae:	30200073          	mret

204026b2 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204026b2:	7179                	addi	sp,sp,-48
204026b4:	d606                	sw	ra,44(sp)
204026b6:	d422                	sw	s0,40(sp)
204026b8:	1800                	addi	s0,sp,48
204026ba:	fca42e23          	sw	a0,-36(s0)
204026be:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204026c2:	33d9                	jal	20402488 <__metal_myhart_id>
204026c4:	872a                	mv	a4,a0
204026c6:	070a                	slli	a4,a4,0x2
204026c8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204026cc:	97ba                	add	a5,a5,a4
204026ce:	439c                	lw	a5,0(a5)
204026d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204026d4:	342027f3          	csrr	a5,mcause
204026d8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204026dc:	fec42783          	lw	a5,-20(s0)
204026e0:	c795                	beqz	a5,2040270c <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204026e2:	fec42503          	lw	a0,-20(s0)
204026e6:	33b1                	jal	20402432 <__metal_driver_cpu_interrupt_controller>
204026e8:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204026ec:	fe842783          	lw	a5,-24(s0)
204026f0:	3ff7f793          	andi	a5,a5,1023
204026f4:	fe442703          	lw	a4,-28(s0)
204026f8:	0e078793          	addi	a5,a5,224
204026fc:	078a                	slli	a5,a5,0x2
204026fe:	97ba                	add	a5,a5,a4
20402700:	479c                	lw	a5,8(a5)
20402702:	fdc42583          	lw	a1,-36(s0)
20402706:	fec42503          	lw	a0,-20(s0)
2040270a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
2040270c:	0001                	nop
2040270e:	50b2                	lw	ra,44(sp)
20402710:	5422                	lw	s0,40(sp)
20402712:	6145                	addi	sp,sp,48
20402714:	8082                	ret

20402716 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402716:	711d                	addi	sp,sp,-96
20402718:	ce86                	sw	ra,92(sp)
2040271a:	cc96                	sw	t0,88(sp)
2040271c:	ca9a                	sw	t1,84(sp)
2040271e:	c89e                	sw	t2,80(sp)
20402720:	c6a2                	sw	s0,76(sp)
20402722:	c4aa                	sw	a0,72(sp)
20402724:	c2ae                	sw	a1,68(sp)
20402726:	c0b2                	sw	a2,64(sp)
20402728:	de36                	sw	a3,60(sp)
2040272a:	dc3a                	sw	a4,56(sp)
2040272c:	da3e                	sw	a5,52(sp)
2040272e:	d842                	sw	a6,48(sp)
20402730:	d646                	sw	a7,44(sp)
20402732:	d472                	sw	t3,40(sp)
20402734:	d276                	sw	t4,36(sp)
20402736:	d07a                	sw	t5,32(sp)
20402738:	ce7e                	sw	t6,28(sp)
2040273a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040273c:	33b1                	jal	20402488 <__metal_myhart_id>
2040273e:	872a                	mv	a4,a0
20402740:	070a                	slli	a4,a4,0x2
20402742:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402746:	97ba                	add	a5,a5,a4
20402748:	439c                	lw	a5,0(a5)
2040274a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
2040274e:	fac42783          	lw	a5,-84(s0)
20402752:	c785                	beqz	a5,2040277a <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402754:	fac42503          	lw	a0,-84(s0)
20402758:	39e9                	jal	20402432 <__metal_driver_cpu_interrupt_controller>
2040275a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
2040275e:	fa842783          	lw	a5,-88(s0)
20402762:	1407a783          	lw	a5,320(a5)
20402766:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
2040276a:	fa842783          	lw	a5,-88(s0)
2040276e:	1387a783          	lw	a5,312(a5)
20402772:	fa442583          	lw	a1,-92(s0)
20402776:	451d                	li	a0,7
20402778:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
2040277a:	0001                	nop
2040277c:	40f6                	lw	ra,92(sp)
2040277e:	42e6                	lw	t0,88(sp)
20402780:	4356                	lw	t1,84(sp)
20402782:	43c6                	lw	t2,80(sp)
20402784:	4436                	lw	s0,76(sp)
20402786:	4526                	lw	a0,72(sp)
20402788:	4596                	lw	a1,68(sp)
2040278a:	4606                	lw	a2,64(sp)
2040278c:	56f2                	lw	a3,60(sp)
2040278e:	5762                	lw	a4,56(sp)
20402790:	57d2                	lw	a5,52(sp)
20402792:	5842                	lw	a6,48(sp)
20402794:	58b2                	lw	a7,44(sp)
20402796:	5e22                	lw	t3,40(sp)
20402798:	5e92                	lw	t4,36(sp)
2040279a:	5f02                	lw	t5,32(sp)
2040279c:	4ff2                	lw	t6,28(sp)
2040279e:	6125                	addi	sp,sp,96
204027a0:	30200073          	mret

204027a4 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204027a4:	7179                	addi	sp,sp,-48
204027a6:	d606                	sw	ra,44(sp)
204027a8:	d422                	sw	s0,40(sp)
204027aa:	1800                	addi	s0,sp,48
204027ac:	fca42e23          	sw	a0,-36(s0)
204027b0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204027b4:	39d1                	jal	20402488 <__metal_myhart_id>
204027b6:	87aa                	mv	a5,a0
204027b8:	853e                	mv	a0,a5
204027ba:	314d                	jal	2040245c <__metal_driver_cpu_get>
204027bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204027c0:	fec42503          	lw	a0,-20(s0)
204027c4:	1aa010ef          	jal	ra,2040396e <__metal_driver_cpu_mtime_get>
204027c8:	fea42023          	sw	a0,-32(s0)
204027cc:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204027d0:	fe042783          	lw	a5,-32(s0)
204027d4:	fe442803          	lw	a6,-28(s0)
204027d8:	45a9                	li	a1,10
204027da:	4601                	li	a2,0
204027dc:	00b786b3          	add	a3,a5,a1
204027e0:	8536                	mv	a0,a3
204027e2:	00f53533          	sltu	a0,a0,a5
204027e6:	00c80733          	add	a4,a6,a2
204027ea:	00e507b3          	add	a5,a0,a4
204027ee:	873e                	mv	a4,a5
204027f0:	87b6                	mv	a5,a3
204027f2:	883a                	mv	a6,a4
204027f4:	85be                	mv	a1,a5
204027f6:	8642                	mv	a2,a6
204027f8:	fec42503          	lw	a0,-20(s0)
204027fc:	1d8010ef          	jal	ra,204039d4 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402800:	0001                	nop
20402802:	50b2                	lw	ra,44(sp)
20402804:	5422                	lw	s0,40(sp)
20402806:	6145                	addi	sp,sp,48
20402808:	8082                	ret
	...

20402880 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402880:	7119                	addi	sp,sp,-128
20402882:	de86                	sw	ra,124(sp)
20402884:	dc96                	sw	t0,120(sp)
20402886:	da9a                	sw	t1,116(sp)
20402888:	d89e                	sw	t2,112(sp)
2040288a:	d6a2                	sw	s0,108(sp)
2040288c:	d4aa                	sw	a0,104(sp)
2040288e:	d2ae                	sw	a1,100(sp)
20402890:	d0b2                	sw	a2,96(sp)
20402892:	ceb6                	sw	a3,92(sp)
20402894:	ccba                	sw	a4,88(sp)
20402896:	cabe                	sw	a5,84(sp)
20402898:	c8c2                	sw	a6,80(sp)
2040289a:	c6c6                	sw	a7,76(sp)
2040289c:	c4f2                	sw	t3,72(sp)
2040289e:	c2f6                	sw	t4,68(sp)
204028a0:	c0fa                	sw	t5,64(sp)
204028a2:	de7e                	sw	t6,60(sp)
204028a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204028a6:	36cd                	jal	20402488 <__metal_myhart_id>
204028a8:	872a                	mv	a4,a0
204028aa:	070a                	slli	a4,a4,0x2
204028ac:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204028b0:	97ba                	add	a5,a5,a4
204028b2:	439c                	lw	a5,0(a5)
204028b4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204028b8:	342027f3          	csrr	a5,mcause
204028bc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204028c0:	341027f3          	csrr	a5,mepc
204028c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204028c8:	343027f3          	csrr	a5,mtval
204028cc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204028d0:	305027f3          	csrr	a5,mtvec
204028d4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204028d8:	fac42783          	lw	a5,-84(s0)
204028dc:	c7e9                	beqz	a5,204029a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028de:	fac42503          	lw	a0,-84(s0)
204028e2:	b51ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
204028e6:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204028ea:	fa842783          	lw	a5,-88(s0)
204028ee:	3ff7f793          	andi	a5,a5,1023
204028f2:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204028f6:	fa842783          	lw	a5,-88(s0)
204028fa:	0807d863          	bgez	a5,2040298a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
204028fe:	f9442703          	lw	a4,-108(s0)
20402902:	47ad                	li	a5,11
20402904:	00e7d763          	bge	a5,a4,20402912 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402908:	f9c42783          	lw	a5,-100(s0)
2040290c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402910:	ef9d                	bnez	a5,2040294e <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402912:	f9842683          	lw	a3,-104(s0)
20402916:	f9442703          	lw	a4,-108(s0)
2040291a:	87ba                	mv	a5,a4
2040291c:	0786                	slli	a5,a5,0x1
2040291e:	97ba                	add	a5,a5,a4
20402920:	078e                	slli	a5,a5,0x3
20402922:	97b6                	add	a5,a5,a3
20402924:	0987a783          	lw	a5,152(a5)
20402928:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040292c:	f9842683          	lw	a3,-104(s0)
20402930:	f9442703          	lw	a4,-108(s0)
20402934:	87ba                	mv	a5,a4
20402936:	0786                	slli	a5,a5,0x1
20402938:	97ba                	add	a5,a5,a4
2040293a:	078e                	slli	a5,a5,0x3
2040293c:	97b6                	add	a5,a5,a3
2040293e:	0907a783          	lw	a5,144(a5)
20402942:	f8c42583          	lw	a1,-116(s0)
20402946:	f9442503          	lw	a0,-108(s0)
2040294a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040294c:	a8a9                	j	204029a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040294e:	f9c42783          	lw	a5,-100(s0)
20402952:	03f7f713          	andi	a4,a5,63
20402956:	4789                	li	a5,2
20402958:	04f71763          	bne	a4,a5,204029a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040295c:	307027f3          	csrr	a5,mtvt
20402960:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402964:	f9842783          	lw	a5,-104(s0)
20402968:	0dc7a783          	lw	a5,220(a5)
2040296c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402970:	f9042783          	lw	a5,-112(s0)
20402974:	439c                	lw	a5,0(a5)
20402976:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2040297a:	f8842783          	lw	a5,-120(s0)
2040297e:	f8c42583          	lw	a1,-116(s0)
20402982:	f9442503          	lw	a0,-108(s0)
20402986:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402988:	a839                	j	204029a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040298a:	f9842703          	lw	a4,-104(s0)
2040298e:	f9442783          	lw	a5,-108(s0)
20402992:	0e078793          	addi	a5,a5,224
20402996:	078a                	slli	a5,a5,0x2
20402998:	97ba                	add	a5,a5,a4
2040299a:	479c                	lw	a5,8(a5)
2040299c:	f9442583          	lw	a1,-108(s0)
204029a0:	fac42503          	lw	a0,-84(s0)
204029a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204029a6:	50f6                	lw	ra,124(sp)
204029a8:	52e6                	lw	t0,120(sp)
204029aa:	5356                	lw	t1,116(sp)
204029ac:	53c6                	lw	t2,112(sp)
204029ae:	5436                	lw	s0,108(sp)
204029b0:	5526                	lw	a0,104(sp)
204029b2:	5596                	lw	a1,100(sp)
204029b4:	5606                	lw	a2,96(sp)
204029b6:	46f6                	lw	a3,92(sp)
204029b8:	4766                	lw	a4,88(sp)
204029ba:	47d6                	lw	a5,84(sp)
204029bc:	4846                	lw	a6,80(sp)
204029be:	48b6                	lw	a7,76(sp)
204029c0:	4e26                	lw	t3,72(sp)
204029c2:	4e96                	lw	t4,68(sp)
204029c4:	4f06                	lw	t5,64(sp)
204029c6:	5ff2                	lw	t6,60(sp)
204029c8:	6109                	addi	sp,sp,128
204029ca:	30200073          	mret
	...

204029f4 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204029f4:	711d                	addi	sp,sp,-96
204029f6:	ce86                	sw	ra,92(sp)
204029f8:	cc96                	sw	t0,88(sp)
204029fa:	ca9a                	sw	t1,84(sp)
204029fc:	c89e                	sw	t2,80(sp)
204029fe:	c6a2                	sw	s0,76(sp)
20402a00:	c4aa                	sw	a0,72(sp)
20402a02:	c2ae                	sw	a1,68(sp)
20402a04:	c0b2                	sw	a2,64(sp)
20402a06:	de36                	sw	a3,60(sp)
20402a08:	dc3a                	sw	a4,56(sp)
20402a0a:	da3e                	sw	a5,52(sp)
20402a0c:	d842                	sw	a6,48(sp)
20402a0e:	d646                	sw	a7,44(sp)
20402a10:	d472                	sw	t3,40(sp)
20402a12:	d276                	sw	t4,36(sp)
20402a14:	d07a                	sw	t5,32(sp)
20402a16:	ce7e                	sw	t6,28(sp)
20402a18:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a1a:	a6fff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402a1e:	872a                	mv	a4,a0
20402a20:	070a                	slli	a4,a4,0x2
20402a22:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402a26:	97ba                	add	a5,a5,a4
20402a28:	439c                	lw	a5,0(a5)
20402a2a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402a2e:	fac42783          	lw	a5,-84(s0)
20402a32:	c78d                	beqz	a5,20402a5c <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a34:	fac42503          	lw	a0,-84(s0)
20402a38:	9fbff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402a3c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402a40:	fa842783          	lw	a5,-88(s0)
20402a44:	2187a783          	lw	a5,536(a5)
20402a48:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402a4c:	fa842783          	lw	a5,-88(s0)
20402a50:	2107a783          	lw	a5,528(a5)
20402a54:	fa442583          	lw	a1,-92(s0)
20402a58:	4541                	li	a0,16
20402a5a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402a5c:	0001                	nop
20402a5e:	40f6                	lw	ra,92(sp)
20402a60:	42e6                	lw	t0,88(sp)
20402a62:	4356                	lw	t1,84(sp)
20402a64:	43c6                	lw	t2,80(sp)
20402a66:	4436                	lw	s0,76(sp)
20402a68:	4526                	lw	a0,72(sp)
20402a6a:	4596                	lw	a1,68(sp)
20402a6c:	4606                	lw	a2,64(sp)
20402a6e:	56f2                	lw	a3,60(sp)
20402a70:	5762                	lw	a4,56(sp)
20402a72:	57d2                	lw	a5,52(sp)
20402a74:	5842                	lw	a6,48(sp)
20402a76:	58b2                	lw	a7,44(sp)
20402a78:	5e22                	lw	t3,40(sp)
20402a7a:	5e92                	lw	t4,36(sp)
20402a7c:	5f02                	lw	t5,32(sp)
20402a7e:	4ff2                	lw	t6,28(sp)
20402a80:	6125                	addi	sp,sp,96
20402a82:	30200073          	mret

20402a86 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402a86:	711d                	addi	sp,sp,-96
20402a88:	ce86                	sw	ra,92(sp)
20402a8a:	cc96                	sw	t0,88(sp)
20402a8c:	ca9a                	sw	t1,84(sp)
20402a8e:	c89e                	sw	t2,80(sp)
20402a90:	c6a2                	sw	s0,76(sp)
20402a92:	c4aa                	sw	a0,72(sp)
20402a94:	c2ae                	sw	a1,68(sp)
20402a96:	c0b2                	sw	a2,64(sp)
20402a98:	de36                	sw	a3,60(sp)
20402a9a:	dc3a                	sw	a4,56(sp)
20402a9c:	da3e                	sw	a5,52(sp)
20402a9e:	d842                	sw	a6,48(sp)
20402aa0:	d646                	sw	a7,44(sp)
20402aa2:	d472                	sw	t3,40(sp)
20402aa4:	d276                	sw	t4,36(sp)
20402aa6:	d07a                	sw	t5,32(sp)
20402aa8:	ce7e                	sw	t6,28(sp)
20402aaa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402aac:	9ddff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402ab0:	872a                	mv	a4,a0
20402ab2:	070a                	slli	a4,a4,0x2
20402ab4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402ab8:	97ba                	add	a5,a5,a4
20402aba:	439c                	lw	a5,0(a5)
20402abc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402ac0:	fac42783          	lw	a5,-84(s0)
20402ac4:	c78d                	beqz	a5,20402aee <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ac6:	fac42503          	lw	a0,-84(s0)
20402aca:	969ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402ace:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402ad2:	fa842783          	lw	a5,-88(s0)
20402ad6:	2307a783          	lw	a5,560(a5)
20402ada:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402ade:	fa842783          	lw	a5,-88(s0)
20402ae2:	2287a783          	lw	a5,552(a5)
20402ae6:	fa442583          	lw	a1,-92(s0)
20402aea:	4545                	li	a0,17
20402aec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402aee:	0001                	nop
20402af0:	40f6                	lw	ra,92(sp)
20402af2:	42e6                	lw	t0,88(sp)
20402af4:	4356                	lw	t1,84(sp)
20402af6:	43c6                	lw	t2,80(sp)
20402af8:	4436                	lw	s0,76(sp)
20402afa:	4526                	lw	a0,72(sp)
20402afc:	4596                	lw	a1,68(sp)
20402afe:	4606                	lw	a2,64(sp)
20402b00:	56f2                	lw	a3,60(sp)
20402b02:	5762                	lw	a4,56(sp)
20402b04:	57d2                	lw	a5,52(sp)
20402b06:	5842                	lw	a6,48(sp)
20402b08:	58b2                	lw	a7,44(sp)
20402b0a:	5e22                	lw	t3,40(sp)
20402b0c:	5e92                	lw	t4,36(sp)
20402b0e:	5f02                	lw	t5,32(sp)
20402b10:	4ff2                	lw	t6,28(sp)
20402b12:	6125                	addi	sp,sp,96
20402b14:	30200073          	mret

20402b18 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402b18:	711d                	addi	sp,sp,-96
20402b1a:	ce86                	sw	ra,92(sp)
20402b1c:	cc96                	sw	t0,88(sp)
20402b1e:	ca9a                	sw	t1,84(sp)
20402b20:	c89e                	sw	t2,80(sp)
20402b22:	c6a2                	sw	s0,76(sp)
20402b24:	c4aa                	sw	a0,72(sp)
20402b26:	c2ae                	sw	a1,68(sp)
20402b28:	c0b2                	sw	a2,64(sp)
20402b2a:	de36                	sw	a3,60(sp)
20402b2c:	dc3a                	sw	a4,56(sp)
20402b2e:	da3e                	sw	a5,52(sp)
20402b30:	d842                	sw	a6,48(sp)
20402b32:	d646                	sw	a7,44(sp)
20402b34:	d472                	sw	t3,40(sp)
20402b36:	d276                	sw	t4,36(sp)
20402b38:	d07a                	sw	t5,32(sp)
20402b3a:	ce7e                	sw	t6,28(sp)
20402b3c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b3e:	94bff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402b42:	872a                	mv	a4,a0
20402b44:	070a                	slli	a4,a4,0x2
20402b46:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b4a:	97ba                	add	a5,a5,a4
20402b4c:	439c                	lw	a5,0(a5)
20402b4e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402b52:	fac42783          	lw	a5,-84(s0)
20402b56:	c78d                	beqz	a5,20402b80 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b58:	fac42503          	lw	a0,-84(s0)
20402b5c:	8d7ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402b60:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402b64:	fa842783          	lw	a5,-88(s0)
20402b68:	2487a783          	lw	a5,584(a5)
20402b6c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402b70:	fa842783          	lw	a5,-88(s0)
20402b74:	2407a783          	lw	a5,576(a5)
20402b78:	fa442583          	lw	a1,-92(s0)
20402b7c:	4549                	li	a0,18
20402b7e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402b80:	0001                	nop
20402b82:	40f6                	lw	ra,92(sp)
20402b84:	42e6                	lw	t0,88(sp)
20402b86:	4356                	lw	t1,84(sp)
20402b88:	43c6                	lw	t2,80(sp)
20402b8a:	4436                	lw	s0,76(sp)
20402b8c:	4526                	lw	a0,72(sp)
20402b8e:	4596                	lw	a1,68(sp)
20402b90:	4606                	lw	a2,64(sp)
20402b92:	56f2                	lw	a3,60(sp)
20402b94:	5762                	lw	a4,56(sp)
20402b96:	57d2                	lw	a5,52(sp)
20402b98:	5842                	lw	a6,48(sp)
20402b9a:	58b2                	lw	a7,44(sp)
20402b9c:	5e22                	lw	t3,40(sp)
20402b9e:	5e92                	lw	t4,36(sp)
20402ba0:	5f02                	lw	t5,32(sp)
20402ba2:	4ff2                	lw	t6,28(sp)
20402ba4:	6125                	addi	sp,sp,96
20402ba6:	30200073          	mret

20402baa <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402baa:	711d                	addi	sp,sp,-96
20402bac:	ce86                	sw	ra,92(sp)
20402bae:	cc96                	sw	t0,88(sp)
20402bb0:	ca9a                	sw	t1,84(sp)
20402bb2:	c89e                	sw	t2,80(sp)
20402bb4:	c6a2                	sw	s0,76(sp)
20402bb6:	c4aa                	sw	a0,72(sp)
20402bb8:	c2ae                	sw	a1,68(sp)
20402bba:	c0b2                	sw	a2,64(sp)
20402bbc:	de36                	sw	a3,60(sp)
20402bbe:	dc3a                	sw	a4,56(sp)
20402bc0:	da3e                	sw	a5,52(sp)
20402bc2:	d842                	sw	a6,48(sp)
20402bc4:	d646                	sw	a7,44(sp)
20402bc6:	d472                	sw	t3,40(sp)
20402bc8:	d276                	sw	t4,36(sp)
20402bca:	d07a                	sw	t5,32(sp)
20402bcc:	ce7e                	sw	t6,28(sp)
20402bce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402bd0:	8b9ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402bd4:	872a                	mv	a4,a0
20402bd6:	070a                	slli	a4,a4,0x2
20402bd8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402bdc:	97ba                	add	a5,a5,a4
20402bde:	439c                	lw	a5,0(a5)
20402be0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402be4:	fac42783          	lw	a5,-84(s0)
20402be8:	c78d                	beqz	a5,20402c12 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402bea:	fac42503          	lw	a0,-84(s0)
20402bee:	845ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402bf2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402bf6:	fa842783          	lw	a5,-88(s0)
20402bfa:	2607a783          	lw	a5,608(a5)
20402bfe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402c02:	fa842783          	lw	a5,-88(s0)
20402c06:	2587a783          	lw	a5,600(a5)
20402c0a:	fa442583          	lw	a1,-92(s0)
20402c0e:	454d                	li	a0,19
20402c10:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402c12:	0001                	nop
20402c14:	40f6                	lw	ra,92(sp)
20402c16:	42e6                	lw	t0,88(sp)
20402c18:	4356                	lw	t1,84(sp)
20402c1a:	43c6                	lw	t2,80(sp)
20402c1c:	4436                	lw	s0,76(sp)
20402c1e:	4526                	lw	a0,72(sp)
20402c20:	4596                	lw	a1,68(sp)
20402c22:	4606                	lw	a2,64(sp)
20402c24:	56f2                	lw	a3,60(sp)
20402c26:	5762                	lw	a4,56(sp)
20402c28:	57d2                	lw	a5,52(sp)
20402c2a:	5842                	lw	a6,48(sp)
20402c2c:	58b2                	lw	a7,44(sp)
20402c2e:	5e22                	lw	t3,40(sp)
20402c30:	5e92                	lw	t4,36(sp)
20402c32:	5f02                	lw	t5,32(sp)
20402c34:	4ff2                	lw	t6,28(sp)
20402c36:	6125                	addi	sp,sp,96
20402c38:	30200073          	mret

20402c3c <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402c3c:	711d                	addi	sp,sp,-96
20402c3e:	ce86                	sw	ra,92(sp)
20402c40:	cc96                	sw	t0,88(sp)
20402c42:	ca9a                	sw	t1,84(sp)
20402c44:	c89e                	sw	t2,80(sp)
20402c46:	c6a2                	sw	s0,76(sp)
20402c48:	c4aa                	sw	a0,72(sp)
20402c4a:	c2ae                	sw	a1,68(sp)
20402c4c:	c0b2                	sw	a2,64(sp)
20402c4e:	de36                	sw	a3,60(sp)
20402c50:	dc3a                	sw	a4,56(sp)
20402c52:	da3e                	sw	a5,52(sp)
20402c54:	d842                	sw	a6,48(sp)
20402c56:	d646                	sw	a7,44(sp)
20402c58:	d472                	sw	t3,40(sp)
20402c5a:	d276                	sw	t4,36(sp)
20402c5c:	d07a                	sw	t5,32(sp)
20402c5e:	ce7e                	sw	t6,28(sp)
20402c60:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c62:	827ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402c66:	872a                	mv	a4,a0
20402c68:	070a                	slli	a4,a4,0x2
20402c6a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c6e:	97ba                	add	a5,a5,a4
20402c70:	439c                	lw	a5,0(a5)
20402c72:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402c76:	fac42783          	lw	a5,-84(s0)
20402c7a:	c78d                	beqz	a5,20402ca4 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c7c:	fac42503          	lw	a0,-84(s0)
20402c80:	fb2ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402c84:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402c88:	fa842783          	lw	a5,-88(s0)
20402c8c:	2787a783          	lw	a5,632(a5)
20402c90:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402c94:	fa842783          	lw	a5,-88(s0)
20402c98:	2707a783          	lw	a5,624(a5)
20402c9c:	fa442583          	lw	a1,-92(s0)
20402ca0:	4551                	li	a0,20
20402ca2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402ca4:	0001                	nop
20402ca6:	40f6                	lw	ra,92(sp)
20402ca8:	42e6                	lw	t0,88(sp)
20402caa:	4356                	lw	t1,84(sp)
20402cac:	43c6                	lw	t2,80(sp)
20402cae:	4436                	lw	s0,76(sp)
20402cb0:	4526                	lw	a0,72(sp)
20402cb2:	4596                	lw	a1,68(sp)
20402cb4:	4606                	lw	a2,64(sp)
20402cb6:	56f2                	lw	a3,60(sp)
20402cb8:	5762                	lw	a4,56(sp)
20402cba:	57d2                	lw	a5,52(sp)
20402cbc:	5842                	lw	a6,48(sp)
20402cbe:	58b2                	lw	a7,44(sp)
20402cc0:	5e22                	lw	t3,40(sp)
20402cc2:	5e92                	lw	t4,36(sp)
20402cc4:	5f02                	lw	t5,32(sp)
20402cc6:	4ff2                	lw	t6,28(sp)
20402cc8:	6125                	addi	sp,sp,96
20402cca:	30200073          	mret

20402cce <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402cce:	711d                	addi	sp,sp,-96
20402cd0:	ce86                	sw	ra,92(sp)
20402cd2:	cc96                	sw	t0,88(sp)
20402cd4:	ca9a                	sw	t1,84(sp)
20402cd6:	c89e                	sw	t2,80(sp)
20402cd8:	c6a2                	sw	s0,76(sp)
20402cda:	c4aa                	sw	a0,72(sp)
20402cdc:	c2ae                	sw	a1,68(sp)
20402cde:	c0b2                	sw	a2,64(sp)
20402ce0:	de36                	sw	a3,60(sp)
20402ce2:	dc3a                	sw	a4,56(sp)
20402ce4:	da3e                	sw	a5,52(sp)
20402ce6:	d842                	sw	a6,48(sp)
20402ce8:	d646                	sw	a7,44(sp)
20402cea:	d472                	sw	t3,40(sp)
20402cec:	d276                	sw	t4,36(sp)
20402cee:	d07a                	sw	t5,32(sp)
20402cf0:	ce7e                	sw	t6,28(sp)
20402cf2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402cf4:	f94ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402cf8:	872a                	mv	a4,a0
20402cfa:	070a                	slli	a4,a4,0x2
20402cfc:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d00:	97ba                	add	a5,a5,a4
20402d02:	439c                	lw	a5,0(a5)
20402d04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402d08:	fac42783          	lw	a5,-84(s0)
20402d0c:	c78d                	beqz	a5,20402d36 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d0e:	fac42503          	lw	a0,-84(s0)
20402d12:	f20ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402d16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402d1a:	fa842783          	lw	a5,-88(s0)
20402d1e:	2907a783          	lw	a5,656(a5)
20402d22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402d26:	fa842783          	lw	a5,-88(s0)
20402d2a:	2887a783          	lw	a5,648(a5)
20402d2e:	fa442583          	lw	a1,-92(s0)
20402d32:	4555                	li	a0,21
20402d34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402d36:	0001                	nop
20402d38:	40f6                	lw	ra,92(sp)
20402d3a:	42e6                	lw	t0,88(sp)
20402d3c:	4356                	lw	t1,84(sp)
20402d3e:	43c6                	lw	t2,80(sp)
20402d40:	4436                	lw	s0,76(sp)
20402d42:	4526                	lw	a0,72(sp)
20402d44:	4596                	lw	a1,68(sp)
20402d46:	4606                	lw	a2,64(sp)
20402d48:	56f2                	lw	a3,60(sp)
20402d4a:	5762                	lw	a4,56(sp)
20402d4c:	57d2                	lw	a5,52(sp)
20402d4e:	5842                	lw	a6,48(sp)
20402d50:	58b2                	lw	a7,44(sp)
20402d52:	5e22                	lw	t3,40(sp)
20402d54:	5e92                	lw	t4,36(sp)
20402d56:	5f02                	lw	t5,32(sp)
20402d58:	4ff2                	lw	t6,28(sp)
20402d5a:	6125                	addi	sp,sp,96
20402d5c:	30200073          	mret

20402d60 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402d60:	711d                	addi	sp,sp,-96
20402d62:	ce86                	sw	ra,92(sp)
20402d64:	cc96                	sw	t0,88(sp)
20402d66:	ca9a                	sw	t1,84(sp)
20402d68:	c89e                	sw	t2,80(sp)
20402d6a:	c6a2                	sw	s0,76(sp)
20402d6c:	c4aa                	sw	a0,72(sp)
20402d6e:	c2ae                	sw	a1,68(sp)
20402d70:	c0b2                	sw	a2,64(sp)
20402d72:	de36                	sw	a3,60(sp)
20402d74:	dc3a                	sw	a4,56(sp)
20402d76:	da3e                	sw	a5,52(sp)
20402d78:	d842                	sw	a6,48(sp)
20402d7a:	d646                	sw	a7,44(sp)
20402d7c:	d472                	sw	t3,40(sp)
20402d7e:	d276                	sw	t4,36(sp)
20402d80:	d07a                	sw	t5,32(sp)
20402d82:	ce7e                	sw	t6,28(sp)
20402d84:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d86:	f02ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402d8a:	872a                	mv	a4,a0
20402d8c:	070a                	slli	a4,a4,0x2
20402d8e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d92:	97ba                	add	a5,a5,a4
20402d94:	439c                	lw	a5,0(a5)
20402d96:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402d9a:	fac42783          	lw	a5,-84(s0)
20402d9e:	c78d                	beqz	a5,20402dc8 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402da0:	fac42503          	lw	a0,-84(s0)
20402da4:	e8eff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402da8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402dac:	fa842783          	lw	a5,-88(s0)
20402db0:	2a87a783          	lw	a5,680(a5)
20402db4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402db8:	fa842783          	lw	a5,-88(s0)
20402dbc:	2a07a783          	lw	a5,672(a5)
20402dc0:	fa442583          	lw	a1,-92(s0)
20402dc4:	4559                	li	a0,22
20402dc6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402dc8:	0001                	nop
20402dca:	40f6                	lw	ra,92(sp)
20402dcc:	42e6                	lw	t0,88(sp)
20402dce:	4356                	lw	t1,84(sp)
20402dd0:	43c6                	lw	t2,80(sp)
20402dd2:	4436                	lw	s0,76(sp)
20402dd4:	4526                	lw	a0,72(sp)
20402dd6:	4596                	lw	a1,68(sp)
20402dd8:	4606                	lw	a2,64(sp)
20402dda:	56f2                	lw	a3,60(sp)
20402ddc:	5762                	lw	a4,56(sp)
20402dde:	57d2                	lw	a5,52(sp)
20402de0:	5842                	lw	a6,48(sp)
20402de2:	58b2                	lw	a7,44(sp)
20402de4:	5e22                	lw	t3,40(sp)
20402de6:	5e92                	lw	t4,36(sp)
20402de8:	5f02                	lw	t5,32(sp)
20402dea:	4ff2                	lw	t6,28(sp)
20402dec:	6125                	addi	sp,sp,96
20402dee:	30200073          	mret

20402df2 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402df2:	711d                	addi	sp,sp,-96
20402df4:	ce86                	sw	ra,92(sp)
20402df6:	cc96                	sw	t0,88(sp)
20402df8:	ca9a                	sw	t1,84(sp)
20402dfa:	c89e                	sw	t2,80(sp)
20402dfc:	c6a2                	sw	s0,76(sp)
20402dfe:	c4aa                	sw	a0,72(sp)
20402e00:	c2ae                	sw	a1,68(sp)
20402e02:	c0b2                	sw	a2,64(sp)
20402e04:	de36                	sw	a3,60(sp)
20402e06:	dc3a                	sw	a4,56(sp)
20402e08:	da3e                	sw	a5,52(sp)
20402e0a:	d842                	sw	a6,48(sp)
20402e0c:	d646                	sw	a7,44(sp)
20402e0e:	d472                	sw	t3,40(sp)
20402e10:	d276                	sw	t4,36(sp)
20402e12:	d07a                	sw	t5,32(sp)
20402e14:	ce7e                	sw	t6,28(sp)
20402e16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e18:	e70ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402e1c:	872a                	mv	a4,a0
20402e1e:	070a                	slli	a4,a4,0x2
20402e20:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e24:	97ba                	add	a5,a5,a4
20402e26:	439c                	lw	a5,0(a5)
20402e28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402e2c:	fac42783          	lw	a5,-84(s0)
20402e30:	c78d                	beqz	a5,20402e5a <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e32:	fac42503          	lw	a0,-84(s0)
20402e36:	dfcff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402e3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402e3e:	fa842783          	lw	a5,-88(s0)
20402e42:	2c07a783          	lw	a5,704(a5)
20402e46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402e4a:	fa842783          	lw	a5,-88(s0)
20402e4e:	2b87a783          	lw	a5,696(a5)
20402e52:	fa442583          	lw	a1,-92(s0)
20402e56:	455d                	li	a0,23
20402e58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402e5a:	0001                	nop
20402e5c:	40f6                	lw	ra,92(sp)
20402e5e:	42e6                	lw	t0,88(sp)
20402e60:	4356                	lw	t1,84(sp)
20402e62:	43c6                	lw	t2,80(sp)
20402e64:	4436                	lw	s0,76(sp)
20402e66:	4526                	lw	a0,72(sp)
20402e68:	4596                	lw	a1,68(sp)
20402e6a:	4606                	lw	a2,64(sp)
20402e6c:	56f2                	lw	a3,60(sp)
20402e6e:	5762                	lw	a4,56(sp)
20402e70:	57d2                	lw	a5,52(sp)
20402e72:	5842                	lw	a6,48(sp)
20402e74:	58b2                	lw	a7,44(sp)
20402e76:	5e22                	lw	t3,40(sp)
20402e78:	5e92                	lw	t4,36(sp)
20402e7a:	5f02                	lw	t5,32(sp)
20402e7c:	4ff2                	lw	t6,28(sp)
20402e7e:	6125                	addi	sp,sp,96
20402e80:	30200073          	mret

20402e84 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402e84:	711d                	addi	sp,sp,-96
20402e86:	ce86                	sw	ra,92(sp)
20402e88:	cc96                	sw	t0,88(sp)
20402e8a:	ca9a                	sw	t1,84(sp)
20402e8c:	c89e                	sw	t2,80(sp)
20402e8e:	c6a2                	sw	s0,76(sp)
20402e90:	c4aa                	sw	a0,72(sp)
20402e92:	c2ae                	sw	a1,68(sp)
20402e94:	c0b2                	sw	a2,64(sp)
20402e96:	de36                	sw	a3,60(sp)
20402e98:	dc3a                	sw	a4,56(sp)
20402e9a:	da3e                	sw	a5,52(sp)
20402e9c:	d842                	sw	a6,48(sp)
20402e9e:	d646                	sw	a7,44(sp)
20402ea0:	d472                	sw	t3,40(sp)
20402ea2:	d276                	sw	t4,36(sp)
20402ea4:	d07a                	sw	t5,32(sp)
20402ea6:	ce7e                	sw	t6,28(sp)
20402ea8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402eaa:	ddeff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402eae:	872a                	mv	a4,a0
20402eb0:	070a                	slli	a4,a4,0x2
20402eb2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402eb6:	97ba                	add	a5,a5,a4
20402eb8:	439c                	lw	a5,0(a5)
20402eba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402ebe:	fac42783          	lw	a5,-84(s0)
20402ec2:	c78d                	beqz	a5,20402eec <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ec4:	fac42503          	lw	a0,-84(s0)
20402ec8:	d6aff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402ecc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402ed0:	fa842783          	lw	a5,-88(s0)
20402ed4:	2d87a783          	lw	a5,728(a5)
20402ed8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402edc:	fa842783          	lw	a5,-88(s0)
20402ee0:	2d07a783          	lw	a5,720(a5)
20402ee4:	fa442583          	lw	a1,-92(s0)
20402ee8:	4561                	li	a0,24
20402eea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402eec:	0001                	nop
20402eee:	40f6                	lw	ra,92(sp)
20402ef0:	42e6                	lw	t0,88(sp)
20402ef2:	4356                	lw	t1,84(sp)
20402ef4:	43c6                	lw	t2,80(sp)
20402ef6:	4436                	lw	s0,76(sp)
20402ef8:	4526                	lw	a0,72(sp)
20402efa:	4596                	lw	a1,68(sp)
20402efc:	4606                	lw	a2,64(sp)
20402efe:	56f2                	lw	a3,60(sp)
20402f00:	5762                	lw	a4,56(sp)
20402f02:	57d2                	lw	a5,52(sp)
20402f04:	5842                	lw	a6,48(sp)
20402f06:	58b2                	lw	a7,44(sp)
20402f08:	5e22                	lw	t3,40(sp)
20402f0a:	5e92                	lw	t4,36(sp)
20402f0c:	5f02                	lw	t5,32(sp)
20402f0e:	4ff2                	lw	t6,28(sp)
20402f10:	6125                	addi	sp,sp,96
20402f12:	30200073          	mret

20402f16 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402f16:	711d                	addi	sp,sp,-96
20402f18:	ce86                	sw	ra,92(sp)
20402f1a:	cc96                	sw	t0,88(sp)
20402f1c:	ca9a                	sw	t1,84(sp)
20402f1e:	c89e                	sw	t2,80(sp)
20402f20:	c6a2                	sw	s0,76(sp)
20402f22:	c4aa                	sw	a0,72(sp)
20402f24:	c2ae                	sw	a1,68(sp)
20402f26:	c0b2                	sw	a2,64(sp)
20402f28:	de36                	sw	a3,60(sp)
20402f2a:	dc3a                	sw	a4,56(sp)
20402f2c:	da3e                	sw	a5,52(sp)
20402f2e:	d842                	sw	a6,48(sp)
20402f30:	d646                	sw	a7,44(sp)
20402f32:	d472                	sw	t3,40(sp)
20402f34:	d276                	sw	t4,36(sp)
20402f36:	d07a                	sw	t5,32(sp)
20402f38:	ce7e                	sw	t6,28(sp)
20402f3a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f3c:	d4cff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402f40:	872a                	mv	a4,a0
20402f42:	070a                	slli	a4,a4,0x2
20402f44:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f48:	97ba                	add	a5,a5,a4
20402f4a:	439c                	lw	a5,0(a5)
20402f4c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402f50:	fac42783          	lw	a5,-84(s0)
20402f54:	c78d                	beqz	a5,20402f7e <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f56:	fac42503          	lw	a0,-84(s0)
20402f5a:	cd8ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402f5e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402f62:	fa842783          	lw	a5,-88(s0)
20402f66:	2f07a783          	lw	a5,752(a5)
20402f6a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402f6e:	fa842783          	lw	a5,-88(s0)
20402f72:	2e87a783          	lw	a5,744(a5)
20402f76:	fa442583          	lw	a1,-92(s0)
20402f7a:	4565                	li	a0,25
20402f7c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402f7e:	0001                	nop
20402f80:	40f6                	lw	ra,92(sp)
20402f82:	42e6                	lw	t0,88(sp)
20402f84:	4356                	lw	t1,84(sp)
20402f86:	43c6                	lw	t2,80(sp)
20402f88:	4436                	lw	s0,76(sp)
20402f8a:	4526                	lw	a0,72(sp)
20402f8c:	4596                	lw	a1,68(sp)
20402f8e:	4606                	lw	a2,64(sp)
20402f90:	56f2                	lw	a3,60(sp)
20402f92:	5762                	lw	a4,56(sp)
20402f94:	57d2                	lw	a5,52(sp)
20402f96:	5842                	lw	a6,48(sp)
20402f98:	58b2                	lw	a7,44(sp)
20402f9a:	5e22                	lw	t3,40(sp)
20402f9c:	5e92                	lw	t4,36(sp)
20402f9e:	5f02                	lw	t5,32(sp)
20402fa0:	4ff2                	lw	t6,28(sp)
20402fa2:	6125                	addi	sp,sp,96
20402fa4:	30200073          	mret

20402fa8 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402fa8:	711d                	addi	sp,sp,-96
20402faa:	ce86                	sw	ra,92(sp)
20402fac:	cc96                	sw	t0,88(sp)
20402fae:	ca9a                	sw	t1,84(sp)
20402fb0:	c89e                	sw	t2,80(sp)
20402fb2:	c6a2                	sw	s0,76(sp)
20402fb4:	c4aa                	sw	a0,72(sp)
20402fb6:	c2ae                	sw	a1,68(sp)
20402fb8:	c0b2                	sw	a2,64(sp)
20402fba:	de36                	sw	a3,60(sp)
20402fbc:	dc3a                	sw	a4,56(sp)
20402fbe:	da3e                	sw	a5,52(sp)
20402fc0:	d842                	sw	a6,48(sp)
20402fc2:	d646                	sw	a7,44(sp)
20402fc4:	d472                	sw	t3,40(sp)
20402fc6:	d276                	sw	t4,36(sp)
20402fc8:	d07a                	sw	t5,32(sp)
20402fca:	ce7e                	sw	t6,28(sp)
20402fcc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fce:	cbaff0ef          	jal	ra,20402488 <__metal_myhart_id>
20402fd2:	872a                	mv	a4,a0
20402fd4:	070a                	slli	a4,a4,0x2
20402fd6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402fda:	97ba                	add	a5,a5,a4
20402fdc:	439c                	lw	a5,0(a5)
20402fde:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402fe2:	fac42783          	lw	a5,-84(s0)
20402fe6:	c78d                	beqz	a5,20403010 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fe8:	fac42503          	lw	a0,-84(s0)
20402fec:	c46ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20402ff0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402ff4:	fa842783          	lw	a5,-88(s0)
20402ff8:	3087a783          	lw	a5,776(a5)
20402ffc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403000:	fa842783          	lw	a5,-88(s0)
20403004:	3007a783          	lw	a5,768(a5)
20403008:	fa442583          	lw	a1,-92(s0)
2040300c:	4569                	li	a0,26
2040300e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403010:	0001                	nop
20403012:	40f6                	lw	ra,92(sp)
20403014:	42e6                	lw	t0,88(sp)
20403016:	4356                	lw	t1,84(sp)
20403018:	43c6                	lw	t2,80(sp)
2040301a:	4436                	lw	s0,76(sp)
2040301c:	4526                	lw	a0,72(sp)
2040301e:	4596                	lw	a1,68(sp)
20403020:	4606                	lw	a2,64(sp)
20403022:	56f2                	lw	a3,60(sp)
20403024:	5762                	lw	a4,56(sp)
20403026:	57d2                	lw	a5,52(sp)
20403028:	5842                	lw	a6,48(sp)
2040302a:	58b2                	lw	a7,44(sp)
2040302c:	5e22                	lw	t3,40(sp)
2040302e:	5e92                	lw	t4,36(sp)
20403030:	5f02                	lw	t5,32(sp)
20403032:	4ff2                	lw	t6,28(sp)
20403034:	6125                	addi	sp,sp,96
20403036:	30200073          	mret

2040303a <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040303a:	711d                	addi	sp,sp,-96
2040303c:	ce86                	sw	ra,92(sp)
2040303e:	cc96                	sw	t0,88(sp)
20403040:	ca9a                	sw	t1,84(sp)
20403042:	c89e                	sw	t2,80(sp)
20403044:	c6a2                	sw	s0,76(sp)
20403046:	c4aa                	sw	a0,72(sp)
20403048:	c2ae                	sw	a1,68(sp)
2040304a:	c0b2                	sw	a2,64(sp)
2040304c:	de36                	sw	a3,60(sp)
2040304e:	dc3a                	sw	a4,56(sp)
20403050:	da3e                	sw	a5,52(sp)
20403052:	d842                	sw	a6,48(sp)
20403054:	d646                	sw	a7,44(sp)
20403056:	d472                	sw	t3,40(sp)
20403058:	d276                	sw	t4,36(sp)
2040305a:	d07a                	sw	t5,32(sp)
2040305c:	ce7e                	sw	t6,28(sp)
2040305e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403060:	c28ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20403064:	872a                	mv	a4,a0
20403066:	070a                	slli	a4,a4,0x2
20403068:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040306c:	97ba                	add	a5,a5,a4
2040306e:	439c                	lw	a5,0(a5)
20403070:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403074:	fac42783          	lw	a5,-84(s0)
20403078:	c78d                	beqz	a5,204030a2 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040307a:	fac42503          	lw	a0,-84(s0)
2040307e:	bb4ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403082:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403086:	fa842783          	lw	a5,-88(s0)
2040308a:	3207a783          	lw	a5,800(a5)
2040308e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403092:	fa842783          	lw	a5,-88(s0)
20403096:	3187a783          	lw	a5,792(a5)
2040309a:	fa442583          	lw	a1,-92(s0)
2040309e:	456d                	li	a0,27
204030a0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204030a2:	0001                	nop
204030a4:	40f6                	lw	ra,92(sp)
204030a6:	42e6                	lw	t0,88(sp)
204030a8:	4356                	lw	t1,84(sp)
204030aa:	43c6                	lw	t2,80(sp)
204030ac:	4436                	lw	s0,76(sp)
204030ae:	4526                	lw	a0,72(sp)
204030b0:	4596                	lw	a1,68(sp)
204030b2:	4606                	lw	a2,64(sp)
204030b4:	56f2                	lw	a3,60(sp)
204030b6:	5762                	lw	a4,56(sp)
204030b8:	57d2                	lw	a5,52(sp)
204030ba:	5842                	lw	a6,48(sp)
204030bc:	58b2                	lw	a7,44(sp)
204030be:	5e22                	lw	t3,40(sp)
204030c0:	5e92                	lw	t4,36(sp)
204030c2:	5f02                	lw	t5,32(sp)
204030c4:	4ff2                	lw	t6,28(sp)
204030c6:	6125                	addi	sp,sp,96
204030c8:	30200073          	mret

204030cc <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204030cc:	711d                	addi	sp,sp,-96
204030ce:	ce86                	sw	ra,92(sp)
204030d0:	cc96                	sw	t0,88(sp)
204030d2:	ca9a                	sw	t1,84(sp)
204030d4:	c89e                	sw	t2,80(sp)
204030d6:	c6a2                	sw	s0,76(sp)
204030d8:	c4aa                	sw	a0,72(sp)
204030da:	c2ae                	sw	a1,68(sp)
204030dc:	c0b2                	sw	a2,64(sp)
204030de:	de36                	sw	a3,60(sp)
204030e0:	dc3a                	sw	a4,56(sp)
204030e2:	da3e                	sw	a5,52(sp)
204030e4:	d842                	sw	a6,48(sp)
204030e6:	d646                	sw	a7,44(sp)
204030e8:	d472                	sw	t3,40(sp)
204030ea:	d276                	sw	t4,36(sp)
204030ec:	d07a                	sw	t5,32(sp)
204030ee:	ce7e                	sw	t6,28(sp)
204030f0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030f2:	b96ff0ef          	jal	ra,20402488 <__metal_myhart_id>
204030f6:	872a                	mv	a4,a0
204030f8:	070a                	slli	a4,a4,0x2
204030fa:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204030fe:	97ba                	add	a5,a5,a4
20403100:	439c                	lw	a5,0(a5)
20403102:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403106:	fac42783          	lw	a5,-84(s0)
2040310a:	c78d                	beqz	a5,20403134 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040310c:	fac42503          	lw	a0,-84(s0)
20403110:	b22ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403114:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403118:	fa842783          	lw	a5,-88(s0)
2040311c:	3387a783          	lw	a5,824(a5)
20403120:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403124:	fa842783          	lw	a5,-88(s0)
20403128:	3307a783          	lw	a5,816(a5)
2040312c:	fa442583          	lw	a1,-92(s0)
20403130:	4571                	li	a0,28
20403132:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403134:	0001                	nop
20403136:	40f6                	lw	ra,92(sp)
20403138:	42e6                	lw	t0,88(sp)
2040313a:	4356                	lw	t1,84(sp)
2040313c:	43c6                	lw	t2,80(sp)
2040313e:	4436                	lw	s0,76(sp)
20403140:	4526                	lw	a0,72(sp)
20403142:	4596                	lw	a1,68(sp)
20403144:	4606                	lw	a2,64(sp)
20403146:	56f2                	lw	a3,60(sp)
20403148:	5762                	lw	a4,56(sp)
2040314a:	57d2                	lw	a5,52(sp)
2040314c:	5842                	lw	a6,48(sp)
2040314e:	58b2                	lw	a7,44(sp)
20403150:	5e22                	lw	t3,40(sp)
20403152:	5e92                	lw	t4,36(sp)
20403154:	5f02                	lw	t5,32(sp)
20403156:	4ff2                	lw	t6,28(sp)
20403158:	6125                	addi	sp,sp,96
2040315a:	30200073          	mret

2040315e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
2040315e:	711d                	addi	sp,sp,-96
20403160:	ce86                	sw	ra,92(sp)
20403162:	cc96                	sw	t0,88(sp)
20403164:	ca9a                	sw	t1,84(sp)
20403166:	c89e                	sw	t2,80(sp)
20403168:	c6a2                	sw	s0,76(sp)
2040316a:	c4aa                	sw	a0,72(sp)
2040316c:	c2ae                	sw	a1,68(sp)
2040316e:	c0b2                	sw	a2,64(sp)
20403170:	de36                	sw	a3,60(sp)
20403172:	dc3a                	sw	a4,56(sp)
20403174:	da3e                	sw	a5,52(sp)
20403176:	d842                	sw	a6,48(sp)
20403178:	d646                	sw	a7,44(sp)
2040317a:	d472                	sw	t3,40(sp)
2040317c:	d276                	sw	t4,36(sp)
2040317e:	d07a                	sw	t5,32(sp)
20403180:	ce7e                	sw	t6,28(sp)
20403182:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403184:	b04ff0ef          	jal	ra,20402488 <__metal_myhart_id>
20403188:	872a                	mv	a4,a0
2040318a:	070a                	slli	a4,a4,0x2
2040318c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403190:	97ba                	add	a5,a5,a4
20403192:	439c                	lw	a5,0(a5)
20403194:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403198:	fac42783          	lw	a5,-84(s0)
2040319c:	c78d                	beqz	a5,204031c6 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040319e:	fac42503          	lw	a0,-84(s0)
204031a2:	a90ff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
204031a6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204031aa:	fa842783          	lw	a5,-88(s0)
204031ae:	3507a783          	lw	a5,848(a5)
204031b2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204031b6:	fa842783          	lw	a5,-88(s0)
204031ba:	3487a783          	lw	a5,840(a5)
204031be:	fa442583          	lw	a1,-92(s0)
204031c2:	4575                	li	a0,29
204031c4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204031c6:	0001                	nop
204031c8:	40f6                	lw	ra,92(sp)
204031ca:	42e6                	lw	t0,88(sp)
204031cc:	4356                	lw	t1,84(sp)
204031ce:	43c6                	lw	t2,80(sp)
204031d0:	4436                	lw	s0,76(sp)
204031d2:	4526                	lw	a0,72(sp)
204031d4:	4596                	lw	a1,68(sp)
204031d6:	4606                	lw	a2,64(sp)
204031d8:	56f2                	lw	a3,60(sp)
204031da:	5762                	lw	a4,56(sp)
204031dc:	57d2                	lw	a5,52(sp)
204031de:	5842                	lw	a6,48(sp)
204031e0:	58b2                	lw	a7,44(sp)
204031e2:	5e22                	lw	t3,40(sp)
204031e4:	5e92                	lw	t4,36(sp)
204031e6:	5f02                	lw	t5,32(sp)
204031e8:	4ff2                	lw	t6,28(sp)
204031ea:	6125                	addi	sp,sp,96
204031ec:	30200073          	mret

204031f0 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204031f0:	711d                	addi	sp,sp,-96
204031f2:	ce86                	sw	ra,92(sp)
204031f4:	cc96                	sw	t0,88(sp)
204031f6:	ca9a                	sw	t1,84(sp)
204031f8:	c89e                	sw	t2,80(sp)
204031fa:	c6a2                	sw	s0,76(sp)
204031fc:	c4aa                	sw	a0,72(sp)
204031fe:	c2ae                	sw	a1,68(sp)
20403200:	c0b2                	sw	a2,64(sp)
20403202:	de36                	sw	a3,60(sp)
20403204:	dc3a                	sw	a4,56(sp)
20403206:	da3e                	sw	a5,52(sp)
20403208:	d842                	sw	a6,48(sp)
2040320a:	d646                	sw	a7,44(sp)
2040320c:	d472                	sw	t3,40(sp)
2040320e:	d276                	sw	t4,36(sp)
20403210:	d07a                	sw	t5,32(sp)
20403212:	ce7e                	sw	t6,28(sp)
20403214:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403216:	a72ff0ef          	jal	ra,20402488 <__metal_myhart_id>
2040321a:	872a                	mv	a4,a0
2040321c:	070a                	slli	a4,a4,0x2
2040321e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403222:	97ba                	add	a5,a5,a4
20403224:	439c                	lw	a5,0(a5)
20403226:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040322a:	fac42783          	lw	a5,-84(s0)
2040322e:	c78d                	beqz	a5,20403258 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403230:	fac42503          	lw	a0,-84(s0)
20403234:	9feff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403238:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040323c:	fa842783          	lw	a5,-88(s0)
20403240:	3687a783          	lw	a5,872(a5)
20403244:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403248:	fa842783          	lw	a5,-88(s0)
2040324c:	3607a783          	lw	a5,864(a5)
20403250:	fa442583          	lw	a1,-92(s0)
20403254:	4579                	li	a0,30
20403256:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403258:	0001                	nop
2040325a:	40f6                	lw	ra,92(sp)
2040325c:	42e6                	lw	t0,88(sp)
2040325e:	4356                	lw	t1,84(sp)
20403260:	43c6                	lw	t2,80(sp)
20403262:	4436                	lw	s0,76(sp)
20403264:	4526                	lw	a0,72(sp)
20403266:	4596                	lw	a1,68(sp)
20403268:	4606                	lw	a2,64(sp)
2040326a:	56f2                	lw	a3,60(sp)
2040326c:	5762                	lw	a4,56(sp)
2040326e:	57d2                	lw	a5,52(sp)
20403270:	5842                	lw	a6,48(sp)
20403272:	58b2                	lw	a7,44(sp)
20403274:	5e22                	lw	t3,40(sp)
20403276:	5e92                	lw	t4,36(sp)
20403278:	5f02                	lw	t5,32(sp)
2040327a:	4ff2                	lw	t6,28(sp)
2040327c:	6125                	addi	sp,sp,96
2040327e:	30200073          	mret

20403282 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403282:	711d                	addi	sp,sp,-96
20403284:	ce86                	sw	ra,92(sp)
20403286:	cc96                	sw	t0,88(sp)
20403288:	ca9a                	sw	t1,84(sp)
2040328a:	c89e                	sw	t2,80(sp)
2040328c:	c6a2                	sw	s0,76(sp)
2040328e:	c4aa                	sw	a0,72(sp)
20403290:	c2ae                	sw	a1,68(sp)
20403292:	c0b2                	sw	a2,64(sp)
20403294:	de36                	sw	a3,60(sp)
20403296:	dc3a                	sw	a4,56(sp)
20403298:	da3e                	sw	a5,52(sp)
2040329a:	d842                	sw	a6,48(sp)
2040329c:	d646                	sw	a7,44(sp)
2040329e:	d472                	sw	t3,40(sp)
204032a0:	d276                	sw	t4,36(sp)
204032a2:	d07a                	sw	t5,32(sp)
204032a4:	ce7e                	sw	t6,28(sp)
204032a6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032a8:	9e0ff0ef          	jal	ra,20402488 <__metal_myhart_id>
204032ac:	872a                	mv	a4,a0
204032ae:	070a                	slli	a4,a4,0x2
204032b0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204032b4:	97ba                	add	a5,a5,a4
204032b6:	439c                	lw	a5,0(a5)
204032b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204032bc:	fac42783          	lw	a5,-84(s0)
204032c0:	c78d                	beqz	a5,204032ea <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032c2:	fac42503          	lw	a0,-84(s0)
204032c6:	96cff0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
204032ca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204032ce:	fa842783          	lw	a5,-88(s0)
204032d2:	3807a783          	lw	a5,896(a5)
204032d6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204032da:	fa842783          	lw	a5,-88(s0)
204032de:	3787a783          	lw	a5,888(a5)
204032e2:	fa442583          	lw	a1,-92(s0)
204032e6:	457d                	li	a0,31
204032e8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204032ea:	0001                	nop
204032ec:	40f6                	lw	ra,92(sp)
204032ee:	42e6                	lw	t0,88(sp)
204032f0:	4356                	lw	t1,84(sp)
204032f2:	43c6                	lw	t2,80(sp)
204032f4:	4436                	lw	s0,76(sp)
204032f6:	4526                	lw	a0,72(sp)
204032f8:	4596                	lw	a1,68(sp)
204032fa:	4606                	lw	a2,64(sp)
204032fc:	56f2                	lw	a3,60(sp)
204032fe:	5762                	lw	a4,56(sp)
20403300:	57d2                	lw	a5,52(sp)
20403302:	5842                	lw	a6,48(sp)
20403304:	58b2                	lw	a7,44(sp)
20403306:	5e22                	lw	t3,40(sp)
20403308:	5e92                	lw	t4,36(sp)
2040330a:	5f02                	lw	t5,32(sp)
2040330c:	4ff2                	lw	t6,28(sp)
2040330e:	6125                	addi	sp,sp,96
20403310:	30200073          	mret

20403314 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403314:	1101                	addi	sp,sp,-32
20403316:	ce22                	sw	s0,28(sp)
20403318:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040331a:	305027f3          	csrr	a5,mtvec
2040331e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403322:	fec42783          	lw	a5,-20(s0)
20403326:	03f7f793          	andi	a5,a5,63
2040332a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040332e:	fec42703          	lw	a4,-20(s0)
20403332:	4789                	li	a5,2
20403334:	00f70d63          	beq	a4,a5,2040334e <__metal_controller_interrupt_vector_mode+0x3a>
20403338:	fec42703          	lw	a4,-20(s0)
2040333c:	478d                	li	a5,3
2040333e:	00f70a63          	beq	a4,a5,20403352 <__metal_controller_interrupt_vector_mode+0x3e>
20403342:	fec42703          	lw	a4,-20(s0)
20403346:	4785                	li	a5,1
20403348:	00f70763          	beq	a4,a5,20403356 <__metal_controller_interrupt_vector_mode+0x42>
2040334c:	a039                	j	2040335a <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040334e:	478d                	li	a5,3
20403350:	a031                	j	2040335c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403352:	4791                	li	a5,4
20403354:	a021                	j	2040335c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403356:	4785                	li	a5,1
20403358:	a011                	j	2040335c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040335a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040335c:	853e                	mv	a0,a5
2040335e:	4472                	lw	s0,28(sp)
20403360:	6105                	addi	sp,sp,32
20403362:	8082                	ret

20403364 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403364:	7179                	addi	sp,sp,-48
20403366:	d622                	sw	s0,44(sp)
20403368:	1800                	addi	s0,sp,48
2040336a:	fca42e23          	sw	a0,-36(s0)
2040336e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403372:	305027f3          	csrr	a5,mtvec
20403376:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040337a:	fec42783          	lw	a5,-20(s0)
2040337e:	fc07f793          	andi	a5,a5,-64
20403382:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403386:	fd842783          	lw	a5,-40(s0)
2040338a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040338e:	fdc42703          	lw	a4,-36(s0)
20403392:	4791                	li	a5,4
20403394:	06e7e063          	bltu	a5,a4,204033f4 <__metal_controller_interrupt_vector+0x90>
20403398:	fdc42783          	lw	a5,-36(s0)
2040339c:	00279713          	slli	a4,a5,0x2
204033a0:	204057b7          	lui	a5,0x20405
204033a4:	45078793          	addi	a5,a5,1104 # 20405450 <__metal_driver_vtable_riscv_clint0+0x4c>
204033a8:	97ba                	add	a5,a5,a4
204033aa:	439c                	lw	a5,0(a5)
204033ac:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204033ae:	fe842783          	lw	a5,-24(s0)
204033b2:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204033b6:	fec42783          	lw	a5,-20(s0)
204033ba:	0027e793          	ori	a5,a5,2
204033be:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204033c2:	a80d                	j	204033f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204033c4:	fe842783          	lw	a5,-24(s0)
204033c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204033cc:	fec42783          	lw	a5,-20(s0)
204033d0:	0037e793          	ori	a5,a5,3
204033d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204033d8:	a831                	j	204033f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204033da:	fe842783          	lw	a5,-24(s0)
204033de:	0017e793          	ori	a5,a5,1
204033e2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204033e6:	a039                	j	204033f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204033e8:	fe842783          	lw	a5,-24(s0)
204033ec:	9bf1                	andi	a5,a5,-4
204033ee:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204033f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204033f4:	0001                	nop
204033f6:	5432                	lw	s0,44(sp)
204033f8:	6145                	addi	sp,sp,48
204033fa:	8082                	ret

204033fc <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204033fc:	1101                	addi	sp,sp,-32
204033fe:	ce22                	sw	s0,28(sp)
20403400:	1000                	addi	s0,sp,32
20403402:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403406:	fec42783          	lw	a5,-20(s0)
2040340a:	17f5                	addi	a5,a5,-3
2040340c:	4771                	li	a4,28
2040340e:	00f76d63          	bltu	a4,a5,20403428 <__metal_valid_interrupt_id+0x2c>
20403412:	00279713          	slli	a4,a5,0x2
20403416:	204057b7          	lui	a5,0x20405
2040341a:	46478793          	addi	a5,a5,1124 # 20405464 <__metal_driver_vtable_riscv_clint0+0x60>
2040341e:	97ba                	add	a5,a5,a4
20403420:	439c                	lw	a5,0(a5)
20403422:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403424:	4785                	li	a5,1
20403426:	a019                	j	2040342c <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403428:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040342a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040342c:	853e                	mv	a0,a5
2040342e:	4472                	lw	s0,28(sp)
20403430:	6105                	addi	sp,sp,32
20403432:	8082                	ret

20403434 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403434:	7179                	addi	sp,sp,-48
20403436:	d606                	sw	ra,44(sp)
20403438:	d422                	sw	s0,40(sp)
2040343a:	1800                	addi	s0,sp,48
2040343c:	fca42e23          	sw	a0,-36(s0)
20403440:	fcb42c23          	sw	a1,-40(s0)
20403444:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403448:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040344c:	fdc42783          	lw	a5,-36(s0)
20403450:	e399                	bnez	a5,20403456 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403452:	57fd                	li	a5,-1
20403454:	a849                	j	204034e6 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403456:	fd842703          	lw	a4,-40(s0)
2040345a:	47fd                	li	a5,31
2040345c:	08e7e063          	bltu	a5,a4,204034dc <__metal_local_interrupt_enable+0xa8>
20403460:	fd842783          	lw	a5,-40(s0)
20403464:	00279713          	slli	a4,a5,0x2
20403468:	204057b7          	lui	a5,0x20405
2040346c:	4d878793          	addi	a5,a5,1240 # 204054d8 <__metal_driver_vtable_riscv_clint0+0xd4>
20403470:	97ba                	add	a5,a5,a4
20403472:	439c                	lw	a5,0(a5)
20403474:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403476:	fd442783          	lw	a5,-44(s0)
2040347a:	c781                	beqz	a5,20403482 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040347c:	826ff0ef          	jal	ra,204024a2 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403480:	a08d                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403482:	838ff0ef          	jal	ra,204024ba <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403486:	a8b1                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403488:	fd442783          	lw	a5,-44(s0)
2040348c:	c781                	beqz	a5,20403494 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040348e:	844ff0ef          	jal	ra,204024d2 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403492:	a881                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403494:	856ff0ef          	jal	ra,204024ea <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403498:	a0a9                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040349a:	fd442783          	lw	a5,-44(s0)
2040349e:	c781                	beqz	a5,204034a6 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204034a0:	862ff0ef          	jal	ra,20402502 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204034a4:	a83d                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204034a6:	876ff0ef          	jal	ra,2040251c <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204034aa:	a825                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204034ac:	fd442783          	lw	a5,-44(s0)
204034b0:	c781                	beqz	a5,204034b8 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204034b2:	884ff0ef          	jal	ra,20402536 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204034b6:	a035                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204034b8:	89aff0ef          	jal	ra,20402552 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204034bc:	a01d                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204034be:	fd442783          	lw	a5,-44(s0)
204034c2:	c799                	beqz	a5,204034d0 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204034c4:	fd842783          	lw	a5,-40(s0)
204034c8:	853e                	mv	a0,a5
204034ca:	8a4ff0ef          	jal	ra,2040256e <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204034ce:	a811                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204034d0:	fd842783          	lw	a5,-40(s0)
204034d4:	853e                	mv	a0,a5
204034d6:	8c4ff0ef          	jal	ra,2040259a <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204034da:	a021                	j	204034e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204034dc:	57fd                	li	a5,-1
204034de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204034e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204034e6:	853e                	mv	a0,a5
204034e8:	50b2                	lw	ra,44(sp)
204034ea:	5422                	lw	s0,40(sp)
204034ec:	6145                	addi	sp,sp,48
204034ee:	8082                	ret

204034f0 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204034f0:	7179                	addi	sp,sp,-48
204034f2:	d622                	sw	s0,44(sp)
204034f4:	1800                	addi	s0,sp,48
204034f6:	fca42e23          	sw	a0,-36(s0)
204034fa:	fcb42c23          	sw	a1,-40(s0)
204034fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403502:	fdc42783          	lw	a5,-36(s0)
20403506:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040350a:	fd842703          	lw	a4,-40(s0)
2040350e:	47ad                	li	a5,11
20403510:	02e7c263          	blt	a5,a4,20403534 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403514:	fd442783          	lw	a5,-44(s0)
20403518:	cf91                	beqz	a5,20403534 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040351a:	fec42703          	lw	a4,-20(s0)
2040351e:	fd842783          	lw	a5,-40(s0)
20403522:	0e078793          	addi	a5,a5,224
20403526:	078a                	slli	a5,a5,0x2
20403528:	97ba                	add	a5,a5,a4
2040352a:	fd442703          	lw	a4,-44(s0)
2040352e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403530:	4781                	li	a5,0
20403532:	a011                	j	20403536 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403534:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403536:	853e                	mv	a0,a5
20403538:	5432                	lw	s0,44(sp)
2040353a:	6145                	addi	sp,sp,48
2040353c:	8082                	ret

2040353e <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040353e:	7139                	addi	sp,sp,-64
20403540:	de06                	sw	ra,60(sp)
20403542:	dc22                	sw	s0,56(sp)
20403544:	0080                	addi	s0,sp,64
20403546:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040354a:	fcc42783          	lw	a5,-52(s0)
2040354e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403552:	fe442783          	lw	a5,-28(s0)
20403556:	43dc                	lw	a5,4(a5)
20403558:	10079d63          	bnez	a5,20403672 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040355c:	57fd                	li	a5,-1
2040355e:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403562:	57fd                	li	a5,-1
20403564:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403568:	301027f3          	csrr	a5,misa
2040356c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403570:	fe042703          	lw	a4,-32(s0)
20403574:	6789                	lui	a5,0x2
20403576:	8ff9                	and	a5,a5,a4
20403578:	e799                	bnez	a5,20403586 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040357a:	fe042703          	lw	a4,-32(s0)
2040357e:	000407b7          	lui	a5,0x40
20403582:	8ff9                	and	a5,a5,a4
20403584:	c799                	beqz	a5,20403592 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403586:	57fd                	li	a5,-1
20403588:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040358c:	57fd                	li	a5,-1
2040358e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403592:	fe042703          	lw	a4,-32(s0)
20403596:	000407b7          	lui	a5,0x40
2040359a:	8ff9                	and	a5,a5,a4
2040359c:	c781                	beqz	a5,204035a4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040359e:	57fd                	li	a5,-1
204035a0:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204035a4:	fe042623          	sw	zero,-20(s0)
204035a8:	a0b9                	j	204035f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204035aa:	fe442683          	lw	a3,-28(s0)
204035ae:	fec42703          	lw	a4,-20(s0)
204035b2:	87ba                	mv	a5,a4
204035b4:	0786                	slli	a5,a5,0x1
204035b6:	97ba                	add	a5,a5,a4
204035b8:	078e                	slli	a5,a5,0x3
204035ba:	97b6                	add	a5,a5,a3
204035bc:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204035c0:	fe442683          	lw	a3,-28(s0)
204035c4:	fec42703          	lw	a4,-20(s0)
204035c8:	87ba                	mv	a5,a4
204035ca:	0786                	slli	a5,a5,0x1
204035cc:	97ba                	add	a5,a5,a4
204035ce:	078e                	slli	a5,a5,0x3
204035d0:	97b6                	add	a5,a5,a3
204035d2:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204035d6:	fe442683          	lw	a3,-28(s0)
204035da:	fec42703          	lw	a4,-20(s0)
204035de:	87ba                	mv	a5,a4
204035e0:	0786                	slli	a5,a5,0x1
204035e2:	97ba                	add	a5,a5,a4
204035e4:	078e                	slli	a5,a5,0x3
204035e6:	97b6                	add	a5,a5,a3
204035e8:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204035ec:	fec42783          	lw	a5,-20(s0)
204035f0:	0785                	addi	a5,a5,1
204035f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204035f6:	fec42703          	lw	a4,-20(s0)
204035fa:	47fd                	li	a5,31
204035fc:	fae7d7e3          	bge	a5,a4,204035aa <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403600:	fe042423          	sw	zero,-24(s0)
20403604:	a01d                	j	2040362a <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403606:	fe442703          	lw	a4,-28(s0)
2040360a:	fe842783          	lw	a5,-24(s0)
2040360e:	0e078793          	addi	a5,a5,224
20403612:	078a                	slli	a5,a5,0x2
20403614:	97ba                	add	a5,a5,a4
20403616:	20402737          	lui	a4,0x20402
2040361a:	5c670713          	addi	a4,a4,1478 # 204025c6 <__metal_default_exception_handler>
2040361e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403620:	fe842783          	lw	a5,-24(s0)
20403624:	0785                	addi	a5,a5,1
20403626:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040362a:	fe842703          	lw	a4,-24(s0)
2040362e:	47ad                	li	a5,11
20403630:	fce7dbe3          	bge	a5,a4,20403606 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403634:	204037b7          	lui	a5,0x20403
20403638:	88078593          	addi	a1,a5,-1920 # 20402880 <__metal_exception_handler>
2040363c:	4501                	li	a0,0
2040363e:	331d                	jal	20403364 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403640:	301027f3          	csrr	a5,misa
20403644:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403648:	fdc42703          	lw	a4,-36(s0)
2040364c:	67c1                	lui	a5,0x10
2040364e:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403652:	8ff9                	and	a5,a5,a4
20403654:	cb99                	beqz	a5,2040366a <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403656:	300027f3          	csrr	a5,mstatus
2040365a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040365e:	fdc42703          	lw	a4,-36(s0)
20403662:	6789                	lui	a5,0x2
20403664:	8fd9                	or	a5,a5,a4
20403666:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040366a:	fe442783          	lw	a5,-28(s0)
2040366e:	4705                	li	a4,1
20403670:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403672:	0001                	nop
20403674:	50f2                	lw	ra,60(sp)
20403676:	5462                	lw	s0,56(sp)
20403678:	6121                	addi	sp,sp,64
2040367a:	8082                	ret

2040367c <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040367c:	7179                	addi	sp,sp,-48
2040367e:	d606                	sw	ra,44(sp)
20403680:	d422                	sw	s0,40(sp)
20403682:	1800                	addi	s0,sp,48
20403684:	fca42e23          	sw	a0,-36(s0)
20403688:	fcb42c23          	sw	a1,-40(s0)
2040368c:	fcc42a23          	sw	a2,-44(s0)
20403690:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403694:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403698:	fdc42783          	lw	a5,-36(s0)
2040369c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204036a0:	fd842503          	lw	a0,-40(s0)
204036a4:	3ba1                	jal	204033fc <__metal_valid_interrupt_id>
204036a6:	87aa                	mv	a5,a0
204036a8:	e399                	bnez	a5,204036ae <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204036aa:	57d5                	li	a5,-11
204036ac:	aa11                	j	204037c0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204036ae:	fd442783          	lw	a5,-44(s0)
204036b2:	cf85                	beqz	a5,204036ea <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204036b4:	fe842683          	lw	a3,-24(s0)
204036b8:	fd842703          	lw	a4,-40(s0)
204036bc:	87ba                	mv	a5,a4
204036be:	0786                	slli	a5,a5,0x1
204036c0:	97ba                	add	a5,a5,a4
204036c2:	078e                	slli	a5,a5,0x3
204036c4:	97b6                	add	a5,a5,a3
204036c6:	fd442703          	lw	a4,-44(s0)
204036ca:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204036ce:	fe842683          	lw	a3,-24(s0)
204036d2:	fd842703          	lw	a4,-40(s0)
204036d6:	87ba                	mv	a5,a4
204036d8:	0786                	slli	a5,a5,0x1
204036da:	97ba                	add	a5,a5,a4
204036dc:	078e                	slli	a5,a5,0x3
204036de:	97b6                	add	a5,a5,a3
204036e0:	fd042703          	lw	a4,-48(s0)
204036e4:	08e7ac23          	sw	a4,152(a5)
204036e8:	a8d1                	j	204037bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204036ea:	fd842783          	lw	a5,-40(s0)
204036ee:	17f5                	addi	a5,a5,-3
204036f0:	4771                	li	a4,28
204036f2:	0cf76263          	bltu	a4,a5,204037b6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204036f6:	00279713          	slli	a4,a5,0x2
204036fa:	204057b7          	lui	a5,0x20405
204036fe:	55878793          	addi	a5,a5,1368 # 20405558 <__metal_driver_vtable_riscv_clint0+0x154>
20403702:	97ba                	add	a5,a5,a4
20403704:	439c                	lw	a5,0(a5)
20403706:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403708:	fe842683          	lw	a3,-24(s0)
2040370c:	fd842703          	lw	a4,-40(s0)
20403710:	87ba                	mv	a5,a4
20403712:	0786                	slli	a5,a5,0x1
20403714:	97ba                	add	a5,a5,a4
20403716:	078e                	slli	a5,a5,0x3
20403718:	97b6                	add	a5,a5,a3
2040371a:	20402737          	lui	a4,0x20402
2040371e:	6b270713          	addi	a4,a4,1714 # 204026b2 <__metal_default_sw_handler>
20403722:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403726:	fe842683          	lw	a3,-24(s0)
2040372a:	fd842703          	lw	a4,-40(s0)
2040372e:	87ba                	mv	a5,a4
20403730:	0786                	slli	a5,a5,0x1
20403732:	97ba                	add	a5,a5,a4
20403734:	078e                	slli	a5,a5,0x3
20403736:	97b6                	add	a5,a5,a3
20403738:	fd042703          	lw	a4,-48(s0)
2040373c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403740:	a8b5                	j	204037bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403742:	fe842683          	lw	a3,-24(s0)
20403746:	fd842703          	lw	a4,-40(s0)
2040374a:	87ba                	mv	a5,a4
2040374c:	0786                	slli	a5,a5,0x1
2040374e:	97ba                	add	a5,a5,a4
20403750:	078e                	slli	a5,a5,0x3
20403752:	97b6                	add	a5,a5,a3
20403754:	20402737          	lui	a4,0x20402
20403758:	7a470713          	addi	a4,a4,1956 # 204027a4 <__metal_default_timer_handler>
2040375c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403760:	fe842683          	lw	a3,-24(s0)
20403764:	fd842703          	lw	a4,-40(s0)
20403768:	87ba                	mv	a5,a4
2040376a:	0786                	slli	a5,a5,0x1
2040376c:	97ba                	add	a5,a5,a4
2040376e:	078e                	slli	a5,a5,0x3
20403770:	97b6                	add	a5,a5,a3
20403772:	fd042703          	lw	a4,-48(s0)
20403776:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
2040377a:	a089                	j	204037bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040377c:	fe842683          	lw	a3,-24(s0)
20403780:	fd842703          	lw	a4,-40(s0)
20403784:	87ba                	mv	a5,a4
20403786:	0786                	slli	a5,a5,0x1
20403788:	97ba                	add	a5,a5,a4
2040378a:	078e                	slli	a5,a5,0x3
2040378c:	97b6                	add	a5,a5,a3
2040378e:	20402737          	lui	a4,0x20402
20403792:	5de70713          	addi	a4,a4,1502 # 204025de <__metal_default_interrupt_handler>
20403796:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040379a:	fe842683          	lw	a3,-24(s0)
2040379e:	fd842703          	lw	a4,-40(s0)
204037a2:	87ba                	mv	a5,a4
204037a4:	0786                	slli	a5,a5,0x1
204037a6:	97ba                	add	a5,a5,a4
204037a8:	078e                	slli	a5,a5,0x3
204037aa:	97b6                	add	a5,a5,a3
204037ac:	fd042703          	lw	a4,-48(s0)
204037b0:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204037b4:	a021                	j	204037bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204037b6:	57d1                	li	a5,-12
204037b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204037bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204037c0:	853e                	mv	a0,a5
204037c2:	50b2                	lw	ra,44(sp)
204037c4:	5422                	lw	s0,40(sp)
204037c6:	6145                	addi	sp,sp,48
204037c8:	8082                	ret

204037ca <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204037ca:	1101                	addi	sp,sp,-32
204037cc:	ce06                	sw	ra,28(sp)
204037ce:	cc22                	sw	s0,24(sp)
204037d0:	1000                	addi	s0,sp,32
204037d2:	fea42623          	sw	a0,-20(s0)
204037d6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204037da:	fe842783          	lw	a5,-24(s0)
204037de:	4605                	li	a2,1
204037e0:	85be                	mv	a1,a5
204037e2:	fec42503          	lw	a0,-20(s0)
204037e6:	c4fff0ef          	jal	ra,20403434 <__metal_local_interrupt_enable>
204037ea:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204037ec:	853e                	mv	a0,a5
204037ee:	40f2                	lw	ra,28(sp)
204037f0:	4462                	lw	s0,24(sp)
204037f2:	6105                	addi	sp,sp,32
204037f4:	8082                	ret

204037f6 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204037f6:	1101                	addi	sp,sp,-32
204037f8:	ce06                	sw	ra,28(sp)
204037fa:	cc22                	sw	s0,24(sp)
204037fc:	1000                	addi	s0,sp,32
204037fe:	fea42623          	sw	a0,-20(s0)
20403802:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403806:	fe842783          	lw	a5,-24(s0)
2040380a:	4601                	li	a2,0
2040380c:	85be                	mv	a1,a5
2040380e:	fec42503          	lw	a0,-20(s0)
20403812:	c23ff0ef          	jal	ra,20403434 <__metal_local_interrupt_enable>
20403816:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403818:	853e                	mv	a0,a5
2040381a:	40f2                	lw	ra,28(sp)
2040381c:	4462                	lw	s0,24(sp)
2040381e:	6105                	addi	sp,sp,32
20403820:	8082                	ret

20403822 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403822:	1101                	addi	sp,sp,-32
20403824:	ce06                	sw	ra,28(sp)
20403826:	cc22                	sw	s0,24(sp)
20403828:	1000                	addi	s0,sp,32
2040382a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
2040382e:	ae7ff0ef          	jal	ra,20403314 <__metal_controller_interrupt_vector_mode>
20403832:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403834:	853e                	mv	a0,a5
20403836:	40f2                	lw	ra,28(sp)
20403838:	4462                	lw	s0,24(sp)
2040383a:	6105                	addi	sp,sp,32
2040383c:	8082                	ret

2040383e <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
2040383e:	7179                	addi	sp,sp,-48
20403840:	d606                	sw	ra,44(sp)
20403842:	d422                	sw	s0,40(sp)
20403844:	1800                	addi	s0,sp,48
20403846:	fca42e23          	sw	a0,-36(s0)
2040384a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040384e:	fdc42783          	lw	a5,-36(s0)
20403852:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403856:	fd842783          	lw	a5,-40(s0)
2040385a:	eb99                	bnez	a5,20403870 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
2040385c:	204037b7          	lui	a5,0x20403
20403860:	88078593          	addi	a1,a5,-1920 # 20402880 <__metal_exception_handler>
20403864:	fd842503          	lw	a0,-40(s0)
20403868:	afdff0ef          	jal	ra,20403364 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
2040386c:	4781                	li	a5,0
2040386e:	a00d                	j	20403890 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403870:	fd842703          	lw	a4,-40(s0)
20403874:	4785                	li	a5,1
20403876:	00f71c63          	bne	a4,a5,2040388e <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
2040387a:	204057b7          	lui	a5,0x20405
2040387e:	18078593          	addi	a1,a5,384 # 20405180 <__metal_vector_table>
20403882:	fd842503          	lw	a0,-40(s0)
20403886:	adfff0ef          	jal	ra,20403364 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2040388a:	4781                	li	a5,0
2040388c:	a011                	j	20403890 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040388e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403890:	853e                	mv	a0,a5
20403892:	50b2                	lw	ra,44(sp)
20403894:	5422                	lw	s0,40(sp)
20403896:	6145                	addi	sp,sp,48
20403898:	8082                	ret

2040389a <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2040389a:	1101                	addi	sp,sp,-32
2040389c:	ce22                	sw	s0,28(sp)
2040389e:	1000                	addi	s0,sp,32
204038a0:	fea42623          	sw	a0,-20(s0)
204038a4:	feb42423          	sw	a1,-24(s0)
204038a8:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204038ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204038ae:	853e                	mv	a0,a5
204038b0:	4472                	lw	s0,28(sp)
204038b2:	6105                	addi	sp,sp,32
204038b4:	8082                	ret

204038b6 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204038b6:	7139                	addi	sp,sp,-64
204038b8:	de22                	sw	s0,60(sp)
204038ba:	0080                	addi	s0,sp,64
204038bc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204038c0:	4301                	li	t1,0
204038c2:	4381                	li	t2,0
204038c4:	fe642423          	sw	t1,-24(s0)
204038c8:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204038cc:	b8002573          	csrr	a0,mcycleh
204038d0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204038d4:	b0002573          	csrr	a0,mcycle
204038d8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204038dc:	b8002573          	csrr	a0,mcycleh
204038e0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204038e4:	fe442883          	lw	a7,-28(s0)
204038e8:	fdc42503          	lw	a0,-36(s0)
204038ec:	02a89563          	bne	a7,a0,20403916 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204038f0:	fe442503          	lw	a0,-28(s0)
204038f4:	85aa                	mv	a1,a0
204038f6:	4601                	li	a2,0
204038f8:	00059813          	slli	a6,a1,0x0
204038fc:	4781                	li	a5,0
204038fe:	fe042603          	lw	a2,-32(s0)
20403902:	86b2                	mv	a3,a2
20403904:	4701                	li	a4,0
20403906:	00d7e633          	or	a2,a5,a3
2040390a:	fec42423          	sw	a2,-24(s0)
2040390e:	00e867b3          	or	a5,a6,a4
20403912:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403916:	fe842783          	lw	a5,-24(s0)
2040391a:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
2040391e:	853e                	mv	a0,a5
20403920:	85c2                	mv	a1,a6
20403922:	5472                	lw	s0,60(sp)
20403924:	6121                	addi	sp,sp,64
20403926:	8082                	ret

20403928 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403928:	7179                	addi	sp,sp,-48
2040392a:	d606                	sw	ra,44(sp)
2040392c:	d422                	sw	s0,40(sp)
2040392e:	d24a                	sw	s2,36(sp)
20403930:	d04e                	sw	s3,32(sp)
20403932:	1800                	addi	s0,sp,48
20403934:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403938:	fdc42783          	lw	a5,-36(s0)
2040393c:	e781                	bnez	a5,20403944 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
2040393e:	4901                	li	s2,0
20403940:	4981                	li	s3,0
20403942:	a821                	j	2040395a <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403944:	fdc42503          	lw	a0,-36(s0)
20403948:	ac1fe0ef          	jal	ra,20402408 <__metal_driver_cpu_timebase>
2040394c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403950:	fec42783          	lw	a5,-20(s0)
20403954:	893e                	mv	s2,a5
20403956:	87fd                	srai	a5,a5,0x1f
20403958:	89be                	mv	s3,a5
2040395a:	87ca                	mv	a5,s2
2040395c:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
2040395e:	853e                	mv	a0,a5
20403960:	85c2                	mv	a1,a6
20403962:	50b2                	lw	ra,44(sp)
20403964:	5422                	lw	s0,40(sp)
20403966:	5912                	lw	s2,36(sp)
20403968:	5982                	lw	s3,32(sp)
2040396a:	6145                	addi	sp,sp,48
2040396c:	8082                	ret

2040396e <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
2040396e:	7179                	addi	sp,sp,-48
20403970:	d606                	sw	ra,44(sp)
20403972:	d422                	sw	s0,40(sp)
20403974:	1800                	addi	s0,sp,48
20403976:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
2040397a:	4781                	li	a5,0
2040397c:	4801                	li	a6,0
2040397e:	fef42023          	sw	a5,-32(s0)
20403982:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403986:	fdc42503          	lw	a0,-36(s0)
2040398a:	aa9fe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
2040398e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403992:	fec42783          	lw	a5,-20(s0)
20403996:	c78d                	beqz	a5,204039c0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403998:	fec42783          	lw	a5,-20(s0)
2040399c:	13c7a783          	lw	a5,316(a5)
204039a0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204039a4:	fe842783          	lw	a5,-24(s0)
204039a8:	cf81                	beqz	a5,204039c0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204039aa:	fe842783          	lw	a5,-24(s0)
204039ae:	439c                	lw	a5,0(a5)
204039b0:	43f8                	lw	a4,68(a5)
204039b2:	fe040793          	addi	a5,s0,-32
204039b6:	863e                	mv	a2,a5
204039b8:	4585                	li	a1,1
204039ba:	fe842503          	lw	a0,-24(s0)
204039be:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204039c0:	fe042783          	lw	a5,-32(s0)
204039c4:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204039c8:	853e                	mv	a0,a5
204039ca:	85c2                	mv	a1,a6
204039cc:	50b2                	lw	ra,44(sp)
204039ce:	5422                	lw	s0,40(sp)
204039d0:	6145                	addi	sp,sp,48
204039d2:	8082                	ret

204039d4 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204039d4:	7179                	addi	sp,sp,-48
204039d6:	d606                	sw	ra,44(sp)
204039d8:	d422                	sw	s0,40(sp)
204039da:	d226                	sw	s1,36(sp)
204039dc:	1800                	addi	s0,sp,48
204039de:	fca42e23          	sw	a0,-36(s0)
204039e2:	fcb42823          	sw	a1,-48(s0)
204039e6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204039ea:	57fd                	li	a5,-1
204039ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204039f0:	fdc42503          	lw	a0,-36(s0)
204039f4:	a3ffe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
204039f8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204039fc:	fe842783          	lw	a5,-24(s0)
20403a00:	cf8d                	beqz	a5,20403a3a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403a02:	fe842783          	lw	a5,-24(s0)
20403a06:	13c7a783          	lw	a5,316(a5)
20403a0a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403a0e:	fe442783          	lw	a5,-28(s0)
20403a12:	c785                	beqz	a5,20403a3a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403a14:	fe442783          	lw	a5,-28(s0)
20403a18:	439c                	lw	a5,0(a5)
20403a1a:	47a4                	lw	s1,72(a5)
20403a1c:	fdc42503          	lw	a0,-36(s0)
20403a20:	9c5fe0ef          	jal	ra,204023e4 <__metal_driver_cpu_hartid>
20403a24:	87aa                	mv	a5,a0
20403a26:	fd042603          	lw	a2,-48(s0)
20403a2a:	fd442683          	lw	a3,-44(s0)
20403a2e:	85be                	mv	a1,a5
20403a30:	fe442503          	lw	a0,-28(s0)
20403a34:	9482                	jalr	s1
20403a36:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403a3a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403a3e:	853e                	mv	a0,a5
20403a40:	50b2                	lw	ra,44(sp)
20403a42:	5422                	lw	s0,40(sp)
20403a44:	5492                	lw	s1,36(sp)
20403a46:	6145                	addi	sp,sp,48
20403a48:	8082                	ret

20403a4a <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403a4a:	1101                	addi	sp,sp,-32
20403a4c:	ce22                	sw	s0,28(sp)
20403a4e:	1000                	addi	s0,sp,32
20403a50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403a54:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403a58:	853e                	mv	a0,a5
20403a5a:	4472                	lw	s0,28(sp)
20403a5c:	6105                	addi	sp,sp,32
20403a5e:	8082                	ret

20403a60 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403a60:	1101                	addi	sp,sp,-32
20403a62:	ce22                	sw	s0,28(sp)
20403a64:	1000                	addi	s0,sp,32
20403a66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403a6a:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403a6c:	853e                	mv	a0,a5
20403a6e:	4472                	lw	s0,28(sp)
20403a70:	6105                	addi	sp,sp,32
20403a72:	8082                	ret

20403a74 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403a74:	1101                	addi	sp,sp,-32
20403a76:	ce22                	sw	s0,28(sp)
20403a78:	1000                	addi	s0,sp,32
20403a7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403a7e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403a82:	853e                	mv	a0,a5
20403a84:	4472                	lw	s0,28(sp)
20403a86:	6105                	addi	sp,sp,32
20403a88:	8082                	ret

20403a8a <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403a8a:	1101                	addi	sp,sp,-32
20403a8c:	ce22                	sw	s0,28(sp)
20403a8e:	1000                	addi	s0,sp,32
20403a90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403a94:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403a96:	853e                	mv	a0,a5
20403a98:	4472                	lw	s0,28(sp)
20403a9a:	6105                	addi	sp,sp,32
20403a9c:	8082                	ret

20403a9e <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403a9e:	7179                	addi	sp,sp,-48
20403aa0:	d606                	sw	ra,44(sp)
20403aa2:	d422                	sw	s0,40(sp)
20403aa4:	1800                	addi	s0,sp,48
20403aa6:	fca42e23          	sw	a0,-36(s0)
20403aaa:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403aae:	57fd                	li	a5,-1
20403ab0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403ab4:	fdc42503          	lw	a0,-36(s0)
20403ab8:	97bfe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403abc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403ac0:	fe842783          	lw	a5,-24(s0)
20403ac4:	c79d                	beqz	a5,20403af2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403ac6:	fe842783          	lw	a5,-24(s0)
20403aca:	0dc7a783          	lw	a5,220(a5)
20403ace:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403ad2:	fe442783          	lw	a5,-28(s0)
20403ad6:	cf91                	beqz	a5,20403af2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403ad8:	fe442783          	lw	a5,-28(s0)
20403adc:	439c                	lw	a5,0(a5)
20403ade:	43f8                	lw	a4,68(a5)
20403ae0:	fd840793          	addi	a5,s0,-40
20403ae4:	863e                	mv	a2,a5
20403ae6:	458d                	li	a1,3
20403ae8:	fe442503          	lw	a0,-28(s0)
20403aec:	9702                	jalr	a4
20403aee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403af2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403af6:	853e                	mv	a0,a5
20403af8:	50b2                	lw	ra,44(sp)
20403afa:	5422                	lw	s0,40(sp)
20403afc:	6145                	addi	sp,sp,48
20403afe:	8082                	ret

20403b00 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403b00:	7179                	addi	sp,sp,-48
20403b02:	d606                	sw	ra,44(sp)
20403b04:	d422                	sw	s0,40(sp)
20403b06:	1800                	addi	s0,sp,48
20403b08:	fca42e23          	sw	a0,-36(s0)
20403b0c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403b10:	57fd                	li	a5,-1
20403b12:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403b16:	fdc42503          	lw	a0,-36(s0)
20403b1a:	919fe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403b1e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403b22:	fe842783          	lw	a5,-24(s0)
20403b26:	c79d                	beqz	a5,20403b54 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403b28:	fe842783          	lw	a5,-24(s0)
20403b2c:	0dc7a783          	lw	a5,220(a5)
20403b30:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403b34:	fe442783          	lw	a5,-28(s0)
20403b38:	cf91                	beqz	a5,20403b54 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403b3a:	fe442783          	lw	a5,-28(s0)
20403b3e:	439c                	lw	a5,0(a5)
20403b40:	43f8                	lw	a4,68(a5)
20403b42:	fd840793          	addi	a5,s0,-40
20403b46:	863e                	mv	a2,a5
20403b48:	4589                	li	a1,2
20403b4a:	fe442503          	lw	a0,-28(s0)
20403b4e:	9702                	jalr	a4
20403b50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403b54:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403b58:	853e                	mv	a0,a5
20403b5a:	50b2                	lw	ra,44(sp)
20403b5c:	5422                	lw	s0,40(sp)
20403b5e:	6145                	addi	sp,sp,48
20403b60:	8082                	ret

20403b62 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403b62:	7179                	addi	sp,sp,-48
20403b64:	d606                	sw	ra,44(sp)
20403b66:	d422                	sw	s0,40(sp)
20403b68:	1800                	addi	s0,sp,48
20403b6a:	fca42e23          	sw	a0,-36(s0)
20403b6e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403b72:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403b76:	fdc42503          	lw	a0,-36(s0)
20403b7a:	8b9fe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403b7e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403b82:	fe842783          	lw	a5,-24(s0)
20403b86:	c79d                	beqz	a5,20403bb4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403b88:	fe842783          	lw	a5,-24(s0)
20403b8c:	0dc7a783          	lw	a5,220(a5)
20403b90:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403b94:	fe442783          	lw	a5,-28(s0)
20403b98:	cf91                	beqz	a5,20403bb4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403b9a:	fe442783          	lw	a5,-28(s0)
20403b9e:	439c                	lw	a5,0(a5)
20403ba0:	43f8                	lw	a4,68(a5)
20403ba2:	fd840793          	addi	a5,s0,-40
20403ba6:	863e                	mv	a2,a5
20403ba8:	4591                	li	a1,4
20403baa:	fe442503          	lw	a0,-28(s0)
20403bae:	9702                	jalr	a4
20403bb0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403bb4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403bb8:	853e                	mv	a0,a5
20403bba:	50b2                	lw	ra,44(sp)
20403bbc:	5422                	lw	s0,40(sp)
20403bbe:	6145                	addi	sp,sp,48
20403bc0:	8082                	ret

20403bc2 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403bc2:	1101                	addi	sp,sp,-32
20403bc4:	ce06                	sw	ra,28(sp)
20403bc6:	cc22                	sw	s0,24(sp)
20403bc8:	1000                	addi	s0,sp,32
20403bca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403bce:	fec42503          	lw	a0,-20(s0)
20403bd2:	861fe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403bd6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403bd8:	853e                	mv	a0,a5
20403bda:	40f2                	lw	ra,28(sp)
20403bdc:	4462                	lw	s0,24(sp)
20403bde:	6105                	addi	sp,sp,32
20403be0:	8082                	ret

20403be2 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403be2:	7179                	addi	sp,sp,-48
20403be4:	d606                	sw	ra,44(sp)
20403be6:	d422                	sw	s0,40(sp)
20403be8:	1800                	addi	s0,sp,48
20403bea:	fca42e23          	sw	a0,-36(s0)
20403bee:	fcb42c23          	sw	a1,-40(s0)
20403bf2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403bf6:	fdc42503          	lw	a0,-36(s0)
20403bfa:	839fe0ef          	jal	ra,20402432 <__metal_driver_cpu_interrupt_controller>
20403bfe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403c02:	fec42783          	lw	a5,-20(s0)
20403c06:	cb99                	beqz	a5,20403c1c <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403c08:	fd442603          	lw	a2,-44(s0)
20403c0c:	fd842583          	lw	a1,-40(s0)
20403c10:	fec42503          	lw	a0,-20(s0)
20403c14:	8ddff0ef          	jal	ra,204034f0 <__metal_exception_register>
20403c18:	87aa                	mv	a5,a0
20403c1a:	a011                	j	20403c1e <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403c1c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403c1e:	853e                	mv	a0,a5
20403c20:	50b2                	lw	ra,44(sp)
20403c22:	5422                	lw	s0,40(sp)
20403c24:	6145                	addi	sp,sp,48
20403c26:	8082                	ret

20403c28 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403c28:	1101                	addi	sp,sp,-32
20403c2a:	ce22                	sw	s0,28(sp)
20403c2c:	1000                	addi	s0,sp,32
20403c2e:	fea42623          	sw	a0,-20(s0)
20403c32:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403c36:	fe842783          	lw	a5,-24(s0)
20403c3a:	0007d783          	lhu	a5,0(a5)
20403c3e:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403c42:	478d                	li	a5,3
20403c44:	00f71463          	bne	a4,a5,20403c4c <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403c48:	4791                	li	a5,4
20403c4a:	a011                	j	20403c4e <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403c4c:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403c4e:	853e                	mv	a0,a5
20403c50:	4472                	lw	s0,28(sp)
20403c52:	6105                	addi	sp,sp,32
20403c54:	8082                	ret

20403c56 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403c56:	7179                	addi	sp,sp,-48
20403c58:	d622                	sw	s0,44(sp)
20403c5a:	1800                	addi	s0,sp,48
20403c5c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403c60:	341027f3          	csrr	a5,mepc
20403c64:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403c68:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403c6c:	853e                	mv	a0,a5
20403c6e:	5432                	lw	s0,44(sp)
20403c70:	6145                	addi	sp,sp,48
20403c72:	8082                	ret

20403c74 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403c74:	1101                	addi	sp,sp,-32
20403c76:	ce22                	sw	s0,28(sp)
20403c78:	1000                	addi	s0,sp,32
20403c7a:	fea42623          	sw	a0,-20(s0)
20403c7e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403c82:	fe842783          	lw	a5,-24(s0)
20403c86:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403c8a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403c8c:	853e                	mv	a0,a5
20403c8e:	4472                	lw	s0,28(sp)
20403c90:	6105                	addi	sp,sp,32
20403c92:	8082                	ret

20403c94 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403c94:	1101                	addi	sp,sp,-32
20403c96:	ce22                	sw	s0,28(sp)
20403c98:	1000                	addi	s0,sp,32
20403c9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403c9e:	fec42703          	lw	a4,-20(s0)
20403ca2:	800007b7          	lui	a5,0x80000
20403ca6:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20403caa:	00f71563          	bne	a4,a5,20403cb4 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403cae:	0c0007b7          	lui	a5,0xc000
20403cb2:	a011                	j	20403cb6 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403cb4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:245
	}
}
20403cb6:	853e                	mv	a0,a5
20403cb8:	4472                	lw	s0,28(sp)
20403cba:	6105                	addi	sp,sp,32
20403cbc:	8082                	ret

20403cbe <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403cbe:	1101                	addi	sp,sp,-32
20403cc0:	ce22                	sw	s0,28(sp)
20403cc2:	1000                	addi	s0,sp,32
20403cc4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403cc8:	fec42703          	lw	a4,-20(s0)
20403ccc:	800007b7          	lui	a5,0x80000
20403cd0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20403cd4:	00f71463          	bne	a4,a5,20403cdc <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403cd8:	47ed                	li	a5,27
20403cda:	a011                	j	20403cde <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403cdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:265
	}
}
20403cde:	853e                	mv	a0,a5
20403ce0:	4472                	lw	s0,28(sp)
20403ce2:	6105                	addi	sp,sp,32
20403ce4:	8082                	ret

20403ce6 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403ce6:	1101                	addi	sp,sp,-32
20403ce8:	ce22                	sw	s0,28(sp)
20403cea:	1000                	addi	s0,sp,32
20403cec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403cf0:	fec42703          	lw	a4,-20(s0)
20403cf4:	800007b7          	lui	a5,0x80000
20403cf8:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20403cfc:	00f71463          	bne	a4,a5,20403d04 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403d00:	479d                	li	a5,7
20403d02:	a011                	j	20403d06 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403d04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:275
	}
}
20403d06:	853e                	mv	a0,a5
20403d08:	4472                	lw	s0,28(sp)
20403d0a:	6105                	addi	sp,sp,32
20403d0c:	8082                	ret

20403d0e <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403d0e:	1101                	addi	sp,sp,-32
20403d10:	ce22                	sw	s0,28(sp)
20403d12:	1000                	addi	s0,sp,32
20403d14:	fea42623          	sw	a0,-20(s0)
20403d18:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403d1c:	fe842783          	lw	a5,-24(s0)
20403d20:	e791                	bnez	a5,20403d2c <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403d22:	800007b7          	lui	a5,0x80000
20403d26:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20403d2a:	a011                	j	20403d2e <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403d2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:285
	}
}
20403d2e:	853e                	mv	a0,a5
20403d30:	4472                	lw	s0,28(sp)
20403d32:	6105                	addi	sp,sp,32
20403d34:	8082                	ret

20403d36 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403d36:	1101                	addi	sp,sp,-32
20403d38:	ce22                	sw	s0,28(sp)
20403d3a:	1000                	addi	s0,sp,32
20403d3c:	fea42623          	sw	a0,-20(s0)
20403d40:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403d44:	fe842783          	lw	a5,-24(s0)
20403d48:	e399                	bnez	a5,20403d4e <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:290
		return 11;
20403d4a:	47ad                	li	a5,11
20403d4c:	a011                	j	20403d50 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403d4e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:295
	}
}
20403d50:	853e                	mv	a0,a5
20403d52:	4472                	lw	s0,28(sp)
20403d54:	6105                	addi	sp,sp,32
20403d56:	8082                	ret

20403d58 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403d58:	7179                	addi	sp,sp,-48
20403d5a:	d606                	sw	ra,44(sp)
20403d5c:	d422                	sw	s0,40(sp)
20403d5e:	1800                	addi	s0,sp,48
20403d60:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403d64:	fdc42503          	lw	a0,-36(s0)
20403d68:	3735                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403d6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d6e:	fec42703          	lw	a4,-20(s0)
20403d72:	002007b7          	lui	a5,0x200
20403d76:	0791                	addi	a5,a5,4
20403d78:	97ba                	add	a5,a5,a4
20403d7a:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403d7c:	853e                	mv	a0,a5
20403d7e:	50b2                	lw	ra,44(sp)
20403d80:	5422                	lw	s0,40(sp)
20403d82:	6145                	addi	sp,sp,48
20403d84:	8082                	ret

20403d86 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403d86:	7179                	addi	sp,sp,-48
20403d88:	d606                	sw	ra,44(sp)
20403d8a:	d422                	sw	s0,40(sp)
20403d8c:	1800                	addi	s0,sp,48
20403d8e:	fca42e23          	sw	a0,-36(s0)
20403d92:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403d96:	fdc42503          	lw	a0,-36(s0)
20403d9a:	3ded                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403d9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403da0:	fec42703          	lw	a4,-20(s0)
20403da4:	002007b7          	lui	a5,0x200
20403da8:	0791                	addi	a5,a5,4
20403daa:	97ba                	add	a5,a5,a4
20403dac:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403dae:	fd842783          	lw	a5,-40(s0)
20403db2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403db4:	0001                	nop
20403db6:	50b2                	lw	ra,44(sp)
20403db8:	5422                	lw	s0,40(sp)
20403dba:	6145                	addi	sp,sp,48
20403dbc:	8082                	ret

20403dbe <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403dbe:	7179                	addi	sp,sp,-48
20403dc0:	d606                	sw	ra,44(sp)
20403dc2:	d422                	sw	s0,40(sp)
20403dc4:	1800                	addi	s0,sp,48
20403dc6:	fca42e23          	sw	a0,-36(s0)
20403dca:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403dce:	fdc42503          	lw	a0,-36(s0)
20403dd2:	35c9                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403dd4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403dd8:	fec42703          	lw	a4,-20(s0)
20403ddc:	002007b7          	lui	a5,0x200
20403de0:	97ba                	add	a5,a5,a4
20403de2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403de4:	fd842783          	lw	a5,-40(s0)
20403de8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403dea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403dec:	853e                	mv	a0,a5
20403dee:	50b2                	lw	ra,44(sp)
20403df0:	5422                	lw	s0,40(sp)
20403df2:	6145                	addi	sp,sp,48
20403df4:	8082                	ret

20403df6 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403df6:	7179                	addi	sp,sp,-48
20403df8:	d606                	sw	ra,44(sp)
20403dfa:	d422                	sw	s0,40(sp)
20403dfc:	1800                	addi	s0,sp,48
20403dfe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403e02:	fdc42503          	lw	a0,-36(s0)
20403e06:	3579                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403e08:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e0c:	fec42703          	lw	a4,-20(s0)
20403e10:	002007b7          	lui	a5,0x200
20403e14:	97ba                	add	a5,a5,a4
20403e16:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403e18:	853e                	mv	a0,a5
20403e1a:	50b2                	lw	ra,44(sp)
20403e1c:	5422                	lw	s0,40(sp)
20403e1e:	6145                	addi	sp,sp,48
20403e20:	8082                	ret

20403e22 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403e22:	7179                	addi	sp,sp,-48
20403e24:	d606                	sw	ra,44(sp)
20403e26:	d422                	sw	s0,40(sp)
20403e28:	1800                	addi	s0,sp,48
20403e2a:	fca42e23          	sw	a0,-36(s0)
20403e2e:	fcb42c23          	sw	a1,-40(s0)
20403e32:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403e36:	fdc42503          	lw	a0,-36(s0)
20403e3a:	3da9                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403e3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403e40:	fdc42503          	lw	a0,-36(s0)
20403e44:	354d                	jal	20403ce6 <__metal_driver_sifive_plic0_max_priority>
20403e46:	87aa                	mv	a5,a0
20403e48:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403e4c:	fe842783          	lw	a5,-24(s0)
20403e50:	c785                	beqz	a5,20403e78 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403e52:	fd442703          	lw	a4,-44(s0)
20403e56:	fe842783          	lw	a5,-24(s0)
20403e5a:	00f77f63          	bgeu	a4,a5,20403e78 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e5e:	fd842783          	lw	a5,-40(s0)
20403e62:	078a                	slli	a5,a5,0x2
20403e64:	873e                	mv	a4,a5
20403e66:	fec42783          	lw	a5,-20(s0)
20403e6a:	97ba                	add	a5,a5,a4
20403e6c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403e6e:	fd442783          	lw	a5,-44(s0)
20403e72:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403e74:	4781                	li	a5,0
20403e76:	a011                	j	20403e7a <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403e78:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403e7a:	853e                	mv	a0,a5
20403e7c:	50b2                	lw	ra,44(sp)
20403e7e:	5422                	lw	s0,40(sp)
20403e80:	6145                	addi	sp,sp,48
20403e82:	8082                	ret

20403e84 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403e84:	7179                	addi	sp,sp,-48
20403e86:	d606                	sw	ra,44(sp)
20403e88:	d422                	sw	s0,40(sp)
20403e8a:	1800                	addi	s0,sp,48
20403e8c:	fca42e23          	sw	a0,-36(s0)
20403e90:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403e94:	fdc42503          	lw	a0,-36(s0)
20403e98:	3bf5                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403e9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e9e:	fd842783          	lw	a5,-40(s0)
20403ea2:	078a                	slli	a5,a5,0x2
20403ea4:	873e                	mv	a4,a5
20403ea6:	fec42783          	lw	a5,-20(s0)
20403eaa:	97ba                	add	a5,a5,a4
20403eac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403eae:	853e                	mv	a0,a5
20403eb0:	50b2                	lw	ra,44(sp)
20403eb2:	5422                	lw	s0,40(sp)
20403eb4:	6145                	addi	sp,sp,48
20403eb6:	8082                	ret

20403eb8 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403eb8:	7179                	addi	sp,sp,-48
20403eba:	d606                	sw	ra,44(sp)
20403ebc:	d422                	sw	s0,40(sp)
20403ebe:	1800                	addi	s0,sp,48
20403ec0:	fca42e23          	sw	a0,-36(s0)
20403ec4:	fcb42c23          	sw	a1,-40(s0)
20403ec8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403ecc:	fdc42503          	lw	a0,-36(s0)
20403ed0:	33d1                	jal	20403c94 <__metal_driver_sifive_plic0_control_base>
20403ed2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ed6:	fd842783          	lw	a5,-40(s0)
20403eda:	8795                	srai	a5,a5,0x5
20403edc:	078a                	slli	a5,a5,0x2
20403ede:	873e                	mv	a4,a5
20403ee0:	fec42783          	lw	a5,-20(s0)
20403ee4:	973e                	add	a4,a4,a5
20403ee6:	6789                	lui	a5,0x2
20403ee8:	97ba                	add	a5,a5,a4
20403eea:	439c                	lw	a5,0(a5)
20403eec:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403ef0:	fd442783          	lw	a5,-44(s0)
20403ef4:	cf81                	beqz	a5,20403f0c <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403ef6:	fd842783          	lw	a5,-40(s0)
20403efa:	8bfd                	andi	a5,a5,31
20403efc:	4705                	li	a4,1
20403efe:	00f717b3          	sll	a5,a4,a5
20403f02:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403f04:	fe842783          	lw	a5,-24(s0)
20403f08:	8fd9                	or	a5,a5,a4
20403f0a:	a829                	j	20403f24 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403f0c:	fd842783          	lw	a5,-40(s0)
20403f10:	8bfd                	andi	a5,a5,31
20403f12:	4705                	li	a4,1
20403f14:	00f717b3          	sll	a5,a4,a5
20403f18:	fff7c793          	not	a5,a5
20403f1c:	873e                	mv	a4,a5
20403f1e:	fe842783          	lw	a5,-24(s0)
20403f22:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f24:	fd842703          	lw	a4,-40(s0)
20403f28:	8715                	srai	a4,a4,0x5
20403f2a:	070a                	slli	a4,a4,0x2
20403f2c:	86ba                	mv	a3,a4
20403f2e:	fec42703          	lw	a4,-20(s0)
20403f32:	96ba                	add	a3,a3,a4
20403f34:	6709                	lui	a4,0x2
20403f36:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403f38:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403f3a:	0001                	nop
20403f3c:	50b2                	lw	ra,44(sp)
20403f3e:	5422                	lw	s0,40(sp)
20403f40:	6145                	addi	sp,sp,48
20403f42:	8082                	ret

20403f44 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403f44:	1101                	addi	sp,sp,-32
20403f46:	ce06                	sw	ra,28(sp)
20403f48:	cc22                	sw	s0,24(sp)
20403f4a:	1000                	addi	s0,sp,32
20403f4c:	fea42623          	sw	a0,-20(s0)
20403f50:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403f54:	12c00513          	li	a0,300
20403f58:	1c4010ef          	jal	ra,2040511c <metal_shutdown>

20403f5c <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403f5c:	7179                	addi	sp,sp,-48
20403f5e:	d606                	sw	ra,44(sp)
20403f60:	d422                	sw	s0,40(sp)
20403f62:	1800                	addi	s0,sp,48
20403f64:	fca42e23          	sw	a0,-36(s0)
20403f68:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403f6c:	fd842783          	lw	a5,-40(s0)
20403f70:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403f74:	fec42503          	lw	a0,-20(s0)
20403f78:	33c5                	jal	20403d58 <__metal_plic0_claim_interrupt>
20403f7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403f7e:	fec42503          	lw	a0,-20(s0)
20403f82:	3b35                	jal	20403cbe <__metal_driver_sifive_plic0_num_interrupts>
20403f84:	87aa                	mv	a5,a0
20403f86:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403f8a:	fe842703          	lw	a4,-24(s0)
20403f8e:	fe442783          	lw	a5,-28(s0)
20403f92:	04f77263          	bgeu	a4,a5,20403fd6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403f96:	fec42703          	lw	a4,-20(s0)
20403f9a:	fe842783          	lw	a5,-24(s0)
20403f9e:	078a                	slli	a5,a5,0x2
20403fa0:	97ba                	add	a5,a5,a4
20403fa2:	479c                	lw	a5,8(a5)
20403fa4:	cb8d                	beqz	a5,20403fd6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403fa6:	fec42703          	lw	a4,-20(s0)
20403faa:	fe842783          	lw	a5,-24(s0)
20403fae:	078a                	slli	a5,a5,0x2
20403fb0:	97ba                	add	a5,a5,a4
20403fb2:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403fb6:	fe842603          	lw	a2,-24(s0)
20403fba:	fec42683          	lw	a3,-20(s0)
20403fbe:	fe842703          	lw	a4,-24(s0)
20403fc2:	87ba                	mv	a5,a4
20403fc4:	0786                	slli	a5,a5,0x1
20403fc6:	97ba                	add	a5,a5,a4
20403fc8:	078e                	slli	a5,a5,0x3
20403fca:	97b6                	add	a5,a5,a3
20403fcc:	0887a783          	lw	a5,136(a5)
20403fd0:	85be                	mv	a1,a5
20403fd2:	8532                	mv	a0,a2
20403fd4:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403fd6:	fe842583          	lw	a1,-24(s0)
20403fda:	fec42503          	lw	a0,-20(s0)
20403fde:	3365                	jal	20403d86 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403fe0:	0001                	nop
20403fe2:	50b2                	lw	ra,44(sp)
20403fe4:	5422                	lw	s0,40(sp)
20403fe6:	6145                	addi	sp,sp,48
20403fe8:	8082                	ret

20403fea <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403fea:	7139                	addi	sp,sp,-64
20403fec:	de06                	sw	ra,60(sp)
20403fee:	dc22                	sw	s0,56(sp)
20403ff0:	0080                	addi	s0,sp,64
20403ff2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403ff6:	fcc42783          	lw	a5,-52(s0)
20403ffa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403ffe:	fe442783          	lw	a5,-28(s0)
20404002:	43dc                	lw	a5,4(a5)
20404004:	12079063          	bnez	a5,20404124 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404008:	fe042623          	sw	zero,-20(s0)
2040400c:	a221                	j	20404114 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040400e:	fcc42503          	lw	a0,-52(s0)
20404012:	cadff0ef          	jal	ra,20403cbe <__metal_driver_sifive_plic0_num_interrupts>
20404016:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040401a:	fec42583          	lw	a1,-20(s0)
2040401e:	fcc42503          	lw	a0,-52(s0)
20404022:	cedff0ef          	jal	ra,20403d0e <__metal_driver_sifive_plic0_interrupt_parents>
20404026:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040402a:	fec42583          	lw	a1,-20(s0)
2040402e:	fcc42503          	lw	a0,-52(s0)
20404032:	d05ff0ef          	jal	ra,20403d36 <__metal_driver_sifive_plic0_interrupt_lines>
20404036:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040403a:	fdc42783          	lw	a5,-36(s0)
2040403e:	439c                	lw	a5,0(a5)
20404040:	439c                	lw	a5,0(a5)
20404042:	fdc42503          	lw	a0,-36(s0)
20404046:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404048:	fe042423          	sw	zero,-24(s0)
2040404c:	a085                	j	204040ac <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
2040404e:	4601                	li	a2,0
20404050:	fe842583          	lw	a1,-24(s0)
20404054:	fe442503          	lw	a0,-28(s0)
20404058:	3585                	jal	20403eb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040405a:	4601                	li	a2,0
2040405c:	fe842583          	lw	a1,-24(s0)
20404060:	fcc42503          	lw	a0,-52(s0)
20404064:	3b7d                	jal	20403e22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20404066:	fe442703          	lw	a4,-28(s0)
2040406a:	fe842783          	lw	a5,-24(s0)
2040406e:	078a                	slli	a5,a5,0x2
20404070:	97ba                	add	a5,a5,a4
20404072:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20404076:	fe442683          	lw	a3,-28(s0)
2040407a:	fe842703          	lw	a4,-24(s0)
2040407e:	87ba                	mv	a5,a4
20404080:	0786                	slli	a5,a5,0x1
20404082:	97ba                	add	a5,a5,a4
20404084:	078e                	slli	a5,a5,0x3
20404086:	97b6                	add	a5,a5,a3
20404088:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
2040408c:	fe442683          	lw	a3,-28(s0)
20404090:	fe842703          	lw	a4,-24(s0)
20404094:	87ba                	mv	a5,a4
20404096:	0786                	slli	a5,a5,0x1
20404098:	97ba                	add	a5,a5,a4
2040409a:	078e                	slli	a5,a5,0x3
2040409c:	97b6                	add	a5,a5,a3
2040409e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204040a2:	fe842783          	lw	a5,-24(s0)
204040a6:	0785                	addi	a5,a5,1
204040a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204040ac:	fe842703          	lw	a4,-24(s0)
204040b0:	fe042783          	lw	a5,-32(s0)
204040b4:	f8f74de3          	blt	a4,a5,2040404e <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204040b8:	4581                	li	a1,0
204040ba:	fcc42503          	lw	a0,-52(s0)
204040be:	d01ff0ef          	jal	ra,20403dbe <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204040c2:	fdc42783          	lw	a5,-36(s0)
204040c6:	439c                	lw	a5,0(a5)
204040c8:	4fdc                	lw	a5,28(a5)
204040ca:	fe442683          	lw	a3,-28(s0)
204040ce:	4601                	li	a2,0
204040d0:	fd842583          	lw	a1,-40(s0)
204040d4:	fdc42503          	lw	a0,-36(s0)
204040d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204040da:	fdc42783          	lw	a5,-36(s0)
204040de:	439c                	lw	a5,0(a5)
204040e0:	4fd8                	lw	a4,28(a5)
204040e2:	fe442683          	lw	a3,-28(s0)
204040e6:	204047b7          	lui	a5,0x20404
204040ea:	f5c78613          	addi	a2,a5,-164 # 20403f5c <__metal_plic0_handler>
204040ee:	fd842583          	lw	a1,-40(s0)
204040f2:	fdc42503          	lw	a0,-36(s0)
204040f6:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204040f8:	fdc42783          	lw	a5,-36(s0)
204040fc:	439c                	lw	a5,0(a5)
204040fe:	53dc                	lw	a5,36(a5)
20404100:	fd842583          	lw	a1,-40(s0)
20404104:	fdc42503          	lw	a0,-36(s0)
20404108:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040410a:	fec42783          	lw	a5,-20(s0)
2040410e:	0785                	addi	a5,a5,1
20404110:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404114:	fec42783          	lw	a5,-20(s0)
20404118:	eef05be3          	blez	a5,2040400e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
2040411c:	fe442783          	lw	a5,-28(s0)
20404120:	4705                	li	a4,1
20404122:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404124:	0001                	nop
20404126:	50f2                	lw	ra,60(sp)
20404128:	5462                	lw	s0,56(sp)
2040412a:	6121                	addi	sp,sp,64
2040412c:	8082                	ret

2040412e <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
2040412e:	7179                	addi	sp,sp,-48
20404130:	d606                	sw	ra,44(sp)
20404132:	d422                	sw	s0,40(sp)
20404134:	1800                	addi	s0,sp,48
20404136:	fca42e23          	sw	a0,-36(s0)
2040413a:	fcb42c23          	sw	a1,-40(s0)
2040413e:	fcc42a23          	sw	a2,-44(s0)
20404142:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404146:	fdc42783          	lw	a5,-36(s0)
2040414a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040414e:	fdc42503          	lw	a0,-36(s0)
20404152:	b6dff0ef          	jal	ra,20403cbe <__metal_driver_sifive_plic0_num_interrupts>
20404156:	872a                	mv	a4,a0
20404158:	fd842783          	lw	a5,-40(s0)
2040415c:	00e7c463          	blt	a5,a4,20404164 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404160:	57fd                	li	a5,-1
20404162:	a051                	j	204041e6 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404164:	fd442783          	lw	a5,-44(s0)
20404168:	cf9d                	beqz	a5,204041a6 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040416a:	4609                	li	a2,2
2040416c:	fd842583          	lw	a1,-40(s0)
20404170:	fdc42503          	lw	a0,-36(s0)
20404174:	cafff0ef          	jal	ra,20403e22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404178:	fec42703          	lw	a4,-20(s0)
2040417c:	fd842783          	lw	a5,-40(s0)
20404180:	078a                	slli	a5,a5,0x2
20404182:	97ba                	add	a5,a5,a4
20404184:	fd442703          	lw	a4,-44(s0)
20404188:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040418a:	fec42683          	lw	a3,-20(s0)
2040418e:	fd842703          	lw	a4,-40(s0)
20404192:	87ba                	mv	a5,a4
20404194:	0786                	slli	a5,a5,0x1
20404196:	97ba                	add	a5,a5,a4
20404198:	078e                	slli	a5,a5,0x3
2040419a:	97b6                	add	a5,a5,a3
2040419c:	fd042703          	lw	a4,-48(s0)
204041a0:	08e7a423          	sw	a4,136(a5)
204041a4:	a081                	j	204041e4 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204041a6:	4605                	li	a2,1
204041a8:	fd842583          	lw	a1,-40(s0)
204041ac:	fdc42503          	lw	a0,-36(s0)
204041b0:	c73ff0ef          	jal	ra,20403e22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204041b4:	fec42703          	lw	a4,-20(s0)
204041b8:	fd842783          	lw	a5,-40(s0)
204041bc:	078a                	slli	a5,a5,0x2
204041be:	97ba                	add	a5,a5,a4
204041c0:	20404737          	lui	a4,0x20404
204041c4:	f4470713          	addi	a4,a4,-188 # 20403f44 <__metal_plic0_default_handler>
204041c8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204041ca:	fec42683          	lw	a3,-20(s0)
204041ce:	fd842703          	lw	a4,-40(s0)
204041d2:	87ba                	mv	a5,a4
204041d4:	0786                	slli	a5,a5,0x1
204041d6:	97ba                	add	a5,a5,a4
204041d8:	078e                	slli	a5,a5,0x3
204041da:	97b6                	add	a5,a5,a3
204041dc:	fd042703          	lw	a4,-48(s0)
204041e0:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204041e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204041e6:	853e                	mv	a0,a5
204041e8:	50b2                	lw	ra,44(sp)
204041ea:	5422                	lw	s0,40(sp)
204041ec:	6145                	addi	sp,sp,48
204041ee:	8082                	ret

204041f0 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204041f0:	7179                	addi	sp,sp,-48
204041f2:	d606                	sw	ra,44(sp)
204041f4:	d422                	sw	s0,40(sp)
204041f6:	1800                	addi	s0,sp,48
204041f8:	fca42e23          	sw	a0,-36(s0)
204041fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404200:	fdc42783          	lw	a5,-36(s0)
20404204:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404208:	fdc42503          	lw	a0,-36(s0)
2040420c:	ab3ff0ef          	jal	ra,20403cbe <__metal_driver_sifive_plic0_num_interrupts>
20404210:	872a                	mv	a4,a0
20404212:	fd842783          	lw	a5,-40(s0)
20404216:	00e7c463          	blt	a5,a4,2040421e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040421a:	57fd                	li	a5,-1
2040421c:	a809                	j	2040422e <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040421e:	4605                	li	a2,1
20404220:	fd842583          	lw	a1,-40(s0)
20404224:	fec42503          	lw	a0,-20(s0)
20404228:	c91ff0ef          	jal	ra,20403eb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040422c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
2040422e:	853e                	mv	a0,a5
20404230:	50b2                	lw	ra,44(sp)
20404232:	5422                	lw	s0,40(sp)
20404234:	6145                	addi	sp,sp,48
20404236:	8082                	ret

20404238 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404238:	7179                	addi	sp,sp,-48
2040423a:	d606                	sw	ra,44(sp)
2040423c:	d422                	sw	s0,40(sp)
2040423e:	1800                	addi	s0,sp,48
20404240:	fca42e23          	sw	a0,-36(s0)
20404244:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404248:	fdc42783          	lw	a5,-36(s0)
2040424c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404250:	fdc42503          	lw	a0,-36(s0)
20404254:	a6bff0ef          	jal	ra,20403cbe <__metal_driver_sifive_plic0_num_interrupts>
20404258:	872a                	mv	a4,a0
2040425a:	fd842783          	lw	a5,-40(s0)
2040425e:	00e7c463          	blt	a5,a4,20404266 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404262:	57fd                	li	a5,-1
20404264:	a809                	j	20404276 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404266:	4601                	li	a2,0
20404268:	fd842583          	lw	a1,-40(s0)
2040426c:	fec42503          	lw	a0,-20(s0)
20404270:	c49ff0ef          	jal	ra,20403eb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404274:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404276:	853e                	mv	a0,a5
20404278:	50b2                	lw	ra,44(sp)
2040427a:	5422                	lw	s0,40(sp)
2040427c:	6145                	addi	sp,sp,48
2040427e:	8082                	ret

20404280 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404280:	1101                	addi	sp,sp,-32
20404282:	ce22                	sw	s0,28(sp)
20404284:	1000                	addi	s0,sp,32
20404286:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040428a:	fec42703          	lw	a4,-20(s0)
2040428e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404292:	00f71563          	bne	a4,a5,2040429c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404296:	100127b7          	lui	a5,0x10012
2040429a:	a011                	j	2040429e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040429c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:395
	}
}
2040429e:	853e                	mv	a0,a5
204042a0:	4472                	lw	s0,28(sp)
204042a2:	6105                	addi	sp,sp,32
204042a4:	8082                	ret

204042a6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204042a6:	1101                	addi	sp,sp,-32
204042a8:	ce22                	sw	s0,28(sp)
204042aa:	1000                	addi	s0,sp,32
204042ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204042b0:	fec42703          	lw	a4,-20(s0)
204042b4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042b8:	00f71763          	bne	a4,a5,204042c6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204042bc:	800007b7          	lui	a5,0x80000
204042c0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
204042c4:	a011                	j	204042c8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204042c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:425
	}
}
204042c8:	853e                	mv	a0,a5
204042ca:	4472                	lw	s0,28(sp)
204042cc:	6105                	addi	sp,sp,32
204042ce:	8082                	ret

204042d0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204042d0:	1101                	addi	sp,sp,-32
204042d2:	ce22                	sw	s0,28(sp)
204042d4:	1000                	addi	s0,sp,32
204042d6:	fea42623          	sw	a0,-20(s0)
204042da:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204042de:	fec42703          	lw	a4,-20(s0)
204042e2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042e6:	00f71763          	bne	a4,a5,204042f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429 (discriminator 1)
204042ea:	fe842783          	lw	a5,-24(s0)
204042ee:	e399                	bnez	a5,204042f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:430
		return 7;
204042f0:	479d                	li	a5,7
204042f2:	a269                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204042f4:	fec42703          	lw	a4,-20(s0)
204042f8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204042fc:	00f71963          	bne	a4,a5,2040430e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432 (discriminator 1)
20404300:	fe842703          	lw	a4,-24(s0)
20404304:	4785                	li	a5,1
20404306:	00f71463          	bne	a4,a5,2040430e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:433
		return 8;
2040430a:	47a1                	li	a5,8
2040430c:	aa85                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040430e:	fec42703          	lw	a4,-20(s0)
20404312:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404316:	00f71963          	bne	a4,a5,20404328 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435 (discriminator 1)
2040431a:	fe842703          	lw	a4,-24(s0)
2040431e:	4789                	li	a5,2
20404320:	00f71463          	bne	a4,a5,20404328 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:436
		return 9;
20404324:	47a5                	li	a5,9
20404326:	aa99                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404328:	fec42703          	lw	a4,-20(s0)
2040432c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404330:	00f71963          	bne	a4,a5,20404342 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438 (discriminator 1)
20404334:	fe842703          	lw	a4,-24(s0)
20404338:	478d                	li	a5,3
2040433a:	00f71463          	bne	a4,a5,20404342 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:439
		return 10;
2040433e:	47a9                	li	a5,10
20404340:	aa35                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404342:	fec42703          	lw	a4,-20(s0)
20404346:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040434a:	00f71963          	bne	a4,a5,2040435c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441 (discriminator 1)
2040434e:	fe842703          	lw	a4,-24(s0)
20404352:	4791                	li	a5,4
20404354:	00f71463          	bne	a4,a5,2040435c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:442
		return 11;
20404358:	47ad                	li	a5,11
2040435a:	a20d                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040435c:	fec42703          	lw	a4,-20(s0)
20404360:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404364:	00f71963          	bne	a4,a5,20404376 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444 (discriminator 1)
20404368:	fe842703          	lw	a4,-24(s0)
2040436c:	4795                	li	a5,5
2040436e:	00f71463          	bne	a4,a5,20404376 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:445
		return 12;
20404372:	47b1                	li	a5,12
20404374:	a221                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404376:	fec42703          	lw	a4,-20(s0)
2040437a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040437e:	00f71963          	bne	a4,a5,20404390 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447 (discriminator 1)
20404382:	fe842703          	lw	a4,-24(s0)
20404386:	4799                	li	a5,6
20404388:	00f71463          	bne	a4,a5,20404390 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:448
		return 13;
2040438c:	47b5                	li	a5,13
2040438e:	a0fd                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404390:	fec42703          	lw	a4,-20(s0)
20404394:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404398:	00f71963          	bne	a4,a5,204043aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450 (discriminator 1)
2040439c:	fe842703          	lw	a4,-24(s0)
204043a0:	479d                	li	a5,7
204043a2:	00f71463          	bne	a4,a5,204043aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:451
		return 14;
204043a6:	47b9                	li	a5,14
204043a8:	a8d1                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204043aa:	fec42703          	lw	a4,-20(s0)
204043ae:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043b2:	00f71963          	bne	a4,a5,204043c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453 (discriminator 1)
204043b6:	fe842703          	lw	a4,-24(s0)
204043ba:	47a1                	li	a5,8
204043bc:	00f71463          	bne	a4,a5,204043c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return 15;
204043c0:	47bd                	li	a5,15
204043c2:	a86d                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204043c4:	fec42703          	lw	a4,-20(s0)
204043c8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043cc:	00f71963          	bne	a4,a5,204043de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456 (discriminator 1)
204043d0:	fe842703          	lw	a4,-24(s0)
204043d4:	47a5                	li	a5,9
204043d6:	00f71463          	bne	a4,a5,204043de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
		return 16;
204043da:	47c1                	li	a5,16
204043dc:	a045                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204043de:	fec42703          	lw	a4,-20(s0)
204043e2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043e6:	00f71963          	bne	a4,a5,204043f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459 (discriminator 1)
204043ea:	fe842703          	lw	a4,-24(s0)
204043ee:	47a9                	li	a5,10
204043f0:	00f71463          	bne	a4,a5,204043f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:460
		return 17;
204043f4:	47c5                	li	a5,17
204043f6:	a059                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204043f8:	fec42703          	lw	a4,-20(s0)
204043fc:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404400:	00f71963          	bne	a4,a5,20404412 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462 (discriminator 1)
20404404:	fe842703          	lw	a4,-24(s0)
20404408:	47ad                	li	a5,11
2040440a:	00f71463          	bne	a4,a5,20404412 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
		return 18;
2040440e:	47c9                	li	a5,18
20404410:	a0b5                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404412:	fec42703          	lw	a4,-20(s0)
20404416:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040441a:	00f71963          	bne	a4,a5,2040442c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465 (discriminator 1)
2040441e:	fe842703          	lw	a4,-24(s0)
20404422:	47b1                	li	a5,12
20404424:	00f71463          	bne	a4,a5,2040442c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
		return 19;
20404428:	47cd                	li	a5,19
2040442a:	a889                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040442c:	fec42703          	lw	a4,-20(s0)
20404430:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404434:	00f71963          	bne	a4,a5,20404446 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468 (discriminator 1)
20404438:	fe842703          	lw	a4,-24(s0)
2040443c:	47b5                	li	a5,13
2040443e:	00f71463          	bne	a4,a5,20404446 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
		return 20;
20404442:	47d1                	li	a5,20
20404444:	a825                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404446:	fec42703          	lw	a4,-20(s0)
2040444a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040444e:	00f71963          	bne	a4,a5,20404460 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471 (discriminator 1)
20404452:	fe842703          	lw	a4,-24(s0)
20404456:	47b9                	li	a5,14
20404458:	00f71463          	bne	a4,a5,20404460 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
		return 21;
2040445c:	47d5                	li	a5,21
2040445e:	a839                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404460:	fec42703          	lw	a4,-20(s0)
20404464:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404468:	00f71963          	bne	a4,a5,2040447a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474 (discriminator 1)
2040446c:	fe842703          	lw	a4,-24(s0)
20404470:	47bd                	li	a5,15
20404472:	00f71463          	bne	a4,a5,2040447a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
		return 22;
20404476:	47d9                	li	a5,22
20404478:	a011                	j	2040447c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040447a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:480
	}
}
2040447c:	853e                	mv	a0,a5
2040447e:	4472                	lw	s0,28(sp)
20404480:	6105                	addi	sp,sp,32
20404482:	8082                	ret

20404484 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404484:	7179                	addi	sp,sp,-48
20404486:	d606                	sw	ra,44(sp)
20404488:	d422                	sw	s0,40(sp)
2040448a:	1800                	addi	s0,sp,48
2040448c:	fca42e23          	sw	a0,-36(s0)
20404490:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404494:	fdc42503          	lw	a0,-36(s0)
20404498:	33e5                	jal	20404280 <__metal_driver_sifive_gpio0_base>
2040449a:	87aa                	mv	a5,a0
2040449c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
204044a0:	fec42783          	lw	a5,-20(s0)
204044a4:	0791                	addi	a5,a5,4
204044a6:	4398                	lw	a4,0(a5)
204044a8:	fd842783          	lw	a5,-40(s0)
204044ac:	fec42683          	lw	a3,-20(s0)
204044b0:	0691                	addi	a3,a3,4
204044b2:	8fd9                	or	a5,a5,a4
204044b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204044b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204044b8:	853e                	mv	a0,a5
204044ba:	50b2                	lw	ra,44(sp)
204044bc:	5422                	lw	s0,40(sp)
204044be:	6145                	addi	sp,sp,48
204044c0:	8082                	ret

204044c2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204044c2:	7179                	addi	sp,sp,-48
204044c4:	d606                	sw	ra,44(sp)
204044c6:	d422                	sw	s0,40(sp)
204044c8:	1800                	addi	s0,sp,48
204044ca:	fca42e23          	sw	a0,-36(s0)
204044ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044d2:	fdc42503          	lw	a0,-36(s0)
204044d6:	336d                	jal	20404280 <__metal_driver_sifive_gpio0_base>
204044d8:	87aa                	mv	a5,a0
204044da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204044de:	fec42783          	lw	a5,-20(s0)
204044e2:	0791                	addi	a5,a5,4
204044e4:	439c                	lw	a5,0(a5)
204044e6:	fd842703          	lw	a4,-40(s0)
204044ea:	fff74713          	not	a4,a4
204044ee:	86ba                	mv	a3,a4
204044f0:	fec42703          	lw	a4,-20(s0)
204044f4:	0711                	addi	a4,a4,4
204044f6:	8ff5                	and	a5,a5,a3
204044f8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204044fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204044fc:	853e                	mv	a0,a5
204044fe:	50b2                	lw	ra,44(sp)
20404500:	5422                	lw	s0,40(sp)
20404502:	6145                	addi	sp,sp,48
20404504:	8082                	ret

20404506 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404506:	7179                	addi	sp,sp,-48
20404508:	d606                	sw	ra,44(sp)
2040450a:	d422                	sw	s0,40(sp)
2040450c:	1800                	addi	s0,sp,48
2040450e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404512:	fdc42503          	lw	a0,-36(s0)
20404516:	d6bff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
2040451a:	87aa                	mv	a5,a0
2040451c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404520:	fec42783          	lw	a5,-20(s0)
20404524:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404526:	853e                	mv	a0,a5
20404528:	50b2                	lw	ra,44(sp)
2040452a:	5422                	lw	s0,40(sp)
2040452c:	6145                	addi	sp,sp,48
2040452e:	8082                	ret

20404530 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404530:	7179                	addi	sp,sp,-48
20404532:	d606                	sw	ra,44(sp)
20404534:	d422                	sw	s0,40(sp)
20404536:	1800                	addi	s0,sp,48
20404538:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040453c:	fdc42503          	lw	a0,-36(s0)
20404540:	d41ff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
20404544:	87aa                	mv	a5,a0
20404546:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
2040454a:	fec42783          	lw	a5,-20(s0)
2040454e:	07b1                	addi	a5,a5,12
20404550:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404552:	853e                	mv	a0,a5
20404554:	50b2                	lw	ra,44(sp)
20404556:	5422                	lw	s0,40(sp)
20404558:	6145                	addi	sp,sp,48
2040455a:	8082                	ret

2040455c <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2040455c:	7179                	addi	sp,sp,-48
2040455e:	d606                	sw	ra,44(sp)
20404560:	d422                	sw	s0,40(sp)
20404562:	1800                	addi	s0,sp,48
20404564:	fca42e23          	sw	a0,-36(s0)
20404568:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040456c:	fdc42503          	lw	a0,-36(s0)
20404570:	d11ff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
20404574:	87aa                	mv	a5,a0
20404576:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
2040457a:	fec42783          	lw	a5,-20(s0)
2040457e:	07a1                	addi	a5,a5,8
20404580:	439c                	lw	a5,0(a5)
20404582:	fd842703          	lw	a4,-40(s0)
20404586:	fff74713          	not	a4,a4
2040458a:	86ba                	mv	a3,a4
2040458c:	fec42703          	lw	a4,-20(s0)
20404590:	0721                	addi	a4,a4,8
20404592:	8ff5                	and	a5,a5,a3
20404594:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404596:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404598:	853e                	mv	a0,a5
2040459a:	50b2                	lw	ra,44(sp)
2040459c:	5422                	lw	s0,40(sp)
2040459e:	6145                	addi	sp,sp,48
204045a0:	8082                	ret

204045a2 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
204045a2:	7179                	addi	sp,sp,-48
204045a4:	d606                	sw	ra,44(sp)
204045a6:	d422                	sw	s0,40(sp)
204045a8:	1800                	addi	s0,sp,48
204045aa:	fca42e23          	sw	a0,-36(s0)
204045ae:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045b2:	fdc42503          	lw	a0,-36(s0)
204045b6:	ccbff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
204045ba:	87aa                	mv	a5,a0
204045bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204045c0:	fec42783          	lw	a5,-20(s0)
204045c4:	07a1                	addi	a5,a5,8
204045c6:	4398                	lw	a4,0(a5)
204045c8:	fd842783          	lw	a5,-40(s0)
204045cc:	fec42683          	lw	a3,-20(s0)
204045d0:	06a1                	addi	a3,a3,8
204045d2:	8fd9                	or	a5,a5,a4
204045d4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204045d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204045d8:	853e                	mv	a0,a5
204045da:	50b2                	lw	ra,44(sp)
204045dc:	5422                	lw	s0,40(sp)
204045de:	6145                	addi	sp,sp,48
204045e0:	8082                	ret

204045e2 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204045e2:	7179                	addi	sp,sp,-48
204045e4:	d606                	sw	ra,44(sp)
204045e6:	d422                	sw	s0,40(sp)
204045e8:	1800                	addi	s0,sp,48
204045ea:	fca42e23          	sw	a0,-36(s0)
204045ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045f2:	fdc42503          	lw	a0,-36(s0)
204045f6:	c8bff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
204045fa:	87aa                	mv	a5,a0
204045fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404600:	fec42783          	lw	a5,-20(s0)
20404604:	07b1                	addi	a5,a5,12
20404606:	4398                	lw	a4,0(a5)
20404608:	fd842783          	lw	a5,-40(s0)
2040460c:	fec42683          	lw	a3,-20(s0)
20404610:	06b1                	addi	a3,a3,12
20404612:	8fd9                	or	a5,a5,a4
20404614:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404616:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404618:	853e                	mv	a0,a5
2040461a:	50b2                	lw	ra,44(sp)
2040461c:	5422                	lw	s0,40(sp)
2040461e:	6145                	addi	sp,sp,48
20404620:	8082                	ret

20404622 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404622:	7179                	addi	sp,sp,-48
20404624:	d606                	sw	ra,44(sp)
20404626:	d422                	sw	s0,40(sp)
20404628:	1800                	addi	s0,sp,48
2040462a:	fca42e23          	sw	a0,-36(s0)
2040462e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404632:	fdc42503          	lw	a0,-36(s0)
20404636:	c4bff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
2040463a:	87aa                	mv	a5,a0
2040463c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404640:	fec42783          	lw	a5,-20(s0)
20404644:	07b1                	addi	a5,a5,12
20404646:	439c                	lw	a5,0(a5)
20404648:	fd842703          	lw	a4,-40(s0)
2040464c:	fff74713          	not	a4,a4
20404650:	86ba                	mv	a3,a4
20404652:	fec42703          	lw	a4,-20(s0)
20404656:	0731                	addi	a4,a4,12
20404658:	8ff5                	and	a5,a5,a3
2040465a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2040465c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2040465e:	853e                	mv	a0,a5
20404660:	50b2                	lw	ra,44(sp)
20404662:	5422                	lw	s0,40(sp)
20404664:	6145                	addi	sp,sp,48
20404666:	8082                	ret

20404668 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404668:	7179                	addi	sp,sp,-48
2040466a:	d606                	sw	ra,44(sp)
2040466c:	d422                	sw	s0,40(sp)
2040466e:	1800                	addi	s0,sp,48
20404670:	fca42e23          	sw	a0,-36(s0)
20404674:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404678:	fdc42503          	lw	a0,-36(s0)
2040467c:	c05ff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
20404680:	87aa                	mv	a5,a0
20404682:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404686:	fec42783          	lw	a5,-20(s0)
2040468a:	07b1                	addi	a5,a5,12
2040468c:	4398                	lw	a4,0(a5)
2040468e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404692:	fec42683          	lw	a3,-20(s0)
20404696:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404698:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040469a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040469c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040469e:	853e                	mv	a0,a5
204046a0:	50b2                	lw	ra,44(sp)
204046a2:	5422                	lw	s0,40(sp)
204046a4:	6145                	addi	sp,sp,48
204046a6:	8082                	ret

204046a8 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204046a8:	7179                	addi	sp,sp,-48
204046aa:	d606                	sw	ra,44(sp)
204046ac:	d422                	sw	s0,40(sp)
204046ae:	1800                	addi	s0,sp,48
204046b0:	fca42e23          	sw	a0,-36(s0)
204046b4:	fcb42c23          	sw	a1,-40(s0)
204046b8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046bc:	fdc42503          	lw	a0,-36(s0)
204046c0:	bc1ff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
204046c4:	87aa                	mv	a5,a0
204046c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204046ca:	fec42783          	lw	a5,-20(s0)
204046ce:	03c78793          	addi	a5,a5,60
204046d2:	439c                	lw	a5,0(a5)
204046d4:	fd842703          	lw	a4,-40(s0)
204046d8:	fff74713          	not	a4,a4
204046dc:	86ba                	mv	a3,a4
204046de:	fec42703          	lw	a4,-20(s0)
204046e2:	03c70713          	addi	a4,a4,60
204046e6:	8ff5                	and	a5,a5,a3
204046e8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204046ea:	fec42783          	lw	a5,-20(s0)
204046ee:	03878793          	addi	a5,a5,56
204046f2:	4398                	lw	a4,0(a5)
204046f4:	fd442783          	lw	a5,-44(s0)
204046f8:	fec42683          	lw	a3,-20(s0)
204046fc:	03868693          	addi	a3,a3,56
20404700:	8fd9                	or	a5,a5,a4
20404702:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404704:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404706:	853e                	mv	a0,a5
20404708:	50b2                	lw	ra,44(sp)
2040470a:	5422                	lw	s0,40(sp)
2040470c:	6145                	addi	sp,sp,48
2040470e:	8082                	ret

20404710 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404710:	7179                	addi	sp,sp,-48
20404712:	d606                	sw	ra,44(sp)
20404714:	d422                	sw	s0,40(sp)
20404716:	1800                	addi	s0,sp,48
20404718:	fca42e23          	sw	a0,-36(s0)
2040471c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404720:	fdc42503          	lw	a0,-36(s0)
20404724:	b5dff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
20404728:	87aa                	mv	a5,a0
2040472a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040472e:	fec42783          	lw	a5,-20(s0)
20404732:	03878793          	addi	a5,a5,56
20404736:	439c                	lw	a5,0(a5)
20404738:	fd842703          	lw	a4,-40(s0)
2040473c:	fff74713          	not	a4,a4
20404740:	86ba                	mv	a3,a4
20404742:	fec42703          	lw	a4,-20(s0)
20404746:	03870713          	addi	a4,a4,56
2040474a:	8ff5                	and	a5,a5,a3
2040474c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2040474e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404750:	853e                	mv	a0,a5
20404752:	50b2                	lw	ra,44(sp)
20404754:	5422                	lw	s0,40(sp)
20404756:	6145                	addi	sp,sp,48
20404758:	8082                	ret

2040475a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040475a:	7179                	addi	sp,sp,-48
2040475c:	d606                	sw	ra,44(sp)
2040475e:	d422                	sw	s0,40(sp)
20404760:	1800                	addi	s0,sp,48
20404762:	fca42e23          	sw	a0,-36(s0)
20404766:	fcb42c23          	sw	a1,-40(s0)
2040476a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040476e:	fdc42503          	lw	a0,-36(s0)
20404772:	b0fff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
20404776:	87aa                	mv	a5,a0
20404778:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
2040477c:	fd442703          	lw	a4,-44(s0)
20404780:	479d                	li	a5,7
20404782:	1ce7e963          	bltu	a5,a4,20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404786:	fd442783          	lw	a5,-44(s0)
2040478a:	00279713          	slli	a4,a5,0x2
2040478e:	204057b7          	lui	a5,0x20405
20404792:	6a478793          	addi	a5,a5,1700 # 204056a4 <__metal_driver_vtable_riscv_plic0+0x4c>
20404796:	97ba                	add	a5,a5,a4
20404798:	439c                	lw	a5,0(a5)
2040479a:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040479c:	fec42783          	lw	a5,-20(s0)
204047a0:	07e1                	addi	a5,a5,24
204047a2:	439c                	lw	a5,0(a5)
204047a4:	fd842703          	lw	a4,-40(s0)
204047a8:	fff74713          	not	a4,a4
204047ac:	86ba                	mv	a3,a4
204047ae:	fec42703          	lw	a4,-20(s0)
204047b2:	0761                	addi	a4,a4,24
204047b4:	8ff5                	and	a5,a5,a3
204047b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204047b8:	fec42783          	lw	a5,-20(s0)
204047bc:	02078793          	addi	a5,a5,32
204047c0:	439c                	lw	a5,0(a5)
204047c2:	fd842703          	lw	a4,-40(s0)
204047c6:	fff74713          	not	a4,a4
204047ca:	86ba                	mv	a3,a4
204047cc:	fec42703          	lw	a4,-20(s0)
204047d0:	02070713          	addi	a4,a4,32
204047d4:	8ff5                	and	a5,a5,a3
204047d6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204047d8:	fec42783          	lw	a5,-20(s0)
204047dc:	02878793          	addi	a5,a5,40
204047e0:	439c                	lw	a5,0(a5)
204047e2:	fd842703          	lw	a4,-40(s0)
204047e6:	fff74713          	not	a4,a4
204047ea:	86ba                	mv	a3,a4
204047ec:	fec42703          	lw	a4,-20(s0)
204047f0:	02870713          	addi	a4,a4,40
204047f4:	8ff5                	and	a5,a5,a3
204047f6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
204047f8:	fec42783          	lw	a5,-20(s0)
204047fc:	03078793          	addi	a5,a5,48
20404800:	439c                	lw	a5,0(a5)
20404802:	fd842703          	lw	a4,-40(s0)
20404806:	fff74713          	not	a4,a4
2040480a:	86ba                	mv	a3,a4
2040480c:	fec42703          	lw	a4,-20(s0)
20404810:	03070713          	addi	a4,a4,48
20404814:	8ff5                	and	a5,a5,a3
20404816:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404818:	aa35                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040481a:	fec42783          	lw	a5,-20(s0)
2040481e:	07e1                	addi	a5,a5,24
20404820:	4398                	lw	a4,0(a5)
20404822:	fd842783          	lw	a5,-40(s0)
20404826:	fec42683          	lw	a3,-20(s0)
2040482a:	06e1                	addi	a3,a3,24
2040482c:	8fd9                	or	a5,a5,a4
2040482e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404830:	a215                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404832:	fec42783          	lw	a5,-20(s0)
20404836:	02078793          	addi	a5,a5,32
2040483a:	4398                	lw	a4,0(a5)
2040483c:	fd842783          	lw	a5,-40(s0)
20404840:	fec42683          	lw	a3,-20(s0)
20404844:	02068693          	addi	a3,a3,32
20404848:	8fd9                	or	a5,a5,a4
2040484a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
2040484c:	a221                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040484e:	fec42783          	lw	a5,-20(s0)
20404852:	07e1                	addi	a5,a5,24
20404854:	4398                	lw	a4,0(a5)
20404856:	fd842783          	lw	a5,-40(s0)
2040485a:	fec42683          	lw	a3,-20(s0)
2040485e:	06e1                	addi	a3,a3,24
20404860:	8fd9                	or	a5,a5,a4
20404862:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404864:	fec42783          	lw	a5,-20(s0)
20404868:	02078793          	addi	a5,a5,32
2040486c:	4398                	lw	a4,0(a5)
2040486e:	fd842783          	lw	a5,-40(s0)
20404872:	fec42683          	lw	a3,-20(s0)
20404876:	02068693          	addi	a3,a3,32
2040487a:	8fd9                	or	a5,a5,a4
2040487c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2040487e:	a8d9                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404880:	fec42783          	lw	a5,-20(s0)
20404884:	02878793          	addi	a5,a5,40
20404888:	4398                	lw	a4,0(a5)
2040488a:	fd842783          	lw	a5,-40(s0)
2040488e:	fec42683          	lw	a3,-20(s0)
20404892:	02868693          	addi	a3,a3,40
20404896:	8fd9                	or	a5,a5,a4
20404898:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2040489a:	a86d                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040489c:	fec42783          	lw	a5,-20(s0)
204048a0:	03078793          	addi	a5,a5,48
204048a4:	4398                	lw	a4,0(a5)
204048a6:	fd842783          	lw	a5,-40(s0)
204048aa:	fec42683          	lw	a3,-20(s0)
204048ae:	03068693          	addi	a3,a3,48
204048b2:	8fd9                	or	a5,a5,a4
204048b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204048b6:	a879                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204048b8:	fec42783          	lw	a5,-20(s0)
204048bc:	02878793          	addi	a5,a5,40
204048c0:	4398                	lw	a4,0(a5)
204048c2:	fd842783          	lw	a5,-40(s0)
204048c6:	fec42683          	lw	a3,-20(s0)
204048ca:	02868693          	addi	a3,a3,40
204048ce:	8fd9                	or	a5,a5,a4
204048d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204048d2:	fec42783          	lw	a5,-20(s0)
204048d6:	03078793          	addi	a5,a5,48
204048da:	4398                	lw	a4,0(a5)
204048dc:	fd842783          	lw	a5,-40(s0)
204048e0:	fec42683          	lw	a3,-20(s0)
204048e4:	03068693          	addi	a3,a3,48
204048e8:	8fd9                	or	a5,a5,a4
204048ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
204048ec:	a0a5                	j	20404954 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204048ee:	fec42783          	lw	a5,-20(s0)
204048f2:	07e1                	addi	a5,a5,24
204048f4:	4398                	lw	a4,0(a5)
204048f6:	fd842783          	lw	a5,-40(s0)
204048fa:	fec42683          	lw	a3,-20(s0)
204048fe:	06e1                	addi	a3,a3,24
20404900:	8fd9                	or	a5,a5,a4
20404902:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404904:	fec42783          	lw	a5,-20(s0)
20404908:	02078793          	addi	a5,a5,32
2040490c:	4398                	lw	a4,0(a5)
2040490e:	fd842783          	lw	a5,-40(s0)
20404912:	fec42683          	lw	a3,-20(s0)
20404916:	02068693          	addi	a3,a3,32
2040491a:	8fd9                	or	a5,a5,a4
2040491c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040491e:	fec42783          	lw	a5,-20(s0)
20404922:	02878793          	addi	a5,a5,40
20404926:	4398                	lw	a4,0(a5)
20404928:	fd842783          	lw	a5,-40(s0)
2040492c:	fec42683          	lw	a3,-20(s0)
20404930:	02868693          	addi	a3,a3,40
20404934:	8fd9                	or	a5,a5,a4
20404936:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404938:	fec42783          	lw	a5,-20(s0)
2040493c:	03078793          	addi	a5,a5,48
20404940:	4398                	lw	a4,0(a5)
20404942:	fd842783          	lw	a5,-40(s0)
20404946:	fec42683          	lw	a3,-20(s0)
2040494a:	03068693          	addi	a3,a3,48
2040494e:	8fd9                	or	a5,a5,a4
20404950:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404952:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404954:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404956:	853e                	mv	a0,a5
20404958:	50b2                	lw	ra,44(sp)
2040495a:	5422                	lw	s0,40(sp)
2040495c:	6145                	addi	sp,sp,48
2040495e:	8082                	ret

20404960 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404960:	7179                	addi	sp,sp,-48
20404962:	d606                	sw	ra,44(sp)
20404964:	d422                	sw	s0,40(sp)
20404966:	1800                	addi	s0,sp,48
20404968:	fca42e23          	sw	a0,-36(s0)
2040496c:	fcb42c23          	sw	a1,-40(s0)
20404970:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404974:	fdc42503          	lw	a0,-36(s0)
20404978:	909ff0ef          	jal	ra,20404280 <__metal_driver_sifive_gpio0_base>
2040497c:	87aa                	mv	a5,a0
2040497e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404982:	fd442703          	lw	a4,-44(s0)
20404986:	479d                	li	a5,7
20404988:	14e7ea63          	bltu	a5,a4,20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
2040498c:	fd442783          	lw	a5,-44(s0)
20404990:	00279713          	slli	a4,a5,0x2
20404994:	204057b7          	lui	a5,0x20405
20404998:	6c478793          	addi	a5,a5,1732 # 204056c4 <__metal_driver_vtable_riscv_plic0+0x6c>
2040499c:	97ba                	add	a5,a5,a4
2040499e:	439c                	lw	a5,0(a5)
204049a0:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204049a2:	fec42783          	lw	a5,-20(s0)
204049a6:	07f1                	addi	a5,a5,28
204049a8:	4398                	lw	a4,0(a5)
204049aa:	fd842783          	lw	a5,-40(s0)
204049ae:	fec42683          	lw	a3,-20(s0)
204049b2:	06f1                	addi	a3,a3,28
204049b4:	8fd9                	or	a5,a5,a4
204049b6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204049b8:	a215                	j	20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204049ba:	fec42783          	lw	a5,-20(s0)
204049be:	02478793          	addi	a5,a5,36
204049c2:	4398                	lw	a4,0(a5)
204049c4:	fd842783          	lw	a5,-40(s0)
204049c8:	fec42683          	lw	a3,-20(s0)
204049cc:	02468693          	addi	a3,a3,36
204049d0:	8fd9                	or	a5,a5,a4
204049d2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204049d4:	a221                	j	20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204049d6:	fec42783          	lw	a5,-20(s0)
204049da:	07f1                	addi	a5,a5,28
204049dc:	4398                	lw	a4,0(a5)
204049de:	fd842783          	lw	a5,-40(s0)
204049e2:	fec42683          	lw	a3,-20(s0)
204049e6:	06f1                	addi	a3,a3,28
204049e8:	8fd9                	or	a5,a5,a4
204049ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204049ec:	fec42783          	lw	a5,-20(s0)
204049f0:	02478793          	addi	a5,a5,36
204049f4:	4398                	lw	a4,0(a5)
204049f6:	fd842783          	lw	a5,-40(s0)
204049fa:	fec42683          	lw	a3,-20(s0)
204049fe:	02468693          	addi	a3,a3,36
20404a02:	8fd9                	or	a5,a5,a4
20404a04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404a06:	a8d9                	j	20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404a08:	fec42783          	lw	a5,-20(s0)
20404a0c:	02c78793          	addi	a5,a5,44
20404a10:	4398                	lw	a4,0(a5)
20404a12:	fd842783          	lw	a5,-40(s0)
20404a16:	fec42683          	lw	a3,-20(s0)
20404a1a:	02c68693          	addi	a3,a3,44
20404a1e:	8fd9                	or	a5,a5,a4
20404a20:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404a22:	a86d                	j	20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404a24:	fec42783          	lw	a5,-20(s0)
20404a28:	03478793          	addi	a5,a5,52
20404a2c:	4398                	lw	a4,0(a5)
20404a2e:	fd842783          	lw	a5,-40(s0)
20404a32:	fec42683          	lw	a3,-20(s0)
20404a36:	03468693          	addi	a3,a3,52
20404a3a:	8fd9                	or	a5,a5,a4
20404a3c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404a3e:	a879                	j	20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404a40:	fec42783          	lw	a5,-20(s0)
20404a44:	02c78793          	addi	a5,a5,44
20404a48:	4398                	lw	a4,0(a5)
20404a4a:	fd842783          	lw	a5,-40(s0)
20404a4e:	fec42683          	lw	a3,-20(s0)
20404a52:	02c68693          	addi	a3,a3,44
20404a56:	8fd9                	or	a5,a5,a4
20404a58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404a5a:	fec42783          	lw	a5,-20(s0)
20404a5e:	03478793          	addi	a5,a5,52
20404a62:	4398                	lw	a4,0(a5)
20404a64:	fd842783          	lw	a5,-40(s0)
20404a68:	fec42683          	lw	a3,-20(s0)
20404a6c:	03468693          	addi	a3,a3,52
20404a70:	8fd9                	or	a5,a5,a4
20404a72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404a74:	a0a5                	j	20404adc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404a76:	fec42783          	lw	a5,-20(s0)
20404a7a:	07f1                	addi	a5,a5,28
20404a7c:	4398                	lw	a4,0(a5)
20404a7e:	fd842783          	lw	a5,-40(s0)
20404a82:	fec42683          	lw	a3,-20(s0)
20404a86:	06f1                	addi	a3,a3,28
20404a88:	8fd9                	or	a5,a5,a4
20404a8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404a8c:	fec42783          	lw	a5,-20(s0)
20404a90:	02478793          	addi	a5,a5,36
20404a94:	4398                	lw	a4,0(a5)
20404a96:	fd842783          	lw	a5,-40(s0)
20404a9a:	fec42683          	lw	a3,-20(s0)
20404a9e:	02468693          	addi	a3,a3,36
20404aa2:	8fd9                	or	a5,a5,a4
20404aa4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404aa6:	fec42783          	lw	a5,-20(s0)
20404aaa:	02c78793          	addi	a5,a5,44
20404aae:	4398                	lw	a4,0(a5)
20404ab0:	fd842783          	lw	a5,-40(s0)
20404ab4:	fec42683          	lw	a3,-20(s0)
20404ab8:	02c68693          	addi	a3,a3,44
20404abc:	8fd9                	or	a5,a5,a4
20404abe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404ac0:	fec42783          	lw	a5,-20(s0)
20404ac4:	03478793          	addi	a5,a5,52
20404ac8:	4398                	lw	a4,0(a5)
20404aca:	fd842783          	lw	a5,-40(s0)
20404ace:	fec42683          	lw	a3,-20(s0)
20404ad2:	03468693          	addi	a3,a3,52
20404ad6:	8fd9                	or	a5,a5,a4
20404ad8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404ada:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404adc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404ade:	853e                	mv	a0,a5
20404ae0:	50b2                	lw	ra,44(sp)
20404ae2:	5422                	lw	s0,40(sp)
20404ae4:	6145                	addi	sp,sp,48
20404ae6:	8082                	ret

20404ae8 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404ae8:	1101                	addi	sp,sp,-32
20404aea:	ce06                	sw	ra,28(sp)
20404aec:	cc22                	sw	s0,24(sp)
20404aee:	1000                	addi	s0,sp,32
20404af0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404af4:	fec42503          	lw	a0,-20(s0)
20404af8:	faeff0ef          	jal	ra,204042a6 <__metal_driver_sifive_gpio0_interrupt_parent>
20404afc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404afe:	853e                	mv	a0,a5
20404b00:	40f2                	lw	ra,28(sp)
20404b02:	4462                	lw	s0,24(sp)
20404b04:	6105                	addi	sp,sp,32
20404b06:	8082                	ret

20404b08 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404b08:	7179                	addi	sp,sp,-48
20404b0a:	d606                	sw	ra,44(sp)
20404b0c:	d422                	sw	s0,40(sp)
20404b0e:	1800                	addi	s0,sp,48
20404b10:	fca42e23          	sw	a0,-36(s0)
20404b14:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404b18:	fd842583          	lw	a1,-40(s0)
20404b1c:	fdc42503          	lw	a0,-36(s0)
20404b20:	fb0ff0ef          	jal	ra,204042d0 <__metal_driver_sifive_gpio0_interrupt_lines>
20404b24:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404b28:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404b2c:	853e                	mv	a0,a5
20404b2e:	50b2                	lw	ra,44(sp)
20404b30:	5422                	lw	s0,40(sp)
20404b32:	6145                	addi	sp,sp,48
20404b34:	8082                	ret

20404b36 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404b36:	1101                	addi	sp,sp,-32
20404b38:	ce22                	sw	s0,28(sp)
20404b3a:	1000                	addi	s0,sp,32
20404b3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b40:	fec42703          	lw	a4,-20(s0)
20404b44:	800007b7          	lui	a5,0x80000
20404b48:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404b4c:	00f71563          	bne	a4,a5,20404b56 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404b50:	100137b7          	lui	a5,0x10013
20404b54:	a011                	j	20404b58 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404b56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:571
	}
}
20404b58:	853e                	mv	a0,a5
20404b5a:	4472                	lw	s0,28(sp)
20404b5c:	6105                	addi	sp,sp,32
20404b5e:	8082                	ret

20404b60 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404b60:	1101                	addi	sp,sp,-32
20404b62:	ce22                	sw	s0,28(sp)
20404b64:	1000                	addi	s0,sp,32
20404b66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b6a:	fec42703          	lw	a4,-20(s0)
20404b6e:	800007b7          	lui	a5,0x80000
20404b72:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404b76:	00f71763          	bne	a4,a5,20404b84 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404b7a:	800007b7          	lui	a5,0x80000
20404b7e:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20404b82:	a011                	j	20404b86 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404b84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:601
	}
}
20404b86:	853e                	mv	a0,a5
20404b88:	4472                	lw	s0,28(sp)
20404b8a:	6105                	addi	sp,sp,32
20404b8c:	8082                	ret

20404b8e <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404b8e:	1101                	addi	sp,sp,-32
20404b90:	ce22                	sw	s0,28(sp)
20404b92:	1000                	addi	s0,sp,32
20404b94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b98:	fec42703          	lw	a4,-20(s0)
20404b9c:	800007b7          	lui	a5,0x80000
20404ba0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404ba4:	00f71463          	bne	a4,a5,20404bac <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:606
		return 5;
20404ba8:	4795                	li	a5,5
20404baa:	a011                	j	20404bae <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404bac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:611
	}
}
20404bae:	853e                	mv	a0,a5
20404bb0:	4472                	lw	s0,28(sp)
20404bb2:	6105                	addi	sp,sp,32
20404bb4:	8082                	ret

20404bb6 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404bb6:	1101                	addi	sp,sp,-32
20404bb8:	ce22                	sw	s0,28(sp)
20404bba:	1000                	addi	s0,sp,32
20404bbc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404bc0:	fec42703          	lw	a4,-20(s0)
20404bc4:	800007b7          	lui	a5,0x80000
20404bc8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404bcc:	00f71763          	bne	a4,a5,20404bda <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404bd0:	800007b7          	lui	a5,0x80000
20404bd4:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffec54>
20404bd8:	a011                	j	20404bdc <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404bda:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:621
	}
}
20404bdc:	853e                	mv	a0,a5
20404bde:	4472                	lw	s0,28(sp)
20404be0:	6105                	addi	sp,sp,32
20404be2:	8082                	ret

20404be4 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404be4:	1101                	addi	sp,sp,-32
20404be6:	ce22                	sw	s0,28(sp)
20404be8:	1000                	addi	s0,sp,32
20404bea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404bee:	fec42703          	lw	a4,-20(s0)
20404bf2:	800007b7          	lui	a5,0x80000
20404bf6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404bfa:	00f71563          	bne	a4,a5,20404c04 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404bfe:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404c02:	a011                	j	20404c06 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404c04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:631
	}
}
20404c06:	853e                	mv	a0,a5
20404c08:	4472                	lw	s0,28(sp)
20404c0a:	6105                	addi	sp,sp,32
20404c0c:	8082                	ret

20404c0e <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404c0e:	1101                	addi	sp,sp,-32
20404c10:	ce22                	sw	s0,28(sp)
20404c12:	1000                	addi	s0,sp,32
20404c14:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c18:	fec42703          	lw	a4,-20(s0)
20404c1c:	800007b7          	lui	a5,0x80000
20404c20:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404c24:	00f71563          	bne	a4,a5,20404c2e <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:636
		return 196608;
20404c28:	000307b7          	lui	a5,0x30
20404c2c:	a011                	j	20404c30 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404c2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:641
	}
}
20404c30:	853e                	mv	a0,a5
20404c32:	4472                	lw	s0,28(sp)
20404c34:	6105                	addi	sp,sp,32
20404c36:	8082                	ret

20404c38 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404c38:	1101                	addi	sp,sp,-32
20404c3a:	ce22                	sw	s0,28(sp)
20404c3c:	1000                	addi	s0,sp,32
20404c3e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c42:	fec42703          	lw	a4,-20(s0)
20404c46:	800007b7          	lui	a5,0x80000
20404c4a:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404c4e:	00f71563          	bne	a4,a5,20404c58 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:646
		return 196608;
20404c52:	000307b7          	lui	a5,0x30
20404c56:	a011                	j	20404c5a <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404c58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:651
	}
}
20404c5a:	853e                	mv	a0,a5
20404c5c:	4472                	lw	s0,28(sp)
20404c5e:	6105                	addi	sp,sp,32
20404c60:	8082                	ret

20404c62 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404c62:	1101                	addi	sp,sp,-32
20404c64:	ce06                	sw	ra,28(sp)
20404c66:	cc22                	sw	s0,24(sp)
20404c68:	1000                	addi	s0,sp,32
20404c6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404c6e:	fec42503          	lw	a0,-20(s0)
20404c72:	35fd                	jal	20404b60 <__metal_driver_sifive_uart0_interrupt_parent>
20404c74:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404c76:	853e                	mv	a0,a5
20404c78:	40f2                	lw	ra,28(sp)
20404c7a:	4462                	lw	s0,24(sp)
20404c7c:	6105                	addi	sp,sp,32
20404c7e:	8082                	ret

20404c80 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404c80:	1101                	addi	sp,sp,-32
20404c82:	ce06                	sw	ra,28(sp)
20404c84:	cc22                	sw	s0,24(sp)
20404c86:	1000                	addi	s0,sp,32
20404c88:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404c8c:	fec42503          	lw	a0,-20(s0)
20404c90:	3dfd                	jal	20404b8e <__metal_driver_sifive_uart0_interrupt_line>
20404c92:	87aa                	mv	a5,a0
20404c94:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404c98:	853e                	mv	a0,a5
20404c9a:	40f2                	lw	ra,28(sp)
20404c9c:	4462                	lw	s0,24(sp)
20404c9e:	6105                	addi	sp,sp,32
20404ca0:	8082                	ret

20404ca2 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404ca2:	7179                	addi	sp,sp,-48
20404ca4:	d606                	sw	ra,44(sp)
20404ca6:	d422                	sw	s0,40(sp)
20404ca8:	1800                	addi	s0,sp,48
20404caa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404cae:	fdc42503          	lw	a0,-36(s0)
20404cb2:	3551                	jal	20404b36 <__metal_driver_sifive_uart0_control_base>
20404cb4:	87aa                	mv	a5,a0
20404cb6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404cba:	fec42783          	lw	a5,-20(s0)
20404cbe:	439c                	lw	a5,0(a5)
20404cc0:	fff7c793          	not	a5,a5
20404cc4:	83fd                	srli	a5,a5,0x1f
20404cc6:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404cca:	853e                	mv	a0,a5
20404ccc:	50b2                	lw	ra,44(sp)
20404cce:	5422                	lw	s0,40(sp)
20404cd0:	6145                	addi	sp,sp,48
20404cd2:	8082                	ret

20404cd4 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404cd4:	7179                	addi	sp,sp,-48
20404cd6:	d606                	sw	ra,44(sp)
20404cd8:	d422                	sw	s0,40(sp)
20404cda:	1800                	addi	s0,sp,48
20404cdc:	fca42e23          	sw	a0,-36(s0)
20404ce0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404ce4:	fdc42503          	lw	a0,-36(s0)
20404ce8:	35b9                	jal	20404b36 <__metal_driver_sifive_uart0_control_base>
20404cea:	87aa                	mv	a5,a0
20404cec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404cf0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404cf2:	fdc42503          	lw	a0,-36(s0)
20404cf6:	3775                	jal	20404ca2 <__metal_driver_sifive_uart0_txready>
20404cf8:	87aa                	mv	a5,a0
20404cfa:	dfe5                	beqz	a5,20404cf2 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404cfc:	fec42783          	lw	a5,-20(s0)
20404d00:	fd842703          	lw	a4,-40(s0)
20404d04:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404d06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404d08:	853e                	mv	a0,a5
20404d0a:	50b2                	lw	ra,44(sp)
20404d0c:	5422                	lw	s0,40(sp)
20404d0e:	6145                	addi	sp,sp,48
20404d10:	8082                	ret

20404d12 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404d12:	7179                	addi	sp,sp,-48
20404d14:	d606                	sw	ra,44(sp)
20404d16:	d422                	sw	s0,40(sp)
20404d18:	1800                	addi	s0,sp,48
20404d1a:	fca42e23          	sw	a0,-36(s0)
20404d1e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404d22:	fdc42503          	lw	a0,-36(s0)
20404d26:	3d01                	jal	20404b36 <__metal_driver_sifive_uart0_control_base>
20404d28:	87aa                	mv	a5,a0
20404d2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404d2e:	fec42783          	lw	a5,-20(s0)
20404d32:	0791                	addi	a5,a5,4
20404d34:	439c                	lw	a5,0(a5)
20404d36:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404d3a:	fe842783          	lw	a5,-24(s0)
20404d3e:	0007d763          	bgez	a5,20404d4c <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404d42:	fd842783          	lw	a5,-40(s0)
20404d46:	577d                	li	a4,-1
20404d48:	c398                	sw	a4,0(a5)
20404d4a:	a801                	j	20404d5a <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404d4c:	fe842783          	lw	a5,-24(s0)
20404d50:	0ff7f713          	andi	a4,a5,255
20404d54:	fd842783          	lw	a5,-40(s0)
20404d58:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404d5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404d5c:	853e                	mv	a0,a5
20404d5e:	50b2                	lw	ra,44(sp)
20404d60:	5422                	lw	s0,40(sp)
20404d62:	6145                	addi	sp,sp,48
20404d64:	8082                	ret

20404d66 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404d66:	7179                	addi	sp,sp,-48
20404d68:	d622                	sw	s0,44(sp)
20404d6a:	1800                	addi	s0,sp,48
20404d6c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404d70:	fdc42783          	lw	a5,-36(s0)
20404d74:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404d78:	fec42783          	lw	a5,-20(s0)
20404d7c:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404d7e:	853e                	mv	a0,a5
20404d80:	5432                	lw	s0,44(sp)
20404d82:	6145                	addi	sp,sp,48
20404d84:	8082                	ret

20404d86 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404d86:	7179                	addi	sp,sp,-48
20404d88:	d606                	sw	ra,44(sp)
20404d8a:	d422                	sw	s0,40(sp)
20404d8c:	1800                	addi	s0,sp,48
20404d8e:	fca42e23          	sw	a0,-36(s0)
20404d92:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404d96:	fdc42783          	lw	a5,-36(s0)
20404d9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404d9e:	fdc42503          	lw	a0,-36(s0)
20404da2:	d95ff0ef          	jal	ra,20404b36 <__metal_driver_sifive_uart0_control_base>
20404da6:	87aa                	mv	a5,a0
20404da8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404dac:	fdc42503          	lw	a0,-36(s0)
20404db0:	3519                	jal	20404bb6 <__metal_driver_sifive_uart0_clock>
20404db2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404db6:	fd842703          	lw	a4,-40(s0)
20404dba:	fec42783          	lw	a5,-20(s0)
20404dbe:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404dc0:	fe442783          	lw	a5,-28(s0)
20404dc4:	cbb1                	beqz	a5,20404e18 <__metal_driver_sifive_uart0_set_baud_rate+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404dc6:	fe442783          	lw	a5,-28(s0)
20404dca:	439c                	lw	a5,0(a5)
20404dcc:	439c                	lw	a5,0(a5)
20404dce:	fe442503          	lw	a0,-28(s0)
20404dd2:	9782                	jalr	a5
20404dd4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404dd8:	fe042703          	lw	a4,-32(s0)
20404ddc:	fd842783          	lw	a5,-40(s0)
20404de0:	02f747b3          	div	a5,a4,a5
20404de4:	fff78713          	addi	a4,a5,-1
20404de8:	fe842783          	lw	a5,-24(s0)
20404dec:	07e1                	addi	a5,a5,24
20404dee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404df0:	fe842783          	lw	a5,-24(s0)
20404df4:	07a1                	addi	a5,a5,8
20404df6:	439c                	lw	a5,0(a5)
20404df8:	fe842703          	lw	a4,-24(s0)
20404dfc:	0721                	addi	a4,a4,8
20404dfe:	0017e793          	ori	a5,a5,1
20404e02:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404e04:	fe842783          	lw	a5,-24(s0)
20404e08:	07b1                	addi	a5,a5,12
20404e0a:	439c                	lw	a5,0(a5)
20404e0c:	fe842703          	lw	a4,-24(s0)
20404e10:	0731                	addi	a4,a4,12
20404e12:	0017e793          	ori	a5,a5,1
20404e16:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404e18:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404e1a:	853e                	mv	a0,a5
20404e1c:	50b2                	lw	ra,44(sp)
20404e1e:	5422                	lw	s0,40(sp)
20404e20:	6145                	addi	sp,sp,48
20404e22:	8082                	ret

20404e24 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404e24:	7139                	addi	sp,sp,-64
20404e26:	de06                	sw	ra,60(sp)
20404e28:	dc22                	sw	s0,56(sp)
20404e2a:	0080                	addi	s0,sp,64
20404e2c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404e30:	fcc42783          	lw	a5,-52(s0)
20404e34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404e38:	fcc42503          	lw	a0,-52(s0)
20404e3c:	cfbff0ef          	jal	ra,20404b36 <__metal_driver_sifive_uart0_control_base>
20404e40:	87aa                	mv	a5,a0
20404e42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404e46:	fcc42503          	lw	a0,-52(s0)
20404e4a:	d6dff0ef          	jal	ra,20404bb6 <__metal_driver_sifive_uart0_clock>
20404e4e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404e52:	fe842783          	lw	a5,-24(s0)
20404e56:	07a1                	addi	a5,a5,8
20404e58:	4398                	lw	a4,0(a5)
20404e5a:	fe842783          	lw	a5,-24(s0)
20404e5e:	07a1                	addi	a5,a5,8
20404e60:	86be                	mv	a3,a5
20404e62:	fff907b7          	lui	a5,0xfff90
20404e66:	17fd                	addi	a5,a5,-1
20404e68:	8ff9                	and	a5,a5,a4
20404e6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404e6c:	fe842783          	lw	a5,-24(s0)
20404e70:	07a1                	addi	a5,a5,8
20404e72:	4398                	lw	a4,0(a5)
20404e74:	fe842783          	lw	a5,-24(s0)
20404e78:	07a1                	addi	a5,a5,8
20404e7a:	86be                	mv	a3,a5
20404e7c:	67c1                	lui	a5,0x10
20404e7e:	8fd9                	or	a5,a5,a4
20404e80:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404e82:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404e84:	fe842783          	lw	a5,-24(s0)
20404e88:	07d1                	addi	a5,a5,20
20404e8a:	439c                	lw	a5,0(a5)
20404e8c:	8b85                	andi	a5,a5,1
20404e8e:	dbfd                	beqz	a5,20404e84 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404e90:	fe842783          	lw	a5,-24(s0)
20404e94:	07a1                	addi	a5,a5,8
20404e96:	439c                	lw	a5,0(a5)
20404e98:	8b89                	andi	a5,a5,2
20404e9a:	c399                	beqz	a5,20404ea0 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404e9c:	47a5                	li	a5,9
20404e9e:	a011                	j	20404ea2 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404ea0:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404ea2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404ea6:	fe442783          	lw	a5,-28(s0)
20404eaa:	439c                	lw	a5,0(a5)
20404eac:	439c                	lw	a5,0(a5)
20404eae:	fe442503          	lw	a0,-28(s0)
20404eb2:	9782                	jalr	a5
20404eb4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404eb8:	fe042703          	lw	a4,-32(s0)
20404ebc:	fdc42783          	lw	a5,-36(s0)
20404ec0:	02f707b3          	mul	a5,a4,a5
20404ec4:	873e                	mv	a4,a5
20404ec6:	fec42783          	lw	a5,-20(s0)
20404eca:	43dc                	lw	a5,4(a5)
20404ecc:	02f757b3          	divu	a5,a4,a5
20404ed0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404ed4:	fc042a23          	sw	zero,-44(s0)
20404ed8:	a039                	j	20404ee6 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404eda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404edc:	fd442783          	lw	a5,-44(s0)
20404ee0:	0785                	addi	a5,a5,1
20404ee2:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404ee6:	fd442783          	lw	a5,-44(s0)
20404eea:	fd842703          	lw	a4,-40(s0)
20404eee:	fee7c6e3          	blt	a5,a4,20404eda <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404ef2:	0001                	nop
20404ef4:	50f2                	lw	ra,60(sp)
20404ef6:	5462                	lw	s0,56(sp)
20404ef8:	6121                	addi	sp,sp,64
20404efa:	8082                	ret

20404efc <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404efc:	7179                	addi	sp,sp,-48
20404efe:	d606                	sw	ra,44(sp)
20404f00:	d422                	sw	s0,40(sp)
20404f02:	1800                	addi	s0,sp,48
20404f04:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404f08:	fdc42783          	lw	a5,-36(s0)
20404f0c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404f10:	fec42703          	lw	a4,-20(s0)
20404f14:	fec42783          	lw	a5,-20(s0)
20404f18:	43dc                	lw	a5,4(a5)
20404f1a:	85be                	mv	a1,a5
20404f1c:	853a                	mv	a0,a4
20404f1e:	d83fc0ef          	jal	ra,20401ca0 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404f22:	0001                	nop
20404f24:	50b2                	lw	ra,44(sp)
20404f26:	5422                	lw	s0,40(sp)
20404f28:	6145                	addi	sp,sp,48
20404f2a:	8082                	ret

20404f2c <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404f2c:	7139                	addi	sp,sp,-64
20404f2e:	de06                	sw	ra,60(sp)
20404f30:	dc22                	sw	s0,56(sp)
20404f32:	0080                	addi	s0,sp,64
20404f34:	fca42623          	sw	a0,-52(s0)
20404f38:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404f3c:	fcc42783          	lw	a5,-52(s0)
20404f40:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404f44:	fcc42503          	lw	a0,-52(s0)
20404f48:	c6fff0ef          	jal	ra,20404bb6 <__metal_driver_sifive_uart0_clock>
20404f4c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404f50:	fcc42503          	lw	a0,-52(s0)
20404f54:	c91ff0ef          	jal	ra,20404be4 <__metal_driver_sifive_uart0_pinmux>
20404f58:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404f5c:	fe842783          	lw	a5,-24(s0)
20404f60:	c7b9                	beqz	a5,20404fae <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404f62:	fec42783          	lw	a5,-20(s0)
20404f66:	20405737          	lui	a4,0x20405
20404f6a:	e2470713          	addi	a4,a4,-476 # 20404e24 <pre_rate_change_callback_func>
20404f6e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404f70:	fec42783          	lw	a5,-20(s0)
20404f74:	fcc42703          	lw	a4,-52(s0)
20404f78:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404f7a:	fec42783          	lw	a5,-20(s0)
20404f7e:	07a1                	addi	a5,a5,8
20404f80:	85be                	mv	a1,a5
20404f82:	fe842503          	lw	a0,-24(s0)
20404f86:	20f1                	jal	20405052 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404f88:	fec42783          	lw	a5,-20(s0)
20404f8c:	20405737          	lui	a4,0x20405
20404f90:	efc70713          	addi	a4,a4,-260 # 20404efc <post_rate_change_callback_func>
20404f94:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20404f96:	fec42783          	lw	a5,-20(s0)
20404f9a:	fcc42703          	lw	a4,-52(s0)
20404f9e:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20404fa0:	fec42783          	lw	a5,-20(s0)
20404fa4:	07d1                	addi	a5,a5,20
20404fa6:	85be                	mv	a1,a5
20404fa8:	fe842503          	lw	a0,-24(s0)
20404fac:	28d9                	jal	20405082 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20404fae:	fec42783          	lw	a5,-20(s0)
20404fb2:	fc842583          	lw	a1,-56(s0)
20404fb6:	853e                	mv	a0,a5
20404fb8:	ce9fc0ef          	jal	ra,20401ca0 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20404fbc:	fe442783          	lw	a5,-28(s0)
20404fc0:	cb95                	beqz	a5,20404ff4 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20404fc2:	fcc42503          	lw	a0,-52(s0)
20404fc6:	c49ff0ef          	jal	ra,20404c0e <__metal_driver_sifive_uart0_pinmux_output_selector>
20404fca:	87aa                	mv	a5,a0
20404fcc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20404fd0:	fcc42503          	lw	a0,-52(s0)
20404fd4:	c65ff0ef          	jal	ra,20404c38 <__metal_driver_sifive_uart0_pinmux_source_selector>
20404fd8:	87aa                	mv	a5,a0
20404fda:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20404fde:	fe442783          	lw	a5,-28(s0)
20404fe2:	439c                	lw	a5,0(a5)
20404fe4:	53dc                	lw	a5,36(a5)
20404fe6:	fdc42603          	lw	a2,-36(s0)
20404fea:	fe042583          	lw	a1,-32(s0)
20404fee:	fe442503          	lw	a0,-28(s0)
20404ff2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20404ff4:	0001                	nop
20404ff6:	50f2                	lw	ra,60(sp)
20404ff8:	5462                	lw	s0,56(sp)
20404ffa:	6121                	addi	sp,sp,64
20404ffc:	8082                	ret

20404ffe <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20404ffe:	7179                	addi	sp,sp,-48
20405000:	d622                	sw	s0,44(sp)
20405002:	1800                	addi	s0,sp,48
20405004:	fca42e23          	sw	a0,-36(s0)
20405008:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040500c:	fd842783          	lw	a5,-40(s0)
20405010:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405014:	fdc42783          	lw	a5,-36(s0)
20405018:	e781                	bnez	a5,20405020 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
2040501a:	fd842783          	lw	a5,-40(s0)
2040501e:	a035                	j	2040504a <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405020:	fdc42783          	lw	a5,-36(s0)
20405024:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405028:	a031                	j	20405034 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
2040502a:	fec42783          	lw	a5,-20(s0)
2040502e:	479c                	lw	a5,8(a5)
20405030:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405034:	fec42783          	lw	a5,-20(s0)
20405038:	479c                	lw	a5,8(a5)
2040503a:	fbe5                	bnez	a5,2040502a <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
2040503c:	fec42783          	lw	a5,-20(s0)
20405040:	fd842703          	lw	a4,-40(s0)
20405044:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405046:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
2040504a:	853e                	mv	a0,a5
2040504c:	5432                	lw	s0,44(sp)
2040504e:	6145                	addi	sp,sp,48
20405050:	8082                	ret

20405052 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405052:	1101                	addi	sp,sp,-32
20405054:	ce06                	sw	ra,28(sp)
20405056:	cc22                	sw	s0,24(sp)
20405058:	1000                	addi	s0,sp,32
2040505a:	fea42623          	sw	a0,-20(s0)
2040505e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405062:	fec42783          	lw	a5,-20(s0)
20405066:	43dc                	lw	a5,4(a5)
20405068:	fe842583          	lw	a1,-24(s0)
2040506c:	853e                	mv	a0,a5
2040506e:	3f41                	jal	20404ffe <_metal_clock_append_to_callbacks>
20405070:	872a                	mv	a4,a0
20405072:	fec42783          	lw	a5,-20(s0)
20405076:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405078:	0001                	nop
2040507a:	40f2                	lw	ra,28(sp)
2040507c:	4462                	lw	s0,24(sp)
2040507e:	6105                	addi	sp,sp,32
20405080:	8082                	ret

20405082 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405082:	1101                	addi	sp,sp,-32
20405084:	ce06                	sw	ra,28(sp)
20405086:	cc22                	sw	s0,24(sp)
20405088:	1000                	addi	s0,sp,32
2040508a:	fea42623          	sw	a0,-20(s0)
2040508e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405092:	fec42783          	lw	a5,-20(s0)
20405096:	479c                	lw	a5,8(a5)
20405098:	fe842583          	lw	a1,-24(s0)
2040509c:	853e                	mv	a0,a5
2040509e:	3785                	jal	20404ffe <_metal_clock_append_to_callbacks>
204050a0:	872a                	mv	a4,a0
204050a2:	fec42783          	lw	a5,-20(s0)
204050a6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204050a8:	0001                	nop
204050aa:	40f2                	lw	ra,28(sp)
204050ac:	4462                	lw	s0,24(sp)
204050ae:	6105                	addi	sp,sp,32
204050b0:	8082                	ret

204050b2 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204050b2:	1101                	addi	sp,sp,-32
204050b4:	ce06                	sw	ra,28(sp)
204050b6:	cc22                	sw	s0,24(sp)
204050b8:	1000                	addi	s0,sp,32
204050ba:	fea42623          	sw	a0,-20(s0)
204050be:	fec42783          	lw	a5,-20(s0)
204050c2:	439c                	lw	a5,0(a5)
204050c4:	57dc                	lw	a5,44(a5)
204050c6:	fec42503          	lw	a0,-20(s0)
204050ca:	9782                	jalr	a5
204050cc:	87aa                	mv	a5,a0
204050ce:	853e                	mv	a0,a5
204050d0:	40f2                	lw	ra,28(sp)
204050d2:	4462                	lw	s0,24(sp)
204050d4:	6105                	addi	sp,sp,32
204050d6:	8082                	ret

204050d8 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204050d8:	1101                	addi	sp,sp,-32
204050da:	ce22                	sw	s0,28(sp)
204050dc:	1000                	addi	s0,sp,32
204050de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204050e2:	fec42783          	lw	a5,-20(s0)
204050e6:	eb89                	bnez	a5,204050f8 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204050e8:	fec42703          	lw	a4,-20(s0)
204050ec:	070a                	slli	a4,a4,0x2
204050ee:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204050f2:	97ba                	add	a5,a5,a4
204050f4:	439c                	lw	a5,0(a5)
204050f6:	a011                	j	204050fa <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
204050f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
204050fa:	853e                	mv	a0,a5
204050fc:	4472                	lw	s0,28(sp)
204050fe:	6105                	addi	sp,sp,32
20405100:	8082                	ret

20405102 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405102:	1101                	addi	sp,sp,-32
20405104:	ce22                	sw	s0,28(sp)
20405106:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405108:	f14027f3          	csrr	a5,mhartid
2040510c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405110:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405114:	853e                	mv	a0,a5
20405116:	4472                	lw	s0,28(sp)
20405118:	6105                	addi	sp,sp,32
2040511a:	8082                	ret

2040511c <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040511c:	1101                	addi	sp,sp,-32
2040511e:	ce22                	sw	s0,28(sp)
20405120:	1000                	addi	s0,sp,32
20405122:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405126:	0001                	nop
20405128:	bffd                	j	20405126 <metal_shutdown+0xa>
	...

20405180 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405180:	c76fd06f          	j	204025f6 <metal_interrupt_vector_handler>

20405184 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405184:	c72fd06f          	j	204025f6 <metal_interrupt_vector_handler>

20405188 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405188:	c6efd06f          	j	204025f6 <metal_interrupt_vector_handler>

2040518c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040518c:	c98fd06f          	j	20402624 <metal_software_interrupt_vector_handler>

20405190 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405190:	c66fd06f          	j	204025f6 <metal_interrupt_vector_handler>

20405194 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405194:	c62fd06f          	j	204025f6 <metal_interrupt_vector_handler>

20405198 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405198:	c5efd06f          	j	204025f6 <metal_interrupt_vector_handler>

2040519c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040519c:	d7afd06f          	j	20402716 <metal_timer_interrupt_vector_handler>

204051a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204051a0:	c56fd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204051a4:	c52fd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204051a8:	c4efd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204051ac:	c4afd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204051b0:	c46fd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204051b4:	c42fd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204051b8:	c3efd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204051bc:	c3afd06f          	j	204025f6 <metal_interrupt_vector_handler>

204051c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204051c0:	835fd06f          	j	204029f4 <metal_lc0_interrupt_vector_handler>

204051c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204051c4:	8c3fd06f          	j	20402a86 <metal_lc1_interrupt_vector_handler>

204051c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204051c8:	951fd06f          	j	20402b18 <metal_lc2_interrupt_vector_handler>

204051cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204051cc:	9dffd06f          	j	20402baa <metal_lc3_interrupt_vector_handler>

204051d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204051d0:	a6dfd06f          	j	20402c3c <metal_lc4_interrupt_vector_handler>

204051d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204051d4:	afbfd06f          	j	20402cce <metal_lc5_interrupt_vector_handler>

204051d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204051d8:	b89fd06f          	j	20402d60 <metal_lc6_interrupt_vector_handler>

204051dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204051dc:	c17fd06f          	j	20402df2 <metal_lc7_interrupt_vector_handler>

204051e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204051e0:	ca5fd06f          	j	20402e84 <metal_lc8_interrupt_vector_handler>

204051e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204051e4:	d33fd06f          	j	20402f16 <metal_lc9_interrupt_vector_handler>

204051e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204051e8:	dc1fd06f          	j	20402fa8 <metal_lc10_interrupt_vector_handler>

204051ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204051ec:	e4ffd06f          	j	2040303a <metal_lc11_interrupt_vector_handler>

204051f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204051f0:	eddfd06f          	j	204030cc <metal_lc12_interrupt_vector_handler>

204051f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204051f4:	f6bfd06f          	j	2040315e <metal_lc13_interrupt_vector_handler>

204051f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204051f8:	ff9fd06f          	j	204031f0 <metal_lc14_interrupt_vector_handler>

204051fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204051fc:	886fe06f          	j	20403282 <metal_lc15_interrupt_vector_handler>

20405200 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:120
{
20405200:	1101                	addi	sp,sp,-32
20405202:	ce22                	sw	s0,28(sp)
20405204:	1000                	addi	s0,sp,32
20405206:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040520a:	fec42703          	lw	a4,-20(s0)
2040520e:	800007b7          	lui	a5,0x80000
20405212:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffec54>
20405216:	00f71763          	bne	a4,a5,20405224 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040521a:	03dfd7b7          	lui	a5,0x3dfd
2040521e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405222:	a011                	j	20405226 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:125
		return 0;
20405224:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:127
}
20405226:	853e                	mv	a0,a5
20405228:	4472                	lw	s0,28(sp)
2040522a:	6105                	addi	sp,sp,32
2040522c:	8082                	ret

2040522e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040522e:	1101                	addi	sp,sp,-32
20405230:	ce06                	sw	ra,28(sp)
20405232:	cc22                	sw	s0,24(sp)
20405234:	1000                	addi	s0,sp,32
20405236:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040523a:	fec42503          	lw	a0,-20(s0)
2040523e:	37c9                	jal	20405200 <__metal_driver_fixed_clock_rate>
20405240:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405242:	853e                	mv	a0,a5
20405244:	40f2                	lw	ra,28(sp)
20405246:	4462                	lw	s0,24(sp)
20405248:	6105                	addi	sp,sp,32
2040524a:	8082                	ret

2040524c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040524c:	1101                	addi	sp,sp,-32
2040524e:	ce06                	sw	ra,28(sp)
20405250:	cc22                	sw	s0,24(sp)
20405252:	1000                	addi	s0,sp,32
20405254:	fea42623          	sw	a0,-20(s0)
20405258:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040525c:	fec42503          	lw	a0,-20(s0)
20405260:	37f9                	jal	2040522e <__metal_driver_fixed_clock_get_rate_hz>
20405262:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405264:	853e                	mv	a0,a5
20405266:	40f2                	lw	ra,28(sp)
20405268:	4462                	lw	s0,24(sp)
2040526a:	6105                	addi	sp,sp,32
2040526c:	8082                	ret

2040526e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040526e:	1101                	addi	sp,sp,-32
20405270:	ce06                	sw	ra,28(sp)
20405272:	cc22                	sw	s0,24(sp)
20405274:	1000                	addi	s0,sp,32
20405276:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040527a:	fec42503          	lw	a0,-20(s0)
2040527e:	3d79                	jal	2040511c <metal_shutdown>
