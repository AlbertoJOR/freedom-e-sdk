
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/debug/LCM.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/debug/LCM.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005884 memsz 0x00005884 flags rwx
    LOAD off    0x00007770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x00000c9c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405888 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005180  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000500  20405380  20405380  00006380  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405880  20405880  00006880  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405888  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000009c  80000770  80000770  00007770  2**3  ALLOC
  6 .stack            00000400  8000080c  8000080c  00007770  2**0  ALLOC
  7 .heap             00000800  80000c0c  80000c0c  00007770  2**0  ALLOC
  8 .debug_info       000141bb  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026d5  00000000  00000000  0001b92b  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008a0  00000000  00000000  0001e000  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000738  00000000  00000000  0001e8a0  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007777  00000000  00000000  0001efd8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036c1  00000000  00000000  0002674f  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00029e10  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  00029e38  2**0  CONTENTS, READONLY
 16 .debug_frame      000023c8  00000000  00000000  00029e64  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405380 l    d  .rodata	00000000 .rodata
20405880 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
8000080c l    d  .stack	00000000 .stack
80000c0c l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
2040552c l       .rodata	00000000 argv
20405530 l       .rodata	00000000 envp
20405534 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 LCM.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400b0c l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
2040105c l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
8000077c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401d2a l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401dd4 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401dfa l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401e1e l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401e5a l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401fba l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204024ec l     F .text	00000024 __metal_driver_cpu_hartid
20402510 l     F .text	0000002a __metal_driver_cpu_timebase
2040253a l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403d94 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403dbe l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403de6 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403e0e l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403e36 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404380 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204043a6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204043d0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404c36 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404c60 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404c8e l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404cb6 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404ce4 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404d0e l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404d38 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404f24 l     F .text	000000d8 pre_rate_change_callback_func
20404ffc l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-vector.o
20405280 l       .text	00000000 IRQ_0
20405284 l       .text	00000000 IRQ_1
20405288 l       .text	00000000 IRQ_2
2040528c l       .text	00000000 IRQ_3
20405290 l       .text	00000000 IRQ_4
20405294 l       .text	00000000 IRQ_5
20405298 l       .text	00000000 IRQ_6
2040529c l       .text	00000000 IRQ_7
204052a0 l       .text	00000000 IRQ_8
204052a4 l       .text	00000000 IRQ_9
204052a8 l       .text	00000000 IRQ_10
204052ac l       .text	00000000 IRQ_11
204052b0 l       .text	00000000 IRQ_12
204052b4 l       .text	00000000 IRQ_13
204052b8 l       .text	00000000 IRQ_14
204052bc l       .text	00000000 IRQ_15
204052c0 l       .text	00000000 IRQ_LC0
204052c4 l       .text	00000000 IRQ_LC1
204052c8 l       .text	00000000 IRQ_LC2
204052cc l       .text	00000000 IRQ_LC3
204052d0 l       .text	00000000 IRQ_LC4
204052d4 l       .text	00000000 IRQ_LC5
204052d8 l       .text	00000000 IRQ_LC6
204052dc l       .text	00000000 IRQ_LC7
204052e0 l       .text	00000000 IRQ_LC8
204052e4 l       .text	00000000 IRQ_LC9
204052e8 l       .text	00000000 IRQ_LC10
204052ec l       .text	00000000 IRQ_LC11
204052f0 l       .text	00000000 IRQ_LC12
204052f4 l       .text	00000000 IRQ_LC13
204052f8 l       .text	00000000 IRQ_LC14
204052fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405300 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405884 l       .init_array	00000000 __fini_array_end
20405884 l       .init_array	00000000 __fini_array_start
20405884 l       .init_array	00000000 __init_array_end
20405880 l       .init_array	00000000 __preinit_array_end
20405880 l       .init_array	00000000 __init_array_start
20405880 l       .init_array	00000000 __preinit_array_start
204005f8 g     F .text	0000002c putchar
2040585c g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204014c0 g     F .text	00000028 _isatty_r
20402d3c  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204006a6 g     F .text	000000da _puts_r
204014e8 g     F .text	0000002c _lseek_r
20404e86 g     F .text	0000009e __metal_driver_sifive_uart0_set_baud_rate
20402196 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402caa  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204034fc g     F .text	00000038 __metal_valid_interrupt_id
204005b4 g     F .text	00000044 printf
20403922 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
204050fe g     F .text	00000054 _metal_clock_append_to_callbacks
20403e86 g     F .text	00000038 __metal_plic0_complete_interrupt
2040377c g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401406 g     F .text	00000036 __sseek
20400bc2 g     F .text	0000006a __sinit
2040078e g     F .text	000000c0 __swbuf_r
20400b7e g     F .text	00000044 __sfmoreglue
20401530 g     F .text	00000002 __malloc_unlock
204051d8 g     F .text	0000002a metal_cpu_get
80000728 g     O .data	00000020 __metal_dt_serial_10013000
20404810 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405540 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
8000080c g       .bss	00000000 metal_segment_bss_target_end
20401e8a g     F .text	0000009a __metal_clint0_mtime_get
20403d28 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204045c2 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
20401aae g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404da2 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20401f24 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401496 g     F .text	0000002a _fstat_r
20404a60 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000808 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405152 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403016  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405794 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405754 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401da6 g     F .text	0000002e metal_uart_set_baud_rate
2040502c g     F .text	000000d2 __metal_driver_sifive_uart0_init
204039b6 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80000c0c g       .heap	00000000 metal_segment_heap_target_start
20400b74 g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20402f84  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400780 g     F .text	0000000e puts
2040325e  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204026ce g     F .text	00000018 __metal_default_exception_handler
2040192e g     F .text	00000026 _fstat
204024b8 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403f22 g     F .text	00000062 __metal_plic0_set_priority
2040393e g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402564 g     F .text	0000002c __metal_driver_cpu_get
20405708 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204025c2 g     F .text	00000018 __metal_interrupt_global_disable
20402ef2  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204030a8  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401360 g     F .text	00000028 _sbrk_r
20404338 g     F .text	00000048 __metal_driver_riscv_plic0_disable
204035f0 g     F .text	0000004e __metal_exception_register
204018e0 g     F .text	0000002c _read_r
20403b4a g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
204046a2 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204027ba g     F .text	00000064 __metal_default_sw_handler
20405182 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404d62 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401954 g     F .text	00000020 _isatty
20404768 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
2040021e g     F .text	0000005c gcdCompute
2040281e  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401b1e g     F .text	0000006a __libc_init_array
204046e2 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040313a  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204038ca g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
204019c8 g     F .text	0000006e _sbrk
2040465c g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
20402624 g     F .text	0000001a __metal_interrupt_timer_disable
2040485a g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403c00 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405820 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204047a8 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401ae6 g     F .text	00000038 __libc_fini_array
20404be8 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403b8a g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402676 g     F .text	0000002c __metal_interrupt_local_enable
20402484 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401cd8 g     F .text	0000002c metal_tty_putc
20404044 g     F .text	00000018 __metal_plic0_default_handler
20400624 g     F .text	00000082 _putc_r
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405490 g     O .rodata	00000020 __sf_fake_stderr
2040265a g     F .text	0000001c __metal_interrupt_external_disable
20404d80 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
2040399a g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040363e g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401086 g     F .text	00000042 __sfputs_r
20403ce2 g     F .text	00000046 __metal_driver_cpu_exception_register
204025da g     F .text	00000018 __metal_interrupt_software_enable
20402b86  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401514 g     F .text	0000001a memchr
20400ed2 g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403414 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401c10 g     F .text	000000c8 __call_exitprocs
80000c0c g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401974 g     F .text	0000002a _lseek
20403cc2 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403d56 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
2040263e g     F .text	0000001c __metal_interrupt_external_enable
20401b88 g     F .text	00000088 __register_exitproc
20404dd4 g     F .text	0000003e __metal_driver_sifive_uart0_putc
204040ea g     F .text	00000144 __metal_driver_riscv_plic0_init
204042f0 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404630 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402e60  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402590 g     F .text	0000001a __metal_myhart_id
20404c08 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040272c  w    F .text	0000008e metal_software_interrupt_vector_handler
204038f6 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
2040146e g     F .text	00000028 _close_r
20404e66 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402078 g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
2040084e g     F .text	00000110 __swsetup_r
20400c2c g     F .text	0000009e __sfp
20401388 g     F .text	00000030 __sread
20404584 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
204026fe  w    F .text	0000002e metal_interrupt_vector_handler
2040152e g     F .text	00000002 __malloc_lock
20400aa8 g     F .text	00000064 _fflush_r
20403ef6 g     F .text	0000002c __metal_plic0_get_threshold
204054b0 g     O .rodata	00000020 __sf_fake_stdin
20403534 g     F .text	000000bc __metal_local_interrupt_enable
2040234e g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400e2a g     F .text	000000a8 memset
20402dce  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040027a g     F .text	0000033a main
80000770 g       .data	00000000 metal_segment_data_target_end
20403b9e g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403c62 g     F .text	00000060 __metal_driver_cpu_get_msip
2040521c g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403d74 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403e58 g     F .text	0000002e __metal_plic0_claim_interrupt
2040143c g     F .text	00000006 __sclose
204031cc  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400f7e g     F .text	000000de _malloc_r
2040217a g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403a28 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405202 g     F .text	0000001a metal_cpu_get_current_hartid
20405280 g       .text	00000000 __metal_vector_table
20405888 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
204005b4 g     F .text	00000044 iprintf
204025aa g     F .text	00000018 __metal_interrupt_global_enable
20401aa4 g     F .text	0000000a atexit
20401d04 g     F .text	00000026 metal_tty_putc_raw
20401442 g     F .text	0000002c _write_r
2040260a g     F .text	0000001a __metal_interrupt_timer_enable
20404e12 g     F .text	00000054 __metal_driver_sifive_uart0_getc
2040229c g     F .text	000000b2 __metal_driver_riscv_clint0_disable
20401532 g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
20403ad4 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
2040095e g     F .text	0000014a __sflush_r
2040532e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204021ea g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405888 g       *ABS*	00000000 metal_segment_data_source_start
8000140c g       .heap	00000000 metal_segment_heap_target_end
20403464 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400d36 g     F .text	00000058 __swhatbuf_r
20404722 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204028ac g     F .text	00000066 __metal_default_timer_handler
20401a36 g     F .text	0000006e _write
2040405c g     F .text	0000008e __metal_plic0_handler
20402c18  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403382  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204051b2 g     F .text	00000026 metal_cpu_interrupt_controller
204013b8 g     F .text	0000004e __swrite
20401aba g     F .text	0000002c exit
204010c8 g     F .text	00000298 _vfiprintf_r
20400cca g     F .text	0000006c _fwalk_reent
2040534c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
204054d0 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
204026e6 g     F .text	00000018 __metal_default_interrupt_handler
20401d78 g     F .text	0000002e metal_uart_putc
2040199e g     F .text	0000002a _read
20404606 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402980 g     F .text	0000014e __metal_exception_handler
20402af4  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040536e g     F .text	00000012 _exit
20403a6e g     F .text	00000066 __metal_driver_cpu_mtime_get
20400d8e g     F .text	0000009c __smakebuf_r
20402152 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
2040163e g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
204032f0  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401ff0 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
204010c8 g     F .text	00000298 _vfprintf_r
20403b60 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403fb8 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403b74 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
204026a2 g     F .text	0000002c __metal_interrupt_local_disable
204025f2 g     F .text	00000018 __metal_interrupt_software_disable
20403f84 g     F .text	00000034 __metal_plic0_get_priority
20401d4c g     F .text	0000002c metal_uart_init
20403ebe g     F .text	00000038 __metal_plic0_set_threshold
2040190c g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
2040422e g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	cc418113          	addi	sp,gp,-828 # 80000c0c <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00005297          	auipc	t0,0x5
204000ac:	7e028293          	addi	t0,t0,2016 # 20405888 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00005297          	auipc	t0,0x5
204000d8:	7b428293          	addi	t0,t0,1972 # 20405888 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	66830313          	addi	t1,t1,1640 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	8c418393          	addi	t2,gp,-1852 # 8000080c <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	9c050513          	addi	a0,a0,-1600 # 20401ae6 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	177010ef          	jal	ra,20401aa4 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	1ed010ef          	jal	ra,20401b1e <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	3d258593          	addi	a1,a1,978 # 2040552c <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	3ce60613          	addi	a2,a2,974 # 20405530 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	14f010ef          	jal	ra,20401aba <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	20fd                	jal	2040027a <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/../RoCCcommon/csr.h:50

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/../RoCCcommon/csr.h:51
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/../RoCCcommon/csr.h:52
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/../RoCCcommon/csr.h:53
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/../RoCCcommon/csr.h:54
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <gcdCompute>:
gcdCompute():
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:11
#include "../RoCCcommon/rocc.h"

#include<stdio.h>
#define SIZE 10

unsigned gcdCompute(unsigned a, unsigned b){
2040021e:	7179                	addi	sp,sp,-48
20400220:	d622                	sw	s0,44(sp)
20400222:	1800                	addi	s0,sp,48
20400224:	fca42e23          	sw	a0,-36(s0)
20400228:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:13
	unsigned temp;
	while(a != b){
2040022c:	a81d                	j	20400262 <gcdCompute+0x44>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:14
		if(a>b){
2040022e:	fdc42703          	lw	a4,-36(s0)
20400232:	fd842783          	lw	a5,-40(s0)
20400236:	00e7fe63          	bgeu	a5,a4,20400252 <gcdCompute+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:15
			temp = b;
2040023a:	fd842783          	lw	a5,-40(s0)
2040023e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:16
			b = a;
20400242:	fdc42783          	lw	a5,-36(s0)
20400246:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:17
			a = temp;
2040024a:	fec42783          	lw	a5,-20(s0)
2040024e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:19
		}
		b = b - a;
20400252:	fd842703          	lw	a4,-40(s0)
20400256:	fdc42783          	lw	a5,-36(s0)
2040025a:	40f707b3          	sub	a5,a4,a5
2040025e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:13
	while(a != b){
20400262:	fdc42703          	lw	a4,-36(s0)
20400266:	fd842783          	lw	a5,-40(s0)
2040026a:	fcf712e3          	bne	a4,a5,2040022e <gcdCompute+0x10>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:21
	}
	return a;
2040026e:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:22
}
20400272:	853e                	mv	a0,a5
20400274:	5432                	lw	s0,44(sp)
20400276:	6145                	addi	sp,sp,48
20400278:	8082                	ret

2040027a <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:26



int main(void){
2040027a:	7115                	addi	sp,sp,-224
2040027c:	cf86                	sw	ra,220(sp)
2040027e:	cda2                	sw	s0,216(sp)
20400280:	cba6                	sw	s1,212(sp)
20400282:	c9ca                	sw	s2,208(sp)
20400284:	c7ce                	sw	s3,204(sp)
20400286:	c5d2                	sw	s4,200(sp)
20400288:	c3d6                	sw	s5,196(sp)
2040028a:	1180                	addi	s0,sp,224
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:27
	unsigned   randNum1[SIZE] = {
2040028c:	204057b7          	lui	a5,0x20405
20400290:	44078793          	addi	a5,a5,1088 # 20405440 <_exit+0xd2>
20400294:	0007ae03          	lw	t3,0(a5)
20400298:	0047a303          	lw	t1,4(a5)
2040029c:	0087a883          	lw	a7,8(a5)
204002a0:	00c7a803          	lw	a6,12(a5)
204002a4:	4b88                	lw	a0,16(a5)
204002a6:	4bcc                	lw	a1,20(a5)
204002a8:	4f90                	lw	a2,24(a5)
204002aa:	4fd4                	lw	a3,28(a5)
204002ac:	5398                	lw	a4,32(a5)
204002ae:	53dc                	lw	a5,36(a5)
204002b0:	fbc42223          	sw	t3,-92(s0)
204002b4:	fa642423          	sw	t1,-88(s0)
204002b8:	fb142623          	sw	a7,-84(s0)
204002bc:	fb042823          	sw	a6,-80(s0)
204002c0:	faa42a23          	sw	a0,-76(s0)
204002c4:	fab42c23          	sw	a1,-72(s0)
204002c8:	fac42e23          	sw	a2,-68(s0)
204002cc:	fcd42023          	sw	a3,-64(s0)
204002d0:	fce42223          	sw	a4,-60(s0)
204002d4:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:29
            26985, 84546, 46198, 38570, 46417, 49941, 8138, 8827, 99324, 96819};
	unsigned randNum2[SIZE] = {
204002d8:	204057b7          	lui	a5,0x20405
204002dc:	46878793          	addi	a5,a5,1128 # 20405468 <_exit+0xfa>
204002e0:	0007ae03          	lw	t3,0(a5)
204002e4:	0047a303          	lw	t1,4(a5)
204002e8:	0087a883          	lw	a7,8(a5)
204002ec:	00c7a803          	lw	a6,12(a5)
204002f0:	4b88                	lw	a0,16(a5)
204002f2:	4bcc                	lw	a1,20(a5)
204002f4:	4f90                	lw	a2,24(a5)
204002f6:	4fd4                	lw	a3,28(a5)
204002f8:	5398                	lw	a4,32(a5)
204002fa:	53dc                	lw	a5,36(a5)
204002fc:	f7c42e23          	sw	t3,-132(s0)
20400300:	f8642023          	sw	t1,-128(s0)
20400304:	f9142223          	sw	a7,-124(s0)
20400308:	f9042423          	sw	a6,-120(s0)
2040030c:	f8a42623          	sw	a0,-116(s0)
20400310:	f8b42823          	sw	a1,-112(s0)
20400314:	f8c42a23          	sw	a2,-108(s0)
20400318:	f8d42c23          	sw	a3,-104(s0)
2040031c:	f8e42e23          	sw	a4,-100(s0)
20400320:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:31
            2826, 77394, 39239, 46078, 43985, 43458, 34337, 66575, 76502, 17900};
	unsigned swLcmRes[SIZE] = {0};
20400324:	f4042a23          	sw	zero,-172(s0)
20400328:	f4042c23          	sw	zero,-168(s0)
2040032c:	f4042e23          	sw	zero,-164(s0)
20400330:	f6042023          	sw	zero,-160(s0)
20400334:	f6042223          	sw	zero,-156(s0)
20400338:	f6042423          	sw	zero,-152(s0)
2040033c:	f6042623          	sw	zero,-148(s0)
20400340:	f6042823          	sw	zero,-144(s0)
20400344:	f6042a23          	sw	zero,-140(s0)
20400348:	f6042c23          	sw	zero,-136(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:32
	unsigned hwLcmRes[SIZE] = {0};
2040034c:	f2042623          	sw	zero,-212(s0)
20400350:	f2042823          	sw	zero,-208(s0)
20400354:	f2042a23          	sw	zero,-204(s0)
20400358:	f2042c23          	sw	zero,-200(s0)
2040035c:	f2042e23          	sw	zero,-196(s0)
20400360:	f4042023          	sw	zero,-192(s0)
20400364:	f4042223          	sw	zero,-188(s0)
20400368:	f4042423          	sw	zero,-184(s0)
2040036c:	f4042623          	sw	zero,-180(s0)
20400370:	f4042823          	sw	zero,-176(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:35
	unsigned start, end;
	// 软件计算
    printf("Hello s \n");
20400374:	204057b7          	lui	a5,0x20405
20400378:	38078513          	addi	a0,a5,896 # 20405380 <_exit+0x12>
2040037c:	2111                	jal	20400780 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:36
    start = rdcycle();
2040037e:	3549                	jal	20400200 <rdcycle>
20400380:	87aa                	mv	a5,a0
20400382:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:37
    printf("\n");
20400386:	4529                	li	a0,10
20400388:	2c85                	jal	204005f8 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:38
	for(int i=0; i<SIZE; i++){
2040038a:	fc042e23          	sw	zero,-36(s0)
2040038e:	a05d                	j	20400434 <main+0x1ba>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:39 (discriminator 3)
        printf("%d \n",swLcmRes[i] );
20400390:	fdc42783          	lw	a5,-36(s0)
20400394:	078a                	slli	a5,a5,0x2
20400396:	fe040713          	addi	a4,s0,-32
2040039a:	97ba                	add	a5,a5,a4
2040039c:	f747a783          	lw	a5,-140(a5)
204003a0:	85be                	mv	a1,a5
204003a2:	204057b7          	lui	a5,0x20405
204003a6:	38c78513          	addi	a0,a5,908 # 2040538c <_exit+0x1e>
204003aa:	2429                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:40 (discriminator 3)
		swLcmRes[i] = gcdCompute(randNum1[i], randNum2[i]);
204003ac:	fdc42783          	lw	a5,-36(s0)
204003b0:	078a                	slli	a5,a5,0x2
204003b2:	fe040713          	addi	a4,s0,-32
204003b6:	97ba                	add	a5,a5,a4
204003b8:	fc47a703          	lw	a4,-60(a5)
204003bc:	fdc42783          	lw	a5,-36(s0)
204003c0:	078a                	slli	a5,a5,0x2
204003c2:	fe040693          	addi	a3,s0,-32
204003c6:	97b6                	add	a5,a5,a3
204003c8:	f9c7a783          	lw	a5,-100(a5)
204003cc:	85be                	mv	a1,a5
204003ce:	853a                	mv	a0,a4
204003d0:	35b9                	jal	2040021e <gcdCompute>
204003d2:	872a                	mv	a4,a0
204003d4:	fdc42783          	lw	a5,-36(s0)
204003d8:	078a                	slli	a5,a5,0x2
204003da:	fe040693          	addi	a3,s0,-32
204003de:	97b6                	add	a5,a5,a3
204003e0:	f6e7aa23          	sw	a4,-140(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:41 (discriminator 3)
        printf("%d , %d \n", swLcmRes[i], gcdCompute(randNum1[i], randNum2[i]));
204003e4:	fdc42783          	lw	a5,-36(s0)
204003e8:	078a                	slli	a5,a5,0x2
204003ea:	fe040713          	addi	a4,s0,-32
204003ee:	97ba                	add	a5,a5,a4
204003f0:	f747a483          	lw	s1,-140(a5)
204003f4:	fdc42783          	lw	a5,-36(s0)
204003f8:	078a                	slli	a5,a5,0x2
204003fa:	fe040713          	addi	a4,s0,-32
204003fe:	97ba                	add	a5,a5,a4
20400400:	fc47a703          	lw	a4,-60(a5)
20400404:	fdc42783          	lw	a5,-36(s0)
20400408:	078a                	slli	a5,a5,0x2
2040040a:	fe040693          	addi	a3,s0,-32
2040040e:	97b6                	add	a5,a5,a3
20400410:	f9c7a783          	lw	a5,-100(a5)
20400414:	85be                	mv	a1,a5
20400416:	853a                	mv	a0,a4
20400418:	3519                	jal	2040021e <gcdCompute>
2040041a:	87aa                	mv	a5,a0
2040041c:	863e                	mv	a2,a5
2040041e:	85a6                	mv	a1,s1
20400420:	204057b7          	lui	a5,0x20405
20400424:	39478513          	addi	a0,a5,916 # 20405394 <_exit+0x26>
20400428:	2271                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:38 (discriminator 3)
	for(int i=0; i<SIZE; i++){
2040042a:	fdc42783          	lw	a5,-36(s0)
2040042e:	0785                	addi	a5,a5,1
20400430:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:38 (discriminator 1)
20400434:	fdc42703          	lw	a4,-36(s0)
20400438:	47a5                	li	a5,9
2040043a:	f4e7dbe3          	bge	a5,a4,20400390 <main+0x116>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:43
	}
	end = rdcycle();
2040043e:	33c9                	jal	20400200 <rdcycle>
20400440:	87aa                	mv	a5,a0
20400442:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:44
    printf("leyo \n");
20400446:	204057b7          	lui	a5,0x20405
2040044a:	3a078513          	addi	a0,a5,928 # 204053a0 <_exit+0x32>
2040044e:	2e0d                	jal	20400780 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:49
	// printf("LCM compute:\n");
	// for(int i=0; i<SIZE; i++){
	// 	printf("(%lld, %lld) -> %lld\n", randNum1[i], randNum2[i], swLcmRes[i]);
	// }
    printf("start %d end %d \n",start, end);
20400450:	fcc42603          	lw	a2,-52(s0)
20400454:	fd042583          	lw	a1,-48(s0)
20400458:	204057b7          	lui	a5,0x20405
2040045c:	3a878513          	addi	a0,a5,936 # 204053a8 <_exit+0x3a>
20400460:	2a91                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:50
	printf("SW average cycles used:  %d\n", (end-start)/SIZE);
20400462:	fcc42703          	lw	a4,-52(s0)
20400466:	fd042783          	lw	a5,-48(s0)
2040046a:	8f1d                	sub	a4,a4,a5
2040046c:	47a9                	li	a5,10
2040046e:	02f757b3          	divu	a5,a4,a5
20400472:	85be                	mv	a1,a5
20400474:	204057b7          	lui	a5,0x20405
20400478:	3bc78513          	addi	a0,a5,956 # 204053bc <_exit+0x4e>
2040047c:	2a25                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:53

	// RoCC 加速
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
2040047e:	67e1                	lui	a5,0x18
20400480:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:54
    start = rdcycle();
20400484:	3bb5                	jal	20400200 <rdcycle>
20400486:	87aa                	mv	a5,a0
20400488:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:55
	for(int i=0; i<SIZE; i++){
2040048c:	fc042c23          	sw	zero,-40(s0)
20400490:	a8b9                	j	204004ee <main+0x274>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:56 (discriminator 3)
		asm volatile ("fence"); // 保证数据都存会内存
20400492:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:57 (discriminator 3)
		ROCC_INSTRUCTION_DSS(0, hwLcmRes[i], randNum1[i], randNum2[i], 0);
20400496:	fd842783          	lw	a5,-40(s0)
2040049a:	078a                	slli	a5,a5,0x2
2040049c:	fe040713          	addi	a4,s0,-32
204004a0:	97ba                	add	a5,a5,a4
204004a2:	fc47a783          	lw	a5,-60(a5) # 17fc4 <__heap_size+0x177c4>
204004a6:	893e                	mv	s2,a5
204004a8:	4981                	li	s3,0
204004aa:	85ca                	mv	a1,s2
204004ac:	864e                	mv	a2,s3
204004ae:	fd842783          	lw	a5,-40(s0)
204004b2:	078a                	slli	a5,a5,0x2
204004b4:	fe040713          	addi	a4,s0,-32
204004b8:	97ba                	add	a5,a5,a4
204004ba:	f9c7a783          	lw	a5,-100(a5)
204004be:	8a3e                	mv	s4,a5
204004c0:	4a81                	li	s5,0
204004c2:	8652                	mv	a2,s4
204004c4:	86d6                	mv	a3,s5
204004c6:	00c5f50b          	0xc5f50b
204004ca:	87aa                	mv	a5,a0
204004cc:	882e                	mv	a6,a1
204004ce:	873e                	mv	a4,a5
204004d0:	fd842783          	lw	a5,-40(s0)
204004d4:	078a                	slli	a5,a5,0x2
204004d6:	fe040693          	addi	a3,s0,-32
204004da:	97b6                	add	a5,a5,a3
204004dc:	f4e7a623          	sw	a4,-180(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:58 (discriminator 3)
		asm volatile ("fence" ::: "memory");
204004e0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:55 (discriminator 3)
	for(int i=0; i<SIZE; i++){
204004e4:	fd842783          	lw	a5,-40(s0)
204004e8:	0785                	addi	a5,a5,1
204004ea:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:55 (discriminator 1)
204004ee:	fd842703          	lw	a4,-40(s0)
204004f2:	47a5                	li	a5,9
204004f4:	f8e7dfe3          	bge	a5,a4,20400492 <main+0x218>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:60
	}
	end = rdcycle();
204004f8:	3321                	jal	20400200 <rdcycle>
204004fa:	87aa                	mv	a5,a0
204004fc:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:62

	for(int i=0; i<SIZE; i++){
20400500:	fc042a23          	sw	zero,-44(s0)
20400504:	a8a1                	j	2040055c <main+0x2e2>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:64 (discriminator 3)

			printf("t %d and %d LCM: swLcmRes: %d, hwLcmRes: %d\n", randNum1[i], randNum2[i], swLcmRes[i], hwLcmRes[i]);
20400506:	fd442783          	lw	a5,-44(s0)
2040050a:	078a                	slli	a5,a5,0x2
2040050c:	fe040713          	addi	a4,s0,-32
20400510:	97ba                	add	a5,a5,a4
20400512:	fc47a583          	lw	a1,-60(a5)
20400516:	fd442783          	lw	a5,-44(s0)
2040051a:	078a                	slli	a5,a5,0x2
2040051c:	fe040713          	addi	a4,s0,-32
20400520:	97ba                	add	a5,a5,a4
20400522:	f9c7a603          	lw	a2,-100(a5)
20400526:	fd442783          	lw	a5,-44(s0)
2040052a:	078a                	slli	a5,a5,0x2
2040052c:	fe040713          	addi	a4,s0,-32
20400530:	97ba                	add	a5,a5,a4
20400532:	f747a683          	lw	a3,-140(a5)
20400536:	fd442783          	lw	a5,-44(s0)
2040053a:	078a                	slli	a5,a5,0x2
2040053c:	fe040713          	addi	a4,s0,-32
20400540:	97ba                	add	a5,a5,a4
20400542:	f4c7a783          	lw	a5,-180(a5)
20400546:	873e                	mv	a4,a5
20400548:	204057b7          	lui	a5,0x20405
2040054c:	3dc78513          	addi	a0,a5,988 # 204053dc <_exit+0x6e>
20400550:	2095                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:62 (discriminator 3)
	for(int i=0; i<SIZE; i++){
20400552:	fd442783          	lw	a5,-44(s0)
20400556:	0785                	addi	a5,a5,1
20400558:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:62 (discriminator 1)
2040055c:	fd442703          	lw	a4,-44(s0)
20400560:	47a5                	li	a5,9
20400562:	fae7d2e3          	bge	a5,a4,20400506 <main+0x28c>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:67

	}
    printf("start %d end %d \n",start, end);
20400566:	fcc42603          	lw	a2,-52(s0)
2040056a:	fd042583          	lw	a1,-48(s0)
2040056e:	204057b7          	lui	a5,0x20405
20400572:	3a878513          	addi	a0,a5,936 # 204053a8 <_exit+0x3a>
20400576:	283d                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:68
	printf("HW average cycles used:  %d\n", (end-start)/SIZE);
20400578:	fcc42703          	lw	a4,-52(s0)
2040057c:	fd042783          	lw	a5,-48(s0)
20400580:	8f1d                	sub	a4,a4,a5
20400582:	47a9                	li	a5,10
20400584:	02f757b3          	divu	a5,a4,a5
20400588:	85be                	mv	a1,a5
2040058a:	204057b7          	lui	a5,0x20405
2040058e:	40c78513          	addi	a0,a5,1036 # 2040540c <_exit+0x9e>
20400592:	200d                	jal	204005b4 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:69
	printf("test successed! \n");
20400594:	204057b7          	lui	a5,0x20405
20400598:	42c78513          	addi	a0,a5,1068 # 2040542c <_exit+0xbe>
2040059c:	22d5                	jal	20400780 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:70
	return 0;
2040059e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/LCM/LCM.c:72

204005a0:	853e                	mv	a0,a5
204005a2:	40fe                	lw	ra,220(sp)
204005a4:	446e                	lw	s0,216(sp)
204005a6:	44de                	lw	s1,212(sp)
204005a8:	494e                	lw	s2,208(sp)
204005aa:	49be                	lw	s3,204(sp)
204005ac:	4a2e                	lw	s4,200(sp)
204005ae:	4a9e                	lw	s5,196(sp)
204005b0:	612d                	addi	sp,sp,224
204005b2:	8082                	ret

204005b4 <iprintf>:
printf():
204005b4:	7139                	addi	sp,sp,-64
204005b6:	da3e                	sw	a5,52(sp)
204005b8:	d22e                	sw	a1,36(sp)
204005ba:	d432                	sw	a2,40(sp)
204005bc:	d636                	sw	a3,44(sp)
204005be:	d83a                	sw	a4,48(sp)
204005c0:	dc42                	sw	a6,56(sp)
204005c2:	de46                	sw	a7,60(sp)
204005c4:	5fc00797          	auipc	a5,0x5fc00
204005c8:	18478793          	addi	a5,a5,388 # 80000748 <_impure_ptr>
204005cc:	cc22                	sw	s0,24(sp)
204005ce:	4380                	lw	s0,0(a5)
204005d0:	ca26                	sw	s1,20(sp)
204005d2:	ce06                	sw	ra,28(sp)
204005d4:	84aa                	mv	s1,a0
204005d6:	c409                	beqz	s0,204005e0 <iprintf+0x2c>
204005d8:	4c1c                	lw	a5,24(s0)
204005da:	e399                	bnez	a5,204005e0 <iprintf+0x2c>
204005dc:	8522                	mv	a0,s0
204005de:	23d5                	jal	20400bc2 <__sinit>
204005e0:	440c                	lw	a1,8(s0)
204005e2:	1054                	addi	a3,sp,36
204005e4:	8626                	mv	a2,s1
204005e6:	8522                	mv	a0,s0
204005e8:	c636                	sw	a3,12(sp)
204005ea:	2df000ef          	jal	ra,204010c8 <_vfiprintf_r>
204005ee:	40f2                	lw	ra,28(sp)
204005f0:	4462                	lw	s0,24(sp)
204005f2:	44d2                	lw	s1,20(sp)
204005f4:	6121                	addi	sp,sp,64
204005f6:	8082                	ret

204005f8 <putchar>:
putchar():
204005f8:	1101                	addi	sp,sp,-32
204005fa:	5fc00797          	auipc	a5,0x5fc00
204005fe:	14e78793          	addi	a5,a5,334 # 80000748 <_impure_ptr>
20400602:	cc22                	sw	s0,24(sp)
20400604:	4380                	lw	s0,0(a5)
20400606:	ce06                	sw	ra,28(sp)
20400608:	85aa                	mv	a1,a0
2040060a:	c419                	beqz	s0,20400618 <putchar+0x20>
2040060c:	4c1c                	lw	a5,24(s0)
2040060e:	e789                	bnez	a5,20400618 <putchar+0x20>
20400610:	c62a                	sw	a0,12(sp)
20400612:	8522                	mv	a0,s0
20400614:	237d                	jal	20400bc2 <__sinit>
20400616:	45b2                	lw	a1,12(sp)
20400618:	4410                	lw	a2,8(s0)
2040061a:	8522                	mv	a0,s0
2040061c:	4462                	lw	s0,24(sp)
2040061e:	40f2                	lw	ra,28(sp)
20400620:	6105                	addi	sp,sp,32
20400622:	a009                	j	20400624 <_putc_r>

20400624 <_putc_r>:
_putc_r():
20400624:	1101                	addi	sp,sp,-32
20400626:	cc22                	sw	s0,24(sp)
20400628:	ce06                	sw	ra,28(sp)
2040062a:	842a                	mv	s0,a0
2040062c:	c901                	beqz	a0,2040063c <_putc_r+0x18>
2040062e:	4d1c                	lw	a5,24(a0)
20400630:	e791                	bnez	a5,2040063c <_putc_r+0x18>
20400632:	c632                	sw	a2,12(sp)
20400634:	c42e                	sw	a1,8(sp)
20400636:	2371                	jal	20400bc2 <__sinit>
20400638:	4632                	lw	a2,12(sp)
2040063a:	45a2                	lw	a1,8(sp)
2040063c:	00005797          	auipc	a5,0x5
20400640:	e7478793          	addi	a5,a5,-396 # 204054b0 <__sf_fake_stdin>
20400644:	02f61563          	bne	a2,a5,2040066e <_putc_r+0x4a>
20400648:	4050                	lw	a2,4(s0)
2040064a:	461c                	lw	a5,8(a2)
2040064c:	17fd                	addi	a5,a5,-1
2040064e:	c61c                	sw	a5,8(a2)
20400650:	0207df63          	bgez	a5,2040068e <_putc_r+0x6a>
20400654:	4e18                	lw	a4,24(a2)
20400656:	00e7c763          	blt	a5,a4,20400664 <_putc_r+0x40>
2040065a:	0ff5f793          	andi	a5,a1,255
2040065e:	4729                	li	a4,10
20400660:	02e79763          	bne	a5,a4,2040068e <_putc_r+0x6a>
20400664:	8522                	mv	a0,s0
20400666:	4462                	lw	s0,24(sp)
20400668:	40f2                	lw	ra,28(sp)
2040066a:	6105                	addi	sp,sp,32
2040066c:	a20d                	j	2040078e <__swbuf_r>
2040066e:	00005797          	auipc	a5,0x5
20400672:	e6278793          	addi	a5,a5,-414 # 204054d0 <__sf_fake_stdout>
20400676:	00f61463          	bne	a2,a5,2040067e <_putc_r+0x5a>
2040067a:	4410                	lw	a2,8(s0)
2040067c:	b7f9                	j	2040064a <_putc_r+0x26>
2040067e:	00005797          	auipc	a5,0x5
20400682:	e1278793          	addi	a5,a5,-494 # 20405490 <__sf_fake_stderr>
20400686:	fcf612e3          	bne	a2,a5,2040064a <_putc_r+0x26>
2040068a:	4450                	lw	a2,12(s0)
2040068c:	bf7d                	j	2040064a <_putc_r+0x26>
2040068e:	421c                	lw	a5,0(a2)
20400690:	0ff5f513          	andi	a0,a1,255
20400694:	00178713          	addi	a4,a5,1
20400698:	c218                	sw	a4,0(a2)
2040069a:	00b78023          	sb	a1,0(a5)
2040069e:	40f2                	lw	ra,28(sp)
204006a0:	4462                	lw	s0,24(sp)
204006a2:	6105                	addi	sp,sp,32
204006a4:	8082                	ret

204006a6 <_puts_r>:
_puts_r():
204006a6:	1101                	addi	sp,sp,-32
204006a8:	ca26                	sw	s1,20(sp)
204006aa:	c84a                	sw	s2,16(sp)
204006ac:	ce06                	sw	ra,28(sp)
204006ae:	cc22                	sw	s0,24(sp)
204006b0:	c64e                	sw	s3,12(sp)
204006b2:	c452                	sw	s4,8(sp)
204006b4:	84aa                	mv	s1,a0
204006b6:	892e                	mv	s2,a1
204006b8:	c501                	beqz	a0,204006c0 <_puts_r+0x1a>
204006ba:	4d1c                	lw	a5,24(a0)
204006bc:	e391                	bnez	a5,204006c0 <_puts_r+0x1a>
204006be:	2311                	jal	20400bc2 <__sinit>
204006c0:	4c9c                	lw	a5,24(s1)
204006c2:	4480                	lw	s0,8(s1)
204006c4:	e399                	bnez	a5,204006ca <_puts_r+0x24>
204006c6:	8526                	mv	a0,s1
204006c8:	29ed                	jal	20400bc2 <__sinit>
204006ca:	00005797          	auipc	a5,0x5
204006ce:	de678793          	addi	a5,a5,-538 # 204054b0 <__sf_fake_stdin>
204006d2:	02f41c63          	bne	s0,a5,2040070a <_puts_r+0x64>
204006d6:	40c0                	lw	s0,4(s1)
204006d8:	00c45783          	lhu	a5,12(s0)
204006dc:	8ba1                	andi	a5,a5,8
204006de:	c7b1                	beqz	a5,2040072a <_puts_r+0x84>
204006e0:	481c                	lw	a5,16(s0)
204006e2:	c7a1                	beqz	a5,2040072a <_puts_r+0x84>
204006e4:	59fd                	li	s3,-1
204006e6:	4a29                	li	s4,10
204006e8:	441c                	lw	a5,8(s0)
204006ea:	00094583          	lbu	a1,0(s2)
204006ee:	17fd                	addi	a5,a5,-1
204006f0:	e9b1                	bnez	a1,20400744 <_puts_r+0x9e>
204006f2:	c41c                	sw	a5,8(s0)
204006f4:	0607de63          	bgez	a5,20400770 <_puts_r+0xca>
204006f8:	8622                	mv	a2,s0
204006fa:	45a9                	li	a1,10
204006fc:	8526                	mv	a0,s1
204006fe:	2841                	jal	2040078e <__swbuf_r>
20400700:	57fd                	li	a5,-1
20400702:	02f50863          	beq	a0,a5,20400732 <_puts_r+0x8c>
20400706:	4529                	li	a0,10
20400708:	a035                	j	20400734 <_puts_r+0x8e>
2040070a:	00005797          	auipc	a5,0x5
2040070e:	dc678793          	addi	a5,a5,-570 # 204054d0 <__sf_fake_stdout>
20400712:	00f41463          	bne	s0,a5,2040071a <_puts_r+0x74>
20400716:	4480                	lw	s0,8(s1)
20400718:	b7c1                	j	204006d8 <_puts_r+0x32>
2040071a:	00005797          	auipc	a5,0x5
2040071e:	d7678793          	addi	a5,a5,-650 # 20405490 <__sf_fake_stderr>
20400722:	faf41be3          	bne	s0,a5,204006d8 <_puts_r+0x32>
20400726:	44c0                	lw	s0,12(s1)
20400728:	bf45                	j	204006d8 <_puts_r+0x32>
2040072a:	85a2                	mv	a1,s0
2040072c:	8526                	mv	a0,s1
2040072e:	2205                	jal	2040084e <__swsetup_r>
20400730:	d955                	beqz	a0,204006e4 <_puts_r+0x3e>
20400732:	557d                	li	a0,-1
20400734:	40f2                	lw	ra,28(sp)
20400736:	4462                	lw	s0,24(sp)
20400738:	44d2                	lw	s1,20(sp)
2040073a:	4942                	lw	s2,16(sp)
2040073c:	49b2                	lw	s3,12(sp)
2040073e:	4a22                	lw	s4,8(sp)
20400740:	6105                	addi	sp,sp,32
20400742:	8082                	ret
20400744:	c41c                	sw	a5,8(s0)
20400746:	0905                	addi	s2,s2,1
20400748:	0007d763          	bgez	a5,20400756 <_puts_r+0xb0>
2040074c:	4c18                	lw	a4,24(s0)
2040074e:	00e7cb63          	blt	a5,a4,20400764 <_puts_r+0xbe>
20400752:	01458963          	beq	a1,s4,20400764 <_puts_r+0xbe>
20400756:	401c                	lw	a5,0(s0)
20400758:	00178713          	addi	a4,a5,1
2040075c:	c018                	sw	a4,0(s0)
2040075e:	00b78023          	sb	a1,0(a5)
20400762:	b759                	j	204006e8 <_puts_r+0x42>
20400764:	8622                	mv	a2,s0
20400766:	8526                	mv	a0,s1
20400768:	201d                	jal	2040078e <__swbuf_r>
2040076a:	f7351fe3          	bne	a0,s3,204006e8 <_puts_r+0x42>
2040076e:	b7d1                	j	20400732 <_puts_r+0x8c>
20400770:	401c                	lw	a5,0(s0)
20400772:	00178713          	addi	a4,a5,1
20400776:	c018                	sw	a4,0(s0)
20400778:	4729                	li	a4,10
2040077a:	00e78023          	sb	a4,0(a5)
2040077e:	b761                	j	20400706 <_puts_r+0x60>

20400780 <puts>:
puts():
20400780:	5fc00797          	auipc	a5,0x5fc00
20400784:	fc878793          	addi	a5,a5,-56 # 80000748 <_impure_ptr>
20400788:	85aa                	mv	a1,a0
2040078a:	4388                	lw	a0,0(a5)
2040078c:	bf29                	j	204006a6 <_puts_r>

2040078e <__swbuf_r>:
__swbuf_r():
2040078e:	1101                	addi	sp,sp,-32
20400790:	cc22                	sw	s0,24(sp)
20400792:	ca26                	sw	s1,20(sp)
20400794:	c84a                	sw	s2,16(sp)
20400796:	ce06                	sw	ra,28(sp)
20400798:	c64e                	sw	s3,12(sp)
2040079a:	84aa                	mv	s1,a0
2040079c:	892e                	mv	s2,a1
2040079e:	8432                	mv	s0,a2
204007a0:	c501                	beqz	a0,204007a8 <__swbuf_r+0x1a>
204007a2:	4d1c                	lw	a5,24(a0)
204007a4:	e391                	bnez	a5,204007a8 <__swbuf_r+0x1a>
204007a6:	2931                	jal	20400bc2 <__sinit>
204007a8:	00005797          	auipc	a5,0x5
204007ac:	d0878793          	addi	a5,a5,-760 # 204054b0 <__sf_fake_stdin>
204007b0:	06f41963          	bne	s0,a5,20400822 <__swbuf_r+0x94>
204007b4:	40c0                	lw	s0,4(s1)
204007b6:	4c1c                	lw	a5,24(s0)
204007b8:	c41c                	sw	a5,8(s0)
204007ba:	00c45783          	lhu	a5,12(s0)
204007be:	8ba1                	andi	a5,a5,8
204007c0:	c3c9                	beqz	a5,20400842 <__swbuf_r+0xb4>
204007c2:	481c                	lw	a5,16(s0)
204007c4:	cfbd                	beqz	a5,20400842 <__swbuf_r+0xb4>
204007c6:	481c                	lw	a5,16(s0)
204007c8:	4008                	lw	a0,0(s0)
204007ca:	0ff97993          	andi	s3,s2,255
204007ce:	0ff97913          	andi	s2,s2,255
204007d2:	8d1d                	sub	a0,a0,a5
204007d4:	485c                	lw	a5,20(s0)
204007d6:	00f54663          	blt	a0,a5,204007e2 <__swbuf_r+0x54>
204007da:	85a2                	mv	a1,s0
204007dc:	8526                	mv	a0,s1
204007de:	24e9                	jal	20400aa8 <_fflush_r>
204007e0:	e52d                	bnez	a0,2040084a <__swbuf_r+0xbc>
204007e2:	441c                	lw	a5,8(s0)
204007e4:	0505                	addi	a0,a0,1
204007e6:	17fd                	addi	a5,a5,-1
204007e8:	c41c                	sw	a5,8(s0)
204007ea:	401c                	lw	a5,0(s0)
204007ec:	00178713          	addi	a4,a5,1
204007f0:	c018                	sw	a4,0(s0)
204007f2:	01378023          	sb	s3,0(a5)
204007f6:	485c                	lw	a5,20(s0)
204007f8:	00a78963          	beq	a5,a0,2040080a <__swbuf_r+0x7c>
204007fc:	00c45783          	lhu	a5,12(s0)
20400800:	8b85                	andi	a5,a5,1
20400802:	cb81                	beqz	a5,20400812 <__swbuf_r+0x84>
20400804:	47a9                	li	a5,10
20400806:	00f91663          	bne	s2,a5,20400812 <__swbuf_r+0x84>
2040080a:	85a2                	mv	a1,s0
2040080c:	8526                	mv	a0,s1
2040080e:	2c69                	jal	20400aa8 <_fflush_r>
20400810:	ed0d                	bnez	a0,2040084a <__swbuf_r+0xbc>
20400812:	40f2                	lw	ra,28(sp)
20400814:	4462                	lw	s0,24(sp)
20400816:	854a                	mv	a0,s2
20400818:	44d2                	lw	s1,20(sp)
2040081a:	4942                	lw	s2,16(sp)
2040081c:	49b2                	lw	s3,12(sp)
2040081e:	6105                	addi	sp,sp,32
20400820:	8082                	ret
20400822:	00005797          	auipc	a5,0x5
20400826:	cae78793          	addi	a5,a5,-850 # 204054d0 <__sf_fake_stdout>
2040082a:	00f41463          	bne	s0,a5,20400832 <__swbuf_r+0xa4>
2040082e:	4480                	lw	s0,8(s1)
20400830:	b759                	j	204007b6 <__swbuf_r+0x28>
20400832:	00005797          	auipc	a5,0x5
20400836:	c5e78793          	addi	a5,a5,-930 # 20405490 <__sf_fake_stderr>
2040083a:	f6f41ee3          	bne	s0,a5,204007b6 <__swbuf_r+0x28>
2040083e:	44c0                	lw	s0,12(s1)
20400840:	bf9d                	j	204007b6 <__swbuf_r+0x28>
20400842:	85a2                	mv	a1,s0
20400844:	8526                	mv	a0,s1
20400846:	2021                	jal	2040084e <__swsetup_r>
20400848:	dd3d                	beqz	a0,204007c6 <__swbuf_r+0x38>
2040084a:	597d                	li	s2,-1
2040084c:	b7d9                	j	20400812 <__swbuf_r+0x84>

2040084e <__swsetup_r>:
__swsetup_r():
2040084e:	1141                	addi	sp,sp,-16
20400850:	5fc00797          	auipc	a5,0x5fc00
20400854:	ef878793          	addi	a5,a5,-264 # 80000748 <_impure_ptr>
20400858:	c226                	sw	s1,4(sp)
2040085a:	4384                	lw	s1,0(a5)
2040085c:	c422                	sw	s0,8(sp)
2040085e:	c04a                	sw	s2,0(sp)
20400860:	c606                	sw	ra,12(sp)
20400862:	892a                	mv	s2,a0
20400864:	842e                	mv	s0,a1
20400866:	c489                	beqz	s1,20400870 <__swsetup_r+0x22>
20400868:	4c9c                	lw	a5,24(s1)
2040086a:	e399                	bnez	a5,20400870 <__swsetup_r+0x22>
2040086c:	8526                	mv	a0,s1
2040086e:	2e91                	jal	20400bc2 <__sinit>
20400870:	00005797          	auipc	a5,0x5
20400874:	c4078793          	addi	a5,a5,-960 # 204054b0 <__sf_fake_stdin>
20400878:	02f41c63          	bne	s0,a5,204008b0 <__swsetup_r+0x62>
2040087c:	40c0                	lw	s0,4(s1)
2040087e:	00c41703          	lh	a4,12(s0)
20400882:	01071793          	slli	a5,a4,0x10
20400886:	83c1                	srli	a5,a5,0x10
20400888:	0087f693          	andi	a3,a5,8
2040088c:	eeb5                	bnez	a3,20400908 <__swsetup_r+0xba>
2040088e:	0107f693          	andi	a3,a5,16
20400892:	ee9d                	bnez	a3,204008d0 <__swsetup_r+0x82>
20400894:	47a5                	li	a5,9
20400896:	00f92023          	sw	a5,0(s2)
2040089a:	04076713          	ori	a4,a4,64
2040089e:	00e41623          	sh	a4,12(s0)
204008a2:	557d                	li	a0,-1
204008a4:	40b2                	lw	ra,12(sp)
204008a6:	4422                	lw	s0,8(sp)
204008a8:	4492                	lw	s1,4(sp)
204008aa:	4902                	lw	s2,0(sp)
204008ac:	0141                	addi	sp,sp,16
204008ae:	8082                	ret
204008b0:	00005797          	auipc	a5,0x5
204008b4:	c2078793          	addi	a5,a5,-992 # 204054d0 <__sf_fake_stdout>
204008b8:	00f41463          	bne	s0,a5,204008c0 <__swsetup_r+0x72>
204008bc:	4480                	lw	s0,8(s1)
204008be:	b7c1                	j	2040087e <__swsetup_r+0x30>
204008c0:	00005797          	auipc	a5,0x5
204008c4:	bd078793          	addi	a5,a5,-1072 # 20405490 <__sf_fake_stderr>
204008c8:	faf41be3          	bne	s0,a5,2040087e <__swsetup_r+0x30>
204008cc:	44c0                	lw	s0,12(s1)
204008ce:	bf45                	j	2040087e <__swsetup_r+0x30>
204008d0:	8b91                	andi	a5,a5,4
204008d2:	c78d                	beqz	a5,204008fc <__swsetup_r+0xae>
204008d4:	584c                	lw	a1,52(s0)
204008d6:	c989                	beqz	a1,204008e8 <__swsetup_r+0x9a>
204008d8:	04440793          	addi	a5,s0,68
204008dc:	00f58463          	beq	a1,a5,204008e4 <__swsetup_r+0x96>
204008e0:	854a                	mv	a0,s2
204008e2:	2bc5                	jal	20400ed2 <_free_r>
204008e4:	02042a23          	sw	zero,52(s0)
204008e8:	00c45783          	lhu	a5,12(s0)
204008ec:	00042223          	sw	zero,4(s0)
204008f0:	fdb7f793          	andi	a5,a5,-37
204008f4:	00f41623          	sh	a5,12(s0)
204008f8:	481c                	lw	a5,16(s0)
204008fa:	c01c                	sw	a5,0(s0)
204008fc:	00c45783          	lhu	a5,12(s0)
20400900:	0087e793          	ori	a5,a5,8
20400904:	00f41623          	sh	a5,12(s0)
20400908:	481c                	lw	a5,16(s0)
2040090a:	ef81                	bnez	a5,20400922 <__swsetup_r+0xd4>
2040090c:	00c45783          	lhu	a5,12(s0)
20400910:	20000713          	li	a4,512
20400914:	2807f793          	andi	a5,a5,640
20400918:	00e78563          	beq	a5,a4,20400922 <__swsetup_r+0xd4>
2040091c:	85a2                	mv	a1,s0
2040091e:	854a                	mv	a0,s2
20400920:	21bd                	jal	20400d8e <__smakebuf_r>
20400922:	00c45783          	lhu	a5,12(s0)
20400926:	0017f713          	andi	a4,a5,1
2040092a:	c705                	beqz	a4,20400952 <__swsetup_r+0x104>
2040092c:	485c                	lw	a5,20(s0)
2040092e:	00042423          	sw	zero,8(s0)
20400932:	40f007b3          	neg	a5,a5
20400936:	cc1c                	sw	a5,24(s0)
20400938:	481c                	lw	a5,16(s0)
2040093a:	4501                	li	a0,0
2040093c:	f7a5                	bnez	a5,204008a4 <__swsetup_r+0x56>
2040093e:	00c41783          	lh	a5,12(s0)
20400942:	0807f713          	andi	a4,a5,128
20400946:	df39                	beqz	a4,204008a4 <__swsetup_r+0x56>
20400948:	0407e793          	ori	a5,a5,64
2040094c:	00f41623          	sh	a5,12(s0)
20400950:	bf89                	j	204008a2 <__swsetup_r+0x54>
20400952:	8b89                	andi	a5,a5,2
20400954:	4701                	li	a4,0
20400956:	e391                	bnez	a5,2040095a <__swsetup_r+0x10c>
20400958:	4858                	lw	a4,20(s0)
2040095a:	c418                	sw	a4,8(s0)
2040095c:	bff1                	j	20400938 <__swsetup_r+0xea>

2040095e <__sflush_r>:
__sflush_r():
2040095e:	00c5d783          	lhu	a5,12(a1)
20400962:	1101                	addi	sp,sp,-32
20400964:	cc22                	sw	s0,24(sp)
20400966:	ca26                	sw	s1,20(sp)
20400968:	ce06                	sw	ra,28(sp)
2040096a:	c84a                	sw	s2,16(sp)
2040096c:	c64e                	sw	s3,12(sp)
2040096e:	0087f713          	andi	a4,a5,8
20400972:	84aa                	mv	s1,a0
20400974:	842e                	mv	s0,a1
20400976:	e765                	bnez	a4,20400a5e <__sflush_r+0x100>
20400978:	41d8                	lw	a4,4(a1)
2040097a:	00e04763          	bgtz	a4,20400988 <__sflush_r+0x2a>
2040097e:	41b8                	lw	a4,64(a1)
20400980:	00e04463          	bgtz	a4,20400988 <__sflush_r+0x2a>
20400984:	4501                	li	a0,0
20400986:	a0c1                	j	20400a46 <__sflush_r+0xe8>
20400988:	5458                	lw	a4,44(s0)
2040098a:	df6d                	beqz	a4,20400984 <__sflush_r+0x26>
2040098c:	0004a903          	lw	s2,0(s1)
20400990:	01379693          	slli	a3,a5,0x13
20400994:	0004a023          	sw	zero,0(s1)
20400998:	0606de63          	bgez	a3,20400a14 <__sflush_r+0xb6>
2040099c:	4868                	lw	a0,84(s0)
2040099e:	00c45783          	lhu	a5,12(s0)
204009a2:	8b91                	andi	a5,a5,4
204009a4:	c799                	beqz	a5,204009b2 <__sflush_r+0x54>
204009a6:	405c                	lw	a5,4(s0)
204009a8:	8d1d                	sub	a0,a0,a5
204009aa:	585c                	lw	a5,52(s0)
204009ac:	c399                	beqz	a5,204009b2 <__sflush_r+0x54>
204009ae:	403c                	lw	a5,64(s0)
204009b0:	8d1d                	sub	a0,a0,a5
204009b2:	545c                	lw	a5,44(s0)
204009b4:	500c                	lw	a1,32(s0)
204009b6:	862a                	mv	a2,a0
204009b8:	4681                	li	a3,0
204009ba:	8526                	mv	a0,s1
204009bc:	9782                	jalr	a5
204009be:	57fd                	li	a5,-1
204009c0:	00c45703          	lhu	a4,12(s0)
204009c4:	00f51d63          	bne	a0,a5,204009de <__sflush_r+0x80>
204009c8:	4094                	lw	a3,0(s1)
204009ca:	47f5                	li	a5,29
204009cc:	08d7e463          	bltu	a5,a3,20400a54 <__sflush_r+0xf6>
204009d0:	204007b7          	lui	a5,0x20400
204009d4:	0785                	addi	a5,a5,1
204009d6:	00d7d7b3          	srl	a5,a5,a3
204009da:	8b85                	andi	a5,a5,1
204009dc:	cfa5                	beqz	a5,20400a54 <__sflush_r+0xf6>
204009de:	481c                	lw	a5,16(s0)
204009e0:	00042223          	sw	zero,4(s0)
204009e4:	c01c                	sw	a5,0(s0)
204009e6:	01371793          	slli	a5,a4,0x13
204009ea:	0007d863          	bgez	a5,204009fa <__sflush_r+0x9c>
204009ee:	57fd                	li	a5,-1
204009f0:	00f51463          	bne	a0,a5,204009f8 <__sflush_r+0x9a>
204009f4:	409c                	lw	a5,0(s1)
204009f6:	e391                	bnez	a5,204009fa <__sflush_r+0x9c>
204009f8:	c868                	sw	a0,84(s0)
204009fa:	584c                	lw	a1,52(s0)
204009fc:	0124a023          	sw	s2,0(s1)
20400a00:	d1d1                	beqz	a1,20400984 <__sflush_r+0x26>
20400a02:	04440793          	addi	a5,s0,68
20400a06:	00f58463          	beq	a1,a5,20400a0e <__sflush_r+0xb0>
20400a0a:	8526                	mv	a0,s1
20400a0c:	21d9                	jal	20400ed2 <_free_r>
20400a0e:	02042a23          	sw	zero,52(s0)
20400a12:	bf8d                	j	20400984 <__sflush_r+0x26>
20400a14:	500c                	lw	a1,32(s0)
20400a16:	4685                	li	a3,1
20400a18:	4601                	li	a2,0
20400a1a:	8526                	mv	a0,s1
20400a1c:	9702                	jalr	a4
20400a1e:	57fd                	li	a5,-1
20400a20:	f6f51fe3          	bne	a0,a5,2040099e <__sflush_r+0x40>
20400a24:	409c                	lw	a5,0(s1)
20400a26:	dfa5                	beqz	a5,2040099e <__sflush_r+0x40>
20400a28:	4775                	li	a4,29
20400a2a:	00e78563          	beq	a5,a4,20400a34 <__sflush_r+0xd6>
20400a2e:	4759                	li	a4,22
20400a30:	00e79563          	bne	a5,a4,20400a3a <__sflush_r+0xdc>
20400a34:	0124a023          	sw	s2,0(s1)
20400a38:	b7b1                	j	20400984 <__sflush_r+0x26>
20400a3a:	00c45783          	lhu	a5,12(s0)
20400a3e:	0407e793          	ori	a5,a5,64
20400a42:	00f41623          	sh	a5,12(s0)
20400a46:	40f2                	lw	ra,28(sp)
20400a48:	4462                	lw	s0,24(sp)
20400a4a:	44d2                	lw	s1,20(sp)
20400a4c:	4942                	lw	s2,16(sp)
20400a4e:	49b2                	lw	s3,12(sp)
20400a50:	6105                	addi	sp,sp,32
20400a52:	8082                	ret
20400a54:	04076713          	ori	a4,a4,64
20400a58:	00e41623          	sh	a4,12(s0)
20400a5c:	b7ed                	j	20400a46 <__sflush_r+0xe8>
20400a5e:	0105a983          	lw	s3,16(a1)
20400a62:	f20981e3          	beqz	s3,20400984 <__sflush_r+0x26>
20400a66:	0005a903          	lw	s2,0(a1)
20400a6a:	8b8d                	andi	a5,a5,3
20400a6c:	0135a023          	sw	s3,0(a1)
20400a70:	41390933          	sub	s2,s2,s3
20400a74:	4701                	li	a4,0
20400a76:	e391                	bnez	a5,20400a7a <__sflush_r+0x11c>
20400a78:	49d8                	lw	a4,20(a1)
20400a7a:	c418                	sw	a4,8(s0)
20400a7c:	f12054e3          	blez	s2,20400984 <__sflush_r+0x26>
20400a80:	541c                	lw	a5,40(s0)
20400a82:	500c                	lw	a1,32(s0)
20400a84:	86ca                	mv	a3,s2
20400a86:	864e                	mv	a2,s3
20400a88:	8526                	mv	a0,s1
20400a8a:	9782                	jalr	a5
20400a8c:	00a04a63          	bgtz	a0,20400aa0 <__sflush_r+0x142>
20400a90:	00c45783          	lhu	a5,12(s0)
20400a94:	557d                	li	a0,-1
20400a96:	0407e793          	ori	a5,a5,64
20400a9a:	00f41623          	sh	a5,12(s0)
20400a9e:	b765                	j	20400a46 <__sflush_r+0xe8>
20400aa0:	99aa                	add	s3,s3,a0
20400aa2:	40a90933          	sub	s2,s2,a0
20400aa6:	bfd9                	j	20400a7c <__sflush_r+0x11e>

20400aa8 <_fflush_r>:
_fflush_r():
20400aa8:	499c                	lw	a5,16(a1)
20400aaa:	cfb9                	beqz	a5,20400b08 <_fflush_r+0x60>
20400aac:	1101                	addi	sp,sp,-32
20400aae:	cc22                	sw	s0,24(sp)
20400ab0:	ce06                	sw	ra,28(sp)
20400ab2:	842a                	mv	s0,a0
20400ab4:	c511                	beqz	a0,20400ac0 <_fflush_r+0x18>
20400ab6:	4d1c                	lw	a5,24(a0)
20400ab8:	e781                	bnez	a5,20400ac0 <_fflush_r+0x18>
20400aba:	c62e                	sw	a1,12(sp)
20400abc:	2219                	jal	20400bc2 <__sinit>
20400abe:	45b2                	lw	a1,12(sp)
20400ac0:	00005797          	auipc	a5,0x5
20400ac4:	9f078793          	addi	a5,a5,-1552 # 204054b0 <__sf_fake_stdin>
20400ac8:	00f59b63          	bne	a1,a5,20400ade <_fflush_r+0x36>
20400acc:	404c                	lw	a1,4(s0)
20400ace:	00c59783          	lh	a5,12(a1)
20400ad2:	c795                	beqz	a5,20400afe <_fflush_r+0x56>
20400ad4:	8522                	mv	a0,s0
20400ad6:	4462                	lw	s0,24(sp)
20400ad8:	40f2                	lw	ra,28(sp)
20400ada:	6105                	addi	sp,sp,32
20400adc:	b549                	j	2040095e <__sflush_r>
20400ade:	00005797          	auipc	a5,0x5
20400ae2:	9f278793          	addi	a5,a5,-1550 # 204054d0 <__sf_fake_stdout>
20400ae6:	00f59463          	bne	a1,a5,20400aee <_fflush_r+0x46>
20400aea:	440c                	lw	a1,8(s0)
20400aec:	b7cd                	j	20400ace <_fflush_r+0x26>
20400aee:	00005797          	auipc	a5,0x5
20400af2:	9a278793          	addi	a5,a5,-1630 # 20405490 <__sf_fake_stderr>
20400af6:	fcf59ce3          	bne	a1,a5,20400ace <_fflush_r+0x26>
20400afa:	444c                	lw	a1,12(s0)
20400afc:	bfc9                	j	20400ace <_fflush_r+0x26>
20400afe:	40f2                	lw	ra,28(sp)
20400b00:	4462                	lw	s0,24(sp)
20400b02:	4501                	li	a0,0
20400b04:	6105                	addi	sp,sp,32
20400b06:	8082                	ret
20400b08:	4501                	li	a0,0
20400b0a:	8082                	ret

20400b0c <std>:
std():
20400b0c:	1141                	addi	sp,sp,-16
20400b0e:	c422                	sw	s0,8(sp)
20400b10:	c606                	sw	ra,12(sp)
20400b12:	842a                	mv	s0,a0
20400b14:	00b51623          	sh	a1,12(a0)
20400b18:	00c51723          	sh	a2,14(a0)
20400b1c:	00052023          	sw	zero,0(a0)
20400b20:	00052223          	sw	zero,4(a0)
20400b24:	00052423          	sw	zero,8(a0)
20400b28:	06052223          	sw	zero,100(a0)
20400b2c:	00052823          	sw	zero,16(a0)
20400b30:	00052a23          	sw	zero,20(a0)
20400b34:	00052c23          	sw	zero,24(a0)
20400b38:	4621                	li	a2,8
20400b3a:	4581                	li	a1,0
20400b3c:	05c50513          	addi	a0,a0,92
20400b40:	24ed                	jal	20400e2a <memset>
20400b42:	00001797          	auipc	a5,0x1
20400b46:	84678793          	addi	a5,a5,-1978 # 20401388 <__sread>
20400b4a:	d05c                	sw	a5,36(s0)
20400b4c:	00001797          	auipc	a5,0x1
20400b50:	86c78793          	addi	a5,a5,-1940 # 204013b8 <__swrite>
20400b54:	d41c                	sw	a5,40(s0)
20400b56:	00001797          	auipc	a5,0x1
20400b5a:	8b078793          	addi	a5,a5,-1872 # 20401406 <__sseek>
20400b5e:	d45c                	sw	a5,44(s0)
20400b60:	00001797          	auipc	a5,0x1
20400b64:	8dc78793          	addi	a5,a5,-1828 # 2040143c <__sclose>
20400b68:	d000                	sw	s0,32(s0)
20400b6a:	d81c                	sw	a5,48(s0)
20400b6c:	40b2                	lw	ra,12(sp)
20400b6e:	4422                	lw	s0,8(sp)
20400b70:	0141                	addi	sp,sp,16
20400b72:	8082                	ret

20400b74 <_cleanup_r>:
_cleanup_r():
20400b74:	00000597          	auipc	a1,0x0
20400b78:	f3458593          	addi	a1,a1,-204 # 20400aa8 <_fflush_r>
20400b7c:	a2b9                	j	20400cca <_fwalk_reent>

20400b7e <__sfmoreglue>:
__sfmoreglue():
20400b7e:	1141                	addi	sp,sp,-16
20400b80:	c226                	sw	s1,4(sp)
20400b82:	06800613          	li	a2,104
20400b86:	fff58493          	addi	s1,a1,-1
20400b8a:	02c484b3          	mul	s1,s1,a2
20400b8e:	c04a                	sw	s2,0(sp)
20400b90:	892e                	mv	s2,a1
20400b92:	c422                	sw	s0,8(sp)
20400b94:	c606                	sw	ra,12(sp)
20400b96:	07448593          	addi	a1,s1,116
20400b9a:	26d5                	jal	20400f7e <_malloc_r>
20400b9c:	842a                	mv	s0,a0
20400b9e:	c919                	beqz	a0,20400bb4 <__sfmoreglue+0x36>
20400ba0:	00052023          	sw	zero,0(a0)
20400ba4:	01252223          	sw	s2,4(a0)
20400ba8:	0531                	addi	a0,a0,12
20400baa:	c408                	sw	a0,8(s0)
20400bac:	06848613          	addi	a2,s1,104
20400bb0:	4581                	li	a1,0
20400bb2:	2ca5                	jal	20400e2a <memset>
20400bb4:	8522                	mv	a0,s0
20400bb6:	40b2                	lw	ra,12(sp)
20400bb8:	4422                	lw	s0,8(sp)
20400bba:	4492                	lw	s1,4(sp)
20400bbc:	4902                	lw	s2,0(sp)
20400bbe:	0141                	addi	sp,sp,16
20400bc0:	8082                	ret

20400bc2 <__sinit>:
__sinit():
20400bc2:	4d1c                	lw	a5,24(a0)
20400bc4:	e3bd                	bnez	a5,20400c2a <__sinit+0x68>
20400bc6:	1141                	addi	sp,sp,-16
20400bc8:	c606                	sw	ra,12(sp)
20400bca:	c422                	sw	s0,8(sp)
20400bcc:	00000797          	auipc	a5,0x0
20400bd0:	fa878793          	addi	a5,a5,-88 # 20400b74 <_cleanup_r>
20400bd4:	d51c                	sw	a5,40(a0)
20400bd6:	5fc00797          	auipc	a5,0x5fc00
20400bda:	b7678793          	addi	a5,a5,-1162 # 8000074c <_global_impure_ptr>
20400bde:	439c                	lw	a5,0(a5)
20400be0:	04052423          	sw	zero,72(a0)
20400be4:	04052623          	sw	zero,76(a0)
20400be8:	04052823          	sw	zero,80(a0)
20400bec:	00f51463          	bne	a0,a5,20400bf4 <__sinit+0x32>
20400bf0:	4785                	li	a5,1
20400bf2:	cd1c                	sw	a5,24(a0)
20400bf4:	842a                	mv	s0,a0
20400bf6:	281d                	jal	20400c2c <__sfp>
20400bf8:	c048                	sw	a0,4(s0)
20400bfa:	8522                	mv	a0,s0
20400bfc:	2805                	jal	20400c2c <__sfp>
20400bfe:	c408                	sw	a0,8(s0)
20400c00:	8522                	mv	a0,s0
20400c02:	202d                	jal	20400c2c <__sfp>
20400c04:	c448                	sw	a0,12(s0)
20400c06:	4048                	lw	a0,4(s0)
20400c08:	4601                	li	a2,0
20400c0a:	4591                	li	a1,4
20400c0c:	3701                	jal	20400b0c <std>
20400c0e:	4408                	lw	a0,8(s0)
20400c10:	4605                	li	a2,1
20400c12:	45a5                	li	a1,9
20400c14:	3de5                	jal	20400b0c <std>
20400c16:	4448                	lw	a0,12(s0)
20400c18:	4609                	li	a2,2
20400c1a:	45c9                	li	a1,18
20400c1c:	3dc5                	jal	20400b0c <std>
20400c1e:	4785                	li	a5,1
20400c20:	cc1c                	sw	a5,24(s0)
20400c22:	40b2                	lw	ra,12(sp)
20400c24:	4422                	lw	s0,8(sp)
20400c26:	0141                	addi	sp,sp,16
20400c28:	8082                	ret
20400c2a:	8082                	ret

20400c2c <__sfp>:
__sfp():
20400c2c:	1141                	addi	sp,sp,-16
20400c2e:	5fc00797          	auipc	a5,0x5fc00
20400c32:	b1e78793          	addi	a5,a5,-1250 # 8000074c <_global_impure_ptr>
20400c36:	c226                	sw	s1,4(sp)
20400c38:	4384                	lw	s1,0(a5)
20400c3a:	c04a                	sw	s2,0(sp)
20400c3c:	c606                	sw	ra,12(sp)
20400c3e:	4c9c                	lw	a5,24(s1)
20400c40:	c422                	sw	s0,8(sp)
20400c42:	892a                	mv	s2,a0
20400c44:	e399                	bnez	a5,20400c4a <__sfp+0x1e>
20400c46:	8526                	mv	a0,s1
20400c48:	3fad                	jal	20400bc2 <__sinit>
20400c4a:	04848493          	addi	s1,s1,72
20400c4e:	4480                	lw	s0,8(s1)
20400c50:	40dc                	lw	a5,4(s1)
20400c52:	17fd                	addi	a5,a5,-1
20400c54:	0007d663          	bgez	a5,20400c60 <__sfp+0x34>
20400c58:	409c                	lw	a5,0(s1)
20400c5a:	cfb1                	beqz	a5,20400cb6 <__sfp+0x8a>
20400c5c:	4084                	lw	s1,0(s1)
20400c5e:	bfc5                	j	20400c4e <__sfp+0x22>
20400c60:	00c41703          	lh	a4,12(s0)
20400c64:	e731                	bnez	a4,20400cb0 <__sfp+0x84>
20400c66:	77c1                	lui	a5,0xffff0
20400c68:	0785                	addi	a5,a5,1
20400c6a:	06042223          	sw	zero,100(s0)
20400c6e:	00042023          	sw	zero,0(s0)
20400c72:	00042223          	sw	zero,4(s0)
20400c76:	00042423          	sw	zero,8(s0)
20400c7a:	c45c                	sw	a5,12(s0)
20400c7c:	00042823          	sw	zero,16(s0)
20400c80:	00042a23          	sw	zero,20(s0)
20400c84:	00042c23          	sw	zero,24(s0)
20400c88:	4621                	li	a2,8
20400c8a:	4581                	li	a1,0
20400c8c:	05c40513          	addi	a0,s0,92
20400c90:	2a69                	jal	20400e2a <memset>
20400c92:	02042a23          	sw	zero,52(s0)
20400c96:	02042c23          	sw	zero,56(s0)
20400c9a:	04042423          	sw	zero,72(s0)
20400c9e:	04042623          	sw	zero,76(s0)
20400ca2:	8522                	mv	a0,s0
20400ca4:	40b2                	lw	ra,12(sp)
20400ca6:	4422                	lw	s0,8(sp)
20400ca8:	4492                	lw	s1,4(sp)
20400caa:	4902                	lw	s2,0(sp)
20400cac:	0141                	addi	sp,sp,16
20400cae:	8082                	ret
20400cb0:	06840413          	addi	s0,s0,104
20400cb4:	bf79                	j	20400c52 <__sfp+0x26>
20400cb6:	4591                	li	a1,4
20400cb8:	854a                	mv	a0,s2
20400cba:	35d1                	jal	20400b7e <__sfmoreglue>
20400cbc:	c088                	sw	a0,0(s1)
20400cbe:	842a                	mv	s0,a0
20400cc0:	fd51                	bnez	a0,20400c5c <__sfp+0x30>
20400cc2:	47b1                	li	a5,12
20400cc4:	00f92023          	sw	a5,0(s2)
20400cc8:	bfe9                	j	20400ca2 <__sfp+0x76>

20400cca <_fwalk_reent>:
_fwalk_reent():
20400cca:	7179                	addi	sp,sp,-48
20400ccc:	d422                	sw	s0,40(sp)
20400cce:	d04a                	sw	s2,32(sp)
20400cd0:	cc52                	sw	s4,24(sp)
20400cd2:	ca56                	sw	s5,20(sp)
20400cd4:	c85a                	sw	s6,16(sp)
20400cd6:	c65e                	sw	s7,12(sp)
20400cd8:	d606                	sw	ra,44(sp)
20400cda:	d226                	sw	s1,36(sp)
20400cdc:	ce4e                	sw	s3,28(sp)
20400cde:	8a2a                	mv	s4,a0
20400ce0:	8aae                	mv	s5,a1
20400ce2:	04850413          	addi	s0,a0,72
20400ce6:	4901                	li	s2,0
20400ce8:	4b05                	li	s6,1
20400cea:	5bfd                	li	s7,-1
20400cec:	ec09                	bnez	s0,20400d06 <_fwalk_reent+0x3c>
20400cee:	50b2                	lw	ra,44(sp)
20400cf0:	5422                	lw	s0,40(sp)
20400cf2:	854a                	mv	a0,s2
20400cf4:	5492                	lw	s1,36(sp)
20400cf6:	5902                	lw	s2,32(sp)
20400cf8:	49f2                	lw	s3,28(sp)
20400cfa:	4a62                	lw	s4,24(sp)
20400cfc:	4ad2                	lw	s5,20(sp)
20400cfe:	4b42                	lw	s6,16(sp)
20400d00:	4bb2                	lw	s7,12(sp)
20400d02:	6145                	addi	sp,sp,48
20400d04:	8082                	ret
20400d06:	4404                	lw	s1,8(s0)
20400d08:	00442983          	lw	s3,4(s0)
20400d0c:	19fd                	addi	s3,s3,-1
20400d0e:	0009d463          	bgez	s3,20400d16 <_fwalk_reent+0x4c>
20400d12:	4000                	lw	s0,0(s0)
20400d14:	bfe1                	j	20400cec <_fwalk_reent+0x22>
20400d16:	00c4d783          	lhu	a5,12(s1)
20400d1a:	00fb7b63          	bgeu	s6,a5,20400d30 <_fwalk_reent+0x66>
20400d1e:	00e49783          	lh	a5,14(s1)
20400d22:	01778763          	beq	a5,s7,20400d30 <_fwalk_reent+0x66>
20400d26:	85a6                	mv	a1,s1
20400d28:	8552                	mv	a0,s4
20400d2a:	9a82                	jalr	s5
20400d2c:	00a96933          	or	s2,s2,a0
20400d30:	06848493          	addi	s1,s1,104
20400d34:	bfe1                	j	20400d0c <_fwalk_reent+0x42>

20400d36 <__swhatbuf_r>:
__swhatbuf_r():
20400d36:	7119                	addi	sp,sp,-128
20400d38:	daa6                	sw	s1,116(sp)
20400d3a:	84ae                	mv	s1,a1
20400d3c:	00e59583          	lh	a1,14(a1)
20400d40:	dca2                	sw	s0,120(sp)
20400d42:	de86                	sw	ra,124(sp)
20400d44:	8432                	mv	s0,a2
20400d46:	0005dc63          	bgez	a1,20400d5e <__swhatbuf_r+0x28>
20400d4a:	00c4d783          	lhu	a5,12(s1)
20400d4e:	0006a023          	sw	zero,0(a3)
20400d52:	0807f793          	andi	a5,a5,128
20400d56:	e39d                	bnez	a5,20400d7c <__swhatbuf_r+0x46>
20400d58:	40000793          	li	a5,1024
20400d5c:	a015                	j	20400d80 <__swhatbuf_r+0x4a>
20400d5e:	0830                	addi	a2,sp,24
20400d60:	c636                	sw	a3,12(sp)
20400d62:	2f15                	jal	20401496 <_fstat_r>
20400d64:	46b2                	lw	a3,12(sp)
20400d66:	fe0542e3          	bltz	a0,20400d4a <__swhatbuf_r+0x14>
20400d6a:	4772                	lw	a4,28(sp)
20400d6c:	67bd                	lui	a5,0xf
20400d6e:	8ff9                	and	a5,a5,a4
20400d70:	7779                	lui	a4,0xffffe
20400d72:	97ba                	add	a5,a5,a4
20400d74:	0017b793          	seqz	a5,a5
20400d78:	c29c                	sw	a5,0(a3)
20400d7a:	bff9                	j	20400d58 <__swhatbuf_r+0x22>
20400d7c:	04000793          	li	a5,64
20400d80:	c01c                	sw	a5,0(s0)
20400d82:	50f6                	lw	ra,124(sp)
20400d84:	5466                	lw	s0,120(sp)
20400d86:	54d6                	lw	s1,116(sp)
20400d88:	4501                	li	a0,0
20400d8a:	6109                	addi	sp,sp,128
20400d8c:	8082                	ret

20400d8e <__smakebuf_r>:
__smakebuf_r():
20400d8e:	00c5d783          	lhu	a5,12(a1)
20400d92:	1101                	addi	sp,sp,-32
20400d94:	cc22                	sw	s0,24(sp)
20400d96:	ce06                	sw	ra,28(sp)
20400d98:	ca26                	sw	s1,20(sp)
20400d9a:	c84a                	sw	s2,16(sp)
20400d9c:	8b89                	andi	a5,a5,2
20400d9e:	842e                	mv	s0,a1
20400da0:	cf89                	beqz	a5,20400dba <__smakebuf_r+0x2c>
20400da2:	04740793          	addi	a5,s0,71
20400da6:	c01c                	sw	a5,0(s0)
20400da8:	c81c                	sw	a5,16(s0)
20400daa:	4785                	li	a5,1
20400dac:	c85c                	sw	a5,20(s0)
20400dae:	40f2                	lw	ra,28(sp)
20400db0:	4462                	lw	s0,24(sp)
20400db2:	44d2                	lw	s1,20(sp)
20400db4:	4942                	lw	s2,16(sp)
20400db6:	6105                	addi	sp,sp,32
20400db8:	8082                	ret
20400dba:	0074                	addi	a3,sp,12
20400dbc:	0030                	addi	a2,sp,8
20400dbe:	84aa                	mv	s1,a0
20400dc0:	3f9d                	jal	20400d36 <__swhatbuf_r>
20400dc2:	45a2                	lw	a1,8(sp)
20400dc4:	892a                	mv	s2,a0
20400dc6:	8526                	mv	a0,s1
20400dc8:	2a5d                	jal	20400f7e <_malloc_r>
20400dca:	ed01                	bnez	a0,20400de2 <__smakebuf_r+0x54>
20400dcc:	00c41783          	lh	a5,12(s0)
20400dd0:	2007f713          	andi	a4,a5,512
20400dd4:	ff69                	bnez	a4,20400dae <__smakebuf_r+0x20>
20400dd6:	9bf1                	andi	a5,a5,-4
20400dd8:	0027e793          	ori	a5,a5,2
20400ddc:	00f41623          	sh	a5,12(s0)
20400de0:	b7c9                	j	20400da2 <__smakebuf_r+0x14>
20400de2:	00000797          	auipc	a5,0x0
20400de6:	d9278793          	addi	a5,a5,-622 # 20400b74 <_cleanup_r>
20400dea:	d49c                	sw	a5,40(s1)
20400dec:	00c45783          	lhu	a5,12(s0)
20400df0:	c008                	sw	a0,0(s0)
20400df2:	c808                	sw	a0,16(s0)
20400df4:	0807e793          	ori	a5,a5,128
20400df8:	00f41623          	sh	a5,12(s0)
20400dfc:	47a2                	lw	a5,8(sp)
20400dfe:	c85c                	sw	a5,20(s0)
20400e00:	47b2                	lw	a5,12(sp)
20400e02:	cf89                	beqz	a5,20400e1c <__smakebuf_r+0x8e>
20400e04:	00e41583          	lh	a1,14(s0)
20400e08:	8526                	mv	a0,s1
20400e0a:	2d5d                	jal	204014c0 <_isatty_r>
20400e0c:	c901                	beqz	a0,20400e1c <__smakebuf_r+0x8e>
20400e0e:	00c45783          	lhu	a5,12(s0)
20400e12:	9bf1                	andi	a5,a5,-4
20400e14:	0017e793          	ori	a5,a5,1
20400e18:	00f41623          	sh	a5,12(s0)
20400e1c:	00c45783          	lhu	a5,12(s0)
20400e20:	00f96933          	or	s2,s2,a5
20400e24:	01241623          	sh	s2,12(s0)
20400e28:	b759                	j	20400dae <__smakebuf_r+0x20>

20400e2a <memset>:
memset():
20400e2a:	433d                	li	t1,15
20400e2c:	872a                	mv	a4,a0
20400e2e:	02c37363          	bgeu	t1,a2,20400e54 <memset+0x2a>
20400e32:	00f77793          	andi	a5,a4,15
20400e36:	efbd                	bnez	a5,20400eb4 <memset+0x8a>
20400e38:	e5ad                	bnez	a1,20400ea2 <memset+0x78>
20400e3a:	ff067693          	andi	a3,a2,-16
20400e3e:	8a3d                	andi	a2,a2,15
20400e40:	96ba                	add	a3,a3,a4
20400e42:	c30c                	sw	a1,0(a4)
20400e44:	c34c                	sw	a1,4(a4)
20400e46:	c70c                	sw	a1,8(a4)
20400e48:	c74c                	sw	a1,12(a4)
20400e4a:	0741                	addi	a4,a4,16
20400e4c:	fed76be3          	bltu	a4,a3,20400e42 <memset+0x18>
20400e50:	e211                	bnez	a2,20400e54 <memset+0x2a>
20400e52:	8082                	ret
20400e54:	40c306b3          	sub	a3,t1,a2
20400e58:	068a                	slli	a3,a3,0x2
20400e5a:	00000297          	auipc	t0,0x0
20400e5e:	9696                	add	a3,a3,t0
20400e60:	00a68067          	jr	10(a3)
20400e64:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcc02>
20400e68:	00b706a3          	sb	a1,13(a4)
20400e6c:	00b70623          	sb	a1,12(a4)
20400e70:	00b705a3          	sb	a1,11(a4)
20400e74:	00b70523          	sb	a1,10(a4)
20400e78:	00b704a3          	sb	a1,9(a4)
20400e7c:	00b70423          	sb	a1,8(a4)
20400e80:	00b703a3          	sb	a1,7(a4)
20400e84:	00b70323          	sb	a1,6(a4)
20400e88:	00b702a3          	sb	a1,5(a4)
20400e8c:	00b70223          	sb	a1,4(a4)
20400e90:	00b701a3          	sb	a1,3(a4)
20400e94:	00b70123          	sb	a1,2(a4)
20400e98:	00b700a3          	sb	a1,1(a4)
20400e9c:	00b70023          	sb	a1,0(a4)
20400ea0:	8082                	ret
20400ea2:	0ff5f593          	andi	a1,a1,255
20400ea6:	00859693          	slli	a3,a1,0x8
20400eaa:	8dd5                	or	a1,a1,a3
20400eac:	01059693          	slli	a3,a1,0x10
20400eb0:	8dd5                	or	a1,a1,a3
20400eb2:	b761                	j	20400e3a <memset+0x10>
20400eb4:	00279693          	slli	a3,a5,0x2
20400eb8:	00000297          	auipc	t0,0x0
20400ebc:	9696                	add	a3,a3,t0
20400ebe:	8286                	mv	t0,ra
20400ec0:	fa8680e7          	jalr	-88(a3)
20400ec4:	8096                	mv	ra,t0
20400ec6:	17c1                	addi	a5,a5,-16
20400ec8:	8f1d                	sub	a4,a4,a5
20400eca:	963e                	add	a2,a2,a5
20400ecc:	f8c374e3          	bgeu	t1,a2,20400e54 <memset+0x2a>
20400ed0:	b7a5                	j	20400e38 <memset+0xe>

20400ed2 <_free_r>:
_free_r():
20400ed2:	c5cd                	beqz	a1,20400f7c <_free_r+0xaa>
20400ed4:	ffc5a783          	lw	a5,-4(a1)
20400ed8:	1141                	addi	sp,sp,-16
20400eda:	c422                	sw	s0,8(sp)
20400edc:	c606                	sw	ra,12(sp)
20400ede:	c226                	sw	s1,4(sp)
20400ee0:	ffc58413          	addi	s0,a1,-4
20400ee4:	0007d363          	bgez	a5,20400eea <_free_r+0x18>
20400ee8:	943e                	add	s0,s0,a5
20400eea:	84aa                	mv	s1,a0
20400eec:	2589                	jal	2040152e <__malloc_lock>
20400eee:	5fc00797          	auipc	a5,0x5fc00
20400ef2:	88278793          	addi	a5,a5,-1918 # 80000770 <metal_segment_data_target_end>
20400ef6:	439c                	lw	a5,0(a5)
20400ef8:	ef89                	bnez	a5,20400f12 <_free_r+0x40>
20400efa:	00042223          	sw	zero,4(s0)
20400efe:	5fc00797          	auipc	a5,0x5fc00
20400f02:	8687a923          	sw	s0,-1934(a5) # 80000770 <metal_segment_data_target_end>
20400f06:	4422                	lw	s0,8(sp)
20400f08:	40b2                	lw	ra,12(sp)
20400f0a:	8526                	mv	a0,s1
20400f0c:	4492                	lw	s1,4(sp)
20400f0e:	0141                	addi	sp,sp,16
20400f10:	a505                	j	20401530 <__malloc_unlock>
20400f12:	00f47e63          	bgeu	s0,a5,20400f2e <_free_r+0x5c>
20400f16:	4014                	lw	a3,0(s0)
20400f18:	00d40733          	add	a4,s0,a3
20400f1c:	00e79663          	bne	a5,a4,20400f28 <_free_r+0x56>
20400f20:	4398                	lw	a4,0(a5)
20400f22:	43dc                	lw	a5,4(a5)
20400f24:	9736                	add	a4,a4,a3
20400f26:	c018                	sw	a4,0(s0)
20400f28:	c05c                	sw	a5,4(s0)
20400f2a:	bfd1                	j	20400efe <_free_r+0x2c>
20400f2c:	87ba                	mv	a5,a4
20400f2e:	43d8                	lw	a4,4(a5)
20400f30:	c319                	beqz	a4,20400f36 <_free_r+0x64>
20400f32:	fee47de3          	bgeu	s0,a4,20400f2c <_free_r+0x5a>
20400f36:	4394                	lw	a3,0(a5)
20400f38:	00d78633          	add	a2,a5,a3
20400f3c:	00861f63          	bne	a2,s0,20400f5a <_free_r+0x88>
20400f40:	4010                	lw	a2,0(s0)
20400f42:	96b2                	add	a3,a3,a2
20400f44:	c394                	sw	a3,0(a5)
20400f46:	00d78633          	add	a2,a5,a3
20400f4a:	fac71ee3          	bne	a4,a2,20400f06 <_free_r+0x34>
20400f4e:	4310                	lw	a2,0(a4)
20400f50:	4358                	lw	a4,4(a4)
20400f52:	96b2                	add	a3,a3,a2
20400f54:	c394                	sw	a3,0(a5)
20400f56:	c3d8                	sw	a4,4(a5)
20400f58:	b77d                	j	20400f06 <_free_r+0x34>
20400f5a:	00c47563          	bgeu	s0,a2,20400f64 <_free_r+0x92>
20400f5e:	47b1                	li	a5,12
20400f60:	c09c                	sw	a5,0(s1)
20400f62:	b755                	j	20400f06 <_free_r+0x34>
20400f64:	4010                	lw	a2,0(s0)
20400f66:	00c406b3          	add	a3,s0,a2
20400f6a:	00d71663          	bne	a4,a3,20400f76 <_free_r+0xa4>
20400f6e:	4314                	lw	a3,0(a4)
20400f70:	4358                	lw	a4,4(a4)
20400f72:	96b2                	add	a3,a3,a2
20400f74:	c014                	sw	a3,0(s0)
20400f76:	c058                	sw	a4,4(s0)
20400f78:	c3c0                	sw	s0,4(a5)
20400f7a:	b771                	j	20400f06 <_free_r+0x34>
20400f7c:	8082                	ret

20400f7e <_malloc_r>:
_malloc_r():
20400f7e:	1101                	addi	sp,sp,-32
20400f80:	ca26                	sw	s1,20(sp)
20400f82:	00358493          	addi	s1,a1,3
20400f86:	98f1                	andi	s1,s1,-4
20400f88:	ce06                	sw	ra,28(sp)
20400f8a:	cc22                	sw	s0,24(sp)
20400f8c:	c84a                	sw	s2,16(sp)
20400f8e:	c64e                	sw	s3,12(sp)
20400f90:	04a1                	addi	s1,s1,8
20400f92:	47b1                	li	a5,12
20400f94:	04f4f763          	bgeu	s1,a5,20400fe2 <_malloc_r+0x64>
20400f98:	44b1                	li	s1,12
20400f9a:	04b4e663          	bltu	s1,a1,20400fe6 <_malloc_r+0x68>
20400f9e:	892a                	mv	s2,a0
20400fa0:	2379                	jal	2040152e <__malloc_lock>
20400fa2:	5fbff797          	auipc	a5,0x5fbff
20400fa6:	7ce78793          	addi	a5,a5,1998 # 80000770 <metal_segment_data_target_end>
20400faa:	4398                	lw	a4,0(a5)
20400fac:	843a                	mv	s0,a4
20400fae:	e431                	bnez	s0,20400ffa <_malloc_r+0x7c>
20400fb0:	5fbff797          	auipc	a5,0x5fbff
20400fb4:	7c478793          	addi	a5,a5,1988 # 80000774 <__malloc_sbrk_start>
20400fb8:	439c                	lw	a5,0(a5)
20400fba:	eb81                	bnez	a5,20400fca <_malloc_r+0x4c>
20400fbc:	4581                	li	a1,0
20400fbe:	854a                	mv	a0,s2
20400fc0:	2645                	jal	20401360 <_sbrk_r>
20400fc2:	5fbff797          	auipc	a5,0x5fbff
20400fc6:	7aa7a923          	sw	a0,1970(a5) # 80000774 <__malloc_sbrk_start>
20400fca:	85a6                	mv	a1,s1
20400fcc:	854a                	mv	a0,s2
20400fce:	2e49                	jal	20401360 <_sbrk_r>
20400fd0:	59fd                	li	s3,-1
20400fd2:	07351963          	bne	a0,s3,20401044 <_malloc_r+0xc6>
20400fd6:	47b1                	li	a5,12
20400fd8:	00f92023          	sw	a5,0(s2)
20400fdc:	854a                	mv	a0,s2
20400fde:	2b89                	jal	20401530 <__malloc_unlock>
20400fe0:	a029                	j	20400fea <_malloc_r+0x6c>
20400fe2:	fa04dce3          	bgez	s1,20400f9a <_malloc_r+0x1c>
20400fe6:	47b1                	li	a5,12
20400fe8:	c11c                	sw	a5,0(a0)
20400fea:	4501                	li	a0,0
20400fec:	40f2                	lw	ra,28(sp)
20400fee:	4462                	lw	s0,24(sp)
20400ff0:	44d2                	lw	s1,20(sp)
20400ff2:	4942                	lw	s2,16(sp)
20400ff4:	49b2                	lw	s3,12(sp)
20400ff6:	6105                	addi	sp,sp,32
20400ff8:	8082                	ret
20400ffa:	401c                	lw	a5,0(s0)
20400ffc:	8f85                	sub	a5,a5,s1
20400ffe:	0407c063          	bltz	a5,2040103e <_malloc_r+0xc0>
20401002:	46ad                	li	a3,11
20401004:	00f6f663          	bgeu	a3,a5,20401010 <_malloc_r+0x92>
20401008:	c01c                	sw	a5,0(s0)
2040100a:	943e                	add	s0,s0,a5
2040100c:	c004                	sw	s1,0(s0)
2040100e:	a801                	j	2040101e <_malloc_r+0xa0>
20401010:	405c                	lw	a5,4(s0)
20401012:	02871463          	bne	a4,s0,2040103a <_malloc_r+0xbc>
20401016:	5fbff717          	auipc	a4,0x5fbff
2040101a:	74f72d23          	sw	a5,1882(a4) # 80000770 <metal_segment_data_target_end>
2040101e:	854a                	mv	a0,s2
20401020:	2b01                	jal	20401530 <__malloc_unlock>
20401022:	00b40513          	addi	a0,s0,11
20401026:	00440793          	addi	a5,s0,4
2040102a:	9961                	andi	a0,a0,-8
2040102c:	40f50733          	sub	a4,a0,a5
20401030:	df55                	beqz	a4,20400fec <_malloc_r+0x6e>
20401032:	943a                	add	s0,s0,a4
20401034:	8f89                	sub	a5,a5,a0
20401036:	c01c                	sw	a5,0(s0)
20401038:	bf55                	j	20400fec <_malloc_r+0x6e>
2040103a:	c35c                	sw	a5,4(a4)
2040103c:	b7cd                	j	2040101e <_malloc_r+0xa0>
2040103e:	8722                	mv	a4,s0
20401040:	4040                	lw	s0,4(s0)
20401042:	b7b5                	j	20400fae <_malloc_r+0x30>
20401044:	00350413          	addi	s0,a0,3
20401048:	9871                	andi	s0,s0,-4
2040104a:	fc8501e3          	beq	a0,s0,2040100c <_malloc_r+0x8e>
2040104e:	40a405b3          	sub	a1,s0,a0
20401052:	854a                	mv	a0,s2
20401054:	2631                	jal	20401360 <_sbrk_r>
20401056:	fb351be3          	bne	a0,s3,2040100c <_malloc_r+0x8e>
2040105a:	bfb5                	j	20400fd6 <_malloc_r+0x58>

2040105c <__sfputc_r>:
__sfputc_r():
2040105c:	461c                	lw	a5,8(a2)
2040105e:	17fd                	addi	a5,a5,-1
20401060:	c61c                	sw	a5,8(a2)
20401062:	0007da63          	bgez	a5,20401076 <__sfputc_r+0x1a>
20401066:	4e18                	lw	a4,24(a2)
20401068:	00e7c563          	blt	a5,a4,20401072 <__sfputc_r+0x16>
2040106c:	47a9                	li	a5,10
2040106e:	00f59463          	bne	a1,a5,20401076 <__sfputc_r+0x1a>
20401072:	f1cff06f          	j	2040078e <__swbuf_r>
20401076:	421c                	lw	a5,0(a2)
20401078:	852e                	mv	a0,a1
2040107a:	00178713          	addi	a4,a5,1
2040107e:	c218                	sw	a4,0(a2)
20401080:	00b78023          	sb	a1,0(a5)
20401084:	8082                	ret

20401086 <__sfputs_r>:
__sfputs_r():
20401086:	1101                	addi	sp,sp,-32
20401088:	cc22                	sw	s0,24(sp)
2040108a:	ca26                	sw	s1,20(sp)
2040108c:	c84a                	sw	s2,16(sp)
2040108e:	c64e                	sw	s3,12(sp)
20401090:	c452                	sw	s4,8(sp)
20401092:	ce06                	sw	ra,28(sp)
20401094:	892a                	mv	s2,a0
20401096:	89ae                	mv	s3,a1
20401098:	8432                	mv	s0,a2
2040109a:	00d604b3          	add	s1,a2,a3
2040109e:	5a7d                	li	s4,-1
204010a0:	00941463          	bne	s0,s1,204010a8 <__sfputs_r+0x22>
204010a4:	4501                	li	a0,0
204010a6:	a809                	j	204010b8 <__sfputs_r+0x32>
204010a8:	00044583          	lbu	a1,0(s0)
204010ac:	864e                	mv	a2,s3
204010ae:	854a                	mv	a0,s2
204010b0:	3775                	jal	2040105c <__sfputc_r>
204010b2:	0405                	addi	s0,s0,1
204010b4:	ff4516e3          	bne	a0,s4,204010a0 <__sfputs_r+0x1a>
204010b8:	40f2                	lw	ra,28(sp)
204010ba:	4462                	lw	s0,24(sp)
204010bc:	44d2                	lw	s1,20(sp)
204010be:	4942                	lw	s2,16(sp)
204010c0:	49b2                	lw	s3,12(sp)
204010c2:	4a22                	lw	s4,8(sp)
204010c4:	6105                	addi	sp,sp,32
204010c6:	8082                	ret

204010c8 <_vfiprintf_r>:
_vfiprintf_r():
204010c8:	7135                	addi	sp,sp,-160
204010ca:	cd22                	sw	s0,152(sp)
204010cc:	cb26                	sw	s1,148(sp)
204010ce:	c94a                	sw	s2,144(sp)
204010d0:	c74e                	sw	s3,140(sp)
204010d2:	cf06                	sw	ra,156(sp)
204010d4:	c552                	sw	s4,136(sp)
204010d6:	c356                	sw	s5,132(sp)
204010d8:	c15a                	sw	s6,128(sp)
204010da:	dede                	sw	s7,124(sp)
204010dc:	dce2                	sw	s8,120(sp)
204010de:	dae6                	sw	s9,116(sp)
204010e0:	89aa                	mv	s3,a0
204010e2:	84ae                	mv	s1,a1
204010e4:	8932                	mv	s2,a2
204010e6:	8436                	mv	s0,a3
204010e8:	c501                	beqz	a0,204010f0 <_vfiprintf_r+0x28>
204010ea:	4d1c                	lw	a5,24(a0)
204010ec:	e391                	bnez	a5,204010f0 <_vfiprintf_r+0x28>
204010ee:	3cd1                	jal	20400bc2 <__sinit>
204010f0:	00004797          	auipc	a5,0x4
204010f4:	3c078793          	addi	a5,a5,960 # 204054b0 <__sf_fake_stdin>
204010f8:	0cf49b63          	bne	s1,a5,204011ce <_vfiprintf_r+0x106>
204010fc:	0049a483          	lw	s1,4(s3)
20401100:	00c4d783          	lhu	a5,12(s1)
20401104:	8ba1                	andi	a5,a5,8
20401106:	c7f5                	beqz	a5,204011f2 <_vfiprintf_r+0x12a>
20401108:	489c                	lw	a5,16(s1)
2040110a:	c7e5                	beqz	a5,204011f2 <_vfiprintf_r+0x12a>
2040110c:	02000793          	li	a5,32
20401110:	02f104a3          	sb	a5,41(sp)
20401114:	03000793          	li	a5,48
20401118:	d202                	sw	zero,36(sp)
2040111a:	02f10523          	sb	a5,42(sp)
2040111e:	c622                	sw	s0,12(sp)
20401120:	02500b93          	li	s7,37
20401124:	00004a97          	auipc	s5,0x4
20401128:	3cca8a93          	addi	s5,s5,972 # 204054f0 <__sf_fake_stdout+0x20>
2040112c:	4c05                	li	s8,1
2040112e:	4b29                	li	s6,10
20401130:	844a                	mv	s0,s2
20401132:	00044783          	lbu	a5,0(s0)
20401136:	c399                	beqz	a5,2040113c <_vfiprintf_r+0x74>
20401138:	0f779063          	bne	a5,s7,20401218 <_vfiprintf_r+0x150>
2040113c:	41240cb3          	sub	s9,s0,s2
20401140:	000c8d63          	beqz	s9,2040115a <_vfiprintf_r+0x92>
20401144:	86e6                	mv	a3,s9
20401146:	864a                	mv	a2,s2
20401148:	85a6                	mv	a1,s1
2040114a:	854e                	mv	a0,s3
2040114c:	3f2d                	jal	20401086 <__sfputs_r>
2040114e:	57fd                	li	a5,-1
20401150:	1ef50663          	beq	a0,a5,2040133c <_vfiprintf_r+0x274>
20401154:	5692                	lw	a3,36(sp)
20401156:	96e6                	add	a3,a3,s9
20401158:	d236                	sw	a3,36(sp)
2040115a:	00044783          	lbu	a5,0(s0)
2040115e:	1c078f63          	beqz	a5,2040133c <_vfiprintf_r+0x274>
20401162:	57fd                	li	a5,-1
20401164:	00140913          	addi	s2,s0,1
20401168:	c802                	sw	zero,16(sp)
2040116a:	ce02                	sw	zero,28(sp)
2040116c:	ca3e                	sw	a5,20(sp)
2040116e:	cc02                	sw	zero,24(sp)
20401170:	040109a3          	sb	zero,83(sp)
20401174:	d482                	sw	zero,104(sp)
20401176:	00094583          	lbu	a1,0(s2)
2040117a:	4615                	li	a2,5
2040117c:	8556                	mv	a0,s5
2040117e:	2e59                	jal	20401514 <memchr>
20401180:	00190413          	addi	s0,s2,1
20401184:	47c2                	lw	a5,16(sp)
20401186:	e959                	bnez	a0,2040121c <_vfiprintf_r+0x154>
20401188:	0107f713          	andi	a4,a5,16
2040118c:	c709                	beqz	a4,20401196 <_vfiprintf_r+0xce>
2040118e:	02000713          	li	a4,32
20401192:	04e109a3          	sb	a4,83(sp)
20401196:	0087f713          	andi	a4,a5,8
2040119a:	c709                	beqz	a4,204011a4 <_vfiprintf_r+0xdc>
2040119c:	02b00713          	li	a4,43
204011a0:	04e109a3          	sb	a4,83(sp)
204011a4:	00094683          	lbu	a3,0(s2)
204011a8:	02a00713          	li	a4,42
204011ac:	08e68063          	beq	a3,a4,2040122c <_vfiprintf_r+0x164>
204011b0:	47f2                	lw	a5,28(sp)
204011b2:	844a                	mv	s0,s2
204011b4:	4681                	li	a3,0
204011b6:	4625                	li	a2,9
204011b8:	00044703          	lbu	a4,0(s0)
204011bc:	00140593          	addi	a1,s0,1
204011c0:	fd070713          	addi	a4,a4,-48
204011c4:	0ae67963          	bgeu	a2,a4,20401276 <_vfiprintf_r+0x1ae>
204011c8:	cab5                	beqz	a3,2040123c <_vfiprintf_r+0x174>
204011ca:	ce3e                	sw	a5,28(sp)
204011cc:	a885                	j	2040123c <_vfiprintf_r+0x174>
204011ce:	00004797          	auipc	a5,0x4
204011d2:	30278793          	addi	a5,a5,770 # 204054d0 <__sf_fake_stdout>
204011d6:	00f49563          	bne	s1,a5,204011e0 <_vfiprintf_r+0x118>
204011da:	0089a483          	lw	s1,8(s3)
204011de:	b70d                	j	20401100 <_vfiprintf_r+0x38>
204011e0:	00004797          	auipc	a5,0x4
204011e4:	2b078793          	addi	a5,a5,688 # 20405490 <__sf_fake_stderr>
204011e8:	f0f49ce3          	bne	s1,a5,20401100 <_vfiprintf_r+0x38>
204011ec:	00c9a483          	lw	s1,12(s3)
204011f0:	bf01                	j	20401100 <_vfiprintf_r+0x38>
204011f2:	85a6                	mv	a1,s1
204011f4:	854e                	mv	a0,s3
204011f6:	e58ff0ef          	jal	ra,2040084e <__swsetup_r>
204011fa:	d909                	beqz	a0,2040110c <_vfiprintf_r+0x44>
204011fc:	557d                	li	a0,-1
204011fe:	40fa                	lw	ra,156(sp)
20401200:	446a                	lw	s0,152(sp)
20401202:	44da                	lw	s1,148(sp)
20401204:	494a                	lw	s2,144(sp)
20401206:	49ba                	lw	s3,140(sp)
20401208:	4a2a                	lw	s4,136(sp)
2040120a:	4a9a                	lw	s5,132(sp)
2040120c:	4b0a                	lw	s6,128(sp)
2040120e:	5bf6                	lw	s7,124(sp)
20401210:	5c66                	lw	s8,120(sp)
20401212:	5cd6                	lw	s9,116(sp)
20401214:	610d                	addi	sp,sp,160
20401216:	8082                	ret
20401218:	0405                	addi	s0,s0,1
2040121a:	bf21                	j	20401132 <_vfiprintf_r+0x6a>
2040121c:	41550533          	sub	a0,a0,s5
20401220:	00ac1533          	sll	a0,s8,a0
20401224:	8fc9                	or	a5,a5,a0
20401226:	c83e                	sw	a5,16(sp)
20401228:	8922                	mv	s2,s0
2040122a:	b7b1                	j	20401176 <_vfiprintf_r+0xae>
2040122c:	4732                	lw	a4,12(sp)
2040122e:	00470693          	addi	a3,a4,4
20401232:	4318                	lw	a4,0(a4)
20401234:	c636                	sw	a3,12(sp)
20401236:	02074963          	bltz	a4,20401268 <_vfiprintf_r+0x1a0>
2040123a:	ce3a                	sw	a4,28(sp)
2040123c:	00044703          	lbu	a4,0(s0)
20401240:	02e00793          	li	a5,46
20401244:	04f71f63          	bne	a4,a5,204012a2 <_vfiprintf_r+0x1da>
20401248:	00144703          	lbu	a4,1(s0)
2040124c:	02a00793          	li	a5,42
20401250:	02f71b63          	bne	a4,a5,20401286 <_vfiprintf_r+0x1be>
20401254:	47b2                	lw	a5,12(sp)
20401256:	0409                	addi	s0,s0,2
20401258:	00478713          	addi	a4,a5,4
2040125c:	439c                	lw	a5,0(a5)
2040125e:	c63a                	sw	a4,12(sp)
20401260:	0207c163          	bltz	a5,20401282 <_vfiprintf_r+0x1ba>
20401264:	ca3e                	sw	a5,20(sp)
20401266:	a835                	j	204012a2 <_vfiprintf_r+0x1da>
20401268:	40e00733          	neg	a4,a4
2040126c:	0027e793          	ori	a5,a5,2
20401270:	ce3a                	sw	a4,28(sp)
20401272:	c83e                	sw	a5,16(sp)
20401274:	b7e1                	j	2040123c <_vfiprintf_r+0x174>
20401276:	036787b3          	mul	a5,a5,s6
2040127a:	4685                	li	a3,1
2040127c:	842e                	mv	s0,a1
2040127e:	97ba                	add	a5,a5,a4
20401280:	bf25                	j	204011b8 <_vfiprintf_r+0xf0>
20401282:	57fd                	li	a5,-1
20401284:	b7c5                	j	20401264 <_vfiprintf_r+0x19c>
20401286:	0405                	addi	s0,s0,1
20401288:	ca02                	sw	zero,20(sp)
2040128a:	4681                	li	a3,0
2040128c:	4781                	li	a5,0
2040128e:	4625                	li	a2,9
20401290:	00044703          	lbu	a4,0(s0)
20401294:	00140593          	addi	a1,s0,1
20401298:	fd070713          	addi	a4,a4,-48
2040129c:	06e67663          	bgeu	a2,a4,20401308 <_vfiprintf_r+0x240>
204012a0:	f2f1                	bnez	a3,20401264 <_vfiprintf_r+0x19c>
204012a2:	00044583          	lbu	a1,0(s0)
204012a6:	460d                	li	a2,3
204012a8:	00004517          	auipc	a0,0x4
204012ac:	25050513          	addi	a0,a0,592 # 204054f8 <__sf_fake_stdout+0x28>
204012b0:	2495                	jal	20401514 <memchr>
204012b2:	cd11                	beqz	a0,204012ce <_vfiprintf_r+0x206>
204012b4:	00004797          	auipc	a5,0x4
204012b8:	24478793          	addi	a5,a5,580 # 204054f8 <__sf_fake_stdout+0x28>
204012bc:	8d1d                	sub	a0,a0,a5
204012be:	04000793          	li	a5,64
204012c2:	00a797b3          	sll	a5,a5,a0
204012c6:	4542                	lw	a0,16(sp)
204012c8:	0405                	addi	s0,s0,1
204012ca:	8d5d                	or	a0,a0,a5
204012cc:	c82a                	sw	a0,16(sp)
204012ce:	00044583          	lbu	a1,0(s0)
204012d2:	4619                	li	a2,6
204012d4:	00004517          	auipc	a0,0x4
204012d8:	22850513          	addi	a0,a0,552 # 204054fc <__sf_fake_stdout+0x2c>
204012dc:	00140913          	addi	s2,s0,1
204012e0:	02b10423          	sb	a1,40(sp)
204012e4:	2c05                	jal	20401514 <memchr>
204012e6:	c13d                	beqz	a0,2040134c <_vfiprintf_r+0x284>
204012e8:	dfbff797          	auipc	a5,0xdfbff
204012ec:	d1878793          	addi	a5,a5,-744 # 0 <__metal_boot_hart>
204012f0:	e795                	bnez	a5,2040131c <_vfiprintf_r+0x254>
204012f2:	4742                	lw	a4,16(sp)
204012f4:	47b2                	lw	a5,12(sp)
204012f6:	10077713          	andi	a4,a4,256
204012fa:	cf09                	beqz	a4,20401314 <_vfiprintf_r+0x24c>
204012fc:	0791                	addi	a5,a5,4
204012fe:	c63e                	sw	a5,12(sp)
20401300:	5792                	lw	a5,36(sp)
20401302:	97d2                	add	a5,a5,s4
20401304:	d23e                	sw	a5,36(sp)
20401306:	b52d                	j	20401130 <_vfiprintf_r+0x68>
20401308:	036787b3          	mul	a5,a5,s6
2040130c:	4685                	li	a3,1
2040130e:	842e                	mv	s0,a1
20401310:	97ba                	add	a5,a5,a4
20401312:	bfbd                	j	20401290 <_vfiprintf_r+0x1c8>
20401314:	079d                	addi	a5,a5,7
20401316:	9be1                	andi	a5,a5,-8
20401318:	07a1                	addi	a5,a5,8
2040131a:	b7d5                	j	204012fe <_vfiprintf_r+0x236>
2040131c:	0078                	addi	a4,sp,12
2040131e:	00000697          	auipc	a3,0x0
20401322:	d6868693          	addi	a3,a3,-664 # 20401086 <__sfputs_r>
20401326:	8626                	mv	a2,s1
20401328:	080c                	addi	a1,sp,16
2040132a:	854e                	mv	a0,s3
2040132c:	00000097          	auipc	ra,0x0
20401330:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401334:	57fd                	li	a5,-1
20401336:	8a2a                	mv	s4,a0
20401338:	fcf514e3          	bne	a0,a5,20401300 <_vfiprintf_r+0x238>
2040133c:	00c4d783          	lhu	a5,12(s1)
20401340:	0407f793          	andi	a5,a5,64
20401344:	ea079ce3          	bnez	a5,204011fc <_vfiprintf_r+0x134>
20401348:	5512                	lw	a0,36(sp)
2040134a:	bd55                	j	204011fe <_vfiprintf_r+0x136>
2040134c:	0078                	addi	a4,sp,12
2040134e:	00000697          	auipc	a3,0x0
20401352:	d3868693          	addi	a3,a3,-712 # 20401086 <__sfputs_r>
20401356:	8626                	mv	a2,s1
20401358:	080c                	addi	a1,sp,16
2040135a:	854e                	mv	a0,s3
2040135c:	24cd                	jal	2040163e <_printf_i>
2040135e:	bfd9                	j	20401334 <_vfiprintf_r+0x26c>

20401360 <_sbrk_r>:
_sbrk_r():
20401360:	1141                	addi	sp,sp,-16
20401362:	c422                	sw	s0,8(sp)
20401364:	842a                	mv	s0,a0
20401366:	852e                	mv	a0,a1
20401368:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
2040136c:	c606                	sw	ra,12(sp)
2040136e:	2da9                	jal	204019c8 <_sbrk>
20401370:	57fd                	li	a5,-1
20401372:	00f51763          	bne	a0,a5,20401380 <_sbrk_r+0x20>
20401376:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
2040137a:	439c                	lw	a5,0(a5)
2040137c:	c391                	beqz	a5,20401380 <_sbrk_r+0x20>
2040137e:	c01c                	sw	a5,0(s0)
20401380:	40b2                	lw	ra,12(sp)
20401382:	4422                	lw	s0,8(sp)
20401384:	0141                	addi	sp,sp,16
20401386:	8082                	ret

20401388 <__sread>:
__sread():
20401388:	1141                	addi	sp,sp,-16
2040138a:	c422                	sw	s0,8(sp)
2040138c:	842e                	mv	s0,a1
2040138e:	00e59583          	lh	a1,14(a1)
20401392:	c606                	sw	ra,12(sp)
20401394:	23b1                	jal	204018e0 <_read_r>
20401396:	00054963          	bltz	a0,204013a8 <__sread+0x20>
2040139a:	487c                	lw	a5,84(s0)
2040139c:	97aa                	add	a5,a5,a0
2040139e:	c87c                	sw	a5,84(s0)
204013a0:	40b2                	lw	ra,12(sp)
204013a2:	4422                	lw	s0,8(sp)
204013a4:	0141                	addi	sp,sp,16
204013a6:	8082                	ret
204013a8:	00c45783          	lhu	a5,12(s0)
204013ac:	777d                	lui	a4,0xfffff
204013ae:	177d                	addi	a4,a4,-1
204013b0:	8ff9                	and	a5,a5,a4
204013b2:	00f41623          	sh	a5,12(s0)
204013b6:	b7ed                	j	204013a0 <__sread+0x18>

204013b8 <__swrite>:
__swrite():
204013b8:	00c5d783          	lhu	a5,12(a1)
204013bc:	1101                	addi	sp,sp,-32
204013be:	cc22                	sw	s0,24(sp)
204013c0:	ca26                	sw	s1,20(sp)
204013c2:	c84a                	sw	s2,16(sp)
204013c4:	c64e                	sw	s3,12(sp)
204013c6:	ce06                	sw	ra,28(sp)
204013c8:	1007f793          	andi	a5,a5,256
204013cc:	84aa                	mv	s1,a0
204013ce:	842e                	mv	s0,a1
204013d0:	8932                	mv	s2,a2
204013d2:	89b6                	mv	s3,a3
204013d4:	c791                	beqz	a5,204013e0 <__swrite+0x28>
204013d6:	00e59583          	lh	a1,14(a1)
204013da:	4689                	li	a3,2
204013dc:	4601                	li	a2,0
204013de:	2229                	jal	204014e8 <_lseek_r>
204013e0:	00c45783          	lhu	a5,12(s0)
204013e4:	777d                	lui	a4,0xfffff
204013e6:	177d                	addi	a4,a4,-1
204013e8:	8ff9                	and	a5,a5,a4
204013ea:	00f41623          	sh	a5,12(s0)
204013ee:	00e41583          	lh	a1,14(s0)
204013f2:	4462                	lw	s0,24(sp)
204013f4:	40f2                	lw	ra,28(sp)
204013f6:	86ce                	mv	a3,s3
204013f8:	864a                	mv	a2,s2
204013fa:	49b2                	lw	s3,12(sp)
204013fc:	4942                	lw	s2,16(sp)
204013fe:	8526                	mv	a0,s1
20401400:	44d2                	lw	s1,20(sp)
20401402:	6105                	addi	sp,sp,32
20401404:	a83d                	j	20401442 <_write_r>

20401406 <__sseek>:
__sseek():
20401406:	1141                	addi	sp,sp,-16
20401408:	c422                	sw	s0,8(sp)
2040140a:	842e                	mv	s0,a1
2040140c:	00e59583          	lh	a1,14(a1)
20401410:	c606                	sw	ra,12(sp)
20401412:	28d9                	jal	204014e8 <_lseek_r>
20401414:	57fd                	li	a5,-1
20401416:	00c45703          	lhu	a4,12(s0)
2040141a:	00f51b63          	bne	a0,a5,20401430 <__sseek+0x2a>
2040141e:	77fd                	lui	a5,0xfffff
20401420:	17fd                	addi	a5,a5,-1
20401422:	8ff9                	and	a5,a5,a4
20401424:	00f41623          	sh	a5,12(s0)
20401428:	40b2                	lw	ra,12(sp)
2040142a:	4422                	lw	s0,8(sp)
2040142c:	0141                	addi	sp,sp,16
2040142e:	8082                	ret
20401430:	6785                	lui	a5,0x1
20401432:	8fd9                	or	a5,a5,a4
20401434:	00f41623          	sh	a5,12(s0)
20401438:	c868                	sw	a0,84(s0)
2040143a:	b7fd                	j	20401428 <__sseek+0x22>

2040143c <__sclose>:
__sclose():
2040143c:	00e59583          	lh	a1,14(a1)
20401440:	a03d                	j	2040146e <_close_r>

20401442 <_write_r>:
_write_r():
20401442:	1141                	addi	sp,sp,-16
20401444:	c422                	sw	s0,8(sp)
20401446:	842a                	mv	s0,a0
20401448:	852e                	mv	a0,a1
2040144a:	85b2                	mv	a1,a2
2040144c:	8636                	mv	a2,a3
2040144e:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
20401452:	c606                	sw	ra,12(sp)
20401454:	23cd                	jal	20401a36 <_write>
20401456:	57fd                	li	a5,-1
20401458:	00f51763          	bne	a0,a5,20401466 <_write_r+0x24>
2040145c:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
20401460:	439c                	lw	a5,0(a5)
20401462:	c391                	beqz	a5,20401466 <_write_r+0x24>
20401464:	c01c                	sw	a5,0(s0)
20401466:	40b2                	lw	ra,12(sp)
20401468:	4422                	lw	s0,8(sp)
2040146a:	0141                	addi	sp,sp,16
2040146c:	8082                	ret

2040146e <_close_r>:
_close_r():
2040146e:	1141                	addi	sp,sp,-16
20401470:	c422                	sw	s0,8(sp)
20401472:	842a                	mv	s0,a0
20401474:	852e                	mv	a0,a1
20401476:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
2040147a:	c606                	sw	ra,12(sp)
2040147c:	2941                	jal	2040190c <_close>
2040147e:	57fd                	li	a5,-1
20401480:	00f51763          	bne	a0,a5,2040148e <_close_r+0x20>
20401484:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
20401488:	439c                	lw	a5,0(a5)
2040148a:	c391                	beqz	a5,2040148e <_close_r+0x20>
2040148c:	c01c                	sw	a5,0(s0)
2040148e:	40b2                	lw	ra,12(sp)
20401490:	4422                	lw	s0,8(sp)
20401492:	0141                	addi	sp,sp,16
20401494:	8082                	ret

20401496 <_fstat_r>:
_fstat_r():
20401496:	1141                	addi	sp,sp,-16
20401498:	c422                	sw	s0,8(sp)
2040149a:	842a                	mv	s0,a0
2040149c:	852e                	mv	a0,a1
2040149e:	85b2                	mv	a1,a2
204014a0:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204014a4:	c606                	sw	ra,12(sp)
204014a6:	2161                	jal	2040192e <_fstat>
204014a8:	57fd                	li	a5,-1
204014aa:	00f51763          	bne	a0,a5,204014b8 <_fstat_r+0x22>
204014ae:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
204014b2:	439c                	lw	a5,0(a5)
204014b4:	c391                	beqz	a5,204014b8 <_fstat_r+0x22>
204014b6:	c01c                	sw	a5,0(s0)
204014b8:	40b2                	lw	ra,12(sp)
204014ba:	4422                	lw	s0,8(sp)
204014bc:	0141                	addi	sp,sp,16
204014be:	8082                	ret

204014c0 <_isatty_r>:
_isatty_r():
204014c0:	1141                	addi	sp,sp,-16
204014c2:	c422                	sw	s0,8(sp)
204014c4:	842a                	mv	s0,a0
204014c6:	852e                	mv	a0,a1
204014c8:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204014cc:	c606                	sw	ra,12(sp)
204014ce:	2159                	jal	20401954 <_isatty>
204014d0:	57fd                	li	a5,-1
204014d2:	00f51763          	bne	a0,a5,204014e0 <_isatty_r+0x20>
204014d6:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
204014da:	439c                	lw	a5,0(a5)
204014dc:	c391                	beqz	a5,204014e0 <_isatty_r+0x20>
204014de:	c01c                	sw	a5,0(s0)
204014e0:	40b2                	lw	ra,12(sp)
204014e2:	4422                	lw	s0,8(sp)
204014e4:	0141                	addi	sp,sp,16
204014e6:	8082                	ret

204014e8 <_lseek_r>:
_lseek_r():
204014e8:	1141                	addi	sp,sp,-16
204014ea:	c422                	sw	s0,8(sp)
204014ec:	842a                	mv	s0,a0
204014ee:	852e                	mv	a0,a1
204014f0:	85b2                	mv	a1,a2
204014f2:	8636                	mv	a2,a3
204014f4:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204014f8:	c606                	sw	ra,12(sp)
204014fa:	29ad                	jal	20401974 <_lseek>
204014fc:	57fd                	li	a5,-1
204014fe:	00f51763          	bne	a0,a5,2040150c <_lseek_r+0x24>
20401502:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
20401506:	439c                	lw	a5,0(a5)
20401508:	c391                	beqz	a5,2040150c <_lseek_r+0x24>
2040150a:	c01c                	sw	a5,0(s0)
2040150c:	40b2                	lw	ra,12(sp)
2040150e:	4422                	lw	s0,8(sp)
20401510:	0141                	addi	sp,sp,16
20401512:	8082                	ret

20401514 <memchr>:
memchr():
20401514:	0ff5f593          	andi	a1,a1,255
20401518:	962a                	add	a2,a2,a0
2040151a:	00c51463          	bne	a0,a2,20401522 <memchr+0xe>
2040151e:	4501                	li	a0,0
20401520:	8082                	ret
20401522:	00054783          	lbu	a5,0(a0)
20401526:	feb78de3          	beq	a5,a1,20401520 <memchr+0xc>
2040152a:	0505                	addi	a0,a0,1
2040152c:	b7fd                	j	2040151a <memchr+0x6>

2040152e <__malloc_lock>:
__malloc_lock():
2040152e:	8082                	ret

20401530 <__malloc_unlock>:
__malloc_unlock():
20401530:	8082                	ret

20401532 <_printf_common>:
_printf_common():
20401532:	7179                	addi	sp,sp,-48
20401534:	ca56                	sw	s5,20(sp)
20401536:	499c                	lw	a5,16(a1)
20401538:	8aba                	mv	s5,a4
2040153a:	4598                	lw	a4,8(a1)
2040153c:	d422                	sw	s0,40(sp)
2040153e:	d226                	sw	s1,36(sp)
20401540:	ce4e                	sw	s3,28(sp)
20401542:	cc52                	sw	s4,24(sp)
20401544:	d606                	sw	ra,44(sp)
20401546:	d04a                	sw	s2,32(sp)
20401548:	c85a                	sw	s6,16(sp)
2040154a:	c65e                	sw	s7,12(sp)
2040154c:	89aa                	mv	s3,a0
2040154e:	842e                	mv	s0,a1
20401550:	84b2                	mv	s1,a2
20401552:	8a36                	mv	s4,a3
20401554:	00e7d363          	bge	a5,a4,2040155a <_printf_common+0x28>
20401558:	87ba                	mv	a5,a4
2040155a:	c09c                	sw	a5,0(s1)
2040155c:	04344703          	lbu	a4,67(s0)
20401560:	c319                	beqz	a4,20401566 <_printf_common+0x34>
20401562:	0785                	addi	a5,a5,1
20401564:	c09c                	sw	a5,0(s1)
20401566:	401c                	lw	a5,0(s0)
20401568:	0207f793          	andi	a5,a5,32
2040156c:	c781                	beqz	a5,20401574 <_printf_common+0x42>
2040156e:	409c                	lw	a5,0(s1)
20401570:	0789                	addi	a5,a5,2
20401572:	c09c                	sw	a5,0(s1)
20401574:	00042903          	lw	s2,0(s0)
20401578:	00697913          	andi	s2,s2,6
2040157c:	00091a63          	bnez	s2,20401590 <_printf_common+0x5e>
20401580:	01940b13          	addi	s6,s0,25
20401584:	5bfd                	li	s7,-1
20401586:	445c                	lw	a5,12(s0)
20401588:	4098                	lw	a4,0(s1)
2040158a:	8f99                	sub	a5,a5,a4
2040158c:	04f94c63          	blt	s2,a5,204015e4 <_printf_common+0xb2>
20401590:	401c                	lw	a5,0(s0)
20401592:	04344683          	lbu	a3,67(s0)
20401596:	0207f793          	andi	a5,a5,32
2040159a:	00d036b3          	snez	a3,a3
2040159e:	eba5                	bnez	a5,2040160e <_printf_common+0xdc>
204015a0:	04340613          	addi	a2,s0,67
204015a4:	85d2                	mv	a1,s4
204015a6:	854e                	mv	a0,s3
204015a8:	9a82                	jalr	s5
204015aa:	57fd                	li	a5,-1
204015ac:	04f50363          	beq	a0,a5,204015f2 <_printf_common+0xc0>
204015b0:	401c                	lw	a5,0(s0)
204015b2:	4611                	li	a2,4
204015b4:	4098                	lw	a4,0(s1)
204015b6:	8b99                	andi	a5,a5,6
204015b8:	4454                	lw	a3,12(s0)
204015ba:	4481                	li	s1,0
204015bc:	00c79763          	bne	a5,a2,204015ca <_printf_common+0x98>
204015c0:	40e684b3          	sub	s1,a3,a4
204015c4:	0004d363          	bgez	s1,204015ca <_printf_common+0x98>
204015c8:	4481                	li	s1,0
204015ca:	441c                	lw	a5,8(s0)
204015cc:	4818                	lw	a4,16(s0)
204015ce:	00f75463          	bge	a4,a5,204015d6 <_printf_common+0xa4>
204015d2:	8f99                	sub	a5,a5,a4
204015d4:	94be                	add	s1,s1,a5
204015d6:	4901                	li	s2,0
204015d8:	0469                	addi	s0,s0,26
204015da:	5b7d                	li	s6,-1
204015dc:	05249863          	bne	s1,s2,2040162c <_printf_common+0xfa>
204015e0:	4501                	li	a0,0
204015e2:	a809                	j	204015f4 <_printf_common+0xc2>
204015e4:	4685                	li	a3,1
204015e6:	865a                	mv	a2,s6
204015e8:	85d2                	mv	a1,s4
204015ea:	854e                	mv	a0,s3
204015ec:	9a82                	jalr	s5
204015ee:	01751e63          	bne	a0,s7,2040160a <_printf_common+0xd8>
204015f2:	557d                	li	a0,-1
204015f4:	50b2                	lw	ra,44(sp)
204015f6:	5422                	lw	s0,40(sp)
204015f8:	5492                	lw	s1,36(sp)
204015fa:	5902                	lw	s2,32(sp)
204015fc:	49f2                	lw	s3,28(sp)
204015fe:	4a62                	lw	s4,24(sp)
20401600:	4ad2                	lw	s5,20(sp)
20401602:	4b42                	lw	s6,16(sp)
20401604:	4bb2                	lw	s7,12(sp)
20401606:	6145                	addi	sp,sp,48
20401608:	8082                	ret
2040160a:	0905                	addi	s2,s2,1
2040160c:	bfad                	j	20401586 <_printf_common+0x54>
2040160e:	00d40733          	add	a4,s0,a3
20401612:	03000613          	li	a2,48
20401616:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffdc37>
2040161a:	04544703          	lbu	a4,69(s0)
2040161e:	00168793          	addi	a5,a3,1
20401622:	97a2                	add	a5,a5,s0
20401624:	0689                	addi	a3,a3,2
20401626:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
2040162a:	bf9d                	j	204015a0 <_printf_common+0x6e>
2040162c:	4685                	li	a3,1
2040162e:	8622                	mv	a2,s0
20401630:	85d2                	mv	a1,s4
20401632:	854e                	mv	a0,s3
20401634:	9a82                	jalr	s5
20401636:	fb650ee3          	beq	a0,s6,204015f2 <_printf_common+0xc0>
2040163a:	0905                	addi	s2,s2,1
2040163c:	b745                	j	204015dc <_printf_common+0xaa>

2040163e <_printf_i>:
_printf_i():
2040163e:	7179                	addi	sp,sp,-48
20401640:	d422                	sw	s0,40(sp)
20401642:	d226                	sw	s1,36(sp)
20401644:	d04a                	sw	s2,32(sp)
20401646:	ce4e                	sw	s3,28(sp)
20401648:	d606                	sw	ra,44(sp)
2040164a:	cc52                	sw	s4,24(sp)
2040164c:	ca56                	sw	s5,20(sp)
2040164e:	c85a                	sw	s6,16(sp)
20401650:	89b6                	mv	s3,a3
20401652:	0185c683          	lbu	a3,24(a1)
20401656:	06e00793          	li	a5,110
2040165a:	8932                	mv	s2,a2
2040165c:	84aa                	mv	s1,a0
2040165e:	842e                	mv	s0,a1
20401660:	04358613          	addi	a2,a1,67
20401664:	1ef68063          	beq	a3,a5,20401844 <_printf_i+0x206>
20401668:	06d7e263          	bltu	a5,a3,204016cc <_printf_i+0x8e>
2040166c:	06300793          	li	a5,99
20401670:	0af68263          	beq	a3,a5,20401714 <_printf_i+0xd6>
20401674:	00d7ed63          	bltu	a5,a3,2040168e <_printf_i+0x50>
20401678:	1e068a63          	beqz	a3,2040186c <_printf_i+0x22e>
2040167c:	05800793          	li	a5,88
20401680:	16f68663          	beq	a3,a5,204017ec <_printf_i+0x1ae>
20401684:	04240a93          	addi	s5,s0,66
20401688:	04d40123          	sb	a3,66(s0)
2040168c:	a869                	j	20401726 <_printf_i+0xe8>
2040168e:	06400793          	li	a5,100
20401692:	00f68663          	beq	a3,a5,2040169e <_printf_i+0x60>
20401696:	06900793          	li	a5,105
2040169a:	fef695e3          	bne	a3,a5,20401684 <_printf_i+0x46>
2040169e:	401c                	lw	a5,0(s0)
204016a0:	4308                	lw	a0,0(a4)
204016a2:	0807f693          	andi	a3,a5,128
204016a6:	00450593          	addi	a1,a0,4
204016aa:	c2c1                	beqz	a3,2040172a <_printf_i+0xec>
204016ac:	411c                	lw	a5,0(a0)
204016ae:	c30c                	sw	a1,0(a4)
204016b0:	0007d863          	bgez	a5,204016c0 <_printf_i+0x82>
204016b4:	02d00713          	li	a4,45
204016b8:	40f007b3          	neg	a5,a5
204016bc:	04e401a3          	sb	a4,67(s0)
204016c0:	00004697          	auipc	a3,0x4
204016c4:	e4468693          	addi	a3,a3,-444 # 20405504 <__sf_fake_stdout+0x34>
204016c8:	4729                	li	a4,10
204016ca:	a065                	j	20401772 <_printf_i+0x134>
204016cc:	07300793          	li	a5,115
204016d0:	1af68263          	beq	a3,a5,20401874 <_printf_i+0x236>
204016d4:	00d7ef63          	bltu	a5,a3,204016f2 <_printf_i+0xb4>
204016d8:	06f00793          	li	a5,111
204016dc:	04f68f63          	beq	a3,a5,2040173a <_printf_i+0xfc>
204016e0:	07000793          	li	a5,112
204016e4:	faf690e3          	bne	a3,a5,20401684 <_printf_i+0x46>
204016e8:	419c                	lw	a5,0(a1)
204016ea:	0207e793          	ori	a5,a5,32
204016ee:	c19c                	sw	a5,0(a1)
204016f0:	a809                	j	20401702 <_printf_i+0xc4>
204016f2:	07500793          	li	a5,117
204016f6:	04f68263          	beq	a3,a5,2040173a <_printf_i+0xfc>
204016fa:	07800793          	li	a5,120
204016fe:	f8f693e3          	bne	a3,a5,20401684 <_printf_i+0x46>
20401702:	07800793          	li	a5,120
20401706:	04f402a3          	sb	a5,69(s0)
2040170a:	00004697          	auipc	a3,0x4
2040170e:	e0e68693          	addi	a3,a3,-498 # 20405518 <__sf_fake_stdout+0x48>
20401712:	a0dd                	j	204017f8 <_printf_i+0x1ba>
20401714:	431c                	lw	a5,0(a4)
20401716:	04258a93          	addi	s5,a1,66
2040171a:	00478693          	addi	a3,a5,4
2040171e:	439c                	lw	a5,0(a5)
20401720:	c314                	sw	a3,0(a4)
20401722:	04f58123          	sb	a5,66(a1)
20401726:	4785                	li	a5,1
20401728:	a2ad                	j	20401892 <_printf_i+0x254>
2040172a:	0407f693          	andi	a3,a5,64
2040172e:	411c                	lw	a5,0(a0)
20401730:	c30c                	sw	a1,0(a4)
20401732:	debd                	beqz	a3,204016b0 <_printf_i+0x72>
20401734:	07c2                	slli	a5,a5,0x10
20401736:	87c1                	srai	a5,a5,0x10
20401738:	bfa5                	j	204016b0 <_printf_i+0x72>
2040173a:	400c                	lw	a1,0(s0)
2040173c:	431c                	lw	a5,0(a4)
2040173e:	0805f813          	andi	a6,a1,128
20401742:	00478513          	addi	a0,a5,4
20401746:	00080563          	beqz	a6,20401750 <_printf_i+0x112>
2040174a:	c308                	sw	a0,0(a4)
2040174c:	439c                	lw	a5,0(a5)
2040174e:	a039                	j	2040175c <_printf_i+0x11e>
20401750:	0405f593          	andi	a1,a1,64
20401754:	c308                	sw	a0,0(a4)
20401756:	d9fd                	beqz	a1,2040174c <_printf_i+0x10e>
20401758:	0007d783          	lhu	a5,0(a5)
2040175c:	06f00713          	li	a4,111
20401760:	0ce68a63          	beq	a3,a4,20401834 <_printf_i+0x1f6>
20401764:	00004697          	auipc	a3,0x4
20401768:	da068693          	addi	a3,a3,-608 # 20405504 <__sf_fake_stdout+0x34>
2040176c:	4729                	li	a4,10
2040176e:	040401a3          	sb	zero,67(s0)
20401772:	404c                	lw	a1,4(s0)
20401774:	c40c                	sw	a1,8(s0)
20401776:	0005c563          	bltz	a1,20401780 <_printf_i+0x142>
2040177a:	4008                	lw	a0,0(s0)
2040177c:	996d                	andi	a0,a0,-5
2040177e:	c008                	sw	a0,0(s0)
20401780:	e399                	bnez	a5,20401786 <_printf_i+0x148>
20401782:	8ab2                	mv	s5,a2
20401784:	cd91                	beqz	a1,204017a0 <_printf_i+0x162>
20401786:	8ab2                	mv	s5,a2
20401788:	02e7f5b3          	remu	a1,a5,a4
2040178c:	1afd                	addi	s5,s5,-1
2040178e:	95b6                	add	a1,a1,a3
20401790:	0005c583          	lbu	a1,0(a1)
20401794:	00ba8023          	sb	a1,0(s5)
20401798:	02e7d5b3          	divu	a1,a5,a4
2040179c:	0ae7f263          	bgeu	a5,a4,20401840 <_printf_i+0x202>
204017a0:	47a1                	li	a5,8
204017a2:	00f71e63          	bne	a4,a5,204017be <_printf_i+0x180>
204017a6:	401c                	lw	a5,0(s0)
204017a8:	8b85                	andi	a5,a5,1
204017aa:	cb91                	beqz	a5,204017be <_printf_i+0x180>
204017ac:	4058                	lw	a4,4(s0)
204017ae:	481c                	lw	a5,16(s0)
204017b0:	00e7c763          	blt	a5,a4,204017be <_printf_i+0x180>
204017b4:	03000793          	li	a5,48
204017b8:	fefa8fa3          	sb	a5,-1(s5)
204017bc:	1afd                	addi	s5,s5,-1
204017be:	41560633          	sub	a2,a2,s5
204017c2:	c810                	sw	a2,16(s0)
204017c4:	874e                	mv	a4,s3
204017c6:	86ca                	mv	a3,s2
204017c8:	0070                	addi	a2,sp,12
204017ca:	85a2                	mv	a1,s0
204017cc:	8526                	mv	a0,s1
204017ce:	3395                	jal	20401532 <_printf_common>
204017d0:	5a7d                	li	s4,-1
204017d2:	0d451463          	bne	a0,s4,2040189a <_printf_i+0x25c>
204017d6:	557d                	li	a0,-1
204017d8:	50b2                	lw	ra,44(sp)
204017da:	5422                	lw	s0,40(sp)
204017dc:	5492                	lw	s1,36(sp)
204017de:	5902                	lw	s2,32(sp)
204017e0:	49f2                	lw	s3,28(sp)
204017e2:	4a62                	lw	s4,24(sp)
204017e4:	4ad2                	lw	s5,20(sp)
204017e6:	4b42                	lw	s6,16(sp)
204017e8:	6145                	addi	sp,sp,48
204017ea:	8082                	ret
204017ec:	04d582a3          	sb	a3,69(a1)
204017f0:	00004697          	auipc	a3,0x4
204017f4:	d1468693          	addi	a3,a3,-748 # 20405504 <__sf_fake_stdout+0x34>
204017f8:	400c                	lw	a1,0(s0)
204017fa:	4308                	lw	a0,0(a4)
204017fc:	0805f813          	andi	a6,a1,128
20401800:	411c                	lw	a5,0(a0)
20401802:	0511                	addi	a0,a0,4
20401804:	02080063          	beqz	a6,20401824 <_printf_i+0x1e6>
20401808:	c308                	sw	a0,0(a4)
2040180a:	0015f713          	andi	a4,a1,1
2040180e:	c701                	beqz	a4,20401816 <_printf_i+0x1d8>
20401810:	0205e593          	ori	a1,a1,32
20401814:	c00c                	sw	a1,0(s0)
20401816:	4741                	li	a4,16
20401818:	fbb9                	bnez	a5,2040176e <_printf_i+0x130>
2040181a:	400c                	lw	a1,0(s0)
2040181c:	fdf5f593          	andi	a1,a1,-33
20401820:	c00c                	sw	a1,0(s0)
20401822:	b7b1                	j	2040176e <_printf_i+0x130>
20401824:	0405f813          	andi	a6,a1,64
20401828:	c308                	sw	a0,0(a4)
2040182a:	fe0800e3          	beqz	a6,2040180a <_printf_i+0x1cc>
2040182e:	07c2                	slli	a5,a5,0x10
20401830:	83c1                	srli	a5,a5,0x10
20401832:	bfe1                	j	2040180a <_printf_i+0x1cc>
20401834:	00004697          	auipc	a3,0x4
20401838:	cd068693          	addi	a3,a3,-816 # 20405504 <__sf_fake_stdout+0x34>
2040183c:	4721                	li	a4,8
2040183e:	bf05                	j	2040176e <_printf_i+0x130>
20401840:	87ae                	mv	a5,a1
20401842:	b799                	j	20401788 <_printf_i+0x14a>
20401844:	4194                	lw	a3,0(a1)
20401846:	431c                	lw	a5,0(a4)
20401848:	49cc                	lw	a1,20(a1)
2040184a:	0806f813          	andi	a6,a3,128
2040184e:	00478513          	addi	a0,a5,4
20401852:	00080663          	beqz	a6,2040185e <_printf_i+0x220>
20401856:	c308                	sw	a0,0(a4)
20401858:	439c                	lw	a5,0(a5)
2040185a:	c38c                	sw	a1,0(a5)
2040185c:	a801                	j	2040186c <_printf_i+0x22e>
2040185e:	c308                	sw	a0,0(a4)
20401860:	0406f693          	andi	a3,a3,64
20401864:	439c                	lw	a5,0(a5)
20401866:	daf5                	beqz	a3,2040185a <_printf_i+0x21c>
20401868:	00b79023          	sh	a1,0(a5)
2040186c:	00042823          	sw	zero,16(s0)
20401870:	8ab2                	mv	s5,a2
20401872:	bf89                	j	204017c4 <_printf_i+0x186>
20401874:	431c                	lw	a5,0(a4)
20401876:	41d0                	lw	a2,4(a1)
20401878:	4581                	li	a1,0
2040187a:	00478693          	addi	a3,a5,4
2040187e:	c314                	sw	a3,0(a4)
20401880:	0007aa83          	lw	s5,0(a5)
20401884:	8556                	mv	a0,s5
20401886:	3179                	jal	20401514 <memchr>
20401888:	c501                	beqz	a0,20401890 <_printf_i+0x252>
2040188a:	41550533          	sub	a0,a0,s5
2040188e:	c048                	sw	a0,4(s0)
20401890:	405c                	lw	a5,4(s0)
20401892:	c81c                	sw	a5,16(s0)
20401894:	040401a3          	sb	zero,67(s0)
20401898:	b735                	j	204017c4 <_printf_i+0x186>
2040189a:	4814                	lw	a3,16(s0)
2040189c:	8656                	mv	a2,s5
2040189e:	85ca                	mv	a1,s2
204018a0:	8526                	mv	a0,s1
204018a2:	9982                	jalr	s3
204018a4:	f34509e3          	beq	a0,s4,204017d6 <_printf_i+0x198>
204018a8:	401c                	lw	a5,0(s0)
204018aa:	8b89                	andi	a5,a5,2
204018ac:	e78d                	bnez	a5,204018d6 <_printf_i+0x298>
204018ae:	47b2                	lw	a5,12(sp)
204018b0:	4448                	lw	a0,12(s0)
204018b2:	f2f553e3          	bge	a0,a5,204017d8 <_printf_i+0x19a>
204018b6:	853e                	mv	a0,a5
204018b8:	b705                	j	204017d8 <_printf_i+0x19a>
204018ba:	4685                	li	a3,1
204018bc:	8656                	mv	a2,s5
204018be:	85ca                	mv	a1,s2
204018c0:	8526                	mv	a0,s1
204018c2:	9982                	jalr	s3
204018c4:	f16509e3          	beq	a0,s6,204017d6 <_printf_i+0x198>
204018c8:	0a05                	addi	s4,s4,1
204018ca:	445c                	lw	a5,12(s0)
204018cc:	4732                	lw	a4,12(sp)
204018ce:	8f99                	sub	a5,a5,a4
204018d0:	fefa45e3          	blt	s4,a5,204018ba <_printf_i+0x27c>
204018d4:	bfe9                	j	204018ae <_printf_i+0x270>
204018d6:	4a01                	li	s4,0
204018d8:	01940a93          	addi	s5,s0,25
204018dc:	5b7d                	li	s6,-1
204018de:	b7f5                	j	204018ca <_printf_i+0x28c>

204018e0 <_read_r>:
_read_r():
204018e0:	1141                	addi	sp,sp,-16
204018e2:	c422                	sw	s0,8(sp)
204018e4:	842a                	mv	s0,a0
204018e6:	852e                	mv	a0,a1
204018e8:	85b2                	mv	a1,a2
204018ea:	8636                	mv	a2,a3
204018ec:	8c01a023          	sw	zero,-1856(gp) # 80000808 <errno>
204018f0:	c606                	sw	ra,12(sp)
204018f2:	2075                	jal	2040199e <_read>
204018f4:	57fd                	li	a5,-1
204018f6:	00f51763          	bne	a0,a5,20401904 <_read_r+0x24>
204018fa:	8c018793          	addi	a5,gp,-1856 # 80000808 <errno>
204018fe:	439c                	lw	a5,0(a5)
20401900:	c391                	beqz	a5,20401904 <_read_r+0x24>
20401902:	c01c                	sw	a5,0(s0)
20401904:	40b2                	lw	ra,12(sp)
20401906:	4422                	lw	s0,8(sp)
20401908:	0141                	addi	sp,sp,16
2040190a:	8082                	ret

2040190c <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
2040190c:	1101                	addi	sp,sp,-32
2040190e:	ce06                	sw	ra,28(sp)
20401910:	cc22                	sw	s0,24(sp)
20401912:	1000                	addi	s0,sp,32
20401914:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401918:	2a59                	jal	20401aae <__errno>
2040191a:	872a                	mv	a4,a0
2040191c:	05800793          	li	a5,88
20401920:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401922:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401924:	853e                	mv	a0,a5
20401926:	40f2                	lw	ra,28(sp)
20401928:	4462                	lw	s0,24(sp)
2040192a:	6105                	addi	sp,sp,32
2040192c:	8082                	ret

2040192e <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
2040192e:	1101                	addi	sp,sp,-32
20401930:	ce06                	sw	ra,28(sp)
20401932:	cc22                	sw	s0,24(sp)
20401934:	1000                	addi	s0,sp,32
20401936:	fea42623          	sw	a0,-20(s0)
2040193a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
2040193e:	2a85                	jal	20401aae <__errno>
20401940:	872a                	mv	a4,a0
20401942:	fa800793          	li	a5,-88
20401946:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401948:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
2040194a:	853e                	mv	a0,a5
2040194c:	40f2                	lw	ra,28(sp)
2040194e:	4462                	lw	s0,24(sp)
20401950:	6105                	addi	sp,sp,32
20401952:	8082                	ret

20401954 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401954:	1101                	addi	sp,sp,-32
20401956:	ce22                	sw	s0,28(sp)
20401958:	1000                	addi	s0,sp,32
2040195a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
2040195e:	fec42783          	lw	a5,-20(s0)
20401962:	17fd                	addi	a5,a5,-1
20401964:	0017b793          	seqz	a5,a5
20401968:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
2040196c:	853e                	mv	a0,a5
2040196e:	4472                	lw	s0,28(sp)
20401970:	6105                	addi	sp,sp,32
20401972:	8082                	ret

20401974 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401974:	1101                	addi	sp,sp,-32
20401976:	ce06                	sw	ra,28(sp)
20401978:	cc22                	sw	s0,24(sp)
2040197a:	1000                	addi	s0,sp,32
2040197c:	fea42623          	sw	a0,-20(s0)
20401980:	feb42423          	sw	a1,-24(s0)
20401984:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401988:	221d                	jal	20401aae <__errno>
2040198a:	872a                	mv	a4,a0
2040198c:	05800793          	li	a5,88
20401990:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401992:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401994:	853e                	mv	a0,a5
20401996:	40f2                	lw	ra,28(sp)
20401998:	4462                	lw	s0,24(sp)
2040199a:	6105                	addi	sp,sp,32
2040199c:	8082                	ret

2040199e <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
2040199e:	1101                	addi	sp,sp,-32
204019a0:	ce06                	sw	ra,28(sp)
204019a2:	cc22                	sw	s0,24(sp)
204019a4:	1000                	addi	s0,sp,32
204019a6:	fea42623          	sw	a0,-20(s0)
204019aa:	feb42423          	sw	a1,-24(s0)
204019ae:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204019b2:	28f5                	jal	20401aae <__errno>
204019b4:	872a                	mv	a4,a0
204019b6:	05800793          	li	a5,88
204019ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204019bc:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204019be:	853e                	mv	a0,a5
204019c0:	40f2                	lw	ra,28(sp)
204019c2:	4462                	lw	s0,24(sp)
204019c4:	6105                	addi	sp,sp,32
204019c6:	8082                	ret

204019c8 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204019c8:	7179                	addi	sp,sp,-48
204019ca:	d622                	sw	s0,44(sp)
204019cc:	1800                	addi	s0,sp,48
204019ce:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204019d2:	800007b7          	lui	a5,0x80000
204019d6:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
204019da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204019de:	cc418713          	addi	a4,gp,-828 # 80000c0c <_sp>
204019e2:	4c418793          	addi	a5,gp,1220 # 8000140c <metal_segment_heap_target_end>
204019e6:	00f71463          	bne	a4,a5,204019ee <_sbrk+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204019ea:	57fd                	li	a5,-1
204019ec:	a089                	j	20401a2e <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204019ee:	800007b7          	lui	a5,0x80000
204019f2:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
204019f6:	fdc42783          	lw	a5,-36(s0)
204019fa:	973e                	add	a4,a4,a5
204019fc:	4c418793          	addi	a5,gp,1220 # 8000140c <metal_segment_heap_target_end>
20401a00:	02f77063          	bgeu	a4,a5,20401a20 <_sbrk+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401a04:	800007b7          	lui	a5,0x80000
20401a08:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
20401a0c:	fdc42783          	lw	a5,-36(s0)
20401a10:	973e                	add	a4,a4,a5
20401a12:	800007b7          	lui	a5,0x80000
20401a16:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401a1a:	fec42783          	lw	a5,-20(s0)
20401a1e:	a801                	j	20401a2e <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401a20:	800007b7          	lui	a5,0x80000
20401a24:	4c418713          	addi	a4,gp,1220 # 8000140c <metal_segment_heap_target_end>
20401a28:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffff344>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401a2c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401a2e:	853e                	mv	a0,a5
20401a30:	5432                	lw	s0,44(sp)
20401a32:	6145                	addi	sp,sp,48
20401a34:	8082                	ret

20401a36 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401a36:	7179                	addi	sp,sp,-48
20401a38:	d606                	sw	ra,44(sp)
20401a3a:	d422                	sw	s0,40(sp)
20401a3c:	1800                	addi	s0,sp,48
20401a3e:	fca42e23          	sw	a0,-36(s0)
20401a42:	fcb42c23          	sw	a1,-40(s0)
20401a46:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401a4a:	fdc42703          	lw	a4,-36(s0)
20401a4e:	4785                	li	a5,1
20401a50:	00f70963          	beq	a4,a5,20401a62 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401a54:	28a9                	jal	20401aae <__errno>
20401a56:	872a                	mv	a4,a0
20401a58:	05800793          	li	a5,88
20401a5c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401a5e:	57fd                	li	a5,-1
20401a60:	a82d                	j	20401a9a <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401a62:	fd842783          	lw	a5,-40(s0)
20401a66:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401a6a:	fe042623          	sw	zero,-20(s0)
20401a6e:	a839                	j	20401a8c <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401a70:	fe842703          	lw	a4,-24(s0)
20401a74:	fec42783          	lw	a5,-20(s0)
20401a78:	97ba                	add	a5,a5,a4
20401a7a:	0007c783          	lbu	a5,0(a5)
20401a7e:	853e                	mv	a0,a5
20401a80:	2ca1                	jal	20401cd8 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401a82:	fec42783          	lw	a5,-20(s0)
20401a86:	0785                	addi	a5,a5,1
20401a88:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401a8c:	fec42703          	lw	a4,-20(s0)
20401a90:	fd442783          	lw	a5,-44(s0)
20401a94:	fcf76ee3          	bltu	a4,a5,20401a70 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401a98:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401a9a:	853e                	mv	a0,a5
20401a9c:	50b2                	lw	ra,44(sp)
20401a9e:	5422                	lw	s0,40(sp)
20401aa0:	6145                	addi	sp,sp,48
20401aa2:	8082                	ret

20401aa4 <atexit>:
atexit():
20401aa4:	85aa                	mv	a1,a0
20401aa6:	4681                	li	a3,0
20401aa8:	4601                	li	a2,0
20401aaa:	4501                	li	a0,0
20401aac:	a8f1                	j	20401b88 <__register_exitproc>

20401aae <__errno>:
__errno():
20401aae:	5fbff797          	auipc	a5,0x5fbff
20401ab2:	c9a78793          	addi	a5,a5,-870 # 80000748 <_impure_ptr>
20401ab6:	4388                	lw	a0,0(a5)
20401ab8:	8082                	ret

20401aba <exit>:
exit():
20401aba:	1141                	addi	sp,sp,-16
20401abc:	c422                	sw	s0,8(sp)
20401abe:	c606                	sw	ra,12(sp)
20401ac0:	00000797          	auipc	a5,0x0
20401ac4:	15078793          	addi	a5,a5,336 # 20401c10 <__call_exitprocs>
20401ac8:	842a                	mv	s0,a0
20401aca:	c399                	beqz	a5,20401ad0 <exit+0x16>
20401acc:	4581                	li	a1,0
20401ace:	2289                	jal	20401c10 <__call_exitprocs>
20401ad0:	5fbff797          	auipc	a5,0x5fbff
20401ad4:	c7c78793          	addi	a5,a5,-900 # 8000074c <_global_impure_ptr>
20401ad8:	4388                	lw	a0,0(a5)
20401ada:	551c                	lw	a5,40(a0)
20401adc:	c391                	beqz	a5,20401ae0 <exit+0x26>
20401ade:	9782                	jalr	a5
20401ae0:	8522                	mv	a0,s0
20401ae2:	08d030ef          	jal	ra,2040536e <_exit>

20401ae6 <__libc_fini_array>:
__libc_fini_array():
20401ae6:	1141                	addi	sp,sp,-16
20401ae8:	00004797          	auipc	a5,0x4
20401aec:	d9c78793          	addi	a5,a5,-612 # 20405884 <__fini_array_end>
20401af0:	c422                	sw	s0,8(sp)
20401af2:	00004417          	auipc	s0,0x4
20401af6:	d9240413          	addi	s0,s0,-622 # 20405884 <__fini_array_end>
20401afa:	8c1d                	sub	s0,s0,a5
20401afc:	c226                	sw	s1,4(sp)
20401afe:	c606                	sw	ra,12(sp)
20401b00:	8409                	srai	s0,s0,0x2
20401b02:	84be                	mv	s1,a5
20401b04:	e411                	bnez	s0,20401b10 <__libc_fini_array+0x2a>
20401b06:	40b2                	lw	ra,12(sp)
20401b08:	4422                	lw	s0,8(sp)
20401b0a:	4492                	lw	s1,4(sp)
20401b0c:	0141                	addi	sp,sp,16
20401b0e:	8082                	ret
20401b10:	147d                	addi	s0,s0,-1
20401b12:	00241793          	slli	a5,s0,0x2
20401b16:	97a6                	add	a5,a5,s1
20401b18:	439c                	lw	a5,0(a5)
20401b1a:	9782                	jalr	a5
20401b1c:	b7e5                	j	20401b04 <__libc_fini_array+0x1e>

20401b1e <__libc_init_array>:
__libc_init_array():
20401b1e:	1141                	addi	sp,sp,-16
20401b20:	00004797          	auipc	a5,0x4
20401b24:	d6078793          	addi	a5,a5,-672 # 20405880 <__init_array_start>
20401b28:	c422                	sw	s0,8(sp)
20401b2a:	00004417          	auipc	s0,0x4
20401b2e:	d5640413          	addi	s0,s0,-682 # 20405880 <__init_array_start>
20401b32:	8c1d                	sub	s0,s0,a5
20401b34:	c226                	sw	s1,4(sp)
20401b36:	c04a                	sw	s2,0(sp)
20401b38:	c606                	sw	ra,12(sp)
20401b3a:	8409                	srai	s0,s0,0x2
20401b3c:	4481                	li	s1,0
20401b3e:	893e                	mv	s2,a5
20401b40:	02849663          	bne	s1,s0,20401b6c <__libc_init_array+0x4e>
20401b44:	00004797          	auipc	a5,0x4
20401b48:	d3c78793          	addi	a5,a5,-708 # 20405880 <__init_array_start>
20401b4c:	00004417          	auipc	s0,0x4
20401b50:	d3840413          	addi	s0,s0,-712 # 20405884 <__fini_array_end>
20401b54:	8c1d                	sub	s0,s0,a5
20401b56:	8409                	srai	s0,s0,0x2
20401b58:	4481                	li	s1,0
20401b5a:	893e                	mv	s2,a5
20401b5c:	00849f63          	bne	s1,s0,20401b7a <__libc_init_array+0x5c>
20401b60:	40b2                	lw	ra,12(sp)
20401b62:	4422                	lw	s0,8(sp)
20401b64:	4492                	lw	s1,4(sp)
20401b66:	4902                	lw	s2,0(sp)
20401b68:	0141                	addi	sp,sp,16
20401b6a:	8082                	ret
20401b6c:	00249793          	slli	a5,s1,0x2
20401b70:	97ca                	add	a5,a5,s2
20401b72:	439c                	lw	a5,0(a5)
20401b74:	0485                	addi	s1,s1,1
20401b76:	9782                	jalr	a5
20401b78:	b7e1                	j	20401b40 <__libc_init_array+0x22>
20401b7a:	00249793          	slli	a5,s1,0x2
20401b7e:	97ca                	add	a5,a5,s2
20401b80:	439c                	lw	a5,0(a5)
20401b82:	0485                	addi	s1,s1,1
20401b84:	9782                	jalr	a5
20401b86:	bfd9                	j	20401b5c <__libc_init_array+0x3e>

20401b88 <__register_exitproc>:
__register_exitproc():
20401b88:	5fbff797          	auipc	a5,0x5fbff
20401b8c:	bf078793          	addi	a5,a5,-1040 # 80000778 <_global_atexit>
20401b90:	439c                	lw	a5,0(a5)
20401b92:	8e2a                	mv	t3,a0
20401b94:	e39d                	bnez	a5,20401bba <__register_exitproc+0x32>
20401b96:	5fbff717          	auipc	a4,0x5fbff
20401b9a:	be670713          	addi	a4,a4,-1050 # 8000077c <_global_atexit0>
20401b9e:	5fbff797          	auipc	a5,0x5fbff
20401ba2:	bce7ad23          	sw	a4,-1062(a5) # 80000778 <_global_atexit>
20401ba6:	dfbfe517          	auipc	a0,0xdfbfe
20401baa:	45a50513          	addi	a0,a0,1114 # 0 <__metal_boot_hart>
20401bae:	87ba                	mv	a5,a4
20401bb0:	c509                	beqz	a0,20401bba <__register_exitproc+0x32>
20401bb2:	411c                	lw	a5,0(a0)
20401bb4:	8af1ae23          	sw	a5,-1860(gp) # 80000804 <_global_atexit0+0x88>
20401bb8:	87ba                	mv	a5,a4
20401bba:	43d8                	lw	a4,4(a5)
20401bbc:	487d                	li	a6,31
20401bbe:	557d                	li	a0,-1
20401bc0:	04e84763          	blt	a6,a4,20401c0e <__register_exitproc+0x86>
20401bc4:	020e0e63          	beqz	t3,20401c00 <__register_exitproc+0x78>
20401bc8:	0887a803          	lw	a6,136(a5)
20401bcc:	04080163          	beqz	a6,20401c0e <__register_exitproc+0x86>
20401bd0:	00271893          	slli	a7,a4,0x2
20401bd4:	98c2                	add	a7,a7,a6
20401bd6:	00c8a023          	sw	a2,0(a7)
20401bda:	10082303          	lw	t1,256(a6)
20401bde:	4605                	li	a2,1
20401be0:	00e61633          	sll	a2,a2,a4
20401be4:	00c36333          	or	t1,t1,a2
20401be8:	10682023          	sw	t1,256(a6)
20401bec:	08d8a023          	sw	a3,128(a7)
20401bf0:	4689                	li	a3,2
20401bf2:	00de1763          	bne	t3,a3,20401c00 <__register_exitproc+0x78>
20401bf6:	10482683          	lw	a3,260(a6)
20401bfa:	8e55                	or	a2,a2,a3
20401bfc:	10c82223          	sw	a2,260(a6)
20401c00:	00170693          	addi	a3,a4,1
20401c04:	070a                	slli	a4,a4,0x2
20401c06:	c3d4                	sw	a3,4(a5)
20401c08:	97ba                	add	a5,a5,a4
20401c0a:	c78c                	sw	a1,8(a5)
20401c0c:	4501                	li	a0,0
20401c0e:	8082                	ret

20401c10 <__call_exitprocs>:
__call_exitprocs():
20401c10:	7179                	addi	sp,sp,-48
20401c12:	cc52                	sw	s4,24(sp)
20401c14:	ca56                	sw	s5,20(sp)
20401c16:	c85a                	sw	s6,16(sp)
20401c18:	c65e                	sw	s7,12(sp)
20401c1a:	d606                	sw	ra,44(sp)
20401c1c:	d422                	sw	s0,40(sp)
20401c1e:	d226                	sw	s1,36(sp)
20401c20:	d04a                	sw	s2,32(sp)
20401c22:	ce4e                	sw	s3,28(sp)
20401c24:	c462                	sw	s8,8(sp)
20401c26:	8b2a                	mv	s6,a0
20401c28:	8a2e                	mv	s4,a1
20401c2a:	5fbffa97          	auipc	s5,0x5fbff
20401c2e:	b4ea8a93          	addi	s5,s5,-1202 # 80000778 <_global_atexit>
20401c32:	4b85                	li	s7,1
20401c34:	000aa403          	lw	s0,0(s5)
20401c38:	c811                	beqz	s0,20401c4c <__call_exitprocs+0x3c>
20401c3a:	4044                	lw	s1,4(s0)
20401c3c:	08842983          	lw	s3,136(s0)
20401c40:	fff48913          	addi	s2,s1,-1
20401c44:	048a                	slli	s1,s1,0x2
20401c46:	94a2                	add	s1,s1,s0
20401c48:	00095e63          	bgez	s2,20401c64 <__call_exitprocs+0x54>
20401c4c:	50b2                	lw	ra,44(sp)
20401c4e:	5422                	lw	s0,40(sp)
20401c50:	5492                	lw	s1,36(sp)
20401c52:	5902                	lw	s2,32(sp)
20401c54:	49f2                	lw	s3,28(sp)
20401c56:	4a62                	lw	s4,24(sp)
20401c58:	4ad2                	lw	s5,20(sp)
20401c5a:	4b42                	lw	s6,16(sp)
20401c5c:	4bb2                	lw	s7,12(sp)
20401c5e:	4c22                	lw	s8,8(sp)
20401c60:	6145                	addi	sp,sp,48
20401c62:	8082                	ret
20401c64:	000a0e63          	beqz	s4,20401c80 <__call_exitprocs+0x70>
20401c68:	00099563          	bnez	s3,20401c72 <__call_exitprocs+0x62>
20401c6c:	197d                	addi	s2,s2,-1
20401c6e:	14f1                	addi	s1,s1,-4
20401c70:	bfe1                	j	20401c48 <__call_exitprocs+0x38>
20401c72:	00291793          	slli	a5,s2,0x2
20401c76:	97ce                	add	a5,a5,s3
20401c78:	0807a783          	lw	a5,128(a5)
20401c7c:	ff4798e3          	bne	a5,s4,20401c6c <__call_exitprocs+0x5c>
20401c80:	4058                	lw	a4,4(s0)
20401c82:	40dc                	lw	a5,4(s1)
20401c84:	177d                	addi	a4,a4,-1
20401c86:	03271863          	bne	a4,s2,20401cb6 <__call_exitprocs+0xa6>
20401c8a:	01242223          	sw	s2,4(s0)
20401c8e:	dff9                	beqz	a5,20401c6c <__call_exitprocs+0x5c>
20401c90:	00442c03          	lw	s8,4(s0)
20401c94:	00098863          	beqz	s3,20401ca4 <__call_exitprocs+0x94>
20401c98:	1009a683          	lw	a3,256(s3)
20401c9c:	012b9733          	sll	a4,s7,s2
20401ca0:	8ef9                	and	a3,a3,a4
20401ca2:	ee89                	bnez	a3,20401cbc <__call_exitprocs+0xac>
20401ca4:	9782                	jalr	a5
20401ca6:	4058                	lw	a4,4(s0)
20401ca8:	000aa783          	lw	a5,0(s5)
20401cac:	f98714e3          	bne	a4,s8,20401c34 <__call_exitprocs+0x24>
20401cb0:	faf40ee3          	beq	s0,a5,20401c6c <__call_exitprocs+0x5c>
20401cb4:	b741                	j	20401c34 <__call_exitprocs+0x24>
20401cb6:	0004a223          	sw	zero,4(s1)
20401cba:	bfd1                	j	20401c8e <__call_exitprocs+0x7e>
20401cbc:	00291693          	slli	a3,s2,0x2
20401cc0:	96ce                	add	a3,a3,s3
20401cc2:	428c                	lw	a1,0(a3)
20401cc4:	1049a683          	lw	a3,260(s3)
20401cc8:	8f75                	and	a4,a4,a3
20401cca:	e701                	bnez	a4,20401cd2 <__call_exitprocs+0xc2>
20401ccc:	855a                	mv	a0,s6
20401cce:	9782                	jalr	a5
20401cd0:	bfd9                	j	20401ca6 <__call_exitprocs+0x96>
20401cd2:	852e                	mv	a0,a1
20401cd4:	9782                	jalr	a5
20401cd6:	bfc1                	j	20401ca6 <__call_exitprocs+0x96>

20401cd8 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401cd8:	1101                	addi	sp,sp,-32
20401cda:	ce06                	sw	ra,28(sp)
20401cdc:	cc22                	sw	s0,24(sp)
20401cde:	1000                	addi	s0,sp,32
20401ce0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401ce4:	fec42703          	lw	a4,-20(s0)
20401ce8:	47a9                	li	a5,10
20401cea:	00f71463          	bne	a4,a5,20401cf2 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401cee:	4535                	li	a0,13
20401cf0:	2811                	jal	20401d04 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401cf2:	fec42503          	lw	a0,-20(s0)
20401cf6:	2039                	jal	20401d04 <metal_tty_putc_raw>
20401cf8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401cfa:	853e                	mv	a0,a5
20401cfc:	40f2                	lw	ra,28(sp)
20401cfe:	4462                	lw	s0,24(sp)
20401d00:	6105                	addi	sp,sp,32
20401d02:	8082                	ret

20401d04 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401d04:	1101                	addi	sp,sp,-32
20401d06:	ce06                	sw	ra,28(sp)
20401d08:	cc22                	sw	s0,24(sp)
20401d0a:	1000                	addi	s0,sp,32
20401d0c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401d10:	fec42583          	lw	a1,-20(s0)
20401d14:	800007b7          	lui	a5,0x80000
20401d18:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20401d1c:	28b1                	jal	20401d78 <metal_uart_putc>
20401d1e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401d20:	853e                	mv	a0,a5
20401d22:	40f2                	lw	ra,28(sp)
20401d24:	4462                	lw	s0,24(sp)
20401d26:	6105                	addi	sp,sp,32
20401d28:	8082                	ret

20401d2a <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401d2a:	1141                	addi	sp,sp,-16
20401d2c:	c606                	sw	ra,12(sp)
20401d2e:	c422                	sw	s0,8(sp)
20401d30:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401d32:	67f1                	lui	a5,0x1c
20401d34:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401d38:	800007b7          	lui	a5,0x80000
20401d3c:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20401d40:	2031                	jal	20401d4c <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401d42:	0001                	nop
20401d44:	40b2                	lw	ra,12(sp)
20401d46:	4422                	lw	s0,8(sp)
20401d48:	0141                	addi	sp,sp,16
20401d4a:	8082                	ret

20401d4c <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401d4c:	1101                	addi	sp,sp,-32
20401d4e:	ce06                	sw	ra,28(sp)
20401d50:	cc22                	sw	s0,24(sp)
20401d52:	1000                	addi	s0,sp,32
20401d54:	fea42623          	sw	a0,-20(s0)
20401d58:	feb42423          	sw	a1,-24(s0)
20401d5c:	fec42783          	lw	a5,-20(s0)
20401d60:	439c                	lw	a5,0(a5)
20401d62:	439c                	lw	a5,0(a5)
20401d64:	fe842583          	lw	a1,-24(s0)
20401d68:	fec42503          	lw	a0,-20(s0)
20401d6c:	9782                	jalr	a5
20401d6e:	0001                	nop
20401d70:	40f2                	lw	ra,28(sp)
20401d72:	4462                	lw	s0,24(sp)
20401d74:	6105                	addi	sp,sp,32
20401d76:	8082                	ret

20401d78 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401d78:	1101                	addi	sp,sp,-32
20401d7a:	ce06                	sw	ra,28(sp)
20401d7c:	cc22                	sw	s0,24(sp)
20401d7e:	1000                	addi	s0,sp,32
20401d80:	fea42623          	sw	a0,-20(s0)
20401d84:	feb42423          	sw	a1,-24(s0)
20401d88:	fec42783          	lw	a5,-20(s0)
20401d8c:	439c                	lw	a5,0(a5)
20401d8e:	43dc                	lw	a5,4(a5)
20401d90:	fe842583          	lw	a1,-24(s0)
20401d94:	fec42503          	lw	a0,-20(s0)
20401d98:	9782                	jalr	a5
20401d9a:	87aa                	mv	a5,a0
20401d9c:	853e                	mv	a0,a5
20401d9e:	40f2                	lw	ra,28(sp)
20401da0:	4462                	lw	s0,24(sp)
20401da2:	6105                	addi	sp,sp,32
20401da4:	8082                	ret

20401da6 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401da6:	1101                	addi	sp,sp,-32
20401da8:	ce06                	sw	ra,28(sp)
20401daa:	cc22                	sw	s0,24(sp)
20401dac:	1000                	addi	s0,sp,32
20401dae:	fea42623          	sw	a0,-20(s0)
20401db2:	feb42423          	sw	a1,-24(s0)
20401db6:	fec42783          	lw	a5,-20(s0)
20401dba:	439c                	lw	a5,0(a5)
20401dbc:	4bdc                	lw	a5,20(a5)
20401dbe:	fe842583          	lw	a1,-24(s0)
20401dc2:	fec42503          	lw	a0,-20(s0)
20401dc6:	9782                	jalr	a5
20401dc8:	87aa                	mv	a5,a0
20401dca:	853e                	mv	a0,a5
20401dcc:	40f2                	lw	ra,28(sp)
20401dce:	4462                	lw	s0,24(sp)
20401dd0:	6105                	addi	sp,sp,32
20401dd2:	8082                	ret

20401dd4 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401dd4:	1101                	addi	sp,sp,-32
20401dd6:	ce22                	sw	s0,28(sp)
20401dd8:	1000                	addi	s0,sp,32
20401dda:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401dde:	fec42703          	lw	a4,-20(s0)
20401de2:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401de6:	00f71563          	bne	a4,a5,20401df0 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401dea:	020007b7          	lui	a5,0x2000
20401dee:	a011                	j	20401df2 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401df0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:143
	}
}
20401df2:	853e                	mv	a0,a5
20401df4:	4472                	lw	s0,28(sp)
20401df6:	6105                	addi	sp,sp,32
20401df8:	8082                	ret

20401dfa <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401dfa:	1101                	addi	sp,sp,-32
20401dfc:	ce22                	sw	s0,28(sp)
20401dfe:	1000                	addi	s0,sp,32
20401e00:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401e04:	fec42703          	lw	a4,-20(s0)
20401e08:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401e0c:	00f71463          	bne	a4,a5,20401e14 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401e10:	4789                	li	a5,2
20401e12:	a011                	j	20401e16 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401e14:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:163
	}
}
20401e16:	853e                	mv	a0,a5
20401e18:	4472                	lw	s0,28(sp)
20401e1a:	6105                	addi	sp,sp,32
20401e1c:	8082                	ret

20401e1e <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401e1e:	1101                	addi	sp,sp,-32
20401e20:	ce22                	sw	s0,28(sp)
20401e22:	1000                	addi	s0,sp,32
20401e24:	fea42623          	sw	a0,-20(s0)
20401e28:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401e2c:	fe842783          	lw	a5,-24(s0)
20401e30:	e791                	bnez	a5,20401e3c <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401e32:	800007b7          	lui	a5,0x80000
20401e36:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20401e3a:	a821                	j	20401e52 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401e3c:	fe842703          	lw	a4,-24(s0)
20401e40:	4785                	li	a5,1
20401e42:	00f71763          	bne	a4,a5,20401e50 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401e46:	800007b7          	lui	a5,0x80000
20401e4a:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20401e4e:	a011                	j	20401e52 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401e50:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:176
	}
}
20401e52:	853e                	mv	a0,a5
20401e54:	4472                	lw	s0,28(sp)
20401e56:	6105                	addi	sp,sp,32
20401e58:	8082                	ret

20401e5a <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401e5a:	1101                	addi	sp,sp,-32
20401e5c:	ce22                	sw	s0,28(sp)
20401e5e:	1000                	addi	s0,sp,32
20401e60:	fea42623          	sw	a0,-20(s0)
20401e64:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401e68:	fe842783          	lw	a5,-24(s0)
20401e6c:	e399                	bnez	a5,20401e72 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
		return 3;
20401e6e:	478d                	li	a5,3
20401e70:	a809                	j	20401e82 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401e72:	fe842703          	lw	a4,-24(s0)
20401e76:	4785                	li	a5,1
20401e78:	00f71463          	bne	a4,a5,20401e80 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
		return 7;
20401e7c:	479d                	li	a5,7
20401e7e:	a011                	j	20401e82 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401e80:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:189
	}
}
20401e82:	853e                	mv	a0,a5
20401e84:	4472                	lw	s0,28(sp)
20401e86:	6105                	addi	sp,sp,32
20401e88:	8082                	ret

20401e8a <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401e8a:	715d                	addi	sp,sp,-80
20401e8c:	c686                	sw	ra,76(sp)
20401e8e:	c4a2                	sw	s0,72(sp)
20401e90:	c2ca                	sw	s2,68(sp)
20401e92:	c0ce                	sw	s3,64(sp)
20401e94:	de52                	sw	s4,60(sp)
20401e96:	dc56                	sw	s5,56(sp)
20401e98:	da5a                	sw	s6,52(sp)
20401e9a:	d85e                	sw	s7,48(sp)
20401e9c:	d662                	sw	s8,44(sp)
20401e9e:	d466                	sw	s9,40(sp)
20401ea0:	0880                	addi	s0,sp,80
20401ea2:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401ea6:	fbc42783          	lw	a5,-68(s0)
20401eaa:	853e                	mv	a0,a5
20401eac:	3725                	jal	20401dd4 <__metal_driver_sifive_clint0_control_base>
20401eae:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401eb2:	fcc42703          	lw	a4,-52(s0)
20401eb6:	67b1                	lui	a5,0xc
20401eb8:	17f1                	addi	a5,a5,-4
20401eba:	97ba                	add	a5,a5,a4
20401ebc:	439c                	lw	a5,0(a5)
20401ebe:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401ec2:	fcc42703          	lw	a4,-52(s0)
20401ec6:	67b1                	lui	a5,0xc
20401ec8:	17e1                	addi	a5,a5,-8
20401eca:	97ba                	add	a5,a5,a4
20401ecc:	439c                	lw	a5,0(a5)
20401ece:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401ed2:	fcc42703          	lw	a4,-52(s0)
20401ed6:	67b1                	lui	a5,0xc
20401ed8:	17f1                	addi	a5,a5,-4
20401eda:	97ba                	add	a5,a5,a4
20401edc:	439c                	lw	a5,0(a5)
20401ede:	fc842703          	lw	a4,-56(s0)
20401ee2:	fcf718e3          	bne	a4,a5,20401eb2 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401ee6:	fc842783          	lw	a5,-56(s0)
20401eea:	8c3e                	mv	s8,a5
20401eec:	4c81                	li	s9,0
20401eee:	000c1993          	slli	s3,s8,0x0
20401ef2:	4901                	li	s2,0
20401ef4:	fc442783          	lw	a5,-60(s0)
20401ef8:	8a3e                	mv	s4,a5
20401efa:	4a81                	li	s5,0
20401efc:	01496b33          	or	s6,s2,s4
20401f00:	0159ebb3          	or	s7,s3,s5
20401f04:	87da                	mv	a5,s6
20401f06:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401f08:	853e                	mv	a0,a5
20401f0a:	85c2                	mv	a1,a6
20401f0c:	40b6                	lw	ra,76(sp)
20401f0e:	4426                	lw	s0,72(sp)
20401f10:	4916                	lw	s2,68(sp)
20401f12:	4986                	lw	s3,64(sp)
20401f14:	5a72                	lw	s4,60(sp)
20401f16:	5ae2                	lw	s5,56(sp)
20401f18:	5b52                	lw	s6,52(sp)
20401f1a:	5bc2                	lw	s7,48(sp)
20401f1c:	5c32                	lw	s8,44(sp)
20401f1e:	5ca2                	lw	s9,40(sp)
20401f20:	6161                	addi	sp,sp,80
20401f22:	8082                	ret

20401f24 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401f24:	7179                	addi	sp,sp,-48
20401f26:	d606                	sw	ra,44(sp)
20401f28:	d422                	sw	s0,40(sp)
20401f2a:	d24a                	sw	s2,36(sp)
20401f2c:	d04e                	sw	s3,32(sp)
20401f2e:	1800                	addi	s0,sp,48
20401f30:	fca42e23          	sw	a0,-36(s0)
20401f34:	fcb42c23          	sw	a1,-40(s0)
20401f38:	fcc42823          	sw	a2,-48(s0)
20401f3c:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401f40:	fdc42783          	lw	a5,-36(s0)
20401f44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401f48:	fec42783          	lw	a5,-20(s0)
20401f4c:	853e                	mv	a0,a5
20401f4e:	3559                	jal	20401dd4 <__metal_driver_sifive_clint0_control_base>
20401f50:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401f54:	fd842783          	lw	a5,-40(s0)
20401f58:	078e                	slli	a5,a5,0x3
20401f5a:	873e                	mv	a4,a5
20401f5c:	fe842783          	lw	a5,-24(s0)
20401f60:	973e                	add	a4,a4,a5
20401f62:	6791                	lui	a5,0x4
20401f64:	0791                	addi	a5,a5,4
20401f66:	97ba                	add	a5,a5,a4
20401f68:	873e                	mv	a4,a5
20401f6a:	57fd                	li	a5,-1
20401f6c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401f6e:	fd842783          	lw	a5,-40(s0)
20401f72:	078e                	slli	a5,a5,0x3
20401f74:	873e                	mv	a4,a5
20401f76:	fe842783          	lw	a5,-24(s0)
20401f7a:	973e                	add	a4,a4,a5
20401f7c:	6791                	lui	a5,0x4
20401f7e:	97ba                	add	a5,a5,a4
20401f80:	873e                	mv	a4,a5
20401f82:	fd042783          	lw	a5,-48(s0)
20401f86:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401f88:	fd442783          	lw	a5,-44(s0)
20401f8c:	0007d913          	srli	s2,a5,0x0
20401f90:	4981                	li	s3,0
20401f92:	fd842783          	lw	a5,-40(s0)
20401f96:	078e                	slli	a5,a5,0x3
20401f98:	873e                	mv	a4,a5
20401f9a:	fe842783          	lw	a5,-24(s0)
20401f9e:	973e                	add	a4,a4,a5
20401fa0:	6791                	lui	a5,0x4
20401fa2:	0791                	addi	a5,a5,4
20401fa4:	97ba                	add	a5,a5,a4
20401fa6:	874a                	mv	a4,s2
20401fa8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401faa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401fac:	853e                	mv	a0,a5
20401fae:	50b2                	lw	ra,44(sp)
20401fb0:	5422                	lw	s0,40(sp)
20401fb2:	5912                	lw	s2,36(sp)
20401fb4:	5982                	lw	s3,32(sp)
20401fb6:	6145                	addi	sp,sp,48
20401fb8:	8082                	ret

20401fba <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401fba:	1101                	addi	sp,sp,-32
20401fbc:	ce06                	sw	ra,28(sp)
20401fbe:	cc22                	sw	s0,24(sp)
20401fc0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401fc2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401fc6:	f14027f3          	csrr	a5,mhartid
20401fca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401fce:	fec42783          	lw	a5,-20(s0)
20401fd2:	853e                	mv	a0,a5
20401fd4:	204030ef          	jal	ra,204051d8 <metal_cpu_get>
20401fd8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401fdc:	fe842503          	lw	a0,-24(s0)
20401fe0:	1d2030ef          	jal	ra,204051b2 <metal_cpu_interrupt_controller>
20401fe4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401fe6:	853e                	mv	a0,a5
20401fe8:	40f2                	lw	ra,28(sp)
20401fea:	4462                	lw	s0,24(sp)
20401fec:	6105                	addi	sp,sp,32
20401fee:	8082                	ret

20401ff0 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401ff0:	7139                	addi	sp,sp,-64
20401ff2:	de06                	sw	ra,60(sp)
20401ff4:	dc22                	sw	s0,56(sp)
20401ff6:	0080                	addi	s0,sp,64
20401ff8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401ffc:	fcc42503          	lw	a0,-52(s0)
20402000:	3bed                	jal	20401dfa <__metal_driver_sifive_clint0_num_interrupts>
20402002:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402006:	fcc42783          	lw	a5,-52(s0)
2040200a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
2040200e:	fe442783          	lw	a5,-28(s0)
20402012:	43dc                	lw	a5,4(a5)
20402014:	efa9                	bnez	a5,2040206e <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402016:	fe042623          	sw	zero,-20(s0)
2040201a:	a081                	j	2040205a <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040201c:	fec42583          	lw	a1,-20(s0)
20402020:	fcc42503          	lw	a0,-52(s0)
20402024:	3bed                	jal	20401e1e <__metal_driver_sifive_clint0_interrupt_parents>
20402026:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040202a:	fec42583          	lw	a1,-20(s0)
2040202e:	fcc42503          	lw	a0,-52(s0)
20402032:	3525                	jal	20401e5a <__metal_driver_sifive_clint0_interrupt_lines>
20402034:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402038:	fe042783          	lw	a5,-32(s0)
2040203c:	439c                	lw	a5,0(a5)
2040203e:	4fdc                	lw	a5,28(a5)
20402040:	fcc42683          	lw	a3,-52(s0)
20402044:	4601                	li	a2,0
20402046:	fdc42583          	lw	a1,-36(s0)
2040204a:	fe042503          	lw	a0,-32(s0)
2040204e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402050:	fec42783          	lw	a5,-20(s0)
20402054:	0785                	addi	a5,a5,1
20402056:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
2040205a:	fec42703          	lw	a4,-20(s0)
2040205e:	fe842783          	lw	a5,-24(s0)
20402062:	faf74de3          	blt	a4,a5,2040201c <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402066:	fe442783          	lw	a5,-28(s0)
2040206a:	4705                	li	a4,1
2040206c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2040206e:	0001                	nop
20402070:	50f2                	lw	ra,60(sp)
20402072:	5462                	lw	s0,56(sp)
20402074:	6121                	addi	sp,sp,64
20402076:	8082                	ret

20402078 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402078:	7139                	addi	sp,sp,-64
2040207a:	de06                	sw	ra,60(sp)
2040207c:	dc22                	sw	s0,56(sp)
2040207e:	0080                	addi	s0,sp,64
20402080:	fca42623          	sw	a0,-52(s0)
20402084:	fcb42423          	sw	a1,-56(s0)
20402088:	fcc42223          	sw	a2,-60(s0)
2040208c:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402090:	57fd                	li	a5,-1
20402092:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402096:	37e010ef          	jal	ra,20403414 <__metal_controller_interrupt_vector_mode>
2040209a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2040209e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204020a2:	3f21                	jal	20401fba <_get_cpu_intc>
204020a4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204020a8:	fcc42503          	lw	a0,-52(s0)
204020ac:	33b9                	jal	20401dfa <__metal_driver_sifive_clint0_num_interrupts>
204020ae:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
204020b2:	fe042703          	lw	a4,-32(s0)
204020b6:	4785                	li	a5,1
204020b8:	00f70863          	beq	a4,a5,204020c8 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
204020bc:	fe042783          	lw	a5,-32(s0)
204020c0:	c781                	beqz	a5,204020c8 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
204020c2:	fec42783          	lw	a5,-20(s0)
204020c6:	a049                	j	20402148 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
204020c8:	fe042223          	sw	zero,-28(s0)
204020cc:	a091                	j	20402110 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204020ce:	fe442583          	lw	a1,-28(s0)
204020d2:	fcc42503          	lw	a0,-52(s0)
204020d6:	3351                	jal	20401e5a <__metal_driver_sifive_clint0_interrupt_lines>
204020d8:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204020dc:	fe442583          	lw	a1,-28(s0)
204020e0:	fcc42503          	lw	a0,-52(s0)
204020e4:	3b2d                	jal	20401e1e <__metal_driver_sifive_clint0_interrupt_parents>
204020e6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204020ea:	fdc42703          	lw	a4,-36(s0)
204020ee:	fe842783          	lw	a5,-24(s0)
204020f2:	00f71863          	bne	a4,a5,20402102 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
204020f6:	fc842703          	lw	a4,-56(s0)
204020fa:	fd442783          	lw	a5,-44(s0)
204020fe:	02f70063          	beq	a4,a5,2040211e <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402102:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402106:	fe442783          	lw	a5,-28(s0)
2040210a:	0785                	addi	a5,a5,1
2040210c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402110:	fe442703          	lw	a4,-28(s0)
20402114:	fd842783          	lw	a5,-40(s0)
20402118:	faf74be3          	blt	a4,a5,204020ce <__metal_driver_riscv_clint0_register+0x56>
2040211c:	a011                	j	20402120 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
2040211e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402120:	fe842783          	lw	a5,-24(s0)
20402124:	c385                	beqz	a5,20402144 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402126:	fe842783          	lw	a5,-24(s0)
2040212a:	439c                	lw	a5,0(a5)
2040212c:	4fdc                	lw	a5,28(a5)
2040212e:	fc042683          	lw	a3,-64(s0)
20402132:	fc442603          	lw	a2,-60(s0)
20402136:	fc842583          	lw	a1,-56(s0)
2040213a:	fe842503          	lw	a0,-24(s0)
2040213e:	9782                	jalr	a5
20402140:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402144:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402148:	853e                	mv	a0,a5
2040214a:	50f2                	lw	ra,60(sp)
2040214c:	5462                	lw	s0,56(sp)
2040214e:	6121                	addi	sp,sp,64
20402150:	8082                	ret

20402152 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402152:	7179                	addi	sp,sp,-48
20402154:	d622                	sw	s0,44(sp)
20402156:	1800                	addi	s0,sp,48
20402158:	fca42e23          	sw	a0,-36(s0)
2040215c:	fcb42c23          	sw	a1,-40(s0)
20402160:	fcc42a23          	sw	a2,-44(s0)
20402164:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402168:	57fd                	li	a5,-1
2040216a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
2040216e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402172:	853e                	mv	a0,a5
20402174:	5432                	lw	s0,44(sp)
20402176:	6145                	addi	sp,sp,48
20402178:	8082                	ret

2040217a <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
2040217a:	1101                	addi	sp,sp,-32
2040217c:	ce06                	sw	ra,28(sp)
2040217e:	cc22                	sw	s0,24(sp)
20402180:	1000                	addi	s0,sp,32
20402182:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402186:	28e010ef          	jal	ra,20403414 <__metal_controller_interrupt_vector_mode>
2040218a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
2040218c:	853e                	mv	a0,a5
2040218e:	40f2                	lw	ra,28(sp)
20402190:	4462                	lw	s0,24(sp)
20402192:	6105                	addi	sp,sp,32
20402194:	8082                	ret

20402196 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402196:	7179                	addi	sp,sp,-48
20402198:	d606                	sw	ra,44(sp)
2040219a:	d422                	sw	s0,40(sp)
2040219c:	1800                	addi	s0,sp,48
2040219e:	fca42e23          	sw	a0,-36(s0)
204021a2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
204021a6:	57fd                	li	a5,-1
204021a8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
204021ac:	3539                	jal	20401fba <_get_cpu_intc>
204021ae:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
204021b2:	fe842783          	lw	a5,-24(s0)
204021b6:	c395                	beqz	a5,204021da <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
204021b8:	fd842703          	lw	a4,-40(s0)
204021bc:	4785                	li	a5,1
204021be:	00e7ef63          	bltu	a5,a4,204021dc <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
204021c2:	fe842783          	lw	a5,-24(s0)
204021c6:	439c                	lw	a5,0(a5)
204021c8:	43dc                	lw	a5,4(a5)
204021ca:	fd842583          	lw	a1,-40(s0)
204021ce:	fe842503          	lw	a0,-24(s0)
204021d2:	9782                	jalr	a5
204021d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204021d8:	a011                	j	204021dc <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204021da:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204021dc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204021e0:	853e                	mv	a0,a5
204021e2:	50b2                	lw	ra,44(sp)
204021e4:	5422                	lw	s0,40(sp)
204021e6:	6145                	addi	sp,sp,48
204021e8:	8082                	ret

204021ea <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204021ea:	7139                	addi	sp,sp,-64
204021ec:	de06                	sw	ra,60(sp)
204021ee:	dc22                	sw	s0,56(sp)
204021f0:	0080                	addi	s0,sp,64
204021f2:	fca42623          	sw	a0,-52(s0)
204021f6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204021fa:	57fd                	li	a5,-1
204021fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402200:	fc842783          	lw	a5,-56(s0)
20402204:	c7c9                	beqz	a5,2040228e <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402206:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040220a:	3b45                	jal	20401fba <_get_cpu_intc>
2040220c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402210:	fcc42503          	lw	a0,-52(s0)
20402214:	36dd                	jal	20401dfa <__metal_driver_sifive_clint0_num_interrupts>
20402216:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
2040221a:	fe042223          	sw	zero,-28(s0)
2040221e:	a091                	j	20402262 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402220:	fe442583          	lw	a1,-28(s0)
20402224:	fcc42503          	lw	a0,-52(s0)
20402228:	390d                	jal	20401e5a <__metal_driver_sifive_clint0_interrupt_lines>
2040222a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040222e:	fe442583          	lw	a1,-28(s0)
20402232:	fcc42503          	lw	a0,-52(s0)
20402236:	36e5                	jal	20401e1e <__metal_driver_sifive_clint0_interrupt_parents>
20402238:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
2040223c:	fe042703          	lw	a4,-32(s0)
20402240:	fe842783          	lw	a5,-24(s0)
20402244:	00f71863          	bne	a4,a5,20402254 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402248:	fc842703          	lw	a4,-56(s0)
2040224c:	fd842783          	lw	a5,-40(s0)
20402250:	02f70063          	beq	a4,a5,20402270 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402254:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402258:	fe442783          	lw	a5,-28(s0)
2040225c:	0785                	addi	a5,a5,1
2040225e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402262:	fe442703          	lw	a4,-28(s0)
20402266:	fdc42783          	lw	a5,-36(s0)
2040226a:	faf74be3          	blt	a4,a5,20402220 <__metal_driver_riscv_clint0_enable+0x36>
2040226e:	a011                	j	20402272 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402270:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402272:	fe842783          	lw	a5,-24(s0)
20402276:	cf81                	beqz	a5,2040228e <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402278:	fe842783          	lw	a5,-24(s0)
2040227c:	439c                	lw	a5,0(a5)
2040227e:	53dc                	lw	a5,36(a5)
20402280:	fc842583          	lw	a1,-56(s0)
20402284:	fe842503          	lw	a0,-24(s0)
20402288:	9782                	jalr	a5
2040228a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
2040228e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402292:	853e                	mv	a0,a5
20402294:	50f2                	lw	ra,60(sp)
20402296:	5462                	lw	s0,56(sp)
20402298:	6121                	addi	sp,sp,64
2040229a:	8082                	ret

2040229c <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
2040229c:	7139                	addi	sp,sp,-64
2040229e:	de06                	sw	ra,60(sp)
204022a0:	dc22                	sw	s0,56(sp)
204022a2:	0080                	addi	s0,sp,64
204022a4:	fca42623          	sw	a0,-52(s0)
204022a8:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
204022ac:	57fd                	li	a5,-1
204022ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
204022b2:	fc842783          	lw	a5,-56(s0)
204022b6:	c7c9                	beqz	a5,20402340 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
204022b8:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204022bc:	39fd                	jal	20401fba <_get_cpu_intc>
204022be:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204022c2:	fcc42503          	lw	a0,-52(s0)
204022c6:	3e15                	jal	20401dfa <__metal_driver_sifive_clint0_num_interrupts>
204022c8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
204022cc:	fe042223          	sw	zero,-28(s0)
204022d0:	a091                	j	20402314 <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204022d2:	fe442583          	lw	a1,-28(s0)
204022d6:	fcc42503          	lw	a0,-52(s0)
204022da:	3641                	jal	20401e5a <__metal_driver_sifive_clint0_interrupt_lines>
204022dc:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204022e0:	fe442583          	lw	a1,-28(s0)
204022e4:	fcc42503          	lw	a0,-52(s0)
204022e8:	3e1d                	jal	20401e1e <__metal_driver_sifive_clint0_interrupt_parents>
204022ea:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204022ee:	fe042703          	lw	a4,-32(s0)
204022f2:	fe842783          	lw	a5,-24(s0)
204022f6:	00f71863          	bne	a4,a5,20402306 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204022fa:	fc842703          	lw	a4,-56(s0)
204022fe:	fd842783          	lw	a5,-40(s0)
20402302:	02f70063          	beq	a4,a5,20402322 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402306:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040230a:	fe442783          	lw	a5,-28(s0)
2040230e:	0785                	addi	a5,a5,1
20402310:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402314:	fe442703          	lw	a4,-28(s0)
20402318:	fdc42783          	lw	a5,-36(s0)
2040231c:	faf74be3          	blt	a4,a5,204022d2 <__metal_driver_riscv_clint0_disable+0x36>
20402320:	a011                	j	20402324 <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402322:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402324:	fe842783          	lw	a5,-24(s0)
20402328:	cf81                	beqz	a5,20402340 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
2040232a:	fe842783          	lw	a5,-24(s0)
2040232e:	439c                	lw	a5,0(a5)
20402330:	579c                	lw	a5,40(a5)
20402332:	fc842583          	lw	a1,-56(s0)
20402336:	fe842503          	lw	a0,-24(s0)
2040233a:	9782                	jalr	a5
2040233c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402340:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402344:	853e                	mv	a0,a5
20402346:	50f2                	lw	ra,60(sp)
20402348:	5462                	lw	s0,56(sp)
2040234a:	6121                	addi	sp,sp,64
2040234c:	8082                	ret

2040234e <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
2040234e:	7179                	addi	sp,sp,-48
20402350:	d606                	sw	ra,44(sp)
20402352:	d422                	sw	s0,40(sp)
20402354:	1800                	addi	s0,sp,48
20402356:	fca42e23          	sw	a0,-36(s0)
2040235a:	fcb42c23          	sw	a1,-40(s0)
2040235e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402362:	57fd                	li	a5,-1
20402364:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402368:	fdc42783          	lw	a5,-36(s0)
2040236c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402370:	fdc42503          	lw	a0,-36(s0)
20402374:	a61ff0ef          	jal	ra,20401dd4 <__metal_driver_sifive_clint0_control_base>
20402378:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
2040237c:	fd842703          	lw	a4,-40(s0)
20402380:	4789                	li	a5,2
20402382:	04f70963          	beq	a4,a5,204023d4 <__metal_driver_riscv_clint0_command_request+0x86>
20402386:	fd842703          	lw	a4,-40(s0)
2040238a:	4789                	li	a5,2
2040238c:	00e7c863          	blt	a5,a4,2040239c <__metal_driver_riscv_clint0_command_request+0x4e>
20402390:	fd842703          	lw	a4,-40(s0)
20402394:	4785                	li	a5,1
20402396:	00f70e63          	beq	a4,a5,204023b2 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
2040239a:	a8f1                	j	20402476 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
2040239c:	fd842703          	lw	a4,-40(s0)
204023a0:	478d                	li	a5,3
204023a2:	04f70d63          	beq	a4,a5,204023fc <__metal_driver_riscv_clint0_command_request+0xae>
204023a6:	fd842703          	lw	a4,-40(s0)
204023aa:	4791                	li	a5,4
204023ac:	08f70963          	beq	a4,a5,2040243e <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204023b0:	a0d9                	j	20402476 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204023b2:	fd442783          	lw	a5,-44(s0)
204023b6:	cbcd                	beqz	a5,20402468 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204023b8:	fe842503          	lw	a0,-24(s0)
204023bc:	acfff0ef          	jal	ra,20401e8a <__metal_clint0_mtime_get>
204023c0:	87aa                	mv	a5,a0
204023c2:	882e                	mv	a6,a1
204023c4:	fd442703          	lw	a4,-44(s0)
204023c8:	c31c                	sw	a5,0(a4)
204023ca:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204023ce:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204023d2:	a859                	j	20402468 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
204023d4:	fd442783          	lw	a5,-44(s0)
204023d8:	cbd1                	beqz	a5,2040246c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204023da:	fd442783          	lw	a5,-44(s0)
204023de:	439c                	lw	a5,0(a5)
204023e0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204023e4:	fe042783          	lw	a5,-32(s0)
204023e8:	078a                	slli	a5,a5,0x2
204023ea:	873e                	mv	a4,a5
204023ec:	fe442783          	lw	a5,-28(s0)
204023f0:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
204023f2:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
204023f6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204023fa:	a88d                	j	2040246c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
204023fc:	fd442783          	lw	a5,-44(s0)
20402400:	cba5                	beqz	a5,20402470 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402402:	fd442783          	lw	a5,-44(s0)
20402406:	439c                	lw	a5,0(a5)
20402408:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040240c:	fe042783          	lw	a5,-32(s0)
20402410:	078a                	slli	a5,a5,0x2
20402412:	873e                	mv	a4,a5
20402414:	fe442783          	lw	a5,-28(s0)
20402418:	97ba                	add	a5,a5,a4
2040241a:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
2040241c:	4785                	li	a5,1
2040241e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402420:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402424:	fe042783          	lw	a5,-32(s0)
20402428:	078a                	slli	a5,a5,0x2
2040242a:	873e                	mv	a4,a5
2040242c:	fe442783          	lw	a5,-28(s0)
20402430:	97ba                	add	a5,a5,a4
20402432:	439c                	lw	a5,0(a5)
20402434:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402438:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040243c:	a815                	j	20402470 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
2040243e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402442:	fd442783          	lw	a5,-44(s0)
20402446:	c79d                	beqz	a5,20402474 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402448:	fd442783          	lw	a5,-44(s0)
2040244c:	439c                	lw	a5,0(a5)
2040244e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402452:	fe042783          	lw	a5,-32(s0)
20402456:	078a                	slli	a5,a5,0x2
20402458:	873e                	mv	a4,a5
2040245a:	fe442783          	lw	a5,-28(s0)
2040245e:	97ba                	add	a5,a5,a4
20402460:	439c                	lw	a5,0(a5)
20402462:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402466:	a039                	j	20402474 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402468:	0001                	nop
2040246a:	a031                	j	20402476 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040246c:	0001                	nop
2040246e:	a021                	j	20402476 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402470:	0001                	nop
20402472:	a011                	j	20402476 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402474:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402476:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
2040247a:	853e                	mv	a0,a5
2040247c:	50b2                	lw	ra,44(sp)
2040247e:	5422                	lw	s0,40(sp)
20402480:	6145                	addi	sp,sp,48
20402482:	8082                	ret

20402484 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402484:	7179                	addi	sp,sp,-48
20402486:	d606                	sw	ra,44(sp)
20402488:	d422                	sw	s0,40(sp)
2040248a:	1800                	addi	s0,sp,48
2040248c:	fca42e23          	sw	a0,-36(s0)
20402490:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402494:	56f020ef          	jal	ra,20405202 <metal_cpu_get_current_hartid>
20402498:	87aa                	mv	a5,a0
2040249a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
2040249e:	fec40793          	addi	a5,s0,-20
204024a2:	863e                	mv	a2,a5
204024a4:	4589                	li	a1,2
204024a6:	fdc42503          	lw	a0,-36(s0)
204024aa:	3555                	jal	2040234e <__metal_driver_riscv_clint0_command_request>
204024ac:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204024ae:	853e                	mv	a0,a5
204024b0:	50b2                	lw	ra,44(sp)
204024b2:	5422                	lw	s0,40(sp)
204024b4:	6145                	addi	sp,sp,48
204024b6:	8082                	ret

204024b8 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204024b8:	7179                	addi	sp,sp,-48
204024ba:	d606                	sw	ra,44(sp)
204024bc:	d422                	sw	s0,40(sp)
204024be:	1800                	addi	s0,sp,48
204024c0:	fca42e23          	sw	a0,-36(s0)
204024c4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204024c8:	53b020ef          	jal	ra,20405202 <metal_cpu_get_current_hartid>
204024cc:	87aa                	mv	a5,a0
204024ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204024d2:	fec40793          	addi	a5,s0,-20
204024d6:	863e                	mv	a2,a5
204024d8:	458d                	li	a1,3
204024da:	fdc42503          	lw	a0,-36(s0)
204024de:	3d85                	jal	2040234e <__metal_driver_riscv_clint0_command_request>
204024e0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204024e2:	853e                	mv	a0,a5
204024e4:	50b2                	lw	ra,44(sp)
204024e6:	5422                	lw	s0,40(sp)
204024e8:	6145                	addi	sp,sp,48
204024ea:	8082                	ret

204024ec <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204024ec:	1101                	addi	sp,sp,-32
204024ee:	ce22                	sw	s0,28(sp)
204024f0:	1000                	addi	s0,sp,32
204024f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204024f6:	fec42703          	lw	a4,-20(s0)
204024fa:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204024fe:	00f71463          	bne	a4,a5,20402506 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
		return 0;
20402502:	4781                	li	a5,0
20402504:	a011                	j	20402508 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402506:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:202
	}
}
20402508:	853e                	mv	a0,a5
2040250a:	4472                	lw	s0,28(sp)
2040250c:	6105                	addi	sp,sp,32
2040250e:	8082                	ret

20402510 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402510:	1101                	addi	sp,sp,-32
20402512:	ce22                	sw	s0,28(sp)
20402514:	1000                	addi	s0,sp,32
20402516:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040251a:	fec42703          	lw	a4,-20(s0)
2040251e:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402522:	00f71763          	bne	a4,a5,20402530 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:207
		return 1000000;
20402526:	000f47b7          	lui	a5,0xf4
2040252a:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
2040252e:	a011                	j	20402532 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402530:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:212
	}
}
20402532:	853e                	mv	a0,a5
20402534:	4472                	lw	s0,28(sp)
20402536:	6105                	addi	sp,sp,32
20402538:	8082                	ret

2040253a <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040253a:	1101                	addi	sp,sp,-32
2040253c:	ce22                	sw	s0,28(sp)
2040253e:	1000                	addi	s0,sp,32
20402540:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402544:	fec42703          	lw	a4,-20(s0)
20402548:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
2040254c:	00f71763          	bne	a4,a5,2040255a <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402550:	800007b7          	lui	a5,0x80000
20402554:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20402558:	a011                	j	2040255c <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040255a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:222
	}
}
2040255c:	853e                	mv	a0,a5
2040255e:	4472                	lw	s0,28(sp)
20402560:	6105                	addi	sp,sp,32
20402562:	8082                	ret

20402564 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402564:	1101                	addi	sp,sp,-32
20402566:	ce22                	sw	s0,28(sp)
20402568:	1000                	addi	s0,sp,32
2040256a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
2040256e:	fec42783          	lw	a5,-20(s0)
20402572:	00f04a63          	bgtz	a5,20402586 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402576:	fec42703          	lw	a4,-20(s0)
2040257a:	070a                	slli	a4,a4,0x2
2040257c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402580:	97ba                	add	a5,a5,a4
20402582:	439c                	lw	a5,0(a5)
20402584:	a011                	j	20402588 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402586:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402588:	853e                	mv	a0,a5
2040258a:	4472                	lw	s0,28(sp)
2040258c:	6105                	addi	sp,sp,32
2040258e:	8082                	ret

20402590 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402590:	1101                	addi	sp,sp,-32
20402592:	ce22                	sw	s0,28(sp)
20402594:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402596:	f14027f3          	csrr	a5,mhartid
2040259a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
2040259e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
204025a2:	853e                	mv	a0,a5
204025a4:	4472                	lw	s0,28(sp)
204025a6:	6105                	addi	sp,sp,32
204025a8:	8082                	ret

204025aa <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204025aa:	1101                	addi	sp,sp,-32
204025ac:	ce22                	sw	s0,28(sp)
204025ae:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204025b0:	47a1                	li	a5,8
204025b2:	3007a7f3          	csrrs	a5,mstatus,a5
204025b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
204025ba:	0001                	nop
204025bc:	4472                	lw	s0,28(sp)
204025be:	6105                	addi	sp,sp,32
204025c0:	8082                	ret

204025c2 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204025c2:	1101                	addi	sp,sp,-32
204025c4:	ce22                	sw	s0,28(sp)
204025c6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204025c8:	47a1                	li	a5,8
204025ca:	3007b7f3          	csrrc	a5,mstatus,a5
204025ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204025d2:	0001                	nop
204025d4:	4472                	lw	s0,28(sp)
204025d6:	6105                	addi	sp,sp,32
204025d8:	8082                	ret

204025da <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204025da:	1101                	addi	sp,sp,-32
204025dc:	ce22                	sw	s0,28(sp)
204025de:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204025e0:	47a1                	li	a5,8
204025e2:	3047a7f3          	csrrs	a5,mie,a5
204025e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204025ea:	0001                	nop
204025ec:	4472                	lw	s0,28(sp)
204025ee:	6105                	addi	sp,sp,32
204025f0:	8082                	ret

204025f2 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204025f2:	1101                	addi	sp,sp,-32
204025f4:	ce22                	sw	s0,28(sp)
204025f6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204025f8:	47a1                	li	a5,8
204025fa:	3047b7f3          	csrrc	a5,mie,a5
204025fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402602:	0001                	nop
20402604:	4472                	lw	s0,28(sp)
20402606:	6105                	addi	sp,sp,32
20402608:	8082                	ret

2040260a <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
2040260a:	1101                	addi	sp,sp,-32
2040260c:	ce22                	sw	s0,28(sp)
2040260e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402610:	08000793          	li	a5,128
20402614:	3047a7f3          	csrrs	a5,mie,a5
20402618:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
2040261c:	0001                	nop
2040261e:	4472                	lw	s0,28(sp)
20402620:	6105                	addi	sp,sp,32
20402622:	8082                	ret

20402624 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402624:	1101                	addi	sp,sp,-32
20402626:	ce22                	sw	s0,28(sp)
20402628:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040262a:	08000793          	li	a5,128
2040262e:	3047b7f3          	csrrc	a5,mie,a5
20402632:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402636:	0001                	nop
20402638:	4472                	lw	s0,28(sp)
2040263a:	6105                	addi	sp,sp,32
2040263c:	8082                	ret

2040263e <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
2040263e:	1101                	addi	sp,sp,-32
20402640:	ce22                	sw	s0,28(sp)
20402642:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402644:	6785                	lui	a5,0x1
20402646:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040264a:	3047a7f3          	csrrs	a5,mie,a5
2040264e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402652:	0001                	nop
20402654:	4472                	lw	s0,28(sp)
20402656:	6105                	addi	sp,sp,32
20402658:	8082                	ret

2040265a <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040265a:	1101                	addi	sp,sp,-32
2040265c:	ce22                	sw	s0,28(sp)
2040265e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402660:	6785                	lui	a5,0x1
20402662:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402666:	3047b7f3          	csrrc	a5,mie,a5
2040266a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
2040266e:	0001                	nop
20402670:	4472                	lw	s0,28(sp)
20402672:	6105                	addi	sp,sp,32
20402674:	8082                	ret

20402676 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402676:	7179                	addi	sp,sp,-48
20402678:	d622                	sw	s0,44(sp)
2040267a:	1800                	addi	s0,sp,48
2040267c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402680:	fdc42783          	lw	a5,-36(s0)
20402684:	4705                	li	a4,1
20402686:	00f717b3          	sll	a5,a4,a5
2040268a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2040268e:	fec42783          	lw	a5,-20(s0)
20402692:	3047a7f3          	csrrs	a5,mie,a5
20402696:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040269a:	0001                	nop
2040269c:	5432                	lw	s0,44(sp)
2040269e:	6145                	addi	sp,sp,48
204026a0:	8082                	ret

204026a2 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
204026a2:	7179                	addi	sp,sp,-48
204026a4:	d622                	sw	s0,44(sp)
204026a6:	1800                	addi	s0,sp,48
204026a8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204026ac:	fdc42783          	lw	a5,-36(s0)
204026b0:	4705                	li	a4,1
204026b2:	00f717b3          	sll	a5,a4,a5
204026b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204026ba:	fec42783          	lw	a5,-20(s0)
204026be:	3047b7f3          	csrrc	a5,mie,a5
204026c2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204026c6:	0001                	nop
204026c8:	5432                	lw	s0,44(sp)
204026ca:	6145                	addi	sp,sp,48
204026cc:	8082                	ret

204026ce <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204026ce:	1101                	addi	sp,sp,-32
204026d0:	ce06                	sw	ra,28(sp)
204026d2:	cc22                	sw	s0,24(sp)
204026d4:	1000                	addi	s0,sp,32
204026d6:	fea42623          	sw	a0,-20(s0)
204026da:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204026de:	06400513          	li	a0,100
204026e2:	33b020ef          	jal	ra,2040521c <metal_shutdown>

204026e6 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204026e6:	1101                	addi	sp,sp,-32
204026e8:	ce06                	sw	ra,28(sp)
204026ea:	cc22                	sw	s0,24(sp)
204026ec:	1000                	addi	s0,sp,32
204026ee:	fea42623          	sw	a0,-20(s0)
204026f2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204026f6:	0c800513          	li	a0,200
204026fa:	323020ef          	jal	ra,2040521c <metal_shutdown>

204026fe <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204026fe:	715d                	addi	sp,sp,-80
20402700:	c686                	sw	ra,76(sp)
20402702:	c496                	sw	t0,72(sp)
20402704:	c29a                	sw	t1,68(sp)
20402706:	c09e                	sw	t2,64(sp)
20402708:	de22                	sw	s0,60(sp)
2040270a:	dc2a                	sw	a0,56(sp)
2040270c:	da2e                	sw	a1,52(sp)
2040270e:	d832                	sw	a2,48(sp)
20402710:	d636                	sw	a3,44(sp)
20402712:	d43a                	sw	a4,40(sp)
20402714:	d23e                	sw	a5,36(sp)
20402716:	d042                	sw	a6,32(sp)
20402718:	ce46                	sw	a7,28(sp)
2040271a:	cc72                	sw	t3,24(sp)
2040271c:	ca76                	sw	t4,20(sp)
2040271e:	c87a                	sw	t5,16(sp)
20402720:	c67e                	sw	t6,12(sp)
20402722:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402724:	12c00513          	li	a0,300
20402728:	2f5020ef          	jal	ra,2040521c <metal_shutdown>

2040272c <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
2040272c:	711d                	addi	sp,sp,-96
2040272e:	ce86                	sw	ra,92(sp)
20402730:	cc96                	sw	t0,88(sp)
20402732:	ca9a                	sw	t1,84(sp)
20402734:	c89e                	sw	t2,80(sp)
20402736:	c6a2                	sw	s0,76(sp)
20402738:	c4aa                	sw	a0,72(sp)
2040273a:	c2ae                	sw	a1,68(sp)
2040273c:	c0b2                	sw	a2,64(sp)
2040273e:	de36                	sw	a3,60(sp)
20402740:	dc3a                	sw	a4,56(sp)
20402742:	da3e                	sw	a5,52(sp)
20402744:	d842                	sw	a6,48(sp)
20402746:	d646                	sw	a7,44(sp)
20402748:	d472                	sw	t3,40(sp)
2040274a:	d276                	sw	t4,36(sp)
2040274c:	d07a                	sw	t5,32(sp)
2040274e:	ce7e                	sw	t6,28(sp)
20402750:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402752:	3d3d                	jal	20402590 <__metal_myhart_id>
20402754:	872a                	mv	a4,a0
20402756:	070a                	slli	a4,a4,0x2
20402758:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040275c:	97ba                	add	a5,a5,a4
2040275e:	439c                	lw	a5,0(a5)
20402760:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402764:	fac42783          	lw	a5,-84(s0)
20402768:	c785                	beqz	a5,20402790 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040276a:	fac42503          	lw	a0,-84(s0)
2040276e:	33f1                	jal	2040253a <__metal_driver_cpu_interrupt_controller>
20402770:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402774:	fa842783          	lw	a5,-88(s0)
20402778:	0e07a783          	lw	a5,224(a5)
2040277c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402780:	fa842783          	lw	a5,-88(s0)
20402784:	0d87a783          	lw	a5,216(a5)
20402788:	fa442583          	lw	a1,-92(s0)
2040278c:	450d                	li	a0,3
2040278e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402790:	0001                	nop
20402792:	40f6                	lw	ra,92(sp)
20402794:	42e6                	lw	t0,88(sp)
20402796:	4356                	lw	t1,84(sp)
20402798:	43c6                	lw	t2,80(sp)
2040279a:	4436                	lw	s0,76(sp)
2040279c:	4526                	lw	a0,72(sp)
2040279e:	4596                	lw	a1,68(sp)
204027a0:	4606                	lw	a2,64(sp)
204027a2:	56f2                	lw	a3,60(sp)
204027a4:	5762                	lw	a4,56(sp)
204027a6:	57d2                	lw	a5,52(sp)
204027a8:	5842                	lw	a6,48(sp)
204027aa:	58b2                	lw	a7,44(sp)
204027ac:	5e22                	lw	t3,40(sp)
204027ae:	5e92                	lw	t4,36(sp)
204027b0:	5f02                	lw	t5,32(sp)
204027b2:	4ff2                	lw	t6,28(sp)
204027b4:	6125                	addi	sp,sp,96
204027b6:	30200073          	mret

204027ba <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204027ba:	7179                	addi	sp,sp,-48
204027bc:	d606                	sw	ra,44(sp)
204027be:	d422                	sw	s0,40(sp)
204027c0:	1800                	addi	s0,sp,48
204027c2:	fca42e23          	sw	a0,-36(s0)
204027c6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204027ca:	33d9                	jal	20402590 <__metal_myhart_id>
204027cc:	872a                	mv	a4,a0
204027ce:	070a                	slli	a4,a4,0x2
204027d0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204027d4:	97ba                	add	a5,a5,a4
204027d6:	439c                	lw	a5,0(a5)
204027d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204027dc:	342027f3          	csrr	a5,mcause
204027e0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204027e4:	fec42783          	lw	a5,-20(s0)
204027e8:	c795                	beqz	a5,20402814 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204027ea:	fec42503          	lw	a0,-20(s0)
204027ee:	33b1                	jal	2040253a <__metal_driver_cpu_interrupt_controller>
204027f0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204027f4:	fe842783          	lw	a5,-24(s0)
204027f8:	3ff7f793          	andi	a5,a5,1023
204027fc:	fe442703          	lw	a4,-28(s0)
20402800:	0e078793          	addi	a5,a5,224
20402804:	078a                	slli	a5,a5,0x2
20402806:	97ba                	add	a5,a5,a4
20402808:	479c                	lw	a5,8(a5)
2040280a:	fdc42583          	lw	a1,-36(s0)
2040280e:	fec42503          	lw	a0,-20(s0)
20402812:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402814:	0001                	nop
20402816:	50b2                	lw	ra,44(sp)
20402818:	5422                	lw	s0,40(sp)
2040281a:	6145                	addi	sp,sp,48
2040281c:	8082                	ret

2040281e <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
2040281e:	711d                	addi	sp,sp,-96
20402820:	ce86                	sw	ra,92(sp)
20402822:	cc96                	sw	t0,88(sp)
20402824:	ca9a                	sw	t1,84(sp)
20402826:	c89e                	sw	t2,80(sp)
20402828:	c6a2                	sw	s0,76(sp)
2040282a:	c4aa                	sw	a0,72(sp)
2040282c:	c2ae                	sw	a1,68(sp)
2040282e:	c0b2                	sw	a2,64(sp)
20402830:	de36                	sw	a3,60(sp)
20402832:	dc3a                	sw	a4,56(sp)
20402834:	da3e                	sw	a5,52(sp)
20402836:	d842                	sw	a6,48(sp)
20402838:	d646                	sw	a7,44(sp)
2040283a:	d472                	sw	t3,40(sp)
2040283c:	d276                	sw	t4,36(sp)
2040283e:	d07a                	sw	t5,32(sp)
20402840:	ce7e                	sw	t6,28(sp)
20402842:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402844:	33b1                	jal	20402590 <__metal_myhart_id>
20402846:	872a                	mv	a4,a0
20402848:	070a                	slli	a4,a4,0x2
2040284a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040284e:	97ba                	add	a5,a5,a4
20402850:	439c                	lw	a5,0(a5)
20402852:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402856:	fac42783          	lw	a5,-84(s0)
2040285a:	c785                	beqz	a5,20402882 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040285c:	fac42503          	lw	a0,-84(s0)
20402860:	39e9                	jal	2040253a <__metal_driver_cpu_interrupt_controller>
20402862:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402866:	fa842783          	lw	a5,-88(s0)
2040286a:	1407a783          	lw	a5,320(a5)
2040286e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402872:	fa842783          	lw	a5,-88(s0)
20402876:	1387a783          	lw	a5,312(a5)
2040287a:	fa442583          	lw	a1,-92(s0)
2040287e:	451d                	li	a0,7
20402880:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402882:	0001                	nop
20402884:	40f6                	lw	ra,92(sp)
20402886:	42e6                	lw	t0,88(sp)
20402888:	4356                	lw	t1,84(sp)
2040288a:	43c6                	lw	t2,80(sp)
2040288c:	4436                	lw	s0,76(sp)
2040288e:	4526                	lw	a0,72(sp)
20402890:	4596                	lw	a1,68(sp)
20402892:	4606                	lw	a2,64(sp)
20402894:	56f2                	lw	a3,60(sp)
20402896:	5762                	lw	a4,56(sp)
20402898:	57d2                	lw	a5,52(sp)
2040289a:	5842                	lw	a6,48(sp)
2040289c:	58b2                	lw	a7,44(sp)
2040289e:	5e22                	lw	t3,40(sp)
204028a0:	5e92                	lw	t4,36(sp)
204028a2:	5f02                	lw	t5,32(sp)
204028a4:	4ff2                	lw	t6,28(sp)
204028a6:	6125                	addi	sp,sp,96
204028a8:	30200073          	mret

204028ac <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204028ac:	7179                	addi	sp,sp,-48
204028ae:	d606                	sw	ra,44(sp)
204028b0:	d422                	sw	s0,40(sp)
204028b2:	1800                	addi	s0,sp,48
204028b4:	fca42e23          	sw	a0,-36(s0)
204028b8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204028bc:	39d1                	jal	20402590 <__metal_myhart_id>
204028be:	87aa                	mv	a5,a0
204028c0:	853e                	mv	a0,a5
204028c2:	314d                	jal	20402564 <__metal_driver_cpu_get>
204028c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204028c8:	fec42503          	lw	a0,-20(s0)
204028cc:	1a2010ef          	jal	ra,20403a6e <__metal_driver_cpu_mtime_get>
204028d0:	fea42023          	sw	a0,-32(s0)
204028d4:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204028d8:	fe042783          	lw	a5,-32(s0)
204028dc:	fe442803          	lw	a6,-28(s0)
204028e0:	45a9                	li	a1,10
204028e2:	4601                	li	a2,0
204028e4:	00b786b3          	add	a3,a5,a1
204028e8:	8536                	mv	a0,a3
204028ea:	00f53533          	sltu	a0,a0,a5
204028ee:	00c80733          	add	a4,a6,a2
204028f2:	00e507b3          	add	a5,a0,a4
204028f6:	873e                	mv	a4,a5
204028f8:	87b6                	mv	a5,a3
204028fa:	883a                	mv	a6,a4
204028fc:	85be                	mv	a1,a5
204028fe:	8642                	mv	a2,a6
20402900:	fec42503          	lw	a0,-20(s0)
20402904:	1d0010ef          	jal	ra,20403ad4 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402908:	0001                	nop
2040290a:	50b2                	lw	ra,44(sp)
2040290c:	5422                	lw	s0,40(sp)
2040290e:	6145                	addi	sp,sp,48
20402910:	8082                	ret
	...

20402980 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402980:	7119                	addi	sp,sp,-128
20402982:	de86                	sw	ra,124(sp)
20402984:	dc96                	sw	t0,120(sp)
20402986:	da9a                	sw	t1,116(sp)
20402988:	d89e                	sw	t2,112(sp)
2040298a:	d6a2                	sw	s0,108(sp)
2040298c:	d4aa                	sw	a0,104(sp)
2040298e:	d2ae                	sw	a1,100(sp)
20402990:	d0b2                	sw	a2,96(sp)
20402992:	ceb6                	sw	a3,92(sp)
20402994:	ccba                	sw	a4,88(sp)
20402996:	cabe                	sw	a5,84(sp)
20402998:	c8c2                	sw	a6,80(sp)
2040299a:	c6c6                	sw	a7,76(sp)
2040299c:	c4f2                	sw	t3,72(sp)
2040299e:	c2f6                	sw	t4,68(sp)
204029a0:	c0fa                	sw	t5,64(sp)
204029a2:	de7e                	sw	t6,60(sp)
204029a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029a6:	36ed                	jal	20402590 <__metal_myhart_id>
204029a8:	872a                	mv	a4,a0
204029aa:	070a                	slli	a4,a4,0x2
204029ac:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204029b0:	97ba                	add	a5,a5,a4
204029b2:	439c                	lw	a5,0(a5)
204029b4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204029b8:	342027f3          	csrr	a5,mcause
204029bc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204029c0:	341027f3          	csrr	a5,mepc
204029c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204029c8:	343027f3          	csrr	a5,mtval
204029cc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204029d0:	305027f3          	csrr	a5,mtvec
204029d4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204029d8:	fac42783          	lw	a5,-84(s0)
204029dc:	c7e9                	beqz	a5,20402aa6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029de:	fac42503          	lw	a0,-84(s0)
204029e2:	b59ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
204029e6:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204029ea:	fa842783          	lw	a5,-88(s0)
204029ee:	3ff7f793          	andi	a5,a5,1023
204029f2:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204029f6:	fa842783          	lw	a5,-88(s0)
204029fa:	0807d863          	bgez	a5,20402a8a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
204029fe:	f9442703          	lw	a4,-108(s0)
20402a02:	47ad                	li	a5,11
20402a04:	00e7d763          	bge	a5,a4,20402a12 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402a08:	f9c42783          	lw	a5,-100(s0)
20402a0c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402a10:	ef9d                	bnez	a5,20402a4e <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402a12:	f9842683          	lw	a3,-104(s0)
20402a16:	f9442703          	lw	a4,-108(s0)
20402a1a:	87ba                	mv	a5,a4
20402a1c:	0786                	slli	a5,a5,0x1
20402a1e:	97ba                	add	a5,a5,a4
20402a20:	078e                	slli	a5,a5,0x3
20402a22:	97b6                	add	a5,a5,a3
20402a24:	0987a783          	lw	a5,152(a5)
20402a28:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402a2c:	f9842683          	lw	a3,-104(s0)
20402a30:	f9442703          	lw	a4,-108(s0)
20402a34:	87ba                	mv	a5,a4
20402a36:	0786                	slli	a5,a5,0x1
20402a38:	97ba                	add	a5,a5,a4
20402a3a:	078e                	slli	a5,a5,0x3
20402a3c:	97b6                	add	a5,a5,a3
20402a3e:	0907a783          	lw	a5,144(a5)
20402a42:	f8c42583          	lw	a1,-116(s0)
20402a46:	f9442503          	lw	a0,-108(s0)
20402a4a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402a4c:	a8a9                	j	20402aa6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402a4e:	f9c42783          	lw	a5,-100(s0)
20402a52:	03f7f713          	andi	a4,a5,63
20402a56:	4789                	li	a5,2
20402a58:	04f71763          	bne	a4,a5,20402aa6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402a5c:	307027f3          	csrr	a5,mtvt
20402a60:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402a64:	f9842783          	lw	a5,-104(s0)
20402a68:	0dc7a783          	lw	a5,220(a5)
20402a6c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402a70:	f9042783          	lw	a5,-112(s0)
20402a74:	439c                	lw	a5,0(a5)
20402a76:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402a7a:	f8842783          	lw	a5,-120(s0)
20402a7e:	f8c42583          	lw	a1,-116(s0)
20402a82:	f9442503          	lw	a0,-108(s0)
20402a86:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402a88:	a839                	j	20402aa6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402a8a:	f9842703          	lw	a4,-104(s0)
20402a8e:	f9442783          	lw	a5,-108(s0)
20402a92:	0e078793          	addi	a5,a5,224
20402a96:	078a                	slli	a5,a5,0x2
20402a98:	97ba                	add	a5,a5,a4
20402a9a:	479c                	lw	a5,8(a5)
20402a9c:	f9442583          	lw	a1,-108(s0)
20402aa0:	fac42503          	lw	a0,-84(s0)
20402aa4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402aa6:	50f6                	lw	ra,124(sp)
20402aa8:	52e6                	lw	t0,120(sp)
20402aaa:	5356                	lw	t1,116(sp)
20402aac:	53c6                	lw	t2,112(sp)
20402aae:	5436                	lw	s0,108(sp)
20402ab0:	5526                	lw	a0,104(sp)
20402ab2:	5596                	lw	a1,100(sp)
20402ab4:	5606                	lw	a2,96(sp)
20402ab6:	46f6                	lw	a3,92(sp)
20402ab8:	4766                	lw	a4,88(sp)
20402aba:	47d6                	lw	a5,84(sp)
20402abc:	4846                	lw	a6,80(sp)
20402abe:	48b6                	lw	a7,76(sp)
20402ac0:	4e26                	lw	t3,72(sp)
20402ac2:	4e96                	lw	t4,68(sp)
20402ac4:	4f06                	lw	t5,64(sp)
20402ac6:	5ff2                	lw	t6,60(sp)
20402ac8:	6109                	addi	sp,sp,128
20402aca:	30200073          	mret
	...

20402af4 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402af4:	711d                	addi	sp,sp,-96
20402af6:	ce86                	sw	ra,92(sp)
20402af8:	cc96                	sw	t0,88(sp)
20402afa:	ca9a                	sw	t1,84(sp)
20402afc:	c89e                	sw	t2,80(sp)
20402afe:	c6a2                	sw	s0,76(sp)
20402b00:	c4aa                	sw	a0,72(sp)
20402b02:	c2ae                	sw	a1,68(sp)
20402b04:	c0b2                	sw	a2,64(sp)
20402b06:	de36                	sw	a3,60(sp)
20402b08:	dc3a                	sw	a4,56(sp)
20402b0a:	da3e                	sw	a5,52(sp)
20402b0c:	d842                	sw	a6,48(sp)
20402b0e:	d646                	sw	a7,44(sp)
20402b10:	d472                	sw	t3,40(sp)
20402b12:	d276                	sw	t4,36(sp)
20402b14:	d07a                	sw	t5,32(sp)
20402b16:	ce7e                	sw	t6,28(sp)
20402b18:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b1a:	a77ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402b1e:	872a                	mv	a4,a0
20402b20:	070a                	slli	a4,a4,0x2
20402b22:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b26:	97ba                	add	a5,a5,a4
20402b28:	439c                	lw	a5,0(a5)
20402b2a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402b2e:	fac42783          	lw	a5,-84(s0)
20402b32:	c78d                	beqz	a5,20402b5c <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b34:	fac42503          	lw	a0,-84(s0)
20402b38:	a03ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402b3c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402b40:	fa842783          	lw	a5,-88(s0)
20402b44:	2187a783          	lw	a5,536(a5)
20402b48:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402b4c:	fa842783          	lw	a5,-88(s0)
20402b50:	2107a783          	lw	a5,528(a5)
20402b54:	fa442583          	lw	a1,-92(s0)
20402b58:	4541                	li	a0,16
20402b5a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402b5c:	0001                	nop
20402b5e:	40f6                	lw	ra,92(sp)
20402b60:	42e6                	lw	t0,88(sp)
20402b62:	4356                	lw	t1,84(sp)
20402b64:	43c6                	lw	t2,80(sp)
20402b66:	4436                	lw	s0,76(sp)
20402b68:	4526                	lw	a0,72(sp)
20402b6a:	4596                	lw	a1,68(sp)
20402b6c:	4606                	lw	a2,64(sp)
20402b6e:	56f2                	lw	a3,60(sp)
20402b70:	5762                	lw	a4,56(sp)
20402b72:	57d2                	lw	a5,52(sp)
20402b74:	5842                	lw	a6,48(sp)
20402b76:	58b2                	lw	a7,44(sp)
20402b78:	5e22                	lw	t3,40(sp)
20402b7a:	5e92                	lw	t4,36(sp)
20402b7c:	5f02                	lw	t5,32(sp)
20402b7e:	4ff2                	lw	t6,28(sp)
20402b80:	6125                	addi	sp,sp,96
20402b82:	30200073          	mret

20402b86 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402b86:	711d                	addi	sp,sp,-96
20402b88:	ce86                	sw	ra,92(sp)
20402b8a:	cc96                	sw	t0,88(sp)
20402b8c:	ca9a                	sw	t1,84(sp)
20402b8e:	c89e                	sw	t2,80(sp)
20402b90:	c6a2                	sw	s0,76(sp)
20402b92:	c4aa                	sw	a0,72(sp)
20402b94:	c2ae                	sw	a1,68(sp)
20402b96:	c0b2                	sw	a2,64(sp)
20402b98:	de36                	sw	a3,60(sp)
20402b9a:	dc3a                	sw	a4,56(sp)
20402b9c:	da3e                	sw	a5,52(sp)
20402b9e:	d842                	sw	a6,48(sp)
20402ba0:	d646                	sw	a7,44(sp)
20402ba2:	d472                	sw	t3,40(sp)
20402ba4:	d276                	sw	t4,36(sp)
20402ba6:	d07a                	sw	t5,32(sp)
20402ba8:	ce7e                	sw	t6,28(sp)
20402baa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402bac:	9e5ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402bb0:	872a                	mv	a4,a0
20402bb2:	070a                	slli	a4,a4,0x2
20402bb4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402bb8:	97ba                	add	a5,a5,a4
20402bba:	439c                	lw	a5,0(a5)
20402bbc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402bc0:	fac42783          	lw	a5,-84(s0)
20402bc4:	c78d                	beqz	a5,20402bee <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402bc6:	fac42503          	lw	a0,-84(s0)
20402bca:	971ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402bce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402bd2:	fa842783          	lw	a5,-88(s0)
20402bd6:	2307a783          	lw	a5,560(a5)
20402bda:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402bde:	fa842783          	lw	a5,-88(s0)
20402be2:	2287a783          	lw	a5,552(a5)
20402be6:	fa442583          	lw	a1,-92(s0)
20402bea:	4545                	li	a0,17
20402bec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402bee:	0001                	nop
20402bf0:	40f6                	lw	ra,92(sp)
20402bf2:	42e6                	lw	t0,88(sp)
20402bf4:	4356                	lw	t1,84(sp)
20402bf6:	43c6                	lw	t2,80(sp)
20402bf8:	4436                	lw	s0,76(sp)
20402bfa:	4526                	lw	a0,72(sp)
20402bfc:	4596                	lw	a1,68(sp)
20402bfe:	4606                	lw	a2,64(sp)
20402c00:	56f2                	lw	a3,60(sp)
20402c02:	5762                	lw	a4,56(sp)
20402c04:	57d2                	lw	a5,52(sp)
20402c06:	5842                	lw	a6,48(sp)
20402c08:	58b2                	lw	a7,44(sp)
20402c0a:	5e22                	lw	t3,40(sp)
20402c0c:	5e92                	lw	t4,36(sp)
20402c0e:	5f02                	lw	t5,32(sp)
20402c10:	4ff2                	lw	t6,28(sp)
20402c12:	6125                	addi	sp,sp,96
20402c14:	30200073          	mret

20402c18 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402c18:	711d                	addi	sp,sp,-96
20402c1a:	ce86                	sw	ra,92(sp)
20402c1c:	cc96                	sw	t0,88(sp)
20402c1e:	ca9a                	sw	t1,84(sp)
20402c20:	c89e                	sw	t2,80(sp)
20402c22:	c6a2                	sw	s0,76(sp)
20402c24:	c4aa                	sw	a0,72(sp)
20402c26:	c2ae                	sw	a1,68(sp)
20402c28:	c0b2                	sw	a2,64(sp)
20402c2a:	de36                	sw	a3,60(sp)
20402c2c:	dc3a                	sw	a4,56(sp)
20402c2e:	da3e                	sw	a5,52(sp)
20402c30:	d842                	sw	a6,48(sp)
20402c32:	d646                	sw	a7,44(sp)
20402c34:	d472                	sw	t3,40(sp)
20402c36:	d276                	sw	t4,36(sp)
20402c38:	d07a                	sw	t5,32(sp)
20402c3a:	ce7e                	sw	t6,28(sp)
20402c3c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c3e:	953ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402c42:	872a                	mv	a4,a0
20402c44:	070a                	slli	a4,a4,0x2
20402c46:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c4a:	97ba                	add	a5,a5,a4
20402c4c:	439c                	lw	a5,0(a5)
20402c4e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402c52:	fac42783          	lw	a5,-84(s0)
20402c56:	c78d                	beqz	a5,20402c80 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c58:	fac42503          	lw	a0,-84(s0)
20402c5c:	8dfff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402c60:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402c64:	fa842783          	lw	a5,-88(s0)
20402c68:	2487a783          	lw	a5,584(a5)
20402c6c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402c70:	fa842783          	lw	a5,-88(s0)
20402c74:	2407a783          	lw	a5,576(a5)
20402c78:	fa442583          	lw	a1,-92(s0)
20402c7c:	4549                	li	a0,18
20402c7e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402c80:	0001                	nop
20402c82:	40f6                	lw	ra,92(sp)
20402c84:	42e6                	lw	t0,88(sp)
20402c86:	4356                	lw	t1,84(sp)
20402c88:	43c6                	lw	t2,80(sp)
20402c8a:	4436                	lw	s0,76(sp)
20402c8c:	4526                	lw	a0,72(sp)
20402c8e:	4596                	lw	a1,68(sp)
20402c90:	4606                	lw	a2,64(sp)
20402c92:	56f2                	lw	a3,60(sp)
20402c94:	5762                	lw	a4,56(sp)
20402c96:	57d2                	lw	a5,52(sp)
20402c98:	5842                	lw	a6,48(sp)
20402c9a:	58b2                	lw	a7,44(sp)
20402c9c:	5e22                	lw	t3,40(sp)
20402c9e:	5e92                	lw	t4,36(sp)
20402ca0:	5f02                	lw	t5,32(sp)
20402ca2:	4ff2                	lw	t6,28(sp)
20402ca4:	6125                	addi	sp,sp,96
20402ca6:	30200073          	mret

20402caa <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402caa:	711d                	addi	sp,sp,-96
20402cac:	ce86                	sw	ra,92(sp)
20402cae:	cc96                	sw	t0,88(sp)
20402cb0:	ca9a                	sw	t1,84(sp)
20402cb2:	c89e                	sw	t2,80(sp)
20402cb4:	c6a2                	sw	s0,76(sp)
20402cb6:	c4aa                	sw	a0,72(sp)
20402cb8:	c2ae                	sw	a1,68(sp)
20402cba:	c0b2                	sw	a2,64(sp)
20402cbc:	de36                	sw	a3,60(sp)
20402cbe:	dc3a                	sw	a4,56(sp)
20402cc0:	da3e                	sw	a5,52(sp)
20402cc2:	d842                	sw	a6,48(sp)
20402cc4:	d646                	sw	a7,44(sp)
20402cc6:	d472                	sw	t3,40(sp)
20402cc8:	d276                	sw	t4,36(sp)
20402cca:	d07a                	sw	t5,32(sp)
20402ccc:	ce7e                	sw	t6,28(sp)
20402cce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402cd0:	8c1ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402cd4:	872a                	mv	a4,a0
20402cd6:	070a                	slli	a4,a4,0x2
20402cd8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402cdc:	97ba                	add	a5,a5,a4
20402cde:	439c                	lw	a5,0(a5)
20402ce0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402ce4:	fac42783          	lw	a5,-84(s0)
20402ce8:	c78d                	beqz	a5,20402d12 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cea:	fac42503          	lw	a0,-84(s0)
20402cee:	84dff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402cf2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402cf6:	fa842783          	lw	a5,-88(s0)
20402cfa:	2607a783          	lw	a5,608(a5)
20402cfe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402d02:	fa842783          	lw	a5,-88(s0)
20402d06:	2587a783          	lw	a5,600(a5)
20402d0a:	fa442583          	lw	a1,-92(s0)
20402d0e:	454d                	li	a0,19
20402d10:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402d12:	0001                	nop
20402d14:	40f6                	lw	ra,92(sp)
20402d16:	42e6                	lw	t0,88(sp)
20402d18:	4356                	lw	t1,84(sp)
20402d1a:	43c6                	lw	t2,80(sp)
20402d1c:	4436                	lw	s0,76(sp)
20402d1e:	4526                	lw	a0,72(sp)
20402d20:	4596                	lw	a1,68(sp)
20402d22:	4606                	lw	a2,64(sp)
20402d24:	56f2                	lw	a3,60(sp)
20402d26:	5762                	lw	a4,56(sp)
20402d28:	57d2                	lw	a5,52(sp)
20402d2a:	5842                	lw	a6,48(sp)
20402d2c:	58b2                	lw	a7,44(sp)
20402d2e:	5e22                	lw	t3,40(sp)
20402d30:	5e92                	lw	t4,36(sp)
20402d32:	5f02                	lw	t5,32(sp)
20402d34:	4ff2                	lw	t6,28(sp)
20402d36:	6125                	addi	sp,sp,96
20402d38:	30200073          	mret

20402d3c <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402d3c:	711d                	addi	sp,sp,-96
20402d3e:	ce86                	sw	ra,92(sp)
20402d40:	cc96                	sw	t0,88(sp)
20402d42:	ca9a                	sw	t1,84(sp)
20402d44:	c89e                	sw	t2,80(sp)
20402d46:	c6a2                	sw	s0,76(sp)
20402d48:	c4aa                	sw	a0,72(sp)
20402d4a:	c2ae                	sw	a1,68(sp)
20402d4c:	c0b2                	sw	a2,64(sp)
20402d4e:	de36                	sw	a3,60(sp)
20402d50:	dc3a                	sw	a4,56(sp)
20402d52:	da3e                	sw	a5,52(sp)
20402d54:	d842                	sw	a6,48(sp)
20402d56:	d646                	sw	a7,44(sp)
20402d58:	d472                	sw	t3,40(sp)
20402d5a:	d276                	sw	t4,36(sp)
20402d5c:	d07a                	sw	t5,32(sp)
20402d5e:	ce7e                	sw	t6,28(sp)
20402d60:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d62:	82fff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402d66:	872a                	mv	a4,a0
20402d68:	070a                	slli	a4,a4,0x2
20402d6a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d6e:	97ba                	add	a5,a5,a4
20402d70:	439c                	lw	a5,0(a5)
20402d72:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402d76:	fac42783          	lw	a5,-84(s0)
20402d7a:	c78d                	beqz	a5,20402da4 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d7c:	fac42503          	lw	a0,-84(s0)
20402d80:	fbaff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402d84:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402d88:	fa842783          	lw	a5,-88(s0)
20402d8c:	2787a783          	lw	a5,632(a5)
20402d90:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402d94:	fa842783          	lw	a5,-88(s0)
20402d98:	2707a783          	lw	a5,624(a5)
20402d9c:	fa442583          	lw	a1,-92(s0)
20402da0:	4551                	li	a0,20
20402da2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402da4:	0001                	nop
20402da6:	40f6                	lw	ra,92(sp)
20402da8:	42e6                	lw	t0,88(sp)
20402daa:	4356                	lw	t1,84(sp)
20402dac:	43c6                	lw	t2,80(sp)
20402dae:	4436                	lw	s0,76(sp)
20402db0:	4526                	lw	a0,72(sp)
20402db2:	4596                	lw	a1,68(sp)
20402db4:	4606                	lw	a2,64(sp)
20402db6:	56f2                	lw	a3,60(sp)
20402db8:	5762                	lw	a4,56(sp)
20402dba:	57d2                	lw	a5,52(sp)
20402dbc:	5842                	lw	a6,48(sp)
20402dbe:	58b2                	lw	a7,44(sp)
20402dc0:	5e22                	lw	t3,40(sp)
20402dc2:	5e92                	lw	t4,36(sp)
20402dc4:	5f02                	lw	t5,32(sp)
20402dc6:	4ff2                	lw	t6,28(sp)
20402dc8:	6125                	addi	sp,sp,96
20402dca:	30200073          	mret

20402dce <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402dce:	711d                	addi	sp,sp,-96
20402dd0:	ce86                	sw	ra,92(sp)
20402dd2:	cc96                	sw	t0,88(sp)
20402dd4:	ca9a                	sw	t1,84(sp)
20402dd6:	c89e                	sw	t2,80(sp)
20402dd8:	c6a2                	sw	s0,76(sp)
20402dda:	c4aa                	sw	a0,72(sp)
20402ddc:	c2ae                	sw	a1,68(sp)
20402dde:	c0b2                	sw	a2,64(sp)
20402de0:	de36                	sw	a3,60(sp)
20402de2:	dc3a                	sw	a4,56(sp)
20402de4:	da3e                	sw	a5,52(sp)
20402de6:	d842                	sw	a6,48(sp)
20402de8:	d646                	sw	a7,44(sp)
20402dea:	d472                	sw	t3,40(sp)
20402dec:	d276                	sw	t4,36(sp)
20402dee:	d07a                	sw	t5,32(sp)
20402df0:	ce7e                	sw	t6,28(sp)
20402df2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402df4:	f9cff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402df8:	872a                	mv	a4,a0
20402dfa:	070a                	slli	a4,a4,0x2
20402dfc:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e00:	97ba                	add	a5,a5,a4
20402e02:	439c                	lw	a5,0(a5)
20402e04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402e08:	fac42783          	lw	a5,-84(s0)
20402e0c:	c78d                	beqz	a5,20402e36 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e0e:	fac42503          	lw	a0,-84(s0)
20402e12:	f28ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402e16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402e1a:	fa842783          	lw	a5,-88(s0)
20402e1e:	2907a783          	lw	a5,656(a5)
20402e22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402e26:	fa842783          	lw	a5,-88(s0)
20402e2a:	2887a783          	lw	a5,648(a5)
20402e2e:	fa442583          	lw	a1,-92(s0)
20402e32:	4555                	li	a0,21
20402e34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402e36:	0001                	nop
20402e38:	40f6                	lw	ra,92(sp)
20402e3a:	42e6                	lw	t0,88(sp)
20402e3c:	4356                	lw	t1,84(sp)
20402e3e:	43c6                	lw	t2,80(sp)
20402e40:	4436                	lw	s0,76(sp)
20402e42:	4526                	lw	a0,72(sp)
20402e44:	4596                	lw	a1,68(sp)
20402e46:	4606                	lw	a2,64(sp)
20402e48:	56f2                	lw	a3,60(sp)
20402e4a:	5762                	lw	a4,56(sp)
20402e4c:	57d2                	lw	a5,52(sp)
20402e4e:	5842                	lw	a6,48(sp)
20402e50:	58b2                	lw	a7,44(sp)
20402e52:	5e22                	lw	t3,40(sp)
20402e54:	5e92                	lw	t4,36(sp)
20402e56:	5f02                	lw	t5,32(sp)
20402e58:	4ff2                	lw	t6,28(sp)
20402e5a:	6125                	addi	sp,sp,96
20402e5c:	30200073          	mret

20402e60 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402e60:	711d                	addi	sp,sp,-96
20402e62:	ce86                	sw	ra,92(sp)
20402e64:	cc96                	sw	t0,88(sp)
20402e66:	ca9a                	sw	t1,84(sp)
20402e68:	c89e                	sw	t2,80(sp)
20402e6a:	c6a2                	sw	s0,76(sp)
20402e6c:	c4aa                	sw	a0,72(sp)
20402e6e:	c2ae                	sw	a1,68(sp)
20402e70:	c0b2                	sw	a2,64(sp)
20402e72:	de36                	sw	a3,60(sp)
20402e74:	dc3a                	sw	a4,56(sp)
20402e76:	da3e                	sw	a5,52(sp)
20402e78:	d842                	sw	a6,48(sp)
20402e7a:	d646                	sw	a7,44(sp)
20402e7c:	d472                	sw	t3,40(sp)
20402e7e:	d276                	sw	t4,36(sp)
20402e80:	d07a                	sw	t5,32(sp)
20402e82:	ce7e                	sw	t6,28(sp)
20402e84:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e86:	f0aff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402e8a:	872a                	mv	a4,a0
20402e8c:	070a                	slli	a4,a4,0x2
20402e8e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e92:	97ba                	add	a5,a5,a4
20402e94:	439c                	lw	a5,0(a5)
20402e96:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402e9a:	fac42783          	lw	a5,-84(s0)
20402e9e:	c78d                	beqz	a5,20402ec8 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ea0:	fac42503          	lw	a0,-84(s0)
20402ea4:	e96ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402ea8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402eac:	fa842783          	lw	a5,-88(s0)
20402eb0:	2a87a783          	lw	a5,680(a5)
20402eb4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402eb8:	fa842783          	lw	a5,-88(s0)
20402ebc:	2a07a783          	lw	a5,672(a5)
20402ec0:	fa442583          	lw	a1,-92(s0)
20402ec4:	4559                	li	a0,22
20402ec6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402ec8:	0001                	nop
20402eca:	40f6                	lw	ra,92(sp)
20402ecc:	42e6                	lw	t0,88(sp)
20402ece:	4356                	lw	t1,84(sp)
20402ed0:	43c6                	lw	t2,80(sp)
20402ed2:	4436                	lw	s0,76(sp)
20402ed4:	4526                	lw	a0,72(sp)
20402ed6:	4596                	lw	a1,68(sp)
20402ed8:	4606                	lw	a2,64(sp)
20402eda:	56f2                	lw	a3,60(sp)
20402edc:	5762                	lw	a4,56(sp)
20402ede:	57d2                	lw	a5,52(sp)
20402ee0:	5842                	lw	a6,48(sp)
20402ee2:	58b2                	lw	a7,44(sp)
20402ee4:	5e22                	lw	t3,40(sp)
20402ee6:	5e92                	lw	t4,36(sp)
20402ee8:	5f02                	lw	t5,32(sp)
20402eea:	4ff2                	lw	t6,28(sp)
20402eec:	6125                	addi	sp,sp,96
20402eee:	30200073          	mret

20402ef2 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402ef2:	711d                	addi	sp,sp,-96
20402ef4:	ce86                	sw	ra,92(sp)
20402ef6:	cc96                	sw	t0,88(sp)
20402ef8:	ca9a                	sw	t1,84(sp)
20402efa:	c89e                	sw	t2,80(sp)
20402efc:	c6a2                	sw	s0,76(sp)
20402efe:	c4aa                	sw	a0,72(sp)
20402f00:	c2ae                	sw	a1,68(sp)
20402f02:	c0b2                	sw	a2,64(sp)
20402f04:	de36                	sw	a3,60(sp)
20402f06:	dc3a                	sw	a4,56(sp)
20402f08:	da3e                	sw	a5,52(sp)
20402f0a:	d842                	sw	a6,48(sp)
20402f0c:	d646                	sw	a7,44(sp)
20402f0e:	d472                	sw	t3,40(sp)
20402f10:	d276                	sw	t4,36(sp)
20402f12:	d07a                	sw	t5,32(sp)
20402f14:	ce7e                	sw	t6,28(sp)
20402f16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f18:	e78ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402f1c:	872a                	mv	a4,a0
20402f1e:	070a                	slli	a4,a4,0x2
20402f20:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f24:	97ba                	add	a5,a5,a4
20402f26:	439c                	lw	a5,0(a5)
20402f28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402f2c:	fac42783          	lw	a5,-84(s0)
20402f30:	c78d                	beqz	a5,20402f5a <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f32:	fac42503          	lw	a0,-84(s0)
20402f36:	e04ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402f3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402f3e:	fa842783          	lw	a5,-88(s0)
20402f42:	2c07a783          	lw	a5,704(a5)
20402f46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402f4a:	fa842783          	lw	a5,-88(s0)
20402f4e:	2b87a783          	lw	a5,696(a5)
20402f52:	fa442583          	lw	a1,-92(s0)
20402f56:	455d                	li	a0,23
20402f58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402f5a:	0001                	nop
20402f5c:	40f6                	lw	ra,92(sp)
20402f5e:	42e6                	lw	t0,88(sp)
20402f60:	4356                	lw	t1,84(sp)
20402f62:	43c6                	lw	t2,80(sp)
20402f64:	4436                	lw	s0,76(sp)
20402f66:	4526                	lw	a0,72(sp)
20402f68:	4596                	lw	a1,68(sp)
20402f6a:	4606                	lw	a2,64(sp)
20402f6c:	56f2                	lw	a3,60(sp)
20402f6e:	5762                	lw	a4,56(sp)
20402f70:	57d2                	lw	a5,52(sp)
20402f72:	5842                	lw	a6,48(sp)
20402f74:	58b2                	lw	a7,44(sp)
20402f76:	5e22                	lw	t3,40(sp)
20402f78:	5e92                	lw	t4,36(sp)
20402f7a:	5f02                	lw	t5,32(sp)
20402f7c:	4ff2                	lw	t6,28(sp)
20402f7e:	6125                	addi	sp,sp,96
20402f80:	30200073          	mret

20402f84 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402f84:	711d                	addi	sp,sp,-96
20402f86:	ce86                	sw	ra,92(sp)
20402f88:	cc96                	sw	t0,88(sp)
20402f8a:	ca9a                	sw	t1,84(sp)
20402f8c:	c89e                	sw	t2,80(sp)
20402f8e:	c6a2                	sw	s0,76(sp)
20402f90:	c4aa                	sw	a0,72(sp)
20402f92:	c2ae                	sw	a1,68(sp)
20402f94:	c0b2                	sw	a2,64(sp)
20402f96:	de36                	sw	a3,60(sp)
20402f98:	dc3a                	sw	a4,56(sp)
20402f9a:	da3e                	sw	a5,52(sp)
20402f9c:	d842                	sw	a6,48(sp)
20402f9e:	d646                	sw	a7,44(sp)
20402fa0:	d472                	sw	t3,40(sp)
20402fa2:	d276                	sw	t4,36(sp)
20402fa4:	d07a                	sw	t5,32(sp)
20402fa6:	ce7e                	sw	t6,28(sp)
20402fa8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402faa:	de6ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20402fae:	872a                	mv	a4,a0
20402fb0:	070a                	slli	a4,a4,0x2
20402fb2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402fb6:	97ba                	add	a5,a5,a4
20402fb8:	439c                	lw	a5,0(a5)
20402fba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402fbe:	fac42783          	lw	a5,-84(s0)
20402fc2:	c78d                	beqz	a5,20402fec <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fc4:	fac42503          	lw	a0,-84(s0)
20402fc8:	d72ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20402fcc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402fd0:	fa842783          	lw	a5,-88(s0)
20402fd4:	2d87a783          	lw	a5,728(a5)
20402fd8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402fdc:	fa842783          	lw	a5,-88(s0)
20402fe0:	2d07a783          	lw	a5,720(a5)
20402fe4:	fa442583          	lw	a1,-92(s0)
20402fe8:	4561                	li	a0,24
20402fea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402fec:	0001                	nop
20402fee:	40f6                	lw	ra,92(sp)
20402ff0:	42e6                	lw	t0,88(sp)
20402ff2:	4356                	lw	t1,84(sp)
20402ff4:	43c6                	lw	t2,80(sp)
20402ff6:	4436                	lw	s0,76(sp)
20402ff8:	4526                	lw	a0,72(sp)
20402ffa:	4596                	lw	a1,68(sp)
20402ffc:	4606                	lw	a2,64(sp)
20402ffe:	56f2                	lw	a3,60(sp)
20403000:	5762                	lw	a4,56(sp)
20403002:	57d2                	lw	a5,52(sp)
20403004:	5842                	lw	a6,48(sp)
20403006:	58b2                	lw	a7,44(sp)
20403008:	5e22                	lw	t3,40(sp)
2040300a:	5e92                	lw	t4,36(sp)
2040300c:	5f02                	lw	t5,32(sp)
2040300e:	4ff2                	lw	t6,28(sp)
20403010:	6125                	addi	sp,sp,96
20403012:	30200073          	mret

20403016 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403016:	711d                	addi	sp,sp,-96
20403018:	ce86                	sw	ra,92(sp)
2040301a:	cc96                	sw	t0,88(sp)
2040301c:	ca9a                	sw	t1,84(sp)
2040301e:	c89e                	sw	t2,80(sp)
20403020:	c6a2                	sw	s0,76(sp)
20403022:	c4aa                	sw	a0,72(sp)
20403024:	c2ae                	sw	a1,68(sp)
20403026:	c0b2                	sw	a2,64(sp)
20403028:	de36                	sw	a3,60(sp)
2040302a:	dc3a                	sw	a4,56(sp)
2040302c:	da3e                	sw	a5,52(sp)
2040302e:	d842                	sw	a6,48(sp)
20403030:	d646                	sw	a7,44(sp)
20403032:	d472                	sw	t3,40(sp)
20403034:	d276                	sw	t4,36(sp)
20403036:	d07a                	sw	t5,32(sp)
20403038:	ce7e                	sw	t6,28(sp)
2040303a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040303c:	d54ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20403040:	872a                	mv	a4,a0
20403042:	070a                	slli	a4,a4,0x2
20403044:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403048:	97ba                	add	a5,a5,a4
2040304a:	439c                	lw	a5,0(a5)
2040304c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403050:	fac42783          	lw	a5,-84(s0)
20403054:	c78d                	beqz	a5,2040307e <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403056:	fac42503          	lw	a0,-84(s0)
2040305a:	ce0ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
2040305e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403062:	fa842783          	lw	a5,-88(s0)
20403066:	2f07a783          	lw	a5,752(a5)
2040306a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
2040306e:	fa842783          	lw	a5,-88(s0)
20403072:	2e87a783          	lw	a5,744(a5)
20403076:	fa442583          	lw	a1,-92(s0)
2040307a:	4565                	li	a0,25
2040307c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
2040307e:	0001                	nop
20403080:	40f6                	lw	ra,92(sp)
20403082:	42e6                	lw	t0,88(sp)
20403084:	4356                	lw	t1,84(sp)
20403086:	43c6                	lw	t2,80(sp)
20403088:	4436                	lw	s0,76(sp)
2040308a:	4526                	lw	a0,72(sp)
2040308c:	4596                	lw	a1,68(sp)
2040308e:	4606                	lw	a2,64(sp)
20403090:	56f2                	lw	a3,60(sp)
20403092:	5762                	lw	a4,56(sp)
20403094:	57d2                	lw	a5,52(sp)
20403096:	5842                	lw	a6,48(sp)
20403098:	58b2                	lw	a7,44(sp)
2040309a:	5e22                	lw	t3,40(sp)
2040309c:	5e92                	lw	t4,36(sp)
2040309e:	5f02                	lw	t5,32(sp)
204030a0:	4ff2                	lw	t6,28(sp)
204030a2:	6125                	addi	sp,sp,96
204030a4:	30200073          	mret

204030a8 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204030a8:	711d                	addi	sp,sp,-96
204030aa:	ce86                	sw	ra,92(sp)
204030ac:	cc96                	sw	t0,88(sp)
204030ae:	ca9a                	sw	t1,84(sp)
204030b0:	c89e                	sw	t2,80(sp)
204030b2:	c6a2                	sw	s0,76(sp)
204030b4:	c4aa                	sw	a0,72(sp)
204030b6:	c2ae                	sw	a1,68(sp)
204030b8:	c0b2                	sw	a2,64(sp)
204030ba:	de36                	sw	a3,60(sp)
204030bc:	dc3a                	sw	a4,56(sp)
204030be:	da3e                	sw	a5,52(sp)
204030c0:	d842                	sw	a6,48(sp)
204030c2:	d646                	sw	a7,44(sp)
204030c4:	d472                	sw	t3,40(sp)
204030c6:	d276                	sw	t4,36(sp)
204030c8:	d07a                	sw	t5,32(sp)
204030ca:	ce7e                	sw	t6,28(sp)
204030cc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030ce:	cc2ff0ef          	jal	ra,20402590 <__metal_myhart_id>
204030d2:	872a                	mv	a4,a0
204030d4:	070a                	slli	a4,a4,0x2
204030d6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204030da:	97ba                	add	a5,a5,a4
204030dc:	439c                	lw	a5,0(a5)
204030de:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204030e2:	fac42783          	lw	a5,-84(s0)
204030e6:	c78d                	beqz	a5,20403110 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030e8:	fac42503          	lw	a0,-84(s0)
204030ec:	c4eff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
204030f0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204030f4:	fa842783          	lw	a5,-88(s0)
204030f8:	3087a783          	lw	a5,776(a5)
204030fc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403100:	fa842783          	lw	a5,-88(s0)
20403104:	3007a783          	lw	a5,768(a5)
20403108:	fa442583          	lw	a1,-92(s0)
2040310c:	4569                	li	a0,26
2040310e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403110:	0001                	nop
20403112:	40f6                	lw	ra,92(sp)
20403114:	42e6                	lw	t0,88(sp)
20403116:	4356                	lw	t1,84(sp)
20403118:	43c6                	lw	t2,80(sp)
2040311a:	4436                	lw	s0,76(sp)
2040311c:	4526                	lw	a0,72(sp)
2040311e:	4596                	lw	a1,68(sp)
20403120:	4606                	lw	a2,64(sp)
20403122:	56f2                	lw	a3,60(sp)
20403124:	5762                	lw	a4,56(sp)
20403126:	57d2                	lw	a5,52(sp)
20403128:	5842                	lw	a6,48(sp)
2040312a:	58b2                	lw	a7,44(sp)
2040312c:	5e22                	lw	t3,40(sp)
2040312e:	5e92                	lw	t4,36(sp)
20403130:	5f02                	lw	t5,32(sp)
20403132:	4ff2                	lw	t6,28(sp)
20403134:	6125                	addi	sp,sp,96
20403136:	30200073          	mret

2040313a <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040313a:	711d                	addi	sp,sp,-96
2040313c:	ce86                	sw	ra,92(sp)
2040313e:	cc96                	sw	t0,88(sp)
20403140:	ca9a                	sw	t1,84(sp)
20403142:	c89e                	sw	t2,80(sp)
20403144:	c6a2                	sw	s0,76(sp)
20403146:	c4aa                	sw	a0,72(sp)
20403148:	c2ae                	sw	a1,68(sp)
2040314a:	c0b2                	sw	a2,64(sp)
2040314c:	de36                	sw	a3,60(sp)
2040314e:	dc3a                	sw	a4,56(sp)
20403150:	da3e                	sw	a5,52(sp)
20403152:	d842                	sw	a6,48(sp)
20403154:	d646                	sw	a7,44(sp)
20403156:	d472                	sw	t3,40(sp)
20403158:	d276                	sw	t4,36(sp)
2040315a:	d07a                	sw	t5,32(sp)
2040315c:	ce7e                	sw	t6,28(sp)
2040315e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403160:	c30ff0ef          	jal	ra,20402590 <__metal_myhart_id>
20403164:	872a                	mv	a4,a0
20403166:	070a                	slli	a4,a4,0x2
20403168:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040316c:	97ba                	add	a5,a5,a4
2040316e:	439c                	lw	a5,0(a5)
20403170:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403174:	fac42783          	lw	a5,-84(s0)
20403178:	c78d                	beqz	a5,204031a2 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040317a:	fac42503          	lw	a0,-84(s0)
2040317e:	bbcff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403182:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403186:	fa842783          	lw	a5,-88(s0)
2040318a:	3207a783          	lw	a5,800(a5)
2040318e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403192:	fa842783          	lw	a5,-88(s0)
20403196:	3187a783          	lw	a5,792(a5)
2040319a:	fa442583          	lw	a1,-92(s0)
2040319e:	456d                	li	a0,27
204031a0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204031a2:	0001                	nop
204031a4:	40f6                	lw	ra,92(sp)
204031a6:	42e6                	lw	t0,88(sp)
204031a8:	4356                	lw	t1,84(sp)
204031aa:	43c6                	lw	t2,80(sp)
204031ac:	4436                	lw	s0,76(sp)
204031ae:	4526                	lw	a0,72(sp)
204031b0:	4596                	lw	a1,68(sp)
204031b2:	4606                	lw	a2,64(sp)
204031b4:	56f2                	lw	a3,60(sp)
204031b6:	5762                	lw	a4,56(sp)
204031b8:	57d2                	lw	a5,52(sp)
204031ba:	5842                	lw	a6,48(sp)
204031bc:	58b2                	lw	a7,44(sp)
204031be:	5e22                	lw	t3,40(sp)
204031c0:	5e92                	lw	t4,36(sp)
204031c2:	5f02                	lw	t5,32(sp)
204031c4:	4ff2                	lw	t6,28(sp)
204031c6:	6125                	addi	sp,sp,96
204031c8:	30200073          	mret

204031cc <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204031cc:	711d                	addi	sp,sp,-96
204031ce:	ce86                	sw	ra,92(sp)
204031d0:	cc96                	sw	t0,88(sp)
204031d2:	ca9a                	sw	t1,84(sp)
204031d4:	c89e                	sw	t2,80(sp)
204031d6:	c6a2                	sw	s0,76(sp)
204031d8:	c4aa                	sw	a0,72(sp)
204031da:	c2ae                	sw	a1,68(sp)
204031dc:	c0b2                	sw	a2,64(sp)
204031de:	de36                	sw	a3,60(sp)
204031e0:	dc3a                	sw	a4,56(sp)
204031e2:	da3e                	sw	a5,52(sp)
204031e4:	d842                	sw	a6,48(sp)
204031e6:	d646                	sw	a7,44(sp)
204031e8:	d472                	sw	t3,40(sp)
204031ea:	d276                	sw	t4,36(sp)
204031ec:	d07a                	sw	t5,32(sp)
204031ee:	ce7e                	sw	t6,28(sp)
204031f0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031f2:	b9eff0ef          	jal	ra,20402590 <__metal_myhart_id>
204031f6:	872a                	mv	a4,a0
204031f8:	070a                	slli	a4,a4,0x2
204031fa:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204031fe:	97ba                	add	a5,a5,a4
20403200:	439c                	lw	a5,0(a5)
20403202:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403206:	fac42783          	lw	a5,-84(s0)
2040320a:	c78d                	beqz	a5,20403234 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040320c:	fac42503          	lw	a0,-84(s0)
20403210:	b2aff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403214:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403218:	fa842783          	lw	a5,-88(s0)
2040321c:	3387a783          	lw	a5,824(a5)
20403220:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403224:	fa842783          	lw	a5,-88(s0)
20403228:	3307a783          	lw	a5,816(a5)
2040322c:	fa442583          	lw	a1,-92(s0)
20403230:	4571                	li	a0,28
20403232:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403234:	0001                	nop
20403236:	40f6                	lw	ra,92(sp)
20403238:	42e6                	lw	t0,88(sp)
2040323a:	4356                	lw	t1,84(sp)
2040323c:	43c6                	lw	t2,80(sp)
2040323e:	4436                	lw	s0,76(sp)
20403240:	4526                	lw	a0,72(sp)
20403242:	4596                	lw	a1,68(sp)
20403244:	4606                	lw	a2,64(sp)
20403246:	56f2                	lw	a3,60(sp)
20403248:	5762                	lw	a4,56(sp)
2040324a:	57d2                	lw	a5,52(sp)
2040324c:	5842                	lw	a6,48(sp)
2040324e:	58b2                	lw	a7,44(sp)
20403250:	5e22                	lw	t3,40(sp)
20403252:	5e92                	lw	t4,36(sp)
20403254:	5f02                	lw	t5,32(sp)
20403256:	4ff2                	lw	t6,28(sp)
20403258:	6125                	addi	sp,sp,96
2040325a:	30200073          	mret

2040325e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
2040325e:	711d                	addi	sp,sp,-96
20403260:	ce86                	sw	ra,92(sp)
20403262:	cc96                	sw	t0,88(sp)
20403264:	ca9a                	sw	t1,84(sp)
20403266:	c89e                	sw	t2,80(sp)
20403268:	c6a2                	sw	s0,76(sp)
2040326a:	c4aa                	sw	a0,72(sp)
2040326c:	c2ae                	sw	a1,68(sp)
2040326e:	c0b2                	sw	a2,64(sp)
20403270:	de36                	sw	a3,60(sp)
20403272:	dc3a                	sw	a4,56(sp)
20403274:	da3e                	sw	a5,52(sp)
20403276:	d842                	sw	a6,48(sp)
20403278:	d646                	sw	a7,44(sp)
2040327a:	d472                	sw	t3,40(sp)
2040327c:	d276                	sw	t4,36(sp)
2040327e:	d07a                	sw	t5,32(sp)
20403280:	ce7e                	sw	t6,28(sp)
20403282:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403284:	b0cff0ef          	jal	ra,20402590 <__metal_myhart_id>
20403288:	872a                	mv	a4,a0
2040328a:	070a                	slli	a4,a4,0x2
2040328c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403290:	97ba                	add	a5,a5,a4
20403292:	439c                	lw	a5,0(a5)
20403294:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403298:	fac42783          	lw	a5,-84(s0)
2040329c:	c78d                	beqz	a5,204032c6 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040329e:	fac42503          	lw	a0,-84(s0)
204032a2:	a98ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
204032a6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204032aa:	fa842783          	lw	a5,-88(s0)
204032ae:	3507a783          	lw	a5,848(a5)
204032b2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204032b6:	fa842783          	lw	a5,-88(s0)
204032ba:	3487a783          	lw	a5,840(a5)
204032be:	fa442583          	lw	a1,-92(s0)
204032c2:	4575                	li	a0,29
204032c4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204032c6:	0001                	nop
204032c8:	40f6                	lw	ra,92(sp)
204032ca:	42e6                	lw	t0,88(sp)
204032cc:	4356                	lw	t1,84(sp)
204032ce:	43c6                	lw	t2,80(sp)
204032d0:	4436                	lw	s0,76(sp)
204032d2:	4526                	lw	a0,72(sp)
204032d4:	4596                	lw	a1,68(sp)
204032d6:	4606                	lw	a2,64(sp)
204032d8:	56f2                	lw	a3,60(sp)
204032da:	5762                	lw	a4,56(sp)
204032dc:	57d2                	lw	a5,52(sp)
204032de:	5842                	lw	a6,48(sp)
204032e0:	58b2                	lw	a7,44(sp)
204032e2:	5e22                	lw	t3,40(sp)
204032e4:	5e92                	lw	t4,36(sp)
204032e6:	5f02                	lw	t5,32(sp)
204032e8:	4ff2                	lw	t6,28(sp)
204032ea:	6125                	addi	sp,sp,96
204032ec:	30200073          	mret

204032f0 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204032f0:	711d                	addi	sp,sp,-96
204032f2:	ce86                	sw	ra,92(sp)
204032f4:	cc96                	sw	t0,88(sp)
204032f6:	ca9a                	sw	t1,84(sp)
204032f8:	c89e                	sw	t2,80(sp)
204032fa:	c6a2                	sw	s0,76(sp)
204032fc:	c4aa                	sw	a0,72(sp)
204032fe:	c2ae                	sw	a1,68(sp)
20403300:	c0b2                	sw	a2,64(sp)
20403302:	de36                	sw	a3,60(sp)
20403304:	dc3a                	sw	a4,56(sp)
20403306:	da3e                	sw	a5,52(sp)
20403308:	d842                	sw	a6,48(sp)
2040330a:	d646                	sw	a7,44(sp)
2040330c:	d472                	sw	t3,40(sp)
2040330e:	d276                	sw	t4,36(sp)
20403310:	d07a                	sw	t5,32(sp)
20403312:	ce7e                	sw	t6,28(sp)
20403314:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403316:	a7aff0ef          	jal	ra,20402590 <__metal_myhart_id>
2040331a:	872a                	mv	a4,a0
2040331c:	070a                	slli	a4,a4,0x2
2040331e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403322:	97ba                	add	a5,a5,a4
20403324:	439c                	lw	a5,0(a5)
20403326:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040332a:	fac42783          	lw	a5,-84(s0)
2040332e:	c78d                	beqz	a5,20403358 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403330:	fac42503          	lw	a0,-84(s0)
20403334:	a06ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403338:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040333c:	fa842783          	lw	a5,-88(s0)
20403340:	3687a783          	lw	a5,872(a5)
20403344:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403348:	fa842783          	lw	a5,-88(s0)
2040334c:	3607a783          	lw	a5,864(a5)
20403350:	fa442583          	lw	a1,-92(s0)
20403354:	4579                	li	a0,30
20403356:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403358:	0001                	nop
2040335a:	40f6                	lw	ra,92(sp)
2040335c:	42e6                	lw	t0,88(sp)
2040335e:	4356                	lw	t1,84(sp)
20403360:	43c6                	lw	t2,80(sp)
20403362:	4436                	lw	s0,76(sp)
20403364:	4526                	lw	a0,72(sp)
20403366:	4596                	lw	a1,68(sp)
20403368:	4606                	lw	a2,64(sp)
2040336a:	56f2                	lw	a3,60(sp)
2040336c:	5762                	lw	a4,56(sp)
2040336e:	57d2                	lw	a5,52(sp)
20403370:	5842                	lw	a6,48(sp)
20403372:	58b2                	lw	a7,44(sp)
20403374:	5e22                	lw	t3,40(sp)
20403376:	5e92                	lw	t4,36(sp)
20403378:	5f02                	lw	t5,32(sp)
2040337a:	4ff2                	lw	t6,28(sp)
2040337c:	6125                	addi	sp,sp,96
2040337e:	30200073          	mret

20403382 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403382:	711d                	addi	sp,sp,-96
20403384:	ce86                	sw	ra,92(sp)
20403386:	cc96                	sw	t0,88(sp)
20403388:	ca9a                	sw	t1,84(sp)
2040338a:	c89e                	sw	t2,80(sp)
2040338c:	c6a2                	sw	s0,76(sp)
2040338e:	c4aa                	sw	a0,72(sp)
20403390:	c2ae                	sw	a1,68(sp)
20403392:	c0b2                	sw	a2,64(sp)
20403394:	de36                	sw	a3,60(sp)
20403396:	dc3a                	sw	a4,56(sp)
20403398:	da3e                	sw	a5,52(sp)
2040339a:	d842                	sw	a6,48(sp)
2040339c:	d646                	sw	a7,44(sp)
2040339e:	d472                	sw	t3,40(sp)
204033a0:	d276                	sw	t4,36(sp)
204033a2:	d07a                	sw	t5,32(sp)
204033a4:	ce7e                	sw	t6,28(sp)
204033a6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033a8:	9e8ff0ef          	jal	ra,20402590 <__metal_myhart_id>
204033ac:	872a                	mv	a4,a0
204033ae:	070a                	slli	a4,a4,0x2
204033b0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204033b4:	97ba                	add	a5,a5,a4
204033b6:	439c                	lw	a5,0(a5)
204033b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204033bc:	fac42783          	lw	a5,-84(s0)
204033c0:	c78d                	beqz	a5,204033ea <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033c2:	fac42503          	lw	a0,-84(s0)
204033c6:	974ff0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
204033ca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204033ce:	fa842783          	lw	a5,-88(s0)
204033d2:	3807a783          	lw	a5,896(a5)
204033d6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204033da:	fa842783          	lw	a5,-88(s0)
204033de:	3787a783          	lw	a5,888(a5)
204033e2:	fa442583          	lw	a1,-92(s0)
204033e6:	457d                	li	a0,31
204033e8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204033ea:	0001                	nop
204033ec:	40f6                	lw	ra,92(sp)
204033ee:	42e6                	lw	t0,88(sp)
204033f0:	4356                	lw	t1,84(sp)
204033f2:	43c6                	lw	t2,80(sp)
204033f4:	4436                	lw	s0,76(sp)
204033f6:	4526                	lw	a0,72(sp)
204033f8:	4596                	lw	a1,68(sp)
204033fa:	4606                	lw	a2,64(sp)
204033fc:	56f2                	lw	a3,60(sp)
204033fe:	5762                	lw	a4,56(sp)
20403400:	57d2                	lw	a5,52(sp)
20403402:	5842                	lw	a6,48(sp)
20403404:	58b2                	lw	a7,44(sp)
20403406:	5e22                	lw	t3,40(sp)
20403408:	5e92                	lw	t4,36(sp)
2040340a:	5f02                	lw	t5,32(sp)
2040340c:	4ff2                	lw	t6,28(sp)
2040340e:	6125                	addi	sp,sp,96
20403410:	30200073          	mret

20403414 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403414:	1101                	addi	sp,sp,-32
20403416:	ce22                	sw	s0,28(sp)
20403418:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040341a:	305027f3          	csrr	a5,mtvec
2040341e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403422:	fec42783          	lw	a5,-20(s0)
20403426:	03f7f793          	andi	a5,a5,63
2040342a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040342e:	fec42703          	lw	a4,-20(s0)
20403432:	4789                	li	a5,2
20403434:	00f70d63          	beq	a4,a5,2040344e <__metal_controller_interrupt_vector_mode+0x3a>
20403438:	fec42703          	lw	a4,-20(s0)
2040343c:	478d                	li	a5,3
2040343e:	00f70a63          	beq	a4,a5,20403452 <__metal_controller_interrupt_vector_mode+0x3e>
20403442:	fec42703          	lw	a4,-20(s0)
20403446:	4785                	li	a5,1
20403448:	00f70763          	beq	a4,a5,20403456 <__metal_controller_interrupt_vector_mode+0x42>
2040344c:	a039                	j	2040345a <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040344e:	478d                	li	a5,3
20403450:	a031                	j	2040345c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403452:	4791                	li	a5,4
20403454:	a021                	j	2040345c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403456:	4785                	li	a5,1
20403458:	a011                	j	2040345c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040345a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040345c:	853e                	mv	a0,a5
2040345e:	4472                	lw	s0,28(sp)
20403460:	6105                	addi	sp,sp,32
20403462:	8082                	ret

20403464 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403464:	7179                	addi	sp,sp,-48
20403466:	d622                	sw	s0,44(sp)
20403468:	1800                	addi	s0,sp,48
2040346a:	fca42e23          	sw	a0,-36(s0)
2040346e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403472:	305027f3          	csrr	a5,mtvec
20403476:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040347a:	fec42783          	lw	a5,-20(s0)
2040347e:	fc07f793          	andi	a5,a5,-64
20403482:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403486:	fd842783          	lw	a5,-40(s0)
2040348a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040348e:	fdc42703          	lw	a4,-36(s0)
20403492:	4791                	li	a5,4
20403494:	06e7e063          	bltu	a5,a4,204034f4 <__metal_controller_interrupt_vector+0x90>
20403498:	fdc42783          	lw	a5,-36(s0)
2040349c:	00279713          	slli	a4,a5,0x2
204034a0:	204057b7          	lui	a5,0x20405
204034a4:	58c78793          	addi	a5,a5,1420 # 2040558c <__metal_driver_vtable_riscv_clint0+0x4c>
204034a8:	97ba                	add	a5,a5,a4
204034aa:	439c                	lw	a5,0(a5)
204034ac:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204034ae:	fe842783          	lw	a5,-24(s0)
204034b2:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204034b6:	fec42783          	lw	a5,-20(s0)
204034ba:	0027e793          	ori	a5,a5,2
204034be:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204034c2:	a80d                	j	204034f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204034c4:	fe842783          	lw	a5,-24(s0)
204034c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204034cc:	fec42783          	lw	a5,-20(s0)
204034d0:	0037e793          	ori	a5,a5,3
204034d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204034d8:	a831                	j	204034f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204034da:	fe842783          	lw	a5,-24(s0)
204034de:	0017e793          	ori	a5,a5,1
204034e2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204034e6:	a039                	j	204034f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204034e8:	fe842783          	lw	a5,-24(s0)
204034ec:	9bf1                	andi	a5,a5,-4
204034ee:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204034f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204034f4:	0001                	nop
204034f6:	5432                	lw	s0,44(sp)
204034f8:	6145                	addi	sp,sp,48
204034fa:	8082                	ret

204034fc <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204034fc:	1101                	addi	sp,sp,-32
204034fe:	ce22                	sw	s0,28(sp)
20403500:	1000                	addi	s0,sp,32
20403502:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403506:	fec42783          	lw	a5,-20(s0)
2040350a:	17f5                	addi	a5,a5,-3
2040350c:	4771                	li	a4,28
2040350e:	00f76d63          	bltu	a4,a5,20403528 <__metal_valid_interrupt_id+0x2c>
20403512:	00279713          	slli	a4,a5,0x2
20403516:	204057b7          	lui	a5,0x20405
2040351a:	5a078793          	addi	a5,a5,1440 # 204055a0 <__metal_driver_vtable_riscv_clint0+0x60>
2040351e:	97ba                	add	a5,a5,a4
20403520:	439c                	lw	a5,0(a5)
20403522:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403524:	4785                	li	a5,1
20403526:	a019                	j	2040352c <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403528:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040352a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040352c:	853e                	mv	a0,a5
2040352e:	4472                	lw	s0,28(sp)
20403530:	6105                	addi	sp,sp,32
20403532:	8082                	ret

20403534 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403534:	7179                	addi	sp,sp,-48
20403536:	d606                	sw	ra,44(sp)
20403538:	d422                	sw	s0,40(sp)
2040353a:	1800                	addi	s0,sp,48
2040353c:	fca42e23          	sw	a0,-36(s0)
20403540:	fcb42c23          	sw	a1,-40(s0)
20403544:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403548:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040354c:	fdc42783          	lw	a5,-36(s0)
20403550:	e399                	bnez	a5,20403556 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403552:	57fd                	li	a5,-1
20403554:	a849                	j	204035e6 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403556:	fd842703          	lw	a4,-40(s0)
2040355a:	47fd                	li	a5,31
2040355c:	08e7e063          	bltu	a5,a4,204035dc <__metal_local_interrupt_enable+0xa8>
20403560:	fd842783          	lw	a5,-40(s0)
20403564:	00279713          	slli	a4,a5,0x2
20403568:	204057b7          	lui	a5,0x20405
2040356c:	61478793          	addi	a5,a5,1556 # 20405614 <__metal_driver_vtable_riscv_clint0+0xd4>
20403570:	97ba                	add	a5,a5,a4
20403572:	439c                	lw	a5,0(a5)
20403574:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403576:	fd442783          	lw	a5,-44(s0)
2040357a:	c781                	beqz	a5,20403582 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040357c:	82eff0ef          	jal	ra,204025aa <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403580:	a08d                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403582:	840ff0ef          	jal	ra,204025c2 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403586:	a8b1                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403588:	fd442783          	lw	a5,-44(s0)
2040358c:	c781                	beqz	a5,20403594 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040358e:	84cff0ef          	jal	ra,204025da <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403592:	a881                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403594:	85eff0ef          	jal	ra,204025f2 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403598:	a0a9                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040359a:	fd442783          	lw	a5,-44(s0)
2040359e:	c781                	beqz	a5,204035a6 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204035a0:	86aff0ef          	jal	ra,2040260a <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204035a4:	a83d                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204035a6:	87eff0ef          	jal	ra,20402624 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204035aa:	a825                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204035ac:	fd442783          	lw	a5,-44(s0)
204035b0:	c781                	beqz	a5,204035b8 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204035b2:	88cff0ef          	jal	ra,2040263e <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204035b6:	a035                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204035b8:	8a2ff0ef          	jal	ra,2040265a <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204035bc:	a01d                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204035be:	fd442783          	lw	a5,-44(s0)
204035c2:	c799                	beqz	a5,204035d0 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204035c4:	fd842783          	lw	a5,-40(s0)
204035c8:	853e                	mv	a0,a5
204035ca:	8acff0ef          	jal	ra,20402676 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204035ce:	a811                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204035d0:	fd842783          	lw	a5,-40(s0)
204035d4:	853e                	mv	a0,a5
204035d6:	8ccff0ef          	jal	ra,204026a2 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204035da:	a021                	j	204035e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204035dc:	57fd                	li	a5,-1
204035de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204035e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204035e6:	853e                	mv	a0,a5
204035e8:	50b2                	lw	ra,44(sp)
204035ea:	5422                	lw	s0,40(sp)
204035ec:	6145                	addi	sp,sp,48
204035ee:	8082                	ret

204035f0 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204035f0:	7179                	addi	sp,sp,-48
204035f2:	d622                	sw	s0,44(sp)
204035f4:	1800                	addi	s0,sp,48
204035f6:	fca42e23          	sw	a0,-36(s0)
204035fa:	fcb42c23          	sw	a1,-40(s0)
204035fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403602:	fdc42783          	lw	a5,-36(s0)
20403606:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040360a:	fd842703          	lw	a4,-40(s0)
2040360e:	47ad                	li	a5,11
20403610:	02e7c263          	blt	a5,a4,20403634 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403614:	fd442783          	lw	a5,-44(s0)
20403618:	cf91                	beqz	a5,20403634 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040361a:	fec42703          	lw	a4,-20(s0)
2040361e:	fd842783          	lw	a5,-40(s0)
20403622:	0e078793          	addi	a5,a5,224
20403626:	078a                	slli	a5,a5,0x2
20403628:	97ba                	add	a5,a5,a4
2040362a:	fd442703          	lw	a4,-44(s0)
2040362e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403630:	4781                	li	a5,0
20403632:	a011                	j	20403636 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403634:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403636:	853e                	mv	a0,a5
20403638:	5432                	lw	s0,44(sp)
2040363a:	6145                	addi	sp,sp,48
2040363c:	8082                	ret

2040363e <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040363e:	7139                	addi	sp,sp,-64
20403640:	de06                	sw	ra,60(sp)
20403642:	dc22                	sw	s0,56(sp)
20403644:	0080                	addi	s0,sp,64
20403646:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040364a:	fcc42783          	lw	a5,-52(s0)
2040364e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403652:	fe442783          	lw	a5,-28(s0)
20403656:	43dc                	lw	a5,4(a5)
20403658:	10079d63          	bnez	a5,20403772 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040365c:	57fd                	li	a5,-1
2040365e:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403662:	57fd                	li	a5,-1
20403664:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403668:	301027f3          	csrr	a5,misa
2040366c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403670:	fe042703          	lw	a4,-32(s0)
20403674:	6789                	lui	a5,0x2
20403676:	8ff9                	and	a5,a5,a4
20403678:	e799                	bnez	a5,20403686 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040367a:	fe042703          	lw	a4,-32(s0)
2040367e:	000407b7          	lui	a5,0x40
20403682:	8ff9                	and	a5,a5,a4
20403684:	c799                	beqz	a5,20403692 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403686:	57fd                	li	a5,-1
20403688:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040368c:	57fd                	li	a5,-1
2040368e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403692:	fe042703          	lw	a4,-32(s0)
20403696:	000407b7          	lui	a5,0x40
2040369a:	8ff9                	and	a5,a5,a4
2040369c:	c781                	beqz	a5,204036a4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040369e:	57fd                	li	a5,-1
204036a0:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204036a4:	fe042623          	sw	zero,-20(s0)
204036a8:	a0b9                	j	204036f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204036aa:	fe442683          	lw	a3,-28(s0)
204036ae:	fec42703          	lw	a4,-20(s0)
204036b2:	87ba                	mv	a5,a4
204036b4:	0786                	slli	a5,a5,0x1
204036b6:	97ba                	add	a5,a5,a4
204036b8:	078e                	slli	a5,a5,0x3
204036ba:	97b6                	add	a5,a5,a3
204036bc:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204036c0:	fe442683          	lw	a3,-28(s0)
204036c4:	fec42703          	lw	a4,-20(s0)
204036c8:	87ba                	mv	a5,a4
204036ca:	0786                	slli	a5,a5,0x1
204036cc:	97ba                	add	a5,a5,a4
204036ce:	078e                	slli	a5,a5,0x3
204036d0:	97b6                	add	a5,a5,a3
204036d2:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204036d6:	fe442683          	lw	a3,-28(s0)
204036da:	fec42703          	lw	a4,-20(s0)
204036de:	87ba                	mv	a5,a4
204036e0:	0786                	slli	a5,a5,0x1
204036e2:	97ba                	add	a5,a5,a4
204036e4:	078e                	slli	a5,a5,0x3
204036e6:	97b6                	add	a5,a5,a3
204036e8:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204036ec:	fec42783          	lw	a5,-20(s0)
204036f0:	0785                	addi	a5,a5,1
204036f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204036f6:	fec42703          	lw	a4,-20(s0)
204036fa:	47fd                	li	a5,31
204036fc:	fae7d7e3          	bge	a5,a4,204036aa <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403700:	fe042423          	sw	zero,-24(s0)
20403704:	a01d                	j	2040372a <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403706:	fe442703          	lw	a4,-28(s0)
2040370a:	fe842783          	lw	a5,-24(s0)
2040370e:	0e078793          	addi	a5,a5,224
20403712:	078a                	slli	a5,a5,0x2
20403714:	97ba                	add	a5,a5,a4
20403716:	20402737          	lui	a4,0x20402
2040371a:	6ce70713          	addi	a4,a4,1742 # 204026ce <__metal_default_exception_handler>
2040371e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403720:	fe842783          	lw	a5,-24(s0)
20403724:	0785                	addi	a5,a5,1
20403726:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040372a:	fe842703          	lw	a4,-24(s0)
2040372e:	47ad                	li	a5,11
20403730:	fce7dbe3          	bge	a5,a4,20403706 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403734:	204037b7          	lui	a5,0x20403
20403738:	98078593          	addi	a1,a5,-1664 # 20402980 <__metal_exception_handler>
2040373c:	4501                	li	a0,0
2040373e:	331d                	jal	20403464 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403740:	301027f3          	csrr	a5,misa
20403744:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403748:	fdc42703          	lw	a4,-36(s0)
2040374c:	67c1                	lui	a5,0x10
2040374e:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403752:	8ff9                	and	a5,a5,a4
20403754:	cb99                	beqz	a5,2040376a <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403756:	300027f3          	csrr	a5,mstatus
2040375a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040375e:	fdc42703          	lw	a4,-36(s0)
20403762:	6789                	lui	a5,0x2
20403764:	8fd9                	or	a5,a5,a4
20403766:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040376a:	fe442783          	lw	a5,-28(s0)
2040376e:	4705                	li	a4,1
20403770:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403772:	0001                	nop
20403774:	50f2                	lw	ra,60(sp)
20403776:	5462                	lw	s0,56(sp)
20403778:	6121                	addi	sp,sp,64
2040377a:	8082                	ret

2040377c <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040377c:	7179                	addi	sp,sp,-48
2040377e:	d606                	sw	ra,44(sp)
20403780:	d422                	sw	s0,40(sp)
20403782:	1800                	addi	s0,sp,48
20403784:	fca42e23          	sw	a0,-36(s0)
20403788:	fcb42c23          	sw	a1,-40(s0)
2040378c:	fcc42a23          	sw	a2,-44(s0)
20403790:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403794:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403798:	fdc42783          	lw	a5,-36(s0)
2040379c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204037a0:	fd842503          	lw	a0,-40(s0)
204037a4:	3ba1                	jal	204034fc <__metal_valid_interrupt_id>
204037a6:	87aa                	mv	a5,a0
204037a8:	e399                	bnez	a5,204037ae <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204037aa:	57d5                	li	a5,-11
204037ac:	aa11                	j	204038c0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204037ae:	fd442783          	lw	a5,-44(s0)
204037b2:	cf85                	beqz	a5,204037ea <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204037b4:	fe842683          	lw	a3,-24(s0)
204037b8:	fd842703          	lw	a4,-40(s0)
204037bc:	87ba                	mv	a5,a4
204037be:	0786                	slli	a5,a5,0x1
204037c0:	97ba                	add	a5,a5,a4
204037c2:	078e                	slli	a5,a5,0x3
204037c4:	97b6                	add	a5,a5,a3
204037c6:	fd442703          	lw	a4,-44(s0)
204037ca:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204037ce:	fe842683          	lw	a3,-24(s0)
204037d2:	fd842703          	lw	a4,-40(s0)
204037d6:	87ba                	mv	a5,a4
204037d8:	0786                	slli	a5,a5,0x1
204037da:	97ba                	add	a5,a5,a4
204037dc:	078e                	slli	a5,a5,0x3
204037de:	97b6                	add	a5,a5,a3
204037e0:	fd042703          	lw	a4,-48(s0)
204037e4:	08e7ac23          	sw	a4,152(a5)
204037e8:	a8d1                	j	204038bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204037ea:	fd842783          	lw	a5,-40(s0)
204037ee:	17f5                	addi	a5,a5,-3
204037f0:	4771                	li	a4,28
204037f2:	0cf76263          	bltu	a4,a5,204038b6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204037f6:	00279713          	slli	a4,a5,0x2
204037fa:	204057b7          	lui	a5,0x20405
204037fe:	69478793          	addi	a5,a5,1684 # 20405694 <__metal_driver_vtable_riscv_clint0+0x154>
20403802:	97ba                	add	a5,a5,a4
20403804:	439c                	lw	a5,0(a5)
20403806:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403808:	fe842683          	lw	a3,-24(s0)
2040380c:	fd842703          	lw	a4,-40(s0)
20403810:	87ba                	mv	a5,a4
20403812:	0786                	slli	a5,a5,0x1
20403814:	97ba                	add	a5,a5,a4
20403816:	078e                	slli	a5,a5,0x3
20403818:	97b6                	add	a5,a5,a3
2040381a:	20402737          	lui	a4,0x20402
2040381e:	7ba70713          	addi	a4,a4,1978 # 204027ba <__metal_default_sw_handler>
20403822:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403826:	fe842683          	lw	a3,-24(s0)
2040382a:	fd842703          	lw	a4,-40(s0)
2040382e:	87ba                	mv	a5,a4
20403830:	0786                	slli	a5,a5,0x1
20403832:	97ba                	add	a5,a5,a4
20403834:	078e                	slli	a5,a5,0x3
20403836:	97b6                	add	a5,a5,a3
20403838:	fd042703          	lw	a4,-48(s0)
2040383c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403840:	a8b5                	j	204038bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403842:	fe842683          	lw	a3,-24(s0)
20403846:	fd842703          	lw	a4,-40(s0)
2040384a:	87ba                	mv	a5,a4
2040384c:	0786                	slli	a5,a5,0x1
2040384e:	97ba                	add	a5,a5,a4
20403850:	078e                	slli	a5,a5,0x3
20403852:	97b6                	add	a5,a5,a3
20403854:	20403737          	lui	a4,0x20403
20403858:	8ac70713          	addi	a4,a4,-1876 # 204028ac <__metal_default_timer_handler>
2040385c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403860:	fe842683          	lw	a3,-24(s0)
20403864:	fd842703          	lw	a4,-40(s0)
20403868:	87ba                	mv	a5,a4
2040386a:	0786                	slli	a5,a5,0x1
2040386c:	97ba                	add	a5,a5,a4
2040386e:	078e                	slli	a5,a5,0x3
20403870:	97b6                	add	a5,a5,a3
20403872:	fd042703          	lw	a4,-48(s0)
20403876:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
2040387a:	a089                	j	204038bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040387c:	fe842683          	lw	a3,-24(s0)
20403880:	fd842703          	lw	a4,-40(s0)
20403884:	87ba                	mv	a5,a4
20403886:	0786                	slli	a5,a5,0x1
20403888:	97ba                	add	a5,a5,a4
2040388a:	078e                	slli	a5,a5,0x3
2040388c:	97b6                	add	a5,a5,a3
2040388e:	20402737          	lui	a4,0x20402
20403892:	6e670713          	addi	a4,a4,1766 # 204026e6 <__metal_default_interrupt_handler>
20403896:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040389a:	fe842683          	lw	a3,-24(s0)
2040389e:	fd842703          	lw	a4,-40(s0)
204038a2:	87ba                	mv	a5,a4
204038a4:	0786                	slli	a5,a5,0x1
204038a6:	97ba                	add	a5,a5,a4
204038a8:	078e                	slli	a5,a5,0x3
204038aa:	97b6                	add	a5,a5,a3
204038ac:	fd042703          	lw	a4,-48(s0)
204038b0:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204038b4:	a021                	j	204038bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204038b6:	57d1                	li	a5,-12
204038b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204038bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204038c0:	853e                	mv	a0,a5
204038c2:	50b2                	lw	ra,44(sp)
204038c4:	5422                	lw	s0,40(sp)
204038c6:	6145                	addi	sp,sp,48
204038c8:	8082                	ret

204038ca <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204038ca:	1101                	addi	sp,sp,-32
204038cc:	ce06                	sw	ra,28(sp)
204038ce:	cc22                	sw	s0,24(sp)
204038d0:	1000                	addi	s0,sp,32
204038d2:	fea42623          	sw	a0,-20(s0)
204038d6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204038da:	fe842783          	lw	a5,-24(s0)
204038de:	4605                	li	a2,1
204038e0:	85be                	mv	a1,a5
204038e2:	fec42503          	lw	a0,-20(s0)
204038e6:	c4fff0ef          	jal	ra,20403534 <__metal_local_interrupt_enable>
204038ea:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204038ec:	853e                	mv	a0,a5
204038ee:	40f2                	lw	ra,28(sp)
204038f0:	4462                	lw	s0,24(sp)
204038f2:	6105                	addi	sp,sp,32
204038f4:	8082                	ret

204038f6 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204038f6:	1101                	addi	sp,sp,-32
204038f8:	ce06                	sw	ra,28(sp)
204038fa:	cc22                	sw	s0,24(sp)
204038fc:	1000                	addi	s0,sp,32
204038fe:	fea42623          	sw	a0,-20(s0)
20403902:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403906:	fe842783          	lw	a5,-24(s0)
2040390a:	4601                	li	a2,0
2040390c:	85be                	mv	a1,a5
2040390e:	fec42503          	lw	a0,-20(s0)
20403912:	c23ff0ef          	jal	ra,20403534 <__metal_local_interrupt_enable>
20403916:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403918:	853e                	mv	a0,a5
2040391a:	40f2                	lw	ra,28(sp)
2040391c:	4462                	lw	s0,24(sp)
2040391e:	6105                	addi	sp,sp,32
20403920:	8082                	ret

20403922 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403922:	1101                	addi	sp,sp,-32
20403924:	ce06                	sw	ra,28(sp)
20403926:	cc22                	sw	s0,24(sp)
20403928:	1000                	addi	s0,sp,32
2040392a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
2040392e:	ae7ff0ef          	jal	ra,20403414 <__metal_controller_interrupt_vector_mode>
20403932:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403934:	853e                	mv	a0,a5
20403936:	40f2                	lw	ra,28(sp)
20403938:	4462                	lw	s0,24(sp)
2040393a:	6105                	addi	sp,sp,32
2040393c:	8082                	ret

2040393e <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
2040393e:	7179                	addi	sp,sp,-48
20403940:	d606                	sw	ra,44(sp)
20403942:	d422                	sw	s0,40(sp)
20403944:	1800                	addi	s0,sp,48
20403946:	fca42e23          	sw	a0,-36(s0)
2040394a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040394e:	fdc42783          	lw	a5,-36(s0)
20403952:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403956:	fd842783          	lw	a5,-40(s0)
2040395a:	eb99                	bnez	a5,20403970 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
2040395c:	204037b7          	lui	a5,0x20403
20403960:	98078593          	addi	a1,a5,-1664 # 20402980 <__metal_exception_handler>
20403964:	fd842503          	lw	a0,-40(s0)
20403968:	afdff0ef          	jal	ra,20403464 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
2040396c:	4781                	li	a5,0
2040396e:	a00d                	j	20403990 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403970:	fd842703          	lw	a4,-40(s0)
20403974:	4785                	li	a5,1
20403976:	00f71c63          	bne	a4,a5,2040398e <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
2040397a:	204057b7          	lui	a5,0x20405
2040397e:	28078593          	addi	a1,a5,640 # 20405280 <__metal_vector_table>
20403982:	fd842503          	lw	a0,-40(s0)
20403986:	adfff0ef          	jal	ra,20403464 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2040398a:	4781                	li	a5,0
2040398c:	a011                	j	20403990 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040398e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403990:	853e                	mv	a0,a5
20403992:	50b2                	lw	ra,44(sp)
20403994:	5422                	lw	s0,40(sp)
20403996:	6145                	addi	sp,sp,48
20403998:	8082                	ret

2040399a <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2040399a:	1101                	addi	sp,sp,-32
2040399c:	ce22                	sw	s0,28(sp)
2040399e:	1000                	addi	s0,sp,32
204039a0:	fea42623          	sw	a0,-20(s0)
204039a4:	feb42423          	sw	a1,-24(s0)
204039a8:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204039ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204039ae:	853e                	mv	a0,a5
204039b0:	4472                	lw	s0,28(sp)
204039b2:	6105                	addi	sp,sp,32
204039b4:	8082                	ret

204039b6 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204039b6:	7139                	addi	sp,sp,-64
204039b8:	de22                	sw	s0,60(sp)
204039ba:	0080                	addi	s0,sp,64
204039bc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204039c0:	4301                	li	t1,0
204039c2:	4381                	li	t2,0
204039c4:	fe642423          	sw	t1,-24(s0)
204039c8:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204039cc:	b8002573          	csrr	a0,mcycleh
204039d0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204039d4:	b0002573          	csrr	a0,mcycle
204039d8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204039dc:	b8002573          	csrr	a0,mcycleh
204039e0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204039e4:	fe442883          	lw	a7,-28(s0)
204039e8:	fdc42503          	lw	a0,-36(s0)
204039ec:	02a89563          	bne	a7,a0,20403a16 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204039f0:	fe442503          	lw	a0,-28(s0)
204039f4:	85aa                	mv	a1,a0
204039f6:	4601                	li	a2,0
204039f8:	00059813          	slli	a6,a1,0x0
204039fc:	4781                	li	a5,0
204039fe:	fe042603          	lw	a2,-32(s0)
20403a02:	86b2                	mv	a3,a2
20403a04:	4701                	li	a4,0
20403a06:	00d7e633          	or	a2,a5,a3
20403a0a:	fec42423          	sw	a2,-24(s0)
20403a0e:	00e867b3          	or	a5,a6,a4
20403a12:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403a16:	fe842783          	lw	a5,-24(s0)
20403a1a:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403a1e:	853e                	mv	a0,a5
20403a20:	85c2                	mv	a1,a6
20403a22:	5472                	lw	s0,60(sp)
20403a24:	6121                	addi	sp,sp,64
20403a26:	8082                	ret

20403a28 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403a28:	7179                	addi	sp,sp,-48
20403a2a:	d606                	sw	ra,44(sp)
20403a2c:	d422                	sw	s0,40(sp)
20403a2e:	d24a                	sw	s2,36(sp)
20403a30:	d04e                	sw	s3,32(sp)
20403a32:	1800                	addi	s0,sp,48
20403a34:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403a38:	fdc42783          	lw	a5,-36(s0)
20403a3c:	e781                	bnez	a5,20403a44 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403a3e:	4901                	li	s2,0
20403a40:	4981                	li	s3,0
20403a42:	a821                	j	20403a5a <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403a44:	fdc42503          	lw	a0,-36(s0)
20403a48:	ac9fe0ef          	jal	ra,20402510 <__metal_driver_cpu_timebase>
20403a4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403a50:	fec42783          	lw	a5,-20(s0)
20403a54:	893e                	mv	s2,a5
20403a56:	87fd                	srai	a5,a5,0x1f
20403a58:	89be                	mv	s3,a5
20403a5a:	87ca                	mv	a5,s2
20403a5c:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403a5e:	853e                	mv	a0,a5
20403a60:	85c2                	mv	a1,a6
20403a62:	50b2                	lw	ra,44(sp)
20403a64:	5422                	lw	s0,40(sp)
20403a66:	5912                	lw	s2,36(sp)
20403a68:	5982                	lw	s3,32(sp)
20403a6a:	6145                	addi	sp,sp,48
20403a6c:	8082                	ret

20403a6e <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403a6e:	7179                	addi	sp,sp,-48
20403a70:	d606                	sw	ra,44(sp)
20403a72:	d422                	sw	s0,40(sp)
20403a74:	1800                	addi	s0,sp,48
20403a76:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403a7a:	4781                	li	a5,0
20403a7c:	4801                	li	a6,0
20403a7e:	fef42023          	sw	a5,-32(s0)
20403a82:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a86:	fdc42503          	lw	a0,-36(s0)
20403a8a:	ab1fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403a8e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403a92:	fec42783          	lw	a5,-20(s0)
20403a96:	c78d                	beqz	a5,20403ac0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403a98:	fec42783          	lw	a5,-20(s0)
20403a9c:	13c7a783          	lw	a5,316(a5)
20403aa0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403aa4:	fe842783          	lw	a5,-24(s0)
20403aa8:	cf81                	beqz	a5,20403ac0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403aaa:	fe842783          	lw	a5,-24(s0)
20403aae:	439c                	lw	a5,0(a5)
20403ab0:	43f8                	lw	a4,68(a5)
20403ab2:	fe040793          	addi	a5,s0,-32
20403ab6:	863e                	mv	a2,a5
20403ab8:	4585                	li	a1,1
20403aba:	fe842503          	lw	a0,-24(s0)
20403abe:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403ac0:	fe042783          	lw	a5,-32(s0)
20403ac4:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403ac8:	853e                	mv	a0,a5
20403aca:	85c2                	mv	a1,a6
20403acc:	50b2                	lw	ra,44(sp)
20403ace:	5422                	lw	s0,40(sp)
20403ad0:	6145                	addi	sp,sp,48
20403ad2:	8082                	ret

20403ad4 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403ad4:	7179                	addi	sp,sp,-48
20403ad6:	d606                	sw	ra,44(sp)
20403ad8:	d422                	sw	s0,40(sp)
20403ada:	d226                	sw	s1,36(sp)
20403adc:	1800                	addi	s0,sp,48
20403ade:	fca42e23          	sw	a0,-36(s0)
20403ae2:	fcb42823          	sw	a1,-48(s0)
20403ae6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403aea:	57fd                	li	a5,-1
20403aec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403af0:	fdc42503          	lw	a0,-36(s0)
20403af4:	a47fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403af8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403afc:	fe842783          	lw	a5,-24(s0)
20403b00:	cf8d                	beqz	a5,20403b3a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403b02:	fe842783          	lw	a5,-24(s0)
20403b06:	13c7a783          	lw	a5,316(a5)
20403b0a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403b0e:	fe442783          	lw	a5,-28(s0)
20403b12:	c785                	beqz	a5,20403b3a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403b14:	fe442783          	lw	a5,-28(s0)
20403b18:	439c                	lw	a5,0(a5)
20403b1a:	47a4                	lw	s1,72(a5)
20403b1c:	fdc42503          	lw	a0,-36(s0)
20403b20:	9cdfe0ef          	jal	ra,204024ec <__metal_driver_cpu_hartid>
20403b24:	87aa                	mv	a5,a0
20403b26:	fd042603          	lw	a2,-48(s0)
20403b2a:	fd442683          	lw	a3,-44(s0)
20403b2e:	85be                	mv	a1,a5
20403b30:	fe442503          	lw	a0,-28(s0)
20403b34:	9482                	jalr	s1
20403b36:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403b3a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403b3e:	853e                	mv	a0,a5
20403b40:	50b2                	lw	ra,44(sp)
20403b42:	5422                	lw	s0,40(sp)
20403b44:	5492                	lw	s1,36(sp)
20403b46:	6145                	addi	sp,sp,48
20403b48:	8082                	ret

20403b4a <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403b4a:	1101                	addi	sp,sp,-32
20403b4c:	ce22                	sw	s0,28(sp)
20403b4e:	1000                	addi	s0,sp,32
20403b50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403b54:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403b58:	853e                	mv	a0,a5
20403b5a:	4472                	lw	s0,28(sp)
20403b5c:	6105                	addi	sp,sp,32
20403b5e:	8082                	ret

20403b60 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403b60:	1101                	addi	sp,sp,-32
20403b62:	ce22                	sw	s0,28(sp)
20403b64:	1000                	addi	s0,sp,32
20403b66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403b6a:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403b6c:	853e                	mv	a0,a5
20403b6e:	4472                	lw	s0,28(sp)
20403b70:	6105                	addi	sp,sp,32
20403b72:	8082                	ret

20403b74 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403b74:	1101                	addi	sp,sp,-32
20403b76:	ce22                	sw	s0,28(sp)
20403b78:	1000                	addi	s0,sp,32
20403b7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403b7e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403b82:	853e                	mv	a0,a5
20403b84:	4472                	lw	s0,28(sp)
20403b86:	6105                	addi	sp,sp,32
20403b88:	8082                	ret

20403b8a <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403b8a:	1101                	addi	sp,sp,-32
20403b8c:	ce22                	sw	s0,28(sp)
20403b8e:	1000                	addi	s0,sp,32
20403b90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403b94:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403b96:	853e                	mv	a0,a5
20403b98:	4472                	lw	s0,28(sp)
20403b9a:	6105                	addi	sp,sp,32
20403b9c:	8082                	ret

20403b9e <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403b9e:	7179                	addi	sp,sp,-48
20403ba0:	d606                	sw	ra,44(sp)
20403ba2:	d422                	sw	s0,40(sp)
20403ba4:	1800                	addi	s0,sp,48
20403ba6:	fca42e23          	sw	a0,-36(s0)
20403baa:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403bae:	57fd                	li	a5,-1
20403bb0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403bb4:	fdc42503          	lw	a0,-36(s0)
20403bb8:	983fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403bbc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403bc0:	fe842783          	lw	a5,-24(s0)
20403bc4:	c79d                	beqz	a5,20403bf2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403bc6:	fe842783          	lw	a5,-24(s0)
20403bca:	0dc7a783          	lw	a5,220(a5)
20403bce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403bd2:	fe442783          	lw	a5,-28(s0)
20403bd6:	cf91                	beqz	a5,20403bf2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403bd8:	fe442783          	lw	a5,-28(s0)
20403bdc:	439c                	lw	a5,0(a5)
20403bde:	43f8                	lw	a4,68(a5)
20403be0:	fd840793          	addi	a5,s0,-40
20403be4:	863e                	mv	a2,a5
20403be6:	458d                	li	a1,3
20403be8:	fe442503          	lw	a0,-28(s0)
20403bec:	9702                	jalr	a4
20403bee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403bf2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403bf6:	853e                	mv	a0,a5
20403bf8:	50b2                	lw	ra,44(sp)
20403bfa:	5422                	lw	s0,40(sp)
20403bfc:	6145                	addi	sp,sp,48
20403bfe:	8082                	ret

20403c00 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403c00:	7179                	addi	sp,sp,-48
20403c02:	d606                	sw	ra,44(sp)
20403c04:	d422                	sw	s0,40(sp)
20403c06:	1800                	addi	s0,sp,48
20403c08:	fca42e23          	sw	a0,-36(s0)
20403c0c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403c10:	57fd                	li	a5,-1
20403c12:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403c16:	fdc42503          	lw	a0,-36(s0)
20403c1a:	921fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403c1e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403c22:	fe842783          	lw	a5,-24(s0)
20403c26:	c79d                	beqz	a5,20403c54 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403c28:	fe842783          	lw	a5,-24(s0)
20403c2c:	0dc7a783          	lw	a5,220(a5)
20403c30:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403c34:	fe442783          	lw	a5,-28(s0)
20403c38:	cf91                	beqz	a5,20403c54 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403c3a:	fe442783          	lw	a5,-28(s0)
20403c3e:	439c                	lw	a5,0(a5)
20403c40:	43f8                	lw	a4,68(a5)
20403c42:	fd840793          	addi	a5,s0,-40
20403c46:	863e                	mv	a2,a5
20403c48:	4589                	li	a1,2
20403c4a:	fe442503          	lw	a0,-28(s0)
20403c4e:	9702                	jalr	a4
20403c50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403c54:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403c58:	853e                	mv	a0,a5
20403c5a:	50b2                	lw	ra,44(sp)
20403c5c:	5422                	lw	s0,40(sp)
20403c5e:	6145                	addi	sp,sp,48
20403c60:	8082                	ret

20403c62 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403c62:	7179                	addi	sp,sp,-48
20403c64:	d606                	sw	ra,44(sp)
20403c66:	d422                	sw	s0,40(sp)
20403c68:	1800                	addi	s0,sp,48
20403c6a:	fca42e23          	sw	a0,-36(s0)
20403c6e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403c72:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403c76:	fdc42503          	lw	a0,-36(s0)
20403c7a:	8c1fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403c7e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403c82:	fe842783          	lw	a5,-24(s0)
20403c86:	c79d                	beqz	a5,20403cb4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403c88:	fe842783          	lw	a5,-24(s0)
20403c8c:	0dc7a783          	lw	a5,220(a5)
20403c90:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403c94:	fe442783          	lw	a5,-28(s0)
20403c98:	cf91                	beqz	a5,20403cb4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403c9a:	fe442783          	lw	a5,-28(s0)
20403c9e:	439c                	lw	a5,0(a5)
20403ca0:	43f8                	lw	a4,68(a5)
20403ca2:	fd840793          	addi	a5,s0,-40
20403ca6:	863e                	mv	a2,a5
20403ca8:	4591                	li	a1,4
20403caa:	fe442503          	lw	a0,-28(s0)
20403cae:	9702                	jalr	a4
20403cb0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403cb4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403cb8:	853e                	mv	a0,a5
20403cba:	50b2                	lw	ra,44(sp)
20403cbc:	5422                	lw	s0,40(sp)
20403cbe:	6145                	addi	sp,sp,48
20403cc0:	8082                	ret

20403cc2 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403cc2:	1101                	addi	sp,sp,-32
20403cc4:	ce06                	sw	ra,28(sp)
20403cc6:	cc22                	sw	s0,24(sp)
20403cc8:	1000                	addi	s0,sp,32
20403cca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403cce:	fec42503          	lw	a0,-20(s0)
20403cd2:	869fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403cd6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403cd8:	853e                	mv	a0,a5
20403cda:	40f2                	lw	ra,28(sp)
20403cdc:	4462                	lw	s0,24(sp)
20403cde:	6105                	addi	sp,sp,32
20403ce0:	8082                	ret

20403ce2 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403ce2:	7179                	addi	sp,sp,-48
20403ce4:	d606                	sw	ra,44(sp)
20403ce6:	d422                	sw	s0,40(sp)
20403ce8:	1800                	addi	s0,sp,48
20403cea:	fca42e23          	sw	a0,-36(s0)
20403cee:	fcb42c23          	sw	a1,-40(s0)
20403cf2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403cf6:	fdc42503          	lw	a0,-36(s0)
20403cfa:	841fe0ef          	jal	ra,2040253a <__metal_driver_cpu_interrupt_controller>
20403cfe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403d02:	fec42783          	lw	a5,-20(s0)
20403d06:	cb99                	beqz	a5,20403d1c <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403d08:	fd442603          	lw	a2,-44(s0)
20403d0c:	fd842583          	lw	a1,-40(s0)
20403d10:	fec42503          	lw	a0,-20(s0)
20403d14:	8ddff0ef          	jal	ra,204035f0 <__metal_exception_register>
20403d18:	87aa                	mv	a5,a0
20403d1a:	a011                	j	20403d1e <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403d1c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403d1e:	853e                	mv	a0,a5
20403d20:	50b2                	lw	ra,44(sp)
20403d22:	5422                	lw	s0,40(sp)
20403d24:	6145                	addi	sp,sp,48
20403d26:	8082                	ret

20403d28 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403d28:	1101                	addi	sp,sp,-32
20403d2a:	ce22                	sw	s0,28(sp)
20403d2c:	1000                	addi	s0,sp,32
20403d2e:	fea42623          	sw	a0,-20(s0)
20403d32:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403d36:	fe842783          	lw	a5,-24(s0)
20403d3a:	0007d783          	lhu	a5,0(a5)
20403d3e:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403d42:	478d                	li	a5,3
20403d44:	00f71463          	bne	a4,a5,20403d4c <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403d48:	4791                	li	a5,4
20403d4a:	a011                	j	20403d4e <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403d4c:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403d4e:	853e                	mv	a0,a5
20403d50:	4472                	lw	s0,28(sp)
20403d52:	6105                	addi	sp,sp,32
20403d54:	8082                	ret

20403d56 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403d56:	7179                	addi	sp,sp,-48
20403d58:	d622                	sw	s0,44(sp)
20403d5a:	1800                	addi	s0,sp,48
20403d5c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403d60:	341027f3          	csrr	a5,mepc
20403d64:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403d68:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403d6c:	853e                	mv	a0,a5
20403d6e:	5432                	lw	s0,44(sp)
20403d70:	6145                	addi	sp,sp,48
20403d72:	8082                	ret

20403d74 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403d74:	1101                	addi	sp,sp,-32
20403d76:	ce22                	sw	s0,28(sp)
20403d78:	1000                	addi	s0,sp,32
20403d7a:	fea42623          	sw	a0,-20(s0)
20403d7e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403d82:	fe842783          	lw	a5,-24(s0)
20403d86:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403d8a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403d8c:	853e                	mv	a0,a5
20403d8e:	4472                	lw	s0,28(sp)
20403d90:	6105                	addi	sp,sp,32
20403d92:	8082                	ret

20403d94 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403d94:	1101                	addi	sp,sp,-32
20403d96:	ce22                	sw	s0,28(sp)
20403d98:	1000                	addi	s0,sp,32
20403d9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403d9e:	fec42703          	lw	a4,-20(s0)
20403da2:	800007b7          	lui	a5,0x80000
20403da6:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20403daa:	00f71563          	bne	a4,a5,20403db4 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403dae:	0c0007b7          	lui	a5,0xc000
20403db2:	a011                	j	20403db6 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403db4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:245
	}
}
20403db6:	853e                	mv	a0,a5
20403db8:	4472                	lw	s0,28(sp)
20403dba:	6105                	addi	sp,sp,32
20403dbc:	8082                	ret

20403dbe <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403dbe:	1101                	addi	sp,sp,-32
20403dc0:	ce22                	sw	s0,28(sp)
20403dc2:	1000                	addi	s0,sp,32
20403dc4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403dc8:	fec42703          	lw	a4,-20(s0)
20403dcc:	800007b7          	lui	a5,0x80000
20403dd0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20403dd4:	00f71463          	bne	a4,a5,20403ddc <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403dd8:	47ed                	li	a5,27
20403dda:	a011                	j	20403dde <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403ddc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:265
	}
}
20403dde:	853e                	mv	a0,a5
20403de0:	4472                	lw	s0,28(sp)
20403de2:	6105                	addi	sp,sp,32
20403de4:	8082                	ret

20403de6 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403de6:	1101                	addi	sp,sp,-32
20403de8:	ce22                	sw	s0,28(sp)
20403dea:	1000                	addi	s0,sp,32
20403dec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403df0:	fec42703          	lw	a4,-20(s0)
20403df4:	800007b7          	lui	a5,0x80000
20403df8:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20403dfc:	00f71463          	bne	a4,a5,20403e04 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403e00:	479d                	li	a5,7
20403e02:	a011                	j	20403e06 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403e04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:275
	}
}
20403e06:	853e                	mv	a0,a5
20403e08:	4472                	lw	s0,28(sp)
20403e0a:	6105                	addi	sp,sp,32
20403e0c:	8082                	ret

20403e0e <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403e0e:	1101                	addi	sp,sp,-32
20403e10:	ce22                	sw	s0,28(sp)
20403e12:	1000                	addi	s0,sp,32
20403e14:	fea42623          	sw	a0,-20(s0)
20403e18:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403e1c:	fe842783          	lw	a5,-24(s0)
20403e20:	e791                	bnez	a5,20403e2c <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403e22:	800007b7          	lui	a5,0x80000
20403e26:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec64>
20403e2a:	a011                	j	20403e2e <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403e2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:285
	}
}
20403e2e:	853e                	mv	a0,a5
20403e30:	4472                	lw	s0,28(sp)
20403e32:	6105                	addi	sp,sp,32
20403e34:	8082                	ret

20403e36 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403e36:	1101                	addi	sp,sp,-32
20403e38:	ce22                	sw	s0,28(sp)
20403e3a:	1000                	addi	s0,sp,32
20403e3c:	fea42623          	sw	a0,-20(s0)
20403e40:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403e44:	fe842783          	lw	a5,-24(s0)
20403e48:	e399                	bnez	a5,20403e4e <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:290
		return 11;
20403e4a:	47ad                	li	a5,11
20403e4c:	a011                	j	20403e50 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403e4e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:295
	}
}
20403e50:	853e                	mv	a0,a5
20403e52:	4472                	lw	s0,28(sp)
20403e54:	6105                	addi	sp,sp,32
20403e56:	8082                	ret

20403e58 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403e58:	7179                	addi	sp,sp,-48
20403e5a:	d606                	sw	ra,44(sp)
20403e5c:	d422                	sw	s0,40(sp)
20403e5e:	1800                	addi	s0,sp,48
20403e60:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403e64:	fdc42503          	lw	a0,-36(s0)
20403e68:	3735                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403e6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e6e:	fec42703          	lw	a4,-20(s0)
20403e72:	002007b7          	lui	a5,0x200
20403e76:	0791                	addi	a5,a5,4
20403e78:	97ba                	add	a5,a5,a4
20403e7a:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403e7c:	853e                	mv	a0,a5
20403e7e:	50b2                	lw	ra,44(sp)
20403e80:	5422                	lw	s0,40(sp)
20403e82:	6145                	addi	sp,sp,48
20403e84:	8082                	ret

20403e86 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403e86:	7179                	addi	sp,sp,-48
20403e88:	d606                	sw	ra,44(sp)
20403e8a:	d422                	sw	s0,40(sp)
20403e8c:	1800                	addi	s0,sp,48
20403e8e:	fca42e23          	sw	a0,-36(s0)
20403e92:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403e96:	fdc42503          	lw	a0,-36(s0)
20403e9a:	3ded                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403e9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ea0:	fec42703          	lw	a4,-20(s0)
20403ea4:	002007b7          	lui	a5,0x200
20403ea8:	0791                	addi	a5,a5,4
20403eaa:	97ba                	add	a5,a5,a4
20403eac:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403eae:	fd842783          	lw	a5,-40(s0)
20403eb2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403eb4:	0001                	nop
20403eb6:	50b2                	lw	ra,44(sp)
20403eb8:	5422                	lw	s0,40(sp)
20403eba:	6145                	addi	sp,sp,48
20403ebc:	8082                	ret

20403ebe <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403ebe:	7179                	addi	sp,sp,-48
20403ec0:	d606                	sw	ra,44(sp)
20403ec2:	d422                	sw	s0,40(sp)
20403ec4:	1800                	addi	s0,sp,48
20403ec6:	fca42e23          	sw	a0,-36(s0)
20403eca:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403ece:	fdc42503          	lw	a0,-36(s0)
20403ed2:	35c9                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403ed4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ed8:	fec42703          	lw	a4,-20(s0)
20403edc:	002007b7          	lui	a5,0x200
20403ee0:	97ba                	add	a5,a5,a4
20403ee2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403ee4:	fd842783          	lw	a5,-40(s0)
20403ee8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403eea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403eec:	853e                	mv	a0,a5
20403eee:	50b2                	lw	ra,44(sp)
20403ef0:	5422                	lw	s0,40(sp)
20403ef2:	6145                	addi	sp,sp,48
20403ef4:	8082                	ret

20403ef6 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403ef6:	7179                	addi	sp,sp,-48
20403ef8:	d606                	sw	ra,44(sp)
20403efa:	d422                	sw	s0,40(sp)
20403efc:	1800                	addi	s0,sp,48
20403efe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403f02:	fdc42503          	lw	a0,-36(s0)
20403f06:	3579                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403f08:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f0c:	fec42703          	lw	a4,-20(s0)
20403f10:	002007b7          	lui	a5,0x200
20403f14:	97ba                	add	a5,a5,a4
20403f16:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403f18:	853e                	mv	a0,a5
20403f1a:	50b2                	lw	ra,44(sp)
20403f1c:	5422                	lw	s0,40(sp)
20403f1e:	6145                	addi	sp,sp,48
20403f20:	8082                	ret

20403f22 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403f22:	7179                	addi	sp,sp,-48
20403f24:	d606                	sw	ra,44(sp)
20403f26:	d422                	sw	s0,40(sp)
20403f28:	1800                	addi	s0,sp,48
20403f2a:	fca42e23          	sw	a0,-36(s0)
20403f2e:	fcb42c23          	sw	a1,-40(s0)
20403f32:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403f36:	fdc42503          	lw	a0,-36(s0)
20403f3a:	3da9                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403f3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403f40:	fdc42503          	lw	a0,-36(s0)
20403f44:	354d                	jal	20403de6 <__metal_driver_sifive_plic0_max_priority>
20403f46:	87aa                	mv	a5,a0
20403f48:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403f4c:	fe842783          	lw	a5,-24(s0)
20403f50:	c785                	beqz	a5,20403f78 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403f52:	fd442703          	lw	a4,-44(s0)
20403f56:	fe842783          	lw	a5,-24(s0)
20403f5a:	00f77f63          	bgeu	a4,a5,20403f78 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f5e:	fd842783          	lw	a5,-40(s0)
20403f62:	078a                	slli	a5,a5,0x2
20403f64:	873e                	mv	a4,a5
20403f66:	fec42783          	lw	a5,-20(s0)
20403f6a:	97ba                	add	a5,a5,a4
20403f6c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403f6e:	fd442783          	lw	a5,-44(s0)
20403f72:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403f74:	4781                	li	a5,0
20403f76:	a011                	j	20403f7a <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403f78:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403f7a:	853e                	mv	a0,a5
20403f7c:	50b2                	lw	ra,44(sp)
20403f7e:	5422                	lw	s0,40(sp)
20403f80:	6145                	addi	sp,sp,48
20403f82:	8082                	ret

20403f84 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403f84:	7179                	addi	sp,sp,-48
20403f86:	d606                	sw	ra,44(sp)
20403f88:	d422                	sw	s0,40(sp)
20403f8a:	1800                	addi	s0,sp,48
20403f8c:	fca42e23          	sw	a0,-36(s0)
20403f90:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403f94:	fdc42503          	lw	a0,-36(s0)
20403f98:	3bf5                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403f9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f9e:	fd842783          	lw	a5,-40(s0)
20403fa2:	078a                	slli	a5,a5,0x2
20403fa4:	873e                	mv	a4,a5
20403fa6:	fec42783          	lw	a5,-20(s0)
20403faa:	97ba                	add	a5,a5,a4
20403fac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403fae:	853e                	mv	a0,a5
20403fb0:	50b2                	lw	ra,44(sp)
20403fb2:	5422                	lw	s0,40(sp)
20403fb4:	6145                	addi	sp,sp,48
20403fb6:	8082                	ret

20403fb8 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403fb8:	7179                	addi	sp,sp,-48
20403fba:	d606                	sw	ra,44(sp)
20403fbc:	d422                	sw	s0,40(sp)
20403fbe:	1800                	addi	s0,sp,48
20403fc0:	fca42e23          	sw	a0,-36(s0)
20403fc4:	fcb42c23          	sw	a1,-40(s0)
20403fc8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403fcc:	fdc42503          	lw	a0,-36(s0)
20403fd0:	33d1                	jal	20403d94 <__metal_driver_sifive_plic0_control_base>
20403fd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403fd6:	fd842783          	lw	a5,-40(s0)
20403fda:	8795                	srai	a5,a5,0x5
20403fdc:	078a                	slli	a5,a5,0x2
20403fde:	873e                	mv	a4,a5
20403fe0:	fec42783          	lw	a5,-20(s0)
20403fe4:	973e                	add	a4,a4,a5
20403fe6:	6789                	lui	a5,0x2
20403fe8:	97ba                	add	a5,a5,a4
20403fea:	439c                	lw	a5,0(a5)
20403fec:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403ff0:	fd442783          	lw	a5,-44(s0)
20403ff4:	cf81                	beqz	a5,2040400c <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403ff6:	fd842783          	lw	a5,-40(s0)
20403ffa:	8bfd                	andi	a5,a5,31
20403ffc:	4705                	li	a4,1
20403ffe:	00f717b3          	sll	a5,a4,a5
20404002:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404004:	fe842783          	lw	a5,-24(s0)
20404008:	8fd9                	or	a5,a5,a4
2040400a:	a829                	j	20404024 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040400c:	fd842783          	lw	a5,-40(s0)
20404010:	8bfd                	andi	a5,a5,31
20404012:	4705                	li	a4,1
20404014:	00f717b3          	sll	a5,a4,a5
20404018:	fff7c793          	not	a5,a5
2040401c:	873e                	mv	a4,a5
2040401e:	fe842783          	lw	a5,-24(s0)
20404022:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404024:	fd842703          	lw	a4,-40(s0)
20404028:	8715                	srai	a4,a4,0x5
2040402a:	070a                	slli	a4,a4,0x2
2040402c:	86ba                	mv	a3,a4
2040402e:	fec42703          	lw	a4,-20(s0)
20404032:	96ba                	add	a3,a3,a4
20404034:	6709                	lui	a4,0x2
20404036:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404038:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
2040403a:	0001                	nop
2040403c:	50b2                	lw	ra,44(sp)
2040403e:	5422                	lw	s0,40(sp)
20404040:	6145                	addi	sp,sp,48
20404042:	8082                	ret

20404044 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404044:	1101                	addi	sp,sp,-32
20404046:	ce06                	sw	ra,28(sp)
20404048:	cc22                	sw	s0,24(sp)
2040404a:	1000                	addi	s0,sp,32
2040404c:	fea42623          	sw	a0,-20(s0)
20404050:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404054:	12c00513          	li	a0,300
20404058:	1c4010ef          	jal	ra,2040521c <metal_shutdown>

2040405c <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
2040405c:	7179                	addi	sp,sp,-48
2040405e:	d606                	sw	ra,44(sp)
20404060:	d422                	sw	s0,40(sp)
20404062:	1800                	addi	s0,sp,48
20404064:	fca42e23          	sw	a0,-36(s0)
20404068:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
2040406c:	fd842783          	lw	a5,-40(s0)
20404070:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404074:	fec42503          	lw	a0,-20(s0)
20404078:	33c5                	jal	20403e58 <__metal_plic0_claim_interrupt>
2040407a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
2040407e:	fec42503          	lw	a0,-20(s0)
20404082:	3b35                	jal	20403dbe <__metal_driver_sifive_plic0_num_interrupts>
20404084:	87aa                	mv	a5,a0
20404086:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040408a:	fe842703          	lw	a4,-24(s0)
2040408e:	fe442783          	lw	a5,-28(s0)
20404092:	04f77263          	bgeu	a4,a5,204040d6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404096:	fec42703          	lw	a4,-20(s0)
2040409a:	fe842783          	lw	a5,-24(s0)
2040409e:	078a                	slli	a5,a5,0x2
204040a0:	97ba                	add	a5,a5,a4
204040a2:	479c                	lw	a5,8(a5)
204040a4:	cb8d                	beqz	a5,204040d6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204040a6:	fec42703          	lw	a4,-20(s0)
204040aa:	fe842783          	lw	a5,-24(s0)
204040ae:	078a                	slli	a5,a5,0x2
204040b0:	97ba                	add	a5,a5,a4
204040b2:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204040b6:	fe842603          	lw	a2,-24(s0)
204040ba:	fec42683          	lw	a3,-20(s0)
204040be:	fe842703          	lw	a4,-24(s0)
204040c2:	87ba                	mv	a5,a4
204040c4:	0786                	slli	a5,a5,0x1
204040c6:	97ba                	add	a5,a5,a4
204040c8:	078e                	slli	a5,a5,0x3
204040ca:	97b6                	add	a5,a5,a3
204040cc:	0887a783          	lw	a5,136(a5)
204040d0:	85be                	mv	a1,a5
204040d2:	8532                	mv	a0,a2
204040d4:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204040d6:	fe842583          	lw	a1,-24(s0)
204040da:	fec42503          	lw	a0,-20(s0)
204040de:	3365                	jal	20403e86 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204040e0:	0001                	nop
204040e2:	50b2                	lw	ra,44(sp)
204040e4:	5422                	lw	s0,40(sp)
204040e6:	6145                	addi	sp,sp,48
204040e8:	8082                	ret

204040ea <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204040ea:	7139                	addi	sp,sp,-64
204040ec:	de06                	sw	ra,60(sp)
204040ee:	dc22                	sw	s0,56(sp)
204040f0:	0080                	addi	s0,sp,64
204040f2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204040f6:	fcc42783          	lw	a5,-52(s0)
204040fa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
204040fe:	fe442783          	lw	a5,-28(s0)
20404102:	43dc                	lw	a5,4(a5)
20404104:	12079063          	bnez	a5,20404224 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404108:	fe042623          	sw	zero,-20(s0)
2040410c:	a221                	j	20404214 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040410e:	fcc42503          	lw	a0,-52(s0)
20404112:	cadff0ef          	jal	ra,20403dbe <__metal_driver_sifive_plic0_num_interrupts>
20404116:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040411a:	fec42583          	lw	a1,-20(s0)
2040411e:	fcc42503          	lw	a0,-52(s0)
20404122:	cedff0ef          	jal	ra,20403e0e <__metal_driver_sifive_plic0_interrupt_parents>
20404126:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040412a:	fec42583          	lw	a1,-20(s0)
2040412e:	fcc42503          	lw	a0,-52(s0)
20404132:	d05ff0ef          	jal	ra,20403e36 <__metal_driver_sifive_plic0_interrupt_lines>
20404136:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040413a:	fdc42783          	lw	a5,-36(s0)
2040413e:	439c                	lw	a5,0(a5)
20404140:	439c                	lw	a5,0(a5)
20404142:	fdc42503          	lw	a0,-36(s0)
20404146:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404148:	fe042423          	sw	zero,-24(s0)
2040414c:	a085                	j	204041ac <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
2040414e:	4601                	li	a2,0
20404150:	fe842583          	lw	a1,-24(s0)
20404154:	fe442503          	lw	a0,-28(s0)
20404158:	3585                	jal	20403fb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040415a:	4601                	li	a2,0
2040415c:	fe842583          	lw	a1,-24(s0)
20404160:	fcc42503          	lw	a0,-52(s0)
20404164:	3b7d                	jal	20403f22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20404166:	fe442703          	lw	a4,-28(s0)
2040416a:	fe842783          	lw	a5,-24(s0)
2040416e:	078a                	slli	a5,a5,0x2
20404170:	97ba                	add	a5,a5,a4
20404172:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20404176:	fe442683          	lw	a3,-28(s0)
2040417a:	fe842703          	lw	a4,-24(s0)
2040417e:	87ba                	mv	a5,a4
20404180:	0786                	slli	a5,a5,0x1
20404182:	97ba                	add	a5,a5,a4
20404184:	078e                	slli	a5,a5,0x3
20404186:	97b6                	add	a5,a5,a3
20404188:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
2040418c:	fe442683          	lw	a3,-28(s0)
20404190:	fe842703          	lw	a4,-24(s0)
20404194:	87ba                	mv	a5,a4
20404196:	0786                	slli	a5,a5,0x1
20404198:	97ba                	add	a5,a5,a4
2040419a:	078e                	slli	a5,a5,0x3
2040419c:	97b6                	add	a5,a5,a3
2040419e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204041a2:	fe842783          	lw	a5,-24(s0)
204041a6:	0785                	addi	a5,a5,1
204041a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204041ac:	fe842703          	lw	a4,-24(s0)
204041b0:	fe042783          	lw	a5,-32(s0)
204041b4:	f8f74de3          	blt	a4,a5,2040414e <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204041b8:	4581                	li	a1,0
204041ba:	fcc42503          	lw	a0,-52(s0)
204041be:	d01ff0ef          	jal	ra,20403ebe <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204041c2:	fdc42783          	lw	a5,-36(s0)
204041c6:	439c                	lw	a5,0(a5)
204041c8:	4fdc                	lw	a5,28(a5)
204041ca:	fe442683          	lw	a3,-28(s0)
204041ce:	4601                	li	a2,0
204041d0:	fd842583          	lw	a1,-40(s0)
204041d4:	fdc42503          	lw	a0,-36(s0)
204041d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204041da:	fdc42783          	lw	a5,-36(s0)
204041de:	439c                	lw	a5,0(a5)
204041e0:	4fd8                	lw	a4,28(a5)
204041e2:	fe442683          	lw	a3,-28(s0)
204041e6:	204047b7          	lui	a5,0x20404
204041ea:	05c78613          	addi	a2,a5,92 # 2040405c <__metal_plic0_handler>
204041ee:	fd842583          	lw	a1,-40(s0)
204041f2:	fdc42503          	lw	a0,-36(s0)
204041f6:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204041f8:	fdc42783          	lw	a5,-36(s0)
204041fc:	439c                	lw	a5,0(a5)
204041fe:	53dc                	lw	a5,36(a5)
20404200:	fd842583          	lw	a1,-40(s0)
20404204:	fdc42503          	lw	a0,-36(s0)
20404208:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040420a:	fec42783          	lw	a5,-20(s0)
2040420e:	0785                	addi	a5,a5,1
20404210:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404214:	fec42783          	lw	a5,-20(s0)
20404218:	eef05be3          	blez	a5,2040410e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
2040421c:	fe442783          	lw	a5,-28(s0)
20404220:	4705                	li	a4,1
20404222:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404224:	0001                	nop
20404226:	50f2                	lw	ra,60(sp)
20404228:	5462                	lw	s0,56(sp)
2040422a:	6121                	addi	sp,sp,64
2040422c:	8082                	ret

2040422e <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
2040422e:	7179                	addi	sp,sp,-48
20404230:	d606                	sw	ra,44(sp)
20404232:	d422                	sw	s0,40(sp)
20404234:	1800                	addi	s0,sp,48
20404236:	fca42e23          	sw	a0,-36(s0)
2040423a:	fcb42c23          	sw	a1,-40(s0)
2040423e:	fcc42a23          	sw	a2,-44(s0)
20404242:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404246:	fdc42783          	lw	a5,-36(s0)
2040424a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040424e:	fdc42503          	lw	a0,-36(s0)
20404252:	b6dff0ef          	jal	ra,20403dbe <__metal_driver_sifive_plic0_num_interrupts>
20404256:	872a                	mv	a4,a0
20404258:	fd842783          	lw	a5,-40(s0)
2040425c:	00e7c463          	blt	a5,a4,20404264 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404260:	57fd                	li	a5,-1
20404262:	a051                	j	204042e6 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404264:	fd442783          	lw	a5,-44(s0)
20404268:	cf9d                	beqz	a5,204042a6 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040426a:	4609                	li	a2,2
2040426c:	fd842583          	lw	a1,-40(s0)
20404270:	fdc42503          	lw	a0,-36(s0)
20404274:	cafff0ef          	jal	ra,20403f22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404278:	fec42703          	lw	a4,-20(s0)
2040427c:	fd842783          	lw	a5,-40(s0)
20404280:	078a                	slli	a5,a5,0x2
20404282:	97ba                	add	a5,a5,a4
20404284:	fd442703          	lw	a4,-44(s0)
20404288:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040428a:	fec42683          	lw	a3,-20(s0)
2040428e:	fd842703          	lw	a4,-40(s0)
20404292:	87ba                	mv	a5,a4
20404294:	0786                	slli	a5,a5,0x1
20404296:	97ba                	add	a5,a5,a4
20404298:	078e                	slli	a5,a5,0x3
2040429a:	97b6                	add	a5,a5,a3
2040429c:	fd042703          	lw	a4,-48(s0)
204042a0:	08e7a423          	sw	a4,136(a5)
204042a4:	a081                	j	204042e4 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204042a6:	4605                	li	a2,1
204042a8:	fd842583          	lw	a1,-40(s0)
204042ac:	fdc42503          	lw	a0,-36(s0)
204042b0:	c73ff0ef          	jal	ra,20403f22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204042b4:	fec42703          	lw	a4,-20(s0)
204042b8:	fd842783          	lw	a5,-40(s0)
204042bc:	078a                	slli	a5,a5,0x2
204042be:	97ba                	add	a5,a5,a4
204042c0:	20404737          	lui	a4,0x20404
204042c4:	04470713          	addi	a4,a4,68 # 20404044 <__metal_plic0_default_handler>
204042c8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204042ca:	fec42683          	lw	a3,-20(s0)
204042ce:	fd842703          	lw	a4,-40(s0)
204042d2:	87ba                	mv	a5,a4
204042d4:	0786                	slli	a5,a5,0x1
204042d6:	97ba                	add	a5,a5,a4
204042d8:	078e                	slli	a5,a5,0x3
204042da:	97b6                	add	a5,a5,a3
204042dc:	fd042703          	lw	a4,-48(s0)
204042e0:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204042e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204042e6:	853e                	mv	a0,a5
204042e8:	50b2                	lw	ra,44(sp)
204042ea:	5422                	lw	s0,40(sp)
204042ec:	6145                	addi	sp,sp,48
204042ee:	8082                	ret

204042f0 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204042f0:	7179                	addi	sp,sp,-48
204042f2:	d606                	sw	ra,44(sp)
204042f4:	d422                	sw	s0,40(sp)
204042f6:	1800                	addi	s0,sp,48
204042f8:	fca42e23          	sw	a0,-36(s0)
204042fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404300:	fdc42783          	lw	a5,-36(s0)
20404304:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404308:	fdc42503          	lw	a0,-36(s0)
2040430c:	ab3ff0ef          	jal	ra,20403dbe <__metal_driver_sifive_plic0_num_interrupts>
20404310:	872a                	mv	a4,a0
20404312:	fd842783          	lw	a5,-40(s0)
20404316:	00e7c463          	blt	a5,a4,2040431e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040431a:	57fd                	li	a5,-1
2040431c:	a809                	j	2040432e <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040431e:	4605                	li	a2,1
20404320:	fd842583          	lw	a1,-40(s0)
20404324:	fec42503          	lw	a0,-20(s0)
20404328:	c91ff0ef          	jal	ra,20403fb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040432c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
2040432e:	853e                	mv	a0,a5
20404330:	50b2                	lw	ra,44(sp)
20404332:	5422                	lw	s0,40(sp)
20404334:	6145                	addi	sp,sp,48
20404336:	8082                	ret

20404338 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404338:	7179                	addi	sp,sp,-48
2040433a:	d606                	sw	ra,44(sp)
2040433c:	d422                	sw	s0,40(sp)
2040433e:	1800                	addi	s0,sp,48
20404340:	fca42e23          	sw	a0,-36(s0)
20404344:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404348:	fdc42783          	lw	a5,-36(s0)
2040434c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404350:	fdc42503          	lw	a0,-36(s0)
20404354:	a6bff0ef          	jal	ra,20403dbe <__metal_driver_sifive_plic0_num_interrupts>
20404358:	872a                	mv	a4,a0
2040435a:	fd842783          	lw	a5,-40(s0)
2040435e:	00e7c463          	blt	a5,a4,20404366 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404362:	57fd                	li	a5,-1
20404364:	a809                	j	20404376 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404366:	4601                	li	a2,0
20404368:	fd842583          	lw	a1,-40(s0)
2040436c:	fec42503          	lw	a0,-20(s0)
20404370:	c49ff0ef          	jal	ra,20403fb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404374:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404376:	853e                	mv	a0,a5
20404378:	50b2                	lw	ra,44(sp)
2040437a:	5422                	lw	s0,40(sp)
2040437c:	6145                	addi	sp,sp,48
2040437e:	8082                	ret

20404380 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404380:	1101                	addi	sp,sp,-32
20404382:	ce22                	sw	s0,28(sp)
20404384:	1000                	addi	s0,sp,32
20404386:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040438a:	fec42703          	lw	a4,-20(s0)
2040438e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404392:	00f71563          	bne	a4,a5,2040439c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404396:	100127b7          	lui	a5,0x10012
2040439a:	a011                	j	2040439e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040439c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:395
	}
}
2040439e:	853e                	mv	a0,a5
204043a0:	4472                	lw	s0,28(sp)
204043a2:	6105                	addi	sp,sp,32
204043a4:	8082                	ret

204043a6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204043a6:	1101                	addi	sp,sp,-32
204043a8:	ce22                	sw	s0,28(sp)
204043aa:	1000                	addi	s0,sp,32
204043ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204043b0:	fec42703          	lw	a4,-20(s0)
204043b4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043b8:	00f71763          	bne	a4,a5,204043c6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204043bc:	800007b7          	lui	a5,0x80000
204043c0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
204043c4:	a011                	j	204043c8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204043c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:425
	}
}
204043c8:	853e                	mv	a0,a5
204043ca:	4472                	lw	s0,28(sp)
204043cc:	6105                	addi	sp,sp,32
204043ce:	8082                	ret

204043d0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204043d0:	1101                	addi	sp,sp,-32
204043d2:	ce22                	sw	s0,28(sp)
204043d4:	1000                	addi	s0,sp,32
204043d6:	fea42623          	sw	a0,-20(s0)
204043da:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204043de:	fec42703          	lw	a4,-20(s0)
204043e2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043e6:	00f71763          	bne	a4,a5,204043f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429 (discriminator 1)
204043ea:	fe842783          	lw	a5,-24(s0)
204043ee:	e399                	bnez	a5,204043f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:430
		return 7;
204043f0:	479d                	li	a5,7
204043f2:	a269                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204043f4:	fec42703          	lw	a4,-20(s0)
204043f8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043fc:	00f71963          	bne	a4,a5,2040440e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432 (discriminator 1)
20404400:	fe842703          	lw	a4,-24(s0)
20404404:	4785                	li	a5,1
20404406:	00f71463          	bne	a4,a5,2040440e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:433
		return 8;
2040440a:	47a1                	li	a5,8
2040440c:	aa85                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040440e:	fec42703          	lw	a4,-20(s0)
20404412:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404416:	00f71963          	bne	a4,a5,20404428 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435 (discriminator 1)
2040441a:	fe842703          	lw	a4,-24(s0)
2040441e:	4789                	li	a5,2
20404420:	00f71463          	bne	a4,a5,20404428 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:436
		return 9;
20404424:	47a5                	li	a5,9
20404426:	aa99                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404428:	fec42703          	lw	a4,-20(s0)
2040442c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404430:	00f71963          	bne	a4,a5,20404442 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438 (discriminator 1)
20404434:	fe842703          	lw	a4,-24(s0)
20404438:	478d                	li	a5,3
2040443a:	00f71463          	bne	a4,a5,20404442 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:439
		return 10;
2040443e:	47a9                	li	a5,10
20404440:	aa35                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404442:	fec42703          	lw	a4,-20(s0)
20404446:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040444a:	00f71963          	bne	a4,a5,2040445c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441 (discriminator 1)
2040444e:	fe842703          	lw	a4,-24(s0)
20404452:	4791                	li	a5,4
20404454:	00f71463          	bne	a4,a5,2040445c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:442
		return 11;
20404458:	47ad                	li	a5,11
2040445a:	a20d                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040445c:	fec42703          	lw	a4,-20(s0)
20404460:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404464:	00f71963          	bne	a4,a5,20404476 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444 (discriminator 1)
20404468:	fe842703          	lw	a4,-24(s0)
2040446c:	4795                	li	a5,5
2040446e:	00f71463          	bne	a4,a5,20404476 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:445
		return 12;
20404472:	47b1                	li	a5,12
20404474:	a221                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404476:	fec42703          	lw	a4,-20(s0)
2040447a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040447e:	00f71963          	bne	a4,a5,20404490 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447 (discriminator 1)
20404482:	fe842703          	lw	a4,-24(s0)
20404486:	4799                	li	a5,6
20404488:	00f71463          	bne	a4,a5,20404490 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:448
		return 13;
2040448c:	47b5                	li	a5,13
2040448e:	a0fd                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404490:	fec42703          	lw	a4,-20(s0)
20404494:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404498:	00f71963          	bne	a4,a5,204044aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450 (discriminator 1)
2040449c:	fe842703          	lw	a4,-24(s0)
204044a0:	479d                	li	a5,7
204044a2:	00f71463          	bne	a4,a5,204044aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:451
		return 14;
204044a6:	47b9                	li	a5,14
204044a8:	a8d1                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204044aa:	fec42703          	lw	a4,-20(s0)
204044ae:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204044b2:	00f71963          	bne	a4,a5,204044c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453 (discriminator 1)
204044b6:	fe842703          	lw	a4,-24(s0)
204044ba:	47a1                	li	a5,8
204044bc:	00f71463          	bne	a4,a5,204044c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return 15;
204044c0:	47bd                	li	a5,15
204044c2:	a86d                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204044c4:	fec42703          	lw	a4,-20(s0)
204044c8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204044cc:	00f71963          	bne	a4,a5,204044de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456 (discriminator 1)
204044d0:	fe842703          	lw	a4,-24(s0)
204044d4:	47a5                	li	a5,9
204044d6:	00f71463          	bne	a4,a5,204044de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
		return 16;
204044da:	47c1                	li	a5,16
204044dc:	a045                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204044de:	fec42703          	lw	a4,-20(s0)
204044e2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204044e6:	00f71963          	bne	a4,a5,204044f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459 (discriminator 1)
204044ea:	fe842703          	lw	a4,-24(s0)
204044ee:	47a9                	li	a5,10
204044f0:	00f71463          	bne	a4,a5,204044f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:460
		return 17;
204044f4:	47c5                	li	a5,17
204044f6:	a059                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204044f8:	fec42703          	lw	a4,-20(s0)
204044fc:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404500:	00f71963          	bne	a4,a5,20404512 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462 (discriminator 1)
20404504:	fe842703          	lw	a4,-24(s0)
20404508:	47ad                	li	a5,11
2040450a:	00f71463          	bne	a4,a5,20404512 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
		return 18;
2040450e:	47c9                	li	a5,18
20404510:	a0b5                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404512:	fec42703          	lw	a4,-20(s0)
20404516:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040451a:	00f71963          	bne	a4,a5,2040452c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465 (discriminator 1)
2040451e:	fe842703          	lw	a4,-24(s0)
20404522:	47b1                	li	a5,12
20404524:	00f71463          	bne	a4,a5,2040452c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
		return 19;
20404528:	47cd                	li	a5,19
2040452a:	a889                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040452c:	fec42703          	lw	a4,-20(s0)
20404530:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404534:	00f71963          	bne	a4,a5,20404546 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468 (discriminator 1)
20404538:	fe842703          	lw	a4,-24(s0)
2040453c:	47b5                	li	a5,13
2040453e:	00f71463          	bne	a4,a5,20404546 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
		return 20;
20404542:	47d1                	li	a5,20
20404544:	a825                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404546:	fec42703          	lw	a4,-20(s0)
2040454a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040454e:	00f71963          	bne	a4,a5,20404560 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471 (discriminator 1)
20404552:	fe842703          	lw	a4,-24(s0)
20404556:	47b9                	li	a5,14
20404558:	00f71463          	bne	a4,a5,20404560 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
		return 21;
2040455c:	47d5                	li	a5,21
2040455e:	a839                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404560:	fec42703          	lw	a4,-20(s0)
20404564:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404568:	00f71963          	bne	a4,a5,2040457a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474 (discriminator 1)
2040456c:	fe842703          	lw	a4,-24(s0)
20404570:	47bd                	li	a5,15
20404572:	00f71463          	bne	a4,a5,2040457a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
		return 22;
20404576:	47d9                	li	a5,22
20404578:	a011                	j	2040457c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040457a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:480
	}
}
2040457c:	853e                	mv	a0,a5
2040457e:	4472                	lw	s0,28(sp)
20404580:	6105                	addi	sp,sp,32
20404582:	8082                	ret

20404584 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404584:	7179                	addi	sp,sp,-48
20404586:	d606                	sw	ra,44(sp)
20404588:	d422                	sw	s0,40(sp)
2040458a:	1800                	addi	s0,sp,48
2040458c:	fca42e23          	sw	a0,-36(s0)
20404590:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404594:	fdc42503          	lw	a0,-36(s0)
20404598:	33e5                	jal	20404380 <__metal_driver_sifive_gpio0_base>
2040459a:	87aa                	mv	a5,a0
2040459c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
204045a0:	fec42783          	lw	a5,-20(s0)
204045a4:	0791                	addi	a5,a5,4
204045a6:	4398                	lw	a4,0(a5)
204045a8:	fd842783          	lw	a5,-40(s0)
204045ac:	fec42683          	lw	a3,-20(s0)
204045b0:	0691                	addi	a3,a3,4
204045b2:	8fd9                	or	a5,a5,a4
204045b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204045b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204045b8:	853e                	mv	a0,a5
204045ba:	50b2                	lw	ra,44(sp)
204045bc:	5422                	lw	s0,40(sp)
204045be:	6145                	addi	sp,sp,48
204045c0:	8082                	ret

204045c2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204045c2:	7179                	addi	sp,sp,-48
204045c4:	d606                	sw	ra,44(sp)
204045c6:	d422                	sw	s0,40(sp)
204045c8:	1800                	addi	s0,sp,48
204045ca:	fca42e23          	sw	a0,-36(s0)
204045ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045d2:	fdc42503          	lw	a0,-36(s0)
204045d6:	336d                	jal	20404380 <__metal_driver_sifive_gpio0_base>
204045d8:	87aa                	mv	a5,a0
204045da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204045de:	fec42783          	lw	a5,-20(s0)
204045e2:	0791                	addi	a5,a5,4
204045e4:	439c                	lw	a5,0(a5)
204045e6:	fd842703          	lw	a4,-40(s0)
204045ea:	fff74713          	not	a4,a4
204045ee:	86ba                	mv	a3,a4
204045f0:	fec42703          	lw	a4,-20(s0)
204045f4:	0711                	addi	a4,a4,4
204045f6:	8ff5                	and	a5,a5,a3
204045f8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204045fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204045fc:	853e                	mv	a0,a5
204045fe:	50b2                	lw	ra,44(sp)
20404600:	5422                	lw	s0,40(sp)
20404602:	6145                	addi	sp,sp,48
20404604:	8082                	ret

20404606 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404606:	7179                	addi	sp,sp,-48
20404608:	d606                	sw	ra,44(sp)
2040460a:	d422                	sw	s0,40(sp)
2040460c:	1800                	addi	s0,sp,48
2040460e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404612:	fdc42503          	lw	a0,-36(s0)
20404616:	d6bff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
2040461a:	87aa                	mv	a5,a0
2040461c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404620:	fec42783          	lw	a5,-20(s0)
20404624:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404626:	853e                	mv	a0,a5
20404628:	50b2                	lw	ra,44(sp)
2040462a:	5422                	lw	s0,40(sp)
2040462c:	6145                	addi	sp,sp,48
2040462e:	8082                	ret

20404630 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404630:	7179                	addi	sp,sp,-48
20404632:	d606                	sw	ra,44(sp)
20404634:	d422                	sw	s0,40(sp)
20404636:	1800                	addi	s0,sp,48
20404638:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040463c:	fdc42503          	lw	a0,-36(s0)
20404640:	d41ff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
20404644:	87aa                	mv	a5,a0
20404646:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
2040464a:	fec42783          	lw	a5,-20(s0)
2040464e:	07b1                	addi	a5,a5,12
20404650:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404652:	853e                	mv	a0,a5
20404654:	50b2                	lw	ra,44(sp)
20404656:	5422                	lw	s0,40(sp)
20404658:	6145                	addi	sp,sp,48
2040465a:	8082                	ret

2040465c <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2040465c:	7179                	addi	sp,sp,-48
2040465e:	d606                	sw	ra,44(sp)
20404660:	d422                	sw	s0,40(sp)
20404662:	1800                	addi	s0,sp,48
20404664:	fca42e23          	sw	a0,-36(s0)
20404668:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040466c:	fdc42503          	lw	a0,-36(s0)
20404670:	d11ff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
20404674:	87aa                	mv	a5,a0
20404676:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
2040467a:	fec42783          	lw	a5,-20(s0)
2040467e:	07a1                	addi	a5,a5,8
20404680:	439c                	lw	a5,0(a5)
20404682:	fd842703          	lw	a4,-40(s0)
20404686:	fff74713          	not	a4,a4
2040468a:	86ba                	mv	a3,a4
2040468c:	fec42703          	lw	a4,-20(s0)
20404690:	0721                	addi	a4,a4,8
20404692:	8ff5                	and	a5,a5,a3
20404694:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404696:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404698:	853e                	mv	a0,a5
2040469a:	50b2                	lw	ra,44(sp)
2040469c:	5422                	lw	s0,40(sp)
2040469e:	6145                	addi	sp,sp,48
204046a0:	8082                	ret

204046a2 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
204046a2:	7179                	addi	sp,sp,-48
204046a4:	d606                	sw	ra,44(sp)
204046a6:	d422                	sw	s0,40(sp)
204046a8:	1800                	addi	s0,sp,48
204046aa:	fca42e23          	sw	a0,-36(s0)
204046ae:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046b2:	fdc42503          	lw	a0,-36(s0)
204046b6:	ccbff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
204046ba:	87aa                	mv	a5,a0
204046bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204046c0:	fec42783          	lw	a5,-20(s0)
204046c4:	07a1                	addi	a5,a5,8
204046c6:	4398                	lw	a4,0(a5)
204046c8:	fd842783          	lw	a5,-40(s0)
204046cc:	fec42683          	lw	a3,-20(s0)
204046d0:	06a1                	addi	a3,a3,8
204046d2:	8fd9                	or	a5,a5,a4
204046d4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204046d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204046d8:	853e                	mv	a0,a5
204046da:	50b2                	lw	ra,44(sp)
204046dc:	5422                	lw	s0,40(sp)
204046de:	6145                	addi	sp,sp,48
204046e0:	8082                	ret

204046e2 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204046e2:	7179                	addi	sp,sp,-48
204046e4:	d606                	sw	ra,44(sp)
204046e6:	d422                	sw	s0,40(sp)
204046e8:	1800                	addi	s0,sp,48
204046ea:	fca42e23          	sw	a0,-36(s0)
204046ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046f2:	fdc42503          	lw	a0,-36(s0)
204046f6:	c8bff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
204046fa:	87aa                	mv	a5,a0
204046fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404700:	fec42783          	lw	a5,-20(s0)
20404704:	07b1                	addi	a5,a5,12
20404706:	4398                	lw	a4,0(a5)
20404708:	fd842783          	lw	a5,-40(s0)
2040470c:	fec42683          	lw	a3,-20(s0)
20404710:	06b1                	addi	a3,a3,12
20404712:	8fd9                	or	a5,a5,a4
20404714:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404716:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404718:	853e                	mv	a0,a5
2040471a:	50b2                	lw	ra,44(sp)
2040471c:	5422                	lw	s0,40(sp)
2040471e:	6145                	addi	sp,sp,48
20404720:	8082                	ret

20404722 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404722:	7179                	addi	sp,sp,-48
20404724:	d606                	sw	ra,44(sp)
20404726:	d422                	sw	s0,40(sp)
20404728:	1800                	addi	s0,sp,48
2040472a:	fca42e23          	sw	a0,-36(s0)
2040472e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404732:	fdc42503          	lw	a0,-36(s0)
20404736:	c4bff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
2040473a:	87aa                	mv	a5,a0
2040473c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404740:	fec42783          	lw	a5,-20(s0)
20404744:	07b1                	addi	a5,a5,12
20404746:	439c                	lw	a5,0(a5)
20404748:	fd842703          	lw	a4,-40(s0)
2040474c:	fff74713          	not	a4,a4
20404750:	86ba                	mv	a3,a4
20404752:	fec42703          	lw	a4,-20(s0)
20404756:	0731                	addi	a4,a4,12
20404758:	8ff5                	and	a5,a5,a3
2040475a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2040475c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2040475e:	853e                	mv	a0,a5
20404760:	50b2                	lw	ra,44(sp)
20404762:	5422                	lw	s0,40(sp)
20404764:	6145                	addi	sp,sp,48
20404766:	8082                	ret

20404768 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404768:	7179                	addi	sp,sp,-48
2040476a:	d606                	sw	ra,44(sp)
2040476c:	d422                	sw	s0,40(sp)
2040476e:	1800                	addi	s0,sp,48
20404770:	fca42e23          	sw	a0,-36(s0)
20404774:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404778:	fdc42503          	lw	a0,-36(s0)
2040477c:	c05ff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
20404780:	87aa                	mv	a5,a0
20404782:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404786:	fec42783          	lw	a5,-20(s0)
2040478a:	07b1                	addi	a5,a5,12
2040478c:	4398                	lw	a4,0(a5)
2040478e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404792:	fec42683          	lw	a3,-20(s0)
20404796:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404798:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040479a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040479c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040479e:	853e                	mv	a0,a5
204047a0:	50b2                	lw	ra,44(sp)
204047a2:	5422                	lw	s0,40(sp)
204047a4:	6145                	addi	sp,sp,48
204047a6:	8082                	ret

204047a8 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204047a8:	7179                	addi	sp,sp,-48
204047aa:	d606                	sw	ra,44(sp)
204047ac:	d422                	sw	s0,40(sp)
204047ae:	1800                	addi	s0,sp,48
204047b0:	fca42e23          	sw	a0,-36(s0)
204047b4:	fcb42c23          	sw	a1,-40(s0)
204047b8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047bc:	fdc42503          	lw	a0,-36(s0)
204047c0:	bc1ff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
204047c4:	87aa                	mv	a5,a0
204047c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204047ca:	fec42783          	lw	a5,-20(s0)
204047ce:	03c78793          	addi	a5,a5,60
204047d2:	439c                	lw	a5,0(a5)
204047d4:	fd842703          	lw	a4,-40(s0)
204047d8:	fff74713          	not	a4,a4
204047dc:	86ba                	mv	a3,a4
204047de:	fec42703          	lw	a4,-20(s0)
204047e2:	03c70713          	addi	a4,a4,60
204047e6:	8ff5                	and	a5,a5,a3
204047e8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204047ea:	fec42783          	lw	a5,-20(s0)
204047ee:	03878793          	addi	a5,a5,56
204047f2:	4398                	lw	a4,0(a5)
204047f4:	fd442783          	lw	a5,-44(s0)
204047f8:	fec42683          	lw	a3,-20(s0)
204047fc:	03868693          	addi	a3,a3,56
20404800:	8fd9                	or	a5,a5,a4
20404802:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404804:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404806:	853e                	mv	a0,a5
20404808:	50b2                	lw	ra,44(sp)
2040480a:	5422                	lw	s0,40(sp)
2040480c:	6145                	addi	sp,sp,48
2040480e:	8082                	ret

20404810 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404810:	7179                	addi	sp,sp,-48
20404812:	d606                	sw	ra,44(sp)
20404814:	d422                	sw	s0,40(sp)
20404816:	1800                	addi	s0,sp,48
20404818:	fca42e23          	sw	a0,-36(s0)
2040481c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404820:	fdc42503          	lw	a0,-36(s0)
20404824:	b5dff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
20404828:	87aa                	mv	a5,a0
2040482a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040482e:	fec42783          	lw	a5,-20(s0)
20404832:	03878793          	addi	a5,a5,56
20404836:	439c                	lw	a5,0(a5)
20404838:	fd842703          	lw	a4,-40(s0)
2040483c:	fff74713          	not	a4,a4
20404840:	86ba                	mv	a3,a4
20404842:	fec42703          	lw	a4,-20(s0)
20404846:	03870713          	addi	a4,a4,56
2040484a:	8ff5                	and	a5,a5,a3
2040484c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2040484e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404850:	853e                	mv	a0,a5
20404852:	50b2                	lw	ra,44(sp)
20404854:	5422                	lw	s0,40(sp)
20404856:	6145                	addi	sp,sp,48
20404858:	8082                	ret

2040485a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040485a:	7179                	addi	sp,sp,-48
2040485c:	d606                	sw	ra,44(sp)
2040485e:	d422                	sw	s0,40(sp)
20404860:	1800                	addi	s0,sp,48
20404862:	fca42e23          	sw	a0,-36(s0)
20404866:	fcb42c23          	sw	a1,-40(s0)
2040486a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040486e:	fdc42503          	lw	a0,-36(s0)
20404872:	b0fff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
20404876:	87aa                	mv	a5,a0
20404878:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
2040487c:	fd442703          	lw	a4,-44(s0)
20404880:	479d                	li	a5,7
20404882:	1ce7e963          	bltu	a5,a4,20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404886:	fd442783          	lw	a5,-44(s0)
2040488a:	00279713          	slli	a4,a5,0x2
2040488e:	204057b7          	lui	a5,0x20405
20404892:	7e078793          	addi	a5,a5,2016 # 204057e0 <__metal_driver_vtable_riscv_plic0+0x4c>
20404896:	97ba                	add	a5,a5,a4
20404898:	439c                	lw	a5,0(a5)
2040489a:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040489c:	fec42783          	lw	a5,-20(s0)
204048a0:	07e1                	addi	a5,a5,24
204048a2:	439c                	lw	a5,0(a5)
204048a4:	fd842703          	lw	a4,-40(s0)
204048a8:	fff74713          	not	a4,a4
204048ac:	86ba                	mv	a3,a4
204048ae:	fec42703          	lw	a4,-20(s0)
204048b2:	0761                	addi	a4,a4,24
204048b4:	8ff5                	and	a5,a5,a3
204048b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204048b8:	fec42783          	lw	a5,-20(s0)
204048bc:	02078793          	addi	a5,a5,32
204048c0:	439c                	lw	a5,0(a5)
204048c2:	fd842703          	lw	a4,-40(s0)
204048c6:	fff74713          	not	a4,a4
204048ca:	86ba                	mv	a3,a4
204048cc:	fec42703          	lw	a4,-20(s0)
204048d0:	02070713          	addi	a4,a4,32
204048d4:	8ff5                	and	a5,a5,a3
204048d6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204048d8:	fec42783          	lw	a5,-20(s0)
204048dc:	02878793          	addi	a5,a5,40
204048e0:	439c                	lw	a5,0(a5)
204048e2:	fd842703          	lw	a4,-40(s0)
204048e6:	fff74713          	not	a4,a4
204048ea:	86ba                	mv	a3,a4
204048ec:	fec42703          	lw	a4,-20(s0)
204048f0:	02870713          	addi	a4,a4,40
204048f4:	8ff5                	and	a5,a5,a3
204048f6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
204048f8:	fec42783          	lw	a5,-20(s0)
204048fc:	03078793          	addi	a5,a5,48
20404900:	439c                	lw	a5,0(a5)
20404902:	fd842703          	lw	a4,-40(s0)
20404906:	fff74713          	not	a4,a4
2040490a:	86ba                	mv	a3,a4
2040490c:	fec42703          	lw	a4,-20(s0)
20404910:	03070713          	addi	a4,a4,48
20404914:	8ff5                	and	a5,a5,a3
20404916:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404918:	aa35                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040491a:	fec42783          	lw	a5,-20(s0)
2040491e:	07e1                	addi	a5,a5,24
20404920:	4398                	lw	a4,0(a5)
20404922:	fd842783          	lw	a5,-40(s0)
20404926:	fec42683          	lw	a3,-20(s0)
2040492a:	06e1                	addi	a3,a3,24
2040492c:	8fd9                	or	a5,a5,a4
2040492e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404930:	a215                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404932:	fec42783          	lw	a5,-20(s0)
20404936:	02078793          	addi	a5,a5,32
2040493a:	4398                	lw	a4,0(a5)
2040493c:	fd842783          	lw	a5,-40(s0)
20404940:	fec42683          	lw	a3,-20(s0)
20404944:	02068693          	addi	a3,a3,32
20404948:	8fd9                	or	a5,a5,a4
2040494a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
2040494c:	a221                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040494e:	fec42783          	lw	a5,-20(s0)
20404952:	07e1                	addi	a5,a5,24
20404954:	4398                	lw	a4,0(a5)
20404956:	fd842783          	lw	a5,-40(s0)
2040495a:	fec42683          	lw	a3,-20(s0)
2040495e:	06e1                	addi	a3,a3,24
20404960:	8fd9                	or	a5,a5,a4
20404962:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404964:	fec42783          	lw	a5,-20(s0)
20404968:	02078793          	addi	a5,a5,32
2040496c:	4398                	lw	a4,0(a5)
2040496e:	fd842783          	lw	a5,-40(s0)
20404972:	fec42683          	lw	a3,-20(s0)
20404976:	02068693          	addi	a3,a3,32
2040497a:	8fd9                	or	a5,a5,a4
2040497c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2040497e:	a8d9                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404980:	fec42783          	lw	a5,-20(s0)
20404984:	02878793          	addi	a5,a5,40
20404988:	4398                	lw	a4,0(a5)
2040498a:	fd842783          	lw	a5,-40(s0)
2040498e:	fec42683          	lw	a3,-20(s0)
20404992:	02868693          	addi	a3,a3,40
20404996:	8fd9                	or	a5,a5,a4
20404998:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2040499a:	a86d                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040499c:	fec42783          	lw	a5,-20(s0)
204049a0:	03078793          	addi	a5,a5,48
204049a4:	4398                	lw	a4,0(a5)
204049a6:	fd842783          	lw	a5,-40(s0)
204049aa:	fec42683          	lw	a3,-20(s0)
204049ae:	03068693          	addi	a3,a3,48
204049b2:	8fd9                	or	a5,a5,a4
204049b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204049b6:	a879                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204049b8:	fec42783          	lw	a5,-20(s0)
204049bc:	02878793          	addi	a5,a5,40
204049c0:	4398                	lw	a4,0(a5)
204049c2:	fd842783          	lw	a5,-40(s0)
204049c6:	fec42683          	lw	a3,-20(s0)
204049ca:	02868693          	addi	a3,a3,40
204049ce:	8fd9                	or	a5,a5,a4
204049d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204049d2:	fec42783          	lw	a5,-20(s0)
204049d6:	03078793          	addi	a5,a5,48
204049da:	4398                	lw	a4,0(a5)
204049dc:	fd842783          	lw	a5,-40(s0)
204049e0:	fec42683          	lw	a3,-20(s0)
204049e4:	03068693          	addi	a3,a3,48
204049e8:	8fd9                	or	a5,a5,a4
204049ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
204049ec:	a0a5                	j	20404a54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204049ee:	fec42783          	lw	a5,-20(s0)
204049f2:	07e1                	addi	a5,a5,24
204049f4:	4398                	lw	a4,0(a5)
204049f6:	fd842783          	lw	a5,-40(s0)
204049fa:	fec42683          	lw	a3,-20(s0)
204049fe:	06e1                	addi	a3,a3,24
20404a00:	8fd9                	or	a5,a5,a4
20404a02:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404a04:	fec42783          	lw	a5,-20(s0)
20404a08:	02078793          	addi	a5,a5,32
20404a0c:	4398                	lw	a4,0(a5)
20404a0e:	fd842783          	lw	a5,-40(s0)
20404a12:	fec42683          	lw	a3,-20(s0)
20404a16:	02068693          	addi	a3,a3,32
20404a1a:	8fd9                	or	a5,a5,a4
20404a1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404a1e:	fec42783          	lw	a5,-20(s0)
20404a22:	02878793          	addi	a5,a5,40
20404a26:	4398                	lw	a4,0(a5)
20404a28:	fd842783          	lw	a5,-40(s0)
20404a2c:	fec42683          	lw	a3,-20(s0)
20404a30:	02868693          	addi	a3,a3,40
20404a34:	8fd9                	or	a5,a5,a4
20404a36:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404a38:	fec42783          	lw	a5,-20(s0)
20404a3c:	03078793          	addi	a5,a5,48
20404a40:	4398                	lw	a4,0(a5)
20404a42:	fd842783          	lw	a5,-40(s0)
20404a46:	fec42683          	lw	a3,-20(s0)
20404a4a:	03068693          	addi	a3,a3,48
20404a4e:	8fd9                	or	a5,a5,a4
20404a50:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404a52:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404a54:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404a56:	853e                	mv	a0,a5
20404a58:	50b2                	lw	ra,44(sp)
20404a5a:	5422                	lw	s0,40(sp)
20404a5c:	6145                	addi	sp,sp,48
20404a5e:	8082                	ret

20404a60 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404a60:	7179                	addi	sp,sp,-48
20404a62:	d606                	sw	ra,44(sp)
20404a64:	d422                	sw	s0,40(sp)
20404a66:	1800                	addi	s0,sp,48
20404a68:	fca42e23          	sw	a0,-36(s0)
20404a6c:	fcb42c23          	sw	a1,-40(s0)
20404a70:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a74:	fdc42503          	lw	a0,-36(s0)
20404a78:	909ff0ef          	jal	ra,20404380 <__metal_driver_sifive_gpio0_base>
20404a7c:	87aa                	mv	a5,a0
20404a7e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404a82:	fd442703          	lw	a4,-44(s0)
20404a86:	479d                	li	a5,7
20404a88:	14e7ea63          	bltu	a5,a4,20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404a8c:	fd442783          	lw	a5,-44(s0)
20404a90:	00279713          	slli	a4,a5,0x2
20404a94:	204067b7          	lui	a5,0x20406
20404a98:	80078793          	addi	a5,a5,-2048 # 20405800 <__metal_driver_vtable_riscv_plic0+0x6c>
20404a9c:	97ba                	add	a5,a5,a4
20404a9e:	439c                	lw	a5,0(a5)
20404aa0:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404aa2:	fec42783          	lw	a5,-20(s0)
20404aa6:	07f1                	addi	a5,a5,28
20404aa8:	4398                	lw	a4,0(a5)
20404aaa:	fd842783          	lw	a5,-40(s0)
20404aae:	fec42683          	lw	a3,-20(s0)
20404ab2:	06f1                	addi	a3,a3,28
20404ab4:	8fd9                	or	a5,a5,a4
20404ab6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404ab8:	a215                	j	20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404aba:	fec42783          	lw	a5,-20(s0)
20404abe:	02478793          	addi	a5,a5,36
20404ac2:	4398                	lw	a4,0(a5)
20404ac4:	fd842783          	lw	a5,-40(s0)
20404ac8:	fec42683          	lw	a3,-20(s0)
20404acc:	02468693          	addi	a3,a3,36
20404ad0:	8fd9                	or	a5,a5,a4
20404ad2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404ad4:	a221                	j	20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404ad6:	fec42783          	lw	a5,-20(s0)
20404ada:	07f1                	addi	a5,a5,28
20404adc:	4398                	lw	a4,0(a5)
20404ade:	fd842783          	lw	a5,-40(s0)
20404ae2:	fec42683          	lw	a3,-20(s0)
20404ae6:	06f1                	addi	a3,a3,28
20404ae8:	8fd9                	or	a5,a5,a4
20404aea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404aec:	fec42783          	lw	a5,-20(s0)
20404af0:	02478793          	addi	a5,a5,36
20404af4:	4398                	lw	a4,0(a5)
20404af6:	fd842783          	lw	a5,-40(s0)
20404afa:	fec42683          	lw	a3,-20(s0)
20404afe:	02468693          	addi	a3,a3,36
20404b02:	8fd9                	or	a5,a5,a4
20404b04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404b06:	a8d9                	j	20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404b08:	fec42783          	lw	a5,-20(s0)
20404b0c:	02c78793          	addi	a5,a5,44
20404b10:	4398                	lw	a4,0(a5)
20404b12:	fd842783          	lw	a5,-40(s0)
20404b16:	fec42683          	lw	a3,-20(s0)
20404b1a:	02c68693          	addi	a3,a3,44
20404b1e:	8fd9                	or	a5,a5,a4
20404b20:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404b22:	a86d                	j	20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404b24:	fec42783          	lw	a5,-20(s0)
20404b28:	03478793          	addi	a5,a5,52
20404b2c:	4398                	lw	a4,0(a5)
20404b2e:	fd842783          	lw	a5,-40(s0)
20404b32:	fec42683          	lw	a3,-20(s0)
20404b36:	03468693          	addi	a3,a3,52
20404b3a:	8fd9                	or	a5,a5,a4
20404b3c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404b3e:	a879                	j	20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404b40:	fec42783          	lw	a5,-20(s0)
20404b44:	02c78793          	addi	a5,a5,44
20404b48:	4398                	lw	a4,0(a5)
20404b4a:	fd842783          	lw	a5,-40(s0)
20404b4e:	fec42683          	lw	a3,-20(s0)
20404b52:	02c68693          	addi	a3,a3,44
20404b56:	8fd9                	or	a5,a5,a4
20404b58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404b5a:	fec42783          	lw	a5,-20(s0)
20404b5e:	03478793          	addi	a5,a5,52
20404b62:	4398                	lw	a4,0(a5)
20404b64:	fd842783          	lw	a5,-40(s0)
20404b68:	fec42683          	lw	a3,-20(s0)
20404b6c:	03468693          	addi	a3,a3,52
20404b70:	8fd9                	or	a5,a5,a4
20404b72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404b74:	a0a5                	j	20404bdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404b76:	fec42783          	lw	a5,-20(s0)
20404b7a:	07f1                	addi	a5,a5,28
20404b7c:	4398                	lw	a4,0(a5)
20404b7e:	fd842783          	lw	a5,-40(s0)
20404b82:	fec42683          	lw	a3,-20(s0)
20404b86:	06f1                	addi	a3,a3,28
20404b88:	8fd9                	or	a5,a5,a4
20404b8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404b8c:	fec42783          	lw	a5,-20(s0)
20404b90:	02478793          	addi	a5,a5,36
20404b94:	4398                	lw	a4,0(a5)
20404b96:	fd842783          	lw	a5,-40(s0)
20404b9a:	fec42683          	lw	a3,-20(s0)
20404b9e:	02468693          	addi	a3,a3,36
20404ba2:	8fd9                	or	a5,a5,a4
20404ba4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404ba6:	fec42783          	lw	a5,-20(s0)
20404baa:	02c78793          	addi	a5,a5,44
20404bae:	4398                	lw	a4,0(a5)
20404bb0:	fd842783          	lw	a5,-40(s0)
20404bb4:	fec42683          	lw	a3,-20(s0)
20404bb8:	02c68693          	addi	a3,a3,44
20404bbc:	8fd9                	or	a5,a5,a4
20404bbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404bc0:	fec42783          	lw	a5,-20(s0)
20404bc4:	03478793          	addi	a5,a5,52
20404bc8:	4398                	lw	a4,0(a5)
20404bca:	fd842783          	lw	a5,-40(s0)
20404bce:	fec42683          	lw	a3,-20(s0)
20404bd2:	03468693          	addi	a3,a3,52
20404bd6:	8fd9                	or	a5,a5,a4
20404bd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404bda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404bdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404bde:	853e                	mv	a0,a5
20404be0:	50b2                	lw	ra,44(sp)
20404be2:	5422                	lw	s0,40(sp)
20404be4:	6145                	addi	sp,sp,48
20404be6:	8082                	ret

20404be8 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404be8:	1101                	addi	sp,sp,-32
20404bea:	ce06                	sw	ra,28(sp)
20404bec:	cc22                	sw	s0,24(sp)
20404bee:	1000                	addi	s0,sp,32
20404bf0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404bf4:	fec42503          	lw	a0,-20(s0)
20404bf8:	faeff0ef          	jal	ra,204043a6 <__metal_driver_sifive_gpio0_interrupt_parent>
20404bfc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404bfe:	853e                	mv	a0,a5
20404c00:	40f2                	lw	ra,28(sp)
20404c02:	4462                	lw	s0,24(sp)
20404c04:	6105                	addi	sp,sp,32
20404c06:	8082                	ret

20404c08 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404c08:	7179                	addi	sp,sp,-48
20404c0a:	d606                	sw	ra,44(sp)
20404c0c:	d422                	sw	s0,40(sp)
20404c0e:	1800                	addi	s0,sp,48
20404c10:	fca42e23          	sw	a0,-36(s0)
20404c14:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404c18:	fd842583          	lw	a1,-40(s0)
20404c1c:	fdc42503          	lw	a0,-36(s0)
20404c20:	fb0ff0ef          	jal	ra,204043d0 <__metal_driver_sifive_gpio0_interrupt_lines>
20404c24:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404c28:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404c2c:	853e                	mv	a0,a5
20404c2e:	50b2                	lw	ra,44(sp)
20404c30:	5422                	lw	s0,40(sp)
20404c32:	6145                	addi	sp,sp,48
20404c34:	8082                	ret

20404c36 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404c36:	1101                	addi	sp,sp,-32
20404c38:	ce22                	sw	s0,28(sp)
20404c3a:	1000                	addi	s0,sp,32
20404c3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c40:	fec42703          	lw	a4,-20(s0)
20404c44:	800007b7          	lui	a5,0x80000
20404c48:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404c4c:	00f71563          	bne	a4,a5,20404c56 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404c50:	100137b7          	lui	a5,0x10013
20404c54:	a011                	j	20404c58 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404c56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:571
	}
}
20404c58:	853e                	mv	a0,a5
20404c5a:	4472                	lw	s0,28(sp)
20404c5c:	6105                	addi	sp,sp,32
20404c5e:	8082                	ret

20404c60 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404c60:	1101                	addi	sp,sp,-32
20404c62:	ce22                	sw	s0,28(sp)
20404c64:	1000                	addi	s0,sp,32
20404c66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c6a:	fec42703          	lw	a4,-20(s0)
20404c6e:	800007b7          	lui	a5,0x80000
20404c72:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404c76:	00f71763          	bne	a4,a5,20404c84 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404c7a:	800007b7          	lui	a5,0x80000
20404c7e:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff01c>
20404c82:	a011                	j	20404c86 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404c84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:601
	}
}
20404c86:	853e                	mv	a0,a5
20404c88:	4472                	lw	s0,28(sp)
20404c8a:	6105                	addi	sp,sp,32
20404c8c:	8082                	ret

20404c8e <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404c8e:	1101                	addi	sp,sp,-32
20404c90:	ce22                	sw	s0,28(sp)
20404c92:	1000                	addi	s0,sp,32
20404c94:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c98:	fec42703          	lw	a4,-20(s0)
20404c9c:	800007b7          	lui	a5,0x80000
20404ca0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404ca4:	00f71463          	bne	a4,a5,20404cac <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:606
		return 5;
20404ca8:	4795                	li	a5,5
20404caa:	a011                	j	20404cae <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404cac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:611
	}
}
20404cae:	853e                	mv	a0,a5
20404cb0:	4472                	lw	s0,28(sp)
20404cb2:	6105                	addi	sp,sp,32
20404cb4:	8082                	ret

20404cb6 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404cb6:	1101                	addi	sp,sp,-32
20404cb8:	ce22                	sw	s0,28(sp)
20404cba:	1000                	addi	s0,sp,32
20404cbc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404cc0:	fec42703          	lw	a4,-20(s0)
20404cc4:	800007b7          	lui	a5,0x80000
20404cc8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404ccc:	00f71763          	bne	a4,a5,20404cda <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404cd0:	800007b7          	lui	a5,0x80000
20404cd4:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffec54>
20404cd8:	a011                	j	20404cdc <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404cda:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:621
	}
}
20404cdc:	853e                	mv	a0,a5
20404cde:	4472                	lw	s0,28(sp)
20404ce0:	6105                	addi	sp,sp,32
20404ce2:	8082                	ret

20404ce4 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404ce4:	1101                	addi	sp,sp,-32
20404ce6:	ce22                	sw	s0,28(sp)
20404ce8:	1000                	addi	s0,sp,32
20404cea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404cee:	fec42703          	lw	a4,-20(s0)
20404cf2:	800007b7          	lui	a5,0x80000
20404cf6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404cfa:	00f71563          	bne	a4,a5,20404d04 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404cfe:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404d02:	a011                	j	20404d06 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404d04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:631
	}
}
20404d06:	853e                	mv	a0,a5
20404d08:	4472                	lw	s0,28(sp)
20404d0a:	6105                	addi	sp,sp,32
20404d0c:	8082                	ret

20404d0e <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404d0e:	1101                	addi	sp,sp,-32
20404d10:	ce22                	sw	s0,28(sp)
20404d12:	1000                	addi	s0,sp,32
20404d14:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404d18:	fec42703          	lw	a4,-20(s0)
20404d1c:	800007b7          	lui	a5,0x80000
20404d20:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404d24:	00f71563          	bne	a4,a5,20404d2e <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:636
		return 196608;
20404d28:	000307b7          	lui	a5,0x30
20404d2c:	a011                	j	20404d30 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404d2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:641
	}
}
20404d30:	853e                	mv	a0,a5
20404d32:	4472                	lw	s0,28(sp)
20404d34:	6105                	addi	sp,sp,32
20404d36:	8082                	ret

20404d38 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404d38:	1101                	addi	sp,sp,-32
20404d3a:	ce22                	sw	s0,28(sp)
20404d3c:	1000                	addi	s0,sp,32
20404d3e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404d42:	fec42703          	lw	a4,-20(s0)
20404d46:	800007b7          	lui	a5,0x80000
20404d4a:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff31c>
20404d4e:	00f71563          	bne	a4,a5,20404d58 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:646
		return 196608;
20404d52:	000307b7          	lui	a5,0x30
20404d56:	a011                	j	20404d5a <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404d58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:651
	}
}
20404d5a:	853e                	mv	a0,a5
20404d5c:	4472                	lw	s0,28(sp)
20404d5e:	6105                	addi	sp,sp,32
20404d60:	8082                	ret

20404d62 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404d62:	1101                	addi	sp,sp,-32
20404d64:	ce06                	sw	ra,28(sp)
20404d66:	cc22                	sw	s0,24(sp)
20404d68:	1000                	addi	s0,sp,32
20404d6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404d6e:	fec42503          	lw	a0,-20(s0)
20404d72:	35fd                	jal	20404c60 <__metal_driver_sifive_uart0_interrupt_parent>
20404d74:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404d76:	853e                	mv	a0,a5
20404d78:	40f2                	lw	ra,28(sp)
20404d7a:	4462                	lw	s0,24(sp)
20404d7c:	6105                	addi	sp,sp,32
20404d7e:	8082                	ret

20404d80 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404d80:	1101                	addi	sp,sp,-32
20404d82:	ce06                	sw	ra,28(sp)
20404d84:	cc22                	sw	s0,24(sp)
20404d86:	1000                	addi	s0,sp,32
20404d88:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404d8c:	fec42503          	lw	a0,-20(s0)
20404d90:	3dfd                	jal	20404c8e <__metal_driver_sifive_uart0_interrupt_line>
20404d92:	87aa                	mv	a5,a0
20404d94:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404d98:	853e                	mv	a0,a5
20404d9a:	40f2                	lw	ra,28(sp)
20404d9c:	4462                	lw	s0,24(sp)
20404d9e:	6105                	addi	sp,sp,32
20404da0:	8082                	ret

20404da2 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404da2:	7179                	addi	sp,sp,-48
20404da4:	d606                	sw	ra,44(sp)
20404da6:	d422                	sw	s0,40(sp)
20404da8:	1800                	addi	s0,sp,48
20404daa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404dae:	fdc42503          	lw	a0,-36(s0)
20404db2:	3551                	jal	20404c36 <__metal_driver_sifive_uart0_control_base>
20404db4:	87aa                	mv	a5,a0
20404db6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404dba:	fec42783          	lw	a5,-20(s0)
20404dbe:	439c                	lw	a5,0(a5)
20404dc0:	fff7c793          	not	a5,a5
20404dc4:	83fd                	srli	a5,a5,0x1f
20404dc6:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404dca:	853e                	mv	a0,a5
20404dcc:	50b2                	lw	ra,44(sp)
20404dce:	5422                	lw	s0,40(sp)
20404dd0:	6145                	addi	sp,sp,48
20404dd2:	8082                	ret

20404dd4 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404dd4:	7179                	addi	sp,sp,-48
20404dd6:	d606                	sw	ra,44(sp)
20404dd8:	d422                	sw	s0,40(sp)
20404dda:	1800                	addi	s0,sp,48
20404ddc:	fca42e23          	sw	a0,-36(s0)
20404de0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404de4:	fdc42503          	lw	a0,-36(s0)
20404de8:	35b9                	jal	20404c36 <__metal_driver_sifive_uart0_control_base>
20404dea:	87aa                	mv	a5,a0
20404dec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404df0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404df2:	fdc42503          	lw	a0,-36(s0)
20404df6:	3775                	jal	20404da2 <__metal_driver_sifive_uart0_txready>
20404df8:	87aa                	mv	a5,a0
20404dfa:	dfe5                	beqz	a5,20404df2 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404dfc:	fec42783          	lw	a5,-20(s0)
20404e00:	fd842703          	lw	a4,-40(s0)
20404e04:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404e06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404e08:	853e                	mv	a0,a5
20404e0a:	50b2                	lw	ra,44(sp)
20404e0c:	5422                	lw	s0,40(sp)
20404e0e:	6145                	addi	sp,sp,48
20404e10:	8082                	ret

20404e12 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404e12:	7179                	addi	sp,sp,-48
20404e14:	d606                	sw	ra,44(sp)
20404e16:	d422                	sw	s0,40(sp)
20404e18:	1800                	addi	s0,sp,48
20404e1a:	fca42e23          	sw	a0,-36(s0)
20404e1e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404e22:	fdc42503          	lw	a0,-36(s0)
20404e26:	3d01                	jal	20404c36 <__metal_driver_sifive_uart0_control_base>
20404e28:	87aa                	mv	a5,a0
20404e2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404e2e:	fec42783          	lw	a5,-20(s0)
20404e32:	0791                	addi	a5,a5,4
20404e34:	439c                	lw	a5,0(a5)
20404e36:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404e3a:	fe842783          	lw	a5,-24(s0)
20404e3e:	0007d763          	bgez	a5,20404e4c <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404e42:	fd842783          	lw	a5,-40(s0)
20404e46:	577d                	li	a4,-1
20404e48:	c398                	sw	a4,0(a5)
20404e4a:	a801                	j	20404e5a <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404e4c:	fe842783          	lw	a5,-24(s0)
20404e50:	0ff7f713          	andi	a4,a5,255
20404e54:	fd842783          	lw	a5,-40(s0)
20404e58:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404e5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404e5c:	853e                	mv	a0,a5
20404e5e:	50b2                	lw	ra,44(sp)
20404e60:	5422                	lw	s0,40(sp)
20404e62:	6145                	addi	sp,sp,48
20404e64:	8082                	ret

20404e66 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404e66:	7179                	addi	sp,sp,-48
20404e68:	d622                	sw	s0,44(sp)
20404e6a:	1800                	addi	s0,sp,48
20404e6c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404e70:	fdc42783          	lw	a5,-36(s0)
20404e74:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404e78:	fec42783          	lw	a5,-20(s0)
20404e7c:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404e7e:	853e                	mv	a0,a5
20404e80:	5432                	lw	s0,44(sp)
20404e82:	6145                	addi	sp,sp,48
20404e84:	8082                	ret

20404e86 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404e86:	7179                	addi	sp,sp,-48
20404e88:	d606                	sw	ra,44(sp)
20404e8a:	d422                	sw	s0,40(sp)
20404e8c:	1800                	addi	s0,sp,48
20404e8e:	fca42e23          	sw	a0,-36(s0)
20404e92:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404e96:	fdc42783          	lw	a5,-36(s0)
20404e9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404e9e:	fdc42503          	lw	a0,-36(s0)
20404ea2:	d95ff0ef          	jal	ra,20404c36 <__metal_driver_sifive_uart0_control_base>
20404ea6:	87aa                	mv	a5,a0
20404ea8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404eac:	fdc42503          	lw	a0,-36(s0)
20404eb0:	3519                	jal	20404cb6 <__metal_driver_sifive_uart0_clock>
20404eb2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404eb6:	fd842703          	lw	a4,-40(s0)
20404eba:	fec42783          	lw	a5,-20(s0)
20404ebe:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404ec0:	fe442783          	lw	a5,-28(s0)
20404ec4:	cbb1                	beqz	a5,20404f18 <__metal_driver_sifive_uart0_set_baud_rate+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404ec6:	fe442783          	lw	a5,-28(s0)
20404eca:	439c                	lw	a5,0(a5)
20404ecc:	439c                	lw	a5,0(a5)
20404ece:	fe442503          	lw	a0,-28(s0)
20404ed2:	9782                	jalr	a5
20404ed4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404ed8:	fe042703          	lw	a4,-32(s0)
20404edc:	fd842783          	lw	a5,-40(s0)
20404ee0:	02f747b3          	div	a5,a4,a5
20404ee4:	fff78713          	addi	a4,a5,-1
20404ee8:	fe842783          	lw	a5,-24(s0)
20404eec:	07e1                	addi	a5,a5,24
20404eee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404ef0:	fe842783          	lw	a5,-24(s0)
20404ef4:	07a1                	addi	a5,a5,8
20404ef6:	439c                	lw	a5,0(a5)
20404ef8:	fe842703          	lw	a4,-24(s0)
20404efc:	0721                	addi	a4,a4,8
20404efe:	0017e793          	ori	a5,a5,1
20404f02:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404f04:	fe842783          	lw	a5,-24(s0)
20404f08:	07b1                	addi	a5,a5,12
20404f0a:	439c                	lw	a5,0(a5)
20404f0c:	fe842703          	lw	a4,-24(s0)
20404f10:	0731                	addi	a4,a4,12
20404f12:	0017e793          	ori	a5,a5,1
20404f16:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404f18:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404f1a:	853e                	mv	a0,a5
20404f1c:	50b2                	lw	ra,44(sp)
20404f1e:	5422                	lw	s0,40(sp)
20404f20:	6145                	addi	sp,sp,48
20404f22:	8082                	ret

20404f24 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404f24:	7139                	addi	sp,sp,-64
20404f26:	de06                	sw	ra,60(sp)
20404f28:	dc22                	sw	s0,56(sp)
20404f2a:	0080                	addi	s0,sp,64
20404f2c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404f30:	fcc42783          	lw	a5,-52(s0)
20404f34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404f38:	fcc42503          	lw	a0,-52(s0)
20404f3c:	cfbff0ef          	jal	ra,20404c36 <__metal_driver_sifive_uart0_control_base>
20404f40:	87aa                	mv	a5,a0
20404f42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404f46:	fcc42503          	lw	a0,-52(s0)
20404f4a:	d6dff0ef          	jal	ra,20404cb6 <__metal_driver_sifive_uart0_clock>
20404f4e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404f52:	fe842783          	lw	a5,-24(s0)
20404f56:	07a1                	addi	a5,a5,8
20404f58:	4398                	lw	a4,0(a5)
20404f5a:	fe842783          	lw	a5,-24(s0)
20404f5e:	07a1                	addi	a5,a5,8
20404f60:	86be                	mv	a3,a5
20404f62:	fff907b7          	lui	a5,0xfff90
20404f66:	17fd                	addi	a5,a5,-1
20404f68:	8ff9                	and	a5,a5,a4
20404f6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404f6c:	fe842783          	lw	a5,-24(s0)
20404f70:	07a1                	addi	a5,a5,8
20404f72:	4398                	lw	a4,0(a5)
20404f74:	fe842783          	lw	a5,-24(s0)
20404f78:	07a1                	addi	a5,a5,8
20404f7a:	86be                	mv	a3,a5
20404f7c:	67c1                	lui	a5,0x10
20404f7e:	8fd9                	or	a5,a5,a4
20404f80:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404f82:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404f84:	fe842783          	lw	a5,-24(s0)
20404f88:	07d1                	addi	a5,a5,20
20404f8a:	439c                	lw	a5,0(a5)
20404f8c:	8b85                	andi	a5,a5,1
20404f8e:	dbfd                	beqz	a5,20404f84 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404f90:	fe842783          	lw	a5,-24(s0)
20404f94:	07a1                	addi	a5,a5,8
20404f96:	439c                	lw	a5,0(a5)
20404f98:	8b89                	andi	a5,a5,2
20404f9a:	c399                	beqz	a5,20404fa0 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404f9c:	47a5                	li	a5,9
20404f9e:	a011                	j	20404fa2 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404fa0:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404fa2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404fa6:	fe442783          	lw	a5,-28(s0)
20404faa:	439c                	lw	a5,0(a5)
20404fac:	439c                	lw	a5,0(a5)
20404fae:	fe442503          	lw	a0,-28(s0)
20404fb2:	9782                	jalr	a5
20404fb4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404fb8:	fe042703          	lw	a4,-32(s0)
20404fbc:	fdc42783          	lw	a5,-36(s0)
20404fc0:	02f707b3          	mul	a5,a4,a5
20404fc4:	873e                	mv	a4,a5
20404fc6:	fec42783          	lw	a5,-20(s0)
20404fca:	43dc                	lw	a5,4(a5)
20404fcc:	02f757b3          	divu	a5,a4,a5
20404fd0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404fd4:	fc042a23          	sw	zero,-44(s0)
20404fd8:	a039                	j	20404fe6 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404fda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404fdc:	fd442783          	lw	a5,-44(s0)
20404fe0:	0785                	addi	a5,a5,1
20404fe2:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404fe6:	fd442783          	lw	a5,-44(s0)
20404fea:	fd842703          	lw	a4,-40(s0)
20404fee:	fee7c6e3          	blt	a5,a4,20404fda <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404ff2:	0001                	nop
20404ff4:	50f2                	lw	ra,60(sp)
20404ff6:	5462                	lw	s0,56(sp)
20404ff8:	6121                	addi	sp,sp,64
20404ffa:	8082                	ret

20404ffc <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404ffc:	7179                	addi	sp,sp,-48
20404ffe:	d606                	sw	ra,44(sp)
20405000:	d422                	sw	s0,40(sp)
20405002:	1800                	addi	s0,sp,48
20405004:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405008:	fdc42783          	lw	a5,-36(s0)
2040500c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405010:	fec42703          	lw	a4,-20(s0)
20405014:	fec42783          	lw	a5,-20(s0)
20405018:	43dc                	lw	a5,4(a5)
2040501a:	85be                	mv	a1,a5
2040501c:	853a                	mv	a0,a4
2040501e:	d89fc0ef          	jal	ra,20401da6 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405022:	0001                	nop
20405024:	50b2                	lw	ra,44(sp)
20405026:	5422                	lw	s0,40(sp)
20405028:	6145                	addi	sp,sp,48
2040502a:	8082                	ret

2040502c <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
2040502c:	7139                	addi	sp,sp,-64
2040502e:	de06                	sw	ra,60(sp)
20405030:	dc22                	sw	s0,56(sp)
20405032:	0080                	addi	s0,sp,64
20405034:	fca42623          	sw	a0,-52(s0)
20405038:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
2040503c:	fcc42783          	lw	a5,-52(s0)
20405040:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405044:	fcc42503          	lw	a0,-52(s0)
20405048:	c6fff0ef          	jal	ra,20404cb6 <__metal_driver_sifive_uart0_clock>
2040504c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405050:	fcc42503          	lw	a0,-52(s0)
20405054:	c91ff0ef          	jal	ra,20404ce4 <__metal_driver_sifive_uart0_pinmux>
20405058:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
2040505c:	fe842783          	lw	a5,-24(s0)
20405060:	c7b9                	beqz	a5,204050ae <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405062:	fec42783          	lw	a5,-20(s0)
20405066:	20405737          	lui	a4,0x20405
2040506a:	f2470713          	addi	a4,a4,-220 # 20404f24 <pre_rate_change_callback_func>
2040506e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405070:	fec42783          	lw	a5,-20(s0)
20405074:	fcc42703          	lw	a4,-52(s0)
20405078:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
2040507a:	fec42783          	lw	a5,-20(s0)
2040507e:	07a1                	addi	a5,a5,8
20405080:	85be                	mv	a1,a5
20405082:	fe842503          	lw	a0,-24(s0)
20405086:	20f1                	jal	20405152 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405088:	fec42783          	lw	a5,-20(s0)
2040508c:	20405737          	lui	a4,0x20405
20405090:	ffc70713          	addi	a4,a4,-4 # 20404ffc <post_rate_change_callback_func>
20405094:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405096:	fec42783          	lw	a5,-20(s0)
2040509a:	fcc42703          	lw	a4,-52(s0)
2040509e:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204050a0:	fec42783          	lw	a5,-20(s0)
204050a4:	07d1                	addi	a5,a5,20
204050a6:	85be                	mv	a1,a5
204050a8:	fe842503          	lw	a0,-24(s0)
204050ac:	28d9                	jal	20405182 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204050ae:	fec42783          	lw	a5,-20(s0)
204050b2:	fc842583          	lw	a1,-56(s0)
204050b6:	853e                	mv	a0,a5
204050b8:	ceffc0ef          	jal	ra,20401da6 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204050bc:	fe442783          	lw	a5,-28(s0)
204050c0:	cb95                	beqz	a5,204050f4 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204050c2:	fcc42503          	lw	a0,-52(s0)
204050c6:	c49ff0ef          	jal	ra,20404d0e <__metal_driver_sifive_uart0_pinmux_output_selector>
204050ca:	87aa                	mv	a5,a0
204050cc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204050d0:	fcc42503          	lw	a0,-52(s0)
204050d4:	c65ff0ef          	jal	ra,20404d38 <__metal_driver_sifive_uart0_pinmux_source_selector>
204050d8:	87aa                	mv	a5,a0
204050da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204050de:	fe442783          	lw	a5,-28(s0)
204050e2:	439c                	lw	a5,0(a5)
204050e4:	53dc                	lw	a5,36(a5)
204050e6:	fdc42603          	lw	a2,-36(s0)
204050ea:	fe042583          	lw	a1,-32(s0)
204050ee:	fe442503          	lw	a0,-28(s0)
204050f2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
204050f4:	0001                	nop
204050f6:	50f2                	lw	ra,60(sp)
204050f8:	5462                	lw	s0,56(sp)
204050fa:	6121                	addi	sp,sp,64
204050fc:	8082                	ret

204050fe <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
204050fe:	7179                	addi	sp,sp,-48
20405100:	d622                	sw	s0,44(sp)
20405102:	1800                	addi	s0,sp,48
20405104:	fca42e23          	sw	a0,-36(s0)
20405108:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040510c:	fd842783          	lw	a5,-40(s0)
20405110:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405114:	fdc42783          	lw	a5,-36(s0)
20405118:	e781                	bnez	a5,20405120 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
2040511a:	fd842783          	lw	a5,-40(s0)
2040511e:	a035                	j	2040514a <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405120:	fdc42783          	lw	a5,-36(s0)
20405124:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405128:	a031                	j	20405134 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
2040512a:	fec42783          	lw	a5,-20(s0)
2040512e:	479c                	lw	a5,8(a5)
20405130:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405134:	fec42783          	lw	a5,-20(s0)
20405138:	479c                	lw	a5,8(a5)
2040513a:	fbe5                	bnez	a5,2040512a <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
2040513c:	fec42783          	lw	a5,-20(s0)
20405140:	fd842703          	lw	a4,-40(s0)
20405144:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405146:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
2040514a:	853e                	mv	a0,a5
2040514c:	5432                	lw	s0,44(sp)
2040514e:	6145                	addi	sp,sp,48
20405150:	8082                	ret

20405152 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405152:	1101                	addi	sp,sp,-32
20405154:	ce06                	sw	ra,28(sp)
20405156:	cc22                	sw	s0,24(sp)
20405158:	1000                	addi	s0,sp,32
2040515a:	fea42623          	sw	a0,-20(s0)
2040515e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405162:	fec42783          	lw	a5,-20(s0)
20405166:	43dc                	lw	a5,4(a5)
20405168:	fe842583          	lw	a1,-24(s0)
2040516c:	853e                	mv	a0,a5
2040516e:	3f41                	jal	204050fe <_metal_clock_append_to_callbacks>
20405170:	872a                	mv	a4,a0
20405172:	fec42783          	lw	a5,-20(s0)
20405176:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405178:	0001                	nop
2040517a:	40f2                	lw	ra,28(sp)
2040517c:	4462                	lw	s0,24(sp)
2040517e:	6105                	addi	sp,sp,32
20405180:	8082                	ret

20405182 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405182:	1101                	addi	sp,sp,-32
20405184:	ce06                	sw	ra,28(sp)
20405186:	cc22                	sw	s0,24(sp)
20405188:	1000                	addi	s0,sp,32
2040518a:	fea42623          	sw	a0,-20(s0)
2040518e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405192:	fec42783          	lw	a5,-20(s0)
20405196:	479c                	lw	a5,8(a5)
20405198:	fe842583          	lw	a1,-24(s0)
2040519c:	853e                	mv	a0,a5
2040519e:	3785                	jal	204050fe <_metal_clock_append_to_callbacks>
204051a0:	872a                	mv	a4,a0
204051a2:	fec42783          	lw	a5,-20(s0)
204051a6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204051a8:	0001                	nop
204051aa:	40f2                	lw	ra,28(sp)
204051ac:	4462                	lw	s0,24(sp)
204051ae:	6105                	addi	sp,sp,32
204051b0:	8082                	ret

204051b2 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204051b2:	1101                	addi	sp,sp,-32
204051b4:	ce06                	sw	ra,28(sp)
204051b6:	cc22                	sw	s0,24(sp)
204051b8:	1000                	addi	s0,sp,32
204051ba:	fea42623          	sw	a0,-20(s0)
204051be:	fec42783          	lw	a5,-20(s0)
204051c2:	439c                	lw	a5,0(a5)
204051c4:	57dc                	lw	a5,44(a5)
204051c6:	fec42503          	lw	a0,-20(s0)
204051ca:	9782                	jalr	a5
204051cc:	87aa                	mv	a5,a0
204051ce:	853e                	mv	a0,a5
204051d0:	40f2                	lw	ra,28(sp)
204051d2:	4462                	lw	s0,24(sp)
204051d4:	6105                	addi	sp,sp,32
204051d6:	8082                	ret

204051d8 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204051d8:	1101                	addi	sp,sp,-32
204051da:	ce22                	sw	s0,28(sp)
204051dc:	1000                	addi	s0,sp,32
204051de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204051e2:	fec42783          	lw	a5,-20(s0)
204051e6:	eb89                	bnez	a5,204051f8 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204051e8:	fec42703          	lw	a4,-20(s0)
204051ec:	070a                	slli	a4,a4,0x2
204051ee:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204051f2:	97ba                	add	a5,a5,a4
204051f4:	439c                	lw	a5,0(a5)
204051f6:	a011                	j	204051fa <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
204051f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
204051fa:	853e                	mv	a0,a5
204051fc:	4472                	lw	s0,28(sp)
204051fe:	6105                	addi	sp,sp,32
20405200:	8082                	ret

20405202 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405202:	1101                	addi	sp,sp,-32
20405204:	ce22                	sw	s0,28(sp)
20405206:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405208:	f14027f3          	csrr	a5,mhartid
2040520c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405210:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405214:	853e                	mv	a0,a5
20405216:	4472                	lw	s0,28(sp)
20405218:	6105                	addi	sp,sp,32
2040521a:	8082                	ret

2040521c <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040521c:	1101                	addi	sp,sp,-32
2040521e:	ce22                	sw	s0,28(sp)
20405220:	1000                	addi	s0,sp,32
20405222:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405226:	0001                	nop
20405228:	bffd                	j	20405226 <metal_shutdown+0xa>
	...

20405280 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405280:	c7efd06f          	j	204026fe <metal_interrupt_vector_handler>

20405284 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405284:	c7afd06f          	j	204026fe <metal_interrupt_vector_handler>

20405288 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405288:	c76fd06f          	j	204026fe <metal_interrupt_vector_handler>

2040528c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040528c:	ca0fd06f          	j	2040272c <metal_software_interrupt_vector_handler>

20405290 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405290:	c6efd06f          	j	204026fe <metal_interrupt_vector_handler>

20405294 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405294:	c6afd06f          	j	204026fe <metal_interrupt_vector_handler>

20405298 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405298:	c66fd06f          	j	204026fe <metal_interrupt_vector_handler>

2040529c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040529c:	d82fd06f          	j	2040281e <metal_timer_interrupt_vector_handler>

204052a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204052a0:	c5efd06f          	j	204026fe <metal_interrupt_vector_handler>

204052a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204052a4:	c5afd06f          	j	204026fe <metal_interrupt_vector_handler>

204052a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204052a8:	c56fd06f          	j	204026fe <metal_interrupt_vector_handler>

204052ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204052ac:	c52fd06f          	j	204026fe <metal_interrupt_vector_handler>

204052b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204052b0:	c4efd06f          	j	204026fe <metal_interrupt_vector_handler>

204052b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204052b4:	c4afd06f          	j	204026fe <metal_interrupt_vector_handler>

204052b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204052b8:	c46fd06f          	j	204026fe <metal_interrupt_vector_handler>

204052bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204052bc:	c42fd06f          	j	204026fe <metal_interrupt_vector_handler>

204052c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204052c0:	835fd06f          	j	20402af4 <metal_lc0_interrupt_vector_handler>

204052c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204052c4:	8c3fd06f          	j	20402b86 <metal_lc1_interrupt_vector_handler>

204052c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204052c8:	951fd06f          	j	20402c18 <metal_lc2_interrupt_vector_handler>

204052cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204052cc:	9dffd06f          	j	20402caa <metal_lc3_interrupt_vector_handler>

204052d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204052d0:	a6dfd06f          	j	20402d3c <metal_lc4_interrupt_vector_handler>

204052d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204052d4:	afbfd06f          	j	20402dce <metal_lc5_interrupt_vector_handler>

204052d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204052d8:	b89fd06f          	j	20402e60 <metal_lc6_interrupt_vector_handler>

204052dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204052dc:	c17fd06f          	j	20402ef2 <metal_lc7_interrupt_vector_handler>

204052e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204052e0:	ca5fd06f          	j	20402f84 <metal_lc8_interrupt_vector_handler>

204052e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204052e4:	d33fd06f          	j	20403016 <metal_lc9_interrupt_vector_handler>

204052e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204052e8:	dc1fd06f          	j	204030a8 <metal_lc10_interrupt_vector_handler>

204052ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204052ec:	e4ffd06f          	j	2040313a <metal_lc11_interrupt_vector_handler>

204052f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204052f0:	eddfd06f          	j	204031cc <metal_lc12_interrupt_vector_handler>

204052f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204052f4:	f6bfd06f          	j	2040325e <metal_lc13_interrupt_vector_handler>

204052f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204052f8:	ff9fd06f          	j	204032f0 <metal_lc14_interrupt_vector_handler>

204052fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204052fc:	886fe06f          	j	20403382 <metal_lc15_interrupt_vector_handler>

20405300 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:120
{
20405300:	1101                	addi	sp,sp,-32
20405302:	ce22                	sw	s0,28(sp)
20405304:	1000                	addi	s0,sp,32
20405306:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040530a:	fec42703          	lw	a4,-20(s0)
2040530e:	800007b7          	lui	a5,0x80000
20405312:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffec54>
20405316:	00f71763          	bne	a4,a5,20405324 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040531a:	03dfd7b7          	lui	a5,0x3dfd
2040531e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405322:	a011                	j	20405326 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:125
		return 0;
20405324:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:127
}
20405326:	853e                	mv	a0,a5
20405328:	4472                	lw	s0,28(sp)
2040532a:	6105                	addi	sp,sp,32
2040532c:	8082                	ret

2040532e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040532e:	1101                	addi	sp,sp,-32
20405330:	ce06                	sw	ra,28(sp)
20405332:	cc22                	sw	s0,24(sp)
20405334:	1000                	addi	s0,sp,32
20405336:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040533a:	fec42503          	lw	a0,-20(s0)
2040533e:	37c9                	jal	20405300 <__metal_driver_fixed_clock_rate>
20405340:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405342:	853e                	mv	a0,a5
20405344:	40f2                	lw	ra,28(sp)
20405346:	4462                	lw	s0,24(sp)
20405348:	6105                	addi	sp,sp,32
2040534a:	8082                	ret

2040534c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040534c:	1101                	addi	sp,sp,-32
2040534e:	ce06                	sw	ra,28(sp)
20405350:	cc22                	sw	s0,24(sp)
20405352:	1000                	addi	s0,sp,32
20405354:	fea42623          	sw	a0,-20(s0)
20405358:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040535c:	fec42503          	lw	a0,-20(s0)
20405360:	37f9                	jal	2040532e <__metal_driver_fixed_clock_get_rate_hz>
20405362:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405364:	853e                	mv	a0,a5
20405366:	40f2                	lw	ra,28(sp)
20405368:	4462                	lw	s0,24(sp)
2040536a:	6105                	addi	sp,sp,32
2040536c:	8082                	ret

2040536e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040536e:	1101                	addi	sp,sp,-32
20405370:	ce06                	sw	ra,28(sp)
20405372:	cc22                	sw	s0,24(sp)
20405374:	1000                	addi	s0,sp,32
20405376:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040537a:	fec42503          	lw	a0,-20(s0)
2040537e:	3d79                	jal	2040521c <metal_shutdown>
