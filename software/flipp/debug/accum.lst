
/home/albertojor/GitHub/freedom-e-sdk/software/accum/debug/accum.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/accum/debug/accum.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x000054bc memsz 0x000054bc flags rwx
    LOAD off    0x00006778 vaddr 0x80000778 paddr 0x80000778 align 2**12
         filesz 0x00000000 memsz 0x00000c9c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x204054c0 align 2**12
         filesz 0x00000778 memsz 0x00000778 flags rw-
    LOAD off    0x00007778 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007778 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00004e80  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000438  20405080  20405080  00006080  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  204054b8  204054b8  000064b8  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000778  80000000  204054c0  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000009c  80000778  80000778  00006778  2**3  ALLOC
  6 .stack            00000400  80000814  80000814  00006778  2**0  ALLOC
  7 .heap             00000800  80000c14  80000c14  00006778  2**0  ALLOC
  8 .debug_info       00014233  00000000  00000000  00007778  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002704  00000000  00000000  0001b9ab  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008b0  00000000  00000000  0001e0b0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000748  00000000  00000000  0001e960  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007660  00000000  00000000  0001f0a8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036aa  00000000  00000000  00026708  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  00029db2  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  00029dda  2**0  CONTENTS, READONLY
 16 .debug_frame      000023f8  00000000  00000000  00029e08  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405080 l    d  .rodata	00000000 .rodata
204054b8 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000778 l    d  .bss	00000000 .bss
80000814 l    d  .stack	00000000 .stack
80000c14 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
20405168 l       .rodata	00000000 argv
2040516c l       .rodata	00000000 envp
20405170 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 accum.c
20400200 l     F .text	00000034 accum_write
20400234 l     F .text	00000034 accum_read
20400268 l     F .text	00000038 accum_load
204002a0 l     F .text	00000034 accum_add
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400836 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400d86 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000754 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000784 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401a40 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401aea l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401b10 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401b34 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401b70 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401cd0 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402200 l     F .text	00000024 __metal_driver_cpu_hartid
20402224 l     F .text	0000002a __metal_driver_cpu_timebase
2040224e l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403a94 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403abe l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403ae6 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403b0e l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403b36 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404080 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204040a6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204040d0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404936 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404960 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
2040498e l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
204049b6 l     F .text	0000002e __metal_driver_sifive_uart0_clock
204049e4 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404a0e l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404a38 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404c24 l     F .text	000000d8 pre_rate_change_callback_func
20404cfc l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-vector.o
20404f80 l       .text	00000000 IRQ_0
20404f84 l       .text	00000000 IRQ_1
20404f88 l       .text	00000000 IRQ_2
20404f8c l       .text	00000000 IRQ_3
20404f90 l       .text	00000000 IRQ_4
20404f94 l       .text	00000000 IRQ_5
20404f98 l       .text	00000000 IRQ_6
20404f9c l       .text	00000000 IRQ_7
20404fa0 l       .text	00000000 IRQ_8
20404fa4 l       .text	00000000 IRQ_9
20404fa8 l       .text	00000000 IRQ_10
20404fac l       .text	00000000 IRQ_11
20404fb0 l       .text	00000000 IRQ_12
20404fb4 l       .text	00000000 IRQ_13
20404fb8 l       .text	00000000 IRQ_14
20404fbc l       .text	00000000 IRQ_15
20404fc0 l       .text	00000000 IRQ_LC0
20404fc4 l       .text	00000000 IRQ_LC1
20404fc8 l       .text	00000000 IRQ_LC2
20404fcc l       .text	00000000 IRQ_LC3
20404fd0 l       .text	00000000 IRQ_LC4
20404fd4 l       .text	00000000 IRQ_LC5
20404fd8 l       .text	00000000 IRQ_LC6
20404fdc l       .text	00000000 IRQ_LC7
20404fe0 l       .text	00000000 IRQ_LC8
20404fe4 l       .text	00000000 IRQ_LC9
20404fe8 l       .text	00000000 IRQ_LC10
20404fec l       .text	00000000 IRQ_LC11
20404ff0 l       .text	00000000 IRQ_LC12
20404ff4 l       .text	00000000 IRQ_LC13
20404ff8 l       .text	00000000 IRQ_LC14
20404ffc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405000 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
204054bc l       .init_array	00000000 __fini_array_end
204054bc l       .init_array	00000000 __fini_array_start
204054bc l       .init_array	00000000 __init_array_end
204054b8 l       .init_array	00000000 __preinit_array_end
204054b8 l       .init_array	00000000 __init_array_start
204054b8 l       .init_array	00000000 __preinit_array_start
20405498 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204011ea g     F .text	00000028 _isatty_r
20402a3c  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204003d0 g     F .text	000000da _puts_r
20401212 g     F .text	0000002c _lseek_r
20404b86 g     F .text	0000009e __metal_driver_sifive_uart0_set_baud_rate
20401eac g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204029aa  w    F .text	00000092 metal_lc3_interrupt_vector_handler
204031fc g     F .text	00000038 __metal_valid_interrupt_id
2040038c g     F .text	00000044 printf
20403622 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
20404dfe g     F .text	00000054 _metal_clock_append_to_callbacks
20403b86 g     F .text	00000038 __metal_plic0_complete_interrupt
2040347c g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401130 g     F .text	00000036 __sseek
204008ec g     F .text	0000006a __sinit
204004b8 g     F .text	000000c0 __swbuf_r
204008a8 g     F .text	00000044 __sfmoreglue
2040125a g     F .text	00000002 __malloc_unlock
20404ed8 g     F .text	0000002a metal_cpu_get
80000728 g     O .data	00000020 __metal_dt_serial_10013000
20404510 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
2040517c g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80000814 g       .bss	00000000 metal_segment_bss_target_end
20401ba0 g     F .text	0000009a __metal_clint0_mtime_get
20403a28 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204042c2 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
204017c4 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404aa2 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000778 g       .bss	00000000 metal_segment_bss_target_start
20401c3a g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
204011c0 g     F .text	0000002a _fstat_r
20404760 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000810 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20404e52 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402d16  w    F .text	00000092 metal_lc9_interrupt_vector_handler
204053d0 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405390 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401abc g     F .text	0000002e metal_uart_set_baud_rate
20404d2c g     F .text	000000d2 __metal_driver_sifive_uart0_init
204036b6 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80000c14 g       .heap	00000000 metal_segment_heap_target_start
2040089e g     F .text	0000000a _cleanup_r
80000764 g     O .data	00000004 __metal_dt_cpu_0
20402c84  w    F .text	00000092 metal_lc8_interrupt_vector_handler
204004aa g     F .text	0000000e puts
20402f5e  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204023e2 g     F .text	00000018 __metal_default_exception_handler
20401658 g     F .text	00000026 _fstat
204021cc g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403c22 g     F .text	00000062 __metal_plic0_set_priority
2040363e g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402278 g     F .text	0000002c __metal_driver_cpu_get
20405344 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204022d6 g     F .text	00000018 __metal_interrupt_global_disable
20402bf2  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402da8  w    F .text	00000092 metal_lc10_interrupt_vector_handler
2040108a g     F .text	00000028 _sbrk_r
20404038 g     F .text	00000048 __metal_driver_riscv_plic0_disable
204032f0 g     F .text	0000004e __metal_exception_register
2040160a g     F .text	0000002c _read_r
2040384a g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
204043a2 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204024ce g     F .text	00000064 __metal_default_sw_handler
20404e82 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404a62 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
2040167e g     F .text	00000020 _isatty
20404468 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
8000076c g     O .data	00000008 __metal_driver_vtable_fixed_clock
80000750 g     O .data	00000004 _global_impure_ptr
20402532  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401834 g     F .text	0000006a __libc_init_array
204043e2 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20402e3a  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204035ca g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
204016f2 g     F .text	0000005a _sbrk
2040435c g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
20402338 g     F .text	0000001a __metal_interrupt_timer_disable
2040455a g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403900 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
2040545c g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
204044a8 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204017fc g     F .text	00000038 __libc_fini_array
204048e8 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
2040388a g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
2040238a g     F .text	0000002c __metal_interrupt_local_enable
20402198 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204019ee g     F .text	0000002c metal_tty_putc
20403d44 g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
204050cc g     O .rodata	00000020 __sf_fake_stderr
2040236e g     F .text	0000001c __metal_interrupt_external_disable
20404a80 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
2040369a g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040333e g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400db0 g     F .text	00000042 __sfputs_r
204039e2 g     F .text	00000046 __metal_driver_cpu_exception_register
204022ee g     F .text	00000018 __metal_interrupt_software_enable
20402886  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040123e g     F .text	0000001a memchr
20400bfc g     F .text	000000ac _free_r
80000780 g     O .bss	00000004 _global_atexit
20403114 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401926 g     F .text	000000c8 __call_exitprocs
80000c14 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040169e g     F .text	0000002a _lseek
204039c2 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403a56 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402352 g     F .text	0000001c __metal_interrupt_external_enable
2040189e g     F .text	00000088 __register_exitproc
20404ad4 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20403dea g     F .text	00000144 __metal_driver_riscv_plic0_init
20403ff0 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404330 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402b60  w    F .text	00000092 metal_lc6_interrupt_vector_handler
204022a4 g     F .text	0000001a __metal_myhart_id
20404908 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402440  w    F .text	0000008e metal_software_interrupt_vector_handler
204035f6 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401198 g     F .text	00000028 _close_r
20404b66 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401d8e g     F .text	000000da __metal_driver_riscv_clint0_register
8000075c g     O .data	00000008 __metal_dt_clint_2000000
20400578 g     F .text	00000110 __swsetup_r
20400956 g     F .text	0000009e __sfp
204010b2 g     F .text	00000030 __sread
20404284 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
20402412  w    F .text	0000002e metal_interrupt_vector_handler
20401258 g     F .text	00000002 __malloc_lock
204007d2 g     F .text	00000064 _fflush_r
20403bf6 g     F .text	0000002c __metal_plic0_get_threshold
204050ec g     O .rodata	00000020 __sf_fake_stdin
20403234 g     F .text	000000bc __metal_local_interrupt_enable
20402064 g     F .text	00000134 __metal_driver_riscv_clint0_command_request
80000748 g     O .data	00000004 data
20400b54 g     F .text	000000a8 memset
20402ace  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204002d4 g     F .text	000000b8 main
80000778 g       .data	00000000 metal_segment_data_target_end
2040389e g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403962 g     F .text	00000060 __metal_driver_cpu_get_msip
20404f1c g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403a74 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403b58 g     F .text	0000002e __metal_plic0_claim_interrupt
20401166 g     F .text	00000006 __sclose
20402ecc  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400ca8 g     F .text	000000de _malloc_r
20401e90 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403728 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20404f02 g     F .text	0000001a metal_cpu_get_current_hartid
20404f80 g       .text	00000000 __metal_vector_table
204054c0 g       *ABS*	00000000 metal_segment_itim_source_start
80000758  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
2040038c g     F .text	00000044 iprintf
204022be g     F .text	00000018 __metal_interrupt_global_enable
204017ba g     F .text	0000000a atexit
20401a1a g     F .text	00000026 metal_tty_putc_raw
2040116c g     F .text	0000002c _write_r
2040231e g     F .text	0000001a __metal_interrupt_timer_enable
20404b12 g     F .text	00000054 __metal_driver_sifive_uart0_getc
20401fb2 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2040125c g     F .text	0000010c _printf_common
8000074c g     O .data	00000004 _impure_ptr
204037d4 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400688 g     F .text	0000014a __sflush_r
2040502e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20401f00 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
204054c0 g       *ABS*	00000000 metal_segment_data_source_start
80001414 g       .heap	00000000 metal_segment_heap_target_end
20403164 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400a60 g     F .text	00000058 __swhatbuf_r
20404422 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204025c0 g     F .text	00000066 __metal_default_timer_handler
2040174c g     F .text	0000006e _write
20403d5c g     F .text	0000008e __metal_plic0_handler
20402918  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403082  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20404eb2 g     F .text	00000026 metal_cpu_interrupt_controller
204010e2 g     F .text	0000004e __swrite
204017d0 g     F .text	0000002c exit
20400df2 g     F .text	00000298 _vfiprintf_r
204009f4 g     F .text	0000006c _fwalk_reent
2040504c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
2040510c g     O .rodata	00000020 __sf_fake_stdout
80000768 g     O .data	00000004 __metal_dt_gpio_10012000
204023fa g     F .text	00000018 __metal_default_interrupt_handler
20401a8e g     F .text	0000002e metal_uart_putc
204016c8 g     F .text	0000002a _read
20404306 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402680 g     F .text	0000014e __metal_exception_handler
204027f4  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040506e g     F .text	00000012 _exit
2040376e g     F .text	00000066 __metal_driver_cpu_mtime_get
20400ab8 g     F .text	0000009c __smakebuf_r
20401e68 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401368 g     F .text	000002a2 _printf_i
8000077c g     O .bss	00000004 __malloc_sbrk_start
20402ff0  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401d06 g     F .text	00000088 __metal_driver_riscv_clint0_init
80000778 g     O .bss	00000004 __malloc_free_list
20400df2 g     F .text	00000298 _vfprintf_r
20403860 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403cb8 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403874 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
204023b6 g     F .text	0000002c __metal_interrupt_local_disable
20402306 g     F .text	00000018 __metal_interrupt_software_disable
20403c84 g     F .text	00000034 __metal_plic0_get_priority
20401a62 g     F .text	0000002c metal_uart_init
20403bbe g     F .text	00000038 __metal_plic0_set_threshold
20401636 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20403f2e g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	ccc18113          	addi	sp,gp,-820 # 80000c14 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00005297          	auipc	t0,0x5
204000ac:	41828293          	addi	t0,t0,1048 # 204054c0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	83018393          	addi	t2,gp,-2000 # 80000778 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00005297          	auipc	t0,0x5
204000d8:	3ec28293          	addi	t0,t0,1004 # 204054c0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	67030313          	addi	t1,t1,1648 # 80000778 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	8cc18393          	addi	t2,gp,-1844 # 80000814 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00001517          	auipc	a0,0x1
2040012a:	6d650513          	addi	a0,a0,1750 # 204017fc <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	68c010ef          	jal	ra,204017ba <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	702010ef          	jal	ra,20401834 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	00e58593          	addi	a1,a1,14 # 20405168 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	00a60613          	addi	a2,a2,10 # 2040516c <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	664010ef          	jal	ra,204017d0 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	22a1                	jal	204002d4 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <accum_write>:
accum_write():
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:8
#include "riscv_asm.h"
#include "encoding.h"


static inline void accum_write(int idx, unsigned int data)
{
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
20400206:	fea42623          	sw	a0,-20(s0)
2040020a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:9
	ROCC_INSTRUCTION_SS(0, data, idx, 0);
2040020e:	fe842603          	lw	a2,-24(s0)
20400212:	87b2                	mv	a5,a2
20400214:	4801                	li	a6,0
20400216:	85be                	mv	a1,a5
20400218:	8642                	mv	a2,a6
2040021a:	fec42783          	lw	a5,-20(s0)
2040021e:	86be                	mv	a3,a5
20400220:	87fd                	srai	a5,a5,0x1f
20400222:	873e                	mv	a4,a5
20400224:	8636                	mv	a2,a3
20400226:	86ba                	mv	a3,a4
20400228:	00c5b00b          	0xc5b00b
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:10
}
2040022c:	0001                	nop
2040022e:	4472                	lw	s0,28(sp)
20400230:	6105                	addi	sp,sp,32
20400232:	8082                	ret

20400234 <accum_read>:
accum_read():
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:13

static inline unsigned int accum_read(int idx)
{
20400234:	7179                	addi	sp,sp,-48
20400236:	d622                	sw	s0,44(sp)
20400238:	1800                	addi	s0,sp,48
2040023a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:15
	unsigned int value;
	ROCC_INSTRUCTION_DSS(0, value, 0, idx, 1);
2040023e:	4581                	li	a1,0
20400240:	4601                	li	a2,0
20400242:	fdc42783          	lw	a5,-36(s0)
20400246:	86be                	mv	a3,a5
20400248:	87fd                	srai	a5,a5,0x1f
2040024a:	873e                	mv	a4,a5
2040024c:	8636                	mv	a2,a3
2040024e:	86ba                	mv	a3,a4
20400250:	02c5f50b          	0x2c5f50b
20400254:	87aa                	mv	a5,a0
20400256:	882e                	mv	a6,a1
20400258:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:16
	return value;
2040025c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:17
}
20400260:	853e                	mv	a0,a5
20400262:	5432                	lw	s0,44(sp)
20400264:	6145                	addi	sp,sp,48
20400266:	8082                	ret

20400268 <accum_load>:
accum_load():
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:20

static inline void accum_load(int idx, void *ptr)
{
20400268:	1101                	addi	sp,sp,-32
2040026a:	ce22                	sw	s0,28(sp)
2040026c:	1000                	addi	s0,sp,32
2040026e:	fea42623          	sw	a0,-20(s0)
20400272:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:21
	asm volatile ("fence");
20400276:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:22
	ROCC_INSTRUCTION_SS(0, (uintptr_t) ptr, idx, 2);
2040027a:	fe842603          	lw	a2,-24(s0)
2040027e:	87b2                	mv	a5,a2
20400280:	4801                	li	a6,0
20400282:	85be                	mv	a1,a5
20400284:	8642                	mv	a2,a6
20400286:	fec42783          	lw	a5,-20(s0)
2040028a:	86be                	mv	a3,a5
2040028c:	87fd                	srai	a5,a5,0x1f
2040028e:	873e                	mv	a4,a5
20400290:	8636                	mv	a2,a3
20400292:	86ba                	mv	a3,a4
20400294:	04c5b00b          	0x4c5b00b
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:23
}
20400298:	0001                	nop
2040029a:	4472                	lw	s0,28(sp)
2040029c:	6105                	addi	sp,sp,32
2040029e:	8082                	ret

204002a0 <accum_add>:
accum_add():
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:26

static inline void accum_add(int idx, unsigned int addend)
{	
204002a0:	1101                	addi	sp,sp,-32
204002a2:	ce22                	sw	s0,28(sp)
204002a4:	1000                	addi	s0,sp,32
204002a6:	fea42623          	sw	a0,-20(s0)
204002aa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:27
	ROCC_INSTRUCTION_SS(0, addend, idx, 3);
204002ae:	fe842603          	lw	a2,-24(s0)
204002b2:	87b2                	mv	a5,a2
204002b4:	4801                	li	a6,0
204002b6:	85be                	mv	a1,a5
204002b8:	8642                	mv	a2,a6
204002ba:	fec42783          	lw	a5,-20(s0)
204002be:	86be                	mv	a3,a5
204002c0:	87fd                	srai	a5,a5,0x1f
204002c2:	873e                	mv	a4,a5
204002c4:	8636                	mv	a2,a3
204002c6:	86ba                	mv	a3,a4
204002c8:	06c5b00b          	0x6c5b00b
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:28
}
204002cc:	0001                	nop
204002ce:	4472                	lw	s0,28(sp)
204002d0:	6105                	addi	sp,sp,32
204002d2:	8082                	ret

204002d4 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:33

unsigned int data = 0x3421L;

int main(void)
{	// MSTATUS_FS = FPU on , = MSTATUS_XS accelerator on, MSTATUS_VS = vector unit on 
204002d4:	1101                	addi	sp,sp,-32
204002d6:	ce06                	sw	ra,28(sp)
204002d8:	cc22                	sw	s0,24(sp)
204002da:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:35
	//write_csr(mstatus, MSTATUS_FS | MSTATUS_XS |MSTATUS_VS);
	write_csr(mstatus, MSTATUS_XS);
204002dc:	67e1                	lui	a5,0x18
204002de:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:38

	unsigned int result;
	printf("Start...\n");
204002e2:	204057b7          	lui	a5,0x20405
204002e6:	08078513          	addi	a0,a5,128 # 20405080 <_exit+0x12>
204002ea:	22c1                	jal	204004aa <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:40

	accum_load(0, &data);
204002ec:	800007b7          	lui	a5,0x80000
204002f0:	74878593          	addi	a1,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff334>
204002f4:	4501                	li	a0,0
204002f6:	3f8d                	jal	20400268 <accum_load>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:41
	printf("data addr %lx \n", data);
204002f8:	800007b7          	lui	a5,0x80000
204002fc:	7487a783          	lw	a5,1864(a5) # 80000748 <metal_segment_heap_target_end+0xfffff334>
20400300:	85be                	mv	a1,a5
20400302:	204057b7          	lui	a5,0x20405
20400306:	08c78513          	addi	a0,a5,140 # 2040508c <_exit+0x1e>
2040030a:	2049                	jal	2040038c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:42
	printf("data value %l \n", &data);
2040030c:	800007b7          	lui	a5,0x80000
20400310:	74878593          	addi	a1,a5,1864 # 80000748 <metal_segment_heap_target_end+0xfffff334>
20400314:	204057b7          	lui	a5,0x20405
20400318:	09c78513          	addi	a0,a5,156 # 2040509c <_exit+0x2e>
2040031c:	2885                	jal	2040038c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:43
	accum_add(0, 2);
2040031e:	4589                	li	a1,2
20400320:	4501                	li	a0,0
20400322:	3fbd                	jal	204002a0 <accum_add>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:44
	result = accum_read(0);
20400324:	4501                	li	a0,0
20400326:	3739                	jal	20400234 <accum_read>
20400328:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:45
	printf("result :%l \n", result);
2040032c:	fec42583          	lw	a1,-20(s0)
20400330:	204057b7          	lui	a5,0x20405
20400334:	0ac78513          	addi	a0,a5,172 # 204050ac <_exit+0x3e>
20400338:	2891                	jal	2040038c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:47

	if (result != data + 2)
2040033a:	800007b7          	lui	a5,0x80000
2040033e:	7487a783          	lw	a5,1864(a5) # 80000748 <metal_segment_heap_target_end+0xfffff334>
20400342:	0789                	addi	a5,a5,2
20400344:	fec42703          	lw	a4,-20(s0)
20400348:	00f70463          	beq	a4,a5,20400350 <main+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:48
		return 1;
2040034c:	4785                	li	a5,1
2040034e:	a815                	j	20400382 <main+0xae>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:50

	accum_write(0, 3);
20400350:	458d                	li	a1,3
20400352:	4501                	li	a0,0
20400354:	3575                	jal	20400200 <accum_write>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:51
	accum_add(0, 1);
20400356:	4585                	li	a1,1
20400358:	4501                	li	a0,0
2040035a:	3799                	jal	204002a0 <accum_add>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:52
	result = accum_read(0);
2040035c:	4501                	li	a0,0
2040035e:	3dd9                	jal	20400234 <accum_read>
20400360:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:53
	printf("last result %l", result);
20400364:	fec42583          	lw	a1,-20(s0)
20400368:	204057b7          	lui	a5,0x20405
2040036c:	0bc78513          	addi	a0,a5,188 # 204050bc <_exit+0x4e>
20400370:	2831                	jal	2040038c <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:54
	if (result != 4)
20400372:	fec42703          	lw	a4,-20(s0)
20400376:	4791                	li	a5,4
20400378:	00f70463          	beq	a4,a5,20400380 <main+0xac>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:55
		return 2;
2040037c:	4789                	li	a5,2
2040037e:	a011                	j	20400382 <main+0xae>
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:57

	return 0;
20400380:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/accum/accum.c:58
}
20400382:	853e                	mv	a0,a5
20400384:	40f2                	lw	ra,28(sp)
20400386:	4462                	lw	s0,24(sp)
20400388:	6105                	addi	sp,sp,32
2040038a:	8082                	ret

2040038c <iprintf>:
printf():
2040038c:	7139                	addi	sp,sp,-64
2040038e:	da3e                	sw	a5,52(sp)
20400390:	d22e                	sw	a1,36(sp)
20400392:	d432                	sw	a2,40(sp)
20400394:	d636                	sw	a3,44(sp)
20400396:	d83a                	sw	a4,48(sp)
20400398:	dc42                	sw	a6,56(sp)
2040039a:	de46                	sw	a7,60(sp)
2040039c:	5fc00797          	auipc	a5,0x5fc00
204003a0:	3b078793          	addi	a5,a5,944 # 8000074c <_impure_ptr>
204003a4:	cc22                	sw	s0,24(sp)
204003a6:	4380                	lw	s0,0(a5)
204003a8:	ca26                	sw	s1,20(sp)
204003aa:	ce06                	sw	ra,28(sp)
204003ac:	84aa                	mv	s1,a0
204003ae:	c409                	beqz	s0,204003b8 <iprintf+0x2c>
204003b0:	4c1c                	lw	a5,24(s0)
204003b2:	e399                	bnez	a5,204003b8 <iprintf+0x2c>
204003b4:	8522                	mv	a0,s0
204003b6:	2b1d                	jal	204008ec <__sinit>
204003b8:	440c                	lw	a1,8(s0)
204003ba:	1054                	addi	a3,sp,36
204003bc:	8626                	mv	a2,s1
204003be:	8522                	mv	a0,s0
204003c0:	c636                	sw	a3,12(sp)
204003c2:	231000ef          	jal	ra,20400df2 <_vfiprintf_r>
204003c6:	40f2                	lw	ra,28(sp)
204003c8:	4462                	lw	s0,24(sp)
204003ca:	44d2                	lw	s1,20(sp)
204003cc:	6121                	addi	sp,sp,64
204003ce:	8082                	ret

204003d0 <_puts_r>:
_puts_r():
204003d0:	1101                	addi	sp,sp,-32
204003d2:	ca26                	sw	s1,20(sp)
204003d4:	c84a                	sw	s2,16(sp)
204003d6:	ce06                	sw	ra,28(sp)
204003d8:	cc22                	sw	s0,24(sp)
204003da:	c64e                	sw	s3,12(sp)
204003dc:	c452                	sw	s4,8(sp)
204003de:	84aa                	mv	s1,a0
204003e0:	892e                	mv	s2,a1
204003e2:	c501                	beqz	a0,204003ea <_puts_r+0x1a>
204003e4:	4d1c                	lw	a5,24(a0)
204003e6:	e391                	bnez	a5,204003ea <_puts_r+0x1a>
204003e8:	2311                	jal	204008ec <__sinit>
204003ea:	4c9c                	lw	a5,24(s1)
204003ec:	4480                	lw	s0,8(s1)
204003ee:	e399                	bnez	a5,204003f4 <_puts_r+0x24>
204003f0:	8526                	mv	a0,s1
204003f2:	29ed                	jal	204008ec <__sinit>
204003f4:	00005797          	auipc	a5,0x5
204003f8:	cf878793          	addi	a5,a5,-776 # 204050ec <__sf_fake_stdin>
204003fc:	02f41c63          	bne	s0,a5,20400434 <_puts_r+0x64>
20400400:	40c0                	lw	s0,4(s1)
20400402:	00c45783          	lhu	a5,12(s0)
20400406:	8ba1                	andi	a5,a5,8
20400408:	c7b1                	beqz	a5,20400454 <_puts_r+0x84>
2040040a:	481c                	lw	a5,16(s0)
2040040c:	c7a1                	beqz	a5,20400454 <_puts_r+0x84>
2040040e:	59fd                	li	s3,-1
20400410:	4a29                	li	s4,10
20400412:	441c                	lw	a5,8(s0)
20400414:	00094583          	lbu	a1,0(s2)
20400418:	17fd                	addi	a5,a5,-1
2040041a:	e9b1                	bnez	a1,2040046e <_puts_r+0x9e>
2040041c:	c41c                	sw	a5,8(s0)
2040041e:	0607de63          	bgez	a5,2040049a <_puts_r+0xca>
20400422:	8622                	mv	a2,s0
20400424:	45a9                	li	a1,10
20400426:	8526                	mv	a0,s1
20400428:	2841                	jal	204004b8 <__swbuf_r>
2040042a:	57fd                	li	a5,-1
2040042c:	02f50863          	beq	a0,a5,2040045c <_puts_r+0x8c>
20400430:	4529                	li	a0,10
20400432:	a035                	j	2040045e <_puts_r+0x8e>
20400434:	00005797          	auipc	a5,0x5
20400438:	cd878793          	addi	a5,a5,-808 # 2040510c <__sf_fake_stdout>
2040043c:	00f41463          	bne	s0,a5,20400444 <_puts_r+0x74>
20400440:	4480                	lw	s0,8(s1)
20400442:	b7c1                	j	20400402 <_puts_r+0x32>
20400444:	00005797          	auipc	a5,0x5
20400448:	c8878793          	addi	a5,a5,-888 # 204050cc <__sf_fake_stderr>
2040044c:	faf41be3          	bne	s0,a5,20400402 <_puts_r+0x32>
20400450:	44c0                	lw	s0,12(s1)
20400452:	bf45                	j	20400402 <_puts_r+0x32>
20400454:	85a2                	mv	a1,s0
20400456:	8526                	mv	a0,s1
20400458:	2205                	jal	20400578 <__swsetup_r>
2040045a:	d955                	beqz	a0,2040040e <_puts_r+0x3e>
2040045c:	557d                	li	a0,-1
2040045e:	40f2                	lw	ra,28(sp)
20400460:	4462                	lw	s0,24(sp)
20400462:	44d2                	lw	s1,20(sp)
20400464:	4942                	lw	s2,16(sp)
20400466:	49b2                	lw	s3,12(sp)
20400468:	4a22                	lw	s4,8(sp)
2040046a:	6105                	addi	sp,sp,32
2040046c:	8082                	ret
2040046e:	c41c                	sw	a5,8(s0)
20400470:	0905                	addi	s2,s2,1
20400472:	0007d763          	bgez	a5,20400480 <_puts_r+0xb0>
20400476:	4c18                	lw	a4,24(s0)
20400478:	00e7cb63          	blt	a5,a4,2040048e <_puts_r+0xbe>
2040047c:	01458963          	beq	a1,s4,2040048e <_puts_r+0xbe>
20400480:	401c                	lw	a5,0(s0)
20400482:	00178713          	addi	a4,a5,1
20400486:	c018                	sw	a4,0(s0)
20400488:	00b78023          	sb	a1,0(a5)
2040048c:	b759                	j	20400412 <_puts_r+0x42>
2040048e:	8622                	mv	a2,s0
20400490:	8526                	mv	a0,s1
20400492:	201d                	jal	204004b8 <__swbuf_r>
20400494:	f7351fe3          	bne	a0,s3,20400412 <_puts_r+0x42>
20400498:	b7d1                	j	2040045c <_puts_r+0x8c>
2040049a:	401c                	lw	a5,0(s0)
2040049c:	00178713          	addi	a4,a5,1
204004a0:	c018                	sw	a4,0(s0)
204004a2:	4729                	li	a4,10
204004a4:	00e78023          	sb	a4,0(a5)
204004a8:	b761                	j	20400430 <_puts_r+0x60>

204004aa <puts>:
puts():
204004aa:	5fc00797          	auipc	a5,0x5fc00
204004ae:	2a278793          	addi	a5,a5,674 # 8000074c <_impure_ptr>
204004b2:	85aa                	mv	a1,a0
204004b4:	4388                	lw	a0,0(a5)
204004b6:	bf29                	j	204003d0 <_puts_r>

204004b8 <__swbuf_r>:
__swbuf_r():
204004b8:	1101                	addi	sp,sp,-32
204004ba:	cc22                	sw	s0,24(sp)
204004bc:	ca26                	sw	s1,20(sp)
204004be:	c84a                	sw	s2,16(sp)
204004c0:	ce06                	sw	ra,28(sp)
204004c2:	c64e                	sw	s3,12(sp)
204004c4:	84aa                	mv	s1,a0
204004c6:	892e                	mv	s2,a1
204004c8:	8432                	mv	s0,a2
204004ca:	c501                	beqz	a0,204004d2 <__swbuf_r+0x1a>
204004cc:	4d1c                	lw	a5,24(a0)
204004ce:	e391                	bnez	a5,204004d2 <__swbuf_r+0x1a>
204004d0:	2931                	jal	204008ec <__sinit>
204004d2:	00005797          	auipc	a5,0x5
204004d6:	c1a78793          	addi	a5,a5,-998 # 204050ec <__sf_fake_stdin>
204004da:	06f41963          	bne	s0,a5,2040054c <__swbuf_r+0x94>
204004de:	40c0                	lw	s0,4(s1)
204004e0:	4c1c                	lw	a5,24(s0)
204004e2:	c41c                	sw	a5,8(s0)
204004e4:	00c45783          	lhu	a5,12(s0)
204004e8:	8ba1                	andi	a5,a5,8
204004ea:	c3c9                	beqz	a5,2040056c <__swbuf_r+0xb4>
204004ec:	481c                	lw	a5,16(s0)
204004ee:	cfbd                	beqz	a5,2040056c <__swbuf_r+0xb4>
204004f0:	481c                	lw	a5,16(s0)
204004f2:	4008                	lw	a0,0(s0)
204004f4:	0ff97993          	andi	s3,s2,255
204004f8:	0ff97913          	andi	s2,s2,255
204004fc:	8d1d                	sub	a0,a0,a5
204004fe:	485c                	lw	a5,20(s0)
20400500:	00f54663          	blt	a0,a5,2040050c <__swbuf_r+0x54>
20400504:	85a2                	mv	a1,s0
20400506:	8526                	mv	a0,s1
20400508:	24e9                	jal	204007d2 <_fflush_r>
2040050a:	e52d                	bnez	a0,20400574 <__swbuf_r+0xbc>
2040050c:	441c                	lw	a5,8(s0)
2040050e:	0505                	addi	a0,a0,1
20400510:	17fd                	addi	a5,a5,-1
20400512:	c41c                	sw	a5,8(s0)
20400514:	401c                	lw	a5,0(s0)
20400516:	00178713          	addi	a4,a5,1
2040051a:	c018                	sw	a4,0(s0)
2040051c:	01378023          	sb	s3,0(a5)
20400520:	485c                	lw	a5,20(s0)
20400522:	00a78963          	beq	a5,a0,20400534 <__swbuf_r+0x7c>
20400526:	00c45783          	lhu	a5,12(s0)
2040052a:	8b85                	andi	a5,a5,1
2040052c:	cb81                	beqz	a5,2040053c <__swbuf_r+0x84>
2040052e:	47a9                	li	a5,10
20400530:	00f91663          	bne	s2,a5,2040053c <__swbuf_r+0x84>
20400534:	85a2                	mv	a1,s0
20400536:	8526                	mv	a0,s1
20400538:	2c69                	jal	204007d2 <_fflush_r>
2040053a:	ed0d                	bnez	a0,20400574 <__swbuf_r+0xbc>
2040053c:	40f2                	lw	ra,28(sp)
2040053e:	4462                	lw	s0,24(sp)
20400540:	854a                	mv	a0,s2
20400542:	44d2                	lw	s1,20(sp)
20400544:	4942                	lw	s2,16(sp)
20400546:	49b2                	lw	s3,12(sp)
20400548:	6105                	addi	sp,sp,32
2040054a:	8082                	ret
2040054c:	00005797          	auipc	a5,0x5
20400550:	bc078793          	addi	a5,a5,-1088 # 2040510c <__sf_fake_stdout>
20400554:	00f41463          	bne	s0,a5,2040055c <__swbuf_r+0xa4>
20400558:	4480                	lw	s0,8(s1)
2040055a:	b759                	j	204004e0 <__swbuf_r+0x28>
2040055c:	00005797          	auipc	a5,0x5
20400560:	b7078793          	addi	a5,a5,-1168 # 204050cc <__sf_fake_stderr>
20400564:	f6f41ee3          	bne	s0,a5,204004e0 <__swbuf_r+0x28>
20400568:	44c0                	lw	s0,12(s1)
2040056a:	bf9d                	j	204004e0 <__swbuf_r+0x28>
2040056c:	85a2                	mv	a1,s0
2040056e:	8526                	mv	a0,s1
20400570:	2021                	jal	20400578 <__swsetup_r>
20400572:	dd3d                	beqz	a0,204004f0 <__swbuf_r+0x38>
20400574:	597d                	li	s2,-1
20400576:	b7d9                	j	2040053c <__swbuf_r+0x84>

20400578 <__swsetup_r>:
__swsetup_r():
20400578:	1141                	addi	sp,sp,-16
2040057a:	5fc00797          	auipc	a5,0x5fc00
2040057e:	1d278793          	addi	a5,a5,466 # 8000074c <_impure_ptr>
20400582:	c226                	sw	s1,4(sp)
20400584:	4384                	lw	s1,0(a5)
20400586:	c422                	sw	s0,8(sp)
20400588:	c04a                	sw	s2,0(sp)
2040058a:	c606                	sw	ra,12(sp)
2040058c:	892a                	mv	s2,a0
2040058e:	842e                	mv	s0,a1
20400590:	c489                	beqz	s1,2040059a <__swsetup_r+0x22>
20400592:	4c9c                	lw	a5,24(s1)
20400594:	e399                	bnez	a5,2040059a <__swsetup_r+0x22>
20400596:	8526                	mv	a0,s1
20400598:	2e91                	jal	204008ec <__sinit>
2040059a:	00005797          	auipc	a5,0x5
2040059e:	b5278793          	addi	a5,a5,-1198 # 204050ec <__sf_fake_stdin>
204005a2:	02f41c63          	bne	s0,a5,204005da <__swsetup_r+0x62>
204005a6:	40c0                	lw	s0,4(s1)
204005a8:	00c41703          	lh	a4,12(s0)
204005ac:	01071793          	slli	a5,a4,0x10
204005b0:	83c1                	srli	a5,a5,0x10
204005b2:	0087f693          	andi	a3,a5,8
204005b6:	eeb5                	bnez	a3,20400632 <__swsetup_r+0xba>
204005b8:	0107f693          	andi	a3,a5,16
204005bc:	ee9d                	bnez	a3,204005fa <__swsetup_r+0x82>
204005be:	47a5                	li	a5,9
204005c0:	00f92023          	sw	a5,0(s2)
204005c4:	04076713          	ori	a4,a4,64
204005c8:	00e41623          	sh	a4,12(s0)
204005cc:	557d                	li	a0,-1
204005ce:	40b2                	lw	ra,12(sp)
204005d0:	4422                	lw	s0,8(sp)
204005d2:	4492                	lw	s1,4(sp)
204005d4:	4902                	lw	s2,0(sp)
204005d6:	0141                	addi	sp,sp,16
204005d8:	8082                	ret
204005da:	00005797          	auipc	a5,0x5
204005de:	b3278793          	addi	a5,a5,-1230 # 2040510c <__sf_fake_stdout>
204005e2:	00f41463          	bne	s0,a5,204005ea <__swsetup_r+0x72>
204005e6:	4480                	lw	s0,8(s1)
204005e8:	b7c1                	j	204005a8 <__swsetup_r+0x30>
204005ea:	00005797          	auipc	a5,0x5
204005ee:	ae278793          	addi	a5,a5,-1310 # 204050cc <__sf_fake_stderr>
204005f2:	faf41be3          	bne	s0,a5,204005a8 <__swsetup_r+0x30>
204005f6:	44c0                	lw	s0,12(s1)
204005f8:	bf45                	j	204005a8 <__swsetup_r+0x30>
204005fa:	8b91                	andi	a5,a5,4
204005fc:	c78d                	beqz	a5,20400626 <__swsetup_r+0xae>
204005fe:	584c                	lw	a1,52(s0)
20400600:	c989                	beqz	a1,20400612 <__swsetup_r+0x9a>
20400602:	04440793          	addi	a5,s0,68
20400606:	00f58463          	beq	a1,a5,2040060e <__swsetup_r+0x96>
2040060a:	854a                	mv	a0,s2
2040060c:	2bc5                	jal	20400bfc <_free_r>
2040060e:	02042a23          	sw	zero,52(s0)
20400612:	00c45783          	lhu	a5,12(s0)
20400616:	00042223          	sw	zero,4(s0)
2040061a:	fdb7f793          	andi	a5,a5,-37
2040061e:	00f41623          	sh	a5,12(s0)
20400622:	481c                	lw	a5,16(s0)
20400624:	c01c                	sw	a5,0(s0)
20400626:	00c45783          	lhu	a5,12(s0)
2040062a:	0087e793          	ori	a5,a5,8
2040062e:	00f41623          	sh	a5,12(s0)
20400632:	481c                	lw	a5,16(s0)
20400634:	ef81                	bnez	a5,2040064c <__swsetup_r+0xd4>
20400636:	00c45783          	lhu	a5,12(s0)
2040063a:	20000713          	li	a4,512
2040063e:	2807f793          	andi	a5,a5,640
20400642:	00e78563          	beq	a5,a4,2040064c <__swsetup_r+0xd4>
20400646:	85a2                	mv	a1,s0
20400648:	854a                	mv	a0,s2
2040064a:	21bd                	jal	20400ab8 <__smakebuf_r>
2040064c:	00c45783          	lhu	a5,12(s0)
20400650:	0017f713          	andi	a4,a5,1
20400654:	c705                	beqz	a4,2040067c <__swsetup_r+0x104>
20400656:	485c                	lw	a5,20(s0)
20400658:	00042423          	sw	zero,8(s0)
2040065c:	40f007b3          	neg	a5,a5
20400660:	cc1c                	sw	a5,24(s0)
20400662:	481c                	lw	a5,16(s0)
20400664:	4501                	li	a0,0
20400666:	f7a5                	bnez	a5,204005ce <__swsetup_r+0x56>
20400668:	00c41783          	lh	a5,12(s0)
2040066c:	0807f713          	andi	a4,a5,128
20400670:	df39                	beqz	a4,204005ce <__swsetup_r+0x56>
20400672:	0407e793          	ori	a5,a5,64
20400676:	00f41623          	sh	a5,12(s0)
2040067a:	bf89                	j	204005cc <__swsetup_r+0x54>
2040067c:	8b89                	andi	a5,a5,2
2040067e:	4701                	li	a4,0
20400680:	e391                	bnez	a5,20400684 <__swsetup_r+0x10c>
20400682:	4858                	lw	a4,20(s0)
20400684:	c418                	sw	a4,8(s0)
20400686:	bff1                	j	20400662 <__swsetup_r+0xea>

20400688 <__sflush_r>:
__sflush_r():
20400688:	00c5d783          	lhu	a5,12(a1)
2040068c:	1101                	addi	sp,sp,-32
2040068e:	cc22                	sw	s0,24(sp)
20400690:	ca26                	sw	s1,20(sp)
20400692:	ce06                	sw	ra,28(sp)
20400694:	c84a                	sw	s2,16(sp)
20400696:	c64e                	sw	s3,12(sp)
20400698:	0087f713          	andi	a4,a5,8
2040069c:	84aa                	mv	s1,a0
2040069e:	842e                	mv	s0,a1
204006a0:	e765                	bnez	a4,20400788 <__sflush_r+0x100>
204006a2:	41d8                	lw	a4,4(a1)
204006a4:	00e04763          	bgtz	a4,204006b2 <__sflush_r+0x2a>
204006a8:	41b8                	lw	a4,64(a1)
204006aa:	00e04463          	bgtz	a4,204006b2 <__sflush_r+0x2a>
204006ae:	4501                	li	a0,0
204006b0:	a0c1                	j	20400770 <__sflush_r+0xe8>
204006b2:	5458                	lw	a4,44(s0)
204006b4:	df6d                	beqz	a4,204006ae <__sflush_r+0x26>
204006b6:	0004a903          	lw	s2,0(s1)
204006ba:	01379693          	slli	a3,a5,0x13
204006be:	0004a023          	sw	zero,0(s1)
204006c2:	0606de63          	bgez	a3,2040073e <__sflush_r+0xb6>
204006c6:	4868                	lw	a0,84(s0)
204006c8:	00c45783          	lhu	a5,12(s0)
204006cc:	8b91                	andi	a5,a5,4
204006ce:	c799                	beqz	a5,204006dc <__sflush_r+0x54>
204006d0:	405c                	lw	a5,4(s0)
204006d2:	8d1d                	sub	a0,a0,a5
204006d4:	585c                	lw	a5,52(s0)
204006d6:	c399                	beqz	a5,204006dc <__sflush_r+0x54>
204006d8:	403c                	lw	a5,64(s0)
204006da:	8d1d                	sub	a0,a0,a5
204006dc:	545c                	lw	a5,44(s0)
204006de:	500c                	lw	a1,32(s0)
204006e0:	862a                	mv	a2,a0
204006e2:	4681                	li	a3,0
204006e4:	8526                	mv	a0,s1
204006e6:	9782                	jalr	a5
204006e8:	57fd                	li	a5,-1
204006ea:	00c45703          	lhu	a4,12(s0)
204006ee:	00f51d63          	bne	a0,a5,20400708 <__sflush_r+0x80>
204006f2:	4094                	lw	a3,0(s1)
204006f4:	47f5                	li	a5,29
204006f6:	08d7e463          	bltu	a5,a3,2040077e <__sflush_r+0xf6>
204006fa:	204007b7          	lui	a5,0x20400
204006fe:	0785                	addi	a5,a5,1
20400700:	00d7d7b3          	srl	a5,a5,a3
20400704:	8b85                	andi	a5,a5,1
20400706:	cfa5                	beqz	a5,2040077e <__sflush_r+0xf6>
20400708:	481c                	lw	a5,16(s0)
2040070a:	00042223          	sw	zero,4(s0)
2040070e:	c01c                	sw	a5,0(s0)
20400710:	01371793          	slli	a5,a4,0x13
20400714:	0007d863          	bgez	a5,20400724 <__sflush_r+0x9c>
20400718:	57fd                	li	a5,-1
2040071a:	00f51463          	bne	a0,a5,20400722 <__sflush_r+0x9a>
2040071e:	409c                	lw	a5,0(s1)
20400720:	e391                	bnez	a5,20400724 <__sflush_r+0x9c>
20400722:	c868                	sw	a0,84(s0)
20400724:	584c                	lw	a1,52(s0)
20400726:	0124a023          	sw	s2,0(s1)
2040072a:	d1d1                	beqz	a1,204006ae <__sflush_r+0x26>
2040072c:	04440793          	addi	a5,s0,68
20400730:	00f58463          	beq	a1,a5,20400738 <__sflush_r+0xb0>
20400734:	8526                	mv	a0,s1
20400736:	21d9                	jal	20400bfc <_free_r>
20400738:	02042a23          	sw	zero,52(s0)
2040073c:	bf8d                	j	204006ae <__sflush_r+0x26>
2040073e:	500c                	lw	a1,32(s0)
20400740:	4685                	li	a3,1
20400742:	4601                	li	a2,0
20400744:	8526                	mv	a0,s1
20400746:	9702                	jalr	a4
20400748:	57fd                	li	a5,-1
2040074a:	f6f51fe3          	bne	a0,a5,204006c8 <__sflush_r+0x40>
2040074e:	409c                	lw	a5,0(s1)
20400750:	dfa5                	beqz	a5,204006c8 <__sflush_r+0x40>
20400752:	4775                	li	a4,29
20400754:	00e78563          	beq	a5,a4,2040075e <__sflush_r+0xd6>
20400758:	4759                	li	a4,22
2040075a:	00e79563          	bne	a5,a4,20400764 <__sflush_r+0xdc>
2040075e:	0124a023          	sw	s2,0(s1)
20400762:	b7b1                	j	204006ae <__sflush_r+0x26>
20400764:	00c45783          	lhu	a5,12(s0)
20400768:	0407e793          	ori	a5,a5,64
2040076c:	00f41623          	sh	a5,12(s0)
20400770:	40f2                	lw	ra,28(sp)
20400772:	4462                	lw	s0,24(sp)
20400774:	44d2                	lw	s1,20(sp)
20400776:	4942                	lw	s2,16(sp)
20400778:	49b2                	lw	s3,12(sp)
2040077a:	6105                	addi	sp,sp,32
2040077c:	8082                	ret
2040077e:	04076713          	ori	a4,a4,64
20400782:	00e41623          	sh	a4,12(s0)
20400786:	b7ed                	j	20400770 <__sflush_r+0xe8>
20400788:	0105a983          	lw	s3,16(a1)
2040078c:	f20981e3          	beqz	s3,204006ae <__sflush_r+0x26>
20400790:	0005a903          	lw	s2,0(a1)
20400794:	8b8d                	andi	a5,a5,3
20400796:	0135a023          	sw	s3,0(a1)
2040079a:	41390933          	sub	s2,s2,s3
2040079e:	4701                	li	a4,0
204007a0:	e391                	bnez	a5,204007a4 <__sflush_r+0x11c>
204007a2:	49d8                	lw	a4,20(a1)
204007a4:	c418                	sw	a4,8(s0)
204007a6:	f12054e3          	blez	s2,204006ae <__sflush_r+0x26>
204007aa:	541c                	lw	a5,40(s0)
204007ac:	500c                	lw	a1,32(s0)
204007ae:	86ca                	mv	a3,s2
204007b0:	864e                	mv	a2,s3
204007b2:	8526                	mv	a0,s1
204007b4:	9782                	jalr	a5
204007b6:	00a04a63          	bgtz	a0,204007ca <__sflush_r+0x142>
204007ba:	00c45783          	lhu	a5,12(s0)
204007be:	557d                	li	a0,-1
204007c0:	0407e793          	ori	a5,a5,64
204007c4:	00f41623          	sh	a5,12(s0)
204007c8:	b765                	j	20400770 <__sflush_r+0xe8>
204007ca:	99aa                	add	s3,s3,a0
204007cc:	40a90933          	sub	s2,s2,a0
204007d0:	bfd9                	j	204007a6 <__sflush_r+0x11e>

204007d2 <_fflush_r>:
_fflush_r():
204007d2:	499c                	lw	a5,16(a1)
204007d4:	cfb9                	beqz	a5,20400832 <_fflush_r+0x60>
204007d6:	1101                	addi	sp,sp,-32
204007d8:	cc22                	sw	s0,24(sp)
204007da:	ce06                	sw	ra,28(sp)
204007dc:	842a                	mv	s0,a0
204007de:	c511                	beqz	a0,204007ea <_fflush_r+0x18>
204007e0:	4d1c                	lw	a5,24(a0)
204007e2:	e781                	bnez	a5,204007ea <_fflush_r+0x18>
204007e4:	c62e                	sw	a1,12(sp)
204007e6:	2219                	jal	204008ec <__sinit>
204007e8:	45b2                	lw	a1,12(sp)
204007ea:	00005797          	auipc	a5,0x5
204007ee:	90278793          	addi	a5,a5,-1790 # 204050ec <__sf_fake_stdin>
204007f2:	00f59b63          	bne	a1,a5,20400808 <_fflush_r+0x36>
204007f6:	404c                	lw	a1,4(s0)
204007f8:	00c59783          	lh	a5,12(a1)
204007fc:	c795                	beqz	a5,20400828 <_fflush_r+0x56>
204007fe:	8522                	mv	a0,s0
20400800:	4462                	lw	s0,24(sp)
20400802:	40f2                	lw	ra,28(sp)
20400804:	6105                	addi	sp,sp,32
20400806:	b549                	j	20400688 <__sflush_r>
20400808:	00005797          	auipc	a5,0x5
2040080c:	90478793          	addi	a5,a5,-1788 # 2040510c <__sf_fake_stdout>
20400810:	00f59463          	bne	a1,a5,20400818 <_fflush_r+0x46>
20400814:	440c                	lw	a1,8(s0)
20400816:	b7cd                	j	204007f8 <_fflush_r+0x26>
20400818:	00005797          	auipc	a5,0x5
2040081c:	8b478793          	addi	a5,a5,-1868 # 204050cc <__sf_fake_stderr>
20400820:	fcf59ce3          	bne	a1,a5,204007f8 <_fflush_r+0x26>
20400824:	444c                	lw	a1,12(s0)
20400826:	bfc9                	j	204007f8 <_fflush_r+0x26>
20400828:	40f2                	lw	ra,28(sp)
2040082a:	4462                	lw	s0,24(sp)
2040082c:	4501                	li	a0,0
2040082e:	6105                	addi	sp,sp,32
20400830:	8082                	ret
20400832:	4501                	li	a0,0
20400834:	8082                	ret

20400836 <std>:
std():
20400836:	1141                	addi	sp,sp,-16
20400838:	c422                	sw	s0,8(sp)
2040083a:	c606                	sw	ra,12(sp)
2040083c:	842a                	mv	s0,a0
2040083e:	00b51623          	sh	a1,12(a0)
20400842:	00c51723          	sh	a2,14(a0)
20400846:	00052023          	sw	zero,0(a0)
2040084a:	00052223          	sw	zero,4(a0)
2040084e:	00052423          	sw	zero,8(a0)
20400852:	06052223          	sw	zero,100(a0)
20400856:	00052823          	sw	zero,16(a0)
2040085a:	00052a23          	sw	zero,20(a0)
2040085e:	00052c23          	sw	zero,24(a0)
20400862:	4621                	li	a2,8
20400864:	4581                	li	a1,0
20400866:	05c50513          	addi	a0,a0,92
2040086a:	24ed                	jal	20400b54 <memset>
2040086c:	00001797          	auipc	a5,0x1
20400870:	84678793          	addi	a5,a5,-1978 # 204010b2 <__sread>
20400874:	d05c                	sw	a5,36(s0)
20400876:	00001797          	auipc	a5,0x1
2040087a:	86c78793          	addi	a5,a5,-1940 # 204010e2 <__swrite>
2040087e:	d41c                	sw	a5,40(s0)
20400880:	00001797          	auipc	a5,0x1
20400884:	8b078793          	addi	a5,a5,-1872 # 20401130 <__sseek>
20400888:	d45c                	sw	a5,44(s0)
2040088a:	00001797          	auipc	a5,0x1
2040088e:	8dc78793          	addi	a5,a5,-1828 # 20401166 <__sclose>
20400892:	d000                	sw	s0,32(s0)
20400894:	d81c                	sw	a5,48(s0)
20400896:	40b2                	lw	ra,12(sp)
20400898:	4422                	lw	s0,8(sp)
2040089a:	0141                	addi	sp,sp,16
2040089c:	8082                	ret

2040089e <_cleanup_r>:
_cleanup_r():
2040089e:	00000597          	auipc	a1,0x0
204008a2:	f3458593          	addi	a1,a1,-204 # 204007d2 <_fflush_r>
204008a6:	a2b9                	j	204009f4 <_fwalk_reent>

204008a8 <__sfmoreglue>:
__sfmoreglue():
204008a8:	1141                	addi	sp,sp,-16
204008aa:	c226                	sw	s1,4(sp)
204008ac:	06800613          	li	a2,104
204008b0:	fff58493          	addi	s1,a1,-1
204008b4:	02c484b3          	mul	s1,s1,a2
204008b8:	c04a                	sw	s2,0(sp)
204008ba:	892e                	mv	s2,a1
204008bc:	c422                	sw	s0,8(sp)
204008be:	c606                	sw	ra,12(sp)
204008c0:	07448593          	addi	a1,s1,116
204008c4:	26d5                	jal	20400ca8 <_malloc_r>
204008c6:	842a                	mv	s0,a0
204008c8:	c919                	beqz	a0,204008de <__sfmoreglue+0x36>
204008ca:	00052023          	sw	zero,0(a0)
204008ce:	01252223          	sw	s2,4(a0)
204008d2:	0531                	addi	a0,a0,12
204008d4:	c408                	sw	a0,8(s0)
204008d6:	06848613          	addi	a2,s1,104
204008da:	4581                	li	a1,0
204008dc:	2ca5                	jal	20400b54 <memset>
204008de:	8522                	mv	a0,s0
204008e0:	40b2                	lw	ra,12(sp)
204008e2:	4422                	lw	s0,8(sp)
204008e4:	4492                	lw	s1,4(sp)
204008e6:	4902                	lw	s2,0(sp)
204008e8:	0141                	addi	sp,sp,16
204008ea:	8082                	ret

204008ec <__sinit>:
__sinit():
204008ec:	4d1c                	lw	a5,24(a0)
204008ee:	e3bd                	bnez	a5,20400954 <__sinit+0x68>
204008f0:	1141                	addi	sp,sp,-16
204008f2:	c606                	sw	ra,12(sp)
204008f4:	c422                	sw	s0,8(sp)
204008f6:	00000797          	auipc	a5,0x0
204008fa:	fa878793          	addi	a5,a5,-88 # 2040089e <_cleanup_r>
204008fe:	d51c                	sw	a5,40(a0)
20400900:	5fc00797          	auipc	a5,0x5fc00
20400904:	e5078793          	addi	a5,a5,-432 # 80000750 <_global_impure_ptr>
20400908:	439c                	lw	a5,0(a5)
2040090a:	04052423          	sw	zero,72(a0)
2040090e:	04052623          	sw	zero,76(a0)
20400912:	04052823          	sw	zero,80(a0)
20400916:	00f51463          	bne	a0,a5,2040091e <__sinit+0x32>
2040091a:	4785                	li	a5,1
2040091c:	cd1c                	sw	a5,24(a0)
2040091e:	842a                	mv	s0,a0
20400920:	281d                	jal	20400956 <__sfp>
20400922:	c048                	sw	a0,4(s0)
20400924:	8522                	mv	a0,s0
20400926:	2805                	jal	20400956 <__sfp>
20400928:	c408                	sw	a0,8(s0)
2040092a:	8522                	mv	a0,s0
2040092c:	202d                	jal	20400956 <__sfp>
2040092e:	c448                	sw	a0,12(s0)
20400930:	4048                	lw	a0,4(s0)
20400932:	4601                	li	a2,0
20400934:	4591                	li	a1,4
20400936:	3701                	jal	20400836 <std>
20400938:	4408                	lw	a0,8(s0)
2040093a:	4605                	li	a2,1
2040093c:	45a5                	li	a1,9
2040093e:	3de5                	jal	20400836 <std>
20400940:	4448                	lw	a0,12(s0)
20400942:	4609                	li	a2,2
20400944:	45c9                	li	a1,18
20400946:	3dc5                	jal	20400836 <std>
20400948:	4785                	li	a5,1
2040094a:	cc1c                	sw	a5,24(s0)
2040094c:	40b2                	lw	ra,12(sp)
2040094e:	4422                	lw	s0,8(sp)
20400950:	0141                	addi	sp,sp,16
20400952:	8082                	ret
20400954:	8082                	ret

20400956 <__sfp>:
__sfp():
20400956:	1141                	addi	sp,sp,-16
20400958:	5fc00797          	auipc	a5,0x5fc00
2040095c:	df878793          	addi	a5,a5,-520 # 80000750 <_global_impure_ptr>
20400960:	c226                	sw	s1,4(sp)
20400962:	4384                	lw	s1,0(a5)
20400964:	c04a                	sw	s2,0(sp)
20400966:	c606                	sw	ra,12(sp)
20400968:	4c9c                	lw	a5,24(s1)
2040096a:	c422                	sw	s0,8(sp)
2040096c:	892a                	mv	s2,a0
2040096e:	e399                	bnez	a5,20400974 <__sfp+0x1e>
20400970:	8526                	mv	a0,s1
20400972:	3fad                	jal	204008ec <__sinit>
20400974:	04848493          	addi	s1,s1,72
20400978:	4480                	lw	s0,8(s1)
2040097a:	40dc                	lw	a5,4(s1)
2040097c:	17fd                	addi	a5,a5,-1
2040097e:	0007d663          	bgez	a5,2040098a <__sfp+0x34>
20400982:	409c                	lw	a5,0(s1)
20400984:	cfb1                	beqz	a5,204009e0 <__sfp+0x8a>
20400986:	4084                	lw	s1,0(s1)
20400988:	bfc5                	j	20400978 <__sfp+0x22>
2040098a:	00c41703          	lh	a4,12(s0)
2040098e:	e731                	bnez	a4,204009da <__sfp+0x84>
20400990:	77c1                	lui	a5,0xffff0
20400992:	0785                	addi	a5,a5,1
20400994:	06042223          	sw	zero,100(s0)
20400998:	00042023          	sw	zero,0(s0)
2040099c:	00042223          	sw	zero,4(s0)
204009a0:	00042423          	sw	zero,8(s0)
204009a4:	c45c                	sw	a5,12(s0)
204009a6:	00042823          	sw	zero,16(s0)
204009aa:	00042a23          	sw	zero,20(s0)
204009ae:	00042c23          	sw	zero,24(s0)
204009b2:	4621                	li	a2,8
204009b4:	4581                	li	a1,0
204009b6:	05c40513          	addi	a0,s0,92
204009ba:	2a69                	jal	20400b54 <memset>
204009bc:	02042a23          	sw	zero,52(s0)
204009c0:	02042c23          	sw	zero,56(s0)
204009c4:	04042423          	sw	zero,72(s0)
204009c8:	04042623          	sw	zero,76(s0)
204009cc:	8522                	mv	a0,s0
204009ce:	40b2                	lw	ra,12(sp)
204009d0:	4422                	lw	s0,8(sp)
204009d2:	4492                	lw	s1,4(sp)
204009d4:	4902                	lw	s2,0(sp)
204009d6:	0141                	addi	sp,sp,16
204009d8:	8082                	ret
204009da:	06840413          	addi	s0,s0,104
204009de:	bf79                	j	2040097c <__sfp+0x26>
204009e0:	4591                	li	a1,4
204009e2:	854a                	mv	a0,s2
204009e4:	35d1                	jal	204008a8 <__sfmoreglue>
204009e6:	c088                	sw	a0,0(s1)
204009e8:	842a                	mv	s0,a0
204009ea:	fd51                	bnez	a0,20400986 <__sfp+0x30>
204009ec:	47b1                	li	a5,12
204009ee:	00f92023          	sw	a5,0(s2)
204009f2:	bfe9                	j	204009cc <__sfp+0x76>

204009f4 <_fwalk_reent>:
_fwalk_reent():
204009f4:	7179                	addi	sp,sp,-48
204009f6:	d422                	sw	s0,40(sp)
204009f8:	d04a                	sw	s2,32(sp)
204009fa:	cc52                	sw	s4,24(sp)
204009fc:	ca56                	sw	s5,20(sp)
204009fe:	c85a                	sw	s6,16(sp)
20400a00:	c65e                	sw	s7,12(sp)
20400a02:	d606                	sw	ra,44(sp)
20400a04:	d226                	sw	s1,36(sp)
20400a06:	ce4e                	sw	s3,28(sp)
20400a08:	8a2a                	mv	s4,a0
20400a0a:	8aae                	mv	s5,a1
20400a0c:	04850413          	addi	s0,a0,72
20400a10:	4901                	li	s2,0
20400a12:	4b05                	li	s6,1
20400a14:	5bfd                	li	s7,-1
20400a16:	ec09                	bnez	s0,20400a30 <_fwalk_reent+0x3c>
20400a18:	50b2                	lw	ra,44(sp)
20400a1a:	5422                	lw	s0,40(sp)
20400a1c:	854a                	mv	a0,s2
20400a1e:	5492                	lw	s1,36(sp)
20400a20:	5902                	lw	s2,32(sp)
20400a22:	49f2                	lw	s3,28(sp)
20400a24:	4a62                	lw	s4,24(sp)
20400a26:	4ad2                	lw	s5,20(sp)
20400a28:	4b42                	lw	s6,16(sp)
20400a2a:	4bb2                	lw	s7,12(sp)
20400a2c:	6145                	addi	sp,sp,48
20400a2e:	8082                	ret
20400a30:	4404                	lw	s1,8(s0)
20400a32:	00442983          	lw	s3,4(s0)
20400a36:	19fd                	addi	s3,s3,-1
20400a38:	0009d463          	bgez	s3,20400a40 <_fwalk_reent+0x4c>
20400a3c:	4000                	lw	s0,0(s0)
20400a3e:	bfe1                	j	20400a16 <_fwalk_reent+0x22>
20400a40:	00c4d783          	lhu	a5,12(s1)
20400a44:	00fb7b63          	bgeu	s6,a5,20400a5a <_fwalk_reent+0x66>
20400a48:	00e49783          	lh	a5,14(s1)
20400a4c:	01778763          	beq	a5,s7,20400a5a <_fwalk_reent+0x66>
20400a50:	85a6                	mv	a1,s1
20400a52:	8552                	mv	a0,s4
20400a54:	9a82                	jalr	s5
20400a56:	00a96933          	or	s2,s2,a0
20400a5a:	06848493          	addi	s1,s1,104
20400a5e:	bfe1                	j	20400a36 <_fwalk_reent+0x42>

20400a60 <__swhatbuf_r>:
__swhatbuf_r():
20400a60:	7119                	addi	sp,sp,-128
20400a62:	daa6                	sw	s1,116(sp)
20400a64:	84ae                	mv	s1,a1
20400a66:	00e59583          	lh	a1,14(a1)
20400a6a:	dca2                	sw	s0,120(sp)
20400a6c:	de86                	sw	ra,124(sp)
20400a6e:	8432                	mv	s0,a2
20400a70:	0005dc63          	bgez	a1,20400a88 <__swhatbuf_r+0x28>
20400a74:	00c4d783          	lhu	a5,12(s1)
20400a78:	0006a023          	sw	zero,0(a3)
20400a7c:	0807f793          	andi	a5,a5,128
20400a80:	e39d                	bnez	a5,20400aa6 <__swhatbuf_r+0x46>
20400a82:	40000793          	li	a5,1024
20400a86:	a015                	j	20400aaa <__swhatbuf_r+0x4a>
20400a88:	0830                	addi	a2,sp,24
20400a8a:	c636                	sw	a3,12(sp)
20400a8c:	2f15                	jal	204011c0 <_fstat_r>
20400a8e:	46b2                	lw	a3,12(sp)
20400a90:	fe0542e3          	bltz	a0,20400a74 <__swhatbuf_r+0x14>
20400a94:	4772                	lw	a4,28(sp)
20400a96:	67bd                	lui	a5,0xf
20400a98:	8ff9                	and	a5,a5,a4
20400a9a:	7779                	lui	a4,0xffffe
20400a9c:	97ba                	add	a5,a5,a4
20400a9e:	0017b793          	seqz	a5,a5
20400aa2:	c29c                	sw	a5,0(a3)
20400aa4:	bff9                	j	20400a82 <__swhatbuf_r+0x22>
20400aa6:	04000793          	li	a5,64
20400aaa:	c01c                	sw	a5,0(s0)
20400aac:	50f6                	lw	ra,124(sp)
20400aae:	5466                	lw	s0,120(sp)
20400ab0:	54d6                	lw	s1,116(sp)
20400ab2:	4501                	li	a0,0
20400ab4:	6109                	addi	sp,sp,128
20400ab6:	8082                	ret

20400ab8 <__smakebuf_r>:
__smakebuf_r():
20400ab8:	00c5d783          	lhu	a5,12(a1)
20400abc:	1101                	addi	sp,sp,-32
20400abe:	cc22                	sw	s0,24(sp)
20400ac0:	ce06                	sw	ra,28(sp)
20400ac2:	ca26                	sw	s1,20(sp)
20400ac4:	c84a                	sw	s2,16(sp)
20400ac6:	8b89                	andi	a5,a5,2
20400ac8:	842e                	mv	s0,a1
20400aca:	cf89                	beqz	a5,20400ae4 <__smakebuf_r+0x2c>
20400acc:	04740793          	addi	a5,s0,71
20400ad0:	c01c                	sw	a5,0(s0)
20400ad2:	c81c                	sw	a5,16(s0)
20400ad4:	4785                	li	a5,1
20400ad6:	c85c                	sw	a5,20(s0)
20400ad8:	40f2                	lw	ra,28(sp)
20400ada:	4462                	lw	s0,24(sp)
20400adc:	44d2                	lw	s1,20(sp)
20400ade:	4942                	lw	s2,16(sp)
20400ae0:	6105                	addi	sp,sp,32
20400ae2:	8082                	ret
20400ae4:	0074                	addi	a3,sp,12
20400ae6:	0030                	addi	a2,sp,8
20400ae8:	84aa                	mv	s1,a0
20400aea:	3f9d                	jal	20400a60 <__swhatbuf_r>
20400aec:	45a2                	lw	a1,8(sp)
20400aee:	892a                	mv	s2,a0
20400af0:	8526                	mv	a0,s1
20400af2:	2a5d                	jal	20400ca8 <_malloc_r>
20400af4:	ed01                	bnez	a0,20400b0c <__smakebuf_r+0x54>
20400af6:	00c41783          	lh	a5,12(s0)
20400afa:	2007f713          	andi	a4,a5,512
20400afe:	ff69                	bnez	a4,20400ad8 <__smakebuf_r+0x20>
20400b00:	9bf1                	andi	a5,a5,-4
20400b02:	0027e793          	ori	a5,a5,2
20400b06:	00f41623          	sh	a5,12(s0)
20400b0a:	b7c9                	j	20400acc <__smakebuf_r+0x14>
20400b0c:	00000797          	auipc	a5,0x0
20400b10:	d9278793          	addi	a5,a5,-622 # 2040089e <_cleanup_r>
20400b14:	d49c                	sw	a5,40(s1)
20400b16:	00c45783          	lhu	a5,12(s0)
20400b1a:	c008                	sw	a0,0(s0)
20400b1c:	c808                	sw	a0,16(s0)
20400b1e:	0807e793          	ori	a5,a5,128
20400b22:	00f41623          	sh	a5,12(s0)
20400b26:	47a2                	lw	a5,8(sp)
20400b28:	c85c                	sw	a5,20(s0)
20400b2a:	47b2                	lw	a5,12(sp)
20400b2c:	cf89                	beqz	a5,20400b46 <__smakebuf_r+0x8e>
20400b2e:	00e41583          	lh	a1,14(s0)
20400b32:	8526                	mv	a0,s1
20400b34:	2d5d                	jal	204011ea <_isatty_r>
20400b36:	c901                	beqz	a0,20400b46 <__smakebuf_r+0x8e>
20400b38:	00c45783          	lhu	a5,12(s0)
20400b3c:	9bf1                	andi	a5,a5,-4
20400b3e:	0017e793          	ori	a5,a5,1
20400b42:	00f41623          	sh	a5,12(s0)
20400b46:	00c45783          	lhu	a5,12(s0)
20400b4a:	00f96933          	or	s2,s2,a5
20400b4e:	01241623          	sh	s2,12(s0)
20400b52:	b759                	j	20400ad8 <__smakebuf_r+0x20>

20400b54 <memset>:
memset():
20400b54:	433d                	li	t1,15
20400b56:	872a                	mv	a4,a0
20400b58:	02c37363          	bgeu	t1,a2,20400b7e <memset+0x2a>
20400b5c:	00f77793          	andi	a5,a4,15
20400b60:	efbd                	bnez	a5,20400bde <memset+0x8a>
20400b62:	e5ad                	bnez	a1,20400bcc <memset+0x78>
20400b64:	ff067693          	andi	a3,a2,-16
20400b68:	8a3d                	andi	a2,a2,15
20400b6a:	96ba                	add	a3,a3,a4
20400b6c:	c30c                	sw	a1,0(a4)
20400b6e:	c34c                	sw	a1,4(a4)
20400b70:	c70c                	sw	a1,8(a4)
20400b72:	c74c                	sw	a1,12(a4)
20400b74:	0741                	addi	a4,a4,16
20400b76:	fed76be3          	bltu	a4,a3,20400b6c <memset+0x18>
20400b7a:	e211                	bnez	a2,20400b7e <memset+0x2a>
20400b7c:	8082                	ret
20400b7e:	40c306b3          	sub	a3,t1,a2
20400b82:	068a                	slli	a3,a3,0x2
20400b84:	00000297          	auipc	t0,0x0
20400b88:	9696                	add	a3,a3,t0
20400b8a:	00a68067          	jr	10(a3)
20400b8e:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcbfa>
20400b92:	00b706a3          	sb	a1,13(a4)
20400b96:	00b70623          	sb	a1,12(a4)
20400b9a:	00b705a3          	sb	a1,11(a4)
20400b9e:	00b70523          	sb	a1,10(a4)
20400ba2:	00b704a3          	sb	a1,9(a4)
20400ba6:	00b70423          	sb	a1,8(a4)
20400baa:	00b703a3          	sb	a1,7(a4)
20400bae:	00b70323          	sb	a1,6(a4)
20400bb2:	00b702a3          	sb	a1,5(a4)
20400bb6:	00b70223          	sb	a1,4(a4)
20400bba:	00b701a3          	sb	a1,3(a4)
20400bbe:	00b70123          	sb	a1,2(a4)
20400bc2:	00b700a3          	sb	a1,1(a4)
20400bc6:	00b70023          	sb	a1,0(a4)
20400bca:	8082                	ret
20400bcc:	0ff5f593          	andi	a1,a1,255
20400bd0:	00859693          	slli	a3,a1,0x8
20400bd4:	8dd5                	or	a1,a1,a3
20400bd6:	01059693          	slli	a3,a1,0x10
20400bda:	8dd5                	or	a1,a1,a3
20400bdc:	b761                	j	20400b64 <memset+0x10>
20400bde:	00279693          	slli	a3,a5,0x2
20400be2:	00000297          	auipc	t0,0x0
20400be6:	9696                	add	a3,a3,t0
20400be8:	8286                	mv	t0,ra
20400bea:	fa8680e7          	jalr	-88(a3)
20400bee:	8096                	mv	ra,t0
20400bf0:	17c1                	addi	a5,a5,-16
20400bf2:	8f1d                	sub	a4,a4,a5
20400bf4:	963e                	add	a2,a2,a5
20400bf6:	f8c374e3          	bgeu	t1,a2,20400b7e <memset+0x2a>
20400bfa:	b7a5                	j	20400b62 <memset+0xe>

20400bfc <_free_r>:
_free_r():
20400bfc:	c5cd                	beqz	a1,20400ca6 <_free_r+0xaa>
20400bfe:	ffc5a783          	lw	a5,-4(a1)
20400c02:	1141                	addi	sp,sp,-16
20400c04:	c422                	sw	s0,8(sp)
20400c06:	c606                	sw	ra,12(sp)
20400c08:	c226                	sw	s1,4(sp)
20400c0a:	ffc58413          	addi	s0,a1,-4
20400c0e:	0007d363          	bgez	a5,20400c14 <_free_r+0x18>
20400c12:	943e                	add	s0,s0,a5
20400c14:	84aa                	mv	s1,a0
20400c16:	2589                	jal	20401258 <__malloc_lock>
20400c18:	5fc00797          	auipc	a5,0x5fc00
20400c1c:	b6078793          	addi	a5,a5,-1184 # 80000778 <metal_segment_data_target_end>
20400c20:	439c                	lw	a5,0(a5)
20400c22:	ef89                	bnez	a5,20400c3c <_free_r+0x40>
20400c24:	00042223          	sw	zero,4(s0)
20400c28:	5fc00797          	auipc	a5,0x5fc00
20400c2c:	b487a823          	sw	s0,-1200(a5) # 80000778 <metal_segment_data_target_end>
20400c30:	4422                	lw	s0,8(sp)
20400c32:	40b2                	lw	ra,12(sp)
20400c34:	8526                	mv	a0,s1
20400c36:	4492                	lw	s1,4(sp)
20400c38:	0141                	addi	sp,sp,16
20400c3a:	a505                	j	2040125a <__malloc_unlock>
20400c3c:	00f47e63          	bgeu	s0,a5,20400c58 <_free_r+0x5c>
20400c40:	4014                	lw	a3,0(s0)
20400c42:	00d40733          	add	a4,s0,a3
20400c46:	00e79663          	bne	a5,a4,20400c52 <_free_r+0x56>
20400c4a:	4398                	lw	a4,0(a5)
20400c4c:	43dc                	lw	a5,4(a5)
20400c4e:	9736                	add	a4,a4,a3
20400c50:	c018                	sw	a4,0(s0)
20400c52:	c05c                	sw	a5,4(s0)
20400c54:	bfd1                	j	20400c28 <_free_r+0x2c>
20400c56:	87ba                	mv	a5,a4
20400c58:	43d8                	lw	a4,4(a5)
20400c5a:	c319                	beqz	a4,20400c60 <_free_r+0x64>
20400c5c:	fee47de3          	bgeu	s0,a4,20400c56 <_free_r+0x5a>
20400c60:	4394                	lw	a3,0(a5)
20400c62:	00d78633          	add	a2,a5,a3
20400c66:	00861f63          	bne	a2,s0,20400c84 <_free_r+0x88>
20400c6a:	4010                	lw	a2,0(s0)
20400c6c:	96b2                	add	a3,a3,a2
20400c6e:	c394                	sw	a3,0(a5)
20400c70:	00d78633          	add	a2,a5,a3
20400c74:	fac71ee3          	bne	a4,a2,20400c30 <_free_r+0x34>
20400c78:	4310                	lw	a2,0(a4)
20400c7a:	4358                	lw	a4,4(a4)
20400c7c:	96b2                	add	a3,a3,a2
20400c7e:	c394                	sw	a3,0(a5)
20400c80:	c3d8                	sw	a4,4(a5)
20400c82:	b77d                	j	20400c30 <_free_r+0x34>
20400c84:	00c47563          	bgeu	s0,a2,20400c8e <_free_r+0x92>
20400c88:	47b1                	li	a5,12
20400c8a:	c09c                	sw	a5,0(s1)
20400c8c:	b755                	j	20400c30 <_free_r+0x34>
20400c8e:	4010                	lw	a2,0(s0)
20400c90:	00c406b3          	add	a3,s0,a2
20400c94:	00d71663          	bne	a4,a3,20400ca0 <_free_r+0xa4>
20400c98:	4314                	lw	a3,0(a4)
20400c9a:	4358                	lw	a4,4(a4)
20400c9c:	96b2                	add	a3,a3,a2
20400c9e:	c014                	sw	a3,0(s0)
20400ca0:	c058                	sw	a4,4(s0)
20400ca2:	c3c0                	sw	s0,4(a5)
20400ca4:	b771                	j	20400c30 <_free_r+0x34>
20400ca6:	8082                	ret

20400ca8 <_malloc_r>:
_malloc_r():
20400ca8:	1101                	addi	sp,sp,-32
20400caa:	ca26                	sw	s1,20(sp)
20400cac:	00358493          	addi	s1,a1,3
20400cb0:	98f1                	andi	s1,s1,-4
20400cb2:	ce06                	sw	ra,28(sp)
20400cb4:	cc22                	sw	s0,24(sp)
20400cb6:	c84a                	sw	s2,16(sp)
20400cb8:	c64e                	sw	s3,12(sp)
20400cba:	04a1                	addi	s1,s1,8
20400cbc:	47b1                	li	a5,12
20400cbe:	04f4f763          	bgeu	s1,a5,20400d0c <_malloc_r+0x64>
20400cc2:	44b1                	li	s1,12
20400cc4:	04b4e663          	bltu	s1,a1,20400d10 <_malloc_r+0x68>
20400cc8:	892a                	mv	s2,a0
20400cca:	2379                	jal	20401258 <__malloc_lock>
20400ccc:	5fc00797          	auipc	a5,0x5fc00
20400cd0:	aac78793          	addi	a5,a5,-1364 # 80000778 <metal_segment_data_target_end>
20400cd4:	4398                	lw	a4,0(a5)
20400cd6:	843a                	mv	s0,a4
20400cd8:	e431                	bnez	s0,20400d24 <_malloc_r+0x7c>
20400cda:	5fc00797          	auipc	a5,0x5fc00
20400cde:	aa278793          	addi	a5,a5,-1374 # 8000077c <__malloc_sbrk_start>
20400ce2:	439c                	lw	a5,0(a5)
20400ce4:	eb81                	bnez	a5,20400cf4 <_malloc_r+0x4c>
20400ce6:	4581                	li	a1,0
20400ce8:	854a                	mv	a0,s2
20400cea:	2645                	jal	2040108a <_sbrk_r>
20400cec:	5fc00797          	auipc	a5,0x5fc00
20400cf0:	a8a7a823          	sw	a0,-1392(a5) # 8000077c <__malloc_sbrk_start>
20400cf4:	85a6                	mv	a1,s1
20400cf6:	854a                	mv	a0,s2
20400cf8:	2e49                	jal	2040108a <_sbrk_r>
20400cfa:	59fd                	li	s3,-1
20400cfc:	07351963          	bne	a0,s3,20400d6e <_malloc_r+0xc6>
20400d00:	47b1                	li	a5,12
20400d02:	00f92023          	sw	a5,0(s2)
20400d06:	854a                	mv	a0,s2
20400d08:	2b89                	jal	2040125a <__malloc_unlock>
20400d0a:	a029                	j	20400d14 <_malloc_r+0x6c>
20400d0c:	fa04dce3          	bgez	s1,20400cc4 <_malloc_r+0x1c>
20400d10:	47b1                	li	a5,12
20400d12:	c11c                	sw	a5,0(a0)
20400d14:	4501                	li	a0,0
20400d16:	40f2                	lw	ra,28(sp)
20400d18:	4462                	lw	s0,24(sp)
20400d1a:	44d2                	lw	s1,20(sp)
20400d1c:	4942                	lw	s2,16(sp)
20400d1e:	49b2                	lw	s3,12(sp)
20400d20:	6105                	addi	sp,sp,32
20400d22:	8082                	ret
20400d24:	401c                	lw	a5,0(s0)
20400d26:	8f85                	sub	a5,a5,s1
20400d28:	0407c063          	bltz	a5,20400d68 <_malloc_r+0xc0>
20400d2c:	46ad                	li	a3,11
20400d2e:	00f6f663          	bgeu	a3,a5,20400d3a <_malloc_r+0x92>
20400d32:	c01c                	sw	a5,0(s0)
20400d34:	943e                	add	s0,s0,a5
20400d36:	c004                	sw	s1,0(s0)
20400d38:	a801                	j	20400d48 <_malloc_r+0xa0>
20400d3a:	405c                	lw	a5,4(s0)
20400d3c:	02871463          	bne	a4,s0,20400d64 <_malloc_r+0xbc>
20400d40:	5fc00717          	auipc	a4,0x5fc00
20400d44:	a2f72c23          	sw	a5,-1480(a4) # 80000778 <metal_segment_data_target_end>
20400d48:	854a                	mv	a0,s2
20400d4a:	2b01                	jal	2040125a <__malloc_unlock>
20400d4c:	00b40513          	addi	a0,s0,11
20400d50:	00440793          	addi	a5,s0,4
20400d54:	9961                	andi	a0,a0,-8
20400d56:	40f50733          	sub	a4,a0,a5
20400d5a:	df55                	beqz	a4,20400d16 <_malloc_r+0x6e>
20400d5c:	943a                	add	s0,s0,a4
20400d5e:	8f89                	sub	a5,a5,a0
20400d60:	c01c                	sw	a5,0(s0)
20400d62:	bf55                	j	20400d16 <_malloc_r+0x6e>
20400d64:	c35c                	sw	a5,4(a4)
20400d66:	b7cd                	j	20400d48 <_malloc_r+0xa0>
20400d68:	8722                	mv	a4,s0
20400d6a:	4040                	lw	s0,4(s0)
20400d6c:	b7b5                	j	20400cd8 <_malloc_r+0x30>
20400d6e:	00350413          	addi	s0,a0,3
20400d72:	9871                	andi	s0,s0,-4
20400d74:	fc8501e3          	beq	a0,s0,20400d36 <_malloc_r+0x8e>
20400d78:	40a405b3          	sub	a1,s0,a0
20400d7c:	854a                	mv	a0,s2
20400d7e:	2631                	jal	2040108a <_sbrk_r>
20400d80:	fb351be3          	bne	a0,s3,20400d36 <_malloc_r+0x8e>
20400d84:	bfb5                	j	20400d00 <_malloc_r+0x58>

20400d86 <__sfputc_r>:
__sfputc_r():
20400d86:	461c                	lw	a5,8(a2)
20400d88:	17fd                	addi	a5,a5,-1
20400d8a:	c61c                	sw	a5,8(a2)
20400d8c:	0007da63          	bgez	a5,20400da0 <__sfputc_r+0x1a>
20400d90:	4e18                	lw	a4,24(a2)
20400d92:	00e7c563          	blt	a5,a4,20400d9c <__sfputc_r+0x16>
20400d96:	47a9                	li	a5,10
20400d98:	00f59463          	bne	a1,a5,20400da0 <__sfputc_r+0x1a>
20400d9c:	f1cff06f          	j	204004b8 <__swbuf_r>
20400da0:	421c                	lw	a5,0(a2)
20400da2:	852e                	mv	a0,a1
20400da4:	00178713          	addi	a4,a5,1
20400da8:	c218                	sw	a4,0(a2)
20400daa:	00b78023          	sb	a1,0(a5)
20400dae:	8082                	ret

20400db0 <__sfputs_r>:
__sfputs_r():
20400db0:	1101                	addi	sp,sp,-32
20400db2:	cc22                	sw	s0,24(sp)
20400db4:	ca26                	sw	s1,20(sp)
20400db6:	c84a                	sw	s2,16(sp)
20400db8:	c64e                	sw	s3,12(sp)
20400dba:	c452                	sw	s4,8(sp)
20400dbc:	ce06                	sw	ra,28(sp)
20400dbe:	892a                	mv	s2,a0
20400dc0:	89ae                	mv	s3,a1
20400dc2:	8432                	mv	s0,a2
20400dc4:	00d604b3          	add	s1,a2,a3
20400dc8:	5a7d                	li	s4,-1
20400dca:	00941463          	bne	s0,s1,20400dd2 <__sfputs_r+0x22>
20400dce:	4501                	li	a0,0
20400dd0:	a809                	j	20400de2 <__sfputs_r+0x32>
20400dd2:	00044583          	lbu	a1,0(s0)
20400dd6:	864e                	mv	a2,s3
20400dd8:	854a                	mv	a0,s2
20400dda:	3775                	jal	20400d86 <__sfputc_r>
20400ddc:	0405                	addi	s0,s0,1
20400dde:	ff4516e3          	bne	a0,s4,20400dca <__sfputs_r+0x1a>
20400de2:	40f2                	lw	ra,28(sp)
20400de4:	4462                	lw	s0,24(sp)
20400de6:	44d2                	lw	s1,20(sp)
20400de8:	4942                	lw	s2,16(sp)
20400dea:	49b2                	lw	s3,12(sp)
20400dec:	4a22                	lw	s4,8(sp)
20400dee:	6105                	addi	sp,sp,32
20400df0:	8082                	ret

20400df2 <_vfiprintf_r>:
_vfiprintf_r():
20400df2:	7135                	addi	sp,sp,-160
20400df4:	cd22                	sw	s0,152(sp)
20400df6:	cb26                	sw	s1,148(sp)
20400df8:	c94a                	sw	s2,144(sp)
20400dfa:	c74e                	sw	s3,140(sp)
20400dfc:	cf06                	sw	ra,156(sp)
20400dfe:	c552                	sw	s4,136(sp)
20400e00:	c356                	sw	s5,132(sp)
20400e02:	c15a                	sw	s6,128(sp)
20400e04:	dede                	sw	s7,124(sp)
20400e06:	dce2                	sw	s8,120(sp)
20400e08:	dae6                	sw	s9,116(sp)
20400e0a:	89aa                	mv	s3,a0
20400e0c:	84ae                	mv	s1,a1
20400e0e:	8932                	mv	s2,a2
20400e10:	8436                	mv	s0,a3
20400e12:	c501                	beqz	a0,20400e1a <_vfiprintf_r+0x28>
20400e14:	4d1c                	lw	a5,24(a0)
20400e16:	e391                	bnez	a5,20400e1a <_vfiprintf_r+0x28>
20400e18:	3cd1                	jal	204008ec <__sinit>
20400e1a:	00004797          	auipc	a5,0x4
20400e1e:	2d278793          	addi	a5,a5,722 # 204050ec <__sf_fake_stdin>
20400e22:	0cf49b63          	bne	s1,a5,20400ef8 <_vfiprintf_r+0x106>
20400e26:	0049a483          	lw	s1,4(s3)
20400e2a:	00c4d783          	lhu	a5,12(s1)
20400e2e:	8ba1                	andi	a5,a5,8
20400e30:	c7f5                	beqz	a5,20400f1c <_vfiprintf_r+0x12a>
20400e32:	489c                	lw	a5,16(s1)
20400e34:	c7e5                	beqz	a5,20400f1c <_vfiprintf_r+0x12a>
20400e36:	02000793          	li	a5,32
20400e3a:	02f104a3          	sb	a5,41(sp)
20400e3e:	03000793          	li	a5,48
20400e42:	d202                	sw	zero,36(sp)
20400e44:	02f10523          	sb	a5,42(sp)
20400e48:	c622                	sw	s0,12(sp)
20400e4a:	02500b93          	li	s7,37
20400e4e:	00004a97          	auipc	s5,0x4
20400e52:	2dea8a93          	addi	s5,s5,734 # 2040512c <__sf_fake_stdout+0x20>
20400e56:	4c05                	li	s8,1
20400e58:	4b29                	li	s6,10
20400e5a:	844a                	mv	s0,s2
20400e5c:	00044783          	lbu	a5,0(s0)
20400e60:	c399                	beqz	a5,20400e66 <_vfiprintf_r+0x74>
20400e62:	0f779063          	bne	a5,s7,20400f42 <_vfiprintf_r+0x150>
20400e66:	41240cb3          	sub	s9,s0,s2
20400e6a:	000c8d63          	beqz	s9,20400e84 <_vfiprintf_r+0x92>
20400e6e:	86e6                	mv	a3,s9
20400e70:	864a                	mv	a2,s2
20400e72:	85a6                	mv	a1,s1
20400e74:	854e                	mv	a0,s3
20400e76:	3f2d                	jal	20400db0 <__sfputs_r>
20400e78:	57fd                	li	a5,-1
20400e7a:	1ef50663          	beq	a0,a5,20401066 <_vfiprintf_r+0x274>
20400e7e:	5692                	lw	a3,36(sp)
20400e80:	96e6                	add	a3,a3,s9
20400e82:	d236                	sw	a3,36(sp)
20400e84:	00044783          	lbu	a5,0(s0)
20400e88:	1c078f63          	beqz	a5,20401066 <_vfiprintf_r+0x274>
20400e8c:	57fd                	li	a5,-1
20400e8e:	00140913          	addi	s2,s0,1
20400e92:	c802                	sw	zero,16(sp)
20400e94:	ce02                	sw	zero,28(sp)
20400e96:	ca3e                	sw	a5,20(sp)
20400e98:	cc02                	sw	zero,24(sp)
20400e9a:	040109a3          	sb	zero,83(sp)
20400e9e:	d482                	sw	zero,104(sp)
20400ea0:	00094583          	lbu	a1,0(s2)
20400ea4:	4615                	li	a2,5
20400ea6:	8556                	mv	a0,s5
20400ea8:	2e59                	jal	2040123e <memchr>
20400eaa:	00190413          	addi	s0,s2,1
20400eae:	47c2                	lw	a5,16(sp)
20400eb0:	e959                	bnez	a0,20400f46 <_vfiprintf_r+0x154>
20400eb2:	0107f713          	andi	a4,a5,16
20400eb6:	c709                	beqz	a4,20400ec0 <_vfiprintf_r+0xce>
20400eb8:	02000713          	li	a4,32
20400ebc:	04e109a3          	sb	a4,83(sp)
20400ec0:	0087f713          	andi	a4,a5,8
20400ec4:	c709                	beqz	a4,20400ece <_vfiprintf_r+0xdc>
20400ec6:	02b00713          	li	a4,43
20400eca:	04e109a3          	sb	a4,83(sp)
20400ece:	00094683          	lbu	a3,0(s2)
20400ed2:	02a00713          	li	a4,42
20400ed6:	08e68063          	beq	a3,a4,20400f56 <_vfiprintf_r+0x164>
20400eda:	47f2                	lw	a5,28(sp)
20400edc:	844a                	mv	s0,s2
20400ede:	4681                	li	a3,0
20400ee0:	4625                	li	a2,9
20400ee2:	00044703          	lbu	a4,0(s0)
20400ee6:	00140593          	addi	a1,s0,1
20400eea:	fd070713          	addi	a4,a4,-48
20400eee:	0ae67963          	bgeu	a2,a4,20400fa0 <_vfiprintf_r+0x1ae>
20400ef2:	cab5                	beqz	a3,20400f66 <_vfiprintf_r+0x174>
20400ef4:	ce3e                	sw	a5,28(sp)
20400ef6:	a885                	j	20400f66 <_vfiprintf_r+0x174>
20400ef8:	00004797          	auipc	a5,0x4
20400efc:	21478793          	addi	a5,a5,532 # 2040510c <__sf_fake_stdout>
20400f00:	00f49563          	bne	s1,a5,20400f0a <_vfiprintf_r+0x118>
20400f04:	0089a483          	lw	s1,8(s3)
20400f08:	b70d                	j	20400e2a <_vfiprintf_r+0x38>
20400f0a:	00004797          	auipc	a5,0x4
20400f0e:	1c278793          	addi	a5,a5,450 # 204050cc <__sf_fake_stderr>
20400f12:	f0f49ce3          	bne	s1,a5,20400e2a <_vfiprintf_r+0x38>
20400f16:	00c9a483          	lw	s1,12(s3)
20400f1a:	bf01                	j	20400e2a <_vfiprintf_r+0x38>
20400f1c:	85a6                	mv	a1,s1
20400f1e:	854e                	mv	a0,s3
20400f20:	e58ff0ef          	jal	ra,20400578 <__swsetup_r>
20400f24:	d909                	beqz	a0,20400e36 <_vfiprintf_r+0x44>
20400f26:	557d                	li	a0,-1
20400f28:	40fa                	lw	ra,156(sp)
20400f2a:	446a                	lw	s0,152(sp)
20400f2c:	44da                	lw	s1,148(sp)
20400f2e:	494a                	lw	s2,144(sp)
20400f30:	49ba                	lw	s3,140(sp)
20400f32:	4a2a                	lw	s4,136(sp)
20400f34:	4a9a                	lw	s5,132(sp)
20400f36:	4b0a                	lw	s6,128(sp)
20400f38:	5bf6                	lw	s7,124(sp)
20400f3a:	5c66                	lw	s8,120(sp)
20400f3c:	5cd6                	lw	s9,116(sp)
20400f3e:	610d                	addi	sp,sp,160
20400f40:	8082                	ret
20400f42:	0405                	addi	s0,s0,1
20400f44:	bf21                	j	20400e5c <_vfiprintf_r+0x6a>
20400f46:	41550533          	sub	a0,a0,s5
20400f4a:	00ac1533          	sll	a0,s8,a0
20400f4e:	8fc9                	or	a5,a5,a0
20400f50:	c83e                	sw	a5,16(sp)
20400f52:	8922                	mv	s2,s0
20400f54:	b7b1                	j	20400ea0 <_vfiprintf_r+0xae>
20400f56:	4732                	lw	a4,12(sp)
20400f58:	00470693          	addi	a3,a4,4
20400f5c:	4318                	lw	a4,0(a4)
20400f5e:	c636                	sw	a3,12(sp)
20400f60:	02074963          	bltz	a4,20400f92 <_vfiprintf_r+0x1a0>
20400f64:	ce3a                	sw	a4,28(sp)
20400f66:	00044703          	lbu	a4,0(s0)
20400f6a:	02e00793          	li	a5,46
20400f6e:	04f71f63          	bne	a4,a5,20400fcc <_vfiprintf_r+0x1da>
20400f72:	00144703          	lbu	a4,1(s0)
20400f76:	02a00793          	li	a5,42
20400f7a:	02f71b63          	bne	a4,a5,20400fb0 <_vfiprintf_r+0x1be>
20400f7e:	47b2                	lw	a5,12(sp)
20400f80:	0409                	addi	s0,s0,2
20400f82:	00478713          	addi	a4,a5,4
20400f86:	439c                	lw	a5,0(a5)
20400f88:	c63a                	sw	a4,12(sp)
20400f8a:	0207c163          	bltz	a5,20400fac <_vfiprintf_r+0x1ba>
20400f8e:	ca3e                	sw	a5,20(sp)
20400f90:	a835                	j	20400fcc <_vfiprintf_r+0x1da>
20400f92:	40e00733          	neg	a4,a4
20400f96:	0027e793          	ori	a5,a5,2
20400f9a:	ce3a                	sw	a4,28(sp)
20400f9c:	c83e                	sw	a5,16(sp)
20400f9e:	b7e1                	j	20400f66 <_vfiprintf_r+0x174>
20400fa0:	036787b3          	mul	a5,a5,s6
20400fa4:	4685                	li	a3,1
20400fa6:	842e                	mv	s0,a1
20400fa8:	97ba                	add	a5,a5,a4
20400faa:	bf25                	j	20400ee2 <_vfiprintf_r+0xf0>
20400fac:	57fd                	li	a5,-1
20400fae:	b7c5                	j	20400f8e <_vfiprintf_r+0x19c>
20400fb0:	0405                	addi	s0,s0,1
20400fb2:	ca02                	sw	zero,20(sp)
20400fb4:	4681                	li	a3,0
20400fb6:	4781                	li	a5,0
20400fb8:	4625                	li	a2,9
20400fba:	00044703          	lbu	a4,0(s0)
20400fbe:	00140593          	addi	a1,s0,1
20400fc2:	fd070713          	addi	a4,a4,-48
20400fc6:	06e67663          	bgeu	a2,a4,20401032 <_vfiprintf_r+0x240>
20400fca:	f2f1                	bnez	a3,20400f8e <_vfiprintf_r+0x19c>
20400fcc:	00044583          	lbu	a1,0(s0)
20400fd0:	460d                	li	a2,3
20400fd2:	00004517          	auipc	a0,0x4
20400fd6:	16250513          	addi	a0,a0,354 # 20405134 <__sf_fake_stdout+0x28>
20400fda:	2495                	jal	2040123e <memchr>
20400fdc:	cd11                	beqz	a0,20400ff8 <_vfiprintf_r+0x206>
20400fde:	00004797          	auipc	a5,0x4
20400fe2:	15678793          	addi	a5,a5,342 # 20405134 <__sf_fake_stdout+0x28>
20400fe6:	8d1d                	sub	a0,a0,a5
20400fe8:	04000793          	li	a5,64
20400fec:	00a797b3          	sll	a5,a5,a0
20400ff0:	4542                	lw	a0,16(sp)
20400ff2:	0405                	addi	s0,s0,1
20400ff4:	8d5d                	or	a0,a0,a5
20400ff6:	c82a                	sw	a0,16(sp)
20400ff8:	00044583          	lbu	a1,0(s0)
20400ffc:	4619                	li	a2,6
20400ffe:	00004517          	auipc	a0,0x4
20401002:	13a50513          	addi	a0,a0,314 # 20405138 <__sf_fake_stdout+0x2c>
20401006:	00140913          	addi	s2,s0,1
2040100a:	02b10423          	sb	a1,40(sp)
2040100e:	2c05                	jal	2040123e <memchr>
20401010:	c13d                	beqz	a0,20401076 <_vfiprintf_r+0x284>
20401012:	dfbff797          	auipc	a5,0xdfbff
20401016:	fee78793          	addi	a5,a5,-18 # 0 <__metal_boot_hart>
2040101a:	e795                	bnez	a5,20401046 <_vfiprintf_r+0x254>
2040101c:	4742                	lw	a4,16(sp)
2040101e:	47b2                	lw	a5,12(sp)
20401020:	10077713          	andi	a4,a4,256
20401024:	cf09                	beqz	a4,2040103e <_vfiprintf_r+0x24c>
20401026:	0791                	addi	a5,a5,4
20401028:	c63e                	sw	a5,12(sp)
2040102a:	5792                	lw	a5,36(sp)
2040102c:	97d2                	add	a5,a5,s4
2040102e:	d23e                	sw	a5,36(sp)
20401030:	b52d                	j	20400e5a <_vfiprintf_r+0x68>
20401032:	036787b3          	mul	a5,a5,s6
20401036:	4685                	li	a3,1
20401038:	842e                	mv	s0,a1
2040103a:	97ba                	add	a5,a5,a4
2040103c:	bfbd                	j	20400fba <_vfiprintf_r+0x1c8>
2040103e:	079d                	addi	a5,a5,7
20401040:	9be1                	andi	a5,a5,-8
20401042:	07a1                	addi	a5,a5,8
20401044:	b7d5                	j	20401028 <_vfiprintf_r+0x236>
20401046:	0078                	addi	a4,sp,12
20401048:	00000697          	auipc	a3,0x0
2040104c:	d6868693          	addi	a3,a3,-664 # 20400db0 <__sfputs_r>
20401050:	8626                	mv	a2,s1
20401052:	080c                	addi	a1,sp,16
20401054:	854e                	mv	a0,s3
20401056:	00000097          	auipc	ra,0x0
2040105a:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040105e:	57fd                	li	a5,-1
20401060:	8a2a                	mv	s4,a0
20401062:	fcf514e3          	bne	a0,a5,2040102a <_vfiprintf_r+0x238>
20401066:	00c4d783          	lhu	a5,12(s1)
2040106a:	0407f793          	andi	a5,a5,64
2040106e:	ea079ce3          	bnez	a5,20400f26 <_vfiprintf_r+0x134>
20401072:	5512                	lw	a0,36(sp)
20401074:	bd55                	j	20400f28 <_vfiprintf_r+0x136>
20401076:	0078                	addi	a4,sp,12
20401078:	00000697          	auipc	a3,0x0
2040107c:	d3868693          	addi	a3,a3,-712 # 20400db0 <__sfputs_r>
20401080:	8626                	mv	a2,s1
20401082:	080c                	addi	a1,sp,16
20401084:	854e                	mv	a0,s3
20401086:	24cd                	jal	20401368 <_printf_i>
20401088:	bfd9                	j	2040105e <_vfiprintf_r+0x26c>

2040108a <_sbrk_r>:
_sbrk_r():
2040108a:	1141                	addi	sp,sp,-16
2040108c:	c422                	sw	s0,8(sp)
2040108e:	842a                	mv	s0,a0
20401090:	852e                	mv	a0,a1
20401092:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
20401096:	c606                	sw	ra,12(sp)
20401098:	2da9                	jal	204016f2 <_sbrk>
2040109a:	57fd                	li	a5,-1
2040109c:	00f51763          	bne	a0,a5,204010aa <_sbrk_r+0x20>
204010a0:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
204010a4:	439c                	lw	a5,0(a5)
204010a6:	c391                	beqz	a5,204010aa <_sbrk_r+0x20>
204010a8:	c01c                	sw	a5,0(s0)
204010aa:	40b2                	lw	ra,12(sp)
204010ac:	4422                	lw	s0,8(sp)
204010ae:	0141                	addi	sp,sp,16
204010b0:	8082                	ret

204010b2 <__sread>:
__sread():
204010b2:	1141                	addi	sp,sp,-16
204010b4:	c422                	sw	s0,8(sp)
204010b6:	842e                	mv	s0,a1
204010b8:	00e59583          	lh	a1,14(a1)
204010bc:	c606                	sw	ra,12(sp)
204010be:	23b1                	jal	2040160a <_read_r>
204010c0:	00054963          	bltz	a0,204010d2 <__sread+0x20>
204010c4:	487c                	lw	a5,84(s0)
204010c6:	97aa                	add	a5,a5,a0
204010c8:	c87c                	sw	a5,84(s0)
204010ca:	40b2                	lw	ra,12(sp)
204010cc:	4422                	lw	s0,8(sp)
204010ce:	0141                	addi	sp,sp,16
204010d0:	8082                	ret
204010d2:	00c45783          	lhu	a5,12(s0)
204010d6:	777d                	lui	a4,0xfffff
204010d8:	177d                	addi	a4,a4,-1
204010da:	8ff9                	and	a5,a5,a4
204010dc:	00f41623          	sh	a5,12(s0)
204010e0:	b7ed                	j	204010ca <__sread+0x18>

204010e2 <__swrite>:
__swrite():
204010e2:	00c5d783          	lhu	a5,12(a1)
204010e6:	1101                	addi	sp,sp,-32
204010e8:	cc22                	sw	s0,24(sp)
204010ea:	ca26                	sw	s1,20(sp)
204010ec:	c84a                	sw	s2,16(sp)
204010ee:	c64e                	sw	s3,12(sp)
204010f0:	ce06                	sw	ra,28(sp)
204010f2:	1007f793          	andi	a5,a5,256
204010f6:	84aa                	mv	s1,a0
204010f8:	842e                	mv	s0,a1
204010fa:	8932                	mv	s2,a2
204010fc:	89b6                	mv	s3,a3
204010fe:	c791                	beqz	a5,2040110a <__swrite+0x28>
20401100:	00e59583          	lh	a1,14(a1)
20401104:	4689                	li	a3,2
20401106:	4601                	li	a2,0
20401108:	2229                	jal	20401212 <_lseek_r>
2040110a:	00c45783          	lhu	a5,12(s0)
2040110e:	777d                	lui	a4,0xfffff
20401110:	177d                	addi	a4,a4,-1
20401112:	8ff9                	and	a5,a5,a4
20401114:	00f41623          	sh	a5,12(s0)
20401118:	00e41583          	lh	a1,14(s0)
2040111c:	4462                	lw	s0,24(sp)
2040111e:	40f2                	lw	ra,28(sp)
20401120:	86ce                	mv	a3,s3
20401122:	864a                	mv	a2,s2
20401124:	49b2                	lw	s3,12(sp)
20401126:	4942                	lw	s2,16(sp)
20401128:	8526                	mv	a0,s1
2040112a:	44d2                	lw	s1,20(sp)
2040112c:	6105                	addi	sp,sp,32
2040112e:	a83d                	j	2040116c <_write_r>

20401130 <__sseek>:
__sseek():
20401130:	1141                	addi	sp,sp,-16
20401132:	c422                	sw	s0,8(sp)
20401134:	842e                	mv	s0,a1
20401136:	00e59583          	lh	a1,14(a1)
2040113a:	c606                	sw	ra,12(sp)
2040113c:	28d9                	jal	20401212 <_lseek_r>
2040113e:	57fd                	li	a5,-1
20401140:	00c45703          	lhu	a4,12(s0)
20401144:	00f51b63          	bne	a0,a5,2040115a <__sseek+0x2a>
20401148:	77fd                	lui	a5,0xfffff
2040114a:	17fd                	addi	a5,a5,-1
2040114c:	8ff9                	and	a5,a5,a4
2040114e:	00f41623          	sh	a5,12(s0)
20401152:	40b2                	lw	ra,12(sp)
20401154:	4422                	lw	s0,8(sp)
20401156:	0141                	addi	sp,sp,16
20401158:	8082                	ret
2040115a:	6785                	lui	a5,0x1
2040115c:	8fd9                	or	a5,a5,a4
2040115e:	00f41623          	sh	a5,12(s0)
20401162:	c868                	sw	a0,84(s0)
20401164:	b7fd                	j	20401152 <__sseek+0x22>

20401166 <__sclose>:
__sclose():
20401166:	00e59583          	lh	a1,14(a1)
2040116a:	a03d                	j	20401198 <_close_r>

2040116c <_write_r>:
_write_r():
2040116c:	1141                	addi	sp,sp,-16
2040116e:	c422                	sw	s0,8(sp)
20401170:	842a                	mv	s0,a0
20401172:	852e                	mv	a0,a1
20401174:	85b2                	mv	a1,a2
20401176:	8636                	mv	a2,a3
20401178:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
2040117c:	c606                	sw	ra,12(sp)
2040117e:	23f9                	jal	2040174c <_write>
20401180:	57fd                	li	a5,-1
20401182:	00f51763          	bne	a0,a5,20401190 <_write_r+0x24>
20401186:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
2040118a:	439c                	lw	a5,0(a5)
2040118c:	c391                	beqz	a5,20401190 <_write_r+0x24>
2040118e:	c01c                	sw	a5,0(s0)
20401190:	40b2                	lw	ra,12(sp)
20401192:	4422                	lw	s0,8(sp)
20401194:	0141                	addi	sp,sp,16
20401196:	8082                	ret

20401198 <_close_r>:
_close_r():
20401198:	1141                	addi	sp,sp,-16
2040119a:	c422                	sw	s0,8(sp)
2040119c:	842a                	mv	s0,a0
2040119e:	852e                	mv	a0,a1
204011a0:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
204011a4:	c606                	sw	ra,12(sp)
204011a6:	2941                	jal	20401636 <_close>
204011a8:	57fd                	li	a5,-1
204011aa:	00f51763          	bne	a0,a5,204011b8 <_close_r+0x20>
204011ae:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
204011b2:	439c                	lw	a5,0(a5)
204011b4:	c391                	beqz	a5,204011b8 <_close_r+0x20>
204011b6:	c01c                	sw	a5,0(s0)
204011b8:	40b2                	lw	ra,12(sp)
204011ba:	4422                	lw	s0,8(sp)
204011bc:	0141                	addi	sp,sp,16
204011be:	8082                	ret

204011c0 <_fstat_r>:
_fstat_r():
204011c0:	1141                	addi	sp,sp,-16
204011c2:	c422                	sw	s0,8(sp)
204011c4:	842a                	mv	s0,a0
204011c6:	852e                	mv	a0,a1
204011c8:	85b2                	mv	a1,a2
204011ca:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
204011ce:	c606                	sw	ra,12(sp)
204011d0:	2161                	jal	20401658 <_fstat>
204011d2:	57fd                	li	a5,-1
204011d4:	00f51763          	bne	a0,a5,204011e2 <_fstat_r+0x22>
204011d8:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
204011dc:	439c                	lw	a5,0(a5)
204011de:	c391                	beqz	a5,204011e2 <_fstat_r+0x22>
204011e0:	c01c                	sw	a5,0(s0)
204011e2:	40b2                	lw	ra,12(sp)
204011e4:	4422                	lw	s0,8(sp)
204011e6:	0141                	addi	sp,sp,16
204011e8:	8082                	ret

204011ea <_isatty_r>:
_isatty_r():
204011ea:	1141                	addi	sp,sp,-16
204011ec:	c422                	sw	s0,8(sp)
204011ee:	842a                	mv	s0,a0
204011f0:	852e                	mv	a0,a1
204011f2:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
204011f6:	c606                	sw	ra,12(sp)
204011f8:	2159                	jal	2040167e <_isatty>
204011fa:	57fd                	li	a5,-1
204011fc:	00f51763          	bne	a0,a5,2040120a <_isatty_r+0x20>
20401200:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
20401204:	439c                	lw	a5,0(a5)
20401206:	c391                	beqz	a5,2040120a <_isatty_r+0x20>
20401208:	c01c                	sw	a5,0(s0)
2040120a:	40b2                	lw	ra,12(sp)
2040120c:	4422                	lw	s0,8(sp)
2040120e:	0141                	addi	sp,sp,16
20401210:	8082                	ret

20401212 <_lseek_r>:
_lseek_r():
20401212:	1141                	addi	sp,sp,-16
20401214:	c422                	sw	s0,8(sp)
20401216:	842a                	mv	s0,a0
20401218:	852e                	mv	a0,a1
2040121a:	85b2                	mv	a1,a2
2040121c:	8636                	mv	a2,a3
2040121e:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
20401222:	c606                	sw	ra,12(sp)
20401224:	29ad                	jal	2040169e <_lseek>
20401226:	57fd                	li	a5,-1
20401228:	00f51763          	bne	a0,a5,20401236 <_lseek_r+0x24>
2040122c:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
20401230:	439c                	lw	a5,0(a5)
20401232:	c391                	beqz	a5,20401236 <_lseek_r+0x24>
20401234:	c01c                	sw	a5,0(s0)
20401236:	40b2                	lw	ra,12(sp)
20401238:	4422                	lw	s0,8(sp)
2040123a:	0141                	addi	sp,sp,16
2040123c:	8082                	ret

2040123e <memchr>:
memchr():
2040123e:	0ff5f593          	andi	a1,a1,255
20401242:	962a                	add	a2,a2,a0
20401244:	00c51463          	bne	a0,a2,2040124c <memchr+0xe>
20401248:	4501                	li	a0,0
2040124a:	8082                	ret
2040124c:	00054783          	lbu	a5,0(a0)
20401250:	feb78de3          	beq	a5,a1,2040124a <memchr+0xc>
20401254:	0505                	addi	a0,a0,1
20401256:	b7fd                	j	20401244 <memchr+0x6>

20401258 <__malloc_lock>:
__malloc_lock():
20401258:	8082                	ret

2040125a <__malloc_unlock>:
__malloc_unlock():
2040125a:	8082                	ret

2040125c <_printf_common>:
_printf_common():
2040125c:	7179                	addi	sp,sp,-48
2040125e:	ca56                	sw	s5,20(sp)
20401260:	499c                	lw	a5,16(a1)
20401262:	8aba                	mv	s5,a4
20401264:	4598                	lw	a4,8(a1)
20401266:	d422                	sw	s0,40(sp)
20401268:	d226                	sw	s1,36(sp)
2040126a:	ce4e                	sw	s3,28(sp)
2040126c:	cc52                	sw	s4,24(sp)
2040126e:	d606                	sw	ra,44(sp)
20401270:	d04a                	sw	s2,32(sp)
20401272:	c85a                	sw	s6,16(sp)
20401274:	c65e                	sw	s7,12(sp)
20401276:	89aa                	mv	s3,a0
20401278:	842e                	mv	s0,a1
2040127a:	84b2                	mv	s1,a2
2040127c:	8a36                	mv	s4,a3
2040127e:	00e7d363          	bge	a5,a4,20401284 <_printf_common+0x28>
20401282:	87ba                	mv	a5,a4
20401284:	c09c                	sw	a5,0(s1)
20401286:	04344703          	lbu	a4,67(s0)
2040128a:	c319                	beqz	a4,20401290 <_printf_common+0x34>
2040128c:	0785                	addi	a5,a5,1
2040128e:	c09c                	sw	a5,0(s1)
20401290:	401c                	lw	a5,0(s0)
20401292:	0207f793          	andi	a5,a5,32
20401296:	c781                	beqz	a5,2040129e <_printf_common+0x42>
20401298:	409c                	lw	a5,0(s1)
2040129a:	0789                	addi	a5,a5,2
2040129c:	c09c                	sw	a5,0(s1)
2040129e:	00042903          	lw	s2,0(s0)
204012a2:	00697913          	andi	s2,s2,6
204012a6:	00091a63          	bnez	s2,204012ba <_printf_common+0x5e>
204012aa:	01940b13          	addi	s6,s0,25
204012ae:	5bfd                	li	s7,-1
204012b0:	445c                	lw	a5,12(s0)
204012b2:	4098                	lw	a4,0(s1)
204012b4:	8f99                	sub	a5,a5,a4
204012b6:	04f94c63          	blt	s2,a5,2040130e <_printf_common+0xb2>
204012ba:	401c                	lw	a5,0(s0)
204012bc:	04344683          	lbu	a3,67(s0)
204012c0:	0207f793          	andi	a5,a5,32
204012c4:	00d036b3          	snez	a3,a3
204012c8:	eba5                	bnez	a5,20401338 <_printf_common+0xdc>
204012ca:	04340613          	addi	a2,s0,67
204012ce:	85d2                	mv	a1,s4
204012d0:	854e                	mv	a0,s3
204012d2:	9a82                	jalr	s5
204012d4:	57fd                	li	a5,-1
204012d6:	04f50363          	beq	a0,a5,2040131c <_printf_common+0xc0>
204012da:	401c                	lw	a5,0(s0)
204012dc:	4611                	li	a2,4
204012de:	4098                	lw	a4,0(s1)
204012e0:	8b99                	andi	a5,a5,6
204012e2:	4454                	lw	a3,12(s0)
204012e4:	4481                	li	s1,0
204012e6:	00c79763          	bne	a5,a2,204012f4 <_printf_common+0x98>
204012ea:	40e684b3          	sub	s1,a3,a4
204012ee:	0004d363          	bgez	s1,204012f4 <_printf_common+0x98>
204012f2:	4481                	li	s1,0
204012f4:	441c                	lw	a5,8(s0)
204012f6:	4818                	lw	a4,16(s0)
204012f8:	00f75463          	bge	a4,a5,20401300 <_printf_common+0xa4>
204012fc:	8f99                	sub	a5,a5,a4
204012fe:	94be                	add	s1,s1,a5
20401300:	4901                	li	s2,0
20401302:	0469                	addi	s0,s0,26
20401304:	5b7d                	li	s6,-1
20401306:	05249863          	bne	s1,s2,20401356 <_printf_common+0xfa>
2040130a:	4501                	li	a0,0
2040130c:	a809                	j	2040131e <_printf_common+0xc2>
2040130e:	4685                	li	a3,1
20401310:	865a                	mv	a2,s6
20401312:	85d2                	mv	a1,s4
20401314:	854e                	mv	a0,s3
20401316:	9a82                	jalr	s5
20401318:	01751e63          	bne	a0,s7,20401334 <_printf_common+0xd8>
2040131c:	557d                	li	a0,-1
2040131e:	50b2                	lw	ra,44(sp)
20401320:	5422                	lw	s0,40(sp)
20401322:	5492                	lw	s1,36(sp)
20401324:	5902                	lw	s2,32(sp)
20401326:	49f2                	lw	s3,28(sp)
20401328:	4a62                	lw	s4,24(sp)
2040132a:	4ad2                	lw	s5,20(sp)
2040132c:	4b42                	lw	s6,16(sp)
2040132e:	4bb2                	lw	s7,12(sp)
20401330:	6145                	addi	sp,sp,48
20401332:	8082                	ret
20401334:	0905                	addi	s2,s2,1
20401336:	bfad                	j	204012b0 <_printf_common+0x54>
20401338:	00d40733          	add	a4,s0,a3
2040133c:	03000613          	li	a2,48
20401340:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffdc2f>
20401344:	04544703          	lbu	a4,69(s0)
20401348:	00168793          	addi	a5,a3,1
2040134c:	97a2                	add	a5,a5,s0
2040134e:	0689                	addi	a3,a3,2
20401350:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20401354:	bf9d                	j	204012ca <_printf_common+0x6e>
20401356:	4685                	li	a3,1
20401358:	8622                	mv	a2,s0
2040135a:	85d2                	mv	a1,s4
2040135c:	854e                	mv	a0,s3
2040135e:	9a82                	jalr	s5
20401360:	fb650ee3          	beq	a0,s6,2040131c <_printf_common+0xc0>
20401364:	0905                	addi	s2,s2,1
20401366:	b745                	j	20401306 <_printf_common+0xaa>

20401368 <_printf_i>:
_printf_i():
20401368:	7179                	addi	sp,sp,-48
2040136a:	d422                	sw	s0,40(sp)
2040136c:	d226                	sw	s1,36(sp)
2040136e:	d04a                	sw	s2,32(sp)
20401370:	ce4e                	sw	s3,28(sp)
20401372:	d606                	sw	ra,44(sp)
20401374:	cc52                	sw	s4,24(sp)
20401376:	ca56                	sw	s5,20(sp)
20401378:	c85a                	sw	s6,16(sp)
2040137a:	89b6                	mv	s3,a3
2040137c:	0185c683          	lbu	a3,24(a1)
20401380:	06e00793          	li	a5,110
20401384:	8932                	mv	s2,a2
20401386:	84aa                	mv	s1,a0
20401388:	842e                	mv	s0,a1
2040138a:	04358613          	addi	a2,a1,67
2040138e:	1ef68063          	beq	a3,a5,2040156e <_printf_i+0x206>
20401392:	06d7e263          	bltu	a5,a3,204013f6 <_printf_i+0x8e>
20401396:	06300793          	li	a5,99
2040139a:	0af68263          	beq	a3,a5,2040143e <_printf_i+0xd6>
2040139e:	00d7ed63          	bltu	a5,a3,204013b8 <_printf_i+0x50>
204013a2:	1e068a63          	beqz	a3,20401596 <_printf_i+0x22e>
204013a6:	05800793          	li	a5,88
204013aa:	16f68663          	beq	a3,a5,20401516 <_printf_i+0x1ae>
204013ae:	04240a93          	addi	s5,s0,66
204013b2:	04d40123          	sb	a3,66(s0)
204013b6:	a869                	j	20401450 <_printf_i+0xe8>
204013b8:	06400793          	li	a5,100
204013bc:	00f68663          	beq	a3,a5,204013c8 <_printf_i+0x60>
204013c0:	06900793          	li	a5,105
204013c4:	fef695e3          	bne	a3,a5,204013ae <_printf_i+0x46>
204013c8:	401c                	lw	a5,0(s0)
204013ca:	4308                	lw	a0,0(a4)
204013cc:	0807f693          	andi	a3,a5,128
204013d0:	00450593          	addi	a1,a0,4
204013d4:	c2c1                	beqz	a3,20401454 <_printf_i+0xec>
204013d6:	411c                	lw	a5,0(a0)
204013d8:	c30c                	sw	a1,0(a4)
204013da:	0007d863          	bgez	a5,204013ea <_printf_i+0x82>
204013de:	02d00713          	li	a4,45
204013e2:	40f007b3          	neg	a5,a5
204013e6:	04e401a3          	sb	a4,67(s0)
204013ea:	00004697          	auipc	a3,0x4
204013ee:	d5668693          	addi	a3,a3,-682 # 20405140 <__sf_fake_stdout+0x34>
204013f2:	4729                	li	a4,10
204013f4:	a065                	j	2040149c <_printf_i+0x134>
204013f6:	07300793          	li	a5,115
204013fa:	1af68263          	beq	a3,a5,2040159e <_printf_i+0x236>
204013fe:	00d7ef63          	bltu	a5,a3,2040141c <_printf_i+0xb4>
20401402:	06f00793          	li	a5,111
20401406:	04f68f63          	beq	a3,a5,20401464 <_printf_i+0xfc>
2040140a:	07000793          	li	a5,112
2040140e:	faf690e3          	bne	a3,a5,204013ae <_printf_i+0x46>
20401412:	419c                	lw	a5,0(a1)
20401414:	0207e793          	ori	a5,a5,32
20401418:	c19c                	sw	a5,0(a1)
2040141a:	a809                	j	2040142c <_printf_i+0xc4>
2040141c:	07500793          	li	a5,117
20401420:	04f68263          	beq	a3,a5,20401464 <_printf_i+0xfc>
20401424:	07800793          	li	a5,120
20401428:	f8f693e3          	bne	a3,a5,204013ae <_printf_i+0x46>
2040142c:	07800793          	li	a5,120
20401430:	04f402a3          	sb	a5,69(s0)
20401434:	00004697          	auipc	a3,0x4
20401438:	d2068693          	addi	a3,a3,-736 # 20405154 <__sf_fake_stdout+0x48>
2040143c:	a0dd                	j	20401522 <_printf_i+0x1ba>
2040143e:	431c                	lw	a5,0(a4)
20401440:	04258a93          	addi	s5,a1,66
20401444:	00478693          	addi	a3,a5,4
20401448:	439c                	lw	a5,0(a5)
2040144a:	c314                	sw	a3,0(a4)
2040144c:	04f58123          	sb	a5,66(a1)
20401450:	4785                	li	a5,1
20401452:	a2ad                	j	204015bc <_printf_i+0x254>
20401454:	0407f693          	andi	a3,a5,64
20401458:	411c                	lw	a5,0(a0)
2040145a:	c30c                	sw	a1,0(a4)
2040145c:	debd                	beqz	a3,204013da <_printf_i+0x72>
2040145e:	07c2                	slli	a5,a5,0x10
20401460:	87c1                	srai	a5,a5,0x10
20401462:	bfa5                	j	204013da <_printf_i+0x72>
20401464:	400c                	lw	a1,0(s0)
20401466:	431c                	lw	a5,0(a4)
20401468:	0805f813          	andi	a6,a1,128
2040146c:	00478513          	addi	a0,a5,4
20401470:	00080563          	beqz	a6,2040147a <_printf_i+0x112>
20401474:	c308                	sw	a0,0(a4)
20401476:	439c                	lw	a5,0(a5)
20401478:	a039                	j	20401486 <_printf_i+0x11e>
2040147a:	0405f593          	andi	a1,a1,64
2040147e:	c308                	sw	a0,0(a4)
20401480:	d9fd                	beqz	a1,20401476 <_printf_i+0x10e>
20401482:	0007d783          	lhu	a5,0(a5)
20401486:	06f00713          	li	a4,111
2040148a:	0ce68a63          	beq	a3,a4,2040155e <_printf_i+0x1f6>
2040148e:	00004697          	auipc	a3,0x4
20401492:	cb268693          	addi	a3,a3,-846 # 20405140 <__sf_fake_stdout+0x34>
20401496:	4729                	li	a4,10
20401498:	040401a3          	sb	zero,67(s0)
2040149c:	404c                	lw	a1,4(s0)
2040149e:	c40c                	sw	a1,8(s0)
204014a0:	0005c563          	bltz	a1,204014aa <_printf_i+0x142>
204014a4:	4008                	lw	a0,0(s0)
204014a6:	996d                	andi	a0,a0,-5
204014a8:	c008                	sw	a0,0(s0)
204014aa:	e399                	bnez	a5,204014b0 <_printf_i+0x148>
204014ac:	8ab2                	mv	s5,a2
204014ae:	cd91                	beqz	a1,204014ca <_printf_i+0x162>
204014b0:	8ab2                	mv	s5,a2
204014b2:	02e7f5b3          	remu	a1,a5,a4
204014b6:	1afd                	addi	s5,s5,-1
204014b8:	95b6                	add	a1,a1,a3
204014ba:	0005c583          	lbu	a1,0(a1)
204014be:	00ba8023          	sb	a1,0(s5)
204014c2:	02e7d5b3          	divu	a1,a5,a4
204014c6:	0ae7f263          	bgeu	a5,a4,2040156a <_printf_i+0x202>
204014ca:	47a1                	li	a5,8
204014cc:	00f71e63          	bne	a4,a5,204014e8 <_printf_i+0x180>
204014d0:	401c                	lw	a5,0(s0)
204014d2:	8b85                	andi	a5,a5,1
204014d4:	cb91                	beqz	a5,204014e8 <_printf_i+0x180>
204014d6:	4058                	lw	a4,4(s0)
204014d8:	481c                	lw	a5,16(s0)
204014da:	00e7c763          	blt	a5,a4,204014e8 <_printf_i+0x180>
204014de:	03000793          	li	a5,48
204014e2:	fefa8fa3          	sb	a5,-1(s5)
204014e6:	1afd                	addi	s5,s5,-1
204014e8:	41560633          	sub	a2,a2,s5
204014ec:	c810                	sw	a2,16(s0)
204014ee:	874e                	mv	a4,s3
204014f0:	86ca                	mv	a3,s2
204014f2:	0070                	addi	a2,sp,12
204014f4:	85a2                	mv	a1,s0
204014f6:	8526                	mv	a0,s1
204014f8:	3395                	jal	2040125c <_printf_common>
204014fa:	5a7d                	li	s4,-1
204014fc:	0d451463          	bne	a0,s4,204015c4 <_printf_i+0x25c>
20401500:	557d                	li	a0,-1
20401502:	50b2                	lw	ra,44(sp)
20401504:	5422                	lw	s0,40(sp)
20401506:	5492                	lw	s1,36(sp)
20401508:	5902                	lw	s2,32(sp)
2040150a:	49f2                	lw	s3,28(sp)
2040150c:	4a62                	lw	s4,24(sp)
2040150e:	4ad2                	lw	s5,20(sp)
20401510:	4b42                	lw	s6,16(sp)
20401512:	6145                	addi	sp,sp,48
20401514:	8082                	ret
20401516:	04d582a3          	sb	a3,69(a1)
2040151a:	00004697          	auipc	a3,0x4
2040151e:	c2668693          	addi	a3,a3,-986 # 20405140 <__sf_fake_stdout+0x34>
20401522:	400c                	lw	a1,0(s0)
20401524:	4308                	lw	a0,0(a4)
20401526:	0805f813          	andi	a6,a1,128
2040152a:	411c                	lw	a5,0(a0)
2040152c:	0511                	addi	a0,a0,4
2040152e:	02080063          	beqz	a6,2040154e <_printf_i+0x1e6>
20401532:	c308                	sw	a0,0(a4)
20401534:	0015f713          	andi	a4,a1,1
20401538:	c701                	beqz	a4,20401540 <_printf_i+0x1d8>
2040153a:	0205e593          	ori	a1,a1,32
2040153e:	c00c                	sw	a1,0(s0)
20401540:	4741                	li	a4,16
20401542:	fbb9                	bnez	a5,20401498 <_printf_i+0x130>
20401544:	400c                	lw	a1,0(s0)
20401546:	fdf5f593          	andi	a1,a1,-33
2040154a:	c00c                	sw	a1,0(s0)
2040154c:	b7b1                	j	20401498 <_printf_i+0x130>
2040154e:	0405f813          	andi	a6,a1,64
20401552:	c308                	sw	a0,0(a4)
20401554:	fe0800e3          	beqz	a6,20401534 <_printf_i+0x1cc>
20401558:	07c2                	slli	a5,a5,0x10
2040155a:	83c1                	srli	a5,a5,0x10
2040155c:	bfe1                	j	20401534 <_printf_i+0x1cc>
2040155e:	00004697          	auipc	a3,0x4
20401562:	be268693          	addi	a3,a3,-1054 # 20405140 <__sf_fake_stdout+0x34>
20401566:	4721                	li	a4,8
20401568:	bf05                	j	20401498 <_printf_i+0x130>
2040156a:	87ae                	mv	a5,a1
2040156c:	b799                	j	204014b2 <_printf_i+0x14a>
2040156e:	4194                	lw	a3,0(a1)
20401570:	431c                	lw	a5,0(a4)
20401572:	49cc                	lw	a1,20(a1)
20401574:	0806f813          	andi	a6,a3,128
20401578:	00478513          	addi	a0,a5,4
2040157c:	00080663          	beqz	a6,20401588 <_printf_i+0x220>
20401580:	c308                	sw	a0,0(a4)
20401582:	439c                	lw	a5,0(a5)
20401584:	c38c                	sw	a1,0(a5)
20401586:	a801                	j	20401596 <_printf_i+0x22e>
20401588:	c308                	sw	a0,0(a4)
2040158a:	0406f693          	andi	a3,a3,64
2040158e:	439c                	lw	a5,0(a5)
20401590:	daf5                	beqz	a3,20401584 <_printf_i+0x21c>
20401592:	00b79023          	sh	a1,0(a5)
20401596:	00042823          	sw	zero,16(s0)
2040159a:	8ab2                	mv	s5,a2
2040159c:	bf89                	j	204014ee <_printf_i+0x186>
2040159e:	431c                	lw	a5,0(a4)
204015a0:	41d0                	lw	a2,4(a1)
204015a2:	4581                	li	a1,0
204015a4:	00478693          	addi	a3,a5,4
204015a8:	c314                	sw	a3,0(a4)
204015aa:	0007aa83          	lw	s5,0(a5)
204015ae:	8556                	mv	a0,s5
204015b0:	3179                	jal	2040123e <memchr>
204015b2:	c501                	beqz	a0,204015ba <_printf_i+0x252>
204015b4:	41550533          	sub	a0,a0,s5
204015b8:	c048                	sw	a0,4(s0)
204015ba:	405c                	lw	a5,4(s0)
204015bc:	c81c                	sw	a5,16(s0)
204015be:	040401a3          	sb	zero,67(s0)
204015c2:	b735                	j	204014ee <_printf_i+0x186>
204015c4:	4814                	lw	a3,16(s0)
204015c6:	8656                	mv	a2,s5
204015c8:	85ca                	mv	a1,s2
204015ca:	8526                	mv	a0,s1
204015cc:	9982                	jalr	s3
204015ce:	f34509e3          	beq	a0,s4,20401500 <_printf_i+0x198>
204015d2:	401c                	lw	a5,0(s0)
204015d4:	8b89                	andi	a5,a5,2
204015d6:	e78d                	bnez	a5,20401600 <_printf_i+0x298>
204015d8:	47b2                	lw	a5,12(sp)
204015da:	4448                	lw	a0,12(s0)
204015dc:	f2f553e3          	bge	a0,a5,20401502 <_printf_i+0x19a>
204015e0:	853e                	mv	a0,a5
204015e2:	b705                	j	20401502 <_printf_i+0x19a>
204015e4:	4685                	li	a3,1
204015e6:	8656                	mv	a2,s5
204015e8:	85ca                	mv	a1,s2
204015ea:	8526                	mv	a0,s1
204015ec:	9982                	jalr	s3
204015ee:	f16509e3          	beq	a0,s6,20401500 <_printf_i+0x198>
204015f2:	0a05                	addi	s4,s4,1
204015f4:	445c                	lw	a5,12(s0)
204015f6:	4732                	lw	a4,12(sp)
204015f8:	8f99                	sub	a5,a5,a4
204015fa:	fefa45e3          	blt	s4,a5,204015e4 <_printf_i+0x27c>
204015fe:	bfe9                	j	204015d8 <_printf_i+0x270>
20401600:	4a01                	li	s4,0
20401602:	01940a93          	addi	s5,s0,25
20401606:	5b7d                	li	s6,-1
20401608:	b7f5                	j	204015f4 <_printf_i+0x28c>

2040160a <_read_r>:
_read_r():
2040160a:	1141                	addi	sp,sp,-16
2040160c:	c422                	sw	s0,8(sp)
2040160e:	842a                	mv	s0,a0
20401610:	852e                	mv	a0,a1
20401612:	85b2                	mv	a1,a2
20401614:	8636                	mv	a2,a3
20401616:	8c01a423          	sw	zero,-1848(gp) # 80000810 <errno>
2040161a:	c606                	sw	ra,12(sp)
2040161c:	2075                	jal	204016c8 <_read>
2040161e:	57fd                	li	a5,-1
20401620:	00f51763          	bne	a0,a5,2040162e <_read_r+0x24>
20401624:	8c818793          	addi	a5,gp,-1848 # 80000810 <errno>
20401628:	439c                	lw	a5,0(a5)
2040162a:	c391                	beqz	a5,2040162e <_read_r+0x24>
2040162c:	c01c                	sw	a5,0(s0)
2040162e:	40b2                	lw	ra,12(sp)
20401630:	4422                	lw	s0,8(sp)
20401632:	0141                	addi	sp,sp,16
20401634:	8082                	ret

20401636 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401636:	1101                	addi	sp,sp,-32
20401638:	ce06                	sw	ra,28(sp)
2040163a:	cc22                	sw	s0,24(sp)
2040163c:	1000                	addi	s0,sp,32
2040163e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401642:	2249                	jal	204017c4 <__errno>
20401644:	872a                	mv	a4,a0
20401646:	05800793          	li	a5,88
2040164a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
2040164c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2040164e:	853e                	mv	a0,a5
20401650:	40f2                	lw	ra,28(sp)
20401652:	4462                	lw	s0,24(sp)
20401654:	6105                	addi	sp,sp,32
20401656:	8082                	ret

20401658 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401658:	1101                	addi	sp,sp,-32
2040165a:	ce06                	sw	ra,28(sp)
2040165c:	cc22                	sw	s0,24(sp)
2040165e:	1000                	addi	s0,sp,32
20401660:	fea42623          	sw	a0,-20(s0)
20401664:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401668:	2ab1                	jal	204017c4 <__errno>
2040166a:	872a                	mv	a4,a0
2040166c:	fa800793          	li	a5,-88
20401670:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401672:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401674:	853e                	mv	a0,a5
20401676:	40f2                	lw	ra,28(sp)
20401678:	4462                	lw	s0,24(sp)
2040167a:	6105                	addi	sp,sp,32
2040167c:	8082                	ret

2040167e <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040167e:	1101                	addi	sp,sp,-32
20401680:	ce22                	sw	s0,28(sp)
20401682:	1000                	addi	s0,sp,32
20401684:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401688:	fec42783          	lw	a5,-20(s0)
2040168c:	17fd                	addi	a5,a5,-1
2040168e:	0017b793          	seqz	a5,a5
20401692:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401696:	853e                	mv	a0,a5
20401698:	4472                	lw	s0,28(sp)
2040169a:	6105                	addi	sp,sp,32
2040169c:	8082                	ret

2040169e <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040169e:	1101                	addi	sp,sp,-32
204016a0:	ce06                	sw	ra,28(sp)
204016a2:	cc22                	sw	s0,24(sp)
204016a4:	1000                	addi	s0,sp,32
204016a6:	fea42623          	sw	a0,-20(s0)
204016aa:	feb42423          	sw	a1,-24(s0)
204016ae:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204016b2:	2a09                	jal	204017c4 <__errno>
204016b4:	872a                	mv	a4,a0
204016b6:	05800793          	li	a5,88
204016ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
204016bc:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
204016be:	853e                	mv	a0,a5
204016c0:	40f2                	lw	ra,28(sp)
204016c2:	4462                	lw	s0,24(sp)
204016c4:	6105                	addi	sp,sp,32
204016c6:	8082                	ret

204016c8 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
204016c8:	1101                	addi	sp,sp,-32
204016ca:	ce06                	sw	ra,28(sp)
204016cc:	cc22                	sw	s0,24(sp)
204016ce:	1000                	addi	s0,sp,32
204016d0:	fea42623          	sw	a0,-20(s0)
204016d4:	feb42423          	sw	a1,-24(s0)
204016d8:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204016dc:	20e5                	jal	204017c4 <__errno>
204016de:	872a                	mv	a4,a0
204016e0:	05800793          	li	a5,88
204016e4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204016e6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204016e8:	853e                	mv	a0,a5
204016ea:	40f2                	lw	ra,28(sp)
204016ec:	4462                	lw	s0,24(sp)
204016ee:	6105                	addi	sp,sp,32
204016f0:	8082                	ret

204016f2 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204016f2:	7179                	addi	sp,sp,-48
204016f4:	d622                	sw	s0,44(sp)
204016f6:	1800                	addi	s0,sp,48
204016f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204016fc:	80c1a783          	lw	a5,-2036(gp) # 80000754 <brk>
20401700:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401704:	ccc18713          	addi	a4,gp,-820 # 80000c14 <_sp>
20401708:	4cc18793          	addi	a5,gp,1228 # 80001414 <metal_segment_heap_target_end>
2040170c:	00f71463          	bne	a4,a5,20401714 <_sbrk+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401710:	57fd                	li	a5,-1
20401712:	a80d                	j	20401744 <_sbrk+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401714:	80c1a703          	lw	a4,-2036(gp) # 80000754 <brk>
20401718:	fdc42783          	lw	a5,-36(s0)
2040171c:	973e                	add	a4,a4,a5
2040171e:	4cc18793          	addi	a5,gp,1228 # 80001414 <metal_segment_heap_target_end>
20401722:	00f77c63          	bgeu	a4,a5,2040173a <_sbrk+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401726:	80c1a703          	lw	a4,-2036(gp) # 80000754 <brk>
2040172a:	fdc42783          	lw	a5,-36(s0)
2040172e:	973e                	add	a4,a4,a5
20401730:	80e1a623          	sw	a4,-2036(gp) # 80000754 <brk>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401734:	fec42783          	lw	a5,-20(s0)
20401738:	a031                	j	20401744 <_sbrk+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040173a:	4cc18713          	addi	a4,gp,1228 # 80001414 <metal_segment_heap_target_end>
2040173e:	80e1a623          	sw	a4,-2036(gp) # 80000754 <brk>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401742:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401744:	853e                	mv	a0,a5
20401746:	5432                	lw	s0,44(sp)
20401748:	6145                	addi	sp,sp,48
2040174a:	8082                	ret

2040174c <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2040174c:	7179                	addi	sp,sp,-48
2040174e:	d606                	sw	ra,44(sp)
20401750:	d422                	sw	s0,40(sp)
20401752:	1800                	addi	s0,sp,48
20401754:	fca42e23          	sw	a0,-36(s0)
20401758:	fcb42c23          	sw	a1,-40(s0)
2040175c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401760:	fdc42703          	lw	a4,-36(s0)
20401764:	4785                	li	a5,1
20401766:	00f70963          	beq	a4,a5,20401778 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
2040176a:	28a9                	jal	204017c4 <__errno>
2040176c:	872a                	mv	a4,a0
2040176e:	05800793          	li	a5,88
20401772:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401774:	57fd                	li	a5,-1
20401776:	a82d                	j	204017b0 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401778:	fd842783          	lw	a5,-40(s0)
2040177c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401780:	fe042623          	sw	zero,-20(s0)
20401784:	a839                	j	204017a2 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401786:	fe842703          	lw	a4,-24(s0)
2040178a:	fec42783          	lw	a5,-20(s0)
2040178e:	97ba                	add	a5,a5,a4
20401790:	0007c783          	lbu	a5,0(a5)
20401794:	853e                	mv	a0,a5
20401796:	2ca1                	jal	204019ee <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401798:	fec42783          	lw	a5,-20(s0)
2040179c:	0785                	addi	a5,a5,1
2040179e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204017a2:	fec42703          	lw	a4,-20(s0)
204017a6:	fd442783          	lw	a5,-44(s0)
204017aa:	fcf76ee3          	bltu	a4,a5,20401786 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204017ae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204017b0:	853e                	mv	a0,a5
204017b2:	50b2                	lw	ra,44(sp)
204017b4:	5422                	lw	s0,40(sp)
204017b6:	6145                	addi	sp,sp,48
204017b8:	8082                	ret

204017ba <atexit>:
atexit():
204017ba:	85aa                	mv	a1,a0
204017bc:	4681                	li	a3,0
204017be:	4601                	li	a2,0
204017c0:	4501                	li	a0,0
204017c2:	a8f1                	j	2040189e <__register_exitproc>

204017c4 <__errno>:
__errno():
204017c4:	5fbff797          	auipc	a5,0x5fbff
204017c8:	f8878793          	addi	a5,a5,-120 # 8000074c <_impure_ptr>
204017cc:	4388                	lw	a0,0(a5)
204017ce:	8082                	ret

204017d0 <exit>:
exit():
204017d0:	1141                	addi	sp,sp,-16
204017d2:	c422                	sw	s0,8(sp)
204017d4:	c606                	sw	ra,12(sp)
204017d6:	00000797          	auipc	a5,0x0
204017da:	15078793          	addi	a5,a5,336 # 20401926 <__call_exitprocs>
204017de:	842a                	mv	s0,a0
204017e0:	c399                	beqz	a5,204017e6 <exit+0x16>
204017e2:	4581                	li	a1,0
204017e4:	2289                	jal	20401926 <__call_exitprocs>
204017e6:	5fbff797          	auipc	a5,0x5fbff
204017ea:	f6a78793          	addi	a5,a5,-150 # 80000750 <_global_impure_ptr>
204017ee:	4388                	lw	a0,0(a5)
204017f0:	551c                	lw	a5,40(a0)
204017f2:	c391                	beqz	a5,204017f6 <exit+0x26>
204017f4:	9782                	jalr	a5
204017f6:	8522                	mv	a0,s0
204017f8:	077030ef          	jal	ra,2040506e <_exit>

204017fc <__libc_fini_array>:
__libc_fini_array():
204017fc:	1141                	addi	sp,sp,-16
204017fe:	00004797          	auipc	a5,0x4
20401802:	cbe78793          	addi	a5,a5,-834 # 204054bc <__fini_array_end>
20401806:	c422                	sw	s0,8(sp)
20401808:	00004417          	auipc	s0,0x4
2040180c:	cb440413          	addi	s0,s0,-844 # 204054bc <__fini_array_end>
20401810:	8c1d                	sub	s0,s0,a5
20401812:	c226                	sw	s1,4(sp)
20401814:	c606                	sw	ra,12(sp)
20401816:	8409                	srai	s0,s0,0x2
20401818:	84be                	mv	s1,a5
2040181a:	e411                	bnez	s0,20401826 <__libc_fini_array+0x2a>
2040181c:	40b2                	lw	ra,12(sp)
2040181e:	4422                	lw	s0,8(sp)
20401820:	4492                	lw	s1,4(sp)
20401822:	0141                	addi	sp,sp,16
20401824:	8082                	ret
20401826:	147d                	addi	s0,s0,-1
20401828:	00241793          	slli	a5,s0,0x2
2040182c:	97a6                	add	a5,a5,s1
2040182e:	439c                	lw	a5,0(a5)
20401830:	9782                	jalr	a5
20401832:	b7e5                	j	2040181a <__libc_fini_array+0x1e>

20401834 <__libc_init_array>:
__libc_init_array():
20401834:	1141                	addi	sp,sp,-16
20401836:	00004797          	auipc	a5,0x4
2040183a:	c8278793          	addi	a5,a5,-894 # 204054b8 <__init_array_start>
2040183e:	c422                	sw	s0,8(sp)
20401840:	00004417          	auipc	s0,0x4
20401844:	c7840413          	addi	s0,s0,-904 # 204054b8 <__init_array_start>
20401848:	8c1d                	sub	s0,s0,a5
2040184a:	c226                	sw	s1,4(sp)
2040184c:	c04a                	sw	s2,0(sp)
2040184e:	c606                	sw	ra,12(sp)
20401850:	8409                	srai	s0,s0,0x2
20401852:	4481                	li	s1,0
20401854:	893e                	mv	s2,a5
20401856:	02849663          	bne	s1,s0,20401882 <__libc_init_array+0x4e>
2040185a:	00004797          	auipc	a5,0x4
2040185e:	c5e78793          	addi	a5,a5,-930 # 204054b8 <__init_array_start>
20401862:	00004417          	auipc	s0,0x4
20401866:	c5a40413          	addi	s0,s0,-934 # 204054bc <__fini_array_end>
2040186a:	8c1d                	sub	s0,s0,a5
2040186c:	8409                	srai	s0,s0,0x2
2040186e:	4481                	li	s1,0
20401870:	893e                	mv	s2,a5
20401872:	00849f63          	bne	s1,s0,20401890 <__libc_init_array+0x5c>
20401876:	40b2                	lw	ra,12(sp)
20401878:	4422                	lw	s0,8(sp)
2040187a:	4492                	lw	s1,4(sp)
2040187c:	4902                	lw	s2,0(sp)
2040187e:	0141                	addi	sp,sp,16
20401880:	8082                	ret
20401882:	00249793          	slli	a5,s1,0x2
20401886:	97ca                	add	a5,a5,s2
20401888:	439c                	lw	a5,0(a5)
2040188a:	0485                	addi	s1,s1,1
2040188c:	9782                	jalr	a5
2040188e:	b7e1                	j	20401856 <__libc_init_array+0x22>
20401890:	00249793          	slli	a5,s1,0x2
20401894:	97ca                	add	a5,a5,s2
20401896:	439c                	lw	a5,0(a5)
20401898:	0485                	addi	s1,s1,1
2040189a:	9782                	jalr	a5
2040189c:	bfd9                	j	20401872 <__libc_init_array+0x3e>

2040189e <__register_exitproc>:
__register_exitproc():
2040189e:	5fbff797          	auipc	a5,0x5fbff
204018a2:	ee278793          	addi	a5,a5,-286 # 80000780 <_global_atexit>
204018a6:	439c                	lw	a5,0(a5)
204018a8:	8e2a                	mv	t3,a0
204018aa:	e39d                	bnez	a5,204018d0 <__register_exitproc+0x32>
204018ac:	5fbff717          	auipc	a4,0x5fbff
204018b0:	ed870713          	addi	a4,a4,-296 # 80000784 <_global_atexit0>
204018b4:	5fbff797          	auipc	a5,0x5fbff
204018b8:	ece7a623          	sw	a4,-308(a5) # 80000780 <_global_atexit>
204018bc:	dfbfe517          	auipc	a0,0xdfbfe
204018c0:	74450513          	addi	a0,a0,1860 # 0 <__metal_boot_hart>
204018c4:	87ba                	mv	a5,a4
204018c6:	c509                	beqz	a0,204018d0 <__register_exitproc+0x32>
204018c8:	411c                	lw	a5,0(a0)
204018ca:	8cf1a223          	sw	a5,-1852(gp) # 8000080c <_global_atexit0+0x88>
204018ce:	87ba                	mv	a5,a4
204018d0:	43d8                	lw	a4,4(a5)
204018d2:	487d                	li	a6,31
204018d4:	557d                	li	a0,-1
204018d6:	04e84763          	blt	a6,a4,20401924 <__register_exitproc+0x86>
204018da:	020e0e63          	beqz	t3,20401916 <__register_exitproc+0x78>
204018de:	0887a803          	lw	a6,136(a5)
204018e2:	04080163          	beqz	a6,20401924 <__register_exitproc+0x86>
204018e6:	00271893          	slli	a7,a4,0x2
204018ea:	98c2                	add	a7,a7,a6
204018ec:	00c8a023          	sw	a2,0(a7)
204018f0:	10082303          	lw	t1,256(a6)
204018f4:	4605                	li	a2,1
204018f6:	00e61633          	sll	a2,a2,a4
204018fa:	00c36333          	or	t1,t1,a2
204018fe:	10682023          	sw	t1,256(a6)
20401902:	08d8a023          	sw	a3,128(a7)
20401906:	4689                	li	a3,2
20401908:	00de1763          	bne	t3,a3,20401916 <__register_exitproc+0x78>
2040190c:	10482683          	lw	a3,260(a6)
20401910:	8e55                	or	a2,a2,a3
20401912:	10c82223          	sw	a2,260(a6)
20401916:	00170693          	addi	a3,a4,1
2040191a:	070a                	slli	a4,a4,0x2
2040191c:	c3d4                	sw	a3,4(a5)
2040191e:	97ba                	add	a5,a5,a4
20401920:	c78c                	sw	a1,8(a5)
20401922:	4501                	li	a0,0
20401924:	8082                	ret

20401926 <__call_exitprocs>:
__call_exitprocs():
20401926:	7179                	addi	sp,sp,-48
20401928:	cc52                	sw	s4,24(sp)
2040192a:	ca56                	sw	s5,20(sp)
2040192c:	c85a                	sw	s6,16(sp)
2040192e:	c65e                	sw	s7,12(sp)
20401930:	d606                	sw	ra,44(sp)
20401932:	d422                	sw	s0,40(sp)
20401934:	d226                	sw	s1,36(sp)
20401936:	d04a                	sw	s2,32(sp)
20401938:	ce4e                	sw	s3,28(sp)
2040193a:	c462                	sw	s8,8(sp)
2040193c:	8b2a                	mv	s6,a0
2040193e:	8a2e                	mv	s4,a1
20401940:	5fbffa97          	auipc	s5,0x5fbff
20401944:	e40a8a93          	addi	s5,s5,-448 # 80000780 <_global_atexit>
20401948:	4b85                	li	s7,1
2040194a:	000aa403          	lw	s0,0(s5)
2040194e:	c811                	beqz	s0,20401962 <__call_exitprocs+0x3c>
20401950:	4044                	lw	s1,4(s0)
20401952:	08842983          	lw	s3,136(s0)
20401956:	fff48913          	addi	s2,s1,-1
2040195a:	048a                	slli	s1,s1,0x2
2040195c:	94a2                	add	s1,s1,s0
2040195e:	00095e63          	bgez	s2,2040197a <__call_exitprocs+0x54>
20401962:	50b2                	lw	ra,44(sp)
20401964:	5422                	lw	s0,40(sp)
20401966:	5492                	lw	s1,36(sp)
20401968:	5902                	lw	s2,32(sp)
2040196a:	49f2                	lw	s3,28(sp)
2040196c:	4a62                	lw	s4,24(sp)
2040196e:	4ad2                	lw	s5,20(sp)
20401970:	4b42                	lw	s6,16(sp)
20401972:	4bb2                	lw	s7,12(sp)
20401974:	4c22                	lw	s8,8(sp)
20401976:	6145                	addi	sp,sp,48
20401978:	8082                	ret
2040197a:	000a0e63          	beqz	s4,20401996 <__call_exitprocs+0x70>
2040197e:	00099563          	bnez	s3,20401988 <__call_exitprocs+0x62>
20401982:	197d                	addi	s2,s2,-1
20401984:	14f1                	addi	s1,s1,-4
20401986:	bfe1                	j	2040195e <__call_exitprocs+0x38>
20401988:	00291793          	slli	a5,s2,0x2
2040198c:	97ce                	add	a5,a5,s3
2040198e:	0807a783          	lw	a5,128(a5)
20401992:	ff4798e3          	bne	a5,s4,20401982 <__call_exitprocs+0x5c>
20401996:	4058                	lw	a4,4(s0)
20401998:	40dc                	lw	a5,4(s1)
2040199a:	177d                	addi	a4,a4,-1
2040199c:	03271863          	bne	a4,s2,204019cc <__call_exitprocs+0xa6>
204019a0:	01242223          	sw	s2,4(s0)
204019a4:	dff9                	beqz	a5,20401982 <__call_exitprocs+0x5c>
204019a6:	00442c03          	lw	s8,4(s0)
204019aa:	00098863          	beqz	s3,204019ba <__call_exitprocs+0x94>
204019ae:	1009a683          	lw	a3,256(s3)
204019b2:	012b9733          	sll	a4,s7,s2
204019b6:	8ef9                	and	a3,a3,a4
204019b8:	ee89                	bnez	a3,204019d2 <__call_exitprocs+0xac>
204019ba:	9782                	jalr	a5
204019bc:	4058                	lw	a4,4(s0)
204019be:	000aa783          	lw	a5,0(s5)
204019c2:	f98714e3          	bne	a4,s8,2040194a <__call_exitprocs+0x24>
204019c6:	faf40ee3          	beq	s0,a5,20401982 <__call_exitprocs+0x5c>
204019ca:	b741                	j	2040194a <__call_exitprocs+0x24>
204019cc:	0004a223          	sw	zero,4(s1)
204019d0:	bfd1                	j	204019a4 <__call_exitprocs+0x7e>
204019d2:	00291693          	slli	a3,s2,0x2
204019d6:	96ce                	add	a3,a3,s3
204019d8:	428c                	lw	a1,0(a3)
204019da:	1049a683          	lw	a3,260(s3)
204019de:	8f75                	and	a4,a4,a3
204019e0:	e701                	bnez	a4,204019e8 <__call_exitprocs+0xc2>
204019e2:	855a                	mv	a0,s6
204019e4:	9782                	jalr	a5
204019e6:	bfd9                	j	204019bc <__call_exitprocs+0x96>
204019e8:	852e                	mv	a0,a1
204019ea:	9782                	jalr	a5
204019ec:	bfc1                	j	204019bc <__call_exitprocs+0x96>

204019ee <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204019ee:	1101                	addi	sp,sp,-32
204019f0:	ce06                	sw	ra,28(sp)
204019f2:	cc22                	sw	s0,24(sp)
204019f4:	1000                	addi	s0,sp,32
204019f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
204019fa:	fec42703          	lw	a4,-20(s0)
204019fe:	47a9                	li	a5,10
20401a00:	00f71463          	bne	a4,a5,20401a08 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401a04:	4535                	li	a0,13
20401a06:	2811                	jal	20401a1a <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401a08:	fec42503          	lw	a0,-20(s0)
20401a0c:	2039                	jal	20401a1a <metal_tty_putc_raw>
20401a0e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401a10:	853e                	mv	a0,a5
20401a12:	40f2                	lw	ra,28(sp)
20401a14:	4462                	lw	s0,24(sp)
20401a16:	6105                	addi	sp,sp,32
20401a18:	8082                	ret

20401a1a <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401a1a:	1101                	addi	sp,sp,-32
20401a1c:	ce06                	sw	ra,28(sp)
20401a1e:	cc22                	sw	s0,24(sp)
20401a20:	1000                	addi	s0,sp,32
20401a22:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401a26:	fec42583          	lw	a1,-20(s0)
20401a2a:	800007b7          	lui	a5,0x80000
20401a2e:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
20401a32:	28b1                	jal	20401a8e <metal_uart_putc>
20401a34:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401a36:	853e                	mv	a0,a5
20401a38:	40f2                	lw	ra,28(sp)
20401a3a:	4462                	lw	s0,24(sp)
20401a3c:	6105                	addi	sp,sp,32
20401a3e:	8082                	ret

20401a40 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401a40:	1141                	addi	sp,sp,-16
20401a42:	c606                	sw	ra,12(sp)
20401a44:	c422                	sw	s0,8(sp)
20401a46:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401a48:	67f1                	lui	a5,0x1c
20401a4a:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401a4e:	800007b7          	lui	a5,0x80000
20401a52:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
20401a56:	2031                	jal	20401a62 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401a58:	0001                	nop
20401a5a:	40b2                	lw	ra,12(sp)
20401a5c:	4422                	lw	s0,8(sp)
20401a5e:	0141                	addi	sp,sp,16
20401a60:	8082                	ret

20401a62 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401a62:	1101                	addi	sp,sp,-32
20401a64:	ce06                	sw	ra,28(sp)
20401a66:	cc22                	sw	s0,24(sp)
20401a68:	1000                	addi	s0,sp,32
20401a6a:	fea42623          	sw	a0,-20(s0)
20401a6e:	feb42423          	sw	a1,-24(s0)
20401a72:	fec42783          	lw	a5,-20(s0)
20401a76:	439c                	lw	a5,0(a5)
20401a78:	439c                	lw	a5,0(a5)
20401a7a:	fe842583          	lw	a1,-24(s0)
20401a7e:	fec42503          	lw	a0,-20(s0)
20401a82:	9782                	jalr	a5
20401a84:	0001                	nop
20401a86:	40f2                	lw	ra,28(sp)
20401a88:	4462                	lw	s0,24(sp)
20401a8a:	6105                	addi	sp,sp,32
20401a8c:	8082                	ret

20401a8e <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401a8e:	1101                	addi	sp,sp,-32
20401a90:	ce06                	sw	ra,28(sp)
20401a92:	cc22                	sw	s0,24(sp)
20401a94:	1000                	addi	s0,sp,32
20401a96:	fea42623          	sw	a0,-20(s0)
20401a9a:	feb42423          	sw	a1,-24(s0)
20401a9e:	fec42783          	lw	a5,-20(s0)
20401aa2:	439c                	lw	a5,0(a5)
20401aa4:	43dc                	lw	a5,4(a5)
20401aa6:	fe842583          	lw	a1,-24(s0)
20401aaa:	fec42503          	lw	a0,-20(s0)
20401aae:	9782                	jalr	a5
20401ab0:	87aa                	mv	a5,a0
20401ab2:	853e                	mv	a0,a5
20401ab4:	40f2                	lw	ra,28(sp)
20401ab6:	4462                	lw	s0,24(sp)
20401ab8:	6105                	addi	sp,sp,32
20401aba:	8082                	ret

20401abc <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401abc:	1101                	addi	sp,sp,-32
20401abe:	ce06                	sw	ra,28(sp)
20401ac0:	cc22                	sw	s0,24(sp)
20401ac2:	1000                	addi	s0,sp,32
20401ac4:	fea42623          	sw	a0,-20(s0)
20401ac8:	feb42423          	sw	a1,-24(s0)
20401acc:	fec42783          	lw	a5,-20(s0)
20401ad0:	439c                	lw	a5,0(a5)
20401ad2:	4bdc                	lw	a5,20(a5)
20401ad4:	fe842583          	lw	a1,-24(s0)
20401ad8:	fec42503          	lw	a0,-20(s0)
20401adc:	9782                	jalr	a5
20401ade:	87aa                	mv	a5,a0
20401ae0:	853e                	mv	a0,a5
20401ae2:	40f2                	lw	ra,28(sp)
20401ae4:	4462                	lw	s0,24(sp)
20401ae6:	6105                	addi	sp,sp,32
20401ae8:	8082                	ret

20401aea <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401aea:	1101                	addi	sp,sp,-32
20401aec:	ce22                	sw	s0,28(sp)
20401aee:	1000                	addi	s0,sp,32
20401af0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401af4:	fec42703          	lw	a4,-20(s0)
20401af8:	81418793          	addi	a5,gp,-2028 # 8000075c <__metal_dt_clint_2000000>
20401afc:	00f71563          	bne	a4,a5,20401b06 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401b00:	020007b7          	lui	a5,0x2000
20401b04:	a011                	j	20401b08 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401b06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:143
	}
}
20401b08:	853e                	mv	a0,a5
20401b0a:	4472                	lw	s0,28(sp)
20401b0c:	6105                	addi	sp,sp,32
20401b0e:	8082                	ret

20401b10 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401b10:	1101                	addi	sp,sp,-32
20401b12:	ce22                	sw	s0,28(sp)
20401b14:	1000                	addi	s0,sp,32
20401b16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401b1a:	fec42703          	lw	a4,-20(s0)
20401b1e:	81418793          	addi	a5,gp,-2028 # 8000075c <__metal_dt_clint_2000000>
20401b22:	00f71463          	bne	a4,a5,20401b2a <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401b26:	4789                	li	a5,2
20401b28:	a011                	j	20401b2c <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401b2a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:163
	}
}
20401b2c:	853e                	mv	a0,a5
20401b2e:	4472                	lw	s0,28(sp)
20401b30:	6105                	addi	sp,sp,32
20401b32:	8082                	ret

20401b34 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401b34:	1101                	addi	sp,sp,-32
20401b36:	ce22                	sw	s0,28(sp)
20401b38:	1000                	addi	s0,sp,32
20401b3a:	fea42623          	sw	a0,-20(s0)
20401b3e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401b42:	fe842783          	lw	a5,-24(s0)
20401b46:	e791                	bnez	a5,20401b52 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401b48:	800007b7          	lui	a5,0x80000
20401b4c:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec5c>
20401b50:	a821                	j	20401b68 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401b52:	fe842703          	lw	a4,-24(s0)
20401b56:	4785                	li	a5,1
20401b58:	00f71763          	bne	a4,a5,20401b66 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401b5c:	800007b7          	lui	a5,0x80000
20401b60:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec5c>
20401b64:	a011                	j	20401b68 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401b66:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:176
	}
}
20401b68:	853e                	mv	a0,a5
20401b6a:	4472                	lw	s0,28(sp)
20401b6c:	6105                	addi	sp,sp,32
20401b6e:	8082                	ret

20401b70 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401b70:	1101                	addi	sp,sp,-32
20401b72:	ce22                	sw	s0,28(sp)
20401b74:	1000                	addi	s0,sp,32
20401b76:	fea42623          	sw	a0,-20(s0)
20401b7a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401b7e:	fe842783          	lw	a5,-24(s0)
20401b82:	e399                	bnez	a5,20401b88 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
		return 3;
20401b84:	478d                	li	a5,3
20401b86:	a809                	j	20401b98 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401b88:	fe842703          	lw	a4,-24(s0)
20401b8c:	4785                	li	a5,1
20401b8e:	00f71463          	bne	a4,a5,20401b96 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
		return 7;
20401b92:	479d                	li	a5,7
20401b94:	a011                	j	20401b98 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401b96:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:189
	}
}
20401b98:	853e                	mv	a0,a5
20401b9a:	4472                	lw	s0,28(sp)
20401b9c:	6105                	addi	sp,sp,32
20401b9e:	8082                	ret

20401ba0 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401ba0:	715d                	addi	sp,sp,-80
20401ba2:	c686                	sw	ra,76(sp)
20401ba4:	c4a2                	sw	s0,72(sp)
20401ba6:	c2ca                	sw	s2,68(sp)
20401ba8:	c0ce                	sw	s3,64(sp)
20401baa:	de52                	sw	s4,60(sp)
20401bac:	dc56                	sw	s5,56(sp)
20401bae:	da5a                	sw	s6,52(sp)
20401bb0:	d85e                	sw	s7,48(sp)
20401bb2:	d662                	sw	s8,44(sp)
20401bb4:	d466                	sw	s9,40(sp)
20401bb6:	0880                	addi	s0,sp,80
20401bb8:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401bbc:	fbc42783          	lw	a5,-68(s0)
20401bc0:	853e                	mv	a0,a5
20401bc2:	3725                	jal	20401aea <__metal_driver_sifive_clint0_control_base>
20401bc4:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401bc8:	fcc42703          	lw	a4,-52(s0)
20401bcc:	67b1                	lui	a5,0xc
20401bce:	17f1                	addi	a5,a5,-4
20401bd0:	97ba                	add	a5,a5,a4
20401bd2:	439c                	lw	a5,0(a5)
20401bd4:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401bd8:	fcc42703          	lw	a4,-52(s0)
20401bdc:	67b1                	lui	a5,0xc
20401bde:	17e1                	addi	a5,a5,-8
20401be0:	97ba                	add	a5,a5,a4
20401be2:	439c                	lw	a5,0(a5)
20401be4:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401be8:	fcc42703          	lw	a4,-52(s0)
20401bec:	67b1                	lui	a5,0xc
20401bee:	17f1                	addi	a5,a5,-4
20401bf0:	97ba                	add	a5,a5,a4
20401bf2:	439c                	lw	a5,0(a5)
20401bf4:	fc842703          	lw	a4,-56(s0)
20401bf8:	fcf718e3          	bne	a4,a5,20401bc8 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401bfc:	fc842783          	lw	a5,-56(s0)
20401c00:	8c3e                	mv	s8,a5
20401c02:	4c81                	li	s9,0
20401c04:	000c1993          	slli	s3,s8,0x0
20401c08:	4901                	li	s2,0
20401c0a:	fc442783          	lw	a5,-60(s0)
20401c0e:	8a3e                	mv	s4,a5
20401c10:	4a81                	li	s5,0
20401c12:	01496b33          	or	s6,s2,s4
20401c16:	0159ebb3          	or	s7,s3,s5
20401c1a:	87da                	mv	a5,s6
20401c1c:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401c1e:	853e                	mv	a0,a5
20401c20:	85c2                	mv	a1,a6
20401c22:	40b6                	lw	ra,76(sp)
20401c24:	4426                	lw	s0,72(sp)
20401c26:	4916                	lw	s2,68(sp)
20401c28:	4986                	lw	s3,64(sp)
20401c2a:	5a72                	lw	s4,60(sp)
20401c2c:	5ae2                	lw	s5,56(sp)
20401c2e:	5b52                	lw	s6,52(sp)
20401c30:	5bc2                	lw	s7,48(sp)
20401c32:	5c32                	lw	s8,44(sp)
20401c34:	5ca2                	lw	s9,40(sp)
20401c36:	6161                	addi	sp,sp,80
20401c38:	8082                	ret

20401c3a <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401c3a:	7179                	addi	sp,sp,-48
20401c3c:	d606                	sw	ra,44(sp)
20401c3e:	d422                	sw	s0,40(sp)
20401c40:	d24a                	sw	s2,36(sp)
20401c42:	d04e                	sw	s3,32(sp)
20401c44:	1800                	addi	s0,sp,48
20401c46:	fca42e23          	sw	a0,-36(s0)
20401c4a:	fcb42c23          	sw	a1,-40(s0)
20401c4e:	fcc42823          	sw	a2,-48(s0)
20401c52:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401c56:	fdc42783          	lw	a5,-36(s0)
20401c5a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401c5e:	fec42783          	lw	a5,-20(s0)
20401c62:	853e                	mv	a0,a5
20401c64:	3559                	jal	20401aea <__metal_driver_sifive_clint0_control_base>
20401c66:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401c6a:	fd842783          	lw	a5,-40(s0)
20401c6e:	078e                	slli	a5,a5,0x3
20401c70:	873e                	mv	a4,a5
20401c72:	fe842783          	lw	a5,-24(s0)
20401c76:	973e                	add	a4,a4,a5
20401c78:	6791                	lui	a5,0x4
20401c7a:	0791                	addi	a5,a5,4
20401c7c:	97ba                	add	a5,a5,a4
20401c7e:	873e                	mv	a4,a5
20401c80:	57fd                	li	a5,-1
20401c82:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401c84:	fd842783          	lw	a5,-40(s0)
20401c88:	078e                	slli	a5,a5,0x3
20401c8a:	873e                	mv	a4,a5
20401c8c:	fe842783          	lw	a5,-24(s0)
20401c90:	973e                	add	a4,a4,a5
20401c92:	6791                	lui	a5,0x4
20401c94:	97ba                	add	a5,a5,a4
20401c96:	873e                	mv	a4,a5
20401c98:	fd042783          	lw	a5,-48(s0)
20401c9c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401c9e:	fd442783          	lw	a5,-44(s0)
20401ca2:	0007d913          	srli	s2,a5,0x0
20401ca6:	4981                	li	s3,0
20401ca8:	fd842783          	lw	a5,-40(s0)
20401cac:	078e                	slli	a5,a5,0x3
20401cae:	873e                	mv	a4,a5
20401cb0:	fe842783          	lw	a5,-24(s0)
20401cb4:	973e                	add	a4,a4,a5
20401cb6:	6791                	lui	a5,0x4
20401cb8:	0791                	addi	a5,a5,4
20401cba:	97ba                	add	a5,a5,a4
20401cbc:	874a                	mv	a4,s2
20401cbe:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401cc0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401cc2:	853e                	mv	a0,a5
20401cc4:	50b2                	lw	ra,44(sp)
20401cc6:	5422                	lw	s0,40(sp)
20401cc8:	5912                	lw	s2,36(sp)
20401cca:	5982                	lw	s3,32(sp)
20401ccc:	6145                	addi	sp,sp,48
20401cce:	8082                	ret

20401cd0 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401cd0:	1101                	addi	sp,sp,-32
20401cd2:	ce06                	sw	ra,28(sp)
20401cd4:	cc22                	sw	s0,24(sp)
20401cd6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401cd8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401cdc:	f14027f3          	csrr	a5,mhartid
20401ce0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401ce4:	fec42783          	lw	a5,-20(s0)
20401ce8:	853e                	mv	a0,a5
20401cea:	1ee030ef          	jal	ra,20404ed8 <metal_cpu_get>
20401cee:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401cf2:	fe842503          	lw	a0,-24(s0)
20401cf6:	1bc030ef          	jal	ra,20404eb2 <metal_cpu_interrupt_controller>
20401cfa:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401cfc:	853e                	mv	a0,a5
20401cfe:	40f2                	lw	ra,28(sp)
20401d00:	4462                	lw	s0,24(sp)
20401d02:	6105                	addi	sp,sp,32
20401d04:	8082                	ret

20401d06 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401d06:	7139                	addi	sp,sp,-64
20401d08:	de06                	sw	ra,60(sp)
20401d0a:	dc22                	sw	s0,56(sp)
20401d0c:	0080                	addi	s0,sp,64
20401d0e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401d12:	fcc42503          	lw	a0,-52(s0)
20401d16:	3bed                	jal	20401b10 <__metal_driver_sifive_clint0_num_interrupts>
20401d18:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401d1c:	fcc42783          	lw	a5,-52(s0)
20401d20:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401d24:	fe442783          	lw	a5,-28(s0)
20401d28:	43dc                	lw	a5,4(a5)
20401d2a:	efa9                	bnez	a5,20401d84 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401d2c:	fe042623          	sw	zero,-20(s0)
20401d30:	a081                	j	20401d70 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401d32:	fec42583          	lw	a1,-20(s0)
20401d36:	fcc42503          	lw	a0,-52(s0)
20401d3a:	3bed                	jal	20401b34 <__metal_driver_sifive_clint0_interrupt_parents>
20401d3c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401d40:	fec42583          	lw	a1,-20(s0)
20401d44:	fcc42503          	lw	a0,-52(s0)
20401d48:	3525                	jal	20401b70 <__metal_driver_sifive_clint0_interrupt_lines>
20401d4a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401d4e:	fe042783          	lw	a5,-32(s0)
20401d52:	439c                	lw	a5,0(a5)
20401d54:	4fdc                	lw	a5,28(a5)
20401d56:	fcc42683          	lw	a3,-52(s0)
20401d5a:	4601                	li	a2,0
20401d5c:	fdc42583          	lw	a1,-36(s0)
20401d60:	fe042503          	lw	a0,-32(s0)
20401d64:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401d66:	fec42783          	lw	a5,-20(s0)
20401d6a:	0785                	addi	a5,a5,1
20401d6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401d70:	fec42703          	lw	a4,-20(s0)
20401d74:	fe842783          	lw	a5,-24(s0)
20401d78:	faf74de3          	blt	a4,a5,20401d32 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401d7c:	fe442783          	lw	a5,-28(s0)
20401d80:	4705                	li	a4,1
20401d82:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401d84:	0001                	nop
20401d86:	50f2                	lw	ra,60(sp)
20401d88:	5462                	lw	s0,56(sp)
20401d8a:	6121                	addi	sp,sp,64
20401d8c:	8082                	ret

20401d8e <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401d8e:	7139                	addi	sp,sp,-64
20401d90:	de06                	sw	ra,60(sp)
20401d92:	dc22                	sw	s0,56(sp)
20401d94:	0080                	addi	s0,sp,64
20401d96:	fca42623          	sw	a0,-52(s0)
20401d9a:	fcb42423          	sw	a1,-56(s0)
20401d9e:	fcc42223          	sw	a2,-60(s0)
20401da2:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401da6:	57fd                	li	a5,-1
20401da8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401dac:	368010ef          	jal	ra,20403114 <__metal_controller_interrupt_vector_mode>
20401db0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401db4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401db8:	3f21                	jal	20401cd0 <_get_cpu_intc>
20401dba:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401dbe:	fcc42503          	lw	a0,-52(s0)
20401dc2:	33b9                	jal	20401b10 <__metal_driver_sifive_clint0_num_interrupts>
20401dc4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401dc8:	fe042703          	lw	a4,-32(s0)
20401dcc:	4785                	li	a5,1
20401dce:	00f70863          	beq	a4,a5,20401dde <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401dd2:	fe042783          	lw	a5,-32(s0)
20401dd6:	c781                	beqz	a5,20401dde <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401dd8:	fec42783          	lw	a5,-20(s0)
20401ddc:	a049                	j	20401e5e <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401dde:	fe042223          	sw	zero,-28(s0)
20401de2:	a091                	j	20401e26 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401de4:	fe442583          	lw	a1,-28(s0)
20401de8:	fcc42503          	lw	a0,-52(s0)
20401dec:	3351                	jal	20401b70 <__metal_driver_sifive_clint0_interrupt_lines>
20401dee:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401df2:	fe442583          	lw	a1,-28(s0)
20401df6:	fcc42503          	lw	a0,-52(s0)
20401dfa:	3b2d                	jal	20401b34 <__metal_driver_sifive_clint0_interrupt_parents>
20401dfc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401e00:	fdc42703          	lw	a4,-36(s0)
20401e04:	fe842783          	lw	a5,-24(s0)
20401e08:	00f71863          	bne	a4,a5,20401e18 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401e0c:	fc842703          	lw	a4,-56(s0)
20401e10:	fd442783          	lw	a5,-44(s0)
20401e14:	02f70063          	beq	a4,a5,20401e34 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401e18:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20401e1c:	fe442783          	lw	a5,-28(s0)
20401e20:	0785                	addi	a5,a5,1
20401e22:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401e26:	fe442703          	lw	a4,-28(s0)
20401e2a:	fd842783          	lw	a5,-40(s0)
20401e2e:	faf74be3          	blt	a4,a5,20401de4 <__metal_driver_riscv_clint0_register+0x56>
20401e32:	a011                	j	20401e36 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20401e34:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401e36:	fe842783          	lw	a5,-24(s0)
20401e3a:	c385                	beqz	a5,20401e5a <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401e3c:	fe842783          	lw	a5,-24(s0)
20401e40:	439c                	lw	a5,0(a5)
20401e42:	4fdc                	lw	a5,28(a5)
20401e44:	fc042683          	lw	a3,-64(s0)
20401e48:	fc442603          	lw	a2,-60(s0)
20401e4c:	fc842583          	lw	a1,-56(s0)
20401e50:	fe842503          	lw	a0,-24(s0)
20401e54:	9782                	jalr	a5
20401e56:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401e5a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401e5e:	853e                	mv	a0,a5
20401e60:	50f2                	lw	ra,60(sp)
20401e62:	5462                	lw	s0,56(sp)
20401e64:	6121                	addi	sp,sp,64
20401e66:	8082                	ret

20401e68 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401e68:	7179                	addi	sp,sp,-48
20401e6a:	d622                	sw	s0,44(sp)
20401e6c:	1800                	addi	s0,sp,48
20401e6e:	fca42e23          	sw	a0,-36(s0)
20401e72:	fcb42c23          	sw	a1,-40(s0)
20401e76:	fcc42a23          	sw	a2,-44(s0)
20401e7a:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401e7e:	57fd                	li	a5,-1
20401e80:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20401e84:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20401e88:	853e                	mv	a0,a5
20401e8a:	5432                	lw	s0,44(sp)
20401e8c:	6145                	addi	sp,sp,48
20401e8e:	8082                	ret

20401e90 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20401e90:	1101                	addi	sp,sp,-32
20401e92:	ce06                	sw	ra,28(sp)
20401e94:	cc22                	sw	s0,24(sp)
20401e96:	1000                	addi	s0,sp,32
20401e98:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20401e9c:	278010ef          	jal	ra,20403114 <__metal_controller_interrupt_vector_mode>
20401ea0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20401ea2:	853e                	mv	a0,a5
20401ea4:	40f2                	lw	ra,28(sp)
20401ea6:	4462                	lw	s0,24(sp)
20401ea8:	6105                	addi	sp,sp,32
20401eaa:	8082                	ret

20401eac <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20401eac:	7179                	addi	sp,sp,-48
20401eae:	d606                	sw	ra,44(sp)
20401eb0:	d422                	sw	s0,40(sp)
20401eb2:	1800                	addi	s0,sp,48
20401eb4:	fca42e23          	sw	a0,-36(s0)
20401eb8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20401ebc:	57fd                	li	a5,-1
20401ebe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20401ec2:	3539                	jal	20401cd0 <_get_cpu_intc>
20401ec4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20401ec8:	fe842783          	lw	a5,-24(s0)
20401ecc:	c395                	beqz	a5,20401ef0 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20401ece:	fd842703          	lw	a4,-40(s0)
20401ed2:	4785                	li	a5,1
20401ed4:	00e7ef63          	bltu	a5,a4,20401ef2 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20401ed8:	fe842783          	lw	a5,-24(s0)
20401edc:	439c                	lw	a5,0(a5)
20401ede:	43dc                	lw	a5,4(a5)
20401ee0:	fd842583          	lw	a1,-40(s0)
20401ee4:	fe842503          	lw	a0,-24(s0)
20401ee8:	9782                	jalr	a5
20401eea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20401eee:	a011                	j	20401ef2 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20401ef0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
20401ef2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20401ef6:	853e                	mv	a0,a5
20401ef8:	50b2                	lw	ra,44(sp)
20401efa:	5422                	lw	s0,40(sp)
20401efc:	6145                	addi	sp,sp,48
20401efe:	8082                	ret

20401f00 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20401f00:	7139                	addi	sp,sp,-64
20401f02:	de06                	sw	ra,60(sp)
20401f04:	dc22                	sw	s0,56(sp)
20401f06:	0080                	addi	s0,sp,64
20401f08:	fca42623          	sw	a0,-52(s0)
20401f0c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20401f10:	57fd                	li	a5,-1
20401f12:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20401f16:	fc842783          	lw	a5,-56(s0)
20401f1a:	c7c9                	beqz	a5,20401fa4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20401f1c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401f20:	3b45                	jal	20401cd0 <_get_cpu_intc>
20401f22:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401f26:	fcc42503          	lw	a0,-52(s0)
20401f2a:	36dd                	jal	20401b10 <__metal_driver_sifive_clint0_num_interrupts>
20401f2c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20401f30:	fe042223          	sw	zero,-28(s0)
20401f34:	a091                	j	20401f78 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401f36:	fe442583          	lw	a1,-28(s0)
20401f3a:	fcc42503          	lw	a0,-52(s0)
20401f3e:	390d                	jal	20401b70 <__metal_driver_sifive_clint0_interrupt_lines>
20401f40:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401f44:	fe442583          	lw	a1,-28(s0)
20401f48:	fcc42503          	lw	a0,-52(s0)
20401f4c:	36e5                	jal	20401b34 <__metal_driver_sifive_clint0_interrupt_parents>
20401f4e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20401f52:	fe042703          	lw	a4,-32(s0)
20401f56:	fe842783          	lw	a5,-24(s0)
20401f5a:	00f71863          	bne	a4,a5,20401f6a <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20401f5e:	fc842703          	lw	a4,-56(s0)
20401f62:	fd842783          	lw	a5,-40(s0)
20401f66:	02f70063          	beq	a4,a5,20401f86 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20401f6a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20401f6e:	fe442783          	lw	a5,-28(s0)
20401f72:	0785                	addi	a5,a5,1
20401f74:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20401f78:	fe442703          	lw	a4,-28(s0)
20401f7c:	fdc42783          	lw	a5,-36(s0)
20401f80:	faf74be3          	blt	a4,a5,20401f36 <__metal_driver_riscv_clint0_enable+0x36>
20401f84:	a011                	j	20401f88 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20401f86:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20401f88:	fe842783          	lw	a5,-24(s0)
20401f8c:	cf81                	beqz	a5,20401fa4 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20401f8e:	fe842783          	lw	a5,-24(s0)
20401f92:	439c                	lw	a5,0(a5)
20401f94:	53dc                	lw	a5,36(a5)
20401f96:	fc842583          	lw	a1,-56(s0)
20401f9a:	fe842503          	lw	a0,-24(s0)
20401f9e:	9782                	jalr	a5
20401fa0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20401fa4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20401fa8:	853e                	mv	a0,a5
20401faa:	50f2                	lw	ra,60(sp)
20401fac:	5462                	lw	s0,56(sp)
20401fae:	6121                	addi	sp,sp,64
20401fb0:	8082                	ret

20401fb2 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20401fb2:	7139                	addi	sp,sp,-64
20401fb4:	de06                	sw	ra,60(sp)
20401fb6:	dc22                	sw	s0,56(sp)
20401fb8:	0080                	addi	s0,sp,64
20401fba:	fca42623          	sw	a0,-52(s0)
20401fbe:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20401fc2:	57fd                	li	a5,-1
20401fc4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20401fc8:	fc842783          	lw	a5,-56(s0)
20401fcc:	c7c9                	beqz	a5,20402056 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20401fce:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401fd2:	39fd                	jal	20401cd0 <_get_cpu_intc>
20401fd4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401fd8:	fcc42503          	lw	a0,-52(s0)
20401fdc:	3e15                	jal	20401b10 <__metal_driver_sifive_clint0_num_interrupts>
20401fde:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20401fe2:	fe042223          	sw	zero,-28(s0)
20401fe6:	a091                	j	2040202a <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401fe8:	fe442583          	lw	a1,-28(s0)
20401fec:	fcc42503          	lw	a0,-52(s0)
20401ff0:	3641                	jal	20401b70 <__metal_driver_sifive_clint0_interrupt_lines>
20401ff2:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401ff6:	fe442583          	lw	a1,-28(s0)
20401ffa:	fcc42503          	lw	a0,-52(s0)
20401ffe:	3e1d                	jal	20401b34 <__metal_driver_sifive_clint0_interrupt_parents>
20402000:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402004:	fe042703          	lw	a4,-32(s0)
20402008:	fe842783          	lw	a5,-24(s0)
2040200c:	00f71863          	bne	a4,a5,2040201c <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402010:	fc842703          	lw	a4,-56(s0)
20402014:	fd842783          	lw	a5,-40(s0)
20402018:	02f70063          	beq	a4,a5,20402038 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
2040201c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402020:	fe442783          	lw	a5,-28(s0)
20402024:	0785                	addi	a5,a5,1
20402026:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2040202a:	fe442703          	lw	a4,-28(s0)
2040202e:	fdc42783          	lw	a5,-36(s0)
20402032:	faf74be3          	blt	a4,a5,20401fe8 <__metal_driver_riscv_clint0_disable+0x36>
20402036:	a011                	j	2040203a <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402038:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2040203a:	fe842783          	lw	a5,-24(s0)
2040203e:	cf81                	beqz	a5,20402056 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402040:	fe842783          	lw	a5,-24(s0)
20402044:	439c                	lw	a5,0(a5)
20402046:	579c                	lw	a5,40(a5)
20402048:	fc842583          	lw	a1,-56(s0)
2040204c:	fe842503          	lw	a0,-24(s0)
20402050:	9782                	jalr	a5
20402052:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402056:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2040205a:	853e                	mv	a0,a5
2040205c:	50f2                	lw	ra,60(sp)
2040205e:	5462                	lw	s0,56(sp)
20402060:	6121                	addi	sp,sp,64
20402062:	8082                	ret

20402064 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402064:	7179                	addi	sp,sp,-48
20402066:	d606                	sw	ra,44(sp)
20402068:	d422                	sw	s0,40(sp)
2040206a:	1800                	addi	s0,sp,48
2040206c:	fca42e23          	sw	a0,-36(s0)
20402070:	fcb42c23          	sw	a1,-40(s0)
20402074:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402078:	57fd                	li	a5,-1
2040207a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
2040207e:	fdc42783          	lw	a5,-36(s0)
20402082:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402086:	fdc42503          	lw	a0,-36(s0)
2040208a:	a61ff0ef          	jal	ra,20401aea <__metal_driver_sifive_clint0_control_base>
2040208e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402092:	fd842703          	lw	a4,-40(s0)
20402096:	4789                	li	a5,2
20402098:	04f70863          	beq	a4,a5,204020e8 <__metal_driver_riscv_clint0_command_request+0x84>
2040209c:	fd842703          	lw	a4,-40(s0)
204020a0:	4789                	li	a5,2
204020a2:	00e7c863          	blt	a5,a4,204020b2 <__metal_driver_riscv_clint0_command_request+0x4e>
204020a6:	fd842703          	lw	a4,-40(s0)
204020aa:	4785                	li	a5,1
204020ac:	00f70e63          	beq	a4,a5,204020c8 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204020b0:	a8e9                	j	2040218a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204020b2:	fd842703          	lw	a4,-40(s0)
204020b6:	478d                	li	a5,3
204020b8:	04f70c63          	beq	a4,a5,20402110 <__metal_driver_riscv_clint0_command_request+0xac>
204020bc:	fd842703          	lw	a4,-40(s0)
204020c0:	4791                	li	a5,4
204020c2:	08f70863          	beq	a4,a5,20402152 <__metal_driver_riscv_clint0_command_request+0xee>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204020c6:	a0d1                	j	2040218a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204020c8:	fd442783          	lw	a5,-44(s0)
204020cc:	cbc5                	beqz	a5,2040217c <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204020ce:	fe842503          	lw	a0,-24(s0)
204020d2:	34f9                	jal	20401ba0 <__metal_clint0_mtime_get>
204020d4:	87aa                	mv	a5,a0
204020d6:	882e                	mv	a6,a1
204020d8:	fd442703          	lw	a4,-44(s0)
204020dc:	c31c                	sw	a5,0(a4)
204020de:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204020e2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204020e6:	a859                	j	2040217c <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
204020e8:	fd442783          	lw	a5,-44(s0)
204020ec:	cbd1                	beqz	a5,20402180 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204020ee:	fd442783          	lw	a5,-44(s0)
204020f2:	439c                	lw	a5,0(a5)
204020f4:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204020f8:	fe042783          	lw	a5,-32(s0)
204020fc:	078a                	slli	a5,a5,0x2
204020fe:	873e                	mv	a4,a5
20402100:	fe442783          	lw	a5,-28(s0)
20402104:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402106:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
2040210a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040210e:	a88d                	j	20402180 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402110:	fd442783          	lw	a5,-44(s0)
20402114:	cba5                	beqz	a5,20402184 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402116:	fd442783          	lw	a5,-44(s0)
2040211a:	439c                	lw	a5,0(a5)
2040211c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402120:	fe042783          	lw	a5,-32(s0)
20402124:	078a                	slli	a5,a5,0x2
20402126:	873e                	mv	a4,a5
20402128:	fe442783          	lw	a5,-28(s0)
2040212c:	97ba                	add	a5,a5,a4
2040212e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402130:	4785                	li	a5,1
20402132:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402134:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402138:	fe042783          	lw	a5,-32(s0)
2040213c:	078a                	slli	a5,a5,0x2
2040213e:	873e                	mv	a4,a5
20402140:	fe442783          	lw	a5,-28(s0)
20402144:	97ba                	add	a5,a5,a4
20402146:	439c                	lw	a5,0(a5)
20402148:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
2040214c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402150:	a815                	j	20402184 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402152:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402156:	fd442783          	lw	a5,-44(s0)
2040215a:	c79d                	beqz	a5,20402188 <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
2040215c:	fd442783          	lw	a5,-44(s0)
20402160:	439c                	lw	a5,0(a5)
20402162:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402166:	fe042783          	lw	a5,-32(s0)
2040216a:	078a                	slli	a5,a5,0x2
2040216c:	873e                	mv	a4,a5
2040216e:	fe442783          	lw	a5,-28(s0)
20402172:	97ba                	add	a5,a5,a4
20402174:	439c                	lw	a5,0(a5)
20402176:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040217a:	a039                	j	20402188 <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040217c:	0001                	nop
2040217e:	a031                	j	2040218a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402180:	0001                	nop
20402182:	a021                	j	2040218a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402184:	0001                	nop
20402186:	a011                	j	2040218a <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402188:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
2040218a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
2040218e:	853e                	mv	a0,a5
20402190:	50b2                	lw	ra,44(sp)
20402192:	5422                	lw	s0,40(sp)
20402194:	6145                	addi	sp,sp,48
20402196:	8082                	ret

20402198 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402198:	7179                	addi	sp,sp,-48
2040219a:	d606                	sw	ra,44(sp)
2040219c:	d422                	sw	s0,40(sp)
2040219e:	1800                	addi	s0,sp,48
204021a0:	fca42e23          	sw	a0,-36(s0)
204021a4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
204021a8:	55b020ef          	jal	ra,20404f02 <metal_cpu_get_current_hartid>
204021ac:	87aa                	mv	a5,a0
204021ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
204021b2:	fec40793          	addi	a5,s0,-20
204021b6:	863e                	mv	a2,a5
204021b8:	4589                	li	a1,2
204021ba:	fdc42503          	lw	a0,-36(s0)
204021be:	355d                	jal	20402064 <__metal_driver_riscv_clint0_command_request>
204021c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204021c2:	853e                	mv	a0,a5
204021c4:	50b2                	lw	ra,44(sp)
204021c6:	5422                	lw	s0,40(sp)
204021c8:	6145                	addi	sp,sp,48
204021ca:	8082                	ret

204021cc <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204021cc:	7179                	addi	sp,sp,-48
204021ce:	d606                	sw	ra,44(sp)
204021d0:	d422                	sw	s0,40(sp)
204021d2:	1800                	addi	s0,sp,48
204021d4:	fca42e23          	sw	a0,-36(s0)
204021d8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204021dc:	527020ef          	jal	ra,20404f02 <metal_cpu_get_current_hartid>
204021e0:	87aa                	mv	a5,a0
204021e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204021e6:	fec40793          	addi	a5,s0,-20
204021ea:	863e                	mv	a2,a5
204021ec:	458d                	li	a1,3
204021ee:	fdc42503          	lw	a0,-36(s0)
204021f2:	3d8d                	jal	20402064 <__metal_driver_riscv_clint0_command_request>
204021f4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204021f6:	853e                	mv	a0,a5
204021f8:	50b2                	lw	ra,44(sp)
204021fa:	5422                	lw	s0,40(sp)
204021fc:	6145                	addi	sp,sp,48
204021fe:	8082                	ret

20402200 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402200:	1101                	addi	sp,sp,-32
20402202:	ce22                	sw	s0,28(sp)
20402204:	1000                	addi	s0,sp,32
20402206:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040220a:	fec42703          	lw	a4,-20(s0)
2040220e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_cpu_0>
20402212:	00f71463          	bne	a4,a5,2040221a <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
		return 0;
20402216:	4781                	li	a5,0
20402218:	a011                	j	2040221c <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
2040221a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:202
	}
}
2040221c:	853e                	mv	a0,a5
2040221e:	4472                	lw	s0,28(sp)
20402220:	6105                	addi	sp,sp,32
20402222:	8082                	ret

20402224 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402224:	1101                	addi	sp,sp,-32
20402226:	ce22                	sw	s0,28(sp)
20402228:	1000                	addi	s0,sp,32
2040222a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040222e:	fec42703          	lw	a4,-20(s0)
20402232:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_cpu_0>
20402236:	00f71763          	bne	a4,a5,20402244 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:207
		return 1000000;
2040223a:	000f47b7          	lui	a5,0xf4
2040223e:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402242:	a011                	j	20402246 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402244:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:212
	}
}
20402246:	853e                	mv	a0,a5
20402248:	4472                	lw	s0,28(sp)
2040224a:	6105                	addi	sp,sp,32
2040224c:	8082                	ret

2040224e <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040224e:	1101                	addi	sp,sp,-32
20402250:	ce22                	sw	s0,28(sp)
20402252:	1000                	addi	s0,sp,32
20402254:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402258:	fec42703          	lw	a4,-20(s0)
2040225c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_cpu_0>
20402260:	00f71763          	bne	a4,a5,2040226e <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402264:	800007b7          	lui	a5,0x80000
20402268:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec5c>
2040226c:	a011                	j	20402270 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040226e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:222
	}
}
20402270:	853e                	mv	a0,a5
20402272:	4472                	lw	s0,28(sp)
20402274:	6105                	addi	sp,sp,32
20402276:	8082                	ret

20402278 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402278:	1101                	addi	sp,sp,-32
2040227a:	ce22                	sw	s0,28(sp)
2040227c:	1000                	addi	s0,sp,32
2040227e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402282:	fec42783          	lw	a5,-20(s0)
20402286:	00f04a63          	bgtz	a5,2040229a <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
2040228a:	fec42703          	lw	a4,-20(s0)
2040228e:	070a                	slli	a4,a4,0x2
20402290:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402294:	97ba                	add	a5,a5,a4
20402296:	439c                	lw	a5,0(a5)
20402298:	a011                	j	2040229c <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
2040229a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040229c:	853e                	mv	a0,a5
2040229e:	4472                	lw	s0,28(sp)
204022a0:	6105                	addi	sp,sp,32
204022a2:	8082                	ret

204022a4 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
204022a4:	1101                	addi	sp,sp,-32
204022a6:	ce22                	sw	s0,28(sp)
204022a8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
204022aa:	f14027f3          	csrr	a5,mhartid
204022ae:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
204022b2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
204022b6:	853e                	mv	a0,a5
204022b8:	4472                	lw	s0,28(sp)
204022ba:	6105                	addi	sp,sp,32
204022bc:	8082                	ret

204022be <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204022be:	1101                	addi	sp,sp,-32
204022c0:	ce22                	sw	s0,28(sp)
204022c2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204022c4:	47a1                	li	a5,8
204022c6:	3007a7f3          	csrrs	a5,mstatus,a5
204022ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
204022ce:	0001                	nop
204022d0:	4472                	lw	s0,28(sp)
204022d2:	6105                	addi	sp,sp,32
204022d4:	8082                	ret

204022d6 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204022d6:	1101                	addi	sp,sp,-32
204022d8:	ce22                	sw	s0,28(sp)
204022da:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204022dc:	47a1                	li	a5,8
204022de:	3007b7f3          	csrrc	a5,mstatus,a5
204022e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204022e6:	0001                	nop
204022e8:	4472                	lw	s0,28(sp)
204022ea:	6105                	addi	sp,sp,32
204022ec:	8082                	ret

204022ee <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204022ee:	1101                	addi	sp,sp,-32
204022f0:	ce22                	sw	s0,28(sp)
204022f2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204022f4:	47a1                	li	a5,8
204022f6:	3047a7f3          	csrrs	a5,mie,a5
204022fa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204022fe:	0001                	nop
20402300:	4472                	lw	s0,28(sp)
20402302:	6105                	addi	sp,sp,32
20402304:	8082                	ret

20402306 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402306:	1101                	addi	sp,sp,-32
20402308:	ce22                	sw	s0,28(sp)
2040230a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
2040230c:	47a1                	li	a5,8
2040230e:	3047b7f3          	csrrc	a5,mie,a5
20402312:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402316:	0001                	nop
20402318:	4472                	lw	s0,28(sp)
2040231a:	6105                	addi	sp,sp,32
2040231c:	8082                	ret

2040231e <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
2040231e:	1101                	addi	sp,sp,-32
20402320:	ce22                	sw	s0,28(sp)
20402322:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402324:	08000793          	li	a5,128
20402328:	3047a7f3          	csrrs	a5,mie,a5
2040232c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402330:	0001                	nop
20402332:	4472                	lw	s0,28(sp)
20402334:	6105                	addi	sp,sp,32
20402336:	8082                	ret

20402338 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402338:	1101                	addi	sp,sp,-32
2040233a:	ce22                	sw	s0,28(sp)
2040233c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040233e:	08000793          	li	a5,128
20402342:	3047b7f3          	csrrc	a5,mie,a5
20402346:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
2040234a:	0001                	nop
2040234c:	4472                	lw	s0,28(sp)
2040234e:	6105                	addi	sp,sp,32
20402350:	8082                	ret

20402352 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402352:	1101                	addi	sp,sp,-32
20402354:	ce22                	sw	s0,28(sp)
20402356:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402358:	6785                	lui	a5,0x1
2040235a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040235e:	3047a7f3          	csrrs	a5,mie,a5
20402362:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402366:	0001                	nop
20402368:	4472                	lw	s0,28(sp)
2040236a:	6105                	addi	sp,sp,32
2040236c:	8082                	ret

2040236e <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040236e:	1101                	addi	sp,sp,-32
20402370:	ce22                	sw	s0,28(sp)
20402372:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402374:	6785                	lui	a5,0x1
20402376:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040237a:	3047b7f3          	csrrc	a5,mie,a5
2040237e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402382:	0001                	nop
20402384:	4472                	lw	s0,28(sp)
20402386:	6105                	addi	sp,sp,32
20402388:	8082                	ret

2040238a <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
2040238a:	7179                	addi	sp,sp,-48
2040238c:	d622                	sw	s0,44(sp)
2040238e:	1800                	addi	s0,sp,48
20402390:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402394:	fdc42783          	lw	a5,-36(s0)
20402398:	4705                	li	a4,1
2040239a:	00f717b3          	sll	a5,a4,a5
2040239e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204023a2:	fec42783          	lw	a5,-20(s0)
204023a6:	3047a7f3          	csrrs	a5,mie,a5
204023aa:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
204023ae:	0001                	nop
204023b0:	5432                	lw	s0,44(sp)
204023b2:	6145                	addi	sp,sp,48
204023b4:	8082                	ret

204023b6 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
204023b6:	7179                	addi	sp,sp,-48
204023b8:	d622                	sw	s0,44(sp)
204023ba:	1800                	addi	s0,sp,48
204023bc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204023c0:	fdc42783          	lw	a5,-36(s0)
204023c4:	4705                	li	a4,1
204023c6:	00f717b3          	sll	a5,a4,a5
204023ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204023ce:	fec42783          	lw	a5,-20(s0)
204023d2:	3047b7f3          	csrrc	a5,mie,a5
204023d6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204023da:	0001                	nop
204023dc:	5432                	lw	s0,44(sp)
204023de:	6145                	addi	sp,sp,48
204023e0:	8082                	ret

204023e2 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204023e2:	1101                	addi	sp,sp,-32
204023e4:	ce06                	sw	ra,28(sp)
204023e6:	cc22                	sw	s0,24(sp)
204023e8:	1000                	addi	s0,sp,32
204023ea:	fea42623          	sw	a0,-20(s0)
204023ee:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204023f2:	06400513          	li	a0,100
204023f6:	327020ef          	jal	ra,20404f1c <metal_shutdown>

204023fa <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204023fa:	1101                	addi	sp,sp,-32
204023fc:	ce06                	sw	ra,28(sp)
204023fe:	cc22                	sw	s0,24(sp)
20402400:	1000                	addi	s0,sp,32
20402402:	fea42623          	sw	a0,-20(s0)
20402406:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
2040240a:	0c800513          	li	a0,200
2040240e:	30f020ef          	jal	ra,20404f1c <metal_shutdown>

20402412 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402412:	715d                	addi	sp,sp,-80
20402414:	c686                	sw	ra,76(sp)
20402416:	c496                	sw	t0,72(sp)
20402418:	c29a                	sw	t1,68(sp)
2040241a:	c09e                	sw	t2,64(sp)
2040241c:	de22                	sw	s0,60(sp)
2040241e:	dc2a                	sw	a0,56(sp)
20402420:	da2e                	sw	a1,52(sp)
20402422:	d832                	sw	a2,48(sp)
20402424:	d636                	sw	a3,44(sp)
20402426:	d43a                	sw	a4,40(sp)
20402428:	d23e                	sw	a5,36(sp)
2040242a:	d042                	sw	a6,32(sp)
2040242c:	ce46                	sw	a7,28(sp)
2040242e:	cc72                	sw	t3,24(sp)
20402430:	ca76                	sw	t4,20(sp)
20402432:	c87a                	sw	t5,16(sp)
20402434:	c67e                	sw	t6,12(sp)
20402436:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402438:	12c00513          	li	a0,300
2040243c:	2e1020ef          	jal	ra,20404f1c <metal_shutdown>

20402440 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402440:	711d                	addi	sp,sp,-96
20402442:	ce86                	sw	ra,92(sp)
20402444:	cc96                	sw	t0,88(sp)
20402446:	ca9a                	sw	t1,84(sp)
20402448:	c89e                	sw	t2,80(sp)
2040244a:	c6a2                	sw	s0,76(sp)
2040244c:	c4aa                	sw	a0,72(sp)
2040244e:	c2ae                	sw	a1,68(sp)
20402450:	c0b2                	sw	a2,64(sp)
20402452:	de36                	sw	a3,60(sp)
20402454:	dc3a                	sw	a4,56(sp)
20402456:	da3e                	sw	a5,52(sp)
20402458:	d842                	sw	a6,48(sp)
2040245a:	d646                	sw	a7,44(sp)
2040245c:	d472                	sw	t3,40(sp)
2040245e:	d276                	sw	t4,36(sp)
20402460:	d07a                	sw	t5,32(sp)
20402462:	ce7e                	sw	t6,28(sp)
20402464:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402466:	3d3d                	jal	204022a4 <__metal_myhart_id>
20402468:	872a                	mv	a4,a0
2040246a:	070a                	slli	a4,a4,0x2
2040246c:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402470:	97ba                	add	a5,a5,a4
20402472:	439c                	lw	a5,0(a5)
20402474:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402478:	fac42783          	lw	a5,-84(s0)
2040247c:	c785                	beqz	a5,204024a4 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040247e:	fac42503          	lw	a0,-84(s0)
20402482:	33f1                	jal	2040224e <__metal_driver_cpu_interrupt_controller>
20402484:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402488:	fa842783          	lw	a5,-88(s0)
2040248c:	0e07a783          	lw	a5,224(a5)
20402490:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402494:	fa842783          	lw	a5,-88(s0)
20402498:	0d87a783          	lw	a5,216(a5)
2040249c:	fa442583          	lw	a1,-92(s0)
204024a0:	450d                	li	a0,3
204024a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
204024a4:	0001                	nop
204024a6:	40f6                	lw	ra,92(sp)
204024a8:	42e6                	lw	t0,88(sp)
204024aa:	4356                	lw	t1,84(sp)
204024ac:	43c6                	lw	t2,80(sp)
204024ae:	4436                	lw	s0,76(sp)
204024b0:	4526                	lw	a0,72(sp)
204024b2:	4596                	lw	a1,68(sp)
204024b4:	4606                	lw	a2,64(sp)
204024b6:	56f2                	lw	a3,60(sp)
204024b8:	5762                	lw	a4,56(sp)
204024ba:	57d2                	lw	a5,52(sp)
204024bc:	5842                	lw	a6,48(sp)
204024be:	58b2                	lw	a7,44(sp)
204024c0:	5e22                	lw	t3,40(sp)
204024c2:	5e92                	lw	t4,36(sp)
204024c4:	5f02                	lw	t5,32(sp)
204024c6:	4ff2                	lw	t6,28(sp)
204024c8:	6125                	addi	sp,sp,96
204024ca:	30200073          	mret

204024ce <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204024ce:	7179                	addi	sp,sp,-48
204024d0:	d606                	sw	ra,44(sp)
204024d2:	d422                	sw	s0,40(sp)
204024d4:	1800                	addi	s0,sp,48
204024d6:	fca42e23          	sw	a0,-36(s0)
204024da:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204024de:	33d9                	jal	204022a4 <__metal_myhart_id>
204024e0:	872a                	mv	a4,a0
204024e2:	070a                	slli	a4,a4,0x2
204024e4:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
204024e8:	97ba                	add	a5,a5,a4
204024ea:	439c                	lw	a5,0(a5)
204024ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204024f0:	342027f3          	csrr	a5,mcause
204024f4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204024f8:	fec42783          	lw	a5,-20(s0)
204024fc:	c795                	beqz	a5,20402528 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204024fe:	fec42503          	lw	a0,-20(s0)
20402502:	33b1                	jal	2040224e <__metal_driver_cpu_interrupt_controller>
20402504:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402508:	fe842783          	lw	a5,-24(s0)
2040250c:	3ff7f793          	andi	a5,a5,1023
20402510:	fe442703          	lw	a4,-28(s0)
20402514:	0e078793          	addi	a5,a5,224
20402518:	078a                	slli	a5,a5,0x2
2040251a:	97ba                	add	a5,a5,a4
2040251c:	479c                	lw	a5,8(a5)
2040251e:	fdc42583          	lw	a1,-36(s0)
20402522:	fec42503          	lw	a0,-20(s0)
20402526:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402528:	0001                	nop
2040252a:	50b2                	lw	ra,44(sp)
2040252c:	5422                	lw	s0,40(sp)
2040252e:	6145                	addi	sp,sp,48
20402530:	8082                	ret

20402532 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402532:	711d                	addi	sp,sp,-96
20402534:	ce86                	sw	ra,92(sp)
20402536:	cc96                	sw	t0,88(sp)
20402538:	ca9a                	sw	t1,84(sp)
2040253a:	c89e                	sw	t2,80(sp)
2040253c:	c6a2                	sw	s0,76(sp)
2040253e:	c4aa                	sw	a0,72(sp)
20402540:	c2ae                	sw	a1,68(sp)
20402542:	c0b2                	sw	a2,64(sp)
20402544:	de36                	sw	a3,60(sp)
20402546:	dc3a                	sw	a4,56(sp)
20402548:	da3e                	sw	a5,52(sp)
2040254a:	d842                	sw	a6,48(sp)
2040254c:	d646                	sw	a7,44(sp)
2040254e:	d472                	sw	t3,40(sp)
20402550:	d276                	sw	t4,36(sp)
20402552:	d07a                	sw	t5,32(sp)
20402554:	ce7e                	sw	t6,28(sp)
20402556:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402558:	33b1                	jal	204022a4 <__metal_myhart_id>
2040255a:	872a                	mv	a4,a0
2040255c:	070a                	slli	a4,a4,0x2
2040255e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402562:	97ba                	add	a5,a5,a4
20402564:	439c                	lw	a5,0(a5)
20402566:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
2040256a:	fac42783          	lw	a5,-84(s0)
2040256e:	c785                	beqz	a5,20402596 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402570:	fac42503          	lw	a0,-84(s0)
20402574:	39e9                	jal	2040224e <__metal_driver_cpu_interrupt_controller>
20402576:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
2040257a:	fa842783          	lw	a5,-88(s0)
2040257e:	1407a783          	lw	a5,320(a5)
20402582:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402586:	fa842783          	lw	a5,-88(s0)
2040258a:	1387a783          	lw	a5,312(a5)
2040258e:	fa442583          	lw	a1,-92(s0)
20402592:	451d                	li	a0,7
20402594:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402596:	0001                	nop
20402598:	40f6                	lw	ra,92(sp)
2040259a:	42e6                	lw	t0,88(sp)
2040259c:	4356                	lw	t1,84(sp)
2040259e:	43c6                	lw	t2,80(sp)
204025a0:	4436                	lw	s0,76(sp)
204025a2:	4526                	lw	a0,72(sp)
204025a4:	4596                	lw	a1,68(sp)
204025a6:	4606                	lw	a2,64(sp)
204025a8:	56f2                	lw	a3,60(sp)
204025aa:	5762                	lw	a4,56(sp)
204025ac:	57d2                	lw	a5,52(sp)
204025ae:	5842                	lw	a6,48(sp)
204025b0:	58b2                	lw	a7,44(sp)
204025b2:	5e22                	lw	t3,40(sp)
204025b4:	5e92                	lw	t4,36(sp)
204025b6:	5f02                	lw	t5,32(sp)
204025b8:	4ff2                	lw	t6,28(sp)
204025ba:	6125                	addi	sp,sp,96
204025bc:	30200073          	mret

204025c0 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204025c0:	7179                	addi	sp,sp,-48
204025c2:	d606                	sw	ra,44(sp)
204025c4:	d422                	sw	s0,40(sp)
204025c6:	1800                	addi	s0,sp,48
204025c8:	fca42e23          	sw	a0,-36(s0)
204025cc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204025d0:	39d1                	jal	204022a4 <__metal_myhart_id>
204025d2:	87aa                	mv	a5,a0
204025d4:	853e                	mv	a0,a5
204025d6:	314d                	jal	20402278 <__metal_driver_cpu_get>
204025d8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204025dc:	fec42503          	lw	a0,-20(s0)
204025e0:	18e010ef          	jal	ra,2040376e <__metal_driver_cpu_mtime_get>
204025e4:	fea42023          	sw	a0,-32(s0)
204025e8:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204025ec:	fe042783          	lw	a5,-32(s0)
204025f0:	fe442803          	lw	a6,-28(s0)
204025f4:	45a9                	li	a1,10
204025f6:	4601                	li	a2,0
204025f8:	00b786b3          	add	a3,a5,a1
204025fc:	8536                	mv	a0,a3
204025fe:	00f53533          	sltu	a0,a0,a5
20402602:	00c80733          	add	a4,a6,a2
20402606:	00e507b3          	add	a5,a0,a4
2040260a:	873e                	mv	a4,a5
2040260c:	87b6                	mv	a5,a3
2040260e:	883a                	mv	a6,a4
20402610:	85be                	mv	a1,a5
20402612:	8642                	mv	a2,a6
20402614:	fec42503          	lw	a0,-20(s0)
20402618:	1bc010ef          	jal	ra,204037d4 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040261c:	0001                	nop
2040261e:	50b2                	lw	ra,44(sp)
20402620:	5422                	lw	s0,40(sp)
20402622:	6145                	addi	sp,sp,48
20402624:	8082                	ret
	...

20402680 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402680:	7119                	addi	sp,sp,-128
20402682:	de86                	sw	ra,124(sp)
20402684:	dc96                	sw	t0,120(sp)
20402686:	da9a                	sw	t1,116(sp)
20402688:	d89e                	sw	t2,112(sp)
2040268a:	d6a2                	sw	s0,108(sp)
2040268c:	d4aa                	sw	a0,104(sp)
2040268e:	d2ae                	sw	a1,100(sp)
20402690:	d0b2                	sw	a2,96(sp)
20402692:	ceb6                	sw	a3,92(sp)
20402694:	ccba                	sw	a4,88(sp)
20402696:	cabe                	sw	a5,84(sp)
20402698:	c8c2                	sw	a6,80(sp)
2040269a:	c6c6                	sw	a7,76(sp)
2040269c:	c4f2                	sw	t3,72(sp)
2040269e:	c2f6                	sw	t4,68(sp)
204026a0:	c0fa                	sw	t5,64(sp)
204026a2:	de7e                	sw	t6,60(sp)
204026a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204026a6:	3efd                	jal	204022a4 <__metal_myhart_id>
204026a8:	872a                	mv	a4,a0
204026aa:	070a                	slli	a4,a4,0x2
204026ac:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
204026b0:	97ba                	add	a5,a5,a4
204026b2:	439c                	lw	a5,0(a5)
204026b4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204026b8:	342027f3          	csrr	a5,mcause
204026bc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204026c0:	341027f3          	csrr	a5,mepc
204026c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204026c8:	343027f3          	csrr	a5,mtval
204026cc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204026d0:	305027f3          	csrr	a5,mtvec
204026d4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204026d8:	fac42783          	lw	a5,-84(s0)
204026dc:	c7e9                	beqz	a5,204027a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204026de:	fac42503          	lw	a0,-84(s0)
204026e2:	b6dff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204026e6:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204026ea:	fa842783          	lw	a5,-88(s0)
204026ee:	3ff7f793          	andi	a5,a5,1023
204026f2:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204026f6:	fa842783          	lw	a5,-88(s0)
204026fa:	0807d863          	bgez	a5,2040278a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
204026fe:	f9442703          	lw	a4,-108(s0)
20402702:	47ad                	li	a5,11
20402704:	00e7d763          	bge	a5,a4,20402712 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402708:	f9c42783          	lw	a5,-100(s0)
2040270c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402710:	ef9d                	bnez	a5,2040274e <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402712:	f9842683          	lw	a3,-104(s0)
20402716:	f9442703          	lw	a4,-108(s0)
2040271a:	87ba                	mv	a5,a4
2040271c:	0786                	slli	a5,a5,0x1
2040271e:	97ba                	add	a5,a5,a4
20402720:	078e                	slli	a5,a5,0x3
20402722:	97b6                	add	a5,a5,a3
20402724:	0987a783          	lw	a5,152(a5)
20402728:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040272c:	f9842683          	lw	a3,-104(s0)
20402730:	f9442703          	lw	a4,-108(s0)
20402734:	87ba                	mv	a5,a4
20402736:	0786                	slli	a5,a5,0x1
20402738:	97ba                	add	a5,a5,a4
2040273a:	078e                	slli	a5,a5,0x3
2040273c:	97b6                	add	a5,a5,a3
2040273e:	0907a783          	lw	a5,144(a5)
20402742:	f8c42583          	lw	a1,-116(s0)
20402746:	f9442503          	lw	a0,-108(s0)
2040274a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040274c:	a8a9                	j	204027a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040274e:	f9c42783          	lw	a5,-100(s0)
20402752:	03f7f713          	andi	a4,a5,63
20402756:	4789                	li	a5,2
20402758:	04f71763          	bne	a4,a5,204027a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040275c:	307027f3          	csrr	a5,mtvt
20402760:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402764:	f9842783          	lw	a5,-104(s0)
20402768:	0dc7a783          	lw	a5,220(a5)
2040276c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402770:	f9042783          	lw	a5,-112(s0)
20402774:	439c                	lw	a5,0(a5)
20402776:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2040277a:	f8842783          	lw	a5,-120(s0)
2040277e:	f8c42583          	lw	a1,-116(s0)
20402782:	f9442503          	lw	a0,-108(s0)
20402786:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402788:	a839                	j	204027a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040278a:	f9842703          	lw	a4,-104(s0)
2040278e:	f9442783          	lw	a5,-108(s0)
20402792:	0e078793          	addi	a5,a5,224
20402796:	078a                	slli	a5,a5,0x2
20402798:	97ba                	add	a5,a5,a4
2040279a:	479c                	lw	a5,8(a5)
2040279c:	f9442583          	lw	a1,-108(s0)
204027a0:	fac42503          	lw	a0,-84(s0)
204027a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204027a6:	50f6                	lw	ra,124(sp)
204027a8:	52e6                	lw	t0,120(sp)
204027aa:	5356                	lw	t1,116(sp)
204027ac:	53c6                	lw	t2,112(sp)
204027ae:	5436                	lw	s0,108(sp)
204027b0:	5526                	lw	a0,104(sp)
204027b2:	5596                	lw	a1,100(sp)
204027b4:	5606                	lw	a2,96(sp)
204027b6:	46f6                	lw	a3,92(sp)
204027b8:	4766                	lw	a4,88(sp)
204027ba:	47d6                	lw	a5,84(sp)
204027bc:	4846                	lw	a6,80(sp)
204027be:	48b6                	lw	a7,76(sp)
204027c0:	4e26                	lw	t3,72(sp)
204027c2:	4e96                	lw	t4,68(sp)
204027c4:	4f06                	lw	t5,64(sp)
204027c6:	5ff2                	lw	t6,60(sp)
204027c8:	6109                	addi	sp,sp,128
204027ca:	30200073          	mret
	...

204027f4 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204027f4:	711d                	addi	sp,sp,-96
204027f6:	ce86                	sw	ra,92(sp)
204027f8:	cc96                	sw	t0,88(sp)
204027fa:	ca9a                	sw	t1,84(sp)
204027fc:	c89e                	sw	t2,80(sp)
204027fe:	c6a2                	sw	s0,76(sp)
20402800:	c4aa                	sw	a0,72(sp)
20402802:	c2ae                	sw	a1,68(sp)
20402804:	c0b2                	sw	a2,64(sp)
20402806:	de36                	sw	a3,60(sp)
20402808:	dc3a                	sw	a4,56(sp)
2040280a:	da3e                	sw	a5,52(sp)
2040280c:	d842                	sw	a6,48(sp)
2040280e:	d646                	sw	a7,44(sp)
20402810:	d472                	sw	t3,40(sp)
20402812:	d276                	sw	t4,36(sp)
20402814:	d07a                	sw	t5,32(sp)
20402816:	ce7e                	sw	t6,28(sp)
20402818:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040281a:	a8bff0ef          	jal	ra,204022a4 <__metal_myhart_id>
2040281e:	872a                	mv	a4,a0
20402820:	070a                	slli	a4,a4,0x2
20402822:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402826:	97ba                	add	a5,a5,a4
20402828:	439c                	lw	a5,0(a5)
2040282a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
2040282e:	fac42783          	lw	a5,-84(s0)
20402832:	c78d                	beqz	a5,2040285c <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402834:	fac42503          	lw	a0,-84(s0)
20402838:	a17ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
2040283c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402840:	fa842783          	lw	a5,-88(s0)
20402844:	2187a783          	lw	a5,536(a5)
20402848:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040284c:	fa842783          	lw	a5,-88(s0)
20402850:	2107a783          	lw	a5,528(a5)
20402854:	fa442583          	lw	a1,-92(s0)
20402858:	4541                	li	a0,16
2040285a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040285c:	0001                	nop
2040285e:	40f6                	lw	ra,92(sp)
20402860:	42e6                	lw	t0,88(sp)
20402862:	4356                	lw	t1,84(sp)
20402864:	43c6                	lw	t2,80(sp)
20402866:	4436                	lw	s0,76(sp)
20402868:	4526                	lw	a0,72(sp)
2040286a:	4596                	lw	a1,68(sp)
2040286c:	4606                	lw	a2,64(sp)
2040286e:	56f2                	lw	a3,60(sp)
20402870:	5762                	lw	a4,56(sp)
20402872:	57d2                	lw	a5,52(sp)
20402874:	5842                	lw	a6,48(sp)
20402876:	58b2                	lw	a7,44(sp)
20402878:	5e22                	lw	t3,40(sp)
2040287a:	5e92                	lw	t4,36(sp)
2040287c:	5f02                	lw	t5,32(sp)
2040287e:	4ff2                	lw	t6,28(sp)
20402880:	6125                	addi	sp,sp,96
20402882:	30200073          	mret

20402886 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402886:	711d                	addi	sp,sp,-96
20402888:	ce86                	sw	ra,92(sp)
2040288a:	cc96                	sw	t0,88(sp)
2040288c:	ca9a                	sw	t1,84(sp)
2040288e:	c89e                	sw	t2,80(sp)
20402890:	c6a2                	sw	s0,76(sp)
20402892:	c4aa                	sw	a0,72(sp)
20402894:	c2ae                	sw	a1,68(sp)
20402896:	c0b2                	sw	a2,64(sp)
20402898:	de36                	sw	a3,60(sp)
2040289a:	dc3a                	sw	a4,56(sp)
2040289c:	da3e                	sw	a5,52(sp)
2040289e:	d842                	sw	a6,48(sp)
204028a0:	d646                	sw	a7,44(sp)
204028a2:	d472                	sw	t3,40(sp)
204028a4:	d276                	sw	t4,36(sp)
204028a6:	d07a                	sw	t5,32(sp)
204028a8:	ce7e                	sw	t6,28(sp)
204028aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204028ac:	9f9ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
204028b0:	872a                	mv	a4,a0
204028b2:	070a                	slli	a4,a4,0x2
204028b4:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
204028b8:	97ba                	add	a5,a5,a4
204028ba:	439c                	lw	a5,0(a5)
204028bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204028c0:	fac42783          	lw	a5,-84(s0)
204028c4:	c78d                	beqz	a5,204028ee <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204028c6:	fac42503          	lw	a0,-84(s0)
204028ca:	985ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204028ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204028d2:	fa842783          	lw	a5,-88(s0)
204028d6:	2307a783          	lw	a5,560(a5)
204028da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204028de:	fa842783          	lw	a5,-88(s0)
204028e2:	2287a783          	lw	a5,552(a5)
204028e6:	fa442583          	lw	a1,-92(s0)
204028ea:	4545                	li	a0,17
204028ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204028ee:	0001                	nop
204028f0:	40f6                	lw	ra,92(sp)
204028f2:	42e6                	lw	t0,88(sp)
204028f4:	4356                	lw	t1,84(sp)
204028f6:	43c6                	lw	t2,80(sp)
204028f8:	4436                	lw	s0,76(sp)
204028fa:	4526                	lw	a0,72(sp)
204028fc:	4596                	lw	a1,68(sp)
204028fe:	4606                	lw	a2,64(sp)
20402900:	56f2                	lw	a3,60(sp)
20402902:	5762                	lw	a4,56(sp)
20402904:	57d2                	lw	a5,52(sp)
20402906:	5842                	lw	a6,48(sp)
20402908:	58b2                	lw	a7,44(sp)
2040290a:	5e22                	lw	t3,40(sp)
2040290c:	5e92                	lw	t4,36(sp)
2040290e:	5f02                	lw	t5,32(sp)
20402910:	4ff2                	lw	t6,28(sp)
20402912:	6125                	addi	sp,sp,96
20402914:	30200073          	mret

20402918 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402918:	711d                	addi	sp,sp,-96
2040291a:	ce86                	sw	ra,92(sp)
2040291c:	cc96                	sw	t0,88(sp)
2040291e:	ca9a                	sw	t1,84(sp)
20402920:	c89e                	sw	t2,80(sp)
20402922:	c6a2                	sw	s0,76(sp)
20402924:	c4aa                	sw	a0,72(sp)
20402926:	c2ae                	sw	a1,68(sp)
20402928:	c0b2                	sw	a2,64(sp)
2040292a:	de36                	sw	a3,60(sp)
2040292c:	dc3a                	sw	a4,56(sp)
2040292e:	da3e                	sw	a5,52(sp)
20402930:	d842                	sw	a6,48(sp)
20402932:	d646                	sw	a7,44(sp)
20402934:	d472                	sw	t3,40(sp)
20402936:	d276                	sw	t4,36(sp)
20402938:	d07a                	sw	t5,32(sp)
2040293a:	ce7e                	sw	t6,28(sp)
2040293c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040293e:	967ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402942:	872a                	mv	a4,a0
20402944:	070a                	slli	a4,a4,0x2
20402946:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
2040294a:	97ba                	add	a5,a5,a4
2040294c:	439c                	lw	a5,0(a5)
2040294e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402952:	fac42783          	lw	a5,-84(s0)
20402956:	c78d                	beqz	a5,20402980 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402958:	fac42503          	lw	a0,-84(s0)
2040295c:	8f3ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402960:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402964:	fa842783          	lw	a5,-88(s0)
20402968:	2487a783          	lw	a5,584(a5)
2040296c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402970:	fa842783          	lw	a5,-88(s0)
20402974:	2407a783          	lw	a5,576(a5)
20402978:	fa442583          	lw	a1,-92(s0)
2040297c:	4549                	li	a0,18
2040297e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402980:	0001                	nop
20402982:	40f6                	lw	ra,92(sp)
20402984:	42e6                	lw	t0,88(sp)
20402986:	4356                	lw	t1,84(sp)
20402988:	43c6                	lw	t2,80(sp)
2040298a:	4436                	lw	s0,76(sp)
2040298c:	4526                	lw	a0,72(sp)
2040298e:	4596                	lw	a1,68(sp)
20402990:	4606                	lw	a2,64(sp)
20402992:	56f2                	lw	a3,60(sp)
20402994:	5762                	lw	a4,56(sp)
20402996:	57d2                	lw	a5,52(sp)
20402998:	5842                	lw	a6,48(sp)
2040299a:	58b2                	lw	a7,44(sp)
2040299c:	5e22                	lw	t3,40(sp)
2040299e:	5e92                	lw	t4,36(sp)
204029a0:	5f02                	lw	t5,32(sp)
204029a2:	4ff2                	lw	t6,28(sp)
204029a4:	6125                	addi	sp,sp,96
204029a6:	30200073          	mret

204029aa <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204029aa:	711d                	addi	sp,sp,-96
204029ac:	ce86                	sw	ra,92(sp)
204029ae:	cc96                	sw	t0,88(sp)
204029b0:	ca9a                	sw	t1,84(sp)
204029b2:	c89e                	sw	t2,80(sp)
204029b4:	c6a2                	sw	s0,76(sp)
204029b6:	c4aa                	sw	a0,72(sp)
204029b8:	c2ae                	sw	a1,68(sp)
204029ba:	c0b2                	sw	a2,64(sp)
204029bc:	de36                	sw	a3,60(sp)
204029be:	dc3a                	sw	a4,56(sp)
204029c0:	da3e                	sw	a5,52(sp)
204029c2:	d842                	sw	a6,48(sp)
204029c4:	d646                	sw	a7,44(sp)
204029c6:	d472                	sw	t3,40(sp)
204029c8:	d276                	sw	t4,36(sp)
204029ca:	d07a                	sw	t5,32(sp)
204029cc:	ce7e                	sw	t6,28(sp)
204029ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029d0:	8d5ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
204029d4:	872a                	mv	a4,a0
204029d6:	070a                	slli	a4,a4,0x2
204029d8:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
204029dc:	97ba                	add	a5,a5,a4
204029de:	439c                	lw	a5,0(a5)
204029e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204029e4:	fac42783          	lw	a5,-84(s0)
204029e8:	c78d                	beqz	a5,20402a12 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029ea:	fac42503          	lw	a0,-84(s0)
204029ee:	861ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204029f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204029f6:	fa842783          	lw	a5,-88(s0)
204029fa:	2607a783          	lw	a5,608(a5)
204029fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402a02:	fa842783          	lw	a5,-88(s0)
20402a06:	2587a783          	lw	a5,600(a5)
20402a0a:	fa442583          	lw	a1,-92(s0)
20402a0e:	454d                	li	a0,19
20402a10:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402a12:	0001                	nop
20402a14:	40f6                	lw	ra,92(sp)
20402a16:	42e6                	lw	t0,88(sp)
20402a18:	4356                	lw	t1,84(sp)
20402a1a:	43c6                	lw	t2,80(sp)
20402a1c:	4436                	lw	s0,76(sp)
20402a1e:	4526                	lw	a0,72(sp)
20402a20:	4596                	lw	a1,68(sp)
20402a22:	4606                	lw	a2,64(sp)
20402a24:	56f2                	lw	a3,60(sp)
20402a26:	5762                	lw	a4,56(sp)
20402a28:	57d2                	lw	a5,52(sp)
20402a2a:	5842                	lw	a6,48(sp)
20402a2c:	58b2                	lw	a7,44(sp)
20402a2e:	5e22                	lw	t3,40(sp)
20402a30:	5e92                	lw	t4,36(sp)
20402a32:	5f02                	lw	t5,32(sp)
20402a34:	4ff2                	lw	t6,28(sp)
20402a36:	6125                	addi	sp,sp,96
20402a38:	30200073          	mret

20402a3c <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402a3c:	711d                	addi	sp,sp,-96
20402a3e:	ce86                	sw	ra,92(sp)
20402a40:	cc96                	sw	t0,88(sp)
20402a42:	ca9a                	sw	t1,84(sp)
20402a44:	c89e                	sw	t2,80(sp)
20402a46:	c6a2                	sw	s0,76(sp)
20402a48:	c4aa                	sw	a0,72(sp)
20402a4a:	c2ae                	sw	a1,68(sp)
20402a4c:	c0b2                	sw	a2,64(sp)
20402a4e:	de36                	sw	a3,60(sp)
20402a50:	dc3a                	sw	a4,56(sp)
20402a52:	da3e                	sw	a5,52(sp)
20402a54:	d842                	sw	a6,48(sp)
20402a56:	d646                	sw	a7,44(sp)
20402a58:	d472                	sw	t3,40(sp)
20402a5a:	d276                	sw	t4,36(sp)
20402a5c:	d07a                	sw	t5,32(sp)
20402a5e:	ce7e                	sw	t6,28(sp)
20402a60:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a62:	843ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402a66:	872a                	mv	a4,a0
20402a68:	070a                	slli	a4,a4,0x2
20402a6a:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402a6e:	97ba                	add	a5,a5,a4
20402a70:	439c                	lw	a5,0(a5)
20402a72:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402a76:	fac42783          	lw	a5,-84(s0)
20402a7a:	c78d                	beqz	a5,20402aa4 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a7c:	fac42503          	lw	a0,-84(s0)
20402a80:	fceff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402a84:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402a88:	fa842783          	lw	a5,-88(s0)
20402a8c:	2787a783          	lw	a5,632(a5)
20402a90:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402a94:	fa842783          	lw	a5,-88(s0)
20402a98:	2707a783          	lw	a5,624(a5)
20402a9c:	fa442583          	lw	a1,-92(s0)
20402aa0:	4551                	li	a0,20
20402aa2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402aa4:	0001                	nop
20402aa6:	40f6                	lw	ra,92(sp)
20402aa8:	42e6                	lw	t0,88(sp)
20402aaa:	4356                	lw	t1,84(sp)
20402aac:	43c6                	lw	t2,80(sp)
20402aae:	4436                	lw	s0,76(sp)
20402ab0:	4526                	lw	a0,72(sp)
20402ab2:	4596                	lw	a1,68(sp)
20402ab4:	4606                	lw	a2,64(sp)
20402ab6:	56f2                	lw	a3,60(sp)
20402ab8:	5762                	lw	a4,56(sp)
20402aba:	57d2                	lw	a5,52(sp)
20402abc:	5842                	lw	a6,48(sp)
20402abe:	58b2                	lw	a7,44(sp)
20402ac0:	5e22                	lw	t3,40(sp)
20402ac2:	5e92                	lw	t4,36(sp)
20402ac4:	5f02                	lw	t5,32(sp)
20402ac6:	4ff2                	lw	t6,28(sp)
20402ac8:	6125                	addi	sp,sp,96
20402aca:	30200073          	mret

20402ace <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402ace:	711d                	addi	sp,sp,-96
20402ad0:	ce86                	sw	ra,92(sp)
20402ad2:	cc96                	sw	t0,88(sp)
20402ad4:	ca9a                	sw	t1,84(sp)
20402ad6:	c89e                	sw	t2,80(sp)
20402ad8:	c6a2                	sw	s0,76(sp)
20402ada:	c4aa                	sw	a0,72(sp)
20402adc:	c2ae                	sw	a1,68(sp)
20402ade:	c0b2                	sw	a2,64(sp)
20402ae0:	de36                	sw	a3,60(sp)
20402ae2:	dc3a                	sw	a4,56(sp)
20402ae4:	da3e                	sw	a5,52(sp)
20402ae6:	d842                	sw	a6,48(sp)
20402ae8:	d646                	sw	a7,44(sp)
20402aea:	d472                	sw	t3,40(sp)
20402aec:	d276                	sw	t4,36(sp)
20402aee:	d07a                	sw	t5,32(sp)
20402af0:	ce7e                	sw	t6,28(sp)
20402af2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402af4:	fb0ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402af8:	872a                	mv	a4,a0
20402afa:	070a                	slli	a4,a4,0x2
20402afc:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402b00:	97ba                	add	a5,a5,a4
20402b02:	439c                	lw	a5,0(a5)
20402b04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402b08:	fac42783          	lw	a5,-84(s0)
20402b0c:	c78d                	beqz	a5,20402b36 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b0e:	fac42503          	lw	a0,-84(s0)
20402b12:	f3cff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402b16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402b1a:	fa842783          	lw	a5,-88(s0)
20402b1e:	2907a783          	lw	a5,656(a5)
20402b22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402b26:	fa842783          	lw	a5,-88(s0)
20402b2a:	2887a783          	lw	a5,648(a5)
20402b2e:	fa442583          	lw	a1,-92(s0)
20402b32:	4555                	li	a0,21
20402b34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402b36:	0001                	nop
20402b38:	40f6                	lw	ra,92(sp)
20402b3a:	42e6                	lw	t0,88(sp)
20402b3c:	4356                	lw	t1,84(sp)
20402b3e:	43c6                	lw	t2,80(sp)
20402b40:	4436                	lw	s0,76(sp)
20402b42:	4526                	lw	a0,72(sp)
20402b44:	4596                	lw	a1,68(sp)
20402b46:	4606                	lw	a2,64(sp)
20402b48:	56f2                	lw	a3,60(sp)
20402b4a:	5762                	lw	a4,56(sp)
20402b4c:	57d2                	lw	a5,52(sp)
20402b4e:	5842                	lw	a6,48(sp)
20402b50:	58b2                	lw	a7,44(sp)
20402b52:	5e22                	lw	t3,40(sp)
20402b54:	5e92                	lw	t4,36(sp)
20402b56:	5f02                	lw	t5,32(sp)
20402b58:	4ff2                	lw	t6,28(sp)
20402b5a:	6125                	addi	sp,sp,96
20402b5c:	30200073          	mret

20402b60 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402b60:	711d                	addi	sp,sp,-96
20402b62:	ce86                	sw	ra,92(sp)
20402b64:	cc96                	sw	t0,88(sp)
20402b66:	ca9a                	sw	t1,84(sp)
20402b68:	c89e                	sw	t2,80(sp)
20402b6a:	c6a2                	sw	s0,76(sp)
20402b6c:	c4aa                	sw	a0,72(sp)
20402b6e:	c2ae                	sw	a1,68(sp)
20402b70:	c0b2                	sw	a2,64(sp)
20402b72:	de36                	sw	a3,60(sp)
20402b74:	dc3a                	sw	a4,56(sp)
20402b76:	da3e                	sw	a5,52(sp)
20402b78:	d842                	sw	a6,48(sp)
20402b7a:	d646                	sw	a7,44(sp)
20402b7c:	d472                	sw	t3,40(sp)
20402b7e:	d276                	sw	t4,36(sp)
20402b80:	d07a                	sw	t5,32(sp)
20402b82:	ce7e                	sw	t6,28(sp)
20402b84:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b86:	f1eff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402b8a:	872a                	mv	a4,a0
20402b8c:	070a                	slli	a4,a4,0x2
20402b8e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402b92:	97ba                	add	a5,a5,a4
20402b94:	439c                	lw	a5,0(a5)
20402b96:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402b9a:	fac42783          	lw	a5,-84(s0)
20402b9e:	c78d                	beqz	a5,20402bc8 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ba0:	fac42503          	lw	a0,-84(s0)
20402ba4:	eaaff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402ba8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402bac:	fa842783          	lw	a5,-88(s0)
20402bb0:	2a87a783          	lw	a5,680(a5)
20402bb4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402bb8:	fa842783          	lw	a5,-88(s0)
20402bbc:	2a07a783          	lw	a5,672(a5)
20402bc0:	fa442583          	lw	a1,-92(s0)
20402bc4:	4559                	li	a0,22
20402bc6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402bc8:	0001                	nop
20402bca:	40f6                	lw	ra,92(sp)
20402bcc:	42e6                	lw	t0,88(sp)
20402bce:	4356                	lw	t1,84(sp)
20402bd0:	43c6                	lw	t2,80(sp)
20402bd2:	4436                	lw	s0,76(sp)
20402bd4:	4526                	lw	a0,72(sp)
20402bd6:	4596                	lw	a1,68(sp)
20402bd8:	4606                	lw	a2,64(sp)
20402bda:	56f2                	lw	a3,60(sp)
20402bdc:	5762                	lw	a4,56(sp)
20402bde:	57d2                	lw	a5,52(sp)
20402be0:	5842                	lw	a6,48(sp)
20402be2:	58b2                	lw	a7,44(sp)
20402be4:	5e22                	lw	t3,40(sp)
20402be6:	5e92                	lw	t4,36(sp)
20402be8:	5f02                	lw	t5,32(sp)
20402bea:	4ff2                	lw	t6,28(sp)
20402bec:	6125                	addi	sp,sp,96
20402bee:	30200073          	mret

20402bf2 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402bf2:	711d                	addi	sp,sp,-96
20402bf4:	ce86                	sw	ra,92(sp)
20402bf6:	cc96                	sw	t0,88(sp)
20402bf8:	ca9a                	sw	t1,84(sp)
20402bfa:	c89e                	sw	t2,80(sp)
20402bfc:	c6a2                	sw	s0,76(sp)
20402bfe:	c4aa                	sw	a0,72(sp)
20402c00:	c2ae                	sw	a1,68(sp)
20402c02:	c0b2                	sw	a2,64(sp)
20402c04:	de36                	sw	a3,60(sp)
20402c06:	dc3a                	sw	a4,56(sp)
20402c08:	da3e                	sw	a5,52(sp)
20402c0a:	d842                	sw	a6,48(sp)
20402c0c:	d646                	sw	a7,44(sp)
20402c0e:	d472                	sw	t3,40(sp)
20402c10:	d276                	sw	t4,36(sp)
20402c12:	d07a                	sw	t5,32(sp)
20402c14:	ce7e                	sw	t6,28(sp)
20402c16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c18:	e8cff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402c1c:	872a                	mv	a4,a0
20402c1e:	070a                	slli	a4,a4,0x2
20402c20:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402c24:	97ba                	add	a5,a5,a4
20402c26:	439c                	lw	a5,0(a5)
20402c28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402c2c:	fac42783          	lw	a5,-84(s0)
20402c30:	c78d                	beqz	a5,20402c5a <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c32:	fac42503          	lw	a0,-84(s0)
20402c36:	e18ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402c3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402c3e:	fa842783          	lw	a5,-88(s0)
20402c42:	2c07a783          	lw	a5,704(a5)
20402c46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402c4a:	fa842783          	lw	a5,-88(s0)
20402c4e:	2b87a783          	lw	a5,696(a5)
20402c52:	fa442583          	lw	a1,-92(s0)
20402c56:	455d                	li	a0,23
20402c58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402c5a:	0001                	nop
20402c5c:	40f6                	lw	ra,92(sp)
20402c5e:	42e6                	lw	t0,88(sp)
20402c60:	4356                	lw	t1,84(sp)
20402c62:	43c6                	lw	t2,80(sp)
20402c64:	4436                	lw	s0,76(sp)
20402c66:	4526                	lw	a0,72(sp)
20402c68:	4596                	lw	a1,68(sp)
20402c6a:	4606                	lw	a2,64(sp)
20402c6c:	56f2                	lw	a3,60(sp)
20402c6e:	5762                	lw	a4,56(sp)
20402c70:	57d2                	lw	a5,52(sp)
20402c72:	5842                	lw	a6,48(sp)
20402c74:	58b2                	lw	a7,44(sp)
20402c76:	5e22                	lw	t3,40(sp)
20402c78:	5e92                	lw	t4,36(sp)
20402c7a:	5f02                	lw	t5,32(sp)
20402c7c:	4ff2                	lw	t6,28(sp)
20402c7e:	6125                	addi	sp,sp,96
20402c80:	30200073          	mret

20402c84 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402c84:	711d                	addi	sp,sp,-96
20402c86:	ce86                	sw	ra,92(sp)
20402c88:	cc96                	sw	t0,88(sp)
20402c8a:	ca9a                	sw	t1,84(sp)
20402c8c:	c89e                	sw	t2,80(sp)
20402c8e:	c6a2                	sw	s0,76(sp)
20402c90:	c4aa                	sw	a0,72(sp)
20402c92:	c2ae                	sw	a1,68(sp)
20402c94:	c0b2                	sw	a2,64(sp)
20402c96:	de36                	sw	a3,60(sp)
20402c98:	dc3a                	sw	a4,56(sp)
20402c9a:	da3e                	sw	a5,52(sp)
20402c9c:	d842                	sw	a6,48(sp)
20402c9e:	d646                	sw	a7,44(sp)
20402ca0:	d472                	sw	t3,40(sp)
20402ca2:	d276                	sw	t4,36(sp)
20402ca4:	d07a                	sw	t5,32(sp)
20402ca6:	ce7e                	sw	t6,28(sp)
20402ca8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402caa:	dfaff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402cae:	872a                	mv	a4,a0
20402cb0:	070a                	slli	a4,a4,0x2
20402cb2:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402cb6:	97ba                	add	a5,a5,a4
20402cb8:	439c                	lw	a5,0(a5)
20402cba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402cbe:	fac42783          	lw	a5,-84(s0)
20402cc2:	c78d                	beqz	a5,20402cec <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cc4:	fac42503          	lw	a0,-84(s0)
20402cc8:	d86ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402ccc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402cd0:	fa842783          	lw	a5,-88(s0)
20402cd4:	2d87a783          	lw	a5,728(a5)
20402cd8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402cdc:	fa842783          	lw	a5,-88(s0)
20402ce0:	2d07a783          	lw	a5,720(a5)
20402ce4:	fa442583          	lw	a1,-92(s0)
20402ce8:	4561                	li	a0,24
20402cea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402cec:	0001                	nop
20402cee:	40f6                	lw	ra,92(sp)
20402cf0:	42e6                	lw	t0,88(sp)
20402cf2:	4356                	lw	t1,84(sp)
20402cf4:	43c6                	lw	t2,80(sp)
20402cf6:	4436                	lw	s0,76(sp)
20402cf8:	4526                	lw	a0,72(sp)
20402cfa:	4596                	lw	a1,68(sp)
20402cfc:	4606                	lw	a2,64(sp)
20402cfe:	56f2                	lw	a3,60(sp)
20402d00:	5762                	lw	a4,56(sp)
20402d02:	57d2                	lw	a5,52(sp)
20402d04:	5842                	lw	a6,48(sp)
20402d06:	58b2                	lw	a7,44(sp)
20402d08:	5e22                	lw	t3,40(sp)
20402d0a:	5e92                	lw	t4,36(sp)
20402d0c:	5f02                	lw	t5,32(sp)
20402d0e:	4ff2                	lw	t6,28(sp)
20402d10:	6125                	addi	sp,sp,96
20402d12:	30200073          	mret

20402d16 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402d16:	711d                	addi	sp,sp,-96
20402d18:	ce86                	sw	ra,92(sp)
20402d1a:	cc96                	sw	t0,88(sp)
20402d1c:	ca9a                	sw	t1,84(sp)
20402d1e:	c89e                	sw	t2,80(sp)
20402d20:	c6a2                	sw	s0,76(sp)
20402d22:	c4aa                	sw	a0,72(sp)
20402d24:	c2ae                	sw	a1,68(sp)
20402d26:	c0b2                	sw	a2,64(sp)
20402d28:	de36                	sw	a3,60(sp)
20402d2a:	dc3a                	sw	a4,56(sp)
20402d2c:	da3e                	sw	a5,52(sp)
20402d2e:	d842                	sw	a6,48(sp)
20402d30:	d646                	sw	a7,44(sp)
20402d32:	d472                	sw	t3,40(sp)
20402d34:	d276                	sw	t4,36(sp)
20402d36:	d07a                	sw	t5,32(sp)
20402d38:	ce7e                	sw	t6,28(sp)
20402d3a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d3c:	d68ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402d40:	872a                	mv	a4,a0
20402d42:	070a                	slli	a4,a4,0x2
20402d44:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402d48:	97ba                	add	a5,a5,a4
20402d4a:	439c                	lw	a5,0(a5)
20402d4c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402d50:	fac42783          	lw	a5,-84(s0)
20402d54:	c78d                	beqz	a5,20402d7e <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d56:	fac42503          	lw	a0,-84(s0)
20402d5a:	cf4ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402d5e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402d62:	fa842783          	lw	a5,-88(s0)
20402d66:	2f07a783          	lw	a5,752(a5)
20402d6a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402d6e:	fa842783          	lw	a5,-88(s0)
20402d72:	2e87a783          	lw	a5,744(a5)
20402d76:	fa442583          	lw	a1,-92(s0)
20402d7a:	4565                	li	a0,25
20402d7c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402d7e:	0001                	nop
20402d80:	40f6                	lw	ra,92(sp)
20402d82:	42e6                	lw	t0,88(sp)
20402d84:	4356                	lw	t1,84(sp)
20402d86:	43c6                	lw	t2,80(sp)
20402d88:	4436                	lw	s0,76(sp)
20402d8a:	4526                	lw	a0,72(sp)
20402d8c:	4596                	lw	a1,68(sp)
20402d8e:	4606                	lw	a2,64(sp)
20402d90:	56f2                	lw	a3,60(sp)
20402d92:	5762                	lw	a4,56(sp)
20402d94:	57d2                	lw	a5,52(sp)
20402d96:	5842                	lw	a6,48(sp)
20402d98:	58b2                	lw	a7,44(sp)
20402d9a:	5e22                	lw	t3,40(sp)
20402d9c:	5e92                	lw	t4,36(sp)
20402d9e:	5f02                	lw	t5,32(sp)
20402da0:	4ff2                	lw	t6,28(sp)
20402da2:	6125                	addi	sp,sp,96
20402da4:	30200073          	mret

20402da8 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402da8:	711d                	addi	sp,sp,-96
20402daa:	ce86                	sw	ra,92(sp)
20402dac:	cc96                	sw	t0,88(sp)
20402dae:	ca9a                	sw	t1,84(sp)
20402db0:	c89e                	sw	t2,80(sp)
20402db2:	c6a2                	sw	s0,76(sp)
20402db4:	c4aa                	sw	a0,72(sp)
20402db6:	c2ae                	sw	a1,68(sp)
20402db8:	c0b2                	sw	a2,64(sp)
20402dba:	de36                	sw	a3,60(sp)
20402dbc:	dc3a                	sw	a4,56(sp)
20402dbe:	da3e                	sw	a5,52(sp)
20402dc0:	d842                	sw	a6,48(sp)
20402dc2:	d646                	sw	a7,44(sp)
20402dc4:	d472                	sw	t3,40(sp)
20402dc6:	d276                	sw	t4,36(sp)
20402dc8:	d07a                	sw	t5,32(sp)
20402dca:	ce7e                	sw	t6,28(sp)
20402dcc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402dce:	cd6ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402dd2:	872a                	mv	a4,a0
20402dd4:	070a                	slli	a4,a4,0x2
20402dd6:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402dda:	97ba                	add	a5,a5,a4
20402ddc:	439c                	lw	a5,0(a5)
20402dde:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402de2:	fac42783          	lw	a5,-84(s0)
20402de6:	c78d                	beqz	a5,20402e10 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402de8:	fac42503          	lw	a0,-84(s0)
20402dec:	c62ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402df0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402df4:	fa842783          	lw	a5,-88(s0)
20402df8:	3087a783          	lw	a5,776(a5)
20402dfc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402e00:	fa842783          	lw	a5,-88(s0)
20402e04:	3007a783          	lw	a5,768(a5)
20402e08:	fa442583          	lw	a1,-92(s0)
20402e0c:	4569                	li	a0,26
20402e0e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402e10:	0001                	nop
20402e12:	40f6                	lw	ra,92(sp)
20402e14:	42e6                	lw	t0,88(sp)
20402e16:	4356                	lw	t1,84(sp)
20402e18:	43c6                	lw	t2,80(sp)
20402e1a:	4436                	lw	s0,76(sp)
20402e1c:	4526                	lw	a0,72(sp)
20402e1e:	4596                	lw	a1,68(sp)
20402e20:	4606                	lw	a2,64(sp)
20402e22:	56f2                	lw	a3,60(sp)
20402e24:	5762                	lw	a4,56(sp)
20402e26:	57d2                	lw	a5,52(sp)
20402e28:	5842                	lw	a6,48(sp)
20402e2a:	58b2                	lw	a7,44(sp)
20402e2c:	5e22                	lw	t3,40(sp)
20402e2e:	5e92                	lw	t4,36(sp)
20402e30:	5f02                	lw	t5,32(sp)
20402e32:	4ff2                	lw	t6,28(sp)
20402e34:	6125                	addi	sp,sp,96
20402e36:	30200073          	mret

20402e3a <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20402e3a:	711d                	addi	sp,sp,-96
20402e3c:	ce86                	sw	ra,92(sp)
20402e3e:	cc96                	sw	t0,88(sp)
20402e40:	ca9a                	sw	t1,84(sp)
20402e42:	c89e                	sw	t2,80(sp)
20402e44:	c6a2                	sw	s0,76(sp)
20402e46:	c4aa                	sw	a0,72(sp)
20402e48:	c2ae                	sw	a1,68(sp)
20402e4a:	c0b2                	sw	a2,64(sp)
20402e4c:	de36                	sw	a3,60(sp)
20402e4e:	dc3a                	sw	a4,56(sp)
20402e50:	da3e                	sw	a5,52(sp)
20402e52:	d842                	sw	a6,48(sp)
20402e54:	d646                	sw	a7,44(sp)
20402e56:	d472                	sw	t3,40(sp)
20402e58:	d276                	sw	t4,36(sp)
20402e5a:	d07a                	sw	t5,32(sp)
20402e5c:	ce7e                	sw	t6,28(sp)
20402e5e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e60:	c44ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402e64:	872a                	mv	a4,a0
20402e66:	070a                	slli	a4,a4,0x2
20402e68:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402e6c:	97ba                	add	a5,a5,a4
20402e6e:	439c                	lw	a5,0(a5)
20402e70:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20402e74:	fac42783          	lw	a5,-84(s0)
20402e78:	c78d                	beqz	a5,20402ea2 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e7a:	fac42503          	lw	a0,-84(s0)
20402e7e:	bd0ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402e82:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20402e86:	fa842783          	lw	a5,-88(s0)
20402e8a:	3207a783          	lw	a5,800(a5)
20402e8e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20402e92:	fa842783          	lw	a5,-88(s0)
20402e96:	3187a783          	lw	a5,792(a5)
20402e9a:	fa442583          	lw	a1,-92(s0)
20402e9e:	456d                	li	a0,27
20402ea0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20402ea2:	0001                	nop
20402ea4:	40f6                	lw	ra,92(sp)
20402ea6:	42e6                	lw	t0,88(sp)
20402ea8:	4356                	lw	t1,84(sp)
20402eaa:	43c6                	lw	t2,80(sp)
20402eac:	4436                	lw	s0,76(sp)
20402eae:	4526                	lw	a0,72(sp)
20402eb0:	4596                	lw	a1,68(sp)
20402eb2:	4606                	lw	a2,64(sp)
20402eb4:	56f2                	lw	a3,60(sp)
20402eb6:	5762                	lw	a4,56(sp)
20402eb8:	57d2                	lw	a5,52(sp)
20402eba:	5842                	lw	a6,48(sp)
20402ebc:	58b2                	lw	a7,44(sp)
20402ebe:	5e22                	lw	t3,40(sp)
20402ec0:	5e92                	lw	t4,36(sp)
20402ec2:	5f02                	lw	t5,32(sp)
20402ec4:	4ff2                	lw	t6,28(sp)
20402ec6:	6125                	addi	sp,sp,96
20402ec8:	30200073          	mret

20402ecc <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20402ecc:	711d                	addi	sp,sp,-96
20402ece:	ce86                	sw	ra,92(sp)
20402ed0:	cc96                	sw	t0,88(sp)
20402ed2:	ca9a                	sw	t1,84(sp)
20402ed4:	c89e                	sw	t2,80(sp)
20402ed6:	c6a2                	sw	s0,76(sp)
20402ed8:	c4aa                	sw	a0,72(sp)
20402eda:	c2ae                	sw	a1,68(sp)
20402edc:	c0b2                	sw	a2,64(sp)
20402ede:	de36                	sw	a3,60(sp)
20402ee0:	dc3a                	sw	a4,56(sp)
20402ee2:	da3e                	sw	a5,52(sp)
20402ee4:	d842                	sw	a6,48(sp)
20402ee6:	d646                	sw	a7,44(sp)
20402ee8:	d472                	sw	t3,40(sp)
20402eea:	d276                	sw	t4,36(sp)
20402eec:	d07a                	sw	t5,32(sp)
20402eee:	ce7e                	sw	t6,28(sp)
20402ef0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ef2:	bb2ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402ef6:	872a                	mv	a4,a0
20402ef8:	070a                	slli	a4,a4,0x2
20402efa:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402efe:	97ba                	add	a5,a5,a4
20402f00:	439c                	lw	a5,0(a5)
20402f02:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20402f06:	fac42783          	lw	a5,-84(s0)
20402f0a:	c78d                	beqz	a5,20402f34 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f0c:	fac42503          	lw	a0,-84(s0)
20402f10:	b3eff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402f14:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20402f18:	fa842783          	lw	a5,-88(s0)
20402f1c:	3387a783          	lw	a5,824(a5)
20402f20:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20402f24:	fa842783          	lw	a5,-88(s0)
20402f28:	3307a783          	lw	a5,816(a5)
20402f2c:	fa442583          	lw	a1,-92(s0)
20402f30:	4571                	li	a0,28
20402f32:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20402f34:	0001                	nop
20402f36:	40f6                	lw	ra,92(sp)
20402f38:	42e6                	lw	t0,88(sp)
20402f3a:	4356                	lw	t1,84(sp)
20402f3c:	43c6                	lw	t2,80(sp)
20402f3e:	4436                	lw	s0,76(sp)
20402f40:	4526                	lw	a0,72(sp)
20402f42:	4596                	lw	a1,68(sp)
20402f44:	4606                	lw	a2,64(sp)
20402f46:	56f2                	lw	a3,60(sp)
20402f48:	5762                	lw	a4,56(sp)
20402f4a:	57d2                	lw	a5,52(sp)
20402f4c:	5842                	lw	a6,48(sp)
20402f4e:	58b2                	lw	a7,44(sp)
20402f50:	5e22                	lw	t3,40(sp)
20402f52:	5e92                	lw	t4,36(sp)
20402f54:	5f02                	lw	t5,32(sp)
20402f56:	4ff2                	lw	t6,28(sp)
20402f58:	6125                	addi	sp,sp,96
20402f5a:	30200073          	mret

20402f5e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20402f5e:	711d                	addi	sp,sp,-96
20402f60:	ce86                	sw	ra,92(sp)
20402f62:	cc96                	sw	t0,88(sp)
20402f64:	ca9a                	sw	t1,84(sp)
20402f66:	c89e                	sw	t2,80(sp)
20402f68:	c6a2                	sw	s0,76(sp)
20402f6a:	c4aa                	sw	a0,72(sp)
20402f6c:	c2ae                	sw	a1,68(sp)
20402f6e:	c0b2                	sw	a2,64(sp)
20402f70:	de36                	sw	a3,60(sp)
20402f72:	dc3a                	sw	a4,56(sp)
20402f74:	da3e                	sw	a5,52(sp)
20402f76:	d842                	sw	a6,48(sp)
20402f78:	d646                	sw	a7,44(sp)
20402f7a:	d472                	sw	t3,40(sp)
20402f7c:	d276                	sw	t4,36(sp)
20402f7e:	d07a                	sw	t5,32(sp)
20402f80:	ce7e                	sw	t6,28(sp)
20402f82:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f84:	b20ff0ef          	jal	ra,204022a4 <__metal_myhart_id>
20402f88:	872a                	mv	a4,a0
20402f8a:	070a                	slli	a4,a4,0x2
20402f8c:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20402f90:	97ba                	add	a5,a5,a4
20402f92:	439c                	lw	a5,0(a5)
20402f94:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20402f98:	fac42783          	lw	a5,-84(s0)
20402f9c:	c78d                	beqz	a5,20402fc6 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f9e:	fac42503          	lw	a0,-84(s0)
20402fa2:	aacff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20402fa6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20402faa:	fa842783          	lw	a5,-88(s0)
20402fae:	3507a783          	lw	a5,848(a5)
20402fb2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20402fb6:	fa842783          	lw	a5,-88(s0)
20402fba:	3487a783          	lw	a5,840(a5)
20402fbe:	fa442583          	lw	a1,-92(s0)
20402fc2:	4575                	li	a0,29
20402fc4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20402fc6:	0001                	nop
20402fc8:	40f6                	lw	ra,92(sp)
20402fca:	42e6                	lw	t0,88(sp)
20402fcc:	4356                	lw	t1,84(sp)
20402fce:	43c6                	lw	t2,80(sp)
20402fd0:	4436                	lw	s0,76(sp)
20402fd2:	4526                	lw	a0,72(sp)
20402fd4:	4596                	lw	a1,68(sp)
20402fd6:	4606                	lw	a2,64(sp)
20402fd8:	56f2                	lw	a3,60(sp)
20402fda:	5762                	lw	a4,56(sp)
20402fdc:	57d2                	lw	a5,52(sp)
20402fde:	5842                	lw	a6,48(sp)
20402fe0:	58b2                	lw	a7,44(sp)
20402fe2:	5e22                	lw	t3,40(sp)
20402fe4:	5e92                	lw	t4,36(sp)
20402fe6:	5f02                	lw	t5,32(sp)
20402fe8:	4ff2                	lw	t6,28(sp)
20402fea:	6125                	addi	sp,sp,96
20402fec:	30200073          	mret

20402ff0 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20402ff0:	711d                	addi	sp,sp,-96
20402ff2:	ce86                	sw	ra,92(sp)
20402ff4:	cc96                	sw	t0,88(sp)
20402ff6:	ca9a                	sw	t1,84(sp)
20402ff8:	c89e                	sw	t2,80(sp)
20402ffa:	c6a2                	sw	s0,76(sp)
20402ffc:	c4aa                	sw	a0,72(sp)
20402ffe:	c2ae                	sw	a1,68(sp)
20403000:	c0b2                	sw	a2,64(sp)
20403002:	de36                	sw	a3,60(sp)
20403004:	dc3a                	sw	a4,56(sp)
20403006:	da3e                	sw	a5,52(sp)
20403008:	d842                	sw	a6,48(sp)
2040300a:	d646                	sw	a7,44(sp)
2040300c:	d472                	sw	t3,40(sp)
2040300e:	d276                	sw	t4,36(sp)
20403010:	d07a                	sw	t5,32(sp)
20403012:	ce7e                	sw	t6,28(sp)
20403014:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403016:	a8eff0ef          	jal	ra,204022a4 <__metal_myhart_id>
2040301a:	872a                	mv	a4,a0
2040301c:	070a                	slli	a4,a4,0x2
2040301e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20403022:	97ba                	add	a5,a5,a4
20403024:	439c                	lw	a5,0(a5)
20403026:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040302a:	fac42783          	lw	a5,-84(s0)
2040302e:	c78d                	beqz	a5,20403058 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403030:	fac42503          	lw	a0,-84(s0)
20403034:	a1aff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
20403038:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040303c:	fa842783          	lw	a5,-88(s0)
20403040:	3687a783          	lw	a5,872(a5)
20403044:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403048:	fa842783          	lw	a5,-88(s0)
2040304c:	3607a783          	lw	a5,864(a5)
20403050:	fa442583          	lw	a1,-92(s0)
20403054:	4579                	li	a0,30
20403056:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403058:	0001                	nop
2040305a:	40f6                	lw	ra,92(sp)
2040305c:	42e6                	lw	t0,88(sp)
2040305e:	4356                	lw	t1,84(sp)
20403060:	43c6                	lw	t2,80(sp)
20403062:	4436                	lw	s0,76(sp)
20403064:	4526                	lw	a0,72(sp)
20403066:	4596                	lw	a1,68(sp)
20403068:	4606                	lw	a2,64(sp)
2040306a:	56f2                	lw	a3,60(sp)
2040306c:	5762                	lw	a4,56(sp)
2040306e:	57d2                	lw	a5,52(sp)
20403070:	5842                	lw	a6,48(sp)
20403072:	58b2                	lw	a7,44(sp)
20403074:	5e22                	lw	t3,40(sp)
20403076:	5e92                	lw	t4,36(sp)
20403078:	5f02                	lw	t5,32(sp)
2040307a:	4ff2                	lw	t6,28(sp)
2040307c:	6125                	addi	sp,sp,96
2040307e:	30200073          	mret

20403082 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403082:	711d                	addi	sp,sp,-96
20403084:	ce86                	sw	ra,92(sp)
20403086:	cc96                	sw	t0,88(sp)
20403088:	ca9a                	sw	t1,84(sp)
2040308a:	c89e                	sw	t2,80(sp)
2040308c:	c6a2                	sw	s0,76(sp)
2040308e:	c4aa                	sw	a0,72(sp)
20403090:	c2ae                	sw	a1,68(sp)
20403092:	c0b2                	sw	a2,64(sp)
20403094:	de36                	sw	a3,60(sp)
20403096:	dc3a                	sw	a4,56(sp)
20403098:	da3e                	sw	a5,52(sp)
2040309a:	d842                	sw	a6,48(sp)
2040309c:	d646                	sw	a7,44(sp)
2040309e:	d472                	sw	t3,40(sp)
204030a0:	d276                	sw	t4,36(sp)
204030a2:	d07a                	sw	t5,32(sp)
204030a4:	ce7e                	sw	t6,28(sp)
204030a6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030a8:	9fcff0ef          	jal	ra,204022a4 <__metal_myhart_id>
204030ac:	872a                	mv	a4,a0
204030ae:	070a                	slli	a4,a4,0x2
204030b0:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
204030b4:	97ba                	add	a5,a5,a4
204030b6:	439c                	lw	a5,0(a5)
204030b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204030bc:	fac42783          	lw	a5,-84(s0)
204030c0:	c78d                	beqz	a5,204030ea <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030c2:	fac42503          	lw	a0,-84(s0)
204030c6:	988ff0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204030ca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204030ce:	fa842783          	lw	a5,-88(s0)
204030d2:	3807a783          	lw	a5,896(a5)
204030d6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204030da:	fa842783          	lw	a5,-88(s0)
204030de:	3787a783          	lw	a5,888(a5)
204030e2:	fa442583          	lw	a1,-92(s0)
204030e6:	457d                	li	a0,31
204030e8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204030ea:	0001                	nop
204030ec:	40f6                	lw	ra,92(sp)
204030ee:	42e6                	lw	t0,88(sp)
204030f0:	4356                	lw	t1,84(sp)
204030f2:	43c6                	lw	t2,80(sp)
204030f4:	4436                	lw	s0,76(sp)
204030f6:	4526                	lw	a0,72(sp)
204030f8:	4596                	lw	a1,68(sp)
204030fa:	4606                	lw	a2,64(sp)
204030fc:	56f2                	lw	a3,60(sp)
204030fe:	5762                	lw	a4,56(sp)
20403100:	57d2                	lw	a5,52(sp)
20403102:	5842                	lw	a6,48(sp)
20403104:	58b2                	lw	a7,44(sp)
20403106:	5e22                	lw	t3,40(sp)
20403108:	5e92                	lw	t4,36(sp)
2040310a:	5f02                	lw	t5,32(sp)
2040310c:	4ff2                	lw	t6,28(sp)
2040310e:	6125                	addi	sp,sp,96
20403110:	30200073          	mret

20403114 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403114:	1101                	addi	sp,sp,-32
20403116:	ce22                	sw	s0,28(sp)
20403118:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040311a:	305027f3          	csrr	a5,mtvec
2040311e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403122:	fec42783          	lw	a5,-20(s0)
20403126:	03f7f793          	andi	a5,a5,63
2040312a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040312e:	fec42703          	lw	a4,-20(s0)
20403132:	4789                	li	a5,2
20403134:	00f70d63          	beq	a4,a5,2040314e <__metal_controller_interrupt_vector_mode+0x3a>
20403138:	fec42703          	lw	a4,-20(s0)
2040313c:	478d                	li	a5,3
2040313e:	00f70a63          	beq	a4,a5,20403152 <__metal_controller_interrupt_vector_mode+0x3e>
20403142:	fec42703          	lw	a4,-20(s0)
20403146:	4785                	li	a5,1
20403148:	00f70763          	beq	a4,a5,20403156 <__metal_controller_interrupt_vector_mode+0x42>
2040314c:	a039                	j	2040315a <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040314e:	478d                	li	a5,3
20403150:	a031                	j	2040315c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403152:	4791                	li	a5,4
20403154:	a021                	j	2040315c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403156:	4785                	li	a5,1
20403158:	a011                	j	2040315c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040315a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040315c:	853e                	mv	a0,a5
2040315e:	4472                	lw	s0,28(sp)
20403160:	6105                	addi	sp,sp,32
20403162:	8082                	ret

20403164 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403164:	7179                	addi	sp,sp,-48
20403166:	d622                	sw	s0,44(sp)
20403168:	1800                	addi	s0,sp,48
2040316a:	fca42e23          	sw	a0,-36(s0)
2040316e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403172:	305027f3          	csrr	a5,mtvec
20403176:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040317a:	fec42783          	lw	a5,-20(s0)
2040317e:	fc07f793          	andi	a5,a5,-64
20403182:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403186:	fd842783          	lw	a5,-40(s0)
2040318a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040318e:	fdc42703          	lw	a4,-36(s0)
20403192:	4791                	li	a5,4
20403194:	06e7e063          	bltu	a5,a4,204031f4 <__metal_controller_interrupt_vector+0x90>
20403198:	fdc42783          	lw	a5,-36(s0)
2040319c:	00279713          	slli	a4,a5,0x2
204031a0:	204057b7          	lui	a5,0x20405
204031a4:	1c878793          	addi	a5,a5,456 # 204051c8 <__metal_driver_vtable_riscv_clint0+0x4c>
204031a8:	97ba                	add	a5,a5,a4
204031aa:	439c                	lw	a5,0(a5)
204031ac:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204031ae:	fe842783          	lw	a5,-24(s0)
204031b2:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204031b6:	fec42783          	lw	a5,-20(s0)
204031ba:	0027e793          	ori	a5,a5,2
204031be:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204031c2:	a80d                	j	204031f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204031c4:	fe842783          	lw	a5,-24(s0)
204031c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204031cc:	fec42783          	lw	a5,-20(s0)
204031d0:	0037e793          	ori	a5,a5,3
204031d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204031d8:	a831                	j	204031f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204031da:	fe842783          	lw	a5,-24(s0)
204031de:	0017e793          	ori	a5,a5,1
204031e2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204031e6:	a039                	j	204031f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204031e8:	fe842783          	lw	a5,-24(s0)
204031ec:	9bf1                	andi	a5,a5,-4
204031ee:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204031f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204031f4:	0001                	nop
204031f6:	5432                	lw	s0,44(sp)
204031f8:	6145                	addi	sp,sp,48
204031fa:	8082                	ret

204031fc <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204031fc:	1101                	addi	sp,sp,-32
204031fe:	ce22                	sw	s0,28(sp)
20403200:	1000                	addi	s0,sp,32
20403202:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403206:	fec42783          	lw	a5,-20(s0)
2040320a:	17f5                	addi	a5,a5,-3
2040320c:	4771                	li	a4,28
2040320e:	00f76d63          	bltu	a4,a5,20403228 <__metal_valid_interrupt_id+0x2c>
20403212:	00279713          	slli	a4,a5,0x2
20403216:	204057b7          	lui	a5,0x20405
2040321a:	1dc78793          	addi	a5,a5,476 # 204051dc <__metal_driver_vtable_riscv_clint0+0x60>
2040321e:	97ba                	add	a5,a5,a4
20403220:	439c                	lw	a5,0(a5)
20403222:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403224:	4785                	li	a5,1
20403226:	a019                	j	2040322c <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403228:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040322a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040322c:	853e                	mv	a0,a5
2040322e:	4472                	lw	s0,28(sp)
20403230:	6105                	addi	sp,sp,32
20403232:	8082                	ret

20403234 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403234:	7179                	addi	sp,sp,-48
20403236:	d606                	sw	ra,44(sp)
20403238:	d422                	sw	s0,40(sp)
2040323a:	1800                	addi	s0,sp,48
2040323c:	fca42e23          	sw	a0,-36(s0)
20403240:	fcb42c23          	sw	a1,-40(s0)
20403244:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403248:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040324c:	fdc42783          	lw	a5,-36(s0)
20403250:	e399                	bnez	a5,20403256 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403252:	57fd                	li	a5,-1
20403254:	a849                	j	204032e6 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403256:	fd842703          	lw	a4,-40(s0)
2040325a:	47fd                	li	a5,31
2040325c:	08e7e063          	bltu	a5,a4,204032dc <__metal_local_interrupt_enable+0xa8>
20403260:	fd842783          	lw	a5,-40(s0)
20403264:	00279713          	slli	a4,a5,0x2
20403268:	204057b7          	lui	a5,0x20405
2040326c:	25078793          	addi	a5,a5,592 # 20405250 <__metal_driver_vtable_riscv_clint0+0xd4>
20403270:	97ba                	add	a5,a5,a4
20403272:	439c                	lw	a5,0(a5)
20403274:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403276:	fd442783          	lw	a5,-44(s0)
2040327a:	c781                	beqz	a5,20403282 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040327c:	842ff0ef          	jal	ra,204022be <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403280:	a08d                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403282:	854ff0ef          	jal	ra,204022d6 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403286:	a8b1                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403288:	fd442783          	lw	a5,-44(s0)
2040328c:	c781                	beqz	a5,20403294 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040328e:	860ff0ef          	jal	ra,204022ee <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403292:	a881                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403294:	872ff0ef          	jal	ra,20402306 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403298:	a0a9                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040329a:	fd442783          	lw	a5,-44(s0)
2040329e:	c781                	beqz	a5,204032a6 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204032a0:	87eff0ef          	jal	ra,2040231e <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204032a4:	a83d                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204032a6:	892ff0ef          	jal	ra,20402338 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204032aa:	a825                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204032ac:	fd442783          	lw	a5,-44(s0)
204032b0:	c781                	beqz	a5,204032b8 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204032b2:	8a0ff0ef          	jal	ra,20402352 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204032b6:	a035                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204032b8:	8b6ff0ef          	jal	ra,2040236e <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204032bc:	a01d                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204032be:	fd442783          	lw	a5,-44(s0)
204032c2:	c799                	beqz	a5,204032d0 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204032c4:	fd842783          	lw	a5,-40(s0)
204032c8:	853e                	mv	a0,a5
204032ca:	8c0ff0ef          	jal	ra,2040238a <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204032ce:	a811                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204032d0:	fd842783          	lw	a5,-40(s0)
204032d4:	853e                	mv	a0,a5
204032d6:	8e0ff0ef          	jal	ra,204023b6 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204032da:	a021                	j	204032e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204032dc:	57fd                	li	a5,-1
204032de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204032e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204032e6:	853e                	mv	a0,a5
204032e8:	50b2                	lw	ra,44(sp)
204032ea:	5422                	lw	s0,40(sp)
204032ec:	6145                	addi	sp,sp,48
204032ee:	8082                	ret

204032f0 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204032f0:	7179                	addi	sp,sp,-48
204032f2:	d622                	sw	s0,44(sp)
204032f4:	1800                	addi	s0,sp,48
204032f6:	fca42e23          	sw	a0,-36(s0)
204032fa:	fcb42c23          	sw	a1,-40(s0)
204032fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403302:	fdc42783          	lw	a5,-36(s0)
20403306:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040330a:	fd842703          	lw	a4,-40(s0)
2040330e:	47ad                	li	a5,11
20403310:	02e7c263          	blt	a5,a4,20403334 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403314:	fd442783          	lw	a5,-44(s0)
20403318:	cf91                	beqz	a5,20403334 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040331a:	fec42703          	lw	a4,-20(s0)
2040331e:	fd842783          	lw	a5,-40(s0)
20403322:	0e078793          	addi	a5,a5,224
20403326:	078a                	slli	a5,a5,0x2
20403328:	97ba                	add	a5,a5,a4
2040332a:	fd442703          	lw	a4,-44(s0)
2040332e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403330:	4781                	li	a5,0
20403332:	a011                	j	20403336 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403334:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403336:	853e                	mv	a0,a5
20403338:	5432                	lw	s0,44(sp)
2040333a:	6145                	addi	sp,sp,48
2040333c:	8082                	ret

2040333e <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040333e:	7139                	addi	sp,sp,-64
20403340:	de06                	sw	ra,60(sp)
20403342:	dc22                	sw	s0,56(sp)
20403344:	0080                	addi	s0,sp,64
20403346:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040334a:	fcc42783          	lw	a5,-52(s0)
2040334e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403352:	fe442783          	lw	a5,-28(s0)
20403356:	43dc                	lw	a5,4(a5)
20403358:	10079d63          	bnez	a5,20403472 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040335c:	57fd                	li	a5,-1
2040335e:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403362:	57fd                	li	a5,-1
20403364:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403368:	301027f3          	csrr	a5,misa
2040336c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403370:	fe042703          	lw	a4,-32(s0)
20403374:	6789                	lui	a5,0x2
20403376:	8ff9                	and	a5,a5,a4
20403378:	e799                	bnez	a5,20403386 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040337a:	fe042703          	lw	a4,-32(s0)
2040337e:	000407b7          	lui	a5,0x40
20403382:	8ff9                	and	a5,a5,a4
20403384:	c799                	beqz	a5,20403392 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403386:	57fd                	li	a5,-1
20403388:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040338c:	57fd                	li	a5,-1
2040338e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403392:	fe042703          	lw	a4,-32(s0)
20403396:	000407b7          	lui	a5,0x40
2040339a:	8ff9                	and	a5,a5,a4
2040339c:	c781                	beqz	a5,204033a4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040339e:	57fd                	li	a5,-1
204033a0:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204033a4:	fe042623          	sw	zero,-20(s0)
204033a8:	a0b9                	j	204033f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204033aa:	fe442683          	lw	a3,-28(s0)
204033ae:	fec42703          	lw	a4,-20(s0)
204033b2:	87ba                	mv	a5,a4
204033b4:	0786                	slli	a5,a5,0x1
204033b6:	97ba                	add	a5,a5,a4
204033b8:	078e                	slli	a5,a5,0x3
204033ba:	97b6                	add	a5,a5,a3
204033bc:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204033c0:	fe442683          	lw	a3,-28(s0)
204033c4:	fec42703          	lw	a4,-20(s0)
204033c8:	87ba                	mv	a5,a4
204033ca:	0786                	slli	a5,a5,0x1
204033cc:	97ba                	add	a5,a5,a4
204033ce:	078e                	slli	a5,a5,0x3
204033d0:	97b6                	add	a5,a5,a3
204033d2:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204033d6:	fe442683          	lw	a3,-28(s0)
204033da:	fec42703          	lw	a4,-20(s0)
204033de:	87ba                	mv	a5,a4
204033e0:	0786                	slli	a5,a5,0x1
204033e2:	97ba                	add	a5,a5,a4
204033e4:	078e                	slli	a5,a5,0x3
204033e6:	97b6                	add	a5,a5,a3
204033e8:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204033ec:	fec42783          	lw	a5,-20(s0)
204033f0:	0785                	addi	a5,a5,1
204033f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204033f6:	fec42703          	lw	a4,-20(s0)
204033fa:	47fd                	li	a5,31
204033fc:	fae7d7e3          	bge	a5,a4,204033aa <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403400:	fe042423          	sw	zero,-24(s0)
20403404:	a01d                	j	2040342a <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403406:	fe442703          	lw	a4,-28(s0)
2040340a:	fe842783          	lw	a5,-24(s0)
2040340e:	0e078793          	addi	a5,a5,224
20403412:	078a                	slli	a5,a5,0x2
20403414:	97ba                	add	a5,a5,a4
20403416:	20402737          	lui	a4,0x20402
2040341a:	3e270713          	addi	a4,a4,994 # 204023e2 <__metal_default_exception_handler>
2040341e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403420:	fe842783          	lw	a5,-24(s0)
20403424:	0785                	addi	a5,a5,1
20403426:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040342a:	fe842703          	lw	a4,-24(s0)
2040342e:	47ad                	li	a5,11
20403430:	fce7dbe3          	bge	a5,a4,20403406 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403434:	204027b7          	lui	a5,0x20402
20403438:	68078593          	addi	a1,a5,1664 # 20402680 <__metal_exception_handler>
2040343c:	4501                	li	a0,0
2040343e:	331d                	jal	20403164 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403440:	301027f3          	csrr	a5,misa
20403444:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403448:	fdc42703          	lw	a4,-36(s0)
2040344c:	67c1                	lui	a5,0x10
2040344e:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403452:	8ff9                	and	a5,a5,a4
20403454:	cb99                	beqz	a5,2040346a <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403456:	300027f3          	csrr	a5,mstatus
2040345a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040345e:	fdc42703          	lw	a4,-36(s0)
20403462:	6789                	lui	a5,0x2
20403464:	8fd9                	or	a5,a5,a4
20403466:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040346a:	fe442783          	lw	a5,-28(s0)
2040346e:	4705                	li	a4,1
20403470:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403472:	0001                	nop
20403474:	50f2                	lw	ra,60(sp)
20403476:	5462                	lw	s0,56(sp)
20403478:	6121                	addi	sp,sp,64
2040347a:	8082                	ret

2040347c <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040347c:	7179                	addi	sp,sp,-48
2040347e:	d606                	sw	ra,44(sp)
20403480:	d422                	sw	s0,40(sp)
20403482:	1800                	addi	s0,sp,48
20403484:	fca42e23          	sw	a0,-36(s0)
20403488:	fcb42c23          	sw	a1,-40(s0)
2040348c:	fcc42a23          	sw	a2,-44(s0)
20403490:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403494:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403498:	fdc42783          	lw	a5,-36(s0)
2040349c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204034a0:	fd842503          	lw	a0,-40(s0)
204034a4:	3ba1                	jal	204031fc <__metal_valid_interrupt_id>
204034a6:	87aa                	mv	a5,a0
204034a8:	e399                	bnez	a5,204034ae <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204034aa:	57d5                	li	a5,-11
204034ac:	aa11                	j	204035c0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204034ae:	fd442783          	lw	a5,-44(s0)
204034b2:	cf85                	beqz	a5,204034ea <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204034b4:	fe842683          	lw	a3,-24(s0)
204034b8:	fd842703          	lw	a4,-40(s0)
204034bc:	87ba                	mv	a5,a4
204034be:	0786                	slli	a5,a5,0x1
204034c0:	97ba                	add	a5,a5,a4
204034c2:	078e                	slli	a5,a5,0x3
204034c4:	97b6                	add	a5,a5,a3
204034c6:	fd442703          	lw	a4,-44(s0)
204034ca:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204034ce:	fe842683          	lw	a3,-24(s0)
204034d2:	fd842703          	lw	a4,-40(s0)
204034d6:	87ba                	mv	a5,a4
204034d8:	0786                	slli	a5,a5,0x1
204034da:	97ba                	add	a5,a5,a4
204034dc:	078e                	slli	a5,a5,0x3
204034de:	97b6                	add	a5,a5,a3
204034e0:	fd042703          	lw	a4,-48(s0)
204034e4:	08e7ac23          	sw	a4,152(a5)
204034e8:	a8d1                	j	204035bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204034ea:	fd842783          	lw	a5,-40(s0)
204034ee:	17f5                	addi	a5,a5,-3
204034f0:	4771                	li	a4,28
204034f2:	0cf76263          	bltu	a4,a5,204035b6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204034f6:	00279713          	slli	a4,a5,0x2
204034fa:	204057b7          	lui	a5,0x20405
204034fe:	2d078793          	addi	a5,a5,720 # 204052d0 <__metal_driver_vtable_riscv_clint0+0x154>
20403502:	97ba                	add	a5,a5,a4
20403504:	439c                	lw	a5,0(a5)
20403506:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403508:	fe842683          	lw	a3,-24(s0)
2040350c:	fd842703          	lw	a4,-40(s0)
20403510:	87ba                	mv	a5,a4
20403512:	0786                	slli	a5,a5,0x1
20403514:	97ba                	add	a5,a5,a4
20403516:	078e                	slli	a5,a5,0x3
20403518:	97b6                	add	a5,a5,a3
2040351a:	20402737          	lui	a4,0x20402
2040351e:	4ce70713          	addi	a4,a4,1230 # 204024ce <__metal_default_sw_handler>
20403522:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403526:	fe842683          	lw	a3,-24(s0)
2040352a:	fd842703          	lw	a4,-40(s0)
2040352e:	87ba                	mv	a5,a4
20403530:	0786                	slli	a5,a5,0x1
20403532:	97ba                	add	a5,a5,a4
20403534:	078e                	slli	a5,a5,0x3
20403536:	97b6                	add	a5,a5,a3
20403538:	fd042703          	lw	a4,-48(s0)
2040353c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403540:	a8b5                	j	204035bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403542:	fe842683          	lw	a3,-24(s0)
20403546:	fd842703          	lw	a4,-40(s0)
2040354a:	87ba                	mv	a5,a4
2040354c:	0786                	slli	a5,a5,0x1
2040354e:	97ba                	add	a5,a5,a4
20403550:	078e                	slli	a5,a5,0x3
20403552:	97b6                	add	a5,a5,a3
20403554:	20402737          	lui	a4,0x20402
20403558:	5c070713          	addi	a4,a4,1472 # 204025c0 <__metal_default_timer_handler>
2040355c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403560:	fe842683          	lw	a3,-24(s0)
20403564:	fd842703          	lw	a4,-40(s0)
20403568:	87ba                	mv	a5,a4
2040356a:	0786                	slli	a5,a5,0x1
2040356c:	97ba                	add	a5,a5,a4
2040356e:	078e                	slli	a5,a5,0x3
20403570:	97b6                	add	a5,a5,a3
20403572:	fd042703          	lw	a4,-48(s0)
20403576:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
2040357a:	a089                	j	204035bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040357c:	fe842683          	lw	a3,-24(s0)
20403580:	fd842703          	lw	a4,-40(s0)
20403584:	87ba                	mv	a5,a4
20403586:	0786                	slli	a5,a5,0x1
20403588:	97ba                	add	a5,a5,a4
2040358a:	078e                	slli	a5,a5,0x3
2040358c:	97b6                	add	a5,a5,a3
2040358e:	20402737          	lui	a4,0x20402
20403592:	3fa70713          	addi	a4,a4,1018 # 204023fa <__metal_default_interrupt_handler>
20403596:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040359a:	fe842683          	lw	a3,-24(s0)
2040359e:	fd842703          	lw	a4,-40(s0)
204035a2:	87ba                	mv	a5,a4
204035a4:	0786                	slli	a5,a5,0x1
204035a6:	97ba                	add	a5,a5,a4
204035a8:	078e                	slli	a5,a5,0x3
204035aa:	97b6                	add	a5,a5,a3
204035ac:	fd042703          	lw	a4,-48(s0)
204035b0:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204035b4:	a021                	j	204035bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204035b6:	57d1                	li	a5,-12
204035b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204035bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204035c0:	853e                	mv	a0,a5
204035c2:	50b2                	lw	ra,44(sp)
204035c4:	5422                	lw	s0,40(sp)
204035c6:	6145                	addi	sp,sp,48
204035c8:	8082                	ret

204035ca <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204035ca:	1101                	addi	sp,sp,-32
204035cc:	ce06                	sw	ra,28(sp)
204035ce:	cc22                	sw	s0,24(sp)
204035d0:	1000                	addi	s0,sp,32
204035d2:	fea42623          	sw	a0,-20(s0)
204035d6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204035da:	fe842783          	lw	a5,-24(s0)
204035de:	4605                	li	a2,1
204035e0:	85be                	mv	a1,a5
204035e2:	fec42503          	lw	a0,-20(s0)
204035e6:	c4fff0ef          	jal	ra,20403234 <__metal_local_interrupt_enable>
204035ea:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204035ec:	853e                	mv	a0,a5
204035ee:	40f2                	lw	ra,28(sp)
204035f0:	4462                	lw	s0,24(sp)
204035f2:	6105                	addi	sp,sp,32
204035f4:	8082                	ret

204035f6 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204035f6:	1101                	addi	sp,sp,-32
204035f8:	ce06                	sw	ra,28(sp)
204035fa:	cc22                	sw	s0,24(sp)
204035fc:	1000                	addi	s0,sp,32
204035fe:	fea42623          	sw	a0,-20(s0)
20403602:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403606:	fe842783          	lw	a5,-24(s0)
2040360a:	4601                	li	a2,0
2040360c:	85be                	mv	a1,a5
2040360e:	fec42503          	lw	a0,-20(s0)
20403612:	c23ff0ef          	jal	ra,20403234 <__metal_local_interrupt_enable>
20403616:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403618:	853e                	mv	a0,a5
2040361a:	40f2                	lw	ra,28(sp)
2040361c:	4462                	lw	s0,24(sp)
2040361e:	6105                	addi	sp,sp,32
20403620:	8082                	ret

20403622 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403622:	1101                	addi	sp,sp,-32
20403624:	ce06                	sw	ra,28(sp)
20403626:	cc22                	sw	s0,24(sp)
20403628:	1000                	addi	s0,sp,32
2040362a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
2040362e:	ae7ff0ef          	jal	ra,20403114 <__metal_controller_interrupt_vector_mode>
20403632:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403634:	853e                	mv	a0,a5
20403636:	40f2                	lw	ra,28(sp)
20403638:	4462                	lw	s0,24(sp)
2040363a:	6105                	addi	sp,sp,32
2040363c:	8082                	ret

2040363e <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
2040363e:	7179                	addi	sp,sp,-48
20403640:	d606                	sw	ra,44(sp)
20403642:	d422                	sw	s0,40(sp)
20403644:	1800                	addi	s0,sp,48
20403646:	fca42e23          	sw	a0,-36(s0)
2040364a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040364e:	fdc42783          	lw	a5,-36(s0)
20403652:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403656:	fd842783          	lw	a5,-40(s0)
2040365a:	eb99                	bnez	a5,20403670 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
2040365c:	204027b7          	lui	a5,0x20402
20403660:	68078593          	addi	a1,a5,1664 # 20402680 <__metal_exception_handler>
20403664:	fd842503          	lw	a0,-40(s0)
20403668:	afdff0ef          	jal	ra,20403164 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
2040366c:	4781                	li	a5,0
2040366e:	a00d                	j	20403690 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403670:	fd842703          	lw	a4,-40(s0)
20403674:	4785                	li	a5,1
20403676:	00f71c63          	bne	a4,a5,2040368e <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
2040367a:	204057b7          	lui	a5,0x20405
2040367e:	f8078593          	addi	a1,a5,-128 # 20404f80 <__metal_vector_table>
20403682:	fd842503          	lw	a0,-40(s0)
20403686:	adfff0ef          	jal	ra,20403164 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
2040368a:	4781                	li	a5,0
2040368c:	a011                	j	20403690 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040368e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403690:	853e                	mv	a0,a5
20403692:	50b2                	lw	ra,44(sp)
20403694:	5422                	lw	s0,40(sp)
20403696:	6145                	addi	sp,sp,48
20403698:	8082                	ret

2040369a <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
2040369a:	1101                	addi	sp,sp,-32
2040369c:	ce22                	sw	s0,28(sp)
2040369e:	1000                	addi	s0,sp,32
204036a0:	fea42623          	sw	a0,-20(s0)
204036a4:	feb42423          	sw	a1,-24(s0)
204036a8:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204036ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204036ae:	853e                	mv	a0,a5
204036b0:	4472                	lw	s0,28(sp)
204036b2:	6105                	addi	sp,sp,32
204036b4:	8082                	ret

204036b6 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204036b6:	7139                	addi	sp,sp,-64
204036b8:	de22                	sw	s0,60(sp)
204036ba:	0080                	addi	s0,sp,64
204036bc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204036c0:	4301                	li	t1,0
204036c2:	4381                	li	t2,0
204036c4:	fe642423          	sw	t1,-24(s0)
204036c8:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204036cc:	b8002573          	csrr	a0,mcycleh
204036d0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204036d4:	b0002573          	csrr	a0,mcycle
204036d8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204036dc:	b8002573          	csrr	a0,mcycleh
204036e0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204036e4:	fe442883          	lw	a7,-28(s0)
204036e8:	fdc42503          	lw	a0,-36(s0)
204036ec:	02a89563          	bne	a7,a0,20403716 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204036f0:	fe442503          	lw	a0,-28(s0)
204036f4:	85aa                	mv	a1,a0
204036f6:	4601                	li	a2,0
204036f8:	00059813          	slli	a6,a1,0x0
204036fc:	4781                	li	a5,0
204036fe:	fe042603          	lw	a2,-32(s0)
20403702:	86b2                	mv	a3,a2
20403704:	4701                	li	a4,0
20403706:	00d7e633          	or	a2,a5,a3
2040370a:	fec42423          	sw	a2,-24(s0)
2040370e:	00e867b3          	or	a5,a6,a4
20403712:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403716:	fe842783          	lw	a5,-24(s0)
2040371a:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
2040371e:	853e                	mv	a0,a5
20403720:	85c2                	mv	a1,a6
20403722:	5472                	lw	s0,60(sp)
20403724:	6121                	addi	sp,sp,64
20403726:	8082                	ret

20403728 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403728:	7179                	addi	sp,sp,-48
2040372a:	d606                	sw	ra,44(sp)
2040372c:	d422                	sw	s0,40(sp)
2040372e:	d24a                	sw	s2,36(sp)
20403730:	d04e                	sw	s3,32(sp)
20403732:	1800                	addi	s0,sp,48
20403734:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403738:	fdc42783          	lw	a5,-36(s0)
2040373c:	e781                	bnez	a5,20403744 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
2040373e:	4901                	li	s2,0
20403740:	4981                	li	s3,0
20403742:	a821                	j	2040375a <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403744:	fdc42503          	lw	a0,-36(s0)
20403748:	addfe0ef          	jal	ra,20402224 <__metal_driver_cpu_timebase>
2040374c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403750:	fec42783          	lw	a5,-20(s0)
20403754:	893e                	mv	s2,a5
20403756:	87fd                	srai	a5,a5,0x1f
20403758:	89be                	mv	s3,a5
2040375a:	87ca                	mv	a5,s2
2040375c:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
2040375e:	853e                	mv	a0,a5
20403760:	85c2                	mv	a1,a6
20403762:	50b2                	lw	ra,44(sp)
20403764:	5422                	lw	s0,40(sp)
20403766:	5912                	lw	s2,36(sp)
20403768:	5982                	lw	s3,32(sp)
2040376a:	6145                	addi	sp,sp,48
2040376c:	8082                	ret

2040376e <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
2040376e:	7179                	addi	sp,sp,-48
20403770:	d606                	sw	ra,44(sp)
20403772:	d422                	sw	s0,40(sp)
20403774:	1800                	addi	s0,sp,48
20403776:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
2040377a:	4781                	li	a5,0
2040377c:	4801                	li	a6,0
2040377e:	fef42023          	sw	a5,-32(s0)
20403782:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403786:	fdc42503          	lw	a0,-36(s0)
2040378a:	ac5fe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
2040378e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403792:	fec42783          	lw	a5,-20(s0)
20403796:	c78d                	beqz	a5,204037c0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403798:	fec42783          	lw	a5,-20(s0)
2040379c:	13c7a783          	lw	a5,316(a5)
204037a0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204037a4:	fe842783          	lw	a5,-24(s0)
204037a8:	cf81                	beqz	a5,204037c0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204037aa:	fe842783          	lw	a5,-24(s0)
204037ae:	439c                	lw	a5,0(a5)
204037b0:	43f8                	lw	a4,68(a5)
204037b2:	fe040793          	addi	a5,s0,-32
204037b6:	863e                	mv	a2,a5
204037b8:	4585                	li	a1,1
204037ba:	fe842503          	lw	a0,-24(s0)
204037be:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204037c0:	fe042783          	lw	a5,-32(s0)
204037c4:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204037c8:	853e                	mv	a0,a5
204037ca:	85c2                	mv	a1,a6
204037cc:	50b2                	lw	ra,44(sp)
204037ce:	5422                	lw	s0,40(sp)
204037d0:	6145                	addi	sp,sp,48
204037d2:	8082                	ret

204037d4 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204037d4:	7179                	addi	sp,sp,-48
204037d6:	d606                	sw	ra,44(sp)
204037d8:	d422                	sw	s0,40(sp)
204037da:	d226                	sw	s1,36(sp)
204037dc:	1800                	addi	s0,sp,48
204037de:	fca42e23          	sw	a0,-36(s0)
204037e2:	fcb42823          	sw	a1,-48(s0)
204037e6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204037ea:	57fd                	li	a5,-1
204037ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204037f0:	fdc42503          	lw	a0,-36(s0)
204037f4:	a5bfe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204037f8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204037fc:	fe842783          	lw	a5,-24(s0)
20403800:	cf8d                	beqz	a5,2040383a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403802:	fe842783          	lw	a5,-24(s0)
20403806:	13c7a783          	lw	a5,316(a5)
2040380a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
2040380e:	fe442783          	lw	a5,-28(s0)
20403812:	c785                	beqz	a5,2040383a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403814:	fe442783          	lw	a5,-28(s0)
20403818:	439c                	lw	a5,0(a5)
2040381a:	47a4                	lw	s1,72(a5)
2040381c:	fdc42503          	lw	a0,-36(s0)
20403820:	9e1fe0ef          	jal	ra,20402200 <__metal_driver_cpu_hartid>
20403824:	87aa                	mv	a5,a0
20403826:	fd042603          	lw	a2,-48(s0)
2040382a:	fd442683          	lw	a3,-44(s0)
2040382e:	85be                	mv	a1,a5
20403830:	fe442503          	lw	a0,-28(s0)
20403834:	9482                	jalr	s1
20403836:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
2040383a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
2040383e:	853e                	mv	a0,a5
20403840:	50b2                	lw	ra,44(sp)
20403842:	5422                	lw	s0,40(sp)
20403844:	5492                	lw	s1,36(sp)
20403846:	6145                	addi	sp,sp,48
20403848:	8082                	ret

2040384a <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
2040384a:	1101                	addi	sp,sp,-32
2040384c:	ce22                	sw	s0,28(sp)
2040384e:	1000                	addi	s0,sp,32
20403850:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403854:	81418793          	addi	a5,gp,-2028 # 8000075c <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403858:	853e                	mv	a0,a5
2040385a:	4472                	lw	s0,28(sp)
2040385c:	6105                	addi	sp,sp,32
2040385e:	8082                	ret

20403860 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403860:	1101                	addi	sp,sp,-32
20403862:	ce22                	sw	s0,28(sp)
20403864:	1000                	addi	s0,sp,32
20403866:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
2040386a:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
2040386c:	853e                	mv	a0,a5
2040386e:	4472                	lw	s0,28(sp)
20403870:	6105                	addi	sp,sp,32
20403872:	8082                	ret

20403874 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403874:	1101                	addi	sp,sp,-32
20403876:	ce22                	sw	s0,28(sp)
20403878:	1000                	addi	s0,sp,32
2040387a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040387e:	81418793          	addi	a5,gp,-2028 # 8000075c <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403882:	853e                	mv	a0,a5
20403884:	4472                	lw	s0,28(sp)
20403886:	6105                	addi	sp,sp,32
20403888:	8082                	ret

2040388a <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
2040388a:	1101                	addi	sp,sp,-32
2040388c:	ce22                	sw	s0,28(sp)
2040388e:	1000                	addi	s0,sp,32
20403890:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403894:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403896:	853e                	mv	a0,a5
20403898:	4472                	lw	s0,28(sp)
2040389a:	6105                	addi	sp,sp,32
2040389c:	8082                	ret

2040389e <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
2040389e:	7179                	addi	sp,sp,-48
204038a0:	d606                	sw	ra,44(sp)
204038a2:	d422                	sw	s0,40(sp)
204038a4:	1800                	addi	s0,sp,48
204038a6:	fca42e23          	sw	a0,-36(s0)
204038aa:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204038ae:	57fd                	li	a5,-1
204038b0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204038b4:	fdc42503          	lw	a0,-36(s0)
204038b8:	997fe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204038bc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204038c0:	fe842783          	lw	a5,-24(s0)
204038c4:	c79d                	beqz	a5,204038f2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204038c6:	fe842783          	lw	a5,-24(s0)
204038ca:	0dc7a783          	lw	a5,220(a5)
204038ce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204038d2:	fe442783          	lw	a5,-28(s0)
204038d6:	cf91                	beqz	a5,204038f2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204038d8:	fe442783          	lw	a5,-28(s0)
204038dc:	439c                	lw	a5,0(a5)
204038de:	43f8                	lw	a4,68(a5)
204038e0:	fd840793          	addi	a5,s0,-40
204038e4:	863e                	mv	a2,a5
204038e6:	458d                	li	a1,3
204038e8:	fe442503          	lw	a0,-28(s0)
204038ec:	9702                	jalr	a4
204038ee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204038f2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204038f6:	853e                	mv	a0,a5
204038f8:	50b2                	lw	ra,44(sp)
204038fa:	5422                	lw	s0,40(sp)
204038fc:	6145                	addi	sp,sp,48
204038fe:	8082                	ret

20403900 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403900:	7179                	addi	sp,sp,-48
20403902:	d606                	sw	ra,44(sp)
20403904:	d422                	sw	s0,40(sp)
20403906:	1800                	addi	s0,sp,48
20403908:	fca42e23          	sw	a0,-36(s0)
2040390c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403910:	57fd                	li	a5,-1
20403912:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403916:	fdc42503          	lw	a0,-36(s0)
2040391a:	935fe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
2040391e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403922:	fe842783          	lw	a5,-24(s0)
20403926:	c79d                	beqz	a5,20403954 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403928:	fe842783          	lw	a5,-24(s0)
2040392c:	0dc7a783          	lw	a5,220(a5)
20403930:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403934:	fe442783          	lw	a5,-28(s0)
20403938:	cf91                	beqz	a5,20403954 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
2040393a:	fe442783          	lw	a5,-28(s0)
2040393e:	439c                	lw	a5,0(a5)
20403940:	43f8                	lw	a4,68(a5)
20403942:	fd840793          	addi	a5,s0,-40
20403946:	863e                	mv	a2,a5
20403948:	4589                	li	a1,2
2040394a:	fe442503          	lw	a0,-28(s0)
2040394e:	9702                	jalr	a4
20403950:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403954:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403958:	853e                	mv	a0,a5
2040395a:	50b2                	lw	ra,44(sp)
2040395c:	5422                	lw	s0,40(sp)
2040395e:	6145                	addi	sp,sp,48
20403960:	8082                	ret

20403962 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403962:	7179                	addi	sp,sp,-48
20403964:	d606                	sw	ra,44(sp)
20403966:	d422                	sw	s0,40(sp)
20403968:	1800                	addi	s0,sp,48
2040396a:	fca42e23          	sw	a0,-36(s0)
2040396e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403972:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403976:	fdc42503          	lw	a0,-36(s0)
2040397a:	8d5fe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
2040397e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403982:	fe842783          	lw	a5,-24(s0)
20403986:	c79d                	beqz	a5,204039b4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403988:	fe842783          	lw	a5,-24(s0)
2040398c:	0dc7a783          	lw	a5,220(a5)
20403990:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403994:	fe442783          	lw	a5,-28(s0)
20403998:	cf91                	beqz	a5,204039b4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2040399a:	fe442783          	lw	a5,-28(s0)
2040399e:	439c                	lw	a5,0(a5)
204039a0:	43f8                	lw	a4,68(a5)
204039a2:	fd840793          	addi	a5,s0,-40
204039a6:	863e                	mv	a2,a5
204039a8:	4591                	li	a1,4
204039aa:	fe442503          	lw	a0,-28(s0)
204039ae:	9702                	jalr	a4
204039b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204039b4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
204039b8:	853e                	mv	a0,a5
204039ba:	50b2                	lw	ra,44(sp)
204039bc:	5422                	lw	s0,40(sp)
204039be:	6145                	addi	sp,sp,48
204039c0:	8082                	ret

204039c2 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204039c2:	1101                	addi	sp,sp,-32
204039c4:	ce06                	sw	ra,28(sp)
204039c6:	cc22                	sw	s0,24(sp)
204039c8:	1000                	addi	s0,sp,32
204039ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204039ce:	fec42503          	lw	a0,-20(s0)
204039d2:	87dfe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204039d6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204039d8:	853e                	mv	a0,a5
204039da:	40f2                	lw	ra,28(sp)
204039dc:	4462                	lw	s0,24(sp)
204039de:	6105                	addi	sp,sp,32
204039e0:	8082                	ret

204039e2 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204039e2:	7179                	addi	sp,sp,-48
204039e4:	d606                	sw	ra,44(sp)
204039e6:	d422                	sw	s0,40(sp)
204039e8:	1800                	addi	s0,sp,48
204039ea:	fca42e23          	sw	a0,-36(s0)
204039ee:	fcb42c23          	sw	a1,-40(s0)
204039f2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204039f6:	fdc42503          	lw	a0,-36(s0)
204039fa:	855fe0ef          	jal	ra,2040224e <__metal_driver_cpu_interrupt_controller>
204039fe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403a02:	fec42783          	lw	a5,-20(s0)
20403a06:	cb99                	beqz	a5,20403a1c <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403a08:	fd442603          	lw	a2,-44(s0)
20403a0c:	fd842583          	lw	a1,-40(s0)
20403a10:	fec42503          	lw	a0,-20(s0)
20403a14:	8ddff0ef          	jal	ra,204032f0 <__metal_exception_register>
20403a18:	87aa                	mv	a5,a0
20403a1a:	a011                	j	20403a1e <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403a1c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403a1e:	853e                	mv	a0,a5
20403a20:	50b2                	lw	ra,44(sp)
20403a22:	5422                	lw	s0,40(sp)
20403a24:	6145                	addi	sp,sp,48
20403a26:	8082                	ret

20403a28 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403a28:	1101                	addi	sp,sp,-32
20403a2a:	ce22                	sw	s0,28(sp)
20403a2c:	1000                	addi	s0,sp,32
20403a2e:	fea42623          	sw	a0,-20(s0)
20403a32:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403a36:	fe842783          	lw	a5,-24(s0)
20403a3a:	0007d783          	lhu	a5,0(a5)
20403a3e:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403a42:	478d                	li	a5,3
20403a44:	00f71463          	bne	a4,a5,20403a4c <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403a48:	4791                	li	a5,4
20403a4a:	a011                	j	20403a4e <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403a4c:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403a4e:	853e                	mv	a0,a5
20403a50:	4472                	lw	s0,28(sp)
20403a52:	6105                	addi	sp,sp,32
20403a54:	8082                	ret

20403a56 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403a56:	7179                	addi	sp,sp,-48
20403a58:	d622                	sw	s0,44(sp)
20403a5a:	1800                	addi	s0,sp,48
20403a5c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403a60:	341027f3          	csrr	a5,mepc
20403a64:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403a68:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403a6c:	853e                	mv	a0,a5
20403a6e:	5432                	lw	s0,44(sp)
20403a70:	6145                	addi	sp,sp,48
20403a72:	8082                	ret

20403a74 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403a74:	1101                	addi	sp,sp,-32
20403a76:	ce22                	sw	s0,28(sp)
20403a78:	1000                	addi	s0,sp,32
20403a7a:	fea42623          	sw	a0,-20(s0)
20403a7e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403a82:	fe842783          	lw	a5,-24(s0)
20403a86:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403a8a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403a8c:	853e                	mv	a0,a5
20403a8e:	4472                	lw	s0,28(sp)
20403a90:	6105                	addi	sp,sp,32
20403a92:	8082                	ret

20403a94 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403a94:	1101                	addi	sp,sp,-32
20403a96:	ce22                	sw	s0,28(sp)
20403a98:	1000                	addi	s0,sp,32
20403a9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403a9e:	fec42703          	lw	a4,-20(s0)
20403aa2:	800007b7          	lui	a5,0x80000
20403aa6:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff014>
20403aaa:	00f71563          	bne	a4,a5,20403ab4 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403aae:	0c0007b7          	lui	a5,0xc000
20403ab2:	a011                	j	20403ab6 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403ab4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:245
	}
}
20403ab6:	853e                	mv	a0,a5
20403ab8:	4472                	lw	s0,28(sp)
20403aba:	6105                	addi	sp,sp,32
20403abc:	8082                	ret

20403abe <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403abe:	1101                	addi	sp,sp,-32
20403ac0:	ce22                	sw	s0,28(sp)
20403ac2:	1000                	addi	s0,sp,32
20403ac4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403ac8:	fec42703          	lw	a4,-20(s0)
20403acc:	800007b7          	lui	a5,0x80000
20403ad0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff014>
20403ad4:	00f71463          	bne	a4,a5,20403adc <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403ad8:	47ed                	li	a5,27
20403ada:	a011                	j	20403ade <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403adc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:265
	}
}
20403ade:	853e                	mv	a0,a5
20403ae0:	4472                	lw	s0,28(sp)
20403ae2:	6105                	addi	sp,sp,32
20403ae4:	8082                	ret

20403ae6 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403ae6:	1101                	addi	sp,sp,-32
20403ae8:	ce22                	sw	s0,28(sp)
20403aea:	1000                	addi	s0,sp,32
20403aec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403af0:	fec42703          	lw	a4,-20(s0)
20403af4:	800007b7          	lui	a5,0x80000
20403af8:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff014>
20403afc:	00f71463          	bne	a4,a5,20403b04 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403b00:	479d                	li	a5,7
20403b02:	a011                	j	20403b06 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403b04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:275
	}
}
20403b06:	853e                	mv	a0,a5
20403b08:	4472                	lw	s0,28(sp)
20403b0a:	6105                	addi	sp,sp,32
20403b0c:	8082                	ret

20403b0e <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403b0e:	1101                	addi	sp,sp,-32
20403b10:	ce22                	sw	s0,28(sp)
20403b12:	1000                	addi	s0,sp,32
20403b14:	fea42623          	sw	a0,-20(s0)
20403b18:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403b1c:	fe842783          	lw	a5,-24(s0)
20403b20:	e791                	bnez	a5,20403b2c <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403b22:	800007b7          	lui	a5,0x80000
20403b26:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffec5c>
20403b2a:	a011                	j	20403b2e <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403b2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:285
	}
}
20403b2e:	853e                	mv	a0,a5
20403b30:	4472                	lw	s0,28(sp)
20403b32:	6105                	addi	sp,sp,32
20403b34:	8082                	ret

20403b36 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403b36:	1101                	addi	sp,sp,-32
20403b38:	ce22                	sw	s0,28(sp)
20403b3a:	1000                	addi	s0,sp,32
20403b3c:	fea42623          	sw	a0,-20(s0)
20403b40:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403b44:	fe842783          	lw	a5,-24(s0)
20403b48:	e399                	bnez	a5,20403b4e <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:290
		return 11;
20403b4a:	47ad                	li	a5,11
20403b4c:	a011                	j	20403b50 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403b4e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:295
	}
}
20403b50:	853e                	mv	a0,a5
20403b52:	4472                	lw	s0,28(sp)
20403b54:	6105                	addi	sp,sp,32
20403b56:	8082                	ret

20403b58 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403b58:	7179                	addi	sp,sp,-48
20403b5a:	d606                	sw	ra,44(sp)
20403b5c:	d422                	sw	s0,40(sp)
20403b5e:	1800                	addi	s0,sp,48
20403b60:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403b64:	fdc42503          	lw	a0,-36(s0)
20403b68:	3735                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403b6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403b6e:	fec42703          	lw	a4,-20(s0)
20403b72:	002007b7          	lui	a5,0x200
20403b76:	0791                	addi	a5,a5,4
20403b78:	97ba                	add	a5,a5,a4
20403b7a:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403b7c:	853e                	mv	a0,a5
20403b7e:	50b2                	lw	ra,44(sp)
20403b80:	5422                	lw	s0,40(sp)
20403b82:	6145                	addi	sp,sp,48
20403b84:	8082                	ret

20403b86 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403b86:	7179                	addi	sp,sp,-48
20403b88:	d606                	sw	ra,44(sp)
20403b8a:	d422                	sw	s0,40(sp)
20403b8c:	1800                	addi	s0,sp,48
20403b8e:	fca42e23          	sw	a0,-36(s0)
20403b92:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403b96:	fdc42503          	lw	a0,-36(s0)
20403b9a:	3ded                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403b9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ba0:	fec42703          	lw	a4,-20(s0)
20403ba4:	002007b7          	lui	a5,0x200
20403ba8:	0791                	addi	a5,a5,4
20403baa:	97ba                	add	a5,a5,a4
20403bac:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403bae:	fd842783          	lw	a5,-40(s0)
20403bb2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403bb4:	0001                	nop
20403bb6:	50b2                	lw	ra,44(sp)
20403bb8:	5422                	lw	s0,40(sp)
20403bba:	6145                	addi	sp,sp,48
20403bbc:	8082                	ret

20403bbe <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403bbe:	7179                	addi	sp,sp,-48
20403bc0:	d606                	sw	ra,44(sp)
20403bc2:	d422                	sw	s0,40(sp)
20403bc4:	1800                	addi	s0,sp,48
20403bc6:	fca42e23          	sw	a0,-36(s0)
20403bca:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403bce:	fdc42503          	lw	a0,-36(s0)
20403bd2:	35c9                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403bd4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403bd8:	fec42703          	lw	a4,-20(s0)
20403bdc:	002007b7          	lui	a5,0x200
20403be0:	97ba                	add	a5,a5,a4
20403be2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403be4:	fd842783          	lw	a5,-40(s0)
20403be8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403bea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403bec:	853e                	mv	a0,a5
20403bee:	50b2                	lw	ra,44(sp)
20403bf0:	5422                	lw	s0,40(sp)
20403bf2:	6145                	addi	sp,sp,48
20403bf4:	8082                	ret

20403bf6 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403bf6:	7179                	addi	sp,sp,-48
20403bf8:	d606                	sw	ra,44(sp)
20403bfa:	d422                	sw	s0,40(sp)
20403bfc:	1800                	addi	s0,sp,48
20403bfe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403c02:	fdc42503          	lw	a0,-36(s0)
20403c06:	3579                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403c08:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c0c:	fec42703          	lw	a4,-20(s0)
20403c10:	002007b7          	lui	a5,0x200
20403c14:	97ba                	add	a5,a5,a4
20403c16:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403c18:	853e                	mv	a0,a5
20403c1a:	50b2                	lw	ra,44(sp)
20403c1c:	5422                	lw	s0,40(sp)
20403c1e:	6145                	addi	sp,sp,48
20403c20:	8082                	ret

20403c22 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403c22:	7179                	addi	sp,sp,-48
20403c24:	d606                	sw	ra,44(sp)
20403c26:	d422                	sw	s0,40(sp)
20403c28:	1800                	addi	s0,sp,48
20403c2a:	fca42e23          	sw	a0,-36(s0)
20403c2e:	fcb42c23          	sw	a1,-40(s0)
20403c32:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403c36:	fdc42503          	lw	a0,-36(s0)
20403c3a:	3da9                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403c3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403c40:	fdc42503          	lw	a0,-36(s0)
20403c44:	354d                	jal	20403ae6 <__metal_driver_sifive_plic0_max_priority>
20403c46:	87aa                	mv	a5,a0
20403c48:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403c4c:	fe842783          	lw	a5,-24(s0)
20403c50:	c785                	beqz	a5,20403c78 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403c52:	fd442703          	lw	a4,-44(s0)
20403c56:	fe842783          	lw	a5,-24(s0)
20403c5a:	00f77f63          	bgeu	a4,a5,20403c78 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c5e:	fd842783          	lw	a5,-40(s0)
20403c62:	078a                	slli	a5,a5,0x2
20403c64:	873e                	mv	a4,a5
20403c66:	fec42783          	lw	a5,-20(s0)
20403c6a:	97ba                	add	a5,a5,a4
20403c6c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403c6e:	fd442783          	lw	a5,-44(s0)
20403c72:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403c74:	4781                	li	a5,0
20403c76:	a011                	j	20403c7a <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403c78:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403c7a:	853e                	mv	a0,a5
20403c7c:	50b2                	lw	ra,44(sp)
20403c7e:	5422                	lw	s0,40(sp)
20403c80:	6145                	addi	sp,sp,48
20403c82:	8082                	ret

20403c84 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403c84:	7179                	addi	sp,sp,-48
20403c86:	d606                	sw	ra,44(sp)
20403c88:	d422                	sw	s0,40(sp)
20403c8a:	1800                	addi	s0,sp,48
20403c8c:	fca42e23          	sw	a0,-36(s0)
20403c90:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403c94:	fdc42503          	lw	a0,-36(s0)
20403c98:	3bf5                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403c9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c9e:	fd842783          	lw	a5,-40(s0)
20403ca2:	078a                	slli	a5,a5,0x2
20403ca4:	873e                	mv	a4,a5
20403ca6:	fec42783          	lw	a5,-20(s0)
20403caa:	97ba                	add	a5,a5,a4
20403cac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403cae:	853e                	mv	a0,a5
20403cb0:	50b2                	lw	ra,44(sp)
20403cb2:	5422                	lw	s0,40(sp)
20403cb4:	6145                	addi	sp,sp,48
20403cb6:	8082                	ret

20403cb8 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403cb8:	7179                	addi	sp,sp,-48
20403cba:	d606                	sw	ra,44(sp)
20403cbc:	d422                	sw	s0,40(sp)
20403cbe:	1800                	addi	s0,sp,48
20403cc0:	fca42e23          	sw	a0,-36(s0)
20403cc4:	fcb42c23          	sw	a1,-40(s0)
20403cc8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403ccc:	fdc42503          	lw	a0,-36(s0)
20403cd0:	33d1                	jal	20403a94 <__metal_driver_sifive_plic0_control_base>
20403cd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403cd6:	fd842783          	lw	a5,-40(s0)
20403cda:	8795                	srai	a5,a5,0x5
20403cdc:	078a                	slli	a5,a5,0x2
20403cde:	873e                	mv	a4,a5
20403ce0:	fec42783          	lw	a5,-20(s0)
20403ce4:	973e                	add	a4,a4,a5
20403ce6:	6789                	lui	a5,0x2
20403ce8:	97ba                	add	a5,a5,a4
20403cea:	439c                	lw	a5,0(a5)
20403cec:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403cf0:	fd442783          	lw	a5,-44(s0)
20403cf4:	cf81                	beqz	a5,20403d0c <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403cf6:	fd842783          	lw	a5,-40(s0)
20403cfa:	8bfd                	andi	a5,a5,31
20403cfc:	4705                	li	a4,1
20403cfe:	00f717b3          	sll	a5,a4,a5
20403d02:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403d04:	fe842783          	lw	a5,-24(s0)
20403d08:	8fd9                	or	a5,a5,a4
20403d0a:	a829                	j	20403d24 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403d0c:	fd842783          	lw	a5,-40(s0)
20403d10:	8bfd                	andi	a5,a5,31
20403d12:	4705                	li	a4,1
20403d14:	00f717b3          	sll	a5,a4,a5
20403d18:	fff7c793          	not	a5,a5
20403d1c:	873e                	mv	a4,a5
20403d1e:	fe842783          	lw	a5,-24(s0)
20403d22:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d24:	fd842703          	lw	a4,-40(s0)
20403d28:	8715                	srai	a4,a4,0x5
20403d2a:	070a                	slli	a4,a4,0x2
20403d2c:	86ba                	mv	a3,a4
20403d2e:	fec42703          	lw	a4,-20(s0)
20403d32:	96ba                	add	a3,a3,a4
20403d34:	6709                	lui	a4,0x2
20403d36:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403d38:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403d3a:	0001                	nop
20403d3c:	50b2                	lw	ra,44(sp)
20403d3e:	5422                	lw	s0,40(sp)
20403d40:	6145                	addi	sp,sp,48
20403d42:	8082                	ret

20403d44 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403d44:	1101                	addi	sp,sp,-32
20403d46:	ce06                	sw	ra,28(sp)
20403d48:	cc22                	sw	s0,24(sp)
20403d4a:	1000                	addi	s0,sp,32
20403d4c:	fea42623          	sw	a0,-20(s0)
20403d50:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403d54:	12c00513          	li	a0,300
20403d58:	1c4010ef          	jal	ra,20404f1c <metal_shutdown>

20403d5c <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403d5c:	7179                	addi	sp,sp,-48
20403d5e:	d606                	sw	ra,44(sp)
20403d60:	d422                	sw	s0,40(sp)
20403d62:	1800                	addi	s0,sp,48
20403d64:	fca42e23          	sw	a0,-36(s0)
20403d68:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403d6c:	fd842783          	lw	a5,-40(s0)
20403d70:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403d74:	fec42503          	lw	a0,-20(s0)
20403d78:	33c5                	jal	20403b58 <__metal_plic0_claim_interrupt>
20403d7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403d7e:	fec42503          	lw	a0,-20(s0)
20403d82:	3b35                	jal	20403abe <__metal_driver_sifive_plic0_num_interrupts>
20403d84:	87aa                	mv	a5,a0
20403d86:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403d8a:	fe842703          	lw	a4,-24(s0)
20403d8e:	fe442783          	lw	a5,-28(s0)
20403d92:	04f77263          	bgeu	a4,a5,20403dd6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403d96:	fec42703          	lw	a4,-20(s0)
20403d9a:	fe842783          	lw	a5,-24(s0)
20403d9e:	078a                	slli	a5,a5,0x2
20403da0:	97ba                	add	a5,a5,a4
20403da2:	479c                	lw	a5,8(a5)
20403da4:	cb8d                	beqz	a5,20403dd6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403da6:	fec42703          	lw	a4,-20(s0)
20403daa:	fe842783          	lw	a5,-24(s0)
20403dae:	078a                	slli	a5,a5,0x2
20403db0:	97ba                	add	a5,a5,a4
20403db2:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403db6:	fe842603          	lw	a2,-24(s0)
20403dba:	fec42683          	lw	a3,-20(s0)
20403dbe:	fe842703          	lw	a4,-24(s0)
20403dc2:	87ba                	mv	a5,a4
20403dc4:	0786                	slli	a5,a5,0x1
20403dc6:	97ba                	add	a5,a5,a4
20403dc8:	078e                	slli	a5,a5,0x3
20403dca:	97b6                	add	a5,a5,a3
20403dcc:	0887a783          	lw	a5,136(a5)
20403dd0:	85be                	mv	a1,a5
20403dd2:	8532                	mv	a0,a2
20403dd4:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403dd6:	fe842583          	lw	a1,-24(s0)
20403dda:	fec42503          	lw	a0,-20(s0)
20403dde:	3365                	jal	20403b86 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403de0:	0001                	nop
20403de2:	50b2                	lw	ra,44(sp)
20403de4:	5422                	lw	s0,40(sp)
20403de6:	6145                	addi	sp,sp,48
20403de8:	8082                	ret

20403dea <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403dea:	7139                	addi	sp,sp,-64
20403dec:	de06                	sw	ra,60(sp)
20403dee:	dc22                	sw	s0,56(sp)
20403df0:	0080                	addi	s0,sp,64
20403df2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403df6:	fcc42783          	lw	a5,-52(s0)
20403dfa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403dfe:	fe442783          	lw	a5,-28(s0)
20403e02:	43dc                	lw	a5,4(a5)
20403e04:	12079063          	bnez	a5,20403f24 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403e08:	fe042623          	sw	zero,-20(s0)
20403e0c:	a221                	j	20403f14 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20403e0e:	fcc42503          	lw	a0,-52(s0)
20403e12:	cadff0ef          	jal	ra,20403abe <__metal_driver_sifive_plic0_num_interrupts>
20403e16:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403e1a:	fec42583          	lw	a1,-20(s0)
20403e1e:	fcc42503          	lw	a0,-52(s0)
20403e22:	cedff0ef          	jal	ra,20403b0e <__metal_driver_sifive_plic0_interrupt_parents>
20403e26:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403e2a:	fec42583          	lw	a1,-20(s0)
20403e2e:	fcc42503          	lw	a0,-52(s0)
20403e32:	d05ff0ef          	jal	ra,20403b36 <__metal_driver_sifive_plic0_interrupt_lines>
20403e36:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403e3a:	fdc42783          	lw	a5,-36(s0)
20403e3e:	439c                	lw	a5,0(a5)
20403e40:	439c                	lw	a5,0(a5)
20403e42:	fdc42503          	lw	a0,-36(s0)
20403e46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403e48:	fe042423          	sw	zero,-24(s0)
20403e4c:	a085                	j	20403eac <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20403e4e:	4601                	li	a2,0
20403e50:	fe842583          	lw	a1,-24(s0)
20403e54:	fe442503          	lw	a0,-28(s0)
20403e58:	3585                	jal	20403cb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20403e5a:	4601                	li	a2,0
20403e5c:	fe842583          	lw	a1,-24(s0)
20403e60:	fcc42503          	lw	a0,-52(s0)
20403e64:	3b7d                	jal	20403c22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20403e66:	fe442703          	lw	a4,-28(s0)
20403e6a:	fe842783          	lw	a5,-24(s0)
20403e6e:	078a                	slli	a5,a5,0x2
20403e70:	97ba                	add	a5,a5,a4
20403e72:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20403e76:	fe442683          	lw	a3,-28(s0)
20403e7a:	fe842703          	lw	a4,-24(s0)
20403e7e:	87ba                	mv	a5,a4
20403e80:	0786                	slli	a5,a5,0x1
20403e82:	97ba                	add	a5,a5,a4
20403e84:	078e                	slli	a5,a5,0x3
20403e86:	97b6                	add	a5,a5,a3
20403e88:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20403e8c:	fe442683          	lw	a3,-28(s0)
20403e90:	fe842703          	lw	a4,-24(s0)
20403e94:	87ba                	mv	a5,a4
20403e96:	0786                	slli	a5,a5,0x1
20403e98:	97ba                	add	a5,a5,a4
20403e9a:	078e                	slli	a5,a5,0x3
20403e9c:	97b6                	add	a5,a5,a3
20403e9e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20403ea2:	fe842783          	lw	a5,-24(s0)
20403ea6:	0785                	addi	a5,a5,1
20403ea8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20403eac:	fe842703          	lw	a4,-24(s0)
20403eb0:	fe042783          	lw	a5,-32(s0)
20403eb4:	f8f74de3          	blt	a4,a5,20403e4e <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20403eb8:	4581                	li	a1,0
20403eba:	fcc42503          	lw	a0,-52(s0)
20403ebe:	d01ff0ef          	jal	ra,20403bbe <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20403ec2:	fdc42783          	lw	a5,-36(s0)
20403ec6:	439c                	lw	a5,0(a5)
20403ec8:	4fdc                	lw	a5,28(a5)
20403eca:	fe442683          	lw	a3,-28(s0)
20403ece:	4601                	li	a2,0
20403ed0:	fd842583          	lw	a1,-40(s0)
20403ed4:	fdc42503          	lw	a0,-36(s0)
20403ed8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20403eda:	fdc42783          	lw	a5,-36(s0)
20403ede:	439c                	lw	a5,0(a5)
20403ee0:	4fd8                	lw	a4,28(a5)
20403ee2:	fe442683          	lw	a3,-28(s0)
20403ee6:	204047b7          	lui	a5,0x20404
20403eea:	d5c78613          	addi	a2,a5,-676 # 20403d5c <__metal_plic0_handler>
20403eee:	fd842583          	lw	a1,-40(s0)
20403ef2:	fdc42503          	lw	a0,-36(s0)
20403ef6:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20403ef8:	fdc42783          	lw	a5,-36(s0)
20403efc:	439c                	lw	a5,0(a5)
20403efe:	53dc                	lw	a5,36(a5)
20403f00:	fd842583          	lw	a1,-40(s0)
20403f04:	fdc42503          	lw	a0,-36(s0)
20403f08:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403f0a:	fec42783          	lw	a5,-20(s0)
20403f0e:	0785                	addi	a5,a5,1
20403f10:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20403f14:	fec42783          	lw	a5,-20(s0)
20403f18:	eef05be3          	blez	a5,20403e0e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20403f1c:	fe442783          	lw	a5,-28(s0)
20403f20:	4705                	li	a4,1
20403f22:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20403f24:	0001                	nop
20403f26:	50f2                	lw	ra,60(sp)
20403f28:	5462                	lw	s0,56(sp)
20403f2a:	6121                	addi	sp,sp,64
20403f2c:	8082                	ret

20403f2e <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20403f2e:	7179                	addi	sp,sp,-48
20403f30:	d606                	sw	ra,44(sp)
20403f32:	d422                	sw	s0,40(sp)
20403f34:	1800                	addi	s0,sp,48
20403f36:	fca42e23          	sw	a0,-36(s0)
20403f3a:	fcb42c23          	sw	a1,-40(s0)
20403f3e:	fcc42a23          	sw	a2,-44(s0)
20403f42:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403f46:	fdc42783          	lw	a5,-36(s0)
20403f4a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20403f4e:	fdc42503          	lw	a0,-36(s0)
20403f52:	b6dff0ef          	jal	ra,20403abe <__metal_driver_sifive_plic0_num_interrupts>
20403f56:	872a                	mv	a4,a0
20403f58:	fd842783          	lw	a5,-40(s0)
20403f5c:	00e7c463          	blt	a5,a4,20403f64 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20403f60:	57fd                	li	a5,-1
20403f62:	a051                	j	20403fe6 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20403f64:	fd442783          	lw	a5,-44(s0)
20403f68:	cf9d                	beqz	a5,20403fa6 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20403f6a:	4609                	li	a2,2
20403f6c:	fd842583          	lw	a1,-40(s0)
20403f70:	fdc42503          	lw	a0,-36(s0)
20403f74:	cafff0ef          	jal	ra,20403c22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20403f78:	fec42703          	lw	a4,-20(s0)
20403f7c:	fd842783          	lw	a5,-40(s0)
20403f80:	078a                	slli	a5,a5,0x2
20403f82:	97ba                	add	a5,a5,a4
20403f84:	fd442703          	lw	a4,-44(s0)
20403f88:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20403f8a:	fec42683          	lw	a3,-20(s0)
20403f8e:	fd842703          	lw	a4,-40(s0)
20403f92:	87ba                	mv	a5,a4
20403f94:	0786                	slli	a5,a5,0x1
20403f96:	97ba                	add	a5,a5,a4
20403f98:	078e                	slli	a5,a5,0x3
20403f9a:	97b6                	add	a5,a5,a3
20403f9c:	fd042703          	lw	a4,-48(s0)
20403fa0:	08e7a423          	sw	a4,136(a5)
20403fa4:	a081                	j	20403fe4 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20403fa6:	4605                	li	a2,1
20403fa8:	fd842583          	lw	a1,-40(s0)
20403fac:	fdc42503          	lw	a0,-36(s0)
20403fb0:	c73ff0ef          	jal	ra,20403c22 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20403fb4:	fec42703          	lw	a4,-20(s0)
20403fb8:	fd842783          	lw	a5,-40(s0)
20403fbc:	078a                	slli	a5,a5,0x2
20403fbe:	97ba                	add	a5,a5,a4
20403fc0:	20404737          	lui	a4,0x20404
20403fc4:	d4470713          	addi	a4,a4,-700 # 20403d44 <__metal_plic0_default_handler>
20403fc8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20403fca:	fec42683          	lw	a3,-20(s0)
20403fce:	fd842703          	lw	a4,-40(s0)
20403fd2:	87ba                	mv	a5,a4
20403fd4:	0786                	slli	a5,a5,0x1
20403fd6:	97ba                	add	a5,a5,a4
20403fd8:	078e                	slli	a5,a5,0x3
20403fda:	97b6                	add	a5,a5,a3
20403fdc:	fd042703          	lw	a4,-48(s0)
20403fe0:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20403fe4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20403fe6:	853e                	mv	a0,a5
20403fe8:	50b2                	lw	ra,44(sp)
20403fea:	5422                	lw	s0,40(sp)
20403fec:	6145                	addi	sp,sp,48
20403fee:	8082                	ret

20403ff0 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20403ff0:	7179                	addi	sp,sp,-48
20403ff2:	d606                	sw	ra,44(sp)
20403ff4:	d422                	sw	s0,40(sp)
20403ff6:	1800                	addi	s0,sp,48
20403ff8:	fca42e23          	sw	a0,-36(s0)
20403ffc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404000:	fdc42783          	lw	a5,-36(s0)
20404004:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404008:	fdc42503          	lw	a0,-36(s0)
2040400c:	ab3ff0ef          	jal	ra,20403abe <__metal_driver_sifive_plic0_num_interrupts>
20404010:	872a                	mv	a4,a0
20404012:	fd842783          	lw	a5,-40(s0)
20404016:	00e7c463          	blt	a5,a4,2040401e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040401a:	57fd                	li	a5,-1
2040401c:	a809                	j	2040402e <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040401e:	4605                	li	a2,1
20404020:	fd842583          	lw	a1,-40(s0)
20404024:	fec42503          	lw	a0,-20(s0)
20404028:	c91ff0ef          	jal	ra,20403cb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040402c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
2040402e:	853e                	mv	a0,a5
20404030:	50b2                	lw	ra,44(sp)
20404032:	5422                	lw	s0,40(sp)
20404034:	6145                	addi	sp,sp,48
20404036:	8082                	ret

20404038 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404038:	7179                	addi	sp,sp,-48
2040403a:	d606                	sw	ra,44(sp)
2040403c:	d422                	sw	s0,40(sp)
2040403e:	1800                	addi	s0,sp,48
20404040:	fca42e23          	sw	a0,-36(s0)
20404044:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404048:	fdc42783          	lw	a5,-36(s0)
2040404c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404050:	fdc42503          	lw	a0,-36(s0)
20404054:	a6bff0ef          	jal	ra,20403abe <__metal_driver_sifive_plic0_num_interrupts>
20404058:	872a                	mv	a4,a0
2040405a:	fd842783          	lw	a5,-40(s0)
2040405e:	00e7c463          	blt	a5,a4,20404066 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404062:	57fd                	li	a5,-1
20404064:	a809                	j	20404076 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404066:	4601                	li	a2,0
20404068:	fd842583          	lw	a1,-40(s0)
2040406c:	fec42503          	lw	a0,-20(s0)
20404070:	c49ff0ef          	jal	ra,20403cb8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404074:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404076:	853e                	mv	a0,a5
20404078:	50b2                	lw	ra,44(sp)
2040407a:	5422                	lw	s0,40(sp)
2040407c:	6145                	addi	sp,sp,48
2040407e:	8082                	ret

20404080 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404080:	1101                	addi	sp,sp,-32
20404082:	ce22                	sw	s0,28(sp)
20404084:	1000                	addi	s0,sp,32
20404086:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040408a:	fec42703          	lw	a4,-20(s0)
2040408e:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404092:	00f71563          	bne	a4,a5,2040409c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404096:	100127b7          	lui	a5,0x10012
2040409a:	a011                	j	2040409e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040409c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:395
	}
}
2040409e:	853e                	mv	a0,a5
204040a0:	4472                	lw	s0,28(sp)
204040a2:	6105                	addi	sp,sp,32
204040a4:	8082                	ret

204040a6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204040a6:	1101                	addi	sp,sp,-32
204040a8:	ce22                	sw	s0,28(sp)
204040aa:	1000                	addi	s0,sp,32
204040ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204040b0:	fec42703          	lw	a4,-20(s0)
204040b4:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
204040b8:	00f71763          	bne	a4,a5,204040c6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204040bc:	800007b7          	lui	a5,0x80000
204040c0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff014>
204040c4:	a011                	j	204040c8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204040c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:425
	}
}
204040c8:	853e                	mv	a0,a5
204040ca:	4472                	lw	s0,28(sp)
204040cc:	6105                	addi	sp,sp,32
204040ce:	8082                	ret

204040d0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204040d0:	1101                	addi	sp,sp,-32
204040d2:	ce22                	sw	s0,28(sp)
204040d4:	1000                	addi	s0,sp,32
204040d6:	fea42623          	sw	a0,-20(s0)
204040da:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204040de:	fec42703          	lw	a4,-20(s0)
204040e2:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
204040e6:	00f71763          	bne	a4,a5,204040f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429 (discriminator 1)
204040ea:	fe842783          	lw	a5,-24(s0)
204040ee:	e399                	bnez	a5,204040f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:430
		return 7;
204040f0:	479d                	li	a5,7
204040f2:	a269                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204040f4:	fec42703          	lw	a4,-20(s0)
204040f8:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
204040fc:	00f71963          	bne	a4,a5,2040410e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432 (discriminator 1)
20404100:	fe842703          	lw	a4,-24(s0)
20404104:	4785                	li	a5,1
20404106:	00f71463          	bne	a4,a5,2040410e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:433
		return 8;
2040410a:	47a1                	li	a5,8
2040410c:	aa85                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040410e:	fec42703          	lw	a4,-20(s0)
20404112:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404116:	00f71963          	bne	a4,a5,20404128 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435 (discriminator 1)
2040411a:	fe842703          	lw	a4,-24(s0)
2040411e:	4789                	li	a5,2
20404120:	00f71463          	bne	a4,a5,20404128 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:436
		return 9;
20404124:	47a5                	li	a5,9
20404126:	aa99                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404128:	fec42703          	lw	a4,-20(s0)
2040412c:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404130:	00f71963          	bne	a4,a5,20404142 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438 (discriminator 1)
20404134:	fe842703          	lw	a4,-24(s0)
20404138:	478d                	li	a5,3
2040413a:	00f71463          	bne	a4,a5,20404142 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:439
		return 10;
2040413e:	47a9                	li	a5,10
20404140:	aa35                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404142:	fec42703          	lw	a4,-20(s0)
20404146:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
2040414a:	00f71963          	bne	a4,a5,2040415c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441 (discriminator 1)
2040414e:	fe842703          	lw	a4,-24(s0)
20404152:	4791                	li	a5,4
20404154:	00f71463          	bne	a4,a5,2040415c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:442
		return 11;
20404158:	47ad                	li	a5,11
2040415a:	a20d                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040415c:	fec42703          	lw	a4,-20(s0)
20404160:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404164:	00f71963          	bne	a4,a5,20404176 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444 (discriminator 1)
20404168:	fe842703          	lw	a4,-24(s0)
2040416c:	4795                	li	a5,5
2040416e:	00f71463          	bne	a4,a5,20404176 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:445
		return 12;
20404172:	47b1                	li	a5,12
20404174:	a221                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404176:	fec42703          	lw	a4,-20(s0)
2040417a:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
2040417e:	00f71963          	bne	a4,a5,20404190 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447 (discriminator 1)
20404182:	fe842703          	lw	a4,-24(s0)
20404186:	4799                	li	a5,6
20404188:	00f71463          	bne	a4,a5,20404190 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:448
		return 13;
2040418c:	47b5                	li	a5,13
2040418e:	a0fd                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404190:	fec42703          	lw	a4,-20(s0)
20404194:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404198:	00f71963          	bne	a4,a5,204041aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450 (discriminator 1)
2040419c:	fe842703          	lw	a4,-24(s0)
204041a0:	479d                	li	a5,7
204041a2:	00f71463          	bne	a4,a5,204041aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:451
		return 14;
204041a6:	47b9                	li	a5,14
204041a8:	a8d1                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204041aa:	fec42703          	lw	a4,-20(s0)
204041ae:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
204041b2:	00f71963          	bne	a4,a5,204041c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453 (discriminator 1)
204041b6:	fe842703          	lw	a4,-24(s0)
204041ba:	47a1                	li	a5,8
204041bc:	00f71463          	bne	a4,a5,204041c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return 15;
204041c0:	47bd                	li	a5,15
204041c2:	a86d                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204041c4:	fec42703          	lw	a4,-20(s0)
204041c8:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
204041cc:	00f71963          	bne	a4,a5,204041de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456 (discriminator 1)
204041d0:	fe842703          	lw	a4,-24(s0)
204041d4:	47a5                	li	a5,9
204041d6:	00f71463          	bne	a4,a5,204041de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
		return 16;
204041da:	47c1                	li	a5,16
204041dc:	a045                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204041de:	fec42703          	lw	a4,-20(s0)
204041e2:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
204041e6:	00f71963          	bne	a4,a5,204041f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459 (discriminator 1)
204041ea:	fe842703          	lw	a4,-24(s0)
204041ee:	47a9                	li	a5,10
204041f0:	00f71463          	bne	a4,a5,204041f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:460
		return 17;
204041f4:	47c5                	li	a5,17
204041f6:	a059                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204041f8:	fec42703          	lw	a4,-20(s0)
204041fc:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404200:	00f71963          	bne	a4,a5,20404212 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462 (discriminator 1)
20404204:	fe842703          	lw	a4,-24(s0)
20404208:	47ad                	li	a5,11
2040420a:	00f71463          	bne	a4,a5,20404212 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
		return 18;
2040420e:	47c9                	li	a5,18
20404210:	a0b5                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404212:	fec42703          	lw	a4,-20(s0)
20404216:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
2040421a:	00f71963          	bne	a4,a5,2040422c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465 (discriminator 1)
2040421e:	fe842703          	lw	a4,-24(s0)
20404222:	47b1                	li	a5,12
20404224:	00f71463          	bne	a4,a5,2040422c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
		return 19;
20404228:	47cd                	li	a5,19
2040422a:	a889                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040422c:	fec42703          	lw	a4,-20(s0)
20404230:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404234:	00f71963          	bne	a4,a5,20404246 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468 (discriminator 1)
20404238:	fe842703          	lw	a4,-24(s0)
2040423c:	47b5                	li	a5,13
2040423e:	00f71463          	bne	a4,a5,20404246 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
		return 20;
20404242:	47d1                	li	a5,20
20404244:	a825                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404246:	fec42703          	lw	a4,-20(s0)
2040424a:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
2040424e:	00f71963          	bne	a4,a5,20404260 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471 (discriminator 1)
20404252:	fe842703          	lw	a4,-24(s0)
20404256:	47b9                	li	a5,14
20404258:	00f71463          	bne	a4,a5,20404260 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
		return 21;
2040425c:	47d5                	li	a5,21
2040425e:	a839                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404260:	fec42703          	lw	a4,-20(s0)
20404264:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404268:	00f71963          	bne	a4,a5,2040427a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474 (discriminator 1)
2040426c:	fe842703          	lw	a4,-24(s0)
20404270:	47bd                	li	a5,15
20404272:	00f71463          	bne	a4,a5,2040427a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
		return 22;
20404276:	47d9                	li	a5,22
20404278:	a011                	j	2040427c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040427a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:480
	}
}
2040427c:	853e                	mv	a0,a5
2040427e:	4472                	lw	s0,28(sp)
20404280:	6105                	addi	sp,sp,32
20404282:	8082                	ret

20404284 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404284:	7179                	addi	sp,sp,-48
20404286:	d606                	sw	ra,44(sp)
20404288:	d422                	sw	s0,40(sp)
2040428a:	1800                	addi	s0,sp,48
2040428c:	fca42e23          	sw	a0,-36(s0)
20404290:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404294:	fdc42503          	lw	a0,-36(s0)
20404298:	33e5                	jal	20404080 <__metal_driver_sifive_gpio0_base>
2040429a:	87aa                	mv	a5,a0
2040429c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
204042a0:	fec42783          	lw	a5,-20(s0)
204042a4:	0791                	addi	a5,a5,4
204042a6:	4398                	lw	a4,0(a5)
204042a8:	fd842783          	lw	a5,-40(s0)
204042ac:	fec42683          	lw	a3,-20(s0)
204042b0:	0691                	addi	a3,a3,4
204042b2:	8fd9                	or	a5,a5,a4
204042b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204042b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204042b8:	853e                	mv	a0,a5
204042ba:	50b2                	lw	ra,44(sp)
204042bc:	5422                	lw	s0,40(sp)
204042be:	6145                	addi	sp,sp,48
204042c0:	8082                	ret

204042c2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204042c2:	7179                	addi	sp,sp,-48
204042c4:	d606                	sw	ra,44(sp)
204042c6:	d422                	sw	s0,40(sp)
204042c8:	1800                	addi	s0,sp,48
204042ca:	fca42e23          	sw	a0,-36(s0)
204042ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204042d2:	fdc42503          	lw	a0,-36(s0)
204042d6:	336d                	jal	20404080 <__metal_driver_sifive_gpio0_base>
204042d8:	87aa                	mv	a5,a0
204042da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204042de:	fec42783          	lw	a5,-20(s0)
204042e2:	0791                	addi	a5,a5,4
204042e4:	439c                	lw	a5,0(a5)
204042e6:	fd842703          	lw	a4,-40(s0)
204042ea:	fff74713          	not	a4,a4
204042ee:	86ba                	mv	a3,a4
204042f0:	fec42703          	lw	a4,-20(s0)
204042f4:	0711                	addi	a4,a4,4
204042f6:	8ff5                	and	a5,a5,a3
204042f8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204042fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204042fc:	853e                	mv	a0,a5
204042fe:	50b2                	lw	ra,44(sp)
20404300:	5422                	lw	s0,40(sp)
20404302:	6145                	addi	sp,sp,48
20404304:	8082                	ret

20404306 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404306:	7179                	addi	sp,sp,-48
20404308:	d606                	sw	ra,44(sp)
2040430a:	d422                	sw	s0,40(sp)
2040430c:	1800                	addi	s0,sp,48
2040430e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404312:	fdc42503          	lw	a0,-36(s0)
20404316:	d6bff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
2040431a:	87aa                	mv	a5,a0
2040431c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404320:	fec42783          	lw	a5,-20(s0)
20404324:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404326:	853e                	mv	a0,a5
20404328:	50b2                	lw	ra,44(sp)
2040432a:	5422                	lw	s0,40(sp)
2040432c:	6145                	addi	sp,sp,48
2040432e:	8082                	ret

20404330 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404330:	7179                	addi	sp,sp,-48
20404332:	d606                	sw	ra,44(sp)
20404334:	d422                	sw	s0,40(sp)
20404336:	1800                	addi	s0,sp,48
20404338:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040433c:	fdc42503          	lw	a0,-36(s0)
20404340:	d41ff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
20404344:	87aa                	mv	a5,a0
20404346:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
2040434a:	fec42783          	lw	a5,-20(s0)
2040434e:	07b1                	addi	a5,a5,12
20404350:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404352:	853e                	mv	a0,a5
20404354:	50b2                	lw	ra,44(sp)
20404356:	5422                	lw	s0,40(sp)
20404358:	6145                	addi	sp,sp,48
2040435a:	8082                	ret

2040435c <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2040435c:	7179                	addi	sp,sp,-48
2040435e:	d606                	sw	ra,44(sp)
20404360:	d422                	sw	s0,40(sp)
20404362:	1800                	addi	s0,sp,48
20404364:	fca42e23          	sw	a0,-36(s0)
20404368:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040436c:	fdc42503          	lw	a0,-36(s0)
20404370:	d11ff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
20404374:	87aa                	mv	a5,a0
20404376:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
2040437a:	fec42783          	lw	a5,-20(s0)
2040437e:	07a1                	addi	a5,a5,8
20404380:	439c                	lw	a5,0(a5)
20404382:	fd842703          	lw	a4,-40(s0)
20404386:	fff74713          	not	a4,a4
2040438a:	86ba                	mv	a3,a4
2040438c:	fec42703          	lw	a4,-20(s0)
20404390:	0721                	addi	a4,a4,8
20404392:	8ff5                	and	a5,a5,a3
20404394:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404396:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404398:	853e                	mv	a0,a5
2040439a:	50b2                	lw	ra,44(sp)
2040439c:	5422                	lw	s0,40(sp)
2040439e:	6145                	addi	sp,sp,48
204043a0:	8082                	ret

204043a2 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
204043a2:	7179                	addi	sp,sp,-48
204043a4:	d606                	sw	ra,44(sp)
204043a6:	d422                	sw	s0,40(sp)
204043a8:	1800                	addi	s0,sp,48
204043aa:	fca42e23          	sw	a0,-36(s0)
204043ae:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204043b2:	fdc42503          	lw	a0,-36(s0)
204043b6:	ccbff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
204043ba:	87aa                	mv	a5,a0
204043bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204043c0:	fec42783          	lw	a5,-20(s0)
204043c4:	07a1                	addi	a5,a5,8
204043c6:	4398                	lw	a4,0(a5)
204043c8:	fd842783          	lw	a5,-40(s0)
204043cc:	fec42683          	lw	a3,-20(s0)
204043d0:	06a1                	addi	a3,a3,8
204043d2:	8fd9                	or	a5,a5,a4
204043d4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204043d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204043d8:	853e                	mv	a0,a5
204043da:	50b2                	lw	ra,44(sp)
204043dc:	5422                	lw	s0,40(sp)
204043de:	6145                	addi	sp,sp,48
204043e0:	8082                	ret

204043e2 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204043e2:	7179                	addi	sp,sp,-48
204043e4:	d606                	sw	ra,44(sp)
204043e6:	d422                	sw	s0,40(sp)
204043e8:	1800                	addi	s0,sp,48
204043ea:	fca42e23          	sw	a0,-36(s0)
204043ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204043f2:	fdc42503          	lw	a0,-36(s0)
204043f6:	c8bff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
204043fa:	87aa                	mv	a5,a0
204043fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404400:	fec42783          	lw	a5,-20(s0)
20404404:	07b1                	addi	a5,a5,12
20404406:	4398                	lw	a4,0(a5)
20404408:	fd842783          	lw	a5,-40(s0)
2040440c:	fec42683          	lw	a3,-20(s0)
20404410:	06b1                	addi	a3,a3,12
20404412:	8fd9                	or	a5,a5,a4
20404414:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404416:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404418:	853e                	mv	a0,a5
2040441a:	50b2                	lw	ra,44(sp)
2040441c:	5422                	lw	s0,40(sp)
2040441e:	6145                	addi	sp,sp,48
20404420:	8082                	ret

20404422 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404422:	7179                	addi	sp,sp,-48
20404424:	d606                	sw	ra,44(sp)
20404426:	d422                	sw	s0,40(sp)
20404428:	1800                	addi	s0,sp,48
2040442a:	fca42e23          	sw	a0,-36(s0)
2040442e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404432:	fdc42503          	lw	a0,-36(s0)
20404436:	c4bff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
2040443a:	87aa                	mv	a5,a0
2040443c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404440:	fec42783          	lw	a5,-20(s0)
20404444:	07b1                	addi	a5,a5,12
20404446:	439c                	lw	a5,0(a5)
20404448:	fd842703          	lw	a4,-40(s0)
2040444c:	fff74713          	not	a4,a4
20404450:	86ba                	mv	a3,a4
20404452:	fec42703          	lw	a4,-20(s0)
20404456:	0731                	addi	a4,a4,12
20404458:	8ff5                	and	a5,a5,a3
2040445a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2040445c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2040445e:	853e                	mv	a0,a5
20404460:	50b2                	lw	ra,44(sp)
20404462:	5422                	lw	s0,40(sp)
20404464:	6145                	addi	sp,sp,48
20404466:	8082                	ret

20404468 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404468:	7179                	addi	sp,sp,-48
2040446a:	d606                	sw	ra,44(sp)
2040446c:	d422                	sw	s0,40(sp)
2040446e:	1800                	addi	s0,sp,48
20404470:	fca42e23          	sw	a0,-36(s0)
20404474:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404478:	fdc42503          	lw	a0,-36(s0)
2040447c:	c05ff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
20404480:	87aa                	mv	a5,a0
20404482:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404486:	fec42783          	lw	a5,-20(s0)
2040448a:	07b1                	addi	a5,a5,12
2040448c:	4398                	lw	a4,0(a5)
2040448e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404492:	fec42683          	lw	a3,-20(s0)
20404496:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404498:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040449a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040449c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040449e:	853e                	mv	a0,a5
204044a0:	50b2                	lw	ra,44(sp)
204044a2:	5422                	lw	s0,40(sp)
204044a4:	6145                	addi	sp,sp,48
204044a6:	8082                	ret

204044a8 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
204044a8:	7179                	addi	sp,sp,-48
204044aa:	d606                	sw	ra,44(sp)
204044ac:	d422                	sw	s0,40(sp)
204044ae:	1800                	addi	s0,sp,48
204044b0:	fca42e23          	sw	a0,-36(s0)
204044b4:	fcb42c23          	sw	a1,-40(s0)
204044b8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044bc:	fdc42503          	lw	a0,-36(s0)
204044c0:	bc1ff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
204044c4:	87aa                	mv	a5,a0
204044c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204044ca:	fec42783          	lw	a5,-20(s0)
204044ce:	03c78793          	addi	a5,a5,60
204044d2:	439c                	lw	a5,0(a5)
204044d4:	fd842703          	lw	a4,-40(s0)
204044d8:	fff74713          	not	a4,a4
204044dc:	86ba                	mv	a3,a4
204044de:	fec42703          	lw	a4,-20(s0)
204044e2:	03c70713          	addi	a4,a4,60
204044e6:	8ff5                	and	a5,a5,a3
204044e8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204044ea:	fec42783          	lw	a5,-20(s0)
204044ee:	03878793          	addi	a5,a5,56
204044f2:	4398                	lw	a4,0(a5)
204044f4:	fd442783          	lw	a5,-44(s0)
204044f8:	fec42683          	lw	a3,-20(s0)
204044fc:	03868693          	addi	a3,a3,56
20404500:	8fd9                	or	a5,a5,a4
20404502:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404504:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404506:	853e                	mv	a0,a5
20404508:	50b2                	lw	ra,44(sp)
2040450a:	5422                	lw	s0,40(sp)
2040450c:	6145                	addi	sp,sp,48
2040450e:	8082                	ret

20404510 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404510:	7179                	addi	sp,sp,-48
20404512:	d606                	sw	ra,44(sp)
20404514:	d422                	sw	s0,40(sp)
20404516:	1800                	addi	s0,sp,48
20404518:	fca42e23          	sw	a0,-36(s0)
2040451c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404520:	fdc42503          	lw	a0,-36(s0)
20404524:	b5dff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
20404528:	87aa                	mv	a5,a0
2040452a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040452e:	fec42783          	lw	a5,-20(s0)
20404532:	03878793          	addi	a5,a5,56
20404536:	439c                	lw	a5,0(a5)
20404538:	fd842703          	lw	a4,-40(s0)
2040453c:	fff74713          	not	a4,a4
20404540:	86ba                	mv	a3,a4
20404542:	fec42703          	lw	a4,-20(s0)
20404546:	03870713          	addi	a4,a4,56
2040454a:	8ff5                	and	a5,a5,a3
2040454c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2040454e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404550:	853e                	mv	a0,a5
20404552:	50b2                	lw	ra,44(sp)
20404554:	5422                	lw	s0,40(sp)
20404556:	6145                	addi	sp,sp,48
20404558:	8082                	ret

2040455a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040455a:	7179                	addi	sp,sp,-48
2040455c:	d606                	sw	ra,44(sp)
2040455e:	d422                	sw	s0,40(sp)
20404560:	1800                	addi	s0,sp,48
20404562:	fca42e23          	sw	a0,-36(s0)
20404566:	fcb42c23          	sw	a1,-40(s0)
2040456a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040456e:	fdc42503          	lw	a0,-36(s0)
20404572:	b0fff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
20404576:	87aa                	mv	a5,a0
20404578:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
2040457c:	fd442703          	lw	a4,-44(s0)
20404580:	479d                	li	a5,7
20404582:	1ce7e963          	bltu	a5,a4,20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404586:	fd442783          	lw	a5,-44(s0)
2040458a:	00279713          	slli	a4,a5,0x2
2040458e:	204057b7          	lui	a5,0x20405
20404592:	41c78793          	addi	a5,a5,1052 # 2040541c <__metal_driver_vtable_riscv_plic0+0x4c>
20404596:	97ba                	add	a5,a5,a4
20404598:	439c                	lw	a5,0(a5)
2040459a:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040459c:	fec42783          	lw	a5,-20(s0)
204045a0:	07e1                	addi	a5,a5,24
204045a2:	439c                	lw	a5,0(a5)
204045a4:	fd842703          	lw	a4,-40(s0)
204045a8:	fff74713          	not	a4,a4
204045ac:	86ba                	mv	a3,a4
204045ae:	fec42703          	lw	a4,-20(s0)
204045b2:	0761                	addi	a4,a4,24
204045b4:	8ff5                	and	a5,a5,a3
204045b6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204045b8:	fec42783          	lw	a5,-20(s0)
204045bc:	02078793          	addi	a5,a5,32
204045c0:	439c                	lw	a5,0(a5)
204045c2:	fd842703          	lw	a4,-40(s0)
204045c6:	fff74713          	not	a4,a4
204045ca:	86ba                	mv	a3,a4
204045cc:	fec42703          	lw	a4,-20(s0)
204045d0:	02070713          	addi	a4,a4,32
204045d4:	8ff5                	and	a5,a5,a3
204045d6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204045d8:	fec42783          	lw	a5,-20(s0)
204045dc:	02878793          	addi	a5,a5,40
204045e0:	439c                	lw	a5,0(a5)
204045e2:	fd842703          	lw	a4,-40(s0)
204045e6:	fff74713          	not	a4,a4
204045ea:	86ba                	mv	a3,a4
204045ec:	fec42703          	lw	a4,-20(s0)
204045f0:	02870713          	addi	a4,a4,40
204045f4:	8ff5                	and	a5,a5,a3
204045f6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
204045f8:	fec42783          	lw	a5,-20(s0)
204045fc:	03078793          	addi	a5,a5,48
20404600:	439c                	lw	a5,0(a5)
20404602:	fd842703          	lw	a4,-40(s0)
20404606:	fff74713          	not	a4,a4
2040460a:	86ba                	mv	a3,a4
2040460c:	fec42703          	lw	a4,-20(s0)
20404610:	03070713          	addi	a4,a4,48
20404614:	8ff5                	and	a5,a5,a3
20404616:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404618:	aa35                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040461a:	fec42783          	lw	a5,-20(s0)
2040461e:	07e1                	addi	a5,a5,24
20404620:	4398                	lw	a4,0(a5)
20404622:	fd842783          	lw	a5,-40(s0)
20404626:	fec42683          	lw	a3,-20(s0)
2040462a:	06e1                	addi	a3,a3,24
2040462c:	8fd9                	or	a5,a5,a4
2040462e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404630:	a215                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404632:	fec42783          	lw	a5,-20(s0)
20404636:	02078793          	addi	a5,a5,32
2040463a:	4398                	lw	a4,0(a5)
2040463c:	fd842783          	lw	a5,-40(s0)
20404640:	fec42683          	lw	a3,-20(s0)
20404644:	02068693          	addi	a3,a3,32
20404648:	8fd9                	or	a5,a5,a4
2040464a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
2040464c:	a221                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040464e:	fec42783          	lw	a5,-20(s0)
20404652:	07e1                	addi	a5,a5,24
20404654:	4398                	lw	a4,0(a5)
20404656:	fd842783          	lw	a5,-40(s0)
2040465a:	fec42683          	lw	a3,-20(s0)
2040465e:	06e1                	addi	a3,a3,24
20404660:	8fd9                	or	a5,a5,a4
20404662:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404664:	fec42783          	lw	a5,-20(s0)
20404668:	02078793          	addi	a5,a5,32
2040466c:	4398                	lw	a4,0(a5)
2040466e:	fd842783          	lw	a5,-40(s0)
20404672:	fec42683          	lw	a3,-20(s0)
20404676:	02068693          	addi	a3,a3,32
2040467a:	8fd9                	or	a5,a5,a4
2040467c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2040467e:	a8d9                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404680:	fec42783          	lw	a5,-20(s0)
20404684:	02878793          	addi	a5,a5,40
20404688:	4398                	lw	a4,0(a5)
2040468a:	fd842783          	lw	a5,-40(s0)
2040468e:	fec42683          	lw	a3,-20(s0)
20404692:	02868693          	addi	a3,a3,40
20404696:	8fd9                	or	a5,a5,a4
20404698:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
2040469a:	a86d                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040469c:	fec42783          	lw	a5,-20(s0)
204046a0:	03078793          	addi	a5,a5,48
204046a4:	4398                	lw	a4,0(a5)
204046a6:	fd842783          	lw	a5,-40(s0)
204046aa:	fec42683          	lw	a3,-20(s0)
204046ae:	03068693          	addi	a3,a3,48
204046b2:	8fd9                	or	a5,a5,a4
204046b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204046b6:	a879                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204046b8:	fec42783          	lw	a5,-20(s0)
204046bc:	02878793          	addi	a5,a5,40
204046c0:	4398                	lw	a4,0(a5)
204046c2:	fd842783          	lw	a5,-40(s0)
204046c6:	fec42683          	lw	a3,-20(s0)
204046ca:	02868693          	addi	a3,a3,40
204046ce:	8fd9                	or	a5,a5,a4
204046d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204046d2:	fec42783          	lw	a5,-20(s0)
204046d6:	03078793          	addi	a5,a5,48
204046da:	4398                	lw	a4,0(a5)
204046dc:	fd842783          	lw	a5,-40(s0)
204046e0:	fec42683          	lw	a3,-20(s0)
204046e4:	03068693          	addi	a3,a3,48
204046e8:	8fd9                	or	a5,a5,a4
204046ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
204046ec:	a0a5                	j	20404754 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204046ee:	fec42783          	lw	a5,-20(s0)
204046f2:	07e1                	addi	a5,a5,24
204046f4:	4398                	lw	a4,0(a5)
204046f6:	fd842783          	lw	a5,-40(s0)
204046fa:	fec42683          	lw	a3,-20(s0)
204046fe:	06e1                	addi	a3,a3,24
20404700:	8fd9                	or	a5,a5,a4
20404702:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404704:	fec42783          	lw	a5,-20(s0)
20404708:	02078793          	addi	a5,a5,32
2040470c:	4398                	lw	a4,0(a5)
2040470e:	fd842783          	lw	a5,-40(s0)
20404712:	fec42683          	lw	a3,-20(s0)
20404716:	02068693          	addi	a3,a3,32
2040471a:	8fd9                	or	a5,a5,a4
2040471c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040471e:	fec42783          	lw	a5,-20(s0)
20404722:	02878793          	addi	a5,a5,40
20404726:	4398                	lw	a4,0(a5)
20404728:	fd842783          	lw	a5,-40(s0)
2040472c:	fec42683          	lw	a3,-20(s0)
20404730:	02868693          	addi	a3,a3,40
20404734:	8fd9                	or	a5,a5,a4
20404736:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404738:	fec42783          	lw	a5,-20(s0)
2040473c:	03078793          	addi	a5,a5,48
20404740:	4398                	lw	a4,0(a5)
20404742:	fd842783          	lw	a5,-40(s0)
20404746:	fec42683          	lw	a3,-20(s0)
2040474a:	03068693          	addi	a3,a3,48
2040474e:	8fd9                	or	a5,a5,a4
20404750:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404752:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404754:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404756:	853e                	mv	a0,a5
20404758:	50b2                	lw	ra,44(sp)
2040475a:	5422                	lw	s0,40(sp)
2040475c:	6145                	addi	sp,sp,48
2040475e:	8082                	ret

20404760 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404760:	7179                	addi	sp,sp,-48
20404762:	d606                	sw	ra,44(sp)
20404764:	d422                	sw	s0,40(sp)
20404766:	1800                	addi	s0,sp,48
20404768:	fca42e23          	sw	a0,-36(s0)
2040476c:	fcb42c23          	sw	a1,-40(s0)
20404770:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404774:	fdc42503          	lw	a0,-36(s0)
20404778:	909ff0ef          	jal	ra,20404080 <__metal_driver_sifive_gpio0_base>
2040477c:	87aa                	mv	a5,a0
2040477e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404782:	fd442703          	lw	a4,-44(s0)
20404786:	479d                	li	a5,7
20404788:	14e7ea63          	bltu	a5,a4,204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
2040478c:	fd442783          	lw	a5,-44(s0)
20404790:	00279713          	slli	a4,a5,0x2
20404794:	204057b7          	lui	a5,0x20405
20404798:	43c78793          	addi	a5,a5,1084 # 2040543c <__metal_driver_vtable_riscv_plic0+0x6c>
2040479c:	97ba                	add	a5,a5,a4
2040479e:	439c                	lw	a5,0(a5)
204047a0:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204047a2:	fec42783          	lw	a5,-20(s0)
204047a6:	07f1                	addi	a5,a5,28
204047a8:	4398                	lw	a4,0(a5)
204047aa:	fd842783          	lw	a5,-40(s0)
204047ae:	fec42683          	lw	a3,-20(s0)
204047b2:	06f1                	addi	a3,a3,28
204047b4:	8fd9                	or	a5,a5,a4
204047b6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204047b8:	a215                	j	204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204047ba:	fec42783          	lw	a5,-20(s0)
204047be:	02478793          	addi	a5,a5,36
204047c2:	4398                	lw	a4,0(a5)
204047c4:	fd842783          	lw	a5,-40(s0)
204047c8:	fec42683          	lw	a3,-20(s0)
204047cc:	02468693          	addi	a3,a3,36
204047d0:	8fd9                	or	a5,a5,a4
204047d2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204047d4:	a221                	j	204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204047d6:	fec42783          	lw	a5,-20(s0)
204047da:	07f1                	addi	a5,a5,28
204047dc:	4398                	lw	a4,0(a5)
204047de:	fd842783          	lw	a5,-40(s0)
204047e2:	fec42683          	lw	a3,-20(s0)
204047e6:	06f1                	addi	a3,a3,28
204047e8:	8fd9                	or	a5,a5,a4
204047ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204047ec:	fec42783          	lw	a5,-20(s0)
204047f0:	02478793          	addi	a5,a5,36
204047f4:	4398                	lw	a4,0(a5)
204047f6:	fd842783          	lw	a5,-40(s0)
204047fa:	fec42683          	lw	a3,-20(s0)
204047fe:	02468693          	addi	a3,a3,36
20404802:	8fd9                	or	a5,a5,a4
20404804:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404806:	a8d9                	j	204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404808:	fec42783          	lw	a5,-20(s0)
2040480c:	02c78793          	addi	a5,a5,44
20404810:	4398                	lw	a4,0(a5)
20404812:	fd842783          	lw	a5,-40(s0)
20404816:	fec42683          	lw	a3,-20(s0)
2040481a:	02c68693          	addi	a3,a3,44
2040481e:	8fd9                	or	a5,a5,a4
20404820:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404822:	a86d                	j	204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404824:	fec42783          	lw	a5,-20(s0)
20404828:	03478793          	addi	a5,a5,52
2040482c:	4398                	lw	a4,0(a5)
2040482e:	fd842783          	lw	a5,-40(s0)
20404832:	fec42683          	lw	a3,-20(s0)
20404836:	03468693          	addi	a3,a3,52
2040483a:	8fd9                	or	a5,a5,a4
2040483c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
2040483e:	a879                	j	204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404840:	fec42783          	lw	a5,-20(s0)
20404844:	02c78793          	addi	a5,a5,44
20404848:	4398                	lw	a4,0(a5)
2040484a:	fd842783          	lw	a5,-40(s0)
2040484e:	fec42683          	lw	a3,-20(s0)
20404852:	02c68693          	addi	a3,a3,44
20404856:	8fd9                	or	a5,a5,a4
20404858:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
2040485a:	fec42783          	lw	a5,-20(s0)
2040485e:	03478793          	addi	a5,a5,52
20404862:	4398                	lw	a4,0(a5)
20404864:	fd842783          	lw	a5,-40(s0)
20404868:	fec42683          	lw	a3,-20(s0)
2040486c:	03468693          	addi	a3,a3,52
20404870:	8fd9                	or	a5,a5,a4
20404872:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404874:	a0a5                	j	204048dc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404876:	fec42783          	lw	a5,-20(s0)
2040487a:	07f1                	addi	a5,a5,28
2040487c:	4398                	lw	a4,0(a5)
2040487e:	fd842783          	lw	a5,-40(s0)
20404882:	fec42683          	lw	a3,-20(s0)
20404886:	06f1                	addi	a3,a3,28
20404888:	8fd9                	or	a5,a5,a4
2040488a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040488c:	fec42783          	lw	a5,-20(s0)
20404890:	02478793          	addi	a5,a5,36
20404894:	4398                	lw	a4,0(a5)
20404896:	fd842783          	lw	a5,-40(s0)
2040489a:	fec42683          	lw	a3,-20(s0)
2040489e:	02468693          	addi	a3,a3,36
204048a2:	8fd9                	or	a5,a5,a4
204048a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204048a6:	fec42783          	lw	a5,-20(s0)
204048aa:	02c78793          	addi	a5,a5,44
204048ae:	4398                	lw	a4,0(a5)
204048b0:	fd842783          	lw	a5,-40(s0)
204048b4:	fec42683          	lw	a3,-20(s0)
204048b8:	02c68693          	addi	a3,a3,44
204048bc:	8fd9                	or	a5,a5,a4
204048be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204048c0:	fec42783          	lw	a5,-20(s0)
204048c4:	03478793          	addi	a5,a5,52
204048c8:	4398                	lw	a4,0(a5)
204048ca:	fd842783          	lw	a5,-40(s0)
204048ce:	fec42683          	lw	a3,-20(s0)
204048d2:	03468693          	addi	a3,a3,52
204048d6:	8fd9                	or	a5,a5,a4
204048d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204048da:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
204048dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
204048de:	853e                	mv	a0,a5
204048e0:	50b2                	lw	ra,44(sp)
204048e2:	5422                	lw	s0,40(sp)
204048e4:	6145                	addi	sp,sp,48
204048e6:	8082                	ret

204048e8 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
204048e8:	1101                	addi	sp,sp,-32
204048ea:	ce06                	sw	ra,28(sp)
204048ec:	cc22                	sw	s0,24(sp)
204048ee:	1000                	addi	s0,sp,32
204048f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
204048f4:	fec42503          	lw	a0,-20(s0)
204048f8:	faeff0ef          	jal	ra,204040a6 <__metal_driver_sifive_gpio0_interrupt_parent>
204048fc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
204048fe:	853e                	mv	a0,a5
20404900:	40f2                	lw	ra,28(sp)
20404902:	4462                	lw	s0,24(sp)
20404904:	6105                	addi	sp,sp,32
20404906:	8082                	ret

20404908 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404908:	7179                	addi	sp,sp,-48
2040490a:	d606                	sw	ra,44(sp)
2040490c:	d422                	sw	s0,40(sp)
2040490e:	1800                	addi	s0,sp,48
20404910:	fca42e23          	sw	a0,-36(s0)
20404914:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404918:	fd842583          	lw	a1,-40(s0)
2040491c:	fdc42503          	lw	a0,-36(s0)
20404920:	fb0ff0ef          	jal	ra,204040d0 <__metal_driver_sifive_gpio0_interrupt_lines>
20404924:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404928:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
2040492c:	853e                	mv	a0,a5
2040492e:	50b2                	lw	ra,44(sp)
20404930:	5422                	lw	s0,40(sp)
20404932:	6145                	addi	sp,sp,48
20404934:	8082                	ret

20404936 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404936:	1101                	addi	sp,sp,-32
20404938:	ce22                	sw	s0,28(sp)
2040493a:	1000                	addi	s0,sp,32
2040493c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404940:	fec42703          	lw	a4,-20(s0)
20404944:	800007b7          	lui	a5,0x80000
20404948:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
2040494c:	00f71563          	bne	a4,a5,20404956 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404950:	100137b7          	lui	a5,0x10013
20404954:	a011                	j	20404958 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404956:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:571
	}
}
20404958:	853e                	mv	a0,a5
2040495a:	4472                	lw	s0,28(sp)
2040495c:	6105                	addi	sp,sp,32
2040495e:	8082                	ret

20404960 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404960:	1101                	addi	sp,sp,-32
20404962:	ce22                	sw	s0,28(sp)
20404964:	1000                	addi	s0,sp,32
20404966:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040496a:	fec42703          	lw	a4,-20(s0)
2040496e:	800007b7          	lui	a5,0x80000
20404972:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
20404976:	00f71763          	bne	a4,a5,20404984 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040497a:	800007b7          	lui	a5,0x80000
2040497e:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffff014>
20404982:	a011                	j	20404986 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404984:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:601
	}
}
20404986:	853e                	mv	a0,a5
20404988:	4472                	lw	s0,28(sp)
2040498a:	6105                	addi	sp,sp,32
2040498c:	8082                	ret

2040498e <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
2040498e:	1101                	addi	sp,sp,-32
20404990:	ce22                	sw	s0,28(sp)
20404992:	1000                	addi	s0,sp,32
20404994:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404998:	fec42703          	lw	a4,-20(s0)
2040499c:	800007b7          	lui	a5,0x80000
204049a0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
204049a4:	00f71463          	bne	a4,a5,204049ac <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:606
		return 5;
204049a8:	4795                	li	a5,5
204049aa:	a011                	j	204049ae <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
204049ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:611
	}
}
204049ae:	853e                	mv	a0,a5
204049b0:	4472                	lw	s0,28(sp)
204049b2:	6105                	addi	sp,sp,32
204049b4:	8082                	ret

204049b6 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
204049b6:	1101                	addi	sp,sp,-32
204049b8:	ce22                	sw	s0,28(sp)
204049ba:	1000                	addi	s0,sp,32
204049bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204049c0:	fec42703          	lw	a4,-20(s0)
204049c4:	800007b7          	lui	a5,0x80000
204049c8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
204049cc:	00f71763          	bne	a4,a5,204049da <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
204049d0:	800007b7          	lui	a5,0x80000
204049d4:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffec4c>
204049d8:	a011                	j	204049dc <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
204049da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:621
	}
}
204049dc:	853e                	mv	a0,a5
204049de:	4472                	lw	s0,28(sp)
204049e0:	6105                	addi	sp,sp,32
204049e2:	8082                	ret

204049e4 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
204049e4:	1101                	addi	sp,sp,-32
204049e6:	ce22                	sw	s0,28(sp)
204049e8:	1000                	addi	s0,sp,32
204049ea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204049ee:	fec42703          	lw	a4,-20(s0)
204049f2:	800007b7          	lui	a5,0x80000
204049f6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
204049fa:	00f71563          	bne	a4,a5,20404a04 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
204049fe:	82018793          	addi	a5,gp,-2016 # 80000768 <__metal_dt_gpio_10012000>
20404a02:	a011                	j	20404a06 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404a04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:631
	}
}
20404a06:	853e                	mv	a0,a5
20404a08:	4472                	lw	s0,28(sp)
20404a0a:	6105                	addi	sp,sp,32
20404a0c:	8082                	ret

20404a0e <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404a0e:	1101                	addi	sp,sp,-32
20404a10:	ce22                	sw	s0,28(sp)
20404a12:	1000                	addi	s0,sp,32
20404a14:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a18:	fec42703          	lw	a4,-20(s0)
20404a1c:	800007b7          	lui	a5,0x80000
20404a20:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
20404a24:	00f71563          	bne	a4,a5,20404a2e <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:636
		return 196608;
20404a28:	000307b7          	lui	a5,0x30
20404a2c:	a011                	j	20404a30 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404a2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:641
	}
}
20404a30:	853e                	mv	a0,a5
20404a32:	4472                	lw	s0,28(sp)
20404a34:	6105                	addi	sp,sp,32
20404a36:	8082                	ret

20404a38 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404a38:	1101                	addi	sp,sp,-32
20404a3a:	ce22                	sw	s0,28(sp)
20404a3c:	1000                	addi	s0,sp,32
20404a3e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a42:	fec42703          	lw	a4,-20(s0)
20404a46:	800007b7          	lui	a5,0x80000
20404a4a:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffff314>
20404a4e:	00f71563          	bne	a4,a5,20404a58 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:646
		return 196608;
20404a52:	000307b7          	lui	a5,0x30
20404a56:	a011                	j	20404a5a <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404a58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:651
	}
}
20404a5a:	853e                	mv	a0,a5
20404a5c:	4472                	lw	s0,28(sp)
20404a5e:	6105                	addi	sp,sp,32
20404a60:	8082                	ret

20404a62 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404a62:	1101                	addi	sp,sp,-32
20404a64:	ce06                	sw	ra,28(sp)
20404a66:	cc22                	sw	s0,24(sp)
20404a68:	1000                	addi	s0,sp,32
20404a6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404a6e:	fec42503          	lw	a0,-20(s0)
20404a72:	35fd                	jal	20404960 <__metal_driver_sifive_uart0_interrupt_parent>
20404a74:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404a76:	853e                	mv	a0,a5
20404a78:	40f2                	lw	ra,28(sp)
20404a7a:	4462                	lw	s0,24(sp)
20404a7c:	6105                	addi	sp,sp,32
20404a7e:	8082                	ret

20404a80 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404a80:	1101                	addi	sp,sp,-32
20404a82:	ce06                	sw	ra,28(sp)
20404a84:	cc22                	sw	s0,24(sp)
20404a86:	1000                	addi	s0,sp,32
20404a88:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404a8c:	fec42503          	lw	a0,-20(s0)
20404a90:	3dfd                	jal	2040498e <__metal_driver_sifive_uart0_interrupt_line>
20404a92:	87aa                	mv	a5,a0
20404a94:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404a98:	853e                	mv	a0,a5
20404a9a:	40f2                	lw	ra,28(sp)
20404a9c:	4462                	lw	s0,24(sp)
20404a9e:	6105                	addi	sp,sp,32
20404aa0:	8082                	ret

20404aa2 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404aa2:	7179                	addi	sp,sp,-48
20404aa4:	d606                	sw	ra,44(sp)
20404aa6:	d422                	sw	s0,40(sp)
20404aa8:	1800                	addi	s0,sp,48
20404aaa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404aae:	fdc42503          	lw	a0,-36(s0)
20404ab2:	3551                	jal	20404936 <__metal_driver_sifive_uart0_control_base>
20404ab4:	87aa                	mv	a5,a0
20404ab6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404aba:	fec42783          	lw	a5,-20(s0)
20404abe:	439c                	lw	a5,0(a5)
20404ac0:	fff7c793          	not	a5,a5
20404ac4:	83fd                	srli	a5,a5,0x1f
20404ac6:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404aca:	853e                	mv	a0,a5
20404acc:	50b2                	lw	ra,44(sp)
20404ace:	5422                	lw	s0,40(sp)
20404ad0:	6145                	addi	sp,sp,48
20404ad2:	8082                	ret

20404ad4 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404ad4:	7179                	addi	sp,sp,-48
20404ad6:	d606                	sw	ra,44(sp)
20404ad8:	d422                	sw	s0,40(sp)
20404ada:	1800                	addi	s0,sp,48
20404adc:	fca42e23          	sw	a0,-36(s0)
20404ae0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404ae4:	fdc42503          	lw	a0,-36(s0)
20404ae8:	35b9                	jal	20404936 <__metal_driver_sifive_uart0_control_base>
20404aea:	87aa                	mv	a5,a0
20404aec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404af0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404af2:	fdc42503          	lw	a0,-36(s0)
20404af6:	3775                	jal	20404aa2 <__metal_driver_sifive_uart0_txready>
20404af8:	87aa                	mv	a5,a0
20404afa:	dfe5                	beqz	a5,20404af2 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404afc:	fec42783          	lw	a5,-20(s0)
20404b00:	fd842703          	lw	a4,-40(s0)
20404b04:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404b06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404b08:	853e                	mv	a0,a5
20404b0a:	50b2                	lw	ra,44(sp)
20404b0c:	5422                	lw	s0,40(sp)
20404b0e:	6145                	addi	sp,sp,48
20404b10:	8082                	ret

20404b12 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404b12:	7179                	addi	sp,sp,-48
20404b14:	d606                	sw	ra,44(sp)
20404b16:	d422                	sw	s0,40(sp)
20404b18:	1800                	addi	s0,sp,48
20404b1a:	fca42e23          	sw	a0,-36(s0)
20404b1e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404b22:	fdc42503          	lw	a0,-36(s0)
20404b26:	3d01                	jal	20404936 <__metal_driver_sifive_uart0_control_base>
20404b28:	87aa                	mv	a5,a0
20404b2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404b2e:	fec42783          	lw	a5,-20(s0)
20404b32:	0791                	addi	a5,a5,4
20404b34:	439c                	lw	a5,0(a5)
20404b36:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404b3a:	fe842783          	lw	a5,-24(s0)
20404b3e:	0007d763          	bgez	a5,20404b4c <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404b42:	fd842783          	lw	a5,-40(s0)
20404b46:	577d                	li	a4,-1
20404b48:	c398                	sw	a4,0(a5)
20404b4a:	a801                	j	20404b5a <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404b4c:	fe842783          	lw	a5,-24(s0)
20404b50:	0ff7f713          	andi	a4,a5,255
20404b54:	fd842783          	lw	a5,-40(s0)
20404b58:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404b5a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404b5c:	853e                	mv	a0,a5
20404b5e:	50b2                	lw	ra,44(sp)
20404b60:	5422                	lw	s0,40(sp)
20404b62:	6145                	addi	sp,sp,48
20404b64:	8082                	ret

20404b66 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404b66:	7179                	addi	sp,sp,-48
20404b68:	d622                	sw	s0,44(sp)
20404b6a:	1800                	addi	s0,sp,48
20404b6c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404b70:	fdc42783          	lw	a5,-36(s0)
20404b74:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404b78:	fec42783          	lw	a5,-20(s0)
20404b7c:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404b7e:	853e                	mv	a0,a5
20404b80:	5432                	lw	s0,44(sp)
20404b82:	6145                	addi	sp,sp,48
20404b84:	8082                	ret

20404b86 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404b86:	7179                	addi	sp,sp,-48
20404b88:	d606                	sw	ra,44(sp)
20404b8a:	d422                	sw	s0,40(sp)
20404b8c:	1800                	addi	s0,sp,48
20404b8e:	fca42e23          	sw	a0,-36(s0)
20404b92:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404b96:	fdc42783          	lw	a5,-36(s0)
20404b9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404b9e:	fdc42503          	lw	a0,-36(s0)
20404ba2:	d95ff0ef          	jal	ra,20404936 <__metal_driver_sifive_uart0_control_base>
20404ba6:	87aa                	mv	a5,a0
20404ba8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404bac:	fdc42503          	lw	a0,-36(s0)
20404bb0:	3519                	jal	204049b6 <__metal_driver_sifive_uart0_clock>
20404bb2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404bb6:	fd842703          	lw	a4,-40(s0)
20404bba:	fec42783          	lw	a5,-20(s0)
20404bbe:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404bc0:	fe442783          	lw	a5,-28(s0)
20404bc4:	cbb1                	beqz	a5,20404c18 <__metal_driver_sifive_uart0_set_baud_rate+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404bc6:	fe442783          	lw	a5,-28(s0)
20404bca:	439c                	lw	a5,0(a5)
20404bcc:	439c                	lw	a5,0(a5)
20404bce:	fe442503          	lw	a0,-28(s0)
20404bd2:	9782                	jalr	a5
20404bd4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404bd8:	fe042703          	lw	a4,-32(s0)
20404bdc:	fd842783          	lw	a5,-40(s0)
20404be0:	02f747b3          	div	a5,a4,a5
20404be4:	fff78713          	addi	a4,a5,-1
20404be8:	fe842783          	lw	a5,-24(s0)
20404bec:	07e1                	addi	a5,a5,24
20404bee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404bf0:	fe842783          	lw	a5,-24(s0)
20404bf4:	07a1                	addi	a5,a5,8
20404bf6:	439c                	lw	a5,0(a5)
20404bf8:	fe842703          	lw	a4,-24(s0)
20404bfc:	0721                	addi	a4,a4,8
20404bfe:	0017e793          	ori	a5,a5,1
20404c02:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404c04:	fe842783          	lw	a5,-24(s0)
20404c08:	07b1                	addi	a5,a5,12
20404c0a:	439c                	lw	a5,0(a5)
20404c0c:	fe842703          	lw	a4,-24(s0)
20404c10:	0731                	addi	a4,a4,12
20404c12:	0017e793          	ori	a5,a5,1
20404c16:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404c18:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404c1a:	853e                	mv	a0,a5
20404c1c:	50b2                	lw	ra,44(sp)
20404c1e:	5422                	lw	s0,40(sp)
20404c20:	6145                	addi	sp,sp,48
20404c22:	8082                	ret

20404c24 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404c24:	7139                	addi	sp,sp,-64
20404c26:	de06                	sw	ra,60(sp)
20404c28:	dc22                	sw	s0,56(sp)
20404c2a:	0080                	addi	s0,sp,64
20404c2c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404c30:	fcc42783          	lw	a5,-52(s0)
20404c34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404c38:	fcc42503          	lw	a0,-52(s0)
20404c3c:	cfbff0ef          	jal	ra,20404936 <__metal_driver_sifive_uart0_control_base>
20404c40:	87aa                	mv	a5,a0
20404c42:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404c46:	fcc42503          	lw	a0,-52(s0)
20404c4a:	d6dff0ef          	jal	ra,204049b6 <__metal_driver_sifive_uart0_clock>
20404c4e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404c52:	fe842783          	lw	a5,-24(s0)
20404c56:	07a1                	addi	a5,a5,8
20404c58:	4398                	lw	a4,0(a5)
20404c5a:	fe842783          	lw	a5,-24(s0)
20404c5e:	07a1                	addi	a5,a5,8
20404c60:	86be                	mv	a3,a5
20404c62:	fff907b7          	lui	a5,0xfff90
20404c66:	17fd                	addi	a5,a5,-1
20404c68:	8ff9                	and	a5,a5,a4
20404c6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404c6c:	fe842783          	lw	a5,-24(s0)
20404c70:	07a1                	addi	a5,a5,8
20404c72:	4398                	lw	a4,0(a5)
20404c74:	fe842783          	lw	a5,-24(s0)
20404c78:	07a1                	addi	a5,a5,8
20404c7a:	86be                	mv	a3,a5
20404c7c:	67c1                	lui	a5,0x10
20404c7e:	8fd9                	or	a5,a5,a4
20404c80:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404c82:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404c84:	fe842783          	lw	a5,-24(s0)
20404c88:	07d1                	addi	a5,a5,20
20404c8a:	439c                	lw	a5,0(a5)
20404c8c:	8b85                	andi	a5,a5,1
20404c8e:	dbfd                	beqz	a5,20404c84 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404c90:	fe842783          	lw	a5,-24(s0)
20404c94:	07a1                	addi	a5,a5,8
20404c96:	439c                	lw	a5,0(a5)
20404c98:	8b89                	andi	a5,a5,2
20404c9a:	c399                	beqz	a5,20404ca0 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404c9c:	47a5                	li	a5,9
20404c9e:	a011                	j	20404ca2 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404ca0:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404ca2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404ca6:	fe442783          	lw	a5,-28(s0)
20404caa:	439c                	lw	a5,0(a5)
20404cac:	439c                	lw	a5,0(a5)
20404cae:	fe442503          	lw	a0,-28(s0)
20404cb2:	9782                	jalr	a5
20404cb4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404cb8:	fe042703          	lw	a4,-32(s0)
20404cbc:	fdc42783          	lw	a5,-36(s0)
20404cc0:	02f707b3          	mul	a5,a4,a5
20404cc4:	873e                	mv	a4,a5
20404cc6:	fec42783          	lw	a5,-20(s0)
20404cca:	43dc                	lw	a5,4(a5)
20404ccc:	02f757b3          	divu	a5,a4,a5
20404cd0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404cd4:	fc042a23          	sw	zero,-44(s0)
20404cd8:	a039                	j	20404ce6 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404cda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404cdc:	fd442783          	lw	a5,-44(s0)
20404ce0:	0785                	addi	a5,a5,1
20404ce2:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404ce6:	fd442783          	lw	a5,-44(s0)
20404cea:	fd842703          	lw	a4,-40(s0)
20404cee:	fee7c6e3          	blt	a5,a4,20404cda <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404cf2:	0001                	nop
20404cf4:	50f2                	lw	ra,60(sp)
20404cf6:	5462                	lw	s0,56(sp)
20404cf8:	6121                	addi	sp,sp,64
20404cfa:	8082                	ret

20404cfc <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404cfc:	7179                	addi	sp,sp,-48
20404cfe:	d606                	sw	ra,44(sp)
20404d00:	d422                	sw	s0,40(sp)
20404d02:	1800                	addi	s0,sp,48
20404d04:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404d08:	fdc42783          	lw	a5,-36(s0)
20404d0c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404d10:	fec42703          	lw	a4,-20(s0)
20404d14:	fec42783          	lw	a5,-20(s0)
20404d18:	43dc                	lw	a5,4(a5)
20404d1a:	85be                	mv	a1,a5
20404d1c:	853a                	mv	a0,a4
20404d1e:	d9ffc0ef          	jal	ra,20401abc <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404d22:	0001                	nop
20404d24:	50b2                	lw	ra,44(sp)
20404d26:	5422                	lw	s0,40(sp)
20404d28:	6145                	addi	sp,sp,48
20404d2a:	8082                	ret

20404d2c <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404d2c:	7139                	addi	sp,sp,-64
20404d2e:	de06                	sw	ra,60(sp)
20404d30:	dc22                	sw	s0,56(sp)
20404d32:	0080                	addi	s0,sp,64
20404d34:	fca42623          	sw	a0,-52(s0)
20404d38:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404d3c:	fcc42783          	lw	a5,-52(s0)
20404d40:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404d44:	fcc42503          	lw	a0,-52(s0)
20404d48:	c6fff0ef          	jal	ra,204049b6 <__metal_driver_sifive_uart0_clock>
20404d4c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404d50:	fcc42503          	lw	a0,-52(s0)
20404d54:	c91ff0ef          	jal	ra,204049e4 <__metal_driver_sifive_uart0_pinmux>
20404d58:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404d5c:	fe842783          	lw	a5,-24(s0)
20404d60:	c7b9                	beqz	a5,20404dae <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404d62:	fec42783          	lw	a5,-20(s0)
20404d66:	20405737          	lui	a4,0x20405
20404d6a:	c2470713          	addi	a4,a4,-988 # 20404c24 <pre_rate_change_callback_func>
20404d6e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404d70:	fec42783          	lw	a5,-20(s0)
20404d74:	fcc42703          	lw	a4,-52(s0)
20404d78:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404d7a:	fec42783          	lw	a5,-20(s0)
20404d7e:	07a1                	addi	a5,a5,8
20404d80:	85be                	mv	a1,a5
20404d82:	fe842503          	lw	a0,-24(s0)
20404d86:	20f1                	jal	20404e52 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404d88:	fec42783          	lw	a5,-20(s0)
20404d8c:	20405737          	lui	a4,0x20405
20404d90:	cfc70713          	addi	a4,a4,-772 # 20404cfc <post_rate_change_callback_func>
20404d94:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20404d96:	fec42783          	lw	a5,-20(s0)
20404d9a:	fcc42703          	lw	a4,-52(s0)
20404d9e:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20404da0:	fec42783          	lw	a5,-20(s0)
20404da4:	07d1                	addi	a5,a5,20
20404da6:	85be                	mv	a1,a5
20404da8:	fe842503          	lw	a0,-24(s0)
20404dac:	28d9                	jal	20404e82 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20404dae:	fec42783          	lw	a5,-20(s0)
20404db2:	fc842583          	lw	a1,-56(s0)
20404db6:	853e                	mv	a0,a5
20404db8:	d05fc0ef          	jal	ra,20401abc <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20404dbc:	fe442783          	lw	a5,-28(s0)
20404dc0:	cb95                	beqz	a5,20404df4 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20404dc2:	fcc42503          	lw	a0,-52(s0)
20404dc6:	c49ff0ef          	jal	ra,20404a0e <__metal_driver_sifive_uart0_pinmux_output_selector>
20404dca:	87aa                	mv	a5,a0
20404dcc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20404dd0:	fcc42503          	lw	a0,-52(s0)
20404dd4:	c65ff0ef          	jal	ra,20404a38 <__metal_driver_sifive_uart0_pinmux_source_selector>
20404dd8:	87aa                	mv	a5,a0
20404dda:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20404dde:	fe442783          	lw	a5,-28(s0)
20404de2:	439c                	lw	a5,0(a5)
20404de4:	53dc                	lw	a5,36(a5)
20404de6:	fdc42603          	lw	a2,-36(s0)
20404dea:	fe042583          	lw	a1,-32(s0)
20404dee:	fe442503          	lw	a0,-28(s0)
20404df2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20404df4:	0001                	nop
20404df6:	50f2                	lw	ra,60(sp)
20404df8:	5462                	lw	s0,56(sp)
20404dfa:	6121                	addi	sp,sp,64
20404dfc:	8082                	ret

20404dfe <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20404dfe:	7179                	addi	sp,sp,-48
20404e00:	d622                	sw	s0,44(sp)
20404e02:	1800                	addi	s0,sp,48
20404e04:	fca42e23          	sw	a0,-36(s0)
20404e08:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20404e0c:	fd842783          	lw	a5,-40(s0)
20404e10:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20404e14:	fdc42783          	lw	a5,-36(s0)
20404e18:	e781                	bnez	a5,20404e20 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20404e1a:	fd842783          	lw	a5,-40(s0)
20404e1e:	a035                	j	20404e4a <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20404e20:	fdc42783          	lw	a5,-36(s0)
20404e24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20404e28:	a031                	j	20404e34 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20404e2a:	fec42783          	lw	a5,-20(s0)
20404e2e:	479c                	lw	a5,8(a5)
20404e30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20404e34:	fec42783          	lw	a5,-20(s0)
20404e38:	479c                	lw	a5,8(a5)
20404e3a:	fbe5                	bnez	a5,20404e2a <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20404e3c:	fec42783          	lw	a5,-20(s0)
20404e40:	fd842703          	lw	a4,-40(s0)
20404e44:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20404e46:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20404e4a:	853e                	mv	a0,a5
20404e4c:	5432                	lw	s0,44(sp)
20404e4e:	6145                	addi	sp,sp,48
20404e50:	8082                	ret

20404e52 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404e52:	1101                	addi	sp,sp,-32
20404e54:	ce06                	sw	ra,28(sp)
20404e56:	cc22                	sw	s0,24(sp)
20404e58:	1000                	addi	s0,sp,32
20404e5a:	fea42623          	sw	a0,-20(s0)
20404e5e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20404e62:	fec42783          	lw	a5,-20(s0)
20404e66:	43dc                	lw	a5,4(a5)
20404e68:	fe842583          	lw	a1,-24(s0)
20404e6c:	853e                	mv	a0,a5
20404e6e:	3f41                	jal	20404dfe <_metal_clock_append_to_callbacks>
20404e70:	872a                	mv	a4,a0
20404e72:	fec42783          	lw	a5,-20(s0)
20404e76:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20404e78:	0001                	nop
20404e7a:	40f2                	lw	ra,28(sp)
20404e7c:	4462                	lw	s0,24(sp)
20404e7e:	6105                	addi	sp,sp,32
20404e80:	8082                	ret

20404e82 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404e82:	1101                	addi	sp,sp,-32
20404e84:	ce06                	sw	ra,28(sp)
20404e86:	cc22                	sw	s0,24(sp)
20404e88:	1000                	addi	s0,sp,32
20404e8a:	fea42623          	sw	a0,-20(s0)
20404e8e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20404e92:	fec42783          	lw	a5,-20(s0)
20404e96:	479c                	lw	a5,8(a5)
20404e98:	fe842583          	lw	a1,-24(s0)
20404e9c:	853e                	mv	a0,a5
20404e9e:	3785                	jal	20404dfe <_metal_clock_append_to_callbacks>
20404ea0:	872a                	mv	a4,a0
20404ea2:	fec42783          	lw	a5,-20(s0)
20404ea6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20404ea8:	0001                	nop
20404eaa:	40f2                	lw	ra,28(sp)
20404eac:	4462                	lw	s0,24(sp)
20404eae:	6105                	addi	sp,sp,32
20404eb0:	8082                	ret

20404eb2 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20404eb2:	1101                	addi	sp,sp,-32
20404eb4:	ce06                	sw	ra,28(sp)
20404eb6:	cc22                	sw	s0,24(sp)
20404eb8:	1000                	addi	s0,sp,32
20404eba:	fea42623          	sw	a0,-20(s0)
20404ebe:	fec42783          	lw	a5,-20(s0)
20404ec2:	439c                	lw	a5,0(a5)
20404ec4:	57dc                	lw	a5,44(a5)
20404ec6:	fec42503          	lw	a0,-20(s0)
20404eca:	9782                	jalr	a5
20404ecc:	87aa                	mv	a5,a0
20404ece:	853e                	mv	a0,a5
20404ed0:	40f2                	lw	ra,28(sp)
20404ed2:	4462                	lw	s0,24(sp)
20404ed4:	6105                	addi	sp,sp,32
20404ed6:	8082                	ret

20404ed8 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20404ed8:	1101                	addi	sp,sp,-32
20404eda:	ce22                	sw	s0,28(sp)
20404edc:	1000                	addi	s0,sp,32
20404ede:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20404ee2:	fec42783          	lw	a5,-20(s0)
20404ee6:	eb89                	bnez	a5,20404ef8 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20404ee8:	fec42703          	lw	a4,-20(s0)
20404eec:	070a                	slli	a4,a4,0x2
20404eee:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_cpu_table>
20404ef2:	97ba                	add	a5,a5,a4
20404ef4:	439c                	lw	a5,0(a5)
20404ef6:	a011                	j	20404efa <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20404ef8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20404efa:	853e                	mv	a0,a5
20404efc:	4472                	lw	s0,28(sp)
20404efe:	6105                	addi	sp,sp,32
20404f00:	8082                	ret

20404f02 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20404f02:	1101                	addi	sp,sp,-32
20404f04:	ce22                	sw	s0,28(sp)
20404f06:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20404f08:	f14027f3          	csrr	a5,mhartid
20404f0c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20404f10:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20404f14:	853e                	mv	a0,a5
20404f16:	4472                	lw	s0,28(sp)
20404f18:	6105                	addi	sp,sp,32
20404f1a:	8082                	ret

20404f1c <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20404f1c:	1101                	addi	sp,sp,-32
20404f1e:	ce22                	sw	s0,28(sp)
20404f20:	1000                	addi	s0,sp,32
20404f22:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20404f26:	0001                	nop
20404f28:	bffd                	j	20404f26 <metal_shutdown+0xa>
	...

20404f80 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20404f80:	c92fd06f          	j	20402412 <metal_interrupt_vector_handler>

20404f84 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20404f84:	c8efd06f          	j	20402412 <metal_interrupt_vector_handler>

20404f88 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20404f88:	c8afd06f          	j	20402412 <metal_interrupt_vector_handler>

20404f8c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20404f8c:	cb4fd06f          	j	20402440 <metal_software_interrupt_vector_handler>

20404f90 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20404f90:	c82fd06f          	j	20402412 <metal_interrupt_vector_handler>

20404f94 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20404f94:	c7efd06f          	j	20402412 <metal_interrupt_vector_handler>

20404f98 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20404f98:	c7afd06f          	j	20402412 <metal_interrupt_vector_handler>

20404f9c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20404f9c:	d96fd06f          	j	20402532 <metal_timer_interrupt_vector_handler>

20404fa0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20404fa0:	c72fd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fa4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20404fa4:	c6efd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fa8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20404fa8:	c6afd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20404fac:	c66fd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fb0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20404fb0:	c62fd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fb4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20404fb4:	c5efd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fb8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20404fb8:	c5afd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fbc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20404fbc:	c56fd06f          	j	20402412 <metal_interrupt_vector_handler>

20404fc0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20404fc0:	835fd06f          	j	204027f4 <metal_lc0_interrupt_vector_handler>

20404fc4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20404fc4:	8c3fd06f          	j	20402886 <metal_lc1_interrupt_vector_handler>

20404fc8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20404fc8:	951fd06f          	j	20402918 <metal_lc2_interrupt_vector_handler>

20404fcc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20404fcc:	9dffd06f          	j	204029aa <metal_lc3_interrupt_vector_handler>

20404fd0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20404fd0:	a6dfd06f          	j	20402a3c <metal_lc4_interrupt_vector_handler>

20404fd4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20404fd4:	afbfd06f          	j	20402ace <metal_lc5_interrupt_vector_handler>

20404fd8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20404fd8:	b89fd06f          	j	20402b60 <metal_lc6_interrupt_vector_handler>

20404fdc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20404fdc:	c17fd06f          	j	20402bf2 <metal_lc7_interrupt_vector_handler>

20404fe0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20404fe0:	ca5fd06f          	j	20402c84 <metal_lc8_interrupt_vector_handler>

20404fe4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20404fe4:	d33fd06f          	j	20402d16 <metal_lc9_interrupt_vector_handler>

20404fe8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20404fe8:	dc1fd06f          	j	20402da8 <metal_lc10_interrupt_vector_handler>

20404fec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20404fec:	e4ffd06f          	j	20402e3a <metal_lc11_interrupt_vector_handler>

20404ff0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20404ff0:	eddfd06f          	j	20402ecc <metal_lc12_interrupt_vector_handler>

20404ff4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20404ff4:	f6bfd06f          	j	20402f5e <metal_lc13_interrupt_vector_handler>

20404ff8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20404ff8:	ff9fd06f          	j	20402ff0 <metal_lc14_interrupt_vector_handler>

20404ffc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20404ffc:	886fe06f          	j	20403082 <metal_lc15_interrupt_vector_handler>

20405000 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:120
{
20405000:	1101                	addi	sp,sp,-32
20405002:	ce22                	sw	s0,28(sp)
20405004:	1000                	addi	s0,sp,32
20405006:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040500a:	fec42703          	lw	a4,-20(s0)
2040500e:	800007b7          	lui	a5,0x80000
20405012:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffec4c>
20405016:	00f71763          	bne	a4,a5,20405024 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040501a:	03dfd7b7          	lui	a5,0x3dfd
2040501e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405022:	a011                	j	20405026 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:125
		return 0;
20405024:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:127
}
20405026:	853e                	mv	a0,a5
20405028:	4472                	lw	s0,28(sp)
2040502a:	6105                	addi	sp,sp,32
2040502c:	8082                	ret

2040502e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040502e:	1101                	addi	sp,sp,-32
20405030:	ce06                	sw	ra,28(sp)
20405032:	cc22                	sw	s0,24(sp)
20405034:	1000                	addi	s0,sp,32
20405036:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040503a:	fec42503          	lw	a0,-20(s0)
2040503e:	37c9                	jal	20405000 <__metal_driver_fixed_clock_rate>
20405040:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405042:	853e                	mv	a0,a5
20405044:	40f2                	lw	ra,28(sp)
20405046:	4462                	lw	s0,24(sp)
20405048:	6105                	addi	sp,sp,32
2040504a:	8082                	ret

2040504c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040504c:	1101                	addi	sp,sp,-32
2040504e:	ce06                	sw	ra,28(sp)
20405050:	cc22                	sw	s0,24(sp)
20405052:	1000                	addi	s0,sp,32
20405054:	fea42623          	sw	a0,-20(s0)
20405058:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040505c:	fec42503          	lw	a0,-20(s0)
20405060:	37f9                	jal	2040502e <__metal_driver_fixed_clock_get_rate_hz>
20405062:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405064:	853e                	mv	a0,a5
20405066:	40f2                	lw	ra,28(sp)
20405068:	4462                	lw	s0,24(sp)
2040506a:	6105                	addi	sp,sp,32
2040506c:	8082                	ret

2040506e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040506e:	1101                	addi	sp,sp,-32
20405070:	ce06                	sw	ra,28(sp)
20405072:	cc22                	sw	s0,24(sp)
20405074:	1000                	addi	s0,sp,32
20405076:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040507a:	fec42503          	lw	a0,-20(s0)
2040507e:	3d79                	jal	20404f1c <metal_shutdown>
