
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/debug/AsconHash.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/debug/AsconHash.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00006054 memsz 0x00006054 flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x000014a4 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x20406058 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00009730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000196  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005982  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000004cc  20405b84  20405b84  00006b84  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20406050  20406050  00007050  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20406058  00008000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000008a4  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  80001fd4  80001fd4  00007730  2**0  ALLOC
  7 .heap             00000800  800023d4  800023d4  00007730  2**0  ALLOC
  8 .debug_info       00014c84  00000000  00000000  00009730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000027bb  00000000  00000000  0001e3b4  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000930  00000000  00000000  00020b70  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007c8  00000000  00000000  000214a0  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000095b9  00000000  00000000  00021c68  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003838  00000000  00000000  0002b221  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002ea59  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002ea81  2**0  CONTENTS, READONLY
 16 .debug_frame      00002668  00000000  00000000  0002eaac  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405b84 l    d  .rodata	00000000 .rodata
20406050 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80001fd4 l    d  .stack	00000000 .stack
800023d4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
20405cfc l       .rodata	00000000 argv
20405d00 l       .rodata	00000000 envp
20405d04 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconHash.c
2040030a l     F .text	00000404 ROUND
2040070e l     F .text	0000008e P12
80000000 l     O .data	000007d0 asso_text.2823
800007d0 l     O .data	000007d0 plain_text.2822
8000173c l     O .bss	000007e0 cipher_text.2824
80000fa0 l     O .data	00000010 Key.2828
80000fb0 l     O .data	00000010 Nonce.2825
80001f1c l     O .bss	00000028 hash.2827
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
204012f2 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20401842 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80001f44 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
2040251a l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204025c4 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
204025ea l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
2040260e l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
2040264a l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
204027aa l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402ce8 l     F .text	00000024 __metal_driver_cpu_hartid
20402d0c l     F .text	0000002a __metal_driver_cpu_timebase
20402d36 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
2040459a l     F .text	0000002a __metal_driver_sifive_plic0_control_base
204045c4 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204045ec l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404614 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
2040463c l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404b94 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404bba l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404be4 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
2040544e l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20405478 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
204054a6 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
204054ce l     F .text	0000002e __metal_driver_sifive_uart0_clock
204054fc l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20405526 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20405550 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405748 l     F .text	000000d8 pre_rate_change_callback_func
20405820 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty_a-vector.o
20405a80 l       .text	00000000 IRQ_0
20405a84 l       .text	00000000 IRQ_1
20405a88 l       .text	00000000 IRQ_2
20405a8c l       .text	00000000 IRQ_3
20405a90 l       .text	00000000 IRQ_4
20405a94 l       .text	00000000 IRQ_5
20405a98 l       .text	00000000 IRQ_6
20405a9c l       .text	00000000 IRQ_7
20405aa0 l       .text	00000000 IRQ_8
20405aa4 l       .text	00000000 IRQ_9
20405aa8 l       .text	00000000 IRQ_10
20405aac l       .text	00000000 IRQ_11
20405ab0 l       .text	00000000 IRQ_12
20405ab4 l       .text	00000000 IRQ_13
20405ab8 l       .text	00000000 IRQ_14
20405abc l       .text	00000000 IRQ_15
20405ac0 l       .text	00000000 IRQ_LC0
20405ac4 l       .text	00000000 IRQ_LC1
20405ac8 l       .text	00000000 IRQ_LC2
20405acc l       .text	00000000 IRQ_LC3
20405ad0 l       .text	00000000 IRQ_LC4
20405ad4 l       .text	00000000 IRQ_LC5
20405ad8 l       .text	00000000 IRQ_LC6
20405adc l       .text	00000000 IRQ_LC7
20405ae0 l       .text	00000000 IRQ_LC8
20405ae4 l       .text	00000000 IRQ_LC9
20405ae8 l       .text	00000000 IRQ_LC10
20405aec l       .text	00000000 IRQ_LC11
20405af0 l       .text	00000000 IRQ_LC12
20405af4 l       .text	00000000 IRQ_LC13
20405af8 l       .text	00000000 IRQ_LC14
20405afc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405b00 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20406054 l       .init_array	00000000 __fini_array_end
20406054 l       .init_array	00000000 __fini_array_start
20406054 l       .init_array	00000000 __init_array_end
20406050 l       .init_array	00000000 __preinit_array_end
20406050 l       .init_array	00000000 __init_array_start
20406050 l       .init_array	00000000 __preinit_array_start
20400dde g     F .text	0000002c putchar
2040602c g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401ca8 g     F .text	00000028 _isatty_r
2040353e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400e8c g     F .text	000000da _puts_r
20401cd0 g     F .text	0000002c _lseek_r
204056a8 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20402986 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204034ac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
2040098e g     F .text	0000001e rdcycle
20403cfe g     F .text	00000038 __metal_valid_interrupt_id
20400d9a g     F .text	00000044 printf
20404128 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
20405922 g     F .text	00000054 _metal_clock_append_to_callbacks
2040468c g     F .text	00000038 __metal_plic0_complete_interrupt
20403f80 g     F .text	00000150 __metal_driver_riscv_cpu_controller_interrupt_register
20401bee g     F .text	00000036 __sseek
204013a8 g     F .text	0000006a __sinit
20400f74 g     F .text	000000c0 __swbuf_r
20401364 g     F .text	00000044 __sfmoreglue
20401d18 g     F .text	00000002 __malloc_unlock
204059fe g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20405028 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405d10 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80001fd4 g       .bss	00000000 metal_segment_bss_target_end
2040267a g     F .text	0000009a __metal_clint0_mtime_get
2040452e g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404dd8 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
204022a2 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
204055be g     F .text	00000034 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
20402714 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401c7e g     F .text	0000002a _fstat_r
20405278 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80001fd0 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405976 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403818  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405f64 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405f24 g     O .rodata	00000040 __metal_driver_vtable_cpu
20402596 g     F .text	0000002e metal_uart_set_baud_rate
20405850 g     F .text	000000d2 __metal_driver_sifive_uart0_init
204041bc g     F .text	00000072 __metal_driver_cpu_mcycle_get
800023d4 g       .heap	00000000 metal_segment_heap_target_start
2040135a g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403786  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400f66 g     F .text	0000000e puts
20403a60  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402eca g     F .text	00000018 __metal_default_exception_handler
20402116 g     F .text	00000026 _fstat
20402cb4 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404728 g     F .text	00000062 __metal_plic0_set_priority
20404144 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402d60 g     F .text	0000002c __metal_driver_cpu_get
20405ed8 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402dbe g     F .text	00000018 __metal_interrupt_global_disable
204036f4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204038aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401b48 g     F .text	00000028 _sbrk_r
20404b4c g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403df2 g     F .text	0000004e __metal_exception_register
204020c8 g     F .text	0000002c _read_r
20404350 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404eba g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402fb6 g     F .text	00000064 __metal_default_sw_handler
204059a6 g     F .text	00000032 metal_clock_register_post_rate_change_callback
2040557a g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
2040213c g     F .text	00000020 _isatty
20404f80 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
2040301a  w    F .text	00000090 metal_timer_interrupt_vector_handler
20402312 g     F .text	0000006a __libc_init_array
20404efa g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040393c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204040d0 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
204021b0 g     F .text	0000007a _sbrk
20404e74 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
20402e20 g     F .text	0000001a __metal_interrupt_timer_disable
20405072 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404406 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405ff0 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404fc0 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
204022da g     F .text	00000038 __libc_fini_array
20405400 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20404390 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402e72 g     F .text	0000002c __metal_interrupt_local_enable
20402c80 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
204024c8 g     F .text	0000002c metal_tty_putc
2040484e g     F .text	00000018 __metal_plic0_default_handler
20400e0a g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405c60 g     O .rodata	00000020 __sf_fake_stderr
20402e56 g     F .text	0000001c __metal_interrupt_external_disable
2040559a g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
204041a0 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20403e40 g     F .text	00000140 __metal_driver_riscv_cpu_controller_interrupt_init
2040186c g     F .text	00000042 __sfputs_r
204044e8 g     F .text	00000046 __metal_driver_cpu_exception_register
20402dd6 g     F .text	00000018 __metal_interrupt_software_enable
20403388  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401cfc g     F .text	0000001a memchr
204016b8 g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
20403c16 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20402400 g     F .text	000000c8 __call_exitprocs
800023d4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040215c g     F .text	0000002a _lseek
204044c8 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
2040455c g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402e3a g     F .text	0000001c __metal_interrupt_external_enable
2040237c g     F .text	00000084 __register_exitproc
204055f2 g     F .text	00000040 __metal_driver_sifive_uart0_putc
204048fa g     F .text	00000148 __metal_driver_riscv_plic0_init
20404b04 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404e48 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000be printC
20403662  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402d8c g     F .text	0000001a __metal_myhart_id
20405420 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204002be g     F .text	0000004c HASH
20402f28  w    F .text	0000008e metal_software_interrupt_vector_handler
204040fc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401c56 g     F .text	00000028 _close_r
20405688 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
2040079c g     F .text	000001f2 crypto_hash
20402868 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20401034 g     F .text	00000110 __swsetup_r
20401412 g     F .text	0000009e __sfp
20401b70 g     F .text	00000030 __sread
20404d98 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
20402efa  w    F .text	0000002e metal_interrupt_vector_handler
20401d16 g     F .text	00000002 __malloc_lock
2040128e g     F .text	00000064 _fflush_r
204046fc g     F .text	0000002c __metal_plic0_get_threshold
20405c80 g     O .rodata	00000020 __sf_fake_stdin
20403d36 g     F .text	000000bc __metal_local_interrupt_enable
20402b4a g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20401610 g     F .text	000000a8 memset
204035d0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204009ac g     F .text	000003ee main
80001730 g       .data	00000000 metal_segment_data_target_end
204043a4 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20404468 g     F .text	00000060 __metal_driver_cpu_get_msip
20405a42 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
2040457a g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2040465e g     F .text	0000002e __metal_plic0_claim_interrupt
20401c24 g     F .text	00000006 __sclose
204039ce  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20401764 g     F .text	000000de _malloc_r
2040296a g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
2040422e g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405a28 g     F .text	0000001a metal_cpu_get_current_hartid
20405a80 g       .text	00000000 __metal_vector_table
20406058 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20400d9a g     F .text	00000044 iprintf
20402da6 g     F .text	00000018 __metal_interrupt_global_enable
20402298 g     F .text	0000000a atexit
204024f4 g     F .text	00000026 metal_tty_putc_raw
20401c2a g     F .text	0000002c _write_r
20402e06 g     F .text	0000001a __metal_interrupt_timer_enable
20405632 g     F .text	00000056 __metal_driver_sifive_uart0_getc
20402a92 g     F .text	000000b8 __metal_driver_riscv_clint0_disable
20401d1a g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
204042da g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20401144 g     F .text	0000014a __sflush_r
20405b2e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204029da g     F .text	000000b8 __metal_driver_riscv_clint0_enable
20406058 g       *ABS*	00000000 metal_segment_data_source_start
80002bd4 g       .heap	00000000 metal_segment_heap_target_end
20403c66 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
2040151c g     F .text	00000058 __swhatbuf_r
20404f3a g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204030aa g     F .text	0000006a __metal_default_timer_handler
2040222a g     F .text	0000006e _write
20404866 g     F .text	00000094 __metal_plic0_handler
2040341a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403b84  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204059d8 g     F .text	00000026 metal_cpu_interrupt_controller
20401ba0 g     F .text	0000004e __swrite
204022ae g     F .text	0000002c exit
204018ae g     F .text	0000029a _vfiprintf_r
204014b0 g     F .text	0000006c _fwalk_reent
20405b4c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405ca0 g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
20402ee2 g     F .text	00000018 __metal_default_interrupt_handler
20402568 g     F .text	0000002e metal_uart_putc
20402186 g     F .text	0000002a _read
20404e1e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20403180 g     F .text	00000150 __metal_exception_handler
204032f6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
20405b6e g     F .text	00000014 _exit
20404274 g     F .text	00000066 __metal_driver_cpu_mtime_get
20401574 g     F .text	0000009c __smakebuf_r
20402942 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401e26 g     F .text	000002a2 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
20403af2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
204027e0 g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
204018ae g     F .text	0000029a _vfprintf_r
20404366 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204047c0 g     F .text	0000008e __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
2040437a g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402e9e g     F .text	0000002c __metal_interrupt_local_disable
20402dee g     F .text	00000018 __metal_interrupt_software_disable
2040478a g     F .text	00000036 __metal_plic0_get_priority
2040253c g     F .text	0000002c metal_uart_init
204046c4 g     F .text	00000038 __metal_plic0_set_threshold
204020f4 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404a42 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	4cc18113          	addi	sp,gp,1228 # 800023d4 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00006297          	auipc	t0,0x6
204000ac:	fb028293          	addi	t0,t0,-80 # 20406058 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00006297          	auipc	t0,0x6
204000d8:	f8428293          	addi	t0,t0,-124 # 20406058 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc01317          	auipc	t1,0x5fc01
2040010c:	62830313          	addi	t1,t1,1576 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	0cc18393          	addi	t2,gp,204 # 80001fd4 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	1b450513          	addi	a0,a0,436 # 204022da <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	16a020ef          	jal	ra,20402298 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	1e0020ef          	jal	ra,20402312 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00006597          	auipc	a1,0x6
2040015e:	ba258593          	addi	a1,a1,-1118 # 20405cfc <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00006617          	auipc	a2,0x6
20400166:	b9e60613          	addi	a2,a2,-1122 # 20405d00 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	142020ef          	jal	ra,204022ae <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	021000ef          	jal	ra,204009ac <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400190:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400192:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400194:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:46

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:49 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a881                	j	204002a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:50
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e781                	bnez	a5,20400262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:51
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	381000ef          	jal	ra,20400dde <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:53
        }
        printf("%08x ", arr[i], i);
20400262:	fec42783          	lw	a5,-20(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fdc42703          	lw	a4,-36(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	439c                	lw	a5,0(a5)
20400270:	fec42603          	lw	a2,-20(s0)
20400274:	85be                	mv	a1,a5
20400276:	204067b7          	lui	a5,0x20406
2040027a:	b8478513          	addi	a0,a5,-1148 # 20405b84 <_exit+0x16>
2040027e:	31d000ef          	jal	ra,20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:54
        if (del) {
20400282:	fd042783          	lw	a5,-48(s0)
20400286:	cb89                	beqz	a5,20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:55
            arr[i] = 0;
20400288:	fec42783          	lw	a5,-20(s0)
2040028c:	078a                	slli	a5,a5,0x2
2040028e:	fdc42703          	lw	a4,-36(s0)
20400292:	97ba                	add	a5,a5,a4
20400294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:49 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400298:	fec42783          	lw	a5,-20(s0)
2040029c:	0785                	addi	a5,a5,1
2040029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:49 (discriminator 1)
204002a2:	fec42703          	lw	a4,-20(s0)
204002a6:	fe842783          	lw	a5,-24(s0)
204002aa:	faf745e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:58
        }
    }
    printf("\n");
204002ae:	4529                	li	a0,10
204002b0:	32f000ef          	jal	ra,20400dde <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:59
}
204002b4:	0001                	nop
204002b6:	50b2                	lw	ra,44(sp)
204002b8:	5422                	lw	s0,40(sp)
204002ba:	6145                	addi	sp,sp,48
204002bc:	8082                	ret

204002be <HASH>:
HASH():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:149
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
}

u32 HASH(u32 *m_addr, u32 m_len,
         u32 *h_addr) {
204002be:	7179                	addi	sp,sp,-48
204002c0:	d622                	sw	s0,44(sp)
204002c2:	1800                	addi	s0,sp,48
204002c4:	fca42e23          	sw	a0,-36(s0)
204002c8:	fcb42c23          	sw	a1,-40(s0)
204002cc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:152
    u32 rd;
    //printf("Init Hash\n");
    asm volatile("fence");
204002d0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:153
    ROCC_INSTRUCTION_DSS(0, rd, m_addr, m_len, Hash_Set_M);
204002d4:	fdc42783          	lw	a5,-36(s0)
204002d8:	85be                	mv	a1,a5
204002da:	fd842603          	lw	a2,-40(s0)
204002de:	62c5f50b          	0x62c5f50b
204002e2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:154
    asm volatile("fence":: : "memory");
204002e6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:157
    //printf("Set M : %08x \n", rd);

    asm volatile("fence");
204002ea:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:158
    ROCC_INSTRUCTION_DS(0, rd, h_addr, Hash_Init);
204002ee:	fd442783          	lw	a5,-44(s0)
204002f2:	85be                	mv	a1,a5
204002f4:	6405e50b          	0x6405e50b
204002f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:159
    asm volatile("fence":: : "memory");
204002fc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:161
    //printf(" Finish Hash: %08x \n", rd);
    return 0;
20400300:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:162
}
20400302:	853e                	mv	a0,a5
20400304:	5432                	lw	s0,44(sp)
20400306:	6145                	addi	sp,sp,48
20400308:	8082                	ret

2040030a <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
2040030a:	711d                	addi	sp,sp,-96
2040030c:	cea2                	sw	s0,92(sp)
2040030e:	1080                	addi	s0,sp,96
20400310:	faa42623          	sw	a0,-84(s0)
20400314:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
20400318:	fac42783          	lw	a5,-84(s0)
2040031c:	4fd8                	lw	a4,28(a5)
2040031e:	fa842783          	lw	a5,-88(s0)
20400322:	8f3d                	xor	a4,a4,a5
20400324:	fac42783          	lw	a5,-84(s0)
20400328:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
2040032a:	fac42783          	lw	a5,-84(s0)
2040032e:	4398                	lw	a4,0(a5)
20400330:	fac42783          	lw	a5,-84(s0)
20400334:	4b9c                	lw	a5,16(a5)
20400336:	8f3d                	xor	a4,a4,a5
20400338:	fac42783          	lw	a5,-84(s0)
2040033c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
2040033e:	fac42783          	lw	a5,-84(s0)
20400342:	4bd8                	lw	a4,20(a5)
20400344:	fac42783          	lw	a5,-84(s0)
20400348:	53dc                	lw	a5,36(a5)
2040034a:	8f3d                	xor	a4,a4,a5
2040034c:	fac42783          	lw	a5,-84(s0)
20400350:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
20400352:	fac42783          	lw	a5,-84(s0)
20400356:	4b98                	lw	a4,16(a5)
20400358:	fac42783          	lw	a5,-84(s0)
2040035c:	47dc                	lw	a5,12(a5)
2040035e:	8f3d                	xor	a4,a4,a5
20400360:	fac42783          	lw	a5,-84(s0)
20400364:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
20400366:	fac42783          	lw	a5,-84(s0)
2040036a:	53d8                	lw	a4,36(a5)
2040036c:	fac42783          	lw	a5,-84(s0)
20400370:	539c                	lw	a5,32(a5)
20400372:	8f3d                	xor	a4,a4,a5
20400374:	fac42783          	lw	a5,-84(s0)
20400378:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
2040037a:	fac42783          	lw	a5,-84(s0)
2040037e:	4798                	lw	a4,8(a5)
20400380:	fac42783          	lw	a5,-84(s0)
20400384:	43dc                	lw	a5,4(a5)
20400386:	8f3d                	xor	a4,a4,a5
20400388:	fac42783          	lw	a5,-84(s0)
2040038c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
2040038e:	fac42783          	lw	a5,-84(s0)
20400392:	4fd8                	lw	a4,28(a5)
20400394:	fac42783          	lw	a5,-84(s0)
20400398:	4f9c                	lw	a5,24(a5)
2040039a:	8f3d                	xor	a4,a4,a5
2040039c:	fac42783          	lw	a5,-84(s0)
204003a0:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
204003a2:	fac42783          	lw	a5,-84(s0)
204003a6:	4398                	lw	a4,0(a5)
204003a8:	fac42783          	lw	a5,-84(s0)
204003ac:	43dc                	lw	a5,4(a5)
204003ae:	fff7c693          	not	a3,a5
204003b2:	fac42783          	lw	a5,-84(s0)
204003b6:	479c                	lw	a5,8(a5)
204003b8:	8ff5                	and	a5,a5,a3
204003ba:	8fb9                	xor	a5,a5,a4
204003bc:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
204003c0:	fac42783          	lw	a5,-84(s0)
204003c4:	4bd8                	lw	a4,20(a5)
204003c6:	fac42783          	lw	a5,-84(s0)
204003ca:	4f9c                	lw	a5,24(a5)
204003cc:	fff7c693          	not	a3,a5
204003d0:	fac42783          	lw	a5,-84(s0)
204003d4:	4fdc                	lw	a5,28(a5)
204003d6:	8ff5                	and	a5,a5,a3
204003d8:	8fb9                	xor	a5,a5,a4
204003da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
204003de:	fac42783          	lw	a5,-84(s0)
204003e2:	43d8                	lw	a4,4(a5)
204003e4:	fac42783          	lw	a5,-84(s0)
204003e8:	479c                	lw	a5,8(a5)
204003ea:	fff7c693          	not	a3,a5
204003ee:	fac42783          	lw	a5,-84(s0)
204003f2:	47dc                	lw	a5,12(a5)
204003f4:	8ff5                	and	a5,a5,a3
204003f6:	8fb9                	xor	a5,a5,a4
204003f8:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
204003fc:	fac42783          	lw	a5,-84(s0)
20400400:	4f98                	lw	a4,24(a5)
20400402:	fac42783          	lw	a5,-84(s0)
20400406:	4fdc                	lw	a5,28(a5)
20400408:	fff7c693          	not	a3,a5
2040040c:	fac42783          	lw	a5,-84(s0)
20400410:	539c                	lw	a5,32(a5)
20400412:	8ff5                	and	a5,a5,a3
20400414:	8fb9                	xor	a5,a5,a4
20400416:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
2040041a:	fac42783          	lw	a5,-84(s0)
2040041e:	4798                	lw	a4,8(a5)
20400420:	fac42783          	lw	a5,-84(s0)
20400424:	47dc                	lw	a5,12(a5)
20400426:	fff7c693          	not	a3,a5
2040042a:	fac42783          	lw	a5,-84(s0)
2040042e:	4b9c                	lw	a5,16(a5)
20400430:	8ff5                	and	a5,a5,a3
20400432:	8fb9                	xor	a5,a5,a4
20400434:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
20400438:	fac42783          	lw	a5,-84(s0)
2040043c:	4fd8                	lw	a4,28(a5)
2040043e:	fac42783          	lw	a5,-84(s0)
20400442:	539c                	lw	a5,32(a5)
20400444:	fff7c693          	not	a3,a5
20400448:	fac42783          	lw	a5,-84(s0)
2040044c:	53dc                	lw	a5,36(a5)
2040044e:	8ff5                	and	a5,a5,a3
20400450:	8fb9                	xor	a5,a5,a4
20400452:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
20400456:	fac42783          	lw	a5,-84(s0)
2040045a:	47d8                	lw	a4,12(a5)
2040045c:	fac42783          	lw	a5,-84(s0)
20400460:	4b9c                	lw	a5,16(a5)
20400462:	fff7c693          	not	a3,a5
20400466:	fac42783          	lw	a5,-84(s0)
2040046a:	439c                	lw	a5,0(a5)
2040046c:	8ff5                	and	a5,a5,a3
2040046e:	8fb9                	xor	a5,a5,a4
20400470:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
20400474:	fac42783          	lw	a5,-84(s0)
20400478:	5398                	lw	a4,32(a5)
2040047a:	fac42783          	lw	a5,-84(s0)
2040047e:	53dc                	lw	a5,36(a5)
20400480:	fff7c693          	not	a3,a5
20400484:	fac42783          	lw	a5,-84(s0)
20400488:	4bdc                	lw	a5,20(a5)
2040048a:	8ff5                	and	a5,a5,a3
2040048c:	8fb9                	xor	a5,a5,a4
2040048e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
20400492:	fac42783          	lw	a5,-84(s0)
20400496:	4b98                	lw	a4,16(a5)
20400498:	fac42783          	lw	a5,-84(s0)
2040049c:	439c                	lw	a5,0(a5)
2040049e:	fff7c693          	not	a3,a5
204004a2:	fac42783          	lw	a5,-84(s0)
204004a6:	43dc                	lw	a5,4(a5)
204004a8:	8ff5                	and	a5,a5,a3
204004aa:	8fb9                	xor	a5,a5,a4
204004ac:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
204004b0:	fac42783          	lw	a5,-84(s0)
204004b4:	53d8                	lw	a4,36(a5)
204004b6:	fac42783          	lw	a5,-84(s0)
204004ba:	4bdc                	lw	a5,20(a5)
204004bc:	fff7c693          	not	a3,a5
204004c0:	fac42783          	lw	a5,-84(s0)
204004c4:	4f9c                	lw	a5,24(a5)
204004c6:	8ff5                	and	a5,a5,a3
204004c8:	8fb9                	xor	a5,a5,a4
204004ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
204004ce:	fcc42703          	lw	a4,-52(s0)
204004d2:	fc842783          	lw	a5,-56(s0)
204004d6:	8fb9                	xor	a5,a5,a4
204004d8:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
204004dc:	fc842703          	lw	a4,-56(s0)
204004e0:	fd842783          	lw	a5,-40(s0)
204004e4:	8fb9                	xor	a5,a5,a4
204004e6:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
204004ea:	fd442703          	lw	a4,-44(s0)
204004ee:	fd042783          	lw	a5,-48(s0)
204004f2:	8fb9                	xor	a5,a5,a4
204004f4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
204004f8:	fd042783          	lw	a5,-48(s0)
204004fc:	fff7c793          	not	a5,a5
20400500:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
20400504:	fe042703          	lw	a4,-32(s0)
20400508:	fdc42783          	lw	a5,-36(s0)
2040050c:	8fb9                	xor	a5,a5,a4
2040050e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
20400512:	fdc42703          	lw	a4,-36(s0)
20400516:	fec42783          	lw	a5,-20(s0)
2040051a:	8fb9                	xor	a5,a5,a4
2040051c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
20400520:	fe842703          	lw	a4,-24(s0)
20400524:	fe442783          	lw	a5,-28(s0)
20400528:	8fb9                	xor	a5,a5,a4
2040052a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
2040052e:	fe442783          	lw	a5,-28(s0)
20400532:	fff7c793          	not	a5,a5
20400536:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
2040053a:	fc842703          	lw	a4,-56(s0)
2040053e:	fdc42783          	lw	a5,-36(s0)
20400542:	00d79693          	slli	a3,a5,0xd
20400546:	fc842783          	lw	a5,-56(s0)
2040054a:	83cd                	srli	a5,a5,0x13
2040054c:	8fd5                	or	a5,a5,a3
2040054e:	8f3d                	xor	a4,a4,a5
20400550:	fdc42783          	lw	a5,-36(s0)
20400554:	00479693          	slli	a3,a5,0x4
20400558:	fc842783          	lw	a5,-56(s0)
2040055c:	83f1                	srli	a5,a5,0x1c
2040055e:	8fd5                	or	a5,a5,a3
20400560:	8f3d                	xor	a4,a4,a5
20400562:	fac42783          	lw	a5,-84(s0)
20400566:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
20400568:	fdc42703          	lw	a4,-36(s0)
2040056c:	fc842783          	lw	a5,-56(s0)
20400570:	00d79693          	slli	a3,a5,0xd
20400574:	fdc42783          	lw	a5,-36(s0)
20400578:	83cd                	srli	a5,a5,0x13
2040057a:	8fd5                	or	a5,a5,a3
2040057c:	8f3d                	xor	a4,a4,a5
2040057e:	fc842783          	lw	a5,-56(s0)
20400582:	00479693          	slli	a3,a5,0x4
20400586:	fdc42783          	lw	a5,-36(s0)
2040058a:	83f1                	srli	a5,a5,0x1c
2040058c:	8fd5                	or	a5,a5,a3
2040058e:	8f3d                	xor	a4,a4,a5
20400590:	fac42783          	lw	a5,-84(s0)
20400594:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
20400596:	fcc42703          	lw	a4,-52(s0)
2040059a:	fcc42783          	lw	a5,-52(s0)
2040059e:	00379693          	slli	a3,a5,0x3
204005a2:	fe042783          	lw	a5,-32(s0)
204005a6:	83f5                	srli	a5,a5,0x1d
204005a8:	8fd5                	or	a5,a5,a3
204005aa:	8f3d                	xor	a4,a4,a5
204005ac:	fcc42783          	lw	a5,-52(s0)
204005b0:	01979693          	slli	a3,a5,0x19
204005b4:	fe042783          	lw	a5,-32(s0)
204005b8:	839d                	srli	a5,a5,0x7
204005ba:	8fd5                	or	a5,a5,a3
204005bc:	8f3d                	xor	a4,a4,a5
204005be:	fac42783          	lw	a5,-84(s0)
204005c2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
204005c4:	fe042703          	lw	a4,-32(s0)
204005c8:	fe042783          	lw	a5,-32(s0)
204005cc:	00379693          	slli	a3,a5,0x3
204005d0:	fcc42783          	lw	a5,-52(s0)
204005d4:	83f5                	srli	a5,a5,0x1d
204005d6:	8fd5                	or	a5,a5,a3
204005d8:	8f3d                	xor	a4,a4,a5
204005da:	fe042783          	lw	a5,-32(s0)
204005de:	01979693          	slli	a3,a5,0x19
204005e2:	fcc42783          	lw	a5,-52(s0)
204005e6:	839d                	srli	a5,a5,0x7
204005e8:	8fd5                	or	a5,a5,a3
204005ea:	8f3d                	xor	a4,a4,a5
204005ec:	fac42783          	lw	a5,-84(s0)
204005f0:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
204005f2:	fd042703          	lw	a4,-48(s0)
204005f6:	fe442783          	lw	a5,-28(s0)
204005fa:	01f79693          	slli	a3,a5,0x1f
204005fe:	fd042783          	lw	a5,-48(s0)
20400602:	8385                	srli	a5,a5,0x1
20400604:	8fd5                	or	a5,a5,a3
20400606:	8f3d                	xor	a4,a4,a5
20400608:	fe442783          	lw	a5,-28(s0)
2040060c:	01a79693          	slli	a3,a5,0x1a
20400610:	fd042783          	lw	a5,-48(s0)
20400614:	8399                	srli	a5,a5,0x6
20400616:	8fd5                	or	a5,a5,a3
20400618:	8f3d                	xor	a4,a4,a5
2040061a:	fac42783          	lw	a5,-84(s0)
2040061e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
20400620:	fe442703          	lw	a4,-28(s0)
20400624:	fd042783          	lw	a5,-48(s0)
20400628:	01f79693          	slli	a3,a5,0x1f
2040062c:	fe442783          	lw	a5,-28(s0)
20400630:	8385                	srli	a5,a5,0x1
20400632:	8fd5                	or	a5,a5,a3
20400634:	8f3d                	xor	a4,a4,a5
20400636:	fd042783          	lw	a5,-48(s0)
2040063a:	01a79693          	slli	a3,a5,0x1a
2040063e:	fe442783          	lw	a5,-28(s0)
20400642:	8399                	srli	a5,a5,0x6
20400644:	8fd5                	or	a5,a5,a3
20400646:	8f3d                	xor	a4,a4,a5
20400648:	fac42783          	lw	a5,-84(s0)
2040064c:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
2040064e:	fd442703          	lw	a4,-44(s0)
20400652:	fe842783          	lw	a5,-24(s0)
20400656:	01679693          	slli	a3,a5,0x16
2040065a:	fd442783          	lw	a5,-44(s0)
2040065e:	83a9                	srli	a5,a5,0xa
20400660:	8fd5                	or	a5,a5,a3
20400662:	8f3d                	xor	a4,a4,a5
20400664:	fe842783          	lw	a5,-24(s0)
20400668:	00f79693          	slli	a3,a5,0xf
2040066c:	fd442783          	lw	a5,-44(s0)
20400670:	83c5                	srli	a5,a5,0x11
20400672:	8fd5                	or	a5,a5,a3
20400674:	8f3d                	xor	a4,a4,a5
20400676:	fac42783          	lw	a5,-84(s0)
2040067a:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
2040067c:	fe842703          	lw	a4,-24(s0)
20400680:	fd442783          	lw	a5,-44(s0)
20400684:	01679693          	slli	a3,a5,0x16
20400688:	fe842783          	lw	a5,-24(s0)
2040068c:	83a9                	srli	a5,a5,0xa
2040068e:	8fd5                	or	a5,a5,a3
20400690:	8f3d                	xor	a4,a4,a5
20400692:	fd442783          	lw	a5,-44(s0)
20400696:	00f79693          	slli	a3,a5,0xf
2040069a:	fe842783          	lw	a5,-24(s0)
2040069e:	83c5                	srli	a5,a5,0x11
204006a0:	8fd5                	or	a5,a5,a3
204006a2:	8f3d                	xor	a4,a4,a5
204006a4:	fac42783          	lw	a5,-84(s0)
204006a8:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
204006aa:	fd842703          	lw	a4,-40(s0)
204006ae:	fec42783          	lw	a5,-20(s0)
204006b2:	01979693          	slli	a3,a5,0x19
204006b6:	fd842783          	lw	a5,-40(s0)
204006ba:	839d                	srli	a5,a5,0x7
204006bc:	8fd5                	or	a5,a5,a3
204006be:	8f3d                	xor	a4,a4,a5
204006c0:	fd842783          	lw	a5,-40(s0)
204006c4:	01779693          	slli	a3,a5,0x17
204006c8:	fec42783          	lw	a5,-20(s0)
204006cc:	83a5                	srli	a5,a5,0x9
204006ce:	8fd5                	or	a5,a5,a3
204006d0:	8f3d                	xor	a4,a4,a5
204006d2:	fac42783          	lw	a5,-84(s0)
204006d6:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
204006d8:	fec42703          	lw	a4,-20(s0)
204006dc:	fd842783          	lw	a5,-40(s0)
204006e0:	01979693          	slli	a3,a5,0x19
204006e4:	fec42783          	lw	a5,-20(s0)
204006e8:	839d                	srli	a5,a5,0x7
204006ea:	8fd5                	or	a5,a5,a3
204006ec:	8f3d                	xor	a4,a4,a5
204006ee:	fec42783          	lw	a5,-20(s0)
204006f2:	01779693          	slli	a3,a5,0x17
204006f6:	fd842783          	lw	a5,-40(s0)
204006fa:	83a5                	srli	a5,a5,0x9
204006fc:	8fd5                	or	a5,a5,a3
204006fe:	8f3d                	xor	a4,a4,a5
20400700:	fac42783          	lw	a5,-84(s0)
20400704:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:107

    //printstate(" round output", s);
}
20400706:	0001                	nop
20400708:	4476                	lw	s0,92(sp)
2040070a:	6125                	addi	sp,sp,96
2040070c:	8082                	ret

2040070e <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
2040070e:	1101                	addi	sp,sp,-32
20400710:	ce06                	sw	ra,28(sp)
20400712:	cc22                	sw	s0,24(sp)
20400714:	1000                	addi	s0,sp,32
20400716:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:111
  ROUND(s, 0xf0);
2040071a:	0f000593          	li	a1,240
2040071e:	fec42503          	lw	a0,-20(s0)
20400722:	36e5                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:112
  ROUND(s, 0xe1);
20400724:	0e100593          	li	a1,225
20400728:	fec42503          	lw	a0,-20(s0)
2040072c:	3ef9                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:113
  ROUND(s, 0xd2);
2040072e:	0d200593          	li	a1,210
20400732:	fec42503          	lw	a0,-20(s0)
20400736:	3ed1                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:114
  ROUND(s, 0xc3);
20400738:	0c300593          	li	a1,195
2040073c:	fec42503          	lw	a0,-20(s0)
20400740:	36e9                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:115
  ROUND(s, 0xb4);
20400742:	0b400593          	li	a1,180
20400746:	fec42503          	lw	a0,-20(s0)
2040074a:	36c1                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:116
  ROUND(s, 0xa5);
2040074c:	0a500593          	li	a1,165
20400750:	fec42503          	lw	a0,-20(s0)
20400754:	3e5d                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:117
  ROUND(s, 0x96);
20400756:	09600593          	li	a1,150
2040075a:	fec42503          	lw	a0,-20(s0)
2040075e:	3675                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:118
  ROUND(s, 0x87);
20400760:	08700593          	li	a1,135
20400764:	fec42503          	lw	a0,-20(s0)
20400768:	364d                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:119
  ROUND(s, 0x78);
2040076a:	07800593          	li	a1,120
2040076e:	fec42503          	lw	a0,-20(s0)
20400772:	3e61                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:120
  ROUND(s, 0x69);
20400774:	06900593          	li	a1,105
20400778:	fec42503          	lw	a0,-20(s0)
2040077c:	3679                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:121
  ROUND(s, 0x5a);
2040077e:	05a00593          	li	a1,90
20400782:	fec42503          	lw	a0,-20(s0)
20400786:	3651                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:122
  ROUND(s, 0x4b);
20400788:	04b00593          	li	a1,75
2040078c:	fec42503          	lw	a0,-20(s0)
20400790:	3ead                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:123
}
20400792:	0001                	nop
20400794:	40f2                	lw	ra,28(sp)
20400796:	4462                	lw	s0,24(sp)
20400798:	6105                	addi	sp,sp,32
2040079a:	8082                	ret

2040079c <crypto_hash>:
crypto_hash():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:251
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
}

int crypto_hash(u32 *m, u32 mlen, u32 *h) {
2040079c:	715d                	addi	sp,sp,-80
2040079e:	c686                	sw	ra,76(sp)
204007a0:	c4a2                	sw	s0,72(sp)
204007a2:	0880                	addi	s0,sp,80
204007a4:	faa42e23          	sw	a0,-68(s0)
204007a8:	fab42c23          	sw	a1,-72(s0)
204007ac:	fac42a23          	sw	a2,-76(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:255

    /* initialize */
    ascon_state_t s;
    s.xh[0] = 0x00400c00;
204007b0:	004017b7          	lui	a5,0x401
204007b4:	c0078793          	addi	a5,a5,-1024 # 400c00 <__heap_size+0x400400>
204007b8:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:256
    s.xl[0] = 0x00000100;
204007bc:	10000793          	li	a5,256
204007c0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:257
    s.xh[1] = 0;
204007c4:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:258
    s.xl[1] = 0;
204007c8:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:259
    s.xh[2] = 0;
204007cc:	fc042623          	sw	zero,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:260
    s.xl[2] = 0;
204007d0:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:261
    s.xh[3] = 0;
204007d4:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:262
    s.xl[3] = 0;
204007d8:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:263
    s.xh[4] = 0;
204007dc:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:264
    s.xl[4] = 0;
204007e0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:266
    //printstate("After init", &s, debug);
    P12(&s);
204007e4:	fc440793          	addi	a5,s0,-60
204007e8:	853e                	mv	a0,a5
204007ea:	3715                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:269


    if (mlen) {
204007ec:	fb842783          	lw	a5,-72(s0)
204007f0:	14078063          	beqz	a5,20400930 <crypto_hash+0x194>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:270
        while (mlen >= 8) {
204007f4:	a0a1                	j	2040083c <crypto_hash+0xa0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:271
            s.xh[0] ^= *m;
204007f6:	fc442703          	lw	a4,-60(s0)
204007fa:	fbc42783          	lw	a5,-68(s0)
204007fe:	439c                	lw	a5,0(a5)
20400800:	8fb9                	xor	a5,a5,a4
20400802:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:272
            m++;
20400806:	fbc42783          	lw	a5,-68(s0)
2040080a:	0791                	addi	a5,a5,4
2040080c:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:273
            s.xl[0] ^= *m;
20400810:	fd842703          	lw	a4,-40(s0)
20400814:	fbc42783          	lw	a5,-68(s0)
20400818:	439c                	lw	a5,0(a5)
2040081a:	8fb9                	xor	a5,a5,a4
2040081c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:274
            m++;
20400820:	fbc42783          	lw	a5,-68(s0)
20400824:	0791                	addi	a5,a5,4
20400826:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:275
            P12(&s);
2040082a:	fc440793          	addi	a5,s0,-60
2040082e:	853e                	mv	a0,a5
20400830:	3df9                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:277
            //printstate("Absorb AD", &s, debug);
            mlen -= 8;
20400832:	fb842783          	lw	a5,-72(s0)
20400836:	17e1                	addi	a5,a5,-8
20400838:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:270
        while (mlen >= 8) {
2040083c:	fb842703          	lw	a4,-72(s0)
20400840:	479d                	li	a5,7
20400842:	fae7eae3          	bltu	a5,a4,204007f6 <crypto_hash+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279
        }
        s.xh[0] ^= TRUNH(mlen, *m);
20400846:	fc442703          	lw	a4,-60(s0)
2040084a:	fb842683          	lw	a3,-72(s0)
2040084e:	4791                	li	a5,4
20400850:	00d7f663          	bgeu	a5,a3,2040085c <crypto_hash+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279 (discriminator 1)
20400854:	fbc42783          	lw	a5,-68(s0)
20400858:	439c                	lw	a5,0(a5)
2040085a:	a025                	j	20400882 <crypto_hash+0xe6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279 (discriminator 2)
2040085c:	fb842783          	lw	a5,-72(s0)
20400860:	c385                	beqz	a5,20400880 <crypto_hash+0xe4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279 (discriminator 4)
20400862:	fbc42783          	lw	a5,-68(s0)
20400866:	4394                	lw	a3,0(a5)
20400868:	fb842603          	lw	a2,-72(s0)
2040086c:	4781                	li	a5,0
2040086e:	8f91                	sub	a5,a5,a2
20400870:	078e                	slli	a5,a5,0x3
20400872:	02078793          	addi	a5,a5,32
20400876:	567d                	li	a2,-1
20400878:	00f617b3          	sll	a5,a2,a5
2040087c:	8ff5                	and	a5,a5,a3
2040087e:	a011                	j	20400882 <crypto_hash+0xe6>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279 (discriminator 5)
20400880:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279 (discriminator 8)
20400882:	8fb9                	xor	a5,a5,a4
20400884:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:280 (discriminator 8)
        m++;
20400888:	fbc42783          	lw	a5,-68(s0)
2040088c:	0791                	addi	a5,a5,4
2040088e:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:281 (discriminator 8)
        s.xl[0] ^= TRUNL(mlen, *m);
20400892:	fd842703          	lw	a4,-40(s0)
20400896:	fb842683          	lw	a3,-72(s0)
2040089a:	4791                	li	a5,4
2040089c:	02d7f163          	bgeu	a5,a3,204008be <crypto_hash+0x122>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:281 (discriminator 1)
204008a0:	fbc42783          	lw	a5,-68(s0)
204008a4:	4394                	lw	a3,0(a5)
204008a6:	fb842603          	lw	a2,-72(s0)
204008aa:	4781                	li	a5,0
204008ac:	8f91                	sub	a5,a5,a2
204008ae:	078e                	slli	a5,a5,0x3
204008b0:	04078793          	addi	a5,a5,64
204008b4:	567d                	li	a2,-1
204008b6:	00f617b3          	sll	a5,a2,a5
204008ba:	8ff5                	and	a5,a5,a3
204008bc:	a011                	j	204008c0 <crypto_hash+0x124>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:281 (discriminator 2)
204008be:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:281 (discriminator 4)
204008c0:	8fb9                	xor	a5,a5,a4
204008c2:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 4)

        s.xh[0] ^= PADH(mlen);
204008c6:	fc442703          	lw	a4,-60(s0)
204008ca:	fb842683          	lw	a3,-72(s0)
204008ce:	478d                	li	a5,3
204008d0:	00d7ea63          	bltu	a5,a3,204008e4 <crypto_hash+0x148>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 1)
204008d4:	fb842783          	lw	a5,-72(s0)
204008d8:	078e                	slli	a5,a5,0x3
204008da:	800006b7          	lui	a3,0x80000
204008de:	00f6d7b3          	srl	a5,a3,a5
204008e2:	a011                	j	204008e6 <crypto_hash+0x14a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 2)
204008e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 4)
204008e6:	8fb9                	xor	a5,a5,a4
204008e8:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 4)
        s.xl[0] ^= PADL(mlen);
204008ec:	fd842703          	lw	a4,-40(s0)
204008f0:	fb842683          	lw	a3,-72(s0)
204008f4:	478d                	li	a5,3
204008f6:	02d7f563          	bgeu	a5,a3,20400920 <crypto_hash+0x184>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 1)
204008fa:	fb842683          	lw	a3,-72(s0)
204008fe:	47a1                	li	a5,8
20400900:	00f68e63          	beq	a3,a5,2040091c <crypto_hash+0x180>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 3)
20400904:	fb842683          	lw	a3,-72(s0)
20400908:	200007b7          	lui	a5,0x20000
2040090c:	17f1                	addi	a5,a5,-4
2040090e:	97b6                	add	a5,a5,a3
20400910:	078e                	slli	a5,a5,0x3
20400912:	800006b7          	lui	a3,0x80000
20400916:	00f6d7b3          	srl	a5,a3,a5
2040091a:	a021                	j	20400922 <crypto_hash+0x186>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 4)
2040091c:	4781                	li	a5,0
2040091e:	a011                	j	20400922 <crypto_hash+0x186>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 2)
20400920:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 8)
20400922:	8fb9                	xor	a5,a5,a4
20400924:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:286 (discriminator 8)
        //printstate("Padded AD", &s, debug);
        P12(&s);
20400928:	fc440793          	addi	a5,s0,-60
2040092c:	853e                	mv	a0,a5
2040092e:	33c5                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:288
    }
    for (int i = 0; i < 4; i++) {
20400930:	fe042623          	sw	zero,-20(s0)
20400934:	a091                	j	20400978 <crypto_hash+0x1dc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:289
        h[i * 2] = s.xh[0];
20400936:	fec42783          	lw	a5,-20(s0)
2040093a:	078e                	slli	a5,a5,0x3
2040093c:	fb442703          	lw	a4,-76(s0)
20400940:	97ba                	add	a5,a5,a4
20400942:	fc442703          	lw	a4,-60(s0)
20400946:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:290
        h[i * 2 + 1] = s.xl[0];
20400948:	fec42783          	lw	a5,-20(s0)
2040094c:	078e                	slli	a5,a5,0x3
2040094e:	0791                	addi	a5,a5,4
20400950:	fb442703          	lw	a4,-76(s0)
20400954:	97ba                	add	a5,a5,a4
20400956:	fd842703          	lw	a4,-40(s0)
2040095a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:291
        if (i < 3) {
2040095c:	fec42703          	lw	a4,-20(s0)
20400960:	4789                	li	a5,2
20400962:	00e7c663          	blt	a5,a4,2040096e <crypto_hash+0x1d2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:292
            P12(&s);
20400966:	fc440793          	addi	a5,s0,-60
2040096a:	853e                	mv	a0,a5
2040096c:	334d                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:288 (discriminator 2)
    for (int i = 0; i < 4; i++) {
2040096e:	fec42783          	lw	a5,-20(s0)
20400972:	0785                	addi	a5,a5,1
20400974:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:288 (discriminator 1)
20400978:	fec42703          	lw	a4,-20(s0)
2040097c:	478d                	li	a5,3
2040097e:	fae7dce3          	bge	a5,a4,20400936 <crypto_hash+0x19a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:296
        }
        //printstate("Hash Round", &s, debug);
    }
    return 0;
20400982:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:297
}
20400984:	853e                	mv	a0,a5
20400986:	40b6                	lw	ra,76(sp)
20400988:	4426                	lw	s0,72(sp)
2040098a:	6161                	addi	sp,sp,80
2040098c:	8082                	ret

2040098e <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:50

#define rdtime() read_csr(time)
// #define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

unsigned rdcycle() {
2040098e:	1101                	addi	sp,sp,-32
20400990:	ce22                	sw	s0,28(sp)
20400992:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:51
  unsigned mcycle = 0;
20400994:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:53

  asm volatile ("csrr %0,mcycle"   : "=r" (mcycle)  );
20400998:	b00027f3          	csrr	a5,mcycle
2040099c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:55

  return mcycle;
204009a0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:56
}
204009a4:	853e                	mv	a0,a5
204009a6:	4472                	lw	s0,28(sp)
204009a8:	6105                	addi	sp,sp,32
204009aa:	8082                	ret

204009ac <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
204009ac:	7179                	addi	sp,sp,-48
204009ae:	d606                	sw	ra,44(sp)
204009b0:	d422                	sw	s0,40(sp)
204009b2:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:7
    u32 plain_len =  1000;
204009b4:	3e800793          	li	a5,1000
204009b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:8
    u32 asso_len = 32; /// CReo que asignaste a memoria
204009bc:	02000793          	li	a5,32
204009c0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:9
    u32 clen = 0;
204009c4:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:11

    u32 plain_len_int = plain_len / 8;
204009c8:	fec42783          	lw	a5,-20(s0)
204009cc:	838d                	srli	a5,a5,0x3
204009ce:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int*2 : plain_len_int*2 +2;
204009d2:	fec42783          	lw	a5,-20(s0)
204009d6:	8b9d                	andi	a5,a5,7
204009d8:	e789                	bnez	a5,204009e2 <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12 (discriminator 1)
204009da:	fe042783          	lw	a5,-32(s0)
204009de:	0786                	slli	a5,a5,0x1
204009e0:	a029                	j	204009ea <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12 (discriminator 2)
204009e2:	fe042783          	lw	a5,-32(s0)
204009e6:	0785                	addi	a5,a5,1
204009e8:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12 (discriminator 4)
204009ea:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:27 (discriminator 4)
    static u32 Key[4] = {0x11111111, 0x22222222, 0x33333333, 0x44444445};

    static u32 *tag_addr;


    printf("Init Ascon Dec \n");
204009ee:	204067b7          	lui	a5,0x20406
204009f2:	b9878513          	addi	a0,a5,-1128 # 20405b98 <_exit+0x2a>
204009f6:	2b85                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:28 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
204009f8:	800007b7          	lui	a5,0x80000
204009fc:	00078593          	mv	a1,a5
20400a00:	204067b7          	lui	a5,0x20406
20400a04:	ba878513          	addi	a0,a5,-1112 # 20405ba8 <_exit+0x3a>
20400a08:	2e49                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:29 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400a0a:	800007b7          	lui	a5,0x80000
20400a0e:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400a12:	204067b7          	lui	a5,0x20406
20400a16:	bb878513          	addi	a0,a5,-1096 # 20405bb8 <_exit+0x4a>
20400a1a:	2641                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:30 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400a1c:	800017b7          	lui	a5,0x80001
20400a20:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20400a24:	204067b7          	lui	a5,0x20406
20400a28:	bc878513          	addi	a0,a5,-1080 # 20405bc8 <_exit+0x5a>
20400a2c:	26bd                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:31 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
20400a2e:	800017b7          	lui	a5,0x80001
20400a32:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffe3cc>
20400a36:	204067b7          	lui	a5,0x20406
20400a3a:	bd878513          	addi	a0,a5,-1064 # 20405bd8 <_exit+0x6a>
20400a3e:	2eb1                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:32 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
20400a40:	800017b7          	lui	a5,0x80001
20400a44:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffe3dc>
20400a48:	204067b7          	lui	a5,0x20406
20400a4c:	be878513          	addi	a0,a5,-1048 # 20405be8 <_exit+0x7a>
20400a50:	26a9                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:33 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20400a52:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2827>
20400a56:	204067b7          	lui	a5,0x20406
20400a5a:	bf878513          	addi	a0,a5,-1032 # 20405bf8 <_exit+0x8a>
20400a5e:	2e35                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:35 (discriminator 4)
    unsigned start, end;
    int rd = 0;
20400a60:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:37 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
20400a64:	67e1                	lui	a5,0x18
20400a66:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:45 (discriminator 4)
    HASH(plain_text,plain_len,hash);
    printf(" Finish Hash: %07x \n", rd);
    printC(hash,9,0,1);*/


    printf("Hash HW: \n");
20400a6a:	204067b7          	lui	a5,0x20406
20400a6e:	c0c78513          	addi	a0,a5,-1012 # 20405c0c <_exit+0x9e>
20400a72:	29d5                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:46 (discriminator 4)
    start = rdcycle();
20400a74:	3f29                	jal	2040098e <rdcycle>
20400a76:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:47 (discriminator 4)
    HASH( plain_text, plain_len, hash);
20400a7a:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400a7e:	fec42583          	lw	a1,-20(s0)
20400a82:	800007b7          	lui	a5,0x80000
20400a86:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400a8a:	835ff0ef          	jal	ra,204002be <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:48 (discriminator 4)
    end = rdcycle();
20400a8e:	3701                	jal	2040098e <rdcycle>
20400a90:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:49 (discriminator 4)
    printf("Total time HW = %d cycles\n",end-start);
20400a94:	fd442703          	lw	a4,-44(s0)
20400a98:	fd842783          	lw	a5,-40(s0)
20400a9c:	40f707b3          	sub	a5,a4,a5
20400aa0:	85be                	mv	a1,a5
20400aa2:	204067b7          	lui	a5,0x20406
20400aa6:	c1878513          	addi	a0,a5,-1000 # 20405c18 <_exit+0xaa>
20400aaa:	2cc5                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:50 (discriminator 4)
    printC(hash, 8 , 1, 1);
20400aac:	4685                	li	a3,1
20400aae:	4605                	li	a2,1
20400ab0:	45a1                	li	a1,8
20400ab2:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2827>
20400ab6:	f4aff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:51 (discriminator 4)
    printf("\nX\n");
20400aba:	204067b7          	lui	a5,0x20406
20400abe:	c3478513          	addi	a0,a5,-972 # 20405c34 <_exit+0xc6>
20400ac2:	2155                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:52 (discriminator 4)
    printf("Hash SW: \n");
20400ac4:	204067b7          	lui	a5,0x20406
20400ac8:	c3878513          	addi	a0,a5,-968 # 20405c38 <_exit+0xca>
20400acc:	2969                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:53 (discriminator 4)
    start = rdcycle();
20400ace:	35c1                	jal	2040098e <rdcycle>
20400ad0:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:54 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400ad4:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400ad8:	fec42583          	lw	a1,-20(s0)
20400adc:	800007b7          	lui	a5,0x80000
20400ae0:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400ae4:	3965                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:55 (discriminator 4)
    end = rdcycle();
20400ae6:	3565                	jal	2040098e <rdcycle>
20400ae8:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:56 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400aec:	fd442703          	lw	a4,-44(s0)
20400af0:	fd842783          	lw	a5,-40(s0)
20400af4:	40f707b3          	sub	a5,a4,a5
20400af8:	85be                	mv	a1,a5
20400afa:	204067b7          	lui	a5,0x20406
20400afe:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400b02:	2c61                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:57 (discriminator 4)
    printC(hash, 8, 1, 1);
20400b04:	4685                	li	a3,1
20400b06:	4605                	li	a2,1
20400b08:	45a1                	li	a1,8
20400b0a:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2827>
20400b0e:	ef2ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:58 (discriminator 4)
    printf("\nX\n");
20400b12:	204067b7          	lui	a5,0x20406
20400b16:	c3478513          	addi	a0,a5,-972 # 20405c34 <_exit+0xc6>
20400b1a:	21b1                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:59 (discriminator 4)
 printf("Hash HW: \n");
20400b1c:	204067b7          	lui	a5,0x20406
20400b20:	c0c78513          	addi	a0,a5,-1012 # 20405c0c <_exit+0x9e>
20400b24:	2189                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:60 (discriminator 4)
    start = rdcycle();
20400b26:	35a5                	jal	2040098e <rdcycle>
20400b28:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:61 (discriminator 4)
    HASH( plain_text, plain_len, hash);
20400b2c:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400b30:	fec42583          	lw	a1,-20(s0)
20400b34:	800007b7          	lui	a5,0x80000
20400b38:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400b3c:	f82ff0ef          	jal	ra,204002be <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:62 (discriminator 4)
    end = rdcycle();
20400b40:	35b9                	jal	2040098e <rdcycle>
20400b42:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:63 (discriminator 4)
    printf("Total time HW = %d cycles\n",end-start);
20400b46:	fd442703          	lw	a4,-44(s0)
20400b4a:	fd842783          	lw	a5,-40(s0)
20400b4e:	40f707b3          	sub	a5,a4,a5
20400b52:	85be                	mv	a1,a5
20400b54:	204067b7          	lui	a5,0x20406
20400b58:	c1878513          	addi	a0,a5,-1000 # 20405c18 <_exit+0xaa>
20400b5c:	2c3d                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:64 (discriminator 4)
    printC(hash, 8 , 1, 1);
20400b5e:	4685                	li	a3,1
20400b60:	4605                	li	a2,1
20400b62:	45a1                	li	a1,8
20400b64:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2827>
20400b68:	e98ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:65 (discriminator 4)
    printf("\nX\n");
20400b6c:	204067b7          	lui	a5,0x20406
20400b70:	c3478513          	addi	a0,a5,-972 # 20405c34 <_exit+0xc6>
20400b74:	2ecd                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:66 (discriminator 4)
    printf("Hash SW: \n");
20400b76:	204067b7          	lui	a5,0x20406
20400b7a:	c3878513          	addi	a0,a5,-968 # 20405c38 <_exit+0xca>
20400b7e:	26e5                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:67 (discriminator 4)
    start = rdcycle();
20400b80:	3539                	jal	2040098e <rdcycle>
20400b82:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:68 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400b86:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400b8a:	fec42583          	lw	a1,-20(s0)
20400b8e:	800007b7          	lui	a5,0x80000
20400b92:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400b96:	3119                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:69 (discriminator 4)
    end = rdcycle();
20400b98:	3bdd                	jal	2040098e <rdcycle>
20400b9a:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:70 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400b9e:	fd442703          	lw	a4,-44(s0)
20400ba2:	fd842783          	lw	a5,-40(s0)
20400ba6:	40f707b3          	sub	a5,a4,a5
20400baa:	85be                	mv	a1,a5
20400bac:	204067b7          	lui	a5,0x20406
20400bb0:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400bb4:	22dd                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:71 (discriminator 4)
    printC(hash, 8, 1, 1);
20400bb6:	4685                	li	a3,1
20400bb8:	4605                	li	a2,1
20400bba:	45a1                	li	a1,8
20400bbc:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2827>
20400bc0:	e40ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:72 (discriminator 4)
    printf("\nX\n");
20400bc4:	204067b7          	lui	a5,0x20406
20400bc8:	c3478513          	addi	a0,a5,-972 # 20405c34 <_exit+0xc6>
20400bcc:	2e69                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:73 (discriminator 4)
     printf("Hash HW: \n");
20400bce:	204067b7          	lui	a5,0x20406
20400bd2:	c0c78513          	addi	a0,a5,-1012 # 20405c0c <_exit+0x9e>
20400bd6:	2e41                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:74 (discriminator 4)
    start = rdcycle();
20400bd8:	3b5d                	jal	2040098e <rdcycle>
20400bda:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:75 (discriminator 4)
    HASH( plain_text, plain_len, hash);
20400bde:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400be2:	fec42583          	lw	a1,-20(s0)
20400be6:	800007b7          	lui	a5,0x80000
20400bea:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400bee:	ed0ff0ef          	jal	ra,204002be <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:76 (discriminator 4)
    end = rdcycle();
20400bf2:	3b71                	jal	2040098e <rdcycle>
20400bf4:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:77 (discriminator 4)
    printf("Total time HW = %d cycles\n",end-start);
20400bf8:	fd442703          	lw	a4,-44(s0)
20400bfc:	fd842783          	lw	a5,-40(s0)
20400c00:	40f707b3          	sub	a5,a4,a5
20400c04:	85be                	mv	a1,a5
20400c06:	204067b7          	lui	a5,0x20406
20400c0a:	c1878513          	addi	a0,a5,-1000 # 20405c18 <_exit+0xaa>
20400c0e:	2271                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:78 (discriminator 4)
    printC(hash, 8 , 1, 1);
20400c10:	4685                	li	a3,1
20400c12:	4605                	li	a2,1
20400c14:	45a1                	li	a1,8
20400c16:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2827>
20400c1a:	de6ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:79 (discriminator 4)
    printf("\nX\n");
20400c1e:	204067b7          	lui	a5,0x20406
20400c22:	c3478513          	addi	a0,a5,-972 # 20405c34 <_exit+0xc6>
20400c26:	2681                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:80 (discriminator 4)
    printf("Hash SW: \n");
20400c28:	204067b7          	lui	a5,0x20406
20400c2c:	c3878513          	addi	a0,a5,-968 # 20405c38 <_exit+0xca>
20400c30:	2e1d                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:81 (discriminator 4)
    start = rdcycle();
20400c32:	3bb1                	jal	2040098e <rdcycle>
20400c34:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:82 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400c38:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400c3c:	fec42583          	lw	a1,-20(s0)
20400c40:	800007b7          	lui	a5,0x80000
20400c44:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400c48:	3e91                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:83 (discriminator 4)
    end = rdcycle();
20400c4a:	3391                	jal	2040098e <rdcycle>
20400c4c:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:84 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400c50:	fd442703          	lw	a4,-44(s0)
20400c54:	fd842783          	lw	a5,-40(s0)
20400c58:	40f707b3          	sub	a5,a4,a5
20400c5c:	85be                	mv	a1,a5
20400c5e:	204067b7          	lui	a5,0x20406
20400c62:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400c66:	2a15                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:85 (discriminator 4)
    printC(hash, 8, 1, 1);
20400c68:	4685                	li	a3,1
20400c6a:	4605                	li	a2,1
20400c6c:	45a1                	li	a1,8
20400c6e:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2827>
20400c72:	d8eff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:86 (discriminator 4)
    printf("\nX\n");
20400c76:	204067b7          	lui	a5,0x20406
20400c7a:	c3478513          	addi	a0,a5,-972 # 20405c34 <_exit+0xc6>
20400c7e:	24e5                	jal	20400f66 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:87 (discriminator 4)
    start = rdcycle();
20400c80:	3339                	jal	2040098e <rdcycle>
20400c82:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:88 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400c86:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400c8a:	fec42583          	lw	a1,-20(s0)
20400c8e:	800007b7          	lui	a5,0x80000
20400c92:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400c96:	3619                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:89 (discriminator 4)
    end = rdcycle();
20400c98:	39dd                	jal	2040098e <rdcycle>
20400c9a:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:90 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400c9e:	fd442703          	lw	a4,-44(s0)
20400ca2:	fd842783          	lw	a5,-40(s0)
20400ca6:	40f707b3          	sub	a5,a4,a5
20400caa:	85be                	mv	a1,a5
20400cac:	204067b7          	lui	a5,0x20406
20400cb0:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400cb4:	20dd                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:91 (discriminator 4)
    start = rdcycle();
20400cb6:	39e1                	jal	2040098e <rdcycle>
20400cb8:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:92 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400cbc:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400cc0:	fec42583          	lw	a1,-20(s0)
20400cc4:	800007b7          	lui	a5,0x80000
20400cc8:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400ccc:	3cc1                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:93 (discriminator 4)
    end = rdcycle();
20400cce:	31c1                	jal	2040098e <rdcycle>
20400cd0:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:94 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400cd4:	fd442703          	lw	a4,-44(s0)
20400cd8:	fd842783          	lw	a5,-40(s0)
20400cdc:	40f707b3          	sub	a5,a4,a5
20400ce0:	85be                	mv	a1,a5
20400ce2:	204067b7          	lui	a5,0x20406
20400ce6:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400cea:	2845                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:96 (discriminator 4)

    start = rdcycle();
20400cec:	314d                	jal	2040098e <rdcycle>
20400cee:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:97 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400cf2:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400cf6:	fec42583          	lw	a1,-20(s0)
20400cfa:	800007b7          	lui	a5,0x80000
20400cfe:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400d02:	3c69                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:98 (discriminator 4)
    end = rdcycle();
20400d04:	3169                	jal	2040098e <rdcycle>
20400d06:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:99 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400d0a:	fd442703          	lw	a4,-44(s0)
20400d0e:	fd842783          	lw	a5,-40(s0)
20400d12:	40f707b3          	sub	a5,a4,a5
20400d16:	85be                	mv	a1,a5
20400d18:	204067b7          	lui	a5,0x20406
20400d1c:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400d20:	28ad                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:102 (discriminator 4)


    start = rdcycle();
20400d22:	31b5                	jal	2040098e <rdcycle>
20400d24:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:103 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400d28:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400d2c:	fec42583          	lw	a1,-20(s0)
20400d30:	800007b7          	lui	a5,0x80000
20400d34:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400d38:	3495                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:104 (discriminator 4)
    end = rdcycle();
20400d3a:	3991                	jal	2040098e <rdcycle>
20400d3c:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:105 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400d40:	fd442703          	lw	a4,-44(s0)
20400d44:	fd842783          	lw	a5,-40(s0)
20400d48:	40f707b3          	sub	a5,a4,a5
20400d4c:	85be                	mv	a1,a5
20400d4e:	204067b7          	lui	a5,0x20406
20400d52:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400d56:	2091                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:107 (discriminator 4)

    start = rdcycle();
20400d58:	391d                	jal	2040098e <rdcycle>
20400d5a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:108 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash);
20400d5e:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2827>
20400d62:	fec42583          	lw	a1,-20(s0)
20400d66:	800007b7          	lui	a5,0x80000
20400d6a:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400d6e:	343d                	jal	2040079c <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:109 (discriminator 4)
    end = rdcycle();
20400d70:	3939                	jal	2040098e <rdcycle>
20400d72:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:110 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400d76:	fd442703          	lw	a4,-44(s0)
20400d7a:	fd842783          	lw	a5,-40(s0)
20400d7e:	40f707b3          	sub	a5,a4,a5
20400d82:	85be                	mv	a1,a5
20400d84:	204067b7          	lui	a5,0x20406
20400d88:	c4478513          	addi	a0,a5,-956 # 20405c44 <_exit+0xd6>
20400d8c:	2039                	jal	20400d9a <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:113 (discriminator 4)


    return 0;
20400d8e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:116 (discriminator 4)


20400d90:	853e                	mv	a0,a5
20400d92:	50b2                	lw	ra,44(sp)
20400d94:	5422                	lw	s0,40(sp)
20400d96:	6145                	addi	sp,sp,48
20400d98:	8082                	ret

20400d9a <iprintf>:
printf():
20400d9a:	7139                	addi	sp,sp,-64
20400d9c:	da3e                	sw	a5,52(sp)
20400d9e:	d22e                	sw	a1,36(sp)
20400da0:	d432                	sw	a2,40(sp)
20400da2:	d636                	sw	a3,44(sp)
20400da4:	d83a                	sw	a4,48(sp)
20400da6:	dc42                	sw	a6,56(sp)
20400da8:	de46                	sw	a7,60(sp)
20400daa:	5fc01797          	auipc	a5,0x5fc01
20400dae:	95e78793          	addi	a5,a5,-1698 # 80001708 <_impure_ptr>
20400db2:	cc22                	sw	s0,24(sp)
20400db4:	4380                	lw	s0,0(a5)
20400db6:	ca26                	sw	s1,20(sp)
20400db8:	ce06                	sw	ra,28(sp)
20400dba:	84aa                	mv	s1,a0
20400dbc:	c409                	beqz	s0,20400dc6 <iprintf+0x2c>
20400dbe:	4c1c                	lw	a5,24(s0)
20400dc0:	e399                	bnez	a5,20400dc6 <iprintf+0x2c>
20400dc2:	8522                	mv	a0,s0
20400dc4:	23d5                	jal	204013a8 <__sinit>
20400dc6:	440c                	lw	a1,8(s0)
20400dc8:	1054                	addi	a3,sp,36
20400dca:	8626                	mv	a2,s1
20400dcc:	8522                	mv	a0,s0
20400dce:	c636                	sw	a3,12(sp)
20400dd0:	2df000ef          	jal	ra,204018ae <_vfiprintf_r>
20400dd4:	40f2                	lw	ra,28(sp)
20400dd6:	4462                	lw	s0,24(sp)
20400dd8:	44d2                	lw	s1,20(sp)
20400dda:	6121                	addi	sp,sp,64
20400ddc:	8082                	ret

20400dde <putchar>:
putchar():
20400dde:	1101                	addi	sp,sp,-32
20400de0:	5fc01797          	auipc	a5,0x5fc01
20400de4:	92878793          	addi	a5,a5,-1752 # 80001708 <_impure_ptr>
20400de8:	cc22                	sw	s0,24(sp)
20400dea:	4380                	lw	s0,0(a5)
20400dec:	ce06                	sw	ra,28(sp)
20400dee:	85aa                	mv	a1,a0
20400df0:	c419                	beqz	s0,20400dfe <putchar+0x20>
20400df2:	4c1c                	lw	a5,24(s0)
20400df4:	e789                	bnez	a5,20400dfe <putchar+0x20>
20400df6:	c62a                	sw	a0,12(sp)
20400df8:	8522                	mv	a0,s0
20400dfa:	237d                	jal	204013a8 <__sinit>
20400dfc:	45b2                	lw	a1,12(sp)
20400dfe:	4410                	lw	a2,8(s0)
20400e00:	8522                	mv	a0,s0
20400e02:	4462                	lw	s0,24(sp)
20400e04:	40f2                	lw	ra,28(sp)
20400e06:	6105                	addi	sp,sp,32
20400e08:	a009                	j	20400e0a <_putc_r>

20400e0a <_putc_r>:
_putc_r():
20400e0a:	1101                	addi	sp,sp,-32
20400e0c:	cc22                	sw	s0,24(sp)
20400e0e:	ce06                	sw	ra,28(sp)
20400e10:	842a                	mv	s0,a0
20400e12:	c901                	beqz	a0,20400e22 <_putc_r+0x18>
20400e14:	4d1c                	lw	a5,24(a0)
20400e16:	e791                	bnez	a5,20400e22 <_putc_r+0x18>
20400e18:	c632                	sw	a2,12(sp)
20400e1a:	c42e                	sw	a1,8(sp)
20400e1c:	2371                	jal	204013a8 <__sinit>
20400e1e:	4632                	lw	a2,12(sp)
20400e20:	45a2                	lw	a1,8(sp)
20400e22:	00005797          	auipc	a5,0x5
20400e26:	e5e78793          	addi	a5,a5,-418 # 20405c80 <__sf_fake_stdin>
20400e2a:	02f61563          	bne	a2,a5,20400e54 <_putc_r+0x4a>
20400e2e:	4050                	lw	a2,4(s0)
20400e30:	461c                	lw	a5,8(a2)
20400e32:	17fd                	addi	a5,a5,-1
20400e34:	c61c                	sw	a5,8(a2)
20400e36:	0207df63          	bgez	a5,20400e74 <_putc_r+0x6a>
20400e3a:	4e18                	lw	a4,24(a2)
20400e3c:	00e7c763          	blt	a5,a4,20400e4a <_putc_r+0x40>
20400e40:	0ff5f793          	andi	a5,a1,255
20400e44:	4729                	li	a4,10
20400e46:	02e79763          	bne	a5,a4,20400e74 <_putc_r+0x6a>
20400e4a:	8522                	mv	a0,s0
20400e4c:	4462                	lw	s0,24(sp)
20400e4e:	40f2                	lw	ra,28(sp)
20400e50:	6105                	addi	sp,sp,32
20400e52:	a20d                	j	20400f74 <__swbuf_r>
20400e54:	00005797          	auipc	a5,0x5
20400e58:	e4c78793          	addi	a5,a5,-436 # 20405ca0 <__sf_fake_stdout>
20400e5c:	00f61463          	bne	a2,a5,20400e64 <_putc_r+0x5a>
20400e60:	4410                	lw	a2,8(s0)
20400e62:	b7f9                	j	20400e30 <_putc_r+0x26>
20400e64:	00005797          	auipc	a5,0x5
20400e68:	dfc78793          	addi	a5,a5,-516 # 20405c60 <__sf_fake_stderr>
20400e6c:	fcf612e3          	bne	a2,a5,20400e30 <_putc_r+0x26>
20400e70:	4450                	lw	a2,12(s0)
20400e72:	bf7d                	j	20400e30 <_putc_r+0x26>
20400e74:	421c                	lw	a5,0(a2)
20400e76:	0ff5f513          	andi	a0,a1,255
20400e7a:	00178713          	addi	a4,a5,1
20400e7e:	c218                	sw	a4,0(a2)
20400e80:	00b78023          	sb	a1,0(a5)
20400e84:	40f2                	lw	ra,28(sp)
20400e86:	4462                	lw	s0,24(sp)
20400e88:	6105                	addi	sp,sp,32
20400e8a:	8082                	ret

20400e8c <_puts_r>:
_puts_r():
20400e8c:	1101                	addi	sp,sp,-32
20400e8e:	ca26                	sw	s1,20(sp)
20400e90:	c84a                	sw	s2,16(sp)
20400e92:	ce06                	sw	ra,28(sp)
20400e94:	cc22                	sw	s0,24(sp)
20400e96:	c64e                	sw	s3,12(sp)
20400e98:	c452                	sw	s4,8(sp)
20400e9a:	84aa                	mv	s1,a0
20400e9c:	892e                	mv	s2,a1
20400e9e:	c501                	beqz	a0,20400ea6 <_puts_r+0x1a>
20400ea0:	4d1c                	lw	a5,24(a0)
20400ea2:	e391                	bnez	a5,20400ea6 <_puts_r+0x1a>
20400ea4:	2311                	jal	204013a8 <__sinit>
20400ea6:	4c9c                	lw	a5,24(s1)
20400ea8:	4480                	lw	s0,8(s1)
20400eaa:	e399                	bnez	a5,20400eb0 <_puts_r+0x24>
20400eac:	8526                	mv	a0,s1
20400eae:	29ed                	jal	204013a8 <__sinit>
20400eb0:	00005797          	auipc	a5,0x5
20400eb4:	dd078793          	addi	a5,a5,-560 # 20405c80 <__sf_fake_stdin>
20400eb8:	02f41c63          	bne	s0,a5,20400ef0 <_puts_r+0x64>
20400ebc:	40c0                	lw	s0,4(s1)
20400ebe:	00c45783          	lhu	a5,12(s0)
20400ec2:	8ba1                	andi	a5,a5,8
20400ec4:	c7b1                	beqz	a5,20400f10 <_puts_r+0x84>
20400ec6:	481c                	lw	a5,16(s0)
20400ec8:	c7a1                	beqz	a5,20400f10 <_puts_r+0x84>
20400eca:	59fd                	li	s3,-1
20400ecc:	4a29                	li	s4,10
20400ece:	441c                	lw	a5,8(s0)
20400ed0:	00094583          	lbu	a1,0(s2)
20400ed4:	17fd                	addi	a5,a5,-1
20400ed6:	e9b1                	bnez	a1,20400f2a <_puts_r+0x9e>
20400ed8:	c41c                	sw	a5,8(s0)
20400eda:	0607de63          	bgez	a5,20400f56 <_puts_r+0xca>
20400ede:	8622                	mv	a2,s0
20400ee0:	45a9                	li	a1,10
20400ee2:	8526                	mv	a0,s1
20400ee4:	2841                	jal	20400f74 <__swbuf_r>
20400ee6:	57fd                	li	a5,-1
20400ee8:	02f50863          	beq	a0,a5,20400f18 <_puts_r+0x8c>
20400eec:	4529                	li	a0,10
20400eee:	a035                	j	20400f1a <_puts_r+0x8e>
20400ef0:	00005797          	auipc	a5,0x5
20400ef4:	db078793          	addi	a5,a5,-592 # 20405ca0 <__sf_fake_stdout>
20400ef8:	00f41463          	bne	s0,a5,20400f00 <_puts_r+0x74>
20400efc:	4480                	lw	s0,8(s1)
20400efe:	b7c1                	j	20400ebe <_puts_r+0x32>
20400f00:	00005797          	auipc	a5,0x5
20400f04:	d6078793          	addi	a5,a5,-672 # 20405c60 <__sf_fake_stderr>
20400f08:	faf41be3          	bne	s0,a5,20400ebe <_puts_r+0x32>
20400f0c:	44c0                	lw	s0,12(s1)
20400f0e:	bf45                	j	20400ebe <_puts_r+0x32>
20400f10:	85a2                	mv	a1,s0
20400f12:	8526                	mv	a0,s1
20400f14:	2205                	jal	20401034 <__swsetup_r>
20400f16:	d955                	beqz	a0,20400eca <_puts_r+0x3e>
20400f18:	557d                	li	a0,-1
20400f1a:	40f2                	lw	ra,28(sp)
20400f1c:	4462                	lw	s0,24(sp)
20400f1e:	44d2                	lw	s1,20(sp)
20400f20:	4942                	lw	s2,16(sp)
20400f22:	49b2                	lw	s3,12(sp)
20400f24:	4a22                	lw	s4,8(sp)
20400f26:	6105                	addi	sp,sp,32
20400f28:	8082                	ret
20400f2a:	c41c                	sw	a5,8(s0)
20400f2c:	0905                	addi	s2,s2,1
20400f2e:	0007d763          	bgez	a5,20400f3c <_puts_r+0xb0>
20400f32:	4c18                	lw	a4,24(s0)
20400f34:	00e7cb63          	blt	a5,a4,20400f4a <_puts_r+0xbe>
20400f38:	01458963          	beq	a1,s4,20400f4a <_puts_r+0xbe>
20400f3c:	401c                	lw	a5,0(s0)
20400f3e:	00178713          	addi	a4,a5,1
20400f42:	c018                	sw	a4,0(s0)
20400f44:	00b78023          	sb	a1,0(a5)
20400f48:	b759                	j	20400ece <_puts_r+0x42>
20400f4a:	8622                	mv	a2,s0
20400f4c:	8526                	mv	a0,s1
20400f4e:	201d                	jal	20400f74 <__swbuf_r>
20400f50:	f7351fe3          	bne	a0,s3,20400ece <_puts_r+0x42>
20400f54:	b7d1                	j	20400f18 <_puts_r+0x8c>
20400f56:	401c                	lw	a5,0(s0)
20400f58:	00178713          	addi	a4,a5,1
20400f5c:	c018                	sw	a4,0(s0)
20400f5e:	4729                	li	a4,10
20400f60:	00e78023          	sb	a4,0(a5)
20400f64:	b761                	j	20400eec <_puts_r+0x60>

20400f66 <puts>:
puts():
20400f66:	5fc00797          	auipc	a5,0x5fc00
20400f6a:	7a278793          	addi	a5,a5,1954 # 80001708 <_impure_ptr>
20400f6e:	85aa                	mv	a1,a0
20400f70:	4388                	lw	a0,0(a5)
20400f72:	bf29                	j	20400e8c <_puts_r>

20400f74 <__swbuf_r>:
__swbuf_r():
20400f74:	1101                	addi	sp,sp,-32
20400f76:	cc22                	sw	s0,24(sp)
20400f78:	ca26                	sw	s1,20(sp)
20400f7a:	c84a                	sw	s2,16(sp)
20400f7c:	ce06                	sw	ra,28(sp)
20400f7e:	c64e                	sw	s3,12(sp)
20400f80:	84aa                	mv	s1,a0
20400f82:	892e                	mv	s2,a1
20400f84:	8432                	mv	s0,a2
20400f86:	c501                	beqz	a0,20400f8e <__swbuf_r+0x1a>
20400f88:	4d1c                	lw	a5,24(a0)
20400f8a:	e391                	bnez	a5,20400f8e <__swbuf_r+0x1a>
20400f8c:	2931                	jal	204013a8 <__sinit>
20400f8e:	00005797          	auipc	a5,0x5
20400f92:	cf278793          	addi	a5,a5,-782 # 20405c80 <__sf_fake_stdin>
20400f96:	06f41963          	bne	s0,a5,20401008 <__swbuf_r+0x94>
20400f9a:	40c0                	lw	s0,4(s1)
20400f9c:	4c1c                	lw	a5,24(s0)
20400f9e:	c41c                	sw	a5,8(s0)
20400fa0:	00c45783          	lhu	a5,12(s0)
20400fa4:	8ba1                	andi	a5,a5,8
20400fa6:	c3c9                	beqz	a5,20401028 <__swbuf_r+0xb4>
20400fa8:	481c                	lw	a5,16(s0)
20400faa:	cfbd                	beqz	a5,20401028 <__swbuf_r+0xb4>
20400fac:	481c                	lw	a5,16(s0)
20400fae:	4008                	lw	a0,0(s0)
20400fb0:	0ff97993          	andi	s3,s2,255
20400fb4:	0ff97913          	andi	s2,s2,255
20400fb8:	8d1d                	sub	a0,a0,a5
20400fba:	485c                	lw	a5,20(s0)
20400fbc:	00f54663          	blt	a0,a5,20400fc8 <__swbuf_r+0x54>
20400fc0:	85a2                	mv	a1,s0
20400fc2:	8526                	mv	a0,s1
20400fc4:	24e9                	jal	2040128e <_fflush_r>
20400fc6:	e52d                	bnez	a0,20401030 <__swbuf_r+0xbc>
20400fc8:	441c                	lw	a5,8(s0)
20400fca:	0505                	addi	a0,a0,1
20400fcc:	17fd                	addi	a5,a5,-1
20400fce:	c41c                	sw	a5,8(s0)
20400fd0:	401c                	lw	a5,0(s0)
20400fd2:	00178713          	addi	a4,a5,1
20400fd6:	c018                	sw	a4,0(s0)
20400fd8:	01378023          	sb	s3,0(a5)
20400fdc:	485c                	lw	a5,20(s0)
20400fde:	00a78963          	beq	a5,a0,20400ff0 <__swbuf_r+0x7c>
20400fe2:	00c45783          	lhu	a5,12(s0)
20400fe6:	8b85                	andi	a5,a5,1
20400fe8:	cb81                	beqz	a5,20400ff8 <__swbuf_r+0x84>
20400fea:	47a9                	li	a5,10
20400fec:	00f91663          	bne	s2,a5,20400ff8 <__swbuf_r+0x84>
20400ff0:	85a2                	mv	a1,s0
20400ff2:	8526                	mv	a0,s1
20400ff4:	2c69                	jal	2040128e <_fflush_r>
20400ff6:	ed0d                	bnez	a0,20401030 <__swbuf_r+0xbc>
20400ff8:	40f2                	lw	ra,28(sp)
20400ffa:	4462                	lw	s0,24(sp)
20400ffc:	854a                	mv	a0,s2
20400ffe:	44d2                	lw	s1,20(sp)
20401000:	4942                	lw	s2,16(sp)
20401002:	49b2                	lw	s3,12(sp)
20401004:	6105                	addi	sp,sp,32
20401006:	8082                	ret
20401008:	00005797          	auipc	a5,0x5
2040100c:	c9878793          	addi	a5,a5,-872 # 20405ca0 <__sf_fake_stdout>
20401010:	00f41463          	bne	s0,a5,20401018 <__swbuf_r+0xa4>
20401014:	4480                	lw	s0,8(s1)
20401016:	b759                	j	20400f9c <__swbuf_r+0x28>
20401018:	00005797          	auipc	a5,0x5
2040101c:	c4878793          	addi	a5,a5,-952 # 20405c60 <__sf_fake_stderr>
20401020:	f6f41ee3          	bne	s0,a5,20400f9c <__swbuf_r+0x28>
20401024:	44c0                	lw	s0,12(s1)
20401026:	bf9d                	j	20400f9c <__swbuf_r+0x28>
20401028:	85a2                	mv	a1,s0
2040102a:	8526                	mv	a0,s1
2040102c:	2021                	jal	20401034 <__swsetup_r>
2040102e:	dd3d                	beqz	a0,20400fac <__swbuf_r+0x38>
20401030:	597d                	li	s2,-1
20401032:	b7d9                	j	20400ff8 <__swbuf_r+0x84>

20401034 <__swsetup_r>:
__swsetup_r():
20401034:	1141                	addi	sp,sp,-16
20401036:	5fc00797          	auipc	a5,0x5fc00
2040103a:	6d278793          	addi	a5,a5,1746 # 80001708 <_impure_ptr>
2040103e:	c226                	sw	s1,4(sp)
20401040:	4384                	lw	s1,0(a5)
20401042:	c422                	sw	s0,8(sp)
20401044:	c04a                	sw	s2,0(sp)
20401046:	c606                	sw	ra,12(sp)
20401048:	892a                	mv	s2,a0
2040104a:	842e                	mv	s0,a1
2040104c:	c489                	beqz	s1,20401056 <__swsetup_r+0x22>
2040104e:	4c9c                	lw	a5,24(s1)
20401050:	e399                	bnez	a5,20401056 <__swsetup_r+0x22>
20401052:	8526                	mv	a0,s1
20401054:	2e91                	jal	204013a8 <__sinit>
20401056:	00005797          	auipc	a5,0x5
2040105a:	c2a78793          	addi	a5,a5,-982 # 20405c80 <__sf_fake_stdin>
2040105e:	02f41c63          	bne	s0,a5,20401096 <__swsetup_r+0x62>
20401062:	40c0                	lw	s0,4(s1)
20401064:	00c41703          	lh	a4,12(s0)
20401068:	01071793          	slli	a5,a4,0x10
2040106c:	83c1                	srli	a5,a5,0x10
2040106e:	0087f693          	andi	a3,a5,8
20401072:	eeb5                	bnez	a3,204010ee <__swsetup_r+0xba>
20401074:	0107f693          	andi	a3,a5,16
20401078:	ee9d                	bnez	a3,204010b6 <__swsetup_r+0x82>
2040107a:	47a5                	li	a5,9
2040107c:	00f92023          	sw	a5,0(s2)
20401080:	04076713          	ori	a4,a4,64
20401084:	00e41623          	sh	a4,12(s0)
20401088:	557d                	li	a0,-1
2040108a:	40b2                	lw	ra,12(sp)
2040108c:	4422                	lw	s0,8(sp)
2040108e:	4492                	lw	s1,4(sp)
20401090:	4902                	lw	s2,0(sp)
20401092:	0141                	addi	sp,sp,16
20401094:	8082                	ret
20401096:	00005797          	auipc	a5,0x5
2040109a:	c0a78793          	addi	a5,a5,-1014 # 20405ca0 <__sf_fake_stdout>
2040109e:	00f41463          	bne	s0,a5,204010a6 <__swsetup_r+0x72>
204010a2:	4480                	lw	s0,8(s1)
204010a4:	b7c1                	j	20401064 <__swsetup_r+0x30>
204010a6:	00005797          	auipc	a5,0x5
204010aa:	bba78793          	addi	a5,a5,-1094 # 20405c60 <__sf_fake_stderr>
204010ae:	faf41be3          	bne	s0,a5,20401064 <__swsetup_r+0x30>
204010b2:	44c0                	lw	s0,12(s1)
204010b4:	bf45                	j	20401064 <__swsetup_r+0x30>
204010b6:	8b91                	andi	a5,a5,4
204010b8:	c78d                	beqz	a5,204010e2 <__swsetup_r+0xae>
204010ba:	584c                	lw	a1,52(s0)
204010bc:	c989                	beqz	a1,204010ce <__swsetup_r+0x9a>
204010be:	04440793          	addi	a5,s0,68
204010c2:	00f58463          	beq	a1,a5,204010ca <__swsetup_r+0x96>
204010c6:	854a                	mv	a0,s2
204010c8:	2bc5                	jal	204016b8 <_free_r>
204010ca:	02042a23          	sw	zero,52(s0)
204010ce:	00c45783          	lhu	a5,12(s0)
204010d2:	00042223          	sw	zero,4(s0)
204010d6:	fdb7f793          	andi	a5,a5,-37
204010da:	00f41623          	sh	a5,12(s0)
204010de:	481c                	lw	a5,16(s0)
204010e0:	c01c                	sw	a5,0(s0)
204010e2:	00c45783          	lhu	a5,12(s0)
204010e6:	0087e793          	ori	a5,a5,8
204010ea:	00f41623          	sh	a5,12(s0)
204010ee:	481c                	lw	a5,16(s0)
204010f0:	ef81                	bnez	a5,20401108 <__swsetup_r+0xd4>
204010f2:	00c45783          	lhu	a5,12(s0)
204010f6:	20000713          	li	a4,512
204010fa:	2807f793          	andi	a5,a5,640
204010fe:	00e78563          	beq	a5,a4,20401108 <__swsetup_r+0xd4>
20401102:	85a2                	mv	a1,s0
20401104:	854a                	mv	a0,s2
20401106:	21bd                	jal	20401574 <__smakebuf_r>
20401108:	00c45783          	lhu	a5,12(s0)
2040110c:	0017f713          	andi	a4,a5,1
20401110:	c705                	beqz	a4,20401138 <__swsetup_r+0x104>
20401112:	485c                	lw	a5,20(s0)
20401114:	00042423          	sw	zero,8(s0)
20401118:	40f007b3          	neg	a5,a5
2040111c:	cc1c                	sw	a5,24(s0)
2040111e:	481c                	lw	a5,16(s0)
20401120:	4501                	li	a0,0
20401122:	f7a5                	bnez	a5,2040108a <__swsetup_r+0x56>
20401124:	00c41783          	lh	a5,12(s0)
20401128:	0807f713          	andi	a4,a5,128
2040112c:	df39                	beqz	a4,2040108a <__swsetup_r+0x56>
2040112e:	0407e793          	ori	a5,a5,64
20401132:	00f41623          	sh	a5,12(s0)
20401136:	bf89                	j	20401088 <__swsetup_r+0x54>
20401138:	8b89                	andi	a5,a5,2
2040113a:	4701                	li	a4,0
2040113c:	e391                	bnez	a5,20401140 <__swsetup_r+0x10c>
2040113e:	4858                	lw	a4,20(s0)
20401140:	c418                	sw	a4,8(s0)
20401142:	bff1                	j	2040111e <__swsetup_r+0xea>

20401144 <__sflush_r>:
__sflush_r():
20401144:	00c5d783          	lhu	a5,12(a1)
20401148:	1101                	addi	sp,sp,-32
2040114a:	cc22                	sw	s0,24(sp)
2040114c:	ca26                	sw	s1,20(sp)
2040114e:	ce06                	sw	ra,28(sp)
20401150:	c84a                	sw	s2,16(sp)
20401152:	c64e                	sw	s3,12(sp)
20401154:	0087f713          	andi	a4,a5,8
20401158:	84aa                	mv	s1,a0
2040115a:	842e                	mv	s0,a1
2040115c:	e765                	bnez	a4,20401244 <__sflush_r+0x100>
2040115e:	41d8                	lw	a4,4(a1)
20401160:	00e04763          	bgtz	a4,2040116e <__sflush_r+0x2a>
20401164:	41b8                	lw	a4,64(a1)
20401166:	00e04463          	bgtz	a4,2040116e <__sflush_r+0x2a>
2040116a:	4501                	li	a0,0
2040116c:	a0c1                	j	2040122c <__sflush_r+0xe8>
2040116e:	5458                	lw	a4,44(s0)
20401170:	df6d                	beqz	a4,2040116a <__sflush_r+0x26>
20401172:	0004a903          	lw	s2,0(s1)
20401176:	01379693          	slli	a3,a5,0x13
2040117a:	0004a023          	sw	zero,0(s1)
2040117e:	0606de63          	bgez	a3,204011fa <__sflush_r+0xb6>
20401182:	4868                	lw	a0,84(s0)
20401184:	00c45783          	lhu	a5,12(s0)
20401188:	8b91                	andi	a5,a5,4
2040118a:	c799                	beqz	a5,20401198 <__sflush_r+0x54>
2040118c:	405c                	lw	a5,4(s0)
2040118e:	8d1d                	sub	a0,a0,a5
20401190:	585c                	lw	a5,52(s0)
20401192:	c399                	beqz	a5,20401198 <__sflush_r+0x54>
20401194:	403c                	lw	a5,64(s0)
20401196:	8d1d                	sub	a0,a0,a5
20401198:	545c                	lw	a5,44(s0)
2040119a:	500c                	lw	a1,32(s0)
2040119c:	862a                	mv	a2,a0
2040119e:	4681                	li	a3,0
204011a0:	8526                	mv	a0,s1
204011a2:	9782                	jalr	a5
204011a4:	57fd                	li	a5,-1
204011a6:	00c45703          	lhu	a4,12(s0)
204011aa:	00f51d63          	bne	a0,a5,204011c4 <__sflush_r+0x80>
204011ae:	4094                	lw	a3,0(s1)
204011b0:	47f5                	li	a5,29
204011b2:	08d7e463          	bltu	a5,a3,2040123a <__sflush_r+0xf6>
204011b6:	204007b7          	lui	a5,0x20400
204011ba:	0785                	addi	a5,a5,1
204011bc:	00d7d7b3          	srl	a5,a5,a3
204011c0:	8b85                	andi	a5,a5,1
204011c2:	cfa5                	beqz	a5,2040123a <__sflush_r+0xf6>
204011c4:	481c                	lw	a5,16(s0)
204011c6:	00042223          	sw	zero,4(s0)
204011ca:	c01c                	sw	a5,0(s0)
204011cc:	01371793          	slli	a5,a4,0x13
204011d0:	0007d863          	bgez	a5,204011e0 <__sflush_r+0x9c>
204011d4:	57fd                	li	a5,-1
204011d6:	00f51463          	bne	a0,a5,204011de <__sflush_r+0x9a>
204011da:	409c                	lw	a5,0(s1)
204011dc:	e391                	bnez	a5,204011e0 <__sflush_r+0x9c>
204011de:	c868                	sw	a0,84(s0)
204011e0:	584c                	lw	a1,52(s0)
204011e2:	0124a023          	sw	s2,0(s1)
204011e6:	d1d1                	beqz	a1,2040116a <__sflush_r+0x26>
204011e8:	04440793          	addi	a5,s0,68
204011ec:	00f58463          	beq	a1,a5,204011f4 <__sflush_r+0xb0>
204011f0:	8526                	mv	a0,s1
204011f2:	21d9                	jal	204016b8 <_free_r>
204011f4:	02042a23          	sw	zero,52(s0)
204011f8:	bf8d                	j	2040116a <__sflush_r+0x26>
204011fa:	500c                	lw	a1,32(s0)
204011fc:	4685                	li	a3,1
204011fe:	4601                	li	a2,0
20401200:	8526                	mv	a0,s1
20401202:	9702                	jalr	a4
20401204:	57fd                	li	a5,-1
20401206:	f6f51fe3          	bne	a0,a5,20401184 <__sflush_r+0x40>
2040120a:	409c                	lw	a5,0(s1)
2040120c:	dfa5                	beqz	a5,20401184 <__sflush_r+0x40>
2040120e:	4775                	li	a4,29
20401210:	00e78563          	beq	a5,a4,2040121a <__sflush_r+0xd6>
20401214:	4759                	li	a4,22
20401216:	00e79563          	bne	a5,a4,20401220 <__sflush_r+0xdc>
2040121a:	0124a023          	sw	s2,0(s1)
2040121e:	b7b1                	j	2040116a <__sflush_r+0x26>
20401220:	00c45783          	lhu	a5,12(s0)
20401224:	0407e793          	ori	a5,a5,64
20401228:	00f41623          	sh	a5,12(s0)
2040122c:	40f2                	lw	ra,28(sp)
2040122e:	4462                	lw	s0,24(sp)
20401230:	44d2                	lw	s1,20(sp)
20401232:	4942                	lw	s2,16(sp)
20401234:	49b2                	lw	s3,12(sp)
20401236:	6105                	addi	sp,sp,32
20401238:	8082                	ret
2040123a:	04076713          	ori	a4,a4,64
2040123e:	00e41623          	sh	a4,12(s0)
20401242:	b7ed                	j	2040122c <__sflush_r+0xe8>
20401244:	0105a983          	lw	s3,16(a1)
20401248:	f20981e3          	beqz	s3,2040116a <__sflush_r+0x26>
2040124c:	0005a903          	lw	s2,0(a1)
20401250:	8b8d                	andi	a5,a5,3
20401252:	0135a023          	sw	s3,0(a1)
20401256:	41390933          	sub	s2,s2,s3
2040125a:	4701                	li	a4,0
2040125c:	e391                	bnez	a5,20401260 <__sflush_r+0x11c>
2040125e:	49d8                	lw	a4,20(a1)
20401260:	c418                	sw	a4,8(s0)
20401262:	f12054e3          	blez	s2,2040116a <__sflush_r+0x26>
20401266:	541c                	lw	a5,40(s0)
20401268:	500c                	lw	a1,32(s0)
2040126a:	86ca                	mv	a3,s2
2040126c:	864e                	mv	a2,s3
2040126e:	8526                	mv	a0,s1
20401270:	9782                	jalr	a5
20401272:	00a04a63          	bgtz	a0,20401286 <__sflush_r+0x142>
20401276:	00c45783          	lhu	a5,12(s0)
2040127a:	557d                	li	a0,-1
2040127c:	0407e793          	ori	a5,a5,64
20401280:	00f41623          	sh	a5,12(s0)
20401284:	b765                	j	2040122c <__sflush_r+0xe8>
20401286:	99aa                	add	s3,s3,a0
20401288:	40a90933          	sub	s2,s2,a0
2040128c:	bfd9                	j	20401262 <__sflush_r+0x11e>

2040128e <_fflush_r>:
_fflush_r():
2040128e:	499c                	lw	a5,16(a1)
20401290:	cfb9                	beqz	a5,204012ee <_fflush_r+0x60>
20401292:	1101                	addi	sp,sp,-32
20401294:	cc22                	sw	s0,24(sp)
20401296:	ce06                	sw	ra,28(sp)
20401298:	842a                	mv	s0,a0
2040129a:	c511                	beqz	a0,204012a6 <_fflush_r+0x18>
2040129c:	4d1c                	lw	a5,24(a0)
2040129e:	e781                	bnez	a5,204012a6 <_fflush_r+0x18>
204012a0:	c62e                	sw	a1,12(sp)
204012a2:	2219                	jal	204013a8 <__sinit>
204012a4:	45b2                	lw	a1,12(sp)
204012a6:	00005797          	auipc	a5,0x5
204012aa:	9da78793          	addi	a5,a5,-1574 # 20405c80 <__sf_fake_stdin>
204012ae:	00f59b63          	bne	a1,a5,204012c4 <_fflush_r+0x36>
204012b2:	404c                	lw	a1,4(s0)
204012b4:	00c59783          	lh	a5,12(a1)
204012b8:	c795                	beqz	a5,204012e4 <_fflush_r+0x56>
204012ba:	8522                	mv	a0,s0
204012bc:	4462                	lw	s0,24(sp)
204012be:	40f2                	lw	ra,28(sp)
204012c0:	6105                	addi	sp,sp,32
204012c2:	b549                	j	20401144 <__sflush_r>
204012c4:	00005797          	auipc	a5,0x5
204012c8:	9dc78793          	addi	a5,a5,-1572 # 20405ca0 <__sf_fake_stdout>
204012cc:	00f59463          	bne	a1,a5,204012d4 <_fflush_r+0x46>
204012d0:	440c                	lw	a1,8(s0)
204012d2:	b7cd                	j	204012b4 <_fflush_r+0x26>
204012d4:	00005797          	auipc	a5,0x5
204012d8:	98c78793          	addi	a5,a5,-1652 # 20405c60 <__sf_fake_stderr>
204012dc:	fcf59ce3          	bne	a1,a5,204012b4 <_fflush_r+0x26>
204012e0:	444c                	lw	a1,12(s0)
204012e2:	bfc9                	j	204012b4 <_fflush_r+0x26>
204012e4:	40f2                	lw	ra,28(sp)
204012e6:	4462                	lw	s0,24(sp)
204012e8:	4501                	li	a0,0
204012ea:	6105                	addi	sp,sp,32
204012ec:	8082                	ret
204012ee:	4501                	li	a0,0
204012f0:	8082                	ret

204012f2 <std>:
std():
204012f2:	1141                	addi	sp,sp,-16
204012f4:	c422                	sw	s0,8(sp)
204012f6:	c606                	sw	ra,12(sp)
204012f8:	842a                	mv	s0,a0
204012fa:	00b51623          	sh	a1,12(a0)
204012fe:	00c51723          	sh	a2,14(a0)
20401302:	00052023          	sw	zero,0(a0)
20401306:	00052223          	sw	zero,4(a0)
2040130a:	00052423          	sw	zero,8(a0)
2040130e:	06052223          	sw	zero,100(a0)
20401312:	00052823          	sw	zero,16(a0)
20401316:	00052a23          	sw	zero,20(a0)
2040131a:	00052c23          	sw	zero,24(a0)
2040131e:	4621                	li	a2,8
20401320:	4581                	li	a1,0
20401322:	05c50513          	addi	a0,a0,92
20401326:	24ed                	jal	20401610 <memset>
20401328:	00001797          	auipc	a5,0x1
2040132c:	84878793          	addi	a5,a5,-1976 # 20401b70 <__sread>
20401330:	d05c                	sw	a5,36(s0)
20401332:	00001797          	auipc	a5,0x1
20401336:	86e78793          	addi	a5,a5,-1938 # 20401ba0 <__swrite>
2040133a:	d41c                	sw	a5,40(s0)
2040133c:	00001797          	auipc	a5,0x1
20401340:	8b278793          	addi	a5,a5,-1870 # 20401bee <__sseek>
20401344:	d45c                	sw	a5,44(s0)
20401346:	00001797          	auipc	a5,0x1
2040134a:	8de78793          	addi	a5,a5,-1826 # 20401c24 <__sclose>
2040134e:	d000                	sw	s0,32(s0)
20401350:	d81c                	sw	a5,48(s0)
20401352:	40b2                	lw	ra,12(sp)
20401354:	4422                	lw	s0,8(sp)
20401356:	0141                	addi	sp,sp,16
20401358:	8082                	ret

2040135a <_cleanup_r>:
_cleanup_r():
2040135a:	00000597          	auipc	a1,0x0
2040135e:	f3458593          	addi	a1,a1,-204 # 2040128e <_fflush_r>
20401362:	a2b9                	j	204014b0 <_fwalk_reent>

20401364 <__sfmoreglue>:
__sfmoreglue():
20401364:	1141                	addi	sp,sp,-16
20401366:	c226                	sw	s1,4(sp)
20401368:	06800613          	li	a2,104
2040136c:	fff58493          	addi	s1,a1,-1
20401370:	02c484b3          	mul	s1,s1,a2
20401374:	c04a                	sw	s2,0(sp)
20401376:	892e                	mv	s2,a1
20401378:	c422                	sw	s0,8(sp)
2040137a:	c606                	sw	ra,12(sp)
2040137c:	07448593          	addi	a1,s1,116
20401380:	26d5                	jal	20401764 <_malloc_r>
20401382:	842a                	mv	s0,a0
20401384:	c919                	beqz	a0,2040139a <__sfmoreglue+0x36>
20401386:	00052023          	sw	zero,0(a0)
2040138a:	01252223          	sw	s2,4(a0)
2040138e:	0531                	addi	a0,a0,12
20401390:	c408                	sw	a0,8(s0)
20401392:	06848613          	addi	a2,s1,104
20401396:	4581                	li	a1,0
20401398:	2ca5                	jal	20401610 <memset>
2040139a:	8522                	mv	a0,s0
2040139c:	40b2                	lw	ra,12(sp)
2040139e:	4422                	lw	s0,8(sp)
204013a0:	4492                	lw	s1,4(sp)
204013a2:	4902                	lw	s2,0(sp)
204013a4:	0141                	addi	sp,sp,16
204013a6:	8082                	ret

204013a8 <__sinit>:
__sinit():
204013a8:	4d1c                	lw	a5,24(a0)
204013aa:	e3bd                	bnez	a5,20401410 <__sinit+0x68>
204013ac:	1141                	addi	sp,sp,-16
204013ae:	c606                	sw	ra,12(sp)
204013b0:	c422                	sw	s0,8(sp)
204013b2:	00000797          	auipc	a5,0x0
204013b6:	fa878793          	addi	a5,a5,-88 # 2040135a <_cleanup_r>
204013ba:	d51c                	sw	a5,40(a0)
204013bc:	5fc00797          	auipc	a5,0x5fc00
204013c0:	35078793          	addi	a5,a5,848 # 8000170c <_global_impure_ptr>
204013c4:	439c                	lw	a5,0(a5)
204013c6:	04052423          	sw	zero,72(a0)
204013ca:	04052623          	sw	zero,76(a0)
204013ce:	04052823          	sw	zero,80(a0)
204013d2:	00f51463          	bne	a0,a5,204013da <__sinit+0x32>
204013d6:	4785                	li	a5,1
204013d8:	cd1c                	sw	a5,24(a0)
204013da:	842a                	mv	s0,a0
204013dc:	281d                	jal	20401412 <__sfp>
204013de:	c048                	sw	a0,4(s0)
204013e0:	8522                	mv	a0,s0
204013e2:	2805                	jal	20401412 <__sfp>
204013e4:	c408                	sw	a0,8(s0)
204013e6:	8522                	mv	a0,s0
204013e8:	202d                	jal	20401412 <__sfp>
204013ea:	c448                	sw	a0,12(s0)
204013ec:	4048                	lw	a0,4(s0)
204013ee:	4601                	li	a2,0
204013f0:	4591                	li	a1,4
204013f2:	3701                	jal	204012f2 <std>
204013f4:	4408                	lw	a0,8(s0)
204013f6:	4605                	li	a2,1
204013f8:	45a5                	li	a1,9
204013fa:	3de5                	jal	204012f2 <std>
204013fc:	4448                	lw	a0,12(s0)
204013fe:	4609                	li	a2,2
20401400:	45c9                	li	a1,18
20401402:	3dc5                	jal	204012f2 <std>
20401404:	4785                	li	a5,1
20401406:	cc1c                	sw	a5,24(s0)
20401408:	40b2                	lw	ra,12(sp)
2040140a:	4422                	lw	s0,8(sp)
2040140c:	0141                	addi	sp,sp,16
2040140e:	8082                	ret
20401410:	8082                	ret

20401412 <__sfp>:
__sfp():
20401412:	1141                	addi	sp,sp,-16
20401414:	5fc00797          	auipc	a5,0x5fc00
20401418:	2f878793          	addi	a5,a5,760 # 8000170c <_global_impure_ptr>
2040141c:	c226                	sw	s1,4(sp)
2040141e:	4384                	lw	s1,0(a5)
20401420:	c04a                	sw	s2,0(sp)
20401422:	c606                	sw	ra,12(sp)
20401424:	4c9c                	lw	a5,24(s1)
20401426:	c422                	sw	s0,8(sp)
20401428:	892a                	mv	s2,a0
2040142a:	e399                	bnez	a5,20401430 <__sfp+0x1e>
2040142c:	8526                	mv	a0,s1
2040142e:	3fad                	jal	204013a8 <__sinit>
20401430:	04848493          	addi	s1,s1,72
20401434:	4480                	lw	s0,8(s1)
20401436:	40dc                	lw	a5,4(s1)
20401438:	17fd                	addi	a5,a5,-1
2040143a:	0007d663          	bgez	a5,20401446 <__sfp+0x34>
2040143e:	409c                	lw	a5,0(s1)
20401440:	cfb1                	beqz	a5,2040149c <__sfp+0x8a>
20401442:	4084                	lw	s1,0(s1)
20401444:	bfc5                	j	20401434 <__sfp+0x22>
20401446:	00c41703          	lh	a4,12(s0)
2040144a:	e731                	bnez	a4,20401496 <__sfp+0x84>
2040144c:	77c1                	lui	a5,0xffff0
2040144e:	0785                	addi	a5,a5,1
20401450:	06042223          	sw	zero,100(s0)
20401454:	00042023          	sw	zero,0(s0)
20401458:	00042223          	sw	zero,4(s0)
2040145c:	00042423          	sw	zero,8(s0)
20401460:	c45c                	sw	a5,12(s0)
20401462:	00042823          	sw	zero,16(s0)
20401466:	00042a23          	sw	zero,20(s0)
2040146a:	00042c23          	sw	zero,24(s0)
2040146e:	4621                	li	a2,8
20401470:	4581                	li	a1,0
20401472:	05c40513          	addi	a0,s0,92
20401476:	2a69                	jal	20401610 <memset>
20401478:	02042a23          	sw	zero,52(s0)
2040147c:	02042c23          	sw	zero,56(s0)
20401480:	04042423          	sw	zero,72(s0)
20401484:	04042623          	sw	zero,76(s0)
20401488:	8522                	mv	a0,s0
2040148a:	40b2                	lw	ra,12(sp)
2040148c:	4422                	lw	s0,8(sp)
2040148e:	4492                	lw	s1,4(sp)
20401490:	4902                	lw	s2,0(sp)
20401492:	0141                	addi	sp,sp,16
20401494:	8082                	ret
20401496:	06840413          	addi	s0,s0,104
2040149a:	bf79                	j	20401438 <__sfp+0x26>
2040149c:	4591                	li	a1,4
2040149e:	854a                	mv	a0,s2
204014a0:	35d1                	jal	20401364 <__sfmoreglue>
204014a2:	c088                	sw	a0,0(s1)
204014a4:	842a                	mv	s0,a0
204014a6:	fd51                	bnez	a0,20401442 <__sfp+0x30>
204014a8:	47b1                	li	a5,12
204014aa:	00f92023          	sw	a5,0(s2)
204014ae:	bfe9                	j	20401488 <__sfp+0x76>

204014b0 <_fwalk_reent>:
_fwalk_reent():
204014b0:	7179                	addi	sp,sp,-48
204014b2:	d422                	sw	s0,40(sp)
204014b4:	d04a                	sw	s2,32(sp)
204014b6:	cc52                	sw	s4,24(sp)
204014b8:	ca56                	sw	s5,20(sp)
204014ba:	c85a                	sw	s6,16(sp)
204014bc:	c65e                	sw	s7,12(sp)
204014be:	d606                	sw	ra,44(sp)
204014c0:	d226                	sw	s1,36(sp)
204014c2:	ce4e                	sw	s3,28(sp)
204014c4:	8a2a                	mv	s4,a0
204014c6:	8aae                	mv	s5,a1
204014c8:	04850413          	addi	s0,a0,72
204014cc:	4901                	li	s2,0
204014ce:	4b05                	li	s6,1
204014d0:	5bfd                	li	s7,-1
204014d2:	ec09                	bnez	s0,204014ec <_fwalk_reent+0x3c>
204014d4:	50b2                	lw	ra,44(sp)
204014d6:	5422                	lw	s0,40(sp)
204014d8:	854a                	mv	a0,s2
204014da:	5492                	lw	s1,36(sp)
204014dc:	5902                	lw	s2,32(sp)
204014de:	49f2                	lw	s3,28(sp)
204014e0:	4a62                	lw	s4,24(sp)
204014e2:	4ad2                	lw	s5,20(sp)
204014e4:	4b42                	lw	s6,16(sp)
204014e6:	4bb2                	lw	s7,12(sp)
204014e8:	6145                	addi	sp,sp,48
204014ea:	8082                	ret
204014ec:	4404                	lw	s1,8(s0)
204014ee:	00442983          	lw	s3,4(s0)
204014f2:	19fd                	addi	s3,s3,-1
204014f4:	0009d463          	bgez	s3,204014fc <_fwalk_reent+0x4c>
204014f8:	4000                	lw	s0,0(s0)
204014fa:	bfe1                	j	204014d2 <_fwalk_reent+0x22>
204014fc:	00c4d783          	lhu	a5,12(s1)
20401500:	00fb7b63          	bgeu	s6,a5,20401516 <_fwalk_reent+0x66>
20401504:	00e49783          	lh	a5,14(s1)
20401508:	01778763          	beq	a5,s7,20401516 <_fwalk_reent+0x66>
2040150c:	85a6                	mv	a1,s1
2040150e:	8552                	mv	a0,s4
20401510:	9a82                	jalr	s5
20401512:	00a96933          	or	s2,s2,a0
20401516:	06848493          	addi	s1,s1,104
2040151a:	bfe1                	j	204014f2 <_fwalk_reent+0x42>

2040151c <__swhatbuf_r>:
__swhatbuf_r():
2040151c:	7119                	addi	sp,sp,-128
2040151e:	daa6                	sw	s1,116(sp)
20401520:	84ae                	mv	s1,a1
20401522:	00e59583          	lh	a1,14(a1)
20401526:	dca2                	sw	s0,120(sp)
20401528:	de86                	sw	ra,124(sp)
2040152a:	8432                	mv	s0,a2
2040152c:	0005dc63          	bgez	a1,20401544 <__swhatbuf_r+0x28>
20401530:	00c4d783          	lhu	a5,12(s1)
20401534:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffd42c>
20401538:	0807f793          	andi	a5,a5,128
2040153c:	e39d                	bnez	a5,20401562 <__swhatbuf_r+0x46>
2040153e:	40000793          	li	a5,1024
20401542:	a015                	j	20401566 <__swhatbuf_r+0x4a>
20401544:	0830                	addi	a2,sp,24
20401546:	c636                	sw	a3,12(sp)
20401548:	2f1d                	jal	20401c7e <_fstat_r>
2040154a:	46b2                	lw	a3,12(sp)
2040154c:	fe0542e3          	bltz	a0,20401530 <__swhatbuf_r+0x14>
20401550:	4772                	lw	a4,28(sp)
20401552:	67bd                	lui	a5,0xf
20401554:	8ff9                	and	a5,a5,a4
20401556:	7779                	lui	a4,0xffffe
20401558:	97ba                	add	a5,a5,a4
2040155a:	0017b793          	seqz	a5,a5
2040155e:	c29c                	sw	a5,0(a3)
20401560:	bff9                	j	2040153e <__swhatbuf_r+0x22>
20401562:	04000793          	li	a5,64
20401566:	c01c                	sw	a5,0(s0)
20401568:	50f6                	lw	ra,124(sp)
2040156a:	5466                	lw	s0,120(sp)
2040156c:	54d6                	lw	s1,116(sp)
2040156e:	4501                	li	a0,0
20401570:	6109                	addi	sp,sp,128
20401572:	8082                	ret

20401574 <__smakebuf_r>:
__smakebuf_r():
20401574:	00c5d783          	lhu	a5,12(a1)
20401578:	1101                	addi	sp,sp,-32
2040157a:	cc22                	sw	s0,24(sp)
2040157c:	ce06                	sw	ra,28(sp)
2040157e:	ca26                	sw	s1,20(sp)
20401580:	c84a                	sw	s2,16(sp)
20401582:	8b89                	andi	a5,a5,2
20401584:	842e                	mv	s0,a1
20401586:	cf89                	beqz	a5,204015a0 <__smakebuf_r+0x2c>
20401588:	04740793          	addi	a5,s0,71
2040158c:	c01c                	sw	a5,0(s0)
2040158e:	c81c                	sw	a5,16(s0)
20401590:	4785                	li	a5,1
20401592:	c85c                	sw	a5,20(s0)
20401594:	40f2                	lw	ra,28(sp)
20401596:	4462                	lw	s0,24(sp)
20401598:	44d2                	lw	s1,20(sp)
2040159a:	4942                	lw	s2,16(sp)
2040159c:	6105                	addi	sp,sp,32
2040159e:	8082                	ret
204015a0:	0074                	addi	a3,sp,12
204015a2:	0030                	addi	a2,sp,8
204015a4:	84aa                	mv	s1,a0
204015a6:	3f9d                	jal	2040151c <__swhatbuf_r>
204015a8:	45a2                	lw	a1,8(sp)
204015aa:	892a                	mv	s2,a0
204015ac:	8526                	mv	a0,s1
204015ae:	2a5d                	jal	20401764 <_malloc_r>
204015b0:	ed01                	bnez	a0,204015c8 <__smakebuf_r+0x54>
204015b2:	00c41783          	lh	a5,12(s0)
204015b6:	2007f713          	andi	a4,a5,512
204015ba:	ff69                	bnez	a4,20401594 <__smakebuf_r+0x20>
204015bc:	9bf1                	andi	a5,a5,-4
204015be:	0027e793          	ori	a5,a5,2
204015c2:	00f41623          	sh	a5,12(s0)
204015c6:	b7c9                	j	20401588 <__smakebuf_r+0x14>
204015c8:	00000797          	auipc	a5,0x0
204015cc:	d9278793          	addi	a5,a5,-622 # 2040135a <_cleanup_r>
204015d0:	d49c                	sw	a5,40(s1)
204015d2:	00c45783          	lhu	a5,12(s0)
204015d6:	c008                	sw	a0,0(s0)
204015d8:	c808                	sw	a0,16(s0)
204015da:	0807e793          	ori	a5,a5,128
204015de:	00f41623          	sh	a5,12(s0)
204015e2:	47a2                	lw	a5,8(sp)
204015e4:	c85c                	sw	a5,20(s0)
204015e6:	47b2                	lw	a5,12(sp)
204015e8:	cf89                	beqz	a5,20401602 <__smakebuf_r+0x8e>
204015ea:	00e41583          	lh	a1,14(s0)
204015ee:	8526                	mv	a0,s1
204015f0:	2d65                	jal	20401ca8 <_isatty_r>
204015f2:	c901                	beqz	a0,20401602 <__smakebuf_r+0x8e>
204015f4:	00c45783          	lhu	a5,12(s0)
204015f8:	9bf1                	andi	a5,a5,-4
204015fa:	0017e793          	ori	a5,a5,1
204015fe:	00f41623          	sh	a5,12(s0)
20401602:	00c45783          	lhu	a5,12(s0)
20401606:	00f96933          	or	s2,s2,a5
2040160a:	01241623          	sh	s2,12(s0)
2040160e:	b759                	j	20401594 <__smakebuf_r+0x20>

20401610 <memset>:
memset():
20401610:	433d                	li	t1,15
20401612:	872a                	mv	a4,a0
20401614:	02c37363          	bgeu	t1,a2,2040163a <memset+0x2a>
20401618:	00f77793          	andi	a5,a4,15
2040161c:	efbd                	bnez	a5,2040169a <memset+0x8a>
2040161e:	e5ad                	bnez	a1,20401688 <memset+0x78>
20401620:	ff067693          	andi	a3,a2,-16
20401624:	8a3d                	andi	a2,a2,15
20401626:	96ba                	add	a3,a3,a4
20401628:	c30c                	sw	a1,0(a4)
2040162a:	c34c                	sw	a1,4(a4)
2040162c:	c70c                	sw	a1,8(a4)
2040162e:	c74c                	sw	a1,12(a4)
20401630:	0741                	addi	a4,a4,16
20401632:	fed76be3          	bltu	a4,a3,20401628 <memset+0x18>
20401636:	e211                	bnez	a2,2040163a <memset+0x2a>
20401638:	8082                	ret
2040163a:	40c306b3          	sub	a3,t1,a2
2040163e:	068a                	slli	a3,a3,0x2
20401640:	00000297          	auipc	t0,0x0
20401644:	9696                	add	a3,a3,t0
20401646:	00a68067          	jr	10(a3)
2040164a:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffb43a>
2040164e:	00b706a3          	sb	a1,13(a4)
20401652:	00b70623          	sb	a1,12(a4)
20401656:	00b705a3          	sb	a1,11(a4)
2040165a:	00b70523          	sb	a1,10(a4)
2040165e:	00b704a3          	sb	a1,9(a4)
20401662:	00b70423          	sb	a1,8(a4)
20401666:	00b703a3          	sb	a1,7(a4)
2040166a:	00b70323          	sb	a1,6(a4)
2040166e:	00b702a3          	sb	a1,5(a4)
20401672:	00b70223          	sb	a1,4(a4)
20401676:	00b701a3          	sb	a1,3(a4)
2040167a:	00b70123          	sb	a1,2(a4)
2040167e:	00b700a3          	sb	a1,1(a4)
20401682:	00b70023          	sb	a1,0(a4)
20401686:	8082                	ret
20401688:	0ff5f593          	andi	a1,a1,255
2040168c:	00859693          	slli	a3,a1,0x8
20401690:	8dd5                	or	a1,a1,a3
20401692:	01059693          	slli	a3,a1,0x10
20401696:	8dd5                	or	a1,a1,a3
20401698:	b761                	j	20401620 <memset+0x10>
2040169a:	00279693          	slli	a3,a5,0x2
2040169e:	00000297          	auipc	t0,0x0
204016a2:	9696                	add	a3,a3,t0
204016a4:	8286                	mv	t0,ra
204016a6:	fa8680e7          	jalr	-88(a3)
204016aa:	8096                	mv	ra,t0
204016ac:	17c1                	addi	a5,a5,-16
204016ae:	8f1d                	sub	a4,a4,a5
204016b0:	963e                	add	a2,a2,a5
204016b2:	f8c374e3          	bgeu	t1,a2,2040163a <memset+0x2a>
204016b6:	b7a5                	j	2040161e <memset+0xe>

204016b8 <_free_r>:
_free_r():
204016b8:	c5cd                	beqz	a1,20401762 <_free_r+0xaa>
204016ba:	ffc5a783          	lw	a5,-4(a1)
204016be:	1141                	addi	sp,sp,-16
204016c0:	c422                	sw	s0,8(sp)
204016c2:	c606                	sw	ra,12(sp)
204016c4:	c226                	sw	s1,4(sp)
204016c6:	ffc58413          	addi	s0,a1,-4
204016ca:	0007d363          	bgez	a5,204016d0 <_free_r+0x18>
204016ce:	943e                	add	s0,s0,a5
204016d0:	84aa                	mv	s1,a0
204016d2:	2591                	jal	20401d16 <__malloc_lock>
204016d4:	5fc00797          	auipc	a5,0x5fc00
204016d8:	05c78793          	addi	a5,a5,92 # 80001730 <metal_segment_data_target_end>
204016dc:	439c                	lw	a5,0(a5)
204016de:	ef89                	bnez	a5,204016f8 <_free_r+0x40>
204016e0:	00042223          	sw	zero,4(s0)
204016e4:	5fc00797          	auipc	a5,0x5fc00
204016e8:	0487a623          	sw	s0,76(a5) # 80001730 <metal_segment_data_target_end>
204016ec:	4422                	lw	s0,8(sp)
204016ee:	40b2                	lw	ra,12(sp)
204016f0:	8526                	mv	a0,s1
204016f2:	4492                	lw	s1,4(sp)
204016f4:	0141                	addi	sp,sp,16
204016f6:	a50d                	j	20401d18 <__malloc_unlock>
204016f8:	00f47e63          	bgeu	s0,a5,20401714 <_free_r+0x5c>
204016fc:	4014                	lw	a3,0(s0)
204016fe:	00d40733          	add	a4,s0,a3
20401702:	00e79663          	bne	a5,a4,2040170e <_free_r+0x56>
20401706:	4398                	lw	a4,0(a5)
20401708:	43dc                	lw	a5,4(a5)
2040170a:	9736                	add	a4,a4,a3
2040170c:	c018                	sw	a4,0(s0)
2040170e:	c05c                	sw	a5,4(s0)
20401710:	bfd1                	j	204016e4 <_free_r+0x2c>
20401712:	87ba                	mv	a5,a4
20401714:	43d8                	lw	a4,4(a5)
20401716:	c319                	beqz	a4,2040171c <_free_r+0x64>
20401718:	fee47de3          	bgeu	s0,a4,20401712 <_free_r+0x5a>
2040171c:	4394                	lw	a3,0(a5)
2040171e:	00d78633          	add	a2,a5,a3
20401722:	00861f63          	bne	a2,s0,20401740 <_free_r+0x88>
20401726:	4010                	lw	a2,0(s0)
20401728:	96b2                	add	a3,a3,a2
2040172a:	c394                	sw	a3,0(a5)
2040172c:	00d78633          	add	a2,a5,a3
20401730:	fac71ee3          	bne	a4,a2,204016ec <_free_r+0x34>
20401734:	4310                	lw	a2,0(a4)
20401736:	4358                	lw	a4,4(a4)
20401738:	96b2                	add	a3,a3,a2
2040173a:	c394                	sw	a3,0(a5)
2040173c:	c3d8                	sw	a4,4(a5)
2040173e:	b77d                	j	204016ec <_free_r+0x34>
20401740:	00c47563          	bgeu	s0,a2,2040174a <_free_r+0x92>
20401744:	47b1                	li	a5,12
20401746:	c09c                	sw	a5,0(s1)
20401748:	b755                	j	204016ec <_free_r+0x34>
2040174a:	4010                	lw	a2,0(s0)
2040174c:	00c406b3          	add	a3,s0,a2
20401750:	00d71663          	bne	a4,a3,2040175c <_free_r+0xa4>
20401754:	4314                	lw	a3,0(a4)
20401756:	4358                	lw	a4,4(a4)
20401758:	96b2                	add	a3,a3,a2
2040175a:	c014                	sw	a3,0(s0)
2040175c:	c058                	sw	a4,4(s0)
2040175e:	c3c0                	sw	s0,4(a5)
20401760:	b771                	j	204016ec <_free_r+0x34>
20401762:	8082                	ret

20401764 <_malloc_r>:
_malloc_r():
20401764:	1101                	addi	sp,sp,-32
20401766:	ca26                	sw	s1,20(sp)
20401768:	00358493          	addi	s1,a1,3
2040176c:	98f1                	andi	s1,s1,-4
2040176e:	ce06                	sw	ra,28(sp)
20401770:	cc22                	sw	s0,24(sp)
20401772:	c84a                	sw	s2,16(sp)
20401774:	c64e                	sw	s3,12(sp)
20401776:	04a1                	addi	s1,s1,8
20401778:	47b1                	li	a5,12
2040177a:	04f4f763          	bgeu	s1,a5,204017c8 <_malloc_r+0x64>
2040177e:	44b1                	li	s1,12
20401780:	04b4e663          	bltu	s1,a1,204017cc <_malloc_r+0x68>
20401784:	892a                	mv	s2,a0
20401786:	2b41                	jal	20401d16 <__malloc_lock>
20401788:	5fc00797          	auipc	a5,0x5fc00
2040178c:	fa878793          	addi	a5,a5,-88 # 80001730 <metal_segment_data_target_end>
20401790:	4398                	lw	a4,0(a5)
20401792:	843a                	mv	s0,a4
20401794:	e431                	bnez	s0,204017e0 <_malloc_r+0x7c>
20401796:	5fc00797          	auipc	a5,0x5fc00
2040179a:	f9e78793          	addi	a5,a5,-98 # 80001734 <__malloc_sbrk_start>
2040179e:	439c                	lw	a5,0(a5)
204017a0:	eb81                	bnez	a5,204017b0 <_malloc_r+0x4c>
204017a2:	4581                	li	a1,0
204017a4:	854a                	mv	a0,s2
204017a6:	264d                	jal	20401b48 <_sbrk_r>
204017a8:	5fc00797          	auipc	a5,0x5fc00
204017ac:	f8a7a623          	sw	a0,-116(a5) # 80001734 <__malloc_sbrk_start>
204017b0:	85a6                	mv	a1,s1
204017b2:	854a                	mv	a0,s2
204017b4:	2e51                	jal	20401b48 <_sbrk_r>
204017b6:	59fd                	li	s3,-1
204017b8:	07351963          	bne	a0,s3,2040182a <_malloc_r+0xc6>
204017bc:	47b1                	li	a5,12
204017be:	00f92023          	sw	a5,0(s2)
204017c2:	854a                	mv	a0,s2
204017c4:	2b91                	jal	20401d18 <__malloc_unlock>
204017c6:	a029                	j	204017d0 <_malloc_r+0x6c>
204017c8:	fa04dce3          	bgez	s1,20401780 <_malloc_r+0x1c>
204017cc:	47b1                	li	a5,12
204017ce:	c11c                	sw	a5,0(a0)
204017d0:	4501                	li	a0,0
204017d2:	40f2                	lw	ra,28(sp)
204017d4:	4462                	lw	s0,24(sp)
204017d6:	44d2                	lw	s1,20(sp)
204017d8:	4942                	lw	s2,16(sp)
204017da:	49b2                	lw	s3,12(sp)
204017dc:	6105                	addi	sp,sp,32
204017de:	8082                	ret
204017e0:	401c                	lw	a5,0(s0)
204017e2:	8f85                	sub	a5,a5,s1
204017e4:	0407c063          	bltz	a5,20401824 <_malloc_r+0xc0>
204017e8:	46ad                	li	a3,11
204017ea:	00f6f663          	bgeu	a3,a5,204017f6 <_malloc_r+0x92>
204017ee:	c01c                	sw	a5,0(s0)
204017f0:	943e                	add	s0,s0,a5
204017f2:	c004                	sw	s1,0(s0)
204017f4:	a801                	j	20401804 <_malloc_r+0xa0>
204017f6:	405c                	lw	a5,4(s0)
204017f8:	02871463          	bne	a4,s0,20401820 <_malloc_r+0xbc>
204017fc:	5fc00717          	auipc	a4,0x5fc00
20401800:	f2f72a23          	sw	a5,-204(a4) # 80001730 <metal_segment_data_target_end>
20401804:	854a                	mv	a0,s2
20401806:	2b09                	jal	20401d18 <__malloc_unlock>
20401808:	00b40513          	addi	a0,s0,11
2040180c:	00440793          	addi	a5,s0,4
20401810:	9961                	andi	a0,a0,-8
20401812:	40f50733          	sub	a4,a0,a5
20401816:	df55                	beqz	a4,204017d2 <_malloc_r+0x6e>
20401818:	943a                	add	s0,s0,a4
2040181a:	8f89                	sub	a5,a5,a0
2040181c:	c01c                	sw	a5,0(s0)
2040181e:	bf55                	j	204017d2 <_malloc_r+0x6e>
20401820:	c35c                	sw	a5,4(a4)
20401822:	b7cd                	j	20401804 <_malloc_r+0xa0>
20401824:	8722                	mv	a4,s0
20401826:	4040                	lw	s0,4(s0)
20401828:	b7b5                	j	20401794 <_malloc_r+0x30>
2040182a:	00350413          	addi	s0,a0,3
2040182e:	9871                	andi	s0,s0,-4
20401830:	fc8501e3          	beq	a0,s0,204017f2 <_malloc_r+0x8e>
20401834:	40a405b3          	sub	a1,s0,a0
20401838:	854a                	mv	a0,s2
2040183a:	2639                	jal	20401b48 <_sbrk_r>
2040183c:	fb351be3          	bne	a0,s3,204017f2 <_malloc_r+0x8e>
20401840:	bfb5                	j	204017bc <_malloc_r+0x58>

20401842 <__sfputc_r>:
__sfputc_r():
20401842:	461c                	lw	a5,8(a2)
20401844:	17fd                	addi	a5,a5,-1
20401846:	c61c                	sw	a5,8(a2)
20401848:	0007da63          	bgez	a5,2040185c <__sfputc_r+0x1a>
2040184c:	4e18                	lw	a4,24(a2)
2040184e:	00e7c563          	blt	a5,a4,20401858 <__sfputc_r+0x16>
20401852:	47a9                	li	a5,10
20401854:	00f59463          	bne	a1,a5,2040185c <__sfputc_r+0x1a>
20401858:	f1cff06f          	j	20400f74 <__swbuf_r>
2040185c:	421c                	lw	a5,0(a2)
2040185e:	852e                	mv	a0,a1
20401860:	00178713          	addi	a4,a5,1
20401864:	c218                	sw	a4,0(a2)
20401866:	00b78023          	sb	a1,0(a5)
2040186a:	8082                	ret

2040186c <__sfputs_r>:
__sfputs_r():
2040186c:	1101                	addi	sp,sp,-32
2040186e:	cc22                	sw	s0,24(sp)
20401870:	ca26                	sw	s1,20(sp)
20401872:	c84a                	sw	s2,16(sp)
20401874:	c64e                	sw	s3,12(sp)
20401876:	c452                	sw	s4,8(sp)
20401878:	ce06                	sw	ra,28(sp)
2040187a:	892a                	mv	s2,a0
2040187c:	89ae                	mv	s3,a1
2040187e:	8432                	mv	s0,a2
20401880:	00d604b3          	add	s1,a2,a3
20401884:	5a7d                	li	s4,-1
20401886:	00941463          	bne	s0,s1,2040188e <__sfputs_r+0x22>
2040188a:	4501                	li	a0,0
2040188c:	a809                	j	2040189e <__sfputs_r+0x32>
2040188e:	00044583          	lbu	a1,0(s0)
20401892:	864e                	mv	a2,s3
20401894:	854a                	mv	a0,s2
20401896:	3775                	jal	20401842 <__sfputc_r>
20401898:	0405                	addi	s0,s0,1
2040189a:	ff4516e3          	bne	a0,s4,20401886 <__sfputs_r+0x1a>
2040189e:	40f2                	lw	ra,28(sp)
204018a0:	4462                	lw	s0,24(sp)
204018a2:	44d2                	lw	s1,20(sp)
204018a4:	4942                	lw	s2,16(sp)
204018a6:	49b2                	lw	s3,12(sp)
204018a8:	4a22                	lw	s4,8(sp)
204018aa:	6105                	addi	sp,sp,32
204018ac:	8082                	ret

204018ae <_vfiprintf_r>:
_vfiprintf_r():
204018ae:	7135                	addi	sp,sp,-160
204018b0:	cd22                	sw	s0,152(sp)
204018b2:	cb26                	sw	s1,148(sp)
204018b4:	c94a                	sw	s2,144(sp)
204018b6:	c74e                	sw	s3,140(sp)
204018b8:	cf06                	sw	ra,156(sp)
204018ba:	c552                	sw	s4,136(sp)
204018bc:	c356                	sw	s5,132(sp)
204018be:	c15a                	sw	s6,128(sp)
204018c0:	dede                	sw	s7,124(sp)
204018c2:	dce2                	sw	s8,120(sp)
204018c4:	dae6                	sw	s9,116(sp)
204018c6:	89aa                	mv	s3,a0
204018c8:	84ae                	mv	s1,a1
204018ca:	8932                	mv	s2,a2
204018cc:	8436                	mv	s0,a3
204018ce:	c509                	beqz	a0,204018d8 <_vfiprintf_r+0x2a>
204018d0:	4d1c                	lw	a5,24(a0)
204018d2:	e399                	bnez	a5,204018d8 <_vfiprintf_r+0x2a>
204018d4:	ad5ff0ef          	jal	ra,204013a8 <__sinit>
204018d8:	00004797          	auipc	a5,0x4
204018dc:	3a878793          	addi	a5,a5,936 # 20405c80 <__sf_fake_stdin>
204018e0:	0cf49b63          	bne	s1,a5,204019b6 <_vfiprintf_r+0x108>
204018e4:	0049a483          	lw	s1,4(s3)
204018e8:	00c4d783          	lhu	a5,12(s1)
204018ec:	8ba1                	andi	a5,a5,8
204018ee:	c7f5                	beqz	a5,204019da <_vfiprintf_r+0x12c>
204018f0:	489c                	lw	a5,16(s1)
204018f2:	c7e5                	beqz	a5,204019da <_vfiprintf_r+0x12c>
204018f4:	02000793          	li	a5,32
204018f8:	02f104a3          	sb	a5,41(sp)
204018fc:	03000793          	li	a5,48
20401900:	d202                	sw	zero,36(sp)
20401902:	02f10523          	sb	a5,42(sp)
20401906:	c622                	sw	s0,12(sp)
20401908:	02500b93          	li	s7,37
2040190c:	00004a97          	auipc	s5,0x4
20401910:	3b4a8a93          	addi	s5,s5,948 # 20405cc0 <__sf_fake_stdout+0x20>
20401914:	4c05                	li	s8,1
20401916:	4b29                	li	s6,10
20401918:	844a                	mv	s0,s2
2040191a:	00044783          	lbu	a5,0(s0)
2040191e:	c399                	beqz	a5,20401924 <_vfiprintf_r+0x76>
20401920:	0f779063          	bne	a5,s7,20401a00 <_vfiprintf_r+0x152>
20401924:	41240cb3          	sub	s9,s0,s2
20401928:	000c8d63          	beqz	s9,20401942 <_vfiprintf_r+0x94>
2040192c:	86e6                	mv	a3,s9
2040192e:	864a                	mv	a2,s2
20401930:	85a6                	mv	a1,s1
20401932:	854e                	mv	a0,s3
20401934:	3f25                	jal	2040186c <__sfputs_r>
20401936:	57fd                	li	a5,-1
20401938:	1ef50663          	beq	a0,a5,20401b24 <_vfiprintf_r+0x276>
2040193c:	5692                	lw	a3,36(sp)
2040193e:	96e6                	add	a3,a3,s9
20401940:	d236                	sw	a3,36(sp)
20401942:	00044783          	lbu	a5,0(s0)
20401946:	1c078f63          	beqz	a5,20401b24 <_vfiprintf_r+0x276>
2040194a:	57fd                	li	a5,-1
2040194c:	00140913          	addi	s2,s0,1
20401950:	c802                	sw	zero,16(sp)
20401952:	ce02                	sw	zero,28(sp)
20401954:	ca3e                	sw	a5,20(sp)
20401956:	cc02                	sw	zero,24(sp)
20401958:	040109a3          	sb	zero,83(sp)
2040195c:	d482                	sw	zero,104(sp)
2040195e:	00094583          	lbu	a1,0(s2)
20401962:	4615                	li	a2,5
20401964:	8556                	mv	a0,s5
20401966:	2e59                	jal	20401cfc <memchr>
20401968:	00190413          	addi	s0,s2,1
2040196c:	47c2                	lw	a5,16(sp)
2040196e:	e959                	bnez	a0,20401a04 <_vfiprintf_r+0x156>
20401970:	0107f713          	andi	a4,a5,16
20401974:	c709                	beqz	a4,2040197e <_vfiprintf_r+0xd0>
20401976:	02000713          	li	a4,32
2040197a:	04e109a3          	sb	a4,83(sp)
2040197e:	0087f713          	andi	a4,a5,8
20401982:	c709                	beqz	a4,2040198c <_vfiprintf_r+0xde>
20401984:	02b00713          	li	a4,43
20401988:	04e109a3          	sb	a4,83(sp)
2040198c:	00094683          	lbu	a3,0(s2)
20401990:	02a00713          	li	a4,42
20401994:	08e68063          	beq	a3,a4,20401a14 <_vfiprintf_r+0x166>
20401998:	47f2                	lw	a5,28(sp)
2040199a:	844a                	mv	s0,s2
2040199c:	4681                	li	a3,0
2040199e:	4625                	li	a2,9
204019a0:	00044703          	lbu	a4,0(s0)
204019a4:	00140593          	addi	a1,s0,1
204019a8:	fd070713          	addi	a4,a4,-48
204019ac:	0ae67963          	bgeu	a2,a4,20401a5e <_vfiprintf_r+0x1b0>
204019b0:	cab5                	beqz	a3,20401a24 <_vfiprintf_r+0x176>
204019b2:	ce3e                	sw	a5,28(sp)
204019b4:	a885                	j	20401a24 <_vfiprintf_r+0x176>
204019b6:	00004797          	auipc	a5,0x4
204019ba:	2ea78793          	addi	a5,a5,746 # 20405ca0 <__sf_fake_stdout>
204019be:	00f49563          	bne	s1,a5,204019c8 <_vfiprintf_r+0x11a>
204019c2:	0089a483          	lw	s1,8(s3)
204019c6:	b70d                	j	204018e8 <_vfiprintf_r+0x3a>
204019c8:	00004797          	auipc	a5,0x4
204019cc:	29878793          	addi	a5,a5,664 # 20405c60 <__sf_fake_stderr>
204019d0:	f0f49ce3          	bne	s1,a5,204018e8 <_vfiprintf_r+0x3a>
204019d4:	00c9a483          	lw	s1,12(s3)
204019d8:	bf01                	j	204018e8 <_vfiprintf_r+0x3a>
204019da:	85a6                	mv	a1,s1
204019dc:	854e                	mv	a0,s3
204019de:	e56ff0ef          	jal	ra,20401034 <__swsetup_r>
204019e2:	d909                	beqz	a0,204018f4 <_vfiprintf_r+0x46>
204019e4:	557d                	li	a0,-1
204019e6:	40fa                	lw	ra,156(sp)
204019e8:	446a                	lw	s0,152(sp)
204019ea:	44da                	lw	s1,148(sp)
204019ec:	494a                	lw	s2,144(sp)
204019ee:	49ba                	lw	s3,140(sp)
204019f0:	4a2a                	lw	s4,136(sp)
204019f2:	4a9a                	lw	s5,132(sp)
204019f4:	4b0a                	lw	s6,128(sp)
204019f6:	5bf6                	lw	s7,124(sp)
204019f8:	5c66                	lw	s8,120(sp)
204019fa:	5cd6                	lw	s9,116(sp)
204019fc:	610d                	addi	sp,sp,160
204019fe:	8082                	ret
20401a00:	0405                	addi	s0,s0,1
20401a02:	bf21                	j	2040191a <_vfiprintf_r+0x6c>
20401a04:	41550533          	sub	a0,a0,s5
20401a08:	00ac1533          	sll	a0,s8,a0
20401a0c:	8fc9                	or	a5,a5,a0
20401a0e:	c83e                	sw	a5,16(sp)
20401a10:	8922                	mv	s2,s0
20401a12:	b7b1                	j	2040195e <_vfiprintf_r+0xb0>
20401a14:	4732                	lw	a4,12(sp)
20401a16:	00470693          	addi	a3,a4,4
20401a1a:	4318                	lw	a4,0(a4)
20401a1c:	c636                	sw	a3,12(sp)
20401a1e:	02074963          	bltz	a4,20401a50 <_vfiprintf_r+0x1a2>
20401a22:	ce3a                	sw	a4,28(sp)
20401a24:	00044703          	lbu	a4,0(s0)
20401a28:	02e00793          	li	a5,46
20401a2c:	04f71f63          	bne	a4,a5,20401a8a <_vfiprintf_r+0x1dc>
20401a30:	00144703          	lbu	a4,1(s0)
20401a34:	02a00793          	li	a5,42
20401a38:	02f71b63          	bne	a4,a5,20401a6e <_vfiprintf_r+0x1c0>
20401a3c:	47b2                	lw	a5,12(sp)
20401a3e:	0409                	addi	s0,s0,2
20401a40:	00478713          	addi	a4,a5,4
20401a44:	439c                	lw	a5,0(a5)
20401a46:	c63a                	sw	a4,12(sp)
20401a48:	0207c163          	bltz	a5,20401a6a <_vfiprintf_r+0x1bc>
20401a4c:	ca3e                	sw	a5,20(sp)
20401a4e:	a835                	j	20401a8a <_vfiprintf_r+0x1dc>
20401a50:	40e00733          	neg	a4,a4
20401a54:	0027e793          	ori	a5,a5,2
20401a58:	ce3a                	sw	a4,28(sp)
20401a5a:	c83e                	sw	a5,16(sp)
20401a5c:	b7e1                	j	20401a24 <_vfiprintf_r+0x176>
20401a5e:	036787b3          	mul	a5,a5,s6
20401a62:	4685                	li	a3,1
20401a64:	842e                	mv	s0,a1
20401a66:	97ba                	add	a5,a5,a4
20401a68:	bf25                	j	204019a0 <_vfiprintf_r+0xf2>
20401a6a:	57fd                	li	a5,-1
20401a6c:	b7c5                	j	20401a4c <_vfiprintf_r+0x19e>
20401a6e:	0405                	addi	s0,s0,1
20401a70:	ca02                	sw	zero,20(sp)
20401a72:	4681                	li	a3,0
20401a74:	4781                	li	a5,0
20401a76:	4625                	li	a2,9
20401a78:	00044703          	lbu	a4,0(s0)
20401a7c:	00140593          	addi	a1,s0,1
20401a80:	fd070713          	addi	a4,a4,-48
20401a84:	06e67663          	bgeu	a2,a4,20401af0 <_vfiprintf_r+0x242>
20401a88:	f2f1                	bnez	a3,20401a4c <_vfiprintf_r+0x19e>
20401a8a:	00044583          	lbu	a1,0(s0)
20401a8e:	460d                	li	a2,3
20401a90:	00004517          	auipc	a0,0x4
20401a94:	23850513          	addi	a0,a0,568 # 20405cc8 <__sf_fake_stdout+0x28>
20401a98:	2495                	jal	20401cfc <memchr>
20401a9a:	cd11                	beqz	a0,20401ab6 <_vfiprintf_r+0x208>
20401a9c:	00004797          	auipc	a5,0x4
20401aa0:	22c78793          	addi	a5,a5,556 # 20405cc8 <__sf_fake_stdout+0x28>
20401aa4:	8d1d                	sub	a0,a0,a5
20401aa6:	04000793          	li	a5,64
20401aaa:	00a797b3          	sll	a5,a5,a0
20401aae:	4542                	lw	a0,16(sp)
20401ab0:	0405                	addi	s0,s0,1
20401ab2:	8d5d                	or	a0,a0,a5
20401ab4:	c82a                	sw	a0,16(sp)
20401ab6:	00044583          	lbu	a1,0(s0)
20401aba:	4619                	li	a2,6
20401abc:	00004517          	auipc	a0,0x4
20401ac0:	21050513          	addi	a0,a0,528 # 20405ccc <__sf_fake_stdout+0x2c>
20401ac4:	00140913          	addi	s2,s0,1
20401ac8:	02b10423          	sb	a1,40(sp)
20401acc:	2c05                	jal	20401cfc <memchr>
20401ace:	c13d                	beqz	a0,20401b34 <_vfiprintf_r+0x286>
20401ad0:	dfbfe797          	auipc	a5,0xdfbfe
20401ad4:	53078793          	addi	a5,a5,1328 # 0 <__metal_boot_hart>
20401ad8:	e795                	bnez	a5,20401b04 <_vfiprintf_r+0x256>
20401ada:	4742                	lw	a4,16(sp)
20401adc:	47b2                	lw	a5,12(sp)
20401ade:	10077713          	andi	a4,a4,256
20401ae2:	cf09                	beqz	a4,20401afc <_vfiprintf_r+0x24e>
20401ae4:	0791                	addi	a5,a5,4
20401ae6:	c63e                	sw	a5,12(sp)
20401ae8:	5792                	lw	a5,36(sp)
20401aea:	97d2                	add	a5,a5,s4
20401aec:	d23e                	sw	a5,36(sp)
20401aee:	b52d                	j	20401918 <_vfiprintf_r+0x6a>
20401af0:	036787b3          	mul	a5,a5,s6
20401af4:	4685                	li	a3,1
20401af6:	842e                	mv	s0,a1
20401af8:	97ba                	add	a5,a5,a4
20401afa:	bfbd                	j	20401a78 <_vfiprintf_r+0x1ca>
20401afc:	079d                	addi	a5,a5,7
20401afe:	9be1                	andi	a5,a5,-8
20401b00:	07a1                	addi	a5,a5,8
20401b02:	b7d5                	j	20401ae6 <_vfiprintf_r+0x238>
20401b04:	0078                	addi	a4,sp,12
20401b06:	00000697          	auipc	a3,0x0
20401b0a:	d6668693          	addi	a3,a3,-666 # 2040186c <__sfputs_r>
20401b0e:	8626                	mv	a2,s1
20401b10:	080c                	addi	a1,sp,16
20401b12:	854e                	mv	a0,s3
20401b14:	00000097          	auipc	ra,0x0
20401b18:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401b1c:	57fd                	li	a5,-1
20401b1e:	8a2a                	mv	s4,a0
20401b20:	fcf514e3          	bne	a0,a5,20401ae8 <_vfiprintf_r+0x23a>
20401b24:	00c4d783          	lhu	a5,12(s1)
20401b28:	0407f793          	andi	a5,a5,64
20401b2c:	ea079ce3          	bnez	a5,204019e4 <_vfiprintf_r+0x136>
20401b30:	5512                	lw	a0,36(sp)
20401b32:	bd55                	j	204019e6 <_vfiprintf_r+0x138>
20401b34:	0078                	addi	a4,sp,12
20401b36:	00000697          	auipc	a3,0x0
20401b3a:	d3668693          	addi	a3,a3,-714 # 2040186c <__sfputs_r>
20401b3e:	8626                	mv	a2,s1
20401b40:	080c                	addi	a1,sp,16
20401b42:	854e                	mv	a0,s3
20401b44:	24cd                	jal	20401e26 <_printf_i>
20401b46:	bfd9                	j	20401b1c <_vfiprintf_r+0x26e>

20401b48 <_sbrk_r>:
_sbrk_r():
20401b48:	1141                	addi	sp,sp,-16
20401b4a:	c422                	sw	s0,8(sp)
20401b4c:	842a                	mv	s0,a0
20401b4e:	852e                	mv	a0,a1
20401b50:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401b54:	c606                	sw	ra,12(sp)
20401b56:	2da9                	jal	204021b0 <_sbrk>
20401b58:	57fd                	li	a5,-1
20401b5a:	00f51763          	bne	a0,a5,20401b68 <_sbrk_r+0x20>
20401b5e:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401b62:	439c                	lw	a5,0(a5)
20401b64:	c391                	beqz	a5,20401b68 <_sbrk_r+0x20>
20401b66:	c01c                	sw	a5,0(s0)
20401b68:	40b2                	lw	ra,12(sp)
20401b6a:	4422                	lw	s0,8(sp)
20401b6c:	0141                	addi	sp,sp,16
20401b6e:	8082                	ret

20401b70 <__sread>:
__sread():
20401b70:	1141                	addi	sp,sp,-16
20401b72:	c422                	sw	s0,8(sp)
20401b74:	842e                	mv	s0,a1
20401b76:	00e59583          	lh	a1,14(a1)
20401b7a:	c606                	sw	ra,12(sp)
20401b7c:	23b1                	jal	204020c8 <_read_r>
20401b7e:	00054963          	bltz	a0,20401b90 <__sread+0x20>
20401b82:	487c                	lw	a5,84(s0)
20401b84:	97aa                	add	a5,a5,a0
20401b86:	c87c                	sw	a5,84(s0)
20401b88:	40b2                	lw	ra,12(sp)
20401b8a:	4422                	lw	s0,8(sp)
20401b8c:	0141                	addi	sp,sp,16
20401b8e:	8082                	ret
20401b90:	00c45783          	lhu	a5,12(s0)
20401b94:	777d                	lui	a4,0xfffff
20401b96:	177d                	addi	a4,a4,-1
20401b98:	8ff9                	and	a5,a5,a4
20401b9a:	00f41623          	sh	a5,12(s0)
20401b9e:	b7ed                	j	20401b88 <__sread+0x18>

20401ba0 <__swrite>:
__swrite():
20401ba0:	00c5d783          	lhu	a5,12(a1)
20401ba4:	1101                	addi	sp,sp,-32
20401ba6:	cc22                	sw	s0,24(sp)
20401ba8:	ca26                	sw	s1,20(sp)
20401baa:	c84a                	sw	s2,16(sp)
20401bac:	c64e                	sw	s3,12(sp)
20401bae:	ce06                	sw	ra,28(sp)
20401bb0:	1007f793          	andi	a5,a5,256
20401bb4:	84aa                	mv	s1,a0
20401bb6:	842e                	mv	s0,a1
20401bb8:	8932                	mv	s2,a2
20401bba:	89b6                	mv	s3,a3
20401bbc:	c791                	beqz	a5,20401bc8 <__swrite+0x28>
20401bbe:	00e59583          	lh	a1,14(a1)
20401bc2:	4689                	li	a3,2
20401bc4:	4601                	li	a2,0
20401bc6:	2229                	jal	20401cd0 <_lseek_r>
20401bc8:	00c45783          	lhu	a5,12(s0)
20401bcc:	777d                	lui	a4,0xfffff
20401bce:	177d                	addi	a4,a4,-1
20401bd0:	8ff9                	and	a5,a5,a4
20401bd2:	00f41623          	sh	a5,12(s0)
20401bd6:	00e41583          	lh	a1,14(s0)
20401bda:	4462                	lw	s0,24(sp)
20401bdc:	40f2                	lw	ra,28(sp)
20401bde:	86ce                	mv	a3,s3
20401be0:	864a                	mv	a2,s2
20401be2:	49b2                	lw	s3,12(sp)
20401be4:	4942                	lw	s2,16(sp)
20401be6:	8526                	mv	a0,s1
20401be8:	44d2                	lw	s1,20(sp)
20401bea:	6105                	addi	sp,sp,32
20401bec:	a83d                	j	20401c2a <_write_r>

20401bee <__sseek>:
__sseek():
20401bee:	1141                	addi	sp,sp,-16
20401bf0:	c422                	sw	s0,8(sp)
20401bf2:	842e                	mv	s0,a1
20401bf4:	00e59583          	lh	a1,14(a1)
20401bf8:	c606                	sw	ra,12(sp)
20401bfa:	28d9                	jal	20401cd0 <_lseek_r>
20401bfc:	57fd                	li	a5,-1
20401bfe:	00c45703          	lhu	a4,12(s0)
20401c02:	00f51b63          	bne	a0,a5,20401c18 <__sseek+0x2a>
20401c06:	77fd                	lui	a5,0xfffff
20401c08:	17fd                	addi	a5,a5,-1
20401c0a:	8ff9                	and	a5,a5,a4
20401c0c:	00f41623          	sh	a5,12(s0)
20401c10:	40b2                	lw	ra,12(sp)
20401c12:	4422                	lw	s0,8(sp)
20401c14:	0141                	addi	sp,sp,16
20401c16:	8082                	ret
20401c18:	6785                	lui	a5,0x1
20401c1a:	8fd9                	or	a5,a5,a4
20401c1c:	00f41623          	sh	a5,12(s0)
20401c20:	c868                	sw	a0,84(s0)
20401c22:	b7fd                	j	20401c10 <__sseek+0x22>

20401c24 <__sclose>:
__sclose():
20401c24:	00e59583          	lh	a1,14(a1)
20401c28:	a03d                	j	20401c56 <_close_r>

20401c2a <_write_r>:
_write_r():
20401c2a:	1141                	addi	sp,sp,-16
20401c2c:	c422                	sw	s0,8(sp)
20401c2e:	842a                	mv	s0,a0
20401c30:	852e                	mv	a0,a1
20401c32:	85b2                	mv	a1,a2
20401c34:	8636                	mv	a2,a3
20401c36:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401c3a:	c606                	sw	ra,12(sp)
20401c3c:	23fd                	jal	2040222a <_write>
20401c3e:	57fd                	li	a5,-1
20401c40:	00f51763          	bne	a0,a5,20401c4e <_write_r+0x24>
20401c44:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401c48:	439c                	lw	a5,0(a5)
20401c4a:	c391                	beqz	a5,20401c4e <_write_r+0x24>
20401c4c:	c01c                	sw	a5,0(s0)
20401c4e:	40b2                	lw	ra,12(sp)
20401c50:	4422                	lw	s0,8(sp)
20401c52:	0141                	addi	sp,sp,16
20401c54:	8082                	ret

20401c56 <_close_r>:
_close_r():
20401c56:	1141                	addi	sp,sp,-16
20401c58:	c422                	sw	s0,8(sp)
20401c5a:	842a                	mv	s0,a0
20401c5c:	852e                	mv	a0,a1
20401c5e:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401c62:	c606                	sw	ra,12(sp)
20401c64:	2941                	jal	204020f4 <_close>
20401c66:	57fd                	li	a5,-1
20401c68:	00f51763          	bne	a0,a5,20401c76 <_close_r+0x20>
20401c6c:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401c70:	439c                	lw	a5,0(a5)
20401c72:	c391                	beqz	a5,20401c76 <_close_r+0x20>
20401c74:	c01c                	sw	a5,0(s0)
20401c76:	40b2                	lw	ra,12(sp)
20401c78:	4422                	lw	s0,8(sp)
20401c7a:	0141                	addi	sp,sp,16
20401c7c:	8082                	ret

20401c7e <_fstat_r>:
_fstat_r():
20401c7e:	1141                	addi	sp,sp,-16
20401c80:	c422                	sw	s0,8(sp)
20401c82:	842a                	mv	s0,a0
20401c84:	852e                	mv	a0,a1
20401c86:	85b2                	mv	a1,a2
20401c88:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401c8c:	c606                	sw	ra,12(sp)
20401c8e:	2161                	jal	20402116 <_fstat>
20401c90:	57fd                	li	a5,-1
20401c92:	00f51763          	bne	a0,a5,20401ca0 <_fstat_r+0x22>
20401c96:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401c9a:	439c                	lw	a5,0(a5)
20401c9c:	c391                	beqz	a5,20401ca0 <_fstat_r+0x22>
20401c9e:	c01c                	sw	a5,0(s0)
20401ca0:	40b2                	lw	ra,12(sp)
20401ca2:	4422                	lw	s0,8(sp)
20401ca4:	0141                	addi	sp,sp,16
20401ca6:	8082                	ret

20401ca8 <_isatty_r>:
_isatty_r():
20401ca8:	1141                	addi	sp,sp,-16
20401caa:	c422                	sw	s0,8(sp)
20401cac:	842a                	mv	s0,a0
20401cae:	852e                	mv	a0,a1
20401cb0:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401cb4:	c606                	sw	ra,12(sp)
20401cb6:	2159                	jal	2040213c <_isatty>
20401cb8:	57fd                	li	a5,-1
20401cba:	00f51763          	bne	a0,a5,20401cc8 <_isatty_r+0x20>
20401cbe:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401cc2:	439c                	lw	a5,0(a5)
20401cc4:	c391                	beqz	a5,20401cc8 <_isatty_r+0x20>
20401cc6:	c01c                	sw	a5,0(s0)
20401cc8:	40b2                	lw	ra,12(sp)
20401cca:	4422                	lw	s0,8(sp)
20401ccc:	0141                	addi	sp,sp,16
20401cce:	8082                	ret

20401cd0 <_lseek_r>:
_lseek_r():
20401cd0:	1141                	addi	sp,sp,-16
20401cd2:	c422                	sw	s0,8(sp)
20401cd4:	842a                	mv	s0,a0
20401cd6:	852e                	mv	a0,a1
20401cd8:	85b2                	mv	a1,a2
20401cda:	8636                	mv	a2,a3
20401cdc:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401ce0:	c606                	sw	ra,12(sp)
20401ce2:	29ad                	jal	2040215c <_lseek>
20401ce4:	57fd                	li	a5,-1
20401ce6:	00f51763          	bne	a0,a5,20401cf4 <_lseek_r+0x24>
20401cea:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401cee:	439c                	lw	a5,0(a5)
20401cf0:	c391                	beqz	a5,20401cf4 <_lseek_r+0x24>
20401cf2:	c01c                	sw	a5,0(s0)
20401cf4:	40b2                	lw	ra,12(sp)
20401cf6:	4422                	lw	s0,8(sp)
20401cf8:	0141                	addi	sp,sp,16
20401cfa:	8082                	ret

20401cfc <memchr>:
memchr():
20401cfc:	0ff5f593          	andi	a1,a1,255
20401d00:	962a                	add	a2,a2,a0
20401d02:	00c51463          	bne	a0,a2,20401d0a <memchr+0xe>
20401d06:	4501                	li	a0,0
20401d08:	8082                	ret
20401d0a:	00054783          	lbu	a5,0(a0)
20401d0e:	feb78de3          	beq	a5,a1,20401d08 <memchr+0xc>
20401d12:	0505                	addi	a0,a0,1
20401d14:	b7fd                	j	20401d02 <memchr+0x6>

20401d16 <__malloc_lock>:
__malloc_lock():
20401d16:	8082                	ret

20401d18 <__malloc_unlock>:
__malloc_unlock():
20401d18:	8082                	ret

20401d1a <_printf_common>:
_printf_common():
20401d1a:	7179                	addi	sp,sp,-48
20401d1c:	ca56                	sw	s5,20(sp)
20401d1e:	499c                	lw	a5,16(a1)
20401d20:	8aba                	mv	s5,a4
20401d22:	4598                	lw	a4,8(a1)
20401d24:	d422                	sw	s0,40(sp)
20401d26:	d226                	sw	s1,36(sp)
20401d28:	ce4e                	sw	s3,28(sp)
20401d2a:	cc52                	sw	s4,24(sp)
20401d2c:	d606                	sw	ra,44(sp)
20401d2e:	d04a                	sw	s2,32(sp)
20401d30:	c85a                	sw	s6,16(sp)
20401d32:	c65e                	sw	s7,12(sp)
20401d34:	89aa                	mv	s3,a0
20401d36:	842e                	mv	s0,a1
20401d38:	84b2                	mv	s1,a2
20401d3a:	8a36                	mv	s4,a3
20401d3c:	00e7d363          	bge	a5,a4,20401d42 <_printf_common+0x28>
20401d40:	87ba                	mv	a5,a4
20401d42:	c09c                	sw	a5,0(s1)
20401d44:	04344703          	lbu	a4,67(s0)
20401d48:	c319                	beqz	a4,20401d4e <_printf_common+0x34>
20401d4a:	0785                	addi	a5,a5,1
20401d4c:	c09c                	sw	a5,0(s1)
20401d4e:	401c                	lw	a5,0(s0)
20401d50:	0207f793          	andi	a5,a5,32
20401d54:	c781                	beqz	a5,20401d5c <_printf_common+0x42>
20401d56:	409c                	lw	a5,0(s1)
20401d58:	0789                	addi	a5,a5,2
20401d5a:	c09c                	sw	a5,0(s1)
20401d5c:	00042903          	lw	s2,0(s0)
20401d60:	00697913          	andi	s2,s2,6
20401d64:	00091a63          	bnez	s2,20401d78 <_printf_common+0x5e>
20401d68:	01940b13          	addi	s6,s0,25
20401d6c:	5bfd                	li	s7,-1
20401d6e:	445c                	lw	a5,12(s0)
20401d70:	4098                	lw	a4,0(s1)
20401d72:	8f99                	sub	a5,a5,a4
20401d74:	04f94c63          	blt	s2,a5,20401dcc <_printf_common+0xb2>
20401d78:	401c                	lw	a5,0(s0)
20401d7a:	04344683          	lbu	a3,67(s0)
20401d7e:	0207f793          	andi	a5,a5,32
20401d82:	00d036b3          	snez	a3,a3
20401d86:	eba5                	bnez	a5,20401df6 <_printf_common+0xdc>
20401d88:	04340613          	addi	a2,s0,67
20401d8c:	85d2                	mv	a1,s4
20401d8e:	854e                	mv	a0,s3
20401d90:	9a82                	jalr	s5
20401d92:	57fd                	li	a5,-1
20401d94:	04f50363          	beq	a0,a5,20401dda <_printf_common+0xc0>
20401d98:	401c                	lw	a5,0(s0)
20401d9a:	4611                	li	a2,4
20401d9c:	4098                	lw	a4,0(s1)
20401d9e:	8b99                	andi	a5,a5,6
20401da0:	4454                	lw	a3,12(s0)
20401da2:	4481                	li	s1,0
20401da4:	00c79763          	bne	a5,a2,20401db2 <_printf_common+0x98>
20401da8:	40e684b3          	sub	s1,a3,a4
20401dac:	0004d363          	bgez	s1,20401db2 <_printf_common+0x98>
20401db0:	4481                	li	s1,0
20401db2:	441c                	lw	a5,8(s0)
20401db4:	4818                	lw	a4,16(s0)
20401db6:	00f75463          	bge	a4,a5,20401dbe <_printf_common+0xa4>
20401dba:	8f99                	sub	a5,a5,a4
20401dbc:	94be                	add	s1,s1,a5
20401dbe:	4901                	li	s2,0
20401dc0:	0469                	addi	s0,s0,26
20401dc2:	5b7d                	li	s6,-1
20401dc4:	05249863          	bne	s1,s2,20401e14 <_printf_common+0xfa>
20401dc8:	4501                	li	a0,0
20401dca:	a809                	j	20401ddc <_printf_common+0xc2>
20401dcc:	4685                	li	a3,1
20401dce:	865a                	mv	a2,s6
20401dd0:	85d2                	mv	a1,s4
20401dd2:	854e                	mv	a0,s3
20401dd4:	9a82                	jalr	s5
20401dd6:	01751e63          	bne	a0,s7,20401df2 <_printf_common+0xd8>
20401dda:	557d                	li	a0,-1
20401ddc:	50b2                	lw	ra,44(sp)
20401dde:	5422                	lw	s0,40(sp)
20401de0:	5492                	lw	s1,36(sp)
20401de2:	5902                	lw	s2,32(sp)
20401de4:	49f2                	lw	s3,28(sp)
20401de6:	4a62                	lw	s4,24(sp)
20401de8:	4ad2                	lw	s5,20(sp)
20401dea:	4b42                	lw	s6,16(sp)
20401dec:	4bb2                	lw	s7,12(sp)
20401dee:	6145                	addi	sp,sp,48
20401df0:	8082                	ret
20401df2:	0905                	addi	s2,s2,1
20401df4:	bfad                	j	20401d6e <_printf_common+0x54>
20401df6:	00d40733          	add	a4,s0,a3
20401dfa:	03000613          	li	a2,48
20401dfe:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffc46f>
20401e02:	04544703          	lbu	a4,69(s0)
20401e06:	00168793          	addi	a5,a3,1
20401e0a:	97a2                	add	a5,a5,s0
20401e0c:	0689                	addi	a3,a3,2
20401e0e:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20401e12:	bf9d                	j	20401d88 <_printf_common+0x6e>
20401e14:	4685                	li	a3,1
20401e16:	8622                	mv	a2,s0
20401e18:	85d2                	mv	a1,s4
20401e1a:	854e                	mv	a0,s3
20401e1c:	9a82                	jalr	s5
20401e1e:	fb650ee3          	beq	a0,s6,20401dda <_printf_common+0xc0>
20401e22:	0905                	addi	s2,s2,1
20401e24:	b745                	j	20401dc4 <_printf_common+0xaa>

20401e26 <_printf_i>:
_printf_i():
20401e26:	7179                	addi	sp,sp,-48
20401e28:	d422                	sw	s0,40(sp)
20401e2a:	d226                	sw	s1,36(sp)
20401e2c:	d04a                	sw	s2,32(sp)
20401e2e:	ce4e                	sw	s3,28(sp)
20401e30:	d606                	sw	ra,44(sp)
20401e32:	cc52                	sw	s4,24(sp)
20401e34:	ca56                	sw	s5,20(sp)
20401e36:	c85a                	sw	s6,16(sp)
20401e38:	89b6                	mv	s3,a3
20401e3a:	0185c683          	lbu	a3,24(a1)
20401e3e:	06e00793          	li	a5,110
20401e42:	8932                	mv	s2,a2
20401e44:	84aa                	mv	s1,a0
20401e46:	842e                	mv	s0,a1
20401e48:	04358613          	addi	a2,a1,67
20401e4c:	1ef68063          	beq	a3,a5,2040202c <_printf_i+0x206>
20401e50:	06d7e263          	bltu	a5,a3,20401eb4 <_printf_i+0x8e>
20401e54:	06300793          	li	a5,99
20401e58:	0af68263          	beq	a3,a5,20401efc <_printf_i+0xd6>
20401e5c:	00d7ed63          	bltu	a5,a3,20401e76 <_printf_i+0x50>
20401e60:	1e068a63          	beqz	a3,20402054 <_printf_i+0x22e>
20401e64:	05800793          	li	a5,88
20401e68:	16f68663          	beq	a3,a5,20401fd4 <_printf_i+0x1ae>
20401e6c:	04240a93          	addi	s5,s0,66
20401e70:	04d40123          	sb	a3,66(s0)
20401e74:	a869                	j	20401f0e <_printf_i+0xe8>
20401e76:	06400793          	li	a5,100
20401e7a:	00f68663          	beq	a3,a5,20401e86 <_printf_i+0x60>
20401e7e:	06900793          	li	a5,105
20401e82:	fef695e3          	bne	a3,a5,20401e6c <_printf_i+0x46>
20401e86:	401c                	lw	a5,0(s0)
20401e88:	4308                	lw	a0,0(a4)
20401e8a:	0807f693          	andi	a3,a5,128
20401e8e:	00450593          	addi	a1,a0,4
20401e92:	c2c1                	beqz	a3,20401f12 <_printf_i+0xec>
20401e94:	411c                	lw	a5,0(a0)
20401e96:	c30c                	sw	a1,0(a4)
20401e98:	0007d863          	bgez	a5,20401ea8 <_printf_i+0x82>
20401e9c:	02d00713          	li	a4,45
20401ea0:	40f007b3          	neg	a5,a5
20401ea4:	04e401a3          	sb	a4,67(s0)
20401ea8:	00004697          	auipc	a3,0x4
20401eac:	e2c68693          	addi	a3,a3,-468 # 20405cd4 <__sf_fake_stdout+0x34>
20401eb0:	4729                	li	a4,10
20401eb2:	a065                	j	20401f5a <_printf_i+0x134>
20401eb4:	07300793          	li	a5,115
20401eb8:	1af68263          	beq	a3,a5,2040205c <_printf_i+0x236>
20401ebc:	00d7ef63          	bltu	a5,a3,20401eda <_printf_i+0xb4>
20401ec0:	06f00793          	li	a5,111
20401ec4:	04f68f63          	beq	a3,a5,20401f22 <_printf_i+0xfc>
20401ec8:	07000793          	li	a5,112
20401ecc:	faf690e3          	bne	a3,a5,20401e6c <_printf_i+0x46>
20401ed0:	419c                	lw	a5,0(a1)
20401ed2:	0207e793          	ori	a5,a5,32
20401ed6:	c19c                	sw	a5,0(a1)
20401ed8:	a809                	j	20401eea <_printf_i+0xc4>
20401eda:	07500793          	li	a5,117
20401ede:	04f68263          	beq	a3,a5,20401f22 <_printf_i+0xfc>
20401ee2:	07800793          	li	a5,120
20401ee6:	f8f693e3          	bne	a3,a5,20401e6c <_printf_i+0x46>
20401eea:	07800793          	li	a5,120
20401eee:	04f402a3          	sb	a5,69(s0)
20401ef2:	00004697          	auipc	a3,0x4
20401ef6:	df668693          	addi	a3,a3,-522 # 20405ce8 <__sf_fake_stdout+0x48>
20401efa:	a0dd                	j	20401fe0 <_printf_i+0x1ba>
20401efc:	431c                	lw	a5,0(a4)
20401efe:	04258a93          	addi	s5,a1,66
20401f02:	00478693          	addi	a3,a5,4
20401f06:	439c                	lw	a5,0(a5)
20401f08:	c314                	sw	a3,0(a4)
20401f0a:	04f58123          	sb	a5,66(a1)
20401f0e:	4785                	li	a5,1
20401f10:	a2ad                	j	2040207a <_printf_i+0x254>
20401f12:	0407f693          	andi	a3,a5,64
20401f16:	411c                	lw	a5,0(a0)
20401f18:	c30c                	sw	a1,0(a4)
20401f1a:	debd                	beqz	a3,20401e98 <_printf_i+0x72>
20401f1c:	07c2                	slli	a5,a5,0x10
20401f1e:	87c1                	srai	a5,a5,0x10
20401f20:	bfa5                	j	20401e98 <_printf_i+0x72>
20401f22:	400c                	lw	a1,0(s0)
20401f24:	431c                	lw	a5,0(a4)
20401f26:	0805f813          	andi	a6,a1,128
20401f2a:	00478513          	addi	a0,a5,4
20401f2e:	00080563          	beqz	a6,20401f38 <_printf_i+0x112>
20401f32:	c308                	sw	a0,0(a4)
20401f34:	439c                	lw	a5,0(a5)
20401f36:	a039                	j	20401f44 <_printf_i+0x11e>
20401f38:	0405f593          	andi	a1,a1,64
20401f3c:	c308                	sw	a0,0(a4)
20401f3e:	d9fd                	beqz	a1,20401f34 <_printf_i+0x10e>
20401f40:	0007d783          	lhu	a5,0(a5)
20401f44:	06f00713          	li	a4,111
20401f48:	0ce68a63          	beq	a3,a4,2040201c <_printf_i+0x1f6>
20401f4c:	00004697          	auipc	a3,0x4
20401f50:	d8868693          	addi	a3,a3,-632 # 20405cd4 <__sf_fake_stdout+0x34>
20401f54:	4729                	li	a4,10
20401f56:	040401a3          	sb	zero,67(s0)
20401f5a:	404c                	lw	a1,4(s0)
20401f5c:	c40c                	sw	a1,8(s0)
20401f5e:	0005c563          	bltz	a1,20401f68 <_printf_i+0x142>
20401f62:	4008                	lw	a0,0(s0)
20401f64:	996d                	andi	a0,a0,-5
20401f66:	c008                	sw	a0,0(s0)
20401f68:	e399                	bnez	a5,20401f6e <_printf_i+0x148>
20401f6a:	8ab2                	mv	s5,a2
20401f6c:	cd91                	beqz	a1,20401f88 <_printf_i+0x162>
20401f6e:	8ab2                	mv	s5,a2
20401f70:	02e7f5b3          	remu	a1,a5,a4
20401f74:	1afd                	addi	s5,s5,-1
20401f76:	95b6                	add	a1,a1,a3
20401f78:	0005c583          	lbu	a1,0(a1)
20401f7c:	00ba8023          	sb	a1,0(s5)
20401f80:	02e7d5b3          	divu	a1,a5,a4
20401f84:	0ae7f263          	bgeu	a5,a4,20402028 <_printf_i+0x202>
20401f88:	47a1                	li	a5,8
20401f8a:	00f71e63          	bne	a4,a5,20401fa6 <_printf_i+0x180>
20401f8e:	401c                	lw	a5,0(s0)
20401f90:	8b85                	andi	a5,a5,1
20401f92:	cb91                	beqz	a5,20401fa6 <_printf_i+0x180>
20401f94:	4058                	lw	a4,4(s0)
20401f96:	481c                	lw	a5,16(s0)
20401f98:	00e7c763          	blt	a5,a4,20401fa6 <_printf_i+0x180>
20401f9c:	03000793          	li	a5,48
20401fa0:	fefa8fa3          	sb	a5,-1(s5)
20401fa4:	1afd                	addi	s5,s5,-1
20401fa6:	41560633          	sub	a2,a2,s5
20401faa:	c810                	sw	a2,16(s0)
20401fac:	874e                	mv	a4,s3
20401fae:	86ca                	mv	a3,s2
20401fb0:	0070                	addi	a2,sp,12
20401fb2:	85a2                	mv	a1,s0
20401fb4:	8526                	mv	a0,s1
20401fb6:	3395                	jal	20401d1a <_printf_common>
20401fb8:	5a7d                	li	s4,-1
20401fba:	0d451463          	bne	a0,s4,20402082 <_printf_i+0x25c>
20401fbe:	557d                	li	a0,-1
20401fc0:	50b2                	lw	ra,44(sp)
20401fc2:	5422                	lw	s0,40(sp)
20401fc4:	5492                	lw	s1,36(sp)
20401fc6:	5902                	lw	s2,32(sp)
20401fc8:	49f2                	lw	s3,28(sp)
20401fca:	4a62                	lw	s4,24(sp)
20401fcc:	4ad2                	lw	s5,20(sp)
20401fce:	4b42                	lw	s6,16(sp)
20401fd0:	6145                	addi	sp,sp,48
20401fd2:	8082                	ret
20401fd4:	04d582a3          	sb	a3,69(a1)
20401fd8:	00004697          	auipc	a3,0x4
20401fdc:	cfc68693          	addi	a3,a3,-772 # 20405cd4 <__sf_fake_stdout+0x34>
20401fe0:	400c                	lw	a1,0(s0)
20401fe2:	4308                	lw	a0,0(a4)
20401fe4:	0805f813          	andi	a6,a1,128
20401fe8:	411c                	lw	a5,0(a0)
20401fea:	0511                	addi	a0,a0,4
20401fec:	02080063          	beqz	a6,2040200c <_printf_i+0x1e6>
20401ff0:	c308                	sw	a0,0(a4)
20401ff2:	0015f713          	andi	a4,a1,1
20401ff6:	c701                	beqz	a4,20401ffe <_printf_i+0x1d8>
20401ff8:	0205e593          	ori	a1,a1,32
20401ffc:	c00c                	sw	a1,0(s0)
20401ffe:	4741                	li	a4,16
20402000:	fbb9                	bnez	a5,20401f56 <_printf_i+0x130>
20402002:	400c                	lw	a1,0(s0)
20402004:	fdf5f593          	andi	a1,a1,-33
20402008:	c00c                	sw	a1,0(s0)
2040200a:	b7b1                	j	20401f56 <_printf_i+0x130>
2040200c:	0405f813          	andi	a6,a1,64
20402010:	c308                	sw	a0,0(a4)
20402012:	fe0800e3          	beqz	a6,20401ff2 <_printf_i+0x1cc>
20402016:	07c2                	slli	a5,a5,0x10
20402018:	83c1                	srli	a5,a5,0x10
2040201a:	bfe1                	j	20401ff2 <_printf_i+0x1cc>
2040201c:	00004697          	auipc	a3,0x4
20402020:	cb868693          	addi	a3,a3,-840 # 20405cd4 <__sf_fake_stdout+0x34>
20402024:	4721                	li	a4,8
20402026:	bf05                	j	20401f56 <_printf_i+0x130>
20402028:	87ae                	mv	a5,a1
2040202a:	b799                	j	20401f70 <_printf_i+0x14a>
2040202c:	4194                	lw	a3,0(a1)
2040202e:	431c                	lw	a5,0(a4)
20402030:	49cc                	lw	a1,20(a1)
20402032:	0806f813          	andi	a6,a3,128
20402036:	00478513          	addi	a0,a5,4
2040203a:	00080663          	beqz	a6,20402046 <_printf_i+0x220>
2040203e:	c308                	sw	a0,0(a4)
20402040:	439c                	lw	a5,0(a5)
20402042:	c38c                	sw	a1,0(a5)
20402044:	a801                	j	20402054 <_printf_i+0x22e>
20402046:	c308                	sw	a0,0(a4)
20402048:	0406f693          	andi	a3,a3,64
2040204c:	439c                	lw	a5,0(a5)
2040204e:	daf5                	beqz	a3,20402042 <_printf_i+0x21c>
20402050:	00b79023          	sh	a1,0(a5)
20402054:	00042823          	sw	zero,16(s0)
20402058:	8ab2                	mv	s5,a2
2040205a:	bf89                	j	20401fac <_printf_i+0x186>
2040205c:	431c                	lw	a5,0(a4)
2040205e:	41d0                	lw	a2,4(a1)
20402060:	4581                	li	a1,0
20402062:	00478693          	addi	a3,a5,4
20402066:	c314                	sw	a3,0(a4)
20402068:	0007aa83          	lw	s5,0(a5)
2040206c:	8556                	mv	a0,s5
2040206e:	3179                	jal	20401cfc <memchr>
20402070:	c501                	beqz	a0,20402078 <_printf_i+0x252>
20402072:	41550533          	sub	a0,a0,s5
20402076:	c048                	sw	a0,4(s0)
20402078:	405c                	lw	a5,4(s0)
2040207a:	c81c                	sw	a5,16(s0)
2040207c:	040401a3          	sb	zero,67(s0)
20402080:	b735                	j	20401fac <_printf_i+0x186>
20402082:	4814                	lw	a3,16(s0)
20402084:	8656                	mv	a2,s5
20402086:	85ca                	mv	a1,s2
20402088:	8526                	mv	a0,s1
2040208a:	9982                	jalr	s3
2040208c:	f34509e3          	beq	a0,s4,20401fbe <_printf_i+0x198>
20402090:	401c                	lw	a5,0(s0)
20402092:	8b89                	andi	a5,a5,2
20402094:	e78d                	bnez	a5,204020be <_printf_i+0x298>
20402096:	47b2                	lw	a5,12(sp)
20402098:	4448                	lw	a0,12(s0)
2040209a:	f2f553e3          	bge	a0,a5,20401fc0 <_printf_i+0x19a>
2040209e:	853e                	mv	a0,a5
204020a0:	b705                	j	20401fc0 <_printf_i+0x19a>
204020a2:	4685                	li	a3,1
204020a4:	8656                	mv	a2,s5
204020a6:	85ca                	mv	a1,s2
204020a8:	8526                	mv	a0,s1
204020aa:	9982                	jalr	s3
204020ac:	f16509e3          	beq	a0,s6,20401fbe <_printf_i+0x198>
204020b0:	0a05                	addi	s4,s4,1
204020b2:	445c                	lw	a5,12(s0)
204020b4:	4732                	lw	a4,12(sp)
204020b6:	8f99                	sub	a5,a5,a4
204020b8:	fefa45e3          	blt	s4,a5,204020a2 <_printf_i+0x27c>
204020bc:	bfe9                	j	20402096 <_printf_i+0x270>
204020be:	4a01                	li	s4,0
204020c0:	01940a93          	addi	s5,s0,25
204020c4:	5b7d                	li	s6,-1
204020c6:	b7f5                	j	204020b2 <_printf_i+0x28c>

204020c8 <_read_r>:
_read_r():
204020c8:	1141                	addi	sp,sp,-16
204020ca:	c422                	sw	s0,8(sp)
204020cc:	842a                	mv	s0,a0
204020ce:	852e                	mv	a0,a1
204020d0:	85b2                	mv	a1,a2
204020d2:	8636                	mv	a2,a3
204020d4:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
204020d8:	c606                	sw	ra,12(sp)
204020da:	2075                	jal	20402186 <_read>
204020dc:	57fd                	li	a5,-1
204020de:	00f51763          	bne	a0,a5,204020ec <_read_r+0x24>
204020e2:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
204020e6:	439c                	lw	a5,0(a5)
204020e8:	c391                	beqz	a5,204020ec <_read_r+0x24>
204020ea:	c01c                	sw	a5,0(s0)
204020ec:	40b2                	lw	ra,12(sp)
204020ee:	4422                	lw	s0,8(sp)
204020f0:	0141                	addi	sp,sp,16
204020f2:	8082                	ret

204020f4 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
204020f4:	1101                	addi	sp,sp,-32
204020f6:	ce06                	sw	ra,28(sp)
204020f8:	cc22                	sw	s0,24(sp)
204020fa:	1000                	addi	s0,sp,32
204020fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20402100:	224d                	jal	204022a2 <__errno>
20402102:	872a                	mv	a4,a0
20402104:	05800793          	li	a5,88
20402108:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
2040210a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2040210c:	853e                	mv	a0,a5
2040210e:	40f2                	lw	ra,28(sp)
20402110:	4462                	lw	s0,24(sp)
20402112:	6105                	addi	sp,sp,32
20402114:	8082                	ret

20402116 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20402116:	1101                	addi	sp,sp,-32
20402118:	ce06                	sw	ra,28(sp)
2040211a:	cc22                	sw	s0,24(sp)
2040211c:	1000                	addi	s0,sp,32
2040211e:	fea42623          	sw	a0,-20(s0)
20402122:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20402126:	2ab5                	jal	204022a2 <__errno>
20402128:	872a                	mv	a4,a0
2040212a:	fa800793          	li	a5,-88
2040212e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20402130:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20402132:	853e                	mv	a0,a5
20402134:	40f2                	lw	ra,28(sp)
20402136:	4462                	lw	s0,24(sp)
20402138:	6105                	addi	sp,sp,32
2040213a:	8082                	ret

2040213c <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040213c:	1101                	addi	sp,sp,-32
2040213e:	ce22                	sw	s0,28(sp)
20402140:	1000                	addi	s0,sp,32
20402142:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20402146:	fec42783          	lw	a5,-20(s0)
2040214a:	17fd                	addi	a5,a5,-1
2040214c:	0017b793          	seqz	a5,a5
20402150:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20402154:	853e                	mv	a0,a5
20402156:	4472                	lw	s0,28(sp)
20402158:	6105                	addi	sp,sp,32
2040215a:	8082                	ret

2040215c <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040215c:	1101                	addi	sp,sp,-32
2040215e:	ce06                	sw	ra,28(sp)
20402160:	cc22                	sw	s0,24(sp)
20402162:	1000                	addi	s0,sp,32
20402164:	fea42623          	sw	a0,-20(s0)
20402168:	feb42423          	sw	a1,-24(s0)
2040216c:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20402170:	2a0d                	jal	204022a2 <__errno>
20402172:	872a                	mv	a4,a0
20402174:	05800793          	li	a5,88
20402178:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
2040217a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
2040217c:	853e                	mv	a0,a5
2040217e:	40f2                	lw	ra,28(sp)
20402180:	4462                	lw	s0,24(sp)
20402182:	6105                	addi	sp,sp,32
20402184:	8082                	ret

20402186 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20402186:	1101                	addi	sp,sp,-32
20402188:	ce06                	sw	ra,28(sp)
2040218a:	cc22                	sw	s0,24(sp)
2040218c:	1000                	addi	s0,sp,32
2040218e:	fea42623          	sw	a0,-20(s0)
20402192:	feb42423          	sw	a1,-24(s0)
20402196:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
2040219a:	2221                	jal	204022a2 <__errno>
2040219c:	872a                	mv	a4,a0
2040219e:	05800793          	li	a5,88
204021a2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204021a4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204021a6:	853e                	mv	a0,a5
204021a8:	40f2                	lw	ra,28(sp)
204021aa:	4462                	lw	s0,24(sp)
204021ac:	6105                	addi	sp,sp,32
204021ae:	8082                	ret

204021b0 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204021b0:	7179                	addi	sp,sp,-48
204021b2:	d622                	sw	s0,44(sp)
204021b4:	1800                	addi	s0,sp,48
204021b6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204021ba:	800017b7          	lui	a5,0x80001
204021be:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
204021c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204021c6:	4cc18713          	addi	a4,gp,1228 # 800023d4 <_sp>
204021ca:	800037b7          	lui	a5,0x80003
204021ce:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
204021d2:	00f71463          	bne	a4,a5,204021da <_sbrk+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204021d6:	57fd                	li	a5,-1
204021d8:	a0a9                	j	20402222 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204021da:	800017b7          	lui	a5,0x80001
204021de:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
204021e2:	fdc42783          	lw	a5,-36(s0)
204021e6:	973e                	add	a4,a4,a5
204021e8:	800037b7          	lui	a5,0x80003
204021ec:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
204021f0:	02f77063          	bgeu	a4,a5,20402210 <_sbrk+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204021f4:	800017b7          	lui	a5,0x80001
204021f8:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
204021fc:	fdc42783          	lw	a5,-36(s0)
20402200:	973e                	add	a4,a4,a5
20402202:	800017b7          	lui	a5,0x80001
20402206:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
2040220a:	fec42783          	lw	a5,-20(s0)
2040220e:	a811                	j	20402222 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20402210:	800017b7          	lui	a5,0x80001
20402214:	80003737          	lui	a4,0x80003
20402218:	bd470713          	addi	a4,a4,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
2040221c:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20402220:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20402222:	853e                	mv	a0,a5
20402224:	5432                	lw	s0,44(sp)
20402226:	6145                	addi	sp,sp,48
20402228:	8082                	ret

2040222a <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2040222a:	7179                	addi	sp,sp,-48
2040222c:	d606                	sw	ra,44(sp)
2040222e:	d422                	sw	s0,40(sp)
20402230:	1800                	addi	s0,sp,48
20402232:	fca42e23          	sw	a0,-36(s0)
20402236:	fcb42c23          	sw	a1,-40(s0)
2040223a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
2040223e:	fdc42703          	lw	a4,-36(s0)
20402242:	4785                	li	a5,1
20402244:	00f70963          	beq	a4,a5,20402256 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20402248:	28a9                	jal	204022a2 <__errno>
2040224a:	872a                	mv	a4,a0
2040224c:	05800793          	li	a5,88
20402250:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20402252:	57fd                	li	a5,-1
20402254:	a82d                	j	2040228e <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20402256:	fd842783          	lw	a5,-40(s0)
2040225a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
2040225e:	fe042623          	sw	zero,-20(s0)
20402262:	a839                	j	20402280 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20402264:	fe842703          	lw	a4,-24(s0)
20402268:	fec42783          	lw	a5,-20(s0)
2040226c:	97ba                	add	a5,a5,a4
2040226e:	0007c783          	lbu	a5,0(a5)
20402272:	853e                	mv	a0,a5
20402274:	2c91                	jal	204024c8 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20402276:	fec42783          	lw	a5,-20(s0)
2040227a:	0785                	addi	a5,a5,1
2040227c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20402280:	fec42703          	lw	a4,-20(s0)
20402284:	fd442783          	lw	a5,-44(s0)
20402288:	fcf76ee3          	bltu	a4,a5,20402264 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
2040228c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
2040228e:	853e                	mv	a0,a5
20402290:	50b2                	lw	ra,44(sp)
20402292:	5422                	lw	s0,40(sp)
20402294:	6145                	addi	sp,sp,48
20402296:	8082                	ret

20402298 <atexit>:
atexit():
20402298:	85aa                	mv	a1,a0
2040229a:	4681                	li	a3,0
2040229c:	4601                	li	a2,0
2040229e:	4501                	li	a0,0
204022a0:	a8f1                	j	2040237c <__register_exitproc>

204022a2 <__errno>:
__errno():
204022a2:	5fbff797          	auipc	a5,0x5fbff
204022a6:	46678793          	addi	a5,a5,1126 # 80001708 <_impure_ptr>
204022aa:	4388                	lw	a0,0(a5)
204022ac:	8082                	ret

204022ae <exit>:
exit():
204022ae:	1141                	addi	sp,sp,-16
204022b0:	c422                	sw	s0,8(sp)
204022b2:	c606                	sw	ra,12(sp)
204022b4:	00000797          	auipc	a5,0x0
204022b8:	14c78793          	addi	a5,a5,332 # 20402400 <__call_exitprocs>
204022bc:	842a                	mv	s0,a0
204022be:	c399                	beqz	a5,204022c4 <exit+0x16>
204022c0:	4581                	li	a1,0
204022c2:	2a3d                	jal	20402400 <__call_exitprocs>
204022c4:	5fbff797          	auipc	a5,0x5fbff
204022c8:	44878793          	addi	a5,a5,1096 # 8000170c <_global_impure_ptr>
204022cc:	4388                	lw	a0,0(a5)
204022ce:	551c                	lw	a5,40(a0)
204022d0:	c391                	beqz	a5,204022d4 <exit+0x26>
204022d2:	9782                	jalr	a5
204022d4:	8522                	mv	a0,s0
204022d6:	099030ef          	jal	ra,20405b6e <_exit>

204022da <__libc_fini_array>:
__libc_fini_array():
204022da:	1141                	addi	sp,sp,-16
204022dc:	00004797          	auipc	a5,0x4
204022e0:	d7878793          	addi	a5,a5,-648 # 20406054 <__fini_array_end>
204022e4:	c422                	sw	s0,8(sp)
204022e6:	00004417          	auipc	s0,0x4
204022ea:	d6e40413          	addi	s0,s0,-658 # 20406054 <__fini_array_end>
204022ee:	8c1d                	sub	s0,s0,a5
204022f0:	c226                	sw	s1,4(sp)
204022f2:	c606                	sw	ra,12(sp)
204022f4:	8409                	srai	s0,s0,0x2
204022f6:	84be                	mv	s1,a5
204022f8:	e411                	bnez	s0,20402304 <__libc_fini_array+0x2a>
204022fa:	40b2                	lw	ra,12(sp)
204022fc:	4422                	lw	s0,8(sp)
204022fe:	4492                	lw	s1,4(sp)
20402300:	0141                	addi	sp,sp,16
20402302:	8082                	ret
20402304:	147d                	addi	s0,s0,-1
20402306:	00241793          	slli	a5,s0,0x2
2040230a:	97a6                	add	a5,a5,s1
2040230c:	439c                	lw	a5,0(a5)
2040230e:	9782                	jalr	a5
20402310:	b7e5                	j	204022f8 <__libc_fini_array+0x1e>

20402312 <__libc_init_array>:
__libc_init_array():
20402312:	1141                	addi	sp,sp,-16
20402314:	00004797          	auipc	a5,0x4
20402318:	d3c78793          	addi	a5,a5,-708 # 20406050 <__init_array_start>
2040231c:	c422                	sw	s0,8(sp)
2040231e:	00004417          	auipc	s0,0x4
20402322:	d3240413          	addi	s0,s0,-718 # 20406050 <__init_array_start>
20402326:	8c1d                	sub	s0,s0,a5
20402328:	c226                	sw	s1,4(sp)
2040232a:	c04a                	sw	s2,0(sp)
2040232c:	c606                	sw	ra,12(sp)
2040232e:	8409                	srai	s0,s0,0x2
20402330:	4481                	li	s1,0
20402332:	893e                	mv	s2,a5
20402334:	02849663          	bne	s1,s0,20402360 <__libc_init_array+0x4e>
20402338:	00004797          	auipc	a5,0x4
2040233c:	d1878793          	addi	a5,a5,-744 # 20406050 <__init_array_start>
20402340:	00004417          	auipc	s0,0x4
20402344:	d1440413          	addi	s0,s0,-748 # 20406054 <__fini_array_end>
20402348:	8c1d                	sub	s0,s0,a5
2040234a:	8409                	srai	s0,s0,0x2
2040234c:	4481                	li	s1,0
2040234e:	893e                	mv	s2,a5
20402350:	00849f63          	bne	s1,s0,2040236e <__libc_init_array+0x5c>
20402354:	40b2                	lw	ra,12(sp)
20402356:	4422                	lw	s0,8(sp)
20402358:	4492                	lw	s1,4(sp)
2040235a:	4902                	lw	s2,0(sp)
2040235c:	0141                	addi	sp,sp,16
2040235e:	8082                	ret
20402360:	00249793          	slli	a5,s1,0x2
20402364:	97ca                	add	a5,a5,s2
20402366:	439c                	lw	a5,0(a5)
20402368:	0485                	addi	s1,s1,1
2040236a:	9782                	jalr	a5
2040236c:	b7e1                	j	20402334 <__libc_init_array+0x22>
2040236e:	00249793          	slli	a5,s1,0x2
20402372:	97ca                	add	a5,a5,s2
20402374:	439c                	lw	a5,0(a5)
20402376:	0485                	addi	s1,s1,1
20402378:	9782                	jalr	a5
2040237a:	bfd9                	j	20402350 <__libc_init_array+0x3e>

2040237c <__register_exitproc>:
__register_exitproc():
2040237c:	5fbff797          	auipc	a5,0x5fbff
20402380:	3bc78793          	addi	a5,a5,956 # 80001738 <_global_atexit>
20402384:	439c                	lw	a5,0(a5)
20402386:	8e2a                	mv	t3,a0
20402388:	e38d                	bnez	a5,204023aa <__register_exitproc+0x2e>
2040238a:	03c18713          	addi	a4,gp,60 # 80001f44 <_global_atexit0>
2040238e:	5fbff797          	auipc	a5,0x5fbff
20402392:	3ae7a523          	sw	a4,938(a5) # 80001738 <_global_atexit>
20402396:	dfbfe517          	auipc	a0,0xdfbfe
2040239a:	c6a50513          	addi	a0,a0,-918 # 0 <__metal_boot_hart>
2040239e:	87ba                	mv	a5,a4
204023a0:	c509                	beqz	a0,204023aa <__register_exitproc+0x2e>
204023a2:	411c                	lw	a5,0(a0)
204023a4:	0cf1a223          	sw	a5,196(gp) # 80001fcc <_global_atexit0+0x88>
204023a8:	87ba                	mv	a5,a4
204023aa:	43d8                	lw	a4,4(a5)
204023ac:	487d                	li	a6,31
204023ae:	557d                	li	a0,-1
204023b0:	04e84763          	blt	a6,a4,204023fe <__register_exitproc+0x82>
204023b4:	020e0e63          	beqz	t3,204023f0 <__register_exitproc+0x74>
204023b8:	0887a803          	lw	a6,136(a5)
204023bc:	04080163          	beqz	a6,204023fe <__register_exitproc+0x82>
204023c0:	00271893          	slli	a7,a4,0x2
204023c4:	98c2                	add	a7,a7,a6
204023c6:	00c8a023          	sw	a2,0(a7)
204023ca:	10082303          	lw	t1,256(a6)
204023ce:	4605                	li	a2,1
204023d0:	00e61633          	sll	a2,a2,a4
204023d4:	00c36333          	or	t1,t1,a2
204023d8:	10682023          	sw	t1,256(a6)
204023dc:	08d8a023          	sw	a3,128(a7)
204023e0:	4689                	li	a3,2
204023e2:	00de1763          	bne	t3,a3,204023f0 <__register_exitproc+0x74>
204023e6:	10482683          	lw	a3,260(a6)
204023ea:	8e55                	or	a2,a2,a3
204023ec:	10c82223          	sw	a2,260(a6)
204023f0:	00170693          	addi	a3,a4,1
204023f4:	070a                	slli	a4,a4,0x2
204023f6:	c3d4                	sw	a3,4(a5)
204023f8:	97ba                	add	a5,a5,a4
204023fa:	c78c                	sw	a1,8(a5)
204023fc:	4501                	li	a0,0
204023fe:	8082                	ret

20402400 <__call_exitprocs>:
__call_exitprocs():
20402400:	7179                	addi	sp,sp,-48
20402402:	cc52                	sw	s4,24(sp)
20402404:	ca56                	sw	s5,20(sp)
20402406:	c85a                	sw	s6,16(sp)
20402408:	c65e                	sw	s7,12(sp)
2040240a:	d606                	sw	ra,44(sp)
2040240c:	d422                	sw	s0,40(sp)
2040240e:	d226                	sw	s1,36(sp)
20402410:	d04a                	sw	s2,32(sp)
20402412:	ce4e                	sw	s3,28(sp)
20402414:	c462                	sw	s8,8(sp)
20402416:	8b2a                	mv	s6,a0
20402418:	8a2e                	mv	s4,a1
2040241a:	5fbffa97          	auipc	s5,0x5fbff
2040241e:	31ea8a93          	addi	s5,s5,798 # 80001738 <_global_atexit>
20402422:	4b85                	li	s7,1
20402424:	000aa403          	lw	s0,0(s5)
20402428:	c811                	beqz	s0,2040243c <__call_exitprocs+0x3c>
2040242a:	4044                	lw	s1,4(s0)
2040242c:	08842983          	lw	s3,136(s0)
20402430:	fff48913          	addi	s2,s1,-1
20402434:	048a                	slli	s1,s1,0x2
20402436:	94a2                	add	s1,s1,s0
20402438:	00095e63          	bgez	s2,20402454 <__call_exitprocs+0x54>
2040243c:	50b2                	lw	ra,44(sp)
2040243e:	5422                	lw	s0,40(sp)
20402440:	5492                	lw	s1,36(sp)
20402442:	5902                	lw	s2,32(sp)
20402444:	49f2                	lw	s3,28(sp)
20402446:	4a62                	lw	s4,24(sp)
20402448:	4ad2                	lw	s5,20(sp)
2040244a:	4b42                	lw	s6,16(sp)
2040244c:	4bb2                	lw	s7,12(sp)
2040244e:	4c22                	lw	s8,8(sp)
20402450:	6145                	addi	sp,sp,48
20402452:	8082                	ret
20402454:	000a0e63          	beqz	s4,20402470 <__call_exitprocs+0x70>
20402458:	00099563          	bnez	s3,20402462 <__call_exitprocs+0x62>
2040245c:	197d                	addi	s2,s2,-1
2040245e:	14f1                	addi	s1,s1,-4
20402460:	bfe1                	j	20402438 <__call_exitprocs+0x38>
20402462:	00291793          	slli	a5,s2,0x2
20402466:	97ce                	add	a5,a5,s3
20402468:	0807a783          	lw	a5,128(a5)
2040246c:	ff4798e3          	bne	a5,s4,2040245c <__call_exitprocs+0x5c>
20402470:	4058                	lw	a4,4(s0)
20402472:	40dc                	lw	a5,4(s1)
20402474:	177d                	addi	a4,a4,-1
20402476:	03271863          	bne	a4,s2,204024a6 <__call_exitprocs+0xa6>
2040247a:	01242223          	sw	s2,4(s0)
2040247e:	dff9                	beqz	a5,2040245c <__call_exitprocs+0x5c>
20402480:	00442c03          	lw	s8,4(s0)
20402484:	00098863          	beqz	s3,20402494 <__call_exitprocs+0x94>
20402488:	1009a683          	lw	a3,256(s3)
2040248c:	012b9733          	sll	a4,s7,s2
20402490:	8ef9                	and	a3,a3,a4
20402492:	ee89                	bnez	a3,204024ac <__call_exitprocs+0xac>
20402494:	9782                	jalr	a5
20402496:	4058                	lw	a4,4(s0)
20402498:	000aa783          	lw	a5,0(s5)
2040249c:	f98714e3          	bne	a4,s8,20402424 <__call_exitprocs+0x24>
204024a0:	faf40ee3          	beq	s0,a5,2040245c <__call_exitprocs+0x5c>
204024a4:	b741                	j	20402424 <__call_exitprocs+0x24>
204024a6:	0004a223          	sw	zero,4(s1)
204024aa:	bfd1                	j	2040247e <__call_exitprocs+0x7e>
204024ac:	00291693          	slli	a3,s2,0x2
204024b0:	96ce                	add	a3,a3,s3
204024b2:	428c                	lw	a1,0(a3)
204024b4:	1049a683          	lw	a3,260(s3)
204024b8:	8f75                	and	a4,a4,a3
204024ba:	e701                	bnez	a4,204024c2 <__call_exitprocs+0xc2>
204024bc:	855a                	mv	a0,s6
204024be:	9782                	jalr	a5
204024c0:	bfd9                	j	20402496 <__call_exitprocs+0x96>
204024c2:	852e                	mv	a0,a1
204024c4:	9782                	jalr	a5
204024c6:	bfc1                	j	20402496 <__call_exitprocs+0x96>

204024c8 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
204024c8:	1101                	addi	sp,sp,-32
204024ca:	ce06                	sw	ra,28(sp)
204024cc:	cc22                	sw	s0,24(sp)
204024ce:	1000                	addi	s0,sp,32
204024d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
204024d4:	fec42703          	lw	a4,-20(s0)
204024d8:	47a9                	li	a5,10
204024da:	00f71463          	bne	a4,a5,204024e2 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
204024de:	4535                	li	a0,13
204024e0:	2811                	jal	204024f4 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
204024e2:	fec42503          	lw	a0,-20(s0)
204024e6:	2039                	jal	204024f4 <metal_tty_putc_raw>
204024e8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
204024ea:	853e                	mv	a0,a5
204024ec:	40f2                	lw	ra,28(sp)
204024ee:	4462                	lw	s0,24(sp)
204024f0:	6105                	addi	sp,sp,32
204024f2:	8082                	ret

204024f4 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
204024f4:	1101                	addi	sp,sp,-32
204024f6:	ce06                	sw	ra,28(sp)
204024f8:	cc22                	sw	s0,24(sp)
204024fa:	1000                	addi	s0,sp,32
204024fc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20402500:	fec42583          	lw	a1,-20(s0)
20402504:	800017b7          	lui	a5,0x80001
20402508:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040250c:	28b1                	jal	20402568 <metal_uart_putc>
2040250e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20402510:	853e                	mv	a0,a5
20402512:	40f2                	lw	ra,28(sp)
20402514:	4462                	lw	s0,24(sp)
20402516:	6105                	addi	sp,sp,32
20402518:	8082                	ret

2040251a <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
2040251a:	1141                	addi	sp,sp,-16
2040251c:	c606                	sw	ra,12(sp)
2040251e:	c422                	sw	s0,8(sp)
20402520:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20402522:	67f1                	lui	a5,0x1c
20402524:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402528:	800017b7          	lui	a5,0x80001
2040252c:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20402530:	2031                	jal	2040253c <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20402532:	0001                	nop
20402534:	40b2                	lw	ra,12(sp)
20402536:	4422                	lw	s0,8(sp)
20402538:	0141                	addi	sp,sp,16
2040253a:	8082                	ret

2040253c <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
2040253c:	1101                	addi	sp,sp,-32
2040253e:	ce06                	sw	ra,28(sp)
20402540:	cc22                	sw	s0,24(sp)
20402542:	1000                	addi	s0,sp,32
20402544:	fea42623          	sw	a0,-20(s0)
20402548:	feb42423          	sw	a1,-24(s0)
2040254c:	fec42783          	lw	a5,-20(s0)
20402550:	439c                	lw	a5,0(a5)
20402552:	439c                	lw	a5,0(a5)
20402554:	fe842583          	lw	a1,-24(s0)
20402558:	fec42503          	lw	a0,-20(s0)
2040255c:	9782                	jalr	a5
2040255e:	0001                	nop
20402560:	40f2                	lw	ra,28(sp)
20402562:	4462                	lw	s0,24(sp)
20402564:	6105                	addi	sp,sp,32
20402566:	8082                	ret

20402568 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402568:	1101                	addi	sp,sp,-32
2040256a:	ce06                	sw	ra,28(sp)
2040256c:	cc22                	sw	s0,24(sp)
2040256e:	1000                	addi	s0,sp,32
20402570:	fea42623          	sw	a0,-20(s0)
20402574:	feb42423          	sw	a1,-24(s0)
20402578:	fec42783          	lw	a5,-20(s0)
2040257c:	439c                	lw	a5,0(a5)
2040257e:	43dc                	lw	a5,4(a5)
20402580:	fe842583          	lw	a1,-24(s0)
20402584:	fec42503          	lw	a0,-20(s0)
20402588:	9782                	jalr	a5
2040258a:	87aa                	mv	a5,a0
2040258c:	853e                	mv	a0,a5
2040258e:	40f2                	lw	ra,28(sp)
20402590:	4462                	lw	s0,24(sp)
20402592:	6105                	addi	sp,sp,32
20402594:	8082                	ret

20402596 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20402596:	1101                	addi	sp,sp,-32
20402598:	ce06                	sw	ra,28(sp)
2040259a:	cc22                	sw	s0,24(sp)
2040259c:	1000                	addi	s0,sp,32
2040259e:	fea42623          	sw	a0,-20(s0)
204025a2:	feb42423          	sw	a1,-24(s0)
204025a6:	fec42783          	lw	a5,-20(s0)
204025aa:	439c                	lw	a5,0(a5)
204025ac:	4bdc                	lw	a5,20(a5)
204025ae:	fe842583          	lw	a1,-24(s0)
204025b2:	fec42503          	lw	a0,-20(s0)
204025b6:	9782                	jalr	a5
204025b8:	87aa                	mv	a5,a0
204025ba:	853e                	mv	a0,a5
204025bc:	40f2                	lw	ra,28(sp)
204025be:	4462                	lw	s0,24(sp)
204025c0:	6105                	addi	sp,sp,32
204025c2:	8082                	ret

204025c4 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204025c4:	1101                	addi	sp,sp,-32
204025c6:	ce22                	sw	s0,28(sp)
204025c8:	1000                	addi	s0,sp,32
204025ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204025ce:	fec42703          	lw	a4,-20(s0)
204025d2:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204025d6:	00f71563          	bne	a4,a5,204025e0 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204025da:	020007b7          	lui	a5,0x2000
204025de:	a011                	j	204025e2 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
204025e0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:143
	}
}
204025e2:	853e                	mv	a0,a5
204025e4:	4472                	lw	s0,28(sp)
204025e6:	6105                	addi	sp,sp,32
204025e8:	8082                	ret

204025ea <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
204025ea:	1101                	addi	sp,sp,-32
204025ec:	ce22                	sw	s0,28(sp)
204025ee:	1000                	addi	s0,sp,32
204025f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204025f4:	fec42703          	lw	a4,-20(s0)
204025f8:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
204025fc:	00f71463          	bne	a4,a5,20402604 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20402600:	4789                	li	a5,2
20402602:	a011                	j	20402606 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20402604:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:163
	}
}
20402606:	853e                	mv	a0,a5
20402608:	4472                	lw	s0,28(sp)
2040260a:	6105                	addi	sp,sp,32
2040260c:	8082                	ret

2040260e <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040260e:	1101                	addi	sp,sp,-32
20402610:	ce22                	sw	s0,28(sp)
20402612:	1000                	addi	s0,sp,32
20402614:	fea42623          	sw	a0,-20(s0)
20402618:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:167
	if (idx == 0) {
2040261c:	fe842783          	lw	a5,-24(s0)
20402620:	e791                	bnez	a5,2040262c <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402622:	800017b7          	lui	a5,0x80001
20402626:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
2040262a:	a821                	j	20402642 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
2040262c:	fe842703          	lw	a4,-24(s0)
20402630:	4785                	li	a5,1
20402632:	00f71763          	bne	a4,a5,20402640 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402636:	800017b7          	lui	a5,0x80001
2040263a:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
2040263e:	a011                	j	20402642 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20402640:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:176
	}
}
20402642:	853e                	mv	a0,a5
20402644:	4472                	lw	s0,28(sp)
20402646:	6105                	addi	sp,sp,32
20402648:	8082                	ret

2040264a <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2040264a:	1101                	addi	sp,sp,-32
2040264c:	ce22                	sw	s0,28(sp)
2040264e:	1000                	addi	s0,sp,32
20402650:	fea42623          	sw	a0,-20(s0)
20402654:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402658:	fe842783          	lw	a5,-24(s0)
2040265c:	e399                	bnez	a5,20402662 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
		return 3;
2040265e:	478d                	li	a5,3
20402660:	a809                	j	20402672 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20402662:	fe842703          	lw	a4,-24(s0)
20402666:	4785                	li	a5,1
20402668:	00f71463          	bne	a4,a5,20402670 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
		return 7;
2040266c:	479d                	li	a5,7
2040266e:	a011                	j	20402672 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20402670:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:189
	}
}
20402672:	853e                	mv	a0,a5
20402674:	4472                	lw	s0,28(sp)
20402676:	6105                	addi	sp,sp,32
20402678:	8082                	ret

2040267a <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
2040267a:	715d                	addi	sp,sp,-80
2040267c:	c686                	sw	ra,76(sp)
2040267e:	c4a2                	sw	s0,72(sp)
20402680:	c2ca                	sw	s2,68(sp)
20402682:	c0ce                	sw	s3,64(sp)
20402684:	de52                	sw	s4,60(sp)
20402686:	dc56                	sw	s5,56(sp)
20402688:	da5a                	sw	s6,52(sp)
2040268a:	d85e                	sw	s7,48(sp)
2040268c:	d662                	sw	s8,44(sp)
2040268e:	d466                	sw	s9,40(sp)
20402690:	0880                	addi	s0,sp,80
20402692:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402696:	fbc42783          	lw	a5,-68(s0)
2040269a:	853e                	mv	a0,a5
2040269c:	3725                	jal	204025c4 <__metal_driver_sifive_clint0_control_base>
2040269e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
204026a2:	fcc42703          	lw	a4,-52(s0)
204026a6:	67b1                	lui	a5,0xc
204026a8:	17f1                	addi	a5,a5,-4
204026aa:	97ba                	add	a5,a5,a4
204026ac:	439c                	lw	a5,0(a5)
204026ae:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
204026b2:	fcc42703          	lw	a4,-52(s0)
204026b6:	67b1                	lui	a5,0xc
204026b8:	17e1                	addi	a5,a5,-8
204026ba:	97ba                	add	a5,a5,a4
204026bc:	439c                	lw	a5,0(a5)
204026be:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204026c2:	fcc42703          	lw	a4,-52(s0)
204026c6:	67b1                	lui	a5,0xc
204026c8:	17f1                	addi	a5,a5,-4
204026ca:	97ba                	add	a5,a5,a4
204026cc:	439c                	lw	a5,0(a5)
204026ce:	fc842703          	lw	a4,-56(s0)
204026d2:	fcf718e3          	bne	a4,a5,204026a2 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204026d6:	fc842783          	lw	a5,-56(s0)
204026da:	8c3e                	mv	s8,a5
204026dc:	4c81                	li	s9,0
204026de:	000c1993          	slli	s3,s8,0x0
204026e2:	4901                	li	s2,0
204026e4:	fc442783          	lw	a5,-60(s0)
204026e8:	8a3e                	mv	s4,a5
204026ea:	4a81                	li	s5,0
204026ec:	01496b33          	or	s6,s2,s4
204026f0:	0159ebb3          	or	s7,s3,s5
204026f4:	87da                	mv	a5,s6
204026f6:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204026f8:	853e                	mv	a0,a5
204026fa:	85c2                	mv	a1,a6
204026fc:	40b6                	lw	ra,76(sp)
204026fe:	4426                	lw	s0,72(sp)
20402700:	4916                	lw	s2,68(sp)
20402702:	4986                	lw	s3,64(sp)
20402704:	5a72                	lw	s4,60(sp)
20402706:	5ae2                	lw	s5,56(sp)
20402708:	5b52                	lw	s6,52(sp)
2040270a:	5bc2                	lw	s7,48(sp)
2040270c:	5c32                	lw	s8,44(sp)
2040270e:	5ca2                	lw	s9,40(sp)
20402710:	6161                	addi	sp,sp,80
20402712:	8082                	ret

20402714 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20402714:	7179                	addi	sp,sp,-48
20402716:	d606                	sw	ra,44(sp)
20402718:	d422                	sw	s0,40(sp)
2040271a:	d24a                	sw	s2,36(sp)
2040271c:	d04e                	sw	s3,32(sp)
2040271e:	1800                	addi	s0,sp,48
20402720:	fca42e23          	sw	a0,-36(s0)
20402724:	fcb42c23          	sw	a1,-40(s0)
20402728:	fcc42823          	sw	a2,-48(s0)
2040272c:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20402730:	fdc42783          	lw	a5,-36(s0)
20402734:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402738:	fec42783          	lw	a5,-20(s0)
2040273c:	853e                	mv	a0,a5
2040273e:	3559                	jal	204025c4 <__metal_driver_sifive_clint0_control_base>
20402740:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20402744:	fd842783          	lw	a5,-40(s0)
20402748:	078e                	slli	a5,a5,0x3
2040274a:	873e                	mv	a4,a5
2040274c:	fe842783          	lw	a5,-24(s0)
20402750:	973e                	add	a4,a4,a5
20402752:	6791                	lui	a5,0x4
20402754:	0791                	addi	a5,a5,4
20402756:	97ba                	add	a5,a5,a4
20402758:	873e                	mv	a4,a5
2040275a:	57fd                	li	a5,-1
2040275c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
2040275e:	fd842783          	lw	a5,-40(s0)
20402762:	078e                	slli	a5,a5,0x3
20402764:	873e                	mv	a4,a5
20402766:	fe842783          	lw	a5,-24(s0)
2040276a:	973e                	add	a4,a4,a5
2040276c:	6791                	lui	a5,0x4
2040276e:	97ba                	add	a5,a5,a4
20402770:	873e                	mv	a4,a5
20402772:	fd042783          	lw	a5,-48(s0)
20402776:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402778:	fd442783          	lw	a5,-44(s0)
2040277c:	0007d913          	srli	s2,a5,0x0
20402780:	4981                	li	s3,0
20402782:	fd842783          	lw	a5,-40(s0)
20402786:	078e                	slli	a5,a5,0x3
20402788:	873e                	mv	a4,a5
2040278a:	fe842783          	lw	a5,-24(s0)
2040278e:	973e                	add	a4,a4,a5
20402790:	6791                	lui	a5,0x4
20402792:	0791                	addi	a5,a5,4
20402794:	97ba                	add	a5,a5,a4
20402796:	874a                	mv	a4,s2
20402798:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
2040279a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
2040279c:	853e                	mv	a0,a5
2040279e:	50b2                	lw	ra,44(sp)
204027a0:	5422                	lw	s0,40(sp)
204027a2:	5912                	lw	s2,36(sp)
204027a4:	5982                	lw	s3,32(sp)
204027a6:	6145                	addi	sp,sp,48
204027a8:	8082                	ret

204027aa <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
204027aa:	1101                	addi	sp,sp,-32
204027ac:	ce06                	sw	ra,28(sp)
204027ae:	cc22                	sw	s0,24(sp)
204027b0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
204027b2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
204027b6:	f14027f3          	csrr	a5,mhartid
204027ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
204027be:	fec42783          	lw	a5,-20(s0)
204027c2:	853e                	mv	a0,a5
204027c4:	23a030ef          	jal	ra,204059fe <metal_cpu_get>
204027c8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
204027cc:	fe842503          	lw	a0,-24(s0)
204027d0:	208030ef          	jal	ra,204059d8 <metal_cpu_interrupt_controller>
204027d4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
204027d6:	853e                	mv	a0,a5
204027d8:	40f2                	lw	ra,28(sp)
204027da:	4462                	lw	s0,24(sp)
204027dc:	6105                	addi	sp,sp,32
204027de:	8082                	ret

204027e0 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
204027e0:	7139                	addi	sp,sp,-64
204027e2:	de06                	sw	ra,60(sp)
204027e4:	dc22                	sw	s0,56(sp)
204027e6:	0080                	addi	s0,sp,64
204027e8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204027ec:	fcc42503          	lw	a0,-52(s0)
204027f0:	3bed                	jal	204025ea <__metal_driver_sifive_clint0_num_interrupts>
204027f2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
204027f6:	fcc42783          	lw	a5,-52(s0)
204027fa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
204027fe:	fe442783          	lw	a5,-28(s0)
20402802:	43dc                	lw	a5,4(a5)
20402804:	efa9                	bnez	a5,2040285e <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402806:	fe042623          	sw	zero,-20(s0)
2040280a:	a081                	j	2040284a <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040280c:	fec42583          	lw	a1,-20(s0)
20402810:	fcc42503          	lw	a0,-52(s0)
20402814:	3bed                	jal	2040260e <__metal_driver_sifive_clint0_interrupt_parents>
20402816:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040281a:	fec42583          	lw	a1,-20(s0)
2040281e:	fcc42503          	lw	a0,-52(s0)
20402822:	3525                	jal	2040264a <__metal_driver_sifive_clint0_interrupt_lines>
20402824:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402828:	fe042783          	lw	a5,-32(s0)
2040282c:	439c                	lw	a5,0(a5)
2040282e:	4fdc                	lw	a5,28(a5)
20402830:	fcc42683          	lw	a3,-52(s0)
20402834:	4601                	li	a2,0
20402836:	fdc42583          	lw	a1,-36(s0)
2040283a:	fe042503          	lw	a0,-32(s0)
2040283e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20402840:	fec42783          	lw	a5,-20(s0)
20402844:	0785                	addi	a5,a5,1
20402846:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
2040284a:	fec42703          	lw	a4,-20(s0)
2040284e:	fe842783          	lw	a5,-24(s0)
20402852:	faf74de3          	blt	a4,a5,2040280c <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402856:	fe442783          	lw	a5,-28(s0)
2040285a:	4705                	li	a4,1
2040285c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2040285e:	0001                	nop
20402860:	50f2                	lw	ra,60(sp)
20402862:	5462                	lw	s0,56(sp)
20402864:	6121                	addi	sp,sp,64
20402866:	8082                	ret

20402868 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402868:	7139                	addi	sp,sp,-64
2040286a:	de06                	sw	ra,60(sp)
2040286c:	dc22                	sw	s0,56(sp)
2040286e:	0080                	addi	s0,sp,64
20402870:	fca42623          	sw	a0,-52(s0)
20402874:	fcb42423          	sw	a1,-56(s0)
20402878:	fcc42223          	sw	a2,-60(s0)
2040287c:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20402880:	57fd                	li	a5,-1
20402882:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402886:	390010ef          	jal	ra,20403c16 <__metal_controller_interrupt_vector_mode>
2040288a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2040288e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402892:	3f21                	jal	204027aa <_get_cpu_intc>
20402894:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402898:	fcc42503          	lw	a0,-52(s0)
2040289c:	33b9                	jal	204025ea <__metal_driver_sifive_clint0_num_interrupts>
2040289e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
204028a2:	fe042703          	lw	a4,-32(s0)
204028a6:	4785                	li	a5,1
204028a8:	00f70863          	beq	a4,a5,204028b8 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
204028ac:	fe042783          	lw	a5,-32(s0)
204028b0:	c781                	beqz	a5,204028b8 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
204028b2:	fec42783          	lw	a5,-20(s0)
204028b6:	a049                	j	20402938 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
204028b8:	fe042223          	sw	zero,-28(s0)
204028bc:	a091                	j	20402900 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204028be:	fe442583          	lw	a1,-28(s0)
204028c2:	fcc42503          	lw	a0,-52(s0)
204028c6:	3351                	jal	2040264a <__metal_driver_sifive_clint0_interrupt_lines>
204028c8:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204028cc:	fe442583          	lw	a1,-28(s0)
204028d0:	fcc42503          	lw	a0,-52(s0)
204028d4:	3b2d                	jal	2040260e <__metal_driver_sifive_clint0_interrupt_parents>
204028d6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204028da:	fdc42703          	lw	a4,-36(s0)
204028de:	fe842783          	lw	a5,-24(s0)
204028e2:	00f71863          	bne	a4,a5,204028f2 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
204028e6:	fc842703          	lw	a4,-56(s0)
204028ea:	fd442783          	lw	a5,-44(s0)
204028ee:	02f70063          	beq	a4,a5,2040290e <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
204028f2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
204028f6:	fe442783          	lw	a5,-28(s0)
204028fa:	0785                	addi	a5,a5,1
204028fc:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20402900:	fe442703          	lw	a4,-28(s0)
20402904:	fd842783          	lw	a5,-40(s0)
20402908:	faf74be3          	blt	a4,a5,204028be <__metal_driver_riscv_clint0_register+0x56>
2040290c:	a011                	j	20402910 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
2040290e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402910:	fe842783          	lw	a5,-24(s0)
20402914:	c385                	beqz	a5,20402934 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402916:	fe842783          	lw	a5,-24(s0)
2040291a:	439c                	lw	a5,0(a5)
2040291c:	4fdc                	lw	a5,28(a5)
2040291e:	fc042683          	lw	a3,-64(s0)
20402922:	fc442603          	lw	a2,-60(s0)
20402926:	fc842583          	lw	a1,-56(s0)
2040292a:	fe842503          	lw	a0,-24(s0)
2040292e:	9782                	jalr	a5
20402930:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402934:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402938:	853e                	mv	a0,a5
2040293a:	50f2                	lw	ra,60(sp)
2040293c:	5462                	lw	s0,56(sp)
2040293e:	6121                	addi	sp,sp,64
20402940:	8082                	ret

20402942 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402942:	7179                	addi	sp,sp,-48
20402944:	d622                	sw	s0,44(sp)
20402946:	1800                	addi	s0,sp,48
20402948:	fca42e23          	sw	a0,-36(s0)
2040294c:	fcb42c23          	sw	a1,-40(s0)
20402950:	fcc42a23          	sw	a2,-44(s0)
20402954:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402958:	57fd                	li	a5,-1
2040295a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
2040295e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402962:	853e                	mv	a0,a5
20402964:	5432                	lw	s0,44(sp)
20402966:	6145                	addi	sp,sp,48
20402968:	8082                	ret

2040296a <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
2040296a:	1101                	addi	sp,sp,-32
2040296c:	ce06                	sw	ra,28(sp)
2040296e:	cc22                	sw	s0,24(sp)
20402970:	1000                	addi	s0,sp,32
20402972:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402976:	2a0010ef          	jal	ra,20403c16 <__metal_controller_interrupt_vector_mode>
2040297a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
2040297c:	853e                	mv	a0,a5
2040297e:	40f2                	lw	ra,28(sp)
20402980:	4462                	lw	s0,24(sp)
20402982:	6105                	addi	sp,sp,32
20402984:	8082                	ret

20402986 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402986:	7179                	addi	sp,sp,-48
20402988:	d606                	sw	ra,44(sp)
2040298a:	d422                	sw	s0,40(sp)
2040298c:	1800                	addi	s0,sp,48
2040298e:	fca42e23          	sw	a0,-36(s0)
20402992:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402996:	57fd                	li	a5,-1
20402998:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
2040299c:	3539                	jal	204027aa <_get_cpu_intc>
2040299e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
204029a2:	fe842783          	lw	a5,-24(s0)
204029a6:	c395                	beqz	a5,204029ca <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
204029a8:	fd842703          	lw	a4,-40(s0)
204029ac:	4785                	li	a5,1
204029ae:	00e7ef63          	bltu	a5,a4,204029cc <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
204029b2:	fe842783          	lw	a5,-24(s0)
204029b6:	439c                	lw	a5,0(a5)
204029b8:	43dc                	lw	a5,4(a5)
204029ba:	fd842583          	lw	a1,-40(s0)
204029be:	fe842503          	lw	a0,-24(s0)
204029c2:	9782                	jalr	a5
204029c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204029c8:	a011                	j	204029cc <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204029ca:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204029cc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204029d0:	853e                	mv	a0,a5
204029d2:	50b2                	lw	ra,44(sp)
204029d4:	5422                	lw	s0,40(sp)
204029d6:	6145                	addi	sp,sp,48
204029d8:	8082                	ret

204029da <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204029da:	7139                	addi	sp,sp,-64
204029dc:	de06                	sw	ra,60(sp)
204029de:	dc22                	sw	s0,56(sp)
204029e0:	0080                	addi	s0,sp,64
204029e2:	fca42623          	sw	a0,-52(s0)
204029e6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204029ea:	57fd                	li	a5,-1
204029ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204029f0:	fc842783          	lw	a5,-56(s0)
204029f4:	cbc1                	beqz	a5,20402a84 <__metal_driver_riscv_clint0_enable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
204029f6:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204029fa:	3b45                	jal	204027aa <_get_cpu_intc>
204029fc:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402a00:	fcc42503          	lw	a0,-52(s0)
20402a04:	be7ff0ef          	jal	ra,204025ea <__metal_driver_sifive_clint0_num_interrupts>
20402a08:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402a0c:	fe042223          	sw	zero,-28(s0)
20402a10:	a0a1                	j	20402a58 <__metal_driver_riscv_clint0_enable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402a12:	fe442583          	lw	a1,-28(s0)
20402a16:	fcc42503          	lw	a0,-52(s0)
20402a1a:	c31ff0ef          	jal	ra,2040264a <__metal_driver_sifive_clint0_interrupt_lines>
20402a1e:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402a22:	fe442583          	lw	a1,-28(s0)
20402a26:	fcc42503          	lw	a0,-52(s0)
20402a2a:	be5ff0ef          	jal	ra,2040260e <__metal_driver_sifive_clint0_interrupt_parents>
20402a2e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402a32:	fe042703          	lw	a4,-32(s0)
20402a36:	fe842783          	lw	a5,-24(s0)
20402a3a:	00f71863          	bne	a4,a5,20402a4a <__metal_driver_riscv_clint0_enable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402a3e:	fc842703          	lw	a4,-56(s0)
20402a42:	fd842783          	lw	a5,-40(s0)
20402a46:	02f70063          	beq	a4,a5,20402a66 <__metal_driver_riscv_clint0_enable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402a4a:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402a4e:	fe442783          	lw	a5,-28(s0)
20402a52:	0785                	addi	a5,a5,1
20402a54:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402a58:	fe442703          	lw	a4,-28(s0)
20402a5c:	fdc42783          	lw	a5,-36(s0)
20402a60:	faf749e3          	blt	a4,a5,20402a12 <__metal_driver_riscv_clint0_enable+0x38>
20402a64:	a011                	j	20402a68 <__metal_driver_riscv_clint0_enable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
20402a66:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402a68:	fe842783          	lw	a5,-24(s0)
20402a6c:	cf81                	beqz	a5,20402a84 <__metal_driver_riscv_clint0_enable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402a6e:	fe842783          	lw	a5,-24(s0)
20402a72:	439c                	lw	a5,0(a5)
20402a74:	53dc                	lw	a5,36(a5)
20402a76:	fc842583          	lw	a1,-56(s0)
20402a7a:	fe842503          	lw	a0,-24(s0)
20402a7e:	9782                	jalr	a5
20402a80:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402a84:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402a88:	853e                	mv	a0,a5
20402a8a:	50f2                	lw	ra,60(sp)
20402a8c:	5462                	lw	s0,56(sp)
20402a8e:	6121                	addi	sp,sp,64
20402a90:	8082                	ret

20402a92 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402a92:	7139                	addi	sp,sp,-64
20402a94:	de06                	sw	ra,60(sp)
20402a96:	dc22                	sw	s0,56(sp)
20402a98:	0080                	addi	s0,sp,64
20402a9a:	fca42623          	sw	a0,-52(s0)
20402a9e:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402aa2:	57fd                	li	a5,-1
20402aa4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402aa8:	fc842783          	lw	a5,-56(s0)
20402aac:	cbc1                	beqz	a5,20402b3c <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402aae:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402ab2:	39e5                	jal	204027aa <_get_cpu_intc>
20402ab4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402ab8:	fcc42503          	lw	a0,-52(s0)
20402abc:	b2fff0ef          	jal	ra,204025ea <__metal_driver_sifive_clint0_num_interrupts>
20402ac0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402ac4:	fe042223          	sw	zero,-28(s0)
20402ac8:	a0a1                	j	20402b10 <__metal_driver_riscv_clint0_disable+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402aca:	fe442583          	lw	a1,-28(s0)
20402ace:	fcc42503          	lw	a0,-52(s0)
20402ad2:	b79ff0ef          	jal	ra,2040264a <__metal_driver_sifive_clint0_interrupt_lines>
20402ad6:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402ada:	fe442583          	lw	a1,-28(s0)
20402ade:	fcc42503          	lw	a0,-52(s0)
20402ae2:	b2dff0ef          	jal	ra,2040260e <__metal_driver_sifive_clint0_interrupt_parents>
20402ae6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402aea:	fe042703          	lw	a4,-32(s0)
20402aee:	fe842783          	lw	a5,-24(s0)
20402af2:	00f71863          	bne	a4,a5,20402b02 <__metal_driver_riscv_clint0_disable+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402af6:	fc842703          	lw	a4,-56(s0)
20402afa:	fd842783          	lw	a5,-40(s0)
20402afe:	02f70063          	beq	a4,a5,20402b1e <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402b02:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402b06:	fe442783          	lw	a5,-28(s0)
20402b0a:	0785                	addi	a5,a5,1
20402b0c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402b10:	fe442703          	lw	a4,-28(s0)
20402b14:	fdc42783          	lw	a5,-36(s0)
20402b18:	faf749e3          	blt	a4,a5,20402aca <__metal_driver_riscv_clint0_disable+0x38>
20402b1c:	a011                	j	20402b20 <__metal_driver_riscv_clint0_disable+0x8e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402b1e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402b20:	fe842783          	lw	a5,-24(s0)
20402b24:	cf81                	beqz	a5,20402b3c <__metal_driver_riscv_clint0_disable+0xaa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402b26:	fe842783          	lw	a5,-24(s0)
20402b2a:	439c                	lw	a5,0(a5)
20402b2c:	579c                	lw	a5,40(a5)
20402b2e:	fc842583          	lw	a1,-56(s0)
20402b32:	fe842503          	lw	a0,-24(s0)
20402b36:	9782                	jalr	a5
20402b38:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402b3c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402b40:	853e                	mv	a0,a5
20402b42:	50f2                	lw	ra,60(sp)
20402b44:	5462                	lw	s0,56(sp)
20402b46:	6121                	addi	sp,sp,64
20402b48:	8082                	ret

20402b4a <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402b4a:	7179                	addi	sp,sp,-48
20402b4c:	d606                	sw	ra,44(sp)
20402b4e:	d422                	sw	s0,40(sp)
20402b50:	1800                	addi	s0,sp,48
20402b52:	fca42e23          	sw	a0,-36(s0)
20402b56:	fcb42c23          	sw	a1,-40(s0)
20402b5a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402b5e:	57fd                	li	a5,-1
20402b60:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402b64:	fdc42783          	lw	a5,-36(s0)
20402b68:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402b6c:	fdc42503          	lw	a0,-36(s0)
20402b70:	a55ff0ef          	jal	ra,204025c4 <__metal_driver_sifive_clint0_control_base>
20402b74:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402b78:	fd842703          	lw	a4,-40(s0)
20402b7c:	4789                	li	a5,2
20402b7e:	04f70963          	beq	a4,a5,20402bd0 <__metal_driver_riscv_clint0_command_request+0x86>
20402b82:	fd842703          	lw	a4,-40(s0)
20402b86:	4789                	li	a5,2
20402b88:	00e7c863          	blt	a5,a4,20402b98 <__metal_driver_riscv_clint0_command_request+0x4e>
20402b8c:	fd842703          	lw	a4,-40(s0)
20402b90:	4785                	li	a5,1
20402b92:	00f70e63          	beq	a4,a5,20402bae <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402b96:	a8f1                	j	20402c72 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402b98:	fd842703          	lw	a4,-40(s0)
20402b9c:	478d                	li	a5,3
20402b9e:	04f70d63          	beq	a4,a5,20402bf8 <__metal_driver_riscv_clint0_command_request+0xae>
20402ba2:	fd842703          	lw	a4,-40(s0)
20402ba6:	4791                	li	a5,4
20402ba8:	08f70963          	beq	a4,a5,20402c3a <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402bac:	a0d9                	j	20402c72 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402bae:	fd442783          	lw	a5,-44(s0)
20402bb2:	cbcd                	beqz	a5,20402c64 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402bb4:	fe842503          	lw	a0,-24(s0)
20402bb8:	ac3ff0ef          	jal	ra,2040267a <__metal_clint0_mtime_get>
20402bbc:	87aa                	mv	a5,a0
20402bbe:	882e                	mv	a6,a1
20402bc0:	fd442703          	lw	a4,-44(s0)
20402bc4:	c31c                	sw	a5,0(a4)
20402bc6:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402bca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402bce:	a859                	j	20402c64 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402bd0:	fd442783          	lw	a5,-44(s0)
20402bd4:	cbd1                	beqz	a5,20402c68 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402bd6:	fd442783          	lw	a5,-44(s0)
20402bda:	439c                	lw	a5,0(a5)
20402bdc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402be0:	fe042783          	lw	a5,-32(s0)
20402be4:	078a                	slli	a5,a5,0x2
20402be6:	873e                	mv	a4,a5
20402be8:	fe442783          	lw	a5,-28(s0)
20402bec:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402bee:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402bf2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402bf6:	a88d                	j	20402c68 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402bf8:	fd442783          	lw	a5,-44(s0)
20402bfc:	cba5                	beqz	a5,20402c6c <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402bfe:	fd442783          	lw	a5,-44(s0)
20402c02:	439c                	lw	a5,0(a5)
20402c04:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402c08:	fe042783          	lw	a5,-32(s0)
20402c0c:	078a                	slli	a5,a5,0x2
20402c0e:	873e                	mv	a4,a5
20402c10:	fe442783          	lw	a5,-28(s0)
20402c14:	97ba                	add	a5,a5,a4
20402c16:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402c18:	4785                	li	a5,1
20402c1a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402c1c:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402c20:	fe042783          	lw	a5,-32(s0)
20402c24:	078a                	slli	a5,a5,0x2
20402c26:	873e                	mv	a4,a5
20402c28:	fe442783          	lw	a5,-28(s0)
20402c2c:	97ba                	add	a5,a5,a4
20402c2e:	439c                	lw	a5,0(a5)
20402c30:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402c34:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402c38:	a815                	j	20402c6c <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402c3a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402c3e:	fd442783          	lw	a5,-44(s0)
20402c42:	c79d                	beqz	a5,20402c70 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402c44:	fd442783          	lw	a5,-44(s0)
20402c48:	439c                	lw	a5,0(a5)
20402c4a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402c4e:	fe042783          	lw	a5,-32(s0)
20402c52:	078a                	slli	a5,a5,0x2
20402c54:	873e                	mv	a4,a5
20402c56:	fe442783          	lw	a5,-28(s0)
20402c5a:	97ba                	add	a5,a5,a4
20402c5c:	439c                	lw	a5,0(a5)
20402c5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402c62:	a039                	j	20402c70 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402c64:	0001                	nop
20402c66:	a031                	j	20402c72 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402c68:	0001                	nop
20402c6a:	a021                	j	20402c72 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402c6c:	0001                	nop
20402c6e:	a011                	j	20402c72 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402c70:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402c72:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402c76:	853e                	mv	a0,a5
20402c78:	50b2                	lw	ra,44(sp)
20402c7a:	5422                	lw	s0,40(sp)
20402c7c:	6145                	addi	sp,sp,48
20402c7e:	8082                	ret

20402c80 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402c80:	7179                	addi	sp,sp,-48
20402c82:	d606                	sw	ra,44(sp)
20402c84:	d422                	sw	s0,40(sp)
20402c86:	1800                	addi	s0,sp,48
20402c88:	fca42e23          	sw	a0,-36(s0)
20402c8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402c90:	599020ef          	jal	ra,20405a28 <metal_cpu_get_current_hartid>
20402c94:	87aa                	mv	a5,a0
20402c96:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402c9a:	fec40793          	addi	a5,s0,-20
20402c9e:	863e                	mv	a2,a5
20402ca0:	4589                	li	a1,2
20402ca2:	fdc42503          	lw	a0,-36(s0)
20402ca6:	3555                	jal	20402b4a <__metal_driver_riscv_clint0_command_request>
20402ca8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402caa:	853e                	mv	a0,a5
20402cac:	50b2                	lw	ra,44(sp)
20402cae:	5422                	lw	s0,40(sp)
20402cb0:	6145                	addi	sp,sp,48
20402cb2:	8082                	ret

20402cb4 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402cb4:	7179                	addi	sp,sp,-48
20402cb6:	d606                	sw	ra,44(sp)
20402cb8:	d422                	sw	s0,40(sp)
20402cba:	1800                	addi	s0,sp,48
20402cbc:	fca42e23          	sw	a0,-36(s0)
20402cc0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402cc4:	565020ef          	jal	ra,20405a28 <metal_cpu_get_current_hartid>
20402cc8:	87aa                	mv	a5,a0
20402cca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402cce:	fec40793          	addi	a5,s0,-20
20402cd2:	863e                	mv	a2,a5
20402cd4:	458d                	li	a1,3
20402cd6:	fdc42503          	lw	a0,-36(s0)
20402cda:	3d85                	jal	20402b4a <__metal_driver_riscv_clint0_command_request>
20402cdc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402cde:	853e                	mv	a0,a5
20402ce0:	50b2                	lw	ra,44(sp)
20402ce2:	5422                	lw	s0,40(sp)
20402ce4:	6145                	addi	sp,sp,48
20402ce6:	8082                	ret

20402ce8 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402ce8:	1101                	addi	sp,sp,-32
20402cea:	ce22                	sw	s0,28(sp)
20402cec:	1000                	addi	s0,sp,32
20402cee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402cf2:	fec42703          	lw	a4,-20(s0)
20402cf6:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402cfa:	00f71463          	bne	a4,a5,20402d02 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
		return 0;
20402cfe:	4781                	li	a5,0
20402d00:	a011                	j	20402d04 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402d02:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:202
	}
}
20402d04:	853e                	mv	a0,a5
20402d06:	4472                	lw	s0,28(sp)
20402d08:	6105                	addi	sp,sp,32
20402d0a:	8082                	ret

20402d0c <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402d0c:	1101                	addi	sp,sp,-32
20402d0e:	ce22                	sw	s0,28(sp)
20402d10:	1000                	addi	s0,sp,32
20402d12:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402d16:	fec42703          	lw	a4,-20(s0)
20402d1a:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402d1e:	00f71763          	bne	a4,a5,20402d2c <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:207
		return 1000000;
20402d22:	000f47b7          	lui	a5,0xf4
20402d26:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402d2a:	a011                	j	20402d2e <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402d2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:212
	}
}
20402d2e:	853e                	mv	a0,a5
20402d30:	4472                	lw	s0,28(sp)
20402d32:	6105                	addi	sp,sp,32
20402d34:	8082                	ret

20402d36 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402d36:	1101                	addi	sp,sp,-32
20402d38:	ce22                	sw	s0,28(sp)
20402d3a:	1000                	addi	s0,sp,32
20402d3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402d40:	fec42703          	lw	a4,-20(s0)
20402d44:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402d48:	00f71763          	bne	a4,a5,20402d56 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402d4c:	800017b7          	lui	a5,0x80001
20402d50:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20402d54:	a011                	j	20402d58 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402d56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:222
	}
}
20402d58:	853e                	mv	a0,a5
20402d5a:	4472                	lw	s0,28(sp)
20402d5c:	6105                	addi	sp,sp,32
20402d5e:	8082                	ret

20402d60 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402d60:	1101                	addi	sp,sp,-32
20402d62:	ce22                	sw	s0,28(sp)
20402d64:	1000                	addi	s0,sp,32
20402d66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402d6a:	fec42783          	lw	a5,-20(s0)
20402d6e:	00f04a63          	bgtz	a5,20402d82 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402d72:	fec42703          	lw	a4,-20(s0)
20402d76:	070a                	slli	a4,a4,0x2
20402d78:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402d7c:	97ba                	add	a5,a5,a4
20402d7e:	439c                	lw	a5,0(a5)
20402d80:	a011                	j	20402d84 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402d82:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402d84:	853e                	mv	a0,a5
20402d86:	4472                	lw	s0,28(sp)
20402d88:	6105                	addi	sp,sp,32
20402d8a:	8082                	ret

20402d8c <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402d8c:	1101                	addi	sp,sp,-32
20402d8e:	ce22                	sw	s0,28(sp)
20402d90:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402d92:	f14027f3          	csrr	a5,mhartid
20402d96:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402d9a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402d9e:	853e                	mv	a0,a5
20402da0:	4472                	lw	s0,28(sp)
20402da2:	6105                	addi	sp,sp,32
20402da4:	8082                	ret

20402da6 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402da6:	1101                	addi	sp,sp,-32
20402da8:	ce22                	sw	s0,28(sp)
20402daa:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402dac:	47a1                	li	a5,8
20402dae:	3007a7f3          	csrrs	a5,mstatus,a5
20402db2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402db6:	0001                	nop
20402db8:	4472                	lw	s0,28(sp)
20402dba:	6105                	addi	sp,sp,32
20402dbc:	8082                	ret

20402dbe <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402dbe:	1101                	addi	sp,sp,-32
20402dc0:	ce22                	sw	s0,28(sp)
20402dc2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402dc4:	47a1                	li	a5,8
20402dc6:	3007b7f3          	csrrc	a5,mstatus,a5
20402dca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402dce:	0001                	nop
20402dd0:	4472                	lw	s0,28(sp)
20402dd2:	6105                	addi	sp,sp,32
20402dd4:	8082                	ret

20402dd6 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20402dd6:	1101                	addi	sp,sp,-32
20402dd8:	ce22                	sw	s0,28(sp)
20402dda:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402ddc:	47a1                	li	a5,8
20402dde:	3047a7f3          	csrrs	a5,mie,a5
20402de2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20402de6:	0001                	nop
20402de8:	4472                	lw	s0,28(sp)
20402dea:	6105                	addi	sp,sp,32
20402dec:	8082                	ret

20402dee <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402dee:	1101                	addi	sp,sp,-32
20402df0:	ce22                	sw	s0,28(sp)
20402df2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402df4:	47a1                	li	a5,8
20402df6:	3047b7f3          	csrrc	a5,mie,a5
20402dfa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402dfe:	0001                	nop
20402e00:	4472                	lw	s0,28(sp)
20402e02:	6105                	addi	sp,sp,32
20402e04:	8082                	ret

20402e06 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402e06:	1101                	addi	sp,sp,-32
20402e08:	ce22                	sw	s0,28(sp)
20402e0a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402e0c:	08000793          	li	a5,128
20402e10:	3047a7f3          	csrrs	a5,mie,a5
20402e14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402e18:	0001                	nop
20402e1a:	4472                	lw	s0,28(sp)
20402e1c:	6105                	addi	sp,sp,32
20402e1e:	8082                	ret

20402e20 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402e20:	1101                	addi	sp,sp,-32
20402e22:	ce22                	sw	s0,28(sp)
20402e24:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402e26:	08000793          	li	a5,128
20402e2a:	3047b7f3          	csrrc	a5,mie,a5
20402e2e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402e32:	0001                	nop
20402e34:	4472                	lw	s0,28(sp)
20402e36:	6105                	addi	sp,sp,32
20402e38:	8082                	ret

20402e3a <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402e3a:	1101                	addi	sp,sp,-32
20402e3c:	ce22                	sw	s0,28(sp)
20402e3e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402e40:	6785                	lui	a5,0x1
20402e42:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402e46:	3047a7f3          	csrrs	a5,mie,a5
20402e4a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402e4e:	0001                	nop
20402e50:	4472                	lw	s0,28(sp)
20402e52:	6105                	addi	sp,sp,32
20402e54:	8082                	ret

20402e56 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402e56:	1101                	addi	sp,sp,-32
20402e58:	ce22                	sw	s0,28(sp)
20402e5a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402e5c:	6785                	lui	a5,0x1
20402e5e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402e62:	3047b7f3          	csrrc	a5,mie,a5
20402e66:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402e6a:	0001                	nop
20402e6c:	4472                	lw	s0,28(sp)
20402e6e:	6105                	addi	sp,sp,32
20402e70:	8082                	ret

20402e72 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402e72:	7179                	addi	sp,sp,-48
20402e74:	d622                	sw	s0,44(sp)
20402e76:	1800                	addi	s0,sp,48
20402e78:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402e7c:	fdc42783          	lw	a5,-36(s0)
20402e80:	4705                	li	a4,1
20402e82:	00f717b3          	sll	a5,a4,a5
20402e86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402e8a:	fec42783          	lw	a5,-20(s0)
20402e8e:	3047a7f3          	csrrs	a5,mie,a5
20402e92:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402e96:	0001                	nop
20402e98:	5432                	lw	s0,44(sp)
20402e9a:	6145                	addi	sp,sp,48
20402e9c:	8082                	ret

20402e9e <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402e9e:	7179                	addi	sp,sp,-48
20402ea0:	d622                	sw	s0,44(sp)
20402ea2:	1800                	addi	s0,sp,48
20402ea4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402ea8:	fdc42783          	lw	a5,-36(s0)
20402eac:	4705                	li	a4,1
20402eae:	00f717b3          	sll	a5,a4,a5
20402eb2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402eb6:	fec42783          	lw	a5,-20(s0)
20402eba:	3047b7f3          	csrrc	a5,mie,a5
20402ebe:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402ec2:	0001                	nop
20402ec4:	5432                	lw	s0,44(sp)
20402ec6:	6145                	addi	sp,sp,48
20402ec8:	8082                	ret

20402eca <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402eca:	1101                	addi	sp,sp,-32
20402ecc:	ce06                	sw	ra,28(sp)
20402ece:	cc22                	sw	s0,24(sp)
20402ed0:	1000                	addi	s0,sp,32
20402ed2:	fea42623          	sw	a0,-20(s0)
20402ed6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402eda:	06400513          	li	a0,100
20402ede:	365020ef          	jal	ra,20405a42 <metal_shutdown>

20402ee2 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402ee2:	1101                	addi	sp,sp,-32
20402ee4:	ce06                	sw	ra,28(sp)
20402ee6:	cc22                	sw	s0,24(sp)
20402ee8:	1000                	addi	s0,sp,32
20402eea:	fea42623          	sw	a0,-20(s0)
20402eee:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402ef2:	0c800513          	li	a0,200
20402ef6:	34d020ef          	jal	ra,20405a42 <metal_shutdown>

20402efa <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402efa:	715d                	addi	sp,sp,-80
20402efc:	c686                	sw	ra,76(sp)
20402efe:	c496                	sw	t0,72(sp)
20402f00:	c29a                	sw	t1,68(sp)
20402f02:	c09e                	sw	t2,64(sp)
20402f04:	de22                	sw	s0,60(sp)
20402f06:	dc2a                	sw	a0,56(sp)
20402f08:	da2e                	sw	a1,52(sp)
20402f0a:	d832                	sw	a2,48(sp)
20402f0c:	d636                	sw	a3,44(sp)
20402f0e:	d43a                	sw	a4,40(sp)
20402f10:	d23e                	sw	a5,36(sp)
20402f12:	d042                	sw	a6,32(sp)
20402f14:	ce46                	sw	a7,28(sp)
20402f16:	cc72                	sw	t3,24(sp)
20402f18:	ca76                	sw	t4,20(sp)
20402f1a:	c87a                	sw	t5,16(sp)
20402f1c:	c67e                	sw	t6,12(sp)
20402f1e:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402f20:	12c00513          	li	a0,300
20402f24:	31f020ef          	jal	ra,20405a42 <metal_shutdown>

20402f28 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402f28:	711d                	addi	sp,sp,-96
20402f2a:	ce86                	sw	ra,92(sp)
20402f2c:	cc96                	sw	t0,88(sp)
20402f2e:	ca9a                	sw	t1,84(sp)
20402f30:	c89e                	sw	t2,80(sp)
20402f32:	c6a2                	sw	s0,76(sp)
20402f34:	c4aa                	sw	a0,72(sp)
20402f36:	c2ae                	sw	a1,68(sp)
20402f38:	c0b2                	sw	a2,64(sp)
20402f3a:	de36                	sw	a3,60(sp)
20402f3c:	dc3a                	sw	a4,56(sp)
20402f3e:	da3e                	sw	a5,52(sp)
20402f40:	d842                	sw	a6,48(sp)
20402f42:	d646                	sw	a7,44(sp)
20402f44:	d472                	sw	t3,40(sp)
20402f46:	d276                	sw	t4,36(sp)
20402f48:	d07a                	sw	t5,32(sp)
20402f4a:	ce7e                	sw	t6,28(sp)
20402f4c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f4e:	3d3d                	jal	20402d8c <__metal_myhart_id>
20402f50:	872a                	mv	a4,a0
20402f52:	070a                	slli	a4,a4,0x2
20402f54:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402f58:	97ba                	add	a5,a5,a4
20402f5a:	439c                	lw	a5,0(a5)
20402f5c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402f60:	fac42783          	lw	a5,-84(s0)
20402f64:	c785                	beqz	a5,20402f8c <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f66:	fac42503          	lw	a0,-84(s0)
20402f6a:	33f1                	jal	20402d36 <__metal_driver_cpu_interrupt_controller>
20402f6c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402f70:	fa842783          	lw	a5,-88(s0)
20402f74:	0e07a783          	lw	a5,224(a5)
20402f78:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402f7c:	fa842783          	lw	a5,-88(s0)
20402f80:	0d87a783          	lw	a5,216(a5)
20402f84:	fa442583          	lw	a1,-92(s0)
20402f88:	450d                	li	a0,3
20402f8a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402f8c:	0001                	nop
20402f8e:	40f6                	lw	ra,92(sp)
20402f90:	42e6                	lw	t0,88(sp)
20402f92:	4356                	lw	t1,84(sp)
20402f94:	43c6                	lw	t2,80(sp)
20402f96:	4436                	lw	s0,76(sp)
20402f98:	4526                	lw	a0,72(sp)
20402f9a:	4596                	lw	a1,68(sp)
20402f9c:	4606                	lw	a2,64(sp)
20402f9e:	56f2                	lw	a3,60(sp)
20402fa0:	5762                	lw	a4,56(sp)
20402fa2:	57d2                	lw	a5,52(sp)
20402fa4:	5842                	lw	a6,48(sp)
20402fa6:	58b2                	lw	a7,44(sp)
20402fa8:	5e22                	lw	t3,40(sp)
20402faa:	5e92                	lw	t4,36(sp)
20402fac:	5f02                	lw	t5,32(sp)
20402fae:	4ff2                	lw	t6,28(sp)
20402fb0:	6125                	addi	sp,sp,96
20402fb2:	30200073          	mret

20402fb6 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402fb6:	7179                	addi	sp,sp,-48
20402fb8:	d606                	sw	ra,44(sp)
20402fba:	d422                	sw	s0,40(sp)
20402fbc:	1800                	addi	s0,sp,48
20402fbe:	fca42e23          	sw	a0,-36(s0)
20402fc2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fc6:	33d9                	jal	20402d8c <__metal_myhart_id>
20402fc8:	872a                	mv	a4,a0
20402fca:	070a                	slli	a4,a4,0x2
20402fcc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402fd0:	97ba                	add	a5,a5,a4
20402fd2:	439c                	lw	a5,0(a5)
20402fd4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402fd8:	342027f3          	csrr	a5,mcause
20402fdc:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402fe0:	fec42783          	lw	a5,-20(s0)
20402fe4:	c795                	beqz	a5,20403010 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fe6:	fec42503          	lw	a0,-20(s0)
20402fea:	33b1                	jal	20402d36 <__metal_driver_cpu_interrupt_controller>
20402fec:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402ff0:	fe842783          	lw	a5,-24(s0)
20402ff4:	3ff7f793          	andi	a5,a5,1023
20402ff8:	fe442703          	lw	a4,-28(s0)
20402ffc:	0e078793          	addi	a5,a5,224
20403000:	078a                	slli	a5,a5,0x2
20403002:	97ba                	add	a5,a5,a4
20403004:	479c                	lw	a5,8(a5)
20403006:	fdc42583          	lw	a1,-36(s0)
2040300a:	fec42503          	lw	a0,-20(s0)
2040300e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20403010:	0001                	nop
20403012:	50b2                	lw	ra,44(sp)
20403014:	5422                	lw	s0,40(sp)
20403016:	6145                	addi	sp,sp,48
20403018:	8082                	ret

2040301a <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
2040301a:	711d                	addi	sp,sp,-96
2040301c:	ce86                	sw	ra,92(sp)
2040301e:	cc96                	sw	t0,88(sp)
20403020:	ca9a                	sw	t1,84(sp)
20403022:	c89e                	sw	t2,80(sp)
20403024:	c6a2                	sw	s0,76(sp)
20403026:	c4aa                	sw	a0,72(sp)
20403028:	c2ae                	sw	a1,68(sp)
2040302a:	c0b2                	sw	a2,64(sp)
2040302c:	de36                	sw	a3,60(sp)
2040302e:	dc3a                	sw	a4,56(sp)
20403030:	da3e                	sw	a5,52(sp)
20403032:	d842                	sw	a6,48(sp)
20403034:	d646                	sw	a7,44(sp)
20403036:	d472                	sw	t3,40(sp)
20403038:	d276                	sw	t4,36(sp)
2040303a:	d07a                	sw	t5,32(sp)
2040303c:	ce7e                	sw	t6,28(sp)
2040303e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403040:	33b1                	jal	20402d8c <__metal_myhart_id>
20403042:	872a                	mv	a4,a0
20403044:	070a                	slli	a4,a4,0x2
20403046:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040304a:	97ba                	add	a5,a5,a4
2040304c:	439c                	lw	a5,0(a5)
2040304e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20403052:	fac42783          	lw	a5,-84(s0)
20403056:	c78d                	beqz	a5,20403080 <metal_timer_interrupt_vector_handler+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403058:	fac42503          	lw	a0,-84(s0)
2040305c:	cdbff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403060:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20403064:	fa842783          	lw	a5,-88(s0)
20403068:	1407a783          	lw	a5,320(a5)
2040306c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20403070:	fa842783          	lw	a5,-88(s0)
20403074:	1387a783          	lw	a5,312(a5)
20403078:	fa442583          	lw	a1,-92(s0)
2040307c:	451d                	li	a0,7
2040307e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20403080:	0001                	nop
20403082:	40f6                	lw	ra,92(sp)
20403084:	42e6                	lw	t0,88(sp)
20403086:	4356                	lw	t1,84(sp)
20403088:	43c6                	lw	t2,80(sp)
2040308a:	4436                	lw	s0,76(sp)
2040308c:	4526                	lw	a0,72(sp)
2040308e:	4596                	lw	a1,68(sp)
20403090:	4606                	lw	a2,64(sp)
20403092:	56f2                	lw	a3,60(sp)
20403094:	5762                	lw	a4,56(sp)
20403096:	57d2                	lw	a5,52(sp)
20403098:	5842                	lw	a6,48(sp)
2040309a:	58b2                	lw	a7,44(sp)
2040309c:	5e22                	lw	t3,40(sp)
2040309e:	5e92                	lw	t4,36(sp)
204030a0:	5f02                	lw	t5,32(sp)
204030a2:	4ff2                	lw	t6,28(sp)
204030a4:	6125                	addi	sp,sp,96
204030a6:	30200073          	mret

204030aa <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204030aa:	7179                	addi	sp,sp,-48
204030ac:	d606                	sw	ra,44(sp)
204030ae:	d422                	sw	s0,40(sp)
204030b0:	1800                	addi	s0,sp,48
204030b2:	fca42e23          	sw	a0,-36(s0)
204030b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204030ba:	cd3ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204030be:	87aa                	mv	a5,a0
204030c0:	853e                	mv	a0,a5
204030c2:	c9fff0ef          	jal	ra,20402d60 <__metal_driver_cpu_get>
204030c6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204030ca:	fec42503          	lw	a0,-20(s0)
204030ce:	1a6010ef          	jal	ra,20404274 <__metal_driver_cpu_mtime_get>
204030d2:	fea42023          	sw	a0,-32(s0)
204030d6:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204030da:	fe042783          	lw	a5,-32(s0)
204030de:	fe442803          	lw	a6,-28(s0)
204030e2:	45a9                	li	a1,10
204030e4:	4601                	li	a2,0
204030e6:	00b786b3          	add	a3,a5,a1
204030ea:	8536                	mv	a0,a3
204030ec:	00f53533          	sltu	a0,a0,a5
204030f0:	00c80733          	add	a4,a6,a2
204030f4:	00e507b3          	add	a5,a0,a4
204030f8:	873e                	mv	a4,a5
204030fa:	87b6                	mv	a5,a3
204030fc:	883a                	mv	a6,a4
204030fe:	85be                	mv	a1,a5
20403100:	8642                	mv	a2,a6
20403102:	fec42503          	lw	a0,-20(s0)
20403106:	1d4010ef          	jal	ra,204042da <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
2040310a:	0001                	nop
2040310c:	50b2                	lw	ra,44(sp)
2040310e:	5422                	lw	s0,40(sp)
20403110:	6145                	addi	sp,sp,48
20403112:	8082                	ret
	...

20403180 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20403180:	7119                	addi	sp,sp,-128
20403182:	de86                	sw	ra,124(sp)
20403184:	dc96                	sw	t0,120(sp)
20403186:	da9a                	sw	t1,116(sp)
20403188:	d89e                	sw	t2,112(sp)
2040318a:	d6a2                	sw	s0,108(sp)
2040318c:	d4aa                	sw	a0,104(sp)
2040318e:	d2ae                	sw	a1,100(sp)
20403190:	d0b2                	sw	a2,96(sp)
20403192:	ceb6                	sw	a3,92(sp)
20403194:	ccba                	sw	a4,88(sp)
20403196:	cabe                	sw	a5,84(sp)
20403198:	c8c2                	sw	a6,80(sp)
2040319a:	c6c6                	sw	a7,76(sp)
2040319c:	c4f2                	sw	t3,72(sp)
2040319e:	c2f6                	sw	t4,68(sp)
204031a0:	c0fa                	sw	t5,64(sp)
204031a2:	de7e                	sw	t6,60(sp)
204031a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031a6:	be7ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204031aa:	872a                	mv	a4,a0
204031ac:	070a                	slli	a4,a4,0x2
204031ae:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204031b2:	97ba                	add	a5,a5,a4
204031b4:	439c                	lw	a5,0(a5)
204031b6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204031ba:	342027f3          	csrr	a5,mcause
204031be:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204031c2:	341027f3          	csrr	a5,mepc
204031c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204031ca:	343027f3          	csrr	a5,mtval
204031ce:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204031d2:	305027f3          	csrr	a5,mtvec
204031d6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204031da:	fac42783          	lw	a5,-84(s0)
204031de:	c7e9                	beqz	a5,204032a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031e0:	fac42503          	lw	a0,-84(s0)
204031e4:	b53ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204031e8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204031ec:	fa842783          	lw	a5,-88(s0)
204031f0:	3ff7f793          	andi	a5,a5,1023
204031f4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204031f8:	fa842783          	lw	a5,-88(s0)
204031fc:	0807d863          	bgez	a5,2040328c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403200:	f9442703          	lw	a4,-108(s0)
20403204:	47ad                	li	a5,11
20403206:	00e7d763          	bge	a5,a4,20403214 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040320a:	f9c42783          	lw	a5,-100(s0)
2040320e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403212:	ef9d                	bnez	a5,20403250 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20403214:	f9842683          	lw	a3,-104(s0)
20403218:	f9442703          	lw	a4,-108(s0)
2040321c:	87ba                	mv	a5,a4
2040321e:	0786                	slli	a5,a5,0x1
20403220:	97ba                	add	a5,a5,a4
20403222:	078e                	slli	a5,a5,0x3
20403224:	97b6                	add	a5,a5,a3
20403226:	0987a783          	lw	a5,152(a5)
2040322a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040322e:	f9842683          	lw	a3,-104(s0)
20403232:	f9442703          	lw	a4,-108(s0)
20403236:	87ba                	mv	a5,a4
20403238:	0786                	slli	a5,a5,0x1
2040323a:	97ba                	add	a5,a5,a4
2040323c:	078e                	slli	a5,a5,0x3
2040323e:	97b6                	add	a5,a5,a3
20403240:	0907a783          	lw	a5,144(a5)
20403244:	f8c42583          	lw	a1,-116(s0)
20403248:	f9442503          	lw	a0,-108(s0)
2040324c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040324e:	a8a9                	j	204032a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20403250:	f9c42783          	lw	a5,-100(s0)
20403254:	03f7f713          	andi	a4,a5,63
20403258:	4789                	li	a5,2
2040325a:	04f71763          	bne	a4,a5,204032a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040325e:	307027f3          	csrr	a5,mtvt
20403262:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403266:	f9842783          	lw	a5,-104(s0)
2040326a:	0dc7a783          	lw	a5,220(a5)
2040326e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20403272:	f9042783          	lw	a5,-112(s0)
20403276:	439c                	lw	a5,0(a5)
20403278:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2040327c:	f8842783          	lw	a5,-120(s0)
20403280:	f8c42583          	lw	a1,-116(s0)
20403284:	f9442503          	lw	a0,-108(s0)
20403288:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040328a:	a839                	j	204032a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040328c:	f9842703          	lw	a4,-104(s0)
20403290:	f9442783          	lw	a5,-108(s0)
20403294:	0e078793          	addi	a5,a5,224
20403298:	078a                	slli	a5,a5,0x2
2040329a:	97ba                	add	a5,a5,a4
2040329c:	479c                	lw	a5,8(a5)
2040329e:	f9442583          	lw	a1,-108(s0)
204032a2:	fac42503          	lw	a0,-84(s0)
204032a6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204032a8:	50f6                	lw	ra,124(sp)
204032aa:	52e6                	lw	t0,120(sp)
204032ac:	5356                	lw	t1,116(sp)
204032ae:	53c6                	lw	t2,112(sp)
204032b0:	5436                	lw	s0,108(sp)
204032b2:	5526                	lw	a0,104(sp)
204032b4:	5596                	lw	a1,100(sp)
204032b6:	5606                	lw	a2,96(sp)
204032b8:	46f6                	lw	a3,92(sp)
204032ba:	4766                	lw	a4,88(sp)
204032bc:	47d6                	lw	a5,84(sp)
204032be:	4846                	lw	a6,80(sp)
204032c0:	48b6                	lw	a7,76(sp)
204032c2:	4e26                	lw	t3,72(sp)
204032c4:	4e96                	lw	t4,68(sp)
204032c6:	4f06                	lw	t5,64(sp)
204032c8:	5ff2                	lw	t6,60(sp)
204032ca:	6109                	addi	sp,sp,128
204032cc:	30200073          	mret
	...

204032f6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204032f6:	711d                	addi	sp,sp,-96
204032f8:	ce86                	sw	ra,92(sp)
204032fa:	cc96                	sw	t0,88(sp)
204032fc:	ca9a                	sw	t1,84(sp)
204032fe:	c89e                	sw	t2,80(sp)
20403300:	c6a2                	sw	s0,76(sp)
20403302:	c4aa                	sw	a0,72(sp)
20403304:	c2ae                	sw	a1,68(sp)
20403306:	c0b2                	sw	a2,64(sp)
20403308:	de36                	sw	a3,60(sp)
2040330a:	dc3a                	sw	a4,56(sp)
2040330c:	da3e                	sw	a5,52(sp)
2040330e:	d842                	sw	a6,48(sp)
20403310:	d646                	sw	a7,44(sp)
20403312:	d472                	sw	t3,40(sp)
20403314:	d276                	sw	t4,36(sp)
20403316:	d07a                	sw	t5,32(sp)
20403318:	ce7e                	sw	t6,28(sp)
2040331a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040331c:	a71ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403320:	872a                	mv	a4,a0
20403322:	070a                	slli	a4,a4,0x2
20403324:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403328:	97ba                	add	a5,a5,a4
2040332a:	439c                	lw	a5,0(a5)
2040332c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20403330:	fac42783          	lw	a5,-84(s0)
20403334:	c78d                	beqz	a5,2040335e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403336:	fac42503          	lw	a0,-84(s0)
2040333a:	9fdff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
2040333e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20403342:	fa842783          	lw	a5,-88(s0)
20403346:	2187a783          	lw	a5,536(a5)
2040334a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040334e:	fa842783          	lw	a5,-88(s0)
20403352:	2107a783          	lw	a5,528(a5)
20403356:	fa442583          	lw	a1,-92(s0)
2040335a:	4541                	li	a0,16
2040335c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040335e:	0001                	nop
20403360:	40f6                	lw	ra,92(sp)
20403362:	42e6                	lw	t0,88(sp)
20403364:	4356                	lw	t1,84(sp)
20403366:	43c6                	lw	t2,80(sp)
20403368:	4436                	lw	s0,76(sp)
2040336a:	4526                	lw	a0,72(sp)
2040336c:	4596                	lw	a1,68(sp)
2040336e:	4606                	lw	a2,64(sp)
20403370:	56f2                	lw	a3,60(sp)
20403372:	5762                	lw	a4,56(sp)
20403374:	57d2                	lw	a5,52(sp)
20403376:	5842                	lw	a6,48(sp)
20403378:	58b2                	lw	a7,44(sp)
2040337a:	5e22                	lw	t3,40(sp)
2040337c:	5e92                	lw	t4,36(sp)
2040337e:	5f02                	lw	t5,32(sp)
20403380:	4ff2                	lw	t6,28(sp)
20403382:	6125                	addi	sp,sp,96
20403384:	30200073          	mret

20403388 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20403388:	711d                	addi	sp,sp,-96
2040338a:	ce86                	sw	ra,92(sp)
2040338c:	cc96                	sw	t0,88(sp)
2040338e:	ca9a                	sw	t1,84(sp)
20403390:	c89e                	sw	t2,80(sp)
20403392:	c6a2                	sw	s0,76(sp)
20403394:	c4aa                	sw	a0,72(sp)
20403396:	c2ae                	sw	a1,68(sp)
20403398:	c0b2                	sw	a2,64(sp)
2040339a:	de36                	sw	a3,60(sp)
2040339c:	dc3a                	sw	a4,56(sp)
2040339e:	da3e                	sw	a5,52(sp)
204033a0:	d842                	sw	a6,48(sp)
204033a2:	d646                	sw	a7,44(sp)
204033a4:	d472                	sw	t3,40(sp)
204033a6:	d276                	sw	t4,36(sp)
204033a8:	d07a                	sw	t5,32(sp)
204033aa:	ce7e                	sw	t6,28(sp)
204033ac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033ae:	9dfff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204033b2:	872a                	mv	a4,a0
204033b4:	070a                	slli	a4,a4,0x2
204033b6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204033ba:	97ba                	add	a5,a5,a4
204033bc:	439c                	lw	a5,0(a5)
204033be:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204033c2:	fac42783          	lw	a5,-84(s0)
204033c6:	c78d                	beqz	a5,204033f0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033c8:	fac42503          	lw	a0,-84(s0)
204033cc:	96bff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204033d0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204033d4:	fa842783          	lw	a5,-88(s0)
204033d8:	2307a783          	lw	a5,560(a5)
204033dc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204033e0:	fa842783          	lw	a5,-88(s0)
204033e4:	2287a783          	lw	a5,552(a5)
204033e8:	fa442583          	lw	a1,-92(s0)
204033ec:	4545                	li	a0,17
204033ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204033f0:	0001                	nop
204033f2:	40f6                	lw	ra,92(sp)
204033f4:	42e6                	lw	t0,88(sp)
204033f6:	4356                	lw	t1,84(sp)
204033f8:	43c6                	lw	t2,80(sp)
204033fa:	4436                	lw	s0,76(sp)
204033fc:	4526                	lw	a0,72(sp)
204033fe:	4596                	lw	a1,68(sp)
20403400:	4606                	lw	a2,64(sp)
20403402:	56f2                	lw	a3,60(sp)
20403404:	5762                	lw	a4,56(sp)
20403406:	57d2                	lw	a5,52(sp)
20403408:	5842                	lw	a6,48(sp)
2040340a:	58b2                	lw	a7,44(sp)
2040340c:	5e22                	lw	t3,40(sp)
2040340e:	5e92                	lw	t4,36(sp)
20403410:	5f02                	lw	t5,32(sp)
20403412:	4ff2                	lw	t6,28(sp)
20403414:	6125                	addi	sp,sp,96
20403416:	30200073          	mret

2040341a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040341a:	711d                	addi	sp,sp,-96
2040341c:	ce86                	sw	ra,92(sp)
2040341e:	cc96                	sw	t0,88(sp)
20403420:	ca9a                	sw	t1,84(sp)
20403422:	c89e                	sw	t2,80(sp)
20403424:	c6a2                	sw	s0,76(sp)
20403426:	c4aa                	sw	a0,72(sp)
20403428:	c2ae                	sw	a1,68(sp)
2040342a:	c0b2                	sw	a2,64(sp)
2040342c:	de36                	sw	a3,60(sp)
2040342e:	dc3a                	sw	a4,56(sp)
20403430:	da3e                	sw	a5,52(sp)
20403432:	d842                	sw	a6,48(sp)
20403434:	d646                	sw	a7,44(sp)
20403436:	d472                	sw	t3,40(sp)
20403438:	d276                	sw	t4,36(sp)
2040343a:	d07a                	sw	t5,32(sp)
2040343c:	ce7e                	sw	t6,28(sp)
2040343e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403440:	94dff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403444:	872a                	mv	a4,a0
20403446:	070a                	slli	a4,a4,0x2
20403448:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040344c:	97ba                	add	a5,a5,a4
2040344e:	439c                	lw	a5,0(a5)
20403450:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20403454:	fac42783          	lw	a5,-84(s0)
20403458:	c78d                	beqz	a5,20403482 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040345a:	fac42503          	lw	a0,-84(s0)
2040345e:	8d9ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403462:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20403466:	fa842783          	lw	a5,-88(s0)
2040346a:	2487a783          	lw	a5,584(a5)
2040346e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20403472:	fa842783          	lw	a5,-88(s0)
20403476:	2407a783          	lw	a5,576(a5)
2040347a:	fa442583          	lw	a1,-92(s0)
2040347e:	4549                	li	a0,18
20403480:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403482:	0001                	nop
20403484:	40f6                	lw	ra,92(sp)
20403486:	42e6                	lw	t0,88(sp)
20403488:	4356                	lw	t1,84(sp)
2040348a:	43c6                	lw	t2,80(sp)
2040348c:	4436                	lw	s0,76(sp)
2040348e:	4526                	lw	a0,72(sp)
20403490:	4596                	lw	a1,68(sp)
20403492:	4606                	lw	a2,64(sp)
20403494:	56f2                	lw	a3,60(sp)
20403496:	5762                	lw	a4,56(sp)
20403498:	57d2                	lw	a5,52(sp)
2040349a:	5842                	lw	a6,48(sp)
2040349c:	58b2                	lw	a7,44(sp)
2040349e:	5e22                	lw	t3,40(sp)
204034a0:	5e92                	lw	t4,36(sp)
204034a2:	5f02                	lw	t5,32(sp)
204034a4:	4ff2                	lw	t6,28(sp)
204034a6:	6125                	addi	sp,sp,96
204034a8:	30200073          	mret

204034ac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204034ac:	711d                	addi	sp,sp,-96
204034ae:	ce86                	sw	ra,92(sp)
204034b0:	cc96                	sw	t0,88(sp)
204034b2:	ca9a                	sw	t1,84(sp)
204034b4:	c89e                	sw	t2,80(sp)
204034b6:	c6a2                	sw	s0,76(sp)
204034b8:	c4aa                	sw	a0,72(sp)
204034ba:	c2ae                	sw	a1,68(sp)
204034bc:	c0b2                	sw	a2,64(sp)
204034be:	de36                	sw	a3,60(sp)
204034c0:	dc3a                	sw	a4,56(sp)
204034c2:	da3e                	sw	a5,52(sp)
204034c4:	d842                	sw	a6,48(sp)
204034c6:	d646                	sw	a7,44(sp)
204034c8:	d472                	sw	t3,40(sp)
204034ca:	d276                	sw	t4,36(sp)
204034cc:	d07a                	sw	t5,32(sp)
204034ce:	ce7e                	sw	t6,28(sp)
204034d0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204034d2:	8bbff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204034d6:	872a                	mv	a4,a0
204034d8:	070a                	slli	a4,a4,0x2
204034da:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204034de:	97ba                	add	a5,a5,a4
204034e0:	439c                	lw	a5,0(a5)
204034e2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204034e6:	fac42783          	lw	a5,-84(s0)
204034ea:	c78d                	beqz	a5,20403514 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034ec:	fac42503          	lw	a0,-84(s0)
204034f0:	847ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204034f4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204034f8:	fa842783          	lw	a5,-88(s0)
204034fc:	2607a783          	lw	a5,608(a5)
20403500:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403504:	fa842783          	lw	a5,-88(s0)
20403508:	2587a783          	lw	a5,600(a5)
2040350c:	fa442583          	lw	a1,-92(s0)
20403510:	454d                	li	a0,19
20403512:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403514:	0001                	nop
20403516:	40f6                	lw	ra,92(sp)
20403518:	42e6                	lw	t0,88(sp)
2040351a:	4356                	lw	t1,84(sp)
2040351c:	43c6                	lw	t2,80(sp)
2040351e:	4436                	lw	s0,76(sp)
20403520:	4526                	lw	a0,72(sp)
20403522:	4596                	lw	a1,68(sp)
20403524:	4606                	lw	a2,64(sp)
20403526:	56f2                	lw	a3,60(sp)
20403528:	5762                	lw	a4,56(sp)
2040352a:	57d2                	lw	a5,52(sp)
2040352c:	5842                	lw	a6,48(sp)
2040352e:	58b2                	lw	a7,44(sp)
20403530:	5e22                	lw	t3,40(sp)
20403532:	5e92                	lw	t4,36(sp)
20403534:	5f02                	lw	t5,32(sp)
20403536:	4ff2                	lw	t6,28(sp)
20403538:	6125                	addi	sp,sp,96
2040353a:	30200073          	mret

2040353e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2040353e:	711d                	addi	sp,sp,-96
20403540:	ce86                	sw	ra,92(sp)
20403542:	cc96                	sw	t0,88(sp)
20403544:	ca9a                	sw	t1,84(sp)
20403546:	c89e                	sw	t2,80(sp)
20403548:	c6a2                	sw	s0,76(sp)
2040354a:	c4aa                	sw	a0,72(sp)
2040354c:	c2ae                	sw	a1,68(sp)
2040354e:	c0b2                	sw	a2,64(sp)
20403550:	de36                	sw	a3,60(sp)
20403552:	dc3a                	sw	a4,56(sp)
20403554:	da3e                	sw	a5,52(sp)
20403556:	d842                	sw	a6,48(sp)
20403558:	d646                	sw	a7,44(sp)
2040355a:	d472                	sw	t3,40(sp)
2040355c:	d276                	sw	t4,36(sp)
2040355e:	d07a                	sw	t5,32(sp)
20403560:	ce7e                	sw	t6,28(sp)
20403562:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403564:	829ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403568:	872a                	mv	a4,a0
2040356a:	070a                	slli	a4,a4,0x2
2040356c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403570:	97ba                	add	a5,a5,a4
20403572:	439c                	lw	a5,0(a5)
20403574:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20403578:	fac42783          	lw	a5,-84(s0)
2040357c:	c78d                	beqz	a5,204035a6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040357e:	fac42503          	lw	a0,-84(s0)
20403582:	fb4ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403586:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040358a:	fa842783          	lw	a5,-88(s0)
2040358e:	2787a783          	lw	a5,632(a5)
20403592:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403596:	fa842783          	lw	a5,-88(s0)
2040359a:	2707a783          	lw	a5,624(a5)
2040359e:	fa442583          	lw	a1,-92(s0)
204035a2:	4551                	li	a0,20
204035a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204035a6:	0001                	nop
204035a8:	40f6                	lw	ra,92(sp)
204035aa:	42e6                	lw	t0,88(sp)
204035ac:	4356                	lw	t1,84(sp)
204035ae:	43c6                	lw	t2,80(sp)
204035b0:	4436                	lw	s0,76(sp)
204035b2:	4526                	lw	a0,72(sp)
204035b4:	4596                	lw	a1,68(sp)
204035b6:	4606                	lw	a2,64(sp)
204035b8:	56f2                	lw	a3,60(sp)
204035ba:	5762                	lw	a4,56(sp)
204035bc:	57d2                	lw	a5,52(sp)
204035be:	5842                	lw	a6,48(sp)
204035c0:	58b2                	lw	a7,44(sp)
204035c2:	5e22                	lw	t3,40(sp)
204035c4:	5e92                	lw	t4,36(sp)
204035c6:	5f02                	lw	t5,32(sp)
204035c8:	4ff2                	lw	t6,28(sp)
204035ca:	6125                	addi	sp,sp,96
204035cc:	30200073          	mret

204035d0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204035d0:	711d                	addi	sp,sp,-96
204035d2:	ce86                	sw	ra,92(sp)
204035d4:	cc96                	sw	t0,88(sp)
204035d6:	ca9a                	sw	t1,84(sp)
204035d8:	c89e                	sw	t2,80(sp)
204035da:	c6a2                	sw	s0,76(sp)
204035dc:	c4aa                	sw	a0,72(sp)
204035de:	c2ae                	sw	a1,68(sp)
204035e0:	c0b2                	sw	a2,64(sp)
204035e2:	de36                	sw	a3,60(sp)
204035e4:	dc3a                	sw	a4,56(sp)
204035e6:	da3e                	sw	a5,52(sp)
204035e8:	d842                	sw	a6,48(sp)
204035ea:	d646                	sw	a7,44(sp)
204035ec:	d472                	sw	t3,40(sp)
204035ee:	d276                	sw	t4,36(sp)
204035f0:	d07a                	sw	t5,32(sp)
204035f2:	ce7e                	sw	t6,28(sp)
204035f4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204035f6:	f96ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204035fa:	872a                	mv	a4,a0
204035fc:	070a                	slli	a4,a4,0x2
204035fe:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403602:	97ba                	add	a5,a5,a4
20403604:	439c                	lw	a5,0(a5)
20403606:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040360a:	fac42783          	lw	a5,-84(s0)
2040360e:	c78d                	beqz	a5,20403638 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403610:	fac42503          	lw	a0,-84(s0)
20403614:	f22ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403618:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040361c:	fa842783          	lw	a5,-88(s0)
20403620:	2907a783          	lw	a5,656(a5)
20403624:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20403628:	fa842783          	lw	a5,-88(s0)
2040362c:	2887a783          	lw	a5,648(a5)
20403630:	fa442583          	lw	a1,-92(s0)
20403634:	4555                	li	a0,21
20403636:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20403638:	0001                	nop
2040363a:	40f6                	lw	ra,92(sp)
2040363c:	42e6                	lw	t0,88(sp)
2040363e:	4356                	lw	t1,84(sp)
20403640:	43c6                	lw	t2,80(sp)
20403642:	4436                	lw	s0,76(sp)
20403644:	4526                	lw	a0,72(sp)
20403646:	4596                	lw	a1,68(sp)
20403648:	4606                	lw	a2,64(sp)
2040364a:	56f2                	lw	a3,60(sp)
2040364c:	5762                	lw	a4,56(sp)
2040364e:	57d2                	lw	a5,52(sp)
20403650:	5842                	lw	a6,48(sp)
20403652:	58b2                	lw	a7,44(sp)
20403654:	5e22                	lw	t3,40(sp)
20403656:	5e92                	lw	t4,36(sp)
20403658:	5f02                	lw	t5,32(sp)
2040365a:	4ff2                	lw	t6,28(sp)
2040365c:	6125                	addi	sp,sp,96
2040365e:	30200073          	mret

20403662 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20403662:	711d                	addi	sp,sp,-96
20403664:	ce86                	sw	ra,92(sp)
20403666:	cc96                	sw	t0,88(sp)
20403668:	ca9a                	sw	t1,84(sp)
2040366a:	c89e                	sw	t2,80(sp)
2040366c:	c6a2                	sw	s0,76(sp)
2040366e:	c4aa                	sw	a0,72(sp)
20403670:	c2ae                	sw	a1,68(sp)
20403672:	c0b2                	sw	a2,64(sp)
20403674:	de36                	sw	a3,60(sp)
20403676:	dc3a                	sw	a4,56(sp)
20403678:	da3e                	sw	a5,52(sp)
2040367a:	d842                	sw	a6,48(sp)
2040367c:	d646                	sw	a7,44(sp)
2040367e:	d472                	sw	t3,40(sp)
20403680:	d276                	sw	t4,36(sp)
20403682:	d07a                	sw	t5,32(sp)
20403684:	ce7e                	sw	t6,28(sp)
20403686:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403688:	f04ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
2040368c:	872a                	mv	a4,a0
2040368e:	070a                	slli	a4,a4,0x2
20403690:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403694:	97ba                	add	a5,a5,a4
20403696:	439c                	lw	a5,0(a5)
20403698:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040369c:	fac42783          	lw	a5,-84(s0)
204036a0:	c78d                	beqz	a5,204036ca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036a2:	fac42503          	lw	a0,-84(s0)
204036a6:	e90ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204036aa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204036ae:	fa842783          	lw	a5,-88(s0)
204036b2:	2a87a783          	lw	a5,680(a5)
204036b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204036ba:	fa842783          	lw	a5,-88(s0)
204036be:	2a07a783          	lw	a5,672(a5)
204036c2:	fa442583          	lw	a1,-92(s0)
204036c6:	4559                	li	a0,22
204036c8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204036ca:	0001                	nop
204036cc:	40f6                	lw	ra,92(sp)
204036ce:	42e6                	lw	t0,88(sp)
204036d0:	4356                	lw	t1,84(sp)
204036d2:	43c6                	lw	t2,80(sp)
204036d4:	4436                	lw	s0,76(sp)
204036d6:	4526                	lw	a0,72(sp)
204036d8:	4596                	lw	a1,68(sp)
204036da:	4606                	lw	a2,64(sp)
204036dc:	56f2                	lw	a3,60(sp)
204036de:	5762                	lw	a4,56(sp)
204036e0:	57d2                	lw	a5,52(sp)
204036e2:	5842                	lw	a6,48(sp)
204036e4:	58b2                	lw	a7,44(sp)
204036e6:	5e22                	lw	t3,40(sp)
204036e8:	5e92                	lw	t4,36(sp)
204036ea:	5f02                	lw	t5,32(sp)
204036ec:	4ff2                	lw	t6,28(sp)
204036ee:	6125                	addi	sp,sp,96
204036f0:	30200073          	mret

204036f4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
204036f4:	711d                	addi	sp,sp,-96
204036f6:	ce86                	sw	ra,92(sp)
204036f8:	cc96                	sw	t0,88(sp)
204036fa:	ca9a                	sw	t1,84(sp)
204036fc:	c89e                	sw	t2,80(sp)
204036fe:	c6a2                	sw	s0,76(sp)
20403700:	c4aa                	sw	a0,72(sp)
20403702:	c2ae                	sw	a1,68(sp)
20403704:	c0b2                	sw	a2,64(sp)
20403706:	de36                	sw	a3,60(sp)
20403708:	dc3a                	sw	a4,56(sp)
2040370a:	da3e                	sw	a5,52(sp)
2040370c:	d842                	sw	a6,48(sp)
2040370e:	d646                	sw	a7,44(sp)
20403710:	d472                	sw	t3,40(sp)
20403712:	d276                	sw	t4,36(sp)
20403714:	d07a                	sw	t5,32(sp)
20403716:	ce7e                	sw	t6,28(sp)
20403718:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040371a:	e72ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
2040371e:	872a                	mv	a4,a0
20403720:	070a                	slli	a4,a4,0x2
20403722:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403726:	97ba                	add	a5,a5,a4
20403728:	439c                	lw	a5,0(a5)
2040372a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040372e:	fac42783          	lw	a5,-84(s0)
20403732:	c78d                	beqz	a5,2040375c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403734:	fac42503          	lw	a0,-84(s0)
20403738:	dfeff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
2040373c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20403740:	fa842783          	lw	a5,-88(s0)
20403744:	2c07a783          	lw	a5,704(a5)
20403748:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040374c:	fa842783          	lw	a5,-88(s0)
20403750:	2b87a783          	lw	a5,696(a5)
20403754:	fa442583          	lw	a1,-92(s0)
20403758:	455d                	li	a0,23
2040375a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040375c:	0001                	nop
2040375e:	40f6                	lw	ra,92(sp)
20403760:	42e6                	lw	t0,88(sp)
20403762:	4356                	lw	t1,84(sp)
20403764:	43c6                	lw	t2,80(sp)
20403766:	4436                	lw	s0,76(sp)
20403768:	4526                	lw	a0,72(sp)
2040376a:	4596                	lw	a1,68(sp)
2040376c:	4606                	lw	a2,64(sp)
2040376e:	56f2                	lw	a3,60(sp)
20403770:	5762                	lw	a4,56(sp)
20403772:	57d2                	lw	a5,52(sp)
20403774:	5842                	lw	a6,48(sp)
20403776:	58b2                	lw	a7,44(sp)
20403778:	5e22                	lw	t3,40(sp)
2040377a:	5e92                	lw	t4,36(sp)
2040377c:	5f02                	lw	t5,32(sp)
2040377e:	4ff2                	lw	t6,28(sp)
20403780:	6125                	addi	sp,sp,96
20403782:	30200073          	mret

20403786 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403786:	711d                	addi	sp,sp,-96
20403788:	ce86                	sw	ra,92(sp)
2040378a:	cc96                	sw	t0,88(sp)
2040378c:	ca9a                	sw	t1,84(sp)
2040378e:	c89e                	sw	t2,80(sp)
20403790:	c6a2                	sw	s0,76(sp)
20403792:	c4aa                	sw	a0,72(sp)
20403794:	c2ae                	sw	a1,68(sp)
20403796:	c0b2                	sw	a2,64(sp)
20403798:	de36                	sw	a3,60(sp)
2040379a:	dc3a                	sw	a4,56(sp)
2040379c:	da3e                	sw	a5,52(sp)
2040379e:	d842                	sw	a6,48(sp)
204037a0:	d646                	sw	a7,44(sp)
204037a2:	d472                	sw	t3,40(sp)
204037a4:	d276                	sw	t4,36(sp)
204037a6:	d07a                	sw	t5,32(sp)
204037a8:	ce7e                	sw	t6,28(sp)
204037aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204037ac:	de0ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204037b0:	872a                	mv	a4,a0
204037b2:	070a                	slli	a4,a4,0x2
204037b4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204037b8:	97ba                	add	a5,a5,a4
204037ba:	439c                	lw	a5,0(a5)
204037bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204037c0:	fac42783          	lw	a5,-84(s0)
204037c4:	c78d                	beqz	a5,204037ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204037c6:	fac42503          	lw	a0,-84(s0)
204037ca:	d6cff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204037ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204037d2:	fa842783          	lw	a5,-88(s0)
204037d6:	2d87a783          	lw	a5,728(a5)
204037da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204037de:	fa842783          	lw	a5,-88(s0)
204037e2:	2d07a783          	lw	a5,720(a5)
204037e6:	fa442583          	lw	a1,-92(s0)
204037ea:	4561                	li	a0,24
204037ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204037ee:	0001                	nop
204037f0:	40f6                	lw	ra,92(sp)
204037f2:	42e6                	lw	t0,88(sp)
204037f4:	4356                	lw	t1,84(sp)
204037f6:	43c6                	lw	t2,80(sp)
204037f8:	4436                	lw	s0,76(sp)
204037fa:	4526                	lw	a0,72(sp)
204037fc:	4596                	lw	a1,68(sp)
204037fe:	4606                	lw	a2,64(sp)
20403800:	56f2                	lw	a3,60(sp)
20403802:	5762                	lw	a4,56(sp)
20403804:	57d2                	lw	a5,52(sp)
20403806:	5842                	lw	a6,48(sp)
20403808:	58b2                	lw	a7,44(sp)
2040380a:	5e22                	lw	t3,40(sp)
2040380c:	5e92                	lw	t4,36(sp)
2040380e:	5f02                	lw	t5,32(sp)
20403810:	4ff2                	lw	t6,28(sp)
20403812:	6125                	addi	sp,sp,96
20403814:	30200073          	mret

20403818 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403818:	711d                	addi	sp,sp,-96
2040381a:	ce86                	sw	ra,92(sp)
2040381c:	cc96                	sw	t0,88(sp)
2040381e:	ca9a                	sw	t1,84(sp)
20403820:	c89e                	sw	t2,80(sp)
20403822:	c6a2                	sw	s0,76(sp)
20403824:	c4aa                	sw	a0,72(sp)
20403826:	c2ae                	sw	a1,68(sp)
20403828:	c0b2                	sw	a2,64(sp)
2040382a:	de36                	sw	a3,60(sp)
2040382c:	dc3a                	sw	a4,56(sp)
2040382e:	da3e                	sw	a5,52(sp)
20403830:	d842                	sw	a6,48(sp)
20403832:	d646                	sw	a7,44(sp)
20403834:	d472                	sw	t3,40(sp)
20403836:	d276                	sw	t4,36(sp)
20403838:	d07a                	sw	t5,32(sp)
2040383a:	ce7e                	sw	t6,28(sp)
2040383c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040383e:	d4eff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403842:	872a                	mv	a4,a0
20403844:	070a                	slli	a4,a4,0x2
20403846:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040384a:	97ba                	add	a5,a5,a4
2040384c:	439c                	lw	a5,0(a5)
2040384e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403852:	fac42783          	lw	a5,-84(s0)
20403856:	c78d                	beqz	a5,20403880 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403858:	fac42503          	lw	a0,-84(s0)
2040385c:	cdaff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403860:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403864:	fa842783          	lw	a5,-88(s0)
20403868:	2f07a783          	lw	a5,752(a5)
2040386c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403870:	fa842783          	lw	a5,-88(s0)
20403874:	2e87a783          	lw	a5,744(a5)
20403878:	fa442583          	lw	a1,-92(s0)
2040387c:	4565                	li	a0,25
2040387e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403880:	0001                	nop
20403882:	40f6                	lw	ra,92(sp)
20403884:	42e6                	lw	t0,88(sp)
20403886:	4356                	lw	t1,84(sp)
20403888:	43c6                	lw	t2,80(sp)
2040388a:	4436                	lw	s0,76(sp)
2040388c:	4526                	lw	a0,72(sp)
2040388e:	4596                	lw	a1,68(sp)
20403890:	4606                	lw	a2,64(sp)
20403892:	56f2                	lw	a3,60(sp)
20403894:	5762                	lw	a4,56(sp)
20403896:	57d2                	lw	a5,52(sp)
20403898:	5842                	lw	a6,48(sp)
2040389a:	58b2                	lw	a7,44(sp)
2040389c:	5e22                	lw	t3,40(sp)
2040389e:	5e92                	lw	t4,36(sp)
204038a0:	5f02                	lw	t5,32(sp)
204038a2:	4ff2                	lw	t6,28(sp)
204038a4:	6125                	addi	sp,sp,96
204038a6:	30200073          	mret

204038aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204038aa:	711d                	addi	sp,sp,-96
204038ac:	ce86                	sw	ra,92(sp)
204038ae:	cc96                	sw	t0,88(sp)
204038b0:	ca9a                	sw	t1,84(sp)
204038b2:	c89e                	sw	t2,80(sp)
204038b4:	c6a2                	sw	s0,76(sp)
204038b6:	c4aa                	sw	a0,72(sp)
204038b8:	c2ae                	sw	a1,68(sp)
204038ba:	c0b2                	sw	a2,64(sp)
204038bc:	de36                	sw	a3,60(sp)
204038be:	dc3a                	sw	a4,56(sp)
204038c0:	da3e                	sw	a5,52(sp)
204038c2:	d842                	sw	a6,48(sp)
204038c4:	d646                	sw	a7,44(sp)
204038c6:	d472                	sw	t3,40(sp)
204038c8:	d276                	sw	t4,36(sp)
204038ca:	d07a                	sw	t5,32(sp)
204038cc:	ce7e                	sw	t6,28(sp)
204038ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204038d0:	cbcff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204038d4:	872a                	mv	a4,a0
204038d6:	070a                	slli	a4,a4,0x2
204038d8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204038dc:	97ba                	add	a5,a5,a4
204038de:	439c                	lw	a5,0(a5)
204038e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204038e4:	fac42783          	lw	a5,-84(s0)
204038e8:	c78d                	beqz	a5,20403912 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204038ea:	fac42503          	lw	a0,-84(s0)
204038ee:	c48ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204038f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204038f6:	fa842783          	lw	a5,-88(s0)
204038fa:	3087a783          	lw	a5,776(a5)
204038fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403902:	fa842783          	lw	a5,-88(s0)
20403906:	3007a783          	lw	a5,768(a5)
2040390a:	fa442583          	lw	a1,-92(s0)
2040390e:	4569                	li	a0,26
20403910:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403912:	0001                	nop
20403914:	40f6                	lw	ra,92(sp)
20403916:	42e6                	lw	t0,88(sp)
20403918:	4356                	lw	t1,84(sp)
2040391a:	43c6                	lw	t2,80(sp)
2040391c:	4436                	lw	s0,76(sp)
2040391e:	4526                	lw	a0,72(sp)
20403920:	4596                	lw	a1,68(sp)
20403922:	4606                	lw	a2,64(sp)
20403924:	56f2                	lw	a3,60(sp)
20403926:	5762                	lw	a4,56(sp)
20403928:	57d2                	lw	a5,52(sp)
2040392a:	5842                	lw	a6,48(sp)
2040392c:	58b2                	lw	a7,44(sp)
2040392e:	5e22                	lw	t3,40(sp)
20403930:	5e92                	lw	t4,36(sp)
20403932:	5f02                	lw	t5,32(sp)
20403934:	4ff2                	lw	t6,28(sp)
20403936:	6125                	addi	sp,sp,96
20403938:	30200073          	mret

2040393c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040393c:	711d                	addi	sp,sp,-96
2040393e:	ce86                	sw	ra,92(sp)
20403940:	cc96                	sw	t0,88(sp)
20403942:	ca9a                	sw	t1,84(sp)
20403944:	c89e                	sw	t2,80(sp)
20403946:	c6a2                	sw	s0,76(sp)
20403948:	c4aa                	sw	a0,72(sp)
2040394a:	c2ae                	sw	a1,68(sp)
2040394c:	c0b2                	sw	a2,64(sp)
2040394e:	de36                	sw	a3,60(sp)
20403950:	dc3a                	sw	a4,56(sp)
20403952:	da3e                	sw	a5,52(sp)
20403954:	d842                	sw	a6,48(sp)
20403956:	d646                	sw	a7,44(sp)
20403958:	d472                	sw	t3,40(sp)
2040395a:	d276                	sw	t4,36(sp)
2040395c:	d07a                	sw	t5,32(sp)
2040395e:	ce7e                	sw	t6,28(sp)
20403960:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403962:	c2aff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403966:	872a                	mv	a4,a0
20403968:	070a                	slli	a4,a4,0x2
2040396a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040396e:	97ba                	add	a5,a5,a4
20403970:	439c                	lw	a5,0(a5)
20403972:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403976:	fac42783          	lw	a5,-84(s0)
2040397a:	c78d                	beqz	a5,204039a4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040397c:	fac42503          	lw	a0,-84(s0)
20403980:	bb6ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403984:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403988:	fa842783          	lw	a5,-88(s0)
2040398c:	3207a783          	lw	a5,800(a5)
20403990:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403994:	fa842783          	lw	a5,-88(s0)
20403998:	3187a783          	lw	a5,792(a5)
2040399c:	fa442583          	lw	a1,-92(s0)
204039a0:	456d                	li	a0,27
204039a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204039a4:	0001                	nop
204039a6:	40f6                	lw	ra,92(sp)
204039a8:	42e6                	lw	t0,88(sp)
204039aa:	4356                	lw	t1,84(sp)
204039ac:	43c6                	lw	t2,80(sp)
204039ae:	4436                	lw	s0,76(sp)
204039b0:	4526                	lw	a0,72(sp)
204039b2:	4596                	lw	a1,68(sp)
204039b4:	4606                	lw	a2,64(sp)
204039b6:	56f2                	lw	a3,60(sp)
204039b8:	5762                	lw	a4,56(sp)
204039ba:	57d2                	lw	a5,52(sp)
204039bc:	5842                	lw	a6,48(sp)
204039be:	58b2                	lw	a7,44(sp)
204039c0:	5e22                	lw	t3,40(sp)
204039c2:	5e92                	lw	t4,36(sp)
204039c4:	5f02                	lw	t5,32(sp)
204039c6:	4ff2                	lw	t6,28(sp)
204039c8:	6125                	addi	sp,sp,96
204039ca:	30200073          	mret

204039ce <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204039ce:	711d                	addi	sp,sp,-96
204039d0:	ce86                	sw	ra,92(sp)
204039d2:	cc96                	sw	t0,88(sp)
204039d4:	ca9a                	sw	t1,84(sp)
204039d6:	c89e                	sw	t2,80(sp)
204039d8:	c6a2                	sw	s0,76(sp)
204039da:	c4aa                	sw	a0,72(sp)
204039dc:	c2ae                	sw	a1,68(sp)
204039de:	c0b2                	sw	a2,64(sp)
204039e0:	de36                	sw	a3,60(sp)
204039e2:	dc3a                	sw	a4,56(sp)
204039e4:	da3e                	sw	a5,52(sp)
204039e6:	d842                	sw	a6,48(sp)
204039e8:	d646                	sw	a7,44(sp)
204039ea:	d472                	sw	t3,40(sp)
204039ec:	d276                	sw	t4,36(sp)
204039ee:	d07a                	sw	t5,32(sp)
204039f0:	ce7e                	sw	t6,28(sp)
204039f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204039f4:	b98ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
204039f8:	872a                	mv	a4,a0
204039fa:	070a                	slli	a4,a4,0x2
204039fc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403a00:	97ba                	add	a5,a5,a4
20403a02:	439c                	lw	a5,0(a5)
20403a04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403a08:	fac42783          	lw	a5,-84(s0)
20403a0c:	c78d                	beqz	a5,20403a36 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403a0e:	fac42503          	lw	a0,-84(s0)
20403a12:	b24ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403a16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403a1a:	fa842783          	lw	a5,-88(s0)
20403a1e:	3387a783          	lw	a5,824(a5)
20403a22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403a26:	fa842783          	lw	a5,-88(s0)
20403a2a:	3307a783          	lw	a5,816(a5)
20403a2e:	fa442583          	lw	a1,-92(s0)
20403a32:	4571                	li	a0,28
20403a34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403a36:	0001                	nop
20403a38:	40f6                	lw	ra,92(sp)
20403a3a:	42e6                	lw	t0,88(sp)
20403a3c:	4356                	lw	t1,84(sp)
20403a3e:	43c6                	lw	t2,80(sp)
20403a40:	4436                	lw	s0,76(sp)
20403a42:	4526                	lw	a0,72(sp)
20403a44:	4596                	lw	a1,68(sp)
20403a46:	4606                	lw	a2,64(sp)
20403a48:	56f2                	lw	a3,60(sp)
20403a4a:	5762                	lw	a4,56(sp)
20403a4c:	57d2                	lw	a5,52(sp)
20403a4e:	5842                	lw	a6,48(sp)
20403a50:	58b2                	lw	a7,44(sp)
20403a52:	5e22                	lw	t3,40(sp)
20403a54:	5e92                	lw	t4,36(sp)
20403a56:	5f02                	lw	t5,32(sp)
20403a58:	4ff2                	lw	t6,28(sp)
20403a5a:	6125                	addi	sp,sp,96
20403a5c:	30200073          	mret

20403a60 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403a60:	711d                	addi	sp,sp,-96
20403a62:	ce86                	sw	ra,92(sp)
20403a64:	cc96                	sw	t0,88(sp)
20403a66:	ca9a                	sw	t1,84(sp)
20403a68:	c89e                	sw	t2,80(sp)
20403a6a:	c6a2                	sw	s0,76(sp)
20403a6c:	c4aa                	sw	a0,72(sp)
20403a6e:	c2ae                	sw	a1,68(sp)
20403a70:	c0b2                	sw	a2,64(sp)
20403a72:	de36                	sw	a3,60(sp)
20403a74:	dc3a                	sw	a4,56(sp)
20403a76:	da3e                	sw	a5,52(sp)
20403a78:	d842                	sw	a6,48(sp)
20403a7a:	d646                	sw	a7,44(sp)
20403a7c:	d472                	sw	t3,40(sp)
20403a7e:	d276                	sw	t4,36(sp)
20403a80:	d07a                	sw	t5,32(sp)
20403a82:	ce7e                	sw	t6,28(sp)
20403a84:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403a86:	b06ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403a8a:	872a                	mv	a4,a0
20403a8c:	070a                	slli	a4,a4,0x2
20403a8e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403a92:	97ba                	add	a5,a5,a4
20403a94:	439c                	lw	a5,0(a5)
20403a96:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403a9a:	fac42783          	lw	a5,-84(s0)
20403a9e:	c78d                	beqz	a5,20403ac8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403aa0:	fac42503          	lw	a0,-84(s0)
20403aa4:	a92ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403aa8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
20403aac:	fa842783          	lw	a5,-88(s0)
20403ab0:	3507a783          	lw	a5,848(a5)
20403ab4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403ab8:	fa842783          	lw	a5,-88(s0)
20403abc:	3487a783          	lw	a5,840(a5)
20403ac0:	fa442583          	lw	a1,-92(s0)
20403ac4:	4575                	li	a0,29
20403ac6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403ac8:	0001                	nop
20403aca:	40f6                	lw	ra,92(sp)
20403acc:	42e6                	lw	t0,88(sp)
20403ace:	4356                	lw	t1,84(sp)
20403ad0:	43c6                	lw	t2,80(sp)
20403ad2:	4436                	lw	s0,76(sp)
20403ad4:	4526                	lw	a0,72(sp)
20403ad6:	4596                	lw	a1,68(sp)
20403ad8:	4606                	lw	a2,64(sp)
20403ada:	56f2                	lw	a3,60(sp)
20403adc:	5762                	lw	a4,56(sp)
20403ade:	57d2                	lw	a5,52(sp)
20403ae0:	5842                	lw	a6,48(sp)
20403ae2:	58b2                	lw	a7,44(sp)
20403ae4:	5e22                	lw	t3,40(sp)
20403ae6:	5e92                	lw	t4,36(sp)
20403ae8:	5f02                	lw	t5,32(sp)
20403aea:	4ff2                	lw	t6,28(sp)
20403aec:	6125                	addi	sp,sp,96
20403aee:	30200073          	mret

20403af2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403af2:	711d                	addi	sp,sp,-96
20403af4:	ce86                	sw	ra,92(sp)
20403af6:	cc96                	sw	t0,88(sp)
20403af8:	ca9a                	sw	t1,84(sp)
20403afa:	c89e                	sw	t2,80(sp)
20403afc:	c6a2                	sw	s0,76(sp)
20403afe:	c4aa                	sw	a0,72(sp)
20403b00:	c2ae                	sw	a1,68(sp)
20403b02:	c0b2                	sw	a2,64(sp)
20403b04:	de36                	sw	a3,60(sp)
20403b06:	dc3a                	sw	a4,56(sp)
20403b08:	da3e                	sw	a5,52(sp)
20403b0a:	d842                	sw	a6,48(sp)
20403b0c:	d646                	sw	a7,44(sp)
20403b0e:	d472                	sw	t3,40(sp)
20403b10:	d276                	sw	t4,36(sp)
20403b12:	d07a                	sw	t5,32(sp)
20403b14:	ce7e                	sw	t6,28(sp)
20403b16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403b18:	a74ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403b1c:	872a                	mv	a4,a0
20403b1e:	070a                	slli	a4,a4,0x2
20403b20:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403b24:	97ba                	add	a5,a5,a4
20403b26:	439c                	lw	a5,0(a5)
20403b28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
20403b2c:	fac42783          	lw	a5,-84(s0)
20403b30:	c78d                	beqz	a5,20403b5a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403b32:	fac42503          	lw	a0,-84(s0)
20403b36:	a00ff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403b3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
20403b3e:	fa842783          	lw	a5,-88(s0)
20403b42:	3687a783          	lw	a5,872(a5)
20403b46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403b4a:	fa842783          	lw	a5,-88(s0)
20403b4e:	3607a783          	lw	a5,864(a5)
20403b52:	fa442583          	lw	a1,-92(s0)
20403b56:	4579                	li	a0,30
20403b58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403b5a:	0001                	nop
20403b5c:	40f6                	lw	ra,92(sp)
20403b5e:	42e6                	lw	t0,88(sp)
20403b60:	4356                	lw	t1,84(sp)
20403b62:	43c6                	lw	t2,80(sp)
20403b64:	4436                	lw	s0,76(sp)
20403b66:	4526                	lw	a0,72(sp)
20403b68:	4596                	lw	a1,68(sp)
20403b6a:	4606                	lw	a2,64(sp)
20403b6c:	56f2                	lw	a3,60(sp)
20403b6e:	5762                	lw	a4,56(sp)
20403b70:	57d2                	lw	a5,52(sp)
20403b72:	5842                	lw	a6,48(sp)
20403b74:	58b2                	lw	a7,44(sp)
20403b76:	5e22                	lw	t3,40(sp)
20403b78:	5e92                	lw	t4,36(sp)
20403b7a:	5f02                	lw	t5,32(sp)
20403b7c:	4ff2                	lw	t6,28(sp)
20403b7e:	6125                	addi	sp,sp,96
20403b80:	30200073          	mret

20403b84 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403b84:	711d                	addi	sp,sp,-96
20403b86:	ce86                	sw	ra,92(sp)
20403b88:	cc96                	sw	t0,88(sp)
20403b8a:	ca9a                	sw	t1,84(sp)
20403b8c:	c89e                	sw	t2,80(sp)
20403b8e:	c6a2                	sw	s0,76(sp)
20403b90:	c4aa                	sw	a0,72(sp)
20403b92:	c2ae                	sw	a1,68(sp)
20403b94:	c0b2                	sw	a2,64(sp)
20403b96:	de36                	sw	a3,60(sp)
20403b98:	dc3a                	sw	a4,56(sp)
20403b9a:	da3e                	sw	a5,52(sp)
20403b9c:	d842                	sw	a6,48(sp)
20403b9e:	d646                	sw	a7,44(sp)
20403ba0:	d472                	sw	t3,40(sp)
20403ba2:	d276                	sw	t4,36(sp)
20403ba4:	d07a                	sw	t5,32(sp)
20403ba6:	ce7e                	sw	t6,28(sp)
20403ba8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403baa:	9e2ff0ef          	jal	ra,20402d8c <__metal_myhart_id>
20403bae:	872a                	mv	a4,a0
20403bb0:	070a                	slli	a4,a4,0x2
20403bb2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403bb6:	97ba                	add	a5,a5,a4
20403bb8:	439c                	lw	a5,0(a5)
20403bba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
20403bbe:	fac42783          	lw	a5,-84(s0)
20403bc2:	c78d                	beqz	a5,20403bec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403bc4:	fac42503          	lw	a0,-84(s0)
20403bc8:	96eff0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20403bcc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403bd0:	fa842783          	lw	a5,-88(s0)
20403bd4:	3807a783          	lw	a5,896(a5)
20403bd8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
20403bdc:	fa842783          	lw	a5,-88(s0)
20403be0:	3787a783          	lw	a5,888(a5)
20403be4:	fa442583          	lw	a1,-92(s0)
20403be8:	457d                	li	a0,31
20403bea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
20403bec:	0001                	nop
20403bee:	40f6                	lw	ra,92(sp)
20403bf0:	42e6                	lw	t0,88(sp)
20403bf2:	4356                	lw	t1,84(sp)
20403bf4:	43c6                	lw	t2,80(sp)
20403bf6:	4436                	lw	s0,76(sp)
20403bf8:	4526                	lw	a0,72(sp)
20403bfa:	4596                	lw	a1,68(sp)
20403bfc:	4606                	lw	a2,64(sp)
20403bfe:	56f2                	lw	a3,60(sp)
20403c00:	5762                	lw	a4,56(sp)
20403c02:	57d2                	lw	a5,52(sp)
20403c04:	5842                	lw	a6,48(sp)
20403c06:	58b2                	lw	a7,44(sp)
20403c08:	5e22                	lw	t3,40(sp)
20403c0a:	5e92                	lw	t4,36(sp)
20403c0c:	5f02                	lw	t5,32(sp)
20403c0e:	4ff2                	lw	t6,28(sp)
20403c10:	6125                	addi	sp,sp,96
20403c12:	30200073          	mret

20403c16 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403c16:	1101                	addi	sp,sp,-32
20403c18:	ce22                	sw	s0,28(sp)
20403c1a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403c1c:	305027f3          	csrr	a5,mtvec
20403c20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403c24:	fec42783          	lw	a5,-20(s0)
20403c28:	03f7f793          	andi	a5,a5,63
20403c2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403c30:	fec42703          	lw	a4,-20(s0)
20403c34:	4789                	li	a5,2
20403c36:	00f70d63          	beq	a4,a5,20403c50 <__metal_controller_interrupt_vector_mode+0x3a>
20403c3a:	fec42703          	lw	a4,-20(s0)
20403c3e:	478d                	li	a5,3
20403c40:	00f70a63          	beq	a4,a5,20403c54 <__metal_controller_interrupt_vector_mode+0x3e>
20403c44:	fec42703          	lw	a4,-20(s0)
20403c48:	4785                	li	a5,1
20403c4a:	00f70763          	beq	a4,a5,20403c58 <__metal_controller_interrupt_vector_mode+0x42>
20403c4e:	a039                	j	20403c5c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403c50:	478d                	li	a5,3
20403c52:	a031                	j	20403c5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403c54:	4791                	li	a5,4
20403c56:	a021                	j	20403c5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403c58:	4785                	li	a5,1
20403c5a:	a011                	j	20403c5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403c5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20403c5e:	853e                	mv	a0,a5
20403c60:	4472                	lw	s0,28(sp)
20403c62:	6105                	addi	sp,sp,32
20403c64:	8082                	ret

20403c66 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403c66:	7179                	addi	sp,sp,-48
20403c68:	d622                	sw	s0,44(sp)
20403c6a:	1800                	addi	s0,sp,48
20403c6c:	fca42e23          	sw	a0,-36(s0)
20403c70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403c74:	305027f3          	csrr	a5,mtvec
20403c78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403c7c:	fec42783          	lw	a5,-20(s0)
20403c80:	fc07f793          	andi	a5,a5,-64
20403c84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403c88:	fd842783          	lw	a5,-40(s0)
20403c8c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403c90:	fdc42703          	lw	a4,-36(s0)
20403c94:	4791                	li	a5,4
20403c96:	06e7e063          	bltu	a5,a4,20403cf6 <__metal_controller_interrupt_vector+0x90>
20403c9a:	fdc42783          	lw	a5,-36(s0)
20403c9e:	00279713          	slli	a4,a5,0x2
20403ca2:	204067b7          	lui	a5,0x20406
20403ca6:	d5c78793          	addi	a5,a5,-676 # 20405d5c <__metal_driver_vtable_riscv_clint0+0x4c>
20403caa:	97ba                	add	a5,a5,a4
20403cac:	439c                	lw	a5,0(a5)
20403cae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403cb0:	fe842783          	lw	a5,-24(s0)
20403cb4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403cb8:	fec42783          	lw	a5,-20(s0)
20403cbc:	0027e793          	ori	a5,a5,2
20403cc0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403cc4:	a80d                	j	20403cf6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403cc6:	fe842783          	lw	a5,-24(s0)
20403cca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20403cce:	fec42783          	lw	a5,-20(s0)
20403cd2:	0037e793          	ori	a5,a5,3
20403cd6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403cda:	a831                	j	20403cf6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20403cdc:	fe842783          	lw	a5,-24(s0)
20403ce0:	0017e793          	ori	a5,a5,1
20403ce4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403ce8:	a039                	j	20403cf6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403cea:	fe842783          	lw	a5,-24(s0)
20403cee:	9bf1                	andi	a5,a5,-4
20403cf0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403cf4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403cf6:	0001                	nop
20403cf8:	5432                	lw	s0,44(sp)
20403cfa:	6145                	addi	sp,sp,48
20403cfc:	8082                	ret

20403cfe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20403cfe:	1101                	addi	sp,sp,-32
20403d00:	ce22                	sw	s0,28(sp)
20403d02:	1000                	addi	s0,sp,32
20403d04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403d08:	fec42783          	lw	a5,-20(s0)
20403d0c:	17f5                	addi	a5,a5,-3
20403d0e:	4771                	li	a4,28
20403d10:	00f76d63          	bltu	a4,a5,20403d2a <__metal_valid_interrupt_id+0x2c>
20403d14:	00279713          	slli	a4,a5,0x2
20403d18:	204067b7          	lui	a5,0x20406
20403d1c:	d7078793          	addi	a5,a5,-656 # 20405d70 <__metal_driver_vtable_riscv_clint0+0x60>
20403d20:	97ba                	add	a5,a5,a4
20403d22:	439c                	lw	a5,0(a5)
20403d24:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403d26:	4785                	li	a5,1
20403d28:	a019                	j	20403d2e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403d2a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20403d2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20403d2e:	853e                	mv	a0,a5
20403d30:	4472                	lw	s0,28(sp)
20403d32:	6105                	addi	sp,sp,32
20403d34:	8082                	ret

20403d36 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403d36:	7179                	addi	sp,sp,-48
20403d38:	d606                	sw	ra,44(sp)
20403d3a:	d422                	sw	s0,40(sp)
20403d3c:	1800                	addi	s0,sp,48
20403d3e:	fca42e23          	sw	a0,-36(s0)
20403d42:	fcb42c23          	sw	a1,-40(s0)
20403d46:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403d4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20403d4e:	fdc42783          	lw	a5,-36(s0)
20403d52:	e399                	bnez	a5,20403d58 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403d54:	57fd                	li	a5,-1
20403d56:	a849                	j	20403de8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403d58:	fd842703          	lw	a4,-40(s0)
20403d5c:	47fd                	li	a5,31
20403d5e:	08e7e063          	bltu	a5,a4,20403dde <__metal_local_interrupt_enable+0xa8>
20403d62:	fd842783          	lw	a5,-40(s0)
20403d66:	00279713          	slli	a4,a5,0x2
20403d6a:	204067b7          	lui	a5,0x20406
20403d6e:	de478793          	addi	a5,a5,-540 # 20405de4 <__metal_driver_vtable_riscv_clint0+0xd4>
20403d72:	97ba                	add	a5,a5,a4
20403d74:	439c                	lw	a5,0(a5)
20403d76:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403d78:	fd442783          	lw	a5,-44(s0)
20403d7c:	c781                	beqz	a5,20403d84 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20403d7e:	828ff0ef          	jal	ra,20402da6 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403d82:	a08d                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403d84:	83aff0ef          	jal	ra,20402dbe <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403d88:	a8b1                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403d8a:	fd442783          	lw	a5,-44(s0)
20403d8e:	c781                	beqz	a5,20403d96 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403d90:	846ff0ef          	jal	ra,20402dd6 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403d94:	a881                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403d96:	858ff0ef          	jal	ra,20402dee <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403d9a:	a0a9                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20403d9c:	fd442783          	lw	a5,-44(s0)
20403da0:	c781                	beqz	a5,20403da8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403da2:	864ff0ef          	jal	ra,20402e06 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403da6:	a83d                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403da8:	878ff0ef          	jal	ra,20402e20 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20403dac:	a825                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20403dae:	fd442783          	lw	a5,-44(s0)
20403db2:	c781                	beqz	a5,20403dba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403db4:	886ff0ef          	jal	ra,20402e3a <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403db8:	a035                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20403dba:	89cff0ef          	jal	ra,20402e56 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20403dbe:	a01d                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403dc0:	fd442783          	lw	a5,-44(s0)
20403dc4:	c799                	beqz	a5,20403dd2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403dc6:	fd842783          	lw	a5,-40(s0)
20403dca:	853e                	mv	a0,a5
20403dcc:	8a6ff0ef          	jal	ra,20402e72 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403dd0:	a811                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403dd2:	fd842783          	lw	a5,-40(s0)
20403dd6:	853e                	mv	a0,a5
20403dd8:	8c6ff0ef          	jal	ra,20402e9e <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20403ddc:	a021                	j	20403de4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20403dde:	57fd                	li	a5,-1
20403de0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403de4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403de8:	853e                	mv	a0,a5
20403dea:	50b2                	lw	ra,44(sp)
20403dec:	5422                	lw	s0,40(sp)
20403dee:	6145                	addi	sp,sp,48
20403df0:	8082                	ret

20403df2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403df2:	7179                	addi	sp,sp,-48
20403df4:	d622                	sw	s0,44(sp)
20403df6:	1800                	addi	s0,sp,48
20403df8:	fca42e23          	sw	a0,-36(s0)
20403dfc:	fcb42c23          	sw	a1,-40(s0)
20403e00:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403e04:	fdc42783          	lw	a5,-36(s0)
20403e08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403e0c:	fd842703          	lw	a4,-40(s0)
20403e10:	47ad                	li	a5,11
20403e12:	02e7c263          	blt	a5,a4,20403e36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403e16:	fd442783          	lw	a5,-44(s0)
20403e1a:	cf91                	beqz	a5,20403e36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20403e1c:	fec42703          	lw	a4,-20(s0)
20403e20:	fd842783          	lw	a5,-40(s0)
20403e24:	0e078793          	addi	a5,a5,224
20403e28:	078a                	slli	a5,a5,0x2
20403e2a:	97ba                	add	a5,a5,a4
20403e2c:	fd442703          	lw	a4,-44(s0)
20403e30:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403e32:	4781                	li	a5,0
20403e34:	a011                	j	20403e38 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403e36:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403e38:	853e                	mv	a0,a5
20403e3a:	5432                	lw	s0,44(sp)
20403e3c:	6145                	addi	sp,sp,48
20403e3e:	8082                	ret

20403e40 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20403e40:	7139                	addi	sp,sp,-64
20403e42:	de06                	sw	ra,60(sp)
20403e44:	dc22                	sw	s0,56(sp)
20403e46:	0080                	addi	s0,sp,64
20403e48:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403e4c:	fcc42783          	lw	a5,-52(s0)
20403e50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403e54:	fe442783          	lw	a5,-28(s0)
20403e58:	43dc                	lw	a5,4(a5)
20403e5a:	10079e63          	bnez	a5,20403f76 <__metal_driver_riscv_cpu_controller_interrupt_init+0x136>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20403e5e:	57fd                	li	a5,-1
20403e60:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403e64:	57fd                	li	a5,-1
20403e66:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403e6a:	301027f3          	csrr	a5,misa
20403e6e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403e72:	fe042703          	lw	a4,-32(s0)
20403e76:	6789                	lui	a5,0x2
20403e78:	8ff9                	and	a5,a5,a4
20403e7a:	e799                	bnez	a5,20403e88 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20403e7c:	fe042703          	lw	a4,-32(s0)
20403e80:	000407b7          	lui	a5,0x40
20403e84:	8ff9                	and	a5,a5,a4
20403e86:	c799                	beqz	a5,20403e94 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403e88:	57fd                	li	a5,-1
20403e8a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20403e8e:	57fd                	li	a5,-1
20403e90:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403e94:	fe042703          	lw	a4,-32(s0)
20403e98:	000407b7          	lui	a5,0x40
20403e9c:	8ff9                	and	a5,a5,a4
20403e9e:	c781                	beqz	a5,20403ea6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20403ea0:	57fd                	li	a5,-1
20403ea2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403ea6:	fe042623          	sw	zero,-20(s0)
20403eaa:	a0b9                	j	20403ef8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20403eac:	fe442683          	lw	a3,-28(s0)
20403eb0:	fec42703          	lw	a4,-20(s0)
20403eb4:	87ba                	mv	a5,a4
20403eb6:	0786                	slli	a5,a5,0x1
20403eb8:	97ba                	add	a5,a5,a4
20403eba:	078e                	slli	a5,a5,0x3
20403ebc:	97b6                	add	a5,a5,a3
20403ebe:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403ec2:	fe442683          	lw	a3,-28(s0)
20403ec6:	fec42703          	lw	a4,-20(s0)
20403eca:	87ba                	mv	a5,a4
20403ecc:	0786                	slli	a5,a5,0x1
20403ece:	97ba                	add	a5,a5,a4
20403ed0:	078e                	slli	a5,a5,0x3
20403ed2:	97b6                	add	a5,a5,a3
20403ed4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403ed8:	fe442683          	lw	a3,-28(s0)
20403edc:	fec42703          	lw	a4,-20(s0)
20403ee0:	87ba                	mv	a5,a4
20403ee2:	0786                	slli	a5,a5,0x1
20403ee4:	97ba                	add	a5,a5,a4
20403ee6:	078e                	slli	a5,a5,0x3
20403ee8:	97b6                	add	a5,a5,a3
20403eea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403eee:	fec42783          	lw	a5,-20(s0)
20403ef2:	0785                	addi	a5,a5,1
20403ef4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403ef8:	fec42703          	lw	a4,-20(s0)
20403efc:	47fd                	li	a5,31
20403efe:	fae7d7e3          	bge	a5,a4,20403eac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403f02:	fe042423          	sw	zero,-24(s0)
20403f06:	a01d                	j	20403f2c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403f08:	fe442703          	lw	a4,-28(s0)
20403f0c:	fe842783          	lw	a5,-24(s0)
20403f10:	0e078793          	addi	a5,a5,224
20403f14:	078a                	slli	a5,a5,0x2
20403f16:	97ba                	add	a5,a5,a4
20403f18:	20403737          	lui	a4,0x20403
20403f1c:	eca70713          	addi	a4,a4,-310 # 20402eca <__metal_default_exception_handler>
20403f20:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403f22:	fe842783          	lw	a5,-24(s0)
20403f26:	0785                	addi	a5,a5,1
20403f28:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403f2c:	fe842703          	lw	a4,-24(s0)
20403f30:	47ad                	li	a5,11
20403f32:	fce7dbe3          	bge	a5,a4,20403f08 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403f36:	204037b7          	lui	a5,0x20403
20403f3a:	18078593          	addi	a1,a5,384 # 20403180 <__metal_exception_handler>
20403f3e:	4501                	li	a0,0
20403f40:	d27ff0ef          	jal	ra,20403c66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403f44:	301027f3          	csrr	a5,misa
20403f48:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403f4c:	fdc42703          	lw	a4,-36(s0)
20403f50:	67c1                	lui	a5,0x10
20403f52:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403f56:	8ff9                	and	a5,a5,a4
20403f58:	cb99                	beqz	a5,20403f6e <__metal_driver_riscv_cpu_controller_interrupt_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403f5a:	300027f3          	csrr	a5,mstatus
20403f5e:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403f62:	fdc42703          	lw	a4,-36(s0)
20403f66:	6789                	lui	a5,0x2
20403f68:	8fd9                	or	a5,a5,a4
20403f6a:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403f6e:	fe442783          	lw	a5,-28(s0)
20403f72:	4705                	li	a4,1
20403f74:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403f76:	0001                	nop
20403f78:	50f2                	lw	ra,60(sp)
20403f7a:	5462                	lw	s0,56(sp)
20403f7c:	6121                	addi	sp,sp,64
20403f7e:	8082                	ret

20403f80 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20403f80:	7179                	addi	sp,sp,-48
20403f82:	d606                	sw	ra,44(sp)
20403f84:	d422                	sw	s0,40(sp)
20403f86:	1800                	addi	s0,sp,48
20403f88:	fca42e23          	sw	a0,-36(s0)
20403f8c:	fcb42c23          	sw	a1,-40(s0)
20403f90:	fcc42a23          	sw	a2,-44(s0)
20403f94:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403f98:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403f9c:	fdc42783          	lw	a5,-36(s0)
20403fa0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403fa4:	fd842503          	lw	a0,-40(s0)
20403fa8:	d57ff0ef          	jal	ra,20403cfe <__metal_valid_interrupt_id>
20403fac:	87aa                	mv	a5,a0
20403fae:	e399                	bnez	a5,20403fb4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x34>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20403fb0:	57d5                	li	a5,-11
20403fb2:	aa11                	j	204040c6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x146>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403fb4:	fd442783          	lw	a5,-44(s0)
20403fb8:	cf85                	beqz	a5,20403ff0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x70>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403fba:	fe842683          	lw	a3,-24(s0)
20403fbe:	fd842703          	lw	a4,-40(s0)
20403fc2:	87ba                	mv	a5,a4
20403fc4:	0786                	slli	a5,a5,0x1
20403fc6:	97ba                	add	a5,a5,a4
20403fc8:	078e                	slli	a5,a5,0x3
20403fca:	97b6                	add	a5,a5,a3
20403fcc:	fd442703          	lw	a4,-44(s0)
20403fd0:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403fd4:	fe842683          	lw	a3,-24(s0)
20403fd8:	fd842703          	lw	a4,-40(s0)
20403fdc:	87ba                	mv	a5,a4
20403fde:	0786                	slli	a5,a5,0x1
20403fe0:	97ba                	add	a5,a5,a4
20403fe2:	078e                	slli	a5,a5,0x3
20403fe4:	97b6                	add	a5,a5,a3
20403fe6:	fd042703          	lw	a4,-48(s0)
20403fea:	08e7ac23          	sw	a4,152(a5)
20403fee:	a8d1                	j	204040c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20403ff0:	fd842783          	lw	a5,-40(s0)
20403ff4:	17f5                	addi	a5,a5,-3
20403ff6:	4771                	li	a4,28
20403ff8:	0cf76263          	bltu	a4,a5,204040bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x13c>
20403ffc:	00279713          	slli	a4,a5,0x2
20404000:	204067b7          	lui	a5,0x20406
20404004:	e6478793          	addi	a5,a5,-412 # 20405e64 <__metal_driver_vtable_riscv_clint0+0x154>
20404008:	97ba                	add	a5,a5,a4
2040400a:	439c                	lw	a5,0(a5)
2040400c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040400e:	fe842683          	lw	a3,-24(s0)
20404012:	fd842703          	lw	a4,-40(s0)
20404016:	87ba                	mv	a5,a4
20404018:	0786                	slli	a5,a5,0x1
2040401a:	97ba                	add	a5,a5,a4
2040401c:	078e                	slli	a5,a5,0x3
2040401e:	97b6                	add	a5,a5,a3
20404020:	20403737          	lui	a4,0x20403
20404024:	fb670713          	addi	a4,a4,-74 # 20402fb6 <__metal_default_sw_handler>
20404028:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
2040402c:	fe842683          	lw	a3,-24(s0)
20404030:	fd842703          	lw	a4,-40(s0)
20404034:	87ba                	mv	a5,a4
20404036:	0786                	slli	a5,a5,0x1
20404038:	97ba                	add	a5,a5,a4
2040403a:	078e                	slli	a5,a5,0x3
2040403c:	97b6                	add	a5,a5,a3
2040403e:	fd042703          	lw	a4,-48(s0)
20404042:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20404046:	a8b5                	j	204040c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20404048:	fe842683          	lw	a3,-24(s0)
2040404c:	fd842703          	lw	a4,-40(s0)
20404050:	87ba                	mv	a5,a4
20404052:	0786                	slli	a5,a5,0x1
20404054:	97ba                	add	a5,a5,a4
20404056:	078e                	slli	a5,a5,0x3
20404058:	97b6                	add	a5,a5,a3
2040405a:	20403737          	lui	a4,0x20403
2040405e:	0aa70713          	addi	a4,a4,170 # 204030aa <__metal_default_timer_handler>
20404062:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20404066:	fe842683          	lw	a3,-24(s0)
2040406a:	fd842703          	lw	a4,-40(s0)
2040406e:	87ba                	mv	a5,a4
20404070:	0786                	slli	a5,a5,0x1
20404072:	97ba                	add	a5,a5,a4
20404074:	078e                	slli	a5,a5,0x3
20404076:	97b6                	add	a5,a5,a3
20404078:	fd042703          	lw	a4,-48(s0)
2040407c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20404080:	a089                	j	204040c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20404082:	fe842683          	lw	a3,-24(s0)
20404086:	fd842703          	lw	a4,-40(s0)
2040408a:	87ba                	mv	a5,a4
2040408c:	0786                	slli	a5,a5,0x1
2040408e:	97ba                	add	a5,a5,a4
20404090:	078e                	slli	a5,a5,0x3
20404092:	97b6                	add	a5,a5,a3
20404094:	20403737          	lui	a4,0x20403
20404098:	ee270713          	addi	a4,a4,-286 # 20402ee2 <__metal_default_interrupt_handler>
2040409c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
204040a0:	fe842683          	lw	a3,-24(s0)
204040a4:	fd842703          	lw	a4,-40(s0)
204040a8:	87ba                	mv	a5,a4
204040aa:	0786                	slli	a5,a5,0x1
204040ac:	97ba                	add	a5,a5,a4
204040ae:	078e                	slli	a5,a5,0x3
204040b0:	97b6                	add	a5,a5,a3
204040b2:	fd042703          	lw	a4,-48(s0)
204040b6:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204040ba:	a021                	j	204040c2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x142>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204040bc:	57d1                	li	a5,-12
204040be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204040c2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204040c6:	853e                	mv	a0,a5
204040c8:	50b2                	lw	ra,44(sp)
204040ca:	5422                	lw	s0,40(sp)
204040cc:	6145                	addi	sp,sp,48
204040ce:	8082                	ret

204040d0 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204040d0:	1101                	addi	sp,sp,-32
204040d2:	ce06                	sw	ra,28(sp)
204040d4:	cc22                	sw	s0,24(sp)
204040d6:	1000                	addi	s0,sp,32
204040d8:	fea42623          	sw	a0,-20(s0)
204040dc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204040e0:	fe842783          	lw	a5,-24(s0)
204040e4:	4605                	li	a2,1
204040e6:	85be                	mv	a1,a5
204040e8:	fec42503          	lw	a0,-20(s0)
204040ec:	c4bff0ef          	jal	ra,20403d36 <__metal_local_interrupt_enable>
204040f0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204040f2:	853e                	mv	a0,a5
204040f4:	40f2                	lw	ra,28(sp)
204040f6:	4462                	lw	s0,24(sp)
204040f8:	6105                	addi	sp,sp,32
204040fa:	8082                	ret

204040fc <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204040fc:	1101                	addi	sp,sp,-32
204040fe:	ce06                	sw	ra,28(sp)
20404100:	cc22                	sw	s0,24(sp)
20404102:	1000                	addi	s0,sp,32
20404104:	fea42623          	sw	a0,-20(s0)
20404108:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
2040410c:	fe842783          	lw	a5,-24(s0)
20404110:	4601                	li	a2,0
20404112:	85be                	mv	a1,a5
20404114:	fec42503          	lw	a0,-20(s0)
20404118:	c1fff0ef          	jal	ra,20403d36 <__metal_local_interrupt_enable>
2040411c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
2040411e:	853e                	mv	a0,a5
20404120:	40f2                	lw	ra,28(sp)
20404122:	4462                	lw	s0,24(sp)
20404124:	6105                	addi	sp,sp,32
20404126:	8082                	ret

20404128 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20404128:	1101                	addi	sp,sp,-32
2040412a:	ce06                	sw	ra,28(sp)
2040412c:	cc22                	sw	s0,24(sp)
2040412e:	1000                	addi	s0,sp,32
20404130:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20404134:	ae3ff0ef          	jal	ra,20403c16 <__metal_controller_interrupt_vector_mode>
20404138:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
2040413a:	853e                	mv	a0,a5
2040413c:	40f2                	lw	ra,28(sp)
2040413e:	4462                	lw	s0,24(sp)
20404140:	6105                	addi	sp,sp,32
20404142:	8082                	ret

20404144 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20404144:	7179                	addi	sp,sp,-48
20404146:	d606                	sw	ra,44(sp)
20404148:	d422                	sw	s0,40(sp)
2040414a:	1800                	addi	s0,sp,48
2040414c:	fca42e23          	sw	a0,-36(s0)
20404150:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20404154:	fdc42783          	lw	a5,-36(s0)
20404158:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
2040415c:	fd842783          	lw	a5,-40(s0)
20404160:	eb99                	bnez	a5,20404176 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20404162:	204037b7          	lui	a5,0x20403
20404166:	18078593          	addi	a1,a5,384 # 20403180 <__metal_exception_handler>
2040416a:	fd842503          	lw	a0,-40(s0)
2040416e:	af9ff0ef          	jal	ra,20403c66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20404172:	4781                	li	a5,0
20404174:	a00d                	j	20404196 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20404176:	fd842703          	lw	a4,-40(s0)
2040417a:	4785                	li	a5,1
2040417c:	00f71c63          	bne	a4,a5,20404194 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20404180:	204067b7          	lui	a5,0x20406
20404184:	a8078593          	addi	a1,a5,-1408 # 20405a80 <__metal_vector_table>
20404188:	fd842503          	lw	a0,-40(s0)
2040418c:	adbff0ef          	jal	ra,20403c66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20404190:	4781                	li	a5,0
20404192:	a011                	j	20404196 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20404194:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20404196:	853e                	mv	a0,a5
20404198:	50b2                	lw	ra,44(sp)
2040419a:	5422                	lw	s0,40(sp)
2040419c:	6145                	addi	sp,sp,48
2040419e:	8082                	ret

204041a0 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
204041a0:	1101                	addi	sp,sp,-32
204041a2:	ce22                	sw	s0,28(sp)
204041a4:	1000                	addi	s0,sp,32
204041a6:	fea42623          	sw	a0,-20(s0)
204041aa:	feb42423          	sw	a1,-24(s0)
204041ae:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204041b2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204041b4:	853e                	mv	a0,a5
204041b6:	4472                	lw	s0,28(sp)
204041b8:	6105                	addi	sp,sp,32
204041ba:	8082                	ret

204041bc <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204041bc:	7139                	addi	sp,sp,-64
204041be:	de22                	sw	s0,60(sp)
204041c0:	0080                	addi	s0,sp,64
204041c2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204041c6:	4301                	li	t1,0
204041c8:	4381                	li	t2,0
204041ca:	fe642423          	sw	t1,-24(s0)
204041ce:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204041d2:	b8002573          	csrr	a0,mcycleh
204041d6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204041da:	b0002573          	csrr	a0,mcycle
204041de:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204041e2:	b8002573          	csrr	a0,mcycleh
204041e6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204041ea:	fe442883          	lw	a7,-28(s0)
204041ee:	fdc42503          	lw	a0,-36(s0)
204041f2:	02a89563          	bne	a7,a0,2040421c <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204041f6:	fe442503          	lw	a0,-28(s0)
204041fa:	85aa                	mv	a1,a0
204041fc:	4601                	li	a2,0
204041fe:	00059813          	slli	a6,a1,0x0
20404202:	4781                	li	a5,0
20404204:	fe042603          	lw	a2,-32(s0)
20404208:	86b2                	mv	a3,a2
2040420a:	4701                	li	a4,0
2040420c:	00d7e633          	or	a2,a5,a3
20404210:	fec42423          	sw	a2,-24(s0)
20404214:	00e867b3          	or	a5,a6,a4
20404218:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
2040421c:	fe842783          	lw	a5,-24(s0)
20404220:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20404224:	853e                	mv	a0,a5
20404226:	85c2                	mv	a1,a6
20404228:	5472                	lw	s0,60(sp)
2040422a:	6121                	addi	sp,sp,64
2040422c:	8082                	ret

2040422e <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
2040422e:	7179                	addi	sp,sp,-48
20404230:	d606                	sw	ra,44(sp)
20404232:	d422                	sw	s0,40(sp)
20404234:	d24a                	sw	s2,36(sp)
20404236:	d04e                	sw	s3,32(sp)
20404238:	1800                	addi	s0,sp,48
2040423a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
2040423e:	fdc42783          	lw	a5,-36(s0)
20404242:	e781                	bnez	a5,2040424a <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20404244:	4901                	li	s2,0
20404246:	4981                	li	s3,0
20404248:	a821                	j	20404260 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
2040424a:	fdc42503          	lw	a0,-36(s0)
2040424e:	abffe0ef          	jal	ra,20402d0c <__metal_driver_cpu_timebase>
20404252:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20404256:	fec42783          	lw	a5,-20(s0)
2040425a:	893e                	mv	s2,a5
2040425c:	87fd                	srai	a5,a5,0x1f
2040425e:	89be                	mv	s3,a5
20404260:	87ca                	mv	a5,s2
20404262:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20404264:	853e                	mv	a0,a5
20404266:	85c2                	mv	a1,a6
20404268:	50b2                	lw	ra,44(sp)
2040426a:	5422                	lw	s0,40(sp)
2040426c:	5912                	lw	s2,36(sp)
2040426e:	5982                	lw	s3,32(sp)
20404270:	6145                	addi	sp,sp,48
20404272:	8082                	ret

20404274 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20404274:	7179                	addi	sp,sp,-48
20404276:	d606                	sw	ra,44(sp)
20404278:	d422                	sw	s0,40(sp)
2040427a:	1800                	addi	s0,sp,48
2040427c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20404280:	4781                	li	a5,0
20404282:	4801                	li	a6,0
20404284:	fef42023          	sw	a5,-32(s0)
20404288:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040428c:	fdc42503          	lw	a0,-36(s0)
20404290:	aa7fe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20404294:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20404298:	fec42783          	lw	a5,-20(s0)
2040429c:	c78d                	beqz	a5,204042c6 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040429e:	fec42783          	lw	a5,-20(s0)
204042a2:	13c7a783          	lw	a5,316(a5)
204042a6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204042aa:	fe842783          	lw	a5,-24(s0)
204042ae:	cf81                	beqz	a5,204042c6 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204042b0:	fe842783          	lw	a5,-24(s0)
204042b4:	439c                	lw	a5,0(a5)
204042b6:	43f8                	lw	a4,68(a5)
204042b8:	fe040793          	addi	a5,s0,-32
204042bc:	863e                	mv	a2,a5
204042be:	4585                	li	a1,1
204042c0:	fe842503          	lw	a0,-24(s0)
204042c4:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204042c6:	fe042783          	lw	a5,-32(s0)
204042ca:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204042ce:	853e                	mv	a0,a5
204042d0:	85c2                	mv	a1,a6
204042d2:	50b2                	lw	ra,44(sp)
204042d4:	5422                	lw	s0,40(sp)
204042d6:	6145                	addi	sp,sp,48
204042d8:	8082                	ret

204042da <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204042da:	7179                	addi	sp,sp,-48
204042dc:	d606                	sw	ra,44(sp)
204042de:	d422                	sw	s0,40(sp)
204042e0:	d226                	sw	s1,36(sp)
204042e2:	1800                	addi	s0,sp,48
204042e4:	fca42e23          	sw	a0,-36(s0)
204042e8:	fcb42823          	sw	a1,-48(s0)
204042ec:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204042f0:	57fd                	li	a5,-1
204042f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204042f6:	fdc42503          	lw	a0,-36(s0)
204042fa:	a3dfe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204042fe:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20404302:	fe842783          	lw	a5,-24(s0)
20404306:	cf8d                	beqz	a5,20404340 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20404308:	fe842783          	lw	a5,-24(s0)
2040430c:	13c7a783          	lw	a5,316(a5)
20404310:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20404314:	fe442783          	lw	a5,-28(s0)
20404318:	c785                	beqz	a5,20404340 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
2040431a:	fe442783          	lw	a5,-28(s0)
2040431e:	439c                	lw	a5,0(a5)
20404320:	47a4                	lw	s1,72(a5)
20404322:	fdc42503          	lw	a0,-36(s0)
20404326:	9c3fe0ef          	jal	ra,20402ce8 <__metal_driver_cpu_hartid>
2040432a:	87aa                	mv	a5,a0
2040432c:	fd042603          	lw	a2,-48(s0)
20404330:	fd442683          	lw	a3,-44(s0)
20404334:	85be                	mv	a1,a5
20404336:	fe442503          	lw	a0,-28(s0)
2040433a:	9482                	jalr	s1
2040433c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20404340:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20404344:	853e                	mv	a0,a5
20404346:	50b2                	lw	ra,44(sp)
20404348:	5422                	lw	s0,40(sp)
2040434a:	5492                	lw	s1,36(sp)
2040434c:	6145                	addi	sp,sp,48
2040434e:	8082                	ret

20404350 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20404350:	1101                	addi	sp,sp,-32
20404352:	ce22                	sw	s0,28(sp)
20404354:	1000                	addi	s0,sp,32
20404356:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040435a:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2040435e:	853e                	mv	a0,a5
20404360:	4472                	lw	s0,28(sp)
20404362:	6105                	addi	sp,sp,32
20404364:	8082                	ret

20404366 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20404366:	1101                	addi	sp,sp,-32
20404368:	ce22                	sw	s0,28(sp)
2040436a:	1000                	addi	s0,sp,32
2040436c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20404370:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20404372:	853e                	mv	a0,a5
20404374:	4472                	lw	s0,28(sp)
20404376:	6105                	addi	sp,sp,32
20404378:	8082                	ret

2040437a <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
2040437a:	1101                	addi	sp,sp,-32
2040437c:	ce22                	sw	s0,28(sp)
2040437e:	1000                	addi	s0,sp,32
20404380:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404384:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20404388:	853e                	mv	a0,a5
2040438a:	4472                	lw	s0,28(sp)
2040438c:	6105                	addi	sp,sp,32
2040438e:	8082                	ret

20404390 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20404390:	1101                	addi	sp,sp,-32
20404392:	ce22                	sw	s0,28(sp)
20404394:	1000                	addi	s0,sp,32
20404396:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
2040439a:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
2040439c:	853e                	mv	a0,a5
2040439e:	4472                	lw	s0,28(sp)
204043a0:	6105                	addi	sp,sp,32
204043a2:	8082                	ret

204043a4 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204043a4:	7179                	addi	sp,sp,-48
204043a6:	d606                	sw	ra,44(sp)
204043a8:	d422                	sw	s0,40(sp)
204043aa:	1800                	addi	s0,sp,48
204043ac:	fca42e23          	sw	a0,-36(s0)
204043b0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204043b4:	57fd                	li	a5,-1
204043b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204043ba:	fdc42503          	lw	a0,-36(s0)
204043be:	979fe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204043c2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204043c6:	fe842783          	lw	a5,-24(s0)
204043ca:	c79d                	beqz	a5,204043f8 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204043cc:	fe842783          	lw	a5,-24(s0)
204043d0:	0dc7a783          	lw	a5,220(a5)
204043d4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204043d8:	fe442783          	lw	a5,-28(s0)
204043dc:	cf91                	beqz	a5,204043f8 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204043de:	fe442783          	lw	a5,-28(s0)
204043e2:	439c                	lw	a5,0(a5)
204043e4:	43f8                	lw	a4,68(a5)
204043e6:	fd840793          	addi	a5,s0,-40
204043ea:	863e                	mv	a2,a5
204043ec:	458d                	li	a1,3
204043ee:	fe442503          	lw	a0,-28(s0)
204043f2:	9702                	jalr	a4
204043f4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204043f8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204043fc:	853e                	mv	a0,a5
204043fe:	50b2                	lw	ra,44(sp)
20404400:	5422                	lw	s0,40(sp)
20404402:	6145                	addi	sp,sp,48
20404404:	8082                	ret

20404406 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404406:	7179                	addi	sp,sp,-48
20404408:	d606                	sw	ra,44(sp)
2040440a:	d422                	sw	s0,40(sp)
2040440c:	1800                	addi	s0,sp,48
2040440e:	fca42e23          	sw	a0,-36(s0)
20404412:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20404416:	57fd                	li	a5,-1
20404418:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040441c:	fdc42503          	lw	a0,-36(s0)
20404420:	917fe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20404424:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20404428:	fe842783          	lw	a5,-24(s0)
2040442c:	c79d                	beqz	a5,2040445a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040442e:	fe842783          	lw	a5,-24(s0)
20404432:	0dc7a783          	lw	a5,220(a5)
20404436:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
2040443a:	fe442783          	lw	a5,-28(s0)
2040443e:	cf91                	beqz	a5,2040445a <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20404440:	fe442783          	lw	a5,-28(s0)
20404444:	439c                	lw	a5,0(a5)
20404446:	43f8                	lw	a4,68(a5)
20404448:	fd840793          	addi	a5,s0,-40
2040444c:	863e                	mv	a2,a5
2040444e:	4589                	li	a1,2
20404450:	fe442503          	lw	a0,-28(s0)
20404454:	9702                	jalr	a4
20404456:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
2040445a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
2040445e:	853e                	mv	a0,a5
20404460:	50b2                	lw	ra,44(sp)
20404462:	5422                	lw	s0,40(sp)
20404464:	6145                	addi	sp,sp,48
20404466:	8082                	ret

20404468 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20404468:	7179                	addi	sp,sp,-48
2040446a:	d606                	sw	ra,44(sp)
2040446c:	d422                	sw	s0,40(sp)
2040446e:	1800                	addi	s0,sp,48
20404470:	fca42e23          	sw	a0,-36(s0)
20404474:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20404478:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
2040447c:	fdc42503          	lw	a0,-36(s0)
20404480:	8b7fe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20404484:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404488:	fe842783          	lw	a5,-24(s0)
2040448c:	c79d                	beqz	a5,204044ba <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040448e:	fe842783          	lw	a5,-24(s0)
20404492:	0dc7a783          	lw	a5,220(a5)
20404496:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
2040449a:	fe442783          	lw	a5,-28(s0)
2040449e:	cf91                	beqz	a5,204044ba <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
204044a0:	fe442783          	lw	a5,-28(s0)
204044a4:	439c                	lw	a5,0(a5)
204044a6:	43f8                	lw	a4,68(a5)
204044a8:	fd840793          	addi	a5,s0,-40
204044ac:	863e                	mv	a2,a5
204044ae:	4591                	li	a1,4
204044b0:	fe442503          	lw	a0,-28(s0)
204044b4:	9702                	jalr	a4
204044b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204044ba:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
204044be:	853e                	mv	a0,a5
204044c0:	50b2                	lw	ra,44(sp)
204044c2:	5422                	lw	s0,40(sp)
204044c4:	6145                	addi	sp,sp,48
204044c6:	8082                	ret

204044c8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204044c8:	1101                	addi	sp,sp,-32
204044ca:	ce06                	sw	ra,28(sp)
204044cc:	cc22                	sw	s0,24(sp)
204044ce:	1000                	addi	s0,sp,32
204044d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204044d4:	fec42503          	lw	a0,-20(s0)
204044d8:	85ffe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
204044dc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204044de:	853e                	mv	a0,a5
204044e0:	40f2                	lw	ra,28(sp)
204044e2:	4462                	lw	s0,24(sp)
204044e4:	6105                	addi	sp,sp,32
204044e6:	8082                	ret

204044e8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204044e8:	7179                	addi	sp,sp,-48
204044ea:	d606                	sw	ra,44(sp)
204044ec:	d422                	sw	s0,40(sp)
204044ee:	1800                	addi	s0,sp,48
204044f0:	fca42e23          	sw	a0,-36(s0)
204044f4:	fcb42c23          	sw	a1,-40(s0)
204044f8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204044fc:	fdc42503          	lw	a0,-36(s0)
20404500:	837fe0ef          	jal	ra,20402d36 <__metal_driver_cpu_interrupt_controller>
20404504:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404508:	fec42783          	lw	a5,-20(s0)
2040450c:	cb99                	beqz	a5,20404522 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040450e:	fd442603          	lw	a2,-44(s0)
20404512:	fd842583          	lw	a1,-40(s0)
20404516:	fec42503          	lw	a0,-20(s0)
2040451a:	8d9ff0ef          	jal	ra,20403df2 <__metal_exception_register>
2040451e:	87aa                	mv	a5,a0
20404520:	a011                	j	20404524 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20404522:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20404524:	853e                	mv	a0,a5
20404526:	50b2                	lw	ra,44(sp)
20404528:	5422                	lw	s0,40(sp)
2040452a:	6145                	addi	sp,sp,48
2040452c:	8082                	ret

2040452e <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
2040452e:	1101                	addi	sp,sp,-32
20404530:	ce22                	sw	s0,28(sp)
20404532:	1000                	addi	s0,sp,32
20404534:	fea42623          	sw	a0,-20(s0)
20404538:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
2040453c:	fe842783          	lw	a5,-24(s0)
20404540:	0007d783          	lhu	a5,0(a5)
20404544:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20404548:	478d                	li	a5,3
2040454a:	00f71463          	bne	a4,a5,20404552 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
2040454e:	4791                	li	a5,4
20404550:	a011                	j	20404554 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20404552:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20404554:	853e                	mv	a0,a5
20404556:	4472                	lw	s0,28(sp)
20404558:	6105                	addi	sp,sp,32
2040455a:	8082                	ret

2040455c <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
2040455c:	7179                	addi	sp,sp,-48
2040455e:	d622                	sw	s0,44(sp)
20404560:	1800                	addi	s0,sp,48
20404562:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20404566:	341027f3          	csrr	a5,mepc
2040456a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
2040456e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20404572:	853e                	mv	a0,a5
20404574:	5432                	lw	s0,44(sp)
20404576:	6145                	addi	sp,sp,48
20404578:	8082                	ret

2040457a <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
2040457a:	1101                	addi	sp,sp,-32
2040457c:	ce22                	sw	s0,28(sp)
2040457e:	1000                	addi	s0,sp,32
20404580:	fea42623          	sw	a0,-20(s0)
20404584:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404588:	fe842783          	lw	a5,-24(s0)
2040458c:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20404590:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20404592:	853e                	mv	a0,a5
20404594:	4472                	lw	s0,28(sp)
20404596:	6105                	addi	sp,sp,32
20404598:	8082                	ret

2040459a <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
2040459a:	1101                	addi	sp,sp,-32
2040459c:	ce22                	sw	s0,28(sp)
2040459e:	1000                	addi	s0,sp,32
204045a0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204045a4:	fec42703          	lw	a4,-20(s0)
204045a8:	800017b7          	lui	a5,0x80001
204045ac:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204045b0:	00f71563          	bne	a4,a5,204045ba <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204045b4:	0c0007b7          	lui	a5,0xc000
204045b8:	a011                	j	204045bc <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
204045ba:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:245
	}
}
204045bc:	853e                	mv	a0,a5
204045be:	4472                	lw	s0,28(sp)
204045c0:	6105                	addi	sp,sp,32
204045c2:	8082                	ret

204045c4 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
204045c4:	1101                	addi	sp,sp,-32
204045c6:	ce22                	sw	s0,28(sp)
204045c8:	1000                	addi	s0,sp,32
204045ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204045ce:	fec42703          	lw	a4,-20(s0)
204045d2:	800017b7          	lui	a5,0x80001
204045d6:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204045da:	00f71463          	bne	a4,a5,204045e2 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204045de:	47ed                	li	a5,27
204045e0:	a011                	j	204045e4 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
204045e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:265
	}
}
204045e4:	853e                	mv	a0,a5
204045e6:	4472                	lw	s0,28(sp)
204045e8:	6105                	addi	sp,sp,32
204045ea:	8082                	ret

204045ec <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204045ec:	1101                	addi	sp,sp,-32
204045ee:	ce22                	sw	s0,28(sp)
204045f0:	1000                	addi	s0,sp,32
204045f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204045f6:	fec42703          	lw	a4,-20(s0)
204045fa:	800017b7          	lui	a5,0x80001
204045fe:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20404602:	00f71463          	bne	a4,a5,2040460a <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404606:	479d                	li	a5,7
20404608:	a011                	j	2040460c <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
2040460a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:275
	}
}
2040460c:	853e                	mv	a0,a5
2040460e:	4472                	lw	s0,28(sp)
20404610:	6105                	addi	sp,sp,32
20404612:	8082                	ret

20404614 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404614:	1101                	addi	sp,sp,-32
20404616:	ce22                	sw	s0,28(sp)
20404618:	1000                	addi	s0,sp,32
2040461a:	fea42623          	sw	a0,-20(s0)
2040461e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:279
	if (idx == 0) {
20404622:	fe842783          	lw	a5,-24(s0)
20404626:	e791                	bnez	a5,20404632 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20404628:	800017b7          	lui	a5,0x80001
2040462c:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20404630:	a011                	j	20404634 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20404632:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:285
	}
}
20404634:	853e                	mv	a0,a5
20404636:	4472                	lw	s0,28(sp)
20404638:	6105                	addi	sp,sp,32
2040463a:	8082                	ret

2040463c <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2040463c:	1101                	addi	sp,sp,-32
2040463e:	ce22                	sw	s0,28(sp)
20404640:	1000                	addi	s0,sp,32
20404642:	fea42623          	sw	a0,-20(s0)
20404646:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	if (idx == 0) {
2040464a:	fe842783          	lw	a5,-24(s0)
2040464e:	e399                	bnez	a5,20404654 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:290
		return 11;
20404650:	47ad                	li	a5,11
20404652:	a011                	j	20404656 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20404654:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:295
	}
}
20404656:	853e                	mv	a0,a5
20404658:	4472                	lw	s0,28(sp)
2040465a:	6105                	addi	sp,sp,32
2040465c:	8082                	ret

2040465e <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
2040465e:	7179                	addi	sp,sp,-48
20404660:	d606                	sw	ra,44(sp)
20404662:	d422                	sw	s0,40(sp)
20404664:	1800                	addi	s0,sp,48
20404666:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040466a:	fdc42503          	lw	a0,-36(s0)
2040466e:	3735                	jal	2040459a <__metal_driver_sifive_plic0_control_base>
20404670:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404674:	fec42703          	lw	a4,-20(s0)
20404678:	002007b7          	lui	a5,0x200
2040467c:	0791                	addi	a5,a5,4
2040467e:	97ba                	add	a5,a5,a4
20404680:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20404682:	853e                	mv	a0,a5
20404684:	50b2                	lw	ra,44(sp)
20404686:	5422                	lw	s0,40(sp)
20404688:	6145                	addi	sp,sp,48
2040468a:	8082                	ret

2040468c <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
2040468c:	7179                	addi	sp,sp,-48
2040468e:	d606                	sw	ra,44(sp)
20404690:	d422                	sw	s0,40(sp)
20404692:	1800                	addi	s0,sp,48
20404694:	fca42e23          	sw	a0,-36(s0)
20404698:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040469c:	fdc42503          	lw	a0,-36(s0)
204046a0:	3ded                	jal	2040459a <__metal_driver_sifive_plic0_control_base>
204046a2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204046a6:	fec42703          	lw	a4,-20(s0)
204046aa:	002007b7          	lui	a5,0x200
204046ae:	0791                	addi	a5,a5,4
204046b0:	97ba                	add	a5,a5,a4
204046b2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204046b4:	fd842783          	lw	a5,-40(s0)
204046b8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
204046ba:	0001                	nop
204046bc:	50b2                	lw	ra,44(sp)
204046be:	5422                	lw	s0,40(sp)
204046c0:	6145                	addi	sp,sp,48
204046c2:	8082                	ret

204046c4 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
204046c4:	7179                	addi	sp,sp,-48
204046c6:	d606                	sw	ra,44(sp)
204046c8:	d422                	sw	s0,40(sp)
204046ca:	1800                	addi	s0,sp,48
204046cc:	fca42e23          	sw	a0,-36(s0)
204046d0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204046d4:	fdc42503          	lw	a0,-36(s0)
204046d8:	35c9                	jal	2040459a <__metal_driver_sifive_plic0_control_base>
204046da:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204046de:	fec42703          	lw	a4,-20(s0)
204046e2:	002007b7          	lui	a5,0x200
204046e6:	97ba                	add	a5,a5,a4
204046e8:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204046ea:	fd842783          	lw	a5,-40(s0)
204046ee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204046f0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204046f2:	853e                	mv	a0,a5
204046f4:	50b2                	lw	ra,44(sp)
204046f6:	5422                	lw	s0,40(sp)
204046f8:	6145                	addi	sp,sp,48
204046fa:	8082                	ret

204046fc <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
204046fc:	7179                	addi	sp,sp,-48
204046fe:	d606                	sw	ra,44(sp)
20404700:	d422                	sw	s0,40(sp)
20404702:	1800                	addi	s0,sp,48
20404704:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404708:	fdc42503          	lw	a0,-36(s0)
2040470c:	3579                	jal	2040459a <__metal_driver_sifive_plic0_control_base>
2040470e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404712:	fec42703          	lw	a4,-20(s0)
20404716:	002007b7          	lui	a5,0x200
2040471a:	97ba                	add	a5,a5,a4
2040471c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040471e:	853e                	mv	a0,a5
20404720:	50b2                	lw	ra,44(sp)
20404722:	5422                	lw	s0,40(sp)
20404724:	6145                	addi	sp,sp,48
20404726:	8082                	ret

20404728 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20404728:	7179                	addi	sp,sp,-48
2040472a:	d606                	sw	ra,44(sp)
2040472c:	d422                	sw	s0,40(sp)
2040472e:	1800                	addi	s0,sp,48
20404730:	fca42e23          	sw	a0,-36(s0)
20404734:	fcb42c23          	sw	a1,-40(s0)
20404738:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
2040473c:	fdc42503          	lw	a0,-36(s0)
20404740:	3da9                	jal	2040459a <__metal_driver_sifive_plic0_control_base>
20404742:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20404746:	fdc42503          	lw	a0,-36(s0)
2040474a:	354d                	jal	204045ec <__metal_driver_sifive_plic0_max_priority>
2040474c:	87aa                	mv	a5,a0
2040474e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20404752:	fe842783          	lw	a5,-24(s0)
20404756:	c785                	beqz	a5,2040477e <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20404758:	fd442703          	lw	a4,-44(s0)
2040475c:	fe842783          	lw	a5,-24(s0)
20404760:	00f77f63          	bgeu	a4,a5,2040477e <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404764:	fd842783          	lw	a5,-40(s0)
20404768:	078a                	slli	a5,a5,0x2
2040476a:	873e                	mv	a4,a5
2040476c:	fec42783          	lw	a5,-20(s0)
20404770:	97ba                	add	a5,a5,a4
20404772:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20404774:	fd442783          	lw	a5,-44(s0)
20404778:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
2040477a:	4781                	li	a5,0
2040477c:	a011                	j	20404780 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
2040477e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20404780:	853e                	mv	a0,a5
20404782:	50b2                	lw	ra,44(sp)
20404784:	5422                	lw	s0,40(sp)
20404786:	6145                	addi	sp,sp,48
20404788:	8082                	ret

2040478a <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
2040478a:	7179                	addi	sp,sp,-48
2040478c:	d606                	sw	ra,44(sp)
2040478e:	d422                	sw	s0,40(sp)
20404790:	1800                	addi	s0,sp,48
20404792:	fca42e23          	sw	a0,-36(s0)
20404796:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
2040479a:	fdc42503          	lw	a0,-36(s0)
2040479e:	dfdff0ef          	jal	ra,2040459a <__metal_driver_sifive_plic0_control_base>
204047a2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204047a6:	fd842783          	lw	a5,-40(s0)
204047aa:	078a                	slli	a5,a5,0x2
204047ac:	873e                	mv	a4,a5
204047ae:	fec42783          	lw	a5,-20(s0)
204047b2:	97ba                	add	a5,a5,a4
204047b4:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204047b6:	853e                	mv	a0,a5
204047b8:	50b2                	lw	ra,44(sp)
204047ba:	5422                	lw	s0,40(sp)
204047bc:	6145                	addi	sp,sp,48
204047be:	8082                	ret

204047c0 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204047c0:	7179                	addi	sp,sp,-48
204047c2:	d606                	sw	ra,44(sp)
204047c4:	d422                	sw	s0,40(sp)
204047c6:	1800                	addi	s0,sp,48
204047c8:	fca42e23          	sw	a0,-36(s0)
204047cc:	fcb42c23          	sw	a1,-40(s0)
204047d0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204047d4:	fdc42503          	lw	a0,-36(s0)
204047d8:	dc3ff0ef          	jal	ra,2040459a <__metal_driver_sifive_plic0_control_base>
204047dc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204047e0:	fd842783          	lw	a5,-40(s0)
204047e4:	8795                	srai	a5,a5,0x5
204047e6:	078a                	slli	a5,a5,0x2
204047e8:	873e                	mv	a4,a5
204047ea:	fec42783          	lw	a5,-20(s0)
204047ee:	973e                	add	a4,a4,a5
204047f0:	6789                	lui	a5,0x2
204047f2:	97ba                	add	a5,a5,a4
204047f4:	439c                	lw	a5,0(a5)
204047f6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204047fa:	fd442783          	lw	a5,-44(s0)
204047fe:	cf81                	beqz	a5,20404816 <__metal_plic0_enable+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404800:	fd842783          	lw	a5,-40(s0)
20404804:	8bfd                	andi	a5,a5,31
20404806:	4705                	li	a4,1
20404808:	00f717b3          	sll	a5,a4,a5
2040480c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2040480e:	fe842783          	lw	a5,-24(s0)
20404812:	8fd9                	or	a5,a5,a4
20404814:	a829                	j	2040482e <__metal_plic0_enable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20404816:	fd842783          	lw	a5,-40(s0)
2040481a:	8bfd                	andi	a5,a5,31
2040481c:	4705                	li	a4,1
2040481e:	00f717b3          	sll	a5,a4,a5
20404822:	fff7c793          	not	a5,a5
20404826:	873e                	mv	a4,a5
20404828:	fe842783          	lw	a5,-24(s0)
2040482c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040482e:	fd842703          	lw	a4,-40(s0)
20404832:	8715                	srai	a4,a4,0x5
20404834:	070a                	slli	a4,a4,0x2
20404836:	86ba                	mv	a3,a4
20404838:	fec42703          	lw	a4,-20(s0)
2040483c:	96ba                	add	a3,a3,a4
2040483e:	6709                	lui	a4,0x2
20404840:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404842:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20404844:	0001                	nop
20404846:	50b2                	lw	ra,44(sp)
20404848:	5422                	lw	s0,40(sp)
2040484a:	6145                	addi	sp,sp,48
2040484c:	8082                	ret

2040484e <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
2040484e:	1101                	addi	sp,sp,-32
20404850:	ce06                	sw	ra,28(sp)
20404852:	cc22                	sw	s0,24(sp)
20404854:	1000                	addi	s0,sp,32
20404856:	fea42623          	sw	a0,-20(s0)
2040485a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
2040485e:	12c00513          	li	a0,300
20404862:	1e0010ef          	jal	ra,20405a42 <metal_shutdown>

20404866 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20404866:	7179                	addi	sp,sp,-48
20404868:	d606                	sw	ra,44(sp)
2040486a:	d422                	sw	s0,40(sp)
2040486c:	1800                	addi	s0,sp,48
2040486e:	fca42e23          	sw	a0,-36(s0)
20404872:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20404876:	fd842783          	lw	a5,-40(s0)
2040487a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
2040487e:	fec42503          	lw	a0,-20(s0)
20404882:	dddff0ef          	jal	ra,2040465e <__metal_plic0_claim_interrupt>
20404886:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
2040488a:	fec42503          	lw	a0,-20(s0)
2040488e:	d37ff0ef          	jal	ra,204045c4 <__metal_driver_sifive_plic0_num_interrupts>
20404892:	87aa                	mv	a5,a0
20404894:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20404898:	fe842703          	lw	a4,-24(s0)
2040489c:	fe442783          	lw	a5,-28(s0)
204048a0:	04f77263          	bgeu	a4,a5,204048e4 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
204048a4:	fec42703          	lw	a4,-20(s0)
204048a8:	fe842783          	lw	a5,-24(s0)
204048ac:	078a                	slli	a5,a5,0x2
204048ae:	97ba                	add	a5,a5,a4
204048b0:	479c                	lw	a5,8(a5)
204048b2:	cb8d                	beqz	a5,204048e4 <__metal_plic0_handler+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204048b4:	fec42703          	lw	a4,-20(s0)
204048b8:	fe842783          	lw	a5,-24(s0)
204048bc:	078a                	slli	a5,a5,0x2
204048be:	97ba                	add	a5,a5,a4
204048c0:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204048c4:	fe842603          	lw	a2,-24(s0)
204048c8:	fec42683          	lw	a3,-20(s0)
204048cc:	fe842703          	lw	a4,-24(s0)
204048d0:	87ba                	mv	a5,a4
204048d2:	0786                	slli	a5,a5,0x1
204048d4:	97ba                	add	a5,a5,a4
204048d6:	078e                	slli	a5,a5,0x3
204048d8:	97b6                	add	a5,a5,a3
204048da:	0887a783          	lw	a5,136(a5)
204048de:	85be                	mv	a1,a5
204048e0:	8532                	mv	a0,a2
204048e2:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204048e4:	fe842583          	lw	a1,-24(s0)
204048e8:	fec42503          	lw	a0,-20(s0)
204048ec:	da1ff0ef          	jal	ra,2040468c <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204048f0:	0001                	nop
204048f2:	50b2                	lw	ra,44(sp)
204048f4:	5422                	lw	s0,40(sp)
204048f6:	6145                	addi	sp,sp,48
204048f8:	8082                	ret

204048fa <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204048fa:	7139                	addi	sp,sp,-64
204048fc:	de06                	sw	ra,60(sp)
204048fe:	dc22                	sw	s0,56(sp)
20404900:	0080                	addi	s0,sp,64
20404902:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404906:	fcc42783          	lw	a5,-52(s0)
2040490a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
2040490e:	fe442783          	lw	a5,-28(s0)
20404912:	43dc                	lw	a5,4(a5)
20404914:	12079263          	bnez	a5,20404a38 <__metal_driver_riscv_plic0_init+0x13e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404918:	fe042623          	sw	zero,-20(s0)
2040491c:	a231                	j	20404a28 <__metal_driver_riscv_plic0_init+0x12e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040491e:	fcc42503          	lw	a0,-52(s0)
20404922:	ca3ff0ef          	jal	ra,204045c4 <__metal_driver_sifive_plic0_num_interrupts>
20404926:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040492a:	fec42583          	lw	a1,-20(s0)
2040492e:	fcc42503          	lw	a0,-52(s0)
20404932:	ce3ff0ef          	jal	ra,20404614 <__metal_driver_sifive_plic0_interrupt_parents>
20404936:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040493a:	fec42583          	lw	a1,-20(s0)
2040493e:	fcc42503          	lw	a0,-52(s0)
20404942:	cfbff0ef          	jal	ra,2040463c <__metal_driver_sifive_plic0_interrupt_lines>
20404946:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040494a:	fdc42783          	lw	a5,-36(s0)
2040494e:	439c                	lw	a5,0(a5)
20404950:	439c                	lw	a5,0(a5)
20404952:	fdc42503          	lw	a0,-36(s0)
20404956:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404958:	fe042423          	sw	zero,-24(s0)
2040495c:	a095                	j	204049c0 <__metal_driver_riscv_plic0_init+0xc6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
2040495e:	4601                	li	a2,0
20404960:	fe842583          	lw	a1,-24(s0)
20404964:	fe442503          	lw	a0,-28(s0)
20404968:	e59ff0ef          	jal	ra,204047c0 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040496c:	4601                	li	a2,0
2040496e:	fe842583          	lw	a1,-24(s0)
20404972:	fcc42503          	lw	a0,-52(s0)
20404976:	db3ff0ef          	jal	ra,20404728 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2040497a:	fe442703          	lw	a4,-28(s0)
2040497e:	fe842783          	lw	a5,-24(s0)
20404982:	078a                	slli	a5,a5,0x2
20404984:	97ba                	add	a5,a5,a4
20404986:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2040498a:	fe442683          	lw	a3,-28(s0)
2040498e:	fe842703          	lw	a4,-24(s0)
20404992:	87ba                	mv	a5,a4
20404994:	0786                	slli	a5,a5,0x1
20404996:	97ba                	add	a5,a5,a4
20404998:	078e                	slli	a5,a5,0x3
2040499a:	97b6                	add	a5,a5,a3
2040499c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
204049a0:	fe442683          	lw	a3,-28(s0)
204049a4:	fe842703          	lw	a4,-24(s0)
204049a8:	87ba                	mv	a5,a4
204049aa:	0786                	slli	a5,a5,0x1
204049ac:	97ba                	add	a5,a5,a4
204049ae:	078e                	slli	a5,a5,0x3
204049b0:	97b6                	add	a5,a5,a3
204049b2:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204049b6:	fe842783          	lw	a5,-24(s0)
204049ba:	0785                	addi	a5,a5,1
204049bc:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204049c0:	fe842703          	lw	a4,-24(s0)
204049c4:	fe042783          	lw	a5,-32(s0)
204049c8:	f8f74be3          	blt	a4,a5,2040495e <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204049cc:	4581                	li	a1,0
204049ce:	fcc42503          	lw	a0,-52(s0)
204049d2:	cf3ff0ef          	jal	ra,204046c4 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204049d6:	fdc42783          	lw	a5,-36(s0)
204049da:	439c                	lw	a5,0(a5)
204049dc:	4fdc                	lw	a5,28(a5)
204049de:	fe442683          	lw	a3,-28(s0)
204049e2:	4601                	li	a2,0
204049e4:	fd842583          	lw	a1,-40(s0)
204049e8:	fdc42503          	lw	a0,-36(s0)
204049ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204049ee:	fdc42783          	lw	a5,-36(s0)
204049f2:	439c                	lw	a5,0(a5)
204049f4:	4fd8                	lw	a4,28(a5)
204049f6:	fe442683          	lw	a3,-28(s0)
204049fa:	204057b7          	lui	a5,0x20405
204049fe:	86678613          	addi	a2,a5,-1946 # 20404866 <__metal_plic0_handler>
20404a02:	fd842583          	lw	a1,-40(s0)
20404a06:	fdc42503          	lw	a0,-36(s0)
20404a0a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20404a0c:	fdc42783          	lw	a5,-36(s0)
20404a10:	439c                	lw	a5,0(a5)
20404a12:	53dc                	lw	a5,36(a5)
20404a14:	fd842583          	lw	a1,-40(s0)
20404a18:	fdc42503          	lw	a0,-36(s0)
20404a1c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404a1e:	fec42783          	lw	a5,-20(s0)
20404a22:	0785                	addi	a5,a5,1
20404a24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404a28:	fec42783          	lw	a5,-20(s0)
20404a2c:	eef059e3          	blez	a5,2040491e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404a30:	fe442783          	lw	a5,-28(s0)
20404a34:	4705                	li	a4,1
20404a36:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404a38:	0001                	nop
20404a3a:	50f2                	lw	ra,60(sp)
20404a3c:	5462                	lw	s0,56(sp)
20404a3e:	6121                	addi	sp,sp,64
20404a40:	8082                	ret

20404a42 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404a42:	7179                	addi	sp,sp,-48
20404a44:	d606                	sw	ra,44(sp)
20404a46:	d422                	sw	s0,40(sp)
20404a48:	1800                	addi	s0,sp,48
20404a4a:	fca42e23          	sw	a0,-36(s0)
20404a4e:	fcb42c23          	sw	a1,-40(s0)
20404a52:	fcc42a23          	sw	a2,-44(s0)
20404a56:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404a5a:	fdc42783          	lw	a5,-36(s0)
20404a5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404a62:	fdc42503          	lw	a0,-36(s0)
20404a66:	b5fff0ef          	jal	ra,204045c4 <__metal_driver_sifive_plic0_num_interrupts>
20404a6a:	872a                	mv	a4,a0
20404a6c:	fd842783          	lw	a5,-40(s0)
20404a70:	00e7c463          	blt	a5,a4,20404a78 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404a74:	57fd                	li	a5,-1
20404a76:	a051                	j	20404afa <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404a78:	fd442783          	lw	a5,-44(s0)
20404a7c:	cf9d                	beqz	a5,20404aba <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
20404a7e:	4609                	li	a2,2
20404a80:	fd842583          	lw	a1,-40(s0)
20404a84:	fdc42503          	lw	a0,-36(s0)
20404a88:	ca1ff0ef          	jal	ra,20404728 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404a8c:	fec42703          	lw	a4,-20(s0)
20404a90:	fd842783          	lw	a5,-40(s0)
20404a94:	078a                	slli	a5,a5,0x2
20404a96:	97ba                	add	a5,a5,a4
20404a98:	fd442703          	lw	a4,-44(s0)
20404a9c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
20404a9e:	fec42683          	lw	a3,-20(s0)
20404aa2:	fd842703          	lw	a4,-40(s0)
20404aa6:	87ba                	mv	a5,a4
20404aa8:	0786                	slli	a5,a5,0x1
20404aaa:	97ba                	add	a5,a5,a4
20404aac:	078e                	slli	a5,a5,0x3
20404aae:	97b6                	add	a5,a5,a3
20404ab0:	fd042703          	lw	a4,-48(s0)
20404ab4:	08e7a423          	sw	a4,136(a5)
20404ab8:	a081                	j	20404af8 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404aba:	4605                	li	a2,1
20404abc:	fd842583          	lw	a1,-40(s0)
20404ac0:	fdc42503          	lw	a0,-36(s0)
20404ac4:	c65ff0ef          	jal	ra,20404728 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404ac8:	fec42703          	lw	a4,-20(s0)
20404acc:	fd842783          	lw	a5,-40(s0)
20404ad0:	078a                	slli	a5,a5,0x2
20404ad2:	97ba                	add	a5,a5,a4
20404ad4:	20405737          	lui	a4,0x20405
20404ad8:	84e70713          	addi	a4,a4,-1970 # 2040484e <__metal_plic0_default_handler>
20404adc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
20404ade:	fec42683          	lw	a3,-20(s0)
20404ae2:	fd842703          	lw	a4,-40(s0)
20404ae6:	87ba                	mv	a5,a4
20404ae8:	0786                	slli	a5,a5,0x1
20404aea:	97ba                	add	a5,a5,a4
20404aec:	078e                	slli	a5,a5,0x3
20404aee:	97b6                	add	a5,a5,a3
20404af0:	fd042703          	lw	a4,-48(s0)
20404af4:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404af8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404afa:	853e                	mv	a0,a5
20404afc:	50b2                	lw	ra,44(sp)
20404afe:	5422                	lw	s0,40(sp)
20404b00:	6145                	addi	sp,sp,48
20404b02:	8082                	ret

20404b04 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404b04:	7179                	addi	sp,sp,-48
20404b06:	d606                	sw	ra,44(sp)
20404b08:	d422                	sw	s0,40(sp)
20404b0a:	1800                	addi	s0,sp,48
20404b0c:	fca42e23          	sw	a0,-36(s0)
20404b10:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404b14:	fdc42783          	lw	a5,-36(s0)
20404b18:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404b1c:	fdc42503          	lw	a0,-36(s0)
20404b20:	aa5ff0ef          	jal	ra,204045c4 <__metal_driver_sifive_plic0_num_interrupts>
20404b24:	872a                	mv	a4,a0
20404b26:	fd842783          	lw	a5,-40(s0)
20404b2a:	00e7c463          	blt	a5,a4,20404b32 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
20404b2e:	57fd                	li	a5,-1
20404b30:	a809                	j	20404b42 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404b32:	4605                	li	a2,1
20404b34:	fd842583          	lw	a1,-40(s0)
20404b38:	fec42503          	lw	a0,-20(s0)
20404b3c:	c85ff0ef          	jal	ra,204047c0 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404b40:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404b42:	853e                	mv	a0,a5
20404b44:	50b2                	lw	ra,44(sp)
20404b46:	5422                	lw	s0,40(sp)
20404b48:	6145                	addi	sp,sp,48
20404b4a:	8082                	ret

20404b4c <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404b4c:	7179                	addi	sp,sp,-48
20404b4e:	d606                	sw	ra,44(sp)
20404b50:	d422                	sw	s0,40(sp)
20404b52:	1800                	addi	s0,sp,48
20404b54:	fca42e23          	sw	a0,-36(s0)
20404b58:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404b5c:	fdc42783          	lw	a5,-36(s0)
20404b60:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404b64:	fdc42503          	lw	a0,-36(s0)
20404b68:	a5dff0ef          	jal	ra,204045c4 <__metal_driver_sifive_plic0_num_interrupts>
20404b6c:	872a                	mv	a4,a0
20404b6e:	fd842783          	lw	a5,-40(s0)
20404b72:	00e7c463          	blt	a5,a4,20404b7a <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404b76:	57fd                	li	a5,-1
20404b78:	a809                	j	20404b8a <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404b7a:	4601                	li	a2,0
20404b7c:	fd842583          	lw	a1,-40(s0)
20404b80:	fec42503          	lw	a0,-20(s0)
20404b84:	c3dff0ef          	jal	ra,204047c0 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404b88:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404b8a:	853e                	mv	a0,a5
20404b8c:	50b2                	lw	ra,44(sp)
20404b8e:	5422                	lw	s0,40(sp)
20404b90:	6145                	addi	sp,sp,48
20404b92:	8082                	ret

20404b94 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404b94:	1101                	addi	sp,sp,-32
20404b96:	ce22                	sw	s0,28(sp)
20404b98:	1000                	addi	s0,sp,32
20404b9a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404b9e:	fec42703          	lw	a4,-20(s0)
20404ba2:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ba6:	00f71563          	bne	a4,a5,20404bb0 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404baa:	100127b7          	lui	a5,0x10012
20404bae:	a011                	j	20404bb2 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404bb0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:395
	}
}
20404bb2:	853e                	mv	a0,a5
20404bb4:	4472                	lw	s0,28(sp)
20404bb6:	6105                	addi	sp,sp,32
20404bb8:	8082                	ret

20404bba <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404bba:	1101                	addi	sp,sp,-32
20404bbc:	ce22                	sw	s0,28(sp)
20404bbe:	1000                	addi	s0,sp,32
20404bc0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404bc4:	fec42703          	lw	a4,-20(s0)
20404bc8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404bcc:	00f71763          	bne	a4,a5,20404bda <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404bd0:	800017b7          	lui	a5,0x80001
20404bd4:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20404bd8:	a011                	j	20404bdc <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404bda:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:425
	}
}
20404bdc:	853e                	mv	a0,a5
20404bde:	4472                	lw	s0,28(sp)
20404be0:	6105                	addi	sp,sp,32
20404be2:	8082                	ret

20404be4 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404be4:	1101                	addi	sp,sp,-32
20404be6:	ce22                	sw	s0,28(sp)
20404be8:	1000                	addi	s0,sp,32
20404bea:	fea42623          	sw	a0,-20(s0)
20404bee:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404bf2:	fec42703          	lw	a4,-20(s0)
20404bf6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404bfa:	00f71763          	bne	a4,a5,20404c08 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429 (discriminator 1)
20404bfe:	fe842783          	lw	a5,-24(s0)
20404c02:	e399                	bnez	a5,20404c08 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:430
		return 7;
20404c04:	479d                	li	a5,7
20404c06:	a269                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404c08:	fec42703          	lw	a4,-20(s0)
20404c0c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404c10:	00f71963          	bne	a4,a5,20404c22 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:432 (discriminator 1)
20404c14:	fe842703          	lw	a4,-24(s0)
20404c18:	4785                	li	a5,1
20404c1a:	00f71463          	bne	a4,a5,20404c22 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:433
		return 8;
20404c1e:	47a1                	li	a5,8
20404c20:	aa85                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404c22:	fec42703          	lw	a4,-20(s0)
20404c26:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404c2a:	00f71963          	bne	a4,a5,20404c3c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:435 (discriminator 1)
20404c2e:	fe842703          	lw	a4,-24(s0)
20404c32:	4789                	li	a5,2
20404c34:	00f71463          	bne	a4,a5,20404c3c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:436
		return 9;
20404c38:	47a5                	li	a5,9
20404c3a:	aa99                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404c3c:	fec42703          	lw	a4,-20(s0)
20404c40:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404c44:	00f71963          	bne	a4,a5,20404c56 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:438 (discriminator 1)
20404c48:	fe842703          	lw	a4,-24(s0)
20404c4c:	478d                	li	a5,3
20404c4e:	00f71463          	bne	a4,a5,20404c56 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:439
		return 10;
20404c52:	47a9                	li	a5,10
20404c54:	aa35                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404c56:	fec42703          	lw	a4,-20(s0)
20404c5a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404c5e:	00f71963          	bne	a4,a5,20404c70 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:441 (discriminator 1)
20404c62:	fe842703          	lw	a4,-24(s0)
20404c66:	4791                	li	a5,4
20404c68:	00f71463          	bne	a4,a5,20404c70 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:442
		return 11;
20404c6c:	47ad                	li	a5,11
20404c6e:	a20d                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404c70:	fec42703          	lw	a4,-20(s0)
20404c74:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404c78:	00f71963          	bne	a4,a5,20404c8a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:444 (discriminator 1)
20404c7c:	fe842703          	lw	a4,-24(s0)
20404c80:	4795                	li	a5,5
20404c82:	00f71463          	bne	a4,a5,20404c8a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:445
		return 12;
20404c86:	47b1                	li	a5,12
20404c88:	a221                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404c8a:	fec42703          	lw	a4,-20(s0)
20404c8e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404c92:	00f71963          	bne	a4,a5,20404ca4 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:447 (discriminator 1)
20404c96:	fe842703          	lw	a4,-24(s0)
20404c9a:	4799                	li	a5,6
20404c9c:	00f71463          	bne	a4,a5,20404ca4 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:448
		return 13;
20404ca0:	47b5                	li	a5,13
20404ca2:	a0fd                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404ca4:	fec42703          	lw	a4,-20(s0)
20404ca8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404cac:	00f71963          	bne	a4,a5,20404cbe <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:450 (discriminator 1)
20404cb0:	fe842703          	lw	a4,-24(s0)
20404cb4:	479d                	li	a5,7
20404cb6:	00f71463          	bne	a4,a5,20404cbe <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:451
		return 14;
20404cba:	47b9                	li	a5,14
20404cbc:	a8d1                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20404cbe:	fec42703          	lw	a4,-20(s0)
20404cc2:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404cc6:	00f71963          	bne	a4,a5,20404cd8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453 (discriminator 1)
20404cca:	fe842703          	lw	a4,-24(s0)
20404cce:	47a1                	li	a5,8
20404cd0:	00f71463          	bne	a4,a5,20404cd8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return 15;
20404cd4:	47bd                	li	a5,15
20404cd6:	a86d                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404cd8:	fec42703          	lw	a4,-20(s0)
20404cdc:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ce0:	00f71963          	bne	a4,a5,20404cf2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:456 (discriminator 1)
20404ce4:	fe842703          	lw	a4,-24(s0)
20404ce8:	47a5                	li	a5,9
20404cea:	00f71463          	bne	a4,a5,20404cf2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
		return 16;
20404cee:	47c1                	li	a5,16
20404cf0:	a045                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404cf2:	fec42703          	lw	a4,-20(s0)
20404cf6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404cfa:	00f71963          	bne	a4,a5,20404d0c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459 (discriminator 1)
20404cfe:	fe842703          	lw	a4,-24(s0)
20404d02:	47a9                	li	a5,10
20404d04:	00f71463          	bne	a4,a5,20404d0c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:460
		return 17;
20404d08:	47c5                	li	a5,17
20404d0a:	a059                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20404d0c:	fec42703          	lw	a4,-20(s0)
20404d10:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404d14:	00f71963          	bne	a4,a5,20404d26 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462 (discriminator 1)
20404d18:	fe842703          	lw	a4,-24(s0)
20404d1c:	47ad                	li	a5,11
20404d1e:	00f71463          	bne	a4,a5,20404d26 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
		return 18;
20404d22:	47c9                	li	a5,18
20404d24:	a0b5                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404d26:	fec42703          	lw	a4,-20(s0)
20404d2a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404d2e:	00f71963          	bne	a4,a5,20404d40 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:465 (discriminator 1)
20404d32:	fe842703          	lw	a4,-24(s0)
20404d36:	47b1                	li	a5,12
20404d38:	00f71463          	bne	a4,a5,20404d40 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
		return 19;
20404d3c:	47cd                	li	a5,19
20404d3e:	a889                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404d40:	fec42703          	lw	a4,-20(s0)
20404d44:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404d48:	00f71963          	bne	a4,a5,20404d5a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:468 (discriminator 1)
20404d4c:	fe842703          	lw	a4,-24(s0)
20404d50:	47b5                	li	a5,13
20404d52:	00f71463          	bne	a4,a5,20404d5a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
		return 20;
20404d56:	47d1                	li	a5,20
20404d58:	a825                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404d5a:	fec42703          	lw	a4,-20(s0)
20404d5e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404d62:	00f71963          	bne	a4,a5,20404d74 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:471 (discriminator 1)
20404d66:	fe842703          	lw	a4,-24(s0)
20404d6a:	47b9                	li	a5,14
20404d6c:	00f71463          	bne	a4,a5,20404d74 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
		return 21;
20404d70:	47d5                	li	a5,21
20404d72:	a839                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404d74:	fec42703          	lw	a4,-20(s0)
20404d78:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404d7c:	00f71963          	bne	a4,a5,20404d8e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:474 (discriminator 1)
20404d80:	fe842703          	lw	a4,-24(s0)
20404d84:	47bd                	li	a5,15
20404d86:	00f71463          	bne	a4,a5,20404d8e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
		return 22;
20404d8a:	47d9                	li	a5,22
20404d8c:	a011                	j	20404d90 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
20404d8e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:480
	}
}
20404d90:	853e                	mv	a0,a5
20404d92:	4472                	lw	s0,28(sp)
20404d94:	6105                	addi	sp,sp,32
20404d96:	8082                	ret

20404d98 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404d98:	7179                	addi	sp,sp,-48
20404d9a:	d606                	sw	ra,44(sp)
20404d9c:	d422                	sw	s0,40(sp)
20404d9e:	1800                	addi	s0,sp,48
20404da0:	fca42e23          	sw	a0,-36(s0)
20404da4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404da8:	fdc42503          	lw	a0,-36(s0)
20404dac:	de9ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404db0:	87aa                	mv	a5,a0
20404db2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404db6:	fec42783          	lw	a5,-20(s0)
20404dba:	0791                	addi	a5,a5,4
20404dbc:	4398                	lw	a4,0(a5)
20404dbe:	fd842783          	lw	a5,-40(s0)
20404dc2:	fec42683          	lw	a3,-20(s0)
20404dc6:	0691                	addi	a3,a3,4
20404dc8:	8fd9                	or	a5,a5,a4
20404dca:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404dcc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20404dce:	853e                	mv	a0,a5
20404dd0:	50b2                	lw	ra,44(sp)
20404dd2:	5422                	lw	s0,40(sp)
20404dd4:	6145                	addi	sp,sp,48
20404dd6:	8082                	ret

20404dd8 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404dd8:	7179                	addi	sp,sp,-48
20404dda:	d606                	sw	ra,44(sp)
20404ddc:	d422                	sw	s0,40(sp)
20404dde:	1800                	addi	s0,sp,48
20404de0:	fca42e23          	sw	a0,-36(s0)
20404de4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404de8:	fdc42503          	lw	a0,-36(s0)
20404dec:	da9ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404df0:	87aa                	mv	a5,a0
20404df2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404df6:	fec42783          	lw	a5,-20(s0)
20404dfa:	0791                	addi	a5,a5,4
20404dfc:	439c                	lw	a5,0(a5)
20404dfe:	fd842703          	lw	a4,-40(s0)
20404e02:	fff74713          	not	a4,a4
20404e06:	86ba                	mv	a3,a4
20404e08:	fec42703          	lw	a4,-20(s0)
20404e0c:	0711                	addi	a4,a4,4
20404e0e:	8ff5                	and	a5,a5,a3
20404e10:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404e12:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404e14:	853e                	mv	a0,a5
20404e16:	50b2                	lw	ra,44(sp)
20404e18:	5422                	lw	s0,40(sp)
20404e1a:	6145                	addi	sp,sp,48
20404e1c:	8082                	ret

20404e1e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404e1e:	7179                	addi	sp,sp,-48
20404e20:	d606                	sw	ra,44(sp)
20404e22:	d422                	sw	s0,40(sp)
20404e24:	1800                	addi	s0,sp,48
20404e26:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404e2a:	fdc42503          	lw	a0,-36(s0)
20404e2e:	d67ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404e32:	87aa                	mv	a5,a0
20404e34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404e38:	fec42783          	lw	a5,-20(s0)
20404e3c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404e3e:	853e                	mv	a0,a5
20404e40:	50b2                	lw	ra,44(sp)
20404e42:	5422                	lw	s0,40(sp)
20404e44:	6145                	addi	sp,sp,48
20404e46:	8082                	ret

20404e48 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404e48:	7179                	addi	sp,sp,-48
20404e4a:	d606                	sw	ra,44(sp)
20404e4c:	d422                	sw	s0,40(sp)
20404e4e:	1800                	addi	s0,sp,48
20404e50:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404e54:	fdc42503          	lw	a0,-36(s0)
20404e58:	d3dff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404e5c:	87aa                	mv	a5,a0
20404e5e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404e62:	fec42783          	lw	a5,-20(s0)
20404e66:	07b1                	addi	a5,a5,12
20404e68:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404e6a:	853e                	mv	a0,a5
20404e6c:	50b2                	lw	ra,44(sp)
20404e6e:	5422                	lw	s0,40(sp)
20404e70:	6145                	addi	sp,sp,48
20404e72:	8082                	ret

20404e74 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404e74:	7179                	addi	sp,sp,-48
20404e76:	d606                	sw	ra,44(sp)
20404e78:	d422                	sw	s0,40(sp)
20404e7a:	1800                	addi	s0,sp,48
20404e7c:	fca42e23          	sw	a0,-36(s0)
20404e80:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404e84:	fdc42503          	lw	a0,-36(s0)
20404e88:	d0dff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404e8c:	87aa                	mv	a5,a0
20404e8e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404e92:	fec42783          	lw	a5,-20(s0)
20404e96:	07a1                	addi	a5,a5,8
20404e98:	439c                	lw	a5,0(a5)
20404e9a:	fd842703          	lw	a4,-40(s0)
20404e9e:	fff74713          	not	a4,a4
20404ea2:	86ba                	mv	a3,a4
20404ea4:	fec42703          	lw	a4,-20(s0)
20404ea8:	0721                	addi	a4,a4,8
20404eaa:	8ff5                	and	a5,a5,a3
20404eac:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404eae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404eb0:	853e                	mv	a0,a5
20404eb2:	50b2                	lw	ra,44(sp)
20404eb4:	5422                	lw	s0,40(sp)
20404eb6:	6145                	addi	sp,sp,48
20404eb8:	8082                	ret

20404eba <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404eba:	7179                	addi	sp,sp,-48
20404ebc:	d606                	sw	ra,44(sp)
20404ebe:	d422                	sw	s0,40(sp)
20404ec0:	1800                	addi	s0,sp,48
20404ec2:	fca42e23          	sw	a0,-36(s0)
20404ec6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404eca:	fdc42503          	lw	a0,-36(s0)
20404ece:	cc7ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404ed2:	87aa                	mv	a5,a0
20404ed4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404ed8:	fec42783          	lw	a5,-20(s0)
20404edc:	07a1                	addi	a5,a5,8
20404ede:	4398                	lw	a4,0(a5)
20404ee0:	fd842783          	lw	a5,-40(s0)
20404ee4:	fec42683          	lw	a3,-20(s0)
20404ee8:	06a1                	addi	a3,a3,8
20404eea:	8fd9                	or	a5,a5,a4
20404eec:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404eee:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404ef0:	853e                	mv	a0,a5
20404ef2:	50b2                	lw	ra,44(sp)
20404ef4:	5422                	lw	s0,40(sp)
20404ef6:	6145                	addi	sp,sp,48
20404ef8:	8082                	ret

20404efa <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404efa:	7179                	addi	sp,sp,-48
20404efc:	d606                	sw	ra,44(sp)
20404efe:	d422                	sw	s0,40(sp)
20404f00:	1800                	addi	s0,sp,48
20404f02:	fca42e23          	sw	a0,-36(s0)
20404f06:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404f0a:	fdc42503          	lw	a0,-36(s0)
20404f0e:	c87ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404f12:	87aa                	mv	a5,a0
20404f14:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404f18:	fec42783          	lw	a5,-20(s0)
20404f1c:	07b1                	addi	a5,a5,12
20404f1e:	4398                	lw	a4,0(a5)
20404f20:	fd842783          	lw	a5,-40(s0)
20404f24:	fec42683          	lw	a3,-20(s0)
20404f28:	06b1                	addi	a3,a3,12
20404f2a:	8fd9                	or	a5,a5,a4
20404f2c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404f2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404f30:	853e                	mv	a0,a5
20404f32:	50b2                	lw	ra,44(sp)
20404f34:	5422                	lw	s0,40(sp)
20404f36:	6145                	addi	sp,sp,48
20404f38:	8082                	ret

20404f3a <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404f3a:	7179                	addi	sp,sp,-48
20404f3c:	d606                	sw	ra,44(sp)
20404f3e:	d422                	sw	s0,40(sp)
20404f40:	1800                	addi	s0,sp,48
20404f42:	fca42e23          	sw	a0,-36(s0)
20404f46:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404f4a:	fdc42503          	lw	a0,-36(s0)
20404f4e:	c47ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404f52:	87aa                	mv	a5,a0
20404f54:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404f58:	fec42783          	lw	a5,-20(s0)
20404f5c:	07b1                	addi	a5,a5,12
20404f5e:	439c                	lw	a5,0(a5)
20404f60:	fd842703          	lw	a4,-40(s0)
20404f64:	fff74713          	not	a4,a4
20404f68:	86ba                	mv	a3,a4
20404f6a:	fec42703          	lw	a4,-20(s0)
20404f6e:	0731                	addi	a4,a4,12
20404f70:	8ff5                	and	a5,a5,a3
20404f72:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404f74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404f76:	853e                	mv	a0,a5
20404f78:	50b2                	lw	ra,44(sp)
20404f7a:	5422                	lw	s0,40(sp)
20404f7c:	6145                	addi	sp,sp,48
20404f7e:	8082                	ret

20404f80 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404f80:	7179                	addi	sp,sp,-48
20404f82:	d606                	sw	ra,44(sp)
20404f84:	d422                	sw	s0,40(sp)
20404f86:	1800                	addi	s0,sp,48
20404f88:	fca42e23          	sw	a0,-36(s0)
20404f8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404f90:	fdc42503          	lw	a0,-36(s0)
20404f94:	c01ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404f98:	87aa                	mv	a5,a0
20404f9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404f9e:	fec42783          	lw	a5,-20(s0)
20404fa2:	07b1                	addi	a5,a5,12
20404fa4:	4398                	lw	a4,0(a5)
20404fa6:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404faa:	fec42683          	lw	a3,-20(s0)
20404fae:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404fb0:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404fb2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404fb4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404fb6:	853e                	mv	a0,a5
20404fb8:	50b2                	lw	ra,44(sp)
20404fba:	5422                	lw	s0,40(sp)
20404fbc:	6145                	addi	sp,sp,48
20404fbe:	8082                	ret

20404fc0 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404fc0:	7179                	addi	sp,sp,-48
20404fc2:	d606                	sw	ra,44(sp)
20404fc4:	d422                	sw	s0,40(sp)
20404fc6:	1800                	addi	s0,sp,48
20404fc8:	fca42e23          	sw	a0,-36(s0)
20404fcc:	fcb42c23          	sw	a1,-40(s0)
20404fd0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404fd4:	fdc42503          	lw	a0,-36(s0)
20404fd8:	bbdff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20404fdc:	87aa                	mv	a5,a0
20404fde:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404fe2:	fec42783          	lw	a5,-20(s0)
20404fe6:	03c78793          	addi	a5,a5,60
20404fea:	439c                	lw	a5,0(a5)
20404fec:	fd842703          	lw	a4,-40(s0)
20404ff0:	fff74713          	not	a4,a4
20404ff4:	86ba                	mv	a3,a4
20404ff6:	fec42703          	lw	a4,-20(s0)
20404ffa:	03c70713          	addi	a4,a4,60
20404ffe:	8ff5                	and	a5,a5,a3
20405000:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20405002:	fec42783          	lw	a5,-20(s0)
20405006:	03878793          	addi	a5,a5,56
2040500a:	4398                	lw	a4,0(a5)
2040500c:	fd442783          	lw	a5,-44(s0)
20405010:	fec42683          	lw	a3,-20(s0)
20405014:	03868693          	addi	a3,a3,56
20405018:	8fd9                	or	a5,a5,a4
2040501a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
2040501c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040501e:	853e                	mv	a0,a5
20405020:	50b2                	lw	ra,44(sp)
20405022:	5422                	lw	s0,40(sp)
20405024:	6145                	addi	sp,sp,48
20405026:	8082                	ret

20405028 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20405028:	7179                	addi	sp,sp,-48
2040502a:	d606                	sw	ra,44(sp)
2040502c:	d422                	sw	s0,40(sp)
2040502e:	1800                	addi	s0,sp,48
20405030:	fca42e23          	sw	a0,-36(s0)
20405034:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405038:	fdc42503          	lw	a0,-36(s0)
2040503c:	b59ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20405040:	87aa                	mv	a5,a0
20405042:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20405046:	fec42783          	lw	a5,-20(s0)
2040504a:	03878793          	addi	a5,a5,56
2040504e:	439c                	lw	a5,0(a5)
20405050:	fd842703          	lw	a4,-40(s0)
20405054:	fff74713          	not	a4,a4
20405058:	86ba                	mv	a3,a4
2040505a:	fec42703          	lw	a4,-20(s0)
2040505e:	03870713          	addi	a4,a4,56
20405062:	8ff5                	and	a5,a5,a3
20405064:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20405066:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20405068:	853e                	mv	a0,a5
2040506a:	50b2                	lw	ra,44(sp)
2040506c:	5422                	lw	s0,40(sp)
2040506e:	6145                	addi	sp,sp,48
20405070:	8082                	ret

20405072 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20405072:	7179                	addi	sp,sp,-48
20405074:	d606                	sw	ra,44(sp)
20405076:	d422                	sw	s0,40(sp)
20405078:	1800                	addi	s0,sp,48
2040507a:	fca42e23          	sw	a0,-36(s0)
2040507e:	fcb42c23          	sw	a1,-40(s0)
20405082:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20405086:	fdc42503          	lw	a0,-36(s0)
2040508a:	b0bff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
2040508e:	87aa                	mv	a5,a0
20405090:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20405094:	fd442703          	lw	a4,-44(s0)
20405098:	479d                	li	a5,7
2040509a:	1ce7e963          	bltu	a5,a4,2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
2040509e:	fd442783          	lw	a5,-44(s0)
204050a2:	00279713          	slli	a4,a5,0x2
204050a6:	204067b7          	lui	a5,0x20406
204050aa:	fb078793          	addi	a5,a5,-80 # 20405fb0 <__metal_driver_vtable_riscv_plic0+0x4c>
204050ae:	97ba                	add	a5,a5,a4
204050b0:	439c                	lw	a5,0(a5)
204050b2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
204050b4:	fec42783          	lw	a5,-20(s0)
204050b8:	07e1                	addi	a5,a5,24
204050ba:	439c                	lw	a5,0(a5)
204050bc:	fd842703          	lw	a4,-40(s0)
204050c0:	fff74713          	not	a4,a4
204050c4:	86ba                	mv	a3,a4
204050c6:	fec42703          	lw	a4,-20(s0)
204050ca:	0761                	addi	a4,a4,24
204050cc:	8ff5                	and	a5,a5,a3
204050ce:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204050d0:	fec42783          	lw	a5,-20(s0)
204050d4:	02078793          	addi	a5,a5,32
204050d8:	439c                	lw	a5,0(a5)
204050da:	fd842703          	lw	a4,-40(s0)
204050de:	fff74713          	not	a4,a4
204050e2:	86ba                	mv	a3,a4
204050e4:	fec42703          	lw	a4,-20(s0)
204050e8:	02070713          	addi	a4,a4,32
204050ec:	8ff5                	and	a5,a5,a3
204050ee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204050f0:	fec42783          	lw	a5,-20(s0)
204050f4:	02878793          	addi	a5,a5,40
204050f8:	439c                	lw	a5,0(a5)
204050fa:	fd842703          	lw	a4,-40(s0)
204050fe:	fff74713          	not	a4,a4
20405102:	86ba                	mv	a3,a4
20405104:	fec42703          	lw	a4,-20(s0)
20405108:	02870713          	addi	a4,a4,40
2040510c:	8ff5                	and	a5,a5,a3
2040510e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20405110:	fec42783          	lw	a5,-20(s0)
20405114:	03078793          	addi	a5,a5,48
20405118:	439c                	lw	a5,0(a5)
2040511a:	fd842703          	lw	a4,-40(s0)
2040511e:	fff74713          	not	a4,a4
20405122:	86ba                	mv	a3,a4
20405124:	fec42703          	lw	a4,-20(s0)
20405128:	03070713          	addi	a4,a4,48
2040512c:	8ff5                	and	a5,a5,a3
2040512e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20405130:	aa35                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20405132:	fec42783          	lw	a5,-20(s0)
20405136:	07e1                	addi	a5,a5,24
20405138:	4398                	lw	a4,0(a5)
2040513a:	fd842783          	lw	a5,-40(s0)
2040513e:	fec42683          	lw	a3,-20(s0)
20405142:	06e1                	addi	a3,a3,24
20405144:	8fd9                	or	a5,a5,a4
20405146:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20405148:	a215                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040514a:	fec42783          	lw	a5,-20(s0)
2040514e:	02078793          	addi	a5,a5,32
20405152:	4398                	lw	a4,0(a5)
20405154:	fd842783          	lw	a5,-40(s0)
20405158:	fec42683          	lw	a3,-20(s0)
2040515c:	02068693          	addi	a3,a3,32
20405160:	8fd9                	or	a5,a5,a4
20405162:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20405164:	a221                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20405166:	fec42783          	lw	a5,-20(s0)
2040516a:	07e1                	addi	a5,a5,24
2040516c:	4398                	lw	a4,0(a5)
2040516e:	fd842783          	lw	a5,-40(s0)
20405172:	fec42683          	lw	a3,-20(s0)
20405176:	06e1                	addi	a3,a3,24
20405178:	8fd9                	or	a5,a5,a4
2040517a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040517c:	fec42783          	lw	a5,-20(s0)
20405180:	02078793          	addi	a5,a5,32
20405184:	4398                	lw	a4,0(a5)
20405186:	fd842783          	lw	a5,-40(s0)
2040518a:	fec42683          	lw	a3,-20(s0)
2040518e:	02068693          	addi	a3,a3,32
20405192:	8fd9                	or	a5,a5,a4
20405194:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20405196:	a8d9                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405198:	fec42783          	lw	a5,-20(s0)
2040519c:	02878793          	addi	a5,a5,40
204051a0:	4398                	lw	a4,0(a5)
204051a2:	fd842783          	lw	a5,-40(s0)
204051a6:	fec42683          	lw	a3,-20(s0)
204051aa:	02868693          	addi	a3,a3,40
204051ae:	8fd9                	or	a5,a5,a4
204051b0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
204051b2:	a86d                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204051b4:	fec42783          	lw	a5,-20(s0)
204051b8:	03078793          	addi	a5,a5,48
204051bc:	4398                	lw	a4,0(a5)
204051be:	fd842783          	lw	a5,-40(s0)
204051c2:	fec42683          	lw	a3,-20(s0)
204051c6:	03068693          	addi	a3,a3,48
204051ca:	8fd9                	or	a5,a5,a4
204051cc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204051ce:	a879                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204051d0:	fec42783          	lw	a5,-20(s0)
204051d4:	02878793          	addi	a5,a5,40
204051d8:	4398                	lw	a4,0(a5)
204051da:	fd842783          	lw	a5,-40(s0)
204051de:	fec42683          	lw	a3,-20(s0)
204051e2:	02868693          	addi	a3,a3,40
204051e6:	8fd9                	or	a5,a5,a4
204051e8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204051ea:	fec42783          	lw	a5,-20(s0)
204051ee:	03078793          	addi	a5,a5,48
204051f2:	4398                	lw	a4,0(a5)
204051f4:	fd842783          	lw	a5,-40(s0)
204051f8:	fec42683          	lw	a3,-20(s0)
204051fc:	03068693          	addi	a3,a3,48
20405200:	8fd9                	or	a5,a5,a4
20405202:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20405204:	a0a5                	j	2040526c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20405206:	fec42783          	lw	a5,-20(s0)
2040520a:	07e1                	addi	a5,a5,24
2040520c:	4398                	lw	a4,0(a5)
2040520e:	fd842783          	lw	a5,-40(s0)
20405212:	fec42683          	lw	a3,-20(s0)
20405216:	06e1                	addi	a3,a3,24
20405218:	8fd9                	or	a5,a5,a4
2040521a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040521c:	fec42783          	lw	a5,-20(s0)
20405220:	02078793          	addi	a5,a5,32
20405224:	4398                	lw	a4,0(a5)
20405226:	fd842783          	lw	a5,-40(s0)
2040522a:	fec42683          	lw	a3,-20(s0)
2040522e:	02068693          	addi	a3,a3,32
20405232:	8fd9                	or	a5,a5,a4
20405234:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405236:	fec42783          	lw	a5,-20(s0)
2040523a:	02878793          	addi	a5,a5,40
2040523e:	4398                	lw	a4,0(a5)
20405240:	fd842783          	lw	a5,-40(s0)
20405244:	fec42683          	lw	a3,-20(s0)
20405248:	02868693          	addi	a3,a3,40
2040524c:	8fd9                	or	a5,a5,a4
2040524e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20405250:	fec42783          	lw	a5,-20(s0)
20405254:	03078793          	addi	a5,a5,48
20405258:	4398                	lw	a4,0(a5)
2040525a:	fd842783          	lw	a5,-40(s0)
2040525e:	fec42683          	lw	a3,-20(s0)
20405262:	03068693          	addi	a3,a3,48
20405266:	8fd9                	or	a5,a5,a4
20405268:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
2040526a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
2040526c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
2040526e:	853e                	mv	a0,a5
20405270:	50b2                	lw	ra,44(sp)
20405272:	5422                	lw	s0,40(sp)
20405274:	6145                	addi	sp,sp,48
20405276:	8082                	ret

20405278 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20405278:	7179                	addi	sp,sp,-48
2040527a:	d606                	sw	ra,44(sp)
2040527c:	d422                	sw	s0,40(sp)
2040527e:	1800                	addi	s0,sp,48
20405280:	fca42e23          	sw	a0,-36(s0)
20405284:	fcb42c23          	sw	a1,-40(s0)
20405288:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040528c:	fdc42503          	lw	a0,-36(s0)
20405290:	905ff0ef          	jal	ra,20404b94 <__metal_driver_sifive_gpio0_base>
20405294:	87aa                	mv	a5,a0
20405296:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
2040529a:	fd442703          	lw	a4,-44(s0)
2040529e:	479d                	li	a5,7
204052a0:	14e7ea63          	bltu	a5,a4,204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
204052a4:	fd442783          	lw	a5,-44(s0)
204052a8:	00279713          	slli	a4,a5,0x2
204052ac:	204067b7          	lui	a5,0x20406
204052b0:	fd078793          	addi	a5,a5,-48 # 20405fd0 <__metal_driver_vtable_riscv_plic0+0x6c>
204052b4:	97ba                	add	a5,a5,a4
204052b6:	439c                	lw	a5,0(a5)
204052b8:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204052ba:	fec42783          	lw	a5,-20(s0)
204052be:	07f1                	addi	a5,a5,28
204052c0:	4398                	lw	a4,0(a5)
204052c2:	fd842783          	lw	a5,-40(s0)
204052c6:	fec42683          	lw	a3,-20(s0)
204052ca:	06f1                	addi	a3,a3,28
204052cc:	8fd9                	or	a5,a5,a4
204052ce:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204052d0:	a215                	j	204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204052d2:	fec42783          	lw	a5,-20(s0)
204052d6:	02478793          	addi	a5,a5,36
204052da:	4398                	lw	a4,0(a5)
204052dc:	fd842783          	lw	a5,-40(s0)
204052e0:	fec42683          	lw	a3,-20(s0)
204052e4:	02468693          	addi	a3,a3,36
204052e8:	8fd9                	or	a5,a5,a4
204052ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204052ec:	a221                	j	204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204052ee:	fec42783          	lw	a5,-20(s0)
204052f2:	07f1                	addi	a5,a5,28
204052f4:	4398                	lw	a4,0(a5)
204052f6:	fd842783          	lw	a5,-40(s0)
204052fa:	fec42683          	lw	a3,-20(s0)
204052fe:	06f1                	addi	a3,a3,28
20405300:	8fd9                	or	a5,a5,a4
20405302:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405304:	fec42783          	lw	a5,-20(s0)
20405308:	02478793          	addi	a5,a5,36
2040530c:	4398                	lw	a4,0(a5)
2040530e:	fd842783          	lw	a5,-40(s0)
20405312:	fec42683          	lw	a3,-20(s0)
20405316:	02468693          	addi	a3,a3,36
2040531a:	8fd9                	or	a5,a5,a4
2040531c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040531e:	a8d9                	j	204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405320:	fec42783          	lw	a5,-20(s0)
20405324:	02c78793          	addi	a5,a5,44
20405328:	4398                	lw	a4,0(a5)
2040532a:	fd842783          	lw	a5,-40(s0)
2040532e:	fec42683          	lw	a3,-20(s0)
20405332:	02c68693          	addi	a3,a3,44
20405336:	8fd9                	or	a5,a5,a4
20405338:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
2040533a:	a86d                	j	204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
2040533c:	fec42783          	lw	a5,-20(s0)
20405340:	03478793          	addi	a5,a5,52
20405344:	4398                	lw	a4,0(a5)
20405346:	fd842783          	lw	a5,-40(s0)
2040534a:	fec42683          	lw	a3,-20(s0)
2040534e:	03468693          	addi	a3,a3,52
20405352:	8fd9                	or	a5,a5,a4
20405354:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20405356:	a879                	j	204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405358:	fec42783          	lw	a5,-20(s0)
2040535c:	02c78793          	addi	a5,a5,44
20405360:	4398                	lw	a4,0(a5)
20405362:	fd842783          	lw	a5,-40(s0)
20405366:	fec42683          	lw	a3,-20(s0)
2040536a:	02c68693          	addi	a3,a3,44
2040536e:	8fd9                	or	a5,a5,a4
20405370:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20405372:	fec42783          	lw	a5,-20(s0)
20405376:	03478793          	addi	a5,a5,52
2040537a:	4398                	lw	a4,0(a5)
2040537c:	fd842783          	lw	a5,-40(s0)
20405380:	fec42683          	lw	a3,-20(s0)
20405384:	03468693          	addi	a3,a3,52
20405388:	8fd9                	or	a5,a5,a4
2040538a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
2040538c:	a0a5                	j	204053f4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040538e:	fec42783          	lw	a5,-20(s0)
20405392:	07f1                	addi	a5,a5,28
20405394:	4398                	lw	a4,0(a5)
20405396:	fd842783          	lw	a5,-40(s0)
2040539a:	fec42683          	lw	a3,-20(s0)
2040539e:	06f1                	addi	a3,a3,28
204053a0:	8fd9                	or	a5,a5,a4
204053a2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204053a4:	fec42783          	lw	a5,-20(s0)
204053a8:	02478793          	addi	a5,a5,36
204053ac:	4398                	lw	a4,0(a5)
204053ae:	fd842783          	lw	a5,-40(s0)
204053b2:	fec42683          	lw	a3,-20(s0)
204053b6:	02468693          	addi	a3,a3,36
204053ba:	8fd9                	or	a5,a5,a4
204053bc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204053be:	fec42783          	lw	a5,-20(s0)
204053c2:	02c78793          	addi	a5,a5,44
204053c6:	4398                	lw	a4,0(a5)
204053c8:	fd842783          	lw	a5,-40(s0)
204053cc:	fec42683          	lw	a3,-20(s0)
204053d0:	02c68693          	addi	a3,a3,44
204053d4:	8fd9                	or	a5,a5,a4
204053d6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204053d8:	fec42783          	lw	a5,-20(s0)
204053dc:	03478793          	addi	a5,a5,52
204053e0:	4398                	lw	a4,0(a5)
204053e2:	fd842783          	lw	a5,-40(s0)
204053e6:	fec42683          	lw	a3,-20(s0)
204053ea:	03468693          	addi	a3,a3,52
204053ee:	8fd9                	or	a5,a5,a4
204053f0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204053f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
204053f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
204053f6:	853e                	mv	a0,a5
204053f8:	50b2                	lw	ra,44(sp)
204053fa:	5422                	lw	s0,40(sp)
204053fc:	6145                	addi	sp,sp,48
204053fe:	8082                	ret

20405400 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20405400:	1101                	addi	sp,sp,-32
20405402:	ce06                	sw	ra,28(sp)
20405404:	cc22                	sw	s0,24(sp)
20405406:	1000                	addi	s0,sp,32
20405408:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
2040540c:	fec42503          	lw	a0,-20(s0)
20405410:	faaff0ef          	jal	ra,20404bba <__metal_driver_sifive_gpio0_interrupt_parent>
20405414:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20405416:	853e                	mv	a0,a5
20405418:	40f2                	lw	ra,28(sp)
2040541a:	4462                	lw	s0,24(sp)
2040541c:	6105                	addi	sp,sp,32
2040541e:	8082                	ret

20405420 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20405420:	7179                	addi	sp,sp,-48
20405422:	d606                	sw	ra,44(sp)
20405424:	d422                	sw	s0,40(sp)
20405426:	1800                	addi	s0,sp,48
20405428:	fca42e23          	sw	a0,-36(s0)
2040542c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20405430:	fd842583          	lw	a1,-40(s0)
20405434:	fdc42503          	lw	a0,-36(s0)
20405438:	facff0ef          	jal	ra,20404be4 <__metal_driver_sifive_gpio0_interrupt_lines>
2040543c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20405440:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20405444:	853e                	mv	a0,a5
20405446:	50b2                	lw	ra,44(sp)
20405448:	5422                	lw	s0,40(sp)
2040544a:	6145                	addi	sp,sp,48
2040544c:	8082                	ret

2040544e <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
2040544e:	1101                	addi	sp,sp,-32
20405450:	ce22                	sw	s0,28(sp)
20405452:	1000                	addi	s0,sp,32
20405454:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405458:	fec42703          	lw	a4,-20(s0)
2040545c:	800017b7          	lui	a5,0x80001
20405460:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405464:	00f71563          	bne	a4,a5,2040546e <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20405468:	100137b7          	lui	a5,0x10013
2040546c:	a011                	j	20405470 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
2040546e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:571
	}
}
20405470:	853e                	mv	a0,a5
20405472:	4472                	lw	s0,28(sp)
20405474:	6105                	addi	sp,sp,32
20405476:	8082                	ret

20405478 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20405478:	1101                	addi	sp,sp,-32
2040547a:	ce22                	sw	s0,28(sp)
2040547c:	1000                	addi	s0,sp,32
2040547e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405482:	fec42703          	lw	a4,-20(s0)
20405486:	800017b7          	lui	a5,0x80001
2040548a:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040548e:	00f71763          	bne	a4,a5,2040549c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405492:	800017b7          	lui	a5,0x80001
20405496:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
2040549a:	a011                	j	2040549e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
2040549c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:601
	}
}
2040549e:	853e                	mv	a0,a5
204054a0:	4472                	lw	s0,28(sp)
204054a2:	6105                	addi	sp,sp,32
204054a4:	8082                	ret

204054a6 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
204054a6:	1101                	addi	sp,sp,-32
204054a8:	ce22                	sw	s0,28(sp)
204054aa:	1000                	addi	s0,sp,32
204054ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204054b0:	fec42703          	lw	a4,-20(s0)
204054b4:	800017b7          	lui	a5,0x80001
204054b8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204054bc:	00f71463          	bne	a4,a5,204054c4 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:606
		return 5;
204054c0:	4795                	li	a5,5
204054c2:	a011                	j	204054c6 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
204054c4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:611
	}
}
204054c6:	853e                	mv	a0,a5
204054c8:	4472                	lw	s0,28(sp)
204054ca:	6105                	addi	sp,sp,32
204054cc:	8082                	ret

204054ce <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
204054ce:	1101                	addi	sp,sp,-32
204054d0:	ce22                	sw	s0,28(sp)
204054d2:	1000                	addi	s0,sp,32
204054d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204054d8:	fec42703          	lw	a4,-20(s0)
204054dc:	800017b7          	lui	a5,0x80001
204054e0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204054e4:	00f71763          	bne	a4,a5,204054f2 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
204054e8:	800017b7          	lui	a5,0x80001
204054ec:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
204054f0:	a011                	j	204054f4 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
204054f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:621
	}
}
204054f4:	853e                	mv	a0,a5
204054f6:	4472                	lw	s0,28(sp)
204054f8:	6105                	addi	sp,sp,32
204054fa:	8082                	ret

204054fc <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
204054fc:	1101                	addi	sp,sp,-32
204054fe:	ce22                	sw	s0,28(sp)
20405500:	1000                	addi	s0,sp,32
20405502:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405506:	fec42703          	lw	a4,-20(s0)
2040550a:	800017b7          	lui	a5,0x80001
2040550e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405512:	00f71563          	bne	a4,a5,2040551c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405516:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040551a:	a011                	j	2040551e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
2040551c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:631
	}
}
2040551e:	853e                	mv	a0,a5
20405520:	4472                	lw	s0,28(sp)
20405522:	6105                	addi	sp,sp,32
20405524:	8082                	ret

20405526 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20405526:	1101                	addi	sp,sp,-32
20405528:	ce22                	sw	s0,28(sp)
2040552a:	1000                	addi	s0,sp,32
2040552c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405530:	fec42703          	lw	a4,-20(s0)
20405534:	800017b7          	lui	a5,0x80001
20405538:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040553c:	00f71563          	bne	a4,a5,20405546 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:636
		return 196608;
20405540:	000307b7          	lui	a5,0x30
20405544:	a011                	j	20405548 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20405546:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:641
	}
}
20405548:	853e                	mv	a0,a5
2040554a:	4472                	lw	s0,28(sp)
2040554c:	6105                	addi	sp,sp,32
2040554e:	8082                	ret

20405550 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20405550:	1101                	addi	sp,sp,-32
20405552:	ce22                	sw	s0,28(sp)
20405554:	1000                	addi	s0,sp,32
20405556:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040555a:	fec42703          	lw	a4,-20(s0)
2040555e:	800017b7          	lui	a5,0x80001
20405562:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405566:	00f71563          	bne	a4,a5,20405570 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:646
		return 196608;
2040556a:	000307b7          	lui	a5,0x30
2040556e:	a011                	j	20405572 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20405570:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:651
	}
}
20405572:	853e                	mv	a0,a5
20405574:	4472                	lw	s0,28(sp)
20405576:	6105                	addi	sp,sp,32
20405578:	8082                	ret

2040557a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
2040557a:	1101                	addi	sp,sp,-32
2040557c:	ce06                	sw	ra,28(sp)
2040557e:	cc22                	sw	s0,24(sp)
20405580:	1000                	addi	s0,sp,32
20405582:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20405586:	fec42503          	lw	a0,-20(s0)
2040558a:	eefff0ef          	jal	ra,20405478 <__metal_driver_sifive_uart0_interrupt_parent>
2040558e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20405590:	853e                	mv	a0,a5
20405592:	40f2                	lw	ra,28(sp)
20405594:	4462                	lw	s0,24(sp)
20405596:	6105                	addi	sp,sp,32
20405598:	8082                	ret

2040559a <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
2040559a:	1101                	addi	sp,sp,-32
2040559c:	ce06                	sw	ra,28(sp)
2040559e:	cc22                	sw	s0,24(sp)
204055a0:	1000                	addi	s0,sp,32
204055a2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
204055a6:	fec42503          	lw	a0,-20(s0)
204055aa:	efdff0ef          	jal	ra,204054a6 <__metal_driver_sifive_uart0_interrupt_line>
204055ae:	87aa                	mv	a5,a0
204055b0:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
204055b4:	853e                	mv	a0,a5
204055b6:	40f2                	lw	ra,28(sp)
204055b8:	4462                	lw	s0,24(sp)
204055ba:	6105                	addi	sp,sp,32
204055bc:	8082                	ret

204055be <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
204055be:	7179                	addi	sp,sp,-48
204055c0:	d606                	sw	ra,44(sp)
204055c2:	d422                	sw	s0,40(sp)
204055c4:	1800                	addi	s0,sp,48
204055c6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
204055ca:	fdc42503          	lw	a0,-36(s0)
204055ce:	e81ff0ef          	jal	ra,2040544e <__metal_driver_sifive_uart0_control_base>
204055d2:	87aa                	mv	a5,a0
204055d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
204055d8:	fec42783          	lw	a5,-20(s0)
204055dc:	439c                	lw	a5,0(a5)
204055de:	fff7c793          	not	a5,a5
204055e2:	83fd                	srli	a5,a5,0x1f
204055e4:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
204055e8:	853e                	mv	a0,a5
204055ea:	50b2                	lw	ra,44(sp)
204055ec:	5422                	lw	s0,40(sp)
204055ee:	6145                	addi	sp,sp,48
204055f0:	8082                	ret

204055f2 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
204055f2:	7179                	addi	sp,sp,-48
204055f4:	d606                	sw	ra,44(sp)
204055f6:	d422                	sw	s0,40(sp)
204055f8:	1800                	addi	s0,sp,48
204055fa:	fca42e23          	sw	a0,-36(s0)
204055fe:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405602:	fdc42503          	lw	a0,-36(s0)
20405606:	e49ff0ef          	jal	ra,2040544e <__metal_driver_sifive_uart0_control_base>
2040560a:	87aa                	mv	a5,a0
2040560c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20405610:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20405612:	fdc42503          	lw	a0,-36(s0)
20405616:	3765                	jal	204055be <__metal_driver_sifive_uart0_txready>
20405618:	87aa                	mv	a5,a0
2040561a:	dfe5                	beqz	a5,20405612 <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
2040561c:	fec42783          	lw	a5,-20(s0)
20405620:	fd842703          	lw	a4,-40(s0)
20405624:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405626:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405628:	853e                	mv	a0,a5
2040562a:	50b2                	lw	ra,44(sp)
2040562c:	5422                	lw	s0,40(sp)
2040562e:	6145                	addi	sp,sp,48
20405630:	8082                	ret

20405632 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20405632:	7179                	addi	sp,sp,-48
20405634:	d606                	sw	ra,44(sp)
20405636:	d422                	sw	s0,40(sp)
20405638:	1800                	addi	s0,sp,48
2040563a:	fca42e23          	sw	a0,-36(s0)
2040563e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405642:	fdc42503          	lw	a0,-36(s0)
20405646:	e09ff0ef          	jal	ra,2040544e <__metal_driver_sifive_uart0_control_base>
2040564a:	87aa                	mv	a5,a0
2040564c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20405650:	fec42783          	lw	a5,-20(s0)
20405654:	0791                	addi	a5,a5,4
20405656:	439c                	lw	a5,0(a5)
20405658:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
2040565c:	fe842783          	lw	a5,-24(s0)
20405660:	0007d763          	bgez	a5,2040566e <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20405664:	fd842783          	lw	a5,-40(s0)
20405668:	577d                	li	a4,-1
2040566a:	c398                	sw	a4,0(a5)
2040566c:	a801                	j	2040567c <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
2040566e:	fe842783          	lw	a5,-24(s0)
20405672:	0ff7f713          	andi	a4,a5,255
20405676:	fd842783          	lw	a5,-40(s0)
2040567a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
2040567c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
2040567e:	853e                	mv	a0,a5
20405680:	50b2                	lw	ra,44(sp)
20405682:	5422                	lw	s0,40(sp)
20405684:	6145                	addi	sp,sp,48
20405686:	8082                	ret

20405688 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20405688:	7179                	addi	sp,sp,-48
2040568a:	d622                	sw	s0,44(sp)
2040568c:	1800                	addi	s0,sp,48
2040568e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405692:	fdc42783          	lw	a5,-36(s0)
20405696:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
2040569a:	fec42783          	lw	a5,-20(s0)
2040569e:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
204056a0:	853e                	mv	a0,a5
204056a2:	5432                	lw	s0,44(sp)
204056a4:	6145                	addi	sp,sp,48
204056a6:	8082                	ret

204056a8 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
204056a8:	7179                	addi	sp,sp,-48
204056aa:	d606                	sw	ra,44(sp)
204056ac:	d422                	sw	s0,40(sp)
204056ae:	1800                	addi	s0,sp,48
204056b0:	fca42e23          	sw	a0,-36(s0)
204056b4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204056b8:	fdc42783          	lw	a5,-36(s0)
204056bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
204056c0:	fdc42503          	lw	a0,-36(s0)
204056c4:	d8bff0ef          	jal	ra,2040544e <__metal_driver_sifive_uart0_control_base>
204056c8:	87aa                	mv	a5,a0
204056ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204056ce:	fdc42503          	lw	a0,-36(s0)
204056d2:	dfdff0ef          	jal	ra,204054ce <__metal_driver_sifive_uart0_clock>
204056d6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204056da:	fd842703          	lw	a4,-40(s0)
204056de:	fec42783          	lw	a5,-20(s0)
204056e2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204056e4:	fe442783          	lw	a5,-28(s0)
204056e8:	cbb1                	beqz	a5,2040573c <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204056ea:	fe442783          	lw	a5,-28(s0)
204056ee:	439c                	lw	a5,0(a5)
204056f0:	439c                	lw	a5,0(a5)
204056f2:	fe442503          	lw	a0,-28(s0)
204056f6:	9782                	jalr	a5
204056f8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204056fc:	fe042703          	lw	a4,-32(s0)
20405700:	fd842783          	lw	a5,-40(s0)
20405704:	02f747b3          	div	a5,a4,a5
20405708:	fff78713          	addi	a4,a5,-1
2040570c:	fe842783          	lw	a5,-24(s0)
20405710:	07e1                	addi	a5,a5,24
20405712:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20405714:	fe842783          	lw	a5,-24(s0)
20405718:	07a1                	addi	a5,a5,8
2040571a:	439c                	lw	a5,0(a5)
2040571c:	fe842703          	lw	a4,-24(s0)
20405720:	0721                	addi	a4,a4,8
20405722:	0017e793          	ori	a5,a5,1
20405726:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405728:	fe842783          	lw	a5,-24(s0)
2040572c:	07b1                	addi	a5,a5,12
2040572e:	439c                	lw	a5,0(a5)
20405730:	fe842703          	lw	a4,-24(s0)
20405734:	0731                	addi	a4,a4,12
20405736:	0017e793          	ori	a5,a5,1
2040573a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
2040573c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
2040573e:	853e                	mv	a0,a5
20405740:	50b2                	lw	ra,44(sp)
20405742:	5422                	lw	s0,40(sp)
20405744:	6145                	addi	sp,sp,48
20405746:	8082                	ret

20405748 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405748:	7139                	addi	sp,sp,-64
2040574a:	de06                	sw	ra,60(sp)
2040574c:	dc22                	sw	s0,56(sp)
2040574e:	0080                	addi	s0,sp,64
20405750:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20405754:	fcc42783          	lw	a5,-52(s0)
20405758:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
2040575c:	fcc42503          	lw	a0,-52(s0)
20405760:	cefff0ef          	jal	ra,2040544e <__metal_driver_sifive_uart0_control_base>
20405764:	87aa                	mv	a5,a0
20405766:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
2040576a:	fcc42503          	lw	a0,-52(s0)
2040576e:	d61ff0ef          	jal	ra,204054ce <__metal_driver_sifive_uart0_clock>
20405772:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20405776:	fe842783          	lw	a5,-24(s0)
2040577a:	07a1                	addi	a5,a5,8
2040577c:	4398                	lw	a4,0(a5)
2040577e:	fe842783          	lw	a5,-24(s0)
20405782:	07a1                	addi	a5,a5,8
20405784:	86be                	mv	a3,a5
20405786:	fff907b7          	lui	a5,0xfff90
2040578a:	17fd                	addi	a5,a5,-1
2040578c:	8ff9                	and	a5,a5,a4
2040578e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20405790:	fe842783          	lw	a5,-24(s0)
20405794:	07a1                	addi	a5,a5,8
20405796:	4398                	lw	a4,0(a5)
20405798:	fe842783          	lw	a5,-24(s0)
2040579c:	07a1                	addi	a5,a5,8
2040579e:	86be                	mv	a3,a5
204057a0:	67c1                	lui	a5,0x10
204057a2:	8fd9                	or	a5,a5,a4
204057a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
204057a6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
204057a8:	fe842783          	lw	a5,-24(s0)
204057ac:	07d1                	addi	a5,a5,20
204057ae:	439c                	lw	a5,0(a5)
204057b0:	8b85                	andi	a5,a5,1
204057b2:	dbfd                	beqz	a5,204057a8 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
204057b4:	fe842783          	lw	a5,-24(s0)
204057b8:	07a1                	addi	a5,a5,8
204057ba:	439c                	lw	a5,0(a5)
204057bc:	8b89                	andi	a5,a5,2
204057be:	c399                	beqz	a5,204057c4 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
204057c0:	47a5                	li	a5,9
204057c2:	a011                	j	204057c6 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204057c4:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204057c6:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204057ca:	fe442783          	lw	a5,-28(s0)
204057ce:	439c                	lw	a5,0(a5)
204057d0:	439c                	lw	a5,0(a5)
204057d2:	fe442503          	lw	a0,-28(s0)
204057d6:	9782                	jalr	a5
204057d8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204057dc:	fe042703          	lw	a4,-32(s0)
204057e0:	fdc42783          	lw	a5,-36(s0)
204057e4:	02f707b3          	mul	a5,a4,a5
204057e8:	873e                	mv	a4,a5
204057ea:	fec42783          	lw	a5,-20(s0)
204057ee:	43dc                	lw	a5,4(a5)
204057f0:	02f757b3          	divu	a5,a4,a5
204057f4:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204057f8:	fc042a23          	sw	zero,-44(s0)
204057fc:	a039                	j	2040580a <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204057fe:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20405800:	fd442783          	lw	a5,-44(s0)
20405804:	0785                	addi	a5,a5,1
20405806:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
2040580a:	fd442783          	lw	a5,-44(s0)
2040580e:	fd842703          	lw	a4,-40(s0)
20405812:	fee7c6e3          	blt	a5,a4,204057fe <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405816:	0001                	nop
20405818:	50f2                	lw	ra,60(sp)
2040581a:	5462                	lw	s0,56(sp)
2040581c:	6121                	addi	sp,sp,64
2040581e:	8082                	ret

20405820 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20405820:	7179                	addi	sp,sp,-48
20405822:	d606                	sw	ra,44(sp)
20405824:	d422                	sw	s0,40(sp)
20405826:	1800                	addi	s0,sp,48
20405828:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
2040582c:	fdc42783          	lw	a5,-36(s0)
20405830:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405834:	fec42703          	lw	a4,-20(s0)
20405838:	fec42783          	lw	a5,-20(s0)
2040583c:	43dc                	lw	a5,4(a5)
2040583e:	85be                	mv	a1,a5
20405840:	853a                	mv	a0,a4
20405842:	d55fc0ef          	jal	ra,20402596 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405846:	0001                	nop
20405848:	50b2                	lw	ra,44(sp)
2040584a:	5422                	lw	s0,40(sp)
2040584c:	6145                	addi	sp,sp,48
2040584e:	8082                	ret

20405850 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20405850:	7139                	addi	sp,sp,-64
20405852:	de06                	sw	ra,60(sp)
20405854:	dc22                	sw	s0,56(sp)
20405856:	0080                	addi	s0,sp,64
20405858:	fca42623          	sw	a0,-52(s0)
2040585c:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20405860:	fcc42783          	lw	a5,-52(s0)
20405864:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405868:	fcc42503          	lw	a0,-52(s0)
2040586c:	c63ff0ef          	jal	ra,204054ce <__metal_driver_sifive_uart0_clock>
20405870:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405874:	fcc42503          	lw	a0,-52(s0)
20405878:	c85ff0ef          	jal	ra,204054fc <__metal_driver_sifive_uart0_pinmux>
2040587c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20405880:	fe842783          	lw	a5,-24(s0)
20405884:	c7b9                	beqz	a5,204058d2 <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405886:	fec42783          	lw	a5,-20(s0)
2040588a:	20405737          	lui	a4,0x20405
2040588e:	74870713          	addi	a4,a4,1864 # 20405748 <pre_rate_change_callback_func>
20405892:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405894:	fec42783          	lw	a5,-20(s0)
20405898:	fcc42703          	lw	a4,-52(s0)
2040589c:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
2040589e:	fec42783          	lw	a5,-20(s0)
204058a2:	07a1                	addi	a5,a5,8
204058a4:	85be                	mv	a1,a5
204058a6:	fe842503          	lw	a0,-24(s0)
204058aa:	20f1                	jal	20405976 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
204058ac:	fec42783          	lw	a5,-20(s0)
204058b0:	20406737          	lui	a4,0x20406
204058b4:	82070713          	addi	a4,a4,-2016 # 20405820 <post_rate_change_callback_func>
204058b8:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
204058ba:	fec42783          	lw	a5,-20(s0)
204058be:	fcc42703          	lw	a4,-52(s0)
204058c2:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204058c4:	fec42783          	lw	a5,-20(s0)
204058c8:	07d1                	addi	a5,a5,20
204058ca:	85be                	mv	a1,a5
204058cc:	fe842503          	lw	a0,-24(s0)
204058d0:	28d9                	jal	204059a6 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204058d2:	fec42783          	lw	a5,-20(s0)
204058d6:	fc842583          	lw	a1,-56(s0)
204058da:	853e                	mv	a0,a5
204058dc:	cbbfc0ef          	jal	ra,20402596 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204058e0:	fe442783          	lw	a5,-28(s0)
204058e4:	cb95                	beqz	a5,20405918 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204058e6:	fcc42503          	lw	a0,-52(s0)
204058ea:	c3dff0ef          	jal	ra,20405526 <__metal_driver_sifive_uart0_pinmux_output_selector>
204058ee:	87aa                	mv	a5,a0
204058f0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204058f4:	fcc42503          	lw	a0,-52(s0)
204058f8:	c59ff0ef          	jal	ra,20405550 <__metal_driver_sifive_uart0_pinmux_source_selector>
204058fc:	87aa                	mv	a5,a0
204058fe:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20405902:	fe442783          	lw	a5,-28(s0)
20405906:	439c                	lw	a5,0(a5)
20405908:	53dc                	lw	a5,36(a5)
2040590a:	fdc42603          	lw	a2,-36(s0)
2040590e:	fe042583          	lw	a1,-32(s0)
20405912:	fe442503          	lw	a0,-28(s0)
20405916:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405918:	0001                	nop
2040591a:	50f2                	lw	ra,60(sp)
2040591c:	5462                	lw	s0,56(sp)
2040591e:	6121                	addi	sp,sp,64
20405920:	8082                	ret

20405922 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20405922:	7179                	addi	sp,sp,-48
20405924:	d622                	sw	s0,44(sp)
20405926:	1800                	addi	s0,sp,48
20405928:	fca42e23          	sw	a0,-36(s0)
2040592c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20405930:	fd842783          	lw	a5,-40(s0)
20405934:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405938:	fdc42783          	lw	a5,-36(s0)
2040593c:	e781                	bnez	a5,20405944 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
2040593e:	fd842783          	lw	a5,-40(s0)
20405942:	a035                	j	2040596e <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405944:	fdc42783          	lw	a5,-36(s0)
20405948:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
2040594c:	a031                	j	20405958 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
2040594e:	fec42783          	lw	a5,-20(s0)
20405952:	479c                	lw	a5,8(a5)
20405954:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405958:	fec42783          	lw	a5,-20(s0)
2040595c:	479c                	lw	a5,8(a5)
2040595e:	fbe5                	bnez	a5,2040594e <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20405960:	fec42783          	lw	a5,-20(s0)
20405964:	fd842703          	lw	a4,-40(s0)
20405968:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
2040596a:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
2040596e:	853e                	mv	a0,a5
20405970:	5432                	lw	s0,44(sp)
20405972:	6145                	addi	sp,sp,48
20405974:	8082                	ret

20405976 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405976:	1101                	addi	sp,sp,-32
20405978:	ce06                	sw	ra,28(sp)
2040597a:	cc22                	sw	s0,24(sp)
2040597c:	1000                	addi	s0,sp,32
2040597e:	fea42623          	sw	a0,-20(s0)
20405982:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405986:	fec42783          	lw	a5,-20(s0)
2040598a:	43dc                	lw	a5,4(a5)
2040598c:	fe842583          	lw	a1,-24(s0)
20405990:	853e                	mv	a0,a5
20405992:	3f41                	jal	20405922 <_metal_clock_append_to_callbacks>
20405994:	872a                	mv	a4,a0
20405996:	fec42783          	lw	a5,-20(s0)
2040599a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
2040599c:	0001                	nop
2040599e:	40f2                	lw	ra,28(sp)
204059a0:	4462                	lw	s0,24(sp)
204059a2:	6105                	addi	sp,sp,32
204059a4:	8082                	ret

204059a6 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204059a6:	1101                	addi	sp,sp,-32
204059a8:	ce06                	sw	ra,28(sp)
204059aa:	cc22                	sw	s0,24(sp)
204059ac:	1000                	addi	s0,sp,32
204059ae:	fea42623          	sw	a0,-20(s0)
204059b2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204059b6:	fec42783          	lw	a5,-20(s0)
204059ba:	479c                	lw	a5,8(a5)
204059bc:	fe842583          	lw	a1,-24(s0)
204059c0:	853e                	mv	a0,a5
204059c2:	f61ff0ef          	jal	ra,20405922 <_metal_clock_append_to_callbacks>
204059c6:	872a                	mv	a4,a0
204059c8:	fec42783          	lw	a5,-20(s0)
204059cc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204059ce:	0001                	nop
204059d0:	40f2                	lw	ra,28(sp)
204059d2:	4462                	lw	s0,24(sp)
204059d4:	6105                	addi	sp,sp,32
204059d6:	8082                	ret

204059d8 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204059d8:	1101                	addi	sp,sp,-32
204059da:	ce06                	sw	ra,28(sp)
204059dc:	cc22                	sw	s0,24(sp)
204059de:	1000                	addi	s0,sp,32
204059e0:	fea42623          	sw	a0,-20(s0)
204059e4:	fec42783          	lw	a5,-20(s0)
204059e8:	439c                	lw	a5,0(a5)
204059ea:	57dc                	lw	a5,44(a5)
204059ec:	fec42503          	lw	a0,-20(s0)
204059f0:	9782                	jalr	a5
204059f2:	87aa                	mv	a5,a0
204059f4:	853e                	mv	a0,a5
204059f6:	40f2                	lw	ra,28(sp)
204059f8:	4462                	lw	s0,24(sp)
204059fa:	6105                	addi	sp,sp,32
204059fc:	8082                	ret

204059fe <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204059fe:	1101                	addi	sp,sp,-32
20405a00:	ce22                	sw	s0,28(sp)
20405a02:	1000                	addi	s0,sp,32
20405a04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405a08:	fec42783          	lw	a5,-20(s0)
20405a0c:	eb89                	bnez	a5,20405a1e <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405a0e:	fec42703          	lw	a4,-20(s0)
20405a12:	070a                	slli	a4,a4,0x2
20405a14:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405a18:	97ba                	add	a5,a5,a4
20405a1a:	439c                	lw	a5,0(a5)
20405a1c:	a011                	j	20405a20 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405a1e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405a20:	853e                	mv	a0,a5
20405a22:	4472                	lw	s0,28(sp)
20405a24:	6105                	addi	sp,sp,32
20405a26:	8082                	ret

20405a28 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405a28:	1101                	addi	sp,sp,-32
20405a2a:	ce22                	sw	s0,28(sp)
20405a2c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405a2e:	f14027f3          	csrr	a5,mhartid
20405a32:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405a36:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405a3a:	853e                	mv	a0,a5
20405a3c:	4472                	lw	s0,28(sp)
20405a3e:	6105                	addi	sp,sp,32
20405a40:	8082                	ret

20405a42 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405a42:	1101                	addi	sp,sp,-32
20405a44:	ce22                	sw	s0,28(sp)
20405a46:	1000                	addi	s0,sp,32
20405a48:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405a4c:	0001                	nop
20405a4e:	bffd                	j	20405a4c <metal_shutdown+0xa>
	...

20405a80 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405a80:	c7afd06f          	j	20402efa <metal_interrupt_vector_handler>

20405a84 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405a84:	c76fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405a88 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405a88:	c72fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405a8c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20405a8c:	c9cfd06f          	j	20402f28 <metal_software_interrupt_vector_handler>

20405a90 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405a90:	c6afd06f          	j	20402efa <metal_interrupt_vector_handler>

20405a94 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405a94:	c66fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405a98 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405a98:	c62fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405a9c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20405a9c:	d7efd06f          	j	2040301a <metal_timer_interrupt_vector_handler>

20405aa0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405aa0:	c5afd06f          	j	20402efa <metal_interrupt_vector_handler>

20405aa4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405aa4:	c56fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405aa8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405aa8:	c52fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405aac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20405aac:	c4efd06f          	j	20402efa <metal_interrupt_vector_handler>

20405ab0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405ab0:	c4afd06f          	j	20402efa <metal_interrupt_vector_handler>

20405ab4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405ab4:	c46fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405ab8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405ab8:	c42fd06f          	j	20402efa <metal_interrupt_vector_handler>

20405abc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20405abc:	c3efd06f          	j	20402efa <metal_interrupt_vector_handler>

20405ac0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405ac0:	837fd06f          	j	204032f6 <metal_lc0_interrupt_vector_handler>

20405ac4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405ac4:	8c5fd06f          	j	20403388 <metal_lc1_interrupt_vector_handler>

20405ac8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405ac8:	953fd06f          	j	2040341a <metal_lc2_interrupt_vector_handler>

20405acc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20405acc:	9e1fd06f          	j	204034ac <metal_lc3_interrupt_vector_handler>

20405ad0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405ad0:	a6ffd06f          	j	2040353e <metal_lc4_interrupt_vector_handler>

20405ad4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405ad4:	afdfd06f          	j	204035d0 <metal_lc5_interrupt_vector_handler>

20405ad8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405ad8:	b8bfd06f          	j	20403662 <metal_lc6_interrupt_vector_handler>

20405adc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20405adc:	c19fd06f          	j	204036f4 <metal_lc7_interrupt_vector_handler>

20405ae0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405ae0:	ca7fd06f          	j	20403786 <metal_lc8_interrupt_vector_handler>

20405ae4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405ae4:	d35fd06f          	j	20403818 <metal_lc9_interrupt_vector_handler>

20405ae8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405ae8:	dc3fd06f          	j	204038aa <metal_lc10_interrupt_vector_handler>

20405aec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20405aec:	e51fd06f          	j	2040393c <metal_lc11_interrupt_vector_handler>

20405af0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405af0:	edffd06f          	j	204039ce <metal_lc12_interrupt_vector_handler>

20405af4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405af4:	f6dfd06f          	j	20403a60 <metal_lc13_interrupt_vector_handler>

20405af8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405af8:	ffbfd06f          	j	20403af2 <metal_lc14_interrupt_vector_handler>

20405afc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20405afc:	888fe06f          	j	20403b84 <metal_lc15_interrupt_vector_handler>

20405b00 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:120
{
20405b00:	1101                	addi	sp,sp,-32
20405b02:	ce22                	sw	s0,28(sp)
20405b04:	1000                	addi	s0,sp,32
20405b06:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20405b0a:	fec42703          	lw	a4,-20(s0)
20405b0e:	800017b7          	lui	a5,0x80001
20405b12:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
20405b16:	00f71763          	bne	a4,a5,20405b24 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20405b1a:	03dfd7b7          	lui	a5,0x3dfd
20405b1e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405b22:	a011                	j	20405b26 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:125
		return 0;
20405b24:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:127
}
20405b26:	853e                	mv	a0,a5
20405b28:	4472                	lw	s0,28(sp)
20405b2a:	6105                	addi	sp,sp,32
20405b2c:	8082                	ret

20405b2e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20405b2e:	1101                	addi	sp,sp,-32
20405b30:	ce06                	sw	ra,28(sp)
20405b32:	cc22                	sw	s0,24(sp)
20405b34:	1000                	addi	s0,sp,32
20405b36:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
20405b3a:	fec42503          	lw	a0,-20(s0)
20405b3e:	37c9                	jal	20405b00 <__metal_driver_fixed_clock_rate>
20405b40:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405b42:	853e                	mv	a0,a5
20405b44:	40f2                	lw	ra,28(sp)
20405b46:	4462                	lw	s0,24(sp)
20405b48:	6105                	addi	sp,sp,32
20405b4a:	8082                	ret

20405b4c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20405b4c:	1101                	addi	sp,sp,-32
20405b4e:	ce06                	sw	ra,28(sp)
20405b50:	cc22                	sw	s0,24(sp)
20405b52:	1000                	addi	s0,sp,32
20405b54:	fea42623          	sw	a0,-20(s0)
20405b58:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20405b5c:	fec42503          	lw	a0,-20(s0)
20405b60:	37f9                	jal	20405b2e <__metal_driver_fixed_clock_get_rate_hz>
20405b62:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405b64:	853e                	mv	a0,a5
20405b66:	40f2                	lw	ra,28(sp)
20405b68:	4462                	lw	s0,24(sp)
20405b6a:	6105                	addi	sp,sp,32
20405b6c:	8082                	ret

20405b6e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
20405b6e:	1101                	addi	sp,sp,-32
20405b70:	ce06                	sw	ra,28(sp)
20405b72:	cc22                	sw	s0,24(sp)
20405b74:	1000                	addi	s0,sp,32
20405b76:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20405b7a:	fec42503          	lw	a0,-20(s0)
20405b7e:	ec5ff0ef          	jal	ra,20405a42 <metal_shutdown>
