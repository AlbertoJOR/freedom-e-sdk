
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/debug/AsconHash.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/debug/AsconHash.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005eec memsz 0x00005eec flags rwx
    LOAD off    0x00007730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x000014a4 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405ef0 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000196  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005780  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000568  20405980  20405980  00006980  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405ee8  20405ee8  00006ee8  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20405ef0  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000008a4  80001730  80001730  00007730  2**3  ALLOC
  6 .stack            00000400  80001fd4  80001fd4  00007730  2**0  ALLOC
  7 .heap             00000800  800023d4  800023d4  00007730  2**0  ALLOC
  8 .debug_info       00014b71  00000000  00000000  00008730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     0000277b  00000000  00000000  0001d2a1  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000908  00000000  00000000  0001fa20  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     000007a0  00000000  00000000  00020328  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000092a3  00000000  00000000  00020ac8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003810  00000000  00000000  00029d6b  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002d57b  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002d5a3  2**0  CONTENTS, READONLY
 16 .debug_frame      000025ac  00000000  00000000  0002d5d0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405980 l    d  .rodata	00000000 .rodata
20405ee8 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80001fd4 l    d  .stack	00000000 .stack
800023d4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
20405b98 l       .rodata	00000000 argv
20405b9c l       .rodata	00000000 envp
20405ba0 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 AsconHash.c
2040030a l     F .text	00000404 ROUND
2040070e l     F .text	0000008e P12
80000000 l     O .data	000007d0 asso_text.2802
800007d0 l     O .data	000007d0 plain_text.2801
8000173c l     O .bss	000007e0 cipher_text.2803
80000fa0 l     O .data	00000010 Key.2807
80000fb0 l     O .data	00000010 Nonce.2804
80001f1c l     O .bss	00000028 hash.2806
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20401152 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
204016a2 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80001f44 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20402378 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20402422 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20402448 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
2040246c l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
204024a8 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402608 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402b3e l     F .text	00000024 __metal_driver_cpu_hartid
20402b62 l     F .text	0000002a __metal_driver_cpu_timebase
20402b8c l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404396 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
204043c0 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204043e8 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20404410 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20404438 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404984 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204049aa l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204049d4 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
2040523e l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20405268 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20405296 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
204052be l     F .text	0000002e __metal_driver_sifive_uart0_clock
204052ec l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20405316 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20405340 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405532 l     F .text	000000d8 pre_rate_change_callback_func
2040560a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405880 l       .text	00000000 IRQ_0
20405884 l       .text	00000000 IRQ_1
20405888 l       .text	00000000 IRQ_2
2040588c l       .text	00000000 IRQ_3
20405890 l       .text	00000000 IRQ_4
20405894 l       .text	00000000 IRQ_5
20405898 l       .text	00000000 IRQ_6
2040589c l       .text	00000000 IRQ_7
204058a0 l       .text	00000000 IRQ_8
204058a4 l       .text	00000000 IRQ_9
204058a8 l       .text	00000000 IRQ_10
204058ac l       .text	00000000 IRQ_11
204058b0 l       .text	00000000 IRQ_12
204058b4 l       .text	00000000 IRQ_13
204058b8 l       .text	00000000 IRQ_14
204058bc l       .text	00000000 IRQ_15
204058c0 l       .text	00000000 IRQ_LC0
204058c4 l       .text	00000000 IRQ_LC1
204058c8 l       .text	00000000 IRQ_LC2
204058cc l       .text	00000000 IRQ_LC3
204058d0 l       .text	00000000 IRQ_LC4
204058d4 l       .text	00000000 IRQ_LC5
204058d8 l       .text	00000000 IRQ_LC6
204058dc l       .text	00000000 IRQ_LC7
204058e0 l       .text	00000000 IRQ_LC8
204058e4 l       .text	00000000 IRQ_LC9
204058e8 l       .text	00000000 IRQ_LC10
204058ec l       .text	00000000 IRQ_LC11
204058f0 l       .text	00000000 IRQ_LC12
204058f4 l       .text	00000000 IRQ_LC13
204058f8 l       .text	00000000 IRQ_LC14
204058fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405900 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405eec l       .init_array	00000000 __fini_array_end
20405eec l       .init_array	00000000 __fini_array_start
20405eec l       .init_array	00000000 __init_array_end
20405ee8 l       .init_array	00000000 __preinit_array_end
20405ee8 l       .init_array	00000000 __init_array_start
20405ee8 l       .init_array	00000000 __preinit_array_start
20400c3e g     F .text	0000002c putchar
20405ec8 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401b06 g     F .text	00000028 _isatty_r
2040333e  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400cec g     F .text	000000da _puts_r
2040079c g     F .text	00000074 printstate
20401b2e g     F .text	0000002c _lseek_r
20405492 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
204027e4 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204032ac  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400a56 g     F .text	0000001e rdcycle
20403afe g     F .text	00000038 __metal_valid_interrupt_id
20400bfa g     F .text	00000044 printf
20403f24 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
2040570c g     F .text	00000054 _metal_clock_append_to_callbacks
20404488 g     F .text	00000038 __metal_plic0_complete_interrupt
20403d7e g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
20401a4c g     F .text	00000036 __sseek
20401208 g     F .text	0000006a __sinit
20400dd4 g     F .text	000000c0 __swbuf_r
204011c4 g     F .text	00000044 __sfmoreglue
20401b76 g     F .text	00000002 __malloc_unlock
204057e6 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
20404e18 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405bac g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80001fd4 g       .bss	00000000 metal_segment_bss_target_end
204024d8 g     F .text	0000009a __metal_clint0_mtime_get
2040432a g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404bc8 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20402100 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
204053aa g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
20402572 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401adc g     F .text	0000002a _fstat_r
20405068 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80001fd0 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405760 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403618  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405e00 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405dc0 g     O .rodata	00000040 __metal_driver_vtable_cpu
204023f4 g     F .text	0000002e metal_uart_set_baud_rate
2040563a g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403fb8 g     F .text	00000072 __metal_driver_cpu_mcycle_get
800023d4 g       .heap	00000000 metal_segment_heap_target_start
204011ba g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20403586  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400dc6 g     F .text	0000000e puts
20403860  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402d20 g     F .text	00000018 __metal_default_exception_handler
20401f74 g     F .text	00000026 _fstat
20402b0a g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404524 g     F .text	00000062 __metal_plic0_set_priority
20403f40 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402bb6 g     F .text	0000002c __metal_driver_cpu_get
20405d74 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402c14 g     F .text	00000018 __metal_interrupt_global_disable
204034f4  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204036aa  w    F .text	00000092 metal_lc10_interrupt_vector_handler
204019a6 g     F .text	00000028 _sbrk_r
2040493c g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403bf2 g     F .text	0000004e __metal_exception_register
20401f26 g     F .text	0000002c _read_r
2040414c g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404caa g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402e0c g     F .text	00000064 __metal_default_sw_handler
20405790 g     F .text	00000030 metal_clock_register_post_rate_change_callback
2040536a g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401f9a g     F .text	00000020 _isatty
20404d70 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
20402e70  w    F .text	0000008e metal_timer_interrupt_vector_handler
20402170 g     F .text	0000006a __libc_init_array
20404cea g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040373c  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403ecc g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
2040200e g     F .text	0000007a _sbrk
20404c64 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
20402c76 g     F .text	0000001a __metal_interrupt_timer_disable
20404e62 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404202 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405e8c g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404db0 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20402138 g     F .text	00000038 __libc_fini_array
204051f0 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
2040418c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402cc8 g     F .text	0000002c __metal_interrupt_local_enable
20402ad6 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20402326 g     F .text	0000002c metal_tty_putc
20404646 g     F .text	00000018 __metal_plic0_default_handler
20400c6a g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405afc g     O .rodata	00000020 __sf_fake_stderr
20402cac g     F .text	0000001c __metal_interrupt_external_disable
20405388 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403f9c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20403c40 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
204016cc g     F .text	00000042 __sfputs_r
204042e4 g     F .text	00000046 __metal_driver_cpu_exception_register
20402c2c g     F .text	00000018 __metal_interrupt_software_enable
20403188  w    F .text	00000092 metal_lc1_interrupt_vector_handler
20401b5a g     F .text	0000001a memchr
20401518 g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
20403a16 g     F .text	00000050 __metal_controller_interrupt_vector_mode
2040225e g     F .text	000000c8 __call_exitprocs
800023d4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401fba g     F .text	0000002a _lseek
204042c4 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20404358 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402c90 g     F .text	0000001c __metal_interrupt_external_enable
204021da g     F .text	00000084 __register_exitproc
204053dc g     F .text	00000040 __metal_driver_sifive_uart0_putc
204046ee g     F .text	00000144 __metal_driver_riscv_plic0_init
204048f4 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404c38 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000be printC
20403462  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402be2 g     F .text	0000001a __metal_myhart_id
20405210 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204002be g     F .text	0000004c HASH
20402d7e  w    F .text	0000008e metal_software_interrupt_vector_handler
20403ef8 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401ab4 g     F .text	00000028 _close_r
20405472 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20400810 g     F .text	00000246 crypto_hash
204026c6 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20400e94 g     F .text	00000110 __swsetup_r
20401272 g     F .text	0000009e __sfp
204019ce g     F .text	00000030 __sread
20404b88 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
20402d50  w    F .text	0000002e metal_interrupt_vector_handler
20401b74 g     F .text	00000002 __malloc_lock
204010ee g     F .text	00000064 _fflush_r
204044f8 g     F .text	0000002c __metal_plic0_get_threshold
20405b1c g     O .rodata	00000020 __sf_fake_stdin
20403b36 g     F .text	000000bc __metal_local_interrupt_enable
204029a0 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20401470 g     F .text	000000a8 memset
204033d0  w    F .text	00000092 metal_lc5_interrupt_vector_handler
20400a74 g     F .text	00000186 main
80001730 g       .data	00000000 metal_segment_data_target_end
204041a0 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20404264 g     F .text	00000060 __metal_driver_cpu_get_msip
2040582a g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20404376 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2040445a g     F .text	0000002e __metal_plic0_claim_interrupt
20401a82 g     F .text	00000006 __sclose
204037ce  w    F .text	00000092 metal_lc12_interrupt_vector_handler
204015c4 g     F .text	000000de _malloc_r
204027c8 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
2040402a g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405810 g     F .text	0000001a metal_cpu_get_current_hartid
20405880 g       .text	00000000 __metal_vector_table
20405ef0 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20400bfa g     F .text	00000044 iprintf
20402bfc g     F .text	00000018 __metal_interrupt_global_enable
204020f6 g     F .text	0000000a atexit
20402352 g     F .text	00000026 metal_tty_putc_raw
20401a88 g     F .text	0000002c _write_r
20402c5c g     F .text	0000001a __metal_interrupt_timer_enable
2040541c g     F .text	00000056 __metal_driver_sifive_uart0_getc
204028ea g     F .text	000000b6 __metal_driver_riscv_clint0_disable
20401b78 g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
204040d6 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400fa4 g     F .text	0000014a __sflush_r
2040592e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402838 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405ef0 g       *ABS*	00000000 metal_segment_data_source_start
80002bd4 g       .heap	00000000 metal_segment_heap_target_end
20403a66 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
2040137c g     F .text	00000058 __swhatbuf_r
20404d2a g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402efe g     F .text	00000066 __metal_default_timer_handler
20402088 g     F .text	0000006e _write
2040465e g     F .text	00000090 __metal_plic0_handler
2040321a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403984  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204057c0 g     F .text	00000026 metal_cpu_interrupt_controller
204019fe g     F .text	0000004e __swrite
2040210c g     F .text	0000002c exit
2040170e g     F .text	00000298 _vfiprintf_r
20401310 g     F .text	0000006c _fwalk_reent
2040594c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405b3c g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
20402d38 g     F .text	00000018 __metal_default_interrupt_handler
204023c6 g     F .text	0000002e metal_uart_putc
20401fe4 g     F .text	0000002a _read
20404c0e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402f80 g     F .text	00000150 __metal_exception_handler
204030f6  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040596e g     F .text	00000012 _exit
20404070 g     F .text	00000066 __metal_driver_cpu_mtime_get
204013d4 g     F .text	0000009c __smakebuf_r
204027a0 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401c84 g     F .text	000002a2 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
204038f2  w    F .text	00000092 metal_lc14_interrupt_vector_handler
2040263e g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
2040170e g     F .text	00000298 _vfprintf_r
20404162 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204045ba g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20404176 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402cf4 g     F .text	0000002c __metal_interrupt_local_disable
20402c44 g     F .text	00000018 __metal_interrupt_software_disable
20404586 g     F .text	00000034 __metal_plic0_get_priority
2040239a g     F .text	0000002c metal_uart_init
204044c0 g     F .text	00000038 __metal_plic0_set_threshold
20401f52 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404832 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	4cc18113          	addi	sp,gp,1228 # 800023d4 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00006297          	auipc	t0,0x6
204000ac:	e4828293          	addi	t0,t0,-440 # 20405ef0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00006297          	auipc	t0,0x6
204000d8:	e1c28293          	addi	t0,t0,-484 # 20405ef0 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc01317          	auipc	t1,0x5fc01
2040010c:	62830313          	addi	t1,t1,1576 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	0cc18393          	addi	t2,gp,204 # 80001fd4 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	01250513          	addi	a0,a0,18 # 20402138 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	7c9010ef          	jal	ra,204020f6 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	03e020ef          	jal	ra,20402170 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00006597          	auipc	a1,0x6
2040015e:	a3e58593          	addi	a1,a1,-1474 # 20405b98 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00006617          	auipc	a2,0x6
20400166:	a3a60613          	addi	a2,a2,-1478 # 20405b9c <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	7a1010ef          	jal	ra,2040210c <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	0e9000ef          	jal	ra,20400a74 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400190:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400192:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400194:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:45

u32 RAND(u32 *return_addr, u32 num_rands);

u32 SEED();

void printC(u32 *arr, u32 a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:46
    int len = (a_len % 8 == 0) ? (a_len / 4) * 2 : (a_len / 4) * 2 + 2;
20400218:	fd842783          	lw	a5,-40(s0)
2040021c:	8b9d                	andi	a5,a5,7
2040021e:	e791                	bnez	a5,2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:46 (discriminator 1)
20400220:	fd842783          	lw	a5,-40(s0)
20400224:	8389                	srli	a5,a5,0x2
20400226:	0786                	slli	a5,a5,0x1
20400228:	a031                	j	20400234 <printC+0x34>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:46 (discriminator 2)
2040022a:	fd842783          	lw	a5,-40(s0)
2040022e:	8389                	srli	a5,a5,0x2
20400230:	0785                	addi	a5,a5,1
20400232:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:46 (discriminator 4)
20400234:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 4)
    len = (cipher) ? len + 4 : len;
20400238:	fd442783          	lw	a5,-44(s0)
2040023c:	c789                	beqz	a5,20400246 <printC+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 1)
2040023e:	fe842783          	lw	a5,-24(s0)
20400242:	0791                	addi	a5,a5,4
20400244:	a019                	j	2040024a <printC+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 2)
20400246:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:47 (discriminator 4)
2040024a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 4)
    for (int i = 0; i < len; i++) {
2040024e:	fe042623          	sw	zero,-20(s0)
20400252:	a881                	j	204002a2 <printC+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:49
        if (i % 2 == 0) {
20400254:	fec42783          	lw	a5,-20(s0)
20400258:	8b85                	andi	a5,a5,1
2040025a:	e781                	bnez	a5,20400262 <printC+0x62>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:50
            printf("\n");
2040025c:	4529                	li	a0,10
2040025e:	1e1000ef          	jal	ra,20400c3e <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:52
        }
        printf("%08x ", arr[i], i);
20400262:	fec42783          	lw	a5,-20(s0)
20400266:	078a                	slli	a5,a5,0x2
20400268:	fdc42703          	lw	a4,-36(s0)
2040026c:	97ba                	add	a5,a5,a4
2040026e:	439c                	lw	a5,0(a5)
20400270:	fec42603          	lw	a2,-20(s0)
20400274:	85be                	mv	a1,a5
20400276:	204067b7          	lui	a5,0x20406
2040027a:	98078513          	addi	a0,a5,-1664 # 20405980 <_exit+0x12>
2040027e:	17d000ef          	jal	ra,20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:53
        if (del) {
20400282:	fd042783          	lw	a5,-48(s0)
20400286:	cb89                	beqz	a5,20400298 <printC+0x98>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:54
            arr[i] = 0;
20400288:	fec42783          	lw	a5,-20(s0)
2040028c:	078a                	slli	a5,a5,0x2
2040028e:	fdc42703          	lw	a4,-36(s0)
20400292:	97ba                	add	a5,a5,a4
20400294:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 2)
    for (int i = 0; i < len; i++) {
20400298:	fec42783          	lw	a5,-20(s0)
2040029c:	0785                	addi	a5,a5,1
2040029e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:48 (discriminator 1)
204002a2:	fec42703          	lw	a4,-20(s0)
204002a6:	fe842783          	lw	a5,-24(s0)
204002aa:	faf745e3          	blt	a4,a5,20400254 <printC+0x54>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:57
        }
    }
    printf("\n");
204002ae:	4529                	li	a0,10
204002b0:	18f000ef          	jal	ra,20400c3e <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:58
}
204002b4:	0001                	nop
204002b6:	50b2                	lw	ra,44(sp)
204002b8:	5422                	lw	s0,40(sp)
204002ba:	6145                	addi	sp,sp,48
204002bc:	8082                	ret

204002be <HASH>:
HASH():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:148
    //printf("Finish AEAD Dec %08x \n", rd);
    return rd;
}

u32 HASH(u32 *m_addr, u32 m_len,
         u32 *h_addr) {
204002be:	7179                	addi	sp,sp,-48
204002c0:	d622                	sw	s0,44(sp)
204002c2:	1800                	addi	s0,sp,48
204002c4:	fca42e23          	sw	a0,-36(s0)
204002c8:	fcb42c23          	sw	a1,-40(s0)
204002cc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:151
    u32 rd;
    //printf("Init Hash\n");
    asm volatile("fence");
204002d0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:152
    ROCC_INSTRUCTION_DSS(0, rd, m_addr, m_len, Hash_Set_M);
204002d4:	fdc42783          	lw	a5,-36(s0)
204002d8:	85be                	mv	a1,a5
204002da:	fd842603          	lw	a2,-40(s0)
204002de:	62c5f50b          	0x62c5f50b
204002e2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:153
    asm volatile("fence":: : "memory");
204002e6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:156
    //printf("Set M : %08x \n", rd);

    asm volatile("fence");
204002ea:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:157
    ROCC_INSTRUCTION_DS(0, rd, h_addr, Hash_Init);
204002ee:	fd442783          	lw	a5,-44(s0)
204002f2:	85be                	mv	a1,a5
204002f4:	6405e50b          	0x6405e50b
204002f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:158
    asm volatile("fence":: : "memory");
204002fc:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:160
    //printf(" Finish Hash: %08x \n", rd);
    return 0;
20400300:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../AsconHW/AEAD_HW.h:161
}
20400302:	853e                	mv	a0,a5
20400304:	5432                	lw	s0,44(sp)
20400306:	6145                	addi	sp,sp,48
20400308:	8082                	ret

2040030a <ROUND>:
ROUND():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:47
    }
    return res;

}

static inline void ROUND(ascon_state_t *s, u32 C) {
2040030a:	711d                	addi	sp,sp,-96
2040030c:	cea2                	sw	s0,92(sp)
2040030e:	1080                	addi	s0,sp,96
20400310:	faa42623          	sw	a0,-84(s0)
20400314:	fab42423          	sw	a1,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:50
    ascon_state_t t;
    // addition of round constant
    s->xl[2] ^=C;
20400318:	fac42783          	lw	a5,-84(s0)
2040031c:	4fd8                	lw	a4,28(a5)
2040031e:	fa842783          	lw	a5,-88(s0)
20400322:	8f3d                	xor	a4,a4,a5
20400324:	fac42783          	lw	a5,-84(s0)
20400328:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:54
    // printstate(" round constant", s);
    // substitution layer

    s->xh[0] ^= s->xh[4];
2040032a:	fac42783          	lw	a5,-84(s0)
2040032e:	4398                	lw	a4,0(a5)
20400330:	fac42783          	lw	a5,-84(s0)
20400334:	4b9c                	lw	a5,16(a5)
20400336:	8f3d                	xor	a4,a4,a5
20400338:	fac42783          	lw	a5,-84(s0)
2040033c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:55
    s->xl[0] ^= s->xl[4];
2040033e:	fac42783          	lw	a5,-84(s0)
20400342:	4bd8                	lw	a4,20(a5)
20400344:	fac42783          	lw	a5,-84(s0)
20400348:	53dc                	lw	a5,36(a5)
2040034a:	8f3d                	xor	a4,a4,a5
2040034c:	fac42783          	lw	a5,-84(s0)
20400350:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:57

    s->xh[4] ^= s->xh[3];
20400352:	fac42783          	lw	a5,-84(s0)
20400356:	4b98                	lw	a4,16(a5)
20400358:	fac42783          	lw	a5,-84(s0)
2040035c:	47dc                	lw	a5,12(a5)
2040035e:	8f3d                	xor	a4,a4,a5
20400360:	fac42783          	lw	a5,-84(s0)
20400364:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:58
    s->xl[4] ^= s->xl[3];
20400366:	fac42783          	lw	a5,-84(s0)
2040036a:	53d8                	lw	a4,36(a5)
2040036c:	fac42783          	lw	a5,-84(s0)
20400370:	539c                	lw	a5,32(a5)
20400372:	8f3d                	xor	a4,a4,a5
20400374:	fac42783          	lw	a5,-84(s0)
20400378:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:60

    s->xh[2] ^= s->xh[1];
2040037a:	fac42783          	lw	a5,-84(s0)
2040037e:	4798                	lw	a4,8(a5)
20400380:	fac42783          	lw	a5,-84(s0)
20400384:	43dc                	lw	a5,4(a5)
20400386:	8f3d                	xor	a4,a4,a5
20400388:	fac42783          	lw	a5,-84(s0)
2040038c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:61
    s->xl[2] ^= s->xl[1];
2040038e:	fac42783          	lw	a5,-84(s0)
20400392:	4fd8                	lw	a4,28(a5)
20400394:	fac42783          	lw	a5,-84(s0)
20400398:	4f9c                	lw	a5,24(a5)
2040039a:	8f3d                	xor	a4,a4,a5
2040039c:	fac42783          	lw	a5,-84(s0)
204003a0:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:63
    // start of keccak s-box
    t.xh[0] = s->xh[0] ^ (~s->xh[1] & s->xh[2]);
204003a2:	fac42783          	lw	a5,-84(s0)
204003a6:	4398                	lw	a4,0(a5)
204003a8:	fac42783          	lw	a5,-84(s0)
204003ac:	43dc                	lw	a5,4(a5)
204003ae:	fff7c693          	not	a3,a5
204003b2:	fac42783          	lw	a5,-84(s0)
204003b6:	479c                	lw	a5,8(a5)
204003b8:	8ff5                	and	a5,a5,a3
204003ba:	8fb9                	xor	a5,a5,a4
204003bc:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:64
    t.xl[0] = s->xl[0] ^ (~s->xl[1] & s->xl[2]);
204003c0:	fac42783          	lw	a5,-84(s0)
204003c4:	4bd8                	lw	a4,20(a5)
204003c6:	fac42783          	lw	a5,-84(s0)
204003ca:	4f9c                	lw	a5,24(a5)
204003cc:	fff7c693          	not	a3,a5
204003d0:	fac42783          	lw	a5,-84(s0)
204003d4:	4fdc                	lw	a5,28(a5)
204003d6:	8ff5                	and	a5,a5,a3
204003d8:	8fb9                	xor	a5,a5,a4
204003da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:66

    t.xh[1] = s->xh[1] ^ (~s->xh[2] & s->xh[3]);
204003de:	fac42783          	lw	a5,-84(s0)
204003e2:	43d8                	lw	a4,4(a5)
204003e4:	fac42783          	lw	a5,-84(s0)
204003e8:	479c                	lw	a5,8(a5)
204003ea:	fff7c693          	not	a3,a5
204003ee:	fac42783          	lw	a5,-84(s0)
204003f2:	47dc                	lw	a5,12(a5)
204003f4:	8ff5                	and	a5,a5,a3
204003f6:	8fb9                	xor	a5,a5,a4
204003f8:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:67
    t.xl[1] = s->xl[1] ^ (~s->xl[2] & s->xl[3]);
204003fc:	fac42783          	lw	a5,-84(s0)
20400400:	4f98                	lw	a4,24(a5)
20400402:	fac42783          	lw	a5,-84(s0)
20400406:	4fdc                	lw	a5,28(a5)
20400408:	fff7c693          	not	a3,a5
2040040c:	fac42783          	lw	a5,-84(s0)
20400410:	539c                	lw	a5,32(a5)
20400412:	8ff5                	and	a5,a5,a3
20400414:	8fb9                	xor	a5,a5,a4
20400416:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:69

    t.xh[2] = s->xh[2] ^ (~s->xh[3] & s->xh[4]);
2040041a:	fac42783          	lw	a5,-84(s0)
2040041e:	4798                	lw	a4,8(a5)
20400420:	fac42783          	lw	a5,-84(s0)
20400424:	47dc                	lw	a5,12(a5)
20400426:	fff7c693          	not	a3,a5
2040042a:	fac42783          	lw	a5,-84(s0)
2040042e:	4b9c                	lw	a5,16(a5)
20400430:	8ff5                	and	a5,a5,a3
20400432:	8fb9                	xor	a5,a5,a4
20400434:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:70
    t.xl[2] = s->xl[2] ^ (~s->xl[3] & s->xl[4]);
20400438:	fac42783          	lw	a5,-84(s0)
2040043c:	4fd8                	lw	a4,28(a5)
2040043e:	fac42783          	lw	a5,-84(s0)
20400442:	539c                	lw	a5,32(a5)
20400444:	fff7c693          	not	a3,a5
20400448:	fac42783          	lw	a5,-84(s0)
2040044c:	53dc                	lw	a5,36(a5)
2040044e:	8ff5                	and	a5,a5,a3
20400450:	8fb9                	xor	a5,a5,a4
20400452:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:72

    t.xh[3] = s->xh[3] ^ (~s->xh[4] & s->xh[0]);
20400456:	fac42783          	lw	a5,-84(s0)
2040045a:	47d8                	lw	a4,12(a5)
2040045c:	fac42783          	lw	a5,-84(s0)
20400460:	4b9c                	lw	a5,16(a5)
20400462:	fff7c693          	not	a3,a5
20400466:	fac42783          	lw	a5,-84(s0)
2040046a:	439c                	lw	a5,0(a5)
2040046c:	8ff5                	and	a5,a5,a3
2040046e:	8fb9                	xor	a5,a5,a4
20400470:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:73
    t.xl[3] = s->xl[3] ^ (~s->xl[4] & s->xl[0]);
20400474:	fac42783          	lw	a5,-84(s0)
20400478:	5398                	lw	a4,32(a5)
2040047a:	fac42783          	lw	a5,-84(s0)
2040047e:	53dc                	lw	a5,36(a5)
20400480:	fff7c693          	not	a3,a5
20400484:	fac42783          	lw	a5,-84(s0)
20400488:	4bdc                	lw	a5,20(a5)
2040048a:	8ff5                	and	a5,a5,a3
2040048c:	8fb9                	xor	a5,a5,a4
2040048e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:75

    t.xh[4] = s->xh[4] ^ (~s->xh[0] & s->xh[1]);
20400492:	fac42783          	lw	a5,-84(s0)
20400496:	4b98                	lw	a4,16(a5)
20400498:	fac42783          	lw	a5,-84(s0)
2040049c:	439c                	lw	a5,0(a5)
2040049e:	fff7c693          	not	a3,a5
204004a2:	fac42783          	lw	a5,-84(s0)
204004a6:	43dc                	lw	a5,4(a5)
204004a8:	8ff5                	and	a5,a5,a3
204004aa:	8fb9                	xor	a5,a5,a4
204004ac:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:76
    t.xl[4] = s->xl[4] ^ (~s->xl[0] & s->xl[1]);
204004b0:	fac42783          	lw	a5,-84(s0)
204004b4:	53d8                	lw	a4,36(a5)
204004b6:	fac42783          	lw	a5,-84(s0)
204004ba:	4bdc                	lw	a5,20(a5)
204004bc:	fff7c693          	not	a3,a5
204004c0:	fac42783          	lw	a5,-84(s0)
204004c4:	4f9c                	lw	a5,24(a5)
204004c6:	8ff5                	and	a5,a5,a3
204004c8:	8fb9                	xor	a5,a5,a4
204004ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:78
    // end of keccak s-box
    t.xh[1] ^= t.xh[0];
204004ce:	fcc42703          	lw	a4,-52(s0)
204004d2:	fc842783          	lw	a5,-56(s0)
204004d6:	8fb9                	xor	a5,a5,a4
204004d8:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:79
    t.xh[0] ^= t.xh[4];
204004dc:	fc842703          	lw	a4,-56(s0)
204004e0:	fd842783          	lw	a5,-40(s0)
204004e4:	8fb9                	xor	a5,a5,a4
204004e6:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:80
    t.xh[3] ^= t.xh[2];
204004ea:	fd442703          	lw	a4,-44(s0)
204004ee:	fd042783          	lw	a5,-48(s0)
204004f2:	8fb9                	xor	a5,a5,a4
204004f4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:81
    t.xh[2] = ~t.xh[2];
204004f8:	fd042783          	lw	a5,-48(s0)
204004fc:	fff7c793          	not	a5,a5
20400500:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:82
    t.xl[1] ^= t.xl[0];
20400504:	fe042703          	lw	a4,-32(s0)
20400508:	fdc42783          	lw	a5,-36(s0)
2040050c:	8fb9                	xor	a5,a5,a4
2040050e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:83
    t.xl[0] ^= t.xl[4];
20400512:	fdc42703          	lw	a4,-36(s0)
20400516:	fec42783          	lw	a5,-20(s0)
2040051a:	8fb9                	xor	a5,a5,a4
2040051c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:84
    t.xl[3] ^= t.xl[2];
20400520:	fe842703          	lw	a4,-24(s0)
20400524:	fe442783          	lw	a5,-28(s0)
20400528:	8fb9                	xor	a5,a5,a4
2040052a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:85
    t.xl[2] = ~t.xl[2];
2040052e:	fe442783          	lw	a5,-28(s0)
20400532:	fff7c793          	not	a5,a5
20400536:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:91
    // printstate(" substitution layer", &t);
    u64  ror1;
    u64  ror2;
    //linear diffusion layer

    s->xh[0] = t.xh[0] ^ RORH(19,t.xh[0],t.xl[0]) ^ RORH(28,t.xh[0], t.xl[0]);
2040053a:	fc842703          	lw	a4,-56(s0)
2040053e:	fdc42783          	lw	a5,-36(s0)
20400542:	00d79693          	slli	a3,a5,0xd
20400546:	fc842783          	lw	a5,-56(s0)
2040054a:	83cd                	srli	a5,a5,0x13
2040054c:	8fd5                	or	a5,a5,a3
2040054e:	8f3d                	xor	a4,a4,a5
20400550:	fdc42783          	lw	a5,-36(s0)
20400554:	00479693          	slli	a3,a5,0x4
20400558:	fc842783          	lw	a5,-56(s0)
2040055c:	83f1                	srli	a5,a5,0x1c
2040055e:	8fd5                	or	a5,a5,a3
20400560:	8f3d                	xor	a4,a4,a5
20400562:	fac42783          	lw	a5,-84(s0)
20400566:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:92
    s->xl[0] = t.xl[0] ^ RORL(19,t.xh[0],t.xl[0]) ^ RORL(28,t.xh[0], t.xl[0]);
20400568:	fdc42703          	lw	a4,-36(s0)
2040056c:	fc842783          	lw	a5,-56(s0)
20400570:	00d79693          	slli	a3,a5,0xd
20400574:	fdc42783          	lw	a5,-36(s0)
20400578:	83cd                	srli	a5,a5,0x13
2040057a:	8fd5                	or	a5,a5,a3
2040057c:	8f3d                	xor	a4,a4,a5
2040057e:	fc842783          	lw	a5,-56(s0)
20400582:	00479693          	slli	a3,a5,0x4
20400586:	fdc42783          	lw	a5,-36(s0)
2040058a:	83f1                	srli	a5,a5,0x1c
2040058c:	8fd5                	or	a5,a5,a3
2040058e:	8f3d                	xor	a4,a4,a5
20400590:	fac42783          	lw	a5,-84(s0)
20400594:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:94

    s->xh[1] = t.xh[1] ^ RORH(61,t.xh[1],t.xl[1]) ^ RORH(39,t.xh[1], t.xl[1]);
20400596:	fcc42703          	lw	a4,-52(s0)
2040059a:	fcc42783          	lw	a5,-52(s0)
2040059e:	00379693          	slli	a3,a5,0x3
204005a2:	fe042783          	lw	a5,-32(s0)
204005a6:	83f5                	srli	a5,a5,0x1d
204005a8:	8fd5                	or	a5,a5,a3
204005aa:	8f3d                	xor	a4,a4,a5
204005ac:	fcc42783          	lw	a5,-52(s0)
204005b0:	01979693          	slli	a3,a5,0x19
204005b4:	fe042783          	lw	a5,-32(s0)
204005b8:	839d                	srli	a5,a5,0x7
204005ba:	8fd5                	or	a5,a5,a3
204005bc:	8f3d                	xor	a4,a4,a5
204005be:	fac42783          	lw	a5,-84(s0)
204005c2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:95
    s->xl[1] = t.xl[1] ^ RORL(61,t.xh[1],t.xl[1]) ^ RORL(39,t.xh[1], t.xl[1]);
204005c4:	fe042703          	lw	a4,-32(s0)
204005c8:	fe042783          	lw	a5,-32(s0)
204005cc:	00379693          	slli	a3,a5,0x3
204005d0:	fcc42783          	lw	a5,-52(s0)
204005d4:	83f5                	srli	a5,a5,0x1d
204005d6:	8fd5                	or	a5,a5,a3
204005d8:	8f3d                	xor	a4,a4,a5
204005da:	fe042783          	lw	a5,-32(s0)
204005de:	01979693          	slli	a3,a5,0x19
204005e2:	fcc42783          	lw	a5,-52(s0)
204005e6:	839d                	srli	a5,a5,0x7
204005e8:	8fd5                	or	a5,a5,a3
204005ea:	8f3d                	xor	a4,a4,a5
204005ec:	fac42783          	lw	a5,-84(s0)
204005f0:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:97

    s->xh[2] = t.xh[2] ^ RORH(1,t.xh[2],t.xl[2]) ^ RORH(6,t.xh[2], t.xl[2]);
204005f2:	fd042703          	lw	a4,-48(s0)
204005f6:	fe442783          	lw	a5,-28(s0)
204005fa:	01f79693          	slli	a3,a5,0x1f
204005fe:	fd042783          	lw	a5,-48(s0)
20400602:	8385                	srli	a5,a5,0x1
20400604:	8fd5                	or	a5,a5,a3
20400606:	8f3d                	xor	a4,a4,a5
20400608:	fe442783          	lw	a5,-28(s0)
2040060c:	01a79693          	slli	a3,a5,0x1a
20400610:	fd042783          	lw	a5,-48(s0)
20400614:	8399                	srli	a5,a5,0x6
20400616:	8fd5                	or	a5,a5,a3
20400618:	8f3d                	xor	a4,a4,a5
2040061a:	fac42783          	lw	a5,-84(s0)
2040061e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:98
    s->xl[2] = t.xl[2] ^ RORL(1,t.xh[2],t.xl[2]) ^ RORL(6,t.xh[2], t.xl[2]);
20400620:	fe442703          	lw	a4,-28(s0)
20400624:	fd042783          	lw	a5,-48(s0)
20400628:	01f79693          	slli	a3,a5,0x1f
2040062c:	fe442783          	lw	a5,-28(s0)
20400630:	8385                	srli	a5,a5,0x1
20400632:	8fd5                	or	a5,a5,a3
20400634:	8f3d                	xor	a4,a4,a5
20400636:	fd042783          	lw	a5,-48(s0)
2040063a:	01a79693          	slli	a3,a5,0x1a
2040063e:	fe442783          	lw	a5,-28(s0)
20400642:	8399                	srli	a5,a5,0x6
20400644:	8fd5                	or	a5,a5,a3
20400646:	8f3d                	xor	a4,a4,a5
20400648:	fac42783          	lw	a5,-84(s0)
2040064c:	cfd8                	sw	a4,28(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:100

    s->xh[3] = t.xh[3] ^ RORH(10,t.xh[3],t.xl[3]) ^ RORH(17,t.xh[3], t.xl[3]);
2040064e:	fd442703          	lw	a4,-44(s0)
20400652:	fe842783          	lw	a5,-24(s0)
20400656:	01679693          	slli	a3,a5,0x16
2040065a:	fd442783          	lw	a5,-44(s0)
2040065e:	83a9                	srli	a5,a5,0xa
20400660:	8fd5                	or	a5,a5,a3
20400662:	8f3d                	xor	a4,a4,a5
20400664:	fe842783          	lw	a5,-24(s0)
20400668:	00f79693          	slli	a3,a5,0xf
2040066c:	fd442783          	lw	a5,-44(s0)
20400670:	83c5                	srli	a5,a5,0x11
20400672:	8fd5                	or	a5,a5,a3
20400674:	8f3d                	xor	a4,a4,a5
20400676:	fac42783          	lw	a5,-84(s0)
2040067a:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:101
    s->xl[3] = t.xl[3] ^ RORL(10,t.xh[3],t.xl[3]) ^ RORL(17,t.xh[3], t.xl[3]);
2040067c:	fe842703          	lw	a4,-24(s0)
20400680:	fd442783          	lw	a5,-44(s0)
20400684:	01679693          	slli	a3,a5,0x16
20400688:	fe842783          	lw	a5,-24(s0)
2040068c:	83a9                	srli	a5,a5,0xa
2040068e:	8fd5                	or	a5,a5,a3
20400690:	8f3d                	xor	a4,a4,a5
20400692:	fd442783          	lw	a5,-44(s0)
20400696:	00f79693          	slli	a3,a5,0xf
2040069a:	fe842783          	lw	a5,-24(s0)
2040069e:	83c5                	srli	a5,a5,0x11
204006a0:	8fd5                	or	a5,a5,a3
204006a2:	8f3d                	xor	a4,a4,a5
204006a4:	fac42783          	lw	a5,-84(s0)
204006a8:	d398                	sw	a4,32(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:103

    s->xh[4] = t.xh[4] ^ RORH(7,t.xh[4],t.xl[4]) ^ RORH(41,t.xh[4], t.xl[4]);
204006aa:	fd842703          	lw	a4,-40(s0)
204006ae:	fec42783          	lw	a5,-20(s0)
204006b2:	01979693          	slli	a3,a5,0x19
204006b6:	fd842783          	lw	a5,-40(s0)
204006ba:	839d                	srli	a5,a5,0x7
204006bc:	8fd5                	or	a5,a5,a3
204006be:	8f3d                	xor	a4,a4,a5
204006c0:	fd842783          	lw	a5,-40(s0)
204006c4:	01779693          	slli	a3,a5,0x17
204006c8:	fec42783          	lw	a5,-20(s0)
204006cc:	83a5                	srli	a5,a5,0x9
204006ce:	8fd5                	or	a5,a5,a3
204006d0:	8f3d                	xor	a4,a4,a5
204006d2:	fac42783          	lw	a5,-84(s0)
204006d6:	cb98                	sw	a4,16(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:104
    s->xl[4] = t.xl[4] ^ RORL(7,t.xh[4],t.xl[4]) ^ RORL(41,t.xh[4], t.xl[4]);
204006d8:	fec42703          	lw	a4,-20(s0)
204006dc:	fd842783          	lw	a5,-40(s0)
204006e0:	01979693          	slli	a3,a5,0x19
204006e4:	fec42783          	lw	a5,-20(s0)
204006e8:	839d                	srli	a5,a5,0x7
204006ea:	8fd5                	or	a5,a5,a3
204006ec:	8f3d                	xor	a4,a4,a5
204006ee:	fec42783          	lw	a5,-20(s0)
204006f2:	01779693          	slli	a3,a5,0x17
204006f6:	fd842783          	lw	a5,-40(s0)
204006fa:	83a5                	srli	a5,a5,0x9
204006fc:	8fd5                	or	a5,a5,a3
204006fe:	8f3d                	xor	a4,a4,a5
20400700:	fac42783          	lw	a5,-84(s0)
20400704:	d3d8                	sw	a4,36(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:107

    //printstate(" round output", s);
}
20400706:	0001                	nop
20400708:	4476                	lw	s0,92(sp)
2040070a:	6125                	addi	sp,sp,96
2040070c:	8082                	ret

2040070e <P12>:
P12():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:110


static inline void P12(ascon_state_t* s) {
2040070e:	1101                	addi	sp,sp,-32
20400710:	ce06                	sw	ra,28(sp)
20400712:	cc22                	sw	s0,24(sp)
20400714:	1000                	addi	s0,sp,32
20400716:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:111
  ROUND(s, 0xf0);
2040071a:	0f000593          	li	a1,240
2040071e:	fec42503          	lw	a0,-20(s0)
20400722:	36e5                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:112
  ROUND(s, 0xe1);
20400724:	0e100593          	li	a1,225
20400728:	fec42503          	lw	a0,-20(s0)
2040072c:	3ef9                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:113
  ROUND(s, 0xd2);
2040072e:	0d200593          	li	a1,210
20400732:	fec42503          	lw	a0,-20(s0)
20400736:	3ed1                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:114
  ROUND(s, 0xc3);
20400738:	0c300593          	li	a1,195
2040073c:	fec42503          	lw	a0,-20(s0)
20400740:	36e9                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:115
  ROUND(s, 0xb4);
20400742:	0b400593          	li	a1,180
20400746:	fec42503          	lw	a0,-20(s0)
2040074a:	36c1                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:116
  ROUND(s, 0xa5);
2040074c:	0a500593          	li	a1,165
20400750:	fec42503          	lw	a0,-20(s0)
20400754:	3e5d                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:117
  ROUND(s, 0x96);
20400756:	09600593          	li	a1,150
2040075a:	fec42503          	lw	a0,-20(s0)
2040075e:	3675                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:118
  ROUND(s, 0x87);
20400760:	08700593          	li	a1,135
20400764:	fec42503          	lw	a0,-20(s0)
20400768:	364d                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:119
  ROUND(s, 0x78);
2040076a:	07800593          	li	a1,120
2040076e:	fec42503          	lw	a0,-20(s0)
20400772:	3e61                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:120
  ROUND(s, 0x69);
20400774:	06900593          	li	a1,105
20400778:	fec42503          	lw	a0,-20(s0)
2040077c:	3679                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:121
  ROUND(s, 0x5a);
2040077e:	05a00593          	li	a1,90
20400782:	fec42503          	lw	a0,-20(s0)
20400786:	3651                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:122
  ROUND(s, 0x4b);
20400788:	04b00593          	li	a1,75
2040078c:	fec42503          	lw	a0,-20(s0)
20400790:	3ead                	jal	2040030a <ROUND>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/round.h:123
}
20400792:	0001                	nop
20400794:	40f2                	lw	ra,28(sp)
20400796:	4462                	lw	s0,24(sp)
20400798:	6105                	addi	sp,sp,32
2040079a:	8082                	ret

2040079c <printstate>:
printstate():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:57
        mask.xl = 0x00000000;
    }
    return mask;
}*/

void printstate(const char *text, const ascon_state_t *s, int debug) {
2040079c:	7179                	addi	sp,sp,-48
2040079e:	d606                	sw	ra,44(sp)
204007a0:	d422                	sw	s0,40(sp)
204007a2:	1800                	addi	s0,sp,48
204007a4:	fca42e23          	sw	a0,-36(s0)
204007a8:	fcb42c23          	sw	a1,-40(s0)
204007ac:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:58
    if(debug){
204007b0:	fd442783          	lw	a5,-44(s0)
204007b4:	cba9                	beqz	a5,20400806 <printstate+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:59
    printf("%s\n", text);
204007b6:	fdc42503          	lw	a0,-36(s0)
204007ba:	2531                	jal	20400dc6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:60
    for (int i = 0; i < 5; i++) {
204007bc:	fe042623          	sw	zero,-20(s0)
204007c0:	a825                	j	204007f8 <printstate+0x5c>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:61 (discriminator 3)
        printf("%08X %08X \n", s->xh[i], s->xl[i]);
204007c2:	fd842703          	lw	a4,-40(s0)
204007c6:	fec42783          	lw	a5,-20(s0)
204007ca:	078a                	slli	a5,a5,0x2
204007cc:	97ba                	add	a5,a5,a4
204007ce:	4394                	lw	a3,0(a5)
204007d0:	fd842703          	lw	a4,-40(s0)
204007d4:	fec42783          	lw	a5,-20(s0)
204007d8:	0791                	addi	a5,a5,4
204007da:	078a                	slli	a5,a5,0x2
204007dc:	97ba                	add	a5,a5,a4
204007de:	43dc                	lw	a5,4(a5)
204007e0:	863e                	mv	a2,a5
204007e2:	85b6                	mv	a1,a3
204007e4:	204067b7          	lui	a5,0x20406
204007e8:	9a078513          	addi	a0,a5,-1632 # 204059a0 <_exit+0x32>
204007ec:	2139                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:60 (discriminator 3)
    for (int i = 0; i < 5; i++) {
204007ee:	fec42783          	lw	a5,-20(s0)
204007f2:	0785                	addi	a5,a5,1
204007f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:60 (discriminator 1)
204007f8:	fec42703          	lw	a4,-20(s0)
204007fc:	4791                	li	a5,4
204007fe:	fce7d2e3          	bge	a5,a4,204007c2 <printstate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:63
    }
    printf("\n");}
20400802:	4529                	li	a0,10
20400804:	292d                	jal	20400c3e <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/util.h:64
}
20400806:	0001                	nop
20400808:	50b2                	lw	ra,44(sp)
2040080a:	5422                	lw	s0,40(sp)
2040080c:	6145                	addi	sp,sp,48
2040080e:	8082                	ret

20400810 <crypto_hash>:
crypto_hash():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:250
        printf("%08x  %08x\n", c[i], Tag[i]);
    }*/
    return res;
}

int crypto_hash(u32 *m, u32 mlen, u32 *h, int debug) {
20400810:	715d                	addi	sp,sp,-80
20400812:	c686                	sw	ra,76(sp)
20400814:	c4a2                	sw	s0,72(sp)
20400816:	0880                	addi	s0,sp,80
20400818:	faa42e23          	sw	a0,-68(s0)
2040081c:	fab42c23          	sw	a1,-72(s0)
20400820:	fac42a23          	sw	a2,-76(s0)
20400824:	fad42823          	sw	a3,-80(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:254

    /* initialize */
    ascon_state_t s;
    s.xh[0] = 0x00400c00;
20400828:	004017b7          	lui	a5,0x401
2040082c:	c0078793          	addi	a5,a5,-1024 # 400c00 <__heap_size+0x400400>
20400830:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:255
    s.xl[0] = 0x00000100;
20400834:	10000793          	li	a5,256
20400838:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:256
    s.xh[1] = 0;
2040083c:	fc042423          	sw	zero,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:257
    s.xl[1] = 0;
20400840:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:258
    s.xh[2] = 0;
20400844:	fc042623          	sw	zero,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:259
    s.xl[2] = 0;
20400848:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:260
    s.xh[3] = 0;
2040084c:	fc042823          	sw	zero,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:261
    s.xl[3] = 0;
20400850:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:262
    s.xh[4] = 0;
20400854:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:263
    s.xl[4] = 0;
20400858:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:264
    printstate("After init", &s, debug);
2040085c:	fc440793          	addi	a5,s0,-60
20400860:	fb042603          	lw	a2,-80(s0)
20400864:	85be                	mv	a1,a5
20400866:	204067b7          	lui	a5,0x20406
2040086a:	9ac78513          	addi	a0,a5,-1620 # 204059ac <_exit+0x3e>
2040086e:	373d                	jal	2040079c <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:265
    P12(&s);
20400870:	fc440793          	addi	a5,s0,-60
20400874:	853e                	mv	a0,a5
20400876:	3d61                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:268


    if (mlen) {
20400878:	fb842783          	lw	a5,-72(s0)
2040087c:	16078463          	beqz	a5,204009e4 <crypto_hash+0x1d4>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:269
        while (mlen >= 8) {
20400880:	a8b1                	j	204008dc <crypto_hash+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:270
            s.xh[0] ^= *m;
20400882:	fc442703          	lw	a4,-60(s0)
20400886:	fbc42783          	lw	a5,-68(s0)
2040088a:	439c                	lw	a5,0(a5)
2040088c:	8fb9                	xor	a5,a5,a4
2040088e:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:271
            m++;
20400892:	fbc42783          	lw	a5,-68(s0)
20400896:	0791                	addi	a5,a5,4
20400898:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:272
            s.xl[0] ^= *m;
2040089c:	fd842703          	lw	a4,-40(s0)
204008a0:	fbc42783          	lw	a5,-68(s0)
204008a4:	439c                	lw	a5,0(a5)
204008a6:	8fb9                	xor	a5,a5,a4
204008a8:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:273
            m++;
204008ac:	fbc42783          	lw	a5,-68(s0)
204008b0:	0791                	addi	a5,a5,4
204008b2:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:274
            P12(&s);
204008b6:	fc440793          	addi	a5,s0,-60
204008ba:	853e                	mv	a0,a5
204008bc:	3d89                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:275
            printstate("Absorb AD", &s, debug);
204008be:	fc440793          	addi	a5,s0,-60
204008c2:	fb042603          	lw	a2,-80(s0)
204008c6:	85be                	mv	a1,a5
204008c8:	204067b7          	lui	a5,0x20406
204008cc:	9c478513          	addi	a0,a5,-1596 # 204059c4 <_exit+0x56>
204008d0:	35f1                	jal	2040079c <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:276
            mlen -= 8;
204008d2:	fb842783          	lw	a5,-72(s0)
204008d6:	17e1                	addi	a5,a5,-8
204008d8:	faf42c23          	sw	a5,-72(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:269
        while (mlen >= 8) {
204008dc:	fb842703          	lw	a4,-72(s0)
204008e0:	479d                	li	a5,7
204008e2:	fae7e0e3          	bltu	a5,a4,20400882 <crypto_hash+0x72>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:278
        }
        s.xh[0] ^= TRUNH(mlen, *m);
204008e6:	fc442703          	lw	a4,-60(s0)
204008ea:	fb842683          	lw	a3,-72(s0)
204008ee:	4791                	li	a5,4
204008f0:	00d7f663          	bgeu	a5,a3,204008fc <crypto_hash+0xec>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:278 (discriminator 1)
204008f4:	fbc42783          	lw	a5,-68(s0)
204008f8:	439c                	lw	a5,0(a5)
204008fa:	a025                	j	20400922 <crypto_hash+0x112>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:278 (discriminator 2)
204008fc:	fb842783          	lw	a5,-72(s0)
20400900:	c385                	beqz	a5,20400920 <crypto_hash+0x110>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:278 (discriminator 4)
20400902:	fbc42783          	lw	a5,-68(s0)
20400906:	4394                	lw	a3,0(a5)
20400908:	fb842603          	lw	a2,-72(s0)
2040090c:	4781                	li	a5,0
2040090e:	8f91                	sub	a5,a5,a2
20400910:	078e                	slli	a5,a5,0x3
20400912:	02078793          	addi	a5,a5,32
20400916:	567d                	li	a2,-1
20400918:	00f617b3          	sll	a5,a2,a5
2040091c:	8ff5                	and	a5,a5,a3
2040091e:	a011                	j	20400922 <crypto_hash+0x112>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:278 (discriminator 5)
20400920:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:278 (discriminator 8)
20400922:	8fb9                	xor	a5,a5,a4
20400924:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:279 (discriminator 8)
        m++;
20400928:	fbc42783          	lw	a5,-68(s0)
2040092c:	0791                	addi	a5,a5,4
2040092e:	faf42e23          	sw	a5,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:280 (discriminator 8)
        s.xl[0] ^= TRUNL(mlen, *m);
20400932:	fd842703          	lw	a4,-40(s0)
20400936:	fb842683          	lw	a3,-72(s0)
2040093a:	4791                	li	a5,4
2040093c:	02d7f163          	bgeu	a5,a3,2040095e <crypto_hash+0x14e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:280 (discriminator 1)
20400940:	fbc42783          	lw	a5,-68(s0)
20400944:	4394                	lw	a3,0(a5)
20400946:	fb842603          	lw	a2,-72(s0)
2040094a:	4781                	li	a5,0
2040094c:	8f91                	sub	a5,a5,a2
2040094e:	078e                	slli	a5,a5,0x3
20400950:	04078793          	addi	a5,a5,64
20400954:	567d                	li	a2,-1
20400956:	00f617b3          	sll	a5,a2,a5
2040095a:	8ff5                	and	a5,a5,a3
2040095c:	a011                	j	20400960 <crypto_hash+0x150>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:280 (discriminator 2)
2040095e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:280 (discriminator 4)
20400960:	8fb9                	xor	a5,a5,a4
20400962:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:282 (discriminator 4)

        s.xh[0] ^= PADH(mlen);
20400966:	fc442703          	lw	a4,-60(s0)
2040096a:	fb842683          	lw	a3,-72(s0)
2040096e:	478d                	li	a5,3
20400970:	00d7ea63          	bltu	a5,a3,20400984 <crypto_hash+0x174>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:282 (discriminator 1)
20400974:	fb842783          	lw	a5,-72(s0)
20400978:	078e                	slli	a5,a5,0x3
2040097a:	800006b7          	lui	a3,0x80000
2040097e:	00f6d7b3          	srl	a5,a3,a5
20400982:	a011                	j	20400986 <crypto_hash+0x176>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:282 (discriminator 2)
20400984:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:282 (discriminator 4)
20400986:	8fb9                	xor	a5,a5,a4
20400988:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 4)
        s.xl[0] ^= PADL(mlen);
2040098c:	fd842703          	lw	a4,-40(s0)
20400990:	fb842683          	lw	a3,-72(s0)
20400994:	478d                	li	a5,3
20400996:	02d7f563          	bgeu	a5,a3,204009c0 <crypto_hash+0x1b0>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 1)
2040099a:	fb842683          	lw	a3,-72(s0)
2040099e:	47a1                	li	a5,8
204009a0:	00f68e63          	beq	a3,a5,204009bc <crypto_hash+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 3)
204009a4:	fb842683          	lw	a3,-72(s0)
204009a8:	200007b7          	lui	a5,0x20000
204009ac:	17f1                	addi	a5,a5,-4
204009ae:	97b6                	add	a5,a5,a3
204009b0:	078e                	slli	a5,a5,0x3
204009b2:	800006b7          	lui	a3,0x80000
204009b6:	00f6d7b3          	srl	a5,a3,a5
204009ba:	a021                	j	204009c2 <crypto_hash+0x1b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 4)
204009bc:	4781                	li	a5,0
204009be:	a011                	j	204009c2 <crypto_hash+0x1b2>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 2)
204009c0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:283 (discriminator 8)
204009c2:	8fb9                	xor	a5,a5,a4
204009c4:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:284 (discriminator 8)
        printstate("Padded AD", &s, debug);
204009c8:	fc440793          	addi	a5,s0,-60
204009cc:	fb042603          	lw	a2,-80(s0)
204009d0:	85be                	mv	a1,a5
204009d2:	204067b7          	lui	a5,0x20406
204009d6:	9d078513          	addi	a0,a5,-1584 # 204059d0 <_exit+0x62>
204009da:	33c9                	jal	2040079c <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:285 (discriminator 8)
        P12(&s);
204009dc:	fc440793          	addi	a5,s0,-60
204009e0:	853e                	mv	a0,a5
204009e2:	3335                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:287
    }
    for(int i = 0 ; i < 4 ; i++){
204009e4:	fe042623          	sw	zero,-20(s0)
204009e8:	a8a1                	j	20400a40 <crypto_hash+0x230>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:288
        h[i*2] = s.xh[0] ;
204009ea:	fec42783          	lw	a5,-20(s0)
204009ee:	078e                	slli	a5,a5,0x3
204009f0:	fb442703          	lw	a4,-76(s0)
204009f4:	97ba                	add	a5,a5,a4
204009f6:	fc442703          	lw	a4,-60(s0)
204009fa:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:289
        h[i*2+1] = s.xl[0] ;
204009fc:	fec42783          	lw	a5,-20(s0)
20400a00:	078e                	slli	a5,a5,0x3
20400a02:	0791                	addi	a5,a5,4
20400a04:	fb442703          	lw	a4,-76(s0)
20400a08:	97ba                	add	a5,a5,a4
20400a0a:	fd842703          	lw	a4,-40(s0)
20400a0e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:290
        if(i < 3){
20400a10:	fec42703          	lw	a4,-20(s0)
20400a14:	4789                	li	a5,2
20400a16:	00e7c663          	blt	a5,a4,20400a22 <crypto_hash+0x212>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:291
            P12(&s);
20400a1a:	fc440793          	addi	a5,s0,-60
20400a1e:	853e                	mv	a0,a5
20400a20:	31fd                	jal	2040070e <P12>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:293 (discriminator 2)
        }
        printstate("Hash Round",&s,debug);
20400a22:	fc440793          	addi	a5,s0,-60
20400a26:	fb042603          	lw	a2,-80(s0)
20400a2a:	85be                	mv	a1,a5
20400a2c:	204067b7          	lui	a5,0x20406
20400a30:	a2878513          	addi	a0,a5,-1496 # 20405a28 <_exit+0xba>
20400a34:	33a5                	jal	2040079c <printstate>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:287 (discriminator 2)
    for(int i = 0 ; i < 4 ; i++){
20400a36:	fec42783          	lw	a5,-20(s0)
20400a3a:	0785                	addi	a5,a5,1
20400a3c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:287 (discriminator 1)
20400a40:	fec42703          	lw	a4,-20(s0)
20400a44:	478d                	li	a5,3
20400a46:	fae7d2e3          	bge	a5,a4,204009ea <crypto_hash+0x1da>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:295
    }
    return 0;
20400a4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../Asconref/aead.h:296
}
20400a4c:	853e                	mv	a0,a5
20400a4e:	40b6                	lw	ra,76(sp)
20400a50:	4426                	lw	s0,72(sp)
20400a52:	6161                	addi	sp,sp,80
20400a54:	8082                	ret

20400a56 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400a56:	1101                	addi	sp,sp,-32
20400a58:	ce22                	sw	s0,28(sp)
20400a5a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:50
    int tmp = 0;
20400a5c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
20400a60:	b00027f3          	csrr	a5,mcycle
20400a64:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:52
    return tmp;
20400a68:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/../RoCCcommon/csr.h:53
}
20400a6c:	853e                	mv	a0,a5
20400a6e:	4472                	lw	s0,28(sp)
20400a70:	6105                	addi	sp,sp,32
20400a72:	8082                	ret

20400a74 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:6
#include "../AsconHW/AEAD_HW.h"
#include "../Asconref/aead.h"
#include <stdio.h>
#include "../RoCCcommon/csr.h"

int main(void) {
20400a74:	7179                	addi	sp,sp,-48
20400a76:	d606                	sw	ra,44(sp)
20400a78:	d422                	sw	s0,40(sp)
20400a7a:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:7
    u32 plain_len = 32;
20400a7c:	02000793          	li	a5,32
20400a80:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:8
    u32 asso_len = 32; /// CReo que asignaste a memoria
20400a84:	02000793          	li	a5,32
20400a88:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:9
    u32 clen = 0;
20400a8c:	fe042223          	sw	zero,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:11

    u32 plain_len_int = plain_len / 8;
20400a90:	fec42783          	lw	a5,-20(s0)
20400a94:	838d                	srli	a5,a5,0x3
20400a96:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12
    plain_len_int = (plain_len % 8 == 0) ? plain_len_int*2 : plain_len_int*2 +2;
20400a9a:	fec42783          	lw	a5,-20(s0)
20400a9e:	8b9d                	andi	a5,a5,7
20400aa0:	e789                	bnez	a5,20400aaa <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12 (discriminator 1)
20400aa2:	fe042783          	lw	a5,-32(s0)
20400aa6:	0786                	slli	a5,a5,0x1
20400aa8:	a029                	j	20400ab2 <main+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12 (discriminator 2)
20400aaa:	fe042783          	lw	a5,-32(s0)
20400aae:	0785                	addi	a5,a5,1
20400ab0:	0786                	slli	a5,a5,0x1
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:12 (discriminator 4)
20400ab2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:27 (discriminator 4)
    static u32 Key[4] = {0x11111111, 0x22222222, 0x33333333, 0x44444445};

    static u32 *tag_addr;


    printf("Init Ascon Dec \n");
20400ab6:	204067b7          	lui	a5,0x20406
20400aba:	a3478513          	addi	a0,a5,-1484 # 20405a34 <_exit+0xc6>
20400abe:	2621                	jal	20400dc6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:28 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400ac0:	800007b7          	lui	a5,0x80000
20400ac4:	00078593          	mv	a1,a5
20400ac8:	204067b7          	lui	a5,0x20406
20400acc:	a4478513          	addi	a0,a5,-1468 # 20405a44 <_exit+0xd6>
20400ad0:	222d                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:29 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400ad2:	800007b7          	lui	a5,0x80000
20400ad6:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400ada:	204067b7          	lui	a5,0x20406
20400ade:	a5478513          	addi	a0,a5,-1452 # 20405a54 <_exit+0xe6>
20400ae2:	2a21                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:30 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400ae4:	800017b7          	lui	a5,0x80001
20400ae8:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20400aec:	204067b7          	lui	a5,0x20406
20400af0:	a6478513          	addi	a0,a5,-1436 # 20405a64 <_exit+0xf6>
20400af4:	2219                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:31 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
20400af6:	800017b7          	lui	a5,0x80001
20400afa:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffe3cc>
20400afe:	204067b7          	lui	a5,0x20406
20400b02:	a7478513          	addi	a0,a5,-1420 # 20405a74 <_exit+0x106>
20400b06:	28d5                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:32 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
20400b08:	800017b7          	lui	a5,0x80001
20400b0c:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffe3dc>
20400b10:	204067b7          	lui	a5,0x20406
20400b14:	a8478513          	addi	a0,a5,-1404 # 20405a84 <_exit+0x116>
20400b18:	20cd                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:33 (discriminator 4)
    printf("hash addr = %08x\n", hash);
20400b1a:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2806>
20400b1e:	204067b7          	lui	a5,0x20406
20400b22:	a9478513          	addi	a0,a5,-1388 # 20405a94 <_exit+0x126>
20400b26:	28d1                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:35 (discriminator 4)
    unsigned start, end;
    int rd = 0;
20400b28:	fc042e23          	sw	zero,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:37 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS);
20400b2c:	67e1                	lui	a5,0x18
20400b2e:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:45 (discriminator 4)
    HASH(plain_text,plain_len,hash);
    printf(" Finish Hash: %07x \n", rd);
    printC(hash,9,0,1);*/


    printf("Hash HW: \n");
20400b32:	204067b7          	lui	a5,0x20406
20400b36:	aa878513          	addi	a0,a5,-1368 # 20405aa8 <_exit+0x13a>
20400b3a:	2471                	jal	20400dc6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:46 (discriminator 4)
    start = rdcycle();
20400b3c:	3f29                	jal	20400a56 <rdcycle>
20400b3e:	87aa                	mv	a5,a0
20400b40:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:47 (discriminator 4)
    HASH( plain_text, plain_len, hash);
20400b44:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2806>
20400b48:	fec42583          	lw	a1,-20(s0)
20400b4c:	800007b7          	lui	a5,0x80000
20400b50:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400b54:	f6aff0ef          	jal	ra,204002be <HASH>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:48 (discriminator 4)
    end = rdcycle();
20400b58:	3dfd                	jal	20400a56 <rdcycle>
20400b5a:	87aa                	mv	a5,a0
20400b5c:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:49 (discriminator 4)
    printf("Total time HW = %d cycles\n",end-start);
20400b60:	fd442703          	lw	a4,-44(s0)
20400b64:	fd842783          	lw	a5,-40(s0)
20400b68:	40f707b3          	sub	a5,a4,a5
20400b6c:	85be                	mv	a1,a5
20400b6e:	204067b7          	lui	a5,0x20406
20400b72:	ab478513          	addi	a0,a5,-1356 # 20405ab4 <_exit+0x146>
20400b76:	2051                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:50 (discriminator 4)
    printC(hash, 8 , 1, 1);
20400b78:	4685                	li	a3,1
20400b7a:	4605                	li	a2,1
20400b7c:	45a1                	li	a1,8
20400b7e:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2806>
20400b82:	e7eff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:51 (discriminator 4)
    printf("\nX\n");
20400b86:	204067b7          	lui	a5,0x20406
20400b8a:	ad078513          	addi	a0,a5,-1328 # 20405ad0 <_exit+0x162>
20400b8e:	2c25                	jal	20400dc6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:52 (discriminator 4)
    printf("Hash SW: \n");
20400b90:	204067b7          	lui	a5,0x20406
20400b94:	ad478513          	addi	a0,a5,-1324 # 20405ad4 <_exit+0x166>
20400b98:	243d                	jal	20400dc6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:53 (discriminator 4)
    start = rdcycle();
20400b9a:	3d75                	jal	20400a56 <rdcycle>
20400b9c:	87aa                	mv	a5,a0
20400b9e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:54 (discriminator 4)
    crypto_hash(plain_text,plain_len,hash,0);
20400ba2:	4681                	li	a3,0
20400ba4:	01418613          	addi	a2,gp,20 # 80001f1c <hash.2806>
20400ba8:	fec42583          	lw	a1,-20(s0)
20400bac:	800007b7          	lui	a5,0x80000
20400bb0:	7d078513          	addi	a0,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
20400bb4:	39b1                	jal	20400810 <crypto_hash>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:55 (discriminator 4)
    end = rdcycle();
20400bb6:	3545                	jal	20400a56 <rdcycle>
20400bb8:	87aa                	mv	a5,a0
20400bba:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:56 (discriminator 4)
    printf("Total time SW = %d cycles\n",end-start);
20400bbe:	fd442703          	lw	a4,-44(s0)
20400bc2:	fd842783          	lw	a5,-40(s0)
20400bc6:	40f707b3          	sub	a5,a4,a5
20400bca:	85be                	mv	a1,a5
20400bcc:	204067b7          	lui	a5,0x20406
20400bd0:	ae078513          	addi	a0,a5,-1312 # 20405ae0 <_exit+0x172>
20400bd4:	201d                	jal	20400bfa <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:57 (discriminator 4)
    printC(hash, 8, 1, 1);
20400bd6:	4685                	li	a3,1
20400bd8:	4605                	li	a2,1
20400bda:	45a1                	li	a1,8
20400bdc:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2806>
20400be0:	e20ff0ef          	jal	ra,20400200 <printC>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:58 (discriminator 4)
    printf("\nX\n");
20400be4:	204067b7          	lui	a5,0x20406
20400be8:	ad078513          	addi	a0,a5,-1328 # 20405ad0 <_exit+0x162>
20400bec:	2ae9                	jal	20400dc6 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:61 (discriminator 4)


    return 0;
20400bee:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/AsconHash/AsconHash.c:64 (discriminator 4)


20400bf0:	853e                	mv	a0,a5
20400bf2:	50b2                	lw	ra,44(sp)
20400bf4:	5422                	lw	s0,40(sp)
20400bf6:	6145                	addi	sp,sp,48
20400bf8:	8082                	ret

20400bfa <iprintf>:
printf():
20400bfa:	7139                	addi	sp,sp,-64
20400bfc:	da3e                	sw	a5,52(sp)
20400bfe:	d22e                	sw	a1,36(sp)
20400c00:	d432                	sw	a2,40(sp)
20400c02:	d636                	sw	a3,44(sp)
20400c04:	d83a                	sw	a4,48(sp)
20400c06:	dc42                	sw	a6,56(sp)
20400c08:	de46                	sw	a7,60(sp)
20400c0a:	5fc01797          	auipc	a5,0x5fc01
20400c0e:	afe78793          	addi	a5,a5,-1282 # 80001708 <_impure_ptr>
20400c12:	cc22                	sw	s0,24(sp)
20400c14:	4380                	lw	s0,0(a5)
20400c16:	ca26                	sw	s1,20(sp)
20400c18:	ce06                	sw	ra,28(sp)
20400c1a:	84aa                	mv	s1,a0
20400c1c:	c409                	beqz	s0,20400c26 <iprintf+0x2c>
20400c1e:	4c1c                	lw	a5,24(s0)
20400c20:	e399                	bnez	a5,20400c26 <iprintf+0x2c>
20400c22:	8522                	mv	a0,s0
20400c24:	23d5                	jal	20401208 <__sinit>
20400c26:	440c                	lw	a1,8(s0)
20400c28:	1054                	addi	a3,sp,36
20400c2a:	8626                	mv	a2,s1
20400c2c:	8522                	mv	a0,s0
20400c2e:	c636                	sw	a3,12(sp)
20400c30:	2df000ef          	jal	ra,2040170e <_vfiprintf_r>
20400c34:	40f2                	lw	ra,28(sp)
20400c36:	4462                	lw	s0,24(sp)
20400c38:	44d2                	lw	s1,20(sp)
20400c3a:	6121                	addi	sp,sp,64
20400c3c:	8082                	ret

20400c3e <putchar>:
putchar():
20400c3e:	1101                	addi	sp,sp,-32
20400c40:	5fc01797          	auipc	a5,0x5fc01
20400c44:	ac878793          	addi	a5,a5,-1336 # 80001708 <_impure_ptr>
20400c48:	cc22                	sw	s0,24(sp)
20400c4a:	4380                	lw	s0,0(a5)
20400c4c:	ce06                	sw	ra,28(sp)
20400c4e:	85aa                	mv	a1,a0
20400c50:	c419                	beqz	s0,20400c5e <putchar+0x20>
20400c52:	4c1c                	lw	a5,24(s0)
20400c54:	e789                	bnez	a5,20400c5e <putchar+0x20>
20400c56:	c62a                	sw	a0,12(sp)
20400c58:	8522                	mv	a0,s0
20400c5a:	237d                	jal	20401208 <__sinit>
20400c5c:	45b2                	lw	a1,12(sp)
20400c5e:	4410                	lw	a2,8(s0)
20400c60:	8522                	mv	a0,s0
20400c62:	4462                	lw	s0,24(sp)
20400c64:	40f2                	lw	ra,28(sp)
20400c66:	6105                	addi	sp,sp,32
20400c68:	a009                	j	20400c6a <_putc_r>

20400c6a <_putc_r>:
_putc_r():
20400c6a:	1101                	addi	sp,sp,-32
20400c6c:	cc22                	sw	s0,24(sp)
20400c6e:	ce06                	sw	ra,28(sp)
20400c70:	842a                	mv	s0,a0
20400c72:	c901                	beqz	a0,20400c82 <_putc_r+0x18>
20400c74:	4d1c                	lw	a5,24(a0)
20400c76:	e791                	bnez	a5,20400c82 <_putc_r+0x18>
20400c78:	c632                	sw	a2,12(sp)
20400c7a:	c42e                	sw	a1,8(sp)
20400c7c:	2371                	jal	20401208 <__sinit>
20400c7e:	4632                	lw	a2,12(sp)
20400c80:	45a2                	lw	a1,8(sp)
20400c82:	00005797          	auipc	a5,0x5
20400c86:	e9a78793          	addi	a5,a5,-358 # 20405b1c <__sf_fake_stdin>
20400c8a:	02f61563          	bne	a2,a5,20400cb4 <_putc_r+0x4a>
20400c8e:	4050                	lw	a2,4(s0)
20400c90:	461c                	lw	a5,8(a2)
20400c92:	17fd                	addi	a5,a5,-1
20400c94:	c61c                	sw	a5,8(a2)
20400c96:	0207df63          	bgez	a5,20400cd4 <_putc_r+0x6a>
20400c9a:	4e18                	lw	a4,24(a2)
20400c9c:	00e7c763          	blt	a5,a4,20400caa <_putc_r+0x40>
20400ca0:	0ff5f793          	andi	a5,a1,255
20400ca4:	4729                	li	a4,10
20400ca6:	02e79763          	bne	a5,a4,20400cd4 <_putc_r+0x6a>
20400caa:	8522                	mv	a0,s0
20400cac:	4462                	lw	s0,24(sp)
20400cae:	40f2                	lw	ra,28(sp)
20400cb0:	6105                	addi	sp,sp,32
20400cb2:	a20d                	j	20400dd4 <__swbuf_r>
20400cb4:	00005797          	auipc	a5,0x5
20400cb8:	e8878793          	addi	a5,a5,-376 # 20405b3c <__sf_fake_stdout>
20400cbc:	00f61463          	bne	a2,a5,20400cc4 <_putc_r+0x5a>
20400cc0:	4410                	lw	a2,8(s0)
20400cc2:	b7f9                	j	20400c90 <_putc_r+0x26>
20400cc4:	00005797          	auipc	a5,0x5
20400cc8:	e3878793          	addi	a5,a5,-456 # 20405afc <__sf_fake_stderr>
20400ccc:	fcf612e3          	bne	a2,a5,20400c90 <_putc_r+0x26>
20400cd0:	4450                	lw	a2,12(s0)
20400cd2:	bf7d                	j	20400c90 <_putc_r+0x26>
20400cd4:	421c                	lw	a5,0(a2)
20400cd6:	0ff5f513          	andi	a0,a1,255
20400cda:	00178713          	addi	a4,a5,1
20400cde:	c218                	sw	a4,0(a2)
20400ce0:	00b78023          	sb	a1,0(a5)
20400ce4:	40f2                	lw	ra,28(sp)
20400ce6:	4462                	lw	s0,24(sp)
20400ce8:	6105                	addi	sp,sp,32
20400cea:	8082                	ret

20400cec <_puts_r>:
_puts_r():
20400cec:	1101                	addi	sp,sp,-32
20400cee:	ca26                	sw	s1,20(sp)
20400cf0:	c84a                	sw	s2,16(sp)
20400cf2:	ce06                	sw	ra,28(sp)
20400cf4:	cc22                	sw	s0,24(sp)
20400cf6:	c64e                	sw	s3,12(sp)
20400cf8:	c452                	sw	s4,8(sp)
20400cfa:	84aa                	mv	s1,a0
20400cfc:	892e                	mv	s2,a1
20400cfe:	c501                	beqz	a0,20400d06 <_puts_r+0x1a>
20400d00:	4d1c                	lw	a5,24(a0)
20400d02:	e391                	bnez	a5,20400d06 <_puts_r+0x1a>
20400d04:	2311                	jal	20401208 <__sinit>
20400d06:	4c9c                	lw	a5,24(s1)
20400d08:	4480                	lw	s0,8(s1)
20400d0a:	e399                	bnez	a5,20400d10 <_puts_r+0x24>
20400d0c:	8526                	mv	a0,s1
20400d0e:	29ed                	jal	20401208 <__sinit>
20400d10:	00005797          	auipc	a5,0x5
20400d14:	e0c78793          	addi	a5,a5,-500 # 20405b1c <__sf_fake_stdin>
20400d18:	02f41c63          	bne	s0,a5,20400d50 <_puts_r+0x64>
20400d1c:	40c0                	lw	s0,4(s1)
20400d1e:	00c45783          	lhu	a5,12(s0)
20400d22:	8ba1                	andi	a5,a5,8
20400d24:	c7b1                	beqz	a5,20400d70 <_puts_r+0x84>
20400d26:	481c                	lw	a5,16(s0)
20400d28:	c7a1                	beqz	a5,20400d70 <_puts_r+0x84>
20400d2a:	59fd                	li	s3,-1
20400d2c:	4a29                	li	s4,10
20400d2e:	441c                	lw	a5,8(s0)
20400d30:	00094583          	lbu	a1,0(s2)
20400d34:	17fd                	addi	a5,a5,-1
20400d36:	e9b1                	bnez	a1,20400d8a <_puts_r+0x9e>
20400d38:	c41c                	sw	a5,8(s0)
20400d3a:	0607de63          	bgez	a5,20400db6 <_puts_r+0xca>
20400d3e:	8622                	mv	a2,s0
20400d40:	45a9                	li	a1,10
20400d42:	8526                	mv	a0,s1
20400d44:	2841                	jal	20400dd4 <__swbuf_r>
20400d46:	57fd                	li	a5,-1
20400d48:	02f50863          	beq	a0,a5,20400d78 <_puts_r+0x8c>
20400d4c:	4529                	li	a0,10
20400d4e:	a035                	j	20400d7a <_puts_r+0x8e>
20400d50:	00005797          	auipc	a5,0x5
20400d54:	dec78793          	addi	a5,a5,-532 # 20405b3c <__sf_fake_stdout>
20400d58:	00f41463          	bne	s0,a5,20400d60 <_puts_r+0x74>
20400d5c:	4480                	lw	s0,8(s1)
20400d5e:	b7c1                	j	20400d1e <_puts_r+0x32>
20400d60:	00005797          	auipc	a5,0x5
20400d64:	d9c78793          	addi	a5,a5,-612 # 20405afc <__sf_fake_stderr>
20400d68:	faf41be3          	bne	s0,a5,20400d1e <_puts_r+0x32>
20400d6c:	44c0                	lw	s0,12(s1)
20400d6e:	bf45                	j	20400d1e <_puts_r+0x32>
20400d70:	85a2                	mv	a1,s0
20400d72:	8526                	mv	a0,s1
20400d74:	2205                	jal	20400e94 <__swsetup_r>
20400d76:	d955                	beqz	a0,20400d2a <_puts_r+0x3e>
20400d78:	557d                	li	a0,-1
20400d7a:	40f2                	lw	ra,28(sp)
20400d7c:	4462                	lw	s0,24(sp)
20400d7e:	44d2                	lw	s1,20(sp)
20400d80:	4942                	lw	s2,16(sp)
20400d82:	49b2                	lw	s3,12(sp)
20400d84:	4a22                	lw	s4,8(sp)
20400d86:	6105                	addi	sp,sp,32
20400d88:	8082                	ret
20400d8a:	c41c                	sw	a5,8(s0)
20400d8c:	0905                	addi	s2,s2,1
20400d8e:	0007d763          	bgez	a5,20400d9c <_puts_r+0xb0>
20400d92:	4c18                	lw	a4,24(s0)
20400d94:	00e7cb63          	blt	a5,a4,20400daa <_puts_r+0xbe>
20400d98:	01458963          	beq	a1,s4,20400daa <_puts_r+0xbe>
20400d9c:	401c                	lw	a5,0(s0)
20400d9e:	00178713          	addi	a4,a5,1
20400da2:	c018                	sw	a4,0(s0)
20400da4:	00b78023          	sb	a1,0(a5)
20400da8:	b759                	j	20400d2e <_puts_r+0x42>
20400daa:	8622                	mv	a2,s0
20400dac:	8526                	mv	a0,s1
20400dae:	201d                	jal	20400dd4 <__swbuf_r>
20400db0:	f7351fe3          	bne	a0,s3,20400d2e <_puts_r+0x42>
20400db4:	b7d1                	j	20400d78 <_puts_r+0x8c>
20400db6:	401c                	lw	a5,0(s0)
20400db8:	00178713          	addi	a4,a5,1
20400dbc:	c018                	sw	a4,0(s0)
20400dbe:	4729                	li	a4,10
20400dc0:	00e78023          	sb	a4,0(a5)
20400dc4:	b761                	j	20400d4c <_puts_r+0x60>

20400dc6 <puts>:
puts():
20400dc6:	5fc01797          	auipc	a5,0x5fc01
20400dca:	94278793          	addi	a5,a5,-1726 # 80001708 <_impure_ptr>
20400dce:	85aa                	mv	a1,a0
20400dd0:	4388                	lw	a0,0(a5)
20400dd2:	bf29                	j	20400cec <_puts_r>

20400dd4 <__swbuf_r>:
__swbuf_r():
20400dd4:	1101                	addi	sp,sp,-32
20400dd6:	cc22                	sw	s0,24(sp)
20400dd8:	ca26                	sw	s1,20(sp)
20400dda:	c84a                	sw	s2,16(sp)
20400ddc:	ce06                	sw	ra,28(sp)
20400dde:	c64e                	sw	s3,12(sp)
20400de0:	84aa                	mv	s1,a0
20400de2:	892e                	mv	s2,a1
20400de4:	8432                	mv	s0,a2
20400de6:	c501                	beqz	a0,20400dee <__swbuf_r+0x1a>
20400de8:	4d1c                	lw	a5,24(a0)
20400dea:	e391                	bnez	a5,20400dee <__swbuf_r+0x1a>
20400dec:	2931                	jal	20401208 <__sinit>
20400dee:	00005797          	auipc	a5,0x5
20400df2:	d2e78793          	addi	a5,a5,-722 # 20405b1c <__sf_fake_stdin>
20400df6:	06f41963          	bne	s0,a5,20400e68 <__swbuf_r+0x94>
20400dfa:	40c0                	lw	s0,4(s1)
20400dfc:	4c1c                	lw	a5,24(s0)
20400dfe:	c41c                	sw	a5,8(s0)
20400e00:	00c45783          	lhu	a5,12(s0)
20400e04:	8ba1                	andi	a5,a5,8
20400e06:	c3c9                	beqz	a5,20400e88 <__swbuf_r+0xb4>
20400e08:	481c                	lw	a5,16(s0)
20400e0a:	cfbd                	beqz	a5,20400e88 <__swbuf_r+0xb4>
20400e0c:	481c                	lw	a5,16(s0)
20400e0e:	4008                	lw	a0,0(s0)
20400e10:	0ff97993          	andi	s3,s2,255
20400e14:	0ff97913          	andi	s2,s2,255
20400e18:	8d1d                	sub	a0,a0,a5
20400e1a:	485c                	lw	a5,20(s0)
20400e1c:	00f54663          	blt	a0,a5,20400e28 <__swbuf_r+0x54>
20400e20:	85a2                	mv	a1,s0
20400e22:	8526                	mv	a0,s1
20400e24:	24e9                	jal	204010ee <_fflush_r>
20400e26:	e52d                	bnez	a0,20400e90 <__swbuf_r+0xbc>
20400e28:	441c                	lw	a5,8(s0)
20400e2a:	0505                	addi	a0,a0,1
20400e2c:	17fd                	addi	a5,a5,-1
20400e2e:	c41c                	sw	a5,8(s0)
20400e30:	401c                	lw	a5,0(s0)
20400e32:	00178713          	addi	a4,a5,1
20400e36:	c018                	sw	a4,0(s0)
20400e38:	01378023          	sb	s3,0(a5)
20400e3c:	485c                	lw	a5,20(s0)
20400e3e:	00a78963          	beq	a5,a0,20400e50 <__swbuf_r+0x7c>
20400e42:	00c45783          	lhu	a5,12(s0)
20400e46:	8b85                	andi	a5,a5,1
20400e48:	cb81                	beqz	a5,20400e58 <__swbuf_r+0x84>
20400e4a:	47a9                	li	a5,10
20400e4c:	00f91663          	bne	s2,a5,20400e58 <__swbuf_r+0x84>
20400e50:	85a2                	mv	a1,s0
20400e52:	8526                	mv	a0,s1
20400e54:	2c69                	jal	204010ee <_fflush_r>
20400e56:	ed0d                	bnez	a0,20400e90 <__swbuf_r+0xbc>
20400e58:	40f2                	lw	ra,28(sp)
20400e5a:	4462                	lw	s0,24(sp)
20400e5c:	854a                	mv	a0,s2
20400e5e:	44d2                	lw	s1,20(sp)
20400e60:	4942                	lw	s2,16(sp)
20400e62:	49b2                	lw	s3,12(sp)
20400e64:	6105                	addi	sp,sp,32
20400e66:	8082                	ret
20400e68:	00005797          	auipc	a5,0x5
20400e6c:	cd478793          	addi	a5,a5,-812 # 20405b3c <__sf_fake_stdout>
20400e70:	00f41463          	bne	s0,a5,20400e78 <__swbuf_r+0xa4>
20400e74:	4480                	lw	s0,8(s1)
20400e76:	b759                	j	20400dfc <__swbuf_r+0x28>
20400e78:	00005797          	auipc	a5,0x5
20400e7c:	c8478793          	addi	a5,a5,-892 # 20405afc <__sf_fake_stderr>
20400e80:	f6f41ee3          	bne	s0,a5,20400dfc <__swbuf_r+0x28>
20400e84:	44c0                	lw	s0,12(s1)
20400e86:	bf9d                	j	20400dfc <__swbuf_r+0x28>
20400e88:	85a2                	mv	a1,s0
20400e8a:	8526                	mv	a0,s1
20400e8c:	2021                	jal	20400e94 <__swsetup_r>
20400e8e:	dd3d                	beqz	a0,20400e0c <__swbuf_r+0x38>
20400e90:	597d                	li	s2,-1
20400e92:	b7d9                	j	20400e58 <__swbuf_r+0x84>

20400e94 <__swsetup_r>:
__swsetup_r():
20400e94:	1141                	addi	sp,sp,-16
20400e96:	5fc01797          	auipc	a5,0x5fc01
20400e9a:	87278793          	addi	a5,a5,-1934 # 80001708 <_impure_ptr>
20400e9e:	c226                	sw	s1,4(sp)
20400ea0:	4384                	lw	s1,0(a5)
20400ea2:	c422                	sw	s0,8(sp)
20400ea4:	c04a                	sw	s2,0(sp)
20400ea6:	c606                	sw	ra,12(sp)
20400ea8:	892a                	mv	s2,a0
20400eaa:	842e                	mv	s0,a1
20400eac:	c489                	beqz	s1,20400eb6 <__swsetup_r+0x22>
20400eae:	4c9c                	lw	a5,24(s1)
20400eb0:	e399                	bnez	a5,20400eb6 <__swsetup_r+0x22>
20400eb2:	8526                	mv	a0,s1
20400eb4:	2e91                	jal	20401208 <__sinit>
20400eb6:	00005797          	auipc	a5,0x5
20400eba:	c6678793          	addi	a5,a5,-922 # 20405b1c <__sf_fake_stdin>
20400ebe:	02f41c63          	bne	s0,a5,20400ef6 <__swsetup_r+0x62>
20400ec2:	40c0                	lw	s0,4(s1)
20400ec4:	00c41703          	lh	a4,12(s0)
20400ec8:	01071793          	slli	a5,a4,0x10
20400ecc:	83c1                	srli	a5,a5,0x10
20400ece:	0087f693          	andi	a3,a5,8
20400ed2:	eeb5                	bnez	a3,20400f4e <__swsetup_r+0xba>
20400ed4:	0107f693          	andi	a3,a5,16
20400ed8:	ee9d                	bnez	a3,20400f16 <__swsetup_r+0x82>
20400eda:	47a5                	li	a5,9
20400edc:	00f92023          	sw	a5,0(s2)
20400ee0:	04076713          	ori	a4,a4,64
20400ee4:	00e41623          	sh	a4,12(s0)
20400ee8:	557d                	li	a0,-1
20400eea:	40b2                	lw	ra,12(sp)
20400eec:	4422                	lw	s0,8(sp)
20400eee:	4492                	lw	s1,4(sp)
20400ef0:	4902                	lw	s2,0(sp)
20400ef2:	0141                	addi	sp,sp,16
20400ef4:	8082                	ret
20400ef6:	00005797          	auipc	a5,0x5
20400efa:	c4678793          	addi	a5,a5,-954 # 20405b3c <__sf_fake_stdout>
20400efe:	00f41463          	bne	s0,a5,20400f06 <__swsetup_r+0x72>
20400f02:	4480                	lw	s0,8(s1)
20400f04:	b7c1                	j	20400ec4 <__swsetup_r+0x30>
20400f06:	00005797          	auipc	a5,0x5
20400f0a:	bf678793          	addi	a5,a5,-1034 # 20405afc <__sf_fake_stderr>
20400f0e:	faf41be3          	bne	s0,a5,20400ec4 <__swsetup_r+0x30>
20400f12:	44c0                	lw	s0,12(s1)
20400f14:	bf45                	j	20400ec4 <__swsetup_r+0x30>
20400f16:	8b91                	andi	a5,a5,4
20400f18:	c78d                	beqz	a5,20400f42 <__swsetup_r+0xae>
20400f1a:	584c                	lw	a1,52(s0)
20400f1c:	c989                	beqz	a1,20400f2e <__swsetup_r+0x9a>
20400f1e:	04440793          	addi	a5,s0,68
20400f22:	00f58463          	beq	a1,a5,20400f2a <__swsetup_r+0x96>
20400f26:	854a                	mv	a0,s2
20400f28:	2bc5                	jal	20401518 <_free_r>
20400f2a:	02042a23          	sw	zero,52(s0)
20400f2e:	00c45783          	lhu	a5,12(s0)
20400f32:	00042223          	sw	zero,4(s0)
20400f36:	fdb7f793          	andi	a5,a5,-37
20400f3a:	00f41623          	sh	a5,12(s0)
20400f3e:	481c                	lw	a5,16(s0)
20400f40:	c01c                	sw	a5,0(s0)
20400f42:	00c45783          	lhu	a5,12(s0)
20400f46:	0087e793          	ori	a5,a5,8
20400f4a:	00f41623          	sh	a5,12(s0)
20400f4e:	481c                	lw	a5,16(s0)
20400f50:	ef81                	bnez	a5,20400f68 <__swsetup_r+0xd4>
20400f52:	00c45783          	lhu	a5,12(s0)
20400f56:	20000713          	li	a4,512
20400f5a:	2807f793          	andi	a5,a5,640
20400f5e:	00e78563          	beq	a5,a4,20400f68 <__swsetup_r+0xd4>
20400f62:	85a2                	mv	a1,s0
20400f64:	854a                	mv	a0,s2
20400f66:	21bd                	jal	204013d4 <__smakebuf_r>
20400f68:	00c45783          	lhu	a5,12(s0)
20400f6c:	0017f713          	andi	a4,a5,1
20400f70:	c705                	beqz	a4,20400f98 <__swsetup_r+0x104>
20400f72:	485c                	lw	a5,20(s0)
20400f74:	00042423          	sw	zero,8(s0)
20400f78:	40f007b3          	neg	a5,a5
20400f7c:	cc1c                	sw	a5,24(s0)
20400f7e:	481c                	lw	a5,16(s0)
20400f80:	4501                	li	a0,0
20400f82:	f7a5                	bnez	a5,20400eea <__swsetup_r+0x56>
20400f84:	00c41783          	lh	a5,12(s0)
20400f88:	0807f713          	andi	a4,a5,128
20400f8c:	df39                	beqz	a4,20400eea <__swsetup_r+0x56>
20400f8e:	0407e793          	ori	a5,a5,64
20400f92:	00f41623          	sh	a5,12(s0)
20400f96:	bf89                	j	20400ee8 <__swsetup_r+0x54>
20400f98:	8b89                	andi	a5,a5,2
20400f9a:	4701                	li	a4,0
20400f9c:	e391                	bnez	a5,20400fa0 <__swsetup_r+0x10c>
20400f9e:	4858                	lw	a4,20(s0)
20400fa0:	c418                	sw	a4,8(s0)
20400fa2:	bff1                	j	20400f7e <__swsetup_r+0xea>

20400fa4 <__sflush_r>:
__sflush_r():
20400fa4:	00c5d783          	lhu	a5,12(a1)
20400fa8:	1101                	addi	sp,sp,-32
20400faa:	cc22                	sw	s0,24(sp)
20400fac:	ca26                	sw	s1,20(sp)
20400fae:	ce06                	sw	ra,28(sp)
20400fb0:	c84a                	sw	s2,16(sp)
20400fb2:	c64e                	sw	s3,12(sp)
20400fb4:	0087f713          	andi	a4,a5,8
20400fb8:	84aa                	mv	s1,a0
20400fba:	842e                	mv	s0,a1
20400fbc:	e765                	bnez	a4,204010a4 <__sflush_r+0x100>
20400fbe:	41d8                	lw	a4,4(a1)
20400fc0:	00e04763          	bgtz	a4,20400fce <__sflush_r+0x2a>
20400fc4:	41b8                	lw	a4,64(a1)
20400fc6:	00e04463          	bgtz	a4,20400fce <__sflush_r+0x2a>
20400fca:	4501                	li	a0,0
20400fcc:	a0c1                	j	2040108c <__sflush_r+0xe8>
20400fce:	5458                	lw	a4,44(s0)
20400fd0:	df6d                	beqz	a4,20400fca <__sflush_r+0x26>
20400fd2:	0004a903          	lw	s2,0(s1)
20400fd6:	01379693          	slli	a3,a5,0x13
20400fda:	0004a023          	sw	zero,0(s1)
20400fde:	0606de63          	bgez	a3,2040105a <__sflush_r+0xb6>
20400fe2:	4868                	lw	a0,84(s0)
20400fe4:	00c45783          	lhu	a5,12(s0)
20400fe8:	8b91                	andi	a5,a5,4
20400fea:	c799                	beqz	a5,20400ff8 <__sflush_r+0x54>
20400fec:	405c                	lw	a5,4(s0)
20400fee:	8d1d                	sub	a0,a0,a5
20400ff0:	585c                	lw	a5,52(s0)
20400ff2:	c399                	beqz	a5,20400ff8 <__sflush_r+0x54>
20400ff4:	403c                	lw	a5,64(s0)
20400ff6:	8d1d                	sub	a0,a0,a5
20400ff8:	545c                	lw	a5,44(s0)
20400ffa:	500c                	lw	a1,32(s0)
20400ffc:	862a                	mv	a2,a0
20400ffe:	4681                	li	a3,0
20401000:	8526                	mv	a0,s1
20401002:	9782                	jalr	a5
20401004:	57fd                	li	a5,-1
20401006:	00c45703          	lhu	a4,12(s0)
2040100a:	00f51d63          	bne	a0,a5,20401024 <__sflush_r+0x80>
2040100e:	4094                	lw	a3,0(s1)
20401010:	47f5                	li	a5,29
20401012:	08d7e463          	bltu	a5,a3,2040109a <__sflush_r+0xf6>
20401016:	204007b7          	lui	a5,0x20400
2040101a:	0785                	addi	a5,a5,1
2040101c:	00d7d7b3          	srl	a5,a5,a3
20401020:	8b85                	andi	a5,a5,1
20401022:	cfa5                	beqz	a5,2040109a <__sflush_r+0xf6>
20401024:	481c                	lw	a5,16(s0)
20401026:	00042223          	sw	zero,4(s0)
2040102a:	c01c                	sw	a5,0(s0)
2040102c:	01371793          	slli	a5,a4,0x13
20401030:	0007d863          	bgez	a5,20401040 <__sflush_r+0x9c>
20401034:	57fd                	li	a5,-1
20401036:	00f51463          	bne	a0,a5,2040103e <__sflush_r+0x9a>
2040103a:	409c                	lw	a5,0(s1)
2040103c:	e391                	bnez	a5,20401040 <__sflush_r+0x9c>
2040103e:	c868                	sw	a0,84(s0)
20401040:	584c                	lw	a1,52(s0)
20401042:	0124a023          	sw	s2,0(s1)
20401046:	d1d1                	beqz	a1,20400fca <__sflush_r+0x26>
20401048:	04440793          	addi	a5,s0,68
2040104c:	00f58463          	beq	a1,a5,20401054 <__sflush_r+0xb0>
20401050:	8526                	mv	a0,s1
20401052:	21d9                	jal	20401518 <_free_r>
20401054:	02042a23          	sw	zero,52(s0)
20401058:	bf8d                	j	20400fca <__sflush_r+0x26>
2040105a:	500c                	lw	a1,32(s0)
2040105c:	4685                	li	a3,1
2040105e:	4601                	li	a2,0
20401060:	8526                	mv	a0,s1
20401062:	9702                	jalr	a4
20401064:	57fd                	li	a5,-1
20401066:	f6f51fe3          	bne	a0,a5,20400fe4 <__sflush_r+0x40>
2040106a:	409c                	lw	a5,0(s1)
2040106c:	dfa5                	beqz	a5,20400fe4 <__sflush_r+0x40>
2040106e:	4775                	li	a4,29
20401070:	00e78563          	beq	a5,a4,2040107a <__sflush_r+0xd6>
20401074:	4759                	li	a4,22
20401076:	00e79563          	bne	a5,a4,20401080 <__sflush_r+0xdc>
2040107a:	0124a023          	sw	s2,0(s1)
2040107e:	b7b1                	j	20400fca <__sflush_r+0x26>
20401080:	00c45783          	lhu	a5,12(s0)
20401084:	0407e793          	ori	a5,a5,64
20401088:	00f41623          	sh	a5,12(s0)
2040108c:	40f2                	lw	ra,28(sp)
2040108e:	4462                	lw	s0,24(sp)
20401090:	44d2                	lw	s1,20(sp)
20401092:	4942                	lw	s2,16(sp)
20401094:	49b2                	lw	s3,12(sp)
20401096:	6105                	addi	sp,sp,32
20401098:	8082                	ret
2040109a:	04076713          	ori	a4,a4,64
2040109e:	00e41623          	sh	a4,12(s0)
204010a2:	b7ed                	j	2040108c <__sflush_r+0xe8>
204010a4:	0105a983          	lw	s3,16(a1)
204010a8:	f20981e3          	beqz	s3,20400fca <__sflush_r+0x26>
204010ac:	0005a903          	lw	s2,0(a1)
204010b0:	8b8d                	andi	a5,a5,3
204010b2:	0135a023          	sw	s3,0(a1)
204010b6:	41390933          	sub	s2,s2,s3
204010ba:	4701                	li	a4,0
204010bc:	e391                	bnez	a5,204010c0 <__sflush_r+0x11c>
204010be:	49d8                	lw	a4,20(a1)
204010c0:	c418                	sw	a4,8(s0)
204010c2:	f12054e3          	blez	s2,20400fca <__sflush_r+0x26>
204010c6:	541c                	lw	a5,40(s0)
204010c8:	500c                	lw	a1,32(s0)
204010ca:	86ca                	mv	a3,s2
204010cc:	864e                	mv	a2,s3
204010ce:	8526                	mv	a0,s1
204010d0:	9782                	jalr	a5
204010d2:	00a04a63          	bgtz	a0,204010e6 <__sflush_r+0x142>
204010d6:	00c45783          	lhu	a5,12(s0)
204010da:	557d                	li	a0,-1
204010dc:	0407e793          	ori	a5,a5,64
204010e0:	00f41623          	sh	a5,12(s0)
204010e4:	b765                	j	2040108c <__sflush_r+0xe8>
204010e6:	99aa                	add	s3,s3,a0
204010e8:	40a90933          	sub	s2,s2,a0
204010ec:	bfd9                	j	204010c2 <__sflush_r+0x11e>

204010ee <_fflush_r>:
_fflush_r():
204010ee:	499c                	lw	a5,16(a1)
204010f0:	cfb9                	beqz	a5,2040114e <_fflush_r+0x60>
204010f2:	1101                	addi	sp,sp,-32
204010f4:	cc22                	sw	s0,24(sp)
204010f6:	ce06                	sw	ra,28(sp)
204010f8:	842a                	mv	s0,a0
204010fa:	c511                	beqz	a0,20401106 <_fflush_r+0x18>
204010fc:	4d1c                	lw	a5,24(a0)
204010fe:	e781                	bnez	a5,20401106 <_fflush_r+0x18>
20401100:	c62e                	sw	a1,12(sp)
20401102:	2219                	jal	20401208 <__sinit>
20401104:	45b2                	lw	a1,12(sp)
20401106:	00005797          	auipc	a5,0x5
2040110a:	a1678793          	addi	a5,a5,-1514 # 20405b1c <__sf_fake_stdin>
2040110e:	00f59b63          	bne	a1,a5,20401124 <_fflush_r+0x36>
20401112:	404c                	lw	a1,4(s0)
20401114:	00c59783          	lh	a5,12(a1)
20401118:	c795                	beqz	a5,20401144 <_fflush_r+0x56>
2040111a:	8522                	mv	a0,s0
2040111c:	4462                	lw	s0,24(sp)
2040111e:	40f2                	lw	ra,28(sp)
20401120:	6105                	addi	sp,sp,32
20401122:	b549                	j	20400fa4 <__sflush_r>
20401124:	00005797          	auipc	a5,0x5
20401128:	a1878793          	addi	a5,a5,-1512 # 20405b3c <__sf_fake_stdout>
2040112c:	00f59463          	bne	a1,a5,20401134 <_fflush_r+0x46>
20401130:	440c                	lw	a1,8(s0)
20401132:	b7cd                	j	20401114 <_fflush_r+0x26>
20401134:	00005797          	auipc	a5,0x5
20401138:	9c878793          	addi	a5,a5,-1592 # 20405afc <__sf_fake_stderr>
2040113c:	fcf59ce3          	bne	a1,a5,20401114 <_fflush_r+0x26>
20401140:	444c                	lw	a1,12(s0)
20401142:	bfc9                	j	20401114 <_fflush_r+0x26>
20401144:	40f2                	lw	ra,28(sp)
20401146:	4462                	lw	s0,24(sp)
20401148:	4501                	li	a0,0
2040114a:	6105                	addi	sp,sp,32
2040114c:	8082                	ret
2040114e:	4501                	li	a0,0
20401150:	8082                	ret

20401152 <std>:
std():
20401152:	1141                	addi	sp,sp,-16
20401154:	c422                	sw	s0,8(sp)
20401156:	c606                	sw	ra,12(sp)
20401158:	842a                	mv	s0,a0
2040115a:	00b51623          	sh	a1,12(a0)
2040115e:	00c51723          	sh	a2,14(a0)
20401162:	00052023          	sw	zero,0(a0)
20401166:	00052223          	sw	zero,4(a0)
2040116a:	00052423          	sw	zero,8(a0)
2040116e:	06052223          	sw	zero,100(a0)
20401172:	00052823          	sw	zero,16(a0)
20401176:	00052a23          	sw	zero,20(a0)
2040117a:	00052c23          	sw	zero,24(a0)
2040117e:	4621                	li	a2,8
20401180:	4581                	li	a1,0
20401182:	05c50513          	addi	a0,a0,92
20401186:	24ed                	jal	20401470 <memset>
20401188:	00001797          	auipc	a5,0x1
2040118c:	84678793          	addi	a5,a5,-1978 # 204019ce <__sread>
20401190:	d05c                	sw	a5,36(s0)
20401192:	00001797          	auipc	a5,0x1
20401196:	86c78793          	addi	a5,a5,-1940 # 204019fe <__swrite>
2040119a:	d41c                	sw	a5,40(s0)
2040119c:	00001797          	auipc	a5,0x1
204011a0:	8b078793          	addi	a5,a5,-1872 # 20401a4c <__sseek>
204011a4:	d45c                	sw	a5,44(s0)
204011a6:	00001797          	auipc	a5,0x1
204011aa:	8dc78793          	addi	a5,a5,-1828 # 20401a82 <__sclose>
204011ae:	d000                	sw	s0,32(s0)
204011b0:	d81c                	sw	a5,48(s0)
204011b2:	40b2                	lw	ra,12(sp)
204011b4:	4422                	lw	s0,8(sp)
204011b6:	0141                	addi	sp,sp,16
204011b8:	8082                	ret

204011ba <_cleanup_r>:
_cleanup_r():
204011ba:	00000597          	auipc	a1,0x0
204011be:	f3458593          	addi	a1,a1,-204 # 204010ee <_fflush_r>
204011c2:	a2b9                	j	20401310 <_fwalk_reent>

204011c4 <__sfmoreglue>:
__sfmoreglue():
204011c4:	1141                	addi	sp,sp,-16
204011c6:	c226                	sw	s1,4(sp)
204011c8:	06800613          	li	a2,104
204011cc:	fff58493          	addi	s1,a1,-1
204011d0:	02c484b3          	mul	s1,s1,a2
204011d4:	c04a                	sw	s2,0(sp)
204011d6:	892e                	mv	s2,a1
204011d8:	c422                	sw	s0,8(sp)
204011da:	c606                	sw	ra,12(sp)
204011dc:	07448593          	addi	a1,s1,116
204011e0:	26d5                	jal	204015c4 <_malloc_r>
204011e2:	842a                	mv	s0,a0
204011e4:	c919                	beqz	a0,204011fa <__sfmoreglue+0x36>
204011e6:	00052023          	sw	zero,0(a0)
204011ea:	01252223          	sw	s2,4(a0)
204011ee:	0531                	addi	a0,a0,12
204011f0:	c408                	sw	a0,8(s0)
204011f2:	06848613          	addi	a2,s1,104
204011f6:	4581                	li	a1,0
204011f8:	2ca5                	jal	20401470 <memset>
204011fa:	8522                	mv	a0,s0
204011fc:	40b2                	lw	ra,12(sp)
204011fe:	4422                	lw	s0,8(sp)
20401200:	4492                	lw	s1,4(sp)
20401202:	4902                	lw	s2,0(sp)
20401204:	0141                	addi	sp,sp,16
20401206:	8082                	ret

20401208 <__sinit>:
__sinit():
20401208:	4d1c                	lw	a5,24(a0)
2040120a:	e3bd                	bnez	a5,20401270 <__sinit+0x68>
2040120c:	1141                	addi	sp,sp,-16
2040120e:	c606                	sw	ra,12(sp)
20401210:	c422                	sw	s0,8(sp)
20401212:	00000797          	auipc	a5,0x0
20401216:	fa878793          	addi	a5,a5,-88 # 204011ba <_cleanup_r>
2040121a:	d51c                	sw	a5,40(a0)
2040121c:	5fc00797          	auipc	a5,0x5fc00
20401220:	4f078793          	addi	a5,a5,1264 # 8000170c <_global_impure_ptr>
20401224:	439c                	lw	a5,0(a5)
20401226:	04052423          	sw	zero,72(a0)
2040122a:	04052623          	sw	zero,76(a0)
2040122e:	04052823          	sw	zero,80(a0)
20401232:	00f51463          	bne	a0,a5,2040123a <__sinit+0x32>
20401236:	4785                	li	a5,1
20401238:	cd1c                	sw	a5,24(a0)
2040123a:	842a                	mv	s0,a0
2040123c:	281d                	jal	20401272 <__sfp>
2040123e:	c048                	sw	a0,4(s0)
20401240:	8522                	mv	a0,s0
20401242:	2805                	jal	20401272 <__sfp>
20401244:	c408                	sw	a0,8(s0)
20401246:	8522                	mv	a0,s0
20401248:	202d                	jal	20401272 <__sfp>
2040124a:	c448                	sw	a0,12(s0)
2040124c:	4048                	lw	a0,4(s0)
2040124e:	4601                	li	a2,0
20401250:	4591                	li	a1,4
20401252:	3701                	jal	20401152 <std>
20401254:	4408                	lw	a0,8(s0)
20401256:	4605                	li	a2,1
20401258:	45a5                	li	a1,9
2040125a:	3de5                	jal	20401152 <std>
2040125c:	4448                	lw	a0,12(s0)
2040125e:	4609                	li	a2,2
20401260:	45c9                	li	a1,18
20401262:	3dc5                	jal	20401152 <std>
20401264:	4785                	li	a5,1
20401266:	cc1c                	sw	a5,24(s0)
20401268:	40b2                	lw	ra,12(sp)
2040126a:	4422                	lw	s0,8(sp)
2040126c:	0141                	addi	sp,sp,16
2040126e:	8082                	ret
20401270:	8082                	ret

20401272 <__sfp>:
__sfp():
20401272:	1141                	addi	sp,sp,-16
20401274:	5fc00797          	auipc	a5,0x5fc00
20401278:	49878793          	addi	a5,a5,1176 # 8000170c <_global_impure_ptr>
2040127c:	c226                	sw	s1,4(sp)
2040127e:	4384                	lw	s1,0(a5)
20401280:	c04a                	sw	s2,0(sp)
20401282:	c606                	sw	ra,12(sp)
20401284:	4c9c                	lw	a5,24(s1)
20401286:	c422                	sw	s0,8(sp)
20401288:	892a                	mv	s2,a0
2040128a:	e399                	bnez	a5,20401290 <__sfp+0x1e>
2040128c:	8526                	mv	a0,s1
2040128e:	3fad                	jal	20401208 <__sinit>
20401290:	04848493          	addi	s1,s1,72
20401294:	4480                	lw	s0,8(s1)
20401296:	40dc                	lw	a5,4(s1)
20401298:	17fd                	addi	a5,a5,-1
2040129a:	0007d663          	bgez	a5,204012a6 <__sfp+0x34>
2040129e:	409c                	lw	a5,0(s1)
204012a0:	cfb1                	beqz	a5,204012fc <__sfp+0x8a>
204012a2:	4084                	lw	s1,0(s1)
204012a4:	bfc5                	j	20401294 <__sfp+0x22>
204012a6:	00c41703          	lh	a4,12(s0)
204012aa:	e731                	bnez	a4,204012f6 <__sfp+0x84>
204012ac:	77c1                	lui	a5,0xffff0
204012ae:	0785                	addi	a5,a5,1
204012b0:	06042223          	sw	zero,100(s0)
204012b4:	00042023          	sw	zero,0(s0)
204012b8:	00042223          	sw	zero,4(s0)
204012bc:	00042423          	sw	zero,8(s0)
204012c0:	c45c                	sw	a5,12(s0)
204012c2:	00042823          	sw	zero,16(s0)
204012c6:	00042a23          	sw	zero,20(s0)
204012ca:	00042c23          	sw	zero,24(s0)
204012ce:	4621                	li	a2,8
204012d0:	4581                	li	a1,0
204012d2:	05c40513          	addi	a0,s0,92
204012d6:	2a69                	jal	20401470 <memset>
204012d8:	02042a23          	sw	zero,52(s0)
204012dc:	02042c23          	sw	zero,56(s0)
204012e0:	04042423          	sw	zero,72(s0)
204012e4:	04042623          	sw	zero,76(s0)
204012e8:	8522                	mv	a0,s0
204012ea:	40b2                	lw	ra,12(sp)
204012ec:	4422                	lw	s0,8(sp)
204012ee:	4492                	lw	s1,4(sp)
204012f0:	4902                	lw	s2,0(sp)
204012f2:	0141                	addi	sp,sp,16
204012f4:	8082                	ret
204012f6:	06840413          	addi	s0,s0,104
204012fa:	bf79                	j	20401298 <__sfp+0x26>
204012fc:	4591                	li	a1,4
204012fe:	854a                	mv	a0,s2
20401300:	35d1                	jal	204011c4 <__sfmoreglue>
20401302:	c088                	sw	a0,0(s1)
20401304:	842a                	mv	s0,a0
20401306:	fd51                	bnez	a0,204012a2 <__sfp+0x30>
20401308:	47b1                	li	a5,12
2040130a:	00f92023          	sw	a5,0(s2)
2040130e:	bfe9                	j	204012e8 <__sfp+0x76>

20401310 <_fwalk_reent>:
_fwalk_reent():
20401310:	7179                	addi	sp,sp,-48
20401312:	d422                	sw	s0,40(sp)
20401314:	d04a                	sw	s2,32(sp)
20401316:	cc52                	sw	s4,24(sp)
20401318:	ca56                	sw	s5,20(sp)
2040131a:	c85a                	sw	s6,16(sp)
2040131c:	c65e                	sw	s7,12(sp)
2040131e:	d606                	sw	ra,44(sp)
20401320:	d226                	sw	s1,36(sp)
20401322:	ce4e                	sw	s3,28(sp)
20401324:	8a2a                	mv	s4,a0
20401326:	8aae                	mv	s5,a1
20401328:	04850413          	addi	s0,a0,72
2040132c:	4901                	li	s2,0
2040132e:	4b05                	li	s6,1
20401330:	5bfd                	li	s7,-1
20401332:	ec09                	bnez	s0,2040134c <_fwalk_reent+0x3c>
20401334:	50b2                	lw	ra,44(sp)
20401336:	5422                	lw	s0,40(sp)
20401338:	854a                	mv	a0,s2
2040133a:	5492                	lw	s1,36(sp)
2040133c:	5902                	lw	s2,32(sp)
2040133e:	49f2                	lw	s3,28(sp)
20401340:	4a62                	lw	s4,24(sp)
20401342:	4ad2                	lw	s5,20(sp)
20401344:	4b42                	lw	s6,16(sp)
20401346:	4bb2                	lw	s7,12(sp)
20401348:	6145                	addi	sp,sp,48
2040134a:	8082                	ret
2040134c:	4404                	lw	s1,8(s0)
2040134e:	00442983          	lw	s3,4(s0)
20401352:	19fd                	addi	s3,s3,-1
20401354:	0009d463          	bgez	s3,2040135c <_fwalk_reent+0x4c>
20401358:	4000                	lw	s0,0(s0)
2040135a:	bfe1                	j	20401332 <_fwalk_reent+0x22>
2040135c:	00c4d783          	lhu	a5,12(s1)
20401360:	00fb7b63          	bgeu	s6,a5,20401376 <_fwalk_reent+0x66>
20401364:	00e49783          	lh	a5,14(s1)
20401368:	01778763          	beq	a5,s7,20401376 <_fwalk_reent+0x66>
2040136c:	85a6                	mv	a1,s1
2040136e:	8552                	mv	a0,s4
20401370:	9a82                	jalr	s5
20401372:	00a96933          	or	s2,s2,a0
20401376:	06848493          	addi	s1,s1,104
2040137a:	bfe1                	j	20401352 <_fwalk_reent+0x42>

2040137c <__swhatbuf_r>:
__swhatbuf_r():
2040137c:	7119                	addi	sp,sp,-128
2040137e:	daa6                	sw	s1,116(sp)
20401380:	84ae                	mv	s1,a1
20401382:	00e59583          	lh	a1,14(a1)
20401386:	dca2                	sw	s0,120(sp)
20401388:	de86                	sw	ra,124(sp)
2040138a:	8432                	mv	s0,a2
2040138c:	0005dc63          	bgez	a1,204013a4 <__swhatbuf_r+0x28>
20401390:	00c4d783          	lhu	a5,12(s1)
20401394:	0006a023          	sw	zero,0(a3) # 80000000 <metal_segment_heap_target_end+0xffffd42c>
20401398:	0807f793          	andi	a5,a5,128
2040139c:	e39d                	bnez	a5,204013c2 <__swhatbuf_r+0x46>
2040139e:	40000793          	li	a5,1024
204013a2:	a015                	j	204013c6 <__swhatbuf_r+0x4a>
204013a4:	0830                	addi	a2,sp,24
204013a6:	c636                	sw	a3,12(sp)
204013a8:	2f15                	jal	20401adc <_fstat_r>
204013aa:	46b2                	lw	a3,12(sp)
204013ac:	fe0542e3          	bltz	a0,20401390 <__swhatbuf_r+0x14>
204013b0:	4772                	lw	a4,28(sp)
204013b2:	67bd                	lui	a5,0xf
204013b4:	8ff9                	and	a5,a5,a4
204013b6:	7779                	lui	a4,0xffffe
204013b8:	97ba                	add	a5,a5,a4
204013ba:	0017b793          	seqz	a5,a5
204013be:	c29c                	sw	a5,0(a3)
204013c0:	bff9                	j	2040139e <__swhatbuf_r+0x22>
204013c2:	04000793          	li	a5,64
204013c6:	c01c                	sw	a5,0(s0)
204013c8:	50f6                	lw	ra,124(sp)
204013ca:	5466                	lw	s0,120(sp)
204013cc:	54d6                	lw	s1,116(sp)
204013ce:	4501                	li	a0,0
204013d0:	6109                	addi	sp,sp,128
204013d2:	8082                	ret

204013d4 <__smakebuf_r>:
__smakebuf_r():
204013d4:	00c5d783          	lhu	a5,12(a1)
204013d8:	1101                	addi	sp,sp,-32
204013da:	cc22                	sw	s0,24(sp)
204013dc:	ce06                	sw	ra,28(sp)
204013de:	ca26                	sw	s1,20(sp)
204013e0:	c84a                	sw	s2,16(sp)
204013e2:	8b89                	andi	a5,a5,2
204013e4:	842e                	mv	s0,a1
204013e6:	cf89                	beqz	a5,20401400 <__smakebuf_r+0x2c>
204013e8:	04740793          	addi	a5,s0,71
204013ec:	c01c                	sw	a5,0(s0)
204013ee:	c81c                	sw	a5,16(s0)
204013f0:	4785                	li	a5,1
204013f2:	c85c                	sw	a5,20(s0)
204013f4:	40f2                	lw	ra,28(sp)
204013f6:	4462                	lw	s0,24(sp)
204013f8:	44d2                	lw	s1,20(sp)
204013fa:	4942                	lw	s2,16(sp)
204013fc:	6105                	addi	sp,sp,32
204013fe:	8082                	ret
20401400:	0074                	addi	a3,sp,12
20401402:	0030                	addi	a2,sp,8
20401404:	84aa                	mv	s1,a0
20401406:	3f9d                	jal	2040137c <__swhatbuf_r>
20401408:	45a2                	lw	a1,8(sp)
2040140a:	892a                	mv	s2,a0
2040140c:	8526                	mv	a0,s1
2040140e:	2a5d                	jal	204015c4 <_malloc_r>
20401410:	ed01                	bnez	a0,20401428 <__smakebuf_r+0x54>
20401412:	00c41783          	lh	a5,12(s0)
20401416:	2007f713          	andi	a4,a5,512
2040141a:	ff69                	bnez	a4,204013f4 <__smakebuf_r+0x20>
2040141c:	9bf1                	andi	a5,a5,-4
2040141e:	0027e793          	ori	a5,a5,2
20401422:	00f41623          	sh	a5,12(s0)
20401426:	b7c9                	j	204013e8 <__smakebuf_r+0x14>
20401428:	00000797          	auipc	a5,0x0
2040142c:	d9278793          	addi	a5,a5,-622 # 204011ba <_cleanup_r>
20401430:	d49c                	sw	a5,40(s1)
20401432:	00c45783          	lhu	a5,12(s0)
20401436:	c008                	sw	a0,0(s0)
20401438:	c808                	sw	a0,16(s0)
2040143a:	0807e793          	ori	a5,a5,128
2040143e:	00f41623          	sh	a5,12(s0)
20401442:	47a2                	lw	a5,8(sp)
20401444:	c85c                	sw	a5,20(s0)
20401446:	47b2                	lw	a5,12(sp)
20401448:	cf89                	beqz	a5,20401462 <__smakebuf_r+0x8e>
2040144a:	00e41583          	lh	a1,14(s0)
2040144e:	8526                	mv	a0,s1
20401450:	2d5d                	jal	20401b06 <_isatty_r>
20401452:	c901                	beqz	a0,20401462 <__smakebuf_r+0x8e>
20401454:	00c45783          	lhu	a5,12(s0)
20401458:	9bf1                	andi	a5,a5,-4
2040145a:	0017e793          	ori	a5,a5,1
2040145e:	00f41623          	sh	a5,12(s0)
20401462:	00c45783          	lhu	a5,12(s0)
20401466:	00f96933          	or	s2,s2,a5
2040146a:	01241623          	sh	s2,12(s0)
2040146e:	b759                	j	204013f4 <__smakebuf_r+0x20>

20401470 <memset>:
memset():
20401470:	433d                	li	t1,15
20401472:	872a                	mv	a4,a0
20401474:	02c37363          	bgeu	t1,a2,2040149a <memset+0x2a>
20401478:	00f77793          	andi	a5,a4,15
2040147c:	efbd                	bnez	a5,204014fa <memset+0x8a>
2040147e:	e5ad                	bnez	a1,204014e8 <memset+0x78>
20401480:	ff067693          	andi	a3,a2,-16
20401484:	8a3d                	andi	a2,a2,15
20401486:	96ba                	add	a3,a3,a4
20401488:	c30c                	sw	a1,0(a4)
2040148a:	c34c                	sw	a1,4(a4)
2040148c:	c70c                	sw	a1,8(a4)
2040148e:	c74c                	sw	a1,12(a4)
20401490:	0741                	addi	a4,a4,16
20401492:	fed76be3          	bltu	a4,a3,20401488 <memset+0x18>
20401496:	e211                	bnez	a2,2040149a <memset+0x2a>
20401498:	8082                	ret
2040149a:	40c306b3          	sub	a3,t1,a2
2040149e:	068a                	slli	a3,a3,0x2
204014a0:	00000297          	auipc	t0,0x0
204014a4:	9696                	add	a3,a3,t0
204014a6:	00a68067          	jr	10(a3)
204014aa:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffb43a>
204014ae:	00b706a3          	sb	a1,13(a4)
204014b2:	00b70623          	sb	a1,12(a4)
204014b6:	00b705a3          	sb	a1,11(a4)
204014ba:	00b70523          	sb	a1,10(a4)
204014be:	00b704a3          	sb	a1,9(a4)
204014c2:	00b70423          	sb	a1,8(a4)
204014c6:	00b703a3          	sb	a1,7(a4)
204014ca:	00b70323          	sb	a1,6(a4)
204014ce:	00b702a3          	sb	a1,5(a4)
204014d2:	00b70223          	sb	a1,4(a4)
204014d6:	00b701a3          	sb	a1,3(a4)
204014da:	00b70123          	sb	a1,2(a4)
204014de:	00b700a3          	sb	a1,1(a4)
204014e2:	00b70023          	sb	a1,0(a4)
204014e6:	8082                	ret
204014e8:	0ff5f593          	andi	a1,a1,255
204014ec:	00859693          	slli	a3,a1,0x8
204014f0:	8dd5                	or	a1,a1,a3
204014f2:	01059693          	slli	a3,a1,0x10
204014f6:	8dd5                	or	a1,a1,a3
204014f8:	b761                	j	20401480 <memset+0x10>
204014fa:	00279693          	slli	a3,a5,0x2
204014fe:	00000297          	auipc	t0,0x0
20401502:	9696                	add	a3,a3,t0
20401504:	8286                	mv	t0,ra
20401506:	fa8680e7          	jalr	-88(a3)
2040150a:	8096                	mv	ra,t0
2040150c:	17c1                	addi	a5,a5,-16
2040150e:	8f1d                	sub	a4,a4,a5
20401510:	963e                	add	a2,a2,a5
20401512:	f8c374e3          	bgeu	t1,a2,2040149a <memset+0x2a>
20401516:	b7a5                	j	2040147e <memset+0xe>

20401518 <_free_r>:
_free_r():
20401518:	c5cd                	beqz	a1,204015c2 <_free_r+0xaa>
2040151a:	ffc5a783          	lw	a5,-4(a1)
2040151e:	1141                	addi	sp,sp,-16
20401520:	c422                	sw	s0,8(sp)
20401522:	c606                	sw	ra,12(sp)
20401524:	c226                	sw	s1,4(sp)
20401526:	ffc58413          	addi	s0,a1,-4
2040152a:	0007d363          	bgez	a5,20401530 <_free_r+0x18>
2040152e:	943e                	add	s0,s0,a5
20401530:	84aa                	mv	s1,a0
20401532:	2589                	jal	20401b74 <__malloc_lock>
20401534:	5fc00797          	auipc	a5,0x5fc00
20401538:	1fc78793          	addi	a5,a5,508 # 80001730 <metal_segment_data_target_end>
2040153c:	439c                	lw	a5,0(a5)
2040153e:	ef89                	bnez	a5,20401558 <_free_r+0x40>
20401540:	00042223          	sw	zero,4(s0)
20401544:	5fc00797          	auipc	a5,0x5fc00
20401548:	1e87a623          	sw	s0,492(a5) # 80001730 <metal_segment_data_target_end>
2040154c:	4422                	lw	s0,8(sp)
2040154e:	40b2                	lw	ra,12(sp)
20401550:	8526                	mv	a0,s1
20401552:	4492                	lw	s1,4(sp)
20401554:	0141                	addi	sp,sp,16
20401556:	a505                	j	20401b76 <__malloc_unlock>
20401558:	00f47e63          	bgeu	s0,a5,20401574 <_free_r+0x5c>
2040155c:	4014                	lw	a3,0(s0)
2040155e:	00d40733          	add	a4,s0,a3
20401562:	00e79663          	bne	a5,a4,2040156e <_free_r+0x56>
20401566:	4398                	lw	a4,0(a5)
20401568:	43dc                	lw	a5,4(a5)
2040156a:	9736                	add	a4,a4,a3
2040156c:	c018                	sw	a4,0(s0)
2040156e:	c05c                	sw	a5,4(s0)
20401570:	bfd1                	j	20401544 <_free_r+0x2c>
20401572:	87ba                	mv	a5,a4
20401574:	43d8                	lw	a4,4(a5)
20401576:	c319                	beqz	a4,2040157c <_free_r+0x64>
20401578:	fee47de3          	bgeu	s0,a4,20401572 <_free_r+0x5a>
2040157c:	4394                	lw	a3,0(a5)
2040157e:	00d78633          	add	a2,a5,a3
20401582:	00861f63          	bne	a2,s0,204015a0 <_free_r+0x88>
20401586:	4010                	lw	a2,0(s0)
20401588:	96b2                	add	a3,a3,a2
2040158a:	c394                	sw	a3,0(a5)
2040158c:	00d78633          	add	a2,a5,a3
20401590:	fac71ee3          	bne	a4,a2,2040154c <_free_r+0x34>
20401594:	4310                	lw	a2,0(a4)
20401596:	4358                	lw	a4,4(a4)
20401598:	96b2                	add	a3,a3,a2
2040159a:	c394                	sw	a3,0(a5)
2040159c:	c3d8                	sw	a4,4(a5)
2040159e:	b77d                	j	2040154c <_free_r+0x34>
204015a0:	00c47563          	bgeu	s0,a2,204015aa <_free_r+0x92>
204015a4:	47b1                	li	a5,12
204015a6:	c09c                	sw	a5,0(s1)
204015a8:	b755                	j	2040154c <_free_r+0x34>
204015aa:	4010                	lw	a2,0(s0)
204015ac:	00c406b3          	add	a3,s0,a2
204015b0:	00d71663          	bne	a4,a3,204015bc <_free_r+0xa4>
204015b4:	4314                	lw	a3,0(a4)
204015b6:	4358                	lw	a4,4(a4)
204015b8:	96b2                	add	a3,a3,a2
204015ba:	c014                	sw	a3,0(s0)
204015bc:	c058                	sw	a4,4(s0)
204015be:	c3c0                	sw	s0,4(a5)
204015c0:	b771                	j	2040154c <_free_r+0x34>
204015c2:	8082                	ret

204015c4 <_malloc_r>:
_malloc_r():
204015c4:	1101                	addi	sp,sp,-32
204015c6:	ca26                	sw	s1,20(sp)
204015c8:	00358493          	addi	s1,a1,3
204015cc:	98f1                	andi	s1,s1,-4
204015ce:	ce06                	sw	ra,28(sp)
204015d0:	cc22                	sw	s0,24(sp)
204015d2:	c84a                	sw	s2,16(sp)
204015d4:	c64e                	sw	s3,12(sp)
204015d6:	04a1                	addi	s1,s1,8
204015d8:	47b1                	li	a5,12
204015da:	04f4f763          	bgeu	s1,a5,20401628 <_malloc_r+0x64>
204015de:	44b1                	li	s1,12
204015e0:	04b4e663          	bltu	s1,a1,2040162c <_malloc_r+0x68>
204015e4:	892a                	mv	s2,a0
204015e6:	2379                	jal	20401b74 <__malloc_lock>
204015e8:	5fc00797          	auipc	a5,0x5fc00
204015ec:	14878793          	addi	a5,a5,328 # 80001730 <metal_segment_data_target_end>
204015f0:	4398                	lw	a4,0(a5)
204015f2:	843a                	mv	s0,a4
204015f4:	e431                	bnez	s0,20401640 <_malloc_r+0x7c>
204015f6:	5fc00797          	auipc	a5,0x5fc00
204015fa:	13e78793          	addi	a5,a5,318 # 80001734 <__malloc_sbrk_start>
204015fe:	439c                	lw	a5,0(a5)
20401600:	eb81                	bnez	a5,20401610 <_malloc_r+0x4c>
20401602:	4581                	li	a1,0
20401604:	854a                	mv	a0,s2
20401606:	2645                	jal	204019a6 <_sbrk_r>
20401608:	5fc00797          	auipc	a5,0x5fc00
2040160c:	12a7a623          	sw	a0,300(a5) # 80001734 <__malloc_sbrk_start>
20401610:	85a6                	mv	a1,s1
20401612:	854a                	mv	a0,s2
20401614:	2e49                	jal	204019a6 <_sbrk_r>
20401616:	59fd                	li	s3,-1
20401618:	07351963          	bne	a0,s3,2040168a <_malloc_r+0xc6>
2040161c:	47b1                	li	a5,12
2040161e:	00f92023          	sw	a5,0(s2)
20401622:	854a                	mv	a0,s2
20401624:	2b89                	jal	20401b76 <__malloc_unlock>
20401626:	a029                	j	20401630 <_malloc_r+0x6c>
20401628:	fa04dce3          	bgez	s1,204015e0 <_malloc_r+0x1c>
2040162c:	47b1                	li	a5,12
2040162e:	c11c                	sw	a5,0(a0)
20401630:	4501                	li	a0,0
20401632:	40f2                	lw	ra,28(sp)
20401634:	4462                	lw	s0,24(sp)
20401636:	44d2                	lw	s1,20(sp)
20401638:	4942                	lw	s2,16(sp)
2040163a:	49b2                	lw	s3,12(sp)
2040163c:	6105                	addi	sp,sp,32
2040163e:	8082                	ret
20401640:	401c                	lw	a5,0(s0)
20401642:	8f85                	sub	a5,a5,s1
20401644:	0407c063          	bltz	a5,20401684 <_malloc_r+0xc0>
20401648:	46ad                	li	a3,11
2040164a:	00f6f663          	bgeu	a3,a5,20401656 <_malloc_r+0x92>
2040164e:	c01c                	sw	a5,0(s0)
20401650:	943e                	add	s0,s0,a5
20401652:	c004                	sw	s1,0(s0)
20401654:	a801                	j	20401664 <_malloc_r+0xa0>
20401656:	405c                	lw	a5,4(s0)
20401658:	02871463          	bne	a4,s0,20401680 <_malloc_r+0xbc>
2040165c:	5fc00717          	auipc	a4,0x5fc00
20401660:	0cf72a23          	sw	a5,212(a4) # 80001730 <metal_segment_data_target_end>
20401664:	854a                	mv	a0,s2
20401666:	2b01                	jal	20401b76 <__malloc_unlock>
20401668:	00b40513          	addi	a0,s0,11
2040166c:	00440793          	addi	a5,s0,4
20401670:	9961                	andi	a0,a0,-8
20401672:	40f50733          	sub	a4,a0,a5
20401676:	df55                	beqz	a4,20401632 <_malloc_r+0x6e>
20401678:	943a                	add	s0,s0,a4
2040167a:	8f89                	sub	a5,a5,a0
2040167c:	c01c                	sw	a5,0(s0)
2040167e:	bf55                	j	20401632 <_malloc_r+0x6e>
20401680:	c35c                	sw	a5,4(a4)
20401682:	b7cd                	j	20401664 <_malloc_r+0xa0>
20401684:	8722                	mv	a4,s0
20401686:	4040                	lw	s0,4(s0)
20401688:	b7b5                	j	204015f4 <_malloc_r+0x30>
2040168a:	00350413          	addi	s0,a0,3
2040168e:	9871                	andi	s0,s0,-4
20401690:	fc8501e3          	beq	a0,s0,20401652 <_malloc_r+0x8e>
20401694:	40a405b3          	sub	a1,s0,a0
20401698:	854a                	mv	a0,s2
2040169a:	2631                	jal	204019a6 <_sbrk_r>
2040169c:	fb351be3          	bne	a0,s3,20401652 <_malloc_r+0x8e>
204016a0:	bfb5                	j	2040161c <_malloc_r+0x58>

204016a2 <__sfputc_r>:
__sfputc_r():
204016a2:	461c                	lw	a5,8(a2)
204016a4:	17fd                	addi	a5,a5,-1
204016a6:	c61c                	sw	a5,8(a2)
204016a8:	0007da63          	bgez	a5,204016bc <__sfputc_r+0x1a>
204016ac:	4e18                	lw	a4,24(a2)
204016ae:	00e7c563          	blt	a5,a4,204016b8 <__sfputc_r+0x16>
204016b2:	47a9                	li	a5,10
204016b4:	00f59463          	bne	a1,a5,204016bc <__sfputc_r+0x1a>
204016b8:	f1cff06f          	j	20400dd4 <__swbuf_r>
204016bc:	421c                	lw	a5,0(a2)
204016be:	852e                	mv	a0,a1
204016c0:	00178713          	addi	a4,a5,1
204016c4:	c218                	sw	a4,0(a2)
204016c6:	00b78023          	sb	a1,0(a5)
204016ca:	8082                	ret

204016cc <__sfputs_r>:
__sfputs_r():
204016cc:	1101                	addi	sp,sp,-32
204016ce:	cc22                	sw	s0,24(sp)
204016d0:	ca26                	sw	s1,20(sp)
204016d2:	c84a                	sw	s2,16(sp)
204016d4:	c64e                	sw	s3,12(sp)
204016d6:	c452                	sw	s4,8(sp)
204016d8:	ce06                	sw	ra,28(sp)
204016da:	892a                	mv	s2,a0
204016dc:	89ae                	mv	s3,a1
204016de:	8432                	mv	s0,a2
204016e0:	00d604b3          	add	s1,a2,a3
204016e4:	5a7d                	li	s4,-1
204016e6:	00941463          	bne	s0,s1,204016ee <__sfputs_r+0x22>
204016ea:	4501                	li	a0,0
204016ec:	a809                	j	204016fe <__sfputs_r+0x32>
204016ee:	00044583          	lbu	a1,0(s0)
204016f2:	864e                	mv	a2,s3
204016f4:	854a                	mv	a0,s2
204016f6:	3775                	jal	204016a2 <__sfputc_r>
204016f8:	0405                	addi	s0,s0,1
204016fa:	ff4516e3          	bne	a0,s4,204016e6 <__sfputs_r+0x1a>
204016fe:	40f2                	lw	ra,28(sp)
20401700:	4462                	lw	s0,24(sp)
20401702:	44d2                	lw	s1,20(sp)
20401704:	4942                	lw	s2,16(sp)
20401706:	49b2                	lw	s3,12(sp)
20401708:	4a22                	lw	s4,8(sp)
2040170a:	6105                	addi	sp,sp,32
2040170c:	8082                	ret

2040170e <_vfiprintf_r>:
_vfiprintf_r():
2040170e:	7135                	addi	sp,sp,-160
20401710:	cd22                	sw	s0,152(sp)
20401712:	cb26                	sw	s1,148(sp)
20401714:	c94a                	sw	s2,144(sp)
20401716:	c74e                	sw	s3,140(sp)
20401718:	cf06                	sw	ra,156(sp)
2040171a:	c552                	sw	s4,136(sp)
2040171c:	c356                	sw	s5,132(sp)
2040171e:	c15a                	sw	s6,128(sp)
20401720:	dede                	sw	s7,124(sp)
20401722:	dce2                	sw	s8,120(sp)
20401724:	dae6                	sw	s9,116(sp)
20401726:	89aa                	mv	s3,a0
20401728:	84ae                	mv	s1,a1
2040172a:	8932                	mv	s2,a2
2040172c:	8436                	mv	s0,a3
2040172e:	c501                	beqz	a0,20401736 <_vfiprintf_r+0x28>
20401730:	4d1c                	lw	a5,24(a0)
20401732:	e391                	bnez	a5,20401736 <_vfiprintf_r+0x28>
20401734:	3cd1                	jal	20401208 <__sinit>
20401736:	00004797          	auipc	a5,0x4
2040173a:	3e678793          	addi	a5,a5,998 # 20405b1c <__sf_fake_stdin>
2040173e:	0cf49b63          	bne	s1,a5,20401814 <_vfiprintf_r+0x106>
20401742:	0049a483          	lw	s1,4(s3)
20401746:	00c4d783          	lhu	a5,12(s1)
2040174a:	8ba1                	andi	a5,a5,8
2040174c:	c7f5                	beqz	a5,20401838 <_vfiprintf_r+0x12a>
2040174e:	489c                	lw	a5,16(s1)
20401750:	c7e5                	beqz	a5,20401838 <_vfiprintf_r+0x12a>
20401752:	02000793          	li	a5,32
20401756:	02f104a3          	sb	a5,41(sp)
2040175a:	03000793          	li	a5,48
2040175e:	d202                	sw	zero,36(sp)
20401760:	02f10523          	sb	a5,42(sp)
20401764:	c622                	sw	s0,12(sp)
20401766:	02500b93          	li	s7,37
2040176a:	00004a97          	auipc	s5,0x4
2040176e:	3f2a8a93          	addi	s5,s5,1010 # 20405b5c <__sf_fake_stdout+0x20>
20401772:	4c05                	li	s8,1
20401774:	4b29                	li	s6,10
20401776:	844a                	mv	s0,s2
20401778:	00044783          	lbu	a5,0(s0)
2040177c:	c399                	beqz	a5,20401782 <_vfiprintf_r+0x74>
2040177e:	0f779063          	bne	a5,s7,2040185e <_vfiprintf_r+0x150>
20401782:	41240cb3          	sub	s9,s0,s2
20401786:	000c8d63          	beqz	s9,204017a0 <_vfiprintf_r+0x92>
2040178a:	86e6                	mv	a3,s9
2040178c:	864a                	mv	a2,s2
2040178e:	85a6                	mv	a1,s1
20401790:	854e                	mv	a0,s3
20401792:	3f2d                	jal	204016cc <__sfputs_r>
20401794:	57fd                	li	a5,-1
20401796:	1ef50663          	beq	a0,a5,20401982 <_vfiprintf_r+0x274>
2040179a:	5692                	lw	a3,36(sp)
2040179c:	96e6                	add	a3,a3,s9
2040179e:	d236                	sw	a3,36(sp)
204017a0:	00044783          	lbu	a5,0(s0)
204017a4:	1c078f63          	beqz	a5,20401982 <_vfiprintf_r+0x274>
204017a8:	57fd                	li	a5,-1
204017aa:	00140913          	addi	s2,s0,1
204017ae:	c802                	sw	zero,16(sp)
204017b0:	ce02                	sw	zero,28(sp)
204017b2:	ca3e                	sw	a5,20(sp)
204017b4:	cc02                	sw	zero,24(sp)
204017b6:	040109a3          	sb	zero,83(sp)
204017ba:	d482                	sw	zero,104(sp)
204017bc:	00094583          	lbu	a1,0(s2)
204017c0:	4615                	li	a2,5
204017c2:	8556                	mv	a0,s5
204017c4:	2e59                	jal	20401b5a <memchr>
204017c6:	00190413          	addi	s0,s2,1
204017ca:	47c2                	lw	a5,16(sp)
204017cc:	e959                	bnez	a0,20401862 <_vfiprintf_r+0x154>
204017ce:	0107f713          	andi	a4,a5,16
204017d2:	c709                	beqz	a4,204017dc <_vfiprintf_r+0xce>
204017d4:	02000713          	li	a4,32
204017d8:	04e109a3          	sb	a4,83(sp)
204017dc:	0087f713          	andi	a4,a5,8
204017e0:	c709                	beqz	a4,204017ea <_vfiprintf_r+0xdc>
204017e2:	02b00713          	li	a4,43
204017e6:	04e109a3          	sb	a4,83(sp)
204017ea:	00094683          	lbu	a3,0(s2)
204017ee:	02a00713          	li	a4,42
204017f2:	08e68063          	beq	a3,a4,20401872 <_vfiprintf_r+0x164>
204017f6:	47f2                	lw	a5,28(sp)
204017f8:	844a                	mv	s0,s2
204017fa:	4681                	li	a3,0
204017fc:	4625                	li	a2,9
204017fe:	00044703          	lbu	a4,0(s0)
20401802:	00140593          	addi	a1,s0,1
20401806:	fd070713          	addi	a4,a4,-48
2040180a:	0ae67963          	bgeu	a2,a4,204018bc <_vfiprintf_r+0x1ae>
2040180e:	cab5                	beqz	a3,20401882 <_vfiprintf_r+0x174>
20401810:	ce3e                	sw	a5,28(sp)
20401812:	a885                	j	20401882 <_vfiprintf_r+0x174>
20401814:	00004797          	auipc	a5,0x4
20401818:	32878793          	addi	a5,a5,808 # 20405b3c <__sf_fake_stdout>
2040181c:	00f49563          	bne	s1,a5,20401826 <_vfiprintf_r+0x118>
20401820:	0089a483          	lw	s1,8(s3)
20401824:	b70d                	j	20401746 <_vfiprintf_r+0x38>
20401826:	00004797          	auipc	a5,0x4
2040182a:	2d678793          	addi	a5,a5,726 # 20405afc <__sf_fake_stderr>
2040182e:	f0f49ce3          	bne	s1,a5,20401746 <_vfiprintf_r+0x38>
20401832:	00c9a483          	lw	s1,12(s3)
20401836:	bf01                	j	20401746 <_vfiprintf_r+0x38>
20401838:	85a6                	mv	a1,s1
2040183a:	854e                	mv	a0,s3
2040183c:	e58ff0ef          	jal	ra,20400e94 <__swsetup_r>
20401840:	d909                	beqz	a0,20401752 <_vfiprintf_r+0x44>
20401842:	557d                	li	a0,-1
20401844:	40fa                	lw	ra,156(sp)
20401846:	446a                	lw	s0,152(sp)
20401848:	44da                	lw	s1,148(sp)
2040184a:	494a                	lw	s2,144(sp)
2040184c:	49ba                	lw	s3,140(sp)
2040184e:	4a2a                	lw	s4,136(sp)
20401850:	4a9a                	lw	s5,132(sp)
20401852:	4b0a                	lw	s6,128(sp)
20401854:	5bf6                	lw	s7,124(sp)
20401856:	5c66                	lw	s8,120(sp)
20401858:	5cd6                	lw	s9,116(sp)
2040185a:	610d                	addi	sp,sp,160
2040185c:	8082                	ret
2040185e:	0405                	addi	s0,s0,1
20401860:	bf21                	j	20401778 <_vfiprintf_r+0x6a>
20401862:	41550533          	sub	a0,a0,s5
20401866:	00ac1533          	sll	a0,s8,a0
2040186a:	8fc9                	or	a5,a5,a0
2040186c:	c83e                	sw	a5,16(sp)
2040186e:	8922                	mv	s2,s0
20401870:	b7b1                	j	204017bc <_vfiprintf_r+0xae>
20401872:	4732                	lw	a4,12(sp)
20401874:	00470693          	addi	a3,a4,4
20401878:	4318                	lw	a4,0(a4)
2040187a:	c636                	sw	a3,12(sp)
2040187c:	02074963          	bltz	a4,204018ae <_vfiprintf_r+0x1a0>
20401880:	ce3a                	sw	a4,28(sp)
20401882:	00044703          	lbu	a4,0(s0)
20401886:	02e00793          	li	a5,46
2040188a:	04f71f63          	bne	a4,a5,204018e8 <_vfiprintf_r+0x1da>
2040188e:	00144703          	lbu	a4,1(s0)
20401892:	02a00793          	li	a5,42
20401896:	02f71b63          	bne	a4,a5,204018cc <_vfiprintf_r+0x1be>
2040189a:	47b2                	lw	a5,12(sp)
2040189c:	0409                	addi	s0,s0,2
2040189e:	00478713          	addi	a4,a5,4
204018a2:	439c                	lw	a5,0(a5)
204018a4:	c63a                	sw	a4,12(sp)
204018a6:	0207c163          	bltz	a5,204018c8 <_vfiprintf_r+0x1ba>
204018aa:	ca3e                	sw	a5,20(sp)
204018ac:	a835                	j	204018e8 <_vfiprintf_r+0x1da>
204018ae:	40e00733          	neg	a4,a4
204018b2:	0027e793          	ori	a5,a5,2
204018b6:	ce3a                	sw	a4,28(sp)
204018b8:	c83e                	sw	a5,16(sp)
204018ba:	b7e1                	j	20401882 <_vfiprintf_r+0x174>
204018bc:	036787b3          	mul	a5,a5,s6
204018c0:	4685                	li	a3,1
204018c2:	842e                	mv	s0,a1
204018c4:	97ba                	add	a5,a5,a4
204018c6:	bf25                	j	204017fe <_vfiprintf_r+0xf0>
204018c8:	57fd                	li	a5,-1
204018ca:	b7c5                	j	204018aa <_vfiprintf_r+0x19c>
204018cc:	0405                	addi	s0,s0,1
204018ce:	ca02                	sw	zero,20(sp)
204018d0:	4681                	li	a3,0
204018d2:	4781                	li	a5,0
204018d4:	4625                	li	a2,9
204018d6:	00044703          	lbu	a4,0(s0)
204018da:	00140593          	addi	a1,s0,1
204018de:	fd070713          	addi	a4,a4,-48
204018e2:	06e67663          	bgeu	a2,a4,2040194e <_vfiprintf_r+0x240>
204018e6:	f2f1                	bnez	a3,204018aa <_vfiprintf_r+0x19c>
204018e8:	00044583          	lbu	a1,0(s0)
204018ec:	460d                	li	a2,3
204018ee:	00004517          	auipc	a0,0x4
204018f2:	27650513          	addi	a0,a0,630 # 20405b64 <__sf_fake_stdout+0x28>
204018f6:	2495                	jal	20401b5a <memchr>
204018f8:	cd11                	beqz	a0,20401914 <_vfiprintf_r+0x206>
204018fa:	00004797          	auipc	a5,0x4
204018fe:	26a78793          	addi	a5,a5,618 # 20405b64 <__sf_fake_stdout+0x28>
20401902:	8d1d                	sub	a0,a0,a5
20401904:	04000793          	li	a5,64
20401908:	00a797b3          	sll	a5,a5,a0
2040190c:	4542                	lw	a0,16(sp)
2040190e:	0405                	addi	s0,s0,1
20401910:	8d5d                	or	a0,a0,a5
20401912:	c82a                	sw	a0,16(sp)
20401914:	00044583          	lbu	a1,0(s0)
20401918:	4619                	li	a2,6
2040191a:	00004517          	auipc	a0,0x4
2040191e:	24e50513          	addi	a0,a0,590 # 20405b68 <__sf_fake_stdout+0x2c>
20401922:	00140913          	addi	s2,s0,1
20401926:	02b10423          	sb	a1,40(sp)
2040192a:	2c05                	jal	20401b5a <memchr>
2040192c:	c13d                	beqz	a0,20401992 <_vfiprintf_r+0x284>
2040192e:	dfbfe797          	auipc	a5,0xdfbfe
20401932:	6d278793          	addi	a5,a5,1746 # 0 <__metal_boot_hart>
20401936:	e795                	bnez	a5,20401962 <_vfiprintf_r+0x254>
20401938:	4742                	lw	a4,16(sp)
2040193a:	47b2                	lw	a5,12(sp)
2040193c:	10077713          	andi	a4,a4,256
20401940:	cf09                	beqz	a4,2040195a <_vfiprintf_r+0x24c>
20401942:	0791                	addi	a5,a5,4
20401944:	c63e                	sw	a5,12(sp)
20401946:	5792                	lw	a5,36(sp)
20401948:	97d2                	add	a5,a5,s4
2040194a:	d23e                	sw	a5,36(sp)
2040194c:	b52d                	j	20401776 <_vfiprintf_r+0x68>
2040194e:	036787b3          	mul	a5,a5,s6
20401952:	4685                	li	a3,1
20401954:	842e                	mv	s0,a1
20401956:	97ba                	add	a5,a5,a4
20401958:	bfbd                	j	204018d6 <_vfiprintf_r+0x1c8>
2040195a:	079d                	addi	a5,a5,7
2040195c:	9be1                	andi	a5,a5,-8
2040195e:	07a1                	addi	a5,a5,8
20401960:	b7d5                	j	20401944 <_vfiprintf_r+0x236>
20401962:	0078                	addi	a4,sp,12
20401964:	00000697          	auipc	a3,0x0
20401968:	d6868693          	addi	a3,a3,-664 # 204016cc <__sfputs_r>
2040196c:	8626                	mv	a2,s1
2040196e:	080c                	addi	a1,sp,16
20401970:	854e                	mv	a0,s3
20401972:	00000097          	auipc	ra,0x0
20401976:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040197a:	57fd                	li	a5,-1
2040197c:	8a2a                	mv	s4,a0
2040197e:	fcf514e3          	bne	a0,a5,20401946 <_vfiprintf_r+0x238>
20401982:	00c4d783          	lhu	a5,12(s1)
20401986:	0407f793          	andi	a5,a5,64
2040198a:	ea079ce3          	bnez	a5,20401842 <_vfiprintf_r+0x134>
2040198e:	5512                	lw	a0,36(sp)
20401990:	bd55                	j	20401844 <_vfiprintf_r+0x136>
20401992:	0078                	addi	a4,sp,12
20401994:	00000697          	auipc	a3,0x0
20401998:	d3868693          	addi	a3,a3,-712 # 204016cc <__sfputs_r>
2040199c:	8626                	mv	a2,s1
2040199e:	080c                	addi	a1,sp,16
204019a0:	854e                	mv	a0,s3
204019a2:	24cd                	jal	20401c84 <_printf_i>
204019a4:	bfd9                	j	2040197a <_vfiprintf_r+0x26c>

204019a6 <_sbrk_r>:
_sbrk_r():
204019a6:	1141                	addi	sp,sp,-16
204019a8:	c422                	sw	s0,8(sp)
204019aa:	842a                	mv	s0,a0
204019ac:	852e                	mv	a0,a1
204019ae:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
204019b2:	c606                	sw	ra,12(sp)
204019b4:	2da9                	jal	2040200e <_sbrk>
204019b6:	57fd                	li	a5,-1
204019b8:	00f51763          	bne	a0,a5,204019c6 <_sbrk_r+0x20>
204019bc:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
204019c0:	439c                	lw	a5,0(a5)
204019c2:	c391                	beqz	a5,204019c6 <_sbrk_r+0x20>
204019c4:	c01c                	sw	a5,0(s0)
204019c6:	40b2                	lw	ra,12(sp)
204019c8:	4422                	lw	s0,8(sp)
204019ca:	0141                	addi	sp,sp,16
204019cc:	8082                	ret

204019ce <__sread>:
__sread():
204019ce:	1141                	addi	sp,sp,-16
204019d0:	c422                	sw	s0,8(sp)
204019d2:	842e                	mv	s0,a1
204019d4:	00e59583          	lh	a1,14(a1)
204019d8:	c606                	sw	ra,12(sp)
204019da:	23b1                	jal	20401f26 <_read_r>
204019dc:	00054963          	bltz	a0,204019ee <__sread+0x20>
204019e0:	487c                	lw	a5,84(s0)
204019e2:	97aa                	add	a5,a5,a0
204019e4:	c87c                	sw	a5,84(s0)
204019e6:	40b2                	lw	ra,12(sp)
204019e8:	4422                	lw	s0,8(sp)
204019ea:	0141                	addi	sp,sp,16
204019ec:	8082                	ret
204019ee:	00c45783          	lhu	a5,12(s0)
204019f2:	777d                	lui	a4,0xfffff
204019f4:	177d                	addi	a4,a4,-1
204019f6:	8ff9                	and	a5,a5,a4
204019f8:	00f41623          	sh	a5,12(s0)
204019fc:	b7ed                	j	204019e6 <__sread+0x18>

204019fe <__swrite>:
__swrite():
204019fe:	00c5d783          	lhu	a5,12(a1)
20401a02:	1101                	addi	sp,sp,-32
20401a04:	cc22                	sw	s0,24(sp)
20401a06:	ca26                	sw	s1,20(sp)
20401a08:	c84a                	sw	s2,16(sp)
20401a0a:	c64e                	sw	s3,12(sp)
20401a0c:	ce06                	sw	ra,28(sp)
20401a0e:	1007f793          	andi	a5,a5,256
20401a12:	84aa                	mv	s1,a0
20401a14:	842e                	mv	s0,a1
20401a16:	8932                	mv	s2,a2
20401a18:	89b6                	mv	s3,a3
20401a1a:	c791                	beqz	a5,20401a26 <__swrite+0x28>
20401a1c:	00e59583          	lh	a1,14(a1)
20401a20:	4689                	li	a3,2
20401a22:	4601                	li	a2,0
20401a24:	2229                	jal	20401b2e <_lseek_r>
20401a26:	00c45783          	lhu	a5,12(s0)
20401a2a:	777d                	lui	a4,0xfffff
20401a2c:	177d                	addi	a4,a4,-1
20401a2e:	8ff9                	and	a5,a5,a4
20401a30:	00f41623          	sh	a5,12(s0)
20401a34:	00e41583          	lh	a1,14(s0)
20401a38:	4462                	lw	s0,24(sp)
20401a3a:	40f2                	lw	ra,28(sp)
20401a3c:	86ce                	mv	a3,s3
20401a3e:	864a                	mv	a2,s2
20401a40:	49b2                	lw	s3,12(sp)
20401a42:	4942                	lw	s2,16(sp)
20401a44:	8526                	mv	a0,s1
20401a46:	44d2                	lw	s1,20(sp)
20401a48:	6105                	addi	sp,sp,32
20401a4a:	a83d                	j	20401a88 <_write_r>

20401a4c <__sseek>:
__sseek():
20401a4c:	1141                	addi	sp,sp,-16
20401a4e:	c422                	sw	s0,8(sp)
20401a50:	842e                	mv	s0,a1
20401a52:	00e59583          	lh	a1,14(a1)
20401a56:	c606                	sw	ra,12(sp)
20401a58:	28d9                	jal	20401b2e <_lseek_r>
20401a5a:	57fd                	li	a5,-1
20401a5c:	00c45703          	lhu	a4,12(s0)
20401a60:	00f51b63          	bne	a0,a5,20401a76 <__sseek+0x2a>
20401a64:	77fd                	lui	a5,0xfffff
20401a66:	17fd                	addi	a5,a5,-1
20401a68:	8ff9                	and	a5,a5,a4
20401a6a:	00f41623          	sh	a5,12(s0)
20401a6e:	40b2                	lw	ra,12(sp)
20401a70:	4422                	lw	s0,8(sp)
20401a72:	0141                	addi	sp,sp,16
20401a74:	8082                	ret
20401a76:	6785                	lui	a5,0x1
20401a78:	8fd9                	or	a5,a5,a4
20401a7a:	00f41623          	sh	a5,12(s0)
20401a7e:	c868                	sw	a0,84(s0)
20401a80:	b7fd                	j	20401a6e <__sseek+0x22>

20401a82 <__sclose>:
__sclose():
20401a82:	00e59583          	lh	a1,14(a1)
20401a86:	a03d                	j	20401ab4 <_close_r>

20401a88 <_write_r>:
_write_r():
20401a88:	1141                	addi	sp,sp,-16
20401a8a:	c422                	sw	s0,8(sp)
20401a8c:	842a                	mv	s0,a0
20401a8e:	852e                	mv	a0,a1
20401a90:	85b2                	mv	a1,a2
20401a92:	8636                	mv	a2,a3
20401a94:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401a98:	c606                	sw	ra,12(sp)
20401a9a:	23fd                	jal	20402088 <_write>
20401a9c:	57fd                	li	a5,-1
20401a9e:	00f51763          	bne	a0,a5,20401aac <_write_r+0x24>
20401aa2:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401aa6:	439c                	lw	a5,0(a5)
20401aa8:	c391                	beqz	a5,20401aac <_write_r+0x24>
20401aaa:	c01c                	sw	a5,0(s0)
20401aac:	40b2                	lw	ra,12(sp)
20401aae:	4422                	lw	s0,8(sp)
20401ab0:	0141                	addi	sp,sp,16
20401ab2:	8082                	ret

20401ab4 <_close_r>:
_close_r():
20401ab4:	1141                	addi	sp,sp,-16
20401ab6:	c422                	sw	s0,8(sp)
20401ab8:	842a                	mv	s0,a0
20401aba:	852e                	mv	a0,a1
20401abc:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401ac0:	c606                	sw	ra,12(sp)
20401ac2:	2941                	jal	20401f52 <_close>
20401ac4:	57fd                	li	a5,-1
20401ac6:	00f51763          	bne	a0,a5,20401ad4 <_close_r+0x20>
20401aca:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401ace:	439c                	lw	a5,0(a5)
20401ad0:	c391                	beqz	a5,20401ad4 <_close_r+0x20>
20401ad2:	c01c                	sw	a5,0(s0)
20401ad4:	40b2                	lw	ra,12(sp)
20401ad6:	4422                	lw	s0,8(sp)
20401ad8:	0141                	addi	sp,sp,16
20401ada:	8082                	ret

20401adc <_fstat_r>:
_fstat_r():
20401adc:	1141                	addi	sp,sp,-16
20401ade:	c422                	sw	s0,8(sp)
20401ae0:	842a                	mv	s0,a0
20401ae2:	852e                	mv	a0,a1
20401ae4:	85b2                	mv	a1,a2
20401ae6:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401aea:	c606                	sw	ra,12(sp)
20401aec:	2161                	jal	20401f74 <_fstat>
20401aee:	57fd                	li	a5,-1
20401af0:	00f51763          	bne	a0,a5,20401afe <_fstat_r+0x22>
20401af4:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401af8:	439c                	lw	a5,0(a5)
20401afa:	c391                	beqz	a5,20401afe <_fstat_r+0x22>
20401afc:	c01c                	sw	a5,0(s0)
20401afe:	40b2                	lw	ra,12(sp)
20401b00:	4422                	lw	s0,8(sp)
20401b02:	0141                	addi	sp,sp,16
20401b04:	8082                	ret

20401b06 <_isatty_r>:
_isatty_r():
20401b06:	1141                	addi	sp,sp,-16
20401b08:	c422                	sw	s0,8(sp)
20401b0a:	842a                	mv	s0,a0
20401b0c:	852e                	mv	a0,a1
20401b0e:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401b12:	c606                	sw	ra,12(sp)
20401b14:	2159                	jal	20401f9a <_isatty>
20401b16:	57fd                	li	a5,-1
20401b18:	00f51763          	bne	a0,a5,20401b26 <_isatty_r+0x20>
20401b1c:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401b20:	439c                	lw	a5,0(a5)
20401b22:	c391                	beqz	a5,20401b26 <_isatty_r+0x20>
20401b24:	c01c                	sw	a5,0(s0)
20401b26:	40b2                	lw	ra,12(sp)
20401b28:	4422                	lw	s0,8(sp)
20401b2a:	0141                	addi	sp,sp,16
20401b2c:	8082                	ret

20401b2e <_lseek_r>:
_lseek_r():
20401b2e:	1141                	addi	sp,sp,-16
20401b30:	c422                	sw	s0,8(sp)
20401b32:	842a                	mv	s0,a0
20401b34:	852e                	mv	a0,a1
20401b36:	85b2                	mv	a1,a2
20401b38:	8636                	mv	a2,a3
20401b3a:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401b3e:	c606                	sw	ra,12(sp)
20401b40:	29ad                	jal	20401fba <_lseek>
20401b42:	57fd                	li	a5,-1
20401b44:	00f51763          	bne	a0,a5,20401b52 <_lseek_r+0x24>
20401b48:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401b4c:	439c                	lw	a5,0(a5)
20401b4e:	c391                	beqz	a5,20401b52 <_lseek_r+0x24>
20401b50:	c01c                	sw	a5,0(s0)
20401b52:	40b2                	lw	ra,12(sp)
20401b54:	4422                	lw	s0,8(sp)
20401b56:	0141                	addi	sp,sp,16
20401b58:	8082                	ret

20401b5a <memchr>:
memchr():
20401b5a:	0ff5f593          	andi	a1,a1,255
20401b5e:	962a                	add	a2,a2,a0
20401b60:	00c51463          	bne	a0,a2,20401b68 <memchr+0xe>
20401b64:	4501                	li	a0,0
20401b66:	8082                	ret
20401b68:	00054783          	lbu	a5,0(a0)
20401b6c:	feb78de3          	beq	a5,a1,20401b66 <memchr+0xc>
20401b70:	0505                	addi	a0,a0,1
20401b72:	b7fd                	j	20401b60 <memchr+0x6>

20401b74 <__malloc_lock>:
__malloc_lock():
20401b74:	8082                	ret

20401b76 <__malloc_unlock>:
__malloc_unlock():
20401b76:	8082                	ret

20401b78 <_printf_common>:
_printf_common():
20401b78:	7179                	addi	sp,sp,-48
20401b7a:	ca56                	sw	s5,20(sp)
20401b7c:	499c                	lw	a5,16(a1)
20401b7e:	8aba                	mv	s5,a4
20401b80:	4598                	lw	a4,8(a1)
20401b82:	d422                	sw	s0,40(sp)
20401b84:	d226                	sw	s1,36(sp)
20401b86:	ce4e                	sw	s3,28(sp)
20401b88:	cc52                	sw	s4,24(sp)
20401b8a:	d606                	sw	ra,44(sp)
20401b8c:	d04a                	sw	s2,32(sp)
20401b8e:	c85a                	sw	s6,16(sp)
20401b90:	c65e                	sw	s7,12(sp)
20401b92:	89aa                	mv	s3,a0
20401b94:	842e                	mv	s0,a1
20401b96:	84b2                	mv	s1,a2
20401b98:	8a36                	mv	s4,a3
20401b9a:	00e7d363          	bge	a5,a4,20401ba0 <_printf_common+0x28>
20401b9e:	87ba                	mv	a5,a4
20401ba0:	c09c                	sw	a5,0(s1)
20401ba2:	04344703          	lbu	a4,67(s0)
20401ba6:	c319                	beqz	a4,20401bac <_printf_common+0x34>
20401ba8:	0785                	addi	a5,a5,1
20401baa:	c09c                	sw	a5,0(s1)
20401bac:	401c                	lw	a5,0(s0)
20401bae:	0207f793          	andi	a5,a5,32
20401bb2:	c781                	beqz	a5,20401bba <_printf_common+0x42>
20401bb4:	409c                	lw	a5,0(s1)
20401bb6:	0789                	addi	a5,a5,2
20401bb8:	c09c                	sw	a5,0(s1)
20401bba:	00042903          	lw	s2,0(s0)
20401bbe:	00697913          	andi	s2,s2,6
20401bc2:	00091a63          	bnez	s2,20401bd6 <_printf_common+0x5e>
20401bc6:	01940b13          	addi	s6,s0,25
20401bca:	5bfd                	li	s7,-1
20401bcc:	445c                	lw	a5,12(s0)
20401bce:	4098                	lw	a4,0(s1)
20401bd0:	8f99                	sub	a5,a5,a4
20401bd2:	04f94c63          	blt	s2,a5,20401c2a <_printf_common+0xb2>
20401bd6:	401c                	lw	a5,0(s0)
20401bd8:	04344683          	lbu	a3,67(s0)
20401bdc:	0207f793          	andi	a5,a5,32
20401be0:	00d036b3          	snez	a3,a3
20401be4:	eba5                	bnez	a5,20401c54 <_printf_common+0xdc>
20401be6:	04340613          	addi	a2,s0,67
20401bea:	85d2                	mv	a1,s4
20401bec:	854e                	mv	a0,s3
20401bee:	9a82                	jalr	s5
20401bf0:	57fd                	li	a5,-1
20401bf2:	04f50363          	beq	a0,a5,20401c38 <_printf_common+0xc0>
20401bf6:	401c                	lw	a5,0(s0)
20401bf8:	4611                	li	a2,4
20401bfa:	4098                	lw	a4,0(s1)
20401bfc:	8b99                	andi	a5,a5,6
20401bfe:	4454                	lw	a3,12(s0)
20401c00:	4481                	li	s1,0
20401c02:	00c79763          	bne	a5,a2,20401c10 <_printf_common+0x98>
20401c06:	40e684b3          	sub	s1,a3,a4
20401c0a:	0004d363          	bgez	s1,20401c10 <_printf_common+0x98>
20401c0e:	4481                	li	s1,0
20401c10:	441c                	lw	a5,8(s0)
20401c12:	4818                	lw	a4,16(s0)
20401c14:	00f75463          	bge	a4,a5,20401c1c <_printf_common+0xa4>
20401c18:	8f99                	sub	a5,a5,a4
20401c1a:	94be                	add	s1,s1,a5
20401c1c:	4901                	li	s2,0
20401c1e:	0469                	addi	s0,s0,26
20401c20:	5b7d                	li	s6,-1
20401c22:	05249863          	bne	s1,s2,20401c72 <_printf_common+0xfa>
20401c26:	4501                	li	a0,0
20401c28:	a809                	j	20401c3a <_printf_common+0xc2>
20401c2a:	4685                	li	a3,1
20401c2c:	865a                	mv	a2,s6
20401c2e:	85d2                	mv	a1,s4
20401c30:	854e                	mv	a0,s3
20401c32:	9a82                	jalr	s5
20401c34:	01751e63          	bne	a0,s7,20401c50 <_printf_common+0xd8>
20401c38:	557d                	li	a0,-1
20401c3a:	50b2                	lw	ra,44(sp)
20401c3c:	5422                	lw	s0,40(sp)
20401c3e:	5492                	lw	s1,36(sp)
20401c40:	5902                	lw	s2,32(sp)
20401c42:	49f2                	lw	s3,28(sp)
20401c44:	4a62                	lw	s4,24(sp)
20401c46:	4ad2                	lw	s5,20(sp)
20401c48:	4b42                	lw	s6,16(sp)
20401c4a:	4bb2                	lw	s7,12(sp)
20401c4c:	6145                	addi	sp,sp,48
20401c4e:	8082                	ret
20401c50:	0905                	addi	s2,s2,1
20401c52:	bfad                	j	20401bcc <_printf_common+0x54>
20401c54:	00d40733          	add	a4,s0,a3
20401c58:	03000613          	li	a2,48
20401c5c:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffc46f>
20401c60:	04544703          	lbu	a4,69(s0)
20401c64:	00168793          	addi	a5,a3,1
20401c68:	97a2                	add	a5,a5,s0
20401c6a:	0689                	addi	a3,a3,2
20401c6c:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20401c70:	bf9d                	j	20401be6 <_printf_common+0x6e>
20401c72:	4685                	li	a3,1
20401c74:	8622                	mv	a2,s0
20401c76:	85d2                	mv	a1,s4
20401c78:	854e                	mv	a0,s3
20401c7a:	9a82                	jalr	s5
20401c7c:	fb650ee3          	beq	a0,s6,20401c38 <_printf_common+0xc0>
20401c80:	0905                	addi	s2,s2,1
20401c82:	b745                	j	20401c22 <_printf_common+0xaa>

20401c84 <_printf_i>:
_printf_i():
20401c84:	7179                	addi	sp,sp,-48
20401c86:	d422                	sw	s0,40(sp)
20401c88:	d226                	sw	s1,36(sp)
20401c8a:	d04a                	sw	s2,32(sp)
20401c8c:	ce4e                	sw	s3,28(sp)
20401c8e:	d606                	sw	ra,44(sp)
20401c90:	cc52                	sw	s4,24(sp)
20401c92:	ca56                	sw	s5,20(sp)
20401c94:	c85a                	sw	s6,16(sp)
20401c96:	89b6                	mv	s3,a3
20401c98:	0185c683          	lbu	a3,24(a1)
20401c9c:	06e00793          	li	a5,110
20401ca0:	8932                	mv	s2,a2
20401ca2:	84aa                	mv	s1,a0
20401ca4:	842e                	mv	s0,a1
20401ca6:	04358613          	addi	a2,a1,67
20401caa:	1ef68063          	beq	a3,a5,20401e8a <_printf_i+0x206>
20401cae:	06d7e263          	bltu	a5,a3,20401d12 <_printf_i+0x8e>
20401cb2:	06300793          	li	a5,99
20401cb6:	0af68263          	beq	a3,a5,20401d5a <_printf_i+0xd6>
20401cba:	00d7ed63          	bltu	a5,a3,20401cd4 <_printf_i+0x50>
20401cbe:	1e068a63          	beqz	a3,20401eb2 <_printf_i+0x22e>
20401cc2:	05800793          	li	a5,88
20401cc6:	16f68663          	beq	a3,a5,20401e32 <_printf_i+0x1ae>
20401cca:	04240a93          	addi	s5,s0,66
20401cce:	04d40123          	sb	a3,66(s0)
20401cd2:	a869                	j	20401d6c <_printf_i+0xe8>
20401cd4:	06400793          	li	a5,100
20401cd8:	00f68663          	beq	a3,a5,20401ce4 <_printf_i+0x60>
20401cdc:	06900793          	li	a5,105
20401ce0:	fef695e3          	bne	a3,a5,20401cca <_printf_i+0x46>
20401ce4:	401c                	lw	a5,0(s0)
20401ce6:	4308                	lw	a0,0(a4)
20401ce8:	0807f693          	andi	a3,a5,128
20401cec:	00450593          	addi	a1,a0,4
20401cf0:	c2c1                	beqz	a3,20401d70 <_printf_i+0xec>
20401cf2:	411c                	lw	a5,0(a0)
20401cf4:	c30c                	sw	a1,0(a4)
20401cf6:	0007d863          	bgez	a5,20401d06 <_printf_i+0x82>
20401cfa:	02d00713          	li	a4,45
20401cfe:	40f007b3          	neg	a5,a5
20401d02:	04e401a3          	sb	a4,67(s0)
20401d06:	00004697          	auipc	a3,0x4
20401d0a:	e6a68693          	addi	a3,a3,-406 # 20405b70 <__sf_fake_stdout+0x34>
20401d0e:	4729                	li	a4,10
20401d10:	a065                	j	20401db8 <_printf_i+0x134>
20401d12:	07300793          	li	a5,115
20401d16:	1af68263          	beq	a3,a5,20401eba <_printf_i+0x236>
20401d1a:	00d7ef63          	bltu	a5,a3,20401d38 <_printf_i+0xb4>
20401d1e:	06f00793          	li	a5,111
20401d22:	04f68f63          	beq	a3,a5,20401d80 <_printf_i+0xfc>
20401d26:	07000793          	li	a5,112
20401d2a:	faf690e3          	bne	a3,a5,20401cca <_printf_i+0x46>
20401d2e:	419c                	lw	a5,0(a1)
20401d30:	0207e793          	ori	a5,a5,32
20401d34:	c19c                	sw	a5,0(a1)
20401d36:	a809                	j	20401d48 <_printf_i+0xc4>
20401d38:	07500793          	li	a5,117
20401d3c:	04f68263          	beq	a3,a5,20401d80 <_printf_i+0xfc>
20401d40:	07800793          	li	a5,120
20401d44:	f8f693e3          	bne	a3,a5,20401cca <_printf_i+0x46>
20401d48:	07800793          	li	a5,120
20401d4c:	04f402a3          	sb	a5,69(s0)
20401d50:	00004697          	auipc	a3,0x4
20401d54:	e3468693          	addi	a3,a3,-460 # 20405b84 <__sf_fake_stdout+0x48>
20401d58:	a0dd                	j	20401e3e <_printf_i+0x1ba>
20401d5a:	431c                	lw	a5,0(a4)
20401d5c:	04258a93          	addi	s5,a1,66
20401d60:	00478693          	addi	a3,a5,4
20401d64:	439c                	lw	a5,0(a5)
20401d66:	c314                	sw	a3,0(a4)
20401d68:	04f58123          	sb	a5,66(a1)
20401d6c:	4785                	li	a5,1
20401d6e:	a2ad                	j	20401ed8 <_printf_i+0x254>
20401d70:	0407f693          	andi	a3,a5,64
20401d74:	411c                	lw	a5,0(a0)
20401d76:	c30c                	sw	a1,0(a4)
20401d78:	debd                	beqz	a3,20401cf6 <_printf_i+0x72>
20401d7a:	07c2                	slli	a5,a5,0x10
20401d7c:	87c1                	srai	a5,a5,0x10
20401d7e:	bfa5                	j	20401cf6 <_printf_i+0x72>
20401d80:	400c                	lw	a1,0(s0)
20401d82:	431c                	lw	a5,0(a4)
20401d84:	0805f813          	andi	a6,a1,128
20401d88:	00478513          	addi	a0,a5,4
20401d8c:	00080563          	beqz	a6,20401d96 <_printf_i+0x112>
20401d90:	c308                	sw	a0,0(a4)
20401d92:	439c                	lw	a5,0(a5)
20401d94:	a039                	j	20401da2 <_printf_i+0x11e>
20401d96:	0405f593          	andi	a1,a1,64
20401d9a:	c308                	sw	a0,0(a4)
20401d9c:	d9fd                	beqz	a1,20401d92 <_printf_i+0x10e>
20401d9e:	0007d783          	lhu	a5,0(a5)
20401da2:	06f00713          	li	a4,111
20401da6:	0ce68a63          	beq	a3,a4,20401e7a <_printf_i+0x1f6>
20401daa:	00004697          	auipc	a3,0x4
20401dae:	dc668693          	addi	a3,a3,-570 # 20405b70 <__sf_fake_stdout+0x34>
20401db2:	4729                	li	a4,10
20401db4:	040401a3          	sb	zero,67(s0)
20401db8:	404c                	lw	a1,4(s0)
20401dba:	c40c                	sw	a1,8(s0)
20401dbc:	0005c563          	bltz	a1,20401dc6 <_printf_i+0x142>
20401dc0:	4008                	lw	a0,0(s0)
20401dc2:	996d                	andi	a0,a0,-5
20401dc4:	c008                	sw	a0,0(s0)
20401dc6:	e399                	bnez	a5,20401dcc <_printf_i+0x148>
20401dc8:	8ab2                	mv	s5,a2
20401dca:	cd91                	beqz	a1,20401de6 <_printf_i+0x162>
20401dcc:	8ab2                	mv	s5,a2
20401dce:	02e7f5b3          	remu	a1,a5,a4
20401dd2:	1afd                	addi	s5,s5,-1
20401dd4:	95b6                	add	a1,a1,a3
20401dd6:	0005c583          	lbu	a1,0(a1)
20401dda:	00ba8023          	sb	a1,0(s5)
20401dde:	02e7d5b3          	divu	a1,a5,a4
20401de2:	0ae7f263          	bgeu	a5,a4,20401e86 <_printf_i+0x202>
20401de6:	47a1                	li	a5,8
20401de8:	00f71e63          	bne	a4,a5,20401e04 <_printf_i+0x180>
20401dec:	401c                	lw	a5,0(s0)
20401dee:	8b85                	andi	a5,a5,1
20401df0:	cb91                	beqz	a5,20401e04 <_printf_i+0x180>
20401df2:	4058                	lw	a4,4(s0)
20401df4:	481c                	lw	a5,16(s0)
20401df6:	00e7c763          	blt	a5,a4,20401e04 <_printf_i+0x180>
20401dfa:	03000793          	li	a5,48
20401dfe:	fefa8fa3          	sb	a5,-1(s5)
20401e02:	1afd                	addi	s5,s5,-1
20401e04:	41560633          	sub	a2,a2,s5
20401e08:	c810                	sw	a2,16(s0)
20401e0a:	874e                	mv	a4,s3
20401e0c:	86ca                	mv	a3,s2
20401e0e:	0070                	addi	a2,sp,12
20401e10:	85a2                	mv	a1,s0
20401e12:	8526                	mv	a0,s1
20401e14:	3395                	jal	20401b78 <_printf_common>
20401e16:	5a7d                	li	s4,-1
20401e18:	0d451463          	bne	a0,s4,20401ee0 <_printf_i+0x25c>
20401e1c:	557d                	li	a0,-1
20401e1e:	50b2                	lw	ra,44(sp)
20401e20:	5422                	lw	s0,40(sp)
20401e22:	5492                	lw	s1,36(sp)
20401e24:	5902                	lw	s2,32(sp)
20401e26:	49f2                	lw	s3,28(sp)
20401e28:	4a62                	lw	s4,24(sp)
20401e2a:	4ad2                	lw	s5,20(sp)
20401e2c:	4b42                	lw	s6,16(sp)
20401e2e:	6145                	addi	sp,sp,48
20401e30:	8082                	ret
20401e32:	04d582a3          	sb	a3,69(a1)
20401e36:	00004697          	auipc	a3,0x4
20401e3a:	d3a68693          	addi	a3,a3,-710 # 20405b70 <__sf_fake_stdout+0x34>
20401e3e:	400c                	lw	a1,0(s0)
20401e40:	4308                	lw	a0,0(a4)
20401e42:	0805f813          	andi	a6,a1,128
20401e46:	411c                	lw	a5,0(a0)
20401e48:	0511                	addi	a0,a0,4
20401e4a:	02080063          	beqz	a6,20401e6a <_printf_i+0x1e6>
20401e4e:	c308                	sw	a0,0(a4)
20401e50:	0015f713          	andi	a4,a1,1
20401e54:	c701                	beqz	a4,20401e5c <_printf_i+0x1d8>
20401e56:	0205e593          	ori	a1,a1,32
20401e5a:	c00c                	sw	a1,0(s0)
20401e5c:	4741                	li	a4,16
20401e5e:	fbb9                	bnez	a5,20401db4 <_printf_i+0x130>
20401e60:	400c                	lw	a1,0(s0)
20401e62:	fdf5f593          	andi	a1,a1,-33
20401e66:	c00c                	sw	a1,0(s0)
20401e68:	b7b1                	j	20401db4 <_printf_i+0x130>
20401e6a:	0405f813          	andi	a6,a1,64
20401e6e:	c308                	sw	a0,0(a4)
20401e70:	fe0800e3          	beqz	a6,20401e50 <_printf_i+0x1cc>
20401e74:	07c2                	slli	a5,a5,0x10
20401e76:	83c1                	srli	a5,a5,0x10
20401e78:	bfe1                	j	20401e50 <_printf_i+0x1cc>
20401e7a:	00004697          	auipc	a3,0x4
20401e7e:	cf668693          	addi	a3,a3,-778 # 20405b70 <__sf_fake_stdout+0x34>
20401e82:	4721                	li	a4,8
20401e84:	bf05                	j	20401db4 <_printf_i+0x130>
20401e86:	87ae                	mv	a5,a1
20401e88:	b799                	j	20401dce <_printf_i+0x14a>
20401e8a:	4194                	lw	a3,0(a1)
20401e8c:	431c                	lw	a5,0(a4)
20401e8e:	49cc                	lw	a1,20(a1)
20401e90:	0806f813          	andi	a6,a3,128
20401e94:	00478513          	addi	a0,a5,4
20401e98:	00080663          	beqz	a6,20401ea4 <_printf_i+0x220>
20401e9c:	c308                	sw	a0,0(a4)
20401e9e:	439c                	lw	a5,0(a5)
20401ea0:	c38c                	sw	a1,0(a5)
20401ea2:	a801                	j	20401eb2 <_printf_i+0x22e>
20401ea4:	c308                	sw	a0,0(a4)
20401ea6:	0406f693          	andi	a3,a3,64
20401eaa:	439c                	lw	a5,0(a5)
20401eac:	daf5                	beqz	a3,20401ea0 <_printf_i+0x21c>
20401eae:	00b79023          	sh	a1,0(a5)
20401eb2:	00042823          	sw	zero,16(s0)
20401eb6:	8ab2                	mv	s5,a2
20401eb8:	bf89                	j	20401e0a <_printf_i+0x186>
20401eba:	431c                	lw	a5,0(a4)
20401ebc:	41d0                	lw	a2,4(a1)
20401ebe:	4581                	li	a1,0
20401ec0:	00478693          	addi	a3,a5,4
20401ec4:	c314                	sw	a3,0(a4)
20401ec6:	0007aa83          	lw	s5,0(a5)
20401eca:	8556                	mv	a0,s5
20401ecc:	3179                	jal	20401b5a <memchr>
20401ece:	c501                	beqz	a0,20401ed6 <_printf_i+0x252>
20401ed0:	41550533          	sub	a0,a0,s5
20401ed4:	c048                	sw	a0,4(s0)
20401ed6:	405c                	lw	a5,4(s0)
20401ed8:	c81c                	sw	a5,16(s0)
20401eda:	040401a3          	sb	zero,67(s0)
20401ede:	b735                	j	20401e0a <_printf_i+0x186>
20401ee0:	4814                	lw	a3,16(s0)
20401ee2:	8656                	mv	a2,s5
20401ee4:	85ca                	mv	a1,s2
20401ee6:	8526                	mv	a0,s1
20401ee8:	9982                	jalr	s3
20401eea:	f34509e3          	beq	a0,s4,20401e1c <_printf_i+0x198>
20401eee:	401c                	lw	a5,0(s0)
20401ef0:	8b89                	andi	a5,a5,2
20401ef2:	e78d                	bnez	a5,20401f1c <_printf_i+0x298>
20401ef4:	47b2                	lw	a5,12(sp)
20401ef6:	4448                	lw	a0,12(s0)
20401ef8:	f2f553e3          	bge	a0,a5,20401e1e <_printf_i+0x19a>
20401efc:	853e                	mv	a0,a5
20401efe:	b705                	j	20401e1e <_printf_i+0x19a>
20401f00:	4685                	li	a3,1
20401f02:	8656                	mv	a2,s5
20401f04:	85ca                	mv	a1,s2
20401f06:	8526                	mv	a0,s1
20401f08:	9982                	jalr	s3
20401f0a:	f16509e3          	beq	a0,s6,20401e1c <_printf_i+0x198>
20401f0e:	0a05                	addi	s4,s4,1
20401f10:	445c                	lw	a5,12(s0)
20401f12:	4732                	lw	a4,12(sp)
20401f14:	8f99                	sub	a5,a5,a4
20401f16:	fefa45e3          	blt	s4,a5,20401f00 <_printf_i+0x27c>
20401f1a:	bfe9                	j	20401ef4 <_printf_i+0x270>
20401f1c:	4a01                	li	s4,0
20401f1e:	01940a93          	addi	s5,s0,25
20401f22:	5b7d                	li	s6,-1
20401f24:	b7f5                	j	20401f10 <_printf_i+0x28c>

20401f26 <_read_r>:
_read_r():
20401f26:	1141                	addi	sp,sp,-16
20401f28:	c422                	sw	s0,8(sp)
20401f2a:	842a                	mv	s0,a0
20401f2c:	852e                	mv	a0,a1
20401f2e:	85b2                	mv	a1,a2
20401f30:	8636                	mv	a2,a3
20401f32:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401f36:	c606                	sw	ra,12(sp)
20401f38:	2075                	jal	20401fe4 <_read>
20401f3a:	57fd                	li	a5,-1
20401f3c:	00f51763          	bne	a0,a5,20401f4a <_read_r+0x24>
20401f40:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401f44:	439c                	lw	a5,0(a5)
20401f46:	c391                	beqz	a5,20401f4a <_read_r+0x24>
20401f48:	c01c                	sw	a5,0(s0)
20401f4a:	40b2                	lw	ra,12(sp)
20401f4c:	4422                	lw	s0,8(sp)
20401f4e:	0141                	addi	sp,sp,16
20401f50:	8082                	ret

20401f52 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401f52:	1101                	addi	sp,sp,-32
20401f54:	ce06                	sw	ra,28(sp)
20401f56:	cc22                	sw	s0,24(sp)
20401f58:	1000                	addi	s0,sp,32
20401f5a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401f5e:	224d                	jal	20402100 <__errno>
20401f60:	872a                	mv	a4,a0
20401f62:	05800793          	li	a5,88
20401f66:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401f68:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401f6a:	853e                	mv	a0,a5
20401f6c:	40f2                	lw	ra,28(sp)
20401f6e:	4462                	lw	s0,24(sp)
20401f70:	6105                	addi	sp,sp,32
20401f72:	8082                	ret

20401f74 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401f74:	1101                	addi	sp,sp,-32
20401f76:	ce06                	sw	ra,28(sp)
20401f78:	cc22                	sw	s0,24(sp)
20401f7a:	1000                	addi	s0,sp,32
20401f7c:	fea42623          	sw	a0,-20(s0)
20401f80:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401f84:	2ab5                	jal	20402100 <__errno>
20401f86:	872a                	mv	a4,a0
20401f88:	fa800793          	li	a5,-88
20401f8c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401f8e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401f90:	853e                	mv	a0,a5
20401f92:	40f2                	lw	ra,28(sp)
20401f94:	4462                	lw	s0,24(sp)
20401f96:	6105                	addi	sp,sp,32
20401f98:	8082                	ret

20401f9a <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401f9a:	1101                	addi	sp,sp,-32
20401f9c:	ce22                	sw	s0,28(sp)
20401f9e:	1000                	addi	s0,sp,32
20401fa0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401fa4:	fec42783          	lw	a5,-20(s0)
20401fa8:	17fd                	addi	a5,a5,-1
20401faa:	0017b793          	seqz	a5,a5
20401fae:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401fb2:	853e                	mv	a0,a5
20401fb4:	4472                	lw	s0,28(sp)
20401fb6:	6105                	addi	sp,sp,32
20401fb8:	8082                	ret

20401fba <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401fba:	1101                	addi	sp,sp,-32
20401fbc:	ce06                	sw	ra,28(sp)
20401fbe:	cc22                	sw	s0,24(sp)
20401fc0:	1000                	addi	s0,sp,32
20401fc2:	fea42623          	sw	a0,-20(s0)
20401fc6:	feb42423          	sw	a1,-24(s0)
20401fca:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401fce:	2a0d                	jal	20402100 <__errno>
20401fd0:	872a                	mv	a4,a0
20401fd2:	05800793          	li	a5,88
20401fd6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401fd8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401fda:	853e                	mv	a0,a5
20401fdc:	40f2                	lw	ra,28(sp)
20401fde:	4462                	lw	s0,24(sp)
20401fe0:	6105                	addi	sp,sp,32
20401fe2:	8082                	ret

20401fe4 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401fe4:	1101                	addi	sp,sp,-32
20401fe6:	ce06                	sw	ra,28(sp)
20401fe8:	cc22                	sw	s0,24(sp)
20401fea:	1000                	addi	s0,sp,32
20401fec:	fea42623          	sw	a0,-20(s0)
20401ff0:	feb42423          	sw	a1,-24(s0)
20401ff4:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401ff8:	2221                	jal	20402100 <__errno>
20401ffa:	872a                	mv	a4,a0
20401ffc:	05800793          	li	a5,88
20402000:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20402002:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20402004:	853e                	mv	a0,a5
20402006:	40f2                	lw	ra,28(sp)
20402008:	4462                	lw	s0,24(sp)
2040200a:	6105                	addi	sp,sp,32
2040200c:	8082                	ret

2040200e <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
2040200e:	7179                	addi	sp,sp,-48
20402010:	d622                	sw	s0,44(sp)
20402012:	1800                	addi	s0,sp,48
20402014:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20402018:	800017b7          	lui	a5,0x80001
2040201c:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
20402020:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20402024:	4cc18713          	addi	a4,gp,1228 # 800023d4 <_sp>
20402028:	800037b7          	lui	a5,0x80003
2040202c:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
20402030:	00f71463          	bne	a4,a5,20402038 <_sbrk+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20402034:	57fd                	li	a5,-1
20402036:	a0a9                	j	20402080 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20402038:	800017b7          	lui	a5,0x80001
2040203c:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
20402040:	fdc42783          	lw	a5,-36(s0)
20402044:	973e                	add	a4,a4,a5
20402046:	800037b7          	lui	a5,0x80003
2040204a:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
2040204e:	02f77063          	bgeu	a4,a5,2040206e <_sbrk+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20402052:	800017b7          	lui	a5,0x80001
20402056:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
2040205a:	fdc42783          	lw	a5,-36(s0)
2040205e:	973e                	add	a4,a4,a5
20402060:	800017b7          	lui	a5,0x80001
20402064:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20402068:	fec42783          	lw	a5,-20(s0)
2040206c:	a811                	j	20402080 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
2040206e:	800017b7          	lui	a5,0x80001
20402072:	80003737          	lui	a4,0x80003
20402076:	bd470713          	addi	a4,a4,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
2040207a:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
2040207e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20402080:	853e                	mv	a0,a5
20402082:	5432                	lw	s0,44(sp)
20402084:	6145                	addi	sp,sp,48
20402086:	8082                	ret

20402088 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20402088:	7179                	addi	sp,sp,-48
2040208a:	d606                	sw	ra,44(sp)
2040208c:	d422                	sw	s0,40(sp)
2040208e:	1800                	addi	s0,sp,48
20402090:	fca42e23          	sw	a0,-36(s0)
20402094:	fcb42c23          	sw	a1,-40(s0)
20402098:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
2040209c:	fdc42703          	lw	a4,-36(s0)
204020a0:	4785                	li	a5,1
204020a2:	00f70963          	beq	a4,a5,204020b4 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
204020a6:	28a9                	jal	20402100 <__errno>
204020a8:	872a                	mv	a4,a0
204020aa:	05800793          	li	a5,88
204020ae:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
204020b0:	57fd                	li	a5,-1
204020b2:	a82d                	j	204020ec <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
204020b4:	fd842783          	lw	a5,-40(s0)
204020b8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
204020bc:	fe042623          	sw	zero,-20(s0)
204020c0:	a839                	j	204020de <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204020c2:	fe842703          	lw	a4,-24(s0)
204020c6:	fec42783          	lw	a5,-20(s0)
204020ca:	97ba                	add	a5,a5,a4
204020cc:	0007c783          	lbu	a5,0(a5)
204020d0:	853e                	mv	a0,a5
204020d2:	2c91                	jal	20402326 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
204020d4:	fec42783          	lw	a5,-20(s0)
204020d8:	0785                	addi	a5,a5,1
204020da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204020de:	fec42703          	lw	a4,-20(s0)
204020e2:	fd442783          	lw	a5,-44(s0)
204020e6:	fcf76ee3          	bltu	a4,a5,204020c2 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204020ea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204020ec:	853e                	mv	a0,a5
204020ee:	50b2                	lw	ra,44(sp)
204020f0:	5422                	lw	s0,40(sp)
204020f2:	6145                	addi	sp,sp,48
204020f4:	8082                	ret

204020f6 <atexit>:
atexit():
204020f6:	85aa                	mv	a1,a0
204020f8:	4681                	li	a3,0
204020fa:	4601                	li	a2,0
204020fc:	4501                	li	a0,0
204020fe:	a8f1                	j	204021da <__register_exitproc>

20402100 <__errno>:
__errno():
20402100:	5fbff797          	auipc	a5,0x5fbff
20402104:	60878793          	addi	a5,a5,1544 # 80001708 <_impure_ptr>
20402108:	4388                	lw	a0,0(a5)
2040210a:	8082                	ret

2040210c <exit>:
exit():
2040210c:	1141                	addi	sp,sp,-16
2040210e:	c422                	sw	s0,8(sp)
20402110:	c606                	sw	ra,12(sp)
20402112:	00000797          	auipc	a5,0x0
20402116:	14c78793          	addi	a5,a5,332 # 2040225e <__call_exitprocs>
2040211a:	842a                	mv	s0,a0
2040211c:	c399                	beqz	a5,20402122 <exit+0x16>
2040211e:	4581                	li	a1,0
20402120:	2a3d                	jal	2040225e <__call_exitprocs>
20402122:	5fbff797          	auipc	a5,0x5fbff
20402126:	5ea78793          	addi	a5,a5,1514 # 8000170c <_global_impure_ptr>
2040212a:	4388                	lw	a0,0(a5)
2040212c:	551c                	lw	a5,40(a0)
2040212e:	c391                	beqz	a5,20402132 <exit+0x26>
20402130:	9782                	jalr	a5
20402132:	8522                	mv	a0,s0
20402134:	03b030ef          	jal	ra,2040596e <_exit>

20402138 <__libc_fini_array>:
__libc_fini_array():
20402138:	1141                	addi	sp,sp,-16
2040213a:	00004797          	auipc	a5,0x4
2040213e:	db278793          	addi	a5,a5,-590 # 20405eec <__fini_array_end>
20402142:	c422                	sw	s0,8(sp)
20402144:	00004417          	auipc	s0,0x4
20402148:	da840413          	addi	s0,s0,-600 # 20405eec <__fini_array_end>
2040214c:	8c1d                	sub	s0,s0,a5
2040214e:	c226                	sw	s1,4(sp)
20402150:	c606                	sw	ra,12(sp)
20402152:	8409                	srai	s0,s0,0x2
20402154:	84be                	mv	s1,a5
20402156:	e411                	bnez	s0,20402162 <__libc_fini_array+0x2a>
20402158:	40b2                	lw	ra,12(sp)
2040215a:	4422                	lw	s0,8(sp)
2040215c:	4492                	lw	s1,4(sp)
2040215e:	0141                	addi	sp,sp,16
20402160:	8082                	ret
20402162:	147d                	addi	s0,s0,-1
20402164:	00241793          	slli	a5,s0,0x2
20402168:	97a6                	add	a5,a5,s1
2040216a:	439c                	lw	a5,0(a5)
2040216c:	9782                	jalr	a5
2040216e:	b7e5                	j	20402156 <__libc_fini_array+0x1e>

20402170 <__libc_init_array>:
__libc_init_array():
20402170:	1141                	addi	sp,sp,-16
20402172:	00004797          	auipc	a5,0x4
20402176:	d7678793          	addi	a5,a5,-650 # 20405ee8 <__init_array_start>
2040217a:	c422                	sw	s0,8(sp)
2040217c:	00004417          	auipc	s0,0x4
20402180:	d6c40413          	addi	s0,s0,-660 # 20405ee8 <__init_array_start>
20402184:	8c1d                	sub	s0,s0,a5
20402186:	c226                	sw	s1,4(sp)
20402188:	c04a                	sw	s2,0(sp)
2040218a:	c606                	sw	ra,12(sp)
2040218c:	8409                	srai	s0,s0,0x2
2040218e:	4481                	li	s1,0
20402190:	893e                	mv	s2,a5
20402192:	02849663          	bne	s1,s0,204021be <__libc_init_array+0x4e>
20402196:	00004797          	auipc	a5,0x4
2040219a:	d5278793          	addi	a5,a5,-686 # 20405ee8 <__init_array_start>
2040219e:	00004417          	auipc	s0,0x4
204021a2:	d4e40413          	addi	s0,s0,-690 # 20405eec <__fini_array_end>
204021a6:	8c1d                	sub	s0,s0,a5
204021a8:	8409                	srai	s0,s0,0x2
204021aa:	4481                	li	s1,0
204021ac:	893e                	mv	s2,a5
204021ae:	00849f63          	bne	s1,s0,204021cc <__libc_init_array+0x5c>
204021b2:	40b2                	lw	ra,12(sp)
204021b4:	4422                	lw	s0,8(sp)
204021b6:	4492                	lw	s1,4(sp)
204021b8:	4902                	lw	s2,0(sp)
204021ba:	0141                	addi	sp,sp,16
204021bc:	8082                	ret
204021be:	00249793          	slli	a5,s1,0x2
204021c2:	97ca                	add	a5,a5,s2
204021c4:	439c                	lw	a5,0(a5)
204021c6:	0485                	addi	s1,s1,1
204021c8:	9782                	jalr	a5
204021ca:	b7e1                	j	20402192 <__libc_init_array+0x22>
204021cc:	00249793          	slli	a5,s1,0x2
204021d0:	97ca                	add	a5,a5,s2
204021d2:	439c                	lw	a5,0(a5)
204021d4:	0485                	addi	s1,s1,1
204021d6:	9782                	jalr	a5
204021d8:	bfd9                	j	204021ae <__libc_init_array+0x3e>

204021da <__register_exitproc>:
__register_exitproc():
204021da:	5fbff797          	auipc	a5,0x5fbff
204021de:	55e78793          	addi	a5,a5,1374 # 80001738 <_global_atexit>
204021e2:	439c                	lw	a5,0(a5)
204021e4:	8e2a                	mv	t3,a0
204021e6:	e38d                	bnez	a5,20402208 <__register_exitproc+0x2e>
204021e8:	03c18713          	addi	a4,gp,60 # 80001f44 <_global_atexit0>
204021ec:	5fbff797          	auipc	a5,0x5fbff
204021f0:	54e7a623          	sw	a4,1356(a5) # 80001738 <_global_atexit>
204021f4:	dfbfe517          	auipc	a0,0xdfbfe
204021f8:	e0c50513          	addi	a0,a0,-500 # 0 <__metal_boot_hart>
204021fc:	87ba                	mv	a5,a4
204021fe:	c509                	beqz	a0,20402208 <__register_exitproc+0x2e>
20402200:	411c                	lw	a5,0(a0)
20402202:	0cf1a223          	sw	a5,196(gp) # 80001fcc <_global_atexit0+0x88>
20402206:	87ba                	mv	a5,a4
20402208:	43d8                	lw	a4,4(a5)
2040220a:	487d                	li	a6,31
2040220c:	557d                	li	a0,-1
2040220e:	04e84763          	blt	a6,a4,2040225c <__register_exitproc+0x82>
20402212:	020e0e63          	beqz	t3,2040224e <__register_exitproc+0x74>
20402216:	0887a803          	lw	a6,136(a5)
2040221a:	04080163          	beqz	a6,2040225c <__register_exitproc+0x82>
2040221e:	00271893          	slli	a7,a4,0x2
20402222:	98c2                	add	a7,a7,a6
20402224:	00c8a023          	sw	a2,0(a7)
20402228:	10082303          	lw	t1,256(a6)
2040222c:	4605                	li	a2,1
2040222e:	00e61633          	sll	a2,a2,a4
20402232:	00c36333          	or	t1,t1,a2
20402236:	10682023          	sw	t1,256(a6)
2040223a:	08d8a023          	sw	a3,128(a7)
2040223e:	4689                	li	a3,2
20402240:	00de1763          	bne	t3,a3,2040224e <__register_exitproc+0x74>
20402244:	10482683          	lw	a3,260(a6)
20402248:	8e55                	or	a2,a2,a3
2040224a:	10c82223          	sw	a2,260(a6)
2040224e:	00170693          	addi	a3,a4,1
20402252:	070a                	slli	a4,a4,0x2
20402254:	c3d4                	sw	a3,4(a5)
20402256:	97ba                	add	a5,a5,a4
20402258:	c78c                	sw	a1,8(a5)
2040225a:	4501                	li	a0,0
2040225c:	8082                	ret

2040225e <__call_exitprocs>:
__call_exitprocs():
2040225e:	7179                	addi	sp,sp,-48
20402260:	cc52                	sw	s4,24(sp)
20402262:	ca56                	sw	s5,20(sp)
20402264:	c85a                	sw	s6,16(sp)
20402266:	c65e                	sw	s7,12(sp)
20402268:	d606                	sw	ra,44(sp)
2040226a:	d422                	sw	s0,40(sp)
2040226c:	d226                	sw	s1,36(sp)
2040226e:	d04a                	sw	s2,32(sp)
20402270:	ce4e                	sw	s3,28(sp)
20402272:	c462                	sw	s8,8(sp)
20402274:	8b2a                	mv	s6,a0
20402276:	8a2e                	mv	s4,a1
20402278:	5fbffa97          	auipc	s5,0x5fbff
2040227c:	4c0a8a93          	addi	s5,s5,1216 # 80001738 <_global_atexit>
20402280:	4b85                	li	s7,1
20402282:	000aa403          	lw	s0,0(s5)
20402286:	c811                	beqz	s0,2040229a <__call_exitprocs+0x3c>
20402288:	4044                	lw	s1,4(s0)
2040228a:	08842983          	lw	s3,136(s0)
2040228e:	fff48913          	addi	s2,s1,-1
20402292:	048a                	slli	s1,s1,0x2
20402294:	94a2                	add	s1,s1,s0
20402296:	00095e63          	bgez	s2,204022b2 <__call_exitprocs+0x54>
2040229a:	50b2                	lw	ra,44(sp)
2040229c:	5422                	lw	s0,40(sp)
2040229e:	5492                	lw	s1,36(sp)
204022a0:	5902                	lw	s2,32(sp)
204022a2:	49f2                	lw	s3,28(sp)
204022a4:	4a62                	lw	s4,24(sp)
204022a6:	4ad2                	lw	s5,20(sp)
204022a8:	4b42                	lw	s6,16(sp)
204022aa:	4bb2                	lw	s7,12(sp)
204022ac:	4c22                	lw	s8,8(sp)
204022ae:	6145                	addi	sp,sp,48
204022b0:	8082                	ret
204022b2:	000a0e63          	beqz	s4,204022ce <__call_exitprocs+0x70>
204022b6:	00099563          	bnez	s3,204022c0 <__call_exitprocs+0x62>
204022ba:	197d                	addi	s2,s2,-1
204022bc:	14f1                	addi	s1,s1,-4
204022be:	bfe1                	j	20402296 <__call_exitprocs+0x38>
204022c0:	00291793          	slli	a5,s2,0x2
204022c4:	97ce                	add	a5,a5,s3
204022c6:	0807a783          	lw	a5,128(a5)
204022ca:	ff4798e3          	bne	a5,s4,204022ba <__call_exitprocs+0x5c>
204022ce:	4058                	lw	a4,4(s0)
204022d0:	40dc                	lw	a5,4(s1)
204022d2:	177d                	addi	a4,a4,-1
204022d4:	03271863          	bne	a4,s2,20402304 <__call_exitprocs+0xa6>
204022d8:	01242223          	sw	s2,4(s0)
204022dc:	dff9                	beqz	a5,204022ba <__call_exitprocs+0x5c>
204022de:	00442c03          	lw	s8,4(s0)
204022e2:	00098863          	beqz	s3,204022f2 <__call_exitprocs+0x94>
204022e6:	1009a683          	lw	a3,256(s3)
204022ea:	012b9733          	sll	a4,s7,s2
204022ee:	8ef9                	and	a3,a3,a4
204022f0:	ee89                	bnez	a3,2040230a <__call_exitprocs+0xac>
204022f2:	9782                	jalr	a5
204022f4:	4058                	lw	a4,4(s0)
204022f6:	000aa783          	lw	a5,0(s5)
204022fa:	f98714e3          	bne	a4,s8,20402282 <__call_exitprocs+0x24>
204022fe:	faf40ee3          	beq	s0,a5,204022ba <__call_exitprocs+0x5c>
20402302:	b741                	j	20402282 <__call_exitprocs+0x24>
20402304:	0004a223          	sw	zero,4(s1)
20402308:	bfd1                	j	204022dc <__call_exitprocs+0x7e>
2040230a:	00291693          	slli	a3,s2,0x2
2040230e:	96ce                	add	a3,a3,s3
20402310:	428c                	lw	a1,0(a3)
20402312:	1049a683          	lw	a3,260(s3)
20402316:	8f75                	and	a4,a4,a3
20402318:	e701                	bnez	a4,20402320 <__call_exitprocs+0xc2>
2040231a:	855a                	mv	a0,s6
2040231c:	9782                	jalr	a5
2040231e:	bfd9                	j	204022f4 <__call_exitprocs+0x96>
20402320:	852e                	mv	a0,a1
20402322:	9782                	jalr	a5
20402324:	bfc1                	j	204022f4 <__call_exitprocs+0x96>

20402326 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20402326:	1101                	addi	sp,sp,-32
20402328:	ce06                	sw	ra,28(sp)
2040232a:	cc22                	sw	s0,24(sp)
2040232c:	1000                	addi	s0,sp,32
2040232e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20402332:	fec42703          	lw	a4,-20(s0)
20402336:	47a9                	li	a5,10
20402338:	00f71463          	bne	a4,a5,20402340 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
2040233c:	4535                	li	a0,13
2040233e:	2811                	jal	20402352 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20402340:	fec42503          	lw	a0,-20(s0)
20402344:	2039                	jal	20402352 <metal_tty_putc_raw>
20402346:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20402348:	853e                	mv	a0,a5
2040234a:	40f2                	lw	ra,28(sp)
2040234c:	4462                	lw	s0,24(sp)
2040234e:	6105                	addi	sp,sp,32
20402350:	8082                	ret

20402352 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20402352:	1101                	addi	sp,sp,-32
20402354:	ce06                	sw	ra,28(sp)
20402356:	cc22                	sw	s0,24(sp)
20402358:	1000                	addi	s0,sp,32
2040235a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
2040235e:	fec42583          	lw	a1,-20(s0)
20402362:	800017b7          	lui	a5,0x80001
20402366:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040236a:	28b1                	jal	204023c6 <metal_uart_putc>
2040236c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
2040236e:	853e                	mv	a0,a5
20402370:	40f2                	lw	ra,28(sp)
20402372:	4462                	lw	s0,24(sp)
20402374:	6105                	addi	sp,sp,32
20402376:	8082                	ret

20402378 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20402378:	1141                	addi	sp,sp,-16
2040237a:	c606                	sw	ra,12(sp)
2040237c:	c422                	sw	s0,8(sp)
2040237e:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20402380:	67f1                	lui	a5,0x1c
20402382:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402386:	800017b7          	lui	a5,0x80001
2040238a:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040238e:	2031                	jal	2040239a <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20402390:	0001                	nop
20402392:	40b2                	lw	ra,12(sp)
20402394:	4422                	lw	s0,8(sp)
20402396:	0141                	addi	sp,sp,16
20402398:	8082                	ret

2040239a <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
2040239a:	1101                	addi	sp,sp,-32
2040239c:	ce06                	sw	ra,28(sp)
2040239e:	cc22                	sw	s0,24(sp)
204023a0:	1000                	addi	s0,sp,32
204023a2:	fea42623          	sw	a0,-20(s0)
204023a6:	feb42423          	sw	a1,-24(s0)
204023aa:	fec42783          	lw	a5,-20(s0)
204023ae:	439c                	lw	a5,0(a5)
204023b0:	439c                	lw	a5,0(a5)
204023b2:	fe842583          	lw	a1,-24(s0)
204023b6:	fec42503          	lw	a0,-20(s0)
204023ba:	9782                	jalr	a5
204023bc:	0001                	nop
204023be:	40f2                	lw	ra,28(sp)
204023c0:	4462                	lw	s0,24(sp)
204023c2:	6105                	addi	sp,sp,32
204023c4:	8082                	ret

204023c6 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
204023c6:	1101                	addi	sp,sp,-32
204023c8:	ce06                	sw	ra,28(sp)
204023ca:	cc22                	sw	s0,24(sp)
204023cc:	1000                	addi	s0,sp,32
204023ce:	fea42623          	sw	a0,-20(s0)
204023d2:	feb42423          	sw	a1,-24(s0)
204023d6:	fec42783          	lw	a5,-20(s0)
204023da:	439c                	lw	a5,0(a5)
204023dc:	43dc                	lw	a5,4(a5)
204023de:	fe842583          	lw	a1,-24(s0)
204023e2:	fec42503          	lw	a0,-20(s0)
204023e6:	9782                	jalr	a5
204023e8:	87aa                	mv	a5,a0
204023ea:	853e                	mv	a0,a5
204023ec:	40f2                	lw	ra,28(sp)
204023ee:	4462                	lw	s0,24(sp)
204023f0:	6105                	addi	sp,sp,32
204023f2:	8082                	ret

204023f4 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
204023f4:	1101                	addi	sp,sp,-32
204023f6:	ce06                	sw	ra,28(sp)
204023f8:	cc22                	sw	s0,24(sp)
204023fa:	1000                	addi	s0,sp,32
204023fc:	fea42623          	sw	a0,-20(s0)
20402400:	feb42423          	sw	a1,-24(s0)
20402404:	fec42783          	lw	a5,-20(s0)
20402408:	439c                	lw	a5,0(a5)
2040240a:	4bdc                	lw	a5,20(a5)
2040240c:	fe842583          	lw	a1,-24(s0)
20402410:	fec42503          	lw	a0,-20(s0)
20402414:	9782                	jalr	a5
20402416:	87aa                	mv	a5,a0
20402418:	853e                	mv	a0,a5
2040241a:	40f2                	lw	ra,28(sp)
2040241c:	4462                	lw	s0,24(sp)
2040241e:	6105                	addi	sp,sp,32
20402420:	8082                	ret

20402422 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20402422:	1101                	addi	sp,sp,-32
20402424:	ce22                	sw	s0,28(sp)
20402426:	1000                	addi	s0,sp,32
20402428:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2040242c:	fec42703          	lw	a4,-20(s0)
20402430:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20402434:	00f71563          	bne	a4,a5,2040243e <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20402438:	020007b7          	lui	a5,0x2000
2040243c:	a011                	j	20402440 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
2040243e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20402440:	853e                	mv	a0,a5
20402442:	4472                	lw	s0,28(sp)
20402444:	6105                	addi	sp,sp,32
20402446:	8082                	ret

20402448 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20402448:	1101                	addi	sp,sp,-32
2040244a:	ce22                	sw	s0,28(sp)
2040244c:	1000                	addi	s0,sp,32
2040244e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20402452:	fec42703          	lw	a4,-20(s0)
20402456:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
2040245a:	00f71463          	bne	a4,a5,20402462 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
2040245e:	4789                	li	a5,2
20402460:	a011                	j	20402464 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20402462:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20402464:	853e                	mv	a0,a5
20402466:	4472                	lw	s0,28(sp)
20402468:	6105                	addi	sp,sp,32
2040246a:	8082                	ret

2040246c <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040246c:	1101                	addi	sp,sp,-32
2040246e:	ce22                	sw	s0,28(sp)
20402470:	1000                	addi	s0,sp,32
20402472:	fea42623          	sw	a0,-20(s0)
20402476:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
2040247a:	fe842783          	lw	a5,-24(s0)
2040247e:	e791                	bnez	a5,2040248a <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402480:	800017b7          	lui	a5,0x80001
20402484:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20402488:	a821                	j	204024a0 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
2040248a:	fe842703          	lw	a4,-24(s0)
2040248e:	4785                	li	a5,1
20402490:	00f71763          	bne	a4,a5,2040249e <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402494:	800017b7          	lui	a5,0x80001
20402498:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
2040249c:	a011                	j	204024a0 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
2040249e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
204024a0:	853e                	mv	a0,a5
204024a2:	4472                	lw	s0,28(sp)
204024a4:	6105                	addi	sp,sp,32
204024a6:	8082                	ret

204024a8 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204024a8:	1101                	addi	sp,sp,-32
204024aa:	ce22                	sw	s0,28(sp)
204024ac:	1000                	addi	s0,sp,32
204024ae:	fea42623          	sw	a0,-20(s0)
204024b2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
204024b6:	fe842783          	lw	a5,-24(s0)
204024ba:	e399                	bnez	a5,204024c0 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
204024bc:	478d                	li	a5,3
204024be:	a809                	j	204024d0 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
204024c0:	fe842703          	lw	a4,-24(s0)
204024c4:	4785                	li	a5,1
204024c6:	00f71463          	bne	a4,a5,204024ce <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
204024ca:	479d                	li	a5,7
204024cc:	a011                	j	204024d0 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
204024ce:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
204024d0:	853e                	mv	a0,a5
204024d2:	4472                	lw	s0,28(sp)
204024d4:	6105                	addi	sp,sp,32
204024d6:	8082                	ret

204024d8 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
204024d8:	715d                	addi	sp,sp,-80
204024da:	c686                	sw	ra,76(sp)
204024dc:	c4a2                	sw	s0,72(sp)
204024de:	c2ca                	sw	s2,68(sp)
204024e0:	c0ce                	sw	s3,64(sp)
204024e2:	de52                	sw	s4,60(sp)
204024e4:	dc56                	sw	s5,56(sp)
204024e6:	da5a                	sw	s6,52(sp)
204024e8:	d85e                	sw	s7,48(sp)
204024ea:	d662                	sw	s8,44(sp)
204024ec:	d466                	sw	s9,40(sp)
204024ee:	0880                	addi	s0,sp,80
204024f0:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204024f4:	fbc42783          	lw	a5,-68(s0)
204024f8:	853e                	mv	a0,a5
204024fa:	3725                	jal	20402422 <__metal_driver_sifive_clint0_control_base>
204024fc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402500:	fcc42703          	lw	a4,-52(s0)
20402504:	67b1                	lui	a5,0xc
20402506:	17f1                	addi	a5,a5,-4
20402508:	97ba                	add	a5,a5,a4
2040250a:	439c                	lw	a5,0(a5)
2040250c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402510:	fcc42703          	lw	a4,-52(s0)
20402514:	67b1                	lui	a5,0xc
20402516:	17e1                	addi	a5,a5,-8
20402518:	97ba                	add	a5,a5,a4
2040251a:	439c                	lw	a5,0(a5)
2040251c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20402520:	fcc42703          	lw	a4,-52(s0)
20402524:	67b1                	lui	a5,0xc
20402526:	17f1                	addi	a5,a5,-4
20402528:	97ba                	add	a5,a5,a4
2040252a:	439c                	lw	a5,0(a5)
2040252c:	fc842703          	lw	a4,-56(s0)
20402530:	fcf718e3          	bne	a4,a5,20402500 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20402534:	fc842783          	lw	a5,-56(s0)
20402538:	8c3e                	mv	s8,a5
2040253a:	4c81                	li	s9,0
2040253c:	000c1993          	slli	s3,s8,0x0
20402540:	4901                	li	s2,0
20402542:	fc442783          	lw	a5,-60(s0)
20402546:	8a3e                	mv	s4,a5
20402548:	4a81                	li	s5,0
2040254a:	01496b33          	or	s6,s2,s4
2040254e:	0159ebb3          	or	s7,s3,s5
20402552:	87da                	mv	a5,s6
20402554:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20402556:	853e                	mv	a0,a5
20402558:	85c2                	mv	a1,a6
2040255a:	40b6                	lw	ra,76(sp)
2040255c:	4426                	lw	s0,72(sp)
2040255e:	4916                	lw	s2,68(sp)
20402560:	4986                	lw	s3,64(sp)
20402562:	5a72                	lw	s4,60(sp)
20402564:	5ae2                	lw	s5,56(sp)
20402566:	5b52                	lw	s6,52(sp)
20402568:	5bc2                	lw	s7,48(sp)
2040256a:	5c32                	lw	s8,44(sp)
2040256c:	5ca2                	lw	s9,40(sp)
2040256e:	6161                	addi	sp,sp,80
20402570:	8082                	ret

20402572 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20402572:	7179                	addi	sp,sp,-48
20402574:	d606                	sw	ra,44(sp)
20402576:	d422                	sw	s0,40(sp)
20402578:	d24a                	sw	s2,36(sp)
2040257a:	d04e                	sw	s3,32(sp)
2040257c:	1800                	addi	s0,sp,48
2040257e:	fca42e23          	sw	a0,-36(s0)
20402582:	fcb42c23          	sw	a1,-40(s0)
20402586:	fcc42823          	sw	a2,-48(s0)
2040258a:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
2040258e:	fdc42783          	lw	a5,-36(s0)
20402592:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402596:	fec42783          	lw	a5,-20(s0)
2040259a:	853e                	mv	a0,a5
2040259c:	3559                	jal	20402422 <__metal_driver_sifive_clint0_control_base>
2040259e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
204025a2:	fd842783          	lw	a5,-40(s0)
204025a6:	078e                	slli	a5,a5,0x3
204025a8:	873e                	mv	a4,a5
204025aa:	fe842783          	lw	a5,-24(s0)
204025ae:	973e                	add	a4,a4,a5
204025b0:	6791                	lui	a5,0x4
204025b2:	0791                	addi	a5,a5,4
204025b4:	97ba                	add	a5,a5,a4
204025b6:	873e                	mv	a4,a5
204025b8:	57fd                	li	a5,-1
204025ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
204025bc:	fd842783          	lw	a5,-40(s0)
204025c0:	078e                	slli	a5,a5,0x3
204025c2:	873e                	mv	a4,a5
204025c4:	fe842783          	lw	a5,-24(s0)
204025c8:	973e                	add	a4,a4,a5
204025ca:	6791                	lui	a5,0x4
204025cc:	97ba                	add	a5,a5,a4
204025ce:	873e                	mv	a4,a5
204025d0:	fd042783          	lw	a5,-48(s0)
204025d4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
204025d6:	fd442783          	lw	a5,-44(s0)
204025da:	0007d913          	srli	s2,a5,0x0
204025de:	4981                	li	s3,0
204025e0:	fd842783          	lw	a5,-40(s0)
204025e4:	078e                	slli	a5,a5,0x3
204025e6:	873e                	mv	a4,a5
204025e8:	fe842783          	lw	a5,-24(s0)
204025ec:	973e                	add	a4,a4,a5
204025ee:	6791                	lui	a5,0x4
204025f0:	0791                	addi	a5,a5,4
204025f2:	97ba                	add	a5,a5,a4
204025f4:	874a                	mv	a4,s2
204025f6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
204025f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
204025fa:	853e                	mv	a0,a5
204025fc:	50b2                	lw	ra,44(sp)
204025fe:	5422                	lw	s0,40(sp)
20402600:	5912                	lw	s2,36(sp)
20402602:	5982                	lw	s3,32(sp)
20402604:	6145                	addi	sp,sp,48
20402606:	8082                	ret

20402608 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402608:	1101                	addi	sp,sp,-32
2040260a:	ce06                	sw	ra,28(sp)
2040260c:	cc22                	sw	s0,24(sp)
2040260e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402610:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402614:	f14027f3          	csrr	a5,mhartid
20402618:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
2040261c:	fec42783          	lw	a5,-20(s0)
20402620:	853e                	mv	a0,a5
20402622:	1c4030ef          	jal	ra,204057e6 <metal_cpu_get>
20402626:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
2040262a:	fe842503          	lw	a0,-24(s0)
2040262e:	192030ef          	jal	ra,204057c0 <metal_cpu_interrupt_controller>
20402632:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402634:	853e                	mv	a0,a5
20402636:	40f2                	lw	ra,28(sp)
20402638:	4462                	lw	s0,24(sp)
2040263a:	6105                	addi	sp,sp,32
2040263c:	8082                	ret

2040263e <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
2040263e:	7139                	addi	sp,sp,-64
20402640:	de06                	sw	ra,60(sp)
20402642:	dc22                	sw	s0,56(sp)
20402644:	0080                	addi	s0,sp,64
20402646:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040264a:	fcc42503          	lw	a0,-52(s0)
2040264e:	3bed                	jal	20402448 <__metal_driver_sifive_clint0_num_interrupts>
20402650:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402654:	fcc42783          	lw	a5,-52(s0)
20402658:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
2040265c:	fe442783          	lw	a5,-28(s0)
20402660:	43dc                	lw	a5,4(a5)
20402662:	efa9                	bnez	a5,204026bc <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402664:	fe042623          	sw	zero,-20(s0)
20402668:	a081                	j	204026a8 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040266a:	fec42583          	lw	a1,-20(s0)
2040266e:	fcc42503          	lw	a0,-52(s0)
20402672:	3bed                	jal	2040246c <__metal_driver_sifive_clint0_interrupt_parents>
20402674:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402678:	fec42583          	lw	a1,-20(s0)
2040267c:	fcc42503          	lw	a0,-52(s0)
20402680:	3525                	jal	204024a8 <__metal_driver_sifive_clint0_interrupt_lines>
20402682:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402686:	fe042783          	lw	a5,-32(s0)
2040268a:	439c                	lw	a5,0(a5)
2040268c:	4fdc                	lw	a5,28(a5)
2040268e:	fcc42683          	lw	a3,-52(s0)
20402692:	4601                	li	a2,0
20402694:	fdc42583          	lw	a1,-36(s0)
20402698:	fe042503          	lw	a0,-32(s0)
2040269c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
2040269e:	fec42783          	lw	a5,-20(s0)
204026a2:	0785                	addi	a5,a5,1
204026a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
204026a8:	fec42703          	lw	a4,-20(s0)
204026ac:	fe842783          	lw	a5,-24(s0)
204026b0:	faf74de3          	blt	a4,a5,2040266a <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
204026b4:	fe442783          	lw	a5,-28(s0)
204026b8:	4705                	li	a4,1
204026ba:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
204026bc:	0001                	nop
204026be:	50f2                	lw	ra,60(sp)
204026c0:	5462                	lw	s0,56(sp)
204026c2:	6121                	addi	sp,sp,64
204026c4:	8082                	ret

204026c6 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
204026c6:	7139                	addi	sp,sp,-64
204026c8:	de06                	sw	ra,60(sp)
204026ca:	dc22                	sw	s0,56(sp)
204026cc:	0080                	addi	s0,sp,64
204026ce:	fca42623          	sw	a0,-52(s0)
204026d2:	fcb42423          	sw	a1,-56(s0)
204026d6:	fcc42223          	sw	a2,-60(s0)
204026da:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
204026de:	57fd                	li	a5,-1
204026e0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204026e4:	332010ef          	jal	ra,20403a16 <__metal_controller_interrupt_vector_mode>
204026e8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
204026ec:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204026f0:	3f21                	jal	20402608 <_get_cpu_intc>
204026f2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204026f6:	fcc42503          	lw	a0,-52(s0)
204026fa:	33b9                	jal	20402448 <__metal_driver_sifive_clint0_num_interrupts>
204026fc:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402700:	fe042703          	lw	a4,-32(s0)
20402704:	4785                	li	a5,1
20402706:	00f70863          	beq	a4,a5,20402716 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
2040270a:	fe042783          	lw	a5,-32(s0)
2040270e:	c781                	beqz	a5,20402716 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402710:	fec42783          	lw	a5,-20(s0)
20402714:	a049                	j	20402796 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402716:	fe042223          	sw	zero,-28(s0)
2040271a:	a091                	j	2040275e <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040271c:	fe442583          	lw	a1,-28(s0)
20402720:	fcc42503          	lw	a0,-52(s0)
20402724:	3351                	jal	204024a8 <__metal_driver_sifive_clint0_interrupt_lines>
20402726:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040272a:	fe442583          	lw	a1,-28(s0)
2040272e:	fcc42503          	lw	a0,-52(s0)
20402732:	3b2d                	jal	2040246c <__metal_driver_sifive_clint0_interrupt_parents>
20402734:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402738:	fdc42703          	lw	a4,-36(s0)
2040273c:	fe842783          	lw	a5,-24(s0)
20402740:	00f71863          	bne	a4,a5,20402750 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402744:	fc842703          	lw	a4,-56(s0)
20402748:	fd442783          	lw	a5,-44(s0)
2040274c:	02f70063          	beq	a4,a5,2040276c <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402750:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402754:	fe442783          	lw	a5,-28(s0)
20402758:	0785                	addi	a5,a5,1
2040275a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
2040275e:	fe442703          	lw	a4,-28(s0)
20402762:	fd842783          	lw	a5,-40(s0)
20402766:	faf74be3          	blt	a4,a5,2040271c <__metal_driver_riscv_clint0_register+0x56>
2040276a:	a011                	j	2040276e <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
2040276c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
2040276e:	fe842783          	lw	a5,-24(s0)
20402772:	c385                	beqz	a5,20402792 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402774:	fe842783          	lw	a5,-24(s0)
20402778:	439c                	lw	a5,0(a5)
2040277a:	4fdc                	lw	a5,28(a5)
2040277c:	fc042683          	lw	a3,-64(s0)
20402780:	fc442603          	lw	a2,-60(s0)
20402784:	fc842583          	lw	a1,-56(s0)
20402788:	fe842503          	lw	a0,-24(s0)
2040278c:	9782                	jalr	a5
2040278e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402792:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402796:	853e                	mv	a0,a5
20402798:	50f2                	lw	ra,60(sp)
2040279a:	5462                	lw	s0,56(sp)
2040279c:	6121                	addi	sp,sp,64
2040279e:	8082                	ret

204027a0 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
204027a0:	7179                	addi	sp,sp,-48
204027a2:	d622                	sw	s0,44(sp)
204027a4:	1800                	addi	s0,sp,48
204027a6:	fca42e23          	sw	a0,-36(s0)
204027aa:	fcb42c23          	sw	a1,-40(s0)
204027ae:	fcc42a23          	sw	a2,-44(s0)
204027b2:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
204027b6:	57fd                	li	a5,-1
204027b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
204027bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
204027c0:	853e                	mv	a0,a5
204027c2:	5432                	lw	s0,44(sp)
204027c4:	6145                	addi	sp,sp,48
204027c6:	8082                	ret

204027c8 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
204027c8:	1101                	addi	sp,sp,-32
204027ca:	ce06                	sw	ra,28(sp)
204027cc:	cc22                	sw	s0,24(sp)
204027ce:	1000                	addi	s0,sp,32
204027d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
204027d4:	242010ef          	jal	ra,20403a16 <__metal_controller_interrupt_vector_mode>
204027d8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
204027da:	853e                	mv	a0,a5
204027dc:	40f2                	lw	ra,28(sp)
204027de:	4462                	lw	s0,24(sp)
204027e0:	6105                	addi	sp,sp,32
204027e2:	8082                	ret

204027e4 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
204027e4:	7179                	addi	sp,sp,-48
204027e6:	d606                	sw	ra,44(sp)
204027e8:	d422                	sw	s0,40(sp)
204027ea:	1800                	addi	s0,sp,48
204027ec:	fca42e23          	sw	a0,-36(s0)
204027f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
204027f4:	57fd                	li	a5,-1
204027f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
204027fa:	3539                	jal	20402608 <_get_cpu_intc>
204027fc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402800:	fe842783          	lw	a5,-24(s0)
20402804:	c395                	beqz	a5,20402828 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402806:	fd842703          	lw	a4,-40(s0)
2040280a:	4785                	li	a5,1
2040280c:	00e7ef63          	bltu	a5,a4,2040282a <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402810:	fe842783          	lw	a5,-24(s0)
20402814:	439c                	lw	a5,0(a5)
20402816:	43dc                	lw	a5,4(a5)
20402818:	fd842583          	lw	a1,-40(s0)
2040281c:	fe842503          	lw	a0,-24(s0)
20402820:	9782                	jalr	a5
20402822:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402826:	a011                	j	2040282a <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402828:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
2040282a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
2040282e:	853e                	mv	a0,a5
20402830:	50b2                	lw	ra,44(sp)
20402832:	5422                	lw	s0,40(sp)
20402834:	6145                	addi	sp,sp,48
20402836:	8082                	ret

20402838 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402838:	7139                	addi	sp,sp,-64
2040283a:	de06                	sw	ra,60(sp)
2040283c:	dc22                	sw	s0,56(sp)
2040283e:	0080                	addi	s0,sp,64
20402840:	fca42623          	sw	a0,-52(s0)
20402844:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402848:	57fd                	li	a5,-1
2040284a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
2040284e:	fc842783          	lw	a5,-56(s0)
20402852:	c7c9                	beqz	a5,204028dc <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402854:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402858:	3b45                	jal	20402608 <_get_cpu_intc>
2040285a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040285e:	fcc42503          	lw	a0,-52(s0)
20402862:	36dd                	jal	20402448 <__metal_driver_sifive_clint0_num_interrupts>
20402864:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402868:	fe042223          	sw	zero,-28(s0)
2040286c:	a091                	j	204028b0 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040286e:	fe442583          	lw	a1,-28(s0)
20402872:	fcc42503          	lw	a0,-52(s0)
20402876:	390d                	jal	204024a8 <__metal_driver_sifive_clint0_interrupt_lines>
20402878:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040287c:	fe442583          	lw	a1,-28(s0)
20402880:	fcc42503          	lw	a0,-52(s0)
20402884:	36e5                	jal	2040246c <__metal_driver_sifive_clint0_interrupt_parents>
20402886:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
2040288a:	fe042703          	lw	a4,-32(s0)
2040288e:	fe842783          	lw	a5,-24(s0)
20402892:	00f71863          	bne	a4,a5,204028a2 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402896:	fc842703          	lw	a4,-56(s0)
2040289a:	fd842783          	lw	a5,-40(s0)
2040289e:	02f70063          	beq	a4,a5,204028be <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
204028a2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204028a6:	fe442783          	lw	a5,-28(s0)
204028aa:	0785                	addi	a5,a5,1
204028ac:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
204028b0:	fe442703          	lw	a4,-28(s0)
204028b4:	fdc42783          	lw	a5,-36(s0)
204028b8:	faf74be3          	blt	a4,a5,2040286e <__metal_driver_riscv_clint0_enable+0x36>
204028bc:	a011                	j	204028c0 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
204028be:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204028c0:	fe842783          	lw	a5,-24(s0)
204028c4:	cf81                	beqz	a5,204028dc <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
204028c6:	fe842783          	lw	a5,-24(s0)
204028ca:	439c                	lw	a5,0(a5)
204028cc:	53dc                	lw	a5,36(a5)
204028ce:	fc842583          	lw	a1,-56(s0)
204028d2:	fe842503          	lw	a0,-24(s0)
204028d6:	9782                	jalr	a5
204028d8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
204028dc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
204028e0:	853e                	mv	a0,a5
204028e2:	50f2                	lw	ra,60(sp)
204028e4:	5462                	lw	s0,56(sp)
204028e6:	6121                	addi	sp,sp,64
204028e8:	8082                	ret

204028ea <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
204028ea:	7139                	addi	sp,sp,-64
204028ec:	de06                	sw	ra,60(sp)
204028ee:	dc22                	sw	s0,56(sp)
204028f0:	0080                	addi	s0,sp,64
204028f2:	fca42623          	sw	a0,-52(s0)
204028f6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
204028fa:	57fd                	li	a5,-1
204028fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402900:	fc842783          	lw	a5,-56(s0)
20402904:	c7d9                	beqz	a5,20402992 <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402906:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040290a:	39fd                	jal	20402608 <_get_cpu_intc>
2040290c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402910:	fcc42503          	lw	a0,-52(s0)
20402914:	b35ff0ef          	jal	ra,20402448 <__metal_driver_sifive_clint0_num_interrupts>
20402918:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
2040291c:	fe042223          	sw	zero,-28(s0)
20402920:	a099                	j	20402966 <__metal_driver_riscv_clint0_disable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402922:	fe442583          	lw	a1,-28(s0)
20402926:	fcc42503          	lw	a0,-52(s0)
2040292a:	3ebd                	jal	204024a8 <__metal_driver_sifive_clint0_interrupt_lines>
2040292c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402930:	fe442583          	lw	a1,-28(s0)
20402934:	fcc42503          	lw	a0,-52(s0)
20402938:	b35ff0ef          	jal	ra,2040246c <__metal_driver_sifive_clint0_interrupt_parents>
2040293c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
20402940:	fe042703          	lw	a4,-32(s0)
20402944:	fe842783          	lw	a5,-24(s0)
20402948:	00f71863          	bne	a4,a5,20402958 <__metal_driver_riscv_clint0_disable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
2040294c:	fc842703          	lw	a4,-56(s0)
20402950:	fd842783          	lw	a5,-40(s0)
20402954:	02f70063          	beq	a4,a5,20402974 <__metal_driver_riscv_clint0_disable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402958:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040295c:	fe442783          	lw	a5,-28(s0)
20402960:	0785                	addi	a5,a5,1
20402962:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402966:	fe442703          	lw	a4,-28(s0)
2040296a:	fdc42783          	lw	a5,-36(s0)
2040296e:	faf74ae3          	blt	a4,a5,20402922 <__metal_driver_riscv_clint0_disable+0x38>
20402972:	a011                	j	20402976 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402974:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402976:	fe842783          	lw	a5,-24(s0)
2040297a:	cf81                	beqz	a5,20402992 <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
2040297c:	fe842783          	lw	a5,-24(s0)
20402980:	439c                	lw	a5,0(a5)
20402982:	579c                	lw	a5,40(a5)
20402984:	fc842583          	lw	a1,-56(s0)
20402988:	fe842503          	lw	a0,-24(s0)
2040298c:	9782                	jalr	a5
2040298e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402992:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402996:	853e                	mv	a0,a5
20402998:	50f2                	lw	ra,60(sp)
2040299a:	5462                	lw	s0,56(sp)
2040299c:	6121                	addi	sp,sp,64
2040299e:	8082                	ret

204029a0 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204029a0:	7179                	addi	sp,sp,-48
204029a2:	d606                	sw	ra,44(sp)
204029a4:	d422                	sw	s0,40(sp)
204029a6:	1800                	addi	s0,sp,48
204029a8:	fca42e23          	sw	a0,-36(s0)
204029ac:	fcb42c23          	sw	a1,-40(s0)
204029b0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204029b4:	57fd                	li	a5,-1
204029b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204029ba:	fdc42783          	lw	a5,-36(s0)
204029be:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204029c2:	fdc42503          	lw	a0,-36(s0)
204029c6:	a5dff0ef          	jal	ra,20402422 <__metal_driver_sifive_clint0_control_base>
204029ca:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204029ce:	fd842703          	lw	a4,-40(s0)
204029d2:	4789                	li	a5,2
204029d4:	04f70963          	beq	a4,a5,20402a26 <__metal_driver_riscv_clint0_command_request+0x86>
204029d8:	fd842703          	lw	a4,-40(s0)
204029dc:	4789                	li	a5,2
204029de:	00e7c863          	blt	a5,a4,204029ee <__metal_driver_riscv_clint0_command_request+0x4e>
204029e2:	fd842703          	lw	a4,-40(s0)
204029e6:	4785                	li	a5,1
204029e8:	00f70e63          	beq	a4,a5,20402a04 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204029ec:	a8f1                	j	20402ac8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204029ee:	fd842703          	lw	a4,-40(s0)
204029f2:	478d                	li	a5,3
204029f4:	04f70d63          	beq	a4,a5,20402a4e <__metal_driver_riscv_clint0_command_request+0xae>
204029f8:	fd842703          	lw	a4,-40(s0)
204029fc:	4791                	li	a5,4
204029fe:	08f70963          	beq	a4,a5,20402a90 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402a02:	a0d9                	j	20402ac8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402a04:	fd442783          	lw	a5,-44(s0)
20402a08:	cbcd                	beqz	a5,20402aba <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402a0a:	fe842503          	lw	a0,-24(s0)
20402a0e:	acbff0ef          	jal	ra,204024d8 <__metal_clint0_mtime_get>
20402a12:	87aa                	mv	a5,a0
20402a14:	882e                	mv	a6,a1
20402a16:	fd442703          	lw	a4,-44(s0)
20402a1a:	c31c                	sw	a5,0(a4)
20402a1c:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402a20:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402a24:	a859                	j	20402aba <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402a26:	fd442783          	lw	a5,-44(s0)
20402a2a:	cbd1                	beqz	a5,20402abe <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402a2c:	fd442783          	lw	a5,-44(s0)
20402a30:	439c                	lw	a5,0(a5)
20402a32:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402a36:	fe042783          	lw	a5,-32(s0)
20402a3a:	078a                	slli	a5,a5,0x2
20402a3c:	873e                	mv	a4,a5
20402a3e:	fe442783          	lw	a5,-28(s0)
20402a42:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402a44:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402a48:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402a4c:	a88d                	j	20402abe <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402a4e:	fd442783          	lw	a5,-44(s0)
20402a52:	cba5                	beqz	a5,20402ac2 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402a54:	fd442783          	lw	a5,-44(s0)
20402a58:	439c                	lw	a5,0(a5)
20402a5a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402a5e:	fe042783          	lw	a5,-32(s0)
20402a62:	078a                	slli	a5,a5,0x2
20402a64:	873e                	mv	a4,a5
20402a66:	fe442783          	lw	a5,-28(s0)
20402a6a:	97ba                	add	a5,a5,a4
20402a6c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402a6e:	4785                	li	a5,1
20402a70:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402a72:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402a76:	fe042783          	lw	a5,-32(s0)
20402a7a:	078a                	slli	a5,a5,0x2
20402a7c:	873e                	mv	a4,a5
20402a7e:	fe442783          	lw	a5,-28(s0)
20402a82:	97ba                	add	a5,a5,a4
20402a84:	439c                	lw	a5,0(a5)
20402a86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402a8a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402a8e:	a815                	j	20402ac2 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402a90:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402a94:	fd442783          	lw	a5,-44(s0)
20402a98:	c79d                	beqz	a5,20402ac6 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402a9a:	fd442783          	lw	a5,-44(s0)
20402a9e:	439c                	lw	a5,0(a5)
20402aa0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402aa4:	fe042783          	lw	a5,-32(s0)
20402aa8:	078a                	slli	a5,a5,0x2
20402aaa:	873e                	mv	a4,a5
20402aac:	fe442783          	lw	a5,-28(s0)
20402ab0:	97ba                	add	a5,a5,a4
20402ab2:	439c                	lw	a5,0(a5)
20402ab4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402ab8:	a039                	j	20402ac6 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402aba:	0001                	nop
20402abc:	a031                	j	20402ac8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402abe:	0001                	nop
20402ac0:	a021                	j	20402ac8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402ac2:	0001                	nop
20402ac4:	a011                	j	20402ac8 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402ac6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402ac8:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402acc:	853e                	mv	a0,a5
20402ace:	50b2                	lw	ra,44(sp)
20402ad0:	5422                	lw	s0,40(sp)
20402ad2:	6145                	addi	sp,sp,48
20402ad4:	8082                	ret

20402ad6 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402ad6:	7179                	addi	sp,sp,-48
20402ad8:	d606                	sw	ra,44(sp)
20402ada:	d422                	sw	s0,40(sp)
20402adc:	1800                	addi	s0,sp,48
20402ade:	fca42e23          	sw	a0,-36(s0)
20402ae2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402ae6:	52b020ef          	jal	ra,20405810 <metal_cpu_get_current_hartid>
20402aea:	87aa                	mv	a5,a0
20402aec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402af0:	fec40793          	addi	a5,s0,-20
20402af4:	863e                	mv	a2,a5
20402af6:	4589                	li	a1,2
20402af8:	fdc42503          	lw	a0,-36(s0)
20402afc:	3555                	jal	204029a0 <__metal_driver_riscv_clint0_command_request>
20402afe:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402b00:	853e                	mv	a0,a5
20402b02:	50b2                	lw	ra,44(sp)
20402b04:	5422                	lw	s0,40(sp)
20402b06:	6145                	addi	sp,sp,48
20402b08:	8082                	ret

20402b0a <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402b0a:	7179                	addi	sp,sp,-48
20402b0c:	d606                	sw	ra,44(sp)
20402b0e:	d422                	sw	s0,40(sp)
20402b10:	1800                	addi	s0,sp,48
20402b12:	fca42e23          	sw	a0,-36(s0)
20402b16:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402b1a:	4f7020ef          	jal	ra,20405810 <metal_cpu_get_current_hartid>
20402b1e:	87aa                	mv	a5,a0
20402b20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402b24:	fec40793          	addi	a5,s0,-20
20402b28:	863e                	mv	a2,a5
20402b2a:	458d                	li	a1,3
20402b2c:	fdc42503          	lw	a0,-36(s0)
20402b30:	3d85                	jal	204029a0 <__metal_driver_riscv_clint0_command_request>
20402b32:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402b34:	853e                	mv	a0,a5
20402b36:	50b2                	lw	ra,44(sp)
20402b38:	5422                	lw	s0,40(sp)
20402b3a:	6145                	addi	sp,sp,48
20402b3c:	8082                	ret

20402b3e <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402b3e:	1101                	addi	sp,sp,-32
20402b40:	ce22                	sw	s0,28(sp)
20402b42:	1000                	addi	s0,sp,32
20402b44:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402b48:	fec42703          	lw	a4,-20(s0)
20402b4c:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402b50:	00f71463          	bne	a4,a5,20402b58 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402b54:	4781                	li	a5,0
20402b56:	a011                	j	20402b5a <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402b58:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402b5a:	853e                	mv	a0,a5
20402b5c:	4472                	lw	s0,28(sp)
20402b5e:	6105                	addi	sp,sp,32
20402b60:	8082                	ret

20402b62 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402b62:	1101                	addi	sp,sp,-32
20402b64:	ce22                	sw	s0,28(sp)
20402b66:	1000                	addi	s0,sp,32
20402b68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402b6c:	fec42703          	lw	a4,-20(s0)
20402b70:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402b74:	00f71763          	bne	a4,a5,20402b82 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20402b78:	000f47b7          	lui	a5,0xf4
20402b7c:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402b80:	a011                	j	20402b84 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402b82:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20402b84:	853e                	mv	a0,a5
20402b86:	4472                	lw	s0,28(sp)
20402b88:	6105                	addi	sp,sp,32
20402b8a:	8082                	ret

20402b8c <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402b8c:	1101                	addi	sp,sp,-32
20402b8e:	ce22                	sw	s0,28(sp)
20402b90:	1000                	addi	s0,sp,32
20402b92:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402b96:	fec42703          	lw	a4,-20(s0)
20402b9a:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402b9e:	00f71763          	bne	a4,a5,20402bac <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402ba2:	800017b7          	lui	a5,0x80001
20402ba6:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20402baa:	a011                	j	20402bae <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402bac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
20402bae:	853e                	mv	a0,a5
20402bb0:	4472                	lw	s0,28(sp)
20402bb2:	6105                	addi	sp,sp,32
20402bb4:	8082                	ret

20402bb6 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402bb6:	1101                	addi	sp,sp,-32
20402bb8:	ce22                	sw	s0,28(sp)
20402bba:	1000                	addi	s0,sp,32
20402bbc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402bc0:	fec42783          	lw	a5,-20(s0)
20402bc4:	00f04a63          	bgtz	a5,20402bd8 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402bc8:	fec42703          	lw	a4,-20(s0)
20402bcc:	070a                	slli	a4,a4,0x2
20402bce:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402bd2:	97ba                	add	a5,a5,a4
20402bd4:	439c                	lw	a5,0(a5)
20402bd6:	a011                	j	20402bda <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402bd8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402bda:	853e                	mv	a0,a5
20402bdc:	4472                	lw	s0,28(sp)
20402bde:	6105                	addi	sp,sp,32
20402be0:	8082                	ret

20402be2 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402be2:	1101                	addi	sp,sp,-32
20402be4:	ce22                	sw	s0,28(sp)
20402be6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402be8:	f14027f3          	csrr	a5,mhartid
20402bec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402bf0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402bf4:	853e                	mv	a0,a5
20402bf6:	4472                	lw	s0,28(sp)
20402bf8:	6105                	addi	sp,sp,32
20402bfa:	8082                	ret

20402bfc <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402bfc:	1101                	addi	sp,sp,-32
20402bfe:	ce22                	sw	s0,28(sp)
20402c00:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402c02:	47a1                	li	a5,8
20402c04:	3007a7f3          	csrrs	a5,mstatus,a5
20402c08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402c0c:	0001                	nop
20402c0e:	4472                	lw	s0,28(sp)
20402c10:	6105                	addi	sp,sp,32
20402c12:	8082                	ret

20402c14 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402c14:	1101                	addi	sp,sp,-32
20402c16:	ce22                	sw	s0,28(sp)
20402c18:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402c1a:	47a1                	li	a5,8
20402c1c:	3007b7f3          	csrrc	a5,mstatus,a5
20402c20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402c24:	0001                	nop
20402c26:	4472                	lw	s0,28(sp)
20402c28:	6105                	addi	sp,sp,32
20402c2a:	8082                	ret

20402c2c <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20402c2c:	1101                	addi	sp,sp,-32
20402c2e:	ce22                	sw	s0,28(sp)
20402c30:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402c32:	47a1                	li	a5,8
20402c34:	3047a7f3          	csrrs	a5,mie,a5
20402c38:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20402c3c:	0001                	nop
20402c3e:	4472                	lw	s0,28(sp)
20402c40:	6105                	addi	sp,sp,32
20402c42:	8082                	ret

20402c44 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402c44:	1101                	addi	sp,sp,-32
20402c46:	ce22                	sw	s0,28(sp)
20402c48:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402c4a:	47a1                	li	a5,8
20402c4c:	3047b7f3          	csrrc	a5,mie,a5
20402c50:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402c54:	0001                	nop
20402c56:	4472                	lw	s0,28(sp)
20402c58:	6105                	addi	sp,sp,32
20402c5a:	8082                	ret

20402c5c <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402c5c:	1101                	addi	sp,sp,-32
20402c5e:	ce22                	sw	s0,28(sp)
20402c60:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402c62:	08000793          	li	a5,128
20402c66:	3047a7f3          	csrrs	a5,mie,a5
20402c6a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402c6e:	0001                	nop
20402c70:	4472                	lw	s0,28(sp)
20402c72:	6105                	addi	sp,sp,32
20402c74:	8082                	ret

20402c76 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402c76:	1101                	addi	sp,sp,-32
20402c78:	ce22                	sw	s0,28(sp)
20402c7a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402c7c:	08000793          	li	a5,128
20402c80:	3047b7f3          	csrrc	a5,mie,a5
20402c84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402c88:	0001                	nop
20402c8a:	4472                	lw	s0,28(sp)
20402c8c:	6105                	addi	sp,sp,32
20402c8e:	8082                	ret

20402c90 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402c90:	1101                	addi	sp,sp,-32
20402c92:	ce22                	sw	s0,28(sp)
20402c94:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402c96:	6785                	lui	a5,0x1
20402c98:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402c9c:	3047a7f3          	csrrs	a5,mie,a5
20402ca0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402ca4:	0001                	nop
20402ca6:	4472                	lw	s0,28(sp)
20402ca8:	6105                	addi	sp,sp,32
20402caa:	8082                	ret

20402cac <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402cac:	1101                	addi	sp,sp,-32
20402cae:	ce22                	sw	s0,28(sp)
20402cb0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402cb2:	6785                	lui	a5,0x1
20402cb4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402cb8:	3047b7f3          	csrrc	a5,mie,a5
20402cbc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402cc0:	0001                	nop
20402cc2:	4472                	lw	s0,28(sp)
20402cc4:	6105                	addi	sp,sp,32
20402cc6:	8082                	ret

20402cc8 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402cc8:	7179                	addi	sp,sp,-48
20402cca:	d622                	sw	s0,44(sp)
20402ccc:	1800                	addi	s0,sp,48
20402cce:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402cd2:	fdc42783          	lw	a5,-36(s0)
20402cd6:	4705                	li	a4,1
20402cd8:	00f717b3          	sll	a5,a4,a5
20402cdc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402ce0:	fec42783          	lw	a5,-20(s0)
20402ce4:	3047a7f3          	csrrs	a5,mie,a5
20402ce8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402cec:	0001                	nop
20402cee:	5432                	lw	s0,44(sp)
20402cf0:	6145                	addi	sp,sp,48
20402cf2:	8082                	ret

20402cf4 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402cf4:	7179                	addi	sp,sp,-48
20402cf6:	d622                	sw	s0,44(sp)
20402cf8:	1800                	addi	s0,sp,48
20402cfa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402cfe:	fdc42783          	lw	a5,-36(s0)
20402d02:	4705                	li	a4,1
20402d04:	00f717b3          	sll	a5,a4,a5
20402d08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402d0c:	fec42783          	lw	a5,-20(s0)
20402d10:	3047b7f3          	csrrc	a5,mie,a5
20402d14:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402d18:	0001                	nop
20402d1a:	5432                	lw	s0,44(sp)
20402d1c:	6145                	addi	sp,sp,48
20402d1e:	8082                	ret

20402d20 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402d20:	1101                	addi	sp,sp,-32
20402d22:	ce06                	sw	ra,28(sp)
20402d24:	cc22                	sw	s0,24(sp)
20402d26:	1000                	addi	s0,sp,32
20402d28:	fea42623          	sw	a0,-20(s0)
20402d2c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402d30:	06400513          	li	a0,100
20402d34:	2f7020ef          	jal	ra,2040582a <metal_shutdown>

20402d38 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402d38:	1101                	addi	sp,sp,-32
20402d3a:	ce06                	sw	ra,28(sp)
20402d3c:	cc22                	sw	s0,24(sp)
20402d3e:	1000                	addi	s0,sp,32
20402d40:	fea42623          	sw	a0,-20(s0)
20402d44:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402d48:	0c800513          	li	a0,200
20402d4c:	2df020ef          	jal	ra,2040582a <metal_shutdown>

20402d50 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402d50:	715d                	addi	sp,sp,-80
20402d52:	c686                	sw	ra,76(sp)
20402d54:	c496                	sw	t0,72(sp)
20402d56:	c29a                	sw	t1,68(sp)
20402d58:	c09e                	sw	t2,64(sp)
20402d5a:	de22                	sw	s0,60(sp)
20402d5c:	dc2a                	sw	a0,56(sp)
20402d5e:	da2e                	sw	a1,52(sp)
20402d60:	d832                	sw	a2,48(sp)
20402d62:	d636                	sw	a3,44(sp)
20402d64:	d43a                	sw	a4,40(sp)
20402d66:	d23e                	sw	a5,36(sp)
20402d68:	d042                	sw	a6,32(sp)
20402d6a:	ce46                	sw	a7,28(sp)
20402d6c:	cc72                	sw	t3,24(sp)
20402d6e:	ca76                	sw	t4,20(sp)
20402d70:	c87a                	sw	t5,16(sp)
20402d72:	c67e                	sw	t6,12(sp)
20402d74:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402d76:	12c00513          	li	a0,300
20402d7a:	2b1020ef          	jal	ra,2040582a <metal_shutdown>

20402d7e <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402d7e:	711d                	addi	sp,sp,-96
20402d80:	ce86                	sw	ra,92(sp)
20402d82:	cc96                	sw	t0,88(sp)
20402d84:	ca9a                	sw	t1,84(sp)
20402d86:	c89e                	sw	t2,80(sp)
20402d88:	c6a2                	sw	s0,76(sp)
20402d8a:	c4aa                	sw	a0,72(sp)
20402d8c:	c2ae                	sw	a1,68(sp)
20402d8e:	c0b2                	sw	a2,64(sp)
20402d90:	de36                	sw	a3,60(sp)
20402d92:	dc3a                	sw	a4,56(sp)
20402d94:	da3e                	sw	a5,52(sp)
20402d96:	d842                	sw	a6,48(sp)
20402d98:	d646                	sw	a7,44(sp)
20402d9a:	d472                	sw	t3,40(sp)
20402d9c:	d276                	sw	t4,36(sp)
20402d9e:	d07a                	sw	t5,32(sp)
20402da0:	ce7e                	sw	t6,28(sp)
20402da2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402da4:	3d3d                	jal	20402be2 <__metal_myhart_id>
20402da6:	872a                	mv	a4,a0
20402da8:	070a                	slli	a4,a4,0x2
20402daa:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402dae:	97ba                	add	a5,a5,a4
20402db0:	439c                	lw	a5,0(a5)
20402db2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402db6:	fac42783          	lw	a5,-84(s0)
20402dba:	c785                	beqz	a5,20402de2 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dbc:	fac42503          	lw	a0,-84(s0)
20402dc0:	33f1                	jal	20402b8c <__metal_driver_cpu_interrupt_controller>
20402dc2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402dc6:	fa842783          	lw	a5,-88(s0)
20402dca:	0e07a783          	lw	a5,224(a5)
20402dce:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402dd2:	fa842783          	lw	a5,-88(s0)
20402dd6:	0d87a783          	lw	a5,216(a5)
20402dda:	fa442583          	lw	a1,-92(s0)
20402dde:	450d                	li	a0,3
20402de0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402de2:	0001                	nop
20402de4:	40f6                	lw	ra,92(sp)
20402de6:	42e6                	lw	t0,88(sp)
20402de8:	4356                	lw	t1,84(sp)
20402dea:	43c6                	lw	t2,80(sp)
20402dec:	4436                	lw	s0,76(sp)
20402dee:	4526                	lw	a0,72(sp)
20402df0:	4596                	lw	a1,68(sp)
20402df2:	4606                	lw	a2,64(sp)
20402df4:	56f2                	lw	a3,60(sp)
20402df6:	5762                	lw	a4,56(sp)
20402df8:	57d2                	lw	a5,52(sp)
20402dfa:	5842                	lw	a6,48(sp)
20402dfc:	58b2                	lw	a7,44(sp)
20402dfe:	5e22                	lw	t3,40(sp)
20402e00:	5e92                	lw	t4,36(sp)
20402e02:	5f02                	lw	t5,32(sp)
20402e04:	4ff2                	lw	t6,28(sp)
20402e06:	6125                	addi	sp,sp,96
20402e08:	30200073          	mret

20402e0c <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402e0c:	7179                	addi	sp,sp,-48
20402e0e:	d606                	sw	ra,44(sp)
20402e10:	d422                	sw	s0,40(sp)
20402e12:	1800                	addi	s0,sp,48
20402e14:	fca42e23          	sw	a0,-36(s0)
20402e18:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e1c:	33d9                	jal	20402be2 <__metal_myhart_id>
20402e1e:	872a                	mv	a4,a0
20402e20:	070a                	slli	a4,a4,0x2
20402e22:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402e26:	97ba                	add	a5,a5,a4
20402e28:	439c                	lw	a5,0(a5)
20402e2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402e2e:	342027f3          	csrr	a5,mcause
20402e32:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402e36:	fec42783          	lw	a5,-20(s0)
20402e3a:	c795                	beqz	a5,20402e66 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e3c:	fec42503          	lw	a0,-20(s0)
20402e40:	33b1                	jal	20402b8c <__metal_driver_cpu_interrupt_controller>
20402e42:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402e46:	fe842783          	lw	a5,-24(s0)
20402e4a:	3ff7f793          	andi	a5,a5,1023
20402e4e:	fe442703          	lw	a4,-28(s0)
20402e52:	0e078793          	addi	a5,a5,224
20402e56:	078a                	slli	a5,a5,0x2
20402e58:	97ba                	add	a5,a5,a4
20402e5a:	479c                	lw	a5,8(a5)
20402e5c:	fdc42583          	lw	a1,-36(s0)
20402e60:	fec42503          	lw	a0,-20(s0)
20402e64:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402e66:	0001                	nop
20402e68:	50b2                	lw	ra,44(sp)
20402e6a:	5422                	lw	s0,40(sp)
20402e6c:	6145                	addi	sp,sp,48
20402e6e:	8082                	ret

20402e70 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402e70:	711d                	addi	sp,sp,-96
20402e72:	ce86                	sw	ra,92(sp)
20402e74:	cc96                	sw	t0,88(sp)
20402e76:	ca9a                	sw	t1,84(sp)
20402e78:	c89e                	sw	t2,80(sp)
20402e7a:	c6a2                	sw	s0,76(sp)
20402e7c:	c4aa                	sw	a0,72(sp)
20402e7e:	c2ae                	sw	a1,68(sp)
20402e80:	c0b2                	sw	a2,64(sp)
20402e82:	de36                	sw	a3,60(sp)
20402e84:	dc3a                	sw	a4,56(sp)
20402e86:	da3e                	sw	a5,52(sp)
20402e88:	d842                	sw	a6,48(sp)
20402e8a:	d646                	sw	a7,44(sp)
20402e8c:	d472                	sw	t3,40(sp)
20402e8e:	d276                	sw	t4,36(sp)
20402e90:	d07a                	sw	t5,32(sp)
20402e92:	ce7e                	sw	t6,28(sp)
20402e94:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e96:	33b1                	jal	20402be2 <__metal_myhart_id>
20402e98:	872a                	mv	a4,a0
20402e9a:	070a                	slli	a4,a4,0x2
20402e9c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ea0:	97ba                	add	a5,a5,a4
20402ea2:	439c                	lw	a5,0(a5)
20402ea4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402ea8:	fac42783          	lw	a5,-84(s0)
20402eac:	c785                	beqz	a5,20402ed4 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402eae:	fac42503          	lw	a0,-84(s0)
20402eb2:	39e9                	jal	20402b8c <__metal_driver_cpu_interrupt_controller>
20402eb4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402eb8:	fa842783          	lw	a5,-88(s0)
20402ebc:	1407a783          	lw	a5,320(a5)
20402ec0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402ec4:	fa842783          	lw	a5,-88(s0)
20402ec8:	1387a783          	lw	a5,312(a5)
20402ecc:	fa442583          	lw	a1,-92(s0)
20402ed0:	451d                	li	a0,7
20402ed2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402ed4:	0001                	nop
20402ed6:	40f6                	lw	ra,92(sp)
20402ed8:	42e6                	lw	t0,88(sp)
20402eda:	4356                	lw	t1,84(sp)
20402edc:	43c6                	lw	t2,80(sp)
20402ede:	4436                	lw	s0,76(sp)
20402ee0:	4526                	lw	a0,72(sp)
20402ee2:	4596                	lw	a1,68(sp)
20402ee4:	4606                	lw	a2,64(sp)
20402ee6:	56f2                	lw	a3,60(sp)
20402ee8:	5762                	lw	a4,56(sp)
20402eea:	57d2                	lw	a5,52(sp)
20402eec:	5842                	lw	a6,48(sp)
20402eee:	58b2                	lw	a7,44(sp)
20402ef0:	5e22                	lw	t3,40(sp)
20402ef2:	5e92                	lw	t4,36(sp)
20402ef4:	5f02                	lw	t5,32(sp)
20402ef6:	4ff2                	lw	t6,28(sp)
20402ef8:	6125                	addi	sp,sp,96
20402efa:	30200073          	mret

20402efe <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402efe:	7179                	addi	sp,sp,-48
20402f00:	d606                	sw	ra,44(sp)
20402f02:	d422                	sw	s0,40(sp)
20402f04:	1800                	addi	s0,sp,48
20402f06:	fca42e23          	sw	a0,-36(s0)
20402f0a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402f0e:	39d1                	jal	20402be2 <__metal_myhart_id>
20402f10:	87aa                	mv	a5,a0
20402f12:	853e                	mv	a0,a5
20402f14:	314d                	jal	20402bb6 <__metal_driver_cpu_get>
20402f16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402f1a:	fec42503          	lw	a0,-20(s0)
20402f1e:	152010ef          	jal	ra,20404070 <__metal_driver_cpu_mtime_get>
20402f22:	fea42023          	sw	a0,-32(s0)
20402f26:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402f2a:	fe042783          	lw	a5,-32(s0)
20402f2e:	fe442803          	lw	a6,-28(s0)
20402f32:	45a9                	li	a1,10
20402f34:	4601                	li	a2,0
20402f36:	00b786b3          	add	a3,a5,a1
20402f3a:	8536                	mv	a0,a3
20402f3c:	00f53533          	sltu	a0,a0,a5
20402f40:	00c80733          	add	a4,a6,a2
20402f44:	00e507b3          	add	a5,a0,a4
20402f48:	873e                	mv	a4,a5
20402f4a:	87b6                	mv	a5,a3
20402f4c:	883a                	mv	a6,a4
20402f4e:	85be                	mv	a1,a5
20402f50:	8642                	mv	a2,a6
20402f52:	fec42503          	lw	a0,-20(s0)
20402f56:	180010ef          	jal	ra,204040d6 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402f5a:	0001                	nop
20402f5c:	50b2                	lw	ra,44(sp)
20402f5e:	5422                	lw	s0,40(sp)
20402f60:	6145                	addi	sp,sp,48
20402f62:	8082                	ret
	...

20402f80 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402f80:	7119                	addi	sp,sp,-128
20402f82:	de86                	sw	ra,124(sp)
20402f84:	dc96                	sw	t0,120(sp)
20402f86:	da9a                	sw	t1,116(sp)
20402f88:	d89e                	sw	t2,112(sp)
20402f8a:	d6a2                	sw	s0,108(sp)
20402f8c:	d4aa                	sw	a0,104(sp)
20402f8e:	d2ae                	sw	a1,100(sp)
20402f90:	d0b2                	sw	a2,96(sp)
20402f92:	ceb6                	sw	a3,92(sp)
20402f94:	ccba                	sw	a4,88(sp)
20402f96:	cabe                	sw	a5,84(sp)
20402f98:	c8c2                	sw	a6,80(sp)
20402f9a:	c6c6                	sw	a7,76(sp)
20402f9c:	c4f2                	sw	t3,72(sp)
20402f9e:	c2f6                	sw	t4,68(sp)
20402fa0:	c0fa                	sw	t5,64(sp)
20402fa2:	de7e                	sw	t6,60(sp)
20402fa4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fa6:	c3dff0ef          	jal	ra,20402be2 <__metal_myhart_id>
20402faa:	872a                	mv	a4,a0
20402fac:	070a                	slli	a4,a4,0x2
20402fae:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402fb2:	97ba                	add	a5,a5,a4
20402fb4:	439c                	lw	a5,0(a5)
20402fb6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402fba:	342027f3          	csrr	a5,mcause
20402fbe:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402fc2:	341027f3          	csrr	a5,mepc
20402fc6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402fca:	343027f3          	csrr	a5,mtval
20402fce:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402fd2:	305027f3          	csrr	a5,mtvec
20402fd6:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402fda:	fac42783          	lw	a5,-84(s0)
20402fde:	c7e9                	beqz	a5,204030a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fe0:	fac42503          	lw	a0,-84(s0)
20402fe4:	ba9ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20402fe8:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402fec:	fa842783          	lw	a5,-88(s0)
20402ff0:	3ff7f793          	andi	a5,a5,1023
20402ff4:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402ff8:	fa842783          	lw	a5,-88(s0)
20402ffc:	0807d863          	bgez	a5,2040308c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403000:	f9442703          	lw	a4,-108(s0)
20403004:	47ad                	li	a5,11
20403006:	00e7d763          	bge	a5,a4,20403014 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
2040300a:	f9c42783          	lw	a5,-100(s0)
2040300e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20403012:	ef9d                	bnez	a5,20403050 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20403014:	f9842683          	lw	a3,-104(s0)
20403018:	f9442703          	lw	a4,-108(s0)
2040301c:	87ba                	mv	a5,a4
2040301e:	0786                	slli	a5,a5,0x1
20403020:	97ba                	add	a5,a5,a4
20403022:	078e                	slli	a5,a5,0x3
20403024:	97b6                	add	a5,a5,a3
20403026:	0987a783          	lw	a5,152(a5)
2040302a:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040302e:	f9842683          	lw	a3,-104(s0)
20403032:	f9442703          	lw	a4,-108(s0)
20403036:	87ba                	mv	a5,a4
20403038:	0786                	slli	a5,a5,0x1
2040303a:	97ba                	add	a5,a5,a4
2040303c:	078e                	slli	a5,a5,0x3
2040303e:	97b6                	add	a5,a5,a3
20403040:	0907a783          	lw	a5,144(a5)
20403044:	f8c42583          	lw	a1,-116(s0)
20403048:	f9442503          	lw	a0,-108(s0)
2040304c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040304e:	a8a9                	j	204030a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20403050:	f9c42783          	lw	a5,-100(s0)
20403054:	03f7f713          	andi	a4,a5,63
20403058:	4789                	li	a5,2
2040305a:	04f71763          	bne	a4,a5,204030a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040305e:	307027f3          	csrr	a5,mtvt
20403062:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403066:	f9842783          	lw	a5,-104(s0)
2040306a:	0dc7a783          	lw	a5,220(a5)
2040306e:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20403072:	f9042783          	lw	a5,-112(s0)
20403076:	439c                	lw	a5,0(a5)
20403078:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2040307c:	f8842783          	lw	a5,-120(s0)
20403080:	f8c42583          	lw	a1,-116(s0)
20403084:	f9442503          	lw	a0,-108(s0)
20403088:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
2040308a:	a839                	j	204030a8 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040308c:	f9842703          	lw	a4,-104(s0)
20403090:	f9442783          	lw	a5,-108(s0)
20403094:	0e078793          	addi	a5,a5,224
20403098:	078a                	slli	a5,a5,0x2
2040309a:	97ba                	add	a5,a5,a4
2040309c:	479c                	lw	a5,8(a5)
2040309e:	f9442583          	lw	a1,-108(s0)
204030a2:	fac42503          	lw	a0,-84(s0)
204030a6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204030a8:	50f6                	lw	ra,124(sp)
204030aa:	52e6                	lw	t0,120(sp)
204030ac:	5356                	lw	t1,116(sp)
204030ae:	53c6                	lw	t2,112(sp)
204030b0:	5436                	lw	s0,108(sp)
204030b2:	5526                	lw	a0,104(sp)
204030b4:	5596                	lw	a1,100(sp)
204030b6:	5606                	lw	a2,96(sp)
204030b8:	46f6                	lw	a3,92(sp)
204030ba:	4766                	lw	a4,88(sp)
204030bc:	47d6                	lw	a5,84(sp)
204030be:	4846                	lw	a6,80(sp)
204030c0:	48b6                	lw	a7,76(sp)
204030c2:	4e26                	lw	t3,72(sp)
204030c4:	4e96                	lw	t4,68(sp)
204030c6:	4f06                	lw	t5,64(sp)
204030c8:	5ff2                	lw	t6,60(sp)
204030ca:	6109                	addi	sp,sp,128
204030cc:	30200073          	mret
	...

204030f6 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204030f6:	711d                	addi	sp,sp,-96
204030f8:	ce86                	sw	ra,92(sp)
204030fa:	cc96                	sw	t0,88(sp)
204030fc:	ca9a                	sw	t1,84(sp)
204030fe:	c89e                	sw	t2,80(sp)
20403100:	c6a2                	sw	s0,76(sp)
20403102:	c4aa                	sw	a0,72(sp)
20403104:	c2ae                	sw	a1,68(sp)
20403106:	c0b2                	sw	a2,64(sp)
20403108:	de36                	sw	a3,60(sp)
2040310a:	dc3a                	sw	a4,56(sp)
2040310c:	da3e                	sw	a5,52(sp)
2040310e:	d842                	sw	a6,48(sp)
20403110:	d646                	sw	a7,44(sp)
20403112:	d472                	sw	t3,40(sp)
20403114:	d276                	sw	t4,36(sp)
20403116:	d07a                	sw	t5,32(sp)
20403118:	ce7e                	sw	t6,28(sp)
2040311a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040311c:	ac7ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
20403120:	872a                	mv	a4,a0
20403122:	070a                	slli	a4,a4,0x2
20403124:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403128:	97ba                	add	a5,a5,a4
2040312a:	439c                	lw	a5,0(a5)
2040312c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20403130:	fac42783          	lw	a5,-84(s0)
20403134:	c78d                	beqz	a5,2040315e <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403136:	fac42503          	lw	a0,-84(s0)
2040313a:	a53ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
2040313e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20403142:	fa842783          	lw	a5,-88(s0)
20403146:	2187a783          	lw	a5,536(a5)
2040314a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040314e:	fa842783          	lw	a5,-88(s0)
20403152:	2107a783          	lw	a5,528(a5)
20403156:	fa442583          	lw	a1,-92(s0)
2040315a:	4541                	li	a0,16
2040315c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040315e:	0001                	nop
20403160:	40f6                	lw	ra,92(sp)
20403162:	42e6                	lw	t0,88(sp)
20403164:	4356                	lw	t1,84(sp)
20403166:	43c6                	lw	t2,80(sp)
20403168:	4436                	lw	s0,76(sp)
2040316a:	4526                	lw	a0,72(sp)
2040316c:	4596                	lw	a1,68(sp)
2040316e:	4606                	lw	a2,64(sp)
20403170:	56f2                	lw	a3,60(sp)
20403172:	5762                	lw	a4,56(sp)
20403174:	57d2                	lw	a5,52(sp)
20403176:	5842                	lw	a6,48(sp)
20403178:	58b2                	lw	a7,44(sp)
2040317a:	5e22                	lw	t3,40(sp)
2040317c:	5e92                	lw	t4,36(sp)
2040317e:	5f02                	lw	t5,32(sp)
20403180:	4ff2                	lw	t6,28(sp)
20403182:	6125                	addi	sp,sp,96
20403184:	30200073          	mret

20403188 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20403188:	711d                	addi	sp,sp,-96
2040318a:	ce86                	sw	ra,92(sp)
2040318c:	cc96                	sw	t0,88(sp)
2040318e:	ca9a                	sw	t1,84(sp)
20403190:	c89e                	sw	t2,80(sp)
20403192:	c6a2                	sw	s0,76(sp)
20403194:	c4aa                	sw	a0,72(sp)
20403196:	c2ae                	sw	a1,68(sp)
20403198:	c0b2                	sw	a2,64(sp)
2040319a:	de36                	sw	a3,60(sp)
2040319c:	dc3a                	sw	a4,56(sp)
2040319e:	da3e                	sw	a5,52(sp)
204031a0:	d842                	sw	a6,48(sp)
204031a2:	d646                	sw	a7,44(sp)
204031a4:	d472                	sw	t3,40(sp)
204031a6:	d276                	sw	t4,36(sp)
204031a8:	d07a                	sw	t5,32(sp)
204031aa:	ce7e                	sw	t6,28(sp)
204031ac:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031ae:	a35ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204031b2:	872a                	mv	a4,a0
204031b4:	070a                	slli	a4,a4,0x2
204031b6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204031ba:	97ba                	add	a5,a5,a4
204031bc:	439c                	lw	a5,0(a5)
204031be:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204031c2:	fac42783          	lw	a5,-84(s0)
204031c6:	c78d                	beqz	a5,204031f0 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031c8:	fac42503          	lw	a0,-84(s0)
204031cc:	9c1ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204031d0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204031d4:	fa842783          	lw	a5,-88(s0)
204031d8:	2307a783          	lw	a5,560(a5)
204031dc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204031e0:	fa842783          	lw	a5,-88(s0)
204031e4:	2287a783          	lw	a5,552(a5)
204031e8:	fa442583          	lw	a1,-92(s0)
204031ec:	4545                	li	a0,17
204031ee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204031f0:	0001                	nop
204031f2:	40f6                	lw	ra,92(sp)
204031f4:	42e6                	lw	t0,88(sp)
204031f6:	4356                	lw	t1,84(sp)
204031f8:	43c6                	lw	t2,80(sp)
204031fa:	4436                	lw	s0,76(sp)
204031fc:	4526                	lw	a0,72(sp)
204031fe:	4596                	lw	a1,68(sp)
20403200:	4606                	lw	a2,64(sp)
20403202:	56f2                	lw	a3,60(sp)
20403204:	5762                	lw	a4,56(sp)
20403206:	57d2                	lw	a5,52(sp)
20403208:	5842                	lw	a6,48(sp)
2040320a:	58b2                	lw	a7,44(sp)
2040320c:	5e22                	lw	t3,40(sp)
2040320e:	5e92                	lw	t4,36(sp)
20403210:	5f02                	lw	t5,32(sp)
20403212:	4ff2                	lw	t6,28(sp)
20403214:	6125                	addi	sp,sp,96
20403216:	30200073          	mret

2040321a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
2040321a:	711d                	addi	sp,sp,-96
2040321c:	ce86                	sw	ra,92(sp)
2040321e:	cc96                	sw	t0,88(sp)
20403220:	ca9a                	sw	t1,84(sp)
20403222:	c89e                	sw	t2,80(sp)
20403224:	c6a2                	sw	s0,76(sp)
20403226:	c4aa                	sw	a0,72(sp)
20403228:	c2ae                	sw	a1,68(sp)
2040322a:	c0b2                	sw	a2,64(sp)
2040322c:	de36                	sw	a3,60(sp)
2040322e:	dc3a                	sw	a4,56(sp)
20403230:	da3e                	sw	a5,52(sp)
20403232:	d842                	sw	a6,48(sp)
20403234:	d646                	sw	a7,44(sp)
20403236:	d472                	sw	t3,40(sp)
20403238:	d276                	sw	t4,36(sp)
2040323a:	d07a                	sw	t5,32(sp)
2040323c:	ce7e                	sw	t6,28(sp)
2040323e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403240:	9a3ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
20403244:	872a                	mv	a4,a0
20403246:	070a                	slli	a4,a4,0x2
20403248:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040324c:	97ba                	add	a5,a5,a4
2040324e:	439c                	lw	a5,0(a5)
20403250:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20403254:	fac42783          	lw	a5,-84(s0)
20403258:	c78d                	beqz	a5,20403282 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040325a:	fac42503          	lw	a0,-84(s0)
2040325e:	92fff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20403262:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20403266:	fa842783          	lw	a5,-88(s0)
2040326a:	2487a783          	lw	a5,584(a5)
2040326e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20403272:	fa842783          	lw	a5,-88(s0)
20403276:	2407a783          	lw	a5,576(a5)
2040327a:	fa442583          	lw	a1,-92(s0)
2040327e:	4549                	li	a0,18
20403280:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403282:	0001                	nop
20403284:	40f6                	lw	ra,92(sp)
20403286:	42e6                	lw	t0,88(sp)
20403288:	4356                	lw	t1,84(sp)
2040328a:	43c6                	lw	t2,80(sp)
2040328c:	4436                	lw	s0,76(sp)
2040328e:	4526                	lw	a0,72(sp)
20403290:	4596                	lw	a1,68(sp)
20403292:	4606                	lw	a2,64(sp)
20403294:	56f2                	lw	a3,60(sp)
20403296:	5762                	lw	a4,56(sp)
20403298:	57d2                	lw	a5,52(sp)
2040329a:	5842                	lw	a6,48(sp)
2040329c:	58b2                	lw	a7,44(sp)
2040329e:	5e22                	lw	t3,40(sp)
204032a0:	5e92                	lw	t4,36(sp)
204032a2:	5f02                	lw	t5,32(sp)
204032a4:	4ff2                	lw	t6,28(sp)
204032a6:	6125                	addi	sp,sp,96
204032a8:	30200073          	mret

204032ac <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204032ac:	711d                	addi	sp,sp,-96
204032ae:	ce86                	sw	ra,92(sp)
204032b0:	cc96                	sw	t0,88(sp)
204032b2:	ca9a                	sw	t1,84(sp)
204032b4:	c89e                	sw	t2,80(sp)
204032b6:	c6a2                	sw	s0,76(sp)
204032b8:	c4aa                	sw	a0,72(sp)
204032ba:	c2ae                	sw	a1,68(sp)
204032bc:	c0b2                	sw	a2,64(sp)
204032be:	de36                	sw	a3,60(sp)
204032c0:	dc3a                	sw	a4,56(sp)
204032c2:	da3e                	sw	a5,52(sp)
204032c4:	d842                	sw	a6,48(sp)
204032c6:	d646                	sw	a7,44(sp)
204032c8:	d472                	sw	t3,40(sp)
204032ca:	d276                	sw	t4,36(sp)
204032cc:	d07a                	sw	t5,32(sp)
204032ce:	ce7e                	sw	t6,28(sp)
204032d0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032d2:	911ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204032d6:	872a                	mv	a4,a0
204032d8:	070a                	slli	a4,a4,0x2
204032da:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204032de:	97ba                	add	a5,a5,a4
204032e0:	439c                	lw	a5,0(a5)
204032e2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204032e6:	fac42783          	lw	a5,-84(s0)
204032ea:	c78d                	beqz	a5,20403314 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032ec:	fac42503          	lw	a0,-84(s0)
204032f0:	89dff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204032f4:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204032f8:	fa842783          	lw	a5,-88(s0)
204032fc:	2607a783          	lw	a5,608(a5)
20403300:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403304:	fa842783          	lw	a5,-88(s0)
20403308:	2587a783          	lw	a5,600(a5)
2040330c:	fa442583          	lw	a1,-92(s0)
20403310:	454d                	li	a0,19
20403312:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403314:	0001                	nop
20403316:	40f6                	lw	ra,92(sp)
20403318:	42e6                	lw	t0,88(sp)
2040331a:	4356                	lw	t1,84(sp)
2040331c:	43c6                	lw	t2,80(sp)
2040331e:	4436                	lw	s0,76(sp)
20403320:	4526                	lw	a0,72(sp)
20403322:	4596                	lw	a1,68(sp)
20403324:	4606                	lw	a2,64(sp)
20403326:	56f2                	lw	a3,60(sp)
20403328:	5762                	lw	a4,56(sp)
2040332a:	57d2                	lw	a5,52(sp)
2040332c:	5842                	lw	a6,48(sp)
2040332e:	58b2                	lw	a7,44(sp)
20403330:	5e22                	lw	t3,40(sp)
20403332:	5e92                	lw	t4,36(sp)
20403334:	5f02                	lw	t5,32(sp)
20403336:	4ff2                	lw	t6,28(sp)
20403338:	6125                	addi	sp,sp,96
2040333a:	30200073          	mret

2040333e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2040333e:	711d                	addi	sp,sp,-96
20403340:	ce86                	sw	ra,92(sp)
20403342:	cc96                	sw	t0,88(sp)
20403344:	ca9a                	sw	t1,84(sp)
20403346:	c89e                	sw	t2,80(sp)
20403348:	c6a2                	sw	s0,76(sp)
2040334a:	c4aa                	sw	a0,72(sp)
2040334c:	c2ae                	sw	a1,68(sp)
2040334e:	c0b2                	sw	a2,64(sp)
20403350:	de36                	sw	a3,60(sp)
20403352:	dc3a                	sw	a4,56(sp)
20403354:	da3e                	sw	a5,52(sp)
20403356:	d842                	sw	a6,48(sp)
20403358:	d646                	sw	a7,44(sp)
2040335a:	d472                	sw	t3,40(sp)
2040335c:	d276                	sw	t4,36(sp)
2040335e:	d07a                	sw	t5,32(sp)
20403360:	ce7e                	sw	t6,28(sp)
20403362:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403364:	87fff0ef          	jal	ra,20402be2 <__metal_myhart_id>
20403368:	872a                	mv	a4,a0
2040336a:	070a                	slli	a4,a4,0x2
2040336c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403370:	97ba                	add	a5,a5,a4
20403372:	439c                	lw	a5,0(a5)
20403374:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20403378:	fac42783          	lw	a5,-84(s0)
2040337c:	c78d                	beqz	a5,204033a6 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040337e:	fac42503          	lw	a0,-84(s0)
20403382:	80bff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20403386:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
2040338a:	fa842783          	lw	a5,-88(s0)
2040338e:	2787a783          	lw	a5,632(a5)
20403392:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403396:	fa842783          	lw	a5,-88(s0)
2040339a:	2707a783          	lw	a5,624(a5)
2040339e:	fa442583          	lw	a1,-92(s0)
204033a2:	4551                	li	a0,20
204033a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204033a6:	0001                	nop
204033a8:	40f6                	lw	ra,92(sp)
204033aa:	42e6                	lw	t0,88(sp)
204033ac:	4356                	lw	t1,84(sp)
204033ae:	43c6                	lw	t2,80(sp)
204033b0:	4436                	lw	s0,76(sp)
204033b2:	4526                	lw	a0,72(sp)
204033b4:	4596                	lw	a1,68(sp)
204033b6:	4606                	lw	a2,64(sp)
204033b8:	56f2                	lw	a3,60(sp)
204033ba:	5762                	lw	a4,56(sp)
204033bc:	57d2                	lw	a5,52(sp)
204033be:	5842                	lw	a6,48(sp)
204033c0:	58b2                	lw	a7,44(sp)
204033c2:	5e22                	lw	t3,40(sp)
204033c4:	5e92                	lw	t4,36(sp)
204033c6:	5f02                	lw	t5,32(sp)
204033c8:	4ff2                	lw	t6,28(sp)
204033ca:	6125                	addi	sp,sp,96
204033cc:	30200073          	mret

204033d0 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204033d0:	711d                	addi	sp,sp,-96
204033d2:	ce86                	sw	ra,92(sp)
204033d4:	cc96                	sw	t0,88(sp)
204033d6:	ca9a                	sw	t1,84(sp)
204033d8:	c89e                	sw	t2,80(sp)
204033da:	c6a2                	sw	s0,76(sp)
204033dc:	c4aa                	sw	a0,72(sp)
204033de:	c2ae                	sw	a1,68(sp)
204033e0:	c0b2                	sw	a2,64(sp)
204033e2:	de36                	sw	a3,60(sp)
204033e4:	dc3a                	sw	a4,56(sp)
204033e6:	da3e                	sw	a5,52(sp)
204033e8:	d842                	sw	a6,48(sp)
204033ea:	d646                	sw	a7,44(sp)
204033ec:	d472                	sw	t3,40(sp)
204033ee:	d276                	sw	t4,36(sp)
204033f0:	d07a                	sw	t5,32(sp)
204033f2:	ce7e                	sw	t6,28(sp)
204033f4:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033f6:	fecff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204033fa:	872a                	mv	a4,a0
204033fc:	070a                	slli	a4,a4,0x2
204033fe:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403402:	97ba                	add	a5,a5,a4
20403404:	439c                	lw	a5,0(a5)
20403406:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
2040340a:	fac42783          	lw	a5,-84(s0)
2040340e:	c78d                	beqz	a5,20403438 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403410:	fac42503          	lw	a0,-84(s0)
20403414:	f78ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20403418:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040341c:	fa842783          	lw	a5,-88(s0)
20403420:	2907a783          	lw	a5,656(a5)
20403424:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20403428:	fa842783          	lw	a5,-88(s0)
2040342c:	2887a783          	lw	a5,648(a5)
20403430:	fa442583          	lw	a1,-92(s0)
20403434:	4555                	li	a0,21
20403436:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20403438:	0001                	nop
2040343a:	40f6                	lw	ra,92(sp)
2040343c:	42e6                	lw	t0,88(sp)
2040343e:	4356                	lw	t1,84(sp)
20403440:	43c6                	lw	t2,80(sp)
20403442:	4436                	lw	s0,76(sp)
20403444:	4526                	lw	a0,72(sp)
20403446:	4596                	lw	a1,68(sp)
20403448:	4606                	lw	a2,64(sp)
2040344a:	56f2                	lw	a3,60(sp)
2040344c:	5762                	lw	a4,56(sp)
2040344e:	57d2                	lw	a5,52(sp)
20403450:	5842                	lw	a6,48(sp)
20403452:	58b2                	lw	a7,44(sp)
20403454:	5e22                	lw	t3,40(sp)
20403456:	5e92                	lw	t4,36(sp)
20403458:	5f02                	lw	t5,32(sp)
2040345a:	4ff2                	lw	t6,28(sp)
2040345c:	6125                	addi	sp,sp,96
2040345e:	30200073          	mret

20403462 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20403462:	711d                	addi	sp,sp,-96
20403464:	ce86                	sw	ra,92(sp)
20403466:	cc96                	sw	t0,88(sp)
20403468:	ca9a                	sw	t1,84(sp)
2040346a:	c89e                	sw	t2,80(sp)
2040346c:	c6a2                	sw	s0,76(sp)
2040346e:	c4aa                	sw	a0,72(sp)
20403470:	c2ae                	sw	a1,68(sp)
20403472:	c0b2                	sw	a2,64(sp)
20403474:	de36                	sw	a3,60(sp)
20403476:	dc3a                	sw	a4,56(sp)
20403478:	da3e                	sw	a5,52(sp)
2040347a:	d842                	sw	a6,48(sp)
2040347c:	d646                	sw	a7,44(sp)
2040347e:	d472                	sw	t3,40(sp)
20403480:	d276                	sw	t4,36(sp)
20403482:	d07a                	sw	t5,32(sp)
20403484:	ce7e                	sw	t6,28(sp)
20403486:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403488:	f5aff0ef          	jal	ra,20402be2 <__metal_myhart_id>
2040348c:	872a                	mv	a4,a0
2040348e:	070a                	slli	a4,a4,0x2
20403490:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403494:	97ba                	add	a5,a5,a4
20403496:	439c                	lw	a5,0(a5)
20403498:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040349c:	fac42783          	lw	a5,-84(s0)
204034a0:	c78d                	beqz	a5,204034ca <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034a2:	fac42503          	lw	a0,-84(s0)
204034a6:	ee6ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204034aa:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204034ae:	fa842783          	lw	a5,-88(s0)
204034b2:	2a87a783          	lw	a5,680(a5)
204034b6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204034ba:	fa842783          	lw	a5,-88(s0)
204034be:	2a07a783          	lw	a5,672(a5)
204034c2:	fa442583          	lw	a1,-92(s0)
204034c6:	4559                	li	a0,22
204034c8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204034ca:	0001                	nop
204034cc:	40f6                	lw	ra,92(sp)
204034ce:	42e6                	lw	t0,88(sp)
204034d0:	4356                	lw	t1,84(sp)
204034d2:	43c6                	lw	t2,80(sp)
204034d4:	4436                	lw	s0,76(sp)
204034d6:	4526                	lw	a0,72(sp)
204034d8:	4596                	lw	a1,68(sp)
204034da:	4606                	lw	a2,64(sp)
204034dc:	56f2                	lw	a3,60(sp)
204034de:	5762                	lw	a4,56(sp)
204034e0:	57d2                	lw	a5,52(sp)
204034e2:	5842                	lw	a6,48(sp)
204034e4:	58b2                	lw	a7,44(sp)
204034e6:	5e22                	lw	t3,40(sp)
204034e8:	5e92                	lw	t4,36(sp)
204034ea:	5f02                	lw	t5,32(sp)
204034ec:	4ff2                	lw	t6,28(sp)
204034ee:	6125                	addi	sp,sp,96
204034f0:	30200073          	mret

204034f4 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
204034f4:	711d                	addi	sp,sp,-96
204034f6:	ce86                	sw	ra,92(sp)
204034f8:	cc96                	sw	t0,88(sp)
204034fa:	ca9a                	sw	t1,84(sp)
204034fc:	c89e                	sw	t2,80(sp)
204034fe:	c6a2                	sw	s0,76(sp)
20403500:	c4aa                	sw	a0,72(sp)
20403502:	c2ae                	sw	a1,68(sp)
20403504:	c0b2                	sw	a2,64(sp)
20403506:	de36                	sw	a3,60(sp)
20403508:	dc3a                	sw	a4,56(sp)
2040350a:	da3e                	sw	a5,52(sp)
2040350c:	d842                	sw	a6,48(sp)
2040350e:	d646                	sw	a7,44(sp)
20403510:	d472                	sw	t3,40(sp)
20403512:	d276                	sw	t4,36(sp)
20403514:	d07a                	sw	t5,32(sp)
20403516:	ce7e                	sw	t6,28(sp)
20403518:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040351a:	ec8ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
2040351e:	872a                	mv	a4,a0
20403520:	070a                	slli	a4,a4,0x2
20403522:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403526:	97ba                	add	a5,a5,a4
20403528:	439c                	lw	a5,0(a5)
2040352a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040352e:	fac42783          	lw	a5,-84(s0)
20403532:	c78d                	beqz	a5,2040355c <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403534:	fac42503          	lw	a0,-84(s0)
20403538:	e54ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
2040353c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20403540:	fa842783          	lw	a5,-88(s0)
20403544:	2c07a783          	lw	a5,704(a5)
20403548:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040354c:	fa842783          	lw	a5,-88(s0)
20403550:	2b87a783          	lw	a5,696(a5)
20403554:	fa442583          	lw	a1,-92(s0)
20403558:	455d                	li	a0,23
2040355a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040355c:	0001                	nop
2040355e:	40f6                	lw	ra,92(sp)
20403560:	42e6                	lw	t0,88(sp)
20403562:	4356                	lw	t1,84(sp)
20403564:	43c6                	lw	t2,80(sp)
20403566:	4436                	lw	s0,76(sp)
20403568:	4526                	lw	a0,72(sp)
2040356a:	4596                	lw	a1,68(sp)
2040356c:	4606                	lw	a2,64(sp)
2040356e:	56f2                	lw	a3,60(sp)
20403570:	5762                	lw	a4,56(sp)
20403572:	57d2                	lw	a5,52(sp)
20403574:	5842                	lw	a6,48(sp)
20403576:	58b2                	lw	a7,44(sp)
20403578:	5e22                	lw	t3,40(sp)
2040357a:	5e92                	lw	t4,36(sp)
2040357c:	5f02                	lw	t5,32(sp)
2040357e:	4ff2                	lw	t6,28(sp)
20403580:	6125                	addi	sp,sp,96
20403582:	30200073          	mret

20403586 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403586:	711d                	addi	sp,sp,-96
20403588:	ce86                	sw	ra,92(sp)
2040358a:	cc96                	sw	t0,88(sp)
2040358c:	ca9a                	sw	t1,84(sp)
2040358e:	c89e                	sw	t2,80(sp)
20403590:	c6a2                	sw	s0,76(sp)
20403592:	c4aa                	sw	a0,72(sp)
20403594:	c2ae                	sw	a1,68(sp)
20403596:	c0b2                	sw	a2,64(sp)
20403598:	de36                	sw	a3,60(sp)
2040359a:	dc3a                	sw	a4,56(sp)
2040359c:	da3e                	sw	a5,52(sp)
2040359e:	d842                	sw	a6,48(sp)
204035a0:	d646                	sw	a7,44(sp)
204035a2:	d472                	sw	t3,40(sp)
204035a4:	d276                	sw	t4,36(sp)
204035a6:	d07a                	sw	t5,32(sp)
204035a8:	ce7e                	sw	t6,28(sp)
204035aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204035ac:	e36ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204035b0:	872a                	mv	a4,a0
204035b2:	070a                	slli	a4,a4,0x2
204035b4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204035b8:	97ba                	add	a5,a5,a4
204035ba:	439c                	lw	a5,0(a5)
204035bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204035c0:	fac42783          	lw	a5,-84(s0)
204035c4:	c78d                	beqz	a5,204035ee <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204035c6:	fac42503          	lw	a0,-84(s0)
204035ca:	dc2ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204035ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204035d2:	fa842783          	lw	a5,-88(s0)
204035d6:	2d87a783          	lw	a5,728(a5)
204035da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204035de:	fa842783          	lw	a5,-88(s0)
204035e2:	2d07a783          	lw	a5,720(a5)
204035e6:	fa442583          	lw	a1,-92(s0)
204035ea:	4561                	li	a0,24
204035ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204035ee:	0001                	nop
204035f0:	40f6                	lw	ra,92(sp)
204035f2:	42e6                	lw	t0,88(sp)
204035f4:	4356                	lw	t1,84(sp)
204035f6:	43c6                	lw	t2,80(sp)
204035f8:	4436                	lw	s0,76(sp)
204035fa:	4526                	lw	a0,72(sp)
204035fc:	4596                	lw	a1,68(sp)
204035fe:	4606                	lw	a2,64(sp)
20403600:	56f2                	lw	a3,60(sp)
20403602:	5762                	lw	a4,56(sp)
20403604:	57d2                	lw	a5,52(sp)
20403606:	5842                	lw	a6,48(sp)
20403608:	58b2                	lw	a7,44(sp)
2040360a:	5e22                	lw	t3,40(sp)
2040360c:	5e92                	lw	t4,36(sp)
2040360e:	5f02                	lw	t5,32(sp)
20403610:	4ff2                	lw	t6,28(sp)
20403612:	6125                	addi	sp,sp,96
20403614:	30200073          	mret

20403618 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403618:	711d                	addi	sp,sp,-96
2040361a:	ce86                	sw	ra,92(sp)
2040361c:	cc96                	sw	t0,88(sp)
2040361e:	ca9a                	sw	t1,84(sp)
20403620:	c89e                	sw	t2,80(sp)
20403622:	c6a2                	sw	s0,76(sp)
20403624:	c4aa                	sw	a0,72(sp)
20403626:	c2ae                	sw	a1,68(sp)
20403628:	c0b2                	sw	a2,64(sp)
2040362a:	de36                	sw	a3,60(sp)
2040362c:	dc3a                	sw	a4,56(sp)
2040362e:	da3e                	sw	a5,52(sp)
20403630:	d842                	sw	a6,48(sp)
20403632:	d646                	sw	a7,44(sp)
20403634:	d472                	sw	t3,40(sp)
20403636:	d276                	sw	t4,36(sp)
20403638:	d07a                	sw	t5,32(sp)
2040363a:	ce7e                	sw	t6,28(sp)
2040363c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040363e:	da4ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
20403642:	872a                	mv	a4,a0
20403644:	070a                	slli	a4,a4,0x2
20403646:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040364a:	97ba                	add	a5,a5,a4
2040364c:	439c                	lw	a5,0(a5)
2040364e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403652:	fac42783          	lw	a5,-84(s0)
20403656:	c78d                	beqz	a5,20403680 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403658:	fac42503          	lw	a0,-84(s0)
2040365c:	d30ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20403660:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403664:	fa842783          	lw	a5,-88(s0)
20403668:	2f07a783          	lw	a5,752(a5)
2040366c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20403670:	fa842783          	lw	a5,-88(s0)
20403674:	2e87a783          	lw	a5,744(a5)
20403678:	fa442583          	lw	a1,-92(s0)
2040367c:	4565                	li	a0,25
2040367e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403680:	0001                	nop
20403682:	40f6                	lw	ra,92(sp)
20403684:	42e6                	lw	t0,88(sp)
20403686:	4356                	lw	t1,84(sp)
20403688:	43c6                	lw	t2,80(sp)
2040368a:	4436                	lw	s0,76(sp)
2040368c:	4526                	lw	a0,72(sp)
2040368e:	4596                	lw	a1,68(sp)
20403690:	4606                	lw	a2,64(sp)
20403692:	56f2                	lw	a3,60(sp)
20403694:	5762                	lw	a4,56(sp)
20403696:	57d2                	lw	a5,52(sp)
20403698:	5842                	lw	a6,48(sp)
2040369a:	58b2                	lw	a7,44(sp)
2040369c:	5e22                	lw	t3,40(sp)
2040369e:	5e92                	lw	t4,36(sp)
204036a0:	5f02                	lw	t5,32(sp)
204036a2:	4ff2                	lw	t6,28(sp)
204036a4:	6125                	addi	sp,sp,96
204036a6:	30200073          	mret

204036aa <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204036aa:	711d                	addi	sp,sp,-96
204036ac:	ce86                	sw	ra,92(sp)
204036ae:	cc96                	sw	t0,88(sp)
204036b0:	ca9a                	sw	t1,84(sp)
204036b2:	c89e                	sw	t2,80(sp)
204036b4:	c6a2                	sw	s0,76(sp)
204036b6:	c4aa                	sw	a0,72(sp)
204036b8:	c2ae                	sw	a1,68(sp)
204036ba:	c0b2                	sw	a2,64(sp)
204036bc:	de36                	sw	a3,60(sp)
204036be:	dc3a                	sw	a4,56(sp)
204036c0:	da3e                	sw	a5,52(sp)
204036c2:	d842                	sw	a6,48(sp)
204036c4:	d646                	sw	a7,44(sp)
204036c6:	d472                	sw	t3,40(sp)
204036c8:	d276                	sw	t4,36(sp)
204036ca:	d07a                	sw	t5,32(sp)
204036cc:	ce7e                	sw	t6,28(sp)
204036ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204036d0:	d12ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204036d4:	872a                	mv	a4,a0
204036d6:	070a                	slli	a4,a4,0x2
204036d8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204036dc:	97ba                	add	a5,a5,a4
204036de:	439c                	lw	a5,0(a5)
204036e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204036e4:	fac42783          	lw	a5,-84(s0)
204036e8:	c78d                	beqz	a5,20403712 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036ea:	fac42503          	lw	a0,-84(s0)
204036ee:	c9eff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204036f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204036f6:	fa842783          	lw	a5,-88(s0)
204036fa:	3087a783          	lw	a5,776(a5)
204036fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403702:	fa842783          	lw	a5,-88(s0)
20403706:	3007a783          	lw	a5,768(a5)
2040370a:	fa442583          	lw	a1,-92(s0)
2040370e:	4569                	li	a0,26
20403710:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403712:	0001                	nop
20403714:	40f6                	lw	ra,92(sp)
20403716:	42e6                	lw	t0,88(sp)
20403718:	4356                	lw	t1,84(sp)
2040371a:	43c6                	lw	t2,80(sp)
2040371c:	4436                	lw	s0,76(sp)
2040371e:	4526                	lw	a0,72(sp)
20403720:	4596                	lw	a1,68(sp)
20403722:	4606                	lw	a2,64(sp)
20403724:	56f2                	lw	a3,60(sp)
20403726:	5762                	lw	a4,56(sp)
20403728:	57d2                	lw	a5,52(sp)
2040372a:	5842                	lw	a6,48(sp)
2040372c:	58b2                	lw	a7,44(sp)
2040372e:	5e22                	lw	t3,40(sp)
20403730:	5e92                	lw	t4,36(sp)
20403732:	5f02                	lw	t5,32(sp)
20403734:	4ff2                	lw	t6,28(sp)
20403736:	6125                	addi	sp,sp,96
20403738:	30200073          	mret

2040373c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040373c:	711d                	addi	sp,sp,-96
2040373e:	ce86                	sw	ra,92(sp)
20403740:	cc96                	sw	t0,88(sp)
20403742:	ca9a                	sw	t1,84(sp)
20403744:	c89e                	sw	t2,80(sp)
20403746:	c6a2                	sw	s0,76(sp)
20403748:	c4aa                	sw	a0,72(sp)
2040374a:	c2ae                	sw	a1,68(sp)
2040374c:	c0b2                	sw	a2,64(sp)
2040374e:	de36                	sw	a3,60(sp)
20403750:	dc3a                	sw	a4,56(sp)
20403752:	da3e                	sw	a5,52(sp)
20403754:	d842                	sw	a6,48(sp)
20403756:	d646                	sw	a7,44(sp)
20403758:	d472                	sw	t3,40(sp)
2040375a:	d276                	sw	t4,36(sp)
2040375c:	d07a                	sw	t5,32(sp)
2040375e:	ce7e                	sw	t6,28(sp)
20403760:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403762:	c80ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
20403766:	872a                	mv	a4,a0
20403768:	070a                	slli	a4,a4,0x2
2040376a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040376e:	97ba                	add	a5,a5,a4
20403770:	439c                	lw	a5,0(a5)
20403772:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403776:	fac42783          	lw	a5,-84(s0)
2040377a:	c78d                	beqz	a5,204037a4 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040377c:	fac42503          	lw	a0,-84(s0)
20403780:	c0cff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20403784:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403788:	fa842783          	lw	a5,-88(s0)
2040378c:	3207a783          	lw	a5,800(a5)
20403790:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403794:	fa842783          	lw	a5,-88(s0)
20403798:	3187a783          	lw	a5,792(a5)
2040379c:	fa442583          	lw	a1,-92(s0)
204037a0:	456d                	li	a0,27
204037a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204037a4:	0001                	nop
204037a6:	40f6                	lw	ra,92(sp)
204037a8:	42e6                	lw	t0,88(sp)
204037aa:	4356                	lw	t1,84(sp)
204037ac:	43c6                	lw	t2,80(sp)
204037ae:	4436                	lw	s0,76(sp)
204037b0:	4526                	lw	a0,72(sp)
204037b2:	4596                	lw	a1,68(sp)
204037b4:	4606                	lw	a2,64(sp)
204037b6:	56f2                	lw	a3,60(sp)
204037b8:	5762                	lw	a4,56(sp)
204037ba:	57d2                	lw	a5,52(sp)
204037bc:	5842                	lw	a6,48(sp)
204037be:	58b2                	lw	a7,44(sp)
204037c0:	5e22                	lw	t3,40(sp)
204037c2:	5e92                	lw	t4,36(sp)
204037c4:	5f02                	lw	t5,32(sp)
204037c6:	4ff2                	lw	t6,28(sp)
204037c8:	6125                	addi	sp,sp,96
204037ca:	30200073          	mret

204037ce <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204037ce:	711d                	addi	sp,sp,-96
204037d0:	ce86                	sw	ra,92(sp)
204037d2:	cc96                	sw	t0,88(sp)
204037d4:	ca9a                	sw	t1,84(sp)
204037d6:	c89e                	sw	t2,80(sp)
204037d8:	c6a2                	sw	s0,76(sp)
204037da:	c4aa                	sw	a0,72(sp)
204037dc:	c2ae                	sw	a1,68(sp)
204037de:	c0b2                	sw	a2,64(sp)
204037e0:	de36                	sw	a3,60(sp)
204037e2:	dc3a                	sw	a4,56(sp)
204037e4:	da3e                	sw	a5,52(sp)
204037e6:	d842                	sw	a6,48(sp)
204037e8:	d646                	sw	a7,44(sp)
204037ea:	d472                	sw	t3,40(sp)
204037ec:	d276                	sw	t4,36(sp)
204037ee:	d07a                	sw	t5,32(sp)
204037f0:	ce7e                	sw	t6,28(sp)
204037f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204037f4:	beeff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204037f8:	872a                	mv	a4,a0
204037fa:	070a                	slli	a4,a4,0x2
204037fc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403800:	97ba                	add	a5,a5,a4
20403802:	439c                	lw	a5,0(a5)
20403804:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403808:	fac42783          	lw	a5,-84(s0)
2040380c:	c78d                	beqz	a5,20403836 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040380e:	fac42503          	lw	a0,-84(s0)
20403812:	b7aff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20403816:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2040381a:	fa842783          	lw	a5,-88(s0)
2040381e:	3387a783          	lw	a5,824(a5)
20403822:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403826:	fa842783          	lw	a5,-88(s0)
2040382a:	3307a783          	lw	a5,816(a5)
2040382e:	fa442583          	lw	a1,-92(s0)
20403832:	4571                	li	a0,28
20403834:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403836:	0001                	nop
20403838:	40f6                	lw	ra,92(sp)
2040383a:	42e6                	lw	t0,88(sp)
2040383c:	4356                	lw	t1,84(sp)
2040383e:	43c6                	lw	t2,80(sp)
20403840:	4436                	lw	s0,76(sp)
20403842:	4526                	lw	a0,72(sp)
20403844:	4596                	lw	a1,68(sp)
20403846:	4606                	lw	a2,64(sp)
20403848:	56f2                	lw	a3,60(sp)
2040384a:	5762                	lw	a4,56(sp)
2040384c:	57d2                	lw	a5,52(sp)
2040384e:	5842                	lw	a6,48(sp)
20403850:	58b2                	lw	a7,44(sp)
20403852:	5e22                	lw	t3,40(sp)
20403854:	5e92                	lw	t4,36(sp)
20403856:	5f02                	lw	t5,32(sp)
20403858:	4ff2                	lw	t6,28(sp)
2040385a:	6125                	addi	sp,sp,96
2040385c:	30200073          	mret

20403860 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
20403860:	711d                	addi	sp,sp,-96
20403862:	ce86                	sw	ra,92(sp)
20403864:	cc96                	sw	t0,88(sp)
20403866:	ca9a                	sw	t1,84(sp)
20403868:	c89e                	sw	t2,80(sp)
2040386a:	c6a2                	sw	s0,76(sp)
2040386c:	c4aa                	sw	a0,72(sp)
2040386e:	c2ae                	sw	a1,68(sp)
20403870:	c0b2                	sw	a2,64(sp)
20403872:	de36                	sw	a3,60(sp)
20403874:	dc3a                	sw	a4,56(sp)
20403876:	da3e                	sw	a5,52(sp)
20403878:	d842                	sw	a6,48(sp)
2040387a:	d646                	sw	a7,44(sp)
2040387c:	d472                	sw	t3,40(sp)
2040387e:	d276                	sw	t4,36(sp)
20403880:	d07a                	sw	t5,32(sp)
20403882:	ce7e                	sw	t6,28(sp)
20403884:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403886:	b5cff0ef          	jal	ra,20402be2 <__metal_myhart_id>
2040388a:	872a                	mv	a4,a0
2040388c:	070a                	slli	a4,a4,0x2
2040388e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403892:	97ba                	add	a5,a5,a4
20403894:	439c                	lw	a5,0(a5)
20403896:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2040389a:	fac42783          	lw	a5,-84(s0)
2040389e:	c78d                	beqz	a5,204038c8 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204038a0:	fac42503          	lw	a0,-84(s0)
204038a4:	ae8ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204038a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204038ac:	fa842783          	lw	a5,-88(s0)
204038b0:	3507a783          	lw	a5,848(a5)
204038b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204038b8:	fa842783          	lw	a5,-88(s0)
204038bc:	3487a783          	lw	a5,840(a5)
204038c0:	fa442583          	lw	a1,-92(s0)
204038c4:	4575                	li	a0,29
204038c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204038c8:	0001                	nop
204038ca:	40f6                	lw	ra,92(sp)
204038cc:	42e6                	lw	t0,88(sp)
204038ce:	4356                	lw	t1,84(sp)
204038d0:	43c6                	lw	t2,80(sp)
204038d2:	4436                	lw	s0,76(sp)
204038d4:	4526                	lw	a0,72(sp)
204038d6:	4596                	lw	a1,68(sp)
204038d8:	4606                	lw	a2,64(sp)
204038da:	56f2                	lw	a3,60(sp)
204038dc:	5762                	lw	a4,56(sp)
204038de:	57d2                	lw	a5,52(sp)
204038e0:	5842                	lw	a6,48(sp)
204038e2:	58b2                	lw	a7,44(sp)
204038e4:	5e22                	lw	t3,40(sp)
204038e6:	5e92                	lw	t4,36(sp)
204038e8:	5f02                	lw	t5,32(sp)
204038ea:	4ff2                	lw	t6,28(sp)
204038ec:	6125                	addi	sp,sp,96
204038ee:	30200073          	mret

204038f2 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204038f2:	711d                	addi	sp,sp,-96
204038f4:	ce86                	sw	ra,92(sp)
204038f6:	cc96                	sw	t0,88(sp)
204038f8:	ca9a                	sw	t1,84(sp)
204038fa:	c89e                	sw	t2,80(sp)
204038fc:	c6a2                	sw	s0,76(sp)
204038fe:	c4aa                	sw	a0,72(sp)
20403900:	c2ae                	sw	a1,68(sp)
20403902:	c0b2                	sw	a2,64(sp)
20403904:	de36                	sw	a3,60(sp)
20403906:	dc3a                	sw	a4,56(sp)
20403908:	da3e                	sw	a5,52(sp)
2040390a:	d842                	sw	a6,48(sp)
2040390c:	d646                	sw	a7,44(sp)
2040390e:	d472                	sw	t3,40(sp)
20403910:	d276                	sw	t4,36(sp)
20403912:	d07a                	sw	t5,32(sp)
20403914:	ce7e                	sw	t6,28(sp)
20403916:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403918:	acaff0ef          	jal	ra,20402be2 <__metal_myhart_id>
2040391c:	872a                	mv	a4,a0
2040391e:	070a                	slli	a4,a4,0x2
20403920:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403924:	97ba                	add	a5,a5,a4
20403926:	439c                	lw	a5,0(a5)
20403928:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040392c:	fac42783          	lw	a5,-84(s0)
20403930:	c78d                	beqz	a5,2040395a <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403932:	fac42503          	lw	a0,-84(s0)
20403936:	a56ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
2040393a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040393e:	fa842783          	lw	a5,-88(s0)
20403942:	3687a783          	lw	a5,872(a5)
20403946:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
2040394a:	fa842783          	lw	a5,-88(s0)
2040394e:	3607a783          	lw	a5,864(a5)
20403952:	fa442583          	lw	a1,-92(s0)
20403956:	4579                	li	a0,30
20403958:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
2040395a:	0001                	nop
2040395c:	40f6                	lw	ra,92(sp)
2040395e:	42e6                	lw	t0,88(sp)
20403960:	4356                	lw	t1,84(sp)
20403962:	43c6                	lw	t2,80(sp)
20403964:	4436                	lw	s0,76(sp)
20403966:	4526                	lw	a0,72(sp)
20403968:	4596                	lw	a1,68(sp)
2040396a:	4606                	lw	a2,64(sp)
2040396c:	56f2                	lw	a3,60(sp)
2040396e:	5762                	lw	a4,56(sp)
20403970:	57d2                	lw	a5,52(sp)
20403972:	5842                	lw	a6,48(sp)
20403974:	58b2                	lw	a7,44(sp)
20403976:	5e22                	lw	t3,40(sp)
20403978:	5e92                	lw	t4,36(sp)
2040397a:	5f02                	lw	t5,32(sp)
2040397c:	4ff2                	lw	t6,28(sp)
2040397e:	6125                	addi	sp,sp,96
20403980:	30200073          	mret

20403984 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403984:	711d                	addi	sp,sp,-96
20403986:	ce86                	sw	ra,92(sp)
20403988:	cc96                	sw	t0,88(sp)
2040398a:	ca9a                	sw	t1,84(sp)
2040398c:	c89e                	sw	t2,80(sp)
2040398e:	c6a2                	sw	s0,76(sp)
20403990:	c4aa                	sw	a0,72(sp)
20403992:	c2ae                	sw	a1,68(sp)
20403994:	c0b2                	sw	a2,64(sp)
20403996:	de36                	sw	a3,60(sp)
20403998:	dc3a                	sw	a4,56(sp)
2040399a:	da3e                	sw	a5,52(sp)
2040399c:	d842                	sw	a6,48(sp)
2040399e:	d646                	sw	a7,44(sp)
204039a0:	d472                	sw	t3,40(sp)
204039a2:	d276                	sw	t4,36(sp)
204039a4:	d07a                	sw	t5,32(sp)
204039a6:	ce7e                	sw	t6,28(sp)
204039a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204039aa:	a38ff0ef          	jal	ra,20402be2 <__metal_myhart_id>
204039ae:	872a                	mv	a4,a0
204039b0:	070a                	slli	a4,a4,0x2
204039b2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204039b6:	97ba                	add	a5,a5,a4
204039b8:	439c                	lw	a5,0(a5)
204039ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204039be:	fac42783          	lw	a5,-84(s0)
204039c2:	c78d                	beqz	a5,204039ec <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204039c4:	fac42503          	lw	a0,-84(s0)
204039c8:	9c4ff0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204039cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204039d0:	fa842783          	lw	a5,-88(s0)
204039d4:	3807a783          	lw	a5,896(a5)
204039d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204039dc:	fa842783          	lw	a5,-88(s0)
204039e0:	3787a783          	lw	a5,888(a5)
204039e4:	fa442583          	lw	a1,-92(s0)
204039e8:	457d                	li	a0,31
204039ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204039ec:	0001                	nop
204039ee:	40f6                	lw	ra,92(sp)
204039f0:	42e6                	lw	t0,88(sp)
204039f2:	4356                	lw	t1,84(sp)
204039f4:	43c6                	lw	t2,80(sp)
204039f6:	4436                	lw	s0,76(sp)
204039f8:	4526                	lw	a0,72(sp)
204039fa:	4596                	lw	a1,68(sp)
204039fc:	4606                	lw	a2,64(sp)
204039fe:	56f2                	lw	a3,60(sp)
20403a00:	5762                	lw	a4,56(sp)
20403a02:	57d2                	lw	a5,52(sp)
20403a04:	5842                	lw	a6,48(sp)
20403a06:	58b2                	lw	a7,44(sp)
20403a08:	5e22                	lw	t3,40(sp)
20403a0a:	5e92                	lw	t4,36(sp)
20403a0c:	5f02                	lw	t5,32(sp)
20403a0e:	4ff2                	lw	t6,28(sp)
20403a10:	6125                	addi	sp,sp,96
20403a12:	30200073          	mret

20403a16 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403a16:	1101                	addi	sp,sp,-32
20403a18:	ce22                	sw	s0,28(sp)
20403a1a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20403a1c:	305027f3          	csrr	a5,mtvec
20403a20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403a24:	fec42783          	lw	a5,-20(s0)
20403a28:	03f7f793          	andi	a5,a5,63
20403a2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
20403a30:	fec42703          	lw	a4,-20(s0)
20403a34:	4789                	li	a5,2
20403a36:	00f70d63          	beq	a4,a5,20403a50 <__metal_controller_interrupt_vector_mode+0x3a>
20403a3a:	fec42703          	lw	a4,-20(s0)
20403a3e:	478d                	li	a5,3
20403a40:	00f70a63          	beq	a4,a5,20403a54 <__metal_controller_interrupt_vector_mode+0x3e>
20403a44:	fec42703          	lw	a4,-20(s0)
20403a48:	4785                	li	a5,1
20403a4a:	00f70763          	beq	a4,a5,20403a58 <__metal_controller_interrupt_vector_mode+0x42>
20403a4e:	a039                	j	20403a5c <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
20403a50:	478d                	li	a5,3
20403a52:	a031                	j	20403a5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403a54:	4791                	li	a5,4
20403a56:	a021                	j	20403a5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403a58:	4785                	li	a5,1
20403a5a:	a011                	j	20403a5e <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
20403a5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
20403a5e:	853e                	mv	a0,a5
20403a60:	4472                	lw	s0,28(sp)
20403a62:	6105                	addi	sp,sp,32
20403a64:	8082                	ret

20403a66 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403a66:	7179                	addi	sp,sp,-48
20403a68:	d622                	sw	s0,44(sp)
20403a6a:	1800                	addi	s0,sp,48
20403a6c:	fca42e23          	sw	a0,-36(s0)
20403a70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403a74:	305027f3          	csrr	a5,mtvec
20403a78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
20403a7c:	fec42783          	lw	a5,-20(s0)
20403a80:	fc07f793          	andi	a5,a5,-64
20403a84:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403a88:	fd842783          	lw	a5,-40(s0)
20403a8c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403a90:	fdc42703          	lw	a4,-36(s0)
20403a94:	4791                	li	a5,4
20403a96:	06e7e063          	bltu	a5,a4,20403af6 <__metal_controller_interrupt_vector+0x90>
20403a9a:	fdc42783          	lw	a5,-36(s0)
20403a9e:	00279713          	slli	a4,a5,0x2
20403aa2:	204067b7          	lui	a5,0x20406
20403aa6:	bf878793          	addi	a5,a5,-1032 # 20405bf8 <__metal_driver_vtable_riscv_clint0+0x4c>
20403aaa:	97ba                	add	a5,a5,a4
20403aac:	439c                	lw	a5,0(a5)
20403aae:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403ab0:	fe842783          	lw	a5,-24(s0)
20403ab4:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403ab8:	fec42783          	lw	a5,-20(s0)
20403abc:	0027e793          	ori	a5,a5,2
20403ac0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403ac4:	a80d                	j	20403af6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403ac6:	fe842783          	lw	a5,-24(s0)
20403aca:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
20403ace:	fec42783          	lw	a5,-20(s0)
20403ad2:	0037e793          	ori	a5,a5,3
20403ad6:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403ada:	a831                	j	20403af6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
20403adc:	fe842783          	lw	a5,-24(s0)
20403ae0:	0017e793          	ori	a5,a5,1
20403ae4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403ae8:	a039                	j	20403af6 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403aea:	fe842783          	lw	a5,-24(s0)
20403aee:	9bf1                	andi	a5,a5,-4
20403af0:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403af4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403af6:	0001                	nop
20403af8:	5432                	lw	s0,44(sp)
20403afa:	6145                	addi	sp,sp,48
20403afc:	8082                	ret

20403afe <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
20403afe:	1101                	addi	sp,sp,-32
20403b00:	ce22                	sw	s0,28(sp)
20403b02:	1000                	addi	s0,sp,32
20403b04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403b08:	fec42783          	lw	a5,-20(s0)
20403b0c:	17f5                	addi	a5,a5,-3
20403b0e:	4771                	li	a4,28
20403b10:	00f76d63          	bltu	a4,a5,20403b2a <__metal_valid_interrupt_id+0x2c>
20403b14:	00279713          	slli	a4,a5,0x2
20403b18:	204067b7          	lui	a5,0x20406
20403b1c:	c0c78793          	addi	a5,a5,-1012 # 20405c0c <__metal_driver_vtable_riscv_clint0+0x60>
20403b20:	97ba                	add	a5,a5,a4
20403b22:	439c                	lw	a5,0(a5)
20403b24:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403b26:	4785                	li	a5,1
20403b28:	a019                	j	20403b2e <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403b2a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
20403b2c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
20403b2e:	853e                	mv	a0,a5
20403b30:	4472                	lw	s0,28(sp)
20403b32:	6105                	addi	sp,sp,32
20403b34:	8082                	ret

20403b36 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403b36:	7179                	addi	sp,sp,-48
20403b38:	d606                	sw	ra,44(sp)
20403b3a:	d422                	sw	s0,40(sp)
20403b3c:	1800                	addi	s0,sp,48
20403b3e:	fca42e23          	sw	a0,-36(s0)
20403b42:	fcb42c23          	sw	a1,-40(s0)
20403b46:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403b4a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
20403b4e:	fdc42783          	lw	a5,-36(s0)
20403b52:	e399                	bnez	a5,20403b58 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403b54:	57fd                	li	a5,-1
20403b56:	a849                	j	20403be8 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403b58:	fd842703          	lw	a4,-40(s0)
20403b5c:	47fd                	li	a5,31
20403b5e:	08e7e063          	bltu	a5,a4,20403bde <__metal_local_interrupt_enable+0xa8>
20403b62:	fd842783          	lw	a5,-40(s0)
20403b66:	00279713          	slli	a4,a5,0x2
20403b6a:	204067b7          	lui	a5,0x20406
20403b6e:	c8078793          	addi	a5,a5,-896 # 20405c80 <__metal_driver_vtable_riscv_clint0+0xd4>
20403b72:	97ba                	add	a5,a5,a4
20403b74:	439c                	lw	a5,0(a5)
20403b76:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403b78:	fd442783          	lw	a5,-44(s0)
20403b7c:	c781                	beqz	a5,20403b84 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
20403b7e:	87eff0ef          	jal	ra,20402bfc <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403b82:	a08d                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403b84:	890ff0ef          	jal	ra,20402c14 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403b88:	a8b1                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403b8a:	fd442783          	lw	a5,-44(s0)
20403b8e:	c781                	beqz	a5,20403b96 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403b90:	89cff0ef          	jal	ra,20402c2c <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403b94:	a881                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403b96:	8aeff0ef          	jal	ra,20402c44 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403b9a:	a0a9                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20403b9c:	fd442783          	lw	a5,-44(s0)
20403ba0:	c781                	beqz	a5,20403ba8 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403ba2:	8baff0ef          	jal	ra,20402c5c <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403ba6:	a83d                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403ba8:	8ceff0ef          	jal	ra,20402c76 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
20403bac:	a825                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20403bae:	fd442783          	lw	a5,-44(s0)
20403bb2:	c781                	beqz	a5,20403bba <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403bb4:	8dcff0ef          	jal	ra,20402c90 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403bb8:	a035                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20403bba:	8f2ff0ef          	jal	ra,20402cac <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
20403bbe:	a01d                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403bc0:	fd442783          	lw	a5,-44(s0)
20403bc4:	c799                	beqz	a5,20403bd2 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403bc6:	fd842783          	lw	a5,-40(s0)
20403bca:	853e                	mv	a0,a5
20403bcc:	8fcff0ef          	jal	ra,20402cc8 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403bd0:	a811                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403bd2:	fd842783          	lw	a5,-40(s0)
20403bd6:	853e                	mv	a0,a5
20403bd8:	91cff0ef          	jal	ra,20402cf4 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
20403bdc:	a021                	j	20403be4 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
20403bde:	57fd                	li	a5,-1
20403be0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403be4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403be8:	853e                	mv	a0,a5
20403bea:	50b2                	lw	ra,44(sp)
20403bec:	5422                	lw	s0,40(sp)
20403bee:	6145                	addi	sp,sp,48
20403bf0:	8082                	ret

20403bf2 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403bf2:	7179                	addi	sp,sp,-48
20403bf4:	d622                	sw	s0,44(sp)
20403bf6:	1800                	addi	s0,sp,48
20403bf8:	fca42e23          	sw	a0,-36(s0)
20403bfc:	fcb42c23          	sw	a1,-40(s0)
20403c00:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403c04:	fdc42783          	lw	a5,-36(s0)
20403c08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403c0c:	fd842703          	lw	a4,-40(s0)
20403c10:	47ad                	li	a5,11
20403c12:	02e7c263          	blt	a5,a4,20403c36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403c16:	fd442783          	lw	a5,-44(s0)
20403c1a:	cf91                	beqz	a5,20403c36 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20403c1c:	fec42703          	lw	a4,-20(s0)
20403c20:	fd842783          	lw	a5,-40(s0)
20403c24:	0e078793          	addi	a5,a5,224
20403c28:	078a                	slli	a5,a5,0x2
20403c2a:	97ba                	add	a5,a5,a4
20403c2c:	fd442703          	lw	a4,-44(s0)
20403c30:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403c32:	4781                	li	a5,0
20403c34:	a011                	j	20403c38 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403c36:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403c38:	853e                	mv	a0,a5
20403c3a:	5432                	lw	s0,44(sp)
20403c3c:	6145                	addi	sp,sp,48
20403c3e:	8082                	ret

20403c40 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20403c40:	7139                	addi	sp,sp,-64
20403c42:	de06                	sw	ra,60(sp)
20403c44:	dc22                	sw	s0,56(sp)
20403c46:	0080                	addi	s0,sp,64
20403c48:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403c4c:	fcc42783          	lw	a5,-52(s0)
20403c50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403c54:	fe442783          	lw	a5,-28(s0)
20403c58:	43dc                	lw	a5,4(a5)
20403c5a:	10079d63          	bnez	a5,20403d74 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20403c5e:	57fd                	li	a5,-1
20403c60:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403c64:	57fd                	li	a5,-1
20403c66:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403c6a:	301027f3          	csrr	a5,misa
20403c6e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403c72:	fe042703          	lw	a4,-32(s0)
20403c76:	6789                	lui	a5,0x2
20403c78:	8ff9                	and	a5,a5,a4
20403c7a:	e799                	bnez	a5,20403c88 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20403c7c:	fe042703          	lw	a4,-32(s0)
20403c80:	000407b7          	lui	a5,0x40
20403c84:	8ff9                	and	a5,a5,a4
20403c86:	c799                	beqz	a5,20403c94 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403c88:	57fd                	li	a5,-1
20403c8a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20403c8e:	57fd                	li	a5,-1
20403c90:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403c94:	fe042703          	lw	a4,-32(s0)
20403c98:	000407b7          	lui	a5,0x40
20403c9c:	8ff9                	and	a5,a5,a4
20403c9e:	c781                	beqz	a5,20403ca6 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20403ca0:	57fd                	li	a5,-1
20403ca2:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403ca6:	fe042623          	sw	zero,-20(s0)
20403caa:	a0b9                	j	20403cf8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20403cac:	fe442683          	lw	a3,-28(s0)
20403cb0:	fec42703          	lw	a4,-20(s0)
20403cb4:	87ba                	mv	a5,a4
20403cb6:	0786                	slli	a5,a5,0x1
20403cb8:	97ba                	add	a5,a5,a4
20403cba:	078e                	slli	a5,a5,0x3
20403cbc:	97b6                	add	a5,a5,a3
20403cbe:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403cc2:	fe442683          	lw	a3,-28(s0)
20403cc6:	fec42703          	lw	a4,-20(s0)
20403cca:	87ba                	mv	a5,a4
20403ccc:	0786                	slli	a5,a5,0x1
20403cce:	97ba                	add	a5,a5,a4
20403cd0:	078e                	slli	a5,a5,0x3
20403cd2:	97b6                	add	a5,a5,a3
20403cd4:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403cd8:	fe442683          	lw	a3,-28(s0)
20403cdc:	fec42703          	lw	a4,-20(s0)
20403ce0:	87ba                	mv	a5,a4
20403ce2:	0786                	slli	a5,a5,0x1
20403ce4:	97ba                	add	a5,a5,a4
20403ce6:	078e                	slli	a5,a5,0x3
20403ce8:	97b6                	add	a5,a5,a3
20403cea:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403cee:	fec42783          	lw	a5,-20(s0)
20403cf2:	0785                	addi	a5,a5,1
20403cf4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403cf8:	fec42703          	lw	a4,-20(s0)
20403cfc:	47fd                	li	a5,31
20403cfe:	fae7d7e3          	bge	a5,a4,20403cac <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403d02:	fe042423          	sw	zero,-24(s0)
20403d06:	a01d                	j	20403d2c <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403d08:	fe442703          	lw	a4,-28(s0)
20403d0c:	fe842783          	lw	a5,-24(s0)
20403d10:	0e078793          	addi	a5,a5,224
20403d14:	078a                	slli	a5,a5,0x2
20403d16:	97ba                	add	a5,a5,a4
20403d18:	20403737          	lui	a4,0x20403
20403d1c:	d2070713          	addi	a4,a4,-736 # 20402d20 <__metal_default_exception_handler>
20403d20:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403d22:	fe842783          	lw	a5,-24(s0)
20403d26:	0785                	addi	a5,a5,1
20403d28:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403d2c:	fe842703          	lw	a4,-24(s0)
20403d30:	47ad                	li	a5,11
20403d32:	fce7dbe3          	bge	a5,a4,20403d08 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403d36:	204037b7          	lui	a5,0x20403
20403d3a:	f8078593          	addi	a1,a5,-128 # 20402f80 <__metal_exception_handler>
20403d3e:	4501                	li	a0,0
20403d40:	331d                	jal	20403a66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403d42:	301027f3          	csrr	a5,misa
20403d46:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403d4a:	fdc42703          	lw	a4,-36(s0)
20403d4e:	67c1                	lui	a5,0x10
20403d50:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403d54:	8ff9                	and	a5,a5,a4
20403d56:	cb99                	beqz	a5,20403d6c <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403d58:	300027f3          	csrr	a5,mstatus
20403d5c:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403d60:	fdc42703          	lw	a4,-36(s0)
20403d64:	6789                	lui	a5,0x2
20403d66:	8fd9                	or	a5,a5,a4
20403d68:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403d6c:	fe442783          	lw	a5,-28(s0)
20403d70:	4705                	li	a4,1
20403d72:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403d74:	0001                	nop
20403d76:	50f2                	lw	ra,60(sp)
20403d78:	5462                	lw	s0,56(sp)
20403d7a:	6121                	addi	sp,sp,64
20403d7c:	8082                	ret

20403d7e <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20403d7e:	7179                	addi	sp,sp,-48
20403d80:	d606                	sw	ra,44(sp)
20403d82:	d422                	sw	s0,40(sp)
20403d84:	1800                	addi	s0,sp,48
20403d86:	fca42e23          	sw	a0,-36(s0)
20403d8a:	fcb42c23          	sw	a1,-40(s0)
20403d8e:	fcc42a23          	sw	a2,-44(s0)
20403d92:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403d96:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403d9a:	fdc42783          	lw	a5,-36(s0)
20403d9e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403da2:	fd842503          	lw	a0,-40(s0)
20403da6:	3ba1                	jal	20403afe <__metal_valid_interrupt_id>
20403da8:	87aa                	mv	a5,a0
20403daa:	e399                	bnez	a5,20403db0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20403dac:	57d5                	li	a5,-11
20403dae:	aa11                	j	20403ec2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403db0:	fd442783          	lw	a5,-44(s0)
20403db4:	cf85                	beqz	a5,20403dec <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403db6:	fe842683          	lw	a3,-24(s0)
20403dba:	fd842703          	lw	a4,-40(s0)
20403dbe:	87ba                	mv	a5,a4
20403dc0:	0786                	slli	a5,a5,0x1
20403dc2:	97ba                	add	a5,a5,a4
20403dc4:	078e                	slli	a5,a5,0x3
20403dc6:	97b6                	add	a5,a5,a3
20403dc8:	fd442703          	lw	a4,-44(s0)
20403dcc:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403dd0:	fe842683          	lw	a3,-24(s0)
20403dd4:	fd842703          	lw	a4,-40(s0)
20403dd8:	87ba                	mv	a5,a4
20403dda:	0786                	slli	a5,a5,0x1
20403ddc:	97ba                	add	a5,a5,a4
20403dde:	078e                	slli	a5,a5,0x3
20403de0:	97b6                	add	a5,a5,a3
20403de2:	fd042703          	lw	a4,-48(s0)
20403de6:	08e7ac23          	sw	a4,152(a5)
20403dea:	a8d1                	j	20403ebe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20403dec:	fd842783          	lw	a5,-40(s0)
20403df0:	17f5                	addi	a5,a5,-3
20403df2:	4771                	li	a4,28
20403df4:	0cf76263          	bltu	a4,a5,20403eb8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403df8:	00279713          	slli	a4,a5,0x2
20403dfc:	204067b7          	lui	a5,0x20406
20403e00:	d0078793          	addi	a5,a5,-768 # 20405d00 <__metal_driver_vtable_riscv_clint0+0x154>
20403e04:	97ba                	add	a5,a5,a4
20403e06:	439c                	lw	a5,0(a5)
20403e08:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403e0a:	fe842683          	lw	a3,-24(s0)
20403e0e:	fd842703          	lw	a4,-40(s0)
20403e12:	87ba                	mv	a5,a4
20403e14:	0786                	slli	a5,a5,0x1
20403e16:	97ba                	add	a5,a5,a4
20403e18:	078e                	slli	a5,a5,0x3
20403e1a:	97b6                	add	a5,a5,a3
20403e1c:	20403737          	lui	a4,0x20403
20403e20:	e0c70713          	addi	a4,a4,-500 # 20402e0c <__metal_default_sw_handler>
20403e24:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403e28:	fe842683          	lw	a3,-24(s0)
20403e2c:	fd842703          	lw	a4,-40(s0)
20403e30:	87ba                	mv	a5,a4
20403e32:	0786                	slli	a5,a5,0x1
20403e34:	97ba                	add	a5,a5,a4
20403e36:	078e                	slli	a5,a5,0x3
20403e38:	97b6                	add	a5,a5,a3
20403e3a:	fd042703          	lw	a4,-48(s0)
20403e3e:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403e42:	a8b5                	j	20403ebe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403e44:	fe842683          	lw	a3,-24(s0)
20403e48:	fd842703          	lw	a4,-40(s0)
20403e4c:	87ba                	mv	a5,a4
20403e4e:	0786                	slli	a5,a5,0x1
20403e50:	97ba                	add	a5,a5,a4
20403e52:	078e                	slli	a5,a5,0x3
20403e54:	97b6                	add	a5,a5,a3
20403e56:	20403737          	lui	a4,0x20403
20403e5a:	efe70713          	addi	a4,a4,-258 # 20402efe <__metal_default_timer_handler>
20403e5e:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403e62:	fe842683          	lw	a3,-24(s0)
20403e66:	fd842703          	lw	a4,-40(s0)
20403e6a:	87ba                	mv	a5,a4
20403e6c:	0786                	slli	a5,a5,0x1
20403e6e:	97ba                	add	a5,a5,a4
20403e70:	078e                	slli	a5,a5,0x3
20403e72:	97b6                	add	a5,a5,a3
20403e74:	fd042703          	lw	a4,-48(s0)
20403e78:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403e7c:	a089                	j	20403ebe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20403e7e:	fe842683          	lw	a3,-24(s0)
20403e82:	fd842703          	lw	a4,-40(s0)
20403e86:	87ba                	mv	a5,a4
20403e88:	0786                	slli	a5,a5,0x1
20403e8a:	97ba                	add	a5,a5,a4
20403e8c:	078e                	slli	a5,a5,0x3
20403e8e:	97b6                	add	a5,a5,a3
20403e90:	20403737          	lui	a4,0x20403
20403e94:	d3870713          	addi	a4,a4,-712 # 20402d38 <__metal_default_interrupt_handler>
20403e98:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403e9c:	fe842683          	lw	a3,-24(s0)
20403ea0:	fd842703          	lw	a4,-40(s0)
20403ea4:	87ba                	mv	a5,a4
20403ea6:	0786                	slli	a5,a5,0x1
20403ea8:	97ba                	add	a5,a5,a4
20403eaa:	078e                	slli	a5,a5,0x3
20403eac:	97b6                	add	a5,a5,a3
20403eae:	fd042703          	lw	a4,-48(s0)
20403eb2:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403eb6:	a021                	j	20403ebe <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403eb8:	57d1                	li	a5,-12
20403eba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403ebe:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403ec2:	853e                	mv	a0,a5
20403ec4:	50b2                	lw	ra,44(sp)
20403ec6:	5422                	lw	s0,40(sp)
20403ec8:	6145                	addi	sp,sp,48
20403eca:	8082                	ret

20403ecc <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403ecc:	1101                	addi	sp,sp,-32
20403ece:	ce06                	sw	ra,28(sp)
20403ed0:	cc22                	sw	s0,24(sp)
20403ed2:	1000                	addi	s0,sp,32
20403ed4:	fea42623          	sw	a0,-20(s0)
20403ed8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403edc:	fe842783          	lw	a5,-24(s0)
20403ee0:	4605                	li	a2,1
20403ee2:	85be                	mv	a1,a5
20403ee4:	fec42503          	lw	a0,-20(s0)
20403ee8:	c4fff0ef          	jal	ra,20403b36 <__metal_local_interrupt_enable>
20403eec:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403eee:	853e                	mv	a0,a5
20403ef0:	40f2                	lw	ra,28(sp)
20403ef2:	4462                	lw	s0,24(sp)
20403ef4:	6105                	addi	sp,sp,32
20403ef6:	8082                	ret

20403ef8 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403ef8:	1101                	addi	sp,sp,-32
20403efa:	ce06                	sw	ra,28(sp)
20403efc:	cc22                	sw	s0,24(sp)
20403efe:	1000                	addi	s0,sp,32
20403f00:	fea42623          	sw	a0,-20(s0)
20403f04:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403f08:	fe842783          	lw	a5,-24(s0)
20403f0c:	4601                	li	a2,0
20403f0e:	85be                	mv	a1,a5
20403f10:	fec42503          	lw	a0,-20(s0)
20403f14:	c23ff0ef          	jal	ra,20403b36 <__metal_local_interrupt_enable>
20403f18:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403f1a:	853e                	mv	a0,a5
20403f1c:	40f2                	lw	ra,28(sp)
20403f1e:	4462                	lw	s0,24(sp)
20403f20:	6105                	addi	sp,sp,32
20403f22:	8082                	ret

20403f24 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403f24:	1101                	addi	sp,sp,-32
20403f26:	ce06                	sw	ra,28(sp)
20403f28:	cc22                	sw	s0,24(sp)
20403f2a:	1000                	addi	s0,sp,32
20403f2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403f30:	ae7ff0ef          	jal	ra,20403a16 <__metal_controller_interrupt_vector_mode>
20403f34:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403f36:	853e                	mv	a0,a5
20403f38:	40f2                	lw	ra,28(sp)
20403f3a:	4462                	lw	s0,24(sp)
20403f3c:	6105                	addi	sp,sp,32
20403f3e:	8082                	ret

20403f40 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403f40:	7179                	addi	sp,sp,-48
20403f42:	d606                	sw	ra,44(sp)
20403f44:	d422                	sw	s0,40(sp)
20403f46:	1800                	addi	s0,sp,48
20403f48:	fca42e23          	sw	a0,-36(s0)
20403f4c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403f50:	fdc42783          	lw	a5,-36(s0)
20403f54:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403f58:	fd842783          	lw	a5,-40(s0)
20403f5c:	eb99                	bnez	a5,20403f72 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403f5e:	204037b7          	lui	a5,0x20403
20403f62:	f8078593          	addi	a1,a5,-128 # 20402f80 <__metal_exception_handler>
20403f66:	fd842503          	lw	a0,-40(s0)
20403f6a:	afdff0ef          	jal	ra,20403a66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403f6e:	4781                	li	a5,0
20403f70:	a00d                	j	20403f92 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403f72:	fd842703          	lw	a4,-40(s0)
20403f76:	4785                	li	a5,1
20403f78:	00f71c63          	bne	a4,a5,20403f90 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403f7c:	204067b7          	lui	a5,0x20406
20403f80:	88078593          	addi	a1,a5,-1920 # 20405880 <__metal_vector_table>
20403f84:	fd842503          	lw	a0,-40(s0)
20403f88:	adfff0ef          	jal	ra,20403a66 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403f8c:	4781                	li	a5,0
20403f8e:	a011                	j	20403f92 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403f90:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403f92:	853e                	mv	a0,a5
20403f94:	50b2                	lw	ra,44(sp)
20403f96:	5422                	lw	s0,40(sp)
20403f98:	6145                	addi	sp,sp,48
20403f9a:	8082                	ret

20403f9c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403f9c:	1101                	addi	sp,sp,-32
20403f9e:	ce22                	sw	s0,28(sp)
20403fa0:	1000                	addi	s0,sp,32
20403fa2:	fea42623          	sw	a0,-20(s0)
20403fa6:	feb42423          	sw	a1,-24(s0)
20403faa:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403fae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403fb0:	853e                	mv	a0,a5
20403fb2:	4472                	lw	s0,28(sp)
20403fb4:	6105                	addi	sp,sp,32
20403fb6:	8082                	ret

20403fb8 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403fb8:	7139                	addi	sp,sp,-64
20403fba:	de22                	sw	s0,60(sp)
20403fbc:	0080                	addi	s0,sp,64
20403fbe:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403fc2:	4301                	li	t1,0
20403fc4:	4381                	li	t2,0
20403fc6:	fe642423          	sw	t1,-24(s0)
20403fca:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403fce:	b8002573          	csrr	a0,mcycleh
20403fd2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403fd6:	b0002573          	csrr	a0,mcycle
20403fda:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403fde:	b8002573          	csrr	a0,mcycleh
20403fe2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403fe6:	fe442883          	lw	a7,-28(s0)
20403fea:	fdc42503          	lw	a0,-36(s0)
20403fee:	02a89563          	bne	a7,a0,20404018 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403ff2:	fe442503          	lw	a0,-28(s0)
20403ff6:	85aa                	mv	a1,a0
20403ff8:	4601                	li	a2,0
20403ffa:	00059813          	slli	a6,a1,0x0
20403ffe:	4781                	li	a5,0
20404000:	fe042603          	lw	a2,-32(s0)
20404004:	86b2                	mv	a3,a2
20404006:	4701                	li	a4,0
20404008:	00d7e633          	or	a2,a5,a3
2040400c:	fec42423          	sw	a2,-24(s0)
20404010:	00e867b3          	or	a5,a6,a4
20404014:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20404018:	fe842783          	lw	a5,-24(s0)
2040401c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20404020:	853e                	mv	a0,a5
20404022:	85c2                	mv	a1,a6
20404024:	5472                	lw	s0,60(sp)
20404026:	6121                	addi	sp,sp,64
20404028:	8082                	ret

2040402a <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
2040402a:	7179                	addi	sp,sp,-48
2040402c:	d606                	sw	ra,44(sp)
2040402e:	d422                	sw	s0,40(sp)
20404030:	d24a                	sw	s2,36(sp)
20404032:	d04e                	sw	s3,32(sp)
20404034:	1800                	addi	s0,sp,48
20404036:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
2040403a:	fdc42783          	lw	a5,-36(s0)
2040403e:	e781                	bnez	a5,20404046 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20404040:	4901                	li	s2,0
20404042:	4981                	li	s3,0
20404044:	a821                	j	2040405c <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20404046:	fdc42503          	lw	a0,-36(s0)
2040404a:	b19fe0ef          	jal	ra,20402b62 <__metal_driver_cpu_timebase>
2040404e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20404052:	fec42783          	lw	a5,-20(s0)
20404056:	893e                	mv	s2,a5
20404058:	87fd                	srai	a5,a5,0x1f
2040405a:	89be                	mv	s3,a5
2040405c:	87ca                	mv	a5,s2
2040405e:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20404060:	853e                	mv	a0,a5
20404062:	85c2                	mv	a1,a6
20404064:	50b2                	lw	ra,44(sp)
20404066:	5422                	lw	s0,40(sp)
20404068:	5912                	lw	s2,36(sp)
2040406a:	5982                	lw	s3,32(sp)
2040406c:	6145                	addi	sp,sp,48
2040406e:	8082                	ret

20404070 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20404070:	7179                	addi	sp,sp,-48
20404072:	d606                	sw	ra,44(sp)
20404074:	d422                	sw	s0,40(sp)
20404076:	1800                	addi	s0,sp,48
20404078:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
2040407c:	4781                	li	a5,0
2040407e:	4801                	li	a6,0
20404080:	fef42023          	sw	a5,-32(s0)
20404084:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404088:	fdc42503          	lw	a0,-36(s0)
2040408c:	b01fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20404090:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20404094:	fec42783          	lw	a5,-20(s0)
20404098:	c78d                	beqz	a5,204040c2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
2040409a:	fec42783          	lw	a5,-20(s0)
2040409e:	13c7a783          	lw	a5,316(a5)
204040a2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204040a6:	fe842783          	lw	a5,-24(s0)
204040aa:	cf81                	beqz	a5,204040c2 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204040ac:	fe842783          	lw	a5,-24(s0)
204040b0:	439c                	lw	a5,0(a5)
204040b2:	43f8                	lw	a4,68(a5)
204040b4:	fe040793          	addi	a5,s0,-32
204040b8:	863e                	mv	a2,a5
204040ba:	4585                	li	a1,1
204040bc:	fe842503          	lw	a0,-24(s0)
204040c0:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204040c2:	fe042783          	lw	a5,-32(s0)
204040c6:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204040ca:	853e                	mv	a0,a5
204040cc:	85c2                	mv	a1,a6
204040ce:	50b2                	lw	ra,44(sp)
204040d0:	5422                	lw	s0,40(sp)
204040d2:	6145                	addi	sp,sp,48
204040d4:	8082                	ret

204040d6 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204040d6:	7179                	addi	sp,sp,-48
204040d8:	d606                	sw	ra,44(sp)
204040da:	d422                	sw	s0,40(sp)
204040dc:	d226                	sw	s1,36(sp)
204040de:	1800                	addi	s0,sp,48
204040e0:	fca42e23          	sw	a0,-36(s0)
204040e4:	fcb42823          	sw	a1,-48(s0)
204040e8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204040ec:	57fd                	li	a5,-1
204040ee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204040f2:	fdc42503          	lw	a0,-36(s0)
204040f6:	a97fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204040fa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204040fe:	fe842783          	lw	a5,-24(s0)
20404102:	cf8d                	beqz	a5,2040413c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20404104:	fe842783          	lw	a5,-24(s0)
20404108:	13c7a783          	lw	a5,316(a5)
2040410c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20404110:	fe442783          	lw	a5,-28(s0)
20404114:	c785                	beqz	a5,2040413c <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20404116:	fe442783          	lw	a5,-28(s0)
2040411a:	439c                	lw	a5,0(a5)
2040411c:	47a4                	lw	s1,72(a5)
2040411e:	fdc42503          	lw	a0,-36(s0)
20404122:	a1dfe0ef          	jal	ra,20402b3e <__metal_driver_cpu_hartid>
20404126:	87aa                	mv	a5,a0
20404128:	fd042603          	lw	a2,-48(s0)
2040412c:	fd442683          	lw	a3,-44(s0)
20404130:	85be                	mv	a1,a5
20404132:	fe442503          	lw	a0,-28(s0)
20404136:	9482                	jalr	s1
20404138:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
2040413c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20404140:	853e                	mv	a0,a5
20404142:	50b2                	lw	ra,44(sp)
20404144:	5422                	lw	s0,40(sp)
20404146:	5492                	lw	s1,36(sp)
20404148:	6145                	addi	sp,sp,48
2040414a:	8082                	ret

2040414c <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
2040414c:	1101                	addi	sp,sp,-32
2040414e:	ce22                	sw	s0,28(sp)
20404150:	1000                	addi	s0,sp,32
20404152:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404156:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
2040415a:	853e                	mv	a0,a5
2040415c:	4472                	lw	s0,28(sp)
2040415e:	6105                	addi	sp,sp,32
20404160:	8082                	ret

20404162 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20404162:	1101                	addi	sp,sp,-32
20404164:	ce22                	sw	s0,28(sp)
20404166:	1000                	addi	s0,sp,32
20404168:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
2040416c:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
2040416e:	853e                	mv	a0,a5
20404170:	4472                	lw	s0,28(sp)
20404172:	6105                	addi	sp,sp,32
20404174:	8082                	ret

20404176 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20404176:	1101                	addi	sp,sp,-32
20404178:	ce22                	sw	s0,28(sp)
2040417a:	1000                	addi	s0,sp,32
2040417c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20404180:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20404184:	853e                	mv	a0,a5
20404186:	4472                	lw	s0,28(sp)
20404188:	6105                	addi	sp,sp,32
2040418a:	8082                	ret

2040418c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
2040418c:	1101                	addi	sp,sp,-32
2040418e:	ce22                	sw	s0,28(sp)
20404190:	1000                	addi	s0,sp,32
20404192:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20404196:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20404198:	853e                	mv	a0,a5
2040419a:	4472                	lw	s0,28(sp)
2040419c:	6105                	addi	sp,sp,32
2040419e:	8082                	ret

204041a0 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204041a0:	7179                	addi	sp,sp,-48
204041a2:	d606                	sw	ra,44(sp)
204041a4:	d422                	sw	s0,40(sp)
204041a6:	1800                	addi	s0,sp,48
204041a8:	fca42e23          	sw	a0,-36(s0)
204041ac:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204041b0:	57fd                	li	a5,-1
204041b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204041b6:	fdc42503          	lw	a0,-36(s0)
204041ba:	9d3fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204041be:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204041c2:	fe842783          	lw	a5,-24(s0)
204041c6:	c79d                	beqz	a5,204041f4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204041c8:	fe842783          	lw	a5,-24(s0)
204041cc:	0dc7a783          	lw	a5,220(a5)
204041d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204041d4:	fe442783          	lw	a5,-28(s0)
204041d8:	cf91                	beqz	a5,204041f4 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204041da:	fe442783          	lw	a5,-28(s0)
204041de:	439c                	lw	a5,0(a5)
204041e0:	43f8                	lw	a4,68(a5)
204041e2:	fd840793          	addi	a5,s0,-40
204041e6:	863e                	mv	a2,a5
204041e8:	458d                	li	a1,3
204041ea:	fe442503          	lw	a0,-28(s0)
204041ee:	9702                	jalr	a4
204041f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204041f4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204041f8:	853e                	mv	a0,a5
204041fa:	50b2                	lw	ra,44(sp)
204041fc:	5422                	lw	s0,40(sp)
204041fe:	6145                	addi	sp,sp,48
20404200:	8082                	ret

20404202 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404202:	7179                	addi	sp,sp,-48
20404204:	d606                	sw	ra,44(sp)
20404206:	d422                	sw	s0,40(sp)
20404208:	1800                	addi	s0,sp,48
2040420a:	fca42e23          	sw	a0,-36(s0)
2040420e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20404212:	57fd                	li	a5,-1
20404214:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404218:	fdc42503          	lw	a0,-36(s0)
2040421c:	971fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20404220:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20404224:	fe842783          	lw	a5,-24(s0)
20404228:	c79d                	beqz	a5,20404256 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040422a:	fe842783          	lw	a5,-24(s0)
2040422e:	0dc7a783          	lw	a5,220(a5)
20404232:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20404236:	fe442783          	lw	a5,-28(s0)
2040423a:	cf91                	beqz	a5,20404256 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
2040423c:	fe442783          	lw	a5,-28(s0)
20404240:	439c                	lw	a5,0(a5)
20404242:	43f8                	lw	a4,68(a5)
20404244:	fd840793          	addi	a5,s0,-40
20404248:	863e                	mv	a2,a5
2040424a:	4589                	li	a1,2
2040424c:	fe442503          	lw	a0,-28(s0)
20404250:	9702                	jalr	a4
20404252:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20404256:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
2040425a:	853e                	mv	a0,a5
2040425c:	50b2                	lw	ra,44(sp)
2040425e:	5422                	lw	s0,40(sp)
20404260:	6145                	addi	sp,sp,48
20404262:	8082                	ret

20404264 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20404264:	7179                	addi	sp,sp,-48
20404266:	d606                	sw	ra,44(sp)
20404268:	d422                	sw	s0,40(sp)
2040426a:	1800                	addi	s0,sp,48
2040426c:	fca42e23          	sw	a0,-36(s0)
20404270:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20404274:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404278:	fdc42503          	lw	a0,-36(s0)
2040427c:	911fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20404280:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404284:	fe842783          	lw	a5,-24(s0)
20404288:	c79d                	beqz	a5,204042b6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2040428a:	fe842783          	lw	a5,-24(s0)
2040428e:	0dc7a783          	lw	a5,220(a5)
20404292:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20404296:	fe442783          	lw	a5,-28(s0)
2040429a:	cf91                	beqz	a5,204042b6 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2040429c:	fe442783          	lw	a5,-28(s0)
204042a0:	439c                	lw	a5,0(a5)
204042a2:	43f8                	lw	a4,68(a5)
204042a4:	fd840793          	addi	a5,s0,-40
204042a8:	863e                	mv	a2,a5
204042aa:	4591                	li	a1,4
204042ac:	fe442503          	lw	a0,-28(s0)
204042b0:	9702                	jalr	a4
204042b2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204042b6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
204042ba:	853e                	mv	a0,a5
204042bc:	50b2                	lw	ra,44(sp)
204042be:	5422                	lw	s0,40(sp)
204042c0:	6145                	addi	sp,sp,48
204042c2:	8082                	ret

204042c4 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204042c4:	1101                	addi	sp,sp,-32
204042c6:	ce06                	sw	ra,28(sp)
204042c8:	cc22                	sw	s0,24(sp)
204042ca:	1000                	addi	s0,sp,32
204042cc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204042d0:	fec42503          	lw	a0,-20(s0)
204042d4:	8b9fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
204042d8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204042da:	853e                	mv	a0,a5
204042dc:	40f2                	lw	ra,28(sp)
204042de:	4462                	lw	s0,24(sp)
204042e0:	6105                	addi	sp,sp,32
204042e2:	8082                	ret

204042e4 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204042e4:	7179                	addi	sp,sp,-48
204042e6:	d606                	sw	ra,44(sp)
204042e8:	d422                	sw	s0,40(sp)
204042ea:	1800                	addi	s0,sp,48
204042ec:	fca42e23          	sw	a0,-36(s0)
204042f0:	fcb42c23          	sw	a1,-40(s0)
204042f4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204042f8:	fdc42503          	lw	a0,-36(s0)
204042fc:	891fe0ef          	jal	ra,20402b8c <__metal_driver_cpu_interrupt_controller>
20404300:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404304:	fec42783          	lw	a5,-20(s0)
20404308:	cb99                	beqz	a5,2040431e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
2040430a:	fd442603          	lw	a2,-44(s0)
2040430e:	fd842583          	lw	a1,-40(s0)
20404312:	fec42503          	lw	a0,-20(s0)
20404316:	8ddff0ef          	jal	ra,20403bf2 <__metal_exception_register>
2040431a:	87aa                	mv	a5,a0
2040431c:	a011                	j	20404320 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2040431e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20404320:	853e                	mv	a0,a5
20404322:	50b2                	lw	ra,44(sp)
20404324:	5422                	lw	s0,40(sp)
20404326:	6145                	addi	sp,sp,48
20404328:	8082                	ret

2040432a <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
2040432a:	1101                	addi	sp,sp,-32
2040432c:	ce22                	sw	s0,28(sp)
2040432e:	1000                	addi	s0,sp,32
20404330:	fea42623          	sw	a0,-20(s0)
20404334:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20404338:	fe842783          	lw	a5,-24(s0)
2040433c:	0007d783          	lhu	a5,0(a5)
20404340:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20404344:	478d                	li	a5,3
20404346:	00f71463          	bne	a4,a5,2040434e <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
2040434a:	4791                	li	a5,4
2040434c:	a011                	j	20404350 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
2040434e:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20404350:	853e                	mv	a0,a5
20404352:	4472                	lw	s0,28(sp)
20404354:	6105                	addi	sp,sp,32
20404356:	8082                	ret

20404358 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20404358:	7179                	addi	sp,sp,-48
2040435a:	d622                	sw	s0,44(sp)
2040435c:	1800                	addi	s0,sp,48
2040435e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20404362:	341027f3          	csrr	a5,mepc
20404366:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
2040436a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
2040436e:	853e                	mv	a0,a5
20404370:	5432                	lw	s0,44(sp)
20404372:	6145                	addi	sp,sp,48
20404374:	8082                	ret

20404376 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20404376:	1101                	addi	sp,sp,-32
20404378:	ce22                	sw	s0,28(sp)
2040437a:	1000                	addi	s0,sp,32
2040437c:	fea42623          	sw	a0,-20(s0)
20404380:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404384:	fe842783          	lw	a5,-24(s0)
20404388:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2040438c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2040438e:	853e                	mv	a0,a5
20404390:	4472                	lw	s0,28(sp)
20404392:	6105                	addi	sp,sp,32
20404394:	8082                	ret

20404396 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404396:	1101                	addi	sp,sp,-32
20404398:	ce22                	sw	s0,28(sp)
2040439a:	1000                	addi	s0,sp,32
2040439c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204043a0:	fec42703          	lw	a4,-20(s0)
204043a4:	800017b7          	lui	a5,0x80001
204043a8:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204043ac:	00f71563          	bne	a4,a5,204043b6 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204043b0:	0c0007b7          	lui	a5,0xc000
204043b4:	a011                	j	204043b8 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
204043b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
204043b8:	853e                	mv	a0,a5
204043ba:	4472                	lw	s0,28(sp)
204043bc:	6105                	addi	sp,sp,32
204043be:	8082                	ret

204043c0 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
204043c0:	1101                	addi	sp,sp,-32
204043c2:	ce22                	sw	s0,28(sp)
204043c4:	1000                	addi	s0,sp,32
204043c6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204043ca:	fec42703          	lw	a4,-20(s0)
204043ce:	800017b7          	lui	a5,0x80001
204043d2:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204043d6:	00f71463          	bne	a4,a5,204043de <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204043da:	47ed                	li	a5,27
204043dc:	a011                	j	204043e0 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
204043de:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
204043e0:	853e                	mv	a0,a5
204043e2:	4472                	lw	s0,28(sp)
204043e4:	6105                	addi	sp,sp,32
204043e6:	8082                	ret

204043e8 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204043e8:	1101                	addi	sp,sp,-32
204043ea:	ce22                	sw	s0,28(sp)
204043ec:	1000                	addi	s0,sp,32
204043ee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204043f2:	fec42703          	lw	a4,-20(s0)
204043f6:	800017b7          	lui	a5,0x80001
204043fa:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204043fe:	00f71463          	bne	a4,a5,20404406 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404402:	479d                	li	a5,7
20404404:	a011                	j	20404408 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404406:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404408:	853e                	mv	a0,a5
2040440a:	4472                	lw	s0,28(sp)
2040440c:	6105                	addi	sp,sp,32
2040440e:	8082                	ret

20404410 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20404410:	1101                	addi	sp,sp,-32
20404412:	ce22                	sw	s0,28(sp)
20404414:	1000                	addi	s0,sp,32
20404416:	fea42623          	sw	a0,-20(s0)
2040441a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040441e:	fe842783          	lw	a5,-24(s0)
20404422:	e791                	bnez	a5,2040442e <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20404424:	800017b7          	lui	a5,0x80001
20404428:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
2040442c:	a011                	j	20404430 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
2040442e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20404430:	853e                	mv	a0,a5
20404432:	4472                	lw	s0,28(sp)
20404434:	6105                	addi	sp,sp,32
20404436:	8082                	ret

20404438 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20404438:	1101                	addi	sp,sp,-32
2040443a:	ce22                	sw	s0,28(sp)
2040443c:	1000                	addi	s0,sp,32
2040443e:	fea42623          	sw	a0,-20(s0)
20404442:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20404446:	fe842783          	lw	a5,-24(s0)
2040444a:	e399                	bnez	a5,20404450 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
2040444c:	47ad                	li	a5,11
2040444e:	a011                	j	20404452 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20404450:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20404452:	853e                	mv	a0,a5
20404454:	4472                	lw	s0,28(sp)
20404456:	6105                	addi	sp,sp,32
20404458:	8082                	ret

2040445a <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
2040445a:	7179                	addi	sp,sp,-48
2040445c:	d606                	sw	ra,44(sp)
2040445e:	d422                	sw	s0,40(sp)
20404460:	1800                	addi	s0,sp,48
20404462:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404466:	fdc42503          	lw	a0,-36(s0)
2040446a:	3735                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
2040446c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404470:	fec42703          	lw	a4,-20(s0)
20404474:	002007b7          	lui	a5,0x200
20404478:	0791                	addi	a5,a5,4
2040447a:	97ba                	add	a5,a5,a4
2040447c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
2040447e:	853e                	mv	a0,a5
20404480:	50b2                	lw	ra,44(sp)
20404482:	5422                	lw	s0,40(sp)
20404484:	6145                	addi	sp,sp,48
20404486:	8082                	ret

20404488 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404488:	7179                	addi	sp,sp,-48
2040448a:	d606                	sw	ra,44(sp)
2040448c:	d422                	sw	s0,40(sp)
2040448e:	1800                	addi	s0,sp,48
20404490:	fca42e23          	sw	a0,-36(s0)
20404494:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404498:	fdc42503          	lw	a0,-36(s0)
2040449c:	3ded                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
2040449e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204044a2:	fec42703          	lw	a4,-20(s0)
204044a6:	002007b7          	lui	a5,0x200
204044aa:	0791                	addi	a5,a5,4
204044ac:	97ba                	add	a5,a5,a4
204044ae:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204044b0:	fd842783          	lw	a5,-40(s0)
204044b4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
204044b6:	0001                	nop
204044b8:	50b2                	lw	ra,44(sp)
204044ba:	5422                	lw	s0,40(sp)
204044bc:	6145                	addi	sp,sp,48
204044be:	8082                	ret

204044c0 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
204044c0:	7179                	addi	sp,sp,-48
204044c2:	d606                	sw	ra,44(sp)
204044c4:	d422                	sw	s0,40(sp)
204044c6:	1800                	addi	s0,sp,48
204044c8:	fca42e23          	sw	a0,-36(s0)
204044cc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204044d0:	fdc42503          	lw	a0,-36(s0)
204044d4:	35c9                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
204044d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204044da:	fec42703          	lw	a4,-20(s0)
204044de:	002007b7          	lui	a5,0x200
204044e2:	97ba                	add	a5,a5,a4
204044e4:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204044e6:	fd842783          	lw	a5,-40(s0)
204044ea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204044ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204044ee:	853e                	mv	a0,a5
204044f0:	50b2                	lw	ra,44(sp)
204044f2:	5422                	lw	s0,40(sp)
204044f4:	6145                	addi	sp,sp,48
204044f6:	8082                	ret

204044f8 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
204044f8:	7179                	addi	sp,sp,-48
204044fa:	d606                	sw	ra,44(sp)
204044fc:	d422                	sw	s0,40(sp)
204044fe:	1800                	addi	s0,sp,48
20404500:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404504:	fdc42503          	lw	a0,-36(s0)
20404508:	3579                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
2040450a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040450e:	fec42703          	lw	a4,-20(s0)
20404512:	002007b7          	lui	a5,0x200
20404516:	97ba                	add	a5,a5,a4
20404518:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040451a:	853e                	mv	a0,a5
2040451c:	50b2                	lw	ra,44(sp)
2040451e:	5422                	lw	s0,40(sp)
20404520:	6145                	addi	sp,sp,48
20404522:	8082                	ret

20404524 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20404524:	7179                	addi	sp,sp,-48
20404526:	d606                	sw	ra,44(sp)
20404528:	d422                	sw	s0,40(sp)
2040452a:	1800                	addi	s0,sp,48
2040452c:	fca42e23          	sw	a0,-36(s0)
20404530:	fcb42c23          	sw	a1,-40(s0)
20404534:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20404538:	fdc42503          	lw	a0,-36(s0)
2040453c:	3da9                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
2040453e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20404542:	fdc42503          	lw	a0,-36(s0)
20404546:	354d                	jal	204043e8 <__metal_driver_sifive_plic0_max_priority>
20404548:	87aa                	mv	a5,a0
2040454a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
2040454e:	fe842783          	lw	a5,-24(s0)
20404552:	c785                	beqz	a5,2040457a <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20404554:	fd442703          	lw	a4,-44(s0)
20404558:	fe842783          	lw	a5,-24(s0)
2040455c:	00f77f63          	bgeu	a4,a5,2040457a <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404560:	fd842783          	lw	a5,-40(s0)
20404564:	078a                	slli	a5,a5,0x2
20404566:	873e                	mv	a4,a5
20404568:	fec42783          	lw	a5,-20(s0)
2040456c:	97ba                	add	a5,a5,a4
2040456e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20404570:	fd442783          	lw	a5,-44(s0)
20404574:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20404576:	4781                	li	a5,0
20404578:	a011                	j	2040457c <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
2040457a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
2040457c:	853e                	mv	a0,a5
2040457e:	50b2                	lw	ra,44(sp)
20404580:	5422                	lw	s0,40(sp)
20404582:	6145                	addi	sp,sp,48
20404584:	8082                	ret

20404586 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404586:	7179                	addi	sp,sp,-48
20404588:	d606                	sw	ra,44(sp)
2040458a:	d422                	sw	s0,40(sp)
2040458c:	1800                	addi	s0,sp,48
2040458e:	fca42e23          	sw	a0,-36(s0)
20404592:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404596:	fdc42503          	lw	a0,-36(s0)
2040459a:	3bf5                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
2040459c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204045a0:	fd842783          	lw	a5,-40(s0)
204045a4:	078a                	slli	a5,a5,0x2
204045a6:	873e                	mv	a4,a5
204045a8:	fec42783          	lw	a5,-20(s0)
204045ac:	97ba                	add	a5,a5,a4
204045ae:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204045b0:	853e                	mv	a0,a5
204045b2:	50b2                	lw	ra,44(sp)
204045b4:	5422                	lw	s0,40(sp)
204045b6:	6145                	addi	sp,sp,48
204045b8:	8082                	ret

204045ba <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204045ba:	7179                	addi	sp,sp,-48
204045bc:	d606                	sw	ra,44(sp)
204045be:	d422                	sw	s0,40(sp)
204045c0:	1800                	addi	s0,sp,48
204045c2:	fca42e23          	sw	a0,-36(s0)
204045c6:	fcb42c23          	sw	a1,-40(s0)
204045ca:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204045ce:	fdc42503          	lw	a0,-36(s0)
204045d2:	33d1                	jal	20404396 <__metal_driver_sifive_plic0_control_base>
204045d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204045d8:	fd842783          	lw	a5,-40(s0)
204045dc:	8795                	srai	a5,a5,0x5
204045de:	078a                	slli	a5,a5,0x2
204045e0:	873e                	mv	a4,a5
204045e2:	fec42783          	lw	a5,-20(s0)
204045e6:	973e                	add	a4,a4,a5
204045e8:	6789                	lui	a5,0x2
204045ea:	97ba                	add	a5,a5,a4
204045ec:	439c                	lw	a5,0(a5)
204045ee:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204045f2:	fd442783          	lw	a5,-44(s0)
204045f6:	cf81                	beqz	a5,2040460e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204045f8:	fd842783          	lw	a5,-40(s0)
204045fc:	8bfd                	andi	a5,a5,31
204045fe:	4705                	li	a4,1
20404600:	00f717b3          	sll	a5,a4,a5
20404604:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404606:	fe842783          	lw	a5,-24(s0)
2040460a:	8fd9                	or	a5,a5,a4
2040460c:	a829                	j	20404626 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040460e:	fd842783          	lw	a5,-40(s0)
20404612:	8bfd                	andi	a5,a5,31
20404614:	4705                	li	a4,1
20404616:	00f717b3          	sll	a5,a4,a5
2040461a:	fff7c793          	not	a5,a5
2040461e:	873e                	mv	a4,a5
20404620:	fe842783          	lw	a5,-24(s0)
20404624:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404626:	fd842703          	lw	a4,-40(s0)
2040462a:	8715                	srai	a4,a4,0x5
2040462c:	070a                	slli	a4,a4,0x2
2040462e:	86ba                	mv	a3,a4
20404630:	fec42703          	lw	a4,-20(s0)
20404634:	96ba                	add	a3,a3,a4
20404636:	6709                	lui	a4,0x2
20404638:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
2040463a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
2040463c:	0001                	nop
2040463e:	50b2                	lw	ra,44(sp)
20404640:	5422                	lw	s0,40(sp)
20404642:	6145                	addi	sp,sp,48
20404644:	8082                	ret

20404646 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404646:	1101                	addi	sp,sp,-32
20404648:	ce06                	sw	ra,28(sp)
2040464a:	cc22                	sw	s0,24(sp)
2040464c:	1000                	addi	s0,sp,32
2040464e:	fea42623          	sw	a0,-20(s0)
20404652:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404656:	12c00513          	li	a0,300
2040465a:	1d0010ef          	jal	ra,2040582a <metal_shutdown>

2040465e <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
2040465e:	7179                	addi	sp,sp,-48
20404660:	d606                	sw	ra,44(sp)
20404662:	d422                	sw	s0,40(sp)
20404664:	1800                	addi	s0,sp,48
20404666:	fca42e23          	sw	a0,-36(s0)
2040466a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
2040466e:	fd842783          	lw	a5,-40(s0)
20404672:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404676:	fec42503          	lw	a0,-20(s0)
2040467a:	33c5                	jal	2040445a <__metal_plic0_claim_interrupt>
2040467c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404680:	fec42503          	lw	a0,-20(s0)
20404684:	d3dff0ef          	jal	ra,204043c0 <__metal_driver_sifive_plic0_num_interrupts>
20404688:	87aa                	mv	a5,a0
2040468a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040468e:	fe842703          	lw	a4,-24(s0)
20404692:	fe442783          	lw	a5,-28(s0)
20404696:	04f77263          	bgeu	a4,a5,204046da <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2040469a:	fec42703          	lw	a4,-20(s0)
2040469e:	fe842783          	lw	a5,-24(s0)
204046a2:	078a                	slli	a5,a5,0x2
204046a4:	97ba                	add	a5,a5,a4
204046a6:	479c                	lw	a5,8(a5)
204046a8:	cb8d                	beqz	a5,204046da <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204046aa:	fec42703          	lw	a4,-20(s0)
204046ae:	fe842783          	lw	a5,-24(s0)
204046b2:	078a                	slli	a5,a5,0x2
204046b4:	97ba                	add	a5,a5,a4
204046b6:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204046ba:	fe842603          	lw	a2,-24(s0)
204046be:	fec42683          	lw	a3,-20(s0)
204046c2:	fe842703          	lw	a4,-24(s0)
204046c6:	87ba                	mv	a5,a4
204046c8:	0786                	slli	a5,a5,0x1
204046ca:	97ba                	add	a5,a5,a4
204046cc:	078e                	slli	a5,a5,0x3
204046ce:	97b6                	add	a5,a5,a3
204046d0:	0887a783          	lw	a5,136(a5)
204046d4:	85be                	mv	a1,a5
204046d6:	8532                	mv	a0,a2
204046d8:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204046da:	fe842583          	lw	a1,-24(s0)
204046de:	fec42503          	lw	a0,-20(s0)
204046e2:	335d                	jal	20404488 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204046e4:	0001                	nop
204046e6:	50b2                	lw	ra,44(sp)
204046e8:	5422                	lw	s0,40(sp)
204046ea:	6145                	addi	sp,sp,48
204046ec:	8082                	ret

204046ee <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204046ee:	7139                	addi	sp,sp,-64
204046f0:	de06                	sw	ra,60(sp)
204046f2:	dc22                	sw	s0,56(sp)
204046f4:	0080                	addi	s0,sp,64
204046f6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204046fa:	fcc42783          	lw	a5,-52(s0)
204046fe:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404702:	fe442783          	lw	a5,-28(s0)
20404706:	43dc                	lw	a5,4(a5)
20404708:	12079063          	bnez	a5,20404828 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040470c:	fe042623          	sw	zero,-20(s0)
20404710:	a221                	j	20404818 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404712:	fcc42503          	lw	a0,-52(s0)
20404716:	cabff0ef          	jal	ra,204043c0 <__metal_driver_sifive_plic0_num_interrupts>
2040471a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040471e:	fec42583          	lw	a1,-20(s0)
20404722:	fcc42503          	lw	a0,-52(s0)
20404726:	cebff0ef          	jal	ra,20404410 <__metal_driver_sifive_plic0_interrupt_parents>
2040472a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040472e:	fec42583          	lw	a1,-20(s0)
20404732:	fcc42503          	lw	a0,-52(s0)
20404736:	d03ff0ef          	jal	ra,20404438 <__metal_driver_sifive_plic0_interrupt_lines>
2040473a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040473e:	fdc42783          	lw	a5,-36(s0)
20404742:	439c                	lw	a5,0(a5)
20404744:	439c                	lw	a5,0(a5)
20404746:	fdc42503          	lw	a0,-36(s0)
2040474a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
2040474c:	fe042423          	sw	zero,-24(s0)
20404750:	a085                	j	204047b0 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404752:	4601                	li	a2,0
20404754:	fe842583          	lw	a1,-24(s0)
20404758:	fe442503          	lw	a0,-28(s0)
2040475c:	3db9                	jal	204045ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040475e:	4601                	li	a2,0
20404760:	fe842583          	lw	a1,-24(s0)
20404764:	fcc42503          	lw	a0,-52(s0)
20404768:	3b75                	jal	20404524 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2040476a:	fe442703          	lw	a4,-28(s0)
2040476e:	fe842783          	lw	a5,-24(s0)
20404772:	078a                	slli	a5,a5,0x2
20404774:	97ba                	add	a5,a5,a4
20404776:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2040477a:	fe442683          	lw	a3,-28(s0)
2040477e:	fe842703          	lw	a4,-24(s0)
20404782:	87ba                	mv	a5,a4
20404784:	0786                	slli	a5,a5,0x1
20404786:	97ba                	add	a5,a5,a4
20404788:	078e                	slli	a5,a5,0x3
2040478a:	97b6                	add	a5,a5,a3
2040478c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404790:	fe442683          	lw	a3,-28(s0)
20404794:	fe842703          	lw	a4,-24(s0)
20404798:	87ba                	mv	a5,a4
2040479a:	0786                	slli	a5,a5,0x1
2040479c:	97ba                	add	a5,a5,a4
2040479e:	078e                	slli	a5,a5,0x3
204047a0:	97b6                	add	a5,a5,a3
204047a2:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204047a6:	fe842783          	lw	a5,-24(s0)
204047aa:	0785                	addi	a5,a5,1
204047ac:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204047b0:	fe842703          	lw	a4,-24(s0)
204047b4:	fe042783          	lw	a5,-32(s0)
204047b8:	f8f74de3          	blt	a4,a5,20404752 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204047bc:	4581                	li	a1,0
204047be:	fcc42503          	lw	a0,-52(s0)
204047c2:	cffff0ef          	jal	ra,204044c0 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204047c6:	fdc42783          	lw	a5,-36(s0)
204047ca:	439c                	lw	a5,0(a5)
204047cc:	4fdc                	lw	a5,28(a5)
204047ce:	fe442683          	lw	a3,-28(s0)
204047d2:	4601                	li	a2,0
204047d4:	fd842583          	lw	a1,-40(s0)
204047d8:	fdc42503          	lw	a0,-36(s0)
204047dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204047de:	fdc42783          	lw	a5,-36(s0)
204047e2:	439c                	lw	a5,0(a5)
204047e4:	4fd8                	lw	a4,28(a5)
204047e6:	fe442683          	lw	a3,-28(s0)
204047ea:	204047b7          	lui	a5,0x20404
204047ee:	65e78613          	addi	a2,a5,1630 # 2040465e <__metal_plic0_handler>
204047f2:	fd842583          	lw	a1,-40(s0)
204047f6:	fdc42503          	lw	a0,-36(s0)
204047fa:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204047fc:	fdc42783          	lw	a5,-36(s0)
20404800:	439c                	lw	a5,0(a5)
20404802:	53dc                	lw	a5,36(a5)
20404804:	fd842583          	lw	a1,-40(s0)
20404808:	fdc42503          	lw	a0,-36(s0)
2040480c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040480e:	fec42783          	lw	a5,-20(s0)
20404812:	0785                	addi	a5,a5,1
20404814:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404818:	fec42783          	lw	a5,-20(s0)
2040481c:	eef05be3          	blez	a5,20404712 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404820:	fe442783          	lw	a5,-28(s0)
20404824:	4705                	li	a4,1
20404826:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404828:	0001                	nop
2040482a:	50f2                	lw	ra,60(sp)
2040482c:	5462                	lw	s0,56(sp)
2040482e:	6121                	addi	sp,sp,64
20404830:	8082                	ret

20404832 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404832:	7179                	addi	sp,sp,-48
20404834:	d606                	sw	ra,44(sp)
20404836:	d422                	sw	s0,40(sp)
20404838:	1800                	addi	s0,sp,48
2040483a:	fca42e23          	sw	a0,-36(s0)
2040483e:	fcb42c23          	sw	a1,-40(s0)
20404842:	fcc42a23          	sw	a2,-44(s0)
20404846:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040484a:	fdc42783          	lw	a5,-36(s0)
2040484e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404852:	fdc42503          	lw	a0,-36(s0)
20404856:	b6bff0ef          	jal	ra,204043c0 <__metal_driver_sifive_plic0_num_interrupts>
2040485a:	872a                	mv	a4,a0
2040485c:	fd842783          	lw	a5,-40(s0)
20404860:	00e7c463          	blt	a5,a4,20404868 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404864:	57fd                	li	a5,-1
20404866:	a051                	j	204048ea <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404868:	fd442783          	lw	a5,-44(s0)
2040486c:	cf9d                	beqz	a5,204048aa <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040486e:	4609                	li	a2,2
20404870:	fd842583          	lw	a1,-40(s0)
20404874:	fdc42503          	lw	a0,-36(s0)
20404878:	cadff0ef          	jal	ra,20404524 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2040487c:	fec42703          	lw	a4,-20(s0)
20404880:	fd842783          	lw	a5,-40(s0)
20404884:	078a                	slli	a5,a5,0x2
20404886:	97ba                	add	a5,a5,a4
20404888:	fd442703          	lw	a4,-44(s0)
2040488c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040488e:	fec42683          	lw	a3,-20(s0)
20404892:	fd842703          	lw	a4,-40(s0)
20404896:	87ba                	mv	a5,a4
20404898:	0786                	slli	a5,a5,0x1
2040489a:	97ba                	add	a5,a5,a4
2040489c:	078e                	slli	a5,a5,0x3
2040489e:	97b6                	add	a5,a5,a3
204048a0:	fd042703          	lw	a4,-48(s0)
204048a4:	08e7a423          	sw	a4,136(a5)
204048a8:	a081                	j	204048e8 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204048aa:	4605                	li	a2,1
204048ac:	fd842583          	lw	a1,-40(s0)
204048b0:	fdc42503          	lw	a0,-36(s0)
204048b4:	c71ff0ef          	jal	ra,20404524 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204048b8:	fec42703          	lw	a4,-20(s0)
204048bc:	fd842783          	lw	a5,-40(s0)
204048c0:	078a                	slli	a5,a5,0x2
204048c2:	97ba                	add	a5,a5,a4
204048c4:	20404737          	lui	a4,0x20404
204048c8:	64670713          	addi	a4,a4,1606 # 20404646 <__metal_plic0_default_handler>
204048cc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204048ce:	fec42683          	lw	a3,-20(s0)
204048d2:	fd842703          	lw	a4,-40(s0)
204048d6:	87ba                	mv	a5,a4
204048d8:	0786                	slli	a5,a5,0x1
204048da:	97ba                	add	a5,a5,a4
204048dc:	078e                	slli	a5,a5,0x3
204048de:	97b6                	add	a5,a5,a3
204048e0:	fd042703          	lw	a4,-48(s0)
204048e4:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204048e8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204048ea:	853e                	mv	a0,a5
204048ec:	50b2                	lw	ra,44(sp)
204048ee:	5422                	lw	s0,40(sp)
204048f0:	6145                	addi	sp,sp,48
204048f2:	8082                	ret

204048f4 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204048f4:	7179                	addi	sp,sp,-48
204048f6:	d606                	sw	ra,44(sp)
204048f8:	d422                	sw	s0,40(sp)
204048fa:	1800                	addi	s0,sp,48
204048fc:	fca42e23          	sw	a0,-36(s0)
20404900:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404904:	fdc42783          	lw	a5,-36(s0)
20404908:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040490c:	fdc42503          	lw	a0,-36(s0)
20404910:	ab1ff0ef          	jal	ra,204043c0 <__metal_driver_sifive_plic0_num_interrupts>
20404914:	872a                	mv	a4,a0
20404916:	fd842783          	lw	a5,-40(s0)
2040491a:	00e7c463          	blt	a5,a4,20404922 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040491e:	57fd                	li	a5,-1
20404920:	a809                	j	20404932 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404922:	4605                	li	a2,1
20404924:	fd842583          	lw	a1,-40(s0)
20404928:	fec42503          	lw	a0,-20(s0)
2040492c:	c8fff0ef          	jal	ra,204045ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
20404930:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404932:	853e                	mv	a0,a5
20404934:	50b2                	lw	ra,44(sp)
20404936:	5422                	lw	s0,40(sp)
20404938:	6145                	addi	sp,sp,48
2040493a:	8082                	ret

2040493c <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2040493c:	7179                	addi	sp,sp,-48
2040493e:	d606                	sw	ra,44(sp)
20404940:	d422                	sw	s0,40(sp)
20404942:	1800                	addi	s0,sp,48
20404944:	fca42e23          	sw	a0,-36(s0)
20404948:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040494c:	fdc42783          	lw	a5,-36(s0)
20404950:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404954:	fdc42503          	lw	a0,-36(s0)
20404958:	a69ff0ef          	jal	ra,204043c0 <__metal_driver_sifive_plic0_num_interrupts>
2040495c:	872a                	mv	a4,a0
2040495e:	fd842783          	lw	a5,-40(s0)
20404962:	00e7c463          	blt	a5,a4,2040496a <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404966:	57fd                	li	a5,-1
20404968:	a809                	j	2040497a <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
2040496a:	4601                	li	a2,0
2040496c:	fd842583          	lw	a1,-40(s0)
20404970:	fec42503          	lw	a0,-20(s0)
20404974:	c47ff0ef          	jal	ra,204045ba <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404978:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
2040497a:	853e                	mv	a0,a5
2040497c:	50b2                	lw	ra,44(sp)
2040497e:	5422                	lw	s0,40(sp)
20404980:	6145                	addi	sp,sp,48
20404982:	8082                	ret

20404984 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404984:	1101                	addi	sp,sp,-32
20404986:	ce22                	sw	s0,28(sp)
20404988:	1000                	addi	s0,sp,32
2040498a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040498e:	fec42703          	lw	a4,-20(s0)
20404992:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404996:	00f71563          	bne	a4,a5,204049a0 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040499a:	100127b7          	lui	a5,0x10012
2040499e:	a011                	j	204049a2 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
204049a0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
204049a2:	853e                	mv	a0,a5
204049a4:	4472                	lw	s0,28(sp)
204049a6:	6105                	addi	sp,sp,32
204049a8:	8082                	ret

204049aa <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204049aa:	1101                	addi	sp,sp,-32
204049ac:	ce22                	sw	s0,28(sp)
204049ae:	1000                	addi	s0,sp,32
204049b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204049b4:	fec42703          	lw	a4,-20(s0)
204049b8:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204049bc:	00f71763          	bne	a4,a5,204049ca <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204049c0:	800017b7          	lui	a5,0x80001
204049c4:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204049c8:	a011                	j	204049cc <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204049ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204049cc:	853e                	mv	a0,a5
204049ce:	4472                	lw	s0,28(sp)
204049d0:	6105                	addi	sp,sp,32
204049d2:	8082                	ret

204049d4 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204049d4:	1101                	addi	sp,sp,-32
204049d6:	ce22                	sw	s0,28(sp)
204049d8:	1000                	addi	s0,sp,32
204049da:	fea42623          	sw	a0,-20(s0)
204049de:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204049e2:	fec42703          	lw	a4,-20(s0)
204049e6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204049ea:	00f71763          	bne	a4,a5,204049f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204049ee:	fe842783          	lw	a5,-24(s0)
204049f2:	e399                	bnez	a5,204049f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204049f4:	479d                	li	a5,7
204049f6:	a269                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204049f8:	fec42703          	lw	a4,-20(s0)
204049fc:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a00:	00f71963          	bne	a4,a5,20404a12 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404a04:	fe842703          	lw	a4,-24(s0)
20404a08:	4785                	li	a5,1
20404a0a:	00f71463          	bne	a4,a5,20404a12 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
20404a0e:	47a1                	li	a5,8
20404a10:	aa85                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404a12:	fec42703          	lw	a4,-20(s0)
20404a16:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a1a:	00f71963          	bne	a4,a5,20404a2c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
20404a1e:	fe842703          	lw	a4,-24(s0)
20404a22:	4789                	li	a5,2
20404a24:	00f71463          	bne	a4,a5,20404a2c <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404a28:	47a5                	li	a5,9
20404a2a:	aa99                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404a2c:	fec42703          	lw	a4,-20(s0)
20404a30:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a34:	00f71963          	bne	a4,a5,20404a46 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404a38:	fe842703          	lw	a4,-24(s0)
20404a3c:	478d                	li	a5,3
20404a3e:	00f71463          	bne	a4,a5,20404a46 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404a42:	47a9                	li	a5,10
20404a44:	aa35                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404a46:	fec42703          	lw	a4,-20(s0)
20404a4a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a4e:	00f71963          	bne	a4,a5,20404a60 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404a52:	fe842703          	lw	a4,-24(s0)
20404a56:	4791                	li	a5,4
20404a58:	00f71463          	bne	a4,a5,20404a60 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
20404a5c:	47ad                	li	a5,11
20404a5e:	a20d                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404a60:	fec42703          	lw	a4,-20(s0)
20404a64:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a68:	00f71963          	bne	a4,a5,20404a7a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
20404a6c:	fe842703          	lw	a4,-24(s0)
20404a70:	4795                	li	a5,5
20404a72:	00f71463          	bne	a4,a5,20404a7a <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404a76:	47b1                	li	a5,12
20404a78:	a221                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404a7a:	fec42703          	lw	a4,-20(s0)
20404a7e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a82:	00f71963          	bne	a4,a5,20404a94 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404a86:	fe842703          	lw	a4,-24(s0)
20404a8a:	4799                	li	a5,6
20404a8c:	00f71463          	bne	a4,a5,20404a94 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404a90:	47b5                	li	a5,13
20404a92:	a0fd                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404a94:	fec42703          	lw	a4,-20(s0)
20404a98:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404a9c:	00f71963          	bne	a4,a5,20404aae <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
20404aa0:	fe842703          	lw	a4,-24(s0)
20404aa4:	479d                	li	a5,7
20404aa6:	00f71463          	bne	a4,a5,20404aae <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404aaa:	47b9                	li	a5,14
20404aac:	a8d1                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20404aae:	fec42703          	lw	a4,-20(s0)
20404ab2:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ab6:	00f71963          	bne	a4,a5,20404ac8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20404aba:	fe842703          	lw	a4,-24(s0)
20404abe:	47a1                	li	a5,8
20404ac0:	00f71463          	bne	a4,a5,20404ac8 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404ac4:	47bd                	li	a5,15
20404ac6:	a86d                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404ac8:	fec42703          	lw	a4,-20(s0)
20404acc:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404ad0:	00f71963          	bne	a4,a5,20404ae2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404ad4:	fe842703          	lw	a4,-24(s0)
20404ad8:	47a5                	li	a5,9
20404ada:	00f71463          	bne	a4,a5,20404ae2 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
20404ade:	47c1                	li	a5,16
20404ae0:	a045                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404ae2:	fec42703          	lw	a4,-20(s0)
20404ae6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404aea:	00f71963          	bne	a4,a5,20404afc <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
20404aee:	fe842703          	lw	a4,-24(s0)
20404af2:	47a9                	li	a5,10
20404af4:	00f71463          	bne	a4,a5,20404afc <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404af8:	47c5                	li	a5,17
20404afa:	a059                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20404afc:	fec42703          	lw	a4,-20(s0)
20404b00:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404b04:	00f71963          	bne	a4,a5,20404b16 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404b08:	fe842703          	lw	a4,-24(s0)
20404b0c:	47ad                	li	a5,11
20404b0e:	00f71463          	bne	a4,a5,20404b16 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404b12:	47c9                	li	a5,18
20404b14:	a0b5                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404b16:	fec42703          	lw	a4,-20(s0)
20404b1a:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404b1e:	00f71963          	bne	a4,a5,20404b30 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404b22:	fe842703          	lw	a4,-24(s0)
20404b26:	47b1                	li	a5,12
20404b28:	00f71463          	bne	a4,a5,20404b30 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
20404b2c:	47cd                	li	a5,19
20404b2e:	a889                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20404b30:	fec42703          	lw	a4,-20(s0)
20404b34:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404b38:	00f71963          	bne	a4,a5,20404b4a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
20404b3c:	fe842703          	lw	a4,-24(s0)
20404b40:	47b5                	li	a5,13
20404b42:	00f71463          	bne	a4,a5,20404b4a <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404b46:	47d1                	li	a5,20
20404b48:	a825                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404b4a:	fec42703          	lw	a4,-20(s0)
20404b4e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404b52:	00f71963          	bne	a4,a5,20404b64 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404b56:	fe842703          	lw	a4,-24(s0)
20404b5a:	47b9                	li	a5,14
20404b5c:	00f71463          	bne	a4,a5,20404b64 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
20404b60:	47d5                	li	a5,21
20404b62:	a839                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404b64:	fec42703          	lw	a4,-20(s0)
20404b68:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404b6c:	00f71963          	bne	a4,a5,20404b7e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
20404b70:	fe842703          	lw	a4,-24(s0)
20404b74:	47bd                	li	a5,15
20404b76:	00f71463          	bne	a4,a5,20404b7e <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20404b7a:	47d9                	li	a5,22
20404b7c:	a011                	j	20404b80 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
20404b7e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20404b80:	853e                	mv	a0,a5
20404b82:	4472                	lw	s0,28(sp)
20404b84:	6105                	addi	sp,sp,32
20404b86:	8082                	ret

20404b88 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404b88:	7179                	addi	sp,sp,-48
20404b8a:	d606                	sw	ra,44(sp)
20404b8c:	d422                	sw	s0,40(sp)
20404b8e:	1800                	addi	s0,sp,48
20404b90:	fca42e23          	sw	a0,-36(s0)
20404b94:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b98:	fdc42503          	lw	a0,-36(s0)
20404b9c:	de9ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404ba0:	87aa                	mv	a5,a0
20404ba2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404ba6:	fec42783          	lw	a5,-20(s0)
20404baa:	0791                	addi	a5,a5,4
20404bac:	4398                	lw	a4,0(a5)
20404bae:	fd842783          	lw	a5,-40(s0)
20404bb2:	fec42683          	lw	a3,-20(s0)
20404bb6:	0691                	addi	a3,a3,4
20404bb8:	8fd9                	or	a5,a5,a4
20404bba:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404bbc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
20404bbe:	853e                	mv	a0,a5
20404bc0:	50b2                	lw	ra,44(sp)
20404bc2:	5422                	lw	s0,40(sp)
20404bc4:	6145                	addi	sp,sp,48
20404bc6:	8082                	ret

20404bc8 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404bc8:	7179                	addi	sp,sp,-48
20404bca:	d606                	sw	ra,44(sp)
20404bcc:	d422                	sw	s0,40(sp)
20404bce:	1800                	addi	s0,sp,48
20404bd0:	fca42e23          	sw	a0,-36(s0)
20404bd4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bd8:	fdc42503          	lw	a0,-36(s0)
20404bdc:	da9ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404be0:	87aa                	mv	a5,a0
20404be2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404be6:	fec42783          	lw	a5,-20(s0)
20404bea:	0791                	addi	a5,a5,4
20404bec:	439c                	lw	a5,0(a5)
20404bee:	fd842703          	lw	a4,-40(s0)
20404bf2:	fff74713          	not	a4,a4
20404bf6:	86ba                	mv	a3,a4
20404bf8:	fec42703          	lw	a4,-20(s0)
20404bfc:	0711                	addi	a4,a4,4
20404bfe:	8ff5                	and	a5,a5,a3
20404c00:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404c02:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404c04:	853e                	mv	a0,a5
20404c06:	50b2                	lw	ra,44(sp)
20404c08:	5422                	lw	s0,40(sp)
20404c0a:	6145                	addi	sp,sp,48
20404c0c:	8082                	ret

20404c0e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404c0e:	7179                	addi	sp,sp,-48
20404c10:	d606                	sw	ra,44(sp)
20404c12:	d422                	sw	s0,40(sp)
20404c14:	1800                	addi	s0,sp,48
20404c16:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c1a:	fdc42503          	lw	a0,-36(s0)
20404c1e:	d67ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404c22:	87aa                	mv	a5,a0
20404c24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404c28:	fec42783          	lw	a5,-20(s0)
20404c2c:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404c2e:	853e                	mv	a0,a5
20404c30:	50b2                	lw	ra,44(sp)
20404c32:	5422                	lw	s0,40(sp)
20404c34:	6145                	addi	sp,sp,48
20404c36:	8082                	ret

20404c38 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404c38:	7179                	addi	sp,sp,-48
20404c3a:	d606                	sw	ra,44(sp)
20404c3c:	d422                	sw	s0,40(sp)
20404c3e:	1800                	addi	s0,sp,48
20404c40:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c44:	fdc42503          	lw	a0,-36(s0)
20404c48:	d3dff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404c4c:	87aa                	mv	a5,a0
20404c4e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404c52:	fec42783          	lw	a5,-20(s0)
20404c56:	07b1                	addi	a5,a5,12
20404c58:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404c5a:	853e                	mv	a0,a5
20404c5c:	50b2                	lw	ra,44(sp)
20404c5e:	5422                	lw	s0,40(sp)
20404c60:	6145                	addi	sp,sp,48
20404c62:	8082                	ret

20404c64 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404c64:	7179                	addi	sp,sp,-48
20404c66:	d606                	sw	ra,44(sp)
20404c68:	d422                	sw	s0,40(sp)
20404c6a:	1800                	addi	s0,sp,48
20404c6c:	fca42e23          	sw	a0,-36(s0)
20404c70:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c74:	fdc42503          	lw	a0,-36(s0)
20404c78:	d0dff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404c7c:	87aa                	mv	a5,a0
20404c7e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404c82:	fec42783          	lw	a5,-20(s0)
20404c86:	07a1                	addi	a5,a5,8
20404c88:	439c                	lw	a5,0(a5)
20404c8a:	fd842703          	lw	a4,-40(s0)
20404c8e:	fff74713          	not	a4,a4
20404c92:	86ba                	mv	a3,a4
20404c94:	fec42703          	lw	a4,-20(s0)
20404c98:	0721                	addi	a4,a4,8
20404c9a:	8ff5                	and	a5,a5,a3
20404c9c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404c9e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404ca0:	853e                	mv	a0,a5
20404ca2:	50b2                	lw	ra,44(sp)
20404ca4:	5422                	lw	s0,40(sp)
20404ca6:	6145                	addi	sp,sp,48
20404ca8:	8082                	ret

20404caa <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404caa:	7179                	addi	sp,sp,-48
20404cac:	d606                	sw	ra,44(sp)
20404cae:	d422                	sw	s0,40(sp)
20404cb0:	1800                	addi	s0,sp,48
20404cb2:	fca42e23          	sw	a0,-36(s0)
20404cb6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404cba:	fdc42503          	lw	a0,-36(s0)
20404cbe:	cc7ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404cc2:	87aa                	mv	a5,a0
20404cc4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404cc8:	fec42783          	lw	a5,-20(s0)
20404ccc:	07a1                	addi	a5,a5,8
20404cce:	4398                	lw	a4,0(a5)
20404cd0:	fd842783          	lw	a5,-40(s0)
20404cd4:	fec42683          	lw	a3,-20(s0)
20404cd8:	06a1                	addi	a3,a3,8
20404cda:	8fd9                	or	a5,a5,a4
20404cdc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404cde:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404ce0:	853e                	mv	a0,a5
20404ce2:	50b2                	lw	ra,44(sp)
20404ce4:	5422                	lw	s0,40(sp)
20404ce6:	6145                	addi	sp,sp,48
20404ce8:	8082                	ret

20404cea <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404cea:	7179                	addi	sp,sp,-48
20404cec:	d606                	sw	ra,44(sp)
20404cee:	d422                	sw	s0,40(sp)
20404cf0:	1800                	addi	s0,sp,48
20404cf2:	fca42e23          	sw	a0,-36(s0)
20404cf6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404cfa:	fdc42503          	lw	a0,-36(s0)
20404cfe:	c87ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404d02:	87aa                	mv	a5,a0
20404d04:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404d08:	fec42783          	lw	a5,-20(s0)
20404d0c:	07b1                	addi	a5,a5,12
20404d0e:	4398                	lw	a4,0(a5)
20404d10:	fd842783          	lw	a5,-40(s0)
20404d14:	fec42683          	lw	a3,-20(s0)
20404d18:	06b1                	addi	a3,a3,12
20404d1a:	8fd9                	or	a5,a5,a4
20404d1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404d1e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404d20:	853e                	mv	a0,a5
20404d22:	50b2                	lw	ra,44(sp)
20404d24:	5422                	lw	s0,40(sp)
20404d26:	6145                	addi	sp,sp,48
20404d28:	8082                	ret

20404d2a <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404d2a:	7179                	addi	sp,sp,-48
20404d2c:	d606                	sw	ra,44(sp)
20404d2e:	d422                	sw	s0,40(sp)
20404d30:	1800                	addi	s0,sp,48
20404d32:	fca42e23          	sw	a0,-36(s0)
20404d36:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d3a:	fdc42503          	lw	a0,-36(s0)
20404d3e:	c47ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404d42:	87aa                	mv	a5,a0
20404d44:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404d48:	fec42783          	lw	a5,-20(s0)
20404d4c:	07b1                	addi	a5,a5,12
20404d4e:	439c                	lw	a5,0(a5)
20404d50:	fd842703          	lw	a4,-40(s0)
20404d54:	fff74713          	not	a4,a4
20404d58:	86ba                	mv	a3,a4
20404d5a:	fec42703          	lw	a4,-20(s0)
20404d5e:	0731                	addi	a4,a4,12
20404d60:	8ff5                	and	a5,a5,a3
20404d62:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404d64:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404d66:	853e                	mv	a0,a5
20404d68:	50b2                	lw	ra,44(sp)
20404d6a:	5422                	lw	s0,40(sp)
20404d6c:	6145                	addi	sp,sp,48
20404d6e:	8082                	ret

20404d70 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404d70:	7179                	addi	sp,sp,-48
20404d72:	d606                	sw	ra,44(sp)
20404d74:	d422                	sw	s0,40(sp)
20404d76:	1800                	addi	s0,sp,48
20404d78:	fca42e23          	sw	a0,-36(s0)
20404d7c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d80:	fdc42503          	lw	a0,-36(s0)
20404d84:	c01ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404d88:	87aa                	mv	a5,a0
20404d8a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404d8e:	fec42783          	lw	a5,-20(s0)
20404d92:	07b1                	addi	a5,a5,12
20404d94:	4398                	lw	a4,0(a5)
20404d96:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404d9a:	fec42683          	lw	a3,-20(s0)
20404d9e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404da0:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404da2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404da4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404da6:	853e                	mv	a0,a5
20404da8:	50b2                	lw	ra,44(sp)
20404daa:	5422                	lw	s0,40(sp)
20404dac:	6145                	addi	sp,sp,48
20404dae:	8082                	ret

20404db0 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404db0:	7179                	addi	sp,sp,-48
20404db2:	d606                	sw	ra,44(sp)
20404db4:	d422                	sw	s0,40(sp)
20404db6:	1800                	addi	s0,sp,48
20404db8:	fca42e23          	sw	a0,-36(s0)
20404dbc:	fcb42c23          	sw	a1,-40(s0)
20404dc0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404dc4:	fdc42503          	lw	a0,-36(s0)
20404dc8:	bbdff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404dcc:	87aa                	mv	a5,a0
20404dce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404dd2:	fec42783          	lw	a5,-20(s0)
20404dd6:	03c78793          	addi	a5,a5,60
20404dda:	439c                	lw	a5,0(a5)
20404ddc:	fd842703          	lw	a4,-40(s0)
20404de0:	fff74713          	not	a4,a4
20404de4:	86ba                	mv	a3,a4
20404de6:	fec42703          	lw	a4,-20(s0)
20404dea:	03c70713          	addi	a4,a4,60
20404dee:	8ff5                	and	a5,a5,a3
20404df0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404df2:	fec42783          	lw	a5,-20(s0)
20404df6:	03878793          	addi	a5,a5,56
20404dfa:	4398                	lw	a4,0(a5)
20404dfc:	fd442783          	lw	a5,-44(s0)
20404e00:	fec42683          	lw	a3,-20(s0)
20404e04:	03868693          	addi	a3,a3,56
20404e08:	8fd9                	or	a5,a5,a4
20404e0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404e0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404e0e:	853e                	mv	a0,a5
20404e10:	50b2                	lw	ra,44(sp)
20404e12:	5422                	lw	s0,40(sp)
20404e14:	6145                	addi	sp,sp,48
20404e16:	8082                	ret

20404e18 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404e18:	7179                	addi	sp,sp,-48
20404e1a:	d606                	sw	ra,44(sp)
20404e1c:	d422                	sw	s0,40(sp)
20404e1e:	1800                	addi	s0,sp,48
20404e20:	fca42e23          	sw	a0,-36(s0)
20404e24:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404e28:	fdc42503          	lw	a0,-36(s0)
20404e2c:	b59ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404e30:	87aa                	mv	a5,a0
20404e32:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404e36:	fec42783          	lw	a5,-20(s0)
20404e3a:	03878793          	addi	a5,a5,56
20404e3e:	439c                	lw	a5,0(a5)
20404e40:	fd842703          	lw	a4,-40(s0)
20404e44:	fff74713          	not	a4,a4
20404e48:	86ba                	mv	a3,a4
20404e4a:	fec42703          	lw	a4,-20(s0)
20404e4e:	03870713          	addi	a4,a4,56
20404e52:	8ff5                	and	a5,a5,a3
20404e54:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404e56:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404e58:	853e                	mv	a0,a5
20404e5a:	50b2                	lw	ra,44(sp)
20404e5c:	5422                	lw	s0,40(sp)
20404e5e:	6145                	addi	sp,sp,48
20404e60:	8082                	ret

20404e62 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404e62:	7179                	addi	sp,sp,-48
20404e64:	d606                	sw	ra,44(sp)
20404e66:	d422                	sw	s0,40(sp)
20404e68:	1800                	addi	s0,sp,48
20404e6a:	fca42e23          	sw	a0,-36(s0)
20404e6e:	fcb42c23          	sw	a1,-40(s0)
20404e72:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404e76:	fdc42503          	lw	a0,-36(s0)
20404e7a:	b0bff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20404e7e:	87aa                	mv	a5,a0
20404e80:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404e84:	fd442703          	lw	a4,-44(s0)
20404e88:	479d                	li	a5,7
20404e8a:	1ce7e963          	bltu	a5,a4,2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404e8e:	fd442783          	lw	a5,-44(s0)
20404e92:	00279713          	slli	a4,a5,0x2
20404e96:	204067b7          	lui	a5,0x20406
20404e9a:	e4c78793          	addi	a5,a5,-436 # 20405e4c <__metal_driver_vtable_riscv_plic0+0x4c>
20404e9e:	97ba                	add	a5,a5,a4
20404ea0:	439c                	lw	a5,0(a5)
20404ea2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404ea4:	fec42783          	lw	a5,-20(s0)
20404ea8:	07e1                	addi	a5,a5,24
20404eaa:	439c                	lw	a5,0(a5)
20404eac:	fd842703          	lw	a4,-40(s0)
20404eb0:	fff74713          	not	a4,a4
20404eb4:	86ba                	mv	a3,a4
20404eb6:	fec42703          	lw	a4,-20(s0)
20404eba:	0761                	addi	a4,a4,24
20404ebc:	8ff5                	and	a5,a5,a3
20404ebe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404ec0:	fec42783          	lw	a5,-20(s0)
20404ec4:	02078793          	addi	a5,a5,32
20404ec8:	439c                	lw	a5,0(a5)
20404eca:	fd842703          	lw	a4,-40(s0)
20404ece:	fff74713          	not	a4,a4
20404ed2:	86ba                	mv	a3,a4
20404ed4:	fec42703          	lw	a4,-20(s0)
20404ed8:	02070713          	addi	a4,a4,32
20404edc:	8ff5                	and	a5,a5,a3
20404ede:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404ee0:	fec42783          	lw	a5,-20(s0)
20404ee4:	02878793          	addi	a5,a5,40
20404ee8:	439c                	lw	a5,0(a5)
20404eea:	fd842703          	lw	a4,-40(s0)
20404eee:	fff74713          	not	a4,a4
20404ef2:	86ba                	mv	a3,a4
20404ef4:	fec42703          	lw	a4,-20(s0)
20404ef8:	02870713          	addi	a4,a4,40
20404efc:	8ff5                	and	a5,a5,a3
20404efe:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404f00:	fec42783          	lw	a5,-20(s0)
20404f04:	03078793          	addi	a5,a5,48
20404f08:	439c                	lw	a5,0(a5)
20404f0a:	fd842703          	lw	a4,-40(s0)
20404f0e:	fff74713          	not	a4,a4
20404f12:	86ba                	mv	a3,a4
20404f14:	fec42703          	lw	a4,-20(s0)
20404f18:	03070713          	addi	a4,a4,48
20404f1c:	8ff5                	and	a5,a5,a3
20404f1e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404f20:	aa35                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404f22:	fec42783          	lw	a5,-20(s0)
20404f26:	07e1                	addi	a5,a5,24
20404f28:	4398                	lw	a4,0(a5)
20404f2a:	fd842783          	lw	a5,-40(s0)
20404f2e:	fec42683          	lw	a3,-20(s0)
20404f32:	06e1                	addi	a3,a3,24
20404f34:	8fd9                	or	a5,a5,a4
20404f36:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404f38:	a215                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404f3a:	fec42783          	lw	a5,-20(s0)
20404f3e:	02078793          	addi	a5,a5,32
20404f42:	4398                	lw	a4,0(a5)
20404f44:	fd842783          	lw	a5,-40(s0)
20404f48:	fec42683          	lw	a3,-20(s0)
20404f4c:	02068693          	addi	a3,a3,32
20404f50:	8fd9                	or	a5,a5,a4
20404f52:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404f54:	a221                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404f56:	fec42783          	lw	a5,-20(s0)
20404f5a:	07e1                	addi	a5,a5,24
20404f5c:	4398                	lw	a4,0(a5)
20404f5e:	fd842783          	lw	a5,-40(s0)
20404f62:	fec42683          	lw	a3,-20(s0)
20404f66:	06e1                	addi	a3,a3,24
20404f68:	8fd9                	or	a5,a5,a4
20404f6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404f6c:	fec42783          	lw	a5,-20(s0)
20404f70:	02078793          	addi	a5,a5,32
20404f74:	4398                	lw	a4,0(a5)
20404f76:	fd842783          	lw	a5,-40(s0)
20404f7a:	fec42683          	lw	a3,-20(s0)
20404f7e:	02068693          	addi	a3,a3,32
20404f82:	8fd9                	or	a5,a5,a4
20404f84:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404f86:	a8d9                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404f88:	fec42783          	lw	a5,-20(s0)
20404f8c:	02878793          	addi	a5,a5,40
20404f90:	4398                	lw	a4,0(a5)
20404f92:	fd842783          	lw	a5,-40(s0)
20404f96:	fec42683          	lw	a3,-20(s0)
20404f9a:	02868693          	addi	a3,a3,40
20404f9e:	8fd9                	or	a5,a5,a4
20404fa0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404fa2:	a86d                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404fa4:	fec42783          	lw	a5,-20(s0)
20404fa8:	03078793          	addi	a5,a5,48
20404fac:	4398                	lw	a4,0(a5)
20404fae:	fd842783          	lw	a5,-40(s0)
20404fb2:	fec42683          	lw	a3,-20(s0)
20404fb6:	03068693          	addi	a3,a3,48
20404fba:	8fd9                	or	a5,a5,a4
20404fbc:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404fbe:	a879                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404fc0:	fec42783          	lw	a5,-20(s0)
20404fc4:	02878793          	addi	a5,a5,40
20404fc8:	4398                	lw	a4,0(a5)
20404fca:	fd842783          	lw	a5,-40(s0)
20404fce:	fec42683          	lw	a3,-20(s0)
20404fd2:	02868693          	addi	a3,a3,40
20404fd6:	8fd9                	or	a5,a5,a4
20404fd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404fda:	fec42783          	lw	a5,-20(s0)
20404fde:	03078793          	addi	a5,a5,48
20404fe2:	4398                	lw	a4,0(a5)
20404fe4:	fd842783          	lw	a5,-40(s0)
20404fe8:	fec42683          	lw	a3,-20(s0)
20404fec:	03068693          	addi	a3,a3,48
20404ff0:	8fd9                	or	a5,a5,a4
20404ff2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404ff4:	a0a5                	j	2040505c <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404ff6:	fec42783          	lw	a5,-20(s0)
20404ffa:	07e1                	addi	a5,a5,24
20404ffc:	4398                	lw	a4,0(a5)
20404ffe:	fd842783          	lw	a5,-40(s0)
20405002:	fec42683          	lw	a3,-20(s0)
20405006:	06e1                	addi	a3,a3,24
20405008:	8fd9                	or	a5,a5,a4
2040500a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
2040500c:	fec42783          	lw	a5,-20(s0)
20405010:	02078793          	addi	a5,a5,32
20405014:	4398                	lw	a4,0(a5)
20405016:	fd842783          	lw	a5,-40(s0)
2040501a:	fec42683          	lw	a3,-20(s0)
2040501e:	02068693          	addi	a3,a3,32
20405022:	8fd9                	or	a5,a5,a4
20405024:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20405026:	fec42783          	lw	a5,-20(s0)
2040502a:	02878793          	addi	a5,a5,40
2040502e:	4398                	lw	a4,0(a5)
20405030:	fd842783          	lw	a5,-40(s0)
20405034:	fec42683          	lw	a3,-20(s0)
20405038:	02868693          	addi	a3,a3,40
2040503c:	8fd9                	or	a5,a5,a4
2040503e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20405040:	fec42783          	lw	a5,-20(s0)
20405044:	03078793          	addi	a5,a5,48
20405048:	4398                	lw	a4,0(a5)
2040504a:	fd842783          	lw	a5,-40(s0)
2040504e:	fec42683          	lw	a3,-20(s0)
20405052:	03068693          	addi	a3,a3,48
20405056:	8fd9                	or	a5,a5,a4
20405058:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
2040505a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
2040505c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
2040505e:	853e                	mv	a0,a5
20405060:	50b2                	lw	ra,44(sp)
20405062:	5422                	lw	s0,40(sp)
20405064:	6145                	addi	sp,sp,48
20405066:	8082                	ret

20405068 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20405068:	7179                	addi	sp,sp,-48
2040506a:	d606                	sw	ra,44(sp)
2040506c:	d422                	sw	s0,40(sp)
2040506e:	1800                	addi	s0,sp,48
20405070:	fca42e23          	sw	a0,-36(s0)
20405074:	fcb42c23          	sw	a1,-40(s0)
20405078:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040507c:	fdc42503          	lw	a0,-36(s0)
20405080:	905ff0ef          	jal	ra,20404984 <__metal_driver_sifive_gpio0_base>
20405084:	87aa                	mv	a5,a0
20405086:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
2040508a:	fd442703          	lw	a4,-44(s0)
2040508e:	479d                	li	a5,7
20405090:	14e7ea63          	bltu	a5,a4,204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20405094:	fd442783          	lw	a5,-44(s0)
20405098:	00279713          	slli	a4,a5,0x2
2040509c:	204067b7          	lui	a5,0x20406
204050a0:	e6c78793          	addi	a5,a5,-404 # 20405e6c <__metal_driver_vtable_riscv_plic0+0x6c>
204050a4:	97ba                	add	a5,a5,a4
204050a6:	439c                	lw	a5,0(a5)
204050a8:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204050aa:	fec42783          	lw	a5,-20(s0)
204050ae:	07f1                	addi	a5,a5,28
204050b0:	4398                	lw	a4,0(a5)
204050b2:	fd842783          	lw	a5,-40(s0)
204050b6:	fec42683          	lw	a3,-20(s0)
204050ba:	06f1                	addi	a3,a3,28
204050bc:	8fd9                	or	a5,a5,a4
204050be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204050c0:	a215                	j	204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204050c2:	fec42783          	lw	a5,-20(s0)
204050c6:	02478793          	addi	a5,a5,36
204050ca:	4398                	lw	a4,0(a5)
204050cc:	fd842783          	lw	a5,-40(s0)
204050d0:	fec42683          	lw	a3,-20(s0)
204050d4:	02468693          	addi	a3,a3,36
204050d8:	8fd9                	or	a5,a5,a4
204050da:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204050dc:	a221                	j	204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204050de:	fec42783          	lw	a5,-20(s0)
204050e2:	07f1                	addi	a5,a5,28
204050e4:	4398                	lw	a4,0(a5)
204050e6:	fd842783          	lw	a5,-40(s0)
204050ea:	fec42683          	lw	a3,-20(s0)
204050ee:	06f1                	addi	a3,a3,28
204050f0:	8fd9                	or	a5,a5,a4
204050f2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204050f4:	fec42783          	lw	a5,-20(s0)
204050f8:	02478793          	addi	a5,a5,36
204050fc:	4398                	lw	a4,0(a5)
204050fe:	fd842783          	lw	a5,-40(s0)
20405102:	fec42683          	lw	a3,-20(s0)
20405106:	02468693          	addi	a3,a3,36
2040510a:	8fd9                	or	a5,a5,a4
2040510c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
2040510e:	a8d9                	j	204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405110:	fec42783          	lw	a5,-20(s0)
20405114:	02c78793          	addi	a5,a5,44
20405118:	4398                	lw	a4,0(a5)
2040511a:	fd842783          	lw	a5,-40(s0)
2040511e:	fec42683          	lw	a3,-20(s0)
20405122:	02c68693          	addi	a3,a3,44
20405126:	8fd9                	or	a5,a5,a4
20405128:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
2040512a:	a86d                	j	204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
2040512c:	fec42783          	lw	a5,-20(s0)
20405130:	03478793          	addi	a5,a5,52
20405134:	4398                	lw	a4,0(a5)
20405136:	fd842783          	lw	a5,-40(s0)
2040513a:	fec42683          	lw	a3,-20(s0)
2040513e:	03468693          	addi	a3,a3,52
20405142:	8fd9                	or	a5,a5,a4
20405144:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20405146:	a879                	j	204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20405148:	fec42783          	lw	a5,-20(s0)
2040514c:	02c78793          	addi	a5,a5,44
20405150:	4398                	lw	a4,0(a5)
20405152:	fd842783          	lw	a5,-40(s0)
20405156:	fec42683          	lw	a3,-20(s0)
2040515a:	02c68693          	addi	a3,a3,44
2040515e:	8fd9                	or	a5,a5,a4
20405160:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20405162:	fec42783          	lw	a5,-20(s0)
20405166:	03478793          	addi	a5,a5,52
2040516a:	4398                	lw	a4,0(a5)
2040516c:	fd842783          	lw	a5,-40(s0)
20405170:	fec42683          	lw	a3,-20(s0)
20405174:	03468693          	addi	a3,a3,52
20405178:	8fd9                	or	a5,a5,a4
2040517a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
2040517c:	a0a5                	j	204051e4 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
2040517e:	fec42783          	lw	a5,-20(s0)
20405182:	07f1                	addi	a5,a5,28
20405184:	4398                	lw	a4,0(a5)
20405186:	fd842783          	lw	a5,-40(s0)
2040518a:	fec42683          	lw	a3,-20(s0)
2040518e:	06f1                	addi	a3,a3,28
20405190:	8fd9                	or	a5,a5,a4
20405192:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20405194:	fec42783          	lw	a5,-20(s0)
20405198:	02478793          	addi	a5,a5,36
2040519c:	4398                	lw	a4,0(a5)
2040519e:	fd842783          	lw	a5,-40(s0)
204051a2:	fec42683          	lw	a3,-20(s0)
204051a6:	02468693          	addi	a3,a3,36
204051aa:	8fd9                	or	a5,a5,a4
204051ac:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204051ae:	fec42783          	lw	a5,-20(s0)
204051b2:	02c78793          	addi	a5,a5,44
204051b6:	4398                	lw	a4,0(a5)
204051b8:	fd842783          	lw	a5,-40(s0)
204051bc:	fec42683          	lw	a3,-20(s0)
204051c0:	02c68693          	addi	a3,a3,44
204051c4:	8fd9                	or	a5,a5,a4
204051c6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204051c8:	fec42783          	lw	a5,-20(s0)
204051cc:	03478793          	addi	a5,a5,52
204051d0:	4398                	lw	a4,0(a5)
204051d2:	fd842783          	lw	a5,-40(s0)
204051d6:	fec42683          	lw	a3,-20(s0)
204051da:	03468693          	addi	a3,a3,52
204051de:	8fd9                	or	a5,a5,a4
204051e0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204051e2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
204051e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
204051e6:	853e                	mv	a0,a5
204051e8:	50b2                	lw	ra,44(sp)
204051ea:	5422                	lw	s0,40(sp)
204051ec:	6145                	addi	sp,sp,48
204051ee:	8082                	ret

204051f0 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
204051f0:	1101                	addi	sp,sp,-32
204051f2:	ce06                	sw	ra,28(sp)
204051f4:	cc22                	sw	s0,24(sp)
204051f6:	1000                	addi	s0,sp,32
204051f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
204051fc:	fec42503          	lw	a0,-20(s0)
20405200:	faaff0ef          	jal	ra,204049aa <__metal_driver_sifive_gpio0_interrupt_parent>
20405204:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20405206:	853e                	mv	a0,a5
20405208:	40f2                	lw	ra,28(sp)
2040520a:	4462                	lw	s0,24(sp)
2040520c:	6105                	addi	sp,sp,32
2040520e:	8082                	ret

20405210 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20405210:	7179                	addi	sp,sp,-48
20405212:	d606                	sw	ra,44(sp)
20405214:	d422                	sw	s0,40(sp)
20405216:	1800                	addi	s0,sp,48
20405218:	fca42e23          	sw	a0,-36(s0)
2040521c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20405220:	fd842583          	lw	a1,-40(s0)
20405224:	fdc42503          	lw	a0,-36(s0)
20405228:	facff0ef          	jal	ra,204049d4 <__metal_driver_sifive_gpio0_interrupt_lines>
2040522c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20405230:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20405234:	853e                	mv	a0,a5
20405236:	50b2                	lw	ra,44(sp)
20405238:	5422                	lw	s0,40(sp)
2040523a:	6145                	addi	sp,sp,48
2040523c:	8082                	ret

2040523e <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
2040523e:	1101                	addi	sp,sp,-32
20405240:	ce22                	sw	s0,28(sp)
20405242:	1000                	addi	s0,sp,32
20405244:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405248:	fec42703          	lw	a4,-20(s0)
2040524c:	800017b7          	lui	a5,0x80001
20405250:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405254:	00f71563          	bne	a4,a5,2040525e <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20405258:	100137b7          	lui	a5,0x10013
2040525c:	a011                	j	20405260 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
2040525e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20405260:	853e                	mv	a0,a5
20405262:	4472                	lw	s0,28(sp)
20405264:	6105                	addi	sp,sp,32
20405266:	8082                	ret

20405268 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20405268:	1101                	addi	sp,sp,-32
2040526a:	ce22                	sw	s0,28(sp)
2040526c:	1000                	addi	s0,sp,32
2040526e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405272:	fec42703          	lw	a4,-20(s0)
20405276:	800017b7          	lui	a5,0x80001
2040527a:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040527e:	00f71763          	bne	a4,a5,2040528c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20405282:	800017b7          	lui	a5,0x80001
20405286:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
2040528a:	a011                	j	2040528e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
2040528c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
2040528e:	853e                	mv	a0,a5
20405290:	4472                	lw	s0,28(sp)
20405292:	6105                	addi	sp,sp,32
20405294:	8082                	ret

20405296 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20405296:	1101                	addi	sp,sp,-32
20405298:	ce22                	sw	s0,28(sp)
2040529a:	1000                	addi	s0,sp,32
2040529c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204052a0:	fec42703          	lw	a4,-20(s0)
204052a4:	800017b7          	lui	a5,0x80001
204052a8:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204052ac:	00f71463          	bne	a4,a5,204052b4 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
204052b0:	4795                	li	a5,5
204052b2:	a011                	j	204052b6 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
204052b4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
204052b6:	853e                	mv	a0,a5
204052b8:	4472                	lw	s0,28(sp)
204052ba:	6105                	addi	sp,sp,32
204052bc:	8082                	ret

204052be <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
204052be:	1101                	addi	sp,sp,-32
204052c0:	ce22                	sw	s0,28(sp)
204052c2:	1000                	addi	s0,sp,32
204052c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204052c8:	fec42703          	lw	a4,-20(s0)
204052cc:	800017b7          	lui	a5,0x80001
204052d0:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
204052d4:	00f71763          	bne	a4,a5,204052e2 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
204052d8:	800017b7          	lui	a5,0x80001
204052dc:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
204052e0:	a011                	j	204052e4 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
204052e2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
204052e4:	853e                	mv	a0,a5
204052e6:	4472                	lw	s0,28(sp)
204052e8:	6105                	addi	sp,sp,32
204052ea:	8082                	ret

204052ec <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
204052ec:	1101                	addi	sp,sp,-32
204052ee:	ce22                	sw	s0,28(sp)
204052f0:	1000                	addi	s0,sp,32
204052f2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204052f6:	fec42703          	lw	a4,-20(s0)
204052fa:	800017b7          	lui	a5,0x80001
204052fe:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405302:	00f71563          	bne	a4,a5,2040530c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20405306:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040530a:	a011                	j	2040530e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
2040530c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
2040530e:	853e                	mv	a0,a5
20405310:	4472                	lw	s0,28(sp)
20405312:	6105                	addi	sp,sp,32
20405314:	8082                	ret

20405316 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20405316:	1101                	addi	sp,sp,-32
20405318:	ce22                	sw	s0,28(sp)
2040531a:	1000                	addi	s0,sp,32
2040531c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405320:	fec42703          	lw	a4,-20(s0)
20405324:	800017b7          	lui	a5,0x80001
20405328:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
2040532c:	00f71563          	bne	a4,a5,20405336 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20405330:	000307b7          	lui	a5,0x30
20405334:	a011                	j	20405338 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20405336:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20405338:	853e                	mv	a0,a5
2040533a:	4472                	lw	s0,28(sp)
2040533c:	6105                	addi	sp,sp,32
2040533e:	8082                	ret

20405340 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20405340:	1101                	addi	sp,sp,-32
20405342:	ce22                	sw	s0,28(sp)
20405344:	1000                	addi	s0,sp,32
20405346:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040534a:	fec42703          	lw	a4,-20(s0)
2040534e:	800017b7          	lui	a5,0x80001
20405352:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20405356:	00f71563          	bne	a4,a5,20405360 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
2040535a:	000307b7          	lui	a5,0x30
2040535e:	a011                	j	20405362 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20405360:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20405362:	853e                	mv	a0,a5
20405364:	4472                	lw	s0,28(sp)
20405366:	6105                	addi	sp,sp,32
20405368:	8082                	ret

2040536a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
2040536a:	1101                	addi	sp,sp,-32
2040536c:	ce06                	sw	ra,28(sp)
2040536e:	cc22                	sw	s0,24(sp)
20405370:	1000                	addi	s0,sp,32
20405372:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20405376:	fec42503          	lw	a0,-20(s0)
2040537a:	35fd                	jal	20405268 <__metal_driver_sifive_uart0_interrupt_parent>
2040537c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
2040537e:	853e                	mv	a0,a5
20405380:	40f2                	lw	ra,28(sp)
20405382:	4462                	lw	s0,24(sp)
20405384:	6105                	addi	sp,sp,32
20405386:	8082                	ret

20405388 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405388:	1101                	addi	sp,sp,-32
2040538a:	ce06                	sw	ra,28(sp)
2040538c:	cc22                	sw	s0,24(sp)
2040538e:	1000                	addi	s0,sp,32
20405390:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20405394:	fec42503          	lw	a0,-20(s0)
20405398:	3dfd                	jal	20405296 <__metal_driver_sifive_uart0_interrupt_line>
2040539a:	87aa                	mv	a5,a0
2040539c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
204053a0:	853e                	mv	a0,a5
204053a2:	40f2                	lw	ra,28(sp)
204053a4:	4462                	lw	s0,24(sp)
204053a6:	6105                	addi	sp,sp,32
204053a8:	8082                	ret

204053aa <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
204053aa:	7179                	addi	sp,sp,-48
204053ac:	d606                	sw	ra,44(sp)
204053ae:	d422                	sw	s0,40(sp)
204053b0:	1800                	addi	s0,sp,48
204053b2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
204053b6:	fdc42503          	lw	a0,-36(s0)
204053ba:	3551                	jal	2040523e <__metal_driver_sifive_uart0_control_base>
204053bc:	87aa                	mv	a5,a0
204053be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
204053c2:	fec42783          	lw	a5,-20(s0)
204053c6:	439c                	lw	a5,0(a5)
204053c8:	fff7c793          	not	a5,a5
204053cc:	83fd                	srli	a5,a5,0x1f
204053ce:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
204053d2:	853e                	mv	a0,a5
204053d4:	50b2                	lw	ra,44(sp)
204053d6:	5422                	lw	s0,40(sp)
204053d8:	6145                	addi	sp,sp,48
204053da:	8082                	ret

204053dc <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
204053dc:	7179                	addi	sp,sp,-48
204053de:	d606                	sw	ra,44(sp)
204053e0:	d422                	sw	s0,40(sp)
204053e2:	1800                	addi	s0,sp,48
204053e4:	fca42e23          	sw	a0,-36(s0)
204053e8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204053ec:	fdc42503          	lw	a0,-36(s0)
204053f0:	e4fff0ef          	jal	ra,2040523e <__metal_driver_sifive_uart0_control_base>
204053f4:	87aa                	mv	a5,a0
204053f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
204053fa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
204053fc:	fdc42503          	lw	a0,-36(s0)
20405400:	376d                	jal	204053aa <__metal_driver_sifive_uart0_txready>
20405402:	87aa                	mv	a5,a0
20405404:	dfe5                	beqz	a5,204053fc <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405406:	fec42783          	lw	a5,-20(s0)
2040540a:	fd842703          	lw	a4,-40(s0)
2040540e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405410:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405412:	853e                	mv	a0,a5
20405414:	50b2                	lw	ra,44(sp)
20405416:	5422                	lw	s0,40(sp)
20405418:	6145                	addi	sp,sp,48
2040541a:	8082                	ret

2040541c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
2040541c:	7179                	addi	sp,sp,-48
2040541e:	d606                	sw	ra,44(sp)
20405420:	d422                	sw	s0,40(sp)
20405422:	1800                	addi	s0,sp,48
20405424:	fca42e23          	sw	a0,-36(s0)
20405428:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040542c:	fdc42503          	lw	a0,-36(s0)
20405430:	e0fff0ef          	jal	ra,2040523e <__metal_driver_sifive_uart0_control_base>
20405434:	87aa                	mv	a5,a0
20405436:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
2040543a:	fec42783          	lw	a5,-20(s0)
2040543e:	0791                	addi	a5,a5,4
20405440:	439c                	lw	a5,0(a5)
20405442:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20405446:	fe842783          	lw	a5,-24(s0)
2040544a:	0007d763          	bgez	a5,20405458 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
2040544e:	fd842783          	lw	a5,-40(s0)
20405452:	577d                	li	a4,-1
20405454:	c398                	sw	a4,0(a5)
20405456:	a801                	j	20405466 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20405458:	fe842783          	lw	a5,-24(s0)
2040545c:	0ff7f713          	andi	a4,a5,255
20405460:	fd842783          	lw	a5,-40(s0)
20405464:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20405466:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20405468:	853e                	mv	a0,a5
2040546a:	50b2                	lw	ra,44(sp)
2040546c:	5422                	lw	s0,40(sp)
2040546e:	6145                	addi	sp,sp,48
20405470:	8082                	ret

20405472 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20405472:	7179                	addi	sp,sp,-48
20405474:	d622                	sw	s0,44(sp)
20405476:	1800                	addi	s0,sp,48
20405478:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040547c:	fdc42783          	lw	a5,-36(s0)
20405480:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405484:	fec42783          	lw	a5,-20(s0)
20405488:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040548a:	853e                	mv	a0,a5
2040548c:	5432                	lw	s0,44(sp)
2040548e:	6145                	addi	sp,sp,48
20405490:	8082                	ret

20405492 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405492:	7179                	addi	sp,sp,-48
20405494:	d606                	sw	ra,44(sp)
20405496:	d422                	sw	s0,40(sp)
20405498:	1800                	addi	s0,sp,48
2040549a:	fca42e23          	sw	a0,-36(s0)
2040549e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204054a2:	fdc42783          	lw	a5,-36(s0)
204054a6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
204054aa:	fdc42503          	lw	a0,-36(s0)
204054ae:	d91ff0ef          	jal	ra,2040523e <__metal_driver_sifive_uart0_control_base>
204054b2:	87aa                	mv	a5,a0
204054b4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204054b8:	fdc42503          	lw	a0,-36(s0)
204054bc:	e03ff0ef          	jal	ra,204052be <__metal_driver_sifive_uart0_clock>
204054c0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204054c4:	fd842703          	lw	a4,-40(s0)
204054c8:	fec42783          	lw	a5,-20(s0)
204054cc:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204054ce:	fe442783          	lw	a5,-28(s0)
204054d2:	cbb1                	beqz	a5,20405526 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204054d4:	fe442783          	lw	a5,-28(s0)
204054d8:	439c                	lw	a5,0(a5)
204054da:	439c                	lw	a5,0(a5)
204054dc:	fe442503          	lw	a0,-28(s0)
204054e0:	9782                	jalr	a5
204054e2:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204054e6:	fe042703          	lw	a4,-32(s0)
204054ea:	fd842783          	lw	a5,-40(s0)
204054ee:	02f747b3          	div	a5,a4,a5
204054f2:	fff78713          	addi	a4,a5,-1
204054f6:	fe842783          	lw	a5,-24(s0)
204054fa:	07e1                	addi	a5,a5,24
204054fc:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
204054fe:	fe842783          	lw	a5,-24(s0)
20405502:	07a1                	addi	a5,a5,8
20405504:	439c                	lw	a5,0(a5)
20405506:	fe842703          	lw	a4,-24(s0)
2040550a:	0721                	addi	a4,a4,8
2040550c:	0017e793          	ori	a5,a5,1
20405510:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405512:	fe842783          	lw	a5,-24(s0)
20405516:	07b1                	addi	a5,a5,12
20405518:	439c                	lw	a5,0(a5)
2040551a:	fe842703          	lw	a4,-24(s0)
2040551e:	0731                	addi	a4,a4,12
20405520:	0017e793          	ori	a5,a5,1
20405524:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405526:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405528:	853e                	mv	a0,a5
2040552a:	50b2                	lw	ra,44(sp)
2040552c:	5422                	lw	s0,40(sp)
2040552e:	6145                	addi	sp,sp,48
20405530:	8082                	ret

20405532 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405532:	7139                	addi	sp,sp,-64
20405534:	de06                	sw	ra,60(sp)
20405536:	dc22                	sw	s0,56(sp)
20405538:	0080                	addi	s0,sp,64
2040553a:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
2040553e:	fcc42783          	lw	a5,-52(s0)
20405542:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405546:	fcc42503          	lw	a0,-52(s0)
2040554a:	cf5ff0ef          	jal	ra,2040523e <__metal_driver_sifive_uart0_control_base>
2040554e:	87aa                	mv	a5,a0
20405550:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405554:	fcc42503          	lw	a0,-52(s0)
20405558:	d67ff0ef          	jal	ra,204052be <__metal_driver_sifive_uart0_clock>
2040555c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20405560:	fe842783          	lw	a5,-24(s0)
20405564:	07a1                	addi	a5,a5,8
20405566:	4398                	lw	a4,0(a5)
20405568:	fe842783          	lw	a5,-24(s0)
2040556c:	07a1                	addi	a5,a5,8
2040556e:	86be                	mv	a3,a5
20405570:	fff907b7          	lui	a5,0xfff90
20405574:	17fd                	addi	a5,a5,-1
20405576:	8ff9                	and	a5,a5,a4
20405578:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
2040557a:	fe842783          	lw	a5,-24(s0)
2040557e:	07a1                	addi	a5,a5,8
20405580:	4398                	lw	a4,0(a5)
20405582:	fe842783          	lw	a5,-24(s0)
20405586:	07a1                	addi	a5,a5,8
20405588:	86be                	mv	a3,a5
2040558a:	67c1                	lui	a5,0x10
2040558c:	8fd9                	or	a5,a5,a4
2040558e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405590:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405592:	fe842783          	lw	a5,-24(s0)
20405596:	07d1                	addi	a5,a5,20
20405598:	439c                	lw	a5,0(a5)
2040559a:	8b85                	andi	a5,a5,1
2040559c:	dbfd                	beqz	a5,20405592 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040559e:	fe842783          	lw	a5,-24(s0)
204055a2:	07a1                	addi	a5,a5,8
204055a4:	439c                	lw	a5,0(a5)
204055a6:	8b89                	andi	a5,a5,2
204055a8:	c399                	beqz	a5,204055ae <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
204055aa:	47a5                	li	a5,9
204055ac:	a011                	j	204055b0 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204055ae:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204055b0:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204055b4:	fe442783          	lw	a5,-28(s0)
204055b8:	439c                	lw	a5,0(a5)
204055ba:	439c                	lw	a5,0(a5)
204055bc:	fe442503          	lw	a0,-28(s0)
204055c0:	9782                	jalr	a5
204055c2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204055c6:	fe042703          	lw	a4,-32(s0)
204055ca:	fdc42783          	lw	a5,-36(s0)
204055ce:	02f707b3          	mul	a5,a4,a5
204055d2:	873e                	mv	a4,a5
204055d4:	fec42783          	lw	a5,-20(s0)
204055d8:	43dc                	lw	a5,4(a5)
204055da:	02f757b3          	divu	a5,a4,a5
204055de:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204055e2:	fc042a23          	sw	zero,-44(s0)
204055e6:	a039                	j	204055f4 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204055e8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204055ea:	fd442783          	lw	a5,-44(s0)
204055ee:	0785                	addi	a5,a5,1
204055f0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204055f4:	fd442783          	lw	a5,-44(s0)
204055f8:	fd842703          	lw	a4,-40(s0)
204055fc:	fee7c6e3          	blt	a5,a4,204055e8 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405600:	0001                	nop
20405602:	50f2                	lw	ra,60(sp)
20405604:	5462                	lw	s0,56(sp)
20405606:	6121                	addi	sp,sp,64
20405608:	8082                	ret

2040560a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040560a:	7179                	addi	sp,sp,-48
2040560c:	d606                	sw	ra,44(sp)
2040560e:	d422                	sw	s0,40(sp)
20405610:	1800                	addi	s0,sp,48
20405612:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405616:	fdc42783          	lw	a5,-36(s0)
2040561a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040561e:	fec42703          	lw	a4,-20(s0)
20405622:	fec42783          	lw	a5,-20(s0)
20405626:	43dc                	lw	a5,4(a5)
20405628:	85be                	mv	a1,a5
2040562a:	853a                	mv	a0,a4
2040562c:	dc9fc0ef          	jal	ra,204023f4 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405630:	0001                	nop
20405632:	50b2                	lw	ra,44(sp)
20405634:	5422                	lw	s0,40(sp)
20405636:	6145                	addi	sp,sp,48
20405638:	8082                	ret

2040563a <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
2040563a:	7139                	addi	sp,sp,-64
2040563c:	de06                	sw	ra,60(sp)
2040563e:	dc22                	sw	s0,56(sp)
20405640:	0080                	addi	s0,sp,64
20405642:	fca42623          	sw	a0,-52(s0)
20405646:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
2040564a:	fcc42783          	lw	a5,-52(s0)
2040564e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405652:	fcc42503          	lw	a0,-52(s0)
20405656:	c69ff0ef          	jal	ra,204052be <__metal_driver_sifive_uart0_clock>
2040565a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
2040565e:	fcc42503          	lw	a0,-52(s0)
20405662:	c8bff0ef          	jal	ra,204052ec <__metal_driver_sifive_uart0_pinmux>
20405666:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
2040566a:	fe842783          	lw	a5,-24(s0)
2040566e:	c7b9                	beqz	a5,204056bc <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405670:	fec42783          	lw	a5,-20(s0)
20405674:	20405737          	lui	a4,0x20405
20405678:	53270713          	addi	a4,a4,1330 # 20405532 <pre_rate_change_callback_func>
2040567c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
2040567e:	fec42783          	lw	a5,-20(s0)
20405682:	fcc42703          	lw	a4,-52(s0)
20405686:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405688:	fec42783          	lw	a5,-20(s0)
2040568c:	07a1                	addi	a5,a5,8
2040568e:	85be                	mv	a1,a5
20405690:	fe842503          	lw	a0,-24(s0)
20405694:	20f1                	jal	20405760 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405696:	fec42783          	lw	a5,-20(s0)
2040569a:	20405737          	lui	a4,0x20405
2040569e:	60a70713          	addi	a4,a4,1546 # 2040560a <post_rate_change_callback_func>
204056a2:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
204056a4:	fec42783          	lw	a5,-20(s0)
204056a8:	fcc42703          	lw	a4,-52(s0)
204056ac:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204056ae:	fec42783          	lw	a5,-20(s0)
204056b2:	07d1                	addi	a5,a5,20
204056b4:	85be                	mv	a1,a5
204056b6:	fe842503          	lw	a0,-24(s0)
204056ba:	28d9                	jal	20405790 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204056bc:	fec42783          	lw	a5,-20(s0)
204056c0:	fc842583          	lw	a1,-56(s0)
204056c4:	853e                	mv	a0,a5
204056c6:	d2ffc0ef          	jal	ra,204023f4 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204056ca:	fe442783          	lw	a5,-28(s0)
204056ce:	cb95                	beqz	a5,20405702 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204056d0:	fcc42503          	lw	a0,-52(s0)
204056d4:	c43ff0ef          	jal	ra,20405316 <__metal_driver_sifive_uart0_pinmux_output_selector>
204056d8:	87aa                	mv	a5,a0
204056da:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204056de:	fcc42503          	lw	a0,-52(s0)
204056e2:	c5fff0ef          	jal	ra,20405340 <__metal_driver_sifive_uart0_pinmux_source_selector>
204056e6:	87aa                	mv	a5,a0
204056e8:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204056ec:	fe442783          	lw	a5,-28(s0)
204056f0:	439c                	lw	a5,0(a5)
204056f2:	53dc                	lw	a5,36(a5)
204056f4:	fdc42603          	lw	a2,-36(s0)
204056f8:	fe042583          	lw	a1,-32(s0)
204056fc:	fe442503          	lw	a0,-28(s0)
20405700:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405702:	0001                	nop
20405704:	50f2                	lw	ra,60(sp)
20405706:	5462                	lw	s0,56(sp)
20405708:	6121                	addi	sp,sp,64
2040570a:	8082                	ret

2040570c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040570c:	7179                	addi	sp,sp,-48
2040570e:	d622                	sw	s0,44(sp)
20405710:	1800                	addi	s0,sp,48
20405712:	fca42e23          	sw	a0,-36(s0)
20405716:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040571a:	fd842783          	lw	a5,-40(s0)
2040571e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405722:	fdc42783          	lw	a5,-36(s0)
20405726:	e781                	bnez	a5,2040572e <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405728:	fd842783          	lw	a5,-40(s0)
2040572c:	a035                	j	20405758 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
2040572e:	fdc42783          	lw	a5,-36(s0)
20405732:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405736:	a031                	j	20405742 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405738:	fec42783          	lw	a5,-20(s0)
2040573c:	479c                	lw	a5,8(a5)
2040573e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405742:	fec42783          	lw	a5,-20(s0)
20405746:	479c                	lw	a5,8(a5)
20405748:	fbe5                	bnez	a5,20405738 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
2040574a:	fec42783          	lw	a5,-20(s0)
2040574e:	fd842703          	lw	a4,-40(s0)
20405752:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405754:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405758:	853e                	mv	a0,a5
2040575a:	5432                	lw	s0,44(sp)
2040575c:	6145                	addi	sp,sp,48
2040575e:	8082                	ret

20405760 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405760:	1101                	addi	sp,sp,-32
20405762:	ce06                	sw	ra,28(sp)
20405764:	cc22                	sw	s0,24(sp)
20405766:	1000                	addi	s0,sp,32
20405768:	fea42623          	sw	a0,-20(s0)
2040576c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405770:	fec42783          	lw	a5,-20(s0)
20405774:	43dc                	lw	a5,4(a5)
20405776:	fe842583          	lw	a1,-24(s0)
2040577a:	853e                	mv	a0,a5
2040577c:	3f41                	jal	2040570c <_metal_clock_append_to_callbacks>
2040577e:	872a                	mv	a4,a0
20405780:	fec42783          	lw	a5,-20(s0)
20405784:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405786:	0001                	nop
20405788:	40f2                	lw	ra,28(sp)
2040578a:	4462                	lw	s0,24(sp)
2040578c:	6105                	addi	sp,sp,32
2040578e:	8082                	ret

20405790 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405790:	1101                	addi	sp,sp,-32
20405792:	ce06                	sw	ra,28(sp)
20405794:	cc22                	sw	s0,24(sp)
20405796:	1000                	addi	s0,sp,32
20405798:	fea42623          	sw	a0,-20(s0)
2040579c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204057a0:	fec42783          	lw	a5,-20(s0)
204057a4:	479c                	lw	a5,8(a5)
204057a6:	fe842583          	lw	a1,-24(s0)
204057aa:	853e                	mv	a0,a5
204057ac:	3785                	jal	2040570c <_metal_clock_append_to_callbacks>
204057ae:	872a                	mv	a4,a0
204057b0:	fec42783          	lw	a5,-20(s0)
204057b4:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204057b6:	0001                	nop
204057b8:	40f2                	lw	ra,28(sp)
204057ba:	4462                	lw	s0,24(sp)
204057bc:	6105                	addi	sp,sp,32
204057be:	8082                	ret

204057c0 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204057c0:	1101                	addi	sp,sp,-32
204057c2:	ce06                	sw	ra,28(sp)
204057c4:	cc22                	sw	s0,24(sp)
204057c6:	1000                	addi	s0,sp,32
204057c8:	fea42623          	sw	a0,-20(s0)
204057cc:	fec42783          	lw	a5,-20(s0)
204057d0:	439c                	lw	a5,0(a5)
204057d2:	57dc                	lw	a5,44(a5)
204057d4:	fec42503          	lw	a0,-20(s0)
204057d8:	9782                	jalr	a5
204057da:	87aa                	mv	a5,a0
204057dc:	853e                	mv	a0,a5
204057de:	40f2                	lw	ra,28(sp)
204057e0:	4462                	lw	s0,24(sp)
204057e2:	6105                	addi	sp,sp,32
204057e4:	8082                	ret

204057e6 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204057e6:	1101                	addi	sp,sp,-32
204057e8:	ce22                	sw	s0,28(sp)
204057ea:	1000                	addi	s0,sp,32
204057ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204057f0:	fec42783          	lw	a5,-20(s0)
204057f4:	eb89                	bnez	a5,20405806 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204057f6:	fec42703          	lw	a4,-20(s0)
204057fa:	070a                	slli	a4,a4,0x2
204057fc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20405800:	97ba                	add	a5,a5,a4
20405802:	439c                	lw	a5,0(a5)
20405804:	a011                	j	20405808 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405806:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405808:	853e                	mv	a0,a5
2040580a:	4472                	lw	s0,28(sp)
2040580c:	6105                	addi	sp,sp,32
2040580e:	8082                	ret

20405810 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405810:	1101                	addi	sp,sp,-32
20405812:	ce22                	sw	s0,28(sp)
20405814:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405816:	f14027f3          	csrr	a5,mhartid
2040581a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040581e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405822:	853e                	mv	a0,a5
20405824:	4472                	lw	s0,28(sp)
20405826:	6105                	addi	sp,sp,32
20405828:	8082                	ret

2040582a <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040582a:	1101                	addi	sp,sp,-32
2040582c:	ce22                	sw	s0,28(sp)
2040582e:	1000                	addi	s0,sp,32
20405830:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405834:	0001                	nop
20405836:	bffd                	j	20405834 <metal_shutdown+0xa>
	...

20405880 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405880:	cd0fd06f          	j	20402d50 <metal_interrupt_vector_handler>

20405884 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405884:	cccfd06f          	j	20402d50 <metal_interrupt_vector_handler>

20405888 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405888:	cc8fd06f          	j	20402d50 <metal_interrupt_vector_handler>

2040588c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040588c:	cf2fd06f          	j	20402d7e <metal_software_interrupt_vector_handler>

20405890 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405890:	cc0fd06f          	j	20402d50 <metal_interrupt_vector_handler>

20405894 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405894:	cbcfd06f          	j	20402d50 <metal_interrupt_vector_handler>

20405898 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405898:	cb8fd06f          	j	20402d50 <metal_interrupt_vector_handler>

2040589c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040589c:	dd4fd06f          	j	20402e70 <metal_timer_interrupt_vector_handler>

204058a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204058a0:	cb0fd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204058a4:	cacfd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204058a8:	ca8fd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204058ac:	ca4fd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204058b0:	ca0fd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204058b4:	c9cfd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204058b8:	c98fd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204058bc:	c94fd06f          	j	20402d50 <metal_interrupt_vector_handler>

204058c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204058c0:	837fd06f          	j	204030f6 <metal_lc0_interrupt_vector_handler>

204058c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204058c4:	8c5fd06f          	j	20403188 <metal_lc1_interrupt_vector_handler>

204058c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204058c8:	953fd06f          	j	2040321a <metal_lc2_interrupt_vector_handler>

204058cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204058cc:	9e1fd06f          	j	204032ac <metal_lc3_interrupt_vector_handler>

204058d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204058d0:	a6ffd06f          	j	2040333e <metal_lc4_interrupt_vector_handler>

204058d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204058d4:	afdfd06f          	j	204033d0 <metal_lc5_interrupt_vector_handler>

204058d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204058d8:	b8bfd06f          	j	20403462 <metal_lc6_interrupt_vector_handler>

204058dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204058dc:	c19fd06f          	j	204034f4 <metal_lc7_interrupt_vector_handler>

204058e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204058e0:	ca7fd06f          	j	20403586 <metal_lc8_interrupt_vector_handler>

204058e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204058e4:	d35fd06f          	j	20403618 <metal_lc9_interrupt_vector_handler>

204058e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204058e8:	dc3fd06f          	j	204036aa <metal_lc10_interrupt_vector_handler>

204058ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204058ec:	e51fd06f          	j	2040373c <metal_lc11_interrupt_vector_handler>

204058f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204058f0:	edffd06f          	j	204037ce <metal_lc12_interrupt_vector_handler>

204058f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204058f4:	f6dfd06f          	j	20403860 <metal_lc13_interrupt_vector_handler>

204058f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204058f8:	ffbfd06f          	j	204038f2 <metal_lc14_interrupt_vector_handler>

204058fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204058fc:	888fe06f          	j	20403984 <metal_lc15_interrupt_vector_handler>

20405900 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405900:	1101                	addi	sp,sp,-32
20405902:	ce22                	sw	s0,28(sp)
20405904:	1000                	addi	s0,sp,32
20405906:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040590a:	fec42703          	lw	a4,-20(s0)
2040590e:	800017b7          	lui	a5,0x80001
20405912:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
20405916:	00f71763          	bne	a4,a5,20405924 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040591a:	03dfd7b7          	lui	a5,0x3dfd
2040591e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405922:	a011                	j	20405926 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405924:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405926:	853e                	mv	a0,a5
20405928:	4472                	lw	s0,28(sp)
2040592a:	6105                	addi	sp,sp,32
2040592c:	8082                	ret

2040592e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040592e:	1101                	addi	sp,sp,-32
20405930:	ce06                	sw	ra,28(sp)
20405932:	cc22                	sw	s0,24(sp)
20405934:	1000                	addi	s0,sp,32
20405936:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040593a:	fec42503          	lw	a0,-20(s0)
2040593e:	37c9                	jal	20405900 <__metal_driver_fixed_clock_rate>
20405940:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405942:	853e                	mv	a0,a5
20405944:	40f2                	lw	ra,28(sp)
20405946:	4462                	lw	s0,24(sp)
20405948:	6105                	addi	sp,sp,32
2040594a:	8082                	ret

2040594c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040594c:	1101                	addi	sp,sp,-32
2040594e:	ce06                	sw	ra,28(sp)
20405950:	cc22                	sw	s0,24(sp)
20405952:	1000                	addi	s0,sp,32
20405954:	fea42623          	sw	a0,-20(s0)
20405958:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040595c:	fec42503          	lw	a0,-20(s0)
20405960:	37f9                	jal	2040592e <__metal_driver_fixed_clock_get_rate_hz>
20405962:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405964:	853e                	mv	a0,a5
20405966:	40f2                	lw	ra,28(sp)
20405968:	4462                	lw	s0,24(sp)
2040596a:	6105                	addi	sp,sp,32
2040596c:	8082                	ret

2040596e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040596e:	1101                	addi	sp,sp,-32
20405970:	ce06                	sw	ra,28(sp)
20405972:	cc22                	sw	s0,24(sp)
20405974:	1000                	addi	s0,sp,32
20405976:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040597a:	fec42503          	lw	a0,-20(s0)
2040597e:	3575                	jal	2040582a <metal_shutdown>
