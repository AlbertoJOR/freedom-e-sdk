
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/debug/matmul.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/debug/matmul.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005cc4 memsz 0x00005cc4 flags rwx
    LOAD off    0x00007770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x0005fb5c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405cc8 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005580  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000540  20405780  20405780  00006780  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405cc0  20405cc0  00006cc0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405cc8  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0005ef5c  80000770  80000770  00007770  2**3  ALLOC
  6 .stack            00000400  8005f6cc  8005f6cc  00007770  2**0  ALLOC
  7 .heap             00000800  8005facc  8005facc  00007770  2**0  ALLOC
  8 .debug_info       0001612d  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002fee  00000000  00000000  0001d89d  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000948  00000000  00000000  00020890  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000910  00000000  00000000  000211d8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00008de2  00000000  00000000  00021ae8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003bfc  00000000  00000000  0002a8ca  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002e4c6  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002e4ee  2**0  CONTENTS, READONLY
 16 .debug_frame      000024b8  00000000  00000000  0002e51c  2**2  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc        00000b16  00000000  00000000  000309d4  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405780 l    d  .rodata	00000000 .rodata
20405cc0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
8005f6cc l    d  .stack	00000000 .stack
8005facc l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
2040596c l       .rodata	00000000 argv
20405970 l       .rodata	00000000 envp
20405974 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 matmul.c
8000077c l     O .bss	0001fa40 sa
800201bc l     O .bss	0001fa40 sb
8003fbfc l     O .bss	0001fa40 sc
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400aea l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
2040103a l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 fixunssfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
8005f63c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20402198 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20402242 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20402268 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
2040228c l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
204022c8 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402428 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
2040295a l     F .text	00000024 __metal_driver_cpu_hartid
2040297e l     F .text	0000002a __metal_driver_cpu_timebase
204029a8 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404194 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
204041be l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204041e6 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
2040420e l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20404236 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404780 l     F .text	00000026 __metal_driver_sifive_gpio0_base
204047a6 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204047d0 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20405036 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20405060 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
2040508e l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
204050b6 l     F .text	0000002e __metal_driver_sifive_uart0_clock
204050e4 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
2040510e l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20405138 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405324 l     F .text	000000d8 pre_rate_change_callback_func
204053fc l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405680 l       .text	00000000 IRQ_0
20405684 l       .text	00000000 IRQ_1
20405688 l       .text	00000000 IRQ_2
2040568c l       .text	00000000 IRQ_3
20405690 l       .text	00000000 IRQ_4
20405694 l       .text	00000000 IRQ_5
20405698 l       .text	00000000 IRQ_6
2040569c l       .text	00000000 IRQ_7
204056a0 l       .text	00000000 IRQ_8
204056a4 l       .text	00000000 IRQ_9
204056a8 l       .text	00000000 IRQ_10
204056ac l       .text	00000000 IRQ_11
204056b0 l       .text	00000000 IRQ_12
204056b4 l       .text	00000000 IRQ_13
204056b8 l       .text	00000000 IRQ_14
204056bc l       .text	00000000 IRQ_15
204056c0 l       .text	00000000 IRQ_LC0
204056c4 l       .text	00000000 IRQ_LC1
204056c8 l       .text	00000000 IRQ_LC2
204056cc l       .text	00000000 IRQ_LC3
204056d0 l       .text	00000000 IRQ_LC4
204056d4 l       .text	00000000 IRQ_LC5
204056d8 l       .text	00000000 IRQ_LC6
204056dc l       .text	00000000 IRQ_LC7
204056e0 l       .text	00000000 IRQ_LC8
204056e4 l       .text	00000000 IRQ_LC9
204056e8 l       .text	00000000 IRQ_LC10
204056ec l       .text	00000000 IRQ_LC11
204056f0 l       .text	00000000 IRQ_LC12
204056f4 l       .text	00000000 IRQ_LC13
204056f8 l       .text	00000000 IRQ_LC14
204056fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405700 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405cc4 l       .init_array	00000000 __fini_array_end
20405cc4 l       .init_array	00000000 __fini_array_start
20405cc4 l       .init_array	00000000 __init_array_end
20405cc0 l       .init_array	00000000 __preinit_array_end
20405cc0 l       .init_array	00000000 __init_array_start
20405cc0 l       .init_array	00000000 __preinit_array_start
204005d6 g     F .text	0000002c putchar
20405c9c g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204014c6 g     F .text	00000032 _isatty_r
2040313c  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400684 g     F .text	000000da _puts_r
204014f8 g     F .text	00000036 _lseek_r
20405286 g     F .text	0000009e __metal_driver_sifive_uart0_set_baud_rate
20402604 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
204030aa  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204038fc g     F .text	00000038 __metal_valid_interrupt_id
20400592 g     F .text	00000044 printf
20403d22 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
204054fe g     F .text	00000054 _metal_clock_append_to_callbacks
20404286 g     F .text	00000038 __metal_plic0_complete_interrupt
20403b7c g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
204013ee g     F .text	00000036 __sseek
20400ba0 g     F .text	0000006a __sinit
2040076c g     F .text	000000c0 __swbuf_r
20400b5c g     F .text	00000044 __sfmoreglue
2040154a g     F .text	00000002 __malloc_unlock
204055d8 g     F .text	0000002a metal_cpu_get
204003a0 g     F .text	00000114 mm
80000728 g     O .data	00000020 __metal_dt_serial_10013000
20404c10 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405980 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
8005f6cc g       .bss	00000000 metal_segment_bss_target_end
204022f8 g     F .text	0000009a __metal_clint0_mtime_get
20404128 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204049c2 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
20401f18 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
204051a2 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20402392 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401492 g     F .text	00000034 _fstat_r
20404e60 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
8005f6c8 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20405552 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403416  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405bd4 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405b94 g     O .rodata	00000040 __metal_driver_vtable_cpu
20402214 g     F .text	0000002e metal_uart_set_baud_rate
2040542c g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403db6 g     F .text	00000072 __metal_driver_cpu_mcycle_get
8005facc g       .heap	00000000 metal_segment_heap_target_start
20400b52 g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20403384  w    F .text	00000092 metal_lc8_interrupt_vector_handler
2040075e g     F .text	0000000e puts
2040365e  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402b3c g     F .text	00000018 __metal_default_exception_handler
20401d88 g     F .text	00000026 _fstat
20402926 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20404322 g     F .text	00000062 __metal_plic0_set_priority
20403d3e g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
204029d2 g     F .text	0000002c __metal_driver_cpu_get
20405b48 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402a30 g     F .text	00000018 __metal_interrupt_global_disable
204032f2  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204034a8  w    F .text	00000092 metal_lc10_interrupt_vector_handler
2040133e g     F .text	00000032 _sbrk_r
20404738 g     F .text	00000048 __metal_driver_riscv_plic0_disable
204039f0 g     F .text	0000004e __metal_exception_register
204018fa g     F .text	00000034 _read_r
20403f4a g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404aa2 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402c28 g     F .text	00000064 __metal_default_sw_handler
20405582 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20405162 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401dae g     F .text	00000020 _isatty
20404b68 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
20402c8c  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401f88 g     F .text	0000006a __libc_init_array
20404ae2 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040353a  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403cca g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401e22 g     F .text	0000007e _sbrk
20404a5c g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
20402a92 g     F .text	0000001a __metal_interrupt_timer_disable
20404c5a g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20404000 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405c60 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404ba8 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401f50 g     F .text	00000038 __libc_fini_array
20404fe8 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403f8a g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402ae4 g     F .text	0000002c __metal_interrupt_local_enable
204028f2 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20402146 g     F .text	0000002c metal_tty_putc
204002a4 g     F .text	000000fc init_matrix
20404444 g     F .text	00000018 __metal_plic0_default_handler
20400602 g     F .text	00000082 _putc_r
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
204057d0 g     O .rodata	00000020 __sf_fake_stderr
20402ac8 g     F .text	0000001c __metal_interrupt_external_disable
20405180 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403d9a g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20403a3e g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401d2a g     F .text	0000003c .hidden __clzsi2
20401064 g     F .text	00000042 __sfputs_r
204040e2 g     F .text	00000046 __metal_driver_cpu_exception_register
20402a48 g     F .text	00000018 __metal_interrupt_software_enable
20402f86  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040152e g     F .text	0000001a memchr
20400eb0 g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403814 g     F .text	00000050 __metal_controller_interrupt_vector_mode
2040207e g     F .text	000000c8 __call_exitprocs
8005facc g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401dce g     F .text	0000002a _lseek
204040c2 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20404156 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402aac g     F .text	0000001c __metal_interrupt_external_enable
20401ff2 g     F .text	0000008c __register_exitproc
204051d4 g     F .text	0000003e __metal_driver_sifive_uart0_putc
204044ea g     F .text	00000144 __metal_driver_riscv_plic0_init
204046f0 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404a30 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20403260  w    F .text	00000092 metal_lc6_interrupt_vector_handler
204029fe g     F .text	0000001a __metal_myhart_id
20405008 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402b9a  w    F .text	0000008e metal_software_interrupt_vector_handler
20403cf6 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401460 g     F .text	00000032 _close_r
20405266 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204024e6 g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
2040082c g     F .text	00000110 __swsetup_r
20400c0a g     F .text	0000009e __sfp
20401370 g     F .text	00000030 __sread
20404984 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20402b6c  w    F .text	0000002e metal_interrupt_vector_handler
20401548 g     F .text	00000002 __malloc_lock
20400a86 g     F .text	00000064 _fflush_r
204042f6 g     F .text	0000002c __metal_plic0_get_threshold
204057f0 g     O .rodata	00000020 __sf_fake_stdin
20403934 g     F .text	000000bc __metal_local_interrupt_enable
204027bc g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400e08 g     F .text	000000a8 memset
204031ce  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204004b4 g     F .text	000000de main
80000770 g       .data	00000000 metal_segment_data_target_end
20403f9e g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20404062 g     F .text	00000060 __metal_driver_cpu_get_msip
2040561c g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20404174 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20404258 g     F .text	0000002e __metal_plic0_claim_interrupt
20401424 g     F .text	00000006 __sclose
204035cc  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400f5c g     F .text	000000de _malloc_r
204025e8 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403e28 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405602 g     F .text	0000001a metal_cpu_get_current_hartid
20405680 g       .text	00000000 __metal_vector_table
20405cc8 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
20400592 g     F .text	00000044 iprintf
2040586c g     O .rodata	00000100 .hidden __clz_tab
20402a18 g     F .text	00000018 __metal_interrupt_global_enable
20401f0e g     F .text	0000000a atexit
20402172 g     F .text	00000026 metal_tty_putc_raw
2040142a g     F .text	00000036 _write_r
20402a78 g     F .text	0000001a __metal_interrupt_timer_enable
20405212 g     F .text	00000054 __metal_driver_sifive_uart0_getc
2040270a g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2040154c g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
20403ed4 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
2040093c g     F .text	0000014a __sflush_r
2040572e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402658 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405cc8 g       *ABS*	00000000 metal_segment_data_source_start
800602cc g       .heap	00000000 metal_segment_heap_target_end
20403864 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400d14 g     F .text	00000058 __swhatbuf_r
20404b22 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402d1a g     F .text	00000066 __metal_default_timer_handler
20401ea0 g     F .text	0000006e _write
2040445c g     F .text	0000008e __metal_plic0_handler
20403018  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403782  w    F .text	00000092 metal_lc15_interrupt_vector_handler
204055b2 g     F .text	00000026 metal_cpu_interrupt_controller
204013a0 g     F .text	0000004e __swrite
20401f24 g     F .text	0000002c exit
204010a6 g     F .text	00000298 _vfiprintf_r
20400ca8 g     F .text	0000006c _fwalk_reent
20401c8e g     F .text	0000009c .hidden __floatunsisf
2040574c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405810 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
20402b54 g     F .text	00000018 __metal_default_interrupt_handler
204021e6 g     F .text	0000002e metal_uart_putc
20401df8 g     F .text	0000002a _read
20401c3a g     F .text	00000054 .hidden __fixunssfsi
20404a06 g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402d80 g     F .text	0000014e __metal_exception_handler
20402ef4  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040576e g     F .text	00000012 _exit
20403e6e g     F .text	00000066 __metal_driver_cpu_mtime_get
20400d6c g     F .text	0000009c __smakebuf_r
204025c0 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401658 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
204036f0  w    F .text	00000092 metal_lc14_interrupt_vector_handler
2040245e g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
204010a6 g     F .text	00000298 _vfprintf_r
20403f60 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204043b8 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403f74 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402b10 g     F .text	0000002c __metal_interrupt_local_disable
20402a60 g     F .text	00000018 __metal_interrupt_software_disable
2040192e g     F .text	0000030c .hidden __addsf3
20404384 g     F .text	00000034 __metal_plic0_get_priority
204021ba g     F .text	0000002c metal_uart_init
2040021e g     F .text	00000086 print_matrix
204042be g     F .text	00000038 __metal_plic0_set_threshold
20401d66 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
2040462e g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc60117          	auipc	sp,0x5fc60
2040008c:	a4410113          	addi	sp,sp,-1468 # 8005facc <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	c1c28293          	addi	t0,t0,-996 # 20405cc8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	bf028293          	addi	t0,t0,-1040 # 20405cc8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc00317          	auipc	t1,0x5fc00
20400110:	66430313          	addi	t1,t1,1636 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc5f397          	auipc	t2,0x5fc5f
20400118:	5b838393          	addi	t2,t2,1464 # 8005f6cc <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	e2250513          	addi	a0,a0,-478 # 20401f50 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	5d9010ef          	jal	ra,20401f0e <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	64f010ef          	jal	ra,20401f88 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00006597          	auipc	a1,0x6
20400166:	80a58593          	addi	a1,a1,-2038 # 2040596c <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00006617          	auipc	a2,0x6
2040016e:	80660613          	addi	a2,a2,-2042 # 20405970 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	5b1010ef          	jal	ra,20401f24 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	2605                	jal	204004b4 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <print_matrix>:
print_matrix():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:20

#ifndef WITH_MALLOC
static element_t sa[N * N], sb[N * N], sc[N * N];
#endif
#ifdef PFDEBUG
void print_matrix(element_t* a, int n, int m) {
2040021e:	7179                	addi	sp,sp,-48
20400220:	d606                	sw	ra,44(sp)
20400222:	d422                	sw	s0,40(sp)
20400224:	1800                	addi	s0,sp,48
20400226:	fca42e23          	sw	a0,-36(s0)
2040022a:	fcb42c23          	sw	a1,-40(s0)
2040022e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:22
  int i, j;
  for (i = 0; i < n; i++) {
20400232:	fe042623          	sw	zero,-20(s0)
20400236:	a891                	j	2040028a <print_matrix+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:23
    for (j = 0; j < m; j++)
20400238:	fe042423          	sw	zero,-24(s0)
2040023c:	a815                	j	20400270 <print_matrix+0x52>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:24 (discriminator 3)
      printf("%x ", a[i*n+j]);
2040023e:	fec42703          	lw	a4,-20(s0)
20400242:	fd842783          	lw	a5,-40(s0)
20400246:	02f70733          	mul	a4,a4,a5
2040024a:	fe842783          	lw	a5,-24(s0)
2040024e:	97ba                	add	a5,a5,a4
20400250:	078a                	slli	a5,a5,0x2
20400252:	fdc42703          	lw	a4,-36(s0)
20400256:	97ba                	add	a5,a5,a4
20400258:	439c                	lw	a5,0(a5)
2040025a:	85be                	mv	a1,a5
2040025c:	204057b7          	lui	a5,0x20405
20400260:	78078513          	addi	a0,a5,1920 # 20405780 <_exit+0x12>
20400264:	263d                	jal	20400592 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:23 (discriminator 3)
    for (j = 0; j < m; j++)
20400266:	fe842783          	lw	a5,-24(s0)
2040026a:	0785                	addi	a5,a5,1
2040026c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:23 (discriminator 1)
20400270:	fe842703          	lw	a4,-24(s0)
20400274:	fd442783          	lw	a5,-44(s0)
20400278:	fcf743e3          	blt	a4,a5,2040023e <print_matrix+0x20>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:25 (discriminator 2)
    printf("\n");
2040027c:	4529                	li	a0,10
2040027e:	2ea1                	jal	204005d6 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:22 (discriminator 2)
  for (i = 0; i < n; i++) {
20400280:	fec42783          	lw	a5,-20(s0)
20400284:	0785                	addi	a5,a5,1
20400286:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:22 (discriminator 1)
2040028a:	fec42703          	lw	a4,-20(s0)
2040028e:	fd842783          	lw	a5,-40(s0)
20400292:	faf743e3          	blt	a4,a5,20400238 <print_matrix+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:27
  }
  printf("\n");
20400296:	4529                	li	a0,10
20400298:	2e3d                	jal	204005d6 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:28
}
2040029a:	0001                	nop
2040029c:	50b2                	lw	ra,44(sp)
2040029e:	5422                	lw	s0,40(sp)
204002a0:	6145                	addi	sp,sp,48
204002a2:	8082                	ret

204002a4 <init_matrix>:
init_matrix():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:30
#endif
void init_matrix(element_t** a, element_t** b, element_t** c, int n) {
204002a4:	7179                	addi	sp,sp,-48
204002a6:	d622                	sw	s0,44(sp)
204002a8:	1800                	addi	s0,sp,48
204002aa:	fca42e23          	sw	a0,-36(s0)
204002ae:	fcb42c23          	sw	a1,-40(s0)
204002b2:	fcc42a23          	sw	a2,-44(s0)
204002b6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:38
#ifdef WITH_MALLOC
  *a = (element_t*)malloc(n * n * sizeof(element_t));
  *b = (element_t*)malloc(n * n * sizeof(element_t));
  *c = (element_t*)malloc(n * n * sizeof(element_t));
#else
  *a = &(sa[0]);
204002ba:	fdc42783          	lw	a5,-36(s0)
204002be:	80000737          	lui	a4,0x80000
204002c2:	77c70713          	addi	a4,a4,1916 # 8000077c <metal_segment_heap_target_end+0xfffa04b0>
204002c6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:39
  *b = &(sb[0]);
204002c8:	fd842783          	lw	a5,-40(s0)
204002cc:	80020737          	lui	a4,0x80020
204002d0:	1bc70713          	addi	a4,a4,444 # 800201bc <metal_segment_heap_target_end+0xfffbfef0>
204002d4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:40
  *c = &(sc[0]);
204002d6:	fd442783          	lw	a5,-44(s0)
204002da:	80040737          	lui	a4,0x80040
204002de:	bfc70713          	addi	a4,a4,-1028 # 8003fbfc <metal_segment_heap_target_end+0xfffdf930>
204002e2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43
#endif

  for (i = 0; i < n; i++)
204002e4:	fe042623          	sw	zero,-20(s0)
204002e8:	a0a5                	j	20400350 <init_matrix+0xac>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:44
    for (j = 0; j < n; j++) {
204002ea:	fe042423          	sw	zero,-24(s0)
204002ee:	a0b1                	j	2040033a <init_matrix+0x96>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:45 (discriminator 3)
      (*a)[i*n+j] = zero;
204002f0:	fdc42783          	lw	a5,-36(s0)
204002f4:	4398                	lw	a4,0(a5)
204002f6:	fec42683          	lw	a3,-20(s0)
204002fa:	fd042783          	lw	a5,-48(s0)
204002fe:	02f686b3          	mul	a3,a3,a5
20400302:	fe842783          	lw	a5,-24(s0)
20400306:	97b6                	add	a5,a5,a3
20400308:	078a                	slli	a5,a5,0x2
2040030a:	97ba                	add	a5,a5,a4
2040030c:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:46 (discriminator 3)
      (*b)[i*n+j] = pi;
20400310:	fd842783          	lw	a5,-40(s0)
20400314:	4398                	lw	a4,0(a5)
20400316:	fec42683          	lw	a3,-20(s0)
2040031a:	fd042783          	lw	a5,-48(s0)
2040031e:	02f686b3          	mul	a3,a3,a5
20400322:	fe842783          	lw	a5,-24(s0)
20400326:	97b6                	add	a5,a5,a3
20400328:	078a                	slli	a5,a5,0x2
2040032a:	97ba                	add	a5,a5,a4
2040032c:	470d                	li	a4,3
2040032e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:44 (discriminator 3)
    for (j = 0; j < n; j++) {
20400330:	fe842783          	lw	a5,-24(s0)
20400334:	0785                	addi	a5,a5,1
20400336:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:44 (discriminator 1)
2040033a:	fe842703          	lw	a4,-24(s0)
2040033e:	fd042783          	lw	a5,-48(s0)
20400342:	faf747e3          	blt	a4,a5,204002f0 <init_matrix+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43 (discriminator 2)
  for (i = 0; i < n; i++)
20400346:	fec42783          	lw	a5,-20(s0)
2040034a:	0785                	addi	a5,a5,1
2040034c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43 (discriminator 1)
20400350:	fec42703          	lw	a4,-20(s0)
20400354:	fd042783          	lw	a5,-48(s0)
20400358:	f8f749e3          	blt	a4,a5,204002ea <init_matrix+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49
  }

  for (i = 0; i < n; i++)
2040035c:	fe042623          	sw	zero,-20(s0)
20400360:	a035                	j	2040038c <init_matrix+0xe8>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:50 (discriminator 3)
    (*a)[i*n+i] = one;
20400362:	fdc42783          	lw	a5,-36(s0)
20400366:	4398                	lw	a4,0(a5)
20400368:	fec42683          	lw	a3,-20(s0)
2040036c:	fd042783          	lw	a5,-48(s0)
20400370:	02f686b3          	mul	a3,a3,a5
20400374:	fec42783          	lw	a5,-20(s0)
20400378:	97b6                	add	a5,a5,a3
2040037a:	078a                	slli	a5,a5,0x2
2040037c:	97ba                	add	a5,a5,a4
2040037e:	4705                	li	a4,1
20400380:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49 (discriminator 3)
  for (i = 0; i < n; i++)
20400382:	fec42783          	lw	a5,-20(s0)
20400386:	0785                	addi	a5,a5,1
20400388:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49 (discriminator 1)
2040038c:	fec42703          	lw	a4,-20(s0)
20400390:	fd042783          	lw	a5,-48(s0)
20400394:	fcf747e3          	blt	a4,a5,20400362 <init_matrix+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:51
}
20400398:	0001                	nop
2040039a:	5432                	lw	s0,44(sp)
2040039c:	6145                	addi	sp,sp,48
2040039e:	8082                	ret

204003a0 <mm>:
mm():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:53

void mm(element_t* a, element_t* b, element_t* c, int n, int m, int p) {
204003a0:	7139                	addi	sp,sp,-64
204003a2:	de06                	sw	ra,60(sp)
204003a4:	dc22                	sw	s0,56(sp)
204003a6:	da26                	sw	s1,52(sp)
204003a8:	0080                	addi	s0,sp,64
204003aa:	fca42e23          	sw	a0,-36(s0)
204003ae:	fcb42c23          	sw	a1,-40(s0)
204003b2:	fcc42a23          	sw	a2,-44(s0)
204003b6:	fcd42823          	sw	a3,-48(s0)
204003ba:	fce42623          	sw	a4,-52(s0)
204003be:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:57
  int i, j, k;
  float r;

  for (i = 0; i < n; i++)
204003c2:	fe042623          	sw	zero,-20(s0)
204003c6:	a829                	j	204003e0 <mm+0x40>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:58 (discriminator 3)
      printf("round %d\n", i);
204003c8:	fec42583          	lw	a1,-20(s0)
204003cc:	204057b7          	lui	a5,0x20405
204003d0:	78478513          	addi	a0,a5,1924 # 20405784 <_exit+0x16>
204003d4:	2a7d                	jal	20400592 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:57 (discriminator 3)
  for (i = 0; i < n; i++)
204003d6:	fec42783          	lw	a5,-20(s0)
204003da:	0785                	addi	a5,a5,1
204003dc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:57 (discriminator 1)
204003e0:	fec42703          	lw	a4,-20(s0)
204003e4:	fd042783          	lw	a5,-48(s0)
204003e8:	fef740e3          	blt	a4,a5,204003c8 <mm+0x28>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:59
    for (j = 0; j < p; j++) {
204003ec:	fe042423          	sw	zero,-24(s0)
204003f0:	a075                	j	2040049c <mm+0xfc>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:60
      r = zero;
204003f2:	00000793          	li	a5,0
204003f6:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61
      for (k = 0; k < m; k++)
204003fa:	fe042223          	sw	zero,-28(s0)
204003fe:	a085                	j	2040045e <mm+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:62 (discriminator 3)
        r = r + a[i*m+k] * b[k*p+j];
20400400:	fec42703          	lw	a4,-20(s0)
20400404:	fcc42783          	lw	a5,-52(s0)
20400408:	02f70733          	mul	a4,a4,a5
2040040c:	fe442783          	lw	a5,-28(s0)
20400410:	97ba                	add	a5,a5,a4
20400412:	078a                	slli	a5,a5,0x2
20400414:	fdc42703          	lw	a4,-36(s0)
20400418:	97ba                	add	a5,a5,a4
2040041a:	4398                	lw	a4,0(a5)
2040041c:	fe442683          	lw	a3,-28(s0)
20400420:	fc842783          	lw	a5,-56(s0)
20400424:	02f686b3          	mul	a3,a3,a5
20400428:	fe842783          	lw	a5,-24(s0)
2040042c:	97b6                	add	a5,a5,a3
2040042e:	078a                	slli	a5,a5,0x2
20400430:	fd842683          	lw	a3,-40(s0)
20400434:	97b6                	add	a5,a5,a3
20400436:	439c                	lw	a5,0(a5)
20400438:	02f707b3          	mul	a5,a4,a5
2040043c:	853e                	mv	a0,a5
2040043e:	051010ef          	jal	ra,20401c8e <__floatunsisf>
20400442:	87aa                	mv	a5,a0
20400444:	85be                	mv	a1,a5
20400446:	fe042503          	lw	a0,-32(s0)
2040044a:	4e4010ef          	jal	ra,2040192e <__addsf3>
2040044e:	87aa                	mv	a5,a0
20400450:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61 (discriminator 3)
      for (k = 0; k < m; k++)
20400454:	fe442783          	lw	a5,-28(s0)
20400458:	0785                	addi	a5,a5,1
2040045a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61 (discriminator 1)
2040045e:	fe442703          	lw	a4,-28(s0)
20400462:	fcc42783          	lw	a5,-52(s0)
20400466:	f8f74de3          	blt	a4,a5,20400400 <mm+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:63 (discriminator 2)
      c[i*p+j] = r;
2040046a:	fec42703          	lw	a4,-20(s0)
2040046e:	fc842783          	lw	a5,-56(s0)
20400472:	02f70733          	mul	a4,a4,a5
20400476:	fe842783          	lw	a5,-24(s0)
2040047a:	97ba                	add	a5,a5,a4
2040047c:	078a                	slli	a5,a5,0x2
2040047e:	fd442703          	lw	a4,-44(s0)
20400482:	00f704b3          	add	s1,a4,a5
20400486:	fe042503          	lw	a0,-32(s0)
2040048a:	7b0010ef          	jal	ra,20401c3a <__fixunssfsi>
2040048e:	87aa                	mv	a5,a0
20400490:	c09c                	sw	a5,0(s1)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:59 (discriminator 2)
    for (j = 0; j < p; j++) {
20400492:	fe842783          	lw	a5,-24(s0)
20400496:	0785                	addi	a5,a5,1
20400498:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:59 (discriminator 1)
2040049c:	fe842703          	lw	a4,-24(s0)
204004a0:	fc842783          	lw	a5,-56(s0)
204004a4:	f4f747e3          	blt	a4,a5,204003f2 <mm+0x52>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:65
    }
}
204004a8:	0001                	nop
204004aa:	50f2                	lw	ra,60(sp)
204004ac:	5462                	lw	s0,56(sp)
204004ae:	54d2                	lw	s1,52(sp)
204004b0:	6121                	addi	sp,sp,64
204004b2:	8082                	ret

204004b4 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:68


int main() {
204004b4:	7179                	addi	sp,sp,-48
204004b6:	d606                	sw	ra,44(sp)
204004b8:	d422                	sw	s0,40(sp)
204004ba:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:69
    printf("hola inicio\n");
204004bc:	204057b7          	lui	a5,0x20405
204004c0:	79078513          	addi	a0,a5,1936 # 20405790 <_exit+0x22>
204004c4:	2c69                	jal	2040075e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:72
  element_t *a, *b, *c;
  // init matrix
    printf("hola 2\n");
204004c6:	204057b7          	lui	a5,0x20405
204004ca:	79c78513          	addi	a0,a5,1948 # 2040579c <_exit+0x2e>
204004ce:	2c41                	jal	2040075e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:73
  init_matrix(&a, &b, &c, N);
204004d0:	fdc40613          	addi	a2,s0,-36
204004d4:	fe040713          	addi	a4,s0,-32
204004d8:	fe440793          	addi	a5,s0,-28
204004dc:	0b400693          	li	a3,180
204004e0:	85ba                	mv	a1,a4
204004e2:	853e                	mv	a0,a5
204004e4:	33c1                	jal	204002a4 <init_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:75
  // multiply
    printf("hola 3\n");
204004e6:	204057b7          	lui	a5,0x20405
204004ea:	7a478513          	addi	a0,a5,1956 # 204057a4 <_exit+0x36>
204004ee:	2c85                	jal	2040075e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:76
  unsigned startc = rdcycle();
204004f0:	3b01                	jal	20400200 <rdcycle>
204004f2:	87aa                	mv	a5,a0
204004f4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:77
    printf("hola 4\n");
204004f8:	204057b7          	lui	a5,0x20405
204004fc:	7ac78513          	addi	a0,a5,1964 # 204057ac <_exit+0x3e>
20400500:	2cb9                	jal	2040075e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:78
  mm(a, b, c, N, N, N);
20400502:	fe442503          	lw	a0,-28(s0)
20400506:	fe042583          	lw	a1,-32(s0)
2040050a:	fdc42603          	lw	a2,-36(s0)
2040050e:	0b400793          	li	a5,180
20400512:	0b400713          	li	a4,180
20400516:	0b400693          	li	a3,180
2040051a:	3559                	jal	204003a0 <mm>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:79
    printf("hola 5\n");
2040051c:	204057b7          	lui	a5,0x20405
20400520:	7b478513          	addi	a0,a5,1972 # 204057b4 <_exit+0x46>
20400524:	2c2d                	jal	2040075e <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:80
  unsigned endc = rdcycle();
20400526:	39e9                	jal	20400200 <rdcycle>
20400528:	87aa                	mv	a5,a0
2040052a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:81
  endc = endc - startc;
2040052e:	fe842703          	lw	a4,-24(s0)
20400532:	fec42783          	lw	a5,-20(s0)
20400536:	40f707b3          	sub	a5,a4,a5
2040053a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:82
    printf("hola");
2040053e:	204057b7          	lui	a5,0x20405
20400542:	7bc78513          	addi	a0,a5,1980 # 204057bc <_exit+0x4e>
20400546:	20b1                	jal	20400592 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:84
#ifdef PFDEBUG
  printf("Cycles %x\n", endc);
20400548:	fe842583          	lw	a1,-24(s0)
2040054c:	204057b7          	lui	a5,0x20405
20400550:	7c478513          	addi	a0,a5,1988 # 204057c4 <_exit+0x56>
20400554:	283d                	jal	20400592 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:85
     print_matrix(a, N, N);
20400556:	fe442783          	lw	a5,-28(s0)
2040055a:	0b400613          	li	a2,180
2040055e:	0b400593          	li	a1,180
20400562:	853e                	mv	a0,a5
20400564:	396d                	jal	2040021e <print_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:86
     print_matrix(b, N, N);
20400566:	fe042783          	lw	a5,-32(s0)
2040056a:	0b400613          	li	a2,180
2040056e:	0b400593          	li	a1,180
20400572:	853e                	mv	a0,a5
20400574:	316d                	jal	2040021e <print_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:87
     print_matrix(c, N, N);
20400576:	fdc42783          	lw	a5,-36(s0)
2040057a:	0b400613          	li	a2,180
2040057e:	0b400593          	li	a1,180
20400582:	853e                	mv	a0,a5
20400584:	3969                	jal	2040021e <print_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:95
  free(a);
  free(b);
  free(c);
#endif

  return 0;
20400586:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:96
20400588:	853e                	mv	a0,a5
2040058a:	50b2                	lw	ra,44(sp)
2040058c:	5422                	lw	s0,40(sp)
2040058e:	6145                	addi	sp,sp,48
20400590:	8082                	ret

20400592 <iprintf>:
printf():
20400592:	7139                	addi	sp,sp,-64
20400594:	da3e                	sw	a5,52(sp)
20400596:	d22e                	sw	a1,36(sp)
20400598:	d432                	sw	a2,40(sp)
2040059a:	d636                	sw	a3,44(sp)
2040059c:	d83a                	sw	a4,48(sp)
2040059e:	dc42                	sw	a6,56(sp)
204005a0:	de46                	sw	a7,60(sp)
204005a2:	5fc00797          	auipc	a5,0x5fc00
204005a6:	1a678793          	addi	a5,a5,422 # 80000748 <_impure_ptr>
204005aa:	cc22                	sw	s0,24(sp)
204005ac:	4380                	lw	s0,0(a5)
204005ae:	ca26                	sw	s1,20(sp)
204005b0:	ce06                	sw	ra,28(sp)
204005b2:	84aa                	mv	s1,a0
204005b4:	c409                	beqz	s0,204005be <iprintf+0x2c>
204005b6:	4c1c                	lw	a5,24(s0)
204005b8:	e399                	bnez	a5,204005be <iprintf+0x2c>
204005ba:	8522                	mv	a0,s0
204005bc:	23d5                	jal	20400ba0 <__sinit>
204005be:	440c                	lw	a1,8(s0)
204005c0:	1054                	addi	a3,sp,36
204005c2:	8626                	mv	a2,s1
204005c4:	8522                	mv	a0,s0
204005c6:	c636                	sw	a3,12(sp)
204005c8:	2df000ef          	jal	ra,204010a6 <_vfiprintf_r>
204005cc:	40f2                	lw	ra,28(sp)
204005ce:	4462                	lw	s0,24(sp)
204005d0:	44d2                	lw	s1,20(sp)
204005d2:	6121                	addi	sp,sp,64
204005d4:	8082                	ret

204005d6 <putchar>:
putchar():
204005d6:	1101                	addi	sp,sp,-32
204005d8:	5fc00797          	auipc	a5,0x5fc00
204005dc:	17078793          	addi	a5,a5,368 # 80000748 <_impure_ptr>
204005e0:	cc22                	sw	s0,24(sp)
204005e2:	4380                	lw	s0,0(a5)
204005e4:	ce06                	sw	ra,28(sp)
204005e6:	85aa                	mv	a1,a0
204005e8:	c419                	beqz	s0,204005f6 <putchar+0x20>
204005ea:	4c1c                	lw	a5,24(s0)
204005ec:	e789                	bnez	a5,204005f6 <putchar+0x20>
204005ee:	c62a                	sw	a0,12(sp)
204005f0:	8522                	mv	a0,s0
204005f2:	237d                	jal	20400ba0 <__sinit>
204005f4:	45b2                	lw	a1,12(sp)
204005f6:	4410                	lw	a2,8(s0)
204005f8:	8522                	mv	a0,s0
204005fa:	4462                	lw	s0,24(sp)
204005fc:	40f2                	lw	ra,28(sp)
204005fe:	6105                	addi	sp,sp,32
20400600:	a009                	j	20400602 <_putc_r>

20400602 <_putc_r>:
_putc_r():
20400602:	1101                	addi	sp,sp,-32
20400604:	cc22                	sw	s0,24(sp)
20400606:	ce06                	sw	ra,28(sp)
20400608:	842a                	mv	s0,a0
2040060a:	c901                	beqz	a0,2040061a <_putc_r+0x18>
2040060c:	4d1c                	lw	a5,24(a0)
2040060e:	e791                	bnez	a5,2040061a <_putc_r+0x18>
20400610:	c632                	sw	a2,12(sp)
20400612:	c42e                	sw	a1,8(sp)
20400614:	2371                	jal	20400ba0 <__sinit>
20400616:	4632                	lw	a2,12(sp)
20400618:	45a2                	lw	a1,8(sp)
2040061a:	00005797          	auipc	a5,0x5
2040061e:	1d678793          	addi	a5,a5,470 # 204057f0 <__sf_fake_stdin>
20400622:	02f61563          	bne	a2,a5,2040064c <_putc_r+0x4a>
20400626:	4050                	lw	a2,4(s0)
20400628:	461c                	lw	a5,8(a2)
2040062a:	17fd                	addi	a5,a5,-1
2040062c:	c61c                	sw	a5,8(a2)
2040062e:	0207df63          	bgez	a5,2040066c <_putc_r+0x6a>
20400632:	4e18                	lw	a4,24(a2)
20400634:	00e7c763          	blt	a5,a4,20400642 <_putc_r+0x40>
20400638:	0ff5f793          	andi	a5,a1,255
2040063c:	4729                	li	a4,10
2040063e:	02e79763          	bne	a5,a4,2040066c <_putc_r+0x6a>
20400642:	8522                	mv	a0,s0
20400644:	4462                	lw	s0,24(sp)
20400646:	40f2                	lw	ra,28(sp)
20400648:	6105                	addi	sp,sp,32
2040064a:	a20d                	j	2040076c <__swbuf_r>
2040064c:	00005797          	auipc	a5,0x5
20400650:	1c478793          	addi	a5,a5,452 # 20405810 <__sf_fake_stdout>
20400654:	00f61463          	bne	a2,a5,2040065c <_putc_r+0x5a>
20400658:	4410                	lw	a2,8(s0)
2040065a:	b7f9                	j	20400628 <_putc_r+0x26>
2040065c:	00005797          	auipc	a5,0x5
20400660:	17478793          	addi	a5,a5,372 # 204057d0 <__sf_fake_stderr>
20400664:	fcf612e3          	bne	a2,a5,20400628 <_putc_r+0x26>
20400668:	4450                	lw	a2,12(s0)
2040066a:	bf7d                	j	20400628 <_putc_r+0x26>
2040066c:	421c                	lw	a5,0(a2)
2040066e:	0ff5f513          	andi	a0,a1,255
20400672:	00178713          	addi	a4,a5,1
20400676:	c218                	sw	a4,0(a2)
20400678:	00b78023          	sb	a1,0(a5)
2040067c:	40f2                	lw	ra,28(sp)
2040067e:	4462                	lw	s0,24(sp)
20400680:	6105                	addi	sp,sp,32
20400682:	8082                	ret

20400684 <_puts_r>:
_puts_r():
20400684:	1101                	addi	sp,sp,-32
20400686:	ca26                	sw	s1,20(sp)
20400688:	c84a                	sw	s2,16(sp)
2040068a:	ce06                	sw	ra,28(sp)
2040068c:	cc22                	sw	s0,24(sp)
2040068e:	c64e                	sw	s3,12(sp)
20400690:	c452                	sw	s4,8(sp)
20400692:	84aa                	mv	s1,a0
20400694:	892e                	mv	s2,a1
20400696:	c501                	beqz	a0,2040069e <_puts_r+0x1a>
20400698:	4d1c                	lw	a5,24(a0)
2040069a:	e391                	bnez	a5,2040069e <_puts_r+0x1a>
2040069c:	2311                	jal	20400ba0 <__sinit>
2040069e:	4c9c                	lw	a5,24(s1)
204006a0:	4480                	lw	s0,8(s1)
204006a2:	e399                	bnez	a5,204006a8 <_puts_r+0x24>
204006a4:	8526                	mv	a0,s1
204006a6:	29ed                	jal	20400ba0 <__sinit>
204006a8:	00005797          	auipc	a5,0x5
204006ac:	14878793          	addi	a5,a5,328 # 204057f0 <__sf_fake_stdin>
204006b0:	02f41c63          	bne	s0,a5,204006e8 <_puts_r+0x64>
204006b4:	40c0                	lw	s0,4(s1)
204006b6:	00c45783          	lhu	a5,12(s0)
204006ba:	8ba1                	andi	a5,a5,8
204006bc:	c7b1                	beqz	a5,20400708 <_puts_r+0x84>
204006be:	481c                	lw	a5,16(s0)
204006c0:	c7a1                	beqz	a5,20400708 <_puts_r+0x84>
204006c2:	59fd                	li	s3,-1
204006c4:	4a29                	li	s4,10
204006c6:	441c                	lw	a5,8(s0)
204006c8:	00094583          	lbu	a1,0(s2)
204006cc:	17fd                	addi	a5,a5,-1
204006ce:	e9b1                	bnez	a1,20400722 <_puts_r+0x9e>
204006d0:	c41c                	sw	a5,8(s0)
204006d2:	0607de63          	bgez	a5,2040074e <_puts_r+0xca>
204006d6:	8622                	mv	a2,s0
204006d8:	45a9                	li	a1,10
204006da:	8526                	mv	a0,s1
204006dc:	2841                	jal	2040076c <__swbuf_r>
204006de:	57fd                	li	a5,-1
204006e0:	02f50863          	beq	a0,a5,20400710 <_puts_r+0x8c>
204006e4:	4529                	li	a0,10
204006e6:	a035                	j	20400712 <_puts_r+0x8e>
204006e8:	00005797          	auipc	a5,0x5
204006ec:	12878793          	addi	a5,a5,296 # 20405810 <__sf_fake_stdout>
204006f0:	00f41463          	bne	s0,a5,204006f8 <_puts_r+0x74>
204006f4:	4480                	lw	s0,8(s1)
204006f6:	b7c1                	j	204006b6 <_puts_r+0x32>
204006f8:	00005797          	auipc	a5,0x5
204006fc:	0d878793          	addi	a5,a5,216 # 204057d0 <__sf_fake_stderr>
20400700:	faf41be3          	bne	s0,a5,204006b6 <_puts_r+0x32>
20400704:	44c0                	lw	s0,12(s1)
20400706:	bf45                	j	204006b6 <_puts_r+0x32>
20400708:	85a2                	mv	a1,s0
2040070a:	8526                	mv	a0,s1
2040070c:	2205                	jal	2040082c <__swsetup_r>
2040070e:	d955                	beqz	a0,204006c2 <_puts_r+0x3e>
20400710:	557d                	li	a0,-1
20400712:	40f2                	lw	ra,28(sp)
20400714:	4462                	lw	s0,24(sp)
20400716:	44d2                	lw	s1,20(sp)
20400718:	4942                	lw	s2,16(sp)
2040071a:	49b2                	lw	s3,12(sp)
2040071c:	4a22                	lw	s4,8(sp)
2040071e:	6105                	addi	sp,sp,32
20400720:	8082                	ret
20400722:	c41c                	sw	a5,8(s0)
20400724:	0905                	addi	s2,s2,1
20400726:	0007d763          	bgez	a5,20400734 <_puts_r+0xb0>
2040072a:	4c18                	lw	a4,24(s0)
2040072c:	00e7cb63          	blt	a5,a4,20400742 <_puts_r+0xbe>
20400730:	01458963          	beq	a1,s4,20400742 <_puts_r+0xbe>
20400734:	401c                	lw	a5,0(s0)
20400736:	00178713          	addi	a4,a5,1
2040073a:	c018                	sw	a4,0(s0)
2040073c:	00b78023          	sb	a1,0(a5)
20400740:	b759                	j	204006c6 <_puts_r+0x42>
20400742:	8622                	mv	a2,s0
20400744:	8526                	mv	a0,s1
20400746:	201d                	jal	2040076c <__swbuf_r>
20400748:	f7351fe3          	bne	a0,s3,204006c6 <_puts_r+0x42>
2040074c:	b7d1                	j	20400710 <_puts_r+0x8c>
2040074e:	401c                	lw	a5,0(s0)
20400750:	00178713          	addi	a4,a5,1
20400754:	c018                	sw	a4,0(s0)
20400756:	4729                	li	a4,10
20400758:	00e78023          	sb	a4,0(a5)
2040075c:	b761                	j	204006e4 <_puts_r+0x60>

2040075e <puts>:
puts():
2040075e:	5fc00797          	auipc	a5,0x5fc00
20400762:	fea78793          	addi	a5,a5,-22 # 80000748 <_impure_ptr>
20400766:	85aa                	mv	a1,a0
20400768:	4388                	lw	a0,0(a5)
2040076a:	bf29                	j	20400684 <_puts_r>

2040076c <__swbuf_r>:
__swbuf_r():
2040076c:	1101                	addi	sp,sp,-32
2040076e:	cc22                	sw	s0,24(sp)
20400770:	ca26                	sw	s1,20(sp)
20400772:	c84a                	sw	s2,16(sp)
20400774:	ce06                	sw	ra,28(sp)
20400776:	c64e                	sw	s3,12(sp)
20400778:	84aa                	mv	s1,a0
2040077a:	892e                	mv	s2,a1
2040077c:	8432                	mv	s0,a2
2040077e:	c501                	beqz	a0,20400786 <__swbuf_r+0x1a>
20400780:	4d1c                	lw	a5,24(a0)
20400782:	e391                	bnez	a5,20400786 <__swbuf_r+0x1a>
20400784:	2931                	jal	20400ba0 <__sinit>
20400786:	00005797          	auipc	a5,0x5
2040078a:	06a78793          	addi	a5,a5,106 # 204057f0 <__sf_fake_stdin>
2040078e:	06f41963          	bne	s0,a5,20400800 <__swbuf_r+0x94>
20400792:	40c0                	lw	s0,4(s1)
20400794:	4c1c                	lw	a5,24(s0)
20400796:	c41c                	sw	a5,8(s0)
20400798:	00c45783          	lhu	a5,12(s0)
2040079c:	8ba1                	andi	a5,a5,8
2040079e:	c3c9                	beqz	a5,20400820 <__swbuf_r+0xb4>
204007a0:	481c                	lw	a5,16(s0)
204007a2:	cfbd                	beqz	a5,20400820 <__swbuf_r+0xb4>
204007a4:	481c                	lw	a5,16(s0)
204007a6:	4008                	lw	a0,0(s0)
204007a8:	0ff97993          	andi	s3,s2,255
204007ac:	0ff97913          	andi	s2,s2,255
204007b0:	8d1d                	sub	a0,a0,a5
204007b2:	485c                	lw	a5,20(s0)
204007b4:	00f54663          	blt	a0,a5,204007c0 <__swbuf_r+0x54>
204007b8:	85a2                	mv	a1,s0
204007ba:	8526                	mv	a0,s1
204007bc:	24e9                	jal	20400a86 <_fflush_r>
204007be:	e52d                	bnez	a0,20400828 <__swbuf_r+0xbc>
204007c0:	441c                	lw	a5,8(s0)
204007c2:	0505                	addi	a0,a0,1
204007c4:	17fd                	addi	a5,a5,-1
204007c6:	c41c                	sw	a5,8(s0)
204007c8:	401c                	lw	a5,0(s0)
204007ca:	00178713          	addi	a4,a5,1
204007ce:	c018                	sw	a4,0(s0)
204007d0:	01378023          	sb	s3,0(a5)
204007d4:	485c                	lw	a5,20(s0)
204007d6:	00a78963          	beq	a5,a0,204007e8 <__swbuf_r+0x7c>
204007da:	00c45783          	lhu	a5,12(s0)
204007de:	8b85                	andi	a5,a5,1
204007e0:	cb81                	beqz	a5,204007f0 <__swbuf_r+0x84>
204007e2:	47a9                	li	a5,10
204007e4:	00f91663          	bne	s2,a5,204007f0 <__swbuf_r+0x84>
204007e8:	85a2                	mv	a1,s0
204007ea:	8526                	mv	a0,s1
204007ec:	2c69                	jal	20400a86 <_fflush_r>
204007ee:	ed0d                	bnez	a0,20400828 <__swbuf_r+0xbc>
204007f0:	40f2                	lw	ra,28(sp)
204007f2:	4462                	lw	s0,24(sp)
204007f4:	854a                	mv	a0,s2
204007f6:	44d2                	lw	s1,20(sp)
204007f8:	4942                	lw	s2,16(sp)
204007fa:	49b2                	lw	s3,12(sp)
204007fc:	6105                	addi	sp,sp,32
204007fe:	8082                	ret
20400800:	00005797          	auipc	a5,0x5
20400804:	01078793          	addi	a5,a5,16 # 20405810 <__sf_fake_stdout>
20400808:	00f41463          	bne	s0,a5,20400810 <__swbuf_r+0xa4>
2040080c:	4480                	lw	s0,8(s1)
2040080e:	b759                	j	20400794 <__swbuf_r+0x28>
20400810:	00005797          	auipc	a5,0x5
20400814:	fc078793          	addi	a5,a5,-64 # 204057d0 <__sf_fake_stderr>
20400818:	f6f41ee3          	bne	s0,a5,20400794 <__swbuf_r+0x28>
2040081c:	44c0                	lw	s0,12(s1)
2040081e:	bf9d                	j	20400794 <__swbuf_r+0x28>
20400820:	85a2                	mv	a1,s0
20400822:	8526                	mv	a0,s1
20400824:	2021                	jal	2040082c <__swsetup_r>
20400826:	dd3d                	beqz	a0,204007a4 <__swbuf_r+0x38>
20400828:	597d                	li	s2,-1
2040082a:	b7d9                	j	204007f0 <__swbuf_r+0x84>

2040082c <__swsetup_r>:
__swsetup_r():
2040082c:	1141                	addi	sp,sp,-16
2040082e:	5fc00797          	auipc	a5,0x5fc00
20400832:	f1a78793          	addi	a5,a5,-230 # 80000748 <_impure_ptr>
20400836:	c226                	sw	s1,4(sp)
20400838:	4384                	lw	s1,0(a5)
2040083a:	c422                	sw	s0,8(sp)
2040083c:	c04a                	sw	s2,0(sp)
2040083e:	c606                	sw	ra,12(sp)
20400840:	892a                	mv	s2,a0
20400842:	842e                	mv	s0,a1
20400844:	c489                	beqz	s1,2040084e <__swsetup_r+0x22>
20400846:	4c9c                	lw	a5,24(s1)
20400848:	e399                	bnez	a5,2040084e <__swsetup_r+0x22>
2040084a:	8526                	mv	a0,s1
2040084c:	2e91                	jal	20400ba0 <__sinit>
2040084e:	00005797          	auipc	a5,0x5
20400852:	fa278793          	addi	a5,a5,-94 # 204057f0 <__sf_fake_stdin>
20400856:	02f41c63          	bne	s0,a5,2040088e <__swsetup_r+0x62>
2040085a:	40c0                	lw	s0,4(s1)
2040085c:	00c41703          	lh	a4,12(s0)
20400860:	01071793          	slli	a5,a4,0x10
20400864:	83c1                	srli	a5,a5,0x10
20400866:	0087f693          	andi	a3,a5,8
2040086a:	eeb5                	bnez	a3,204008e6 <__swsetup_r+0xba>
2040086c:	0107f693          	andi	a3,a5,16
20400870:	ee9d                	bnez	a3,204008ae <__swsetup_r+0x82>
20400872:	47a5                	li	a5,9
20400874:	00f92023          	sw	a5,0(s2)
20400878:	04076713          	ori	a4,a4,64
2040087c:	00e41623          	sh	a4,12(s0)
20400880:	557d                	li	a0,-1
20400882:	40b2                	lw	ra,12(sp)
20400884:	4422                	lw	s0,8(sp)
20400886:	4492                	lw	s1,4(sp)
20400888:	4902                	lw	s2,0(sp)
2040088a:	0141                	addi	sp,sp,16
2040088c:	8082                	ret
2040088e:	00005797          	auipc	a5,0x5
20400892:	f8278793          	addi	a5,a5,-126 # 20405810 <__sf_fake_stdout>
20400896:	00f41463          	bne	s0,a5,2040089e <__swsetup_r+0x72>
2040089a:	4480                	lw	s0,8(s1)
2040089c:	b7c1                	j	2040085c <__swsetup_r+0x30>
2040089e:	00005797          	auipc	a5,0x5
204008a2:	f3278793          	addi	a5,a5,-206 # 204057d0 <__sf_fake_stderr>
204008a6:	faf41be3          	bne	s0,a5,2040085c <__swsetup_r+0x30>
204008aa:	44c0                	lw	s0,12(s1)
204008ac:	bf45                	j	2040085c <__swsetup_r+0x30>
204008ae:	8b91                	andi	a5,a5,4
204008b0:	c78d                	beqz	a5,204008da <__swsetup_r+0xae>
204008b2:	584c                	lw	a1,52(s0)
204008b4:	c989                	beqz	a1,204008c6 <__swsetup_r+0x9a>
204008b6:	04440793          	addi	a5,s0,68
204008ba:	00f58463          	beq	a1,a5,204008c2 <__swsetup_r+0x96>
204008be:	854a                	mv	a0,s2
204008c0:	2bc5                	jal	20400eb0 <_free_r>
204008c2:	02042a23          	sw	zero,52(s0)
204008c6:	00c45783          	lhu	a5,12(s0)
204008ca:	00042223          	sw	zero,4(s0)
204008ce:	fdb7f793          	andi	a5,a5,-37
204008d2:	00f41623          	sh	a5,12(s0)
204008d6:	481c                	lw	a5,16(s0)
204008d8:	c01c                	sw	a5,0(s0)
204008da:	00c45783          	lhu	a5,12(s0)
204008de:	0087e793          	ori	a5,a5,8
204008e2:	00f41623          	sh	a5,12(s0)
204008e6:	481c                	lw	a5,16(s0)
204008e8:	ef81                	bnez	a5,20400900 <__swsetup_r+0xd4>
204008ea:	00c45783          	lhu	a5,12(s0)
204008ee:	20000713          	li	a4,512
204008f2:	2807f793          	andi	a5,a5,640
204008f6:	00e78563          	beq	a5,a4,20400900 <__swsetup_r+0xd4>
204008fa:	85a2                	mv	a1,s0
204008fc:	854a                	mv	a0,s2
204008fe:	21bd                	jal	20400d6c <__smakebuf_r>
20400900:	00c45783          	lhu	a5,12(s0)
20400904:	0017f713          	andi	a4,a5,1
20400908:	c705                	beqz	a4,20400930 <__swsetup_r+0x104>
2040090a:	485c                	lw	a5,20(s0)
2040090c:	00042423          	sw	zero,8(s0)
20400910:	40f007b3          	neg	a5,a5
20400914:	cc1c                	sw	a5,24(s0)
20400916:	481c                	lw	a5,16(s0)
20400918:	4501                	li	a0,0
2040091a:	f7a5                	bnez	a5,20400882 <__swsetup_r+0x56>
2040091c:	00c41783          	lh	a5,12(s0)
20400920:	0807f713          	andi	a4,a5,128
20400924:	df39                	beqz	a4,20400882 <__swsetup_r+0x56>
20400926:	0407e793          	ori	a5,a5,64
2040092a:	00f41623          	sh	a5,12(s0)
2040092e:	bf89                	j	20400880 <__swsetup_r+0x54>
20400930:	8b89                	andi	a5,a5,2
20400932:	4701                	li	a4,0
20400934:	e391                	bnez	a5,20400938 <__swsetup_r+0x10c>
20400936:	4858                	lw	a4,20(s0)
20400938:	c418                	sw	a4,8(s0)
2040093a:	bff1                	j	20400916 <__swsetup_r+0xea>

2040093c <__sflush_r>:
__sflush_r():
2040093c:	00c5d783          	lhu	a5,12(a1)
20400940:	1101                	addi	sp,sp,-32
20400942:	cc22                	sw	s0,24(sp)
20400944:	ca26                	sw	s1,20(sp)
20400946:	ce06                	sw	ra,28(sp)
20400948:	c84a                	sw	s2,16(sp)
2040094a:	c64e                	sw	s3,12(sp)
2040094c:	0087f713          	andi	a4,a5,8
20400950:	84aa                	mv	s1,a0
20400952:	842e                	mv	s0,a1
20400954:	e765                	bnez	a4,20400a3c <__sflush_r+0x100>
20400956:	41d8                	lw	a4,4(a1)
20400958:	00e04763          	bgtz	a4,20400966 <__sflush_r+0x2a>
2040095c:	41b8                	lw	a4,64(a1)
2040095e:	00e04463          	bgtz	a4,20400966 <__sflush_r+0x2a>
20400962:	4501                	li	a0,0
20400964:	a0c1                	j	20400a24 <__sflush_r+0xe8>
20400966:	5458                	lw	a4,44(s0)
20400968:	df6d                	beqz	a4,20400962 <__sflush_r+0x26>
2040096a:	0004a903          	lw	s2,0(s1)
2040096e:	01379693          	slli	a3,a5,0x13
20400972:	0004a023          	sw	zero,0(s1)
20400976:	0606de63          	bgez	a3,204009f2 <__sflush_r+0xb6>
2040097a:	4868                	lw	a0,84(s0)
2040097c:	00c45783          	lhu	a5,12(s0)
20400980:	8b91                	andi	a5,a5,4
20400982:	c799                	beqz	a5,20400990 <__sflush_r+0x54>
20400984:	405c                	lw	a5,4(s0)
20400986:	8d1d                	sub	a0,a0,a5
20400988:	585c                	lw	a5,52(s0)
2040098a:	c399                	beqz	a5,20400990 <__sflush_r+0x54>
2040098c:	403c                	lw	a5,64(s0)
2040098e:	8d1d                	sub	a0,a0,a5
20400990:	545c                	lw	a5,44(s0)
20400992:	500c                	lw	a1,32(s0)
20400994:	862a                	mv	a2,a0
20400996:	4681                	li	a3,0
20400998:	8526                	mv	a0,s1
2040099a:	9782                	jalr	a5
2040099c:	57fd                	li	a5,-1
2040099e:	00c45703          	lhu	a4,12(s0)
204009a2:	00f51d63          	bne	a0,a5,204009bc <__sflush_r+0x80>
204009a6:	4094                	lw	a3,0(s1)
204009a8:	47f5                	li	a5,29
204009aa:	08d7e463          	bltu	a5,a3,20400a32 <__sflush_r+0xf6>
204009ae:	204007b7          	lui	a5,0x20400
204009b2:	0785                	addi	a5,a5,1
204009b4:	00d7d7b3          	srl	a5,a5,a3
204009b8:	8b85                	andi	a5,a5,1
204009ba:	cfa5                	beqz	a5,20400a32 <__sflush_r+0xf6>
204009bc:	481c                	lw	a5,16(s0)
204009be:	00042223          	sw	zero,4(s0)
204009c2:	c01c                	sw	a5,0(s0)
204009c4:	01371793          	slli	a5,a4,0x13
204009c8:	0007d863          	bgez	a5,204009d8 <__sflush_r+0x9c>
204009cc:	57fd                	li	a5,-1
204009ce:	00f51463          	bne	a0,a5,204009d6 <__sflush_r+0x9a>
204009d2:	409c                	lw	a5,0(s1)
204009d4:	e391                	bnez	a5,204009d8 <__sflush_r+0x9c>
204009d6:	c868                	sw	a0,84(s0)
204009d8:	584c                	lw	a1,52(s0)
204009da:	0124a023          	sw	s2,0(s1)
204009de:	d1d1                	beqz	a1,20400962 <__sflush_r+0x26>
204009e0:	04440793          	addi	a5,s0,68
204009e4:	00f58463          	beq	a1,a5,204009ec <__sflush_r+0xb0>
204009e8:	8526                	mv	a0,s1
204009ea:	21d9                	jal	20400eb0 <_free_r>
204009ec:	02042a23          	sw	zero,52(s0)
204009f0:	bf8d                	j	20400962 <__sflush_r+0x26>
204009f2:	500c                	lw	a1,32(s0)
204009f4:	4685                	li	a3,1
204009f6:	4601                	li	a2,0
204009f8:	8526                	mv	a0,s1
204009fa:	9702                	jalr	a4
204009fc:	57fd                	li	a5,-1
204009fe:	f6f51fe3          	bne	a0,a5,2040097c <__sflush_r+0x40>
20400a02:	409c                	lw	a5,0(s1)
20400a04:	dfa5                	beqz	a5,2040097c <__sflush_r+0x40>
20400a06:	4775                	li	a4,29
20400a08:	00e78563          	beq	a5,a4,20400a12 <__sflush_r+0xd6>
20400a0c:	4759                	li	a4,22
20400a0e:	00e79563          	bne	a5,a4,20400a18 <__sflush_r+0xdc>
20400a12:	0124a023          	sw	s2,0(s1)
20400a16:	b7b1                	j	20400962 <__sflush_r+0x26>
20400a18:	00c45783          	lhu	a5,12(s0)
20400a1c:	0407e793          	ori	a5,a5,64
20400a20:	00f41623          	sh	a5,12(s0)
20400a24:	40f2                	lw	ra,28(sp)
20400a26:	4462                	lw	s0,24(sp)
20400a28:	44d2                	lw	s1,20(sp)
20400a2a:	4942                	lw	s2,16(sp)
20400a2c:	49b2                	lw	s3,12(sp)
20400a2e:	6105                	addi	sp,sp,32
20400a30:	8082                	ret
20400a32:	04076713          	ori	a4,a4,64
20400a36:	00e41623          	sh	a4,12(s0)
20400a3a:	b7ed                	j	20400a24 <__sflush_r+0xe8>
20400a3c:	0105a983          	lw	s3,16(a1)
20400a40:	f20981e3          	beqz	s3,20400962 <__sflush_r+0x26>
20400a44:	0005a903          	lw	s2,0(a1)
20400a48:	8b8d                	andi	a5,a5,3
20400a4a:	0135a023          	sw	s3,0(a1)
20400a4e:	41390933          	sub	s2,s2,s3
20400a52:	4701                	li	a4,0
20400a54:	e391                	bnez	a5,20400a58 <__sflush_r+0x11c>
20400a56:	49d8                	lw	a4,20(a1)
20400a58:	c418                	sw	a4,8(s0)
20400a5a:	f12054e3          	blez	s2,20400962 <__sflush_r+0x26>
20400a5e:	541c                	lw	a5,40(s0)
20400a60:	500c                	lw	a1,32(s0)
20400a62:	86ca                	mv	a3,s2
20400a64:	864e                	mv	a2,s3
20400a66:	8526                	mv	a0,s1
20400a68:	9782                	jalr	a5
20400a6a:	00a04a63          	bgtz	a0,20400a7e <__sflush_r+0x142>
20400a6e:	00c45783          	lhu	a5,12(s0)
20400a72:	557d                	li	a0,-1
20400a74:	0407e793          	ori	a5,a5,64
20400a78:	00f41623          	sh	a5,12(s0)
20400a7c:	b765                	j	20400a24 <__sflush_r+0xe8>
20400a7e:	99aa                	add	s3,s3,a0
20400a80:	40a90933          	sub	s2,s2,a0
20400a84:	bfd9                	j	20400a5a <__sflush_r+0x11e>

20400a86 <_fflush_r>:
_fflush_r():
20400a86:	499c                	lw	a5,16(a1)
20400a88:	cfb9                	beqz	a5,20400ae6 <_fflush_r+0x60>
20400a8a:	1101                	addi	sp,sp,-32
20400a8c:	cc22                	sw	s0,24(sp)
20400a8e:	ce06                	sw	ra,28(sp)
20400a90:	842a                	mv	s0,a0
20400a92:	c511                	beqz	a0,20400a9e <_fflush_r+0x18>
20400a94:	4d1c                	lw	a5,24(a0)
20400a96:	e781                	bnez	a5,20400a9e <_fflush_r+0x18>
20400a98:	c62e                	sw	a1,12(sp)
20400a9a:	2219                	jal	20400ba0 <__sinit>
20400a9c:	45b2                	lw	a1,12(sp)
20400a9e:	00005797          	auipc	a5,0x5
20400aa2:	d5278793          	addi	a5,a5,-686 # 204057f0 <__sf_fake_stdin>
20400aa6:	00f59b63          	bne	a1,a5,20400abc <_fflush_r+0x36>
20400aaa:	404c                	lw	a1,4(s0)
20400aac:	00c59783          	lh	a5,12(a1)
20400ab0:	c795                	beqz	a5,20400adc <_fflush_r+0x56>
20400ab2:	8522                	mv	a0,s0
20400ab4:	4462                	lw	s0,24(sp)
20400ab6:	40f2                	lw	ra,28(sp)
20400ab8:	6105                	addi	sp,sp,32
20400aba:	b549                	j	2040093c <__sflush_r>
20400abc:	00005797          	auipc	a5,0x5
20400ac0:	d5478793          	addi	a5,a5,-684 # 20405810 <__sf_fake_stdout>
20400ac4:	00f59463          	bne	a1,a5,20400acc <_fflush_r+0x46>
20400ac8:	440c                	lw	a1,8(s0)
20400aca:	b7cd                	j	20400aac <_fflush_r+0x26>
20400acc:	00005797          	auipc	a5,0x5
20400ad0:	d0478793          	addi	a5,a5,-764 # 204057d0 <__sf_fake_stderr>
20400ad4:	fcf59ce3          	bne	a1,a5,20400aac <_fflush_r+0x26>
20400ad8:	444c                	lw	a1,12(s0)
20400ada:	bfc9                	j	20400aac <_fflush_r+0x26>
20400adc:	40f2                	lw	ra,28(sp)
20400ade:	4462                	lw	s0,24(sp)
20400ae0:	4501                	li	a0,0
20400ae2:	6105                	addi	sp,sp,32
20400ae4:	8082                	ret
20400ae6:	4501                	li	a0,0
20400ae8:	8082                	ret

20400aea <std>:
std():
20400aea:	1141                	addi	sp,sp,-16
20400aec:	c422                	sw	s0,8(sp)
20400aee:	c606                	sw	ra,12(sp)
20400af0:	842a                	mv	s0,a0
20400af2:	00b51623          	sh	a1,12(a0)
20400af6:	00c51723          	sh	a2,14(a0)
20400afa:	00052023          	sw	zero,0(a0)
20400afe:	00052223          	sw	zero,4(a0)
20400b02:	00052423          	sw	zero,8(a0)
20400b06:	06052223          	sw	zero,100(a0)
20400b0a:	00052823          	sw	zero,16(a0)
20400b0e:	00052a23          	sw	zero,20(a0)
20400b12:	00052c23          	sw	zero,24(a0)
20400b16:	4621                	li	a2,8
20400b18:	4581                	li	a1,0
20400b1a:	05c50513          	addi	a0,a0,92
20400b1e:	24ed                	jal	20400e08 <memset>
20400b20:	00001797          	auipc	a5,0x1
20400b24:	85078793          	addi	a5,a5,-1968 # 20401370 <__sread>
20400b28:	d05c                	sw	a5,36(s0)
20400b2a:	00001797          	auipc	a5,0x1
20400b2e:	87678793          	addi	a5,a5,-1930 # 204013a0 <__swrite>
20400b32:	d41c                	sw	a5,40(s0)
20400b34:	00001797          	auipc	a5,0x1
20400b38:	8ba78793          	addi	a5,a5,-1862 # 204013ee <__sseek>
20400b3c:	d45c                	sw	a5,44(s0)
20400b3e:	00001797          	auipc	a5,0x1
20400b42:	8e678793          	addi	a5,a5,-1818 # 20401424 <__sclose>
20400b46:	d000                	sw	s0,32(s0)
20400b48:	d81c                	sw	a5,48(s0)
20400b4a:	40b2                	lw	ra,12(sp)
20400b4c:	4422                	lw	s0,8(sp)
20400b4e:	0141                	addi	sp,sp,16
20400b50:	8082                	ret

20400b52 <_cleanup_r>:
_cleanup_r():
20400b52:	00000597          	auipc	a1,0x0
20400b56:	f3458593          	addi	a1,a1,-204 # 20400a86 <_fflush_r>
20400b5a:	a2b9                	j	20400ca8 <_fwalk_reent>

20400b5c <__sfmoreglue>:
__sfmoreglue():
20400b5c:	1141                	addi	sp,sp,-16
20400b5e:	c226                	sw	s1,4(sp)
20400b60:	06800613          	li	a2,104
20400b64:	fff58493          	addi	s1,a1,-1
20400b68:	02c484b3          	mul	s1,s1,a2
20400b6c:	c04a                	sw	s2,0(sp)
20400b6e:	892e                	mv	s2,a1
20400b70:	c422                	sw	s0,8(sp)
20400b72:	c606                	sw	ra,12(sp)
20400b74:	07448593          	addi	a1,s1,116
20400b78:	26d5                	jal	20400f5c <_malloc_r>
20400b7a:	842a                	mv	s0,a0
20400b7c:	c919                	beqz	a0,20400b92 <__sfmoreglue+0x36>
20400b7e:	00052023          	sw	zero,0(a0)
20400b82:	01252223          	sw	s2,4(a0)
20400b86:	0531                	addi	a0,a0,12
20400b88:	c408                	sw	a0,8(s0)
20400b8a:	06848613          	addi	a2,s1,104
20400b8e:	4581                	li	a1,0
20400b90:	2ca5                	jal	20400e08 <memset>
20400b92:	8522                	mv	a0,s0
20400b94:	40b2                	lw	ra,12(sp)
20400b96:	4422                	lw	s0,8(sp)
20400b98:	4492                	lw	s1,4(sp)
20400b9a:	4902                	lw	s2,0(sp)
20400b9c:	0141                	addi	sp,sp,16
20400b9e:	8082                	ret

20400ba0 <__sinit>:
__sinit():
20400ba0:	4d1c                	lw	a5,24(a0)
20400ba2:	e3bd                	bnez	a5,20400c08 <__sinit+0x68>
20400ba4:	1141                	addi	sp,sp,-16
20400ba6:	c606                	sw	ra,12(sp)
20400ba8:	c422                	sw	s0,8(sp)
20400baa:	00000797          	auipc	a5,0x0
20400bae:	fa878793          	addi	a5,a5,-88 # 20400b52 <_cleanup_r>
20400bb2:	d51c                	sw	a5,40(a0)
20400bb4:	5fc00797          	auipc	a5,0x5fc00
20400bb8:	b9878793          	addi	a5,a5,-1128 # 8000074c <_global_impure_ptr>
20400bbc:	439c                	lw	a5,0(a5)
20400bbe:	04052423          	sw	zero,72(a0)
20400bc2:	04052623          	sw	zero,76(a0)
20400bc6:	04052823          	sw	zero,80(a0)
20400bca:	00f51463          	bne	a0,a5,20400bd2 <__sinit+0x32>
20400bce:	4785                	li	a5,1
20400bd0:	cd1c                	sw	a5,24(a0)
20400bd2:	842a                	mv	s0,a0
20400bd4:	281d                	jal	20400c0a <__sfp>
20400bd6:	c048                	sw	a0,4(s0)
20400bd8:	8522                	mv	a0,s0
20400bda:	2805                	jal	20400c0a <__sfp>
20400bdc:	c408                	sw	a0,8(s0)
20400bde:	8522                	mv	a0,s0
20400be0:	202d                	jal	20400c0a <__sfp>
20400be2:	c448                	sw	a0,12(s0)
20400be4:	4048                	lw	a0,4(s0)
20400be6:	4601                	li	a2,0
20400be8:	4591                	li	a1,4
20400bea:	3701                	jal	20400aea <std>
20400bec:	4408                	lw	a0,8(s0)
20400bee:	4605                	li	a2,1
20400bf0:	45a5                	li	a1,9
20400bf2:	3de5                	jal	20400aea <std>
20400bf4:	4448                	lw	a0,12(s0)
20400bf6:	4609                	li	a2,2
20400bf8:	45c9                	li	a1,18
20400bfa:	3dc5                	jal	20400aea <std>
20400bfc:	4785                	li	a5,1
20400bfe:	cc1c                	sw	a5,24(s0)
20400c00:	40b2                	lw	ra,12(sp)
20400c02:	4422                	lw	s0,8(sp)
20400c04:	0141                	addi	sp,sp,16
20400c06:	8082                	ret
20400c08:	8082                	ret

20400c0a <__sfp>:
__sfp():
20400c0a:	1141                	addi	sp,sp,-16
20400c0c:	5fc00797          	auipc	a5,0x5fc00
20400c10:	b4078793          	addi	a5,a5,-1216 # 8000074c <_global_impure_ptr>
20400c14:	c226                	sw	s1,4(sp)
20400c16:	4384                	lw	s1,0(a5)
20400c18:	c04a                	sw	s2,0(sp)
20400c1a:	c606                	sw	ra,12(sp)
20400c1c:	4c9c                	lw	a5,24(s1)
20400c1e:	c422                	sw	s0,8(sp)
20400c20:	892a                	mv	s2,a0
20400c22:	e399                	bnez	a5,20400c28 <__sfp+0x1e>
20400c24:	8526                	mv	a0,s1
20400c26:	3fad                	jal	20400ba0 <__sinit>
20400c28:	04848493          	addi	s1,s1,72
20400c2c:	4480                	lw	s0,8(s1)
20400c2e:	40dc                	lw	a5,4(s1)
20400c30:	17fd                	addi	a5,a5,-1
20400c32:	0007d663          	bgez	a5,20400c3e <__sfp+0x34>
20400c36:	409c                	lw	a5,0(s1)
20400c38:	cfb1                	beqz	a5,20400c94 <__sfp+0x8a>
20400c3a:	4084                	lw	s1,0(s1)
20400c3c:	bfc5                	j	20400c2c <__sfp+0x22>
20400c3e:	00c41703          	lh	a4,12(s0)
20400c42:	e731                	bnez	a4,20400c8e <__sfp+0x84>
20400c44:	77c1                	lui	a5,0xffff0
20400c46:	0785                	addi	a5,a5,1
20400c48:	06042223          	sw	zero,100(s0)
20400c4c:	00042023          	sw	zero,0(s0)
20400c50:	00042223          	sw	zero,4(s0)
20400c54:	00042423          	sw	zero,8(s0)
20400c58:	c45c                	sw	a5,12(s0)
20400c5a:	00042823          	sw	zero,16(s0)
20400c5e:	00042a23          	sw	zero,20(s0)
20400c62:	00042c23          	sw	zero,24(s0)
20400c66:	4621                	li	a2,8
20400c68:	4581                	li	a1,0
20400c6a:	05c40513          	addi	a0,s0,92
20400c6e:	2a69                	jal	20400e08 <memset>
20400c70:	02042a23          	sw	zero,52(s0)
20400c74:	02042c23          	sw	zero,56(s0)
20400c78:	04042423          	sw	zero,72(s0)
20400c7c:	04042623          	sw	zero,76(s0)
20400c80:	8522                	mv	a0,s0
20400c82:	40b2                	lw	ra,12(sp)
20400c84:	4422                	lw	s0,8(sp)
20400c86:	4492                	lw	s1,4(sp)
20400c88:	4902                	lw	s2,0(sp)
20400c8a:	0141                	addi	sp,sp,16
20400c8c:	8082                	ret
20400c8e:	06840413          	addi	s0,s0,104
20400c92:	bf79                	j	20400c30 <__sfp+0x26>
20400c94:	4591                	li	a1,4
20400c96:	854a                	mv	a0,s2
20400c98:	35d1                	jal	20400b5c <__sfmoreglue>
20400c9a:	c088                	sw	a0,0(s1)
20400c9c:	842a                	mv	s0,a0
20400c9e:	fd51                	bnez	a0,20400c3a <__sfp+0x30>
20400ca0:	47b1                	li	a5,12
20400ca2:	00f92023          	sw	a5,0(s2)
20400ca6:	bfe9                	j	20400c80 <__sfp+0x76>

20400ca8 <_fwalk_reent>:
_fwalk_reent():
20400ca8:	7179                	addi	sp,sp,-48
20400caa:	d422                	sw	s0,40(sp)
20400cac:	d04a                	sw	s2,32(sp)
20400cae:	cc52                	sw	s4,24(sp)
20400cb0:	ca56                	sw	s5,20(sp)
20400cb2:	c85a                	sw	s6,16(sp)
20400cb4:	c65e                	sw	s7,12(sp)
20400cb6:	d606                	sw	ra,44(sp)
20400cb8:	d226                	sw	s1,36(sp)
20400cba:	ce4e                	sw	s3,28(sp)
20400cbc:	8a2a                	mv	s4,a0
20400cbe:	8aae                	mv	s5,a1
20400cc0:	04850413          	addi	s0,a0,72
20400cc4:	4901                	li	s2,0
20400cc6:	4b05                	li	s6,1
20400cc8:	5bfd                	li	s7,-1
20400cca:	ec09                	bnez	s0,20400ce4 <_fwalk_reent+0x3c>
20400ccc:	50b2                	lw	ra,44(sp)
20400cce:	5422                	lw	s0,40(sp)
20400cd0:	854a                	mv	a0,s2
20400cd2:	5492                	lw	s1,36(sp)
20400cd4:	5902                	lw	s2,32(sp)
20400cd6:	49f2                	lw	s3,28(sp)
20400cd8:	4a62                	lw	s4,24(sp)
20400cda:	4ad2                	lw	s5,20(sp)
20400cdc:	4b42                	lw	s6,16(sp)
20400cde:	4bb2                	lw	s7,12(sp)
20400ce0:	6145                	addi	sp,sp,48
20400ce2:	8082                	ret
20400ce4:	4404                	lw	s1,8(s0)
20400ce6:	00442983          	lw	s3,4(s0)
20400cea:	19fd                	addi	s3,s3,-1
20400cec:	0009d463          	bgez	s3,20400cf4 <_fwalk_reent+0x4c>
20400cf0:	4000                	lw	s0,0(s0)
20400cf2:	bfe1                	j	20400cca <_fwalk_reent+0x22>
20400cf4:	00c4d783          	lhu	a5,12(s1)
20400cf8:	00fb7b63          	bgeu	s6,a5,20400d0e <_fwalk_reent+0x66>
20400cfc:	00e49783          	lh	a5,14(s1)
20400d00:	01778763          	beq	a5,s7,20400d0e <_fwalk_reent+0x66>
20400d04:	85a6                	mv	a1,s1
20400d06:	8552                	mv	a0,s4
20400d08:	9a82                	jalr	s5
20400d0a:	00a96933          	or	s2,s2,a0
20400d0e:	06848493          	addi	s1,s1,104
20400d12:	bfe1                	j	20400cea <_fwalk_reent+0x42>

20400d14 <__swhatbuf_r>:
__swhatbuf_r():
20400d14:	7119                	addi	sp,sp,-128
20400d16:	daa6                	sw	s1,116(sp)
20400d18:	84ae                	mv	s1,a1
20400d1a:	00e59583          	lh	a1,14(a1)
20400d1e:	dca2                	sw	s0,120(sp)
20400d20:	de86                	sw	ra,124(sp)
20400d22:	8432                	mv	s0,a2
20400d24:	0005dc63          	bgez	a1,20400d3c <__swhatbuf_r+0x28>
20400d28:	00c4d783          	lhu	a5,12(s1)
20400d2c:	0006a023          	sw	zero,0(a3)
20400d30:	0807f793          	andi	a5,a5,128
20400d34:	e39d                	bnez	a5,20400d5a <__swhatbuf_r+0x46>
20400d36:	40000793          	li	a5,1024
20400d3a:	a015                	j	20400d5e <__swhatbuf_r+0x4a>
20400d3c:	0830                	addi	a2,sp,24
20400d3e:	c636                	sw	a3,12(sp)
20400d40:	2f89                	jal	20401492 <_fstat_r>
20400d42:	46b2                	lw	a3,12(sp)
20400d44:	fe0542e3          	bltz	a0,20400d28 <__swhatbuf_r+0x14>
20400d48:	4772                	lw	a4,28(sp)
20400d4a:	67bd                	lui	a5,0xf
20400d4c:	8ff9                	and	a5,a5,a4
20400d4e:	7779                	lui	a4,0xffffe
20400d50:	97ba                	add	a5,a5,a4
20400d52:	0017b793          	seqz	a5,a5
20400d56:	c29c                	sw	a5,0(a3)
20400d58:	bff9                	j	20400d36 <__swhatbuf_r+0x22>
20400d5a:	04000793          	li	a5,64
20400d5e:	c01c                	sw	a5,0(s0)
20400d60:	50f6                	lw	ra,124(sp)
20400d62:	5466                	lw	s0,120(sp)
20400d64:	54d6                	lw	s1,116(sp)
20400d66:	4501                	li	a0,0
20400d68:	6109                	addi	sp,sp,128
20400d6a:	8082                	ret

20400d6c <__smakebuf_r>:
__smakebuf_r():
20400d6c:	00c5d783          	lhu	a5,12(a1)
20400d70:	1101                	addi	sp,sp,-32
20400d72:	cc22                	sw	s0,24(sp)
20400d74:	ce06                	sw	ra,28(sp)
20400d76:	ca26                	sw	s1,20(sp)
20400d78:	c84a                	sw	s2,16(sp)
20400d7a:	8b89                	andi	a5,a5,2
20400d7c:	842e                	mv	s0,a1
20400d7e:	cf89                	beqz	a5,20400d98 <__smakebuf_r+0x2c>
20400d80:	04740793          	addi	a5,s0,71
20400d84:	c01c                	sw	a5,0(s0)
20400d86:	c81c                	sw	a5,16(s0)
20400d88:	4785                	li	a5,1
20400d8a:	c85c                	sw	a5,20(s0)
20400d8c:	40f2                	lw	ra,28(sp)
20400d8e:	4462                	lw	s0,24(sp)
20400d90:	44d2                	lw	s1,20(sp)
20400d92:	4942                	lw	s2,16(sp)
20400d94:	6105                	addi	sp,sp,32
20400d96:	8082                	ret
20400d98:	0074                	addi	a3,sp,12
20400d9a:	0030                	addi	a2,sp,8
20400d9c:	84aa                	mv	s1,a0
20400d9e:	3f9d                	jal	20400d14 <__swhatbuf_r>
20400da0:	45a2                	lw	a1,8(sp)
20400da2:	892a                	mv	s2,a0
20400da4:	8526                	mv	a0,s1
20400da6:	2a5d                	jal	20400f5c <_malloc_r>
20400da8:	ed01                	bnez	a0,20400dc0 <__smakebuf_r+0x54>
20400daa:	00c41783          	lh	a5,12(s0)
20400dae:	2007f713          	andi	a4,a5,512
20400db2:	ff69                	bnez	a4,20400d8c <__smakebuf_r+0x20>
20400db4:	9bf1                	andi	a5,a5,-4
20400db6:	0027e793          	ori	a5,a5,2
20400dba:	00f41623          	sh	a5,12(s0)
20400dbe:	b7c9                	j	20400d80 <__smakebuf_r+0x14>
20400dc0:	00000797          	auipc	a5,0x0
20400dc4:	d9278793          	addi	a5,a5,-622 # 20400b52 <_cleanup_r>
20400dc8:	d49c                	sw	a5,40(s1)
20400dca:	00c45783          	lhu	a5,12(s0)
20400dce:	c008                	sw	a0,0(s0)
20400dd0:	c808                	sw	a0,16(s0)
20400dd2:	0807e793          	ori	a5,a5,128
20400dd6:	00f41623          	sh	a5,12(s0)
20400dda:	47a2                	lw	a5,8(sp)
20400ddc:	c85c                	sw	a5,20(s0)
20400dde:	47b2                	lw	a5,12(sp)
20400de0:	cf89                	beqz	a5,20400dfa <__smakebuf_r+0x8e>
20400de2:	00e41583          	lh	a1,14(s0)
20400de6:	8526                	mv	a0,s1
20400de8:	2df9                	jal	204014c6 <_isatty_r>
20400dea:	c901                	beqz	a0,20400dfa <__smakebuf_r+0x8e>
20400dec:	00c45783          	lhu	a5,12(s0)
20400df0:	9bf1                	andi	a5,a5,-4
20400df2:	0017e793          	ori	a5,a5,1
20400df6:	00f41623          	sh	a5,12(s0)
20400dfa:	00c45783          	lhu	a5,12(s0)
20400dfe:	00f96933          	or	s2,s2,a5
20400e02:	01241623          	sh	s2,12(s0)
20400e06:	b759                	j	20400d8c <__smakebuf_r+0x20>

20400e08 <memset>:
memset():
20400e08:	433d                	li	t1,15
20400e0a:	872a                	mv	a4,a0
20400e0c:	02c37363          	bgeu	t1,a2,20400e32 <memset+0x2a>
20400e10:	00f77793          	andi	a5,a4,15
20400e14:	efbd                	bnez	a5,20400e92 <memset+0x8a>
20400e16:	e5ad                	bnez	a1,20400e80 <memset+0x78>
20400e18:	ff067693          	andi	a3,a2,-16
20400e1c:	8a3d                	andi	a2,a2,15
20400e1e:	96ba                	add	a3,a3,a4
20400e20:	c30c                	sw	a1,0(a4)
20400e22:	c34c                	sw	a1,4(a4)
20400e24:	c70c                	sw	a1,8(a4)
20400e26:	c74c                	sw	a1,12(a4)
20400e28:	0741                	addi	a4,a4,16
20400e2a:	fed76be3          	bltu	a4,a3,20400e20 <memset+0x18>
20400e2e:	e211                	bnez	a2,20400e32 <memset+0x2a>
20400e30:	8082                	ret
20400e32:	40c306b3          	sub	a3,t1,a2
20400e36:	068a                	slli	a3,a3,0x2
20400e38:	00000297          	auipc	t0,0x0
20400e3c:	9696                	add	a3,a3,t0
20400e3e:	00a68067          	jr	10(a3)
20400e42:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7ff9dd42>
20400e46:	00b706a3          	sb	a1,13(a4)
20400e4a:	00b70623          	sb	a1,12(a4)
20400e4e:	00b705a3          	sb	a1,11(a4)
20400e52:	00b70523          	sb	a1,10(a4)
20400e56:	00b704a3          	sb	a1,9(a4)
20400e5a:	00b70423          	sb	a1,8(a4)
20400e5e:	00b703a3          	sb	a1,7(a4)
20400e62:	00b70323          	sb	a1,6(a4)
20400e66:	00b702a3          	sb	a1,5(a4)
20400e6a:	00b70223          	sb	a1,4(a4)
20400e6e:	00b701a3          	sb	a1,3(a4)
20400e72:	00b70123          	sb	a1,2(a4)
20400e76:	00b700a3          	sb	a1,1(a4)
20400e7a:	00b70023          	sb	a1,0(a4)
20400e7e:	8082                	ret
20400e80:	0ff5f593          	andi	a1,a1,255
20400e84:	00859693          	slli	a3,a1,0x8
20400e88:	8dd5                	or	a1,a1,a3
20400e8a:	01059693          	slli	a3,a1,0x10
20400e8e:	8dd5                	or	a1,a1,a3
20400e90:	b761                	j	20400e18 <memset+0x10>
20400e92:	00279693          	slli	a3,a5,0x2
20400e96:	00000297          	auipc	t0,0x0
20400e9a:	9696                	add	a3,a3,t0
20400e9c:	8286                	mv	t0,ra
20400e9e:	fa8680e7          	jalr	-88(a3)
20400ea2:	8096                	mv	ra,t0
20400ea4:	17c1                	addi	a5,a5,-16
20400ea6:	8f1d                	sub	a4,a4,a5
20400ea8:	963e                	add	a2,a2,a5
20400eaa:	f8c374e3          	bgeu	t1,a2,20400e32 <memset+0x2a>
20400eae:	b7a5                	j	20400e16 <memset+0xe>

20400eb0 <_free_r>:
_free_r():
20400eb0:	c5cd                	beqz	a1,20400f5a <_free_r+0xaa>
20400eb2:	ffc5a783          	lw	a5,-4(a1)
20400eb6:	1141                	addi	sp,sp,-16
20400eb8:	c422                	sw	s0,8(sp)
20400eba:	c606                	sw	ra,12(sp)
20400ebc:	c226                	sw	s1,4(sp)
20400ebe:	ffc58413          	addi	s0,a1,-4
20400ec2:	0007d363          	bgez	a5,20400ec8 <_free_r+0x18>
20400ec6:	943e                	add	s0,s0,a5
20400ec8:	84aa                	mv	s1,a0
20400eca:	2dbd                	jal	20401548 <__malloc_lock>
20400ecc:	5fc00797          	auipc	a5,0x5fc00
20400ed0:	8a478793          	addi	a5,a5,-1884 # 80000770 <metal_segment_data_target_end>
20400ed4:	439c                	lw	a5,0(a5)
20400ed6:	ef89                	bnez	a5,20400ef0 <_free_r+0x40>
20400ed8:	00042223          	sw	zero,4(s0)
20400edc:	5fc00797          	auipc	a5,0x5fc00
20400ee0:	8887aa23          	sw	s0,-1900(a5) # 80000770 <metal_segment_data_target_end>
20400ee4:	4422                	lw	s0,8(sp)
20400ee6:	40b2                	lw	ra,12(sp)
20400ee8:	8526                	mv	a0,s1
20400eea:	4492                	lw	s1,4(sp)
20400eec:	0141                	addi	sp,sp,16
20400eee:	adb1                	j	2040154a <__malloc_unlock>
20400ef0:	00f47e63          	bgeu	s0,a5,20400f0c <_free_r+0x5c>
20400ef4:	4014                	lw	a3,0(s0)
20400ef6:	00d40733          	add	a4,s0,a3
20400efa:	00e79663          	bne	a5,a4,20400f06 <_free_r+0x56>
20400efe:	4398                	lw	a4,0(a5)
20400f00:	43dc                	lw	a5,4(a5)
20400f02:	9736                	add	a4,a4,a3
20400f04:	c018                	sw	a4,0(s0)
20400f06:	c05c                	sw	a5,4(s0)
20400f08:	bfd1                	j	20400edc <_free_r+0x2c>
20400f0a:	87ba                	mv	a5,a4
20400f0c:	43d8                	lw	a4,4(a5)
20400f0e:	c319                	beqz	a4,20400f14 <_free_r+0x64>
20400f10:	fee47de3          	bgeu	s0,a4,20400f0a <_free_r+0x5a>
20400f14:	4394                	lw	a3,0(a5)
20400f16:	00d78633          	add	a2,a5,a3
20400f1a:	00861f63          	bne	a2,s0,20400f38 <_free_r+0x88>
20400f1e:	4010                	lw	a2,0(s0)
20400f20:	96b2                	add	a3,a3,a2
20400f22:	c394                	sw	a3,0(a5)
20400f24:	00d78633          	add	a2,a5,a3
20400f28:	fac71ee3          	bne	a4,a2,20400ee4 <_free_r+0x34>
20400f2c:	4310                	lw	a2,0(a4)
20400f2e:	4358                	lw	a4,4(a4)
20400f30:	96b2                	add	a3,a3,a2
20400f32:	c394                	sw	a3,0(a5)
20400f34:	c3d8                	sw	a4,4(a5)
20400f36:	b77d                	j	20400ee4 <_free_r+0x34>
20400f38:	00c47563          	bgeu	s0,a2,20400f42 <_free_r+0x92>
20400f3c:	47b1                	li	a5,12
20400f3e:	c09c                	sw	a5,0(s1)
20400f40:	b755                	j	20400ee4 <_free_r+0x34>
20400f42:	4010                	lw	a2,0(s0)
20400f44:	00c406b3          	add	a3,s0,a2
20400f48:	00d71663          	bne	a4,a3,20400f54 <_free_r+0xa4>
20400f4c:	4314                	lw	a3,0(a4)
20400f4e:	4358                	lw	a4,4(a4)
20400f50:	96b2                	add	a3,a3,a2
20400f52:	c014                	sw	a3,0(s0)
20400f54:	c058                	sw	a4,4(s0)
20400f56:	c3c0                	sw	s0,4(a5)
20400f58:	b771                	j	20400ee4 <_free_r+0x34>
20400f5a:	8082                	ret

20400f5c <_malloc_r>:
_malloc_r():
20400f5c:	1101                	addi	sp,sp,-32
20400f5e:	ca26                	sw	s1,20(sp)
20400f60:	00358493          	addi	s1,a1,3
20400f64:	98f1                	andi	s1,s1,-4
20400f66:	ce06                	sw	ra,28(sp)
20400f68:	cc22                	sw	s0,24(sp)
20400f6a:	c84a                	sw	s2,16(sp)
20400f6c:	c64e                	sw	s3,12(sp)
20400f6e:	04a1                	addi	s1,s1,8
20400f70:	47b1                	li	a5,12
20400f72:	04f4f763          	bgeu	s1,a5,20400fc0 <_malloc_r+0x64>
20400f76:	44b1                	li	s1,12
20400f78:	04b4e663          	bltu	s1,a1,20400fc4 <_malloc_r+0x68>
20400f7c:	892a                	mv	s2,a0
20400f7e:	23e9                	jal	20401548 <__malloc_lock>
20400f80:	5fbff797          	auipc	a5,0x5fbff
20400f84:	7f078793          	addi	a5,a5,2032 # 80000770 <metal_segment_data_target_end>
20400f88:	4398                	lw	a4,0(a5)
20400f8a:	843a                	mv	s0,a4
20400f8c:	e431                	bnez	s0,20400fd8 <_malloc_r+0x7c>
20400f8e:	5fbff797          	auipc	a5,0x5fbff
20400f92:	7e678793          	addi	a5,a5,2022 # 80000774 <__malloc_sbrk_start>
20400f96:	439c                	lw	a5,0(a5)
20400f98:	eb81                	bnez	a5,20400fa8 <_malloc_r+0x4c>
20400f9a:	4581                	li	a1,0
20400f9c:	854a                	mv	a0,s2
20400f9e:	2645                	jal	2040133e <_sbrk_r>
20400fa0:	5fbff797          	auipc	a5,0x5fbff
20400fa4:	7ca7aa23          	sw	a0,2004(a5) # 80000774 <__malloc_sbrk_start>
20400fa8:	85a6                	mv	a1,s1
20400faa:	854a                	mv	a0,s2
20400fac:	2e49                	jal	2040133e <_sbrk_r>
20400fae:	59fd                	li	s3,-1
20400fb0:	07351963          	bne	a0,s3,20401022 <_malloc_r+0xc6>
20400fb4:	47b1                	li	a5,12
20400fb6:	00f92023          	sw	a5,0(s2)
20400fba:	854a                	mv	a0,s2
20400fbc:	2379                	jal	2040154a <__malloc_unlock>
20400fbe:	a029                	j	20400fc8 <_malloc_r+0x6c>
20400fc0:	fa04dce3          	bgez	s1,20400f78 <_malloc_r+0x1c>
20400fc4:	47b1                	li	a5,12
20400fc6:	c11c                	sw	a5,0(a0)
20400fc8:	4501                	li	a0,0
20400fca:	40f2                	lw	ra,28(sp)
20400fcc:	4462                	lw	s0,24(sp)
20400fce:	44d2                	lw	s1,20(sp)
20400fd0:	4942                	lw	s2,16(sp)
20400fd2:	49b2                	lw	s3,12(sp)
20400fd4:	6105                	addi	sp,sp,32
20400fd6:	8082                	ret
20400fd8:	401c                	lw	a5,0(s0)
20400fda:	8f85                	sub	a5,a5,s1
20400fdc:	0407c063          	bltz	a5,2040101c <_malloc_r+0xc0>
20400fe0:	46ad                	li	a3,11
20400fe2:	00f6f663          	bgeu	a3,a5,20400fee <_malloc_r+0x92>
20400fe6:	c01c                	sw	a5,0(s0)
20400fe8:	943e                	add	s0,s0,a5
20400fea:	c004                	sw	s1,0(s0)
20400fec:	a801                	j	20400ffc <_malloc_r+0xa0>
20400fee:	405c                	lw	a5,4(s0)
20400ff0:	02871463          	bne	a4,s0,20401018 <_malloc_r+0xbc>
20400ff4:	5fbff717          	auipc	a4,0x5fbff
20400ff8:	76f72e23          	sw	a5,1916(a4) # 80000770 <metal_segment_data_target_end>
20400ffc:	854a                	mv	a0,s2
20400ffe:	23b1                	jal	2040154a <__malloc_unlock>
20401000:	00b40513          	addi	a0,s0,11
20401004:	00440793          	addi	a5,s0,4
20401008:	9961                	andi	a0,a0,-8
2040100a:	40f50733          	sub	a4,a0,a5
2040100e:	df55                	beqz	a4,20400fca <_malloc_r+0x6e>
20401010:	943a                	add	s0,s0,a4
20401012:	8f89                	sub	a5,a5,a0
20401014:	c01c                	sw	a5,0(s0)
20401016:	bf55                	j	20400fca <_malloc_r+0x6e>
20401018:	c35c                	sw	a5,4(a4)
2040101a:	b7cd                	j	20400ffc <_malloc_r+0xa0>
2040101c:	8722                	mv	a4,s0
2040101e:	4040                	lw	s0,4(s0)
20401020:	b7b5                	j	20400f8c <_malloc_r+0x30>
20401022:	00350413          	addi	s0,a0,3
20401026:	9871                	andi	s0,s0,-4
20401028:	fc8501e3          	beq	a0,s0,20400fea <_malloc_r+0x8e>
2040102c:	40a405b3          	sub	a1,s0,a0
20401030:	854a                	mv	a0,s2
20401032:	2631                	jal	2040133e <_sbrk_r>
20401034:	fb351be3          	bne	a0,s3,20400fea <_malloc_r+0x8e>
20401038:	bfb5                	j	20400fb4 <_malloc_r+0x58>

2040103a <__sfputc_r>:
__sfputc_r():
2040103a:	461c                	lw	a5,8(a2)
2040103c:	17fd                	addi	a5,a5,-1
2040103e:	c61c                	sw	a5,8(a2)
20401040:	0007da63          	bgez	a5,20401054 <__sfputc_r+0x1a>
20401044:	4e18                	lw	a4,24(a2)
20401046:	00e7c563          	blt	a5,a4,20401050 <__sfputc_r+0x16>
2040104a:	47a9                	li	a5,10
2040104c:	00f59463          	bne	a1,a5,20401054 <__sfputc_r+0x1a>
20401050:	f1cff06f          	j	2040076c <__swbuf_r>
20401054:	421c                	lw	a5,0(a2)
20401056:	852e                	mv	a0,a1
20401058:	00178713          	addi	a4,a5,1
2040105c:	c218                	sw	a4,0(a2)
2040105e:	00b78023          	sb	a1,0(a5)
20401062:	8082                	ret

20401064 <__sfputs_r>:
__sfputs_r():
20401064:	1101                	addi	sp,sp,-32
20401066:	cc22                	sw	s0,24(sp)
20401068:	ca26                	sw	s1,20(sp)
2040106a:	c84a                	sw	s2,16(sp)
2040106c:	c64e                	sw	s3,12(sp)
2040106e:	c452                	sw	s4,8(sp)
20401070:	ce06                	sw	ra,28(sp)
20401072:	892a                	mv	s2,a0
20401074:	89ae                	mv	s3,a1
20401076:	8432                	mv	s0,a2
20401078:	00d604b3          	add	s1,a2,a3
2040107c:	5a7d                	li	s4,-1
2040107e:	00941463          	bne	s0,s1,20401086 <__sfputs_r+0x22>
20401082:	4501                	li	a0,0
20401084:	a809                	j	20401096 <__sfputs_r+0x32>
20401086:	00044583          	lbu	a1,0(s0)
2040108a:	864e                	mv	a2,s3
2040108c:	854a                	mv	a0,s2
2040108e:	3775                	jal	2040103a <__sfputc_r>
20401090:	0405                	addi	s0,s0,1
20401092:	ff4516e3          	bne	a0,s4,2040107e <__sfputs_r+0x1a>
20401096:	40f2                	lw	ra,28(sp)
20401098:	4462                	lw	s0,24(sp)
2040109a:	44d2                	lw	s1,20(sp)
2040109c:	4942                	lw	s2,16(sp)
2040109e:	49b2                	lw	s3,12(sp)
204010a0:	4a22                	lw	s4,8(sp)
204010a2:	6105                	addi	sp,sp,32
204010a4:	8082                	ret

204010a6 <_vfiprintf_r>:
_vfiprintf_r():
204010a6:	7135                	addi	sp,sp,-160
204010a8:	cd22                	sw	s0,152(sp)
204010aa:	cb26                	sw	s1,148(sp)
204010ac:	c94a                	sw	s2,144(sp)
204010ae:	c74e                	sw	s3,140(sp)
204010b0:	cf06                	sw	ra,156(sp)
204010b2:	c552                	sw	s4,136(sp)
204010b4:	c356                	sw	s5,132(sp)
204010b6:	c15a                	sw	s6,128(sp)
204010b8:	dede                	sw	s7,124(sp)
204010ba:	dce2                	sw	s8,120(sp)
204010bc:	dae6                	sw	s9,116(sp)
204010be:	89aa                	mv	s3,a0
204010c0:	84ae                	mv	s1,a1
204010c2:	8932                	mv	s2,a2
204010c4:	8436                	mv	s0,a3
204010c6:	c501                	beqz	a0,204010ce <_vfiprintf_r+0x28>
204010c8:	4d1c                	lw	a5,24(a0)
204010ca:	e391                	bnez	a5,204010ce <_vfiprintf_r+0x28>
204010cc:	3cd1                	jal	20400ba0 <__sinit>
204010ce:	00004797          	auipc	a5,0x4
204010d2:	72278793          	addi	a5,a5,1826 # 204057f0 <__sf_fake_stdin>
204010d6:	0cf49b63          	bne	s1,a5,204011ac <_vfiprintf_r+0x106>
204010da:	0049a483          	lw	s1,4(s3)
204010de:	00c4d783          	lhu	a5,12(s1)
204010e2:	8ba1                	andi	a5,a5,8
204010e4:	c7f5                	beqz	a5,204011d0 <_vfiprintf_r+0x12a>
204010e6:	489c                	lw	a5,16(s1)
204010e8:	c7e5                	beqz	a5,204011d0 <_vfiprintf_r+0x12a>
204010ea:	02000793          	li	a5,32
204010ee:	02f104a3          	sb	a5,41(sp)
204010f2:	03000793          	li	a5,48
204010f6:	d202                	sw	zero,36(sp)
204010f8:	02f10523          	sb	a5,42(sp)
204010fc:	c622                	sw	s0,12(sp)
204010fe:	02500b93          	li	s7,37
20401102:	00004a97          	auipc	s5,0x4
20401106:	72ea8a93          	addi	s5,s5,1838 # 20405830 <__sf_fake_stdout+0x20>
2040110a:	4c05                	li	s8,1
2040110c:	4b29                	li	s6,10
2040110e:	844a                	mv	s0,s2
20401110:	00044783          	lbu	a5,0(s0)
20401114:	c399                	beqz	a5,2040111a <_vfiprintf_r+0x74>
20401116:	0f779063          	bne	a5,s7,204011f6 <_vfiprintf_r+0x150>
2040111a:	41240cb3          	sub	s9,s0,s2
2040111e:	000c8d63          	beqz	s9,20401138 <_vfiprintf_r+0x92>
20401122:	86e6                	mv	a3,s9
20401124:	864a                	mv	a2,s2
20401126:	85a6                	mv	a1,s1
20401128:	854e                	mv	a0,s3
2040112a:	3f2d                	jal	20401064 <__sfputs_r>
2040112c:	57fd                	li	a5,-1
2040112e:	1ef50663          	beq	a0,a5,2040131a <_vfiprintf_r+0x274>
20401132:	5692                	lw	a3,36(sp)
20401134:	96e6                	add	a3,a3,s9
20401136:	d236                	sw	a3,36(sp)
20401138:	00044783          	lbu	a5,0(s0)
2040113c:	1c078f63          	beqz	a5,2040131a <_vfiprintf_r+0x274>
20401140:	57fd                	li	a5,-1
20401142:	00140913          	addi	s2,s0,1
20401146:	c802                	sw	zero,16(sp)
20401148:	ce02                	sw	zero,28(sp)
2040114a:	ca3e                	sw	a5,20(sp)
2040114c:	cc02                	sw	zero,24(sp)
2040114e:	040109a3          	sb	zero,83(sp)
20401152:	d482                	sw	zero,104(sp)
20401154:	00094583          	lbu	a1,0(s2)
20401158:	4615                	li	a2,5
2040115a:	8556                	mv	a0,s5
2040115c:	2ec9                	jal	2040152e <memchr>
2040115e:	00190413          	addi	s0,s2,1
20401162:	47c2                	lw	a5,16(sp)
20401164:	e959                	bnez	a0,204011fa <_vfiprintf_r+0x154>
20401166:	0107f713          	andi	a4,a5,16
2040116a:	c709                	beqz	a4,20401174 <_vfiprintf_r+0xce>
2040116c:	02000713          	li	a4,32
20401170:	04e109a3          	sb	a4,83(sp)
20401174:	0087f713          	andi	a4,a5,8
20401178:	c709                	beqz	a4,20401182 <_vfiprintf_r+0xdc>
2040117a:	02b00713          	li	a4,43
2040117e:	04e109a3          	sb	a4,83(sp)
20401182:	00094683          	lbu	a3,0(s2)
20401186:	02a00713          	li	a4,42
2040118a:	08e68063          	beq	a3,a4,2040120a <_vfiprintf_r+0x164>
2040118e:	47f2                	lw	a5,28(sp)
20401190:	844a                	mv	s0,s2
20401192:	4681                	li	a3,0
20401194:	4625                	li	a2,9
20401196:	00044703          	lbu	a4,0(s0)
2040119a:	00140593          	addi	a1,s0,1
2040119e:	fd070713          	addi	a4,a4,-48
204011a2:	0ae67963          	bgeu	a2,a4,20401254 <_vfiprintf_r+0x1ae>
204011a6:	cab5                	beqz	a3,2040121a <_vfiprintf_r+0x174>
204011a8:	ce3e                	sw	a5,28(sp)
204011aa:	a885                	j	2040121a <_vfiprintf_r+0x174>
204011ac:	00004797          	auipc	a5,0x4
204011b0:	66478793          	addi	a5,a5,1636 # 20405810 <__sf_fake_stdout>
204011b4:	00f49563          	bne	s1,a5,204011be <_vfiprintf_r+0x118>
204011b8:	0089a483          	lw	s1,8(s3)
204011bc:	b70d                	j	204010de <_vfiprintf_r+0x38>
204011be:	00004797          	auipc	a5,0x4
204011c2:	61278793          	addi	a5,a5,1554 # 204057d0 <__sf_fake_stderr>
204011c6:	f0f49ce3          	bne	s1,a5,204010de <_vfiprintf_r+0x38>
204011ca:	00c9a483          	lw	s1,12(s3)
204011ce:	bf01                	j	204010de <_vfiprintf_r+0x38>
204011d0:	85a6                	mv	a1,s1
204011d2:	854e                	mv	a0,s3
204011d4:	e58ff0ef          	jal	ra,2040082c <__swsetup_r>
204011d8:	d909                	beqz	a0,204010ea <_vfiprintf_r+0x44>
204011da:	557d                	li	a0,-1
204011dc:	40fa                	lw	ra,156(sp)
204011de:	446a                	lw	s0,152(sp)
204011e0:	44da                	lw	s1,148(sp)
204011e2:	494a                	lw	s2,144(sp)
204011e4:	49ba                	lw	s3,140(sp)
204011e6:	4a2a                	lw	s4,136(sp)
204011e8:	4a9a                	lw	s5,132(sp)
204011ea:	4b0a                	lw	s6,128(sp)
204011ec:	5bf6                	lw	s7,124(sp)
204011ee:	5c66                	lw	s8,120(sp)
204011f0:	5cd6                	lw	s9,116(sp)
204011f2:	610d                	addi	sp,sp,160
204011f4:	8082                	ret
204011f6:	0405                	addi	s0,s0,1
204011f8:	bf21                	j	20401110 <_vfiprintf_r+0x6a>
204011fa:	41550533          	sub	a0,a0,s5
204011fe:	00ac1533          	sll	a0,s8,a0
20401202:	8fc9                	or	a5,a5,a0
20401204:	c83e                	sw	a5,16(sp)
20401206:	8922                	mv	s2,s0
20401208:	b7b1                	j	20401154 <_vfiprintf_r+0xae>
2040120a:	4732                	lw	a4,12(sp)
2040120c:	00470693          	addi	a3,a4,4
20401210:	4318                	lw	a4,0(a4)
20401212:	c636                	sw	a3,12(sp)
20401214:	02074963          	bltz	a4,20401246 <_vfiprintf_r+0x1a0>
20401218:	ce3a                	sw	a4,28(sp)
2040121a:	00044703          	lbu	a4,0(s0)
2040121e:	02e00793          	li	a5,46
20401222:	04f71f63          	bne	a4,a5,20401280 <_vfiprintf_r+0x1da>
20401226:	00144703          	lbu	a4,1(s0)
2040122a:	02a00793          	li	a5,42
2040122e:	02f71b63          	bne	a4,a5,20401264 <_vfiprintf_r+0x1be>
20401232:	47b2                	lw	a5,12(sp)
20401234:	0409                	addi	s0,s0,2
20401236:	00478713          	addi	a4,a5,4
2040123a:	439c                	lw	a5,0(a5)
2040123c:	c63a                	sw	a4,12(sp)
2040123e:	0207c163          	bltz	a5,20401260 <_vfiprintf_r+0x1ba>
20401242:	ca3e                	sw	a5,20(sp)
20401244:	a835                	j	20401280 <_vfiprintf_r+0x1da>
20401246:	40e00733          	neg	a4,a4
2040124a:	0027e793          	ori	a5,a5,2
2040124e:	ce3a                	sw	a4,28(sp)
20401250:	c83e                	sw	a5,16(sp)
20401252:	b7e1                	j	2040121a <_vfiprintf_r+0x174>
20401254:	036787b3          	mul	a5,a5,s6
20401258:	4685                	li	a3,1
2040125a:	842e                	mv	s0,a1
2040125c:	97ba                	add	a5,a5,a4
2040125e:	bf25                	j	20401196 <_vfiprintf_r+0xf0>
20401260:	57fd                	li	a5,-1
20401262:	b7c5                	j	20401242 <_vfiprintf_r+0x19c>
20401264:	0405                	addi	s0,s0,1
20401266:	ca02                	sw	zero,20(sp)
20401268:	4681                	li	a3,0
2040126a:	4781                	li	a5,0
2040126c:	4625                	li	a2,9
2040126e:	00044703          	lbu	a4,0(s0)
20401272:	00140593          	addi	a1,s0,1
20401276:	fd070713          	addi	a4,a4,-48
2040127a:	06e67663          	bgeu	a2,a4,204012e6 <_vfiprintf_r+0x240>
2040127e:	f2f1                	bnez	a3,20401242 <_vfiprintf_r+0x19c>
20401280:	00044583          	lbu	a1,0(s0)
20401284:	460d                	li	a2,3
20401286:	00004517          	auipc	a0,0x4
2040128a:	5b250513          	addi	a0,a0,1458 # 20405838 <__sf_fake_stdout+0x28>
2040128e:	2445                	jal	2040152e <memchr>
20401290:	cd11                	beqz	a0,204012ac <_vfiprintf_r+0x206>
20401292:	00004797          	auipc	a5,0x4
20401296:	5a678793          	addi	a5,a5,1446 # 20405838 <__sf_fake_stdout+0x28>
2040129a:	8d1d                	sub	a0,a0,a5
2040129c:	04000793          	li	a5,64
204012a0:	00a797b3          	sll	a5,a5,a0
204012a4:	4542                	lw	a0,16(sp)
204012a6:	0405                	addi	s0,s0,1
204012a8:	8d5d                	or	a0,a0,a5
204012aa:	c82a                	sw	a0,16(sp)
204012ac:	00044583          	lbu	a1,0(s0)
204012b0:	4619                	li	a2,6
204012b2:	00004517          	auipc	a0,0x4
204012b6:	58a50513          	addi	a0,a0,1418 # 2040583c <__sf_fake_stdout+0x2c>
204012ba:	00140913          	addi	s2,s0,1
204012be:	02b10423          	sb	a1,40(sp)
204012c2:	24b5                	jal	2040152e <memchr>
204012c4:	c13d                	beqz	a0,2040132a <_vfiprintf_r+0x284>
204012c6:	dfbff797          	auipc	a5,0xdfbff
204012ca:	d3a78793          	addi	a5,a5,-710 # 0 <__metal_boot_hart>
204012ce:	e795                	bnez	a5,204012fa <_vfiprintf_r+0x254>
204012d0:	4742                	lw	a4,16(sp)
204012d2:	47b2                	lw	a5,12(sp)
204012d4:	10077713          	andi	a4,a4,256
204012d8:	cf09                	beqz	a4,204012f2 <_vfiprintf_r+0x24c>
204012da:	0791                	addi	a5,a5,4
204012dc:	c63e                	sw	a5,12(sp)
204012de:	5792                	lw	a5,36(sp)
204012e0:	97d2                	add	a5,a5,s4
204012e2:	d23e                	sw	a5,36(sp)
204012e4:	b52d                	j	2040110e <_vfiprintf_r+0x68>
204012e6:	036787b3          	mul	a5,a5,s6
204012ea:	4685                	li	a3,1
204012ec:	842e                	mv	s0,a1
204012ee:	97ba                	add	a5,a5,a4
204012f0:	bfbd                	j	2040126e <_vfiprintf_r+0x1c8>
204012f2:	079d                	addi	a5,a5,7
204012f4:	9be1                	andi	a5,a5,-8
204012f6:	07a1                	addi	a5,a5,8
204012f8:	b7d5                	j	204012dc <_vfiprintf_r+0x236>
204012fa:	0078                	addi	a4,sp,12
204012fc:	00000697          	auipc	a3,0x0
20401300:	d6868693          	addi	a3,a3,-664 # 20401064 <__sfputs_r>
20401304:	8626                	mv	a2,s1
20401306:	080c                	addi	a1,sp,16
20401308:	854e                	mv	a0,s3
2040130a:	00000097          	auipc	ra,0x0
2040130e:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401312:	57fd                	li	a5,-1
20401314:	8a2a                	mv	s4,a0
20401316:	fcf514e3          	bne	a0,a5,204012de <_vfiprintf_r+0x238>
2040131a:	00c4d783          	lhu	a5,12(s1)
2040131e:	0407f793          	andi	a5,a5,64
20401322:	ea079ce3          	bnez	a5,204011da <_vfiprintf_r+0x134>
20401326:	5512                	lw	a0,36(sp)
20401328:	bd55                	j	204011dc <_vfiprintf_r+0x136>
2040132a:	0078                	addi	a4,sp,12
2040132c:	00000697          	auipc	a3,0x0
20401330:	d3868693          	addi	a3,a3,-712 # 20401064 <__sfputs_r>
20401334:	8626                	mv	a2,s1
20401336:	080c                	addi	a1,sp,16
20401338:	854e                	mv	a0,s3
2040133a:	2e39                	jal	20401658 <_printf_i>
2040133c:	bfd9                	j	20401312 <_vfiprintf_r+0x26c>

2040133e <_sbrk_r>:
_sbrk_r():
2040133e:	1141                	addi	sp,sp,-16
20401340:	c422                	sw	s0,8(sp)
20401342:	842a                	mv	s0,a0
20401344:	852e                	mv	a0,a1
20401346:	5fc5e797          	auipc	a5,0x5fc5e
2040134a:	3807a123          	sw	zero,898(a5) # 8005f6c8 <errno>
2040134e:	c606                	sw	ra,12(sp)
20401350:	2d3000ef          	jal	ra,20401e22 <_sbrk>
20401354:	57fd                	li	a5,-1
20401356:	00f51963          	bne	a0,a5,20401368 <_sbrk_r+0x2a>
2040135a:	5fc5e797          	auipc	a5,0x5fc5e
2040135e:	36e78793          	addi	a5,a5,878 # 8005f6c8 <errno>
20401362:	439c                	lw	a5,0(a5)
20401364:	c391                	beqz	a5,20401368 <_sbrk_r+0x2a>
20401366:	c01c                	sw	a5,0(s0)
20401368:	40b2                	lw	ra,12(sp)
2040136a:	4422                	lw	s0,8(sp)
2040136c:	0141                	addi	sp,sp,16
2040136e:	8082                	ret

20401370 <__sread>:
__sread():
20401370:	1141                	addi	sp,sp,-16
20401372:	c422                	sw	s0,8(sp)
20401374:	842e                	mv	s0,a1
20401376:	00e59583          	lh	a1,14(a1)
2040137a:	c606                	sw	ra,12(sp)
2040137c:	2bbd                	jal	204018fa <_read_r>
2040137e:	00054963          	bltz	a0,20401390 <__sread+0x20>
20401382:	487c                	lw	a5,84(s0)
20401384:	97aa                	add	a5,a5,a0
20401386:	c87c                	sw	a5,84(s0)
20401388:	40b2                	lw	ra,12(sp)
2040138a:	4422                	lw	s0,8(sp)
2040138c:	0141                	addi	sp,sp,16
2040138e:	8082                	ret
20401390:	00c45783          	lhu	a5,12(s0)
20401394:	777d                	lui	a4,0xfffff
20401396:	177d                	addi	a4,a4,-1
20401398:	8ff9                	and	a5,a5,a4
2040139a:	00f41623          	sh	a5,12(s0)
2040139e:	b7ed                	j	20401388 <__sread+0x18>

204013a0 <__swrite>:
__swrite():
204013a0:	00c5d783          	lhu	a5,12(a1)
204013a4:	1101                	addi	sp,sp,-32
204013a6:	cc22                	sw	s0,24(sp)
204013a8:	ca26                	sw	s1,20(sp)
204013aa:	c84a                	sw	s2,16(sp)
204013ac:	c64e                	sw	s3,12(sp)
204013ae:	ce06                	sw	ra,28(sp)
204013b0:	1007f793          	andi	a5,a5,256
204013b4:	84aa                	mv	s1,a0
204013b6:	842e                	mv	s0,a1
204013b8:	8932                	mv	s2,a2
204013ba:	89b6                	mv	s3,a3
204013bc:	c791                	beqz	a5,204013c8 <__swrite+0x28>
204013be:	00e59583          	lh	a1,14(a1)
204013c2:	4689                	li	a3,2
204013c4:	4601                	li	a2,0
204013c6:	2a0d                	jal	204014f8 <_lseek_r>
204013c8:	00c45783          	lhu	a5,12(s0)
204013cc:	777d                	lui	a4,0xfffff
204013ce:	177d                	addi	a4,a4,-1
204013d0:	8ff9                	and	a5,a5,a4
204013d2:	00f41623          	sh	a5,12(s0)
204013d6:	00e41583          	lh	a1,14(s0)
204013da:	4462                	lw	s0,24(sp)
204013dc:	40f2                	lw	ra,28(sp)
204013de:	86ce                	mv	a3,s3
204013e0:	864a                	mv	a2,s2
204013e2:	49b2                	lw	s3,12(sp)
204013e4:	4942                	lw	s2,16(sp)
204013e6:	8526                	mv	a0,s1
204013e8:	44d2                	lw	s1,20(sp)
204013ea:	6105                	addi	sp,sp,32
204013ec:	a83d                	j	2040142a <_write_r>

204013ee <__sseek>:
__sseek():
204013ee:	1141                	addi	sp,sp,-16
204013f0:	c422                	sw	s0,8(sp)
204013f2:	842e                	mv	s0,a1
204013f4:	00e59583          	lh	a1,14(a1)
204013f8:	c606                	sw	ra,12(sp)
204013fa:	28fd                	jal	204014f8 <_lseek_r>
204013fc:	57fd                	li	a5,-1
204013fe:	00c45703          	lhu	a4,12(s0)
20401402:	00f51b63          	bne	a0,a5,20401418 <__sseek+0x2a>
20401406:	77fd                	lui	a5,0xfffff
20401408:	17fd                	addi	a5,a5,-1
2040140a:	8ff9                	and	a5,a5,a4
2040140c:	00f41623          	sh	a5,12(s0)
20401410:	40b2                	lw	ra,12(sp)
20401412:	4422                	lw	s0,8(sp)
20401414:	0141                	addi	sp,sp,16
20401416:	8082                	ret
20401418:	6785                	lui	a5,0x1
2040141a:	8fd9                	or	a5,a5,a4
2040141c:	00f41623          	sh	a5,12(s0)
20401420:	c868                	sw	a0,84(s0)
20401422:	b7fd                	j	20401410 <__sseek+0x22>

20401424 <__sclose>:
__sclose():
20401424:	00e59583          	lh	a1,14(a1)
20401428:	a825                	j	20401460 <_close_r>

2040142a <_write_r>:
_write_r():
2040142a:	1141                	addi	sp,sp,-16
2040142c:	c422                	sw	s0,8(sp)
2040142e:	842a                	mv	s0,a0
20401430:	852e                	mv	a0,a1
20401432:	85b2                	mv	a1,a2
20401434:	8636                	mv	a2,a3
20401436:	5fc5e797          	auipc	a5,0x5fc5e
2040143a:	2807a923          	sw	zero,658(a5) # 8005f6c8 <errno>
2040143e:	c606                	sw	ra,12(sp)
20401440:	261000ef          	jal	ra,20401ea0 <_write>
20401444:	57fd                	li	a5,-1
20401446:	00f51963          	bne	a0,a5,20401458 <_write_r+0x2e>
2040144a:	5fc5e797          	auipc	a5,0x5fc5e
2040144e:	27e78793          	addi	a5,a5,638 # 8005f6c8 <errno>
20401452:	439c                	lw	a5,0(a5)
20401454:	c391                	beqz	a5,20401458 <_write_r+0x2e>
20401456:	c01c                	sw	a5,0(s0)
20401458:	40b2                	lw	ra,12(sp)
2040145a:	4422                	lw	s0,8(sp)
2040145c:	0141                	addi	sp,sp,16
2040145e:	8082                	ret

20401460 <_close_r>:
_close_r():
20401460:	1141                	addi	sp,sp,-16
20401462:	c422                	sw	s0,8(sp)
20401464:	842a                	mv	s0,a0
20401466:	852e                	mv	a0,a1
20401468:	5fc5e797          	auipc	a5,0x5fc5e
2040146c:	2607a023          	sw	zero,608(a5) # 8005f6c8 <errno>
20401470:	c606                	sw	ra,12(sp)
20401472:	0f5000ef          	jal	ra,20401d66 <_close>
20401476:	57fd                	li	a5,-1
20401478:	00f51963          	bne	a0,a5,2040148a <_close_r+0x2a>
2040147c:	5fc5e797          	auipc	a5,0x5fc5e
20401480:	24c78793          	addi	a5,a5,588 # 8005f6c8 <errno>
20401484:	439c                	lw	a5,0(a5)
20401486:	c391                	beqz	a5,2040148a <_close_r+0x2a>
20401488:	c01c                	sw	a5,0(s0)
2040148a:	40b2                	lw	ra,12(sp)
2040148c:	4422                	lw	s0,8(sp)
2040148e:	0141                	addi	sp,sp,16
20401490:	8082                	ret

20401492 <_fstat_r>:
_fstat_r():
20401492:	1141                	addi	sp,sp,-16
20401494:	c422                	sw	s0,8(sp)
20401496:	842a                	mv	s0,a0
20401498:	852e                	mv	a0,a1
2040149a:	85b2                	mv	a1,a2
2040149c:	5fc5e797          	auipc	a5,0x5fc5e
204014a0:	2207a623          	sw	zero,556(a5) # 8005f6c8 <errno>
204014a4:	c606                	sw	ra,12(sp)
204014a6:	0e3000ef          	jal	ra,20401d88 <_fstat>
204014aa:	57fd                	li	a5,-1
204014ac:	00f51963          	bne	a0,a5,204014be <_fstat_r+0x2c>
204014b0:	5fc5e797          	auipc	a5,0x5fc5e
204014b4:	21878793          	addi	a5,a5,536 # 8005f6c8 <errno>
204014b8:	439c                	lw	a5,0(a5)
204014ba:	c391                	beqz	a5,204014be <_fstat_r+0x2c>
204014bc:	c01c                	sw	a5,0(s0)
204014be:	40b2                	lw	ra,12(sp)
204014c0:	4422                	lw	s0,8(sp)
204014c2:	0141                	addi	sp,sp,16
204014c4:	8082                	ret

204014c6 <_isatty_r>:
_isatty_r():
204014c6:	1141                	addi	sp,sp,-16
204014c8:	c422                	sw	s0,8(sp)
204014ca:	842a                	mv	s0,a0
204014cc:	852e                	mv	a0,a1
204014ce:	5fc5e797          	auipc	a5,0x5fc5e
204014d2:	1e07ad23          	sw	zero,506(a5) # 8005f6c8 <errno>
204014d6:	c606                	sw	ra,12(sp)
204014d8:	0d7000ef          	jal	ra,20401dae <_isatty>
204014dc:	57fd                	li	a5,-1
204014de:	00f51963          	bne	a0,a5,204014f0 <_isatty_r+0x2a>
204014e2:	5fc5e797          	auipc	a5,0x5fc5e
204014e6:	1e678793          	addi	a5,a5,486 # 8005f6c8 <errno>
204014ea:	439c                	lw	a5,0(a5)
204014ec:	c391                	beqz	a5,204014f0 <_isatty_r+0x2a>
204014ee:	c01c                	sw	a5,0(s0)
204014f0:	40b2                	lw	ra,12(sp)
204014f2:	4422                	lw	s0,8(sp)
204014f4:	0141                	addi	sp,sp,16
204014f6:	8082                	ret

204014f8 <_lseek_r>:
_lseek_r():
204014f8:	1141                	addi	sp,sp,-16
204014fa:	c422                	sw	s0,8(sp)
204014fc:	842a                	mv	s0,a0
204014fe:	852e                	mv	a0,a1
20401500:	85b2                	mv	a1,a2
20401502:	8636                	mv	a2,a3
20401504:	5fc5e797          	auipc	a5,0x5fc5e
20401508:	1c07a223          	sw	zero,452(a5) # 8005f6c8 <errno>
2040150c:	c606                	sw	ra,12(sp)
2040150e:	0c1000ef          	jal	ra,20401dce <_lseek>
20401512:	57fd                	li	a5,-1
20401514:	00f51963          	bne	a0,a5,20401526 <_lseek_r+0x2e>
20401518:	5fc5e797          	auipc	a5,0x5fc5e
2040151c:	1b078793          	addi	a5,a5,432 # 8005f6c8 <errno>
20401520:	439c                	lw	a5,0(a5)
20401522:	c391                	beqz	a5,20401526 <_lseek_r+0x2e>
20401524:	c01c                	sw	a5,0(s0)
20401526:	40b2                	lw	ra,12(sp)
20401528:	4422                	lw	s0,8(sp)
2040152a:	0141                	addi	sp,sp,16
2040152c:	8082                	ret

2040152e <memchr>:
memchr():
2040152e:	0ff5f593          	andi	a1,a1,255
20401532:	962a                	add	a2,a2,a0
20401534:	00c51463          	bne	a0,a2,2040153c <memchr+0xe>
20401538:	4501                	li	a0,0
2040153a:	8082                	ret
2040153c:	00054783          	lbu	a5,0(a0)
20401540:	feb78de3          	beq	a5,a1,2040153a <memchr+0xc>
20401544:	0505                	addi	a0,a0,1
20401546:	b7fd                	j	20401534 <memchr+0x6>

20401548 <__malloc_lock>:
__malloc_lock():
20401548:	8082                	ret

2040154a <__malloc_unlock>:
__malloc_unlock():
2040154a:	8082                	ret

2040154c <_printf_common>:
_printf_common():
2040154c:	7179                	addi	sp,sp,-48
2040154e:	ca56                	sw	s5,20(sp)
20401550:	499c                	lw	a5,16(a1)
20401552:	8aba                	mv	s5,a4
20401554:	4598                	lw	a4,8(a1)
20401556:	d422                	sw	s0,40(sp)
20401558:	d226                	sw	s1,36(sp)
2040155a:	ce4e                	sw	s3,28(sp)
2040155c:	cc52                	sw	s4,24(sp)
2040155e:	d606                	sw	ra,44(sp)
20401560:	d04a                	sw	s2,32(sp)
20401562:	c85a                	sw	s6,16(sp)
20401564:	c65e                	sw	s7,12(sp)
20401566:	89aa                	mv	s3,a0
20401568:	842e                	mv	s0,a1
2040156a:	84b2                	mv	s1,a2
2040156c:	8a36                	mv	s4,a3
2040156e:	00e7d363          	bge	a5,a4,20401574 <_printf_common+0x28>
20401572:	87ba                	mv	a5,a4
20401574:	c09c                	sw	a5,0(s1)
20401576:	04344703          	lbu	a4,67(s0)
2040157a:	c319                	beqz	a4,20401580 <_printf_common+0x34>
2040157c:	0785                	addi	a5,a5,1
2040157e:	c09c                	sw	a5,0(s1)
20401580:	401c                	lw	a5,0(s0)
20401582:	0207f793          	andi	a5,a5,32
20401586:	c781                	beqz	a5,2040158e <_printf_common+0x42>
20401588:	409c                	lw	a5,0(s1)
2040158a:	0789                	addi	a5,a5,2
2040158c:	c09c                	sw	a5,0(s1)
2040158e:	00042903          	lw	s2,0(s0)
20401592:	00697913          	andi	s2,s2,6
20401596:	00091a63          	bnez	s2,204015aa <_printf_common+0x5e>
2040159a:	01940b13          	addi	s6,s0,25
2040159e:	5bfd                	li	s7,-1
204015a0:	445c                	lw	a5,12(s0)
204015a2:	4098                	lw	a4,0(s1)
204015a4:	8f99                	sub	a5,a5,a4
204015a6:	04f94c63          	blt	s2,a5,204015fe <_printf_common+0xb2>
204015aa:	401c                	lw	a5,0(s0)
204015ac:	04344683          	lbu	a3,67(s0)
204015b0:	0207f793          	andi	a5,a5,32
204015b4:	00d036b3          	snez	a3,a3
204015b8:	eba5                	bnez	a5,20401628 <_printf_common+0xdc>
204015ba:	04340613          	addi	a2,s0,67
204015be:	85d2                	mv	a1,s4
204015c0:	854e                	mv	a0,s3
204015c2:	9a82                	jalr	s5
204015c4:	57fd                	li	a5,-1
204015c6:	04f50363          	beq	a0,a5,2040160c <_printf_common+0xc0>
204015ca:	401c                	lw	a5,0(s0)
204015cc:	4611                	li	a2,4
204015ce:	4098                	lw	a4,0(s1)
204015d0:	8b99                	andi	a5,a5,6
204015d2:	4454                	lw	a3,12(s0)
204015d4:	4481                	li	s1,0
204015d6:	00c79763          	bne	a5,a2,204015e4 <_printf_common+0x98>
204015da:	40e684b3          	sub	s1,a3,a4
204015de:	0004d363          	bgez	s1,204015e4 <_printf_common+0x98>
204015e2:	4481                	li	s1,0
204015e4:	441c                	lw	a5,8(s0)
204015e6:	4818                	lw	a4,16(s0)
204015e8:	00f75463          	bge	a4,a5,204015f0 <_printf_common+0xa4>
204015ec:	8f99                	sub	a5,a5,a4
204015ee:	94be                	add	s1,s1,a5
204015f0:	4901                	li	s2,0
204015f2:	0469                	addi	s0,s0,26
204015f4:	5b7d                	li	s6,-1
204015f6:	05249863          	bne	s1,s2,20401646 <_printf_common+0xfa>
204015fa:	4501                	li	a0,0
204015fc:	a809                	j	2040160e <_printf_common+0xc2>
204015fe:	4685                	li	a3,1
20401600:	865a                	mv	a2,s6
20401602:	85d2                	mv	a1,s4
20401604:	854e                	mv	a0,s3
20401606:	9a82                	jalr	s5
20401608:	01751e63          	bne	a0,s7,20401624 <_printf_common+0xd8>
2040160c:	557d                	li	a0,-1
2040160e:	50b2                	lw	ra,44(sp)
20401610:	5422                	lw	s0,40(sp)
20401612:	5492                	lw	s1,36(sp)
20401614:	5902                	lw	s2,32(sp)
20401616:	49f2                	lw	s3,28(sp)
20401618:	4a62                	lw	s4,24(sp)
2040161a:	4ad2                	lw	s5,20(sp)
2040161c:	4b42                	lw	s6,16(sp)
2040161e:	4bb2                	lw	s7,12(sp)
20401620:	6145                	addi	sp,sp,48
20401622:	8082                	ret
20401624:	0905                	addi	s2,s2,1
20401626:	bfad                	j	204015a0 <_printf_common+0x54>
20401628:	00d40733          	add	a4,s0,a3
2040162c:	03000613          	li	a2,48
20401630:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7ff9ed77>
20401634:	04544703          	lbu	a4,69(s0)
20401638:	00168793          	addi	a5,a3,1
2040163c:	97a2                	add	a5,a5,s0
2040163e:	0689                	addi	a3,a3,2
20401640:	04e781a3          	sb	a4,67(a5)
20401644:	bf9d                	j	204015ba <_printf_common+0x6e>
20401646:	4685                	li	a3,1
20401648:	8622                	mv	a2,s0
2040164a:	85d2                	mv	a1,s4
2040164c:	854e                	mv	a0,s3
2040164e:	9a82                	jalr	s5
20401650:	fb650ee3          	beq	a0,s6,2040160c <_printf_common+0xc0>
20401654:	0905                	addi	s2,s2,1
20401656:	b745                	j	204015f6 <_printf_common+0xaa>

20401658 <_printf_i>:
_printf_i():
20401658:	7179                	addi	sp,sp,-48
2040165a:	d422                	sw	s0,40(sp)
2040165c:	d226                	sw	s1,36(sp)
2040165e:	d04a                	sw	s2,32(sp)
20401660:	ce4e                	sw	s3,28(sp)
20401662:	d606                	sw	ra,44(sp)
20401664:	cc52                	sw	s4,24(sp)
20401666:	ca56                	sw	s5,20(sp)
20401668:	c85a                	sw	s6,16(sp)
2040166a:	89b6                	mv	s3,a3
2040166c:	0185c683          	lbu	a3,24(a1)
20401670:	06e00793          	li	a5,110
20401674:	8932                	mv	s2,a2
20401676:	84aa                	mv	s1,a0
20401678:	842e                	mv	s0,a1
2040167a:	04358613          	addi	a2,a1,67
2040167e:	1ef68063          	beq	a3,a5,2040185e <_printf_i+0x206>
20401682:	06d7e263          	bltu	a5,a3,204016e6 <_printf_i+0x8e>
20401686:	06300793          	li	a5,99
2040168a:	0af68263          	beq	a3,a5,2040172e <_printf_i+0xd6>
2040168e:	00d7ed63          	bltu	a5,a3,204016a8 <_printf_i+0x50>
20401692:	1e068a63          	beqz	a3,20401886 <_printf_i+0x22e>
20401696:	05800793          	li	a5,88
2040169a:	16f68663          	beq	a3,a5,20401806 <_printf_i+0x1ae>
2040169e:	04240a93          	addi	s5,s0,66
204016a2:	04d40123          	sb	a3,66(s0)
204016a6:	a869                	j	20401740 <_printf_i+0xe8>
204016a8:	06400793          	li	a5,100
204016ac:	00f68663          	beq	a3,a5,204016b8 <_printf_i+0x60>
204016b0:	06900793          	li	a5,105
204016b4:	fef695e3          	bne	a3,a5,2040169e <_printf_i+0x46>
204016b8:	401c                	lw	a5,0(s0)
204016ba:	4308                	lw	a0,0(a4)
204016bc:	0807f693          	andi	a3,a5,128
204016c0:	00450593          	addi	a1,a0,4
204016c4:	c2c1                	beqz	a3,20401744 <_printf_i+0xec>
204016c6:	411c                	lw	a5,0(a0)
204016c8:	c30c                	sw	a1,0(a4)
204016ca:	0007d863          	bgez	a5,204016da <_printf_i+0x82>
204016ce:	02d00713          	li	a4,45
204016d2:	40f007b3          	neg	a5,a5
204016d6:	04e401a3          	sb	a4,67(s0)
204016da:	00004697          	auipc	a3,0x4
204016de:	16a68693          	addi	a3,a3,362 # 20405844 <__sf_fake_stdout+0x34>
204016e2:	4729                	li	a4,10
204016e4:	a065                	j	2040178c <_printf_i+0x134>
204016e6:	07300793          	li	a5,115
204016ea:	1af68263          	beq	a3,a5,2040188e <_printf_i+0x236>
204016ee:	00d7ef63          	bltu	a5,a3,2040170c <_printf_i+0xb4>
204016f2:	06f00793          	li	a5,111
204016f6:	04f68f63          	beq	a3,a5,20401754 <_printf_i+0xfc>
204016fa:	07000793          	li	a5,112
204016fe:	faf690e3          	bne	a3,a5,2040169e <_printf_i+0x46>
20401702:	419c                	lw	a5,0(a1)
20401704:	0207e793          	ori	a5,a5,32
20401708:	c19c                	sw	a5,0(a1)
2040170a:	a809                	j	2040171c <_printf_i+0xc4>
2040170c:	07500793          	li	a5,117
20401710:	04f68263          	beq	a3,a5,20401754 <_printf_i+0xfc>
20401714:	07800793          	li	a5,120
20401718:	f8f693e3          	bne	a3,a5,2040169e <_printf_i+0x46>
2040171c:	07800793          	li	a5,120
20401720:	04f402a3          	sb	a5,69(s0)
20401724:	00004697          	auipc	a3,0x4
20401728:	13468693          	addi	a3,a3,308 # 20405858 <__sf_fake_stdout+0x48>
2040172c:	a0dd                	j	20401812 <_printf_i+0x1ba>
2040172e:	431c                	lw	a5,0(a4)
20401730:	04258a93          	addi	s5,a1,66
20401734:	00478693          	addi	a3,a5,4
20401738:	439c                	lw	a5,0(a5)
2040173a:	c314                	sw	a3,0(a4)
2040173c:	04f58123          	sb	a5,66(a1)
20401740:	4785                	li	a5,1
20401742:	a2ad                	j	204018ac <_printf_i+0x254>
20401744:	0407f693          	andi	a3,a5,64
20401748:	411c                	lw	a5,0(a0)
2040174a:	c30c                	sw	a1,0(a4)
2040174c:	debd                	beqz	a3,204016ca <_printf_i+0x72>
2040174e:	07c2                	slli	a5,a5,0x10
20401750:	87c1                	srai	a5,a5,0x10
20401752:	bfa5                	j	204016ca <_printf_i+0x72>
20401754:	400c                	lw	a1,0(s0)
20401756:	431c                	lw	a5,0(a4)
20401758:	0805f813          	andi	a6,a1,128
2040175c:	00478513          	addi	a0,a5,4
20401760:	00080563          	beqz	a6,2040176a <_printf_i+0x112>
20401764:	c308                	sw	a0,0(a4)
20401766:	439c                	lw	a5,0(a5)
20401768:	a039                	j	20401776 <_printf_i+0x11e>
2040176a:	0405f593          	andi	a1,a1,64
2040176e:	c308                	sw	a0,0(a4)
20401770:	d9fd                	beqz	a1,20401766 <_printf_i+0x10e>
20401772:	0007d783          	lhu	a5,0(a5)
20401776:	06f00713          	li	a4,111
2040177a:	0ce68a63          	beq	a3,a4,2040184e <_printf_i+0x1f6>
2040177e:	00004697          	auipc	a3,0x4
20401782:	0c668693          	addi	a3,a3,198 # 20405844 <__sf_fake_stdout+0x34>
20401786:	4729                	li	a4,10
20401788:	040401a3          	sb	zero,67(s0)
2040178c:	404c                	lw	a1,4(s0)
2040178e:	c40c                	sw	a1,8(s0)
20401790:	0005c563          	bltz	a1,2040179a <_printf_i+0x142>
20401794:	4008                	lw	a0,0(s0)
20401796:	996d                	andi	a0,a0,-5
20401798:	c008                	sw	a0,0(s0)
2040179a:	e399                	bnez	a5,204017a0 <_printf_i+0x148>
2040179c:	8ab2                	mv	s5,a2
2040179e:	cd91                	beqz	a1,204017ba <_printf_i+0x162>
204017a0:	8ab2                	mv	s5,a2
204017a2:	02e7f5b3          	remu	a1,a5,a4
204017a6:	1afd                	addi	s5,s5,-1
204017a8:	95b6                	add	a1,a1,a3
204017aa:	0005c583          	lbu	a1,0(a1)
204017ae:	00ba8023          	sb	a1,0(s5)
204017b2:	02e7d5b3          	divu	a1,a5,a4
204017b6:	0ae7f263          	bgeu	a5,a4,2040185a <_printf_i+0x202>
204017ba:	47a1                	li	a5,8
204017bc:	00f71e63          	bne	a4,a5,204017d8 <_printf_i+0x180>
204017c0:	401c                	lw	a5,0(s0)
204017c2:	8b85                	andi	a5,a5,1
204017c4:	cb91                	beqz	a5,204017d8 <_printf_i+0x180>
204017c6:	4058                	lw	a4,4(s0)
204017c8:	481c                	lw	a5,16(s0)
204017ca:	00e7c763          	blt	a5,a4,204017d8 <_printf_i+0x180>
204017ce:	03000793          	li	a5,48
204017d2:	fefa8fa3          	sb	a5,-1(s5)
204017d6:	1afd                	addi	s5,s5,-1
204017d8:	41560633          	sub	a2,a2,s5
204017dc:	c810                	sw	a2,16(s0)
204017de:	874e                	mv	a4,s3
204017e0:	86ca                	mv	a3,s2
204017e2:	0070                	addi	a2,sp,12
204017e4:	85a2                	mv	a1,s0
204017e6:	8526                	mv	a0,s1
204017e8:	3395                	jal	2040154c <_printf_common>
204017ea:	5a7d                	li	s4,-1
204017ec:	0d451463          	bne	a0,s4,204018b4 <_printf_i+0x25c>
204017f0:	557d                	li	a0,-1
204017f2:	50b2                	lw	ra,44(sp)
204017f4:	5422                	lw	s0,40(sp)
204017f6:	5492                	lw	s1,36(sp)
204017f8:	5902                	lw	s2,32(sp)
204017fa:	49f2                	lw	s3,28(sp)
204017fc:	4a62                	lw	s4,24(sp)
204017fe:	4ad2                	lw	s5,20(sp)
20401800:	4b42                	lw	s6,16(sp)
20401802:	6145                	addi	sp,sp,48
20401804:	8082                	ret
20401806:	04d582a3          	sb	a3,69(a1)
2040180a:	00004697          	auipc	a3,0x4
2040180e:	03a68693          	addi	a3,a3,58 # 20405844 <__sf_fake_stdout+0x34>
20401812:	400c                	lw	a1,0(s0)
20401814:	4308                	lw	a0,0(a4)
20401816:	0805f813          	andi	a6,a1,128
2040181a:	411c                	lw	a5,0(a0)
2040181c:	0511                	addi	a0,a0,4
2040181e:	02080063          	beqz	a6,2040183e <_printf_i+0x1e6>
20401822:	c308                	sw	a0,0(a4)
20401824:	0015f713          	andi	a4,a1,1
20401828:	c701                	beqz	a4,20401830 <_printf_i+0x1d8>
2040182a:	0205e593          	ori	a1,a1,32
2040182e:	c00c                	sw	a1,0(s0)
20401830:	4741                	li	a4,16
20401832:	fbb9                	bnez	a5,20401788 <_printf_i+0x130>
20401834:	400c                	lw	a1,0(s0)
20401836:	fdf5f593          	andi	a1,a1,-33
2040183a:	c00c                	sw	a1,0(s0)
2040183c:	b7b1                	j	20401788 <_printf_i+0x130>
2040183e:	0405f813          	andi	a6,a1,64
20401842:	c308                	sw	a0,0(a4)
20401844:	fe0800e3          	beqz	a6,20401824 <_printf_i+0x1cc>
20401848:	07c2                	slli	a5,a5,0x10
2040184a:	83c1                	srli	a5,a5,0x10
2040184c:	bfe1                	j	20401824 <_printf_i+0x1cc>
2040184e:	00004697          	auipc	a3,0x4
20401852:	ff668693          	addi	a3,a3,-10 # 20405844 <__sf_fake_stdout+0x34>
20401856:	4721                	li	a4,8
20401858:	bf05                	j	20401788 <_printf_i+0x130>
2040185a:	87ae                	mv	a5,a1
2040185c:	b799                	j	204017a2 <_printf_i+0x14a>
2040185e:	4194                	lw	a3,0(a1)
20401860:	431c                	lw	a5,0(a4)
20401862:	49cc                	lw	a1,20(a1)
20401864:	0806f813          	andi	a6,a3,128
20401868:	00478513          	addi	a0,a5,4
2040186c:	00080663          	beqz	a6,20401878 <_printf_i+0x220>
20401870:	c308                	sw	a0,0(a4)
20401872:	439c                	lw	a5,0(a5)
20401874:	c38c                	sw	a1,0(a5)
20401876:	a801                	j	20401886 <_printf_i+0x22e>
20401878:	c308                	sw	a0,0(a4)
2040187a:	0406f693          	andi	a3,a3,64
2040187e:	439c                	lw	a5,0(a5)
20401880:	daf5                	beqz	a3,20401874 <_printf_i+0x21c>
20401882:	00b79023          	sh	a1,0(a5)
20401886:	00042823          	sw	zero,16(s0)
2040188a:	8ab2                	mv	s5,a2
2040188c:	bf89                	j	204017de <_printf_i+0x186>
2040188e:	431c                	lw	a5,0(a4)
20401890:	41d0                	lw	a2,4(a1)
20401892:	4581                	li	a1,0
20401894:	00478693          	addi	a3,a5,4
20401898:	c314                	sw	a3,0(a4)
2040189a:	0007aa83          	lw	s5,0(a5)
2040189e:	8556                	mv	a0,s5
204018a0:	3179                	jal	2040152e <memchr>
204018a2:	c501                	beqz	a0,204018aa <_printf_i+0x252>
204018a4:	41550533          	sub	a0,a0,s5
204018a8:	c048                	sw	a0,4(s0)
204018aa:	405c                	lw	a5,4(s0)
204018ac:	c81c                	sw	a5,16(s0)
204018ae:	040401a3          	sb	zero,67(s0)
204018b2:	b735                	j	204017de <_printf_i+0x186>
204018b4:	4814                	lw	a3,16(s0)
204018b6:	8656                	mv	a2,s5
204018b8:	85ca                	mv	a1,s2
204018ba:	8526                	mv	a0,s1
204018bc:	9982                	jalr	s3
204018be:	f34509e3          	beq	a0,s4,204017f0 <_printf_i+0x198>
204018c2:	401c                	lw	a5,0(s0)
204018c4:	8b89                	andi	a5,a5,2
204018c6:	e78d                	bnez	a5,204018f0 <_printf_i+0x298>
204018c8:	47b2                	lw	a5,12(sp)
204018ca:	4448                	lw	a0,12(s0)
204018cc:	f2f553e3          	bge	a0,a5,204017f2 <_printf_i+0x19a>
204018d0:	853e                	mv	a0,a5
204018d2:	b705                	j	204017f2 <_printf_i+0x19a>
204018d4:	4685                	li	a3,1
204018d6:	8656                	mv	a2,s5
204018d8:	85ca                	mv	a1,s2
204018da:	8526                	mv	a0,s1
204018dc:	9982                	jalr	s3
204018de:	f16509e3          	beq	a0,s6,204017f0 <_printf_i+0x198>
204018e2:	0a05                	addi	s4,s4,1
204018e4:	445c                	lw	a5,12(s0)
204018e6:	4732                	lw	a4,12(sp)
204018e8:	8f99                	sub	a5,a5,a4
204018ea:	fefa45e3          	blt	s4,a5,204018d4 <_printf_i+0x27c>
204018ee:	bfe9                	j	204018c8 <_printf_i+0x270>
204018f0:	4a01                	li	s4,0
204018f2:	01940a93          	addi	s5,s0,25
204018f6:	5b7d                	li	s6,-1
204018f8:	b7f5                	j	204018e4 <_printf_i+0x28c>

204018fa <_read_r>:
_read_r():
204018fa:	1141                	addi	sp,sp,-16
204018fc:	c422                	sw	s0,8(sp)
204018fe:	842a                	mv	s0,a0
20401900:	852e                	mv	a0,a1
20401902:	85b2                	mv	a1,a2
20401904:	8636                	mv	a2,a3
20401906:	5fc5e797          	auipc	a5,0x5fc5e
2040190a:	dc07a123          	sw	zero,-574(a5) # 8005f6c8 <errno>
2040190e:	c606                	sw	ra,12(sp)
20401910:	21e5                	jal	20401df8 <_read>
20401912:	57fd                	li	a5,-1
20401914:	00f51963          	bne	a0,a5,20401926 <_read_r+0x2c>
20401918:	5fc5e797          	auipc	a5,0x5fc5e
2040191c:	db078793          	addi	a5,a5,-592 # 8005f6c8 <errno>
20401920:	439c                	lw	a5,0(a5)
20401922:	c391                	beqz	a5,20401926 <_read_r+0x2c>
20401924:	c01c                	sw	a5,0(s0)
20401926:	40b2                	lw	ra,12(sp)
20401928:	4422                	lw	s0,8(sp)
2040192a:	0141                	addi	sp,sp,16
2040192c:	8082                	ret

2040192e <__addsf3>:
__addsf3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
2040192e:	00800737          	lui	a4,0x800
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
20401932:	1141                	addi	sp,sp,-16
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20401934:	177d                	addi	a4,a4,-1
20401936:	00a777b3          	and	a5,a4,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
2040193a:	c226                	sw	s1,4(sp)
2040193c:	c04a                	sw	s2,0(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
2040193e:	01f55493          	srli	s1,a0,0x1f
20401942:	01755913          	srli	s2,a0,0x17
20401946:	0175d513          	srli	a0,a1,0x17
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
2040194a:	8f6d                	and	a4,a4,a1
2040194c:	0ff97913          	andi	s2,s2,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20401950:	0ff57513          	andi	a0,a0,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
20401954:	c606                	sw	ra,12(sp)
20401956:	c422                	sw	s0,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20401958:	81fd                	srli	a1,a1,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
2040195a:	078e                	slli	a5,a5,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
2040195c:	070e                	slli	a4,a4,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
2040195e:	40a906b3          	sub	a3,s2,a0
20401962:	12b49263          	bne	s1,a1,20401a86 <__addsf3+0x158>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 7)
20401966:	06d05a63          	blez	a3,204019da <__addsf3+0xac>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 9)
2040196a:	e121                	bnez	a0,204019aa <__addsf3+0x7c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 11)
2040196c:	26070863          	beqz	a4,20401bdc <__addsf3+0x2ae>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 14)
20401970:	16fd                	addi	a3,a3,-1
20401972:	e68d                	bnez	a3,2040199c <__addsf3+0x6e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 59)
20401974:	97ba                	add	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 59)
20401976:	854a                	mv	a0,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 112)
20401978:	00579713          	slli	a4,a5,0x5
2040197c:	0c075963          	bgez	a4,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 171)
20401980:	0505                	addi	a0,a0,1
20401982:	0ff00713          	li	a4,255
20401986:	26e50163          	beq	a0,a4,20401be8 <__addsf3+0x2ba>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
2040198a:	7e000737          	lui	a4,0x7e000
2040198e:	0017f693          	andi	a3,a5,1
20401992:	177d                	addi	a4,a4,-1
20401994:	8385                	srli	a5,a5,0x1
20401996:	8ff9                	and	a5,a5,a4
20401998:	8fd5                	or	a5,a5,a3
2040199a:	a855                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 24)
2040199c:	0ff00613          	li	a2,255
204019a0:	00c91c63          	bne	s2,a2,204019b8 <__addsf3+0x8a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204019a4:	0ff00513          	li	a0,255
204019a8:	a05d                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 12)
204019aa:	0ff00613          	li	a2,255
204019ae:	fec90be3          	beq	s2,a2,204019a4 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 38)
204019b2:	04000637          	lui	a2,0x4000
204019b6:	8f51                	or	a4,a4,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204019b8:	466d                	li	a2,27
204019ba:	00d65463          	bge	a2,a3,204019c2 <__addsf3+0x94>
204019be:	4705                	li	a4,1
204019c0:	bf55                	j	20401974 <__addsf3+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 48)
204019c2:	02000613          	li	a2,32
204019c6:	00d755b3          	srl	a1,a4,a3
204019ca:	40d606b3          	sub	a3,a2,a3
204019ce:	00d71733          	sll	a4,a4,a3
204019d2:	00e03733          	snez	a4,a4
204019d6:	8f4d                	or	a4,a4,a1
204019d8:	bf71                	j	20401974 <__addsf3+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 10)
204019da:	c6b9                	beqz	a3,20401a28 <__addsf3+0xfa>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 61)
204019dc:	41250633          	sub	a2,a0,s2
204019e0:	00091d63          	bnez	s2,204019fa <__addsf3+0xcc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 63)
204019e4:	cb89                	beqz	a5,204019f6 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 66)
204019e6:	167d                	addi	a2,a2,-1
204019e8:	e219                	bnez	a2,204019ee <__addsf3+0xc0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 111)
204019ea:	97ba                	add	a5,a5,a4
204019ec:	b771                	j	20401978 <__addsf3+0x4a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 76)
204019ee:	0ff00693          	li	a3,255
204019f2:	00d51b63          	bne	a0,a3,20401a08 <__addsf3+0xda>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204019f6:	87ba                	mv	a5,a4
204019f8:	a899                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 64)
204019fa:	0ff00693          	li	a3,255
204019fe:	fed50ce3          	beq	a0,a3,204019f6 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 90)
20401a02:	040006b7          	lui	a3,0x4000
20401a06:	8fd5                	or	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401a08:	46ed                	li	a3,27
20401a0a:	00c6d463          	bge	a3,a2,20401a12 <__addsf3+0xe4>
20401a0e:	4785                	li	a5,1
20401a10:	bfe9                	j	204019ea <__addsf3+0xbc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 100)
20401a12:	02000693          	li	a3,32
20401a16:	8e91                	sub	a3,a3,a2
20401a18:	00c7d5b3          	srl	a1,a5,a2
20401a1c:	00d797b3          	sll	a5,a5,a3
20401a20:	00f037b3          	snez	a5,a5
20401a24:	8fcd                	or	a5,a5,a1
20401a26:	b7d1                	j	204019ea <__addsf3+0xbc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 62)
20401a28:	00190693          	addi	a3,s2,1
20401a2c:	0fe6f513          	andi	a0,a3,254
20401a30:	e139                	bnez	a0,20401a76 <__addsf3+0x148>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 113)
20401a32:	02091963          	bnez	s2,20401a64 <__addsf3+0x136>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 115)
20401a36:	d3e1                	beqz	a5,204019f6 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 118)
20401a38:	cb19                	beqz	a4,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 124)
20401a3a:	97ba                	add	a5,a5,a4
20401a3c:	00579713          	slli	a4,a5,0x5
20401a40:	00075763          	bgez	a4,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 126)
20401a44:	fc000737          	lui	a4,0xfc000
20401a48:	177d                	addi	a4,a4,-1
20401a4a:	8ff9                	and	a5,a5,a4
20401a4c:	4505                	li	a0,1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 376)
20401a4e:	0077f713          	andi	a4,a5,7
20401a52:	18070c63          	beqz	a4,20401bea <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 37)
20401a56:	00f7f713          	andi	a4,a5,15
20401a5a:	4691                	li	a3,4
20401a5c:	18d70763          	beq	a4,a3,20401bea <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 44)
20401a60:	0791                	addi	a5,a5,4
20401a62:	a261                	j	20401bea <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 143)
20401a64:	16078e63          	beqz	a5,20401be0 <__addsf3+0x2b2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 329)
20401a68:	df15                	beqz	a4,204019a4 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401a6a:	4481                	li	s1,0
20401a6c:	020007b7          	lui	a5,0x2000
20401a70:	0ff00513          	li	a0,255
20401a74:	aa9d                	j	20401bea <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 114)
20401a76:	0ff00613          	li	a2,255
20401a7a:	16c68563          	beq	a3,a2,20401be4 <__addsf3+0x2b6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401a7e:	97ba                	add	a5,a5,a4
20401a80:	8385                	srli	a5,a5,0x1
20401a82:	8536                	mv	a0,a3
20401a84:	b7e9                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 8)
20401a86:	06d05563          	blez	a3,20401af0 <__addsf3+0x1c2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 189)
20401a8a:	e91d                	bnez	a0,20401ac0 <__addsf3+0x192>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 191)
20401a8c:	854a                	mv	a0,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 191)
20401a8e:	d361                	beqz	a4,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 194)
20401a90:	16fd                	addi	a3,a3,-1
20401a92:	ee81                	bnez	a3,20401aaa <__addsf3+0x17c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 203)
20401a94:	8f99                	sub	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 292)
20401a96:	00579713          	slli	a4,a5,0x5
20401a9a:	fa075ae3          	bgez	a4,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 351)
20401a9e:	04000437          	lui	s0,0x4000
20401aa2:	147d                	addi	s0,s0,-1
20401aa4:	8c7d                	and	s0,s0,a5
20401aa6:	892a                	mv	s2,a0
20401aa8:	a8c5                	j	20401b98 <__addsf3+0x26a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 204)
20401aaa:	0ff00613          	li	a2,255
20401aae:	0ff00513          	li	a0,255
20401ab2:	f8c90ee3          	beq	s2,a2,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401ab6:	466d                	li	a2,27
20401ab8:	00d65e63          	bge	a2,a3,20401ad4 <__addsf3+0x1a6>
20401abc:	4705                	li	a4,1
20401abe:	a035                	j	20401aea <__addsf3+0x1bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 192)
20401ac0:	0ff00613          	li	a2,255
20401ac4:	0ff00513          	li	a0,255
20401ac8:	f8c903e3          	beq	s2,a2,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 218)
20401acc:	04000637          	lui	a2,0x4000
20401ad0:	8f51                	or	a4,a4,a2
20401ad2:	b7d5                	j	20401ab6 <__addsf3+0x188>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 228)
20401ad4:	02000613          	li	a2,32
20401ad8:	00d755b3          	srl	a1,a4,a3
20401adc:	40d606b3          	sub	a3,a2,a3
20401ae0:	00d71733          	sll	a4,a4,a3
20401ae4:	00e03733          	snez	a4,a4
20401ae8:	8f4d                	or	a4,a4,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 239)
20401aea:	8f99                	sub	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 239)
20401aec:	854a                	mv	a0,s2
20401aee:	b765                	j	20401a96 <__addsf3+0x168>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 190)
20401af0:	cab9                	beqz	a3,20401b46 <__addsf3+0x218>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 241)
20401af2:	41250633          	sub	a2,a0,s2
20401af6:	02091063          	bnez	s2,20401b16 <__addsf3+0x1e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 243)
20401afa:	cb99                	beqz	a5,20401b10 <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 246)
20401afc:	167d                	addi	a2,a2,-1
20401afe:	e609                	bnez	a2,20401b08 <__addsf3+0x1da>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 291)
20401b00:	40f707b3          	sub	a5,a4,a5
20401b04:	84ae                	mv	s1,a1
20401b06:	bf41                	j	20401a96 <__addsf3+0x168>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 256)
20401b08:	0ff00693          	li	a3,255
20401b0c:	00d51c63          	bne	a0,a3,20401b24 <__addsf3+0x1f6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20401b10:	87ba                	mv	a5,a4
20401b12:	84ae                	mv	s1,a1
20401b14:	bf2d                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 244)
20401b16:	0ff00693          	li	a3,255
20401b1a:	fed50be3          	beq	a0,a3,20401b10 <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 270)
20401b1e:	040006b7          	lui	a3,0x4000
20401b22:	8fd5                	or	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401b24:	46ed                	li	a3,27
20401b26:	00c6d463          	bge	a3,a2,20401b2e <__addsf3+0x200>
20401b2a:	4785                	li	a5,1
20401b2c:	bfd1                	j	20401b00 <__addsf3+0x1d2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 280)
20401b2e:	02000693          	li	a3,32
20401b32:	8e91                	sub	a3,a3,a2
20401b34:	00c7d833          	srl	a6,a5,a2
20401b38:	00d797b3          	sll	a5,a5,a3
20401b3c:	00f037b3          	snez	a5,a5
20401b40:	00f867b3          	or	a5,a6,a5
20401b44:	bf75                	j	20401b00 <__addsf3+0x1d2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 242)
20401b46:	00190513          	addi	a0,s2,1
20401b4a:	0fe57513          	andi	a0,a0,254
20401b4e:	ed05                	bnez	a0,20401b86 <__addsf3+0x258>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 293)
20401b50:	02091463          	bnez	s2,20401b78 <__addsf3+0x24a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 295)
20401b54:	e789                	bnez	a5,20401b5e <__addsf3+0x230>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 297)
20401b56:	ff4d                	bnez	a4,20401b10 <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401b58:	4781                	li	a5,0
20401b5a:	4481                	li	s1,0
20401b5c:	a079                	j	20401bea <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 298)
20401b5e:	ee0708e3          	beqz	a4,20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 305)
20401b62:	40e786b3          	sub	a3,a5,a4
20401b66:	00569613          	slli	a2,a3,0x5
20401b6a:	40f707b3          	sub	a5,a4,a5
20401b6e:	fa0642e3          	bltz	a2,20401b12 <__addsf3+0x1e4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 308)
20401b72:	d2fd                	beqz	a3,20401b58 <__addsf3+0x22a>
20401b74:	87b6                	mv	a5,a3
20401b76:	bde1                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 327)
20401b78:	ee0798e3          	bnez	a5,20401a68 <__addsf3+0x13a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 328)
20401b7c:	ee0707e3          	beqz	a4,20401a6a <__addsf3+0x13c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401b80:	87ba                	mv	a5,a4
20401b82:	84ae                	mv	s1,a1
20401b84:	b505                	j	204019a4 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 294)
20401b86:	40e78433          	sub	s0,a5,a4
20401b8a:	00541693          	slli	a3,s0,0x5
20401b8e:	0206dc63          	bgez	a3,20401bc6 <__addsf3+0x298>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 344)
20401b92:	40f70433          	sub	s0,a4,a5
20401b96:	84ae                	mv	s1,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 354)
20401b98:	8522                	mv	a0,s0
20401b9a:	2a41                	jal	20401d2a <__clzsi2>
20401b9c:	156d                	addi	a0,a0,-5
20401b9e:	00a41433          	sll	s0,s0,a0
20401ba2:	03254663          	blt	a0,s2,20401bce <__addsf3+0x2a0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 367)
20401ba6:	41250533          	sub	a0,a0,s2
20401baa:	0505                	addi	a0,a0,1
20401bac:	02000713          	li	a4,32
20401bb0:	00a457b3          	srl	a5,s0,a0
20401bb4:	40a70533          	sub	a0,a4,a0
20401bb8:	00a41433          	sll	s0,s0,a0
20401bbc:	00803433          	snez	s0,s0
20401bc0:	8fc1                	or	a5,a5,s0
20401bc2:	4501                	li	a0,0
20401bc4:	b569                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 345)
20401bc6:	f869                	bnez	s0,20401b98 <__addsf3+0x26a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401bc8:	4781                	li	a5,0
20401bca:	4501                	li	a0,0
20401bcc:	b779                	j	20401b5a <__addsf3+0x22c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 368)
20401bce:	fc0007b7          	lui	a5,0xfc000
20401bd2:	17fd                	addi	a5,a5,-1
20401bd4:	40a90533          	sub	a0,s2,a0
20401bd8:	8fe1                	and	a5,a5,s0
20401bda:	bd95                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20401bdc:	854a                	mv	a0,s2
20401bde:	bd85                	j	20401a4e <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20401be0:	87ba                	mv	a5,a4
20401be2:	b3c9                	j	204019a4 <__addsf3+0x76>
20401be4:	0ff00513          	li	a0,255
20401be8:	4781                	li	a5,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 47)
20401bea:	00579713          	slli	a4,a5,0x5
20401bee:	00075b63          	bgez	a4,20401c04 <__addsf3+0x2d6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 63)
20401bf2:	0505                	addi	a0,a0,1
20401bf4:	0ff00713          	li	a4,255
20401bf8:	02e50f63          	beq	a0,a4,20401c36 <__addsf3+0x308>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47
20401bfc:	fc000737          	lui	a4,0xfc000
20401c00:	177d                	addi	a4,a4,-1
20401c02:	8ff9                	and	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 79)
20401c04:	0ff00713          	li	a4,255
20401c08:	838d                	srli	a5,a5,0x3
20401c0a:	00e51663          	bne	a0,a4,20401c16 <__addsf3+0x2e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 80)
20401c0e:	c781                	beqz	a5,20401c16 <__addsf3+0x2e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47
20401c10:	004007b7          	lui	a5,0x400
20401c14:	4481                	li	s1,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 90)
20401c16:	0ff57513          	andi	a0,a0,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:51 (discriminator 90)
20401c1a:	40b2                	lw	ra,12(sp)
20401c1c:	4422                	lw	s0,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 90)
20401c1e:	07a6                	slli	a5,a5,0x9
20401c20:	01751713          	slli	a4,a0,0x17
20401c24:	0097d513          	srli	a0,a5,0x9
20401c28:	04fe                	slli	s1,s1,0x1f
20401c2a:	8d59                	or	a0,a0,a4
20401c2c:	8d45                	or	a0,a0,s1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:51 (discriminator 90)
20401c2e:	4902                	lw	s2,0(sp)
20401c30:	4492                	lw	s1,4(sp)
20401c32:	0141                	addi	sp,sp,16
20401c34:	8082                	ret
20401c36:	4781                	li	a5,0
20401c38:	b7f1                	j	20401c04 <__addsf3+0x2d6>

20401c3a <__fixunssfsi>:
__fixunssfsi():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:42
20401c3a:	01755793          	srli	a5,a0,0x17
20401c3e:	00800637          	lui	a2,0x800
20401c42:	fff60693          	addi	a3,a2,-1 # 7fffff <__heap_size+0x7ff7ff>
20401c46:	0ff7f793          	andi	a5,a5,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43
20401c4a:	07e00593          	li	a1,126
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:42
20401c4e:	8ee9                	and	a3,a3,a0
20401c50:	01f55713          	srli	a4,a0,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43
20401c54:	4501                	li	a0,0
20401c56:	02f5fb63          	bgeu	a1,a5,20401c8c <__fixunssfsi+0x52>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 10)
20401c5a:	e711                	bnez	a4,20401c66 <__fixunssfsi+0x2c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43
20401c5c:	09e00713          	li	a4,158
20401c60:	557d                	li	a0,-1
20401c62:	00f77363          	bgeu	a4,a5,20401c68 <__fixunssfsi+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:47
20401c66:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 18)
20401c68:	09500713          	li	a4,149
20401c6c:	00c6e533          	or	a0,a3,a2
20401c70:	00f75763          	bge	a4,a5,20401c7e <__fixunssfsi+0x44>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 30)
20401c74:	f6a78793          	addi	a5,a5,-150 # 3fff6a <__heap_size+0x3ff76a>
20401c78:	00f51533          	sll	a0,a0,a5
20401c7c:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 31)
20401c7e:	09600713          	li	a4,150
20401c82:	40f707b3          	sub	a5,a4,a5
20401c86:	00f55533          	srl	a0,a0,a5
20401c8a:	8082                	ret
20401c8c:	8082                	ret

20401c8e <__floatunsisf>:
__floatunsisf():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:36
20401c8e:	1141                	addi	sp,sp,-16
20401c90:	c422                	sw	s0,8(sp)
20401c92:	c606                	sw	ra,12(sp)
20401c94:	842a                	mv	s0,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42
20401c96:	4781                	li	a5,0
20401c98:	cd19                	beqz	a0,20401cb6 <__floatunsisf+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 6)
20401c9a:	2841                	jal	20401d2a <__clzsi2>
20401c9c:	09e00793          	li	a5,158
20401ca0:	8f89                	sub	a5,a5,a0
20401ca2:	09600713          	li	a4,150
20401ca6:	02f74263          	blt	a4,a5,20401cca <__floatunsisf+0x3c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 28)
20401caa:	4721                	li	a4,8
20401cac:	00a75563          	bge	a4,a0,20401cb6 <__floatunsisf+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 30)
20401cb0:	1561                	addi	a0,a0,-8
20401cb2:	00a41433          	sll	s0,s0,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:43
20401cb6:	0426                	slli	s0,s0,0x9
20401cb8:	0ff7f513          	andi	a0,a5,255
20401cbc:	8025                	srli	s0,s0,0x9
20401cbe:	055e                	slli	a0,a0,0x17
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:47
20401cc0:	8d41                	or	a0,a0,s0
20401cc2:	40b2                	lw	ra,12(sp)
20401cc4:	4422                	lw	s0,8(sp)
20401cc6:	0141                	addi	sp,sp,16
20401cc8:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 29)
20401cca:	09900713          	li	a4,153
20401cce:	00f75d63          	bge	a4,a5,20401ce8 <__floatunsisf+0x5a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 35)
20401cd2:	01b50713          	addi	a4,a0,27
20401cd6:	4695                	li	a3,5
20401cd8:	00e41733          	sll	a4,s0,a4
20401cdc:	8e89                	sub	a3,a3,a0
20401cde:	00e03733          	snez	a4,a4
20401ce2:	00d45433          	srl	s0,s0,a3
20401ce6:	8c59                	or	s0,s0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 37)
20401ce8:	4715                	li	a4,5
20401cea:	00a75663          	bge	a4,a0,20401cf6 <__floatunsisf+0x68>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 38)
20401cee:	ffb50713          	addi	a4,a0,-5
20401cf2:	00e41433          	sll	s0,s0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 45)
20401cf6:	fc000737          	lui	a4,0xfc000
20401cfa:	177d                	addi	a4,a4,-1
20401cfc:	00747693          	andi	a3,s0,7
20401d00:	8f61                	and	a4,a4,s0
20401d02:	c691                	beqz	a3,20401d0e <__floatunsisf+0x80>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 86)
20401d04:	883d                	andi	s0,s0,15
20401d06:	4691                	li	a3,4
20401d08:	00d40363          	beq	s0,a3,20401d0e <__floatunsisf+0x80>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 90)
20401d0c:	0711                	addi	a4,a4,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 93)
20401d0e:	00571693          	slli	a3,a4,0x5
20401d12:	0006d963          	bgez	a3,20401d24 <__floatunsisf+0x96>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 109)
20401d16:	fc0007b7          	lui	a5,0xfc000
20401d1a:	17fd                	addi	a5,a5,-1
20401d1c:	8f7d                	and	a4,a4,a5
20401d1e:	09f00793          	li	a5,159
20401d22:	8f89                	sub	a5,a5,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 125)
20401d24:	00375413          	srli	s0,a4,0x3
20401d28:	b779                	j	20401cb6 <__floatunsisf+0x28>

20401d2a <__clzsi2>:
__clzsi2():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20401d2a:	67c1                	lui	a5,0x10
20401d2c:	02f57663          	bgeu	a0,a5,20401d58 <__clzsi2+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 3)
20401d30:	0ff00793          	li	a5,255
20401d34:	00a7b7b3          	sltu	a5,a5,a0
20401d38:	078e                	slli	a5,a5,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 14)
20401d3a:	02000713          	li	a4,32
20401d3e:	8f1d                	sub	a4,a4,a5
20401d40:	00f557b3          	srl	a5,a0,a5
20401d44:	00004517          	auipc	a0,0x4
20401d48:	b2850513          	addi	a0,a0,-1240 # 2040586c <__clz_tab>
20401d4c:	97aa                	add	a5,a5,a0
20401d4e:	0007c503          	lbu	a0,0(a5) # 10000 <__heap_size+0xf800>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:713 (discriminator 14)
20401d52:	40a70533          	sub	a0,a4,a0
20401d56:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 4)
20401d58:	01000737          	lui	a4,0x1000
20401d5c:	47c1                	li	a5,16
20401d5e:	fce56ee3          	bltu	a0,a4,20401d3a <__clzsi2+0x10>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20401d62:	47e1                	li	a5,24
20401d64:	bfd9                	j	20401d3a <__clzsi2+0x10>

20401d66 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401d66:	1101                	addi	sp,sp,-32
20401d68:	ce06                	sw	ra,28(sp)
20401d6a:	cc22                	sw	s0,24(sp)
20401d6c:	1000                	addi	s0,sp,32
20401d6e:	fea42623          	sw	a0,-20(s0) # 3ffffec <__heap_size+0x3fff7ec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401d72:	225d                	jal	20401f18 <__errno>
20401d74:	872a                	mv	a4,a0
20401d76:	05800793          	li	a5,88
20401d7a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401d7c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401d7e:	853e                	mv	a0,a5
20401d80:	40f2                	lw	ra,28(sp)
20401d82:	4462                	lw	s0,24(sp)
20401d84:	6105                	addi	sp,sp,32
20401d86:	8082                	ret

20401d88 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401d88:	1101                	addi	sp,sp,-32
20401d8a:	ce06                	sw	ra,28(sp)
20401d8c:	cc22                	sw	s0,24(sp)
20401d8e:	1000                	addi	s0,sp,32
20401d90:	fea42623          	sw	a0,-20(s0)
20401d94:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401d98:	2241                	jal	20401f18 <__errno>
20401d9a:	872a                	mv	a4,a0
20401d9c:	fa800793          	li	a5,-88
20401da0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401da2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401da4:	853e                	mv	a0,a5
20401da6:	40f2                	lw	ra,28(sp)
20401da8:	4462                	lw	s0,24(sp)
20401daa:	6105                	addi	sp,sp,32
20401dac:	8082                	ret

20401dae <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401dae:	1101                	addi	sp,sp,-32
20401db0:	ce22                	sw	s0,28(sp)
20401db2:	1000                	addi	s0,sp,32
20401db4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401db8:	fec42783          	lw	a5,-20(s0)
20401dbc:	17fd                	addi	a5,a5,-1
20401dbe:	0017b793          	seqz	a5,a5
20401dc2:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401dc6:	853e                	mv	a0,a5
20401dc8:	4472                	lw	s0,28(sp)
20401dca:	6105                	addi	sp,sp,32
20401dcc:	8082                	ret

20401dce <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401dce:	1101                	addi	sp,sp,-32
20401dd0:	ce06                	sw	ra,28(sp)
20401dd2:	cc22                	sw	s0,24(sp)
20401dd4:	1000                	addi	s0,sp,32
20401dd6:	fea42623          	sw	a0,-20(s0)
20401dda:	feb42423          	sw	a1,-24(s0)
20401dde:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401de2:	2a1d                	jal	20401f18 <__errno>
20401de4:	872a                	mv	a4,a0
20401de6:	05800793          	li	a5,88
20401dea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401dec:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401dee:	853e                	mv	a0,a5
20401df0:	40f2                	lw	ra,28(sp)
20401df2:	4462                	lw	s0,24(sp)
20401df4:	6105                	addi	sp,sp,32
20401df6:	8082                	ret

20401df8 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401df8:	1101                	addi	sp,sp,-32
20401dfa:	ce06                	sw	ra,28(sp)
20401dfc:	cc22                	sw	s0,24(sp)
20401dfe:	1000                	addi	s0,sp,32
20401e00:	fea42623          	sw	a0,-20(s0)
20401e04:	feb42423          	sw	a1,-24(s0)
20401e08:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401e0c:	2231                	jal	20401f18 <__errno>
20401e0e:	872a                	mv	a4,a0
20401e10:	05800793          	li	a5,88
20401e14:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401e16:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401e18:	853e                	mv	a0,a5
20401e1a:	40f2                	lw	ra,28(sp)
20401e1c:	4462                	lw	s0,24(sp)
20401e1e:	6105                	addi	sp,sp,32
20401e20:	8082                	ret

20401e22 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401e22:	7179                	addi	sp,sp,-48
20401e24:	d622                	sw	s0,44(sp)
20401e26:	1800                	addi	s0,sp,48
20401e28:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401e2c:	800007b7          	lui	a5,0x80000
20401e30:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
20401e34:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401e38:	800607b7          	lui	a5,0x80060
20401e3c:	acc78713          	addi	a4,a5,-1332 # 8005facc <metal_segment_heap_target_end+0xfffff800>
20401e40:	800607b7          	lui	a5,0x80060
20401e44:	2cc78793          	addi	a5,a5,716 # 800602cc <metal_segment_heap_target_end+0x0>
20401e48:	00f71463          	bne	a4,a5,20401e50 <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401e4c:	57fd                	li	a5,-1
20401e4e:	a0a9                	j	20401e98 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401e50:	800007b7          	lui	a5,0x80000
20401e54:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
20401e58:	fdc42783          	lw	a5,-36(s0)
20401e5c:	973e                	add	a4,a4,a5
20401e5e:	800607b7          	lui	a5,0x80060
20401e62:	2cc78793          	addi	a5,a5,716 # 800602cc <metal_segment_heap_target_end+0x0>
20401e66:	02f77063          	bgeu	a4,a5,20401e86 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401e6a:	800007b7          	lui	a5,0x80000
20401e6e:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
20401e72:	fdc42783          	lw	a5,-36(s0)
20401e76:	973e                	add	a4,a4,a5
20401e78:	800007b7          	lui	a5,0x80000
20401e7c:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401e80:	fec42783          	lw	a5,-20(s0)
20401e84:	a811                	j	20401e98 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401e86:	800007b7          	lui	a5,0x80000
20401e8a:	80060737          	lui	a4,0x80060
20401e8e:	2cc70713          	addi	a4,a4,716 # 800602cc <metal_segment_heap_target_end+0x0>
20401e92:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401e96:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401e98:	853e                	mv	a0,a5
20401e9a:	5432                	lw	s0,44(sp)
20401e9c:	6145                	addi	sp,sp,48
20401e9e:	8082                	ret

20401ea0 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401ea0:	7179                	addi	sp,sp,-48
20401ea2:	d606                	sw	ra,44(sp)
20401ea4:	d422                	sw	s0,40(sp)
20401ea6:	1800                	addi	s0,sp,48
20401ea8:	fca42e23          	sw	a0,-36(s0)
20401eac:	fcb42c23          	sw	a1,-40(s0)
20401eb0:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401eb4:	fdc42703          	lw	a4,-36(s0)
20401eb8:	4785                	li	a5,1
20401eba:	00f70963          	beq	a4,a5,20401ecc <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401ebe:	28a9                	jal	20401f18 <__errno>
20401ec0:	872a                	mv	a4,a0
20401ec2:	05800793          	li	a5,88
20401ec6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401ec8:	57fd                	li	a5,-1
20401eca:	a82d                	j	20401f04 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401ecc:	fd842783          	lw	a5,-40(s0)
20401ed0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401ed4:	fe042623          	sw	zero,-20(s0)
20401ed8:	a839                	j	20401ef6 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401eda:	fe842703          	lw	a4,-24(s0)
20401ede:	fec42783          	lw	a5,-20(s0)
20401ee2:	97ba                	add	a5,a5,a4
20401ee4:	0007c783          	lbu	a5,0(a5)
20401ee8:	853e                	mv	a0,a5
20401eea:	2cb1                	jal	20402146 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401eec:	fec42783          	lw	a5,-20(s0)
20401ef0:	0785                	addi	a5,a5,1
20401ef2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401ef6:	fec42703          	lw	a4,-20(s0)
20401efa:	fd442783          	lw	a5,-44(s0)
20401efe:	fcf76ee3          	bltu	a4,a5,20401eda <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401f02:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401f04:	853e                	mv	a0,a5
20401f06:	50b2                	lw	ra,44(sp)
20401f08:	5422                	lw	s0,40(sp)
20401f0a:	6145                	addi	sp,sp,48
20401f0c:	8082                	ret

20401f0e <atexit>:
atexit():
20401f0e:	85aa                	mv	a1,a0
20401f10:	4681                	li	a3,0
20401f12:	4601                	li	a2,0
20401f14:	4501                	li	a0,0
20401f16:	a8f1                	j	20401ff2 <__register_exitproc>

20401f18 <__errno>:
__errno():
20401f18:	5fbff797          	auipc	a5,0x5fbff
20401f1c:	83078793          	addi	a5,a5,-2000 # 80000748 <_impure_ptr>
20401f20:	4388                	lw	a0,0(a5)
20401f22:	8082                	ret

20401f24 <exit>:
exit():
20401f24:	1141                	addi	sp,sp,-16
20401f26:	c422                	sw	s0,8(sp)
20401f28:	c606                	sw	ra,12(sp)
20401f2a:	00000797          	auipc	a5,0x0
20401f2e:	15478793          	addi	a5,a5,340 # 2040207e <__call_exitprocs>
20401f32:	842a                	mv	s0,a0
20401f34:	c399                	beqz	a5,20401f3a <exit+0x16>
20401f36:	4581                	li	a1,0
20401f38:	2299                	jal	2040207e <__call_exitprocs>
20401f3a:	5fbff797          	auipc	a5,0x5fbff
20401f3e:	81278793          	addi	a5,a5,-2030 # 8000074c <_global_impure_ptr>
20401f42:	4388                	lw	a0,0(a5)
20401f44:	551c                	lw	a5,40(a0)
20401f46:	c391                	beqz	a5,20401f4a <exit+0x26>
20401f48:	9782                	jalr	a5
20401f4a:	8522                	mv	a0,s0
20401f4c:	023030ef          	jal	ra,2040576e <_exit>

20401f50 <__libc_fini_array>:
__libc_fini_array():
20401f50:	1141                	addi	sp,sp,-16
20401f52:	00004797          	auipc	a5,0x4
20401f56:	d7278793          	addi	a5,a5,-654 # 20405cc4 <__fini_array_end>
20401f5a:	c422                	sw	s0,8(sp)
20401f5c:	00004417          	auipc	s0,0x4
20401f60:	d6840413          	addi	s0,s0,-664 # 20405cc4 <__fini_array_end>
20401f64:	8c1d                	sub	s0,s0,a5
20401f66:	c226                	sw	s1,4(sp)
20401f68:	c606                	sw	ra,12(sp)
20401f6a:	8409                	srai	s0,s0,0x2
20401f6c:	84be                	mv	s1,a5
20401f6e:	e411                	bnez	s0,20401f7a <__libc_fini_array+0x2a>
20401f70:	40b2                	lw	ra,12(sp)
20401f72:	4422                	lw	s0,8(sp)
20401f74:	4492                	lw	s1,4(sp)
20401f76:	0141                	addi	sp,sp,16
20401f78:	8082                	ret
20401f7a:	147d                	addi	s0,s0,-1
20401f7c:	00241793          	slli	a5,s0,0x2
20401f80:	97a6                	add	a5,a5,s1
20401f82:	439c                	lw	a5,0(a5)
20401f84:	9782                	jalr	a5
20401f86:	b7e5                	j	20401f6e <__libc_fini_array+0x1e>

20401f88 <__libc_init_array>:
__libc_init_array():
20401f88:	1141                	addi	sp,sp,-16
20401f8a:	00004797          	auipc	a5,0x4
20401f8e:	d3678793          	addi	a5,a5,-714 # 20405cc0 <__init_array_start>
20401f92:	c422                	sw	s0,8(sp)
20401f94:	00004417          	auipc	s0,0x4
20401f98:	d2c40413          	addi	s0,s0,-724 # 20405cc0 <__init_array_start>
20401f9c:	8c1d                	sub	s0,s0,a5
20401f9e:	c226                	sw	s1,4(sp)
20401fa0:	c04a                	sw	s2,0(sp)
20401fa2:	c606                	sw	ra,12(sp)
20401fa4:	8409                	srai	s0,s0,0x2
20401fa6:	4481                	li	s1,0
20401fa8:	893e                	mv	s2,a5
20401faa:	02849663          	bne	s1,s0,20401fd6 <__libc_init_array+0x4e>
20401fae:	00004797          	auipc	a5,0x4
20401fb2:	d1278793          	addi	a5,a5,-750 # 20405cc0 <__init_array_start>
20401fb6:	00004417          	auipc	s0,0x4
20401fba:	d0e40413          	addi	s0,s0,-754 # 20405cc4 <__fini_array_end>
20401fbe:	8c1d                	sub	s0,s0,a5
20401fc0:	8409                	srai	s0,s0,0x2
20401fc2:	4481                	li	s1,0
20401fc4:	893e                	mv	s2,a5
20401fc6:	00849f63          	bne	s1,s0,20401fe4 <__libc_init_array+0x5c>
20401fca:	40b2                	lw	ra,12(sp)
20401fcc:	4422                	lw	s0,8(sp)
20401fce:	4492                	lw	s1,4(sp)
20401fd0:	4902                	lw	s2,0(sp)
20401fd2:	0141                	addi	sp,sp,16
20401fd4:	8082                	ret
20401fd6:	00249793          	slli	a5,s1,0x2
20401fda:	97ca                	add	a5,a5,s2
20401fdc:	439c                	lw	a5,0(a5)
20401fde:	0485                	addi	s1,s1,1
20401fe0:	9782                	jalr	a5
20401fe2:	b7e1                	j	20401faa <__libc_init_array+0x22>
20401fe4:	00249793          	slli	a5,s1,0x2
20401fe8:	97ca                	add	a5,a5,s2
20401fea:	439c                	lw	a5,0(a5)
20401fec:	0485                	addi	s1,s1,1
20401fee:	9782                	jalr	a5
20401ff0:	bfd9                	j	20401fc6 <__libc_init_array+0x3e>

20401ff2 <__register_exitproc>:
__register_exitproc():
20401ff2:	5fbfe797          	auipc	a5,0x5fbfe
20401ff6:	78678793          	addi	a5,a5,1926 # 80000778 <_global_atexit>
20401ffa:	439c                	lw	a5,0(a5)
20401ffc:	8e2a                	mv	t3,a0
20401ffe:	e78d                	bnez	a5,20402028 <__register_exitproc+0x36>
20402000:	5fc5d717          	auipc	a4,0x5fc5d
20402004:	63c70713          	addi	a4,a4,1596 # 8005f63c <_global_atexit0>
20402008:	5fbfe797          	auipc	a5,0x5fbfe
2040200c:	76e7a823          	sw	a4,1904(a5) # 80000778 <_global_atexit>
20402010:	dfbfe517          	auipc	a0,0xdfbfe
20402014:	ff050513          	addi	a0,a0,-16 # 0 <__metal_boot_hart>
20402018:	87ba                	mv	a5,a4
2040201a:	c519                	beqz	a0,20402028 <__register_exitproc+0x36>
2040201c:	411c                	lw	a5,0(a0)
2040201e:	5fc5d517          	auipc	a0,0x5fc5d
20402022:	6af52323          	sw	a5,1702(a0) # 8005f6c4 <_global_atexit0+0x88>
20402026:	87ba                	mv	a5,a4
20402028:	43d8                	lw	a4,4(a5)
2040202a:	487d                	li	a6,31
2040202c:	557d                	li	a0,-1
2040202e:	04e84763          	blt	a6,a4,2040207c <__register_exitproc+0x8a>
20402032:	020e0e63          	beqz	t3,2040206e <__register_exitproc+0x7c>
20402036:	0887a803          	lw	a6,136(a5)
2040203a:	04080163          	beqz	a6,2040207c <__register_exitproc+0x8a>
2040203e:	00271893          	slli	a7,a4,0x2
20402042:	98c2                	add	a7,a7,a6
20402044:	00c8a023          	sw	a2,0(a7)
20402048:	10082303          	lw	t1,256(a6)
2040204c:	4605                	li	a2,1
2040204e:	00e61633          	sll	a2,a2,a4
20402052:	00c36333          	or	t1,t1,a2
20402056:	10682023          	sw	t1,256(a6)
2040205a:	08d8a023          	sw	a3,128(a7)
2040205e:	4689                	li	a3,2
20402060:	00de1763          	bne	t3,a3,2040206e <__register_exitproc+0x7c>
20402064:	10482683          	lw	a3,260(a6)
20402068:	8e55                	or	a2,a2,a3
2040206a:	10c82223          	sw	a2,260(a6)
2040206e:	00170693          	addi	a3,a4,1
20402072:	070a                	slli	a4,a4,0x2
20402074:	c3d4                	sw	a3,4(a5)
20402076:	97ba                	add	a5,a5,a4
20402078:	c78c                	sw	a1,8(a5)
2040207a:	4501                	li	a0,0
2040207c:	8082                	ret

2040207e <__call_exitprocs>:
__call_exitprocs():
2040207e:	7179                	addi	sp,sp,-48
20402080:	cc52                	sw	s4,24(sp)
20402082:	ca56                	sw	s5,20(sp)
20402084:	c85a                	sw	s6,16(sp)
20402086:	c65e                	sw	s7,12(sp)
20402088:	d606                	sw	ra,44(sp)
2040208a:	d422                	sw	s0,40(sp)
2040208c:	d226                	sw	s1,36(sp)
2040208e:	d04a                	sw	s2,32(sp)
20402090:	ce4e                	sw	s3,28(sp)
20402092:	c462                	sw	s8,8(sp)
20402094:	8b2a                	mv	s6,a0
20402096:	8a2e                	mv	s4,a1
20402098:	5fbfea97          	auipc	s5,0x5fbfe
2040209c:	6e0a8a93          	addi	s5,s5,1760 # 80000778 <_global_atexit>
204020a0:	4b85                	li	s7,1
204020a2:	000aa403          	lw	s0,0(s5)
204020a6:	c811                	beqz	s0,204020ba <__call_exitprocs+0x3c>
204020a8:	4044                	lw	s1,4(s0)
204020aa:	08842983          	lw	s3,136(s0)
204020ae:	fff48913          	addi	s2,s1,-1
204020b2:	048a                	slli	s1,s1,0x2
204020b4:	94a2                	add	s1,s1,s0
204020b6:	00095e63          	bgez	s2,204020d2 <__call_exitprocs+0x54>
204020ba:	50b2                	lw	ra,44(sp)
204020bc:	5422                	lw	s0,40(sp)
204020be:	5492                	lw	s1,36(sp)
204020c0:	5902                	lw	s2,32(sp)
204020c2:	49f2                	lw	s3,28(sp)
204020c4:	4a62                	lw	s4,24(sp)
204020c6:	4ad2                	lw	s5,20(sp)
204020c8:	4b42                	lw	s6,16(sp)
204020ca:	4bb2                	lw	s7,12(sp)
204020cc:	4c22                	lw	s8,8(sp)
204020ce:	6145                	addi	sp,sp,48
204020d0:	8082                	ret
204020d2:	000a0e63          	beqz	s4,204020ee <__call_exitprocs+0x70>
204020d6:	00099563          	bnez	s3,204020e0 <__call_exitprocs+0x62>
204020da:	197d                	addi	s2,s2,-1
204020dc:	14f1                	addi	s1,s1,-4
204020de:	bfe1                	j	204020b6 <__call_exitprocs+0x38>
204020e0:	00291793          	slli	a5,s2,0x2
204020e4:	97ce                	add	a5,a5,s3
204020e6:	0807a783          	lw	a5,128(a5)
204020ea:	ff4798e3          	bne	a5,s4,204020da <__call_exitprocs+0x5c>
204020ee:	4058                	lw	a4,4(s0)
204020f0:	40dc                	lw	a5,4(s1)
204020f2:	177d                	addi	a4,a4,-1
204020f4:	03271863          	bne	a4,s2,20402124 <__call_exitprocs+0xa6>
204020f8:	01242223          	sw	s2,4(s0)
204020fc:	dff9                	beqz	a5,204020da <__call_exitprocs+0x5c>
204020fe:	00442c03          	lw	s8,4(s0)
20402102:	00098863          	beqz	s3,20402112 <__call_exitprocs+0x94>
20402106:	1009a683          	lw	a3,256(s3)
2040210a:	012b9733          	sll	a4,s7,s2
2040210e:	8ef9                	and	a3,a3,a4
20402110:	ee89                	bnez	a3,2040212a <__call_exitprocs+0xac>
20402112:	9782                	jalr	a5
20402114:	4058                	lw	a4,4(s0)
20402116:	000aa783          	lw	a5,0(s5)
2040211a:	f98714e3          	bne	a4,s8,204020a2 <__call_exitprocs+0x24>
2040211e:	faf40ee3          	beq	s0,a5,204020da <__call_exitprocs+0x5c>
20402122:	b741                	j	204020a2 <__call_exitprocs+0x24>
20402124:	0004a223          	sw	zero,4(s1)
20402128:	bfd1                	j	204020fc <__call_exitprocs+0x7e>
2040212a:	00291693          	slli	a3,s2,0x2
2040212e:	96ce                	add	a3,a3,s3
20402130:	428c                	lw	a1,0(a3)
20402132:	1049a683          	lw	a3,260(s3)
20402136:	8f75                	and	a4,a4,a3
20402138:	e701                	bnez	a4,20402140 <__call_exitprocs+0xc2>
2040213a:	855a                	mv	a0,s6
2040213c:	9782                	jalr	a5
2040213e:	bfd9                	j	20402114 <__call_exitprocs+0x96>
20402140:	852e                	mv	a0,a1
20402142:	9782                	jalr	a5
20402144:	bfc1                	j	20402114 <__call_exitprocs+0x96>

20402146 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20402146:	1101                	addi	sp,sp,-32
20402148:	ce06                	sw	ra,28(sp)
2040214a:	cc22                	sw	s0,24(sp)
2040214c:	1000                	addi	s0,sp,32
2040214e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20402152:	fec42703          	lw	a4,-20(s0)
20402156:	47a9                	li	a5,10
20402158:	00f71463          	bne	a4,a5,20402160 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
2040215c:	4535                	li	a0,13
2040215e:	2811                	jal	20402172 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20402160:	fec42503          	lw	a0,-20(s0)
20402164:	2039                	jal	20402172 <metal_tty_putc_raw>
20402166:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20402168:	853e                	mv	a0,a5
2040216a:	40f2                	lw	ra,28(sp)
2040216c:	4462                	lw	s0,24(sp)
2040216e:	6105                	addi	sp,sp,32
20402170:	8082                	ret

20402172 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20402172:	1101                	addi	sp,sp,-32
20402174:	ce06                	sw	ra,28(sp)
20402176:	cc22                	sw	s0,24(sp)
20402178:	1000                	addi	s0,sp,32
2040217a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
2040217e:	fec42583          	lw	a1,-20(s0)
20402182:	800007b7          	lui	a5,0x80000
20402186:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
2040218a:	28b1                	jal	204021e6 <metal_uart_putc>
2040218c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
2040218e:	853e                	mv	a0,a5
20402190:	40f2                	lw	ra,28(sp)
20402192:	4462                	lw	s0,24(sp)
20402194:	6105                	addi	sp,sp,32
20402196:	8082                	ret

20402198 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20402198:	1141                	addi	sp,sp,-16
2040219a:	c606                	sw	ra,12(sp)
2040219c:	c422                	sw	s0,8(sp)
2040219e:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
204021a0:	67f1                	lui	a5,0x1c
204021a2:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
204021a6:	800007b7          	lui	a5,0x80000
204021aa:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
204021ae:	2031                	jal	204021ba <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
204021b0:	0001                	nop
204021b2:	40b2                	lw	ra,12(sp)
204021b4:	4422                	lw	s0,8(sp)
204021b6:	0141                	addi	sp,sp,16
204021b8:	8082                	ret

204021ba <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
204021ba:	1101                	addi	sp,sp,-32
204021bc:	ce06                	sw	ra,28(sp)
204021be:	cc22                	sw	s0,24(sp)
204021c0:	1000                	addi	s0,sp,32
204021c2:	fea42623          	sw	a0,-20(s0)
204021c6:	feb42423          	sw	a1,-24(s0)
204021ca:	fec42783          	lw	a5,-20(s0)
204021ce:	439c                	lw	a5,0(a5)
204021d0:	439c                	lw	a5,0(a5)
204021d2:	fe842583          	lw	a1,-24(s0)
204021d6:	fec42503          	lw	a0,-20(s0)
204021da:	9782                	jalr	a5
204021dc:	0001                	nop
204021de:	40f2                	lw	ra,28(sp)
204021e0:	4462                	lw	s0,24(sp)
204021e2:	6105                	addi	sp,sp,32
204021e4:	8082                	ret

204021e6 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
204021e6:	1101                	addi	sp,sp,-32
204021e8:	ce06                	sw	ra,28(sp)
204021ea:	cc22                	sw	s0,24(sp)
204021ec:	1000                	addi	s0,sp,32
204021ee:	fea42623          	sw	a0,-20(s0)
204021f2:	feb42423          	sw	a1,-24(s0)
204021f6:	fec42783          	lw	a5,-20(s0)
204021fa:	439c                	lw	a5,0(a5)
204021fc:	43dc                	lw	a5,4(a5)
204021fe:	fe842583          	lw	a1,-24(s0)
20402202:	fec42503          	lw	a0,-20(s0)
20402206:	9782                	jalr	a5
20402208:	87aa                	mv	a5,a0
2040220a:	853e                	mv	a0,a5
2040220c:	40f2                	lw	ra,28(sp)
2040220e:	4462                	lw	s0,24(sp)
20402210:	6105                	addi	sp,sp,32
20402212:	8082                	ret

20402214 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20402214:	1101                	addi	sp,sp,-32
20402216:	ce06                	sw	ra,28(sp)
20402218:	cc22                	sw	s0,24(sp)
2040221a:	1000                	addi	s0,sp,32
2040221c:	fea42623          	sw	a0,-20(s0)
20402220:	feb42423          	sw	a1,-24(s0)
20402224:	fec42783          	lw	a5,-20(s0)
20402228:	439c                	lw	a5,0(a5)
2040222a:	4bdc                	lw	a5,20(a5)
2040222c:	fe842583          	lw	a1,-24(s0)
20402230:	fec42503          	lw	a0,-20(s0)
20402234:	9782                	jalr	a5
20402236:	87aa                	mv	a5,a0
20402238:	853e                	mv	a0,a5
2040223a:	40f2                	lw	ra,28(sp)
2040223c:	4462                	lw	s0,24(sp)
2040223e:	6105                	addi	sp,sp,32
20402240:	8082                	ret

20402242 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20402242:	1101                	addi	sp,sp,-32
20402244:	ce22                	sw	s0,28(sp)
20402246:	1000                	addi	s0,sp,32
20402248:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2040224c:	fec42703          	lw	a4,-20(s0)
20402250:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20402254:	00f71563          	bne	a4,a5,2040225e <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20402258:	020007b7          	lui	a5,0x2000
2040225c:	a011                	j	20402260 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
2040225e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20402260:	853e                	mv	a0,a5
20402262:	4472                	lw	s0,28(sp)
20402264:	6105                	addi	sp,sp,32
20402266:	8082                	ret

20402268 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20402268:	1101                	addi	sp,sp,-32
2040226a:	ce22                	sw	s0,28(sp)
2040226c:	1000                	addi	s0,sp,32
2040226e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20402272:	fec42703          	lw	a4,-20(s0)
20402276:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
2040227a:	00f71463          	bne	a4,a5,20402282 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
2040227e:	4789                	li	a5,2
20402280:	a011                	j	20402284 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20402282:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20402284:	853e                	mv	a0,a5
20402286:	4472                	lw	s0,28(sp)
20402288:	6105                	addi	sp,sp,32
2040228a:	8082                	ret

2040228c <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040228c:	1101                	addi	sp,sp,-32
2040228e:	ce22                	sw	s0,28(sp)
20402290:	1000                	addi	s0,sp,32
20402292:	fea42623          	sw	a0,-20(s0)
20402296:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
2040229a:	fe842783          	lw	a5,-24(s0)
2040229e:	e791                	bnez	a5,204022aa <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204022a0:	800007b7          	lui	a5,0x80000
204022a4:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
204022a8:	a821                	j	204022c0 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
204022aa:	fe842703          	lw	a4,-24(s0)
204022ae:	4785                	li	a5,1
204022b0:	00f71763          	bne	a4,a5,204022be <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
204022b4:	800007b7          	lui	a5,0x80000
204022b8:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
204022bc:	a011                	j	204022c0 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
204022be:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
204022c0:	853e                	mv	a0,a5
204022c2:	4472                	lw	s0,28(sp)
204022c4:	6105                	addi	sp,sp,32
204022c6:	8082                	ret

204022c8 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
204022c8:	1101                	addi	sp,sp,-32
204022ca:	ce22                	sw	s0,28(sp)
204022cc:	1000                	addi	s0,sp,32
204022ce:	fea42623          	sw	a0,-20(s0)
204022d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
204022d6:	fe842783          	lw	a5,-24(s0)
204022da:	e399                	bnez	a5,204022e0 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
204022dc:	478d                	li	a5,3
204022de:	a809                	j	204022f0 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
204022e0:	fe842703          	lw	a4,-24(s0)
204022e4:	4785                	li	a5,1
204022e6:	00f71463          	bne	a4,a5,204022ee <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
204022ea:	479d                	li	a5,7
204022ec:	a011                	j	204022f0 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
204022ee:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
204022f0:	853e                	mv	a0,a5
204022f2:	4472                	lw	s0,28(sp)
204022f4:	6105                	addi	sp,sp,32
204022f6:	8082                	ret

204022f8 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
204022f8:	715d                	addi	sp,sp,-80
204022fa:	c686                	sw	ra,76(sp)
204022fc:	c4a2                	sw	s0,72(sp)
204022fe:	c2ca                	sw	s2,68(sp)
20402300:	c0ce                	sw	s3,64(sp)
20402302:	de52                	sw	s4,60(sp)
20402304:	dc56                	sw	s5,56(sp)
20402306:	da5a                	sw	s6,52(sp)
20402308:	d85e                	sw	s7,48(sp)
2040230a:	d662                	sw	s8,44(sp)
2040230c:	d466                	sw	s9,40(sp)
2040230e:	0880                	addi	s0,sp,80
20402310:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402314:	fbc42783          	lw	a5,-68(s0)
20402318:	853e                	mv	a0,a5
2040231a:	3725                	jal	20402242 <__metal_driver_sifive_clint0_control_base>
2040231c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402320:	fcc42703          	lw	a4,-52(s0)
20402324:	67b1                	lui	a5,0xc
20402326:	17f1                	addi	a5,a5,-4
20402328:	97ba                	add	a5,a5,a4
2040232a:	439c                	lw	a5,0(a5)
2040232c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402330:	fcc42703          	lw	a4,-52(s0)
20402334:	67b1                	lui	a5,0xc
20402336:	17e1                	addi	a5,a5,-8
20402338:	97ba                	add	a5,a5,a4
2040233a:	439c                	lw	a5,0(a5)
2040233c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20402340:	fcc42703          	lw	a4,-52(s0)
20402344:	67b1                	lui	a5,0xc
20402346:	17f1                	addi	a5,a5,-4
20402348:	97ba                	add	a5,a5,a4
2040234a:	439c                	lw	a5,0(a5)
2040234c:	fc842703          	lw	a4,-56(s0)
20402350:	fcf718e3          	bne	a4,a5,20402320 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20402354:	fc842783          	lw	a5,-56(s0)
20402358:	8c3e                	mv	s8,a5
2040235a:	4c81                	li	s9,0
2040235c:	000c1993          	slli	s3,s8,0x0
20402360:	4901                	li	s2,0
20402362:	fc442783          	lw	a5,-60(s0)
20402366:	8a3e                	mv	s4,a5
20402368:	4a81                	li	s5,0
2040236a:	01496b33          	or	s6,s2,s4
2040236e:	0159ebb3          	or	s7,s3,s5
20402372:	87da                	mv	a5,s6
20402374:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20402376:	853e                	mv	a0,a5
20402378:	85c2                	mv	a1,a6
2040237a:	40b6                	lw	ra,76(sp)
2040237c:	4426                	lw	s0,72(sp)
2040237e:	4916                	lw	s2,68(sp)
20402380:	4986                	lw	s3,64(sp)
20402382:	5a72                	lw	s4,60(sp)
20402384:	5ae2                	lw	s5,56(sp)
20402386:	5b52                	lw	s6,52(sp)
20402388:	5bc2                	lw	s7,48(sp)
2040238a:	5c32                	lw	s8,44(sp)
2040238c:	5ca2                	lw	s9,40(sp)
2040238e:	6161                	addi	sp,sp,80
20402390:	8082                	ret

20402392 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20402392:	7179                	addi	sp,sp,-48
20402394:	d606                	sw	ra,44(sp)
20402396:	d422                	sw	s0,40(sp)
20402398:	d24a                	sw	s2,36(sp)
2040239a:	d04e                	sw	s3,32(sp)
2040239c:	1800                	addi	s0,sp,48
2040239e:	fca42e23          	sw	a0,-36(s0)
204023a2:	fcb42c23          	sw	a1,-40(s0)
204023a6:	fcc42823          	sw	a2,-48(s0)
204023aa:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
204023ae:	fdc42783          	lw	a5,-36(s0)
204023b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204023b6:	fec42783          	lw	a5,-20(s0)
204023ba:	853e                	mv	a0,a5
204023bc:	3559                	jal	20402242 <__metal_driver_sifive_clint0_control_base>
204023be:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
204023c2:	fd842783          	lw	a5,-40(s0)
204023c6:	078e                	slli	a5,a5,0x3
204023c8:	873e                	mv	a4,a5
204023ca:	fe842783          	lw	a5,-24(s0)
204023ce:	973e                	add	a4,a4,a5
204023d0:	6791                	lui	a5,0x4
204023d2:	0791                	addi	a5,a5,4
204023d4:	97ba                	add	a5,a5,a4
204023d6:	873e                	mv	a4,a5
204023d8:	57fd                	li	a5,-1
204023da:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
204023dc:	fd842783          	lw	a5,-40(s0)
204023e0:	078e                	slli	a5,a5,0x3
204023e2:	873e                	mv	a4,a5
204023e4:	fe842783          	lw	a5,-24(s0)
204023e8:	973e                	add	a4,a4,a5
204023ea:	6791                	lui	a5,0x4
204023ec:	97ba                	add	a5,a5,a4
204023ee:	873e                	mv	a4,a5
204023f0:	fd042783          	lw	a5,-48(s0)
204023f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
204023f6:	fd442783          	lw	a5,-44(s0)
204023fa:	0007d913          	srli	s2,a5,0x0
204023fe:	4981                	li	s3,0
20402400:	fd842783          	lw	a5,-40(s0)
20402404:	078e                	slli	a5,a5,0x3
20402406:	873e                	mv	a4,a5
20402408:	fe842783          	lw	a5,-24(s0)
2040240c:	973e                	add	a4,a4,a5
2040240e:	6791                	lui	a5,0x4
20402410:	0791                	addi	a5,a5,4
20402412:	97ba                	add	a5,a5,a4
20402414:	874a                	mv	a4,s2
20402416:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402418:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
2040241a:	853e                	mv	a0,a5
2040241c:	50b2                	lw	ra,44(sp)
2040241e:	5422                	lw	s0,40(sp)
20402420:	5912                	lw	s2,36(sp)
20402422:	5982                	lw	s3,32(sp)
20402424:	6145                	addi	sp,sp,48
20402426:	8082                	ret

20402428 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402428:	1101                	addi	sp,sp,-32
2040242a:	ce06                	sw	ra,28(sp)
2040242c:	cc22                	sw	s0,24(sp)
2040242e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402430:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402434:	f14027f3          	csrr	a5,mhartid
20402438:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
2040243c:	fec42783          	lw	a5,-20(s0)
20402440:	853e                	mv	a0,a5
20402442:	196030ef          	jal	ra,204055d8 <metal_cpu_get>
20402446:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
2040244a:	fe842503          	lw	a0,-24(s0)
2040244e:	164030ef          	jal	ra,204055b2 <metal_cpu_interrupt_controller>
20402452:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402454:	853e                	mv	a0,a5
20402456:	40f2                	lw	ra,28(sp)
20402458:	4462                	lw	s0,24(sp)
2040245a:	6105                	addi	sp,sp,32
2040245c:	8082                	ret

2040245e <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
2040245e:	7139                	addi	sp,sp,-64
20402460:	de06                	sw	ra,60(sp)
20402462:	dc22                	sw	s0,56(sp)
20402464:	0080                	addi	s0,sp,64
20402466:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040246a:	fcc42503          	lw	a0,-52(s0)
2040246e:	3bed                	jal	20402268 <__metal_driver_sifive_clint0_num_interrupts>
20402470:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402474:	fcc42783          	lw	a5,-52(s0)
20402478:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
2040247c:	fe442783          	lw	a5,-28(s0)
20402480:	43dc                	lw	a5,4(a5)
20402482:	efa9                	bnez	a5,204024dc <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402484:	fe042623          	sw	zero,-20(s0)
20402488:	a081                	j	204024c8 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040248a:	fec42583          	lw	a1,-20(s0)
2040248e:	fcc42503          	lw	a0,-52(s0)
20402492:	3bed                	jal	2040228c <__metal_driver_sifive_clint0_interrupt_parents>
20402494:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402498:	fec42583          	lw	a1,-20(s0)
2040249c:	fcc42503          	lw	a0,-52(s0)
204024a0:	3525                	jal	204022c8 <__metal_driver_sifive_clint0_interrupt_lines>
204024a2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
204024a6:	fe042783          	lw	a5,-32(s0)
204024aa:	439c                	lw	a5,0(a5)
204024ac:	4fdc                	lw	a5,28(a5)
204024ae:	fcc42683          	lw	a3,-52(s0)
204024b2:	4601                	li	a2,0
204024b4:	fdc42583          	lw	a1,-36(s0)
204024b8:	fe042503          	lw	a0,-32(s0)
204024bc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
204024be:	fec42783          	lw	a5,-20(s0)
204024c2:	0785                	addi	a5,a5,1
204024c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
204024c8:	fec42703          	lw	a4,-20(s0)
204024cc:	fe842783          	lw	a5,-24(s0)
204024d0:	faf74de3          	blt	a4,a5,2040248a <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
204024d4:	fe442783          	lw	a5,-28(s0)
204024d8:	4705                	li	a4,1
204024da:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
204024dc:	0001                	nop
204024de:	50f2                	lw	ra,60(sp)
204024e0:	5462                	lw	s0,56(sp)
204024e2:	6121                	addi	sp,sp,64
204024e4:	8082                	ret

204024e6 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
204024e6:	7139                	addi	sp,sp,-64
204024e8:	de06                	sw	ra,60(sp)
204024ea:	dc22                	sw	s0,56(sp)
204024ec:	0080                	addi	s0,sp,64
204024ee:	fca42623          	sw	a0,-52(s0)
204024f2:	fcb42423          	sw	a1,-56(s0)
204024f6:	fcc42223          	sw	a2,-60(s0)
204024fa:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
204024fe:	57fd                	li	a5,-1
20402500:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402504:	310010ef          	jal	ra,20403814 <__metal_controller_interrupt_vector_mode>
20402508:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2040250c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402510:	3f21                	jal	20402428 <_get_cpu_intc>
20402512:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402516:	fcc42503          	lw	a0,-52(s0)
2040251a:	33b9                	jal	20402268 <__metal_driver_sifive_clint0_num_interrupts>
2040251c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402520:	fe042703          	lw	a4,-32(s0)
20402524:	4785                	li	a5,1
20402526:	00f70863          	beq	a4,a5,20402536 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
2040252a:	fe042783          	lw	a5,-32(s0)
2040252e:	c781                	beqz	a5,20402536 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402530:	fec42783          	lw	a5,-20(s0)
20402534:	a049                	j	204025b6 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402536:	fe042223          	sw	zero,-28(s0)
2040253a:	a091                	j	2040257e <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040253c:	fe442583          	lw	a1,-28(s0)
20402540:	fcc42503          	lw	a0,-52(s0)
20402544:	3351                	jal	204022c8 <__metal_driver_sifive_clint0_interrupt_lines>
20402546:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040254a:	fe442583          	lw	a1,-28(s0)
2040254e:	fcc42503          	lw	a0,-52(s0)
20402552:	3b2d                	jal	2040228c <__metal_driver_sifive_clint0_interrupt_parents>
20402554:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20402558:	fdc42703          	lw	a4,-36(s0)
2040255c:	fe842783          	lw	a5,-24(s0)
20402560:	00f71863          	bne	a4,a5,20402570 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402564:	fc842703          	lw	a4,-56(s0)
20402568:	fd442783          	lw	a5,-44(s0)
2040256c:	02f70063          	beq	a4,a5,2040258c <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20402570:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402574:	fe442783          	lw	a5,-28(s0)
20402578:	0785                	addi	a5,a5,1
2040257a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
2040257e:	fe442703          	lw	a4,-28(s0)
20402582:	fd842783          	lw	a5,-40(s0)
20402586:	faf74be3          	blt	a4,a5,2040253c <__metal_driver_riscv_clint0_register+0x56>
2040258a:	a011                	j	2040258e <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
2040258c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
2040258e:	fe842783          	lw	a5,-24(s0)
20402592:	c385                	beqz	a5,204025b2 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402594:	fe842783          	lw	a5,-24(s0)
20402598:	439c                	lw	a5,0(a5)
2040259a:	4fdc                	lw	a5,28(a5)
2040259c:	fc042683          	lw	a3,-64(s0)
204025a0:	fc442603          	lw	a2,-60(s0)
204025a4:	fc842583          	lw	a1,-56(s0)
204025a8:	fe842503          	lw	a0,-24(s0)
204025ac:	9782                	jalr	a5
204025ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
204025b2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
204025b6:	853e                	mv	a0,a5
204025b8:	50f2                	lw	ra,60(sp)
204025ba:	5462                	lw	s0,56(sp)
204025bc:	6121                	addi	sp,sp,64
204025be:	8082                	ret

204025c0 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
204025c0:	7179                	addi	sp,sp,-48
204025c2:	d622                	sw	s0,44(sp)
204025c4:	1800                	addi	s0,sp,48
204025c6:	fca42e23          	sw	a0,-36(s0)
204025ca:	fcb42c23          	sw	a1,-40(s0)
204025ce:	fcc42a23          	sw	a2,-44(s0)
204025d2:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
204025d6:	57fd                	li	a5,-1
204025d8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
204025dc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
204025e0:	853e                	mv	a0,a5
204025e2:	5432                	lw	s0,44(sp)
204025e4:	6145                	addi	sp,sp,48
204025e6:	8082                	ret

204025e8 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
204025e8:	1101                	addi	sp,sp,-32
204025ea:	ce06                	sw	ra,28(sp)
204025ec:	cc22                	sw	s0,24(sp)
204025ee:	1000                	addi	s0,sp,32
204025f0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
204025f4:	220010ef          	jal	ra,20403814 <__metal_controller_interrupt_vector_mode>
204025f8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
204025fa:	853e                	mv	a0,a5
204025fc:	40f2                	lw	ra,28(sp)
204025fe:	4462                	lw	s0,24(sp)
20402600:	6105                	addi	sp,sp,32
20402602:	8082                	ret

20402604 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402604:	7179                	addi	sp,sp,-48
20402606:	d606                	sw	ra,44(sp)
20402608:	d422                	sw	s0,40(sp)
2040260a:	1800                	addi	s0,sp,48
2040260c:	fca42e23          	sw	a0,-36(s0)
20402610:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402614:	57fd                	li	a5,-1
20402616:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
2040261a:	3539                	jal	20402428 <_get_cpu_intc>
2040261c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402620:	fe842783          	lw	a5,-24(s0)
20402624:	c395                	beqz	a5,20402648 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402626:	fd842703          	lw	a4,-40(s0)
2040262a:	4785                	li	a5,1
2040262c:	00e7ef63          	bltu	a5,a4,2040264a <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402630:	fe842783          	lw	a5,-24(s0)
20402634:	439c                	lw	a5,0(a5)
20402636:	43dc                	lw	a5,4(a5)
20402638:	fd842583          	lw	a1,-40(s0)
2040263c:	fe842503          	lw	a0,-24(s0)
20402640:	9782                	jalr	a5
20402642:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402646:	a011                	j	2040264a <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
20402648:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
2040264a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
2040264e:	853e                	mv	a0,a5
20402650:	50b2                	lw	ra,44(sp)
20402652:	5422                	lw	s0,40(sp)
20402654:	6145                	addi	sp,sp,48
20402656:	8082                	ret

20402658 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
20402658:	7139                	addi	sp,sp,-64
2040265a:	de06                	sw	ra,60(sp)
2040265c:	dc22                	sw	s0,56(sp)
2040265e:	0080                	addi	s0,sp,64
20402660:	fca42623          	sw	a0,-52(s0)
20402664:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402668:	57fd                	li	a5,-1
2040266a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
2040266e:	fc842783          	lw	a5,-56(s0)
20402672:	c7c9                	beqz	a5,204026fc <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402674:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402678:	3b45                	jal	20402428 <_get_cpu_intc>
2040267a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040267e:	fcc42503          	lw	a0,-52(s0)
20402682:	36dd                	jal	20402268 <__metal_driver_sifive_clint0_num_interrupts>
20402684:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402688:	fe042223          	sw	zero,-28(s0)
2040268c:	a091                	j	204026d0 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040268e:	fe442583          	lw	a1,-28(s0)
20402692:	fcc42503          	lw	a0,-52(s0)
20402696:	390d                	jal	204022c8 <__metal_driver_sifive_clint0_interrupt_lines>
20402698:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040269c:	fe442583          	lw	a1,-28(s0)
204026a0:	fcc42503          	lw	a0,-52(s0)
204026a4:	36e5                	jal	2040228c <__metal_driver_sifive_clint0_interrupt_parents>
204026a6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
204026aa:	fe042703          	lw	a4,-32(s0)
204026ae:	fe842783          	lw	a5,-24(s0)
204026b2:	00f71863          	bne	a4,a5,204026c2 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
204026b6:	fc842703          	lw	a4,-56(s0)
204026ba:	fd842783          	lw	a5,-40(s0)
204026be:	02f70063          	beq	a4,a5,204026de <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
204026c2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204026c6:	fe442783          	lw	a5,-28(s0)
204026ca:	0785                	addi	a5,a5,1
204026cc:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
204026d0:	fe442703          	lw	a4,-28(s0)
204026d4:	fdc42783          	lw	a5,-36(s0)
204026d8:	faf74be3          	blt	a4,a5,2040268e <__metal_driver_riscv_clint0_enable+0x36>
204026dc:	a011                	j	204026e0 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
204026de:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204026e0:	fe842783          	lw	a5,-24(s0)
204026e4:	cf81                	beqz	a5,204026fc <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
204026e6:	fe842783          	lw	a5,-24(s0)
204026ea:	439c                	lw	a5,0(a5)
204026ec:	53dc                	lw	a5,36(a5)
204026ee:	fc842583          	lw	a1,-56(s0)
204026f2:	fe842503          	lw	a0,-24(s0)
204026f6:	9782                	jalr	a5
204026f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
204026fc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402700:	853e                	mv	a0,a5
20402702:	50f2                	lw	ra,60(sp)
20402704:	5462                	lw	s0,56(sp)
20402706:	6121                	addi	sp,sp,64
20402708:	8082                	ret

2040270a <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
2040270a:	7139                	addi	sp,sp,-64
2040270c:	de06                	sw	ra,60(sp)
2040270e:	dc22                	sw	s0,56(sp)
20402710:	0080                	addi	s0,sp,64
20402712:	fca42623          	sw	a0,-52(s0)
20402716:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
2040271a:	57fd                	li	a5,-1
2040271c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402720:	fc842783          	lw	a5,-56(s0)
20402724:	c7c9                	beqz	a5,204027ae <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402726:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040272a:	39fd                	jal	20402428 <_get_cpu_intc>
2040272c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402730:	fcc42503          	lw	a0,-52(s0)
20402734:	3e15                	jal	20402268 <__metal_driver_sifive_clint0_num_interrupts>
20402736:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
2040273a:	fe042223          	sw	zero,-28(s0)
2040273e:	a091                	j	20402782 <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402740:	fe442583          	lw	a1,-28(s0)
20402744:	fcc42503          	lw	a0,-52(s0)
20402748:	3641                	jal	204022c8 <__metal_driver_sifive_clint0_interrupt_lines>
2040274a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040274e:	fe442583          	lw	a1,-28(s0)
20402752:	fcc42503          	lw	a0,-52(s0)
20402756:	3e1d                	jal	2040228c <__metal_driver_sifive_clint0_interrupt_parents>
20402758:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
2040275c:	fe042703          	lw	a4,-32(s0)
20402760:	fe842783          	lw	a5,-24(s0)
20402764:	00f71863          	bne	a4,a5,20402774 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402768:	fc842703          	lw	a4,-56(s0)
2040276c:	fd842783          	lw	a5,-40(s0)
20402770:	02f70063          	beq	a4,a5,20402790 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402774:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402778:	fe442783          	lw	a5,-28(s0)
2040277c:	0785                	addi	a5,a5,1
2040277e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402782:	fe442703          	lw	a4,-28(s0)
20402786:	fdc42783          	lw	a5,-36(s0)
2040278a:	faf74be3          	blt	a4,a5,20402740 <__metal_driver_riscv_clint0_disable+0x36>
2040278e:	a011                	j	20402792 <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402790:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402792:	fe842783          	lw	a5,-24(s0)
20402796:	cf81                	beqz	a5,204027ae <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402798:	fe842783          	lw	a5,-24(s0)
2040279c:	439c                	lw	a5,0(a5)
2040279e:	579c                	lw	a5,40(a5)
204027a0:	fc842583          	lw	a1,-56(s0)
204027a4:	fe842503          	lw	a0,-24(s0)
204027a8:	9782                	jalr	a5
204027aa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
204027ae:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
204027b2:	853e                	mv	a0,a5
204027b4:	50f2                	lw	ra,60(sp)
204027b6:	5462                	lw	s0,56(sp)
204027b8:	6121                	addi	sp,sp,64
204027ba:	8082                	ret

204027bc <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
204027bc:	7179                	addi	sp,sp,-48
204027be:	d606                	sw	ra,44(sp)
204027c0:	d422                	sw	s0,40(sp)
204027c2:	1800                	addi	s0,sp,48
204027c4:	fca42e23          	sw	a0,-36(s0)
204027c8:	fcb42c23          	sw	a1,-40(s0)
204027cc:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
204027d0:	57fd                	li	a5,-1
204027d2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
204027d6:	fdc42783          	lw	a5,-36(s0)
204027da:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204027de:	fdc42503          	lw	a0,-36(s0)
204027e2:	a61ff0ef          	jal	ra,20402242 <__metal_driver_sifive_clint0_control_base>
204027e6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204027ea:	fd842703          	lw	a4,-40(s0)
204027ee:	4789                	li	a5,2
204027f0:	04f70963          	beq	a4,a5,20402842 <__metal_driver_riscv_clint0_command_request+0x86>
204027f4:	fd842703          	lw	a4,-40(s0)
204027f8:	4789                	li	a5,2
204027fa:	00e7c863          	blt	a5,a4,2040280a <__metal_driver_riscv_clint0_command_request+0x4e>
204027fe:	fd842703          	lw	a4,-40(s0)
20402802:	4785                	li	a5,1
20402804:	00f70e63          	beq	a4,a5,20402820 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402808:	a8f1                	j	204028e4 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
2040280a:	fd842703          	lw	a4,-40(s0)
2040280e:	478d                	li	a5,3
20402810:	04f70d63          	beq	a4,a5,2040286a <__metal_driver_riscv_clint0_command_request+0xae>
20402814:	fd842703          	lw	a4,-40(s0)
20402818:	4791                	li	a5,4
2040281a:	08f70963          	beq	a4,a5,204028ac <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
2040281e:	a0d9                	j	204028e4 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402820:	fd442783          	lw	a5,-44(s0)
20402824:	cbcd                	beqz	a5,204028d6 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402826:	fe842503          	lw	a0,-24(s0)
2040282a:	acfff0ef          	jal	ra,204022f8 <__metal_clint0_mtime_get>
2040282e:	87aa                	mv	a5,a0
20402830:	882e                	mv	a6,a1
20402832:	fd442703          	lw	a4,-44(s0)
20402836:	c31c                	sw	a5,0(a4)
20402838:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
2040283c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402840:	a859                	j	204028d6 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402842:	fd442783          	lw	a5,-44(s0)
20402846:	cbd1                	beqz	a5,204028da <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
20402848:	fd442783          	lw	a5,-44(s0)
2040284c:	439c                	lw	a5,0(a5)
2040284e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402852:	fe042783          	lw	a5,-32(s0)
20402856:	078a                	slli	a5,a5,0x2
20402858:	873e                	mv	a4,a5
2040285a:	fe442783          	lw	a5,-28(s0)
2040285e:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402860:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402864:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402868:	a88d                	j	204028da <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
2040286a:	fd442783          	lw	a5,-44(s0)
2040286e:	cba5                	beqz	a5,204028de <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402870:	fd442783          	lw	a5,-44(s0)
20402874:	439c                	lw	a5,0(a5)
20402876:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040287a:	fe042783          	lw	a5,-32(s0)
2040287e:	078a                	slli	a5,a5,0x2
20402880:	873e                	mv	a4,a5
20402882:	fe442783          	lw	a5,-28(s0)
20402886:	97ba                	add	a5,a5,a4
20402888:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
2040288a:	4785                	li	a5,1
2040288c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
2040288e:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402892:	fe042783          	lw	a5,-32(s0)
20402896:	078a                	slli	a5,a5,0x2
20402898:	873e                	mv	a4,a5
2040289a:	fe442783          	lw	a5,-28(s0)
2040289e:	97ba                	add	a5,a5,a4
204028a0:	439c                	lw	a5,0(a5)
204028a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
204028a6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204028aa:	a815                	j	204028de <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
204028ac:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
204028b0:	fd442783          	lw	a5,-44(s0)
204028b4:	c79d                	beqz	a5,204028e2 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
204028b6:	fd442783          	lw	a5,-44(s0)
204028ba:	439c                	lw	a5,0(a5)
204028bc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204028c0:	fe042783          	lw	a5,-32(s0)
204028c4:	078a                	slli	a5,a5,0x2
204028c6:	873e                	mv	a4,a5
204028c8:	fe442783          	lw	a5,-28(s0)
204028cc:	97ba                	add	a5,a5,a4
204028ce:	439c                	lw	a5,0(a5)
204028d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204028d4:	a039                	j	204028e2 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204028d6:	0001                	nop
204028d8:	a031                	j	204028e4 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204028da:	0001                	nop
204028dc:	a021                	j	204028e4 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204028de:	0001                	nop
204028e0:	a011                	j	204028e4 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204028e2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204028e4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204028e8:	853e                	mv	a0,a5
204028ea:	50b2                	lw	ra,44(sp)
204028ec:	5422                	lw	s0,40(sp)
204028ee:	6145                	addi	sp,sp,48
204028f0:	8082                	ret

204028f2 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
204028f2:	7179                	addi	sp,sp,-48
204028f4:	d606                	sw	ra,44(sp)
204028f6:	d422                	sw	s0,40(sp)
204028f8:	1800                	addi	s0,sp,48
204028fa:	fca42e23          	sw	a0,-36(s0)
204028fe:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402902:	501020ef          	jal	ra,20405602 <metal_cpu_get_current_hartid>
20402906:	87aa                	mv	a5,a0
20402908:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
2040290c:	fec40793          	addi	a5,s0,-20
20402910:	863e                	mv	a2,a5
20402912:	4589                	li	a1,2
20402914:	fdc42503          	lw	a0,-36(s0)
20402918:	3555                	jal	204027bc <__metal_driver_riscv_clint0_command_request>
2040291a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
2040291c:	853e                	mv	a0,a5
2040291e:	50b2                	lw	ra,44(sp)
20402920:	5422                	lw	s0,40(sp)
20402922:	6145                	addi	sp,sp,48
20402924:	8082                	ret

20402926 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402926:	7179                	addi	sp,sp,-48
20402928:	d606                	sw	ra,44(sp)
2040292a:	d422                	sw	s0,40(sp)
2040292c:	1800                	addi	s0,sp,48
2040292e:	fca42e23          	sw	a0,-36(s0)
20402932:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402936:	4cd020ef          	jal	ra,20405602 <metal_cpu_get_current_hartid>
2040293a:	87aa                	mv	a5,a0
2040293c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402940:	fec40793          	addi	a5,s0,-20
20402944:	863e                	mv	a2,a5
20402946:	458d                	li	a1,3
20402948:	fdc42503          	lw	a0,-36(s0)
2040294c:	3d85                	jal	204027bc <__metal_driver_riscv_clint0_command_request>
2040294e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402950:	853e                	mv	a0,a5
20402952:	50b2                	lw	ra,44(sp)
20402954:	5422                	lw	s0,40(sp)
20402956:	6145                	addi	sp,sp,48
20402958:	8082                	ret

2040295a <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
2040295a:	1101                	addi	sp,sp,-32
2040295c:	ce22                	sw	s0,28(sp)
2040295e:	1000                	addi	s0,sp,32
20402960:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402964:	fec42703          	lw	a4,-20(s0)
20402968:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
2040296c:	00f71463          	bne	a4,a5,20402974 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402970:	4781                	li	a5,0
20402972:	a011                	j	20402976 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402974:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402976:	853e                	mv	a0,a5
20402978:	4472                	lw	s0,28(sp)
2040297a:	6105                	addi	sp,sp,32
2040297c:	8082                	ret

2040297e <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
2040297e:	1101                	addi	sp,sp,-32
20402980:	ce22                	sw	s0,28(sp)
20402982:	1000                	addi	s0,sp,32
20402984:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402988:	fec42703          	lw	a4,-20(s0)
2040298c:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402990:	00f71763          	bne	a4,a5,2040299e <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20402994:	000f47b7          	lui	a5,0xf4
20402998:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
2040299c:	a011                	j	204029a0 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
2040299e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
204029a0:	853e                	mv	a0,a5
204029a2:	4472                	lw	s0,28(sp)
204029a4:	6105                	addi	sp,sp,32
204029a6:	8082                	ret

204029a8 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204029a8:	1101                	addi	sp,sp,-32
204029aa:	ce22                	sw	s0,28(sp)
204029ac:	1000                	addi	s0,sp,32
204029ae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204029b2:	fec42703          	lw	a4,-20(s0)
204029b6:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204029ba:	00f71763          	bne	a4,a5,204029c8 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204029be:	800007b7          	lui	a5,0x80000
204029c2:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
204029c6:	a011                	j	204029ca <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
204029c8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
204029ca:	853e                	mv	a0,a5
204029cc:	4472                	lw	s0,28(sp)
204029ce:	6105                	addi	sp,sp,32
204029d0:	8082                	ret

204029d2 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
204029d2:	1101                	addi	sp,sp,-32
204029d4:	ce22                	sw	s0,28(sp)
204029d6:	1000                	addi	s0,sp,32
204029d8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
204029dc:	fec42783          	lw	a5,-20(s0)
204029e0:	00f04a63          	bgtz	a5,204029f4 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204029e4:	fec42703          	lw	a4,-20(s0)
204029e8:	070a                	slli	a4,a4,0x2
204029ea:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204029ee:	97ba                	add	a5,a5,a4
204029f0:	439c                	lw	a5,0(a5)
204029f2:	a011                	j	204029f6 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
204029f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
204029f6:	853e                	mv	a0,a5
204029f8:	4472                	lw	s0,28(sp)
204029fa:	6105                	addi	sp,sp,32
204029fc:	8082                	ret

204029fe <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
204029fe:	1101                	addi	sp,sp,-32
20402a00:	ce22                	sw	s0,28(sp)
20402a02:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402a04:	f14027f3          	csrr	a5,mhartid
20402a08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402a0c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402a10:	853e                	mv	a0,a5
20402a12:	4472                	lw	s0,28(sp)
20402a14:	6105                	addi	sp,sp,32
20402a16:	8082                	ret

20402a18 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402a18:	1101                	addi	sp,sp,-32
20402a1a:	ce22                	sw	s0,28(sp)
20402a1c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402a1e:	47a1                	li	a5,8
20402a20:	3007a7f3          	csrrs	a5,mstatus,a5
20402a24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402a28:	0001                	nop
20402a2a:	4472                	lw	s0,28(sp)
20402a2c:	6105                	addi	sp,sp,32
20402a2e:	8082                	ret

20402a30 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402a30:	1101                	addi	sp,sp,-32
20402a32:	ce22                	sw	s0,28(sp)
20402a34:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402a36:	47a1                	li	a5,8
20402a38:	3007b7f3          	csrrc	a5,mstatus,a5
20402a3c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402a40:	0001                	nop
20402a42:	4472                	lw	s0,28(sp)
20402a44:	6105                	addi	sp,sp,32
20402a46:	8082                	ret

20402a48 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
20402a48:	1101                	addi	sp,sp,-32
20402a4a:	ce22                	sw	s0,28(sp)
20402a4c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402a4e:	47a1                	li	a5,8
20402a50:	3047a7f3          	csrrs	a5,mie,a5
20402a54:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
20402a58:	0001                	nop
20402a5a:	4472                	lw	s0,28(sp)
20402a5c:	6105                	addi	sp,sp,32
20402a5e:	8082                	ret

20402a60 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402a60:	1101                	addi	sp,sp,-32
20402a62:	ce22                	sw	s0,28(sp)
20402a64:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402a66:	47a1                	li	a5,8
20402a68:	3047b7f3          	csrrc	a5,mie,a5
20402a6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402a70:	0001                	nop
20402a72:	4472                	lw	s0,28(sp)
20402a74:	6105                	addi	sp,sp,32
20402a76:	8082                	ret

20402a78 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402a78:	1101                	addi	sp,sp,-32
20402a7a:	ce22                	sw	s0,28(sp)
20402a7c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402a7e:	08000793          	li	a5,128
20402a82:	3047a7f3          	csrrs	a5,mie,a5
20402a86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402a8a:	0001                	nop
20402a8c:	4472                	lw	s0,28(sp)
20402a8e:	6105                	addi	sp,sp,32
20402a90:	8082                	ret

20402a92 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402a92:	1101                	addi	sp,sp,-32
20402a94:	ce22                	sw	s0,28(sp)
20402a96:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402a98:	08000793          	li	a5,128
20402a9c:	3047b7f3          	csrrc	a5,mie,a5
20402aa0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402aa4:	0001                	nop
20402aa6:	4472                	lw	s0,28(sp)
20402aa8:	6105                	addi	sp,sp,32
20402aaa:	8082                	ret

20402aac <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402aac:	1101                	addi	sp,sp,-32
20402aae:	ce22                	sw	s0,28(sp)
20402ab0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402ab2:	6785                	lui	a5,0x1
20402ab4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402ab8:	3047a7f3          	csrrs	a5,mie,a5
20402abc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402ac0:	0001                	nop
20402ac2:	4472                	lw	s0,28(sp)
20402ac4:	6105                	addi	sp,sp,32
20402ac6:	8082                	ret

20402ac8 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402ac8:	1101                	addi	sp,sp,-32
20402aca:	ce22                	sw	s0,28(sp)
20402acc:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402ace:	6785                	lui	a5,0x1
20402ad0:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402ad4:	3047b7f3          	csrrc	a5,mie,a5
20402ad8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402adc:	0001                	nop
20402ade:	4472                	lw	s0,28(sp)
20402ae0:	6105                	addi	sp,sp,32
20402ae2:	8082                	ret

20402ae4 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402ae4:	7179                	addi	sp,sp,-48
20402ae6:	d622                	sw	s0,44(sp)
20402ae8:	1800                	addi	s0,sp,48
20402aea:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402aee:	fdc42783          	lw	a5,-36(s0)
20402af2:	4705                	li	a4,1
20402af4:	00f717b3          	sll	a5,a4,a5
20402af8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402afc:	fec42783          	lw	a5,-20(s0)
20402b00:	3047a7f3          	csrrs	a5,mie,a5
20402b04:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402b08:	0001                	nop
20402b0a:	5432                	lw	s0,44(sp)
20402b0c:	6145                	addi	sp,sp,48
20402b0e:	8082                	ret

20402b10 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402b10:	7179                	addi	sp,sp,-48
20402b12:	d622                	sw	s0,44(sp)
20402b14:	1800                	addi	s0,sp,48
20402b16:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402b1a:	fdc42783          	lw	a5,-36(s0)
20402b1e:	4705                	li	a4,1
20402b20:	00f717b3          	sll	a5,a4,a5
20402b24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402b28:	fec42783          	lw	a5,-20(s0)
20402b2c:	3047b7f3          	csrrc	a5,mie,a5
20402b30:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402b34:	0001                	nop
20402b36:	5432                	lw	s0,44(sp)
20402b38:	6145                	addi	sp,sp,48
20402b3a:	8082                	ret

20402b3c <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402b3c:	1101                	addi	sp,sp,-32
20402b3e:	ce06                	sw	ra,28(sp)
20402b40:	cc22                	sw	s0,24(sp)
20402b42:	1000                	addi	s0,sp,32
20402b44:	fea42623          	sw	a0,-20(s0)
20402b48:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
20402b4c:	06400513          	li	a0,100
20402b50:	2cd020ef          	jal	ra,2040561c <metal_shutdown>

20402b54 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402b54:	1101                	addi	sp,sp,-32
20402b56:	ce06                	sw	ra,28(sp)
20402b58:	cc22                	sw	s0,24(sp)
20402b5a:	1000                	addi	s0,sp,32
20402b5c:	fea42623          	sw	a0,-20(s0)
20402b60:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402b64:	0c800513          	li	a0,200
20402b68:	2b5020ef          	jal	ra,2040561c <metal_shutdown>

20402b6c <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402b6c:	715d                	addi	sp,sp,-80
20402b6e:	c686                	sw	ra,76(sp)
20402b70:	c496                	sw	t0,72(sp)
20402b72:	c29a                	sw	t1,68(sp)
20402b74:	c09e                	sw	t2,64(sp)
20402b76:	de22                	sw	s0,60(sp)
20402b78:	dc2a                	sw	a0,56(sp)
20402b7a:	da2e                	sw	a1,52(sp)
20402b7c:	d832                	sw	a2,48(sp)
20402b7e:	d636                	sw	a3,44(sp)
20402b80:	d43a                	sw	a4,40(sp)
20402b82:	d23e                	sw	a5,36(sp)
20402b84:	d042                	sw	a6,32(sp)
20402b86:	ce46                	sw	a7,28(sp)
20402b88:	cc72                	sw	t3,24(sp)
20402b8a:	ca76                	sw	t4,20(sp)
20402b8c:	c87a                	sw	t5,16(sp)
20402b8e:	c67e                	sw	t6,12(sp)
20402b90:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402b92:	12c00513          	li	a0,300
20402b96:	287020ef          	jal	ra,2040561c <metal_shutdown>

20402b9a <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402b9a:	711d                	addi	sp,sp,-96
20402b9c:	ce86                	sw	ra,92(sp)
20402b9e:	cc96                	sw	t0,88(sp)
20402ba0:	ca9a                	sw	t1,84(sp)
20402ba2:	c89e                	sw	t2,80(sp)
20402ba4:	c6a2                	sw	s0,76(sp)
20402ba6:	c4aa                	sw	a0,72(sp)
20402ba8:	c2ae                	sw	a1,68(sp)
20402baa:	c0b2                	sw	a2,64(sp)
20402bac:	de36                	sw	a3,60(sp)
20402bae:	dc3a                	sw	a4,56(sp)
20402bb0:	da3e                	sw	a5,52(sp)
20402bb2:	d842                	sw	a6,48(sp)
20402bb4:	d646                	sw	a7,44(sp)
20402bb6:	d472                	sw	t3,40(sp)
20402bb8:	d276                	sw	t4,36(sp)
20402bba:	d07a                	sw	t5,32(sp)
20402bbc:	ce7e                	sw	t6,28(sp)
20402bbe:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402bc0:	3d3d                	jal	204029fe <__metal_myhart_id>
20402bc2:	872a                	mv	a4,a0
20402bc4:	070a                	slli	a4,a4,0x2
20402bc6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402bca:	97ba                	add	a5,a5,a4
20402bcc:	439c                	lw	a5,0(a5)
20402bce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402bd2:	fac42783          	lw	a5,-84(s0)
20402bd6:	c785                	beqz	a5,20402bfe <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402bd8:	fac42503          	lw	a0,-84(s0)
20402bdc:	33f1                	jal	204029a8 <__metal_driver_cpu_interrupt_controller>
20402bde:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402be2:	fa842783          	lw	a5,-88(s0)
20402be6:	0e07a783          	lw	a5,224(a5)
20402bea:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402bee:	fa842783          	lw	a5,-88(s0)
20402bf2:	0d87a783          	lw	a5,216(a5)
20402bf6:	fa442583          	lw	a1,-92(s0)
20402bfa:	450d                	li	a0,3
20402bfc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402bfe:	0001                	nop
20402c00:	40f6                	lw	ra,92(sp)
20402c02:	42e6                	lw	t0,88(sp)
20402c04:	4356                	lw	t1,84(sp)
20402c06:	43c6                	lw	t2,80(sp)
20402c08:	4436                	lw	s0,76(sp)
20402c0a:	4526                	lw	a0,72(sp)
20402c0c:	4596                	lw	a1,68(sp)
20402c0e:	4606                	lw	a2,64(sp)
20402c10:	56f2                	lw	a3,60(sp)
20402c12:	5762                	lw	a4,56(sp)
20402c14:	57d2                	lw	a5,52(sp)
20402c16:	5842                	lw	a6,48(sp)
20402c18:	58b2                	lw	a7,44(sp)
20402c1a:	5e22                	lw	t3,40(sp)
20402c1c:	5e92                	lw	t4,36(sp)
20402c1e:	5f02                	lw	t5,32(sp)
20402c20:	4ff2                	lw	t6,28(sp)
20402c22:	6125                	addi	sp,sp,96
20402c24:	30200073          	mret

20402c28 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402c28:	7179                	addi	sp,sp,-48
20402c2a:	d606                	sw	ra,44(sp)
20402c2c:	d422                	sw	s0,40(sp)
20402c2e:	1800                	addi	s0,sp,48
20402c30:	fca42e23          	sw	a0,-36(s0)
20402c34:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c38:	33d9                	jal	204029fe <__metal_myhart_id>
20402c3a:	872a                	mv	a4,a0
20402c3c:	070a                	slli	a4,a4,0x2
20402c3e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c42:	97ba                	add	a5,a5,a4
20402c44:	439c                	lw	a5,0(a5)
20402c46:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402c4a:	342027f3          	csrr	a5,mcause
20402c4e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402c52:	fec42783          	lw	a5,-20(s0)
20402c56:	c795                	beqz	a5,20402c82 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c58:	fec42503          	lw	a0,-20(s0)
20402c5c:	33b1                	jal	204029a8 <__metal_driver_cpu_interrupt_controller>
20402c5e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402c62:	fe842783          	lw	a5,-24(s0)
20402c66:	3ff7f793          	andi	a5,a5,1023
20402c6a:	fe442703          	lw	a4,-28(s0)
20402c6e:	0e078793          	addi	a5,a5,224
20402c72:	078a                	slli	a5,a5,0x2
20402c74:	97ba                	add	a5,a5,a4
20402c76:	479c                	lw	a5,8(a5)
20402c78:	fdc42583          	lw	a1,-36(s0)
20402c7c:	fec42503          	lw	a0,-20(s0)
20402c80:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402c82:	0001                	nop
20402c84:	50b2                	lw	ra,44(sp)
20402c86:	5422                	lw	s0,40(sp)
20402c88:	6145                	addi	sp,sp,48
20402c8a:	8082                	ret

20402c8c <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402c8c:	711d                	addi	sp,sp,-96
20402c8e:	ce86                	sw	ra,92(sp)
20402c90:	cc96                	sw	t0,88(sp)
20402c92:	ca9a                	sw	t1,84(sp)
20402c94:	c89e                	sw	t2,80(sp)
20402c96:	c6a2                	sw	s0,76(sp)
20402c98:	c4aa                	sw	a0,72(sp)
20402c9a:	c2ae                	sw	a1,68(sp)
20402c9c:	c0b2                	sw	a2,64(sp)
20402c9e:	de36                	sw	a3,60(sp)
20402ca0:	dc3a                	sw	a4,56(sp)
20402ca2:	da3e                	sw	a5,52(sp)
20402ca4:	d842                	sw	a6,48(sp)
20402ca6:	d646                	sw	a7,44(sp)
20402ca8:	d472                	sw	t3,40(sp)
20402caa:	d276                	sw	t4,36(sp)
20402cac:	d07a                	sw	t5,32(sp)
20402cae:	ce7e                	sw	t6,28(sp)
20402cb0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402cb2:	33b1                	jal	204029fe <__metal_myhart_id>
20402cb4:	872a                	mv	a4,a0
20402cb6:	070a                	slli	a4,a4,0x2
20402cb8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402cbc:	97ba                	add	a5,a5,a4
20402cbe:	439c                	lw	a5,0(a5)
20402cc0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402cc4:	fac42783          	lw	a5,-84(s0)
20402cc8:	c785                	beqz	a5,20402cf0 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cca:	fac42503          	lw	a0,-84(s0)
20402cce:	39e9                	jal	204029a8 <__metal_driver_cpu_interrupt_controller>
20402cd0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402cd4:	fa842783          	lw	a5,-88(s0)
20402cd8:	1407a783          	lw	a5,320(a5)
20402cdc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402ce0:	fa842783          	lw	a5,-88(s0)
20402ce4:	1387a783          	lw	a5,312(a5)
20402ce8:	fa442583          	lw	a1,-92(s0)
20402cec:	451d                	li	a0,7
20402cee:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402cf0:	0001                	nop
20402cf2:	40f6                	lw	ra,92(sp)
20402cf4:	42e6                	lw	t0,88(sp)
20402cf6:	4356                	lw	t1,84(sp)
20402cf8:	43c6                	lw	t2,80(sp)
20402cfa:	4436                	lw	s0,76(sp)
20402cfc:	4526                	lw	a0,72(sp)
20402cfe:	4596                	lw	a1,68(sp)
20402d00:	4606                	lw	a2,64(sp)
20402d02:	56f2                	lw	a3,60(sp)
20402d04:	5762                	lw	a4,56(sp)
20402d06:	57d2                	lw	a5,52(sp)
20402d08:	5842                	lw	a6,48(sp)
20402d0a:	58b2                	lw	a7,44(sp)
20402d0c:	5e22                	lw	t3,40(sp)
20402d0e:	5e92                	lw	t4,36(sp)
20402d10:	5f02                	lw	t5,32(sp)
20402d12:	4ff2                	lw	t6,28(sp)
20402d14:	6125                	addi	sp,sp,96
20402d16:	30200073          	mret

20402d1a <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402d1a:	7179                	addi	sp,sp,-48
20402d1c:	d606                	sw	ra,44(sp)
20402d1e:	d422                	sw	s0,40(sp)
20402d20:	1800                	addi	s0,sp,48
20402d22:	fca42e23          	sw	a0,-36(s0)
20402d26:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402d2a:	39d1                	jal	204029fe <__metal_myhart_id>
20402d2c:	87aa                	mv	a5,a0
20402d2e:	853e                	mv	a0,a5
20402d30:	314d                	jal	204029d2 <__metal_driver_cpu_get>
20402d32:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402d36:	fec42503          	lw	a0,-20(s0)
20402d3a:	134010ef          	jal	ra,20403e6e <__metal_driver_cpu_mtime_get>
20402d3e:	fea42023          	sw	a0,-32(s0)
20402d42:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402d46:	fe042783          	lw	a5,-32(s0)
20402d4a:	fe442803          	lw	a6,-28(s0)
20402d4e:	45a9                	li	a1,10
20402d50:	4601                	li	a2,0
20402d52:	00b786b3          	add	a3,a5,a1
20402d56:	8536                	mv	a0,a3
20402d58:	00f53533          	sltu	a0,a0,a5
20402d5c:	00c80733          	add	a4,a6,a2
20402d60:	00e507b3          	add	a5,a0,a4
20402d64:	873e                	mv	a4,a5
20402d66:	87b6                	mv	a5,a3
20402d68:	883a                	mv	a6,a4
20402d6a:	85be                	mv	a1,a5
20402d6c:	8642                	mv	a2,a6
20402d6e:	fec42503          	lw	a0,-20(s0)
20402d72:	162010ef          	jal	ra,20403ed4 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402d76:	0001                	nop
20402d78:	50b2                	lw	ra,44(sp)
20402d7a:	5422                	lw	s0,40(sp)
20402d7c:	6145                	addi	sp,sp,48
20402d7e:	8082                	ret

20402d80 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402d80:	7119                	addi	sp,sp,-128
20402d82:	de86                	sw	ra,124(sp)
20402d84:	dc96                	sw	t0,120(sp)
20402d86:	da9a                	sw	t1,116(sp)
20402d88:	d89e                	sw	t2,112(sp)
20402d8a:	d6a2                	sw	s0,108(sp)
20402d8c:	d4aa                	sw	a0,104(sp)
20402d8e:	d2ae                	sw	a1,100(sp)
20402d90:	d0b2                	sw	a2,96(sp)
20402d92:	ceb6                	sw	a3,92(sp)
20402d94:	ccba                	sw	a4,88(sp)
20402d96:	cabe                	sw	a5,84(sp)
20402d98:	c8c2                	sw	a6,80(sp)
20402d9a:	c6c6                	sw	a7,76(sp)
20402d9c:	c4f2                	sw	t3,72(sp)
20402d9e:	c2f6                	sw	t4,68(sp)
20402da0:	c0fa                	sw	t5,64(sp)
20402da2:	de7e                	sw	t6,60(sp)
20402da4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402da6:	39a1                	jal	204029fe <__metal_myhart_id>
20402da8:	872a                	mv	a4,a0
20402daa:	070a                	slli	a4,a4,0x2
20402dac:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402db0:	97ba                	add	a5,a5,a4
20402db2:	439c                	lw	a5,0(a5)
20402db4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402db8:	342027f3          	csrr	a5,mcause
20402dbc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402dc0:	341027f3          	csrr	a5,mepc
20402dc4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402dc8:	343027f3          	csrr	a5,mtval
20402dcc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402dd0:	305027f3          	csrr	a5,mtvec
20402dd4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402dd8:	fac42783          	lw	a5,-84(s0)
20402ddc:	c7e9                	beqz	a5,20402ea6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dde:	fac42503          	lw	a0,-84(s0)
20402de2:	bc7ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20402de6:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402dea:	fa842783          	lw	a5,-88(s0)
20402dee:	3ff7f793          	andi	a5,a5,1023
20402df2:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402df6:	fa842783          	lw	a5,-88(s0)
20402dfa:	0807d863          	bgez	a5,20402e8a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402dfe:	f9442703          	lw	a4,-108(s0)
20402e02:	47ad                	li	a5,11
20402e04:	00e7d763          	bge	a5,a4,20402e12 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402e08:	f9c42783          	lw	a5,-100(s0)
20402e0c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402e10:	ef9d                	bnez	a5,20402e4e <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402e12:	f9842683          	lw	a3,-104(s0)
20402e16:	f9442703          	lw	a4,-108(s0)
20402e1a:	87ba                	mv	a5,a4
20402e1c:	0786                	slli	a5,a5,0x1
20402e1e:	97ba                	add	a5,a5,a4
20402e20:	078e                	slli	a5,a5,0x3
20402e22:	97b6                	add	a5,a5,a3
20402e24:	0987a783          	lw	a5,152(a5)
20402e28:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402e2c:	f9842683          	lw	a3,-104(s0)
20402e30:	f9442703          	lw	a4,-108(s0)
20402e34:	87ba                	mv	a5,a4
20402e36:	0786                	slli	a5,a5,0x1
20402e38:	97ba                	add	a5,a5,a4
20402e3a:	078e                	slli	a5,a5,0x3
20402e3c:	97b6                	add	a5,a5,a3
20402e3e:	0907a783          	lw	a5,144(a5)
20402e42:	f8c42583          	lw	a1,-116(s0)
20402e46:	f9442503          	lw	a0,-108(s0)
20402e4a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402e4c:	a8a9                	j	20402ea6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402e4e:	f9c42783          	lw	a5,-100(s0)
20402e52:	03f7f713          	andi	a4,a5,63
20402e56:	4789                	li	a5,2
20402e58:	04f71763          	bne	a4,a5,20402ea6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402e5c:	307027f3          	csrr	a5,mtvt
20402e60:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402e64:	f9842783          	lw	a5,-104(s0)
20402e68:	0dc7a783          	lw	a5,220(a5)
20402e6c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402e70:	f9042783          	lw	a5,-112(s0)
20402e74:	439c                	lw	a5,0(a5)
20402e76:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402e7a:	f8842783          	lw	a5,-120(s0)
20402e7e:	f8c42583          	lw	a1,-116(s0)
20402e82:	f9442503          	lw	a0,-108(s0)
20402e86:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402e88:	a839                	j	20402ea6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402e8a:	f9842703          	lw	a4,-104(s0)
20402e8e:	f9442783          	lw	a5,-108(s0)
20402e92:	0e078793          	addi	a5,a5,224
20402e96:	078a                	slli	a5,a5,0x2
20402e98:	97ba                	add	a5,a5,a4
20402e9a:	479c                	lw	a5,8(a5)
20402e9c:	f9442583          	lw	a1,-108(s0)
20402ea0:	fac42503          	lw	a0,-84(s0)
20402ea4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402ea6:	50f6                	lw	ra,124(sp)
20402ea8:	52e6                	lw	t0,120(sp)
20402eaa:	5356                	lw	t1,116(sp)
20402eac:	53c6                	lw	t2,112(sp)
20402eae:	5436                	lw	s0,108(sp)
20402eb0:	5526                	lw	a0,104(sp)
20402eb2:	5596                	lw	a1,100(sp)
20402eb4:	5606                	lw	a2,96(sp)
20402eb6:	46f6                	lw	a3,92(sp)
20402eb8:	4766                	lw	a4,88(sp)
20402eba:	47d6                	lw	a5,84(sp)
20402ebc:	4846                	lw	a6,80(sp)
20402ebe:	48b6                	lw	a7,76(sp)
20402ec0:	4e26                	lw	t3,72(sp)
20402ec2:	4e96                	lw	t4,68(sp)
20402ec4:	4f06                	lw	t5,64(sp)
20402ec6:	5ff2                	lw	t6,60(sp)
20402ec8:	6109                	addi	sp,sp,128
20402eca:	30200073          	mret
	...

20402ef4 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402ef4:	711d                	addi	sp,sp,-96
20402ef6:	ce86                	sw	ra,92(sp)
20402ef8:	cc96                	sw	t0,88(sp)
20402efa:	ca9a                	sw	t1,84(sp)
20402efc:	c89e                	sw	t2,80(sp)
20402efe:	c6a2                	sw	s0,76(sp)
20402f00:	c4aa                	sw	a0,72(sp)
20402f02:	c2ae                	sw	a1,68(sp)
20402f04:	c0b2                	sw	a2,64(sp)
20402f06:	de36                	sw	a3,60(sp)
20402f08:	dc3a                	sw	a4,56(sp)
20402f0a:	da3e                	sw	a5,52(sp)
20402f0c:	d842                	sw	a6,48(sp)
20402f0e:	d646                	sw	a7,44(sp)
20402f10:	d472                	sw	t3,40(sp)
20402f12:	d276                	sw	t4,36(sp)
20402f14:	d07a                	sw	t5,32(sp)
20402f16:	ce7e                	sw	t6,28(sp)
20402f18:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f1a:	ae5ff0ef          	jal	ra,204029fe <__metal_myhart_id>
20402f1e:	872a                	mv	a4,a0
20402f20:	070a                	slli	a4,a4,0x2
20402f22:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f26:	97ba                	add	a5,a5,a4
20402f28:	439c                	lw	a5,0(a5)
20402f2a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402f2e:	fac42783          	lw	a5,-84(s0)
20402f32:	c78d                	beqz	a5,20402f5c <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f34:	fac42503          	lw	a0,-84(s0)
20402f38:	a71ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20402f3c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402f40:	fa842783          	lw	a5,-88(s0)
20402f44:	2187a783          	lw	a5,536(a5)
20402f48:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402f4c:	fa842783          	lw	a5,-88(s0)
20402f50:	2107a783          	lw	a5,528(a5)
20402f54:	fa442583          	lw	a1,-92(s0)
20402f58:	4541                	li	a0,16
20402f5a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402f5c:	0001                	nop
20402f5e:	40f6                	lw	ra,92(sp)
20402f60:	42e6                	lw	t0,88(sp)
20402f62:	4356                	lw	t1,84(sp)
20402f64:	43c6                	lw	t2,80(sp)
20402f66:	4436                	lw	s0,76(sp)
20402f68:	4526                	lw	a0,72(sp)
20402f6a:	4596                	lw	a1,68(sp)
20402f6c:	4606                	lw	a2,64(sp)
20402f6e:	56f2                	lw	a3,60(sp)
20402f70:	5762                	lw	a4,56(sp)
20402f72:	57d2                	lw	a5,52(sp)
20402f74:	5842                	lw	a6,48(sp)
20402f76:	58b2                	lw	a7,44(sp)
20402f78:	5e22                	lw	t3,40(sp)
20402f7a:	5e92                	lw	t4,36(sp)
20402f7c:	5f02                	lw	t5,32(sp)
20402f7e:	4ff2                	lw	t6,28(sp)
20402f80:	6125                	addi	sp,sp,96
20402f82:	30200073          	mret

20402f86 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402f86:	711d                	addi	sp,sp,-96
20402f88:	ce86                	sw	ra,92(sp)
20402f8a:	cc96                	sw	t0,88(sp)
20402f8c:	ca9a                	sw	t1,84(sp)
20402f8e:	c89e                	sw	t2,80(sp)
20402f90:	c6a2                	sw	s0,76(sp)
20402f92:	c4aa                	sw	a0,72(sp)
20402f94:	c2ae                	sw	a1,68(sp)
20402f96:	c0b2                	sw	a2,64(sp)
20402f98:	de36                	sw	a3,60(sp)
20402f9a:	dc3a                	sw	a4,56(sp)
20402f9c:	da3e                	sw	a5,52(sp)
20402f9e:	d842                	sw	a6,48(sp)
20402fa0:	d646                	sw	a7,44(sp)
20402fa2:	d472                	sw	t3,40(sp)
20402fa4:	d276                	sw	t4,36(sp)
20402fa6:	d07a                	sw	t5,32(sp)
20402fa8:	ce7e                	sw	t6,28(sp)
20402faa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fac:	a53ff0ef          	jal	ra,204029fe <__metal_myhart_id>
20402fb0:	872a                	mv	a4,a0
20402fb2:	070a                	slli	a4,a4,0x2
20402fb4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402fb8:	97ba                	add	a5,a5,a4
20402fba:	439c                	lw	a5,0(a5)
20402fbc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402fc0:	fac42783          	lw	a5,-84(s0)
20402fc4:	c78d                	beqz	a5,20402fee <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fc6:	fac42503          	lw	a0,-84(s0)
20402fca:	9dfff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20402fce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402fd2:	fa842783          	lw	a5,-88(s0)
20402fd6:	2307a783          	lw	a5,560(a5)
20402fda:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402fde:	fa842783          	lw	a5,-88(s0)
20402fe2:	2287a783          	lw	a5,552(a5)
20402fe6:	fa442583          	lw	a1,-92(s0)
20402fea:	4545                	li	a0,17
20402fec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402fee:	0001                	nop
20402ff0:	40f6                	lw	ra,92(sp)
20402ff2:	42e6                	lw	t0,88(sp)
20402ff4:	4356                	lw	t1,84(sp)
20402ff6:	43c6                	lw	t2,80(sp)
20402ff8:	4436                	lw	s0,76(sp)
20402ffa:	4526                	lw	a0,72(sp)
20402ffc:	4596                	lw	a1,68(sp)
20402ffe:	4606                	lw	a2,64(sp)
20403000:	56f2                	lw	a3,60(sp)
20403002:	5762                	lw	a4,56(sp)
20403004:	57d2                	lw	a5,52(sp)
20403006:	5842                	lw	a6,48(sp)
20403008:	58b2                	lw	a7,44(sp)
2040300a:	5e22                	lw	t3,40(sp)
2040300c:	5e92                	lw	t4,36(sp)
2040300e:	5f02                	lw	t5,32(sp)
20403010:	4ff2                	lw	t6,28(sp)
20403012:	6125                	addi	sp,sp,96
20403014:	30200073          	mret

20403018 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20403018:	711d                	addi	sp,sp,-96
2040301a:	ce86                	sw	ra,92(sp)
2040301c:	cc96                	sw	t0,88(sp)
2040301e:	ca9a                	sw	t1,84(sp)
20403020:	c89e                	sw	t2,80(sp)
20403022:	c6a2                	sw	s0,76(sp)
20403024:	c4aa                	sw	a0,72(sp)
20403026:	c2ae                	sw	a1,68(sp)
20403028:	c0b2                	sw	a2,64(sp)
2040302a:	de36                	sw	a3,60(sp)
2040302c:	dc3a                	sw	a4,56(sp)
2040302e:	da3e                	sw	a5,52(sp)
20403030:	d842                	sw	a6,48(sp)
20403032:	d646                	sw	a7,44(sp)
20403034:	d472                	sw	t3,40(sp)
20403036:	d276                	sw	t4,36(sp)
20403038:	d07a                	sw	t5,32(sp)
2040303a:	ce7e                	sw	t6,28(sp)
2040303c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040303e:	9c1ff0ef          	jal	ra,204029fe <__metal_myhart_id>
20403042:	872a                	mv	a4,a0
20403044:	070a                	slli	a4,a4,0x2
20403046:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040304a:	97ba                	add	a5,a5,a4
2040304c:	439c                	lw	a5,0(a5)
2040304e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20403052:	fac42783          	lw	a5,-84(s0)
20403056:	c78d                	beqz	a5,20403080 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403058:	fac42503          	lw	a0,-84(s0)
2040305c:	94dff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403060:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20403064:	fa842783          	lw	a5,-88(s0)
20403068:	2487a783          	lw	a5,584(a5)
2040306c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20403070:	fa842783          	lw	a5,-88(s0)
20403074:	2407a783          	lw	a5,576(a5)
20403078:	fa442583          	lw	a1,-92(s0)
2040307c:	4549                	li	a0,18
2040307e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20403080:	0001                	nop
20403082:	40f6                	lw	ra,92(sp)
20403084:	42e6                	lw	t0,88(sp)
20403086:	4356                	lw	t1,84(sp)
20403088:	43c6                	lw	t2,80(sp)
2040308a:	4436                	lw	s0,76(sp)
2040308c:	4526                	lw	a0,72(sp)
2040308e:	4596                	lw	a1,68(sp)
20403090:	4606                	lw	a2,64(sp)
20403092:	56f2                	lw	a3,60(sp)
20403094:	5762                	lw	a4,56(sp)
20403096:	57d2                	lw	a5,52(sp)
20403098:	5842                	lw	a6,48(sp)
2040309a:	58b2                	lw	a7,44(sp)
2040309c:	5e22                	lw	t3,40(sp)
2040309e:	5e92                	lw	t4,36(sp)
204030a0:	5f02                	lw	t5,32(sp)
204030a2:	4ff2                	lw	t6,28(sp)
204030a4:	6125                	addi	sp,sp,96
204030a6:	30200073          	mret

204030aa <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
204030aa:	711d                	addi	sp,sp,-96
204030ac:	ce86                	sw	ra,92(sp)
204030ae:	cc96                	sw	t0,88(sp)
204030b0:	ca9a                	sw	t1,84(sp)
204030b2:	c89e                	sw	t2,80(sp)
204030b4:	c6a2                	sw	s0,76(sp)
204030b6:	c4aa                	sw	a0,72(sp)
204030b8:	c2ae                	sw	a1,68(sp)
204030ba:	c0b2                	sw	a2,64(sp)
204030bc:	de36                	sw	a3,60(sp)
204030be:	dc3a                	sw	a4,56(sp)
204030c0:	da3e                	sw	a5,52(sp)
204030c2:	d842                	sw	a6,48(sp)
204030c4:	d646                	sw	a7,44(sp)
204030c6:	d472                	sw	t3,40(sp)
204030c8:	d276                	sw	t4,36(sp)
204030ca:	d07a                	sw	t5,32(sp)
204030cc:	ce7e                	sw	t6,28(sp)
204030ce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030d0:	92fff0ef          	jal	ra,204029fe <__metal_myhart_id>
204030d4:	872a                	mv	a4,a0
204030d6:	070a                	slli	a4,a4,0x2
204030d8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204030dc:	97ba                	add	a5,a5,a4
204030de:	439c                	lw	a5,0(a5)
204030e0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
204030e4:	fac42783          	lw	a5,-84(s0)
204030e8:	c78d                	beqz	a5,20403112 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030ea:	fac42503          	lw	a0,-84(s0)
204030ee:	8bbff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204030f2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
204030f6:	fa842783          	lw	a5,-88(s0)
204030fa:	2607a783          	lw	a5,608(a5)
204030fe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403102:	fa842783          	lw	a5,-88(s0)
20403106:	2587a783          	lw	a5,600(a5)
2040310a:	fa442583          	lw	a1,-92(s0)
2040310e:	454d                	li	a0,19
20403110:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403112:	0001                	nop
20403114:	40f6                	lw	ra,92(sp)
20403116:	42e6                	lw	t0,88(sp)
20403118:	4356                	lw	t1,84(sp)
2040311a:	43c6                	lw	t2,80(sp)
2040311c:	4436                	lw	s0,76(sp)
2040311e:	4526                	lw	a0,72(sp)
20403120:	4596                	lw	a1,68(sp)
20403122:	4606                	lw	a2,64(sp)
20403124:	56f2                	lw	a3,60(sp)
20403126:	5762                	lw	a4,56(sp)
20403128:	57d2                	lw	a5,52(sp)
2040312a:	5842                	lw	a6,48(sp)
2040312c:	58b2                	lw	a7,44(sp)
2040312e:	5e22                	lw	t3,40(sp)
20403130:	5e92                	lw	t4,36(sp)
20403132:	5f02                	lw	t5,32(sp)
20403134:	4ff2                	lw	t6,28(sp)
20403136:	6125                	addi	sp,sp,96
20403138:	30200073          	mret

2040313c <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2040313c:	711d                	addi	sp,sp,-96
2040313e:	ce86                	sw	ra,92(sp)
20403140:	cc96                	sw	t0,88(sp)
20403142:	ca9a                	sw	t1,84(sp)
20403144:	c89e                	sw	t2,80(sp)
20403146:	c6a2                	sw	s0,76(sp)
20403148:	c4aa                	sw	a0,72(sp)
2040314a:	c2ae                	sw	a1,68(sp)
2040314c:	c0b2                	sw	a2,64(sp)
2040314e:	de36                	sw	a3,60(sp)
20403150:	dc3a                	sw	a4,56(sp)
20403152:	da3e                	sw	a5,52(sp)
20403154:	d842                	sw	a6,48(sp)
20403156:	d646                	sw	a7,44(sp)
20403158:	d472                	sw	t3,40(sp)
2040315a:	d276                	sw	t4,36(sp)
2040315c:	d07a                	sw	t5,32(sp)
2040315e:	ce7e                	sw	t6,28(sp)
20403160:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403162:	89dff0ef          	jal	ra,204029fe <__metal_myhart_id>
20403166:	872a                	mv	a4,a0
20403168:	070a                	slli	a4,a4,0x2
2040316a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040316e:	97ba                	add	a5,a5,a4
20403170:	439c                	lw	a5,0(a5)
20403172:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20403176:	fac42783          	lw	a5,-84(s0)
2040317a:	c78d                	beqz	a5,204031a4 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040317c:	fac42503          	lw	a0,-84(s0)
20403180:	829ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403184:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20403188:	fa842783          	lw	a5,-88(s0)
2040318c:	2787a783          	lw	a5,632(a5)
20403190:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403194:	fa842783          	lw	a5,-88(s0)
20403198:	2707a783          	lw	a5,624(a5)
2040319c:	fa442583          	lw	a1,-92(s0)
204031a0:	4551                	li	a0,20
204031a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204031a4:	0001                	nop
204031a6:	40f6                	lw	ra,92(sp)
204031a8:	42e6                	lw	t0,88(sp)
204031aa:	4356                	lw	t1,84(sp)
204031ac:	43c6                	lw	t2,80(sp)
204031ae:	4436                	lw	s0,76(sp)
204031b0:	4526                	lw	a0,72(sp)
204031b2:	4596                	lw	a1,68(sp)
204031b4:	4606                	lw	a2,64(sp)
204031b6:	56f2                	lw	a3,60(sp)
204031b8:	5762                	lw	a4,56(sp)
204031ba:	57d2                	lw	a5,52(sp)
204031bc:	5842                	lw	a6,48(sp)
204031be:	58b2                	lw	a7,44(sp)
204031c0:	5e22                	lw	t3,40(sp)
204031c2:	5e92                	lw	t4,36(sp)
204031c4:	5f02                	lw	t5,32(sp)
204031c6:	4ff2                	lw	t6,28(sp)
204031c8:	6125                	addi	sp,sp,96
204031ca:	30200073          	mret

204031ce <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204031ce:	711d                	addi	sp,sp,-96
204031d0:	ce86                	sw	ra,92(sp)
204031d2:	cc96                	sw	t0,88(sp)
204031d4:	ca9a                	sw	t1,84(sp)
204031d6:	c89e                	sw	t2,80(sp)
204031d8:	c6a2                	sw	s0,76(sp)
204031da:	c4aa                	sw	a0,72(sp)
204031dc:	c2ae                	sw	a1,68(sp)
204031de:	c0b2                	sw	a2,64(sp)
204031e0:	de36                	sw	a3,60(sp)
204031e2:	dc3a                	sw	a4,56(sp)
204031e4:	da3e                	sw	a5,52(sp)
204031e6:	d842                	sw	a6,48(sp)
204031e8:	d646                	sw	a7,44(sp)
204031ea:	d472                	sw	t3,40(sp)
204031ec:	d276                	sw	t4,36(sp)
204031ee:	d07a                	sw	t5,32(sp)
204031f0:	ce7e                	sw	t6,28(sp)
204031f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031f4:	80bff0ef          	jal	ra,204029fe <__metal_myhart_id>
204031f8:	872a                	mv	a4,a0
204031fa:	070a                	slli	a4,a4,0x2
204031fc:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403200:	97ba                	add	a5,a5,a4
20403202:	439c                	lw	a5,0(a5)
20403204:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20403208:	fac42783          	lw	a5,-84(s0)
2040320c:	c78d                	beqz	a5,20403236 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040320e:	fac42503          	lw	a0,-84(s0)
20403212:	f96ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403216:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040321a:	fa842783          	lw	a5,-88(s0)
2040321e:	2907a783          	lw	a5,656(a5)
20403222:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20403226:	fa842783          	lw	a5,-88(s0)
2040322a:	2887a783          	lw	a5,648(a5)
2040322e:	fa442583          	lw	a1,-92(s0)
20403232:	4555                	li	a0,21
20403234:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20403236:	0001                	nop
20403238:	40f6                	lw	ra,92(sp)
2040323a:	42e6                	lw	t0,88(sp)
2040323c:	4356                	lw	t1,84(sp)
2040323e:	43c6                	lw	t2,80(sp)
20403240:	4436                	lw	s0,76(sp)
20403242:	4526                	lw	a0,72(sp)
20403244:	4596                	lw	a1,68(sp)
20403246:	4606                	lw	a2,64(sp)
20403248:	56f2                	lw	a3,60(sp)
2040324a:	5762                	lw	a4,56(sp)
2040324c:	57d2                	lw	a5,52(sp)
2040324e:	5842                	lw	a6,48(sp)
20403250:	58b2                	lw	a7,44(sp)
20403252:	5e22                	lw	t3,40(sp)
20403254:	5e92                	lw	t4,36(sp)
20403256:	5f02                	lw	t5,32(sp)
20403258:	4ff2                	lw	t6,28(sp)
2040325a:	6125                	addi	sp,sp,96
2040325c:	30200073          	mret

20403260 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20403260:	711d                	addi	sp,sp,-96
20403262:	ce86                	sw	ra,92(sp)
20403264:	cc96                	sw	t0,88(sp)
20403266:	ca9a                	sw	t1,84(sp)
20403268:	c89e                	sw	t2,80(sp)
2040326a:	c6a2                	sw	s0,76(sp)
2040326c:	c4aa                	sw	a0,72(sp)
2040326e:	c2ae                	sw	a1,68(sp)
20403270:	c0b2                	sw	a2,64(sp)
20403272:	de36                	sw	a3,60(sp)
20403274:	dc3a                	sw	a4,56(sp)
20403276:	da3e                	sw	a5,52(sp)
20403278:	d842                	sw	a6,48(sp)
2040327a:	d646                	sw	a7,44(sp)
2040327c:	d472                	sw	t3,40(sp)
2040327e:	d276                	sw	t4,36(sp)
20403280:	d07a                	sw	t5,32(sp)
20403282:	ce7e                	sw	t6,28(sp)
20403284:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403286:	f78ff0ef          	jal	ra,204029fe <__metal_myhart_id>
2040328a:	872a                	mv	a4,a0
2040328c:	070a                	slli	a4,a4,0x2
2040328e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403292:	97ba                	add	a5,a5,a4
20403294:	439c                	lw	a5,0(a5)
20403296:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040329a:	fac42783          	lw	a5,-84(s0)
2040329e:	c78d                	beqz	a5,204032c8 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032a0:	fac42503          	lw	a0,-84(s0)
204032a4:	f04ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204032a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204032ac:	fa842783          	lw	a5,-88(s0)
204032b0:	2a87a783          	lw	a5,680(a5)
204032b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204032b8:	fa842783          	lw	a5,-88(s0)
204032bc:	2a07a783          	lw	a5,672(a5)
204032c0:	fa442583          	lw	a1,-92(s0)
204032c4:	4559                	li	a0,22
204032c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204032c8:	0001                	nop
204032ca:	40f6                	lw	ra,92(sp)
204032cc:	42e6                	lw	t0,88(sp)
204032ce:	4356                	lw	t1,84(sp)
204032d0:	43c6                	lw	t2,80(sp)
204032d2:	4436                	lw	s0,76(sp)
204032d4:	4526                	lw	a0,72(sp)
204032d6:	4596                	lw	a1,68(sp)
204032d8:	4606                	lw	a2,64(sp)
204032da:	56f2                	lw	a3,60(sp)
204032dc:	5762                	lw	a4,56(sp)
204032de:	57d2                	lw	a5,52(sp)
204032e0:	5842                	lw	a6,48(sp)
204032e2:	58b2                	lw	a7,44(sp)
204032e4:	5e22                	lw	t3,40(sp)
204032e6:	5e92                	lw	t4,36(sp)
204032e8:	5f02                	lw	t5,32(sp)
204032ea:	4ff2                	lw	t6,28(sp)
204032ec:	6125                	addi	sp,sp,96
204032ee:	30200073          	mret

204032f2 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
204032f2:	711d                	addi	sp,sp,-96
204032f4:	ce86                	sw	ra,92(sp)
204032f6:	cc96                	sw	t0,88(sp)
204032f8:	ca9a                	sw	t1,84(sp)
204032fa:	c89e                	sw	t2,80(sp)
204032fc:	c6a2                	sw	s0,76(sp)
204032fe:	c4aa                	sw	a0,72(sp)
20403300:	c2ae                	sw	a1,68(sp)
20403302:	c0b2                	sw	a2,64(sp)
20403304:	de36                	sw	a3,60(sp)
20403306:	dc3a                	sw	a4,56(sp)
20403308:	da3e                	sw	a5,52(sp)
2040330a:	d842                	sw	a6,48(sp)
2040330c:	d646                	sw	a7,44(sp)
2040330e:	d472                	sw	t3,40(sp)
20403310:	d276                	sw	t4,36(sp)
20403312:	d07a                	sw	t5,32(sp)
20403314:	ce7e                	sw	t6,28(sp)
20403316:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403318:	ee6ff0ef          	jal	ra,204029fe <__metal_myhart_id>
2040331c:	872a                	mv	a4,a0
2040331e:	070a                	slli	a4,a4,0x2
20403320:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403324:	97ba                	add	a5,a5,a4
20403326:	439c                	lw	a5,0(a5)
20403328:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040332c:	fac42783          	lw	a5,-84(s0)
20403330:	c78d                	beqz	a5,2040335a <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403332:	fac42503          	lw	a0,-84(s0)
20403336:	e72ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
2040333a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
2040333e:	fa842783          	lw	a5,-88(s0)
20403342:	2c07a783          	lw	a5,704(a5)
20403346:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040334a:	fa842783          	lw	a5,-88(s0)
2040334e:	2b87a783          	lw	a5,696(a5)
20403352:	fa442583          	lw	a1,-92(s0)
20403356:	455d                	li	a0,23
20403358:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040335a:	0001                	nop
2040335c:	40f6                	lw	ra,92(sp)
2040335e:	42e6                	lw	t0,88(sp)
20403360:	4356                	lw	t1,84(sp)
20403362:	43c6                	lw	t2,80(sp)
20403364:	4436                	lw	s0,76(sp)
20403366:	4526                	lw	a0,72(sp)
20403368:	4596                	lw	a1,68(sp)
2040336a:	4606                	lw	a2,64(sp)
2040336c:	56f2                	lw	a3,60(sp)
2040336e:	5762                	lw	a4,56(sp)
20403370:	57d2                	lw	a5,52(sp)
20403372:	5842                	lw	a6,48(sp)
20403374:	58b2                	lw	a7,44(sp)
20403376:	5e22                	lw	t3,40(sp)
20403378:	5e92                	lw	t4,36(sp)
2040337a:	5f02                	lw	t5,32(sp)
2040337c:	4ff2                	lw	t6,28(sp)
2040337e:	6125                	addi	sp,sp,96
20403380:	30200073          	mret

20403384 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403384:	711d                	addi	sp,sp,-96
20403386:	ce86                	sw	ra,92(sp)
20403388:	cc96                	sw	t0,88(sp)
2040338a:	ca9a                	sw	t1,84(sp)
2040338c:	c89e                	sw	t2,80(sp)
2040338e:	c6a2                	sw	s0,76(sp)
20403390:	c4aa                	sw	a0,72(sp)
20403392:	c2ae                	sw	a1,68(sp)
20403394:	c0b2                	sw	a2,64(sp)
20403396:	de36                	sw	a3,60(sp)
20403398:	dc3a                	sw	a4,56(sp)
2040339a:	da3e                	sw	a5,52(sp)
2040339c:	d842                	sw	a6,48(sp)
2040339e:	d646                	sw	a7,44(sp)
204033a0:	d472                	sw	t3,40(sp)
204033a2:	d276                	sw	t4,36(sp)
204033a4:	d07a                	sw	t5,32(sp)
204033a6:	ce7e                	sw	t6,28(sp)
204033a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033aa:	e54ff0ef          	jal	ra,204029fe <__metal_myhart_id>
204033ae:	872a                	mv	a4,a0
204033b0:	070a                	slli	a4,a4,0x2
204033b2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204033b6:	97ba                	add	a5,a5,a4
204033b8:	439c                	lw	a5,0(a5)
204033ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204033be:	fac42783          	lw	a5,-84(s0)
204033c2:	c78d                	beqz	a5,204033ec <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033c4:	fac42503          	lw	a0,-84(s0)
204033c8:	de0ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204033cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204033d0:	fa842783          	lw	a5,-88(s0)
204033d4:	2d87a783          	lw	a5,728(a5)
204033d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204033dc:	fa842783          	lw	a5,-88(s0)
204033e0:	2d07a783          	lw	a5,720(a5)
204033e4:	fa442583          	lw	a1,-92(s0)
204033e8:	4561                	li	a0,24
204033ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204033ec:	0001                	nop
204033ee:	40f6                	lw	ra,92(sp)
204033f0:	42e6                	lw	t0,88(sp)
204033f2:	4356                	lw	t1,84(sp)
204033f4:	43c6                	lw	t2,80(sp)
204033f6:	4436                	lw	s0,76(sp)
204033f8:	4526                	lw	a0,72(sp)
204033fa:	4596                	lw	a1,68(sp)
204033fc:	4606                	lw	a2,64(sp)
204033fe:	56f2                	lw	a3,60(sp)
20403400:	5762                	lw	a4,56(sp)
20403402:	57d2                	lw	a5,52(sp)
20403404:	5842                	lw	a6,48(sp)
20403406:	58b2                	lw	a7,44(sp)
20403408:	5e22                	lw	t3,40(sp)
2040340a:	5e92                	lw	t4,36(sp)
2040340c:	5f02                	lw	t5,32(sp)
2040340e:	4ff2                	lw	t6,28(sp)
20403410:	6125                	addi	sp,sp,96
20403412:	30200073          	mret

20403416 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403416:	711d                	addi	sp,sp,-96
20403418:	ce86                	sw	ra,92(sp)
2040341a:	cc96                	sw	t0,88(sp)
2040341c:	ca9a                	sw	t1,84(sp)
2040341e:	c89e                	sw	t2,80(sp)
20403420:	c6a2                	sw	s0,76(sp)
20403422:	c4aa                	sw	a0,72(sp)
20403424:	c2ae                	sw	a1,68(sp)
20403426:	c0b2                	sw	a2,64(sp)
20403428:	de36                	sw	a3,60(sp)
2040342a:	dc3a                	sw	a4,56(sp)
2040342c:	da3e                	sw	a5,52(sp)
2040342e:	d842                	sw	a6,48(sp)
20403430:	d646                	sw	a7,44(sp)
20403432:	d472                	sw	t3,40(sp)
20403434:	d276                	sw	t4,36(sp)
20403436:	d07a                	sw	t5,32(sp)
20403438:	ce7e                	sw	t6,28(sp)
2040343a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040343c:	dc2ff0ef          	jal	ra,204029fe <__metal_myhart_id>
20403440:	872a                	mv	a4,a0
20403442:	070a                	slli	a4,a4,0x2
20403444:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403448:	97ba                	add	a5,a5,a4
2040344a:	439c                	lw	a5,0(a5)
2040344c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403450:	fac42783          	lw	a5,-84(s0)
20403454:	c78d                	beqz	a5,2040347e <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403456:	fac42503          	lw	a0,-84(s0)
2040345a:	d4eff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
2040345e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403462:	fa842783          	lw	a5,-88(s0)
20403466:	2f07a783          	lw	a5,752(a5)
2040346a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
2040346e:	fa842783          	lw	a5,-88(s0)
20403472:	2e87a783          	lw	a5,744(a5)
20403476:	fa442583          	lw	a1,-92(s0)
2040347a:	4565                	li	a0,25
2040347c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
2040347e:	0001                	nop
20403480:	40f6                	lw	ra,92(sp)
20403482:	42e6                	lw	t0,88(sp)
20403484:	4356                	lw	t1,84(sp)
20403486:	43c6                	lw	t2,80(sp)
20403488:	4436                	lw	s0,76(sp)
2040348a:	4526                	lw	a0,72(sp)
2040348c:	4596                	lw	a1,68(sp)
2040348e:	4606                	lw	a2,64(sp)
20403490:	56f2                	lw	a3,60(sp)
20403492:	5762                	lw	a4,56(sp)
20403494:	57d2                	lw	a5,52(sp)
20403496:	5842                	lw	a6,48(sp)
20403498:	58b2                	lw	a7,44(sp)
2040349a:	5e22                	lw	t3,40(sp)
2040349c:	5e92                	lw	t4,36(sp)
2040349e:	5f02                	lw	t5,32(sp)
204034a0:	4ff2                	lw	t6,28(sp)
204034a2:	6125                	addi	sp,sp,96
204034a4:	30200073          	mret

204034a8 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204034a8:	711d                	addi	sp,sp,-96
204034aa:	ce86                	sw	ra,92(sp)
204034ac:	cc96                	sw	t0,88(sp)
204034ae:	ca9a                	sw	t1,84(sp)
204034b0:	c89e                	sw	t2,80(sp)
204034b2:	c6a2                	sw	s0,76(sp)
204034b4:	c4aa                	sw	a0,72(sp)
204034b6:	c2ae                	sw	a1,68(sp)
204034b8:	c0b2                	sw	a2,64(sp)
204034ba:	de36                	sw	a3,60(sp)
204034bc:	dc3a                	sw	a4,56(sp)
204034be:	da3e                	sw	a5,52(sp)
204034c0:	d842                	sw	a6,48(sp)
204034c2:	d646                	sw	a7,44(sp)
204034c4:	d472                	sw	t3,40(sp)
204034c6:	d276                	sw	t4,36(sp)
204034c8:	d07a                	sw	t5,32(sp)
204034ca:	ce7e                	sw	t6,28(sp)
204034cc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204034ce:	d30ff0ef          	jal	ra,204029fe <__metal_myhart_id>
204034d2:	872a                	mv	a4,a0
204034d4:	070a                	slli	a4,a4,0x2
204034d6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204034da:	97ba                	add	a5,a5,a4
204034dc:	439c                	lw	a5,0(a5)
204034de:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204034e2:	fac42783          	lw	a5,-84(s0)
204034e6:	c78d                	beqz	a5,20403510 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034e8:	fac42503          	lw	a0,-84(s0)
204034ec:	cbcff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204034f0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204034f4:	fa842783          	lw	a5,-88(s0)
204034f8:	3087a783          	lw	a5,776(a5)
204034fc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403500:	fa842783          	lw	a5,-88(s0)
20403504:	3007a783          	lw	a5,768(a5)
20403508:	fa442583          	lw	a1,-92(s0)
2040350c:	4569                	li	a0,26
2040350e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403510:	0001                	nop
20403512:	40f6                	lw	ra,92(sp)
20403514:	42e6                	lw	t0,88(sp)
20403516:	4356                	lw	t1,84(sp)
20403518:	43c6                	lw	t2,80(sp)
2040351a:	4436                	lw	s0,76(sp)
2040351c:	4526                	lw	a0,72(sp)
2040351e:	4596                	lw	a1,68(sp)
20403520:	4606                	lw	a2,64(sp)
20403522:	56f2                	lw	a3,60(sp)
20403524:	5762                	lw	a4,56(sp)
20403526:	57d2                	lw	a5,52(sp)
20403528:	5842                	lw	a6,48(sp)
2040352a:	58b2                	lw	a7,44(sp)
2040352c:	5e22                	lw	t3,40(sp)
2040352e:	5e92                	lw	t4,36(sp)
20403530:	5f02                	lw	t5,32(sp)
20403532:	4ff2                	lw	t6,28(sp)
20403534:	6125                	addi	sp,sp,96
20403536:	30200073          	mret

2040353a <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040353a:	711d                	addi	sp,sp,-96
2040353c:	ce86                	sw	ra,92(sp)
2040353e:	cc96                	sw	t0,88(sp)
20403540:	ca9a                	sw	t1,84(sp)
20403542:	c89e                	sw	t2,80(sp)
20403544:	c6a2                	sw	s0,76(sp)
20403546:	c4aa                	sw	a0,72(sp)
20403548:	c2ae                	sw	a1,68(sp)
2040354a:	c0b2                	sw	a2,64(sp)
2040354c:	de36                	sw	a3,60(sp)
2040354e:	dc3a                	sw	a4,56(sp)
20403550:	da3e                	sw	a5,52(sp)
20403552:	d842                	sw	a6,48(sp)
20403554:	d646                	sw	a7,44(sp)
20403556:	d472                	sw	t3,40(sp)
20403558:	d276                	sw	t4,36(sp)
2040355a:	d07a                	sw	t5,32(sp)
2040355c:	ce7e                	sw	t6,28(sp)
2040355e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403560:	c9eff0ef          	jal	ra,204029fe <__metal_myhart_id>
20403564:	872a                	mv	a4,a0
20403566:	070a                	slli	a4,a4,0x2
20403568:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040356c:	97ba                	add	a5,a5,a4
2040356e:	439c                	lw	a5,0(a5)
20403570:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403574:	fac42783          	lw	a5,-84(s0)
20403578:	c78d                	beqz	a5,204035a2 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040357a:	fac42503          	lw	a0,-84(s0)
2040357e:	c2aff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403582:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403586:	fa842783          	lw	a5,-88(s0)
2040358a:	3207a783          	lw	a5,800(a5)
2040358e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403592:	fa842783          	lw	a5,-88(s0)
20403596:	3187a783          	lw	a5,792(a5)
2040359a:	fa442583          	lw	a1,-92(s0)
2040359e:	456d                	li	a0,27
204035a0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204035a2:	0001                	nop
204035a4:	40f6                	lw	ra,92(sp)
204035a6:	42e6                	lw	t0,88(sp)
204035a8:	4356                	lw	t1,84(sp)
204035aa:	43c6                	lw	t2,80(sp)
204035ac:	4436                	lw	s0,76(sp)
204035ae:	4526                	lw	a0,72(sp)
204035b0:	4596                	lw	a1,68(sp)
204035b2:	4606                	lw	a2,64(sp)
204035b4:	56f2                	lw	a3,60(sp)
204035b6:	5762                	lw	a4,56(sp)
204035b8:	57d2                	lw	a5,52(sp)
204035ba:	5842                	lw	a6,48(sp)
204035bc:	58b2                	lw	a7,44(sp)
204035be:	5e22                	lw	t3,40(sp)
204035c0:	5e92                	lw	t4,36(sp)
204035c2:	5f02                	lw	t5,32(sp)
204035c4:	4ff2                	lw	t6,28(sp)
204035c6:	6125                	addi	sp,sp,96
204035c8:	30200073          	mret

204035cc <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204035cc:	711d                	addi	sp,sp,-96
204035ce:	ce86                	sw	ra,92(sp)
204035d0:	cc96                	sw	t0,88(sp)
204035d2:	ca9a                	sw	t1,84(sp)
204035d4:	c89e                	sw	t2,80(sp)
204035d6:	c6a2                	sw	s0,76(sp)
204035d8:	c4aa                	sw	a0,72(sp)
204035da:	c2ae                	sw	a1,68(sp)
204035dc:	c0b2                	sw	a2,64(sp)
204035de:	de36                	sw	a3,60(sp)
204035e0:	dc3a                	sw	a4,56(sp)
204035e2:	da3e                	sw	a5,52(sp)
204035e4:	d842                	sw	a6,48(sp)
204035e6:	d646                	sw	a7,44(sp)
204035e8:	d472                	sw	t3,40(sp)
204035ea:	d276                	sw	t4,36(sp)
204035ec:	d07a                	sw	t5,32(sp)
204035ee:	ce7e                	sw	t6,28(sp)
204035f0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204035f2:	c0cff0ef          	jal	ra,204029fe <__metal_myhart_id>
204035f6:	872a                	mv	a4,a0
204035f8:	070a                	slli	a4,a4,0x2
204035fa:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204035fe:	97ba                	add	a5,a5,a4
20403600:	439c                	lw	a5,0(a5)
20403602:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403606:	fac42783          	lw	a5,-84(s0)
2040360a:	c78d                	beqz	a5,20403634 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040360c:	fac42503          	lw	a0,-84(s0)
20403610:	b98ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403614:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403618:	fa842783          	lw	a5,-88(s0)
2040361c:	3387a783          	lw	a5,824(a5)
20403620:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403624:	fa842783          	lw	a5,-88(s0)
20403628:	3307a783          	lw	a5,816(a5)
2040362c:	fa442583          	lw	a1,-92(s0)
20403630:	4571                	li	a0,28
20403632:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403634:	0001                	nop
20403636:	40f6                	lw	ra,92(sp)
20403638:	42e6                	lw	t0,88(sp)
2040363a:	4356                	lw	t1,84(sp)
2040363c:	43c6                	lw	t2,80(sp)
2040363e:	4436                	lw	s0,76(sp)
20403640:	4526                	lw	a0,72(sp)
20403642:	4596                	lw	a1,68(sp)
20403644:	4606                	lw	a2,64(sp)
20403646:	56f2                	lw	a3,60(sp)
20403648:	5762                	lw	a4,56(sp)
2040364a:	57d2                	lw	a5,52(sp)
2040364c:	5842                	lw	a6,48(sp)
2040364e:	58b2                	lw	a7,44(sp)
20403650:	5e22                	lw	t3,40(sp)
20403652:	5e92                	lw	t4,36(sp)
20403654:	5f02                	lw	t5,32(sp)
20403656:	4ff2                	lw	t6,28(sp)
20403658:	6125                	addi	sp,sp,96
2040365a:	30200073          	mret

2040365e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
2040365e:	711d                	addi	sp,sp,-96
20403660:	ce86                	sw	ra,92(sp)
20403662:	cc96                	sw	t0,88(sp)
20403664:	ca9a                	sw	t1,84(sp)
20403666:	c89e                	sw	t2,80(sp)
20403668:	c6a2                	sw	s0,76(sp)
2040366a:	c4aa                	sw	a0,72(sp)
2040366c:	c2ae                	sw	a1,68(sp)
2040366e:	c0b2                	sw	a2,64(sp)
20403670:	de36                	sw	a3,60(sp)
20403672:	dc3a                	sw	a4,56(sp)
20403674:	da3e                	sw	a5,52(sp)
20403676:	d842                	sw	a6,48(sp)
20403678:	d646                	sw	a7,44(sp)
2040367a:	d472                	sw	t3,40(sp)
2040367c:	d276                	sw	t4,36(sp)
2040367e:	d07a                	sw	t5,32(sp)
20403680:	ce7e                	sw	t6,28(sp)
20403682:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403684:	b7aff0ef          	jal	ra,204029fe <__metal_myhart_id>
20403688:	872a                	mv	a4,a0
2040368a:	070a                	slli	a4,a4,0x2
2040368c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403690:	97ba                	add	a5,a5,a4
20403692:	439c                	lw	a5,0(a5)
20403694:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403698:	fac42783          	lw	a5,-84(s0)
2040369c:	c78d                	beqz	a5,204036c6 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040369e:	fac42503          	lw	a0,-84(s0)
204036a2:	b06ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204036a6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204036aa:	fa842783          	lw	a5,-88(s0)
204036ae:	3507a783          	lw	a5,848(a5)
204036b2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204036b6:	fa842783          	lw	a5,-88(s0)
204036ba:	3487a783          	lw	a5,840(a5)
204036be:	fa442583          	lw	a1,-92(s0)
204036c2:	4575                	li	a0,29
204036c4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204036c6:	0001                	nop
204036c8:	40f6                	lw	ra,92(sp)
204036ca:	42e6                	lw	t0,88(sp)
204036cc:	4356                	lw	t1,84(sp)
204036ce:	43c6                	lw	t2,80(sp)
204036d0:	4436                	lw	s0,76(sp)
204036d2:	4526                	lw	a0,72(sp)
204036d4:	4596                	lw	a1,68(sp)
204036d6:	4606                	lw	a2,64(sp)
204036d8:	56f2                	lw	a3,60(sp)
204036da:	5762                	lw	a4,56(sp)
204036dc:	57d2                	lw	a5,52(sp)
204036de:	5842                	lw	a6,48(sp)
204036e0:	58b2                	lw	a7,44(sp)
204036e2:	5e22                	lw	t3,40(sp)
204036e4:	5e92                	lw	t4,36(sp)
204036e6:	5f02                	lw	t5,32(sp)
204036e8:	4ff2                	lw	t6,28(sp)
204036ea:	6125                	addi	sp,sp,96
204036ec:	30200073          	mret

204036f0 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204036f0:	711d                	addi	sp,sp,-96
204036f2:	ce86                	sw	ra,92(sp)
204036f4:	cc96                	sw	t0,88(sp)
204036f6:	ca9a                	sw	t1,84(sp)
204036f8:	c89e                	sw	t2,80(sp)
204036fa:	c6a2                	sw	s0,76(sp)
204036fc:	c4aa                	sw	a0,72(sp)
204036fe:	c2ae                	sw	a1,68(sp)
20403700:	c0b2                	sw	a2,64(sp)
20403702:	de36                	sw	a3,60(sp)
20403704:	dc3a                	sw	a4,56(sp)
20403706:	da3e                	sw	a5,52(sp)
20403708:	d842                	sw	a6,48(sp)
2040370a:	d646                	sw	a7,44(sp)
2040370c:	d472                	sw	t3,40(sp)
2040370e:	d276                	sw	t4,36(sp)
20403710:	d07a                	sw	t5,32(sp)
20403712:	ce7e                	sw	t6,28(sp)
20403714:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403716:	ae8ff0ef          	jal	ra,204029fe <__metal_myhart_id>
2040371a:	872a                	mv	a4,a0
2040371c:	070a                	slli	a4,a4,0x2
2040371e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403722:	97ba                	add	a5,a5,a4
20403724:	439c                	lw	a5,0(a5)
20403726:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040372a:	fac42783          	lw	a5,-84(s0)
2040372e:	c78d                	beqz	a5,20403758 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403730:	fac42503          	lw	a0,-84(s0)
20403734:	a74ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403738:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040373c:	fa842783          	lw	a5,-88(s0)
20403740:	3687a783          	lw	a5,872(a5)
20403744:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403748:	fa842783          	lw	a5,-88(s0)
2040374c:	3607a783          	lw	a5,864(a5)
20403750:	fa442583          	lw	a1,-92(s0)
20403754:	4579                	li	a0,30
20403756:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403758:	0001                	nop
2040375a:	40f6                	lw	ra,92(sp)
2040375c:	42e6                	lw	t0,88(sp)
2040375e:	4356                	lw	t1,84(sp)
20403760:	43c6                	lw	t2,80(sp)
20403762:	4436                	lw	s0,76(sp)
20403764:	4526                	lw	a0,72(sp)
20403766:	4596                	lw	a1,68(sp)
20403768:	4606                	lw	a2,64(sp)
2040376a:	56f2                	lw	a3,60(sp)
2040376c:	5762                	lw	a4,56(sp)
2040376e:	57d2                	lw	a5,52(sp)
20403770:	5842                	lw	a6,48(sp)
20403772:	58b2                	lw	a7,44(sp)
20403774:	5e22                	lw	t3,40(sp)
20403776:	5e92                	lw	t4,36(sp)
20403778:	5f02                	lw	t5,32(sp)
2040377a:	4ff2                	lw	t6,28(sp)
2040377c:	6125                	addi	sp,sp,96
2040377e:	30200073          	mret

20403782 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403782:	711d                	addi	sp,sp,-96
20403784:	ce86                	sw	ra,92(sp)
20403786:	cc96                	sw	t0,88(sp)
20403788:	ca9a                	sw	t1,84(sp)
2040378a:	c89e                	sw	t2,80(sp)
2040378c:	c6a2                	sw	s0,76(sp)
2040378e:	c4aa                	sw	a0,72(sp)
20403790:	c2ae                	sw	a1,68(sp)
20403792:	c0b2                	sw	a2,64(sp)
20403794:	de36                	sw	a3,60(sp)
20403796:	dc3a                	sw	a4,56(sp)
20403798:	da3e                	sw	a5,52(sp)
2040379a:	d842                	sw	a6,48(sp)
2040379c:	d646                	sw	a7,44(sp)
2040379e:	d472                	sw	t3,40(sp)
204037a0:	d276                	sw	t4,36(sp)
204037a2:	d07a                	sw	t5,32(sp)
204037a4:	ce7e                	sw	t6,28(sp)
204037a6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204037a8:	a56ff0ef          	jal	ra,204029fe <__metal_myhart_id>
204037ac:	872a                	mv	a4,a0
204037ae:	070a                	slli	a4,a4,0x2
204037b0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204037b4:	97ba                	add	a5,a5,a4
204037b6:	439c                	lw	a5,0(a5)
204037b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204037bc:	fac42783          	lw	a5,-84(s0)
204037c0:	c78d                	beqz	a5,204037ea <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204037c2:	fac42503          	lw	a0,-84(s0)
204037c6:	9e2ff0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204037ca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204037ce:	fa842783          	lw	a5,-88(s0)
204037d2:	3807a783          	lw	a5,896(a5)
204037d6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204037da:	fa842783          	lw	a5,-88(s0)
204037de:	3787a783          	lw	a5,888(a5)
204037e2:	fa442583          	lw	a1,-92(s0)
204037e6:	457d                	li	a0,31
204037e8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204037ea:	0001                	nop
204037ec:	40f6                	lw	ra,92(sp)
204037ee:	42e6                	lw	t0,88(sp)
204037f0:	4356                	lw	t1,84(sp)
204037f2:	43c6                	lw	t2,80(sp)
204037f4:	4436                	lw	s0,76(sp)
204037f6:	4526                	lw	a0,72(sp)
204037f8:	4596                	lw	a1,68(sp)
204037fa:	4606                	lw	a2,64(sp)
204037fc:	56f2                	lw	a3,60(sp)
204037fe:	5762                	lw	a4,56(sp)
20403800:	57d2                	lw	a5,52(sp)
20403802:	5842                	lw	a6,48(sp)
20403804:	58b2                	lw	a7,44(sp)
20403806:	5e22                	lw	t3,40(sp)
20403808:	5e92                	lw	t4,36(sp)
2040380a:	5f02                	lw	t5,32(sp)
2040380c:	4ff2                	lw	t6,28(sp)
2040380e:	6125                	addi	sp,sp,96
20403810:	30200073          	mret

20403814 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403814:	1101                	addi	sp,sp,-32
20403816:	ce22                	sw	s0,28(sp)
20403818:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040381a:	305027f3          	csrr	a5,mtvec
2040381e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403822:	fec42783          	lw	a5,-20(s0)
20403826:	03f7f793          	andi	a5,a5,63
2040382a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040382e:	fec42703          	lw	a4,-20(s0)
20403832:	4789                	li	a5,2
20403834:	00f70d63          	beq	a4,a5,2040384e <__metal_controller_interrupt_vector_mode+0x3a>
20403838:	fec42703          	lw	a4,-20(s0)
2040383c:	478d                	li	a5,3
2040383e:	00f70a63          	beq	a4,a5,20403852 <__metal_controller_interrupt_vector_mode+0x3e>
20403842:	fec42703          	lw	a4,-20(s0)
20403846:	4785                	li	a5,1
20403848:	00f70763          	beq	a4,a5,20403856 <__metal_controller_interrupt_vector_mode+0x42>
2040384c:	a039                	j	2040385a <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040384e:	478d                	li	a5,3
20403850:	a031                	j	2040385c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403852:	4791                	li	a5,4
20403854:	a021                	j	2040385c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403856:	4785                	li	a5,1
20403858:	a011                	j	2040385c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040385a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040385c:	853e                	mv	a0,a5
2040385e:	4472                	lw	s0,28(sp)
20403860:	6105                	addi	sp,sp,32
20403862:	8082                	ret

20403864 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403864:	7179                	addi	sp,sp,-48
20403866:	d622                	sw	s0,44(sp)
20403868:	1800                	addi	s0,sp,48
2040386a:	fca42e23          	sw	a0,-36(s0)
2040386e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403872:	305027f3          	csrr	a5,mtvec
20403876:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040387a:	fec42783          	lw	a5,-20(s0)
2040387e:	fc07f793          	andi	a5,a5,-64
20403882:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403886:	fd842783          	lw	a5,-40(s0)
2040388a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040388e:	fdc42703          	lw	a4,-36(s0)
20403892:	4791                	li	a5,4
20403894:	06e7e063          	bltu	a5,a4,204038f4 <__metal_controller_interrupt_vector+0x90>
20403898:	fdc42783          	lw	a5,-36(s0)
2040389c:	00279713          	slli	a4,a5,0x2
204038a0:	204067b7          	lui	a5,0x20406
204038a4:	9cc78793          	addi	a5,a5,-1588 # 204059cc <__metal_driver_vtable_riscv_clint0+0x4c>
204038a8:	97ba                	add	a5,a5,a4
204038aa:	439c                	lw	a5,0(a5)
204038ac:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204038ae:	fe842783          	lw	a5,-24(s0)
204038b2:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204038b6:	fec42783          	lw	a5,-20(s0)
204038ba:	0027e793          	ori	a5,a5,2
204038be:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204038c2:	a80d                	j	204038f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204038c4:	fe842783          	lw	a5,-24(s0)
204038c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204038cc:	fec42783          	lw	a5,-20(s0)
204038d0:	0037e793          	ori	a5,a5,3
204038d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204038d8:	a831                	j	204038f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204038da:	fe842783          	lw	a5,-24(s0)
204038de:	0017e793          	ori	a5,a5,1
204038e2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204038e6:	a039                	j	204038f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204038e8:	fe842783          	lw	a5,-24(s0)
204038ec:	9bf1                	andi	a5,a5,-4
204038ee:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204038f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204038f4:	0001                	nop
204038f6:	5432                	lw	s0,44(sp)
204038f8:	6145                	addi	sp,sp,48
204038fa:	8082                	ret

204038fc <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204038fc:	1101                	addi	sp,sp,-32
204038fe:	ce22                	sw	s0,28(sp)
20403900:	1000                	addi	s0,sp,32
20403902:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403906:	fec42783          	lw	a5,-20(s0)
2040390a:	17f5                	addi	a5,a5,-3
2040390c:	4771                	li	a4,28
2040390e:	00f76d63          	bltu	a4,a5,20403928 <__metal_valid_interrupt_id+0x2c>
20403912:	00279713          	slli	a4,a5,0x2
20403916:	204067b7          	lui	a5,0x20406
2040391a:	9e078793          	addi	a5,a5,-1568 # 204059e0 <__metal_driver_vtable_riscv_clint0+0x60>
2040391e:	97ba                	add	a5,a5,a4
20403920:	439c                	lw	a5,0(a5)
20403922:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403924:	4785                	li	a5,1
20403926:	a019                	j	2040392c <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403928:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040392a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040392c:	853e                	mv	a0,a5
2040392e:	4472                	lw	s0,28(sp)
20403930:	6105                	addi	sp,sp,32
20403932:	8082                	ret

20403934 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403934:	7179                	addi	sp,sp,-48
20403936:	d606                	sw	ra,44(sp)
20403938:	d422                	sw	s0,40(sp)
2040393a:	1800                	addi	s0,sp,48
2040393c:	fca42e23          	sw	a0,-36(s0)
20403940:	fcb42c23          	sw	a1,-40(s0)
20403944:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403948:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040394c:	fdc42783          	lw	a5,-36(s0)
20403950:	e399                	bnez	a5,20403956 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403952:	57fd                	li	a5,-1
20403954:	a849                	j	204039e6 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403956:	fd842703          	lw	a4,-40(s0)
2040395a:	47fd                	li	a5,31
2040395c:	08e7e063          	bltu	a5,a4,204039dc <__metal_local_interrupt_enable+0xa8>
20403960:	fd842783          	lw	a5,-40(s0)
20403964:	00279713          	slli	a4,a5,0x2
20403968:	204067b7          	lui	a5,0x20406
2040396c:	a5478793          	addi	a5,a5,-1452 # 20405a54 <__metal_driver_vtable_riscv_clint0+0xd4>
20403970:	97ba                	add	a5,a5,a4
20403972:	439c                	lw	a5,0(a5)
20403974:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403976:	fd442783          	lw	a5,-44(s0)
2040397a:	c781                	beqz	a5,20403982 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040397c:	89cff0ef          	jal	ra,20402a18 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403980:	a08d                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403982:	8aeff0ef          	jal	ra,20402a30 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403986:	a8b1                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403988:	fd442783          	lw	a5,-44(s0)
2040398c:	c781                	beqz	a5,20403994 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040398e:	8baff0ef          	jal	ra,20402a48 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403992:	a881                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403994:	8ccff0ef          	jal	ra,20402a60 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403998:	a0a9                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040399a:	fd442783          	lw	a5,-44(s0)
2040399e:	c781                	beqz	a5,204039a6 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204039a0:	8d8ff0ef          	jal	ra,20402a78 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204039a4:	a83d                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204039a6:	8ecff0ef          	jal	ra,20402a92 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204039aa:	a825                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204039ac:	fd442783          	lw	a5,-44(s0)
204039b0:	c781                	beqz	a5,204039b8 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204039b2:	8faff0ef          	jal	ra,20402aac <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204039b6:	a035                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204039b8:	910ff0ef          	jal	ra,20402ac8 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204039bc:	a01d                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204039be:	fd442783          	lw	a5,-44(s0)
204039c2:	c799                	beqz	a5,204039d0 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204039c4:	fd842783          	lw	a5,-40(s0)
204039c8:	853e                	mv	a0,a5
204039ca:	91aff0ef          	jal	ra,20402ae4 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204039ce:	a811                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204039d0:	fd842783          	lw	a5,-40(s0)
204039d4:	853e                	mv	a0,a5
204039d6:	93aff0ef          	jal	ra,20402b10 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204039da:	a021                	j	204039e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204039dc:	57fd                	li	a5,-1
204039de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204039e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204039e6:	853e                	mv	a0,a5
204039e8:	50b2                	lw	ra,44(sp)
204039ea:	5422                	lw	s0,40(sp)
204039ec:	6145                	addi	sp,sp,48
204039ee:	8082                	ret

204039f0 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204039f0:	7179                	addi	sp,sp,-48
204039f2:	d622                	sw	s0,44(sp)
204039f4:	1800                	addi	s0,sp,48
204039f6:	fca42e23          	sw	a0,-36(s0)
204039fa:	fcb42c23          	sw	a1,-40(s0)
204039fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403a02:	fdc42783          	lw	a5,-36(s0)
20403a06:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403a0a:	fd842703          	lw	a4,-40(s0)
20403a0e:	47ad                	li	a5,11
20403a10:	02e7c263          	blt	a5,a4,20403a34 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403a14:	fd442783          	lw	a5,-44(s0)
20403a18:	cf91                	beqz	a5,20403a34 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
20403a1a:	fec42703          	lw	a4,-20(s0)
20403a1e:	fd842783          	lw	a5,-40(s0)
20403a22:	0e078793          	addi	a5,a5,224
20403a26:	078a                	slli	a5,a5,0x2
20403a28:	97ba                	add	a5,a5,a4
20403a2a:	fd442703          	lw	a4,-44(s0)
20403a2e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403a30:	4781                	li	a5,0
20403a32:	a011                	j	20403a36 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403a34:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403a36:	853e                	mv	a0,a5
20403a38:	5432                	lw	s0,44(sp)
20403a3a:	6145                	addi	sp,sp,48
20403a3c:	8082                	ret

20403a3e <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20403a3e:	7139                	addi	sp,sp,-64
20403a40:	de06                	sw	ra,60(sp)
20403a42:	dc22                	sw	s0,56(sp)
20403a44:	0080                	addi	s0,sp,64
20403a46:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403a4a:	fcc42783          	lw	a5,-52(s0)
20403a4e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403a52:	fe442783          	lw	a5,-28(s0)
20403a56:	43dc                	lw	a5,4(a5)
20403a58:	10079d63          	bnez	a5,20403b72 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
20403a5c:	57fd                	li	a5,-1
20403a5e:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403a62:	57fd                	li	a5,-1
20403a64:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403a68:	301027f3          	csrr	a5,misa
20403a6c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403a70:	fe042703          	lw	a4,-32(s0)
20403a74:	6789                	lui	a5,0x2
20403a76:	8ff9                	and	a5,a5,a4
20403a78:	e799                	bnez	a5,20403a86 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
20403a7a:	fe042703          	lw	a4,-32(s0)
20403a7e:	000407b7          	lui	a5,0x40
20403a82:	8ff9                	and	a5,a5,a4
20403a84:	c799                	beqz	a5,20403a92 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403a86:	57fd                	li	a5,-1
20403a88:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
20403a8c:	57fd                	li	a5,-1
20403a8e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403a92:	fe042703          	lw	a4,-32(s0)
20403a96:	000407b7          	lui	a5,0x40
20403a9a:	8ff9                	and	a5,a5,a4
20403a9c:	c781                	beqz	a5,20403aa4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20403a9e:	57fd                	li	a5,-1
20403aa0:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403aa4:	fe042623          	sw	zero,-20(s0)
20403aa8:	a0b9                	j	20403af6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20403aaa:	fe442683          	lw	a3,-28(s0)
20403aae:	fec42703          	lw	a4,-20(s0)
20403ab2:	87ba                	mv	a5,a4
20403ab4:	0786                	slli	a5,a5,0x1
20403ab6:	97ba                	add	a5,a5,a4
20403ab8:	078e                	slli	a5,a5,0x3
20403aba:	97b6                	add	a5,a5,a3
20403abc:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403ac0:	fe442683          	lw	a3,-28(s0)
20403ac4:	fec42703          	lw	a4,-20(s0)
20403ac8:	87ba                	mv	a5,a4
20403aca:	0786                	slli	a5,a5,0x1
20403acc:	97ba                	add	a5,a5,a4
20403ace:	078e                	slli	a5,a5,0x3
20403ad0:	97b6                	add	a5,a5,a3
20403ad2:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403ad6:	fe442683          	lw	a3,-28(s0)
20403ada:	fec42703          	lw	a4,-20(s0)
20403ade:	87ba                	mv	a5,a4
20403ae0:	0786                	slli	a5,a5,0x1
20403ae2:	97ba                	add	a5,a5,a4
20403ae4:	078e                	slli	a5,a5,0x3
20403ae6:	97b6                	add	a5,a5,a3
20403ae8:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403aec:	fec42783          	lw	a5,-20(s0)
20403af0:	0785                	addi	a5,a5,1
20403af2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403af6:	fec42703          	lw	a4,-20(s0)
20403afa:	47fd                	li	a5,31
20403afc:	fae7d7e3          	bge	a5,a4,20403aaa <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403b00:	fe042423          	sw	zero,-24(s0)
20403b04:	a01d                	j	20403b2a <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403b06:	fe442703          	lw	a4,-28(s0)
20403b0a:	fe842783          	lw	a5,-24(s0)
20403b0e:	0e078793          	addi	a5,a5,224
20403b12:	078a                	slli	a5,a5,0x2
20403b14:	97ba                	add	a5,a5,a4
20403b16:	20403737          	lui	a4,0x20403
20403b1a:	b3c70713          	addi	a4,a4,-1220 # 20402b3c <__metal_default_exception_handler>
20403b1e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403b20:	fe842783          	lw	a5,-24(s0)
20403b24:	0785                	addi	a5,a5,1
20403b26:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403b2a:	fe842703          	lw	a4,-24(s0)
20403b2e:	47ad                	li	a5,11
20403b30:	fce7dbe3          	bge	a5,a4,20403b06 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403b34:	204037b7          	lui	a5,0x20403
20403b38:	d8078593          	addi	a1,a5,-640 # 20402d80 <__metal_exception_handler>
20403b3c:	4501                	li	a0,0
20403b3e:	331d                	jal	20403864 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403b40:	301027f3          	csrr	a5,misa
20403b44:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403b48:	fdc42703          	lw	a4,-36(s0)
20403b4c:	67c1                	lui	a5,0x10
20403b4e:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403b52:	8ff9                	and	a5,a5,a4
20403b54:	cb99                	beqz	a5,20403b6a <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403b56:	300027f3          	csrr	a5,mstatus
20403b5a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403b5e:	fdc42703          	lw	a4,-36(s0)
20403b62:	6789                	lui	a5,0x2
20403b64:	8fd9                	or	a5,a5,a4
20403b66:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403b6a:	fe442783          	lw	a5,-28(s0)
20403b6e:	4705                	li	a4,1
20403b70:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403b72:	0001                	nop
20403b74:	50f2                	lw	ra,60(sp)
20403b76:	5462                	lw	s0,56(sp)
20403b78:	6121                	addi	sp,sp,64
20403b7a:	8082                	ret

20403b7c <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20403b7c:	7179                	addi	sp,sp,-48
20403b7e:	d606                	sw	ra,44(sp)
20403b80:	d422                	sw	s0,40(sp)
20403b82:	1800                	addi	s0,sp,48
20403b84:	fca42e23          	sw	a0,-36(s0)
20403b88:	fcb42c23          	sw	a1,-40(s0)
20403b8c:	fcc42a23          	sw	a2,-44(s0)
20403b90:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403b94:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403b98:	fdc42783          	lw	a5,-36(s0)
20403b9c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403ba0:	fd842503          	lw	a0,-40(s0)
20403ba4:	3ba1                	jal	204038fc <__metal_valid_interrupt_id>
20403ba6:	87aa                	mv	a5,a0
20403ba8:	e399                	bnez	a5,20403bae <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20403baa:	57d5                	li	a5,-11
20403bac:	aa11                	j	20403cc0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403bae:	fd442783          	lw	a5,-44(s0)
20403bb2:	cf85                	beqz	a5,20403bea <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403bb4:	fe842683          	lw	a3,-24(s0)
20403bb8:	fd842703          	lw	a4,-40(s0)
20403bbc:	87ba                	mv	a5,a4
20403bbe:	0786                	slli	a5,a5,0x1
20403bc0:	97ba                	add	a5,a5,a4
20403bc2:	078e                	slli	a5,a5,0x3
20403bc4:	97b6                	add	a5,a5,a3
20403bc6:	fd442703          	lw	a4,-44(s0)
20403bca:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403bce:	fe842683          	lw	a3,-24(s0)
20403bd2:	fd842703          	lw	a4,-40(s0)
20403bd6:	87ba                	mv	a5,a4
20403bd8:	0786                	slli	a5,a5,0x1
20403bda:	97ba                	add	a5,a5,a4
20403bdc:	078e                	slli	a5,a5,0x3
20403bde:	97b6                	add	a5,a5,a3
20403be0:	fd042703          	lw	a4,-48(s0)
20403be4:	08e7ac23          	sw	a4,152(a5)
20403be8:	a8d1                	j	20403cbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20403bea:	fd842783          	lw	a5,-40(s0)
20403bee:	17f5                	addi	a5,a5,-3
20403bf0:	4771                	li	a4,28
20403bf2:	0cf76263          	bltu	a4,a5,20403cb6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403bf6:	00279713          	slli	a4,a5,0x2
20403bfa:	204067b7          	lui	a5,0x20406
20403bfe:	ad478793          	addi	a5,a5,-1324 # 20405ad4 <__metal_driver_vtable_riscv_clint0+0x154>
20403c02:	97ba                	add	a5,a5,a4
20403c04:	439c                	lw	a5,0(a5)
20403c06:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403c08:	fe842683          	lw	a3,-24(s0)
20403c0c:	fd842703          	lw	a4,-40(s0)
20403c10:	87ba                	mv	a5,a4
20403c12:	0786                	slli	a5,a5,0x1
20403c14:	97ba                	add	a5,a5,a4
20403c16:	078e                	slli	a5,a5,0x3
20403c18:	97b6                	add	a5,a5,a3
20403c1a:	20403737          	lui	a4,0x20403
20403c1e:	c2870713          	addi	a4,a4,-984 # 20402c28 <__metal_default_sw_handler>
20403c22:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403c26:	fe842683          	lw	a3,-24(s0)
20403c2a:	fd842703          	lw	a4,-40(s0)
20403c2e:	87ba                	mv	a5,a4
20403c30:	0786                	slli	a5,a5,0x1
20403c32:	97ba                	add	a5,a5,a4
20403c34:	078e                	slli	a5,a5,0x3
20403c36:	97b6                	add	a5,a5,a3
20403c38:	fd042703          	lw	a4,-48(s0)
20403c3c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403c40:	a8b5                	j	20403cbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403c42:	fe842683          	lw	a3,-24(s0)
20403c46:	fd842703          	lw	a4,-40(s0)
20403c4a:	87ba                	mv	a5,a4
20403c4c:	0786                	slli	a5,a5,0x1
20403c4e:	97ba                	add	a5,a5,a4
20403c50:	078e                	slli	a5,a5,0x3
20403c52:	97b6                	add	a5,a5,a3
20403c54:	20403737          	lui	a4,0x20403
20403c58:	d1a70713          	addi	a4,a4,-742 # 20402d1a <__metal_default_timer_handler>
20403c5c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403c60:	fe842683          	lw	a3,-24(s0)
20403c64:	fd842703          	lw	a4,-40(s0)
20403c68:	87ba                	mv	a5,a4
20403c6a:	0786                	slli	a5,a5,0x1
20403c6c:	97ba                	add	a5,a5,a4
20403c6e:	078e                	slli	a5,a5,0x3
20403c70:	97b6                	add	a5,a5,a3
20403c72:	fd042703          	lw	a4,-48(s0)
20403c76:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403c7a:	a089                	j	20403cbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20403c7c:	fe842683          	lw	a3,-24(s0)
20403c80:	fd842703          	lw	a4,-40(s0)
20403c84:	87ba                	mv	a5,a4
20403c86:	0786                	slli	a5,a5,0x1
20403c88:	97ba                	add	a5,a5,a4
20403c8a:	078e                	slli	a5,a5,0x3
20403c8c:	97b6                	add	a5,a5,a3
20403c8e:	20403737          	lui	a4,0x20403
20403c92:	b5470713          	addi	a4,a4,-1196 # 20402b54 <__metal_default_interrupt_handler>
20403c96:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403c9a:	fe842683          	lw	a3,-24(s0)
20403c9e:	fd842703          	lw	a4,-40(s0)
20403ca2:	87ba                	mv	a5,a4
20403ca4:	0786                	slli	a5,a5,0x1
20403ca6:	97ba                	add	a5,a5,a4
20403ca8:	078e                	slli	a5,a5,0x3
20403caa:	97b6                	add	a5,a5,a3
20403cac:	fd042703          	lw	a4,-48(s0)
20403cb0:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403cb4:	a021                	j	20403cbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403cb6:	57d1                	li	a5,-12
20403cb8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403cbc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403cc0:	853e                	mv	a0,a5
20403cc2:	50b2                	lw	ra,44(sp)
20403cc4:	5422                	lw	s0,40(sp)
20403cc6:	6145                	addi	sp,sp,48
20403cc8:	8082                	ret

20403cca <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403cca:	1101                	addi	sp,sp,-32
20403ccc:	ce06                	sw	ra,28(sp)
20403cce:	cc22                	sw	s0,24(sp)
20403cd0:	1000                	addi	s0,sp,32
20403cd2:	fea42623          	sw	a0,-20(s0)
20403cd6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403cda:	fe842783          	lw	a5,-24(s0)
20403cde:	4605                	li	a2,1
20403ce0:	85be                	mv	a1,a5
20403ce2:	fec42503          	lw	a0,-20(s0)
20403ce6:	c4fff0ef          	jal	ra,20403934 <__metal_local_interrupt_enable>
20403cea:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403cec:	853e                	mv	a0,a5
20403cee:	40f2                	lw	ra,28(sp)
20403cf0:	4462                	lw	s0,24(sp)
20403cf2:	6105                	addi	sp,sp,32
20403cf4:	8082                	ret

20403cf6 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403cf6:	1101                	addi	sp,sp,-32
20403cf8:	ce06                	sw	ra,28(sp)
20403cfa:	cc22                	sw	s0,24(sp)
20403cfc:	1000                	addi	s0,sp,32
20403cfe:	fea42623          	sw	a0,-20(s0)
20403d02:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403d06:	fe842783          	lw	a5,-24(s0)
20403d0a:	4601                	li	a2,0
20403d0c:	85be                	mv	a1,a5
20403d0e:	fec42503          	lw	a0,-20(s0)
20403d12:	c23ff0ef          	jal	ra,20403934 <__metal_local_interrupt_enable>
20403d16:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403d18:	853e                	mv	a0,a5
20403d1a:	40f2                	lw	ra,28(sp)
20403d1c:	4462                	lw	s0,24(sp)
20403d1e:	6105                	addi	sp,sp,32
20403d20:	8082                	ret

20403d22 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403d22:	1101                	addi	sp,sp,-32
20403d24:	ce06                	sw	ra,28(sp)
20403d26:	cc22                	sw	s0,24(sp)
20403d28:	1000                	addi	s0,sp,32
20403d2a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403d2e:	ae7ff0ef          	jal	ra,20403814 <__metal_controller_interrupt_vector_mode>
20403d32:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403d34:	853e                	mv	a0,a5
20403d36:	40f2                	lw	ra,28(sp)
20403d38:	4462                	lw	s0,24(sp)
20403d3a:	6105                	addi	sp,sp,32
20403d3c:	8082                	ret

20403d3e <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403d3e:	7179                	addi	sp,sp,-48
20403d40:	d606                	sw	ra,44(sp)
20403d42:	d422                	sw	s0,40(sp)
20403d44:	1800                	addi	s0,sp,48
20403d46:	fca42e23          	sw	a0,-36(s0)
20403d4a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403d4e:	fdc42783          	lw	a5,-36(s0)
20403d52:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403d56:	fd842783          	lw	a5,-40(s0)
20403d5a:	eb99                	bnez	a5,20403d70 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403d5c:	204037b7          	lui	a5,0x20403
20403d60:	d8078593          	addi	a1,a5,-640 # 20402d80 <__metal_exception_handler>
20403d64:	fd842503          	lw	a0,-40(s0)
20403d68:	afdff0ef          	jal	ra,20403864 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403d6c:	4781                	li	a5,0
20403d6e:	a00d                	j	20403d90 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403d70:	fd842703          	lw	a4,-40(s0)
20403d74:	4785                	li	a5,1
20403d76:	00f71c63          	bne	a4,a5,20403d8e <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403d7a:	204057b7          	lui	a5,0x20405
20403d7e:	68078593          	addi	a1,a5,1664 # 20405680 <__metal_vector_table>
20403d82:	fd842503          	lw	a0,-40(s0)
20403d86:	adfff0ef          	jal	ra,20403864 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403d8a:	4781                	li	a5,0
20403d8c:	a011                	j	20403d90 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403d8e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403d90:	853e                	mv	a0,a5
20403d92:	50b2                	lw	ra,44(sp)
20403d94:	5422                	lw	s0,40(sp)
20403d96:	6145                	addi	sp,sp,48
20403d98:	8082                	ret

20403d9a <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403d9a:	1101                	addi	sp,sp,-32
20403d9c:	ce22                	sw	s0,28(sp)
20403d9e:	1000                	addi	s0,sp,32
20403da0:	fea42623          	sw	a0,-20(s0)
20403da4:	feb42423          	sw	a1,-24(s0)
20403da8:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403dac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403dae:	853e                	mv	a0,a5
20403db0:	4472                	lw	s0,28(sp)
20403db2:	6105                	addi	sp,sp,32
20403db4:	8082                	ret

20403db6 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403db6:	7139                	addi	sp,sp,-64
20403db8:	de22                	sw	s0,60(sp)
20403dba:	0080                	addi	s0,sp,64
20403dbc:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403dc0:	4301                	li	t1,0
20403dc2:	4381                	li	t2,0
20403dc4:	fe642423          	sw	t1,-24(s0)
20403dc8:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403dcc:	b8002573          	csrr	a0,mcycleh
20403dd0:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403dd4:	b0002573          	csrr	a0,mcycle
20403dd8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403ddc:	b8002573          	csrr	a0,mcycleh
20403de0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403de4:	fe442883          	lw	a7,-28(s0)
20403de8:	fdc42503          	lw	a0,-36(s0)
20403dec:	02a89563          	bne	a7,a0,20403e16 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403df0:	fe442503          	lw	a0,-28(s0)
20403df4:	85aa                	mv	a1,a0
20403df6:	4601                	li	a2,0
20403df8:	00059813          	slli	a6,a1,0x0
20403dfc:	4781                	li	a5,0
20403dfe:	fe042603          	lw	a2,-32(s0)
20403e02:	86b2                	mv	a3,a2
20403e04:	4701                	li	a4,0
20403e06:	00d7e633          	or	a2,a5,a3
20403e0a:	fec42423          	sw	a2,-24(s0)
20403e0e:	00e867b3          	or	a5,a6,a4
20403e12:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403e16:	fe842783          	lw	a5,-24(s0)
20403e1a:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403e1e:	853e                	mv	a0,a5
20403e20:	85c2                	mv	a1,a6
20403e22:	5472                	lw	s0,60(sp)
20403e24:	6121                	addi	sp,sp,64
20403e26:	8082                	ret

20403e28 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403e28:	7179                	addi	sp,sp,-48
20403e2a:	d606                	sw	ra,44(sp)
20403e2c:	d422                	sw	s0,40(sp)
20403e2e:	d24a                	sw	s2,36(sp)
20403e30:	d04e                	sw	s3,32(sp)
20403e32:	1800                	addi	s0,sp,48
20403e34:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403e38:	fdc42783          	lw	a5,-36(s0)
20403e3c:	e781                	bnez	a5,20403e44 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403e3e:	4901                	li	s2,0
20403e40:	4981                	li	s3,0
20403e42:	a821                	j	20403e5a <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403e44:	fdc42503          	lw	a0,-36(s0)
20403e48:	b37fe0ef          	jal	ra,2040297e <__metal_driver_cpu_timebase>
20403e4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403e50:	fec42783          	lw	a5,-20(s0)
20403e54:	893e                	mv	s2,a5
20403e56:	87fd                	srai	a5,a5,0x1f
20403e58:	89be                	mv	s3,a5
20403e5a:	87ca                	mv	a5,s2
20403e5c:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403e5e:	853e                	mv	a0,a5
20403e60:	85c2                	mv	a1,a6
20403e62:	50b2                	lw	ra,44(sp)
20403e64:	5422                	lw	s0,40(sp)
20403e66:	5912                	lw	s2,36(sp)
20403e68:	5982                	lw	s3,32(sp)
20403e6a:	6145                	addi	sp,sp,48
20403e6c:	8082                	ret

20403e6e <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403e6e:	7179                	addi	sp,sp,-48
20403e70:	d606                	sw	ra,44(sp)
20403e72:	d422                	sw	s0,40(sp)
20403e74:	1800                	addi	s0,sp,48
20403e76:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403e7a:	4781                	li	a5,0
20403e7c:	4801                	li	a6,0
20403e7e:	fef42023          	sw	a5,-32(s0)
20403e82:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e86:	fdc42503          	lw	a0,-36(s0)
20403e8a:	b1ffe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403e8e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403e92:	fec42783          	lw	a5,-20(s0)
20403e96:	c78d                	beqz	a5,20403ec0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403e98:	fec42783          	lw	a5,-20(s0)
20403e9c:	13c7a783          	lw	a5,316(a5)
20403ea0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403ea4:	fe842783          	lw	a5,-24(s0)
20403ea8:	cf81                	beqz	a5,20403ec0 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403eaa:	fe842783          	lw	a5,-24(s0)
20403eae:	439c                	lw	a5,0(a5)
20403eb0:	43f8                	lw	a4,68(a5)
20403eb2:	fe040793          	addi	a5,s0,-32
20403eb6:	863e                	mv	a2,a5
20403eb8:	4585                	li	a1,1
20403eba:	fe842503          	lw	a0,-24(s0)
20403ebe:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403ec0:	fe042783          	lw	a5,-32(s0)
20403ec4:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403ec8:	853e                	mv	a0,a5
20403eca:	85c2                	mv	a1,a6
20403ecc:	50b2                	lw	ra,44(sp)
20403ece:	5422                	lw	s0,40(sp)
20403ed0:	6145                	addi	sp,sp,48
20403ed2:	8082                	ret

20403ed4 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403ed4:	7179                	addi	sp,sp,-48
20403ed6:	d606                	sw	ra,44(sp)
20403ed8:	d422                	sw	s0,40(sp)
20403eda:	d226                	sw	s1,36(sp)
20403edc:	1800                	addi	s0,sp,48
20403ede:	fca42e23          	sw	a0,-36(s0)
20403ee2:	fcb42823          	sw	a1,-48(s0)
20403ee6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403eea:	57fd                	li	a5,-1
20403eec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403ef0:	fdc42503          	lw	a0,-36(s0)
20403ef4:	ab5fe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403ef8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403efc:	fe842783          	lw	a5,-24(s0)
20403f00:	cf8d                	beqz	a5,20403f3a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403f02:	fe842783          	lw	a5,-24(s0)
20403f06:	13c7a783          	lw	a5,316(a5)
20403f0a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403f0e:	fe442783          	lw	a5,-28(s0)
20403f12:	c785                	beqz	a5,20403f3a <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403f14:	fe442783          	lw	a5,-28(s0)
20403f18:	439c                	lw	a5,0(a5)
20403f1a:	47a4                	lw	s1,72(a5)
20403f1c:	fdc42503          	lw	a0,-36(s0)
20403f20:	a3bfe0ef          	jal	ra,2040295a <__metal_driver_cpu_hartid>
20403f24:	87aa                	mv	a5,a0
20403f26:	fd042603          	lw	a2,-48(s0)
20403f2a:	fd442683          	lw	a3,-44(s0)
20403f2e:	85be                	mv	a1,a5
20403f30:	fe442503          	lw	a0,-28(s0)
20403f34:	9482                	jalr	s1
20403f36:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403f3a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403f3e:	853e                	mv	a0,a5
20403f40:	50b2                	lw	ra,44(sp)
20403f42:	5422                	lw	s0,40(sp)
20403f44:	5492                	lw	s1,36(sp)
20403f46:	6145                	addi	sp,sp,48
20403f48:	8082                	ret

20403f4a <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403f4a:	1101                	addi	sp,sp,-32
20403f4c:	ce22                	sw	s0,28(sp)
20403f4e:	1000                	addi	s0,sp,32
20403f50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403f54:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403f58:	853e                	mv	a0,a5
20403f5a:	4472                	lw	s0,28(sp)
20403f5c:	6105                	addi	sp,sp,32
20403f5e:	8082                	ret

20403f60 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403f60:	1101                	addi	sp,sp,-32
20403f62:	ce22                	sw	s0,28(sp)
20403f64:	1000                	addi	s0,sp,32
20403f66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403f6a:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403f6c:	853e                	mv	a0,a5
20403f6e:	4472                	lw	s0,28(sp)
20403f70:	6105                	addi	sp,sp,32
20403f72:	8082                	ret

20403f74 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403f74:	1101                	addi	sp,sp,-32
20403f76:	ce22                	sw	s0,28(sp)
20403f78:	1000                	addi	s0,sp,32
20403f7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403f7e:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403f82:	853e                	mv	a0,a5
20403f84:	4472                	lw	s0,28(sp)
20403f86:	6105                	addi	sp,sp,32
20403f88:	8082                	ret

20403f8a <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403f8a:	1101                	addi	sp,sp,-32
20403f8c:	ce22                	sw	s0,28(sp)
20403f8e:	1000                	addi	s0,sp,32
20403f90:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403f94:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403f96:	853e                	mv	a0,a5
20403f98:	4472                	lw	s0,28(sp)
20403f9a:	6105                	addi	sp,sp,32
20403f9c:	8082                	ret

20403f9e <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403f9e:	7179                	addi	sp,sp,-48
20403fa0:	d606                	sw	ra,44(sp)
20403fa2:	d422                	sw	s0,40(sp)
20403fa4:	1800                	addi	s0,sp,48
20403fa6:	fca42e23          	sw	a0,-36(s0)
20403faa:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403fae:	57fd                	li	a5,-1
20403fb0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403fb4:	fdc42503          	lw	a0,-36(s0)
20403fb8:	9f1fe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
20403fbc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403fc0:	fe842783          	lw	a5,-24(s0)
20403fc4:	c79d                	beqz	a5,20403ff2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403fc6:	fe842783          	lw	a5,-24(s0)
20403fca:	0dc7a783          	lw	a5,220(a5)
20403fce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403fd2:	fe442783          	lw	a5,-28(s0)
20403fd6:	cf91                	beqz	a5,20403ff2 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403fd8:	fe442783          	lw	a5,-28(s0)
20403fdc:	439c                	lw	a5,0(a5)
20403fde:	43f8                	lw	a4,68(a5)
20403fe0:	fd840793          	addi	a5,s0,-40
20403fe4:	863e                	mv	a2,a5
20403fe6:	458d                	li	a1,3
20403fe8:	fe442503          	lw	a0,-28(s0)
20403fec:	9702                	jalr	a4
20403fee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403ff2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403ff6:	853e                	mv	a0,a5
20403ff8:	50b2                	lw	ra,44(sp)
20403ffa:	5422                	lw	s0,40(sp)
20403ffc:	6145                	addi	sp,sp,48
20403ffe:	8082                	ret

20404000 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20404000:	7179                	addi	sp,sp,-48
20404002:	d606                	sw	ra,44(sp)
20404004:	d422                	sw	s0,40(sp)
20404006:	1800                	addi	s0,sp,48
20404008:	fca42e23          	sw	a0,-36(s0)
2040400c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20404010:	57fd                	li	a5,-1
20404012:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404016:	fdc42503          	lw	a0,-36(s0)
2040401a:	98ffe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
2040401e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20404022:	fe842783          	lw	a5,-24(s0)
20404026:	c79d                	beqz	a5,20404054 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20404028:	fe842783          	lw	a5,-24(s0)
2040402c:	0dc7a783          	lw	a5,220(a5)
20404030:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20404034:	fe442783          	lw	a5,-28(s0)
20404038:	cf91                	beqz	a5,20404054 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
2040403a:	fe442783          	lw	a5,-28(s0)
2040403e:	439c                	lw	a5,0(a5)
20404040:	43f8                	lw	a4,68(a5)
20404042:	fd840793          	addi	a5,s0,-40
20404046:	863e                	mv	a2,a5
20404048:	4589                	li	a1,2
2040404a:	fe442503          	lw	a0,-28(s0)
2040404e:	9702                	jalr	a4
20404050:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20404054:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20404058:	853e                	mv	a0,a5
2040405a:	50b2                	lw	ra,44(sp)
2040405c:	5422                	lw	s0,40(sp)
2040405e:	6145                	addi	sp,sp,48
20404060:	8082                	ret

20404062 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20404062:	7179                	addi	sp,sp,-48
20404064:	d606                	sw	ra,44(sp)
20404066:	d422                	sw	s0,40(sp)
20404068:	1800                	addi	s0,sp,48
2040406a:	fca42e23          	sw	a0,-36(s0)
2040406e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20404072:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20404076:	fdc42503          	lw	a0,-36(s0)
2040407a:	92ffe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
2040407e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20404082:	fe842783          	lw	a5,-24(s0)
20404086:	c79d                	beqz	a5,204040b4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20404088:	fe842783          	lw	a5,-24(s0)
2040408c:	0dc7a783          	lw	a5,220(a5)
20404090:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20404094:	fe442783          	lw	a5,-28(s0)
20404098:	cf91                	beqz	a5,204040b4 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
2040409a:	fe442783          	lw	a5,-28(s0)
2040409e:	439c                	lw	a5,0(a5)
204040a0:	43f8                	lw	a4,68(a5)
204040a2:	fd840793          	addi	a5,s0,-40
204040a6:	863e                	mv	a2,a5
204040a8:	4591                	li	a1,4
204040aa:	fe442503          	lw	a0,-28(s0)
204040ae:	9702                	jalr	a4
204040b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
204040b4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
204040b8:	853e                	mv	a0,a5
204040ba:	50b2                	lw	ra,44(sp)
204040bc:	5422                	lw	s0,40(sp)
204040be:	6145                	addi	sp,sp,48
204040c0:	8082                	ret

204040c2 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
204040c2:	1101                	addi	sp,sp,-32
204040c4:	ce06                	sw	ra,28(sp)
204040c6:	cc22                	sw	s0,24(sp)
204040c8:	1000                	addi	s0,sp,32
204040ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
204040ce:	fec42503          	lw	a0,-20(s0)
204040d2:	8d7fe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204040d6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
204040d8:	853e                	mv	a0,a5
204040da:	40f2                	lw	ra,28(sp)
204040dc:	4462                	lw	s0,24(sp)
204040de:	6105                	addi	sp,sp,32
204040e0:	8082                	ret

204040e2 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
204040e2:	7179                	addi	sp,sp,-48
204040e4:	d606                	sw	ra,44(sp)
204040e6:	d422                	sw	s0,40(sp)
204040e8:	1800                	addi	s0,sp,48
204040ea:	fca42e23          	sw	a0,-36(s0)
204040ee:	fcb42c23          	sw	a1,-40(s0)
204040f2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204040f6:	fdc42503          	lw	a0,-36(s0)
204040fa:	8affe0ef          	jal	ra,204029a8 <__metal_driver_cpu_interrupt_controller>
204040fe:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20404102:	fec42783          	lw	a5,-20(s0)
20404106:	cb99                	beqz	a5,2040411c <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20404108:	fd442603          	lw	a2,-44(s0)
2040410c:	fd842583          	lw	a1,-40(s0)
20404110:	fec42503          	lw	a0,-20(s0)
20404114:	8ddff0ef          	jal	ra,204039f0 <__metal_exception_register>
20404118:	87aa                	mv	a5,a0
2040411a:	a011                	j	2040411e <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
2040411c:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
2040411e:	853e                	mv	a0,a5
20404120:	50b2                	lw	ra,44(sp)
20404122:	5422                	lw	s0,40(sp)
20404124:	6145                	addi	sp,sp,48
20404126:	8082                	ret

20404128 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20404128:	1101                	addi	sp,sp,-32
2040412a:	ce22                	sw	s0,28(sp)
2040412c:	1000                	addi	s0,sp,32
2040412e:	fea42623          	sw	a0,-20(s0)
20404132:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20404136:	fe842783          	lw	a5,-24(s0)
2040413a:	0007d783          	lhu	a5,0(a5)
2040413e:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20404142:	478d                	li	a5,3
20404144:	00f71463          	bne	a4,a5,2040414c <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20404148:	4791                	li	a5,4
2040414a:	a011                	j	2040414e <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
2040414c:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
2040414e:	853e                	mv	a0,a5
20404150:	4472                	lw	s0,28(sp)
20404152:	6105                	addi	sp,sp,32
20404154:	8082                	ret

20404156 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20404156:	7179                	addi	sp,sp,-48
20404158:	d622                	sw	s0,44(sp)
2040415a:	1800                	addi	s0,sp,48
2040415c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20404160:	341027f3          	csrr	a5,mepc
20404164:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20404168:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
2040416c:	853e                	mv	a0,a5
2040416e:	5432                	lw	s0,44(sp)
20404170:	6145                	addi	sp,sp,48
20404172:	8082                	ret

20404174 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20404174:	1101                	addi	sp,sp,-32
20404176:	ce22                	sw	s0,28(sp)
20404178:	1000                	addi	s0,sp,32
2040417a:	fea42623          	sw	a0,-20(s0)
2040417e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20404182:	fe842783          	lw	a5,-24(s0)
20404186:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
2040418a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
2040418c:	853e                	mv	a0,a5
2040418e:	4472                	lw	s0,28(sp)
20404190:	6105                	addi	sp,sp,32
20404192:	8082                	ret

20404194 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404194:	1101                	addi	sp,sp,-32
20404196:	ce22                	sw	s0,28(sp)
20404198:	1000                	addi	s0,sp,32
2040419a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040419e:	fec42703          	lw	a4,-20(s0)
204041a2:	800007b7          	lui	a5,0x80000
204041a6:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204041aa:	00f71563          	bne	a4,a5,204041b4 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204041ae:	0c0007b7          	lui	a5,0xc000
204041b2:	a011                	j	204041b6 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
204041b4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
204041b6:	853e                	mv	a0,a5
204041b8:	4472                	lw	s0,28(sp)
204041ba:	6105                	addi	sp,sp,32
204041bc:	8082                	ret

204041be <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
204041be:	1101                	addi	sp,sp,-32
204041c0:	ce22                	sw	s0,28(sp)
204041c2:	1000                	addi	s0,sp,32
204041c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204041c8:	fec42703          	lw	a4,-20(s0)
204041cc:	800007b7          	lui	a5,0x80000
204041d0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204041d4:	00f71463          	bne	a4,a5,204041dc <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204041d8:	47ed                	li	a5,27
204041da:	a011                	j	204041de <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
204041dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
204041de:	853e                	mv	a0,a5
204041e0:	4472                	lw	s0,28(sp)
204041e2:	6105                	addi	sp,sp,32
204041e4:	8082                	ret

204041e6 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204041e6:	1101                	addi	sp,sp,-32
204041e8:	ce22                	sw	s0,28(sp)
204041ea:	1000                	addi	s0,sp,32
204041ec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204041f0:	fec42703          	lw	a4,-20(s0)
204041f4:	800007b7          	lui	a5,0x80000
204041f8:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204041fc:	00f71463          	bne	a4,a5,20404204 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20404200:	479d                	li	a5,7
20404202:	a011                	j	20404206 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404204:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404206:	853e                	mv	a0,a5
20404208:	4472                	lw	s0,28(sp)
2040420a:	6105                	addi	sp,sp,32
2040420c:	8082                	ret

2040420e <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040420e:	1101                	addi	sp,sp,-32
20404210:	ce22                	sw	s0,28(sp)
20404212:	1000                	addi	s0,sp,32
20404214:	fea42623          	sw	a0,-20(s0)
20404218:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
2040421c:	fe842783          	lw	a5,-24(s0)
20404220:	e791                	bnez	a5,2040422c <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20404222:	800007b7          	lui	a5,0x80000
20404226:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
2040422a:	a011                	j	2040422e <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
2040422c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
2040422e:	853e                	mv	a0,a5
20404230:	4472                	lw	s0,28(sp)
20404232:	6105                	addi	sp,sp,32
20404234:	8082                	ret

20404236 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20404236:	1101                	addi	sp,sp,-32
20404238:	ce22                	sw	s0,28(sp)
2040423a:	1000                	addi	s0,sp,32
2040423c:	fea42623          	sw	a0,-20(s0)
20404240:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20404244:	fe842783          	lw	a5,-24(s0)
20404248:	e399                	bnez	a5,2040424e <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
2040424a:	47ad                	li	a5,11
2040424c:	a011                	j	20404250 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
2040424e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20404250:	853e                	mv	a0,a5
20404252:	4472                	lw	s0,28(sp)
20404254:	6105                	addi	sp,sp,32
20404256:	8082                	ret

20404258 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20404258:	7179                	addi	sp,sp,-48
2040425a:	d606                	sw	ra,44(sp)
2040425c:	d422                	sw	s0,40(sp)
2040425e:	1800                	addi	s0,sp,48
20404260:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404264:	fdc42503          	lw	a0,-36(s0)
20404268:	3735                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
2040426a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040426e:	fec42703          	lw	a4,-20(s0)
20404272:	002007b7          	lui	a5,0x200
20404276:	0791                	addi	a5,a5,4
20404278:	97ba                	add	a5,a5,a4
2040427a:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
2040427c:	853e                	mv	a0,a5
2040427e:	50b2                	lw	ra,44(sp)
20404280:	5422                	lw	s0,40(sp)
20404282:	6145                	addi	sp,sp,48
20404284:	8082                	ret

20404286 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404286:	7179                	addi	sp,sp,-48
20404288:	d606                	sw	ra,44(sp)
2040428a:	d422                	sw	s0,40(sp)
2040428c:	1800                	addi	s0,sp,48
2040428e:	fca42e23          	sw	a0,-36(s0)
20404292:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404296:	fdc42503          	lw	a0,-36(s0)
2040429a:	3ded                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
2040429c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204042a0:	fec42703          	lw	a4,-20(s0)
204042a4:	002007b7          	lui	a5,0x200
204042a8:	0791                	addi	a5,a5,4
204042aa:	97ba                	add	a5,a5,a4
204042ac:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204042ae:	fd842783          	lw	a5,-40(s0)
204042b2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
204042b4:	0001                	nop
204042b6:	50b2                	lw	ra,44(sp)
204042b8:	5422                	lw	s0,40(sp)
204042ba:	6145                	addi	sp,sp,48
204042bc:	8082                	ret

204042be <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
204042be:	7179                	addi	sp,sp,-48
204042c0:	d606                	sw	ra,44(sp)
204042c2:	d422                	sw	s0,40(sp)
204042c4:	1800                	addi	s0,sp,48
204042c6:	fca42e23          	sw	a0,-36(s0)
204042ca:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204042ce:	fdc42503          	lw	a0,-36(s0)
204042d2:	35c9                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
204042d4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204042d8:	fec42703          	lw	a4,-20(s0)
204042dc:	002007b7          	lui	a5,0x200
204042e0:	97ba                	add	a5,a5,a4
204042e2:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204042e4:	fd842783          	lw	a5,-40(s0)
204042e8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204042ea:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204042ec:	853e                	mv	a0,a5
204042ee:	50b2                	lw	ra,44(sp)
204042f0:	5422                	lw	s0,40(sp)
204042f2:	6145                	addi	sp,sp,48
204042f4:	8082                	ret

204042f6 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
204042f6:	7179                	addi	sp,sp,-48
204042f8:	d606                	sw	ra,44(sp)
204042fa:	d422                	sw	s0,40(sp)
204042fc:	1800                	addi	s0,sp,48
204042fe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404302:	fdc42503          	lw	a0,-36(s0)
20404306:	3579                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
20404308:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040430c:	fec42703          	lw	a4,-20(s0)
20404310:	002007b7          	lui	a5,0x200
20404314:	97ba                	add	a5,a5,a4
20404316:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20404318:	853e                	mv	a0,a5
2040431a:	50b2                	lw	ra,44(sp)
2040431c:	5422                	lw	s0,40(sp)
2040431e:	6145                	addi	sp,sp,48
20404320:	8082                	ret

20404322 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20404322:	7179                	addi	sp,sp,-48
20404324:	d606                	sw	ra,44(sp)
20404326:	d422                	sw	s0,40(sp)
20404328:	1800                	addi	s0,sp,48
2040432a:	fca42e23          	sw	a0,-36(s0)
2040432e:	fcb42c23          	sw	a1,-40(s0)
20404332:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20404336:	fdc42503          	lw	a0,-36(s0)
2040433a:	3da9                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
2040433c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20404340:	fdc42503          	lw	a0,-36(s0)
20404344:	354d                	jal	204041e6 <__metal_driver_sifive_plic0_max_priority>
20404346:	87aa                	mv	a5,a0
20404348:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
2040434c:	fe842783          	lw	a5,-24(s0)
20404350:	c785                	beqz	a5,20404378 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20404352:	fd442703          	lw	a4,-44(s0)
20404356:	fe842783          	lw	a5,-24(s0)
2040435a:	00f77f63          	bgeu	a4,a5,20404378 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040435e:	fd842783          	lw	a5,-40(s0)
20404362:	078a                	slli	a5,a5,0x2
20404364:	873e                	mv	a4,a5
20404366:	fec42783          	lw	a5,-20(s0)
2040436a:	97ba                	add	a5,a5,a4
2040436c:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
2040436e:	fd442783          	lw	a5,-44(s0)
20404372:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20404374:	4781                	li	a5,0
20404376:	a011                	j	2040437a <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20404378:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
2040437a:	853e                	mv	a0,a5
2040437c:	50b2                	lw	ra,44(sp)
2040437e:	5422                	lw	s0,40(sp)
20404380:	6145                	addi	sp,sp,48
20404382:	8082                	ret

20404384 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404384:	7179                	addi	sp,sp,-48
20404386:	d606                	sw	ra,44(sp)
20404388:	d422                	sw	s0,40(sp)
2040438a:	1800                	addi	s0,sp,48
2040438c:	fca42e23          	sw	a0,-36(s0)
20404390:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404394:	fdc42503          	lw	a0,-36(s0)
20404398:	3bf5                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
2040439a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040439e:	fd842783          	lw	a5,-40(s0)
204043a2:	078a                	slli	a5,a5,0x2
204043a4:	873e                	mv	a4,a5
204043a6:	fec42783          	lw	a5,-20(s0)
204043aa:	97ba                	add	a5,a5,a4
204043ac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204043ae:	853e                	mv	a0,a5
204043b0:	50b2                	lw	ra,44(sp)
204043b2:	5422                	lw	s0,40(sp)
204043b4:	6145                	addi	sp,sp,48
204043b6:	8082                	ret

204043b8 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204043b8:	7179                	addi	sp,sp,-48
204043ba:	d606                	sw	ra,44(sp)
204043bc:	d422                	sw	s0,40(sp)
204043be:	1800                	addi	s0,sp,48
204043c0:	fca42e23          	sw	a0,-36(s0)
204043c4:	fcb42c23          	sw	a1,-40(s0)
204043c8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204043cc:	fdc42503          	lw	a0,-36(s0)
204043d0:	33d1                	jal	20404194 <__metal_driver_sifive_plic0_control_base>
204043d2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204043d6:	fd842783          	lw	a5,-40(s0)
204043da:	8795                	srai	a5,a5,0x5
204043dc:	078a                	slli	a5,a5,0x2
204043de:	873e                	mv	a4,a5
204043e0:	fec42783          	lw	a5,-20(s0)
204043e4:	973e                	add	a4,a4,a5
204043e6:	6789                	lui	a5,0x2
204043e8:	97ba                	add	a5,a5,a4
204043ea:	439c                	lw	a5,0(a5)
204043ec:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204043f0:	fd442783          	lw	a5,-44(s0)
204043f4:	cf81                	beqz	a5,2040440c <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204043f6:	fd842783          	lw	a5,-40(s0)
204043fa:	8bfd                	andi	a5,a5,31
204043fc:	4705                	li	a4,1
204043fe:	00f717b3          	sll	a5,a4,a5
20404402:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404404:	fe842783          	lw	a5,-24(s0)
20404408:	8fd9                	or	a5,a5,a4
2040440a:	a829                	j	20404424 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040440c:	fd842783          	lw	a5,-40(s0)
20404410:	8bfd                	andi	a5,a5,31
20404412:	4705                	li	a4,1
20404414:	00f717b3          	sll	a5,a4,a5
20404418:	fff7c793          	not	a5,a5
2040441c:	873e                	mv	a4,a5
2040441e:	fe842783          	lw	a5,-24(s0)
20404422:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404424:	fd842703          	lw	a4,-40(s0)
20404428:	8715                	srai	a4,a4,0x5
2040442a:	070a                	slli	a4,a4,0x2
2040442c:	86ba                	mv	a3,a4
2040442e:	fec42703          	lw	a4,-20(s0)
20404432:	96ba                	add	a3,a3,a4
20404434:	6709                	lui	a4,0x2
20404436:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404438:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
2040443a:	0001                	nop
2040443c:	50b2                	lw	ra,44(sp)
2040443e:	5422                	lw	s0,40(sp)
20404440:	6145                	addi	sp,sp,48
20404442:	8082                	ret

20404444 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404444:	1101                	addi	sp,sp,-32
20404446:	ce06                	sw	ra,28(sp)
20404448:	cc22                	sw	s0,24(sp)
2040444a:	1000                	addi	s0,sp,32
2040444c:	fea42623          	sw	a0,-20(s0)
20404450:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404454:	12c00513          	li	a0,300
20404458:	1c4010ef          	jal	ra,2040561c <metal_shutdown>

2040445c <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
2040445c:	7179                	addi	sp,sp,-48
2040445e:	d606                	sw	ra,44(sp)
20404460:	d422                	sw	s0,40(sp)
20404462:	1800                	addi	s0,sp,48
20404464:	fca42e23          	sw	a0,-36(s0)
20404468:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
2040446c:	fd842783          	lw	a5,-40(s0)
20404470:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404474:	fec42503          	lw	a0,-20(s0)
20404478:	33c5                	jal	20404258 <__metal_plic0_claim_interrupt>
2040447a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
2040447e:	fec42503          	lw	a0,-20(s0)
20404482:	3b35                	jal	204041be <__metal_driver_sifive_plic0_num_interrupts>
20404484:	87aa                	mv	a5,a0
20404486:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040448a:	fe842703          	lw	a4,-24(s0)
2040448e:	fe442783          	lw	a5,-28(s0)
20404492:	04f77263          	bgeu	a4,a5,204044d6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404496:	fec42703          	lw	a4,-20(s0)
2040449a:	fe842783          	lw	a5,-24(s0)
2040449e:	078a                	slli	a5,a5,0x2
204044a0:	97ba                	add	a5,a5,a4
204044a2:	479c                	lw	a5,8(a5)
204044a4:	cb8d                	beqz	a5,204044d6 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204044a6:	fec42703          	lw	a4,-20(s0)
204044aa:	fe842783          	lw	a5,-24(s0)
204044ae:	078a                	slli	a5,a5,0x2
204044b0:	97ba                	add	a5,a5,a4
204044b2:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204044b6:	fe842603          	lw	a2,-24(s0)
204044ba:	fec42683          	lw	a3,-20(s0)
204044be:	fe842703          	lw	a4,-24(s0)
204044c2:	87ba                	mv	a5,a4
204044c4:	0786                	slli	a5,a5,0x1
204044c6:	97ba                	add	a5,a5,a4
204044c8:	078e                	slli	a5,a5,0x3
204044ca:	97b6                	add	a5,a5,a3
204044cc:	0887a783          	lw	a5,136(a5)
204044d0:	85be                	mv	a1,a5
204044d2:	8532                	mv	a0,a2
204044d4:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204044d6:	fe842583          	lw	a1,-24(s0)
204044da:	fec42503          	lw	a0,-20(s0)
204044de:	3365                	jal	20404286 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204044e0:	0001                	nop
204044e2:	50b2                	lw	ra,44(sp)
204044e4:	5422                	lw	s0,40(sp)
204044e6:	6145                	addi	sp,sp,48
204044e8:	8082                	ret

204044ea <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204044ea:	7139                	addi	sp,sp,-64
204044ec:	de06                	sw	ra,60(sp)
204044ee:	dc22                	sw	s0,56(sp)
204044f0:	0080                	addi	s0,sp,64
204044f2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204044f6:	fcc42783          	lw	a5,-52(s0)
204044fa:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
204044fe:	fe442783          	lw	a5,-28(s0)
20404502:	43dc                	lw	a5,4(a5)
20404504:	12079063          	bnez	a5,20404624 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404508:	fe042623          	sw	zero,-20(s0)
2040450c:	a221                	j	20404614 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040450e:	fcc42503          	lw	a0,-52(s0)
20404512:	cadff0ef          	jal	ra,204041be <__metal_driver_sifive_plic0_num_interrupts>
20404516:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040451a:	fec42583          	lw	a1,-20(s0)
2040451e:	fcc42503          	lw	a0,-52(s0)
20404522:	cedff0ef          	jal	ra,2040420e <__metal_driver_sifive_plic0_interrupt_parents>
20404526:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
2040452a:	fec42583          	lw	a1,-20(s0)
2040452e:	fcc42503          	lw	a0,-52(s0)
20404532:	d05ff0ef          	jal	ra,20404236 <__metal_driver_sifive_plic0_interrupt_lines>
20404536:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
2040453a:	fdc42783          	lw	a5,-36(s0)
2040453e:	439c                	lw	a5,0(a5)
20404540:	439c                	lw	a5,0(a5)
20404542:	fdc42503          	lw	a0,-36(s0)
20404546:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20404548:	fe042423          	sw	zero,-24(s0)
2040454c:	a085                	j	204045ac <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
2040454e:	4601                	li	a2,0
20404550:	fe842583          	lw	a1,-24(s0)
20404554:	fe442503          	lw	a0,-28(s0)
20404558:	3585                	jal	204043b8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
2040455a:	4601                	li	a2,0
2040455c:	fe842583          	lw	a1,-24(s0)
20404560:	fcc42503          	lw	a0,-52(s0)
20404564:	3b7d                	jal	20404322 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20404566:	fe442703          	lw	a4,-28(s0)
2040456a:	fe842783          	lw	a5,-24(s0)
2040456e:	078a                	slli	a5,a5,0x2
20404570:	97ba                	add	a5,a5,a4
20404572:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20404576:	fe442683          	lw	a3,-28(s0)
2040457a:	fe842703          	lw	a4,-24(s0)
2040457e:	87ba                	mv	a5,a4
20404580:	0786                	slli	a5,a5,0x1
20404582:	97ba                	add	a5,a5,a4
20404584:	078e                	slli	a5,a5,0x3
20404586:	97b6                	add	a5,a5,a3
20404588:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
2040458c:	fe442683          	lw	a3,-28(s0)
20404590:	fe842703          	lw	a4,-24(s0)
20404594:	87ba                	mv	a5,a4
20404596:	0786                	slli	a5,a5,0x1
20404598:	97ba                	add	a5,a5,a4
2040459a:	078e                	slli	a5,a5,0x3
2040459c:	97b6                	add	a5,a5,a3
2040459e:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
204045a2:	fe842783          	lw	a5,-24(s0)
204045a6:	0785                	addi	a5,a5,1
204045a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204045ac:	fe842703          	lw	a4,-24(s0)
204045b0:	fe042783          	lw	a5,-32(s0)
204045b4:	f8f74de3          	blt	a4,a5,2040454e <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204045b8:	4581                	li	a1,0
204045ba:	fcc42503          	lw	a0,-52(s0)
204045be:	d01ff0ef          	jal	ra,204042be <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204045c2:	fdc42783          	lw	a5,-36(s0)
204045c6:	439c                	lw	a5,0(a5)
204045c8:	4fdc                	lw	a5,28(a5)
204045ca:	fe442683          	lw	a3,-28(s0)
204045ce:	4601                	li	a2,0
204045d0:	fd842583          	lw	a1,-40(s0)
204045d4:	fdc42503          	lw	a0,-36(s0)
204045d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204045da:	fdc42783          	lw	a5,-36(s0)
204045de:	439c                	lw	a5,0(a5)
204045e0:	4fd8                	lw	a4,28(a5)
204045e2:	fe442683          	lw	a3,-28(s0)
204045e6:	204047b7          	lui	a5,0x20404
204045ea:	45c78613          	addi	a2,a5,1116 # 2040445c <__metal_plic0_handler>
204045ee:	fd842583          	lw	a1,-40(s0)
204045f2:	fdc42503          	lw	a0,-36(s0)
204045f6:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204045f8:	fdc42783          	lw	a5,-36(s0)
204045fc:	439c                	lw	a5,0(a5)
204045fe:	53dc                	lw	a5,36(a5)
20404600:	fd842583          	lw	a1,-40(s0)
20404604:	fdc42503          	lw	a0,-36(s0)
20404608:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040460a:	fec42783          	lw	a5,-20(s0)
2040460e:	0785                	addi	a5,a5,1
20404610:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404614:	fec42783          	lw	a5,-20(s0)
20404618:	eef05be3          	blez	a5,2040450e <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
2040461c:	fe442783          	lw	a5,-28(s0)
20404620:	4705                	li	a4,1
20404622:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404624:	0001                	nop
20404626:	50f2                	lw	ra,60(sp)
20404628:	5462                	lw	s0,56(sp)
2040462a:	6121                	addi	sp,sp,64
2040462c:	8082                	ret

2040462e <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
2040462e:	7179                	addi	sp,sp,-48
20404630:	d606                	sw	ra,44(sp)
20404632:	d422                	sw	s0,40(sp)
20404634:	1800                	addi	s0,sp,48
20404636:	fca42e23          	sw	a0,-36(s0)
2040463a:	fcb42c23          	sw	a1,-40(s0)
2040463e:	fcc42a23          	sw	a2,-44(s0)
20404642:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404646:	fdc42783          	lw	a5,-36(s0)
2040464a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040464e:	fdc42503          	lw	a0,-36(s0)
20404652:	b6dff0ef          	jal	ra,204041be <__metal_driver_sifive_plic0_num_interrupts>
20404656:	872a                	mv	a4,a0
20404658:	fd842783          	lw	a5,-40(s0)
2040465c:	00e7c463          	blt	a5,a4,20404664 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404660:	57fd                	li	a5,-1
20404662:	a051                	j	204046e6 <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404664:	fd442783          	lw	a5,-44(s0)
20404668:	cf9d                	beqz	a5,204046a6 <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040466a:	4609                	li	a2,2
2040466c:	fd842583          	lw	a1,-40(s0)
20404670:	fdc42503          	lw	a0,-36(s0)
20404674:	cafff0ef          	jal	ra,20404322 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
20404678:	fec42703          	lw	a4,-20(s0)
2040467c:	fd842783          	lw	a5,-40(s0)
20404680:	078a                	slli	a5,a5,0x2
20404682:	97ba                	add	a5,a5,a4
20404684:	fd442703          	lw	a4,-44(s0)
20404688:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040468a:	fec42683          	lw	a3,-20(s0)
2040468e:	fd842703          	lw	a4,-40(s0)
20404692:	87ba                	mv	a5,a4
20404694:	0786                	slli	a5,a5,0x1
20404696:	97ba                	add	a5,a5,a4
20404698:	078e                	slli	a5,a5,0x3
2040469a:	97b6                	add	a5,a5,a3
2040469c:	fd042703          	lw	a4,-48(s0)
204046a0:	08e7a423          	sw	a4,136(a5)
204046a4:	a081                	j	204046e4 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
204046a6:	4605                	li	a2,1
204046a8:	fd842583          	lw	a1,-40(s0)
204046ac:	fdc42503          	lw	a0,-36(s0)
204046b0:	c73ff0ef          	jal	ra,20404322 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204046b4:	fec42703          	lw	a4,-20(s0)
204046b8:	fd842783          	lw	a5,-40(s0)
204046bc:	078a                	slli	a5,a5,0x2
204046be:	97ba                	add	a5,a5,a4
204046c0:	20404737          	lui	a4,0x20404
204046c4:	44470713          	addi	a4,a4,1092 # 20404444 <__metal_plic0_default_handler>
204046c8:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204046ca:	fec42683          	lw	a3,-20(s0)
204046ce:	fd842703          	lw	a4,-40(s0)
204046d2:	87ba                	mv	a5,a4
204046d4:	0786                	slli	a5,a5,0x1
204046d6:	97ba                	add	a5,a5,a4
204046d8:	078e                	slli	a5,a5,0x3
204046da:	97b6                	add	a5,a5,a3
204046dc:	fd042703          	lw	a4,-48(s0)
204046e0:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204046e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204046e6:	853e                	mv	a0,a5
204046e8:	50b2                	lw	ra,44(sp)
204046ea:	5422                	lw	s0,40(sp)
204046ec:	6145                	addi	sp,sp,48
204046ee:	8082                	ret

204046f0 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204046f0:	7179                	addi	sp,sp,-48
204046f2:	d606                	sw	ra,44(sp)
204046f4:	d422                	sw	s0,40(sp)
204046f6:	1800                	addi	s0,sp,48
204046f8:	fca42e23          	sw	a0,-36(s0)
204046fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404700:	fdc42783          	lw	a5,-36(s0)
20404704:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404708:	fdc42503          	lw	a0,-36(s0)
2040470c:	ab3ff0ef          	jal	ra,204041be <__metal_driver_sifive_plic0_num_interrupts>
20404710:	872a                	mv	a4,a0
20404712:	fd842783          	lw	a5,-40(s0)
20404716:	00e7c463          	blt	a5,a4,2040471e <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040471a:	57fd                	li	a5,-1
2040471c:	a809                	j	2040472e <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
2040471e:	4605                	li	a2,1
20404720:	fd842583          	lw	a1,-40(s0)
20404724:	fec42503          	lw	a0,-20(s0)
20404728:	c91ff0ef          	jal	ra,204043b8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040472c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
2040472e:	853e                	mv	a0,a5
20404730:	50b2                	lw	ra,44(sp)
20404732:	5422                	lw	s0,40(sp)
20404734:	6145                	addi	sp,sp,48
20404736:	8082                	ret

20404738 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
20404738:	7179                	addi	sp,sp,-48
2040473a:	d606                	sw	ra,44(sp)
2040473c:	d422                	sw	s0,40(sp)
2040473e:	1800                	addi	s0,sp,48
20404740:	fca42e23          	sw	a0,-36(s0)
20404744:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404748:	fdc42783          	lw	a5,-36(s0)
2040474c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404750:	fdc42503          	lw	a0,-36(s0)
20404754:	a6bff0ef          	jal	ra,204041be <__metal_driver_sifive_plic0_num_interrupts>
20404758:	872a                	mv	a4,a0
2040475a:	fd842783          	lw	a5,-40(s0)
2040475e:	00e7c463          	blt	a5,a4,20404766 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404762:	57fd                	li	a5,-1
20404764:	a809                	j	20404776 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404766:	4601                	li	a2,0
20404768:	fd842583          	lw	a1,-40(s0)
2040476c:	fec42503          	lw	a0,-20(s0)
20404770:	c49ff0ef          	jal	ra,204043b8 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404774:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404776:	853e                	mv	a0,a5
20404778:	50b2                	lw	ra,44(sp)
2040477a:	5422                	lw	s0,40(sp)
2040477c:	6145                	addi	sp,sp,48
2040477e:	8082                	ret

20404780 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404780:	1101                	addi	sp,sp,-32
20404782:	ce22                	sw	s0,28(sp)
20404784:	1000                	addi	s0,sp,32
20404786:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040478a:	fec42703          	lw	a4,-20(s0)
2040478e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404792:	00f71563          	bne	a4,a5,2040479c <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404796:	100127b7          	lui	a5,0x10012
2040479a:	a011                	j	2040479e <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040479c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
2040479e:	853e                	mv	a0,a5
204047a0:	4472                	lw	s0,28(sp)
204047a2:	6105                	addi	sp,sp,32
204047a4:	8082                	ret

204047a6 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
204047a6:	1101                	addi	sp,sp,-32
204047a8:	ce22                	sw	s0,28(sp)
204047aa:	1000                	addi	s0,sp,32
204047ac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204047b0:	fec42703          	lw	a4,-20(s0)
204047b4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047b8:	00f71763          	bne	a4,a5,204047c6 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204047bc:	800007b7          	lui	a5,0x80000
204047c0:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204047c4:	a011                	j	204047c8 <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204047c6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204047c8:	853e                	mv	a0,a5
204047ca:	4472                	lw	s0,28(sp)
204047cc:	6105                	addi	sp,sp,32
204047ce:	8082                	ret

204047d0 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204047d0:	1101                	addi	sp,sp,-32
204047d2:	ce22                	sw	s0,28(sp)
204047d4:	1000                	addi	s0,sp,32
204047d6:	fea42623          	sw	a0,-20(s0)
204047da:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204047de:	fec42703          	lw	a4,-20(s0)
204047e2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047e6:	00f71763          	bne	a4,a5,204047f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204047ea:	fe842783          	lw	a5,-24(s0)
204047ee:	e399                	bnez	a5,204047f4 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204047f0:	479d                	li	a5,7
204047f2:	a269                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204047f4:	fec42703          	lw	a4,-20(s0)
204047f8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047fc:	00f71963          	bne	a4,a5,2040480e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404800:	fe842703          	lw	a4,-24(s0)
20404804:	4785                	li	a5,1
20404806:	00f71463          	bne	a4,a5,2040480e <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040480a:	47a1                	li	a5,8
2040480c:	aa85                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
2040480e:	fec42703          	lw	a4,-20(s0)
20404812:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404816:	00f71963          	bne	a4,a5,20404828 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040481a:	fe842703          	lw	a4,-24(s0)
2040481e:	4789                	li	a5,2
20404820:	00f71463          	bne	a4,a5,20404828 <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404824:	47a5                	li	a5,9
20404826:	aa99                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20404828:	fec42703          	lw	a4,-20(s0)
2040482c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404830:	00f71963          	bne	a4,a5,20404842 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404834:	fe842703          	lw	a4,-24(s0)
20404838:	478d                	li	a5,3
2040483a:	00f71463          	bne	a4,a5,20404842 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
2040483e:	47a9                	li	a5,10
20404840:	aa35                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404842:	fec42703          	lw	a4,-20(s0)
20404846:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040484a:	00f71963          	bne	a4,a5,2040485c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
2040484e:	fe842703          	lw	a4,-24(s0)
20404852:	4791                	li	a5,4
20404854:	00f71463          	bne	a4,a5,2040485c <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
20404858:	47ad                	li	a5,11
2040485a:	a20d                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040485c:	fec42703          	lw	a4,-20(s0)
20404860:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404864:	00f71963          	bne	a4,a5,20404876 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
20404868:	fe842703          	lw	a4,-24(s0)
2040486c:	4795                	li	a5,5
2040486e:	00f71463          	bne	a4,a5,20404876 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404872:	47b1                	li	a5,12
20404874:	a221                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404876:	fec42703          	lw	a4,-20(s0)
2040487a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040487e:	00f71963          	bne	a4,a5,20404890 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404882:	fe842703          	lw	a4,-24(s0)
20404886:	4799                	li	a5,6
20404888:	00f71463          	bne	a4,a5,20404890 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
2040488c:	47b5                	li	a5,13
2040488e:	a0fd                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404890:	fec42703          	lw	a4,-20(s0)
20404894:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404898:	00f71963          	bne	a4,a5,204048aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040489c:	fe842703          	lw	a4,-24(s0)
204048a0:	479d                	li	a5,7
204048a2:	00f71463          	bne	a4,a5,204048aa <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
204048a6:	47b9                	li	a5,14
204048a8:	a8d1                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
204048aa:	fec42703          	lw	a4,-20(s0)
204048ae:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204048b2:	00f71963          	bne	a4,a5,204048c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
204048b6:	fe842703          	lw	a4,-24(s0)
204048ba:	47a1                	li	a5,8
204048bc:	00f71463          	bne	a4,a5,204048c4 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
204048c0:	47bd                	li	a5,15
204048c2:	a86d                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204048c4:	fec42703          	lw	a4,-20(s0)
204048c8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204048cc:	00f71963          	bne	a4,a5,204048de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
204048d0:	fe842703          	lw	a4,-24(s0)
204048d4:	47a5                	li	a5,9
204048d6:	00f71463          	bne	a4,a5,204048de <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
204048da:	47c1                	li	a5,16
204048dc:	a045                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204048de:	fec42703          	lw	a4,-20(s0)
204048e2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204048e6:	00f71963          	bne	a4,a5,204048f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
204048ea:	fe842703          	lw	a4,-24(s0)
204048ee:	47a9                	li	a5,10
204048f0:	00f71463          	bne	a4,a5,204048f8 <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
204048f4:	47c5                	li	a5,17
204048f6:	a059                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204048f8:	fec42703          	lw	a4,-20(s0)
204048fc:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404900:	00f71963          	bne	a4,a5,20404912 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404904:	fe842703          	lw	a4,-24(s0)
20404908:	47ad                	li	a5,11
2040490a:	00f71463          	bne	a4,a5,20404912 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
2040490e:	47c9                	li	a5,18
20404910:	a0b5                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404912:	fec42703          	lw	a4,-20(s0)
20404916:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040491a:	00f71963          	bne	a4,a5,2040492c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
2040491e:	fe842703          	lw	a4,-24(s0)
20404922:	47b1                	li	a5,12
20404924:	00f71463          	bne	a4,a5,2040492c <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
20404928:	47cd                	li	a5,19
2040492a:	a889                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040492c:	fec42703          	lw	a4,-20(s0)
20404930:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404934:	00f71963          	bne	a4,a5,20404946 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
20404938:	fe842703          	lw	a4,-24(s0)
2040493c:	47b5                	li	a5,13
2040493e:	00f71463          	bne	a4,a5,20404946 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404942:	47d1                	li	a5,20
20404944:	a825                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404946:	fec42703          	lw	a4,-20(s0)
2040494a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040494e:	00f71963          	bne	a4,a5,20404960 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404952:	fe842703          	lw	a4,-24(s0)
20404956:	47b9                	li	a5,14
20404958:	00f71463          	bne	a4,a5,20404960 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
2040495c:	47d5                	li	a5,21
2040495e:	a839                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404960:	fec42703          	lw	a4,-20(s0)
20404964:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404968:	00f71963          	bne	a4,a5,2040497a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
2040496c:	fe842703          	lw	a4,-24(s0)
20404970:	47bd                	li	a5,15
20404972:	00f71463          	bne	a4,a5,2040497a <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20404976:	47d9                	li	a5,22
20404978:	a011                	j	2040497c <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040497a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
2040497c:	853e                	mv	a0,a5
2040497e:	4472                	lw	s0,28(sp)
20404980:	6105                	addi	sp,sp,32
20404982:	8082                	ret

20404984 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404984:	7179                	addi	sp,sp,-48
20404986:	d606                	sw	ra,44(sp)
20404988:	d422                	sw	s0,40(sp)
2040498a:	1800                	addi	s0,sp,48
2040498c:	fca42e23          	sw	a0,-36(s0)
20404990:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404994:	fdc42503          	lw	a0,-36(s0)
20404998:	33e5                	jal	20404780 <__metal_driver_sifive_gpio0_base>
2040499a:	87aa                	mv	a5,a0
2040499c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
204049a0:	fec42783          	lw	a5,-20(s0)
204049a4:	0791                	addi	a5,a5,4
204049a6:	4398                	lw	a4,0(a5)
204049a8:	fd842783          	lw	a5,-40(s0)
204049ac:	fec42683          	lw	a3,-20(s0)
204049b0:	0691                	addi	a3,a3,4
204049b2:	8fd9                	or	a5,a5,a4
204049b4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204049b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204049b8:	853e                	mv	a0,a5
204049ba:	50b2                	lw	ra,44(sp)
204049bc:	5422                	lw	s0,40(sp)
204049be:	6145                	addi	sp,sp,48
204049c0:	8082                	ret

204049c2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204049c2:	7179                	addi	sp,sp,-48
204049c4:	d606                	sw	ra,44(sp)
204049c6:	d422                	sw	s0,40(sp)
204049c8:	1800                	addi	s0,sp,48
204049ca:	fca42e23          	sw	a0,-36(s0)
204049ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049d2:	fdc42503          	lw	a0,-36(s0)
204049d6:	336d                	jal	20404780 <__metal_driver_sifive_gpio0_base>
204049d8:	87aa                	mv	a5,a0
204049da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204049de:	fec42783          	lw	a5,-20(s0)
204049e2:	0791                	addi	a5,a5,4
204049e4:	439c                	lw	a5,0(a5)
204049e6:	fd842703          	lw	a4,-40(s0)
204049ea:	fff74713          	not	a4,a4
204049ee:	86ba                	mv	a3,a4
204049f0:	fec42703          	lw	a4,-20(s0)
204049f4:	0711                	addi	a4,a4,4
204049f6:	8ff5                	and	a5,a5,a3
204049f8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204049fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204049fc:	853e                	mv	a0,a5
204049fe:	50b2                	lw	ra,44(sp)
20404a00:	5422                	lw	s0,40(sp)
20404a02:	6145                	addi	sp,sp,48
20404a04:	8082                	ret

20404a06 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404a06:	7179                	addi	sp,sp,-48
20404a08:	d606                	sw	ra,44(sp)
20404a0a:	d422                	sw	s0,40(sp)
20404a0c:	1800                	addi	s0,sp,48
20404a0e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a12:	fdc42503          	lw	a0,-36(s0)
20404a16:	d6bff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404a1a:	87aa                	mv	a5,a0
20404a1c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404a20:	fec42783          	lw	a5,-20(s0)
20404a24:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404a26:	853e                	mv	a0,a5
20404a28:	50b2                	lw	ra,44(sp)
20404a2a:	5422                	lw	s0,40(sp)
20404a2c:	6145                	addi	sp,sp,48
20404a2e:	8082                	ret

20404a30 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404a30:	7179                	addi	sp,sp,-48
20404a32:	d606                	sw	ra,44(sp)
20404a34:	d422                	sw	s0,40(sp)
20404a36:	1800                	addi	s0,sp,48
20404a38:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a3c:	fdc42503          	lw	a0,-36(s0)
20404a40:	d41ff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404a44:	87aa                	mv	a5,a0
20404a46:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404a4a:	fec42783          	lw	a5,-20(s0)
20404a4e:	07b1                	addi	a5,a5,12
20404a50:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404a52:	853e                	mv	a0,a5
20404a54:	50b2                	lw	ra,44(sp)
20404a56:	5422                	lw	s0,40(sp)
20404a58:	6145                	addi	sp,sp,48
20404a5a:	8082                	ret

20404a5c <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
20404a5c:	7179                	addi	sp,sp,-48
20404a5e:	d606                	sw	ra,44(sp)
20404a60:	d422                	sw	s0,40(sp)
20404a62:	1800                	addi	s0,sp,48
20404a64:	fca42e23          	sw	a0,-36(s0)
20404a68:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a6c:	fdc42503          	lw	a0,-36(s0)
20404a70:	d11ff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404a74:	87aa                	mv	a5,a0
20404a76:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404a7a:	fec42783          	lw	a5,-20(s0)
20404a7e:	07a1                	addi	a5,a5,8
20404a80:	439c                	lw	a5,0(a5)
20404a82:	fd842703          	lw	a4,-40(s0)
20404a86:	fff74713          	not	a4,a4
20404a8a:	86ba                	mv	a3,a4
20404a8c:	fec42703          	lw	a4,-20(s0)
20404a90:	0721                	addi	a4,a4,8
20404a92:	8ff5                	and	a5,a5,a3
20404a94:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404a96:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404a98:	853e                	mv	a0,a5
20404a9a:	50b2                	lw	ra,44(sp)
20404a9c:	5422                	lw	s0,40(sp)
20404a9e:	6145                	addi	sp,sp,48
20404aa0:	8082                	ret

20404aa2 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404aa2:	7179                	addi	sp,sp,-48
20404aa4:	d606                	sw	ra,44(sp)
20404aa6:	d422                	sw	s0,40(sp)
20404aa8:	1800                	addi	s0,sp,48
20404aaa:	fca42e23          	sw	a0,-36(s0)
20404aae:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404ab2:	fdc42503          	lw	a0,-36(s0)
20404ab6:	ccbff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404aba:	87aa                	mv	a5,a0
20404abc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404ac0:	fec42783          	lw	a5,-20(s0)
20404ac4:	07a1                	addi	a5,a5,8
20404ac6:	4398                	lw	a4,0(a5)
20404ac8:	fd842783          	lw	a5,-40(s0)
20404acc:	fec42683          	lw	a3,-20(s0)
20404ad0:	06a1                	addi	a3,a3,8
20404ad2:	8fd9                	or	a5,a5,a4
20404ad4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404ad6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404ad8:	853e                	mv	a0,a5
20404ada:	50b2                	lw	ra,44(sp)
20404adc:	5422                	lw	s0,40(sp)
20404ade:	6145                	addi	sp,sp,48
20404ae0:	8082                	ret

20404ae2 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404ae2:	7179                	addi	sp,sp,-48
20404ae4:	d606                	sw	ra,44(sp)
20404ae6:	d422                	sw	s0,40(sp)
20404ae8:	1800                	addi	s0,sp,48
20404aea:	fca42e23          	sw	a0,-36(s0)
20404aee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404af2:	fdc42503          	lw	a0,-36(s0)
20404af6:	c8bff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404afa:	87aa                	mv	a5,a0
20404afc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404b00:	fec42783          	lw	a5,-20(s0)
20404b04:	07b1                	addi	a5,a5,12
20404b06:	4398                	lw	a4,0(a5)
20404b08:	fd842783          	lw	a5,-40(s0)
20404b0c:	fec42683          	lw	a3,-20(s0)
20404b10:	06b1                	addi	a3,a3,12
20404b12:	8fd9                	or	a5,a5,a4
20404b14:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404b16:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404b18:	853e                	mv	a0,a5
20404b1a:	50b2                	lw	ra,44(sp)
20404b1c:	5422                	lw	s0,40(sp)
20404b1e:	6145                	addi	sp,sp,48
20404b20:	8082                	ret

20404b22 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404b22:	7179                	addi	sp,sp,-48
20404b24:	d606                	sw	ra,44(sp)
20404b26:	d422                	sw	s0,40(sp)
20404b28:	1800                	addi	s0,sp,48
20404b2a:	fca42e23          	sw	a0,-36(s0)
20404b2e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b32:	fdc42503          	lw	a0,-36(s0)
20404b36:	c4bff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404b3a:	87aa                	mv	a5,a0
20404b3c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404b40:	fec42783          	lw	a5,-20(s0)
20404b44:	07b1                	addi	a5,a5,12
20404b46:	439c                	lw	a5,0(a5)
20404b48:	fd842703          	lw	a4,-40(s0)
20404b4c:	fff74713          	not	a4,a4
20404b50:	86ba                	mv	a3,a4
20404b52:	fec42703          	lw	a4,-20(s0)
20404b56:	0731                	addi	a4,a4,12
20404b58:	8ff5                	and	a5,a5,a3
20404b5a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404b5c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404b5e:	853e                	mv	a0,a5
20404b60:	50b2                	lw	ra,44(sp)
20404b62:	5422                	lw	s0,40(sp)
20404b64:	6145                	addi	sp,sp,48
20404b66:	8082                	ret

20404b68 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404b68:	7179                	addi	sp,sp,-48
20404b6a:	d606                	sw	ra,44(sp)
20404b6c:	d422                	sw	s0,40(sp)
20404b6e:	1800                	addi	s0,sp,48
20404b70:	fca42e23          	sw	a0,-36(s0)
20404b74:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b78:	fdc42503          	lw	a0,-36(s0)
20404b7c:	c05ff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404b80:	87aa                	mv	a5,a0
20404b82:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404b86:	fec42783          	lw	a5,-20(s0)
20404b8a:	07b1                	addi	a5,a5,12
20404b8c:	4398                	lw	a4,0(a5)
20404b8e:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404b92:	fec42683          	lw	a3,-20(s0)
20404b96:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404b98:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404b9a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404b9c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404b9e:	853e                	mv	a0,a5
20404ba0:	50b2                	lw	ra,44(sp)
20404ba2:	5422                	lw	s0,40(sp)
20404ba4:	6145                	addi	sp,sp,48
20404ba6:	8082                	ret

20404ba8 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404ba8:	7179                	addi	sp,sp,-48
20404baa:	d606                	sw	ra,44(sp)
20404bac:	d422                	sw	s0,40(sp)
20404bae:	1800                	addi	s0,sp,48
20404bb0:	fca42e23          	sw	a0,-36(s0)
20404bb4:	fcb42c23          	sw	a1,-40(s0)
20404bb8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bbc:	fdc42503          	lw	a0,-36(s0)
20404bc0:	bc1ff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404bc4:	87aa                	mv	a5,a0
20404bc6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404bca:	fec42783          	lw	a5,-20(s0)
20404bce:	03c78793          	addi	a5,a5,60
20404bd2:	439c                	lw	a5,0(a5)
20404bd4:	fd842703          	lw	a4,-40(s0)
20404bd8:	fff74713          	not	a4,a4
20404bdc:	86ba                	mv	a3,a4
20404bde:	fec42703          	lw	a4,-20(s0)
20404be2:	03c70713          	addi	a4,a4,60
20404be6:	8ff5                	and	a5,a5,a3
20404be8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404bea:	fec42783          	lw	a5,-20(s0)
20404bee:	03878793          	addi	a5,a5,56
20404bf2:	4398                	lw	a4,0(a5)
20404bf4:	fd442783          	lw	a5,-44(s0)
20404bf8:	fec42683          	lw	a3,-20(s0)
20404bfc:	03868693          	addi	a3,a3,56 # 4000038 <__heap_size+0x3fff838>
20404c00:	8fd9                	or	a5,a5,a4
20404c02:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404c04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404c06:	853e                	mv	a0,a5
20404c08:	50b2                	lw	ra,44(sp)
20404c0a:	5422                	lw	s0,40(sp)
20404c0c:	6145                	addi	sp,sp,48
20404c0e:	8082                	ret

20404c10 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404c10:	7179                	addi	sp,sp,-48
20404c12:	d606                	sw	ra,44(sp)
20404c14:	d422                	sw	s0,40(sp)
20404c16:	1800                	addi	s0,sp,48
20404c18:	fca42e23          	sw	a0,-36(s0)
20404c1c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c20:	fdc42503          	lw	a0,-36(s0)
20404c24:	b5dff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404c28:	87aa                	mv	a5,a0
20404c2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404c2e:	fec42783          	lw	a5,-20(s0)
20404c32:	03878793          	addi	a5,a5,56
20404c36:	439c                	lw	a5,0(a5)
20404c38:	fd842703          	lw	a4,-40(s0)
20404c3c:	fff74713          	not	a4,a4
20404c40:	86ba                	mv	a3,a4
20404c42:	fec42703          	lw	a4,-20(s0)
20404c46:	03870713          	addi	a4,a4,56
20404c4a:	8ff5                	and	a5,a5,a3
20404c4c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404c4e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404c50:	853e                	mv	a0,a5
20404c52:	50b2                	lw	ra,44(sp)
20404c54:	5422                	lw	s0,40(sp)
20404c56:	6145                	addi	sp,sp,48
20404c58:	8082                	ret

20404c5a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404c5a:	7179                	addi	sp,sp,-48
20404c5c:	d606                	sw	ra,44(sp)
20404c5e:	d422                	sw	s0,40(sp)
20404c60:	1800                	addi	s0,sp,48
20404c62:	fca42e23          	sw	a0,-36(s0)
20404c66:	fcb42c23          	sw	a1,-40(s0)
20404c6a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c6e:	fdc42503          	lw	a0,-36(s0)
20404c72:	b0fff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404c76:	87aa                	mv	a5,a0
20404c78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404c7c:	fd442703          	lw	a4,-44(s0)
20404c80:	479d                	li	a5,7
20404c82:	1ce7e963          	bltu	a5,a4,20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404c86:	fd442783          	lw	a5,-44(s0)
20404c8a:	00279713          	slli	a4,a5,0x2
20404c8e:	204067b7          	lui	a5,0x20406
20404c92:	c2078793          	addi	a5,a5,-992 # 20405c20 <__metal_driver_vtable_riscv_plic0+0x4c>
20404c96:	97ba                	add	a5,a5,a4
20404c98:	439c                	lw	a5,0(a5)
20404c9a:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404c9c:	fec42783          	lw	a5,-20(s0)
20404ca0:	07e1                	addi	a5,a5,24
20404ca2:	439c                	lw	a5,0(a5)
20404ca4:	fd842703          	lw	a4,-40(s0)
20404ca8:	fff74713          	not	a4,a4
20404cac:	86ba                	mv	a3,a4
20404cae:	fec42703          	lw	a4,-20(s0)
20404cb2:	0761                	addi	a4,a4,24
20404cb4:	8ff5                	and	a5,a5,a3
20404cb6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404cb8:	fec42783          	lw	a5,-20(s0)
20404cbc:	02078793          	addi	a5,a5,32
20404cc0:	439c                	lw	a5,0(a5)
20404cc2:	fd842703          	lw	a4,-40(s0)
20404cc6:	fff74713          	not	a4,a4
20404cca:	86ba                	mv	a3,a4
20404ccc:	fec42703          	lw	a4,-20(s0)
20404cd0:	02070713          	addi	a4,a4,32
20404cd4:	8ff5                	and	a5,a5,a3
20404cd6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404cd8:	fec42783          	lw	a5,-20(s0)
20404cdc:	02878793          	addi	a5,a5,40
20404ce0:	439c                	lw	a5,0(a5)
20404ce2:	fd842703          	lw	a4,-40(s0)
20404ce6:	fff74713          	not	a4,a4
20404cea:	86ba                	mv	a3,a4
20404cec:	fec42703          	lw	a4,-20(s0)
20404cf0:	02870713          	addi	a4,a4,40
20404cf4:	8ff5                	and	a5,a5,a3
20404cf6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404cf8:	fec42783          	lw	a5,-20(s0)
20404cfc:	03078793          	addi	a5,a5,48
20404d00:	439c                	lw	a5,0(a5)
20404d02:	fd842703          	lw	a4,-40(s0)
20404d06:	fff74713          	not	a4,a4
20404d0a:	86ba                	mv	a3,a4
20404d0c:	fec42703          	lw	a4,-20(s0)
20404d10:	03070713          	addi	a4,a4,48
20404d14:	8ff5                	and	a5,a5,a3
20404d16:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404d18:	aa35                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404d1a:	fec42783          	lw	a5,-20(s0)
20404d1e:	07e1                	addi	a5,a5,24
20404d20:	4398                	lw	a4,0(a5)
20404d22:	fd842783          	lw	a5,-40(s0)
20404d26:	fec42683          	lw	a3,-20(s0)
20404d2a:	06e1                	addi	a3,a3,24
20404d2c:	8fd9                	or	a5,a5,a4
20404d2e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404d30:	a215                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404d32:	fec42783          	lw	a5,-20(s0)
20404d36:	02078793          	addi	a5,a5,32
20404d3a:	4398                	lw	a4,0(a5)
20404d3c:	fd842783          	lw	a5,-40(s0)
20404d40:	fec42683          	lw	a3,-20(s0)
20404d44:	02068693          	addi	a3,a3,32
20404d48:	8fd9                	or	a5,a5,a4
20404d4a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404d4c:	a221                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404d4e:	fec42783          	lw	a5,-20(s0)
20404d52:	07e1                	addi	a5,a5,24
20404d54:	4398                	lw	a4,0(a5)
20404d56:	fd842783          	lw	a5,-40(s0)
20404d5a:	fec42683          	lw	a3,-20(s0)
20404d5e:	06e1                	addi	a3,a3,24
20404d60:	8fd9                	or	a5,a5,a4
20404d62:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404d64:	fec42783          	lw	a5,-20(s0)
20404d68:	02078793          	addi	a5,a5,32
20404d6c:	4398                	lw	a4,0(a5)
20404d6e:	fd842783          	lw	a5,-40(s0)
20404d72:	fec42683          	lw	a3,-20(s0)
20404d76:	02068693          	addi	a3,a3,32
20404d7a:	8fd9                	or	a5,a5,a4
20404d7c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404d7e:	a8d9                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404d80:	fec42783          	lw	a5,-20(s0)
20404d84:	02878793          	addi	a5,a5,40
20404d88:	4398                	lw	a4,0(a5)
20404d8a:	fd842783          	lw	a5,-40(s0)
20404d8e:	fec42683          	lw	a3,-20(s0)
20404d92:	02868693          	addi	a3,a3,40
20404d96:	8fd9                	or	a5,a5,a4
20404d98:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404d9a:	a86d                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404d9c:	fec42783          	lw	a5,-20(s0)
20404da0:	03078793          	addi	a5,a5,48
20404da4:	4398                	lw	a4,0(a5)
20404da6:	fd842783          	lw	a5,-40(s0)
20404daa:	fec42683          	lw	a3,-20(s0)
20404dae:	03068693          	addi	a3,a3,48
20404db2:	8fd9                	or	a5,a5,a4
20404db4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404db6:	a879                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404db8:	fec42783          	lw	a5,-20(s0)
20404dbc:	02878793          	addi	a5,a5,40
20404dc0:	4398                	lw	a4,0(a5)
20404dc2:	fd842783          	lw	a5,-40(s0)
20404dc6:	fec42683          	lw	a3,-20(s0)
20404dca:	02868693          	addi	a3,a3,40
20404dce:	8fd9                	or	a5,a5,a4
20404dd0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404dd2:	fec42783          	lw	a5,-20(s0)
20404dd6:	03078793          	addi	a5,a5,48
20404dda:	4398                	lw	a4,0(a5)
20404ddc:	fd842783          	lw	a5,-40(s0)
20404de0:	fec42683          	lw	a3,-20(s0)
20404de4:	03068693          	addi	a3,a3,48
20404de8:	8fd9                	or	a5,a5,a4
20404dea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404dec:	a0a5                	j	20404e54 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404dee:	fec42783          	lw	a5,-20(s0)
20404df2:	07e1                	addi	a5,a5,24
20404df4:	4398                	lw	a4,0(a5)
20404df6:	fd842783          	lw	a5,-40(s0)
20404dfa:	fec42683          	lw	a3,-20(s0)
20404dfe:	06e1                	addi	a3,a3,24
20404e00:	8fd9                	or	a5,a5,a4
20404e02:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404e04:	fec42783          	lw	a5,-20(s0)
20404e08:	02078793          	addi	a5,a5,32
20404e0c:	4398                	lw	a4,0(a5)
20404e0e:	fd842783          	lw	a5,-40(s0)
20404e12:	fec42683          	lw	a3,-20(s0)
20404e16:	02068693          	addi	a3,a3,32
20404e1a:	8fd9                	or	a5,a5,a4
20404e1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404e1e:	fec42783          	lw	a5,-20(s0)
20404e22:	02878793          	addi	a5,a5,40
20404e26:	4398                	lw	a4,0(a5)
20404e28:	fd842783          	lw	a5,-40(s0)
20404e2c:	fec42683          	lw	a3,-20(s0)
20404e30:	02868693          	addi	a3,a3,40
20404e34:	8fd9                	or	a5,a5,a4
20404e36:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404e38:	fec42783          	lw	a5,-20(s0)
20404e3c:	03078793          	addi	a5,a5,48
20404e40:	4398                	lw	a4,0(a5)
20404e42:	fd842783          	lw	a5,-40(s0)
20404e46:	fec42683          	lw	a3,-20(s0)
20404e4a:	03068693          	addi	a3,a3,48
20404e4e:	8fd9                	or	a5,a5,a4
20404e50:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404e52:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404e54:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404e56:	853e                	mv	a0,a5
20404e58:	50b2                	lw	ra,44(sp)
20404e5a:	5422                	lw	s0,40(sp)
20404e5c:	6145                	addi	sp,sp,48
20404e5e:	8082                	ret

20404e60 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404e60:	7179                	addi	sp,sp,-48
20404e62:	d606                	sw	ra,44(sp)
20404e64:	d422                	sw	s0,40(sp)
20404e66:	1800                	addi	s0,sp,48
20404e68:	fca42e23          	sw	a0,-36(s0)
20404e6c:	fcb42c23          	sw	a1,-40(s0)
20404e70:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404e74:	fdc42503          	lw	a0,-36(s0)
20404e78:	909ff0ef          	jal	ra,20404780 <__metal_driver_sifive_gpio0_base>
20404e7c:	87aa                	mv	a5,a0
20404e7e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404e82:	fd442703          	lw	a4,-44(s0)
20404e86:	479d                	li	a5,7
20404e88:	14e7ea63          	bltu	a5,a4,20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404e8c:	fd442783          	lw	a5,-44(s0)
20404e90:	00279713          	slli	a4,a5,0x2
20404e94:	204067b7          	lui	a5,0x20406
20404e98:	c4078793          	addi	a5,a5,-960 # 20405c40 <__metal_driver_vtable_riscv_plic0+0x6c>
20404e9c:	97ba                	add	a5,a5,a4
20404e9e:	439c                	lw	a5,0(a5)
20404ea0:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404ea2:	fec42783          	lw	a5,-20(s0)
20404ea6:	07f1                	addi	a5,a5,28
20404ea8:	4398                	lw	a4,0(a5)
20404eaa:	fd842783          	lw	a5,-40(s0)
20404eae:	fec42683          	lw	a3,-20(s0)
20404eb2:	06f1                	addi	a3,a3,28
20404eb4:	8fd9                	or	a5,a5,a4
20404eb6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404eb8:	a215                	j	20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404eba:	fec42783          	lw	a5,-20(s0)
20404ebe:	02478793          	addi	a5,a5,36
20404ec2:	4398                	lw	a4,0(a5)
20404ec4:	fd842783          	lw	a5,-40(s0)
20404ec8:	fec42683          	lw	a3,-20(s0)
20404ecc:	02468693          	addi	a3,a3,36
20404ed0:	8fd9                	or	a5,a5,a4
20404ed2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404ed4:	a221                	j	20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404ed6:	fec42783          	lw	a5,-20(s0)
20404eda:	07f1                	addi	a5,a5,28
20404edc:	4398                	lw	a4,0(a5)
20404ede:	fd842783          	lw	a5,-40(s0)
20404ee2:	fec42683          	lw	a3,-20(s0)
20404ee6:	06f1                	addi	a3,a3,28
20404ee8:	8fd9                	or	a5,a5,a4
20404eea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404eec:	fec42783          	lw	a5,-20(s0)
20404ef0:	02478793          	addi	a5,a5,36
20404ef4:	4398                	lw	a4,0(a5)
20404ef6:	fd842783          	lw	a5,-40(s0)
20404efa:	fec42683          	lw	a3,-20(s0)
20404efe:	02468693          	addi	a3,a3,36
20404f02:	8fd9                	or	a5,a5,a4
20404f04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404f06:	a8d9                	j	20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404f08:	fec42783          	lw	a5,-20(s0)
20404f0c:	02c78793          	addi	a5,a5,44
20404f10:	4398                	lw	a4,0(a5)
20404f12:	fd842783          	lw	a5,-40(s0)
20404f16:	fec42683          	lw	a3,-20(s0)
20404f1a:	02c68693          	addi	a3,a3,44
20404f1e:	8fd9                	or	a5,a5,a4
20404f20:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404f22:	a86d                	j	20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404f24:	fec42783          	lw	a5,-20(s0)
20404f28:	03478793          	addi	a5,a5,52
20404f2c:	4398                	lw	a4,0(a5)
20404f2e:	fd842783          	lw	a5,-40(s0)
20404f32:	fec42683          	lw	a3,-20(s0)
20404f36:	03468693          	addi	a3,a3,52
20404f3a:	8fd9                	or	a5,a5,a4
20404f3c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404f3e:	a879                	j	20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404f40:	fec42783          	lw	a5,-20(s0)
20404f44:	02c78793          	addi	a5,a5,44
20404f48:	4398                	lw	a4,0(a5)
20404f4a:	fd842783          	lw	a5,-40(s0)
20404f4e:	fec42683          	lw	a3,-20(s0)
20404f52:	02c68693          	addi	a3,a3,44
20404f56:	8fd9                	or	a5,a5,a4
20404f58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404f5a:	fec42783          	lw	a5,-20(s0)
20404f5e:	03478793          	addi	a5,a5,52
20404f62:	4398                	lw	a4,0(a5)
20404f64:	fd842783          	lw	a5,-40(s0)
20404f68:	fec42683          	lw	a3,-20(s0)
20404f6c:	03468693          	addi	a3,a3,52
20404f70:	8fd9                	or	a5,a5,a4
20404f72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404f74:	a0a5                	j	20404fdc <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404f76:	fec42783          	lw	a5,-20(s0)
20404f7a:	07f1                	addi	a5,a5,28
20404f7c:	4398                	lw	a4,0(a5)
20404f7e:	fd842783          	lw	a5,-40(s0)
20404f82:	fec42683          	lw	a3,-20(s0)
20404f86:	06f1                	addi	a3,a3,28
20404f88:	8fd9                	or	a5,a5,a4
20404f8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404f8c:	fec42783          	lw	a5,-20(s0)
20404f90:	02478793          	addi	a5,a5,36
20404f94:	4398                	lw	a4,0(a5)
20404f96:	fd842783          	lw	a5,-40(s0)
20404f9a:	fec42683          	lw	a3,-20(s0)
20404f9e:	02468693          	addi	a3,a3,36
20404fa2:	8fd9                	or	a5,a5,a4
20404fa4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404fa6:	fec42783          	lw	a5,-20(s0)
20404faa:	02c78793          	addi	a5,a5,44
20404fae:	4398                	lw	a4,0(a5)
20404fb0:	fd842783          	lw	a5,-40(s0)
20404fb4:	fec42683          	lw	a3,-20(s0)
20404fb8:	02c68693          	addi	a3,a3,44
20404fbc:	8fd9                	or	a5,a5,a4
20404fbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404fc0:	fec42783          	lw	a5,-20(s0)
20404fc4:	03478793          	addi	a5,a5,52
20404fc8:	4398                	lw	a4,0(a5)
20404fca:	fd842783          	lw	a5,-40(s0)
20404fce:	fec42683          	lw	a3,-20(s0)
20404fd2:	03468693          	addi	a3,a3,52
20404fd6:	8fd9                	or	a5,a5,a4
20404fd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404fda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404fdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404fde:	853e                	mv	a0,a5
20404fe0:	50b2                	lw	ra,44(sp)
20404fe2:	5422                	lw	s0,40(sp)
20404fe4:	6145                	addi	sp,sp,48
20404fe6:	8082                	ret

20404fe8 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404fe8:	1101                	addi	sp,sp,-32
20404fea:	ce06                	sw	ra,28(sp)
20404fec:	cc22                	sw	s0,24(sp)
20404fee:	1000                	addi	s0,sp,32
20404ff0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404ff4:	fec42503          	lw	a0,-20(s0)
20404ff8:	faeff0ef          	jal	ra,204047a6 <__metal_driver_sifive_gpio0_interrupt_parent>
20404ffc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404ffe:	853e                	mv	a0,a5
20405000:	40f2                	lw	ra,28(sp)
20405002:	4462                	lw	s0,24(sp)
20405004:	6105                	addi	sp,sp,32
20405006:	8082                	ret

20405008 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20405008:	7179                	addi	sp,sp,-48
2040500a:	d606                	sw	ra,44(sp)
2040500c:	d422                	sw	s0,40(sp)
2040500e:	1800                	addi	s0,sp,48
20405010:	fca42e23          	sw	a0,-36(s0)
20405014:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20405018:	fd842583          	lw	a1,-40(s0)
2040501c:	fdc42503          	lw	a0,-36(s0)
20405020:	fb0ff0ef          	jal	ra,204047d0 <__metal_driver_sifive_gpio0_interrupt_lines>
20405024:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20405028:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
2040502c:	853e                	mv	a0,a5
2040502e:	50b2                	lw	ra,44(sp)
20405030:	5422                	lw	s0,40(sp)
20405032:	6145                	addi	sp,sp,48
20405034:	8082                	ret

20405036 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20405036:	1101                	addi	sp,sp,-32
20405038:	ce22                	sw	s0,28(sp)
2040503a:	1000                	addi	s0,sp,32
2040503c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405040:	fec42703          	lw	a4,-20(s0)
20405044:	800007b7          	lui	a5,0x80000
20405048:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
2040504c:	00f71563          	bne	a4,a5,20405056 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20405050:	100137b7          	lui	a5,0x10013
20405054:	a011                	j	20405058 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20405056:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20405058:	853e                	mv	a0,a5
2040505a:	4472                	lw	s0,28(sp)
2040505c:	6105                	addi	sp,sp,32
2040505e:	8082                	ret

20405060 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20405060:	1101                	addi	sp,sp,-32
20405062:	ce22                	sw	s0,28(sp)
20405064:	1000                	addi	s0,sp,32
20405066:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040506a:	fec42703          	lw	a4,-20(s0)
2040506e:	800007b7          	lui	a5,0x80000
20405072:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20405076:	00f71763          	bne	a4,a5,20405084 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040507a:	800007b7          	lui	a5,0x80000
2040507e:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
20405082:	a011                	j	20405086 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20405084:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20405086:	853e                	mv	a0,a5
20405088:	4472                	lw	s0,28(sp)
2040508a:	6105                	addi	sp,sp,32
2040508c:	8082                	ret

2040508e <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
2040508e:	1101                	addi	sp,sp,-32
20405090:	ce22                	sw	s0,28(sp)
20405092:	1000                	addi	s0,sp,32
20405094:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405098:	fec42703          	lw	a4,-20(s0)
2040509c:	800007b7          	lui	a5,0x80000
204050a0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
204050a4:	00f71463          	bne	a4,a5,204050ac <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
204050a8:	4795                	li	a5,5
204050aa:	a011                	j	204050ae <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
204050ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
204050ae:	853e                	mv	a0,a5
204050b0:	4472                	lw	s0,28(sp)
204050b2:	6105                	addi	sp,sp,32
204050b4:	8082                	ret

204050b6 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
204050b6:	1101                	addi	sp,sp,-32
204050b8:	ce22                	sw	s0,28(sp)
204050ba:	1000                	addi	s0,sp,32
204050bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204050c0:	fec42703          	lw	a4,-20(s0)
204050c4:	800007b7          	lui	a5,0x80000
204050c8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
204050cc:	00f71763          	bne	a4,a5,204050da <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
204050d0:	800007b7          	lui	a5,0x80000
204050d4:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xfff9fd94>
204050d8:	a011                	j	204050dc <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
204050da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
204050dc:	853e                	mv	a0,a5
204050de:	4472                	lw	s0,28(sp)
204050e0:	6105                	addi	sp,sp,32
204050e2:	8082                	ret

204050e4 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
204050e4:	1101                	addi	sp,sp,-32
204050e6:	ce22                	sw	s0,28(sp)
204050e8:	1000                	addi	s0,sp,32
204050ea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204050ee:	fec42703          	lw	a4,-20(s0)
204050f2:	800007b7          	lui	a5,0x80000
204050f6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
204050fa:	00f71563          	bne	a4,a5,20405104 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
204050fe:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20405102:	a011                	j	20405106 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20405104:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20405106:	853e                	mv	a0,a5
20405108:	4472                	lw	s0,28(sp)
2040510a:	6105                	addi	sp,sp,32
2040510c:	8082                	ret

2040510e <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
2040510e:	1101                	addi	sp,sp,-32
20405110:	ce22                	sw	s0,28(sp)
20405112:	1000                	addi	s0,sp,32
20405114:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405118:	fec42703          	lw	a4,-20(s0)
2040511c:	800007b7          	lui	a5,0x80000
20405120:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20405124:	00f71563          	bne	a4,a5,2040512e <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20405128:	000307b7          	lui	a5,0x30
2040512c:	a011                	j	20405130 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
2040512e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20405130:	853e                	mv	a0,a5
20405132:	4472                	lw	s0,28(sp)
20405134:	6105                	addi	sp,sp,32
20405136:	8082                	ret

20405138 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20405138:	1101                	addi	sp,sp,-32
2040513a:	ce22                	sw	s0,28(sp)
2040513c:	1000                	addi	s0,sp,32
2040513e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405142:	fec42703          	lw	a4,-20(s0)
20405146:	800007b7          	lui	a5,0x80000
2040514a:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
2040514e:	00f71563          	bne	a4,a5,20405158 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20405152:	000307b7          	lui	a5,0x30
20405156:	a011                	j	2040515a <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20405158:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
2040515a:	853e                	mv	a0,a5
2040515c:	4472                	lw	s0,28(sp)
2040515e:	6105                	addi	sp,sp,32
20405160:	8082                	ret

20405162 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20405162:	1101                	addi	sp,sp,-32
20405164:	ce06                	sw	ra,28(sp)
20405166:	cc22                	sw	s0,24(sp)
20405168:	1000                	addi	s0,sp,32
2040516a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
2040516e:	fec42503          	lw	a0,-20(s0)
20405172:	35fd                	jal	20405060 <__metal_driver_sifive_uart0_interrupt_parent>
20405174:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20405176:	853e                	mv	a0,a5
20405178:	40f2                	lw	ra,28(sp)
2040517a:	4462                	lw	s0,24(sp)
2040517c:	6105                	addi	sp,sp,32
2040517e:	8082                	ret

20405180 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20405180:	1101                	addi	sp,sp,-32
20405182:	ce06                	sw	ra,28(sp)
20405184:	cc22                	sw	s0,24(sp)
20405186:	1000                	addi	s0,sp,32
20405188:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
2040518c:	fec42503          	lw	a0,-20(s0)
20405190:	3dfd                	jal	2040508e <__metal_driver_sifive_uart0_interrupt_line>
20405192:	87aa                	mv	a5,a0
20405194:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405198:	853e                	mv	a0,a5
2040519a:	40f2                	lw	ra,28(sp)
2040519c:	4462                	lw	s0,24(sp)
2040519e:	6105                	addi	sp,sp,32
204051a0:	8082                	ret

204051a2 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
204051a2:	7179                	addi	sp,sp,-48
204051a4:	d606                	sw	ra,44(sp)
204051a6:	d422                	sw	s0,40(sp)
204051a8:	1800                	addi	s0,sp,48
204051aa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
204051ae:	fdc42503          	lw	a0,-36(s0)
204051b2:	3551                	jal	20405036 <__metal_driver_sifive_uart0_control_base>
204051b4:	87aa                	mv	a5,a0
204051b6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
204051ba:	fec42783          	lw	a5,-20(s0)
204051be:	439c                	lw	a5,0(a5)
204051c0:	fff7c793          	not	a5,a5
204051c4:	83fd                	srli	a5,a5,0x1f
204051c6:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
204051ca:	853e                	mv	a0,a5
204051cc:	50b2                	lw	ra,44(sp)
204051ce:	5422                	lw	s0,40(sp)
204051d0:	6145                	addi	sp,sp,48
204051d2:	8082                	ret

204051d4 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
204051d4:	7179                	addi	sp,sp,-48
204051d6:	d606                	sw	ra,44(sp)
204051d8:	d422                	sw	s0,40(sp)
204051da:	1800                	addi	s0,sp,48
204051dc:	fca42e23          	sw	a0,-36(s0)
204051e0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204051e4:	fdc42503          	lw	a0,-36(s0)
204051e8:	35b9                	jal	20405036 <__metal_driver_sifive_uart0_control_base>
204051ea:	87aa                	mv	a5,a0
204051ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
204051f0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
204051f2:	fdc42503          	lw	a0,-36(s0)
204051f6:	3775                	jal	204051a2 <__metal_driver_sifive_uart0_txready>
204051f8:	87aa                	mv	a5,a0
204051fa:	dfe5                	beqz	a5,204051f2 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
204051fc:	fec42783          	lw	a5,-20(s0)
20405200:	fd842703          	lw	a4,-40(s0)
20405204:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20405206:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20405208:	853e                	mv	a0,a5
2040520a:	50b2                	lw	ra,44(sp)
2040520c:	5422                	lw	s0,40(sp)
2040520e:	6145                	addi	sp,sp,48
20405210:	8082                	ret

20405212 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20405212:	7179                	addi	sp,sp,-48
20405214:	d606                	sw	ra,44(sp)
20405216:	d422                	sw	s0,40(sp)
20405218:	1800                	addi	s0,sp,48
2040521a:	fca42e23          	sw	a0,-36(s0)
2040521e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405222:	fdc42503          	lw	a0,-36(s0)
20405226:	3d01                	jal	20405036 <__metal_driver_sifive_uart0_control_base>
20405228:	87aa                	mv	a5,a0
2040522a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
2040522e:	fec42783          	lw	a5,-20(s0)
20405232:	0791                	addi	a5,a5,4
20405234:	439c                	lw	a5,0(a5)
20405236:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
2040523a:	fe842783          	lw	a5,-24(s0)
2040523e:	0007d763          	bgez	a5,2040524c <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20405242:	fd842783          	lw	a5,-40(s0)
20405246:	577d                	li	a4,-1
20405248:	c398                	sw	a4,0(a5)
2040524a:	a801                	j	2040525a <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
2040524c:	fe842783          	lw	a5,-24(s0)
20405250:	0ff7f713          	andi	a4,a5,255
20405254:	fd842783          	lw	a5,-40(s0)
20405258:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
2040525a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
2040525c:	853e                	mv	a0,a5
2040525e:	50b2                	lw	ra,44(sp)
20405260:	5422                	lw	s0,40(sp)
20405262:	6145                	addi	sp,sp,48
20405264:	8082                	ret

20405266 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20405266:	7179                	addi	sp,sp,-48
20405268:	d622                	sw	s0,44(sp)
2040526a:	1800                	addi	s0,sp,48
2040526c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405270:	fdc42783          	lw	a5,-36(s0)
20405274:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405278:	fec42783          	lw	a5,-20(s0)
2040527c:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040527e:	853e                	mv	a0,a5
20405280:	5432                	lw	s0,44(sp)
20405282:	6145                	addi	sp,sp,48
20405284:	8082                	ret

20405286 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405286:	7179                	addi	sp,sp,-48
20405288:	d606                	sw	ra,44(sp)
2040528a:	d422                	sw	s0,40(sp)
2040528c:	1800                	addi	s0,sp,48
2040528e:	fca42e23          	sw	a0,-36(s0)
20405292:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405296:	fdc42783          	lw	a5,-36(s0)
2040529a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040529e:	fdc42503          	lw	a0,-36(s0)
204052a2:	d95ff0ef          	jal	ra,20405036 <__metal_driver_sifive_uart0_control_base>
204052a6:	87aa                	mv	a5,a0
204052a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204052ac:	fdc42503          	lw	a0,-36(s0)
204052b0:	3519                	jal	204050b6 <__metal_driver_sifive_uart0_clock>
204052b2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204052b6:	fd842703          	lw	a4,-40(s0)
204052ba:	fec42783          	lw	a5,-20(s0)
204052be:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204052c0:	fe442783          	lw	a5,-28(s0)
204052c4:	cbb1                	beqz	a5,20405318 <__metal_driver_sifive_uart0_set_baud_rate+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204052c6:	fe442783          	lw	a5,-28(s0)
204052ca:	439c                	lw	a5,0(a5)
204052cc:	439c                	lw	a5,0(a5)
204052ce:	fe442503          	lw	a0,-28(s0)
204052d2:	9782                	jalr	a5
204052d4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204052d8:	fe042703          	lw	a4,-32(s0)
204052dc:	fd842783          	lw	a5,-40(s0)
204052e0:	02f747b3          	div	a5,a4,a5
204052e4:	fff78713          	addi	a4,a5,-1
204052e8:	fe842783          	lw	a5,-24(s0)
204052ec:	07e1                	addi	a5,a5,24
204052ee:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
204052f0:	fe842783          	lw	a5,-24(s0)
204052f4:	07a1                	addi	a5,a5,8
204052f6:	439c                	lw	a5,0(a5)
204052f8:	fe842703          	lw	a4,-24(s0)
204052fc:	0721                	addi	a4,a4,8
204052fe:	0017e793          	ori	a5,a5,1
20405302:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405304:	fe842783          	lw	a5,-24(s0)
20405308:	07b1                	addi	a5,a5,12
2040530a:	439c                	lw	a5,0(a5)
2040530c:	fe842703          	lw	a4,-24(s0)
20405310:	0731                	addi	a4,a4,12
20405312:	0017e793          	ori	a5,a5,1
20405316:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405318:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
2040531a:	853e                	mv	a0,a5
2040531c:	50b2                	lw	ra,44(sp)
2040531e:	5422                	lw	s0,40(sp)
20405320:	6145                	addi	sp,sp,48
20405322:	8082                	ret

20405324 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405324:	7139                	addi	sp,sp,-64
20405326:	de06                	sw	ra,60(sp)
20405328:	dc22                	sw	s0,56(sp)
2040532a:	0080                	addi	s0,sp,64
2040532c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20405330:	fcc42783          	lw	a5,-52(s0)
20405334:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405338:	fcc42503          	lw	a0,-52(s0)
2040533c:	cfbff0ef          	jal	ra,20405036 <__metal_driver_sifive_uart0_control_base>
20405340:	87aa                	mv	a5,a0
20405342:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405346:	fcc42503          	lw	a0,-52(s0)
2040534a:	d6dff0ef          	jal	ra,204050b6 <__metal_driver_sifive_uart0_clock>
2040534e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20405352:	fe842783          	lw	a5,-24(s0)
20405356:	07a1                	addi	a5,a5,8
20405358:	4398                	lw	a4,0(a5)
2040535a:	fe842783          	lw	a5,-24(s0)
2040535e:	07a1                	addi	a5,a5,8
20405360:	86be                	mv	a3,a5
20405362:	fff907b7          	lui	a5,0xfff90
20405366:	17fd                	addi	a5,a5,-1
20405368:	8ff9                	and	a5,a5,a4
2040536a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
2040536c:	fe842783          	lw	a5,-24(s0)
20405370:	07a1                	addi	a5,a5,8
20405372:	4398                	lw	a4,0(a5)
20405374:	fe842783          	lw	a5,-24(s0)
20405378:	07a1                	addi	a5,a5,8
2040537a:	86be                	mv	a3,a5
2040537c:	67c1                	lui	a5,0x10
2040537e:	8fd9                	or	a5,a5,a4
20405380:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405382:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405384:	fe842783          	lw	a5,-24(s0)
20405388:	07d1                	addi	a5,a5,20
2040538a:	439c                	lw	a5,0(a5)
2040538c:	8b85                	andi	a5,a5,1
2040538e:	dbfd                	beqz	a5,20405384 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20405390:	fe842783          	lw	a5,-24(s0)
20405394:	07a1                	addi	a5,a5,8
20405396:	439c                	lw	a5,0(a5)
20405398:	8b89                	andi	a5,a5,2
2040539a:	c399                	beqz	a5,204053a0 <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
2040539c:	47a5                	li	a5,9
2040539e:	a011                	j	204053a2 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
204053a0:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
204053a2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
204053a6:	fe442783          	lw	a5,-28(s0)
204053aa:	439c                	lw	a5,0(a5)
204053ac:	439c                	lw	a5,0(a5)
204053ae:	fe442503          	lw	a0,-28(s0)
204053b2:	9782                	jalr	a5
204053b4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204053b8:	fe042703          	lw	a4,-32(s0)
204053bc:	fdc42783          	lw	a5,-36(s0)
204053c0:	02f707b3          	mul	a5,a4,a5
204053c4:	873e                	mv	a4,a5
204053c6:	fec42783          	lw	a5,-20(s0)
204053ca:	43dc                	lw	a5,4(a5)
204053cc:	02f757b3          	divu	a5,a4,a5
204053d0:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204053d4:	fc042a23          	sw	zero,-44(s0)
204053d8:	a039                	j	204053e6 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204053da:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204053dc:	fd442783          	lw	a5,-44(s0)
204053e0:	0785                	addi	a5,a5,1
204053e2:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204053e6:	fd442783          	lw	a5,-44(s0)
204053ea:	fd842703          	lw	a4,-40(s0)
204053ee:	fee7c6e3          	blt	a5,a4,204053da <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
204053f2:	0001                	nop
204053f4:	50f2                	lw	ra,60(sp)
204053f6:	5462                	lw	s0,56(sp)
204053f8:	6121                	addi	sp,sp,64
204053fa:	8082                	ret

204053fc <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
204053fc:	7179                	addi	sp,sp,-48
204053fe:	d606                	sw	ra,44(sp)
20405400:	d422                	sw	s0,40(sp)
20405402:	1800                	addi	s0,sp,48
20405404:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405408:	fdc42783          	lw	a5,-36(s0)
2040540c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405410:	fec42703          	lw	a4,-20(s0)
20405414:	fec42783          	lw	a5,-20(s0)
20405418:	43dc                	lw	a5,4(a5)
2040541a:	85be                	mv	a1,a5
2040541c:	853a                	mv	a0,a4
2040541e:	df7fc0ef          	jal	ra,20402214 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20405422:	0001                	nop
20405424:	50b2                	lw	ra,44(sp)
20405426:	5422                	lw	s0,40(sp)
20405428:	6145                	addi	sp,sp,48
2040542a:	8082                	ret

2040542c <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
2040542c:	7139                	addi	sp,sp,-64
2040542e:	de06                	sw	ra,60(sp)
20405430:	dc22                	sw	s0,56(sp)
20405432:	0080                	addi	s0,sp,64
20405434:	fca42623          	sw	a0,-52(s0)
20405438:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
2040543c:	fcc42783          	lw	a5,-52(s0)
20405440:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405444:	fcc42503          	lw	a0,-52(s0)
20405448:	c6fff0ef          	jal	ra,204050b6 <__metal_driver_sifive_uart0_clock>
2040544c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20405450:	fcc42503          	lw	a0,-52(s0)
20405454:	c91ff0ef          	jal	ra,204050e4 <__metal_driver_sifive_uart0_pinmux>
20405458:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
2040545c:	fe842783          	lw	a5,-24(s0)
20405460:	c7b9                	beqz	a5,204054ae <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20405462:	fec42783          	lw	a5,-20(s0)
20405466:	20405737          	lui	a4,0x20405
2040546a:	32470713          	addi	a4,a4,804 # 20405324 <pre_rate_change_callback_func>
2040546e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20405470:	fec42783          	lw	a5,-20(s0)
20405474:	fcc42703          	lw	a4,-52(s0)
20405478:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
2040547a:	fec42783          	lw	a5,-20(s0)
2040547e:	07a1                	addi	a5,a5,8
20405480:	85be                	mv	a1,a5
20405482:	fe842503          	lw	a0,-24(s0)
20405486:	20f1                	jal	20405552 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405488:	fec42783          	lw	a5,-20(s0)
2040548c:	20405737          	lui	a4,0x20405
20405490:	3fc70713          	addi	a4,a4,1020 # 204053fc <post_rate_change_callback_func>
20405494:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405496:	fec42783          	lw	a5,-20(s0)
2040549a:	fcc42703          	lw	a4,-52(s0)
2040549e:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
204054a0:	fec42783          	lw	a5,-20(s0)
204054a4:	07d1                	addi	a5,a5,20
204054a6:	85be                	mv	a1,a5
204054a8:	fe842503          	lw	a0,-24(s0)
204054ac:	28d9                	jal	20405582 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
204054ae:	fec42783          	lw	a5,-20(s0)
204054b2:	fc842583          	lw	a1,-56(s0)
204054b6:	853e                	mv	a0,a5
204054b8:	d5dfc0ef          	jal	ra,20402214 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204054bc:	fe442783          	lw	a5,-28(s0)
204054c0:	cb95                	beqz	a5,204054f4 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204054c2:	fcc42503          	lw	a0,-52(s0)
204054c6:	c49ff0ef          	jal	ra,2040510e <__metal_driver_sifive_uart0_pinmux_output_selector>
204054ca:	87aa                	mv	a5,a0
204054cc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204054d0:	fcc42503          	lw	a0,-52(s0)
204054d4:	c65ff0ef          	jal	ra,20405138 <__metal_driver_sifive_uart0_pinmux_source_selector>
204054d8:	87aa                	mv	a5,a0
204054da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204054de:	fe442783          	lw	a5,-28(s0)
204054e2:	439c                	lw	a5,0(a5)
204054e4:	53dc                	lw	a5,36(a5)
204054e6:	fdc42603          	lw	a2,-36(s0)
204054ea:	fe042583          	lw	a1,-32(s0)
204054ee:	fe442503          	lw	a0,-28(s0)
204054f2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
204054f4:	0001                	nop
204054f6:	50f2                	lw	ra,60(sp)
204054f8:	5462                	lw	s0,56(sp)
204054fa:	6121                	addi	sp,sp,64
204054fc:	8082                	ret

204054fe <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
204054fe:	7179                	addi	sp,sp,-48
20405500:	d622                	sw	s0,44(sp)
20405502:	1800                	addi	s0,sp,48
20405504:	fca42e23          	sw	a0,-36(s0)
20405508:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040550c:	fd842783          	lw	a5,-40(s0)
20405510:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405514:	fdc42783          	lw	a5,-36(s0)
20405518:	e781                	bnez	a5,20405520 <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
2040551a:	fd842783          	lw	a5,-40(s0)
2040551e:	a035                	j	2040554a <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20405520:	fdc42783          	lw	a5,-36(s0)
20405524:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405528:	a031                	j	20405534 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
2040552a:	fec42783          	lw	a5,-20(s0)
2040552e:	479c                	lw	a5,8(a5)
20405530:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405534:	fec42783          	lw	a5,-20(s0)
20405538:	479c                	lw	a5,8(a5)
2040553a:	fbe5                	bnez	a5,2040552a <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
2040553c:	fec42783          	lw	a5,-20(s0)
20405540:	fd842703          	lw	a4,-40(s0)
20405544:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405546:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
2040554a:	853e                	mv	a0,a5
2040554c:	5432                	lw	s0,44(sp)
2040554e:	6145                	addi	sp,sp,48
20405550:	8082                	ret

20405552 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405552:	1101                	addi	sp,sp,-32
20405554:	ce06                	sw	ra,28(sp)
20405556:	cc22                	sw	s0,24(sp)
20405558:	1000                	addi	s0,sp,32
2040555a:	fea42623          	sw	a0,-20(s0)
2040555e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20405562:	fec42783          	lw	a5,-20(s0)
20405566:	43dc                	lw	a5,4(a5)
20405568:	fe842583          	lw	a1,-24(s0)
2040556c:	853e                	mv	a0,a5
2040556e:	3f41                	jal	204054fe <_metal_clock_append_to_callbacks>
20405570:	872a                	mv	a4,a0
20405572:	fec42783          	lw	a5,-20(s0)
20405576:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405578:	0001                	nop
2040557a:	40f2                	lw	ra,28(sp)
2040557c:	4462                	lw	s0,24(sp)
2040557e:	6105                	addi	sp,sp,32
20405580:	8082                	ret

20405582 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405582:	1101                	addi	sp,sp,-32
20405584:	ce06                	sw	ra,28(sp)
20405586:	cc22                	sw	s0,24(sp)
20405588:	1000                	addi	s0,sp,32
2040558a:	fea42623          	sw	a0,-20(s0)
2040558e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405592:	fec42783          	lw	a5,-20(s0)
20405596:	479c                	lw	a5,8(a5)
20405598:	fe842583          	lw	a1,-24(s0)
2040559c:	853e                	mv	a0,a5
2040559e:	3785                	jal	204054fe <_metal_clock_append_to_callbacks>
204055a0:	872a                	mv	a4,a0
204055a2:	fec42783          	lw	a5,-20(s0)
204055a6:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
204055a8:	0001                	nop
204055aa:	40f2                	lw	ra,28(sp)
204055ac:	4462                	lw	s0,24(sp)
204055ae:	6105                	addi	sp,sp,32
204055b0:	8082                	ret

204055b2 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
204055b2:	1101                	addi	sp,sp,-32
204055b4:	ce06                	sw	ra,28(sp)
204055b6:	cc22                	sw	s0,24(sp)
204055b8:	1000                	addi	s0,sp,32
204055ba:	fea42623          	sw	a0,-20(s0)
204055be:	fec42783          	lw	a5,-20(s0)
204055c2:	439c                	lw	a5,0(a5)
204055c4:	57dc                	lw	a5,44(a5)
204055c6:	fec42503          	lw	a0,-20(s0)
204055ca:	9782                	jalr	a5
204055cc:	87aa                	mv	a5,a0
204055ce:	853e                	mv	a0,a5
204055d0:	40f2                	lw	ra,28(sp)
204055d2:	4462                	lw	s0,24(sp)
204055d4:	6105                	addi	sp,sp,32
204055d6:	8082                	ret

204055d8 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204055d8:	1101                	addi	sp,sp,-32
204055da:	ce22                	sw	s0,28(sp)
204055dc:	1000                	addi	s0,sp,32
204055de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204055e2:	fec42783          	lw	a5,-20(s0)
204055e6:	eb89                	bnez	a5,204055f8 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204055e8:	fec42703          	lw	a4,-20(s0)
204055ec:	070a                	slli	a4,a4,0x2
204055ee:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204055f2:	97ba                	add	a5,a5,a4
204055f4:	439c                	lw	a5,0(a5)
204055f6:	a011                	j	204055fa <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
204055f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
204055fa:	853e                	mv	a0,a5
204055fc:	4472                	lw	s0,28(sp)
204055fe:	6105                	addi	sp,sp,32
20405600:	8082                	ret

20405602 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405602:	1101                	addi	sp,sp,-32
20405604:	ce22                	sw	s0,28(sp)
20405606:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405608:	f14027f3          	csrr	a5,mhartid
2040560c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20405610:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405614:	853e                	mv	a0,a5
20405616:	4472                	lw	s0,28(sp)
20405618:	6105                	addi	sp,sp,32
2040561a:	8082                	ret

2040561c <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
2040561c:	1101                	addi	sp,sp,-32
2040561e:	ce22                	sw	s0,28(sp)
20405620:	1000                	addi	s0,sp,32
20405622:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405626:	0001                	nop
20405628:	bffd                	j	20405626 <metal_shutdown+0xa>
	...

20405680 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405680:	cecfd06f          	j	20402b6c <metal_interrupt_vector_handler>

20405684 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405684:	ce8fd06f          	j	20402b6c <metal_interrupt_vector_handler>

20405688 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405688:	ce4fd06f          	j	20402b6c <metal_interrupt_vector_handler>

2040568c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040568c:	d0efd06f          	j	20402b9a <metal_software_interrupt_vector_handler>

20405690 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405690:	cdcfd06f          	j	20402b6c <metal_interrupt_vector_handler>

20405694 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405694:	cd8fd06f          	j	20402b6c <metal_interrupt_vector_handler>

20405698 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405698:	cd4fd06f          	j	20402b6c <metal_interrupt_vector_handler>

2040569c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040569c:	df0fd06f          	j	20402c8c <metal_timer_interrupt_vector_handler>

204056a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204056a0:	cccfd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204056a4:	cc8fd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204056a8:	cc4fd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204056ac:	cc0fd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204056b0:	cbcfd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204056b4:	cb8fd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204056b8:	cb4fd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204056bc:	cb0fd06f          	j	20402b6c <metal_interrupt_vector_handler>

204056c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204056c0:	835fd06f          	j	20402ef4 <metal_lc0_interrupt_vector_handler>

204056c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204056c4:	8c3fd06f          	j	20402f86 <metal_lc1_interrupt_vector_handler>

204056c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204056c8:	951fd06f          	j	20403018 <metal_lc2_interrupt_vector_handler>

204056cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204056cc:	9dffd06f          	j	204030aa <metal_lc3_interrupt_vector_handler>

204056d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204056d0:	a6dfd06f          	j	2040313c <metal_lc4_interrupt_vector_handler>

204056d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204056d4:	afbfd06f          	j	204031ce <metal_lc5_interrupt_vector_handler>

204056d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204056d8:	b89fd06f          	j	20403260 <metal_lc6_interrupt_vector_handler>

204056dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204056dc:	c17fd06f          	j	204032f2 <metal_lc7_interrupt_vector_handler>

204056e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204056e0:	ca5fd06f          	j	20403384 <metal_lc8_interrupt_vector_handler>

204056e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204056e4:	d33fd06f          	j	20403416 <metal_lc9_interrupt_vector_handler>

204056e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204056e8:	dc1fd06f          	j	204034a8 <metal_lc10_interrupt_vector_handler>

204056ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204056ec:	e4ffd06f          	j	2040353a <metal_lc11_interrupt_vector_handler>

204056f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204056f0:	eddfd06f          	j	204035cc <metal_lc12_interrupt_vector_handler>

204056f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204056f4:	f6bfd06f          	j	2040365e <metal_lc13_interrupt_vector_handler>

204056f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204056f8:	ff9fd06f          	j	204036f0 <metal_lc14_interrupt_vector_handler>

204056fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204056fc:	886fe06f          	j	20403782 <metal_lc15_interrupt_vector_handler>

20405700 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405700:	1101                	addi	sp,sp,-32
20405702:	ce22                	sw	s0,28(sp)
20405704:	1000                	addi	s0,sp,32
20405706:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040570a:	fec42703          	lw	a4,-20(s0)
2040570e:	800007b7          	lui	a5,0x80000
20405712:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xfff9fd94>
20405716:	00f71763          	bne	a4,a5,20405724 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040571a:	03dfd7b7          	lui	a5,0x3dfd
2040571e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405722:	a011                	j	20405726 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405724:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405726:	853e                	mv	a0,a5
20405728:	4472                	lw	s0,28(sp)
2040572a:	6105                	addi	sp,sp,32
2040572c:	8082                	ret

2040572e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040572e:	1101                	addi	sp,sp,-32
20405730:	ce06                	sw	ra,28(sp)
20405732:	cc22                	sw	s0,24(sp)
20405734:	1000                	addi	s0,sp,32
20405736:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040573a:	fec42503          	lw	a0,-20(s0)
2040573e:	37c9                	jal	20405700 <__metal_driver_fixed_clock_rate>
20405740:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405742:	853e                	mv	a0,a5
20405744:	40f2                	lw	ra,28(sp)
20405746:	4462                	lw	s0,24(sp)
20405748:	6105                	addi	sp,sp,32
2040574a:	8082                	ret

2040574c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040574c:	1101                	addi	sp,sp,-32
2040574e:	ce06                	sw	ra,28(sp)
20405750:	cc22                	sw	s0,24(sp)
20405752:	1000                	addi	s0,sp,32
20405754:	fea42623          	sw	a0,-20(s0)
20405758:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040575c:	fec42503          	lw	a0,-20(s0)
20405760:	37f9                	jal	2040572e <__metal_driver_fixed_clock_get_rate_hz>
20405762:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405764:	853e                	mv	a0,a5
20405766:	40f2                	lw	ra,28(sp)
20405768:	4462                	lw	s0,24(sp)
2040576a:	6105                	addi	sp,sp,32
2040576c:	8082                	ret

2040576e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040576e:	1101                	addi	sp,sp,-32
20405770:	ce06                	sw	ra,28(sp)
20405772:	cc22                	sw	s0,24(sp)
20405774:	1000                	addi	s0,sp,32
20405776:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040577a:	fec42503          	lw	a0,-20(s0)
2040577e:	3d79                	jal	2040561c <metal_shutdown>
