
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/debug/matmul.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/debug/matmul.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005bc4 memsz 0x00005bc4 flags rwx
    LOAD off    0x00007770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x0005fb5c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405bc8 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             0000019c  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005480  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000540  20405680  20405680  00006680  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405bc0  20405bc0  00006bc0  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405bc8  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0005ef5c  80000770  80000770  00007770  2**3  ALLOC
  6 .stack            00000400  8005f6cc  8005f6cc  00007770  2**0  ALLOC
  7 .heap             00000800  8005facc  8005facc  00007770  2**0  ALLOC
  8 .debug_info       0001612d  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002fee  00000000  00000000  0001d89d  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000948  00000000  00000000  00020890  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000910  00000000  00000000  000211d8  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00008dce  00000000  00000000  00021ae8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003bfc  00000000  00000000  0002a8b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002e4b2  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002e4da  2**0  CONTENTS, READONLY
 16 .debug_frame      000024b8  00000000  00000000  0002e508  2**2  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc        00000b16  00000000  00000000  000309c0  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405680 l    d  .rodata	00000000 .rodata
20405bc0 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
8005f6cc l    d  .stack	00000000 .stack
8005facc l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
2040013e l       .init	00000000 _skip_init
2040586c l       .rodata	00000000 argv
20405870 l       .rodata	00000000 envp
20405874 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 matmul.c
8000077c l     O .bss	0001fa40 sa
800201bc l     O .bss	0001fa40 sb
8003fbfc l     O .bss	0001fa40 sc
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400986 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400ed6 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 fixunssfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
8005f63c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20402034 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
204020de l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20402104 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20402128 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402164 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
204022c4 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204027f4 l     F .text	00000024 __metal_driver_cpu_hartid
20402818 l     F .text	0000002a __metal_driver_cpu_timebase
20402842 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20404090 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
204040ba l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
204040e2 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
2040410a l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20404132 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404672 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404698 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204046c2 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404f24 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404f4e l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404f7c l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404fa4 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404fd2 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404ffc l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20405026 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405210 l     F .text	000000d8 pre_rate_change_callback_func
204052e8 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405580 l       .text	00000000 IRQ_0
20405584 l       .text	00000000 IRQ_1
20405588 l       .text	00000000 IRQ_2
2040558c l       .text	00000000 IRQ_3
20405590 l       .text	00000000 IRQ_4
20405594 l       .text	00000000 IRQ_5
20405598 l       .text	00000000 IRQ_6
2040559c l       .text	00000000 IRQ_7
204055a0 l       .text	00000000 IRQ_8
204055a4 l       .text	00000000 IRQ_9
204055a8 l       .text	00000000 IRQ_10
204055ac l       .text	00000000 IRQ_11
204055b0 l       .text	00000000 IRQ_12
204055b4 l       .text	00000000 IRQ_13
204055b8 l       .text	00000000 IRQ_14
204055bc l       .text	00000000 IRQ_15
204055c0 l       .text	00000000 IRQ_LC0
204055c4 l       .text	00000000 IRQ_LC1
204055c8 l       .text	00000000 IRQ_LC2
204055cc l       .text	00000000 IRQ_LC3
204055d0 l       .text	00000000 IRQ_LC4
204055d4 l       .text	00000000 IRQ_LC5
204055d8 l       .text	00000000 IRQ_LC6
204055dc l       .text	00000000 IRQ_LC7
204055e0 l       .text	00000000 IRQ_LC8
204055e4 l       .text	00000000 IRQ_LC9
204055e8 l       .text	00000000 IRQ_LC10
204055ec l       .text	00000000 IRQ_LC11
204055f0 l       .text	00000000 IRQ_LC12
204055f4 l       .text	00000000 IRQ_LC13
204055f8 l       .text	00000000 IRQ_LC14
204055fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405600 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405bc4 l       .init_array	00000000 __fini_array_end
20405bc4 l       .init_array	00000000 __fini_array_start
20405bc4 l       .init_array	00000000 __init_array_end
20405bc0 l       .init_array	00000000 __preinit_array_end
20405bc0 l       .init_array	00000000 __init_array_start
20405bc0 l       .init_array	00000000 __preinit_array_start
20405b9c g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401362 g     F .text	00000032 _isatty_r
2040303c  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400520 g     F .text	000000da _puts_r
20401394 g     F .text	00000036 _lseek_r
20405174 g     F .text	0000009c __metal_driver_sifive_uart0_set_baud_rate
204024a0 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402faa  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
204037fc g     F .text	00000038 __metal_valid_interrupt_id
204004dc g     F .text	00000044 printf
20403c1e g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
204053ea g     F .text	00000054 _metal_clock_append_to_callbacks
20404182 g     F .text	00000038 __metal_plic0_complete_interrupt
20403a7c g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
2040128a g     F .text	00000036 __sseek
20400a3c g     F .text	0000006a __sinit
20400608 g     F .text	000000c0 __swbuf_r
204009f8 g     F .text	00000044 __sfmoreglue
204013e6 g     F .text	00000002 __malloc_unlock
204054c4 g     F .text	0000002a metal_cpu_get
2040031a g     F .text	00000114 mm
80000728 g     O .data	00000020 __metal_dt_serial_10013000
20404afe g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405880 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
8005f6cc g       .bss	00000000 metal_segment_bss_target_end
20402194 g     F .text	0000009a __metal_clint0_mtime_get
20404024 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204048b4 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
20401db4 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20405090 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
2040222e g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
2040132e g     F .text	00000034 _fstat_r
20404d4e g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
8005f6c8 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
2040543e g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403316  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405ad4 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405a94 g     O .rodata	00000040 __metal_driver_vtable_cpu
204020b0 g     F .text	0000002e metal_uart_set_baud_rate
20405318 g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403cb2 g     F .text	00000072 __metal_driver_cpu_mcycle_get
8005facc g       .heap	00000000 metal_segment_heap_target_start
204009ee g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20403284  w    F .text	00000092 metal_lc8_interrupt_vector_handler
204005fa g     F .text	0000000e puts
2040355e  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204029d6 g     F .text	00000018 __metal_default_exception_handler
20401c24 g     F .text	00000026 _fstat
204027c0 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
2040421e g     F .text	00000062 __metal_plic0_set_priority
20403c3a g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
2040286c g     F .text	0000002c __metal_driver_cpu_get
20405a48 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204028ca g     F .text	00000018 __metal_interrupt_global_disable
204031f2  w    F .text	00000092 metal_lc7_interrupt_vector_handler
204033a8  w    F .text	00000092 metal_lc10_interrupt_vector_handler
204011da g     F .text	00000032 _sbrk_r
2040462a g     F .text	00000048 __metal_driver_riscv_plic0_disable
204038f0 g     F .text	0000004e __metal_exception_register
20401796 g     F .text	00000034 _read_r
20403e46 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404990 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402ac2 g     F .text	00000064 __metal_default_sw_handler
2040546e g     F .text	00000030 metal_clock_register_post_rate_change_callback
20405050 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401c4a g     F .text	00000020 _isatty
20404a56 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
20402b26  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401e24 g     F .text	0000006a __libc_init_array
204049d0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040343a  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403bca g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20401cbe g     F .text	0000007e _sbrk
2040494a g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
2040017c g     F .init	00000002 _init
2040292c g     F .text	0000001a __metal_interrupt_timer_disable
20404b48 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403efc g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
20405b60 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404a96 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401dec g     F .text	00000038 __libc_fini_array
20404ed6 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403e86 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
2040297e g     F .text	0000002c __metal_interrupt_local_enable
2040278c g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401fe2 g     F .text	0000002c metal_tty_putc
2040021e g     F .text	000000fc init_matrix
20404340 g     F .text	00000018 __metal_plic0_default_handler
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
204056d0 g     O .rodata	00000020 __sf_fake_stderr
20402962 g     F .text	0000001c __metal_interrupt_external_disable
2040506e g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403c96 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040393e g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401bc6 g     F .text	0000003c .hidden __clzsi2
20400f00 g     F .text	00000042 __sfputs_r
20403fde g     F .text	00000046 __metal_driver_cpu_exception_register
204028e2 g     F .text	00000018 __metal_interrupt_software_enable
20402e86  w    F .text	00000092 metal_lc1_interrupt_vector_handler
204013ca g     F .text	0000001a memchr
20400d4c g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403714 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401f1a g     F .text	000000c8 __call_exitprocs
8005facc g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401c6a g     F .text	0000002a _lseek
20403fbe g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20404052 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402946 g     F .text	0000001c __metal_interrupt_external_enable
20401e8e g     F .text	0000008c __register_exitproc
204050c2 g     F .text	0000003e __metal_driver_sifive_uart0_putc
204043e6 g     F .text	0000013c __metal_driver_riscv_plic0_init
204045e2 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404920 g     F .text	0000002a __metal_driver_sifive_gpio0_output
20403160  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402898 g     F .text	0000001a __metal_myhart_id
20404ef6 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
20402a34  w    F .text	0000008e metal_software_interrupt_vector_handler
20403bf4 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
204012fc g     F .text	00000032 _close_r
20405154 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402382 g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
204006c8 g     F .text	00000110 __swsetup_r
20400aa6 g     F .text	0000009e __sfp
2040120c g     F .text	00000030 __sread
20404876 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
2040017e  w    F .init	00000000 secondary_main
20402a06  w    F .text	0000002e metal_interrupt_vector_handler
204013e4 g     F .text	00000002 __malloc_lock
20400922 g     F .text	00000064 _fflush_r
204041f2 g     F .text	0000002c __metal_plic0_get_threshold
204056f0 g     O .rodata	00000020 __sf_fake_stdin
20403834 g     F .text	000000bc __metal_local_interrupt_enable
20402658 g     F .text	00000134 __metal_driver_riscv_clint0_command_request
20400ca4 g     F .text	000000a8 memset
204030ce  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040042e g     F .text	000000ae main
80000770 g       .data	00000000 metal_segment_data_target_end
20403e9a g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403f5e g     F .text	00000060 __metal_driver_cpu_get_msip
20405508 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20404070 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20404154 g     F .text	0000002e __metal_plic0_claim_interrupt
204012c0 g     F .text	00000006 __sclose
204034cc  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400df8 g     F .text	000000de _malloc_r
20402484 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403d24 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
204054ee g     F .text	0000001a metal_cpu_get_current_hartid
20405580 g       .text	00000000 __metal_vector_table
20405bc8 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
2040017c g     F .init	00000002 _fini
204004dc g     F .text	00000044 iprintf
2040576c g     O .rodata	00000100 .hidden __clz_tab
204028b2 g     F .text	00000018 __metal_interrupt_global_enable
20401daa g     F .text	0000000a atexit
2040200e g     F .text	00000026 metal_tty_putc_raw
204012c6 g     F .text	00000036 _write_r
20402912 g     F .text	0000001a __metal_interrupt_timer_enable
20405100 g     F .text	00000054 __metal_driver_sifive_uart0_getc
204025a6 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
204013e8 g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
20403dd0 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
204007d8 g     F .text	0000014a __sflush_r
2040562e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204024f4 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405bc8 g       *ABS*	00000000 metal_segment_data_source_start
800602cc g       .heap	00000000 metal_segment_heap_target_end
20403764 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400bb0 g     F .text	00000058 __swhatbuf_r
20404a10 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402bb4 g     F .text	00000066 __metal_default_timer_handler
20401d3c g     F .text	0000006e _write
20404358 g     F .text	0000008e __metal_plic0_handler
20402f18  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403682  w    F .text	00000092 metal_lc15_interrupt_vector_handler
2040549e g     F .text	00000026 metal_cpu_interrupt_controller
2040123c g     F .text	0000004e __swrite
20401dc0 g     F .text	0000002c exit
20400f42 g     F .text	00000298 _vfiprintf_r
20400b44 g     F .text	0000006c _fwalk_reent
20401b2a g     F .text	0000009c .hidden __floatunsisf
2040564c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405710 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
204029ee g     F .text	00000018 __metal_default_interrupt_handler
20402082 g     F .text	0000002e metal_uart_putc
20401c94 g     F .text	0000002a _read
20401ad6 g     F .text	00000054 .hidden __fixunssfsi
204048f8 g     F .text	00000028 __metal_driver_sifive_gpio0_input
20402c80 g     F .text	0000014e __metal_exception_handler
20402df4  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040566e g     F .text	00000012 _exit
20403d6a g     F .text	00000066 __metal_driver_cpu_mtime_get
20400c08 g     F .text	0000009c __smakebuf_r
2040245c g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
204014f4 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
204035f0  w    F .text	00000092 metal_lc14_interrupt_vector_handler
204022fa g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
20400f42 g     F .text	00000298 _vfprintf_r
20403e5c g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204042b4 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403e70 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
204029aa g     F .text	0000002c __metal_interrupt_local_disable
204028fa g     F .text	00000018 __metal_interrupt_software_disable
204017ca g     F .text	0000030c .hidden __addsf3
20404280 g     F .text	00000034 __metal_plic0_get_priority
20402056 g     F .text	0000002c metal_uart_init
204041ba g     F .text	00000038 __metal_plic0_set_threshold
20401c02 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404522 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	5fc60117          	auipc	sp,0x5fc60
2040008c:	a4410113          	addi	sp,sp,-1468 # 8005facc <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
20400090:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
20400092:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400096:	00a28563          	beq	t0,a0,204000a0 <_start+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
2040009a:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
2040009c:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009e:	bfe5                	j	20400096 <_start+0x18>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
204000a0:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a4:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a8:	08551b63          	bne	a0,t0,2040013e <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000ac:	00006297          	auipc	t0,0x6
204000b0:	b1c28293          	addi	t0,t0,-1252 # 20405bc8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b4:	5fc00317          	auipc	t1,0x5fc00
204000b8:	f4c30313          	addi	t1,t1,-180 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000bc:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000c0:	00628c63          	beq	t0,t1,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c4:	00735a63          	bge	t1,t2,204000d8 <_start+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000cc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ce:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000d2:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d4:	fe734ae3          	blt	t1,t2,204000c8 <_start+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d8:	00006297          	auipc	t0,0x6
204000dc:	af028293          	addi	t0,t0,-1296 # 20405bc8 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000e0:	e7c00317          	auipc	t1,0xe7c00
204000e4:	f2030313          	addi	t1,t1,-224 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e8:	e7c00397          	auipc	t2,0xe7c00
204000ec:	f1838393          	addi	t2,t2,-232 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000f0:	00628c63          	beq	t0,t1,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f4:	00735a63          	bge	t1,t2,20400108 <_start+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f8:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000fc:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fe:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
20400102:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400104:	fe734ae3          	blt	t1,t2,204000f8 <_start+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400108:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
2040010c:	5fc00317          	auipc	t1,0x5fc00
20400110:	66430313          	addi	t1,t1,1636 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400114:	5fc5f397          	auipc	t2,0x5fc5f
20400118:	5b838393          	addi	t2,t2,1464 # 8005f6cc <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
2040011c:	00735763          	bge	t1,t2,2040012a <_start+0xac>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400120:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
20400124:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
20400126:	fe734de3          	blt	t1,t2,20400120 <_start+0xa2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040012a:	c211                	beqz	a2,2040012e <_start+0xb0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
2040012c:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
2040012e:	00002517          	auipc	a0,0x2
20400132:	cbe50513          	addi	a0,a0,-834 # 20401dec <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
20400136:	475010ef          	jal	ra,20401daa <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
2040013a:	4eb010ef          	jal	ra,20401e24 <__libc_init_array>

2040013e <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
2040013e:	3f0d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400140:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
20400144:	00010737          	lui	a4,0x10
20400148:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
2040014c:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
2040014e:	cb89                	beqz	a5,20400160 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400150:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
20400154:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
20400156:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400158:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
2040015c:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400160:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
20400162:	00005597          	auipc	a1,0x5
20400166:	70a58593          	addi	a1,a1,1802 # 2040586c <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
2040016a:	00005617          	auipc	a2,0x5
2040016e:	70660613          	addi	a2,a2,1798 # 20405870 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
20400172:	2031                	jal	2040017e <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
20400174:	44d010ef          	jal	ra,20401dc0 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400178:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
2040017a:	8082                	ret

2040017c <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
2040017c:	8082                	ret

2040017e <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
2040017e:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400180:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
20400182:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
20400186:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
2040018a:	00628563          	beq	t0,t1,20400194 <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
2040018e:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
20400192:	bff5                	j	2040018e <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
20400194:	2c69                	jal	2040042e <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
20400196:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400198:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
2040019a:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <init_matrix>:
init_matrix():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:30
    printf("\n");
  }
  printf("\n");
}
#endif
void init_matrix(element_t** a, element_t** b, element_t** c, int n) {
2040021e:	7179                	addi	sp,sp,-48
20400220:	d622                	sw	s0,44(sp)
20400222:	1800                	addi	s0,sp,48
20400224:	fca42e23          	sw	a0,-36(s0)
20400228:	fcb42c23          	sw	a1,-40(s0)
2040022c:	fcc42a23          	sw	a2,-44(s0)
20400230:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:38
#ifdef WITH_MALLOC
  *a = (element_t*)malloc(n * n * sizeof(element_t));
  *b = (element_t*)malloc(n * n * sizeof(element_t));
  *c = (element_t*)malloc(n * n * sizeof(element_t));
#else
  *a = &(sa[0]);
20400234:	fdc42783          	lw	a5,-36(s0)
20400238:	80000737          	lui	a4,0x80000
2040023c:	77c70713          	addi	a4,a4,1916 # 8000077c <metal_segment_heap_target_end+0xfffa04b0>
20400240:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:39
  *b = &(sb[0]);
20400242:	fd842783          	lw	a5,-40(s0)
20400246:	80020737          	lui	a4,0x80020
2040024a:	1bc70713          	addi	a4,a4,444 # 800201bc <metal_segment_heap_target_end+0xfffbfef0>
2040024e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:40
  *c = &(sc[0]);
20400250:	fd442783          	lw	a5,-44(s0)
20400254:	80040737          	lui	a4,0x80040
20400258:	bfc70713          	addi	a4,a4,-1028 # 8003fbfc <metal_segment_heap_target_end+0xfffdf930>
2040025c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43
#endif

  for (i = 0; i < n; i++)
2040025e:	fe042623          	sw	zero,-20(s0)
20400262:	a0a5                	j	204002ca <init_matrix+0xac>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:44
    for (j = 0; j < n; j++) {
20400264:	fe042423          	sw	zero,-24(s0)
20400268:	a0b1                	j	204002b4 <init_matrix+0x96>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:45 (discriminator 3)
      (*a)[i*n+j] = zero;
2040026a:	fdc42783          	lw	a5,-36(s0)
2040026e:	4398                	lw	a4,0(a5)
20400270:	fec42683          	lw	a3,-20(s0)
20400274:	fd042783          	lw	a5,-48(s0)
20400278:	02f686b3          	mul	a3,a3,a5
2040027c:	fe842783          	lw	a5,-24(s0)
20400280:	97b6                	add	a5,a5,a3
20400282:	078a                	slli	a5,a5,0x2
20400284:	97ba                	add	a5,a5,a4
20400286:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:46 (discriminator 3)
      (*b)[i*n+j] = pi;
2040028a:	fd842783          	lw	a5,-40(s0)
2040028e:	4398                	lw	a4,0(a5)
20400290:	fec42683          	lw	a3,-20(s0)
20400294:	fd042783          	lw	a5,-48(s0)
20400298:	02f686b3          	mul	a3,a3,a5
2040029c:	fe842783          	lw	a5,-24(s0)
204002a0:	97b6                	add	a5,a5,a3
204002a2:	078a                	slli	a5,a5,0x2
204002a4:	97ba                	add	a5,a5,a4
204002a6:	470d                	li	a4,3
204002a8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:44 (discriminator 3)
    for (j = 0; j < n; j++) {
204002aa:	fe842783          	lw	a5,-24(s0)
204002ae:	0785                	addi	a5,a5,1
204002b0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:44 (discriminator 1)
204002b4:	fe842703          	lw	a4,-24(s0)
204002b8:	fd042783          	lw	a5,-48(s0)
204002bc:	faf747e3          	blt	a4,a5,2040026a <init_matrix+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43 (discriminator 2)
  for (i = 0; i < n; i++)
204002c0:	fec42783          	lw	a5,-20(s0)
204002c4:	0785                	addi	a5,a5,1
204002c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43 (discriminator 1)
204002ca:	fec42703          	lw	a4,-20(s0)
204002ce:	fd042783          	lw	a5,-48(s0)
204002d2:	f8f749e3          	blt	a4,a5,20400264 <init_matrix+0x46>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49
  }

  for (i = 0; i < n; i++)
204002d6:	fe042623          	sw	zero,-20(s0)
204002da:	a035                	j	20400306 <init_matrix+0xe8>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:50 (discriminator 3)
    (*a)[i*n+i] = one;
204002dc:	fdc42783          	lw	a5,-36(s0)
204002e0:	4398                	lw	a4,0(a5)
204002e2:	fec42683          	lw	a3,-20(s0)
204002e6:	fd042783          	lw	a5,-48(s0)
204002ea:	02f686b3          	mul	a3,a3,a5
204002ee:	fec42783          	lw	a5,-20(s0)
204002f2:	97b6                	add	a5,a5,a3
204002f4:	078a                	slli	a5,a5,0x2
204002f6:	97ba                	add	a5,a5,a4
204002f8:	4705                	li	a4,1
204002fa:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49 (discriminator 3)
  for (i = 0; i < n; i++)
204002fc:	fec42783          	lw	a5,-20(s0)
20400300:	0785                	addi	a5,a5,1
20400302:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49 (discriminator 1)
20400306:	fec42703          	lw	a4,-20(s0)
2040030a:	fd042783          	lw	a5,-48(s0)
2040030e:	fcf747e3          	blt	a4,a5,204002dc <init_matrix+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:51
}
20400312:	0001                	nop
20400314:	5432                	lw	s0,44(sp)
20400316:	6145                	addi	sp,sp,48
20400318:	8082                	ret

2040031a <mm>:
mm():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:53

void mm(element_t* a, element_t* b, element_t* c, int n, int m, int p) {
2040031a:	7139                	addi	sp,sp,-64
2040031c:	de06                	sw	ra,60(sp)
2040031e:	dc22                	sw	s0,56(sp)
20400320:	da26                	sw	s1,52(sp)
20400322:	0080                	addi	s0,sp,64
20400324:	fca42e23          	sw	a0,-36(s0)
20400328:	fcb42c23          	sw	a1,-40(s0)
2040032c:	fcc42a23          	sw	a2,-44(s0)
20400330:	fcd42823          	sw	a3,-48(s0)
20400334:	fce42623          	sw	a4,-52(s0)
20400338:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:57
  int i, j, k;
  float r;

  for (i = 0; i < n; i++)
2040033c:	fe042623          	sw	zero,-20(s0)
20400340:	a829                	j	2040035a <mm+0x40>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:58 (discriminator 3)
      printf("round %d\n", i);
20400342:	fec42583          	lw	a1,-20(s0)
20400346:	204057b7          	lui	a5,0x20405
2040034a:	68478513          	addi	a0,a5,1668 # 20405684 <_exit+0x16>
2040034e:	2279                	jal	204004dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:57 (discriminator 3)
  for (i = 0; i < n; i++)
20400350:	fec42783          	lw	a5,-20(s0)
20400354:	0785                	addi	a5,a5,1
20400356:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:57 (discriminator 1)
2040035a:	fec42703          	lw	a4,-20(s0)
2040035e:	fd042783          	lw	a5,-48(s0)
20400362:	fef740e3          	blt	a4,a5,20400342 <mm+0x28>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:59
    for (j = 0; j < p; j++) {
20400366:	fe042423          	sw	zero,-24(s0)
2040036a:	a075                	j	20400416 <mm+0xfc>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:60
      r = zero;
2040036c:	00000793          	li	a5,0
20400370:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61
      for (k = 0; k < m; k++)
20400374:	fe042223          	sw	zero,-28(s0)
20400378:	a085                	j	204003d8 <mm+0xbe>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:62 (discriminator 3)
        r = r + a[i*m+k] * b[k*p+j];
2040037a:	fec42703          	lw	a4,-20(s0)
2040037e:	fcc42783          	lw	a5,-52(s0)
20400382:	02f70733          	mul	a4,a4,a5
20400386:	fe442783          	lw	a5,-28(s0)
2040038a:	97ba                	add	a5,a5,a4
2040038c:	078a                	slli	a5,a5,0x2
2040038e:	fdc42703          	lw	a4,-36(s0)
20400392:	97ba                	add	a5,a5,a4
20400394:	4398                	lw	a4,0(a5)
20400396:	fe442683          	lw	a3,-28(s0)
2040039a:	fc842783          	lw	a5,-56(s0)
2040039e:	02f686b3          	mul	a3,a3,a5
204003a2:	fe842783          	lw	a5,-24(s0)
204003a6:	97b6                	add	a5,a5,a3
204003a8:	078a                	slli	a5,a5,0x2
204003aa:	fd842683          	lw	a3,-40(s0)
204003ae:	97b6                	add	a5,a5,a3
204003b0:	439c                	lw	a5,0(a5)
204003b2:	02f707b3          	mul	a5,a4,a5
204003b6:	853e                	mv	a0,a5
204003b8:	772010ef          	jal	ra,20401b2a <__floatunsisf>
204003bc:	87aa                	mv	a5,a0
204003be:	85be                	mv	a1,a5
204003c0:	fe042503          	lw	a0,-32(s0)
204003c4:	406010ef          	jal	ra,204017ca <__addsf3>
204003c8:	87aa                	mv	a5,a0
204003ca:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61 (discriminator 3)
      for (k = 0; k < m; k++)
204003ce:	fe442783          	lw	a5,-28(s0)
204003d2:	0785                	addi	a5,a5,1
204003d4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61 (discriminator 1)
204003d8:	fe442703          	lw	a4,-28(s0)
204003dc:	fcc42783          	lw	a5,-52(s0)
204003e0:	f8f74de3          	blt	a4,a5,2040037a <mm+0x60>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:63 (discriminator 2)
      c[i*p+j] = r;
204003e4:	fec42703          	lw	a4,-20(s0)
204003e8:	fc842783          	lw	a5,-56(s0)
204003ec:	02f70733          	mul	a4,a4,a5
204003f0:	fe842783          	lw	a5,-24(s0)
204003f4:	97ba                	add	a5,a5,a4
204003f6:	078a                	slli	a5,a5,0x2
204003f8:	fd442703          	lw	a4,-44(s0)
204003fc:	00f704b3          	add	s1,a4,a5
20400400:	fe042503          	lw	a0,-32(s0)
20400404:	6d2010ef          	jal	ra,20401ad6 <__fixunssfsi>
20400408:	87aa                	mv	a5,a0
2040040a:	c09c                	sw	a5,0(s1)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:59 (discriminator 2)
    for (j = 0; j < p; j++) {
2040040c:	fe842783          	lw	a5,-24(s0)
20400410:	0785                	addi	a5,a5,1
20400412:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:59 (discriminator 1)
20400416:	fe842703          	lw	a4,-24(s0)
2040041a:	fc842783          	lw	a5,-56(s0)
2040041e:	f4f747e3          	blt	a4,a5,2040036c <mm+0x52>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:65
    }
}
20400422:	0001                	nop
20400424:	50f2                	lw	ra,60(sp)
20400426:	5462                	lw	s0,56(sp)
20400428:	54d2                	lw	s1,52(sp)
2040042a:	6121                	addi	sp,sp,64
2040042c:	8082                	ret

2040042e <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:68


int main() {
2040042e:	7179                	addi	sp,sp,-48
20400430:	d606                	sw	ra,44(sp)
20400432:	d422                	sw	s0,40(sp)
20400434:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:69
    printf("hola inicio\n");
20400436:	204057b7          	lui	a5,0x20405
2040043a:	69078513          	addi	a0,a5,1680 # 20405690 <_exit+0x22>
2040043e:	2a75                	jal	204005fa <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:72
  element_t *a, *b, *c;
  // init matrix
    printf("hola 2\n");
20400440:	204057b7          	lui	a5,0x20405
20400444:	69c78513          	addi	a0,a5,1692 # 2040569c <_exit+0x2e>
20400448:	2a4d                	jal	204005fa <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:73
  init_matrix(&a, &b, &c, N);
2040044a:	fdc40613          	addi	a2,s0,-36
2040044e:	fe040713          	addi	a4,s0,-32
20400452:	fe440793          	addi	a5,s0,-28
20400456:	0b400693          	li	a3,180
2040045a:	85ba                	mv	a1,a4
2040045c:	853e                	mv	a0,a5
2040045e:	33c1                	jal	2040021e <init_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:75
  // multiply
    printf("hola 3\n");
20400460:	204057b7          	lui	a5,0x20405
20400464:	6a478513          	addi	a0,a5,1700 # 204056a4 <_exit+0x36>
20400468:	2a49                	jal	204005fa <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:76
  unsigned startc = rdcycle();
2040046a:	3b59                	jal	20400200 <rdcycle>
2040046c:	87aa                	mv	a5,a0
2040046e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:77
    printf("hola 4\n");
20400472:	204057b7          	lui	a5,0x20405
20400476:	6ac78513          	addi	a0,a5,1708 # 204056ac <_exit+0x3e>
2040047a:	2241                	jal	204005fa <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:78
  mm(a, b, c, N, N, N);
2040047c:	fe442503          	lw	a0,-28(s0)
20400480:	fe042583          	lw	a1,-32(s0)
20400484:	fdc42603          	lw	a2,-36(s0)
20400488:	0b400793          	li	a5,180
2040048c:	0b400713          	li	a4,180
20400490:	0b400693          	li	a3,180
20400494:	3559                	jal	2040031a <mm>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:79
    printf("hola 5\n");
20400496:	204057b7          	lui	a5,0x20405
2040049a:	6b478513          	addi	a0,a5,1716 # 204056b4 <_exit+0x46>
2040049e:	2ab1                	jal	204005fa <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:80
  unsigned endc = rdcycle();
204004a0:	3385                	jal	20400200 <rdcycle>
204004a2:	87aa                	mv	a5,a0
204004a4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:81
  endc = endc - startc;
204004a8:	fe842703          	lw	a4,-24(s0)
204004ac:	fec42783          	lw	a5,-20(s0)
204004b0:	40f707b3          	sub	a5,a4,a5
204004b4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:82
    printf("hola");
204004b8:	204057b7          	lui	a5,0x20405
204004bc:	6bc78513          	addi	a0,a5,1724 # 204056bc <_exit+0x4e>
204004c0:	2831                	jal	204004dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:84
#ifdef PFDEBUG
  printf("Cycles %x\n", endc);
204004c2:	fe842583          	lw	a1,-24(s0)
204004c6:	204057b7          	lui	a5,0x20405
204004ca:	6c478513          	addi	a0,a5,1732 # 204056c4 <_exit+0x56>
204004ce:	2039                	jal	204004dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:95
  free(a);
  free(b);
  free(c);
#endif

  return 0;
204004d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:96
204004d2:	853e                	mv	a0,a5
204004d4:	50b2                	lw	ra,44(sp)
204004d6:	5422                	lw	s0,40(sp)
204004d8:	6145                	addi	sp,sp,48
204004da:	8082                	ret

204004dc <iprintf>:
printf():
204004dc:	7139                	addi	sp,sp,-64
204004de:	da3e                	sw	a5,52(sp)
204004e0:	d22e                	sw	a1,36(sp)
204004e2:	d432                	sw	a2,40(sp)
204004e4:	d636                	sw	a3,44(sp)
204004e6:	d83a                	sw	a4,48(sp)
204004e8:	dc42                	sw	a6,56(sp)
204004ea:	de46                	sw	a7,60(sp)
204004ec:	5fc00797          	auipc	a5,0x5fc00
204004f0:	25c78793          	addi	a5,a5,604 # 80000748 <_impure_ptr>
204004f4:	cc22                	sw	s0,24(sp)
204004f6:	4380                	lw	s0,0(a5)
204004f8:	ca26                	sw	s1,20(sp)
204004fa:	ce06                	sw	ra,28(sp)
204004fc:	84aa                	mv	s1,a0
204004fe:	c409                	beqz	s0,20400508 <iprintf+0x2c>
20400500:	4c1c                	lw	a5,24(s0)
20400502:	e399                	bnez	a5,20400508 <iprintf+0x2c>
20400504:	8522                	mv	a0,s0
20400506:	2b1d                	jal	20400a3c <__sinit>
20400508:	440c                	lw	a1,8(s0)
2040050a:	1054                	addi	a3,sp,36
2040050c:	8626                	mv	a2,s1
2040050e:	8522                	mv	a0,s0
20400510:	c636                	sw	a3,12(sp)
20400512:	231000ef          	jal	ra,20400f42 <_vfiprintf_r>
20400516:	40f2                	lw	ra,28(sp)
20400518:	4462                	lw	s0,24(sp)
2040051a:	44d2                	lw	s1,20(sp)
2040051c:	6121                	addi	sp,sp,64
2040051e:	8082                	ret

20400520 <_puts_r>:
_puts_r():
20400520:	1101                	addi	sp,sp,-32
20400522:	ca26                	sw	s1,20(sp)
20400524:	c84a                	sw	s2,16(sp)
20400526:	ce06                	sw	ra,28(sp)
20400528:	cc22                	sw	s0,24(sp)
2040052a:	c64e                	sw	s3,12(sp)
2040052c:	c452                	sw	s4,8(sp)
2040052e:	84aa                	mv	s1,a0
20400530:	892e                	mv	s2,a1
20400532:	c501                	beqz	a0,2040053a <_puts_r+0x1a>
20400534:	4d1c                	lw	a5,24(a0)
20400536:	e391                	bnez	a5,2040053a <_puts_r+0x1a>
20400538:	2311                	jal	20400a3c <__sinit>
2040053a:	4c9c                	lw	a5,24(s1)
2040053c:	4480                	lw	s0,8(s1)
2040053e:	e399                	bnez	a5,20400544 <_puts_r+0x24>
20400540:	8526                	mv	a0,s1
20400542:	29ed                	jal	20400a3c <__sinit>
20400544:	00005797          	auipc	a5,0x5
20400548:	1ac78793          	addi	a5,a5,428 # 204056f0 <__sf_fake_stdin>
2040054c:	02f41c63          	bne	s0,a5,20400584 <_puts_r+0x64>
20400550:	40c0                	lw	s0,4(s1)
20400552:	00c45783          	lhu	a5,12(s0)
20400556:	8ba1                	andi	a5,a5,8
20400558:	c7b1                	beqz	a5,204005a4 <_puts_r+0x84>
2040055a:	481c                	lw	a5,16(s0)
2040055c:	c7a1                	beqz	a5,204005a4 <_puts_r+0x84>
2040055e:	59fd                	li	s3,-1
20400560:	4a29                	li	s4,10
20400562:	441c                	lw	a5,8(s0)
20400564:	00094583          	lbu	a1,0(s2)
20400568:	17fd                	addi	a5,a5,-1
2040056a:	e9b1                	bnez	a1,204005be <_puts_r+0x9e>
2040056c:	c41c                	sw	a5,8(s0)
2040056e:	0607de63          	bgez	a5,204005ea <_puts_r+0xca>
20400572:	8622                	mv	a2,s0
20400574:	45a9                	li	a1,10
20400576:	8526                	mv	a0,s1
20400578:	2841                	jal	20400608 <__swbuf_r>
2040057a:	57fd                	li	a5,-1
2040057c:	02f50863          	beq	a0,a5,204005ac <_puts_r+0x8c>
20400580:	4529                	li	a0,10
20400582:	a035                	j	204005ae <_puts_r+0x8e>
20400584:	00005797          	auipc	a5,0x5
20400588:	18c78793          	addi	a5,a5,396 # 20405710 <__sf_fake_stdout>
2040058c:	00f41463          	bne	s0,a5,20400594 <_puts_r+0x74>
20400590:	4480                	lw	s0,8(s1)
20400592:	b7c1                	j	20400552 <_puts_r+0x32>
20400594:	00005797          	auipc	a5,0x5
20400598:	13c78793          	addi	a5,a5,316 # 204056d0 <__sf_fake_stderr>
2040059c:	faf41be3          	bne	s0,a5,20400552 <_puts_r+0x32>
204005a0:	44c0                	lw	s0,12(s1)
204005a2:	bf45                	j	20400552 <_puts_r+0x32>
204005a4:	85a2                	mv	a1,s0
204005a6:	8526                	mv	a0,s1
204005a8:	2205                	jal	204006c8 <__swsetup_r>
204005aa:	d955                	beqz	a0,2040055e <_puts_r+0x3e>
204005ac:	557d                	li	a0,-1
204005ae:	40f2                	lw	ra,28(sp)
204005b0:	4462                	lw	s0,24(sp)
204005b2:	44d2                	lw	s1,20(sp)
204005b4:	4942                	lw	s2,16(sp)
204005b6:	49b2                	lw	s3,12(sp)
204005b8:	4a22                	lw	s4,8(sp)
204005ba:	6105                	addi	sp,sp,32
204005bc:	8082                	ret
204005be:	c41c                	sw	a5,8(s0)
204005c0:	0905                	addi	s2,s2,1
204005c2:	0007d763          	bgez	a5,204005d0 <_puts_r+0xb0>
204005c6:	4c18                	lw	a4,24(s0)
204005c8:	00e7cb63          	blt	a5,a4,204005de <_puts_r+0xbe>
204005cc:	01458963          	beq	a1,s4,204005de <_puts_r+0xbe>
204005d0:	401c                	lw	a5,0(s0)
204005d2:	00178713          	addi	a4,a5,1
204005d6:	c018                	sw	a4,0(s0)
204005d8:	00b78023          	sb	a1,0(a5)
204005dc:	b759                	j	20400562 <_puts_r+0x42>
204005de:	8622                	mv	a2,s0
204005e0:	8526                	mv	a0,s1
204005e2:	201d                	jal	20400608 <__swbuf_r>
204005e4:	f7351fe3          	bne	a0,s3,20400562 <_puts_r+0x42>
204005e8:	b7d1                	j	204005ac <_puts_r+0x8c>
204005ea:	401c                	lw	a5,0(s0)
204005ec:	00178713          	addi	a4,a5,1
204005f0:	c018                	sw	a4,0(s0)
204005f2:	4729                	li	a4,10
204005f4:	00e78023          	sb	a4,0(a5)
204005f8:	b761                	j	20400580 <_puts_r+0x60>

204005fa <puts>:
puts():
204005fa:	5fc00797          	auipc	a5,0x5fc00
204005fe:	14e78793          	addi	a5,a5,334 # 80000748 <_impure_ptr>
20400602:	85aa                	mv	a1,a0
20400604:	4388                	lw	a0,0(a5)
20400606:	bf29                	j	20400520 <_puts_r>

20400608 <__swbuf_r>:
__swbuf_r():
20400608:	1101                	addi	sp,sp,-32
2040060a:	cc22                	sw	s0,24(sp)
2040060c:	ca26                	sw	s1,20(sp)
2040060e:	c84a                	sw	s2,16(sp)
20400610:	ce06                	sw	ra,28(sp)
20400612:	c64e                	sw	s3,12(sp)
20400614:	84aa                	mv	s1,a0
20400616:	892e                	mv	s2,a1
20400618:	8432                	mv	s0,a2
2040061a:	c501                	beqz	a0,20400622 <__swbuf_r+0x1a>
2040061c:	4d1c                	lw	a5,24(a0)
2040061e:	e391                	bnez	a5,20400622 <__swbuf_r+0x1a>
20400620:	2931                	jal	20400a3c <__sinit>
20400622:	00005797          	auipc	a5,0x5
20400626:	0ce78793          	addi	a5,a5,206 # 204056f0 <__sf_fake_stdin>
2040062a:	06f41963          	bne	s0,a5,2040069c <__swbuf_r+0x94>
2040062e:	40c0                	lw	s0,4(s1)
20400630:	4c1c                	lw	a5,24(s0)
20400632:	c41c                	sw	a5,8(s0)
20400634:	00c45783          	lhu	a5,12(s0)
20400638:	8ba1                	andi	a5,a5,8
2040063a:	c3c9                	beqz	a5,204006bc <__swbuf_r+0xb4>
2040063c:	481c                	lw	a5,16(s0)
2040063e:	cfbd                	beqz	a5,204006bc <__swbuf_r+0xb4>
20400640:	481c                	lw	a5,16(s0)
20400642:	4008                	lw	a0,0(s0)
20400644:	0ff97993          	andi	s3,s2,255
20400648:	0ff97913          	andi	s2,s2,255
2040064c:	8d1d                	sub	a0,a0,a5
2040064e:	485c                	lw	a5,20(s0)
20400650:	00f54663          	blt	a0,a5,2040065c <__swbuf_r+0x54>
20400654:	85a2                	mv	a1,s0
20400656:	8526                	mv	a0,s1
20400658:	24e9                	jal	20400922 <_fflush_r>
2040065a:	e52d                	bnez	a0,204006c4 <__swbuf_r+0xbc>
2040065c:	441c                	lw	a5,8(s0)
2040065e:	0505                	addi	a0,a0,1
20400660:	17fd                	addi	a5,a5,-1
20400662:	c41c                	sw	a5,8(s0)
20400664:	401c                	lw	a5,0(s0)
20400666:	00178713          	addi	a4,a5,1
2040066a:	c018                	sw	a4,0(s0)
2040066c:	01378023          	sb	s3,0(a5)
20400670:	485c                	lw	a5,20(s0)
20400672:	00a78963          	beq	a5,a0,20400684 <__swbuf_r+0x7c>
20400676:	00c45783          	lhu	a5,12(s0)
2040067a:	8b85                	andi	a5,a5,1
2040067c:	cb81                	beqz	a5,2040068c <__swbuf_r+0x84>
2040067e:	47a9                	li	a5,10
20400680:	00f91663          	bne	s2,a5,2040068c <__swbuf_r+0x84>
20400684:	85a2                	mv	a1,s0
20400686:	8526                	mv	a0,s1
20400688:	2c69                	jal	20400922 <_fflush_r>
2040068a:	ed0d                	bnez	a0,204006c4 <__swbuf_r+0xbc>
2040068c:	40f2                	lw	ra,28(sp)
2040068e:	4462                	lw	s0,24(sp)
20400690:	854a                	mv	a0,s2
20400692:	44d2                	lw	s1,20(sp)
20400694:	4942                	lw	s2,16(sp)
20400696:	49b2                	lw	s3,12(sp)
20400698:	6105                	addi	sp,sp,32
2040069a:	8082                	ret
2040069c:	00005797          	auipc	a5,0x5
204006a0:	07478793          	addi	a5,a5,116 # 20405710 <__sf_fake_stdout>
204006a4:	00f41463          	bne	s0,a5,204006ac <__swbuf_r+0xa4>
204006a8:	4480                	lw	s0,8(s1)
204006aa:	b759                	j	20400630 <__swbuf_r+0x28>
204006ac:	00005797          	auipc	a5,0x5
204006b0:	02478793          	addi	a5,a5,36 # 204056d0 <__sf_fake_stderr>
204006b4:	f6f41ee3          	bne	s0,a5,20400630 <__swbuf_r+0x28>
204006b8:	44c0                	lw	s0,12(s1)
204006ba:	bf9d                	j	20400630 <__swbuf_r+0x28>
204006bc:	85a2                	mv	a1,s0
204006be:	8526                	mv	a0,s1
204006c0:	2021                	jal	204006c8 <__swsetup_r>
204006c2:	dd3d                	beqz	a0,20400640 <__swbuf_r+0x38>
204006c4:	597d                	li	s2,-1
204006c6:	b7d9                	j	2040068c <__swbuf_r+0x84>

204006c8 <__swsetup_r>:
__swsetup_r():
204006c8:	1141                	addi	sp,sp,-16
204006ca:	5fc00797          	auipc	a5,0x5fc00
204006ce:	07e78793          	addi	a5,a5,126 # 80000748 <_impure_ptr>
204006d2:	c226                	sw	s1,4(sp)
204006d4:	4384                	lw	s1,0(a5)
204006d6:	c422                	sw	s0,8(sp)
204006d8:	c04a                	sw	s2,0(sp)
204006da:	c606                	sw	ra,12(sp)
204006dc:	892a                	mv	s2,a0
204006de:	842e                	mv	s0,a1
204006e0:	c489                	beqz	s1,204006ea <__swsetup_r+0x22>
204006e2:	4c9c                	lw	a5,24(s1)
204006e4:	e399                	bnez	a5,204006ea <__swsetup_r+0x22>
204006e6:	8526                	mv	a0,s1
204006e8:	2e91                	jal	20400a3c <__sinit>
204006ea:	00005797          	auipc	a5,0x5
204006ee:	00678793          	addi	a5,a5,6 # 204056f0 <__sf_fake_stdin>
204006f2:	02f41c63          	bne	s0,a5,2040072a <__swsetup_r+0x62>
204006f6:	40c0                	lw	s0,4(s1)
204006f8:	00c41703          	lh	a4,12(s0)
204006fc:	01071793          	slli	a5,a4,0x10
20400700:	83c1                	srli	a5,a5,0x10
20400702:	0087f693          	andi	a3,a5,8
20400706:	eeb5                	bnez	a3,20400782 <__swsetup_r+0xba>
20400708:	0107f693          	andi	a3,a5,16
2040070c:	ee9d                	bnez	a3,2040074a <__swsetup_r+0x82>
2040070e:	47a5                	li	a5,9
20400710:	00f92023          	sw	a5,0(s2)
20400714:	04076713          	ori	a4,a4,64
20400718:	00e41623          	sh	a4,12(s0)
2040071c:	557d                	li	a0,-1
2040071e:	40b2                	lw	ra,12(sp)
20400720:	4422                	lw	s0,8(sp)
20400722:	4492                	lw	s1,4(sp)
20400724:	4902                	lw	s2,0(sp)
20400726:	0141                	addi	sp,sp,16
20400728:	8082                	ret
2040072a:	00005797          	auipc	a5,0x5
2040072e:	fe678793          	addi	a5,a5,-26 # 20405710 <__sf_fake_stdout>
20400732:	00f41463          	bne	s0,a5,2040073a <__swsetup_r+0x72>
20400736:	4480                	lw	s0,8(s1)
20400738:	b7c1                	j	204006f8 <__swsetup_r+0x30>
2040073a:	00005797          	auipc	a5,0x5
2040073e:	f9678793          	addi	a5,a5,-106 # 204056d0 <__sf_fake_stderr>
20400742:	faf41be3          	bne	s0,a5,204006f8 <__swsetup_r+0x30>
20400746:	44c0                	lw	s0,12(s1)
20400748:	bf45                	j	204006f8 <__swsetup_r+0x30>
2040074a:	8b91                	andi	a5,a5,4
2040074c:	c78d                	beqz	a5,20400776 <__swsetup_r+0xae>
2040074e:	584c                	lw	a1,52(s0)
20400750:	c989                	beqz	a1,20400762 <__swsetup_r+0x9a>
20400752:	04440793          	addi	a5,s0,68
20400756:	00f58463          	beq	a1,a5,2040075e <__swsetup_r+0x96>
2040075a:	854a                	mv	a0,s2
2040075c:	2bc5                	jal	20400d4c <_free_r>
2040075e:	02042a23          	sw	zero,52(s0)
20400762:	00c45783          	lhu	a5,12(s0)
20400766:	00042223          	sw	zero,4(s0)
2040076a:	fdb7f793          	andi	a5,a5,-37
2040076e:	00f41623          	sh	a5,12(s0)
20400772:	481c                	lw	a5,16(s0)
20400774:	c01c                	sw	a5,0(s0)
20400776:	00c45783          	lhu	a5,12(s0)
2040077a:	0087e793          	ori	a5,a5,8
2040077e:	00f41623          	sh	a5,12(s0)
20400782:	481c                	lw	a5,16(s0)
20400784:	ef81                	bnez	a5,2040079c <__swsetup_r+0xd4>
20400786:	00c45783          	lhu	a5,12(s0)
2040078a:	20000713          	li	a4,512
2040078e:	2807f793          	andi	a5,a5,640
20400792:	00e78563          	beq	a5,a4,2040079c <__swsetup_r+0xd4>
20400796:	85a2                	mv	a1,s0
20400798:	854a                	mv	a0,s2
2040079a:	21bd                	jal	20400c08 <__smakebuf_r>
2040079c:	00c45783          	lhu	a5,12(s0)
204007a0:	0017f713          	andi	a4,a5,1
204007a4:	c705                	beqz	a4,204007cc <__swsetup_r+0x104>
204007a6:	485c                	lw	a5,20(s0)
204007a8:	00042423          	sw	zero,8(s0)
204007ac:	40f007b3          	neg	a5,a5
204007b0:	cc1c                	sw	a5,24(s0)
204007b2:	481c                	lw	a5,16(s0)
204007b4:	4501                	li	a0,0
204007b6:	f7a5                	bnez	a5,2040071e <__swsetup_r+0x56>
204007b8:	00c41783          	lh	a5,12(s0)
204007bc:	0807f713          	andi	a4,a5,128
204007c0:	df39                	beqz	a4,2040071e <__swsetup_r+0x56>
204007c2:	0407e793          	ori	a5,a5,64
204007c6:	00f41623          	sh	a5,12(s0)
204007ca:	bf89                	j	2040071c <__swsetup_r+0x54>
204007cc:	8b89                	andi	a5,a5,2
204007ce:	4701                	li	a4,0
204007d0:	e391                	bnez	a5,204007d4 <__swsetup_r+0x10c>
204007d2:	4858                	lw	a4,20(s0)
204007d4:	c418                	sw	a4,8(s0)
204007d6:	bff1                	j	204007b2 <__swsetup_r+0xea>

204007d8 <__sflush_r>:
__sflush_r():
204007d8:	00c5d783          	lhu	a5,12(a1)
204007dc:	1101                	addi	sp,sp,-32
204007de:	cc22                	sw	s0,24(sp)
204007e0:	ca26                	sw	s1,20(sp)
204007e2:	ce06                	sw	ra,28(sp)
204007e4:	c84a                	sw	s2,16(sp)
204007e6:	c64e                	sw	s3,12(sp)
204007e8:	0087f713          	andi	a4,a5,8
204007ec:	84aa                	mv	s1,a0
204007ee:	842e                	mv	s0,a1
204007f0:	e765                	bnez	a4,204008d8 <__sflush_r+0x100>
204007f2:	41d8                	lw	a4,4(a1)
204007f4:	00e04763          	bgtz	a4,20400802 <__sflush_r+0x2a>
204007f8:	41b8                	lw	a4,64(a1)
204007fa:	00e04463          	bgtz	a4,20400802 <__sflush_r+0x2a>
204007fe:	4501                	li	a0,0
20400800:	a0c1                	j	204008c0 <__sflush_r+0xe8>
20400802:	5458                	lw	a4,44(s0)
20400804:	df6d                	beqz	a4,204007fe <__sflush_r+0x26>
20400806:	0004a903          	lw	s2,0(s1)
2040080a:	01379693          	slli	a3,a5,0x13
2040080e:	0004a023          	sw	zero,0(s1)
20400812:	0606de63          	bgez	a3,2040088e <__sflush_r+0xb6>
20400816:	4868                	lw	a0,84(s0)
20400818:	00c45783          	lhu	a5,12(s0)
2040081c:	8b91                	andi	a5,a5,4
2040081e:	c799                	beqz	a5,2040082c <__sflush_r+0x54>
20400820:	405c                	lw	a5,4(s0)
20400822:	8d1d                	sub	a0,a0,a5
20400824:	585c                	lw	a5,52(s0)
20400826:	c399                	beqz	a5,2040082c <__sflush_r+0x54>
20400828:	403c                	lw	a5,64(s0)
2040082a:	8d1d                	sub	a0,a0,a5
2040082c:	545c                	lw	a5,44(s0)
2040082e:	500c                	lw	a1,32(s0)
20400830:	862a                	mv	a2,a0
20400832:	4681                	li	a3,0
20400834:	8526                	mv	a0,s1
20400836:	9782                	jalr	a5
20400838:	57fd                	li	a5,-1
2040083a:	00c45703          	lhu	a4,12(s0)
2040083e:	00f51d63          	bne	a0,a5,20400858 <__sflush_r+0x80>
20400842:	4094                	lw	a3,0(s1)
20400844:	47f5                	li	a5,29
20400846:	08d7e463          	bltu	a5,a3,204008ce <__sflush_r+0xf6>
2040084a:	204007b7          	lui	a5,0x20400
2040084e:	0785                	addi	a5,a5,1
20400850:	00d7d7b3          	srl	a5,a5,a3
20400854:	8b85                	andi	a5,a5,1
20400856:	cfa5                	beqz	a5,204008ce <__sflush_r+0xf6>
20400858:	481c                	lw	a5,16(s0)
2040085a:	00042223          	sw	zero,4(s0)
2040085e:	c01c                	sw	a5,0(s0)
20400860:	01371793          	slli	a5,a4,0x13
20400864:	0007d863          	bgez	a5,20400874 <__sflush_r+0x9c>
20400868:	57fd                	li	a5,-1
2040086a:	00f51463          	bne	a0,a5,20400872 <__sflush_r+0x9a>
2040086e:	409c                	lw	a5,0(s1)
20400870:	e391                	bnez	a5,20400874 <__sflush_r+0x9c>
20400872:	c868                	sw	a0,84(s0)
20400874:	584c                	lw	a1,52(s0)
20400876:	0124a023          	sw	s2,0(s1)
2040087a:	d1d1                	beqz	a1,204007fe <__sflush_r+0x26>
2040087c:	04440793          	addi	a5,s0,68
20400880:	00f58463          	beq	a1,a5,20400888 <__sflush_r+0xb0>
20400884:	8526                	mv	a0,s1
20400886:	21d9                	jal	20400d4c <_free_r>
20400888:	02042a23          	sw	zero,52(s0)
2040088c:	bf8d                	j	204007fe <__sflush_r+0x26>
2040088e:	500c                	lw	a1,32(s0)
20400890:	4685                	li	a3,1
20400892:	4601                	li	a2,0
20400894:	8526                	mv	a0,s1
20400896:	9702                	jalr	a4
20400898:	57fd                	li	a5,-1
2040089a:	f6f51fe3          	bne	a0,a5,20400818 <__sflush_r+0x40>
2040089e:	409c                	lw	a5,0(s1)
204008a0:	dfa5                	beqz	a5,20400818 <__sflush_r+0x40>
204008a2:	4775                	li	a4,29
204008a4:	00e78563          	beq	a5,a4,204008ae <__sflush_r+0xd6>
204008a8:	4759                	li	a4,22
204008aa:	00e79563          	bne	a5,a4,204008b4 <__sflush_r+0xdc>
204008ae:	0124a023          	sw	s2,0(s1)
204008b2:	b7b1                	j	204007fe <__sflush_r+0x26>
204008b4:	00c45783          	lhu	a5,12(s0)
204008b8:	0407e793          	ori	a5,a5,64
204008bc:	00f41623          	sh	a5,12(s0)
204008c0:	40f2                	lw	ra,28(sp)
204008c2:	4462                	lw	s0,24(sp)
204008c4:	44d2                	lw	s1,20(sp)
204008c6:	4942                	lw	s2,16(sp)
204008c8:	49b2                	lw	s3,12(sp)
204008ca:	6105                	addi	sp,sp,32
204008cc:	8082                	ret
204008ce:	04076713          	ori	a4,a4,64
204008d2:	00e41623          	sh	a4,12(s0)
204008d6:	b7ed                	j	204008c0 <__sflush_r+0xe8>
204008d8:	0105a983          	lw	s3,16(a1)
204008dc:	f20981e3          	beqz	s3,204007fe <__sflush_r+0x26>
204008e0:	0005a903          	lw	s2,0(a1)
204008e4:	8b8d                	andi	a5,a5,3
204008e6:	0135a023          	sw	s3,0(a1)
204008ea:	41390933          	sub	s2,s2,s3
204008ee:	4701                	li	a4,0
204008f0:	e391                	bnez	a5,204008f4 <__sflush_r+0x11c>
204008f2:	49d8                	lw	a4,20(a1)
204008f4:	c418                	sw	a4,8(s0)
204008f6:	f12054e3          	blez	s2,204007fe <__sflush_r+0x26>
204008fa:	541c                	lw	a5,40(s0)
204008fc:	500c                	lw	a1,32(s0)
204008fe:	86ca                	mv	a3,s2
20400900:	864e                	mv	a2,s3
20400902:	8526                	mv	a0,s1
20400904:	9782                	jalr	a5
20400906:	00a04a63          	bgtz	a0,2040091a <__sflush_r+0x142>
2040090a:	00c45783          	lhu	a5,12(s0)
2040090e:	557d                	li	a0,-1
20400910:	0407e793          	ori	a5,a5,64
20400914:	00f41623          	sh	a5,12(s0)
20400918:	b765                	j	204008c0 <__sflush_r+0xe8>
2040091a:	99aa                	add	s3,s3,a0
2040091c:	40a90933          	sub	s2,s2,a0
20400920:	bfd9                	j	204008f6 <__sflush_r+0x11e>

20400922 <_fflush_r>:
_fflush_r():
20400922:	499c                	lw	a5,16(a1)
20400924:	cfb9                	beqz	a5,20400982 <_fflush_r+0x60>
20400926:	1101                	addi	sp,sp,-32
20400928:	cc22                	sw	s0,24(sp)
2040092a:	ce06                	sw	ra,28(sp)
2040092c:	842a                	mv	s0,a0
2040092e:	c511                	beqz	a0,2040093a <_fflush_r+0x18>
20400930:	4d1c                	lw	a5,24(a0)
20400932:	e781                	bnez	a5,2040093a <_fflush_r+0x18>
20400934:	c62e                	sw	a1,12(sp)
20400936:	2219                	jal	20400a3c <__sinit>
20400938:	45b2                	lw	a1,12(sp)
2040093a:	00005797          	auipc	a5,0x5
2040093e:	db678793          	addi	a5,a5,-586 # 204056f0 <__sf_fake_stdin>
20400942:	00f59b63          	bne	a1,a5,20400958 <_fflush_r+0x36>
20400946:	404c                	lw	a1,4(s0)
20400948:	00c59783          	lh	a5,12(a1)
2040094c:	c795                	beqz	a5,20400978 <_fflush_r+0x56>
2040094e:	8522                	mv	a0,s0
20400950:	4462                	lw	s0,24(sp)
20400952:	40f2                	lw	ra,28(sp)
20400954:	6105                	addi	sp,sp,32
20400956:	b549                	j	204007d8 <__sflush_r>
20400958:	00005797          	auipc	a5,0x5
2040095c:	db878793          	addi	a5,a5,-584 # 20405710 <__sf_fake_stdout>
20400960:	00f59463          	bne	a1,a5,20400968 <_fflush_r+0x46>
20400964:	440c                	lw	a1,8(s0)
20400966:	b7cd                	j	20400948 <_fflush_r+0x26>
20400968:	00005797          	auipc	a5,0x5
2040096c:	d6878793          	addi	a5,a5,-664 # 204056d0 <__sf_fake_stderr>
20400970:	fcf59ce3          	bne	a1,a5,20400948 <_fflush_r+0x26>
20400974:	444c                	lw	a1,12(s0)
20400976:	bfc9                	j	20400948 <_fflush_r+0x26>
20400978:	40f2                	lw	ra,28(sp)
2040097a:	4462                	lw	s0,24(sp)
2040097c:	4501                	li	a0,0
2040097e:	6105                	addi	sp,sp,32
20400980:	8082                	ret
20400982:	4501                	li	a0,0
20400984:	8082                	ret

20400986 <std>:
std():
20400986:	1141                	addi	sp,sp,-16
20400988:	c422                	sw	s0,8(sp)
2040098a:	c606                	sw	ra,12(sp)
2040098c:	842a                	mv	s0,a0
2040098e:	00b51623          	sh	a1,12(a0)
20400992:	00c51723          	sh	a2,14(a0)
20400996:	00052023          	sw	zero,0(a0)
2040099a:	00052223          	sw	zero,4(a0)
2040099e:	00052423          	sw	zero,8(a0)
204009a2:	06052223          	sw	zero,100(a0)
204009a6:	00052823          	sw	zero,16(a0)
204009aa:	00052a23          	sw	zero,20(a0)
204009ae:	00052c23          	sw	zero,24(a0)
204009b2:	4621                	li	a2,8
204009b4:	4581                	li	a1,0
204009b6:	05c50513          	addi	a0,a0,92
204009ba:	24ed                	jal	20400ca4 <memset>
204009bc:	00001797          	auipc	a5,0x1
204009c0:	85078793          	addi	a5,a5,-1968 # 2040120c <__sread>
204009c4:	d05c                	sw	a5,36(s0)
204009c6:	00001797          	auipc	a5,0x1
204009ca:	87678793          	addi	a5,a5,-1930 # 2040123c <__swrite>
204009ce:	d41c                	sw	a5,40(s0)
204009d0:	00001797          	auipc	a5,0x1
204009d4:	8ba78793          	addi	a5,a5,-1862 # 2040128a <__sseek>
204009d8:	d45c                	sw	a5,44(s0)
204009da:	00001797          	auipc	a5,0x1
204009de:	8e678793          	addi	a5,a5,-1818 # 204012c0 <__sclose>
204009e2:	d000                	sw	s0,32(s0)
204009e4:	d81c                	sw	a5,48(s0)
204009e6:	40b2                	lw	ra,12(sp)
204009e8:	4422                	lw	s0,8(sp)
204009ea:	0141                	addi	sp,sp,16
204009ec:	8082                	ret

204009ee <_cleanup_r>:
_cleanup_r():
204009ee:	00000597          	auipc	a1,0x0
204009f2:	f3458593          	addi	a1,a1,-204 # 20400922 <_fflush_r>
204009f6:	a2b9                	j	20400b44 <_fwalk_reent>

204009f8 <__sfmoreglue>:
__sfmoreglue():
204009f8:	1141                	addi	sp,sp,-16
204009fa:	c226                	sw	s1,4(sp)
204009fc:	06800613          	li	a2,104
20400a00:	fff58493          	addi	s1,a1,-1
20400a04:	02c484b3          	mul	s1,s1,a2
20400a08:	c04a                	sw	s2,0(sp)
20400a0a:	892e                	mv	s2,a1
20400a0c:	c422                	sw	s0,8(sp)
20400a0e:	c606                	sw	ra,12(sp)
20400a10:	07448593          	addi	a1,s1,116
20400a14:	26d5                	jal	20400df8 <_malloc_r>
20400a16:	842a                	mv	s0,a0
20400a18:	c919                	beqz	a0,20400a2e <__sfmoreglue+0x36>
20400a1a:	00052023          	sw	zero,0(a0)
20400a1e:	01252223          	sw	s2,4(a0)
20400a22:	0531                	addi	a0,a0,12
20400a24:	c408                	sw	a0,8(s0)
20400a26:	06848613          	addi	a2,s1,104
20400a2a:	4581                	li	a1,0
20400a2c:	2ca5                	jal	20400ca4 <memset>
20400a2e:	8522                	mv	a0,s0
20400a30:	40b2                	lw	ra,12(sp)
20400a32:	4422                	lw	s0,8(sp)
20400a34:	4492                	lw	s1,4(sp)
20400a36:	4902                	lw	s2,0(sp)
20400a38:	0141                	addi	sp,sp,16
20400a3a:	8082                	ret

20400a3c <__sinit>:
__sinit():
20400a3c:	4d1c                	lw	a5,24(a0)
20400a3e:	e3bd                	bnez	a5,20400aa4 <__sinit+0x68>
20400a40:	1141                	addi	sp,sp,-16
20400a42:	c606                	sw	ra,12(sp)
20400a44:	c422                	sw	s0,8(sp)
20400a46:	00000797          	auipc	a5,0x0
20400a4a:	fa878793          	addi	a5,a5,-88 # 204009ee <_cleanup_r>
20400a4e:	d51c                	sw	a5,40(a0)
20400a50:	5fc00797          	auipc	a5,0x5fc00
20400a54:	cfc78793          	addi	a5,a5,-772 # 8000074c <_global_impure_ptr>
20400a58:	439c                	lw	a5,0(a5)
20400a5a:	04052423          	sw	zero,72(a0)
20400a5e:	04052623          	sw	zero,76(a0)
20400a62:	04052823          	sw	zero,80(a0)
20400a66:	00f51463          	bne	a0,a5,20400a6e <__sinit+0x32>
20400a6a:	4785                	li	a5,1
20400a6c:	cd1c                	sw	a5,24(a0)
20400a6e:	842a                	mv	s0,a0
20400a70:	281d                	jal	20400aa6 <__sfp>
20400a72:	c048                	sw	a0,4(s0)
20400a74:	8522                	mv	a0,s0
20400a76:	2805                	jal	20400aa6 <__sfp>
20400a78:	c408                	sw	a0,8(s0)
20400a7a:	8522                	mv	a0,s0
20400a7c:	202d                	jal	20400aa6 <__sfp>
20400a7e:	c448                	sw	a0,12(s0)
20400a80:	4048                	lw	a0,4(s0)
20400a82:	4601                	li	a2,0
20400a84:	4591                	li	a1,4
20400a86:	3701                	jal	20400986 <std>
20400a88:	4408                	lw	a0,8(s0)
20400a8a:	4605                	li	a2,1
20400a8c:	45a5                	li	a1,9
20400a8e:	3de5                	jal	20400986 <std>
20400a90:	4448                	lw	a0,12(s0)
20400a92:	4609                	li	a2,2
20400a94:	45c9                	li	a1,18
20400a96:	3dc5                	jal	20400986 <std>
20400a98:	4785                	li	a5,1
20400a9a:	cc1c                	sw	a5,24(s0)
20400a9c:	40b2                	lw	ra,12(sp)
20400a9e:	4422                	lw	s0,8(sp)
20400aa0:	0141                	addi	sp,sp,16
20400aa2:	8082                	ret
20400aa4:	8082                	ret

20400aa6 <__sfp>:
__sfp():
20400aa6:	1141                	addi	sp,sp,-16
20400aa8:	5fc00797          	auipc	a5,0x5fc00
20400aac:	ca478793          	addi	a5,a5,-860 # 8000074c <_global_impure_ptr>
20400ab0:	c226                	sw	s1,4(sp)
20400ab2:	4384                	lw	s1,0(a5)
20400ab4:	c04a                	sw	s2,0(sp)
20400ab6:	c606                	sw	ra,12(sp)
20400ab8:	4c9c                	lw	a5,24(s1)
20400aba:	c422                	sw	s0,8(sp)
20400abc:	892a                	mv	s2,a0
20400abe:	e399                	bnez	a5,20400ac4 <__sfp+0x1e>
20400ac0:	8526                	mv	a0,s1
20400ac2:	3fad                	jal	20400a3c <__sinit>
20400ac4:	04848493          	addi	s1,s1,72
20400ac8:	4480                	lw	s0,8(s1)
20400aca:	40dc                	lw	a5,4(s1)
20400acc:	17fd                	addi	a5,a5,-1
20400ace:	0007d663          	bgez	a5,20400ada <__sfp+0x34>
20400ad2:	409c                	lw	a5,0(s1)
20400ad4:	cfb1                	beqz	a5,20400b30 <__sfp+0x8a>
20400ad6:	4084                	lw	s1,0(s1)
20400ad8:	bfc5                	j	20400ac8 <__sfp+0x22>
20400ada:	00c41703          	lh	a4,12(s0)
20400ade:	e731                	bnez	a4,20400b2a <__sfp+0x84>
20400ae0:	77c1                	lui	a5,0xffff0
20400ae2:	0785                	addi	a5,a5,1
20400ae4:	06042223          	sw	zero,100(s0)
20400ae8:	00042023          	sw	zero,0(s0)
20400aec:	00042223          	sw	zero,4(s0)
20400af0:	00042423          	sw	zero,8(s0)
20400af4:	c45c                	sw	a5,12(s0)
20400af6:	00042823          	sw	zero,16(s0)
20400afa:	00042a23          	sw	zero,20(s0)
20400afe:	00042c23          	sw	zero,24(s0)
20400b02:	4621                	li	a2,8
20400b04:	4581                	li	a1,0
20400b06:	05c40513          	addi	a0,s0,92
20400b0a:	2a69                	jal	20400ca4 <memset>
20400b0c:	02042a23          	sw	zero,52(s0)
20400b10:	02042c23          	sw	zero,56(s0)
20400b14:	04042423          	sw	zero,72(s0)
20400b18:	04042623          	sw	zero,76(s0)
20400b1c:	8522                	mv	a0,s0
20400b1e:	40b2                	lw	ra,12(sp)
20400b20:	4422                	lw	s0,8(sp)
20400b22:	4492                	lw	s1,4(sp)
20400b24:	4902                	lw	s2,0(sp)
20400b26:	0141                	addi	sp,sp,16
20400b28:	8082                	ret
20400b2a:	06840413          	addi	s0,s0,104
20400b2e:	bf79                	j	20400acc <__sfp+0x26>
20400b30:	4591                	li	a1,4
20400b32:	854a                	mv	a0,s2
20400b34:	35d1                	jal	204009f8 <__sfmoreglue>
20400b36:	c088                	sw	a0,0(s1)
20400b38:	842a                	mv	s0,a0
20400b3a:	fd51                	bnez	a0,20400ad6 <__sfp+0x30>
20400b3c:	47b1                	li	a5,12
20400b3e:	00f92023          	sw	a5,0(s2)
20400b42:	bfe9                	j	20400b1c <__sfp+0x76>

20400b44 <_fwalk_reent>:
_fwalk_reent():
20400b44:	7179                	addi	sp,sp,-48
20400b46:	d422                	sw	s0,40(sp)
20400b48:	d04a                	sw	s2,32(sp)
20400b4a:	cc52                	sw	s4,24(sp)
20400b4c:	ca56                	sw	s5,20(sp)
20400b4e:	c85a                	sw	s6,16(sp)
20400b50:	c65e                	sw	s7,12(sp)
20400b52:	d606                	sw	ra,44(sp)
20400b54:	d226                	sw	s1,36(sp)
20400b56:	ce4e                	sw	s3,28(sp)
20400b58:	8a2a                	mv	s4,a0
20400b5a:	8aae                	mv	s5,a1
20400b5c:	04850413          	addi	s0,a0,72
20400b60:	4901                	li	s2,0
20400b62:	4b05                	li	s6,1
20400b64:	5bfd                	li	s7,-1
20400b66:	ec09                	bnez	s0,20400b80 <_fwalk_reent+0x3c>
20400b68:	50b2                	lw	ra,44(sp)
20400b6a:	5422                	lw	s0,40(sp)
20400b6c:	854a                	mv	a0,s2
20400b6e:	5492                	lw	s1,36(sp)
20400b70:	5902                	lw	s2,32(sp)
20400b72:	49f2                	lw	s3,28(sp)
20400b74:	4a62                	lw	s4,24(sp)
20400b76:	4ad2                	lw	s5,20(sp)
20400b78:	4b42                	lw	s6,16(sp)
20400b7a:	4bb2                	lw	s7,12(sp)
20400b7c:	6145                	addi	sp,sp,48
20400b7e:	8082                	ret
20400b80:	4404                	lw	s1,8(s0)
20400b82:	00442983          	lw	s3,4(s0)
20400b86:	19fd                	addi	s3,s3,-1
20400b88:	0009d463          	bgez	s3,20400b90 <_fwalk_reent+0x4c>
20400b8c:	4000                	lw	s0,0(s0)
20400b8e:	bfe1                	j	20400b66 <_fwalk_reent+0x22>
20400b90:	00c4d783          	lhu	a5,12(s1)
20400b94:	00fb7b63          	bgeu	s6,a5,20400baa <_fwalk_reent+0x66>
20400b98:	00e49783          	lh	a5,14(s1)
20400b9c:	01778763          	beq	a5,s7,20400baa <_fwalk_reent+0x66>
20400ba0:	85a6                	mv	a1,s1
20400ba2:	8552                	mv	a0,s4
20400ba4:	9a82                	jalr	s5
20400ba6:	00a96933          	or	s2,s2,a0
20400baa:	06848493          	addi	s1,s1,104
20400bae:	bfe1                	j	20400b86 <_fwalk_reent+0x42>

20400bb0 <__swhatbuf_r>:
__swhatbuf_r():
20400bb0:	7119                	addi	sp,sp,-128
20400bb2:	daa6                	sw	s1,116(sp)
20400bb4:	84ae                	mv	s1,a1
20400bb6:	00e59583          	lh	a1,14(a1)
20400bba:	dca2                	sw	s0,120(sp)
20400bbc:	de86                	sw	ra,124(sp)
20400bbe:	8432                	mv	s0,a2
20400bc0:	0005dc63          	bgez	a1,20400bd8 <__swhatbuf_r+0x28>
20400bc4:	00c4d783          	lhu	a5,12(s1)
20400bc8:	0006a023          	sw	zero,0(a3)
20400bcc:	0807f793          	andi	a5,a5,128
20400bd0:	e39d                	bnez	a5,20400bf6 <__swhatbuf_r+0x46>
20400bd2:	40000793          	li	a5,1024
20400bd6:	a015                	j	20400bfa <__swhatbuf_r+0x4a>
20400bd8:	0830                	addi	a2,sp,24
20400bda:	c636                	sw	a3,12(sp)
20400bdc:	2f89                	jal	2040132e <_fstat_r>
20400bde:	46b2                	lw	a3,12(sp)
20400be0:	fe0542e3          	bltz	a0,20400bc4 <__swhatbuf_r+0x14>
20400be4:	4772                	lw	a4,28(sp)
20400be6:	67bd                	lui	a5,0xf
20400be8:	8ff9                	and	a5,a5,a4
20400bea:	7779                	lui	a4,0xffffe
20400bec:	97ba                	add	a5,a5,a4
20400bee:	0017b793          	seqz	a5,a5
20400bf2:	c29c                	sw	a5,0(a3)
20400bf4:	bff9                	j	20400bd2 <__swhatbuf_r+0x22>
20400bf6:	04000793          	li	a5,64
20400bfa:	c01c                	sw	a5,0(s0)
20400bfc:	50f6                	lw	ra,124(sp)
20400bfe:	5466                	lw	s0,120(sp)
20400c00:	54d6                	lw	s1,116(sp)
20400c02:	4501                	li	a0,0
20400c04:	6109                	addi	sp,sp,128
20400c06:	8082                	ret

20400c08 <__smakebuf_r>:
__smakebuf_r():
20400c08:	00c5d783          	lhu	a5,12(a1)
20400c0c:	1101                	addi	sp,sp,-32
20400c0e:	cc22                	sw	s0,24(sp)
20400c10:	ce06                	sw	ra,28(sp)
20400c12:	ca26                	sw	s1,20(sp)
20400c14:	c84a                	sw	s2,16(sp)
20400c16:	8b89                	andi	a5,a5,2
20400c18:	842e                	mv	s0,a1
20400c1a:	cf89                	beqz	a5,20400c34 <__smakebuf_r+0x2c>
20400c1c:	04740793          	addi	a5,s0,71
20400c20:	c01c                	sw	a5,0(s0)
20400c22:	c81c                	sw	a5,16(s0)
20400c24:	4785                	li	a5,1
20400c26:	c85c                	sw	a5,20(s0)
20400c28:	40f2                	lw	ra,28(sp)
20400c2a:	4462                	lw	s0,24(sp)
20400c2c:	44d2                	lw	s1,20(sp)
20400c2e:	4942                	lw	s2,16(sp)
20400c30:	6105                	addi	sp,sp,32
20400c32:	8082                	ret
20400c34:	0074                	addi	a3,sp,12
20400c36:	0030                	addi	a2,sp,8
20400c38:	84aa                	mv	s1,a0
20400c3a:	3f9d                	jal	20400bb0 <__swhatbuf_r>
20400c3c:	45a2                	lw	a1,8(sp)
20400c3e:	892a                	mv	s2,a0
20400c40:	8526                	mv	a0,s1
20400c42:	2a5d                	jal	20400df8 <_malloc_r>
20400c44:	ed01                	bnez	a0,20400c5c <__smakebuf_r+0x54>
20400c46:	00c41783          	lh	a5,12(s0)
20400c4a:	2007f713          	andi	a4,a5,512
20400c4e:	ff69                	bnez	a4,20400c28 <__smakebuf_r+0x20>
20400c50:	9bf1                	andi	a5,a5,-4
20400c52:	0027e793          	ori	a5,a5,2
20400c56:	00f41623          	sh	a5,12(s0)
20400c5a:	b7c9                	j	20400c1c <__smakebuf_r+0x14>
20400c5c:	00000797          	auipc	a5,0x0
20400c60:	d9278793          	addi	a5,a5,-622 # 204009ee <_cleanup_r>
20400c64:	d49c                	sw	a5,40(s1)
20400c66:	00c45783          	lhu	a5,12(s0)
20400c6a:	c008                	sw	a0,0(s0)
20400c6c:	c808                	sw	a0,16(s0)
20400c6e:	0807e793          	ori	a5,a5,128
20400c72:	00f41623          	sh	a5,12(s0)
20400c76:	47a2                	lw	a5,8(sp)
20400c78:	c85c                	sw	a5,20(s0)
20400c7a:	47b2                	lw	a5,12(sp)
20400c7c:	cf89                	beqz	a5,20400c96 <__smakebuf_r+0x8e>
20400c7e:	00e41583          	lh	a1,14(s0)
20400c82:	8526                	mv	a0,s1
20400c84:	2df9                	jal	20401362 <_isatty_r>
20400c86:	c901                	beqz	a0,20400c96 <__smakebuf_r+0x8e>
20400c88:	00c45783          	lhu	a5,12(s0)
20400c8c:	9bf1                	andi	a5,a5,-4
20400c8e:	0017e793          	ori	a5,a5,1
20400c92:	00f41623          	sh	a5,12(s0)
20400c96:	00c45783          	lhu	a5,12(s0)
20400c9a:	00f96933          	or	s2,s2,a5
20400c9e:	01241623          	sh	s2,12(s0)
20400ca2:	b759                	j	20400c28 <__smakebuf_r+0x20>

20400ca4 <memset>:
memset():
20400ca4:	433d                	li	t1,15
20400ca6:	872a                	mv	a4,a0
20400ca8:	02c37363          	bgeu	t1,a2,20400cce <memset+0x2a>
20400cac:	00f77793          	andi	a5,a4,15
20400cb0:	efbd                	bnez	a5,20400d2e <memset+0x8a>
20400cb2:	e5ad                	bnez	a1,20400d1c <memset+0x78>
20400cb4:	ff067693          	andi	a3,a2,-16
20400cb8:	8a3d                	andi	a2,a2,15
20400cba:	96ba                	add	a3,a3,a4
20400cbc:	c30c                	sw	a1,0(a4)
20400cbe:	c34c                	sw	a1,4(a4)
20400cc0:	c70c                	sw	a1,8(a4)
20400cc2:	c74c                	sw	a1,12(a4)
20400cc4:	0741                	addi	a4,a4,16
20400cc6:	fed76be3          	bltu	a4,a3,20400cbc <memset+0x18>
20400cca:	e211                	bnez	a2,20400cce <memset+0x2a>
20400ccc:	8082                	ret
20400cce:	40c306b3          	sub	a3,t1,a2
20400cd2:	068a                	slli	a3,a3,0x2
20400cd4:	00000297          	auipc	t0,0x0
20400cd8:	9696                	add	a3,a3,t0
20400cda:	00a68067          	jr	10(a3)
20400cde:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7ff9dd42>
20400ce2:	00b706a3          	sb	a1,13(a4)
20400ce6:	00b70623          	sb	a1,12(a4)
20400cea:	00b705a3          	sb	a1,11(a4)
20400cee:	00b70523          	sb	a1,10(a4)
20400cf2:	00b704a3          	sb	a1,9(a4)
20400cf6:	00b70423          	sb	a1,8(a4)
20400cfa:	00b703a3          	sb	a1,7(a4)
20400cfe:	00b70323          	sb	a1,6(a4)
20400d02:	00b702a3          	sb	a1,5(a4)
20400d06:	00b70223          	sb	a1,4(a4)
20400d0a:	00b701a3          	sb	a1,3(a4)
20400d0e:	00b70123          	sb	a1,2(a4)
20400d12:	00b700a3          	sb	a1,1(a4)
20400d16:	00b70023          	sb	a1,0(a4)
20400d1a:	8082                	ret
20400d1c:	0ff5f593          	andi	a1,a1,255
20400d20:	00859693          	slli	a3,a1,0x8
20400d24:	8dd5                	or	a1,a1,a3
20400d26:	01059693          	slli	a3,a1,0x10
20400d2a:	8dd5                	or	a1,a1,a3
20400d2c:	b761                	j	20400cb4 <memset+0x10>
20400d2e:	00279693          	slli	a3,a5,0x2
20400d32:	00000297          	auipc	t0,0x0
20400d36:	9696                	add	a3,a3,t0
20400d38:	8286                	mv	t0,ra
20400d3a:	fa8680e7          	jalr	-88(a3)
20400d3e:	8096                	mv	ra,t0
20400d40:	17c1                	addi	a5,a5,-16
20400d42:	8f1d                	sub	a4,a4,a5
20400d44:	963e                	add	a2,a2,a5
20400d46:	f8c374e3          	bgeu	t1,a2,20400cce <memset+0x2a>
20400d4a:	b7a5                	j	20400cb2 <memset+0xe>

20400d4c <_free_r>:
_free_r():
20400d4c:	c5cd                	beqz	a1,20400df6 <_free_r+0xaa>
20400d4e:	ffc5a783          	lw	a5,-4(a1)
20400d52:	1141                	addi	sp,sp,-16
20400d54:	c422                	sw	s0,8(sp)
20400d56:	c606                	sw	ra,12(sp)
20400d58:	c226                	sw	s1,4(sp)
20400d5a:	ffc58413          	addi	s0,a1,-4
20400d5e:	0007d363          	bgez	a5,20400d64 <_free_r+0x18>
20400d62:	943e                	add	s0,s0,a5
20400d64:	84aa                	mv	s1,a0
20400d66:	2dbd                	jal	204013e4 <__malloc_lock>
20400d68:	5fc00797          	auipc	a5,0x5fc00
20400d6c:	a0878793          	addi	a5,a5,-1528 # 80000770 <metal_segment_data_target_end>
20400d70:	439c                	lw	a5,0(a5)
20400d72:	ef89                	bnez	a5,20400d8c <_free_r+0x40>
20400d74:	00042223          	sw	zero,4(s0)
20400d78:	5fc00797          	auipc	a5,0x5fc00
20400d7c:	9e87ac23          	sw	s0,-1544(a5) # 80000770 <metal_segment_data_target_end>
20400d80:	4422                	lw	s0,8(sp)
20400d82:	40b2                	lw	ra,12(sp)
20400d84:	8526                	mv	a0,s1
20400d86:	4492                	lw	s1,4(sp)
20400d88:	0141                	addi	sp,sp,16
20400d8a:	adb1                	j	204013e6 <__malloc_unlock>
20400d8c:	00f47e63          	bgeu	s0,a5,20400da8 <_free_r+0x5c>
20400d90:	4014                	lw	a3,0(s0)
20400d92:	00d40733          	add	a4,s0,a3
20400d96:	00e79663          	bne	a5,a4,20400da2 <_free_r+0x56>
20400d9a:	4398                	lw	a4,0(a5)
20400d9c:	43dc                	lw	a5,4(a5)
20400d9e:	9736                	add	a4,a4,a3
20400da0:	c018                	sw	a4,0(s0)
20400da2:	c05c                	sw	a5,4(s0)
20400da4:	bfd1                	j	20400d78 <_free_r+0x2c>
20400da6:	87ba                	mv	a5,a4
20400da8:	43d8                	lw	a4,4(a5)
20400daa:	c319                	beqz	a4,20400db0 <_free_r+0x64>
20400dac:	fee47de3          	bgeu	s0,a4,20400da6 <_free_r+0x5a>
20400db0:	4394                	lw	a3,0(a5)
20400db2:	00d78633          	add	a2,a5,a3
20400db6:	00861f63          	bne	a2,s0,20400dd4 <_free_r+0x88>
20400dba:	4010                	lw	a2,0(s0)
20400dbc:	96b2                	add	a3,a3,a2
20400dbe:	c394                	sw	a3,0(a5)
20400dc0:	00d78633          	add	a2,a5,a3
20400dc4:	fac71ee3          	bne	a4,a2,20400d80 <_free_r+0x34>
20400dc8:	4310                	lw	a2,0(a4)
20400dca:	4358                	lw	a4,4(a4)
20400dcc:	96b2                	add	a3,a3,a2
20400dce:	c394                	sw	a3,0(a5)
20400dd0:	c3d8                	sw	a4,4(a5)
20400dd2:	b77d                	j	20400d80 <_free_r+0x34>
20400dd4:	00c47563          	bgeu	s0,a2,20400dde <_free_r+0x92>
20400dd8:	47b1                	li	a5,12
20400dda:	c09c                	sw	a5,0(s1)
20400ddc:	b755                	j	20400d80 <_free_r+0x34>
20400dde:	4010                	lw	a2,0(s0)
20400de0:	00c406b3          	add	a3,s0,a2
20400de4:	00d71663          	bne	a4,a3,20400df0 <_free_r+0xa4>
20400de8:	4314                	lw	a3,0(a4)
20400dea:	4358                	lw	a4,4(a4)
20400dec:	96b2                	add	a3,a3,a2
20400dee:	c014                	sw	a3,0(s0)
20400df0:	c058                	sw	a4,4(s0)
20400df2:	c3c0                	sw	s0,4(a5)
20400df4:	b771                	j	20400d80 <_free_r+0x34>
20400df6:	8082                	ret

20400df8 <_malloc_r>:
_malloc_r():
20400df8:	1101                	addi	sp,sp,-32
20400dfa:	ca26                	sw	s1,20(sp)
20400dfc:	00358493          	addi	s1,a1,3
20400e00:	98f1                	andi	s1,s1,-4
20400e02:	ce06                	sw	ra,28(sp)
20400e04:	cc22                	sw	s0,24(sp)
20400e06:	c84a                	sw	s2,16(sp)
20400e08:	c64e                	sw	s3,12(sp)
20400e0a:	04a1                	addi	s1,s1,8
20400e0c:	47b1                	li	a5,12
20400e0e:	04f4f763          	bgeu	s1,a5,20400e5c <_malloc_r+0x64>
20400e12:	44b1                	li	s1,12
20400e14:	04b4e663          	bltu	s1,a1,20400e60 <_malloc_r+0x68>
20400e18:	892a                	mv	s2,a0
20400e1a:	23e9                	jal	204013e4 <__malloc_lock>
20400e1c:	5fc00797          	auipc	a5,0x5fc00
20400e20:	95478793          	addi	a5,a5,-1708 # 80000770 <metal_segment_data_target_end>
20400e24:	4398                	lw	a4,0(a5)
20400e26:	843a                	mv	s0,a4
20400e28:	e431                	bnez	s0,20400e74 <_malloc_r+0x7c>
20400e2a:	5fc00797          	auipc	a5,0x5fc00
20400e2e:	94a78793          	addi	a5,a5,-1718 # 80000774 <__malloc_sbrk_start>
20400e32:	439c                	lw	a5,0(a5)
20400e34:	eb81                	bnez	a5,20400e44 <_malloc_r+0x4c>
20400e36:	4581                	li	a1,0
20400e38:	854a                	mv	a0,s2
20400e3a:	2645                	jal	204011da <_sbrk_r>
20400e3c:	5fc00797          	auipc	a5,0x5fc00
20400e40:	92a7ac23          	sw	a0,-1736(a5) # 80000774 <__malloc_sbrk_start>
20400e44:	85a6                	mv	a1,s1
20400e46:	854a                	mv	a0,s2
20400e48:	2e49                	jal	204011da <_sbrk_r>
20400e4a:	59fd                	li	s3,-1
20400e4c:	07351963          	bne	a0,s3,20400ebe <_malloc_r+0xc6>
20400e50:	47b1                	li	a5,12
20400e52:	00f92023          	sw	a5,0(s2)
20400e56:	854a                	mv	a0,s2
20400e58:	2379                	jal	204013e6 <__malloc_unlock>
20400e5a:	a029                	j	20400e64 <_malloc_r+0x6c>
20400e5c:	fa04dce3          	bgez	s1,20400e14 <_malloc_r+0x1c>
20400e60:	47b1                	li	a5,12
20400e62:	c11c                	sw	a5,0(a0)
20400e64:	4501                	li	a0,0
20400e66:	40f2                	lw	ra,28(sp)
20400e68:	4462                	lw	s0,24(sp)
20400e6a:	44d2                	lw	s1,20(sp)
20400e6c:	4942                	lw	s2,16(sp)
20400e6e:	49b2                	lw	s3,12(sp)
20400e70:	6105                	addi	sp,sp,32
20400e72:	8082                	ret
20400e74:	401c                	lw	a5,0(s0)
20400e76:	8f85                	sub	a5,a5,s1
20400e78:	0407c063          	bltz	a5,20400eb8 <_malloc_r+0xc0>
20400e7c:	46ad                	li	a3,11
20400e7e:	00f6f663          	bgeu	a3,a5,20400e8a <_malloc_r+0x92>
20400e82:	c01c                	sw	a5,0(s0)
20400e84:	943e                	add	s0,s0,a5
20400e86:	c004                	sw	s1,0(s0)
20400e88:	a801                	j	20400e98 <_malloc_r+0xa0>
20400e8a:	405c                	lw	a5,4(s0)
20400e8c:	02871463          	bne	a4,s0,20400eb4 <_malloc_r+0xbc>
20400e90:	5fc00717          	auipc	a4,0x5fc00
20400e94:	8ef72023          	sw	a5,-1824(a4) # 80000770 <metal_segment_data_target_end>
20400e98:	854a                	mv	a0,s2
20400e9a:	23b1                	jal	204013e6 <__malloc_unlock>
20400e9c:	00b40513          	addi	a0,s0,11
20400ea0:	00440793          	addi	a5,s0,4
20400ea4:	9961                	andi	a0,a0,-8
20400ea6:	40f50733          	sub	a4,a0,a5
20400eaa:	df55                	beqz	a4,20400e66 <_malloc_r+0x6e>
20400eac:	943a                	add	s0,s0,a4
20400eae:	8f89                	sub	a5,a5,a0
20400eb0:	c01c                	sw	a5,0(s0)
20400eb2:	bf55                	j	20400e66 <_malloc_r+0x6e>
20400eb4:	c35c                	sw	a5,4(a4)
20400eb6:	b7cd                	j	20400e98 <_malloc_r+0xa0>
20400eb8:	8722                	mv	a4,s0
20400eba:	4040                	lw	s0,4(s0)
20400ebc:	b7b5                	j	20400e28 <_malloc_r+0x30>
20400ebe:	00350413          	addi	s0,a0,3
20400ec2:	9871                	andi	s0,s0,-4
20400ec4:	fc8501e3          	beq	a0,s0,20400e86 <_malloc_r+0x8e>
20400ec8:	40a405b3          	sub	a1,s0,a0
20400ecc:	854a                	mv	a0,s2
20400ece:	2631                	jal	204011da <_sbrk_r>
20400ed0:	fb351be3          	bne	a0,s3,20400e86 <_malloc_r+0x8e>
20400ed4:	bfb5                	j	20400e50 <_malloc_r+0x58>

20400ed6 <__sfputc_r>:
__sfputc_r():
20400ed6:	461c                	lw	a5,8(a2)
20400ed8:	17fd                	addi	a5,a5,-1
20400eda:	c61c                	sw	a5,8(a2)
20400edc:	0007da63          	bgez	a5,20400ef0 <__sfputc_r+0x1a>
20400ee0:	4e18                	lw	a4,24(a2)
20400ee2:	00e7c563          	blt	a5,a4,20400eec <__sfputc_r+0x16>
20400ee6:	47a9                	li	a5,10
20400ee8:	00f59463          	bne	a1,a5,20400ef0 <__sfputc_r+0x1a>
20400eec:	f1cff06f          	j	20400608 <__swbuf_r>
20400ef0:	421c                	lw	a5,0(a2)
20400ef2:	852e                	mv	a0,a1
20400ef4:	00178713          	addi	a4,a5,1
20400ef8:	c218                	sw	a4,0(a2)
20400efa:	00b78023          	sb	a1,0(a5)
20400efe:	8082                	ret

20400f00 <__sfputs_r>:
__sfputs_r():
20400f00:	1101                	addi	sp,sp,-32
20400f02:	cc22                	sw	s0,24(sp)
20400f04:	ca26                	sw	s1,20(sp)
20400f06:	c84a                	sw	s2,16(sp)
20400f08:	c64e                	sw	s3,12(sp)
20400f0a:	c452                	sw	s4,8(sp)
20400f0c:	ce06                	sw	ra,28(sp)
20400f0e:	892a                	mv	s2,a0
20400f10:	89ae                	mv	s3,a1
20400f12:	8432                	mv	s0,a2
20400f14:	00d604b3          	add	s1,a2,a3
20400f18:	5a7d                	li	s4,-1
20400f1a:	00941463          	bne	s0,s1,20400f22 <__sfputs_r+0x22>
20400f1e:	4501                	li	a0,0
20400f20:	a809                	j	20400f32 <__sfputs_r+0x32>
20400f22:	00044583          	lbu	a1,0(s0)
20400f26:	864e                	mv	a2,s3
20400f28:	854a                	mv	a0,s2
20400f2a:	3775                	jal	20400ed6 <__sfputc_r>
20400f2c:	0405                	addi	s0,s0,1
20400f2e:	ff4516e3          	bne	a0,s4,20400f1a <__sfputs_r+0x1a>
20400f32:	40f2                	lw	ra,28(sp)
20400f34:	4462                	lw	s0,24(sp)
20400f36:	44d2                	lw	s1,20(sp)
20400f38:	4942                	lw	s2,16(sp)
20400f3a:	49b2                	lw	s3,12(sp)
20400f3c:	4a22                	lw	s4,8(sp)
20400f3e:	6105                	addi	sp,sp,32
20400f40:	8082                	ret

20400f42 <_vfiprintf_r>:
_vfiprintf_r():
20400f42:	7135                	addi	sp,sp,-160
20400f44:	cd22                	sw	s0,152(sp)
20400f46:	cb26                	sw	s1,148(sp)
20400f48:	c94a                	sw	s2,144(sp)
20400f4a:	c74e                	sw	s3,140(sp)
20400f4c:	cf06                	sw	ra,156(sp)
20400f4e:	c552                	sw	s4,136(sp)
20400f50:	c356                	sw	s5,132(sp)
20400f52:	c15a                	sw	s6,128(sp)
20400f54:	dede                	sw	s7,124(sp)
20400f56:	dce2                	sw	s8,120(sp)
20400f58:	dae6                	sw	s9,116(sp)
20400f5a:	89aa                	mv	s3,a0
20400f5c:	84ae                	mv	s1,a1
20400f5e:	8932                	mv	s2,a2
20400f60:	8436                	mv	s0,a3
20400f62:	c501                	beqz	a0,20400f6a <_vfiprintf_r+0x28>
20400f64:	4d1c                	lw	a5,24(a0)
20400f66:	e391                	bnez	a5,20400f6a <_vfiprintf_r+0x28>
20400f68:	3cd1                	jal	20400a3c <__sinit>
20400f6a:	00004797          	auipc	a5,0x4
20400f6e:	78678793          	addi	a5,a5,1926 # 204056f0 <__sf_fake_stdin>
20400f72:	0cf49b63          	bne	s1,a5,20401048 <_vfiprintf_r+0x106>
20400f76:	0049a483          	lw	s1,4(s3)
20400f7a:	00c4d783          	lhu	a5,12(s1)
20400f7e:	8ba1                	andi	a5,a5,8
20400f80:	c7f5                	beqz	a5,2040106c <_vfiprintf_r+0x12a>
20400f82:	489c                	lw	a5,16(s1)
20400f84:	c7e5                	beqz	a5,2040106c <_vfiprintf_r+0x12a>
20400f86:	02000793          	li	a5,32
20400f8a:	02f104a3          	sb	a5,41(sp)
20400f8e:	03000793          	li	a5,48
20400f92:	d202                	sw	zero,36(sp)
20400f94:	02f10523          	sb	a5,42(sp)
20400f98:	c622                	sw	s0,12(sp)
20400f9a:	02500b93          	li	s7,37
20400f9e:	00004a97          	auipc	s5,0x4
20400fa2:	792a8a93          	addi	s5,s5,1938 # 20405730 <__sf_fake_stdout+0x20>
20400fa6:	4c05                	li	s8,1
20400fa8:	4b29                	li	s6,10
20400faa:	844a                	mv	s0,s2
20400fac:	00044783          	lbu	a5,0(s0)
20400fb0:	c399                	beqz	a5,20400fb6 <_vfiprintf_r+0x74>
20400fb2:	0f779063          	bne	a5,s7,20401092 <_vfiprintf_r+0x150>
20400fb6:	41240cb3          	sub	s9,s0,s2
20400fba:	000c8d63          	beqz	s9,20400fd4 <_vfiprintf_r+0x92>
20400fbe:	86e6                	mv	a3,s9
20400fc0:	864a                	mv	a2,s2
20400fc2:	85a6                	mv	a1,s1
20400fc4:	854e                	mv	a0,s3
20400fc6:	3f2d                	jal	20400f00 <__sfputs_r>
20400fc8:	57fd                	li	a5,-1
20400fca:	1ef50663          	beq	a0,a5,204011b6 <_vfiprintf_r+0x274>
20400fce:	5692                	lw	a3,36(sp)
20400fd0:	96e6                	add	a3,a3,s9
20400fd2:	d236                	sw	a3,36(sp)
20400fd4:	00044783          	lbu	a5,0(s0)
20400fd8:	1c078f63          	beqz	a5,204011b6 <_vfiprintf_r+0x274>
20400fdc:	57fd                	li	a5,-1
20400fde:	00140913          	addi	s2,s0,1
20400fe2:	c802                	sw	zero,16(sp)
20400fe4:	ce02                	sw	zero,28(sp)
20400fe6:	ca3e                	sw	a5,20(sp)
20400fe8:	cc02                	sw	zero,24(sp)
20400fea:	040109a3          	sb	zero,83(sp)
20400fee:	d482                	sw	zero,104(sp)
20400ff0:	00094583          	lbu	a1,0(s2)
20400ff4:	4615                	li	a2,5
20400ff6:	8556                	mv	a0,s5
20400ff8:	2ec9                	jal	204013ca <memchr>
20400ffa:	00190413          	addi	s0,s2,1
20400ffe:	47c2                	lw	a5,16(sp)
20401000:	e959                	bnez	a0,20401096 <_vfiprintf_r+0x154>
20401002:	0107f713          	andi	a4,a5,16
20401006:	c709                	beqz	a4,20401010 <_vfiprintf_r+0xce>
20401008:	02000713          	li	a4,32
2040100c:	04e109a3          	sb	a4,83(sp)
20401010:	0087f713          	andi	a4,a5,8
20401014:	c709                	beqz	a4,2040101e <_vfiprintf_r+0xdc>
20401016:	02b00713          	li	a4,43
2040101a:	04e109a3          	sb	a4,83(sp)
2040101e:	00094683          	lbu	a3,0(s2)
20401022:	02a00713          	li	a4,42
20401026:	08e68063          	beq	a3,a4,204010a6 <_vfiprintf_r+0x164>
2040102a:	47f2                	lw	a5,28(sp)
2040102c:	844a                	mv	s0,s2
2040102e:	4681                	li	a3,0
20401030:	4625                	li	a2,9
20401032:	00044703          	lbu	a4,0(s0)
20401036:	00140593          	addi	a1,s0,1
2040103a:	fd070713          	addi	a4,a4,-48
2040103e:	0ae67963          	bgeu	a2,a4,204010f0 <_vfiprintf_r+0x1ae>
20401042:	cab5                	beqz	a3,204010b6 <_vfiprintf_r+0x174>
20401044:	ce3e                	sw	a5,28(sp)
20401046:	a885                	j	204010b6 <_vfiprintf_r+0x174>
20401048:	00004797          	auipc	a5,0x4
2040104c:	6c878793          	addi	a5,a5,1736 # 20405710 <__sf_fake_stdout>
20401050:	00f49563          	bne	s1,a5,2040105a <_vfiprintf_r+0x118>
20401054:	0089a483          	lw	s1,8(s3)
20401058:	b70d                	j	20400f7a <_vfiprintf_r+0x38>
2040105a:	00004797          	auipc	a5,0x4
2040105e:	67678793          	addi	a5,a5,1654 # 204056d0 <__sf_fake_stderr>
20401062:	f0f49ce3          	bne	s1,a5,20400f7a <_vfiprintf_r+0x38>
20401066:	00c9a483          	lw	s1,12(s3)
2040106a:	bf01                	j	20400f7a <_vfiprintf_r+0x38>
2040106c:	85a6                	mv	a1,s1
2040106e:	854e                	mv	a0,s3
20401070:	e58ff0ef          	jal	ra,204006c8 <__swsetup_r>
20401074:	d909                	beqz	a0,20400f86 <_vfiprintf_r+0x44>
20401076:	557d                	li	a0,-1
20401078:	40fa                	lw	ra,156(sp)
2040107a:	446a                	lw	s0,152(sp)
2040107c:	44da                	lw	s1,148(sp)
2040107e:	494a                	lw	s2,144(sp)
20401080:	49ba                	lw	s3,140(sp)
20401082:	4a2a                	lw	s4,136(sp)
20401084:	4a9a                	lw	s5,132(sp)
20401086:	4b0a                	lw	s6,128(sp)
20401088:	5bf6                	lw	s7,124(sp)
2040108a:	5c66                	lw	s8,120(sp)
2040108c:	5cd6                	lw	s9,116(sp)
2040108e:	610d                	addi	sp,sp,160
20401090:	8082                	ret
20401092:	0405                	addi	s0,s0,1
20401094:	bf21                	j	20400fac <_vfiprintf_r+0x6a>
20401096:	41550533          	sub	a0,a0,s5
2040109a:	00ac1533          	sll	a0,s8,a0
2040109e:	8fc9                	or	a5,a5,a0
204010a0:	c83e                	sw	a5,16(sp)
204010a2:	8922                	mv	s2,s0
204010a4:	b7b1                	j	20400ff0 <_vfiprintf_r+0xae>
204010a6:	4732                	lw	a4,12(sp)
204010a8:	00470693          	addi	a3,a4,4
204010ac:	4318                	lw	a4,0(a4)
204010ae:	c636                	sw	a3,12(sp)
204010b0:	02074963          	bltz	a4,204010e2 <_vfiprintf_r+0x1a0>
204010b4:	ce3a                	sw	a4,28(sp)
204010b6:	00044703          	lbu	a4,0(s0)
204010ba:	02e00793          	li	a5,46
204010be:	04f71f63          	bne	a4,a5,2040111c <_vfiprintf_r+0x1da>
204010c2:	00144703          	lbu	a4,1(s0)
204010c6:	02a00793          	li	a5,42
204010ca:	02f71b63          	bne	a4,a5,20401100 <_vfiprintf_r+0x1be>
204010ce:	47b2                	lw	a5,12(sp)
204010d0:	0409                	addi	s0,s0,2
204010d2:	00478713          	addi	a4,a5,4
204010d6:	439c                	lw	a5,0(a5)
204010d8:	c63a                	sw	a4,12(sp)
204010da:	0207c163          	bltz	a5,204010fc <_vfiprintf_r+0x1ba>
204010de:	ca3e                	sw	a5,20(sp)
204010e0:	a835                	j	2040111c <_vfiprintf_r+0x1da>
204010e2:	40e00733          	neg	a4,a4
204010e6:	0027e793          	ori	a5,a5,2
204010ea:	ce3a                	sw	a4,28(sp)
204010ec:	c83e                	sw	a5,16(sp)
204010ee:	b7e1                	j	204010b6 <_vfiprintf_r+0x174>
204010f0:	036787b3          	mul	a5,a5,s6
204010f4:	4685                	li	a3,1
204010f6:	842e                	mv	s0,a1
204010f8:	97ba                	add	a5,a5,a4
204010fa:	bf25                	j	20401032 <_vfiprintf_r+0xf0>
204010fc:	57fd                	li	a5,-1
204010fe:	b7c5                	j	204010de <_vfiprintf_r+0x19c>
20401100:	0405                	addi	s0,s0,1
20401102:	ca02                	sw	zero,20(sp)
20401104:	4681                	li	a3,0
20401106:	4781                	li	a5,0
20401108:	4625                	li	a2,9
2040110a:	00044703          	lbu	a4,0(s0)
2040110e:	00140593          	addi	a1,s0,1
20401112:	fd070713          	addi	a4,a4,-48
20401116:	06e67663          	bgeu	a2,a4,20401182 <_vfiprintf_r+0x240>
2040111a:	f2f1                	bnez	a3,204010de <_vfiprintf_r+0x19c>
2040111c:	00044583          	lbu	a1,0(s0)
20401120:	460d                	li	a2,3
20401122:	00004517          	auipc	a0,0x4
20401126:	61650513          	addi	a0,a0,1558 # 20405738 <__sf_fake_stdout+0x28>
2040112a:	2445                	jal	204013ca <memchr>
2040112c:	cd11                	beqz	a0,20401148 <_vfiprintf_r+0x206>
2040112e:	00004797          	auipc	a5,0x4
20401132:	60a78793          	addi	a5,a5,1546 # 20405738 <__sf_fake_stdout+0x28>
20401136:	8d1d                	sub	a0,a0,a5
20401138:	04000793          	li	a5,64
2040113c:	00a797b3          	sll	a5,a5,a0
20401140:	4542                	lw	a0,16(sp)
20401142:	0405                	addi	s0,s0,1
20401144:	8d5d                	or	a0,a0,a5
20401146:	c82a                	sw	a0,16(sp)
20401148:	00044583          	lbu	a1,0(s0)
2040114c:	4619                	li	a2,6
2040114e:	00004517          	auipc	a0,0x4
20401152:	5ee50513          	addi	a0,a0,1518 # 2040573c <__sf_fake_stdout+0x2c>
20401156:	00140913          	addi	s2,s0,1
2040115a:	02b10423          	sb	a1,40(sp)
2040115e:	24b5                	jal	204013ca <memchr>
20401160:	c13d                	beqz	a0,204011c6 <_vfiprintf_r+0x284>
20401162:	dfbff797          	auipc	a5,0xdfbff
20401166:	e9e78793          	addi	a5,a5,-354 # 0 <__metal_boot_hart>
2040116a:	e795                	bnez	a5,20401196 <_vfiprintf_r+0x254>
2040116c:	4742                	lw	a4,16(sp)
2040116e:	47b2                	lw	a5,12(sp)
20401170:	10077713          	andi	a4,a4,256
20401174:	cf09                	beqz	a4,2040118e <_vfiprintf_r+0x24c>
20401176:	0791                	addi	a5,a5,4
20401178:	c63e                	sw	a5,12(sp)
2040117a:	5792                	lw	a5,36(sp)
2040117c:	97d2                	add	a5,a5,s4
2040117e:	d23e                	sw	a5,36(sp)
20401180:	b52d                	j	20400faa <_vfiprintf_r+0x68>
20401182:	036787b3          	mul	a5,a5,s6
20401186:	4685                	li	a3,1
20401188:	842e                	mv	s0,a1
2040118a:	97ba                	add	a5,a5,a4
2040118c:	bfbd                	j	2040110a <_vfiprintf_r+0x1c8>
2040118e:	079d                	addi	a5,a5,7
20401190:	9be1                	andi	a5,a5,-8
20401192:	07a1                	addi	a5,a5,8
20401194:	b7d5                	j	20401178 <_vfiprintf_r+0x236>
20401196:	0078                	addi	a4,sp,12
20401198:	00000697          	auipc	a3,0x0
2040119c:	d6868693          	addi	a3,a3,-664 # 20400f00 <__sfputs_r>
204011a0:	8626                	mv	a2,s1
204011a2:	080c                	addi	a1,sp,16
204011a4:	854e                	mv	a0,s3
204011a6:	00000097          	auipc	ra,0x0
204011aa:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
204011ae:	57fd                	li	a5,-1
204011b0:	8a2a                	mv	s4,a0
204011b2:	fcf514e3          	bne	a0,a5,2040117a <_vfiprintf_r+0x238>
204011b6:	00c4d783          	lhu	a5,12(s1)
204011ba:	0407f793          	andi	a5,a5,64
204011be:	ea079ce3          	bnez	a5,20401076 <_vfiprintf_r+0x134>
204011c2:	5512                	lw	a0,36(sp)
204011c4:	bd55                	j	20401078 <_vfiprintf_r+0x136>
204011c6:	0078                	addi	a4,sp,12
204011c8:	00000697          	auipc	a3,0x0
204011cc:	d3868693          	addi	a3,a3,-712 # 20400f00 <__sfputs_r>
204011d0:	8626                	mv	a2,s1
204011d2:	080c                	addi	a1,sp,16
204011d4:	854e                	mv	a0,s3
204011d6:	2e39                	jal	204014f4 <_printf_i>
204011d8:	bfd9                	j	204011ae <_vfiprintf_r+0x26c>

204011da <_sbrk_r>:
_sbrk_r():
204011da:	1141                	addi	sp,sp,-16
204011dc:	c422                	sw	s0,8(sp)
204011de:	842a                	mv	s0,a0
204011e0:	852e                	mv	a0,a1
204011e2:	5fc5e797          	auipc	a5,0x5fc5e
204011e6:	4e07a323          	sw	zero,1254(a5) # 8005f6c8 <errno>
204011ea:	c606                	sw	ra,12(sp)
204011ec:	2d3000ef          	jal	ra,20401cbe <_sbrk>
204011f0:	57fd                	li	a5,-1
204011f2:	00f51963          	bne	a0,a5,20401204 <_sbrk_r+0x2a>
204011f6:	5fc5e797          	auipc	a5,0x5fc5e
204011fa:	4d278793          	addi	a5,a5,1234 # 8005f6c8 <errno>
204011fe:	439c                	lw	a5,0(a5)
20401200:	c391                	beqz	a5,20401204 <_sbrk_r+0x2a>
20401202:	c01c                	sw	a5,0(s0)
20401204:	40b2                	lw	ra,12(sp)
20401206:	4422                	lw	s0,8(sp)
20401208:	0141                	addi	sp,sp,16
2040120a:	8082                	ret

2040120c <__sread>:
__sread():
2040120c:	1141                	addi	sp,sp,-16
2040120e:	c422                	sw	s0,8(sp)
20401210:	842e                	mv	s0,a1
20401212:	00e59583          	lh	a1,14(a1)
20401216:	c606                	sw	ra,12(sp)
20401218:	2bbd                	jal	20401796 <_read_r>
2040121a:	00054963          	bltz	a0,2040122c <__sread+0x20>
2040121e:	487c                	lw	a5,84(s0)
20401220:	97aa                	add	a5,a5,a0
20401222:	c87c                	sw	a5,84(s0)
20401224:	40b2                	lw	ra,12(sp)
20401226:	4422                	lw	s0,8(sp)
20401228:	0141                	addi	sp,sp,16
2040122a:	8082                	ret
2040122c:	00c45783          	lhu	a5,12(s0)
20401230:	777d                	lui	a4,0xfffff
20401232:	177d                	addi	a4,a4,-1
20401234:	8ff9                	and	a5,a5,a4
20401236:	00f41623          	sh	a5,12(s0)
2040123a:	b7ed                	j	20401224 <__sread+0x18>

2040123c <__swrite>:
__swrite():
2040123c:	00c5d783          	lhu	a5,12(a1)
20401240:	1101                	addi	sp,sp,-32
20401242:	cc22                	sw	s0,24(sp)
20401244:	ca26                	sw	s1,20(sp)
20401246:	c84a                	sw	s2,16(sp)
20401248:	c64e                	sw	s3,12(sp)
2040124a:	ce06                	sw	ra,28(sp)
2040124c:	1007f793          	andi	a5,a5,256
20401250:	84aa                	mv	s1,a0
20401252:	842e                	mv	s0,a1
20401254:	8932                	mv	s2,a2
20401256:	89b6                	mv	s3,a3
20401258:	c791                	beqz	a5,20401264 <__swrite+0x28>
2040125a:	00e59583          	lh	a1,14(a1)
2040125e:	4689                	li	a3,2
20401260:	4601                	li	a2,0
20401262:	2a0d                	jal	20401394 <_lseek_r>
20401264:	00c45783          	lhu	a5,12(s0)
20401268:	777d                	lui	a4,0xfffff
2040126a:	177d                	addi	a4,a4,-1
2040126c:	8ff9                	and	a5,a5,a4
2040126e:	00f41623          	sh	a5,12(s0)
20401272:	00e41583          	lh	a1,14(s0)
20401276:	4462                	lw	s0,24(sp)
20401278:	40f2                	lw	ra,28(sp)
2040127a:	86ce                	mv	a3,s3
2040127c:	864a                	mv	a2,s2
2040127e:	49b2                	lw	s3,12(sp)
20401280:	4942                	lw	s2,16(sp)
20401282:	8526                	mv	a0,s1
20401284:	44d2                	lw	s1,20(sp)
20401286:	6105                	addi	sp,sp,32
20401288:	a83d                	j	204012c6 <_write_r>

2040128a <__sseek>:
__sseek():
2040128a:	1141                	addi	sp,sp,-16
2040128c:	c422                	sw	s0,8(sp)
2040128e:	842e                	mv	s0,a1
20401290:	00e59583          	lh	a1,14(a1)
20401294:	c606                	sw	ra,12(sp)
20401296:	28fd                	jal	20401394 <_lseek_r>
20401298:	57fd                	li	a5,-1
2040129a:	00c45703          	lhu	a4,12(s0)
2040129e:	00f51b63          	bne	a0,a5,204012b4 <__sseek+0x2a>
204012a2:	77fd                	lui	a5,0xfffff
204012a4:	17fd                	addi	a5,a5,-1
204012a6:	8ff9                	and	a5,a5,a4
204012a8:	00f41623          	sh	a5,12(s0)
204012ac:	40b2                	lw	ra,12(sp)
204012ae:	4422                	lw	s0,8(sp)
204012b0:	0141                	addi	sp,sp,16
204012b2:	8082                	ret
204012b4:	6785                	lui	a5,0x1
204012b6:	8fd9                	or	a5,a5,a4
204012b8:	00f41623          	sh	a5,12(s0)
204012bc:	c868                	sw	a0,84(s0)
204012be:	b7fd                	j	204012ac <__sseek+0x22>

204012c0 <__sclose>:
__sclose():
204012c0:	00e59583          	lh	a1,14(a1)
204012c4:	a825                	j	204012fc <_close_r>

204012c6 <_write_r>:
_write_r():
204012c6:	1141                	addi	sp,sp,-16
204012c8:	c422                	sw	s0,8(sp)
204012ca:	842a                	mv	s0,a0
204012cc:	852e                	mv	a0,a1
204012ce:	85b2                	mv	a1,a2
204012d0:	8636                	mv	a2,a3
204012d2:	5fc5e797          	auipc	a5,0x5fc5e
204012d6:	3e07ab23          	sw	zero,1014(a5) # 8005f6c8 <errno>
204012da:	c606                	sw	ra,12(sp)
204012dc:	261000ef          	jal	ra,20401d3c <_write>
204012e0:	57fd                	li	a5,-1
204012e2:	00f51963          	bne	a0,a5,204012f4 <_write_r+0x2e>
204012e6:	5fc5e797          	auipc	a5,0x5fc5e
204012ea:	3e278793          	addi	a5,a5,994 # 8005f6c8 <errno>
204012ee:	439c                	lw	a5,0(a5)
204012f0:	c391                	beqz	a5,204012f4 <_write_r+0x2e>
204012f2:	c01c                	sw	a5,0(s0)
204012f4:	40b2                	lw	ra,12(sp)
204012f6:	4422                	lw	s0,8(sp)
204012f8:	0141                	addi	sp,sp,16
204012fa:	8082                	ret

204012fc <_close_r>:
_close_r():
204012fc:	1141                	addi	sp,sp,-16
204012fe:	c422                	sw	s0,8(sp)
20401300:	842a                	mv	s0,a0
20401302:	852e                	mv	a0,a1
20401304:	5fc5e797          	auipc	a5,0x5fc5e
20401308:	3c07a223          	sw	zero,964(a5) # 8005f6c8 <errno>
2040130c:	c606                	sw	ra,12(sp)
2040130e:	0f5000ef          	jal	ra,20401c02 <_close>
20401312:	57fd                	li	a5,-1
20401314:	00f51963          	bne	a0,a5,20401326 <_close_r+0x2a>
20401318:	5fc5e797          	auipc	a5,0x5fc5e
2040131c:	3b078793          	addi	a5,a5,944 # 8005f6c8 <errno>
20401320:	439c                	lw	a5,0(a5)
20401322:	c391                	beqz	a5,20401326 <_close_r+0x2a>
20401324:	c01c                	sw	a5,0(s0)
20401326:	40b2                	lw	ra,12(sp)
20401328:	4422                	lw	s0,8(sp)
2040132a:	0141                	addi	sp,sp,16
2040132c:	8082                	ret

2040132e <_fstat_r>:
_fstat_r():
2040132e:	1141                	addi	sp,sp,-16
20401330:	c422                	sw	s0,8(sp)
20401332:	842a                	mv	s0,a0
20401334:	852e                	mv	a0,a1
20401336:	85b2                	mv	a1,a2
20401338:	5fc5e797          	auipc	a5,0x5fc5e
2040133c:	3807a823          	sw	zero,912(a5) # 8005f6c8 <errno>
20401340:	c606                	sw	ra,12(sp)
20401342:	0e3000ef          	jal	ra,20401c24 <_fstat>
20401346:	57fd                	li	a5,-1
20401348:	00f51963          	bne	a0,a5,2040135a <_fstat_r+0x2c>
2040134c:	5fc5e797          	auipc	a5,0x5fc5e
20401350:	37c78793          	addi	a5,a5,892 # 8005f6c8 <errno>
20401354:	439c                	lw	a5,0(a5)
20401356:	c391                	beqz	a5,2040135a <_fstat_r+0x2c>
20401358:	c01c                	sw	a5,0(s0)
2040135a:	40b2                	lw	ra,12(sp)
2040135c:	4422                	lw	s0,8(sp)
2040135e:	0141                	addi	sp,sp,16
20401360:	8082                	ret

20401362 <_isatty_r>:
_isatty_r():
20401362:	1141                	addi	sp,sp,-16
20401364:	c422                	sw	s0,8(sp)
20401366:	842a                	mv	s0,a0
20401368:	852e                	mv	a0,a1
2040136a:	5fc5e797          	auipc	a5,0x5fc5e
2040136e:	3407af23          	sw	zero,862(a5) # 8005f6c8 <errno>
20401372:	c606                	sw	ra,12(sp)
20401374:	0d7000ef          	jal	ra,20401c4a <_isatty>
20401378:	57fd                	li	a5,-1
2040137a:	00f51963          	bne	a0,a5,2040138c <_isatty_r+0x2a>
2040137e:	5fc5e797          	auipc	a5,0x5fc5e
20401382:	34a78793          	addi	a5,a5,842 # 8005f6c8 <errno>
20401386:	439c                	lw	a5,0(a5)
20401388:	c391                	beqz	a5,2040138c <_isatty_r+0x2a>
2040138a:	c01c                	sw	a5,0(s0)
2040138c:	40b2                	lw	ra,12(sp)
2040138e:	4422                	lw	s0,8(sp)
20401390:	0141                	addi	sp,sp,16
20401392:	8082                	ret

20401394 <_lseek_r>:
_lseek_r():
20401394:	1141                	addi	sp,sp,-16
20401396:	c422                	sw	s0,8(sp)
20401398:	842a                	mv	s0,a0
2040139a:	852e                	mv	a0,a1
2040139c:	85b2                	mv	a1,a2
2040139e:	8636                	mv	a2,a3
204013a0:	5fc5e797          	auipc	a5,0x5fc5e
204013a4:	3207a423          	sw	zero,808(a5) # 8005f6c8 <errno>
204013a8:	c606                	sw	ra,12(sp)
204013aa:	0c1000ef          	jal	ra,20401c6a <_lseek>
204013ae:	57fd                	li	a5,-1
204013b0:	00f51963          	bne	a0,a5,204013c2 <_lseek_r+0x2e>
204013b4:	5fc5e797          	auipc	a5,0x5fc5e
204013b8:	31478793          	addi	a5,a5,788 # 8005f6c8 <errno>
204013bc:	439c                	lw	a5,0(a5)
204013be:	c391                	beqz	a5,204013c2 <_lseek_r+0x2e>
204013c0:	c01c                	sw	a5,0(s0)
204013c2:	40b2                	lw	ra,12(sp)
204013c4:	4422                	lw	s0,8(sp)
204013c6:	0141                	addi	sp,sp,16
204013c8:	8082                	ret

204013ca <memchr>:
memchr():
204013ca:	0ff5f593          	andi	a1,a1,255
204013ce:	962a                	add	a2,a2,a0
204013d0:	00c51463          	bne	a0,a2,204013d8 <memchr+0xe>
204013d4:	4501                	li	a0,0
204013d6:	8082                	ret
204013d8:	00054783          	lbu	a5,0(a0)
204013dc:	feb78de3          	beq	a5,a1,204013d6 <memchr+0xc>
204013e0:	0505                	addi	a0,a0,1
204013e2:	b7fd                	j	204013d0 <memchr+0x6>

204013e4 <__malloc_lock>:
__malloc_lock():
204013e4:	8082                	ret

204013e6 <__malloc_unlock>:
__malloc_unlock():
204013e6:	8082                	ret

204013e8 <_printf_common>:
_printf_common():
204013e8:	7179                	addi	sp,sp,-48
204013ea:	ca56                	sw	s5,20(sp)
204013ec:	499c                	lw	a5,16(a1)
204013ee:	8aba                	mv	s5,a4
204013f0:	4598                	lw	a4,8(a1)
204013f2:	d422                	sw	s0,40(sp)
204013f4:	d226                	sw	s1,36(sp)
204013f6:	ce4e                	sw	s3,28(sp)
204013f8:	cc52                	sw	s4,24(sp)
204013fa:	d606                	sw	ra,44(sp)
204013fc:	d04a                	sw	s2,32(sp)
204013fe:	c85a                	sw	s6,16(sp)
20401400:	c65e                	sw	s7,12(sp)
20401402:	89aa                	mv	s3,a0
20401404:	842e                	mv	s0,a1
20401406:	84b2                	mv	s1,a2
20401408:	8a36                	mv	s4,a3
2040140a:	00e7d363          	bge	a5,a4,20401410 <_printf_common+0x28>
2040140e:	87ba                	mv	a5,a4
20401410:	c09c                	sw	a5,0(s1)
20401412:	04344703          	lbu	a4,67(s0)
20401416:	c319                	beqz	a4,2040141c <_printf_common+0x34>
20401418:	0785                	addi	a5,a5,1
2040141a:	c09c                	sw	a5,0(s1)
2040141c:	401c                	lw	a5,0(s0)
2040141e:	0207f793          	andi	a5,a5,32
20401422:	c781                	beqz	a5,2040142a <_printf_common+0x42>
20401424:	409c                	lw	a5,0(s1)
20401426:	0789                	addi	a5,a5,2
20401428:	c09c                	sw	a5,0(s1)
2040142a:	00042903          	lw	s2,0(s0)
2040142e:	00697913          	andi	s2,s2,6
20401432:	00091a63          	bnez	s2,20401446 <_printf_common+0x5e>
20401436:	01940b13          	addi	s6,s0,25
2040143a:	5bfd                	li	s7,-1
2040143c:	445c                	lw	a5,12(s0)
2040143e:	4098                	lw	a4,0(s1)
20401440:	8f99                	sub	a5,a5,a4
20401442:	04f94c63          	blt	s2,a5,2040149a <_printf_common+0xb2>
20401446:	401c                	lw	a5,0(s0)
20401448:	04344683          	lbu	a3,67(s0)
2040144c:	0207f793          	andi	a5,a5,32
20401450:	00d036b3          	snez	a3,a3
20401454:	eba5                	bnez	a5,204014c4 <_printf_common+0xdc>
20401456:	04340613          	addi	a2,s0,67
2040145a:	85d2                	mv	a1,s4
2040145c:	854e                	mv	a0,s3
2040145e:	9a82                	jalr	s5
20401460:	57fd                	li	a5,-1
20401462:	04f50363          	beq	a0,a5,204014a8 <_printf_common+0xc0>
20401466:	401c                	lw	a5,0(s0)
20401468:	4611                	li	a2,4
2040146a:	4098                	lw	a4,0(s1)
2040146c:	8b99                	andi	a5,a5,6
2040146e:	4454                	lw	a3,12(s0)
20401470:	4481                	li	s1,0
20401472:	00c79763          	bne	a5,a2,20401480 <_printf_common+0x98>
20401476:	40e684b3          	sub	s1,a3,a4
2040147a:	0004d363          	bgez	s1,20401480 <_printf_common+0x98>
2040147e:	4481                	li	s1,0
20401480:	441c                	lw	a5,8(s0)
20401482:	4818                	lw	a4,16(s0)
20401484:	00f75463          	bge	a4,a5,2040148c <_printf_common+0xa4>
20401488:	8f99                	sub	a5,a5,a4
2040148a:	94be                	add	s1,s1,a5
2040148c:	4901                	li	s2,0
2040148e:	0469                	addi	s0,s0,26
20401490:	5b7d                	li	s6,-1
20401492:	05249863          	bne	s1,s2,204014e2 <_printf_common+0xfa>
20401496:	4501                	li	a0,0
20401498:	a809                	j	204014aa <_printf_common+0xc2>
2040149a:	4685                	li	a3,1
2040149c:	865a                	mv	a2,s6
2040149e:	85d2                	mv	a1,s4
204014a0:	854e                	mv	a0,s3
204014a2:	9a82                	jalr	s5
204014a4:	01751e63          	bne	a0,s7,204014c0 <_printf_common+0xd8>
204014a8:	557d                	li	a0,-1
204014aa:	50b2                	lw	ra,44(sp)
204014ac:	5422                	lw	s0,40(sp)
204014ae:	5492                	lw	s1,36(sp)
204014b0:	5902                	lw	s2,32(sp)
204014b2:	49f2                	lw	s3,28(sp)
204014b4:	4a62                	lw	s4,24(sp)
204014b6:	4ad2                	lw	s5,20(sp)
204014b8:	4b42                	lw	s6,16(sp)
204014ba:	4bb2                	lw	s7,12(sp)
204014bc:	6145                	addi	sp,sp,48
204014be:	8082                	ret
204014c0:	0905                	addi	s2,s2,1
204014c2:	bfad                	j	2040143c <_printf_common+0x54>
204014c4:	00d40733          	add	a4,s0,a3
204014c8:	03000613          	li	a2,48
204014cc:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7ff9ed77>
204014d0:	04544703          	lbu	a4,69(s0)
204014d4:	00168793          	addi	a5,a3,1
204014d8:	97a2                	add	a5,a5,s0
204014da:	0689                	addi	a3,a3,2
204014dc:	04e781a3          	sb	a4,67(a5)
204014e0:	bf9d                	j	20401456 <_printf_common+0x6e>
204014e2:	4685                	li	a3,1
204014e4:	8622                	mv	a2,s0
204014e6:	85d2                	mv	a1,s4
204014e8:	854e                	mv	a0,s3
204014ea:	9a82                	jalr	s5
204014ec:	fb650ee3          	beq	a0,s6,204014a8 <_printf_common+0xc0>
204014f0:	0905                	addi	s2,s2,1
204014f2:	b745                	j	20401492 <_printf_common+0xaa>

204014f4 <_printf_i>:
_printf_i():
204014f4:	7179                	addi	sp,sp,-48
204014f6:	d422                	sw	s0,40(sp)
204014f8:	d226                	sw	s1,36(sp)
204014fa:	d04a                	sw	s2,32(sp)
204014fc:	ce4e                	sw	s3,28(sp)
204014fe:	d606                	sw	ra,44(sp)
20401500:	cc52                	sw	s4,24(sp)
20401502:	ca56                	sw	s5,20(sp)
20401504:	c85a                	sw	s6,16(sp)
20401506:	89b6                	mv	s3,a3
20401508:	0185c683          	lbu	a3,24(a1)
2040150c:	06e00793          	li	a5,110
20401510:	8932                	mv	s2,a2
20401512:	84aa                	mv	s1,a0
20401514:	842e                	mv	s0,a1
20401516:	04358613          	addi	a2,a1,67
2040151a:	1ef68063          	beq	a3,a5,204016fa <_printf_i+0x206>
2040151e:	06d7e263          	bltu	a5,a3,20401582 <_printf_i+0x8e>
20401522:	06300793          	li	a5,99
20401526:	0af68263          	beq	a3,a5,204015ca <_printf_i+0xd6>
2040152a:	00d7ed63          	bltu	a5,a3,20401544 <_printf_i+0x50>
2040152e:	1e068a63          	beqz	a3,20401722 <_printf_i+0x22e>
20401532:	05800793          	li	a5,88
20401536:	16f68663          	beq	a3,a5,204016a2 <_printf_i+0x1ae>
2040153a:	04240a93          	addi	s5,s0,66
2040153e:	04d40123          	sb	a3,66(s0)
20401542:	a869                	j	204015dc <_printf_i+0xe8>
20401544:	06400793          	li	a5,100
20401548:	00f68663          	beq	a3,a5,20401554 <_printf_i+0x60>
2040154c:	06900793          	li	a5,105
20401550:	fef695e3          	bne	a3,a5,2040153a <_printf_i+0x46>
20401554:	401c                	lw	a5,0(s0)
20401556:	4308                	lw	a0,0(a4)
20401558:	0807f693          	andi	a3,a5,128
2040155c:	00450593          	addi	a1,a0,4
20401560:	c2c1                	beqz	a3,204015e0 <_printf_i+0xec>
20401562:	411c                	lw	a5,0(a0)
20401564:	c30c                	sw	a1,0(a4)
20401566:	0007d863          	bgez	a5,20401576 <_printf_i+0x82>
2040156a:	02d00713          	li	a4,45
2040156e:	40f007b3          	neg	a5,a5
20401572:	04e401a3          	sb	a4,67(s0)
20401576:	00004697          	auipc	a3,0x4
2040157a:	1ce68693          	addi	a3,a3,462 # 20405744 <__sf_fake_stdout+0x34>
2040157e:	4729                	li	a4,10
20401580:	a065                	j	20401628 <_printf_i+0x134>
20401582:	07300793          	li	a5,115
20401586:	1af68263          	beq	a3,a5,2040172a <_printf_i+0x236>
2040158a:	00d7ef63          	bltu	a5,a3,204015a8 <_printf_i+0xb4>
2040158e:	06f00793          	li	a5,111
20401592:	04f68f63          	beq	a3,a5,204015f0 <_printf_i+0xfc>
20401596:	07000793          	li	a5,112
2040159a:	faf690e3          	bne	a3,a5,2040153a <_printf_i+0x46>
2040159e:	419c                	lw	a5,0(a1)
204015a0:	0207e793          	ori	a5,a5,32
204015a4:	c19c                	sw	a5,0(a1)
204015a6:	a809                	j	204015b8 <_printf_i+0xc4>
204015a8:	07500793          	li	a5,117
204015ac:	04f68263          	beq	a3,a5,204015f0 <_printf_i+0xfc>
204015b0:	07800793          	li	a5,120
204015b4:	f8f693e3          	bne	a3,a5,2040153a <_printf_i+0x46>
204015b8:	07800793          	li	a5,120
204015bc:	04f402a3          	sb	a5,69(s0)
204015c0:	00004697          	auipc	a3,0x4
204015c4:	19868693          	addi	a3,a3,408 # 20405758 <__sf_fake_stdout+0x48>
204015c8:	a0dd                	j	204016ae <_printf_i+0x1ba>
204015ca:	431c                	lw	a5,0(a4)
204015cc:	04258a93          	addi	s5,a1,66
204015d0:	00478693          	addi	a3,a5,4
204015d4:	439c                	lw	a5,0(a5)
204015d6:	c314                	sw	a3,0(a4)
204015d8:	04f58123          	sb	a5,66(a1)
204015dc:	4785                	li	a5,1
204015de:	a2ad                	j	20401748 <_printf_i+0x254>
204015e0:	0407f693          	andi	a3,a5,64
204015e4:	411c                	lw	a5,0(a0)
204015e6:	c30c                	sw	a1,0(a4)
204015e8:	debd                	beqz	a3,20401566 <_printf_i+0x72>
204015ea:	07c2                	slli	a5,a5,0x10
204015ec:	87c1                	srai	a5,a5,0x10
204015ee:	bfa5                	j	20401566 <_printf_i+0x72>
204015f0:	400c                	lw	a1,0(s0)
204015f2:	431c                	lw	a5,0(a4)
204015f4:	0805f813          	andi	a6,a1,128
204015f8:	00478513          	addi	a0,a5,4
204015fc:	00080563          	beqz	a6,20401606 <_printf_i+0x112>
20401600:	c308                	sw	a0,0(a4)
20401602:	439c                	lw	a5,0(a5)
20401604:	a039                	j	20401612 <_printf_i+0x11e>
20401606:	0405f593          	andi	a1,a1,64
2040160a:	c308                	sw	a0,0(a4)
2040160c:	d9fd                	beqz	a1,20401602 <_printf_i+0x10e>
2040160e:	0007d783          	lhu	a5,0(a5)
20401612:	06f00713          	li	a4,111
20401616:	0ce68a63          	beq	a3,a4,204016ea <_printf_i+0x1f6>
2040161a:	00004697          	auipc	a3,0x4
2040161e:	12a68693          	addi	a3,a3,298 # 20405744 <__sf_fake_stdout+0x34>
20401622:	4729                	li	a4,10
20401624:	040401a3          	sb	zero,67(s0)
20401628:	404c                	lw	a1,4(s0)
2040162a:	c40c                	sw	a1,8(s0)
2040162c:	0005c563          	bltz	a1,20401636 <_printf_i+0x142>
20401630:	4008                	lw	a0,0(s0)
20401632:	996d                	andi	a0,a0,-5
20401634:	c008                	sw	a0,0(s0)
20401636:	e399                	bnez	a5,2040163c <_printf_i+0x148>
20401638:	8ab2                	mv	s5,a2
2040163a:	cd91                	beqz	a1,20401656 <_printf_i+0x162>
2040163c:	8ab2                	mv	s5,a2
2040163e:	02e7f5b3          	remu	a1,a5,a4
20401642:	1afd                	addi	s5,s5,-1
20401644:	95b6                	add	a1,a1,a3
20401646:	0005c583          	lbu	a1,0(a1)
2040164a:	00ba8023          	sb	a1,0(s5)
2040164e:	02e7d5b3          	divu	a1,a5,a4
20401652:	0ae7f263          	bgeu	a5,a4,204016f6 <_printf_i+0x202>
20401656:	47a1                	li	a5,8
20401658:	00f71e63          	bne	a4,a5,20401674 <_printf_i+0x180>
2040165c:	401c                	lw	a5,0(s0)
2040165e:	8b85                	andi	a5,a5,1
20401660:	cb91                	beqz	a5,20401674 <_printf_i+0x180>
20401662:	4058                	lw	a4,4(s0)
20401664:	481c                	lw	a5,16(s0)
20401666:	00e7c763          	blt	a5,a4,20401674 <_printf_i+0x180>
2040166a:	03000793          	li	a5,48
2040166e:	fefa8fa3          	sb	a5,-1(s5)
20401672:	1afd                	addi	s5,s5,-1
20401674:	41560633          	sub	a2,a2,s5
20401678:	c810                	sw	a2,16(s0)
2040167a:	874e                	mv	a4,s3
2040167c:	86ca                	mv	a3,s2
2040167e:	0070                	addi	a2,sp,12
20401680:	85a2                	mv	a1,s0
20401682:	8526                	mv	a0,s1
20401684:	3395                	jal	204013e8 <_printf_common>
20401686:	5a7d                	li	s4,-1
20401688:	0d451463          	bne	a0,s4,20401750 <_printf_i+0x25c>
2040168c:	557d                	li	a0,-1
2040168e:	50b2                	lw	ra,44(sp)
20401690:	5422                	lw	s0,40(sp)
20401692:	5492                	lw	s1,36(sp)
20401694:	5902                	lw	s2,32(sp)
20401696:	49f2                	lw	s3,28(sp)
20401698:	4a62                	lw	s4,24(sp)
2040169a:	4ad2                	lw	s5,20(sp)
2040169c:	4b42                	lw	s6,16(sp)
2040169e:	6145                	addi	sp,sp,48
204016a0:	8082                	ret
204016a2:	04d582a3          	sb	a3,69(a1)
204016a6:	00004697          	auipc	a3,0x4
204016aa:	09e68693          	addi	a3,a3,158 # 20405744 <__sf_fake_stdout+0x34>
204016ae:	400c                	lw	a1,0(s0)
204016b0:	4308                	lw	a0,0(a4)
204016b2:	0805f813          	andi	a6,a1,128
204016b6:	411c                	lw	a5,0(a0)
204016b8:	0511                	addi	a0,a0,4
204016ba:	02080063          	beqz	a6,204016da <_printf_i+0x1e6>
204016be:	c308                	sw	a0,0(a4)
204016c0:	0015f713          	andi	a4,a1,1
204016c4:	c701                	beqz	a4,204016cc <_printf_i+0x1d8>
204016c6:	0205e593          	ori	a1,a1,32
204016ca:	c00c                	sw	a1,0(s0)
204016cc:	4741                	li	a4,16
204016ce:	fbb9                	bnez	a5,20401624 <_printf_i+0x130>
204016d0:	400c                	lw	a1,0(s0)
204016d2:	fdf5f593          	andi	a1,a1,-33
204016d6:	c00c                	sw	a1,0(s0)
204016d8:	b7b1                	j	20401624 <_printf_i+0x130>
204016da:	0405f813          	andi	a6,a1,64
204016de:	c308                	sw	a0,0(a4)
204016e0:	fe0800e3          	beqz	a6,204016c0 <_printf_i+0x1cc>
204016e4:	07c2                	slli	a5,a5,0x10
204016e6:	83c1                	srli	a5,a5,0x10
204016e8:	bfe1                	j	204016c0 <_printf_i+0x1cc>
204016ea:	00004697          	auipc	a3,0x4
204016ee:	05a68693          	addi	a3,a3,90 # 20405744 <__sf_fake_stdout+0x34>
204016f2:	4721                	li	a4,8
204016f4:	bf05                	j	20401624 <_printf_i+0x130>
204016f6:	87ae                	mv	a5,a1
204016f8:	b799                	j	2040163e <_printf_i+0x14a>
204016fa:	4194                	lw	a3,0(a1)
204016fc:	431c                	lw	a5,0(a4)
204016fe:	49cc                	lw	a1,20(a1)
20401700:	0806f813          	andi	a6,a3,128
20401704:	00478513          	addi	a0,a5,4
20401708:	00080663          	beqz	a6,20401714 <_printf_i+0x220>
2040170c:	c308                	sw	a0,0(a4)
2040170e:	439c                	lw	a5,0(a5)
20401710:	c38c                	sw	a1,0(a5)
20401712:	a801                	j	20401722 <_printf_i+0x22e>
20401714:	c308                	sw	a0,0(a4)
20401716:	0406f693          	andi	a3,a3,64
2040171a:	439c                	lw	a5,0(a5)
2040171c:	daf5                	beqz	a3,20401710 <_printf_i+0x21c>
2040171e:	00b79023          	sh	a1,0(a5)
20401722:	00042823          	sw	zero,16(s0)
20401726:	8ab2                	mv	s5,a2
20401728:	bf89                	j	2040167a <_printf_i+0x186>
2040172a:	431c                	lw	a5,0(a4)
2040172c:	41d0                	lw	a2,4(a1)
2040172e:	4581                	li	a1,0
20401730:	00478693          	addi	a3,a5,4
20401734:	c314                	sw	a3,0(a4)
20401736:	0007aa83          	lw	s5,0(a5)
2040173a:	8556                	mv	a0,s5
2040173c:	3179                	jal	204013ca <memchr>
2040173e:	c501                	beqz	a0,20401746 <_printf_i+0x252>
20401740:	41550533          	sub	a0,a0,s5
20401744:	c048                	sw	a0,4(s0)
20401746:	405c                	lw	a5,4(s0)
20401748:	c81c                	sw	a5,16(s0)
2040174a:	040401a3          	sb	zero,67(s0)
2040174e:	b735                	j	2040167a <_printf_i+0x186>
20401750:	4814                	lw	a3,16(s0)
20401752:	8656                	mv	a2,s5
20401754:	85ca                	mv	a1,s2
20401756:	8526                	mv	a0,s1
20401758:	9982                	jalr	s3
2040175a:	f34509e3          	beq	a0,s4,2040168c <_printf_i+0x198>
2040175e:	401c                	lw	a5,0(s0)
20401760:	8b89                	andi	a5,a5,2
20401762:	e78d                	bnez	a5,2040178c <_printf_i+0x298>
20401764:	47b2                	lw	a5,12(sp)
20401766:	4448                	lw	a0,12(s0)
20401768:	f2f553e3          	bge	a0,a5,2040168e <_printf_i+0x19a>
2040176c:	853e                	mv	a0,a5
2040176e:	b705                	j	2040168e <_printf_i+0x19a>
20401770:	4685                	li	a3,1
20401772:	8656                	mv	a2,s5
20401774:	85ca                	mv	a1,s2
20401776:	8526                	mv	a0,s1
20401778:	9982                	jalr	s3
2040177a:	f16509e3          	beq	a0,s6,2040168c <_printf_i+0x198>
2040177e:	0a05                	addi	s4,s4,1
20401780:	445c                	lw	a5,12(s0)
20401782:	4732                	lw	a4,12(sp)
20401784:	8f99                	sub	a5,a5,a4
20401786:	fefa45e3          	blt	s4,a5,20401770 <_printf_i+0x27c>
2040178a:	bfe9                	j	20401764 <_printf_i+0x270>
2040178c:	4a01                	li	s4,0
2040178e:	01940a93          	addi	s5,s0,25
20401792:	5b7d                	li	s6,-1
20401794:	b7f5                	j	20401780 <_printf_i+0x28c>

20401796 <_read_r>:
_read_r():
20401796:	1141                	addi	sp,sp,-16
20401798:	c422                	sw	s0,8(sp)
2040179a:	842a                	mv	s0,a0
2040179c:	852e                	mv	a0,a1
2040179e:	85b2                	mv	a1,a2
204017a0:	8636                	mv	a2,a3
204017a2:	5fc5e797          	auipc	a5,0x5fc5e
204017a6:	f207a323          	sw	zero,-218(a5) # 8005f6c8 <errno>
204017aa:	c606                	sw	ra,12(sp)
204017ac:	21e5                	jal	20401c94 <_read>
204017ae:	57fd                	li	a5,-1
204017b0:	00f51963          	bne	a0,a5,204017c2 <_read_r+0x2c>
204017b4:	5fc5e797          	auipc	a5,0x5fc5e
204017b8:	f1478793          	addi	a5,a5,-236 # 8005f6c8 <errno>
204017bc:	439c                	lw	a5,0(a5)
204017be:	c391                	beqz	a5,204017c2 <_read_r+0x2c>
204017c0:	c01c                	sw	a5,0(s0)
204017c2:	40b2                	lw	ra,12(sp)
204017c4:	4422                	lw	s0,8(sp)
204017c6:	0141                	addi	sp,sp,16
204017c8:	8082                	ret

204017ca <__addsf3>:
__addsf3():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204017ca:	00800737          	lui	a4,0x800
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
204017ce:	1141                	addi	sp,sp,-16
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204017d0:	177d                	addi	a4,a4,-1
204017d2:	00a777b3          	and	a5,a4,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
204017d6:	c226                	sw	s1,4(sp)
204017d8:	c04a                	sw	s2,0(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204017da:	01f55493          	srli	s1,a0,0x1f
204017de:	01755913          	srli	s2,a0,0x17
204017e2:	0175d513          	srli	a0,a1,0x17
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204017e6:	8f6d                	and	a4,a4,a1
204017e8:	0ff97913          	andi	s2,s2,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204017ec:	0ff57513          	andi	a0,a0,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:36
204017f0:	c606                	sw	ra,12(sp)
204017f2:	c422                	sw	s0,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204017f4:	81fd                	srli	a1,a1,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
204017f6:	078e                	slli	a5,a5,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204017f8:	070e                	slli	a4,a4,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204017fa:	40a906b3          	sub	a3,s2,a0
204017fe:	12b49263          	bne	s1,a1,20401922 <__addsf3+0x158>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 7)
20401802:	06d05a63          	blez	a3,20401876 <__addsf3+0xac>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 9)
20401806:	e121                	bnez	a0,20401846 <__addsf3+0x7c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 11)
20401808:	26070863          	beqz	a4,20401a78 <__addsf3+0x2ae>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 14)
2040180c:	16fd                	addi	a3,a3,-1
2040180e:	e68d                	bnez	a3,20401838 <__addsf3+0x6e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 59)
20401810:	97ba                	add	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 59)
20401812:	854a                	mv	a0,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 112)
20401814:	00579713          	slli	a4,a5,0x5
20401818:	0c075963          	bgez	a4,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 171)
2040181c:	0505                	addi	a0,a0,1
2040181e:	0ff00713          	li	a4,255
20401822:	26e50163          	beq	a0,a4,20401a84 <__addsf3+0x2ba>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401826:	7e000737          	lui	a4,0x7e000
2040182a:	0017f693          	andi	a3,a5,1
2040182e:	177d                	addi	a4,a4,-1
20401830:	8385                	srli	a5,a5,0x1
20401832:	8ff9                	and	a5,a5,a4
20401834:	8fd5                	or	a5,a5,a3
20401836:	a855                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 24)
20401838:	0ff00613          	li	a2,255
2040183c:	00c91c63          	bne	s2,a2,20401854 <__addsf3+0x8a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401840:	0ff00513          	li	a0,255
20401844:	a05d                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 12)
20401846:	0ff00613          	li	a2,255
2040184a:	fec90be3          	beq	s2,a2,20401840 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 38)
2040184e:	04000637          	lui	a2,0x4000
20401852:	8f51                	or	a4,a4,a2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401854:	466d                	li	a2,27
20401856:	00d65463          	bge	a2,a3,2040185e <__addsf3+0x94>
2040185a:	4705                	li	a4,1
2040185c:	bf55                	j	20401810 <__addsf3+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 48)
2040185e:	02000613          	li	a2,32
20401862:	00d755b3          	srl	a1,a4,a3
20401866:	40d606b3          	sub	a3,a2,a3
2040186a:	00d71733          	sll	a4,a4,a3
2040186e:	00e03733          	snez	a4,a4
20401872:	8f4d                	or	a4,a4,a1
20401874:	bf71                	j	20401810 <__addsf3+0x46>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 10)
20401876:	c6b9                	beqz	a3,204018c4 <__addsf3+0xfa>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 61)
20401878:	41250633          	sub	a2,a0,s2
2040187c:	00091d63          	bnez	s2,20401896 <__addsf3+0xcc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 63)
20401880:	cb89                	beqz	a5,20401892 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 66)
20401882:	167d                	addi	a2,a2,-1
20401884:	e219                	bnez	a2,2040188a <__addsf3+0xc0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 111)
20401886:	97ba                	add	a5,a5,a4
20401888:	b771                	j	20401814 <__addsf3+0x4a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 76)
2040188a:	0ff00693          	li	a3,255
2040188e:	00d51b63          	bne	a0,a3,204018a4 <__addsf3+0xda>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20401892:	87ba                	mv	a5,a4
20401894:	a899                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 64)
20401896:	0ff00693          	li	a3,255
2040189a:	fed50ce3          	beq	a0,a3,20401892 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 90)
2040189e:	040006b7          	lui	a3,0x4000
204018a2:	8fd5                	or	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204018a4:	46ed                	li	a3,27
204018a6:	00c6d463          	bge	a3,a2,204018ae <__addsf3+0xe4>
204018aa:	4785                	li	a5,1
204018ac:	bfe9                	j	20401886 <__addsf3+0xbc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 100)
204018ae:	02000693          	li	a3,32
204018b2:	8e91                	sub	a3,a3,a2
204018b4:	00c7d5b3          	srl	a1,a5,a2
204018b8:	00d797b3          	sll	a5,a5,a3
204018bc:	00f037b3          	snez	a5,a5
204018c0:	8fcd                	or	a5,a5,a1
204018c2:	b7d1                	j	20401886 <__addsf3+0xbc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 62)
204018c4:	00190693          	addi	a3,s2,1
204018c8:	0fe6f513          	andi	a0,a3,254
204018cc:	e139                	bnez	a0,20401912 <__addsf3+0x148>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 113)
204018ce:	02091963          	bnez	s2,20401900 <__addsf3+0x136>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 115)
204018d2:	d3e1                	beqz	a5,20401892 <__addsf3+0xc8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 118)
204018d4:	cb19                	beqz	a4,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 124)
204018d6:	97ba                	add	a5,a5,a4
204018d8:	00579713          	slli	a4,a5,0x5
204018dc:	00075763          	bgez	a4,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 126)
204018e0:	fc000737          	lui	a4,0xfc000
204018e4:	177d                	addi	a4,a4,-1
204018e6:	8ff9                	and	a5,a5,a4
204018e8:	4505                	li	a0,1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 376)
204018ea:	0077f713          	andi	a4,a5,7
204018ee:	18070c63          	beqz	a4,20401a86 <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 37)
204018f2:	00f7f713          	andi	a4,a5,15
204018f6:	4691                	li	a3,4
204018f8:	18d70763          	beq	a4,a3,20401a86 <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 44)
204018fc:	0791                	addi	a5,a5,4
204018fe:	a261                	j	20401a86 <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 143)
20401900:	16078e63          	beqz	a5,20401a7c <__addsf3+0x2b2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 329)
20401904:	df15                	beqz	a4,20401840 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401906:	4481                	li	s1,0
20401908:	020007b7          	lui	a5,0x2000
2040190c:	0ff00513          	li	a0,255
20401910:	aa9d                	j	20401a86 <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 114)
20401912:	0ff00613          	li	a2,255
20401916:	16c68563          	beq	a3,a2,20401a80 <__addsf3+0x2b6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
2040191a:	97ba                	add	a5,a5,a4
2040191c:	8385                	srli	a5,a5,0x1
2040191e:	8536                	mv	a0,a3
20401920:	b7e9                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 8)
20401922:	06d05563          	blez	a3,2040198c <__addsf3+0x1c2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 189)
20401926:	e91d                	bnez	a0,2040195c <__addsf3+0x192>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 191)
20401928:	854a                	mv	a0,s2
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 191)
2040192a:	d361                	beqz	a4,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 194)
2040192c:	16fd                	addi	a3,a3,-1
2040192e:	ee81                	bnez	a3,20401946 <__addsf3+0x17c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 203)
20401930:	8f99                	sub	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 292)
20401932:	00579713          	slli	a4,a5,0x5
20401936:	fa075ae3          	bgez	a4,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 351)
2040193a:	04000437          	lui	s0,0x4000
2040193e:	147d                	addi	s0,s0,-1
20401940:	8c7d                	and	s0,s0,a5
20401942:	892a                	mv	s2,a0
20401944:	a8c5                	j	20401a34 <__addsf3+0x26a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 204)
20401946:	0ff00613          	li	a2,255
2040194a:	0ff00513          	li	a0,255
2040194e:	f8c90ee3          	beq	s2,a2,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401952:	466d                	li	a2,27
20401954:	00d65e63          	bge	a2,a3,20401970 <__addsf3+0x1a6>
20401958:	4705                	li	a4,1
2040195a:	a035                	j	20401986 <__addsf3+0x1bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 192)
2040195c:	0ff00613          	li	a2,255
20401960:	0ff00513          	li	a0,255
20401964:	f8c903e3          	beq	s2,a2,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 218)
20401968:	04000637          	lui	a2,0x4000
2040196c:	8f51                	or	a4,a4,a2
2040196e:	b7d5                	j	20401952 <__addsf3+0x188>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 228)
20401970:	02000613          	li	a2,32
20401974:	00d755b3          	srl	a1,a4,a3
20401978:	40d606b3          	sub	a3,a2,a3
2040197c:	00d71733          	sll	a4,a4,a3
20401980:	00e03733          	snez	a4,a4
20401984:	8f4d                	or	a4,a4,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 239)
20401986:	8f99                	sub	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44 (discriminator 239)
20401988:	854a                	mv	a0,s2
2040198a:	b765                	j	20401932 <__addsf3+0x168>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 190)
2040198c:	cab9                	beqz	a3,204019e2 <__addsf3+0x218>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 241)
2040198e:	41250633          	sub	a2,a0,s2
20401992:	02091063          	bnez	s2,204019b2 <__addsf3+0x1e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 243)
20401996:	cb99                	beqz	a5,204019ac <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 246)
20401998:	167d                	addi	a2,a2,-1
2040199a:	e609                	bnez	a2,204019a4 <__addsf3+0x1da>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 291)
2040199c:	40f707b3          	sub	a5,a4,a5
204019a0:	84ae                	mv	s1,a1
204019a2:	bf41                	j	20401932 <__addsf3+0x168>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 256)
204019a4:	0ff00693          	li	a3,255
204019a8:	00d51c63          	bne	a0,a3,204019c0 <__addsf3+0x1f6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
204019ac:	87ba                	mv	a5,a4
204019ae:	84ae                	mv	s1,a1
204019b0:	bf2d                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 244)
204019b2:	0ff00693          	li	a3,255
204019b6:	fed50be3          	beq	a0,a3,204019ac <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 270)
204019ba:	040006b7          	lui	a3,0x4000
204019be:	8fd5                	or	a5,a5,a3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204019c0:	46ed                	li	a3,27
204019c2:	00c6d463          	bge	a3,a2,204019ca <__addsf3+0x200>
204019c6:	4785                	li	a5,1
204019c8:	bfd1                	j	2040199c <__addsf3+0x1d2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 280)
204019ca:	02000693          	li	a3,32
204019ce:	8e91                	sub	a3,a3,a2
204019d0:	00c7d833          	srl	a6,a5,a2
204019d4:	00d797b3          	sll	a5,a5,a3
204019d8:	00f037b3          	snez	a5,a5
204019dc:	00f867b3          	or	a5,a6,a5
204019e0:	bf75                	j	2040199c <__addsf3+0x1d2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 242)
204019e2:	00190513          	addi	a0,s2,1
204019e6:	0fe57513          	andi	a0,a0,254
204019ea:	ed05                	bnez	a0,20401a22 <__addsf3+0x258>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 293)
204019ec:	02091463          	bnez	s2,20401a14 <__addsf3+0x24a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 295)
204019f0:	e789                	bnez	a5,204019fa <__addsf3+0x230>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 297)
204019f2:	ff4d                	bnez	a4,204019ac <__addsf3+0x1e2>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
204019f4:	4781                	li	a5,0
204019f6:	4481                	li	s1,0
204019f8:	a079                	j	20401a86 <__addsf3+0x2bc>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 298)
204019fa:	ee0708e3          	beqz	a4,204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 305)
204019fe:	40e786b3          	sub	a3,a5,a4
20401a02:	00569613          	slli	a2,a3,0x5
20401a06:	40f707b3          	sub	a5,a4,a5
20401a0a:	fa0642e3          	bltz	a2,204019ae <__addsf3+0x1e4>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 308)
20401a0e:	d2fd                	beqz	a3,204019f4 <__addsf3+0x22a>
20401a10:	87b6                	mv	a5,a3
20401a12:	bde1                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 327)
20401a14:	ee0798e3          	bnez	a5,20401904 <__addsf3+0x13a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 328)
20401a18:	ee0707e3          	beqz	a4,20401906 <__addsf3+0x13c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401a1c:	87ba                	mv	a5,a4
20401a1e:	84ae                	mv	s1,a1
20401a20:	b505                	j	20401840 <__addsf3+0x76>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 294)
20401a22:	40e78433          	sub	s0,a5,a4
20401a26:	00541693          	slli	a3,s0,0x5
20401a2a:	0206dc63          	bgez	a3,20401a62 <__addsf3+0x298>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 344)
20401a2e:	40f70433          	sub	s0,a4,a5
20401a32:	84ae                	mv	s1,a1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 354)
20401a34:	8522                	mv	a0,s0
20401a36:	2a41                	jal	20401bc6 <__clzsi2>
20401a38:	156d                	addi	a0,a0,-5
20401a3a:	00a41433          	sll	s0,s0,a0
20401a3e:	03254663          	blt	a0,s2,20401a6a <__addsf3+0x2a0>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 367)
20401a42:	41250533          	sub	a0,a0,s2
20401a46:	0505                	addi	a0,a0,1
20401a48:	02000713          	li	a4,32
20401a4c:	00a457b3          	srl	a5,s0,a0
20401a50:	40a70533          	sub	a0,a4,a0
20401a54:	00a41433          	sll	s0,s0,a0
20401a58:	00803433          	snez	s0,s0
20401a5c:	8fc1                	or	a5,a5,s0
20401a5e:	4501                	li	a0,0
20401a60:	b569                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 345)
20401a62:	f869                	bnez	s0,20401a34 <__addsf3+0x26a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46
20401a64:	4781                	li	a5,0
20401a66:	4501                	li	a0,0
20401a68:	b779                	j	204019f6 <__addsf3+0x22c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:46 (discriminator 368)
20401a6a:	fc0007b7          	lui	a5,0xfc000
20401a6e:	17fd                	addi	a5,a5,-1
20401a70:	40a90533          	sub	a0,s2,a0
20401a74:	8fe1                	and	a5,a5,s0
20401a76:	bd95                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:44
20401a78:	854a                	mv	a0,s2
20401a7a:	bd85                	j	204018ea <__addsf3+0x120>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:45
20401a7c:	87ba                	mv	a5,a4
20401a7e:	b3c9                	j	20401840 <__addsf3+0x76>
20401a80:	0ff00513          	li	a0,255
20401a84:	4781                	li	a5,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 47)
20401a86:	00579713          	slli	a4,a5,0x5
20401a8a:	00075b63          	bgez	a4,20401aa0 <__addsf3+0x2d6>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 63)
20401a8e:	0505                	addi	a0,a0,1
20401a90:	0ff00713          	li	a4,255
20401a94:	02e50f63          	beq	a0,a4,20401ad2 <__addsf3+0x308>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47
20401a98:	fc000737          	lui	a4,0xfc000
20401a9c:	177d                	addi	a4,a4,-1
20401a9e:	8ff9                	and	a5,a5,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 79)
20401aa0:	0ff00713          	li	a4,255
20401aa4:	838d                	srli	a5,a5,0x3
20401aa6:	00e51663          	bne	a0,a4,20401ab2 <__addsf3+0x2e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 80)
20401aaa:	c781                	beqz	a5,20401ab2 <__addsf3+0x2e8>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47
20401aac:	004007b7          	lui	a5,0x400
20401ab0:	4481                	li	s1,0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 90)
20401ab2:	0ff57513          	andi	a0,a0,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:51 (discriminator 90)
20401ab6:	40b2                	lw	ra,12(sp)
20401ab8:	4422                	lw	s0,8(sp)
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:47 (discriminator 90)
20401aba:	07a6                	slli	a5,a5,0x9
20401abc:	01751713          	slli	a4,a0,0x17
20401ac0:	0097d513          	srli	a0,a5,0x9
20401ac4:	04fe                	slli	s1,s1,0x1f
20401ac6:	8d59                	or	a0,a0,a4
20401ac8:	8d45                	or	a0,a0,s1
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/addsf3.c:51 (discriminator 90)
20401aca:	4902                	lw	s2,0(sp)
20401acc:	4492                	lw	s1,4(sp)
20401ace:	0141                	addi	sp,sp,16
20401ad0:	8082                	ret
20401ad2:	4781                	li	a5,0
20401ad4:	b7f1                	j	20401aa0 <__addsf3+0x2d6>

20401ad6 <__fixunssfsi>:
__fixunssfsi():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:42
20401ad6:	01755793          	srli	a5,a0,0x17
20401ada:	00800637          	lui	a2,0x800
20401ade:	fff60693          	addi	a3,a2,-1 # 7fffff <__heap_size+0x7ff7ff>
20401ae2:	0ff7f793          	andi	a5,a5,255
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43
20401ae6:	07e00593          	li	a1,126
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:42
20401aea:	8ee9                	and	a3,a3,a0
20401aec:	01f55713          	srli	a4,a0,0x1f
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43
20401af0:	4501                	li	a0,0
20401af2:	02f5fb63          	bgeu	a1,a5,20401b28 <__fixunssfsi+0x52>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 10)
20401af6:	e711                	bnez	a4,20401b02 <__fixunssfsi+0x2c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43
20401af8:	09e00713          	li	a4,158
20401afc:	557d                	li	a0,-1
20401afe:	00f77363          	bgeu	a4,a5,20401b04 <__fixunssfsi+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:47
20401b02:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 18)
20401b04:	09500713          	li	a4,149
20401b08:	00c6e533          	or	a0,a3,a2
20401b0c:	00f75763          	bge	a4,a5,20401b1a <__fixunssfsi+0x44>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 30)
20401b10:	f6a78793          	addi	a5,a5,-150 # 3fff6a <__heap_size+0x3ff76a>
20401b14:	00f51533          	sll	a0,a0,a5
20401b18:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/fixunssfsi.c:43 (discriminator 31)
20401b1a:	09600713          	li	a4,150
20401b1e:	40f707b3          	sub	a5,a4,a5
20401b22:	00f55533          	srl	a0,a0,a5
20401b26:	8082                	ret
20401b28:	8082                	ret

20401b2a <__floatunsisf>:
__floatunsisf():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:36
20401b2a:	1141                	addi	sp,sp,-16
20401b2c:	c422                	sw	s0,8(sp)
20401b2e:	c606                	sw	ra,12(sp)
20401b30:	842a                	mv	s0,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42
20401b32:	4781                	li	a5,0
20401b34:	cd19                	beqz	a0,20401b52 <__floatunsisf+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 6)
20401b36:	2841                	jal	20401bc6 <__clzsi2>
20401b38:	09e00793          	li	a5,158
20401b3c:	8f89                	sub	a5,a5,a0
20401b3e:	09600713          	li	a4,150
20401b42:	02f74263          	blt	a4,a5,20401b66 <__floatunsisf+0x3c>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 28)
20401b46:	4721                	li	a4,8
20401b48:	00a75563          	bge	a4,a0,20401b52 <__floatunsisf+0x28>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 30)
20401b4c:	1561                	addi	a0,a0,-8
20401b4e:	00a41433          	sll	s0,s0,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:43
20401b52:	0426                	slli	s0,s0,0x9
20401b54:	0ff7f513          	andi	a0,a5,255
20401b58:	8025                	srli	s0,s0,0x9
20401b5a:	055e                	slli	a0,a0,0x17
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:47
20401b5c:	8d41                	or	a0,a0,s0
20401b5e:	40b2                	lw	ra,12(sp)
20401b60:	4422                	lw	s0,8(sp)
20401b62:	0141                	addi	sp,sp,16
20401b64:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 29)
20401b66:	09900713          	li	a4,153
20401b6a:	00f75d63          	bge	a4,a5,20401b84 <__floatunsisf+0x5a>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 35)
20401b6e:	01b50713          	addi	a4,a0,27
20401b72:	4695                	li	a3,5
20401b74:	00e41733          	sll	a4,s0,a4
20401b78:	8e89                	sub	a3,a3,a0
20401b7a:	00e03733          	snez	a4,a4
20401b7e:	00d45433          	srl	s0,s0,a3
20401b82:	8c59                	or	s0,s0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 37)
20401b84:	4715                	li	a4,5
20401b86:	00a75663          	bge	a4,a0,20401b92 <__floatunsisf+0x68>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 38)
20401b8a:	ffb50713          	addi	a4,a0,-5
20401b8e:	00e41433          	sll	s0,s0,a4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 45)
20401b92:	fc000737          	lui	a4,0xfc000
20401b96:	177d                	addi	a4,a4,-1
20401b98:	00747693          	andi	a3,s0,7
20401b9c:	8f61                	and	a4,a4,s0
20401b9e:	c691                	beqz	a3,20401baa <__floatunsisf+0x80>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 86)
20401ba0:	883d                	andi	s0,s0,15
20401ba2:	4691                	li	a3,4
20401ba4:	00d40363          	beq	s0,a3,20401baa <__floatunsisf+0x80>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 90)
20401ba8:	0711                	addi	a4,a4,4
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 93)
20401baa:	00571693          	slli	a3,a4,0x5
20401bae:	0006d963          	bgez	a3,20401bc0 <__floatunsisf+0x96>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 109)
20401bb2:	fc0007b7          	lui	a5,0xfc000
20401bb6:	17fd                	addi	a5,a5,-1
20401bb8:	8f7d                	and	a4,a4,a5
20401bba:	09f00793          	li	a5,159
20401bbe:	8f89                	sub	a5,a5,a0
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatunsisf.c:42 (discriminator 125)
20401bc0:	00375413          	srli	s0,a4,0x3
20401bc4:	b779                	j	20401b52 <__floatunsisf+0x28>

20401bc6 <__clzsi2>:
__clzsi2():
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20401bc6:	67c1                	lui	a5,0x10
20401bc8:	02f57663          	bgeu	a0,a5,20401bf4 <__clzsi2+0x2e>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 3)
20401bcc:	0ff00793          	li	a5,255
20401bd0:	00a7b7b3          	sltu	a5,a5,a0
20401bd4:	078e                	slli	a5,a5,0x3
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 14)
20401bd6:	02000713          	li	a4,32
20401bda:	8f1d                	sub	a4,a4,a5
20401bdc:	00f557b3          	srl	a5,a0,a5
20401be0:	00004517          	auipc	a0,0x4
20401be4:	b8c50513          	addi	a0,a0,-1140 # 2040576c <__clz_tab>
20401be8:	97aa                	add	a5,a5,a0
20401bea:	0007c503          	lbu	a0,0(a5) # 10000 <__heap_size+0xf800>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:713 (discriminator 14)
20401bee:	40a70533          	sub	a0,a4,a0
20401bf2:	8082                	ret
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 4)
20401bf4:	01000737          	lui	a4,0x1000
20401bf8:	47c1                	li	a5,16
20401bfa:	fce56ee3          	bltu	a0,a4,20401bd6 <__clzsi2+0x10>
/scratch/carsteng/freedom-tools-master/obj/x86_64-linux-ubuntu14/build/riscv-gnu-toolchain/build-gcc-newlib-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20401bfe:	47e1                	li	a5,24
20401c00:	bfd9                	j	20401bd6 <__clzsi2+0x10>

20401c02 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401c02:	1101                	addi	sp,sp,-32
20401c04:	ce06                	sw	ra,28(sp)
20401c06:	cc22                	sw	s0,24(sp)
20401c08:	1000                	addi	s0,sp,32
20401c0a:	fea42623          	sw	a0,-20(s0) # 3ffffec <__heap_size+0x3fff7ec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401c0e:	225d                	jal	20401db4 <__errno>
20401c10:	872a                	mv	a4,a0
20401c12:	05800793          	li	a5,88
20401c16:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401c18:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401c1a:	853e                	mv	a0,a5
20401c1c:	40f2                	lw	ra,28(sp)
20401c1e:	4462                	lw	s0,24(sp)
20401c20:	6105                	addi	sp,sp,32
20401c22:	8082                	ret

20401c24 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401c24:	1101                	addi	sp,sp,-32
20401c26:	ce06                	sw	ra,28(sp)
20401c28:	cc22                	sw	s0,24(sp)
20401c2a:	1000                	addi	s0,sp,32
20401c2c:	fea42623          	sw	a0,-20(s0)
20401c30:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401c34:	2241                	jal	20401db4 <__errno>
20401c36:	872a                	mv	a4,a0
20401c38:	fa800793          	li	a5,-88
20401c3c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401c3e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401c40:	853e                	mv	a0,a5
20401c42:	40f2                	lw	ra,28(sp)
20401c44:	4462                	lw	s0,24(sp)
20401c46:	6105                	addi	sp,sp,32
20401c48:	8082                	ret

20401c4a <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401c4a:	1101                	addi	sp,sp,-32
20401c4c:	ce22                	sw	s0,28(sp)
20401c4e:	1000                	addi	s0,sp,32
20401c50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401c54:	fec42783          	lw	a5,-20(s0)
20401c58:	17fd                	addi	a5,a5,-1
20401c5a:	0017b793          	seqz	a5,a5
20401c5e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401c62:	853e                	mv	a0,a5
20401c64:	4472                	lw	s0,28(sp)
20401c66:	6105                	addi	sp,sp,32
20401c68:	8082                	ret

20401c6a <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401c6a:	1101                	addi	sp,sp,-32
20401c6c:	ce06                	sw	ra,28(sp)
20401c6e:	cc22                	sw	s0,24(sp)
20401c70:	1000                	addi	s0,sp,32
20401c72:	fea42623          	sw	a0,-20(s0)
20401c76:	feb42423          	sw	a1,-24(s0)
20401c7a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401c7e:	2a1d                	jal	20401db4 <__errno>
20401c80:	872a                	mv	a4,a0
20401c82:	05800793          	li	a5,88
20401c86:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401c88:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401c8a:	853e                	mv	a0,a5
20401c8c:	40f2                	lw	ra,28(sp)
20401c8e:	4462                	lw	s0,24(sp)
20401c90:	6105                	addi	sp,sp,32
20401c92:	8082                	ret

20401c94 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401c94:	1101                	addi	sp,sp,-32
20401c96:	ce06                	sw	ra,28(sp)
20401c98:	cc22                	sw	s0,24(sp)
20401c9a:	1000                	addi	s0,sp,32
20401c9c:	fea42623          	sw	a0,-20(s0)
20401ca0:	feb42423          	sw	a1,-24(s0)
20401ca4:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401ca8:	2231                	jal	20401db4 <__errno>
20401caa:	872a                	mv	a4,a0
20401cac:	05800793          	li	a5,88
20401cb0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401cb2:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401cb4:	853e                	mv	a0,a5
20401cb6:	40f2                	lw	ra,28(sp)
20401cb8:	4462                	lw	s0,24(sp)
20401cba:	6105                	addi	sp,sp,32
20401cbc:	8082                	ret

20401cbe <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401cbe:	7179                	addi	sp,sp,-48
20401cc0:	d622                	sw	s0,44(sp)
20401cc2:	1800                	addi	s0,sp,48
20401cc4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401cc8:	800007b7          	lui	a5,0x80000
20401ccc:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
20401cd0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401cd4:	800607b7          	lui	a5,0x80060
20401cd8:	acc78713          	addi	a4,a5,-1332 # 8005facc <metal_segment_heap_target_end+0xfffff800>
20401cdc:	800607b7          	lui	a5,0x80060
20401ce0:	2cc78793          	addi	a5,a5,716 # 800602cc <metal_segment_heap_target_end+0x0>
20401ce4:	00f71463          	bne	a4,a5,20401cec <_sbrk+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401ce8:	57fd                	li	a5,-1
20401cea:	a0a9                	j	20401d34 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401cec:	800007b7          	lui	a5,0x80000
20401cf0:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
20401cf4:	fdc42783          	lw	a5,-36(s0)
20401cf8:	973e                	add	a4,a4,a5
20401cfa:	800607b7          	lui	a5,0x80060
20401cfe:	2cc78793          	addi	a5,a5,716 # 800602cc <metal_segment_heap_target_end+0x0>
20401d02:	02f77063          	bgeu	a4,a5,20401d22 <_sbrk+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401d06:	800007b7          	lui	a5,0x80000
20401d0a:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
20401d0e:	fdc42783          	lw	a5,-36(s0)
20401d12:	973e                	add	a4,a4,a5
20401d14:	800007b7          	lui	a5,0x80000
20401d18:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401d1c:	fec42783          	lw	a5,-20(s0)
20401d20:	a811                	j	20401d34 <_sbrk+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401d22:	800007b7          	lui	a5,0x80000
20401d26:	80060737          	lui	a4,0x80060
20401d2a:	2cc70713          	addi	a4,a4,716 # 800602cc <metal_segment_heap_target_end+0x0>
20401d2e:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xfffa0484>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401d32:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401d34:	853e                	mv	a0,a5
20401d36:	5432                	lw	s0,44(sp)
20401d38:	6145                	addi	sp,sp,48
20401d3a:	8082                	ret

20401d3c <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401d3c:	7179                	addi	sp,sp,-48
20401d3e:	d606                	sw	ra,44(sp)
20401d40:	d422                	sw	s0,40(sp)
20401d42:	1800                	addi	s0,sp,48
20401d44:	fca42e23          	sw	a0,-36(s0)
20401d48:	fcb42c23          	sw	a1,-40(s0)
20401d4c:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401d50:	fdc42703          	lw	a4,-36(s0)
20401d54:	4785                	li	a5,1
20401d56:	00f70963          	beq	a4,a5,20401d68 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401d5a:	28a9                	jal	20401db4 <__errno>
20401d5c:	872a                	mv	a4,a0
20401d5e:	05800793          	li	a5,88
20401d62:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401d64:	57fd                	li	a5,-1
20401d66:	a82d                	j	20401da0 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401d68:	fd842783          	lw	a5,-40(s0)
20401d6c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401d70:	fe042623          	sw	zero,-20(s0)
20401d74:	a839                	j	20401d92 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401d76:	fe842703          	lw	a4,-24(s0)
20401d7a:	fec42783          	lw	a5,-20(s0)
20401d7e:	97ba                	add	a5,a5,a4
20401d80:	0007c783          	lbu	a5,0(a5)
20401d84:	853e                	mv	a0,a5
20401d86:	2cb1                	jal	20401fe2 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401d88:	fec42783          	lw	a5,-20(s0)
20401d8c:	0785                	addi	a5,a5,1
20401d8e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401d92:	fec42703          	lw	a4,-20(s0)
20401d96:	fd442783          	lw	a5,-44(s0)
20401d9a:	fcf76ee3          	bltu	a4,a5,20401d76 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401d9e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401da0:	853e                	mv	a0,a5
20401da2:	50b2                	lw	ra,44(sp)
20401da4:	5422                	lw	s0,40(sp)
20401da6:	6145                	addi	sp,sp,48
20401da8:	8082                	ret

20401daa <atexit>:
atexit():
20401daa:	85aa                	mv	a1,a0
20401dac:	4681                	li	a3,0
20401dae:	4601                	li	a2,0
20401db0:	4501                	li	a0,0
20401db2:	a8f1                	j	20401e8e <__register_exitproc>

20401db4 <__errno>:
__errno():
20401db4:	5fbff797          	auipc	a5,0x5fbff
20401db8:	99478793          	addi	a5,a5,-1644 # 80000748 <_impure_ptr>
20401dbc:	4388                	lw	a0,0(a5)
20401dbe:	8082                	ret

20401dc0 <exit>:
exit():
20401dc0:	1141                	addi	sp,sp,-16
20401dc2:	c422                	sw	s0,8(sp)
20401dc4:	c606                	sw	ra,12(sp)
20401dc6:	00000797          	auipc	a5,0x0
20401dca:	15478793          	addi	a5,a5,340 # 20401f1a <__call_exitprocs>
20401dce:	842a                	mv	s0,a0
20401dd0:	c399                	beqz	a5,20401dd6 <exit+0x16>
20401dd2:	4581                	li	a1,0
20401dd4:	2299                	jal	20401f1a <__call_exitprocs>
20401dd6:	5fbff797          	auipc	a5,0x5fbff
20401dda:	97678793          	addi	a5,a5,-1674 # 8000074c <_global_impure_ptr>
20401dde:	4388                	lw	a0,0(a5)
20401de0:	551c                	lw	a5,40(a0)
20401de2:	c391                	beqz	a5,20401de6 <exit+0x26>
20401de4:	9782                	jalr	a5
20401de6:	8522                	mv	a0,s0
20401de8:	087030ef          	jal	ra,2040566e <_exit>

20401dec <__libc_fini_array>:
__libc_fini_array():
20401dec:	1141                	addi	sp,sp,-16
20401dee:	00004797          	auipc	a5,0x4
20401df2:	dd678793          	addi	a5,a5,-554 # 20405bc4 <__fini_array_end>
20401df6:	c422                	sw	s0,8(sp)
20401df8:	00004417          	auipc	s0,0x4
20401dfc:	dcc40413          	addi	s0,s0,-564 # 20405bc4 <__fini_array_end>
20401e00:	8c1d                	sub	s0,s0,a5
20401e02:	c226                	sw	s1,4(sp)
20401e04:	c606                	sw	ra,12(sp)
20401e06:	8409                	srai	s0,s0,0x2
20401e08:	84be                	mv	s1,a5
20401e0a:	e411                	bnez	s0,20401e16 <__libc_fini_array+0x2a>
20401e0c:	40b2                	lw	ra,12(sp)
20401e0e:	4422                	lw	s0,8(sp)
20401e10:	4492                	lw	s1,4(sp)
20401e12:	0141                	addi	sp,sp,16
20401e14:	8082                	ret
20401e16:	147d                	addi	s0,s0,-1
20401e18:	00241793          	slli	a5,s0,0x2
20401e1c:	97a6                	add	a5,a5,s1
20401e1e:	439c                	lw	a5,0(a5)
20401e20:	9782                	jalr	a5
20401e22:	b7e5                	j	20401e0a <__libc_fini_array+0x1e>

20401e24 <__libc_init_array>:
__libc_init_array():
20401e24:	1141                	addi	sp,sp,-16
20401e26:	00004797          	auipc	a5,0x4
20401e2a:	d9a78793          	addi	a5,a5,-614 # 20405bc0 <__init_array_start>
20401e2e:	c422                	sw	s0,8(sp)
20401e30:	00004417          	auipc	s0,0x4
20401e34:	d9040413          	addi	s0,s0,-624 # 20405bc0 <__init_array_start>
20401e38:	8c1d                	sub	s0,s0,a5
20401e3a:	c226                	sw	s1,4(sp)
20401e3c:	c04a                	sw	s2,0(sp)
20401e3e:	c606                	sw	ra,12(sp)
20401e40:	8409                	srai	s0,s0,0x2
20401e42:	4481                	li	s1,0
20401e44:	893e                	mv	s2,a5
20401e46:	02849663          	bne	s1,s0,20401e72 <__libc_init_array+0x4e>
20401e4a:	00004797          	auipc	a5,0x4
20401e4e:	d7678793          	addi	a5,a5,-650 # 20405bc0 <__init_array_start>
20401e52:	00004417          	auipc	s0,0x4
20401e56:	d7240413          	addi	s0,s0,-654 # 20405bc4 <__fini_array_end>
20401e5a:	8c1d                	sub	s0,s0,a5
20401e5c:	8409                	srai	s0,s0,0x2
20401e5e:	4481                	li	s1,0
20401e60:	893e                	mv	s2,a5
20401e62:	00849f63          	bne	s1,s0,20401e80 <__libc_init_array+0x5c>
20401e66:	40b2                	lw	ra,12(sp)
20401e68:	4422                	lw	s0,8(sp)
20401e6a:	4492                	lw	s1,4(sp)
20401e6c:	4902                	lw	s2,0(sp)
20401e6e:	0141                	addi	sp,sp,16
20401e70:	8082                	ret
20401e72:	00249793          	slli	a5,s1,0x2
20401e76:	97ca                	add	a5,a5,s2
20401e78:	439c                	lw	a5,0(a5)
20401e7a:	0485                	addi	s1,s1,1
20401e7c:	9782                	jalr	a5
20401e7e:	b7e1                	j	20401e46 <__libc_init_array+0x22>
20401e80:	00249793          	slli	a5,s1,0x2
20401e84:	97ca                	add	a5,a5,s2
20401e86:	439c                	lw	a5,0(a5)
20401e88:	0485                	addi	s1,s1,1
20401e8a:	9782                	jalr	a5
20401e8c:	bfd9                	j	20401e62 <__libc_init_array+0x3e>

20401e8e <__register_exitproc>:
__register_exitproc():
20401e8e:	5fbff797          	auipc	a5,0x5fbff
20401e92:	8ea78793          	addi	a5,a5,-1814 # 80000778 <_global_atexit>
20401e96:	439c                	lw	a5,0(a5)
20401e98:	8e2a                	mv	t3,a0
20401e9a:	e78d                	bnez	a5,20401ec4 <__register_exitproc+0x36>
20401e9c:	5fc5d717          	auipc	a4,0x5fc5d
20401ea0:	7a070713          	addi	a4,a4,1952 # 8005f63c <_global_atexit0>
20401ea4:	5fbff797          	auipc	a5,0x5fbff
20401ea8:	8ce7aa23          	sw	a4,-1836(a5) # 80000778 <_global_atexit>
20401eac:	dfbfe517          	auipc	a0,0xdfbfe
20401eb0:	15450513          	addi	a0,a0,340 # 0 <__metal_boot_hart>
20401eb4:	87ba                	mv	a5,a4
20401eb6:	c519                	beqz	a0,20401ec4 <__register_exitproc+0x36>
20401eb8:	411c                	lw	a5,0(a0)
20401eba:	5fc5e517          	auipc	a0,0x5fc5e
20401ebe:	80f52523          	sw	a5,-2038(a0) # 8005f6c4 <_global_atexit0+0x88>
20401ec2:	87ba                	mv	a5,a4
20401ec4:	43d8                	lw	a4,4(a5)
20401ec6:	487d                	li	a6,31
20401ec8:	557d                	li	a0,-1
20401eca:	04e84763          	blt	a6,a4,20401f18 <__register_exitproc+0x8a>
20401ece:	020e0e63          	beqz	t3,20401f0a <__register_exitproc+0x7c>
20401ed2:	0887a803          	lw	a6,136(a5)
20401ed6:	04080163          	beqz	a6,20401f18 <__register_exitproc+0x8a>
20401eda:	00271893          	slli	a7,a4,0x2
20401ede:	98c2                	add	a7,a7,a6
20401ee0:	00c8a023          	sw	a2,0(a7)
20401ee4:	10082303          	lw	t1,256(a6)
20401ee8:	4605                	li	a2,1
20401eea:	00e61633          	sll	a2,a2,a4
20401eee:	00c36333          	or	t1,t1,a2
20401ef2:	10682023          	sw	t1,256(a6)
20401ef6:	08d8a023          	sw	a3,128(a7)
20401efa:	4689                	li	a3,2
20401efc:	00de1763          	bne	t3,a3,20401f0a <__register_exitproc+0x7c>
20401f00:	10482683          	lw	a3,260(a6)
20401f04:	8e55                	or	a2,a2,a3
20401f06:	10c82223          	sw	a2,260(a6)
20401f0a:	00170693          	addi	a3,a4,1
20401f0e:	070a                	slli	a4,a4,0x2
20401f10:	c3d4                	sw	a3,4(a5)
20401f12:	97ba                	add	a5,a5,a4
20401f14:	c78c                	sw	a1,8(a5)
20401f16:	4501                	li	a0,0
20401f18:	8082                	ret

20401f1a <__call_exitprocs>:
__call_exitprocs():
20401f1a:	7179                	addi	sp,sp,-48
20401f1c:	cc52                	sw	s4,24(sp)
20401f1e:	ca56                	sw	s5,20(sp)
20401f20:	c85a                	sw	s6,16(sp)
20401f22:	c65e                	sw	s7,12(sp)
20401f24:	d606                	sw	ra,44(sp)
20401f26:	d422                	sw	s0,40(sp)
20401f28:	d226                	sw	s1,36(sp)
20401f2a:	d04a                	sw	s2,32(sp)
20401f2c:	ce4e                	sw	s3,28(sp)
20401f2e:	c462                	sw	s8,8(sp)
20401f30:	8b2a                	mv	s6,a0
20401f32:	8a2e                	mv	s4,a1
20401f34:	5fbffa97          	auipc	s5,0x5fbff
20401f38:	844a8a93          	addi	s5,s5,-1980 # 80000778 <_global_atexit>
20401f3c:	4b85                	li	s7,1
20401f3e:	000aa403          	lw	s0,0(s5)
20401f42:	c811                	beqz	s0,20401f56 <__call_exitprocs+0x3c>
20401f44:	4044                	lw	s1,4(s0)
20401f46:	08842983          	lw	s3,136(s0)
20401f4a:	fff48913          	addi	s2,s1,-1
20401f4e:	048a                	slli	s1,s1,0x2
20401f50:	94a2                	add	s1,s1,s0
20401f52:	00095e63          	bgez	s2,20401f6e <__call_exitprocs+0x54>
20401f56:	50b2                	lw	ra,44(sp)
20401f58:	5422                	lw	s0,40(sp)
20401f5a:	5492                	lw	s1,36(sp)
20401f5c:	5902                	lw	s2,32(sp)
20401f5e:	49f2                	lw	s3,28(sp)
20401f60:	4a62                	lw	s4,24(sp)
20401f62:	4ad2                	lw	s5,20(sp)
20401f64:	4b42                	lw	s6,16(sp)
20401f66:	4bb2                	lw	s7,12(sp)
20401f68:	4c22                	lw	s8,8(sp)
20401f6a:	6145                	addi	sp,sp,48
20401f6c:	8082                	ret
20401f6e:	000a0e63          	beqz	s4,20401f8a <__call_exitprocs+0x70>
20401f72:	00099563          	bnez	s3,20401f7c <__call_exitprocs+0x62>
20401f76:	197d                	addi	s2,s2,-1
20401f78:	14f1                	addi	s1,s1,-4
20401f7a:	bfe1                	j	20401f52 <__call_exitprocs+0x38>
20401f7c:	00291793          	slli	a5,s2,0x2
20401f80:	97ce                	add	a5,a5,s3
20401f82:	0807a783          	lw	a5,128(a5)
20401f86:	ff4798e3          	bne	a5,s4,20401f76 <__call_exitprocs+0x5c>
20401f8a:	4058                	lw	a4,4(s0)
20401f8c:	40dc                	lw	a5,4(s1)
20401f8e:	177d                	addi	a4,a4,-1
20401f90:	03271863          	bne	a4,s2,20401fc0 <__call_exitprocs+0xa6>
20401f94:	01242223          	sw	s2,4(s0)
20401f98:	dff9                	beqz	a5,20401f76 <__call_exitprocs+0x5c>
20401f9a:	00442c03          	lw	s8,4(s0)
20401f9e:	00098863          	beqz	s3,20401fae <__call_exitprocs+0x94>
20401fa2:	1009a683          	lw	a3,256(s3)
20401fa6:	012b9733          	sll	a4,s7,s2
20401faa:	8ef9                	and	a3,a3,a4
20401fac:	ee89                	bnez	a3,20401fc6 <__call_exitprocs+0xac>
20401fae:	9782                	jalr	a5
20401fb0:	4058                	lw	a4,4(s0)
20401fb2:	000aa783          	lw	a5,0(s5)
20401fb6:	f98714e3          	bne	a4,s8,20401f3e <__call_exitprocs+0x24>
20401fba:	faf40ee3          	beq	s0,a5,20401f76 <__call_exitprocs+0x5c>
20401fbe:	b741                	j	20401f3e <__call_exitprocs+0x24>
20401fc0:	0004a223          	sw	zero,4(s1)
20401fc4:	bfd1                	j	20401f98 <__call_exitprocs+0x7e>
20401fc6:	00291693          	slli	a3,s2,0x2
20401fca:	96ce                	add	a3,a3,s3
20401fcc:	428c                	lw	a1,0(a3)
20401fce:	1049a683          	lw	a3,260(s3)
20401fd2:	8f75                	and	a4,a4,a3
20401fd4:	e701                	bnez	a4,20401fdc <__call_exitprocs+0xc2>
20401fd6:	855a                	mv	a0,s6
20401fd8:	9782                	jalr	a5
20401fda:	bfd9                	j	20401fb0 <__call_exitprocs+0x96>
20401fdc:	852e                	mv	a0,a1
20401fde:	9782                	jalr	a5
20401fe0:	bfc1                	j	20401fb0 <__call_exitprocs+0x96>

20401fe2 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401fe2:	1101                	addi	sp,sp,-32
20401fe4:	ce06                	sw	ra,28(sp)
20401fe6:	cc22                	sw	s0,24(sp)
20401fe8:	1000                	addi	s0,sp,32
20401fea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401fee:	fec42703          	lw	a4,-20(s0)
20401ff2:	47a9                	li	a5,10
20401ff4:	00f71463          	bne	a4,a5,20401ffc <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401ff8:	4535                	li	a0,13
20401ffa:	2811                	jal	2040200e <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401ffc:	fec42503          	lw	a0,-20(s0)
20402000:	2039                	jal	2040200e <metal_tty_putc_raw>
20402002:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20402004:	853e                	mv	a0,a5
20402006:	40f2                	lw	ra,28(sp)
20402008:	4462                	lw	s0,24(sp)
2040200a:	6105                	addi	sp,sp,32
2040200c:	8082                	ret

2040200e <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
2040200e:	1101                	addi	sp,sp,-32
20402010:	ce06                	sw	ra,28(sp)
20402012:	cc22                	sw	s0,24(sp)
20402014:	1000                	addi	s0,sp,32
20402016:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
2040201a:	fec42583          	lw	a1,-20(s0)
2040201e:	800007b7          	lui	a5,0x80000
20402022:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20402026:	28b1                	jal	20402082 <metal_uart_putc>
20402028:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
2040202a:	853e                	mv	a0,a5
2040202c:	40f2                	lw	ra,28(sp)
2040202e:	4462                	lw	s0,24(sp)
20402030:	6105                	addi	sp,sp,32
20402032:	8082                	ret

20402034 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20402034:	1141                	addi	sp,sp,-16
20402036:	c606                	sw	ra,12(sp)
20402038:	c422                	sw	s0,8(sp)
2040203a:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2040203c:	67f1                	lui	a5,0x1c
2040203e:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20402042:	800007b7          	lui	a5,0x80000
20402046:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
2040204a:	2031                	jal	20402056 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
2040204c:	0001                	nop
2040204e:	40b2                	lw	ra,12(sp)
20402050:	4422                	lw	s0,8(sp)
20402052:	0141                	addi	sp,sp,16
20402054:	8082                	ret

20402056 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20402056:	1101                	addi	sp,sp,-32
20402058:	ce06                	sw	ra,28(sp)
2040205a:	cc22                	sw	s0,24(sp)
2040205c:	1000                	addi	s0,sp,32
2040205e:	fea42623          	sw	a0,-20(s0)
20402062:	feb42423          	sw	a1,-24(s0)
20402066:	fec42783          	lw	a5,-20(s0)
2040206a:	439c                	lw	a5,0(a5)
2040206c:	439c                	lw	a5,0(a5)
2040206e:	fe842583          	lw	a1,-24(s0)
20402072:	fec42503          	lw	a0,-20(s0)
20402076:	9782                	jalr	a5
20402078:	0001                	nop
2040207a:	40f2                	lw	ra,28(sp)
2040207c:	4462                	lw	s0,24(sp)
2040207e:	6105                	addi	sp,sp,32
20402080:	8082                	ret

20402082 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20402082:	1101                	addi	sp,sp,-32
20402084:	ce06                	sw	ra,28(sp)
20402086:	cc22                	sw	s0,24(sp)
20402088:	1000                	addi	s0,sp,32
2040208a:	fea42623          	sw	a0,-20(s0)
2040208e:	feb42423          	sw	a1,-24(s0)
20402092:	fec42783          	lw	a5,-20(s0)
20402096:	439c                	lw	a5,0(a5)
20402098:	43dc                	lw	a5,4(a5)
2040209a:	fe842583          	lw	a1,-24(s0)
2040209e:	fec42503          	lw	a0,-20(s0)
204020a2:	9782                	jalr	a5
204020a4:	87aa                	mv	a5,a0
204020a6:	853e                	mv	a0,a5
204020a8:	40f2                	lw	ra,28(sp)
204020aa:	4462                	lw	s0,24(sp)
204020ac:	6105                	addi	sp,sp,32
204020ae:	8082                	ret

204020b0 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
204020b0:	1101                	addi	sp,sp,-32
204020b2:	ce06                	sw	ra,28(sp)
204020b4:	cc22                	sw	s0,24(sp)
204020b6:	1000                	addi	s0,sp,32
204020b8:	fea42623          	sw	a0,-20(s0)
204020bc:	feb42423          	sw	a1,-24(s0)
204020c0:	fec42783          	lw	a5,-20(s0)
204020c4:	439c                	lw	a5,0(a5)
204020c6:	4bdc                	lw	a5,20(a5)
204020c8:	fe842583          	lw	a1,-24(s0)
204020cc:	fec42503          	lw	a0,-20(s0)
204020d0:	9782                	jalr	a5
204020d2:	87aa                	mv	a5,a0
204020d4:	853e                	mv	a0,a5
204020d6:	40f2                	lw	ra,28(sp)
204020d8:	4462                	lw	s0,24(sp)
204020da:	6105                	addi	sp,sp,32
204020dc:	8082                	ret

204020de <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
204020de:	1101                	addi	sp,sp,-32
204020e0:	ce22                	sw	s0,28(sp)
204020e2:	1000                	addi	s0,sp,32
204020e4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
204020e8:	fec42703          	lw	a4,-20(s0)
204020ec:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
204020f0:	00f71563          	bne	a4,a5,204020fa <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
204020f4:	020007b7          	lui	a5,0x2000
204020f8:	a011                	j	204020fc <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
204020fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
204020fc:	853e                	mv	a0,a5
204020fe:	4472                	lw	s0,28(sp)
20402100:	6105                	addi	sp,sp,32
20402102:	8082                	ret

20402104 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20402104:	1101                	addi	sp,sp,-32
20402106:	ce22                	sw	s0,28(sp)
20402108:	1000                	addi	s0,sp,32
2040210a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
2040210e:	fec42703          	lw	a4,-20(s0)
20402112:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20402116:	00f71463          	bne	a4,a5,2040211e <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
2040211a:	4789                	li	a5,2
2040211c:	a011                	j	20402120 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
2040211e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20402120:	853e                	mv	a0,a5
20402122:	4472                	lw	s0,28(sp)
20402124:	6105                	addi	sp,sp,32
20402126:	8082                	ret

20402128 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20402128:	1101                	addi	sp,sp,-32
2040212a:	ce22                	sw	s0,28(sp)
2040212c:	1000                	addi	s0,sp,32
2040212e:	fea42623          	sw	a0,-20(s0)
20402132:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20402136:	fe842783          	lw	a5,-24(s0)
2040213a:	e791                	bnez	a5,20402146 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040213c:	800007b7          	lui	a5,0x80000
20402140:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
20402144:	a821                	j	2040215c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20402146:	fe842703          	lw	a4,-24(s0)
2040214a:	4785                	li	a5,1
2040214c:	00f71763          	bne	a4,a5,2040215a <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402150:	800007b7          	lui	a5,0x80000
20402154:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
20402158:	a011                	j	2040215c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
2040215a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
2040215c:	853e                	mv	a0,a5
2040215e:	4472                	lw	s0,28(sp)
20402160:	6105                	addi	sp,sp,32
20402162:	8082                	ret

20402164 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402164:	1101                	addi	sp,sp,-32
20402166:	ce22                	sw	s0,28(sp)
20402168:	1000                	addi	s0,sp,32
2040216a:	fea42623          	sw	a0,-20(s0)
2040216e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402172:	fe842783          	lw	a5,-24(s0)
20402176:	e399                	bnez	a5,2040217c <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20402178:	478d                	li	a5,3
2040217a:	a809                	j	2040218c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
2040217c:	fe842703          	lw	a4,-24(s0)
20402180:	4785                	li	a5,1
20402182:	00f71463          	bne	a4,a5,2040218a <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20402186:	479d                	li	a5,7
20402188:	a011                	j	2040218c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
2040218a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
2040218c:	853e                	mv	a0,a5
2040218e:	4472                	lw	s0,28(sp)
20402190:	6105                	addi	sp,sp,32
20402192:	8082                	ret

20402194 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402194:	715d                	addi	sp,sp,-80
20402196:	c686                	sw	ra,76(sp)
20402198:	c4a2                	sw	s0,72(sp)
2040219a:	c2ca                	sw	s2,68(sp)
2040219c:	c0ce                	sw	s3,64(sp)
2040219e:	de52                	sw	s4,60(sp)
204021a0:	dc56                	sw	s5,56(sp)
204021a2:	da5a                	sw	s6,52(sp)
204021a4:	d85e                	sw	s7,48(sp)
204021a6:	d662                	sw	s8,44(sp)
204021a8:	d466                	sw	s9,40(sp)
204021aa:	0880                	addi	s0,sp,80
204021ac:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
204021b0:	fbc42783          	lw	a5,-68(s0)
204021b4:	853e                	mv	a0,a5
204021b6:	3725                	jal	204020de <__metal_driver_sifive_clint0_control_base>
204021b8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
204021bc:	fcc42703          	lw	a4,-52(s0)
204021c0:	67b1                	lui	a5,0xc
204021c2:	17f1                	addi	a5,a5,-4
204021c4:	97ba                	add	a5,a5,a4
204021c6:	439c                	lw	a5,0(a5)
204021c8:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
204021cc:	fcc42703          	lw	a4,-52(s0)
204021d0:	67b1                	lui	a5,0xc
204021d2:	17e1                	addi	a5,a5,-8
204021d4:	97ba                	add	a5,a5,a4
204021d6:	439c                	lw	a5,0(a5)
204021d8:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204021dc:	fcc42703          	lw	a4,-52(s0)
204021e0:	67b1                	lui	a5,0xc
204021e2:	17f1                	addi	a5,a5,-4
204021e4:	97ba                	add	a5,a5,a4
204021e6:	439c                	lw	a5,0(a5)
204021e8:	fc842703          	lw	a4,-56(s0)
204021ec:	fcf718e3          	bne	a4,a5,204021bc <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204021f0:	fc842783          	lw	a5,-56(s0)
204021f4:	8c3e                	mv	s8,a5
204021f6:	4c81                	li	s9,0
204021f8:	000c1993          	slli	s3,s8,0x0
204021fc:	4901                	li	s2,0
204021fe:	fc442783          	lw	a5,-60(s0)
20402202:	8a3e                	mv	s4,a5
20402204:	4a81                	li	s5,0
20402206:	01496b33          	or	s6,s2,s4
2040220a:	0159ebb3          	or	s7,s3,s5
2040220e:	87da                	mv	a5,s6
20402210:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20402212:	853e                	mv	a0,a5
20402214:	85c2                	mv	a1,a6
20402216:	40b6                	lw	ra,76(sp)
20402218:	4426                	lw	s0,72(sp)
2040221a:	4916                	lw	s2,68(sp)
2040221c:	4986                	lw	s3,64(sp)
2040221e:	5a72                	lw	s4,60(sp)
20402220:	5ae2                	lw	s5,56(sp)
20402222:	5b52                	lw	s6,52(sp)
20402224:	5bc2                	lw	s7,48(sp)
20402226:	5c32                	lw	s8,44(sp)
20402228:	5ca2                	lw	s9,40(sp)
2040222a:	6161                	addi	sp,sp,80
2040222c:	8082                	ret

2040222e <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
2040222e:	7179                	addi	sp,sp,-48
20402230:	d606                	sw	ra,44(sp)
20402232:	d422                	sw	s0,40(sp)
20402234:	d24a                	sw	s2,36(sp)
20402236:	d04e                	sw	s3,32(sp)
20402238:	1800                	addi	s0,sp,48
2040223a:	fca42e23          	sw	a0,-36(s0)
2040223e:	fcb42c23          	sw	a1,-40(s0)
20402242:	fcc42823          	sw	a2,-48(s0)
20402246:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
2040224a:	fdc42783          	lw	a5,-36(s0)
2040224e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402252:	fec42783          	lw	a5,-20(s0)
20402256:	853e                	mv	a0,a5
20402258:	3559                	jal	204020de <__metal_driver_sifive_clint0_control_base>
2040225a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
2040225e:	fd842783          	lw	a5,-40(s0)
20402262:	078e                	slli	a5,a5,0x3
20402264:	873e                	mv	a4,a5
20402266:	fe842783          	lw	a5,-24(s0)
2040226a:	973e                	add	a4,a4,a5
2040226c:	6791                	lui	a5,0x4
2040226e:	0791                	addi	a5,a5,4
20402270:	97ba                	add	a5,a5,a4
20402272:	873e                	mv	a4,a5
20402274:	57fd                	li	a5,-1
20402276:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20402278:	fd842783          	lw	a5,-40(s0)
2040227c:	078e                	slli	a5,a5,0x3
2040227e:	873e                	mv	a4,a5
20402280:	fe842783          	lw	a5,-24(s0)
20402284:	973e                	add	a4,a4,a5
20402286:	6791                	lui	a5,0x4
20402288:	97ba                	add	a5,a5,a4
2040228a:	873e                	mv	a4,a5
2040228c:	fd042783          	lw	a5,-48(s0)
20402290:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402292:	fd442783          	lw	a5,-44(s0)
20402296:	0007d913          	srli	s2,a5,0x0
2040229a:	4981                	li	s3,0
2040229c:	fd842783          	lw	a5,-40(s0)
204022a0:	078e                	slli	a5,a5,0x3
204022a2:	873e                	mv	a4,a5
204022a4:	fe842783          	lw	a5,-24(s0)
204022a8:	973e                	add	a4,a4,a5
204022aa:	6791                	lui	a5,0x4
204022ac:	0791                	addi	a5,a5,4
204022ae:	97ba                	add	a5,a5,a4
204022b0:	874a                	mv	a4,s2
204022b2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
204022b4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
204022b6:	853e                	mv	a0,a5
204022b8:	50b2                	lw	ra,44(sp)
204022ba:	5422                	lw	s0,40(sp)
204022bc:	5912                	lw	s2,36(sp)
204022be:	5982                	lw	s3,32(sp)
204022c0:	6145                	addi	sp,sp,48
204022c2:	8082                	ret

204022c4 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
204022c4:	1101                	addi	sp,sp,-32
204022c6:	ce06                	sw	ra,28(sp)
204022c8:	cc22                	sw	s0,24(sp)
204022ca:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
204022cc:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
204022d0:	f14027f3          	csrr	a5,mhartid
204022d4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
204022d8:	fec42783          	lw	a5,-20(s0)
204022dc:	853e                	mv	a0,a5
204022de:	1e6030ef          	jal	ra,204054c4 <metal_cpu_get>
204022e2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
204022e6:	fe842503          	lw	a0,-24(s0)
204022ea:	1b4030ef          	jal	ra,2040549e <metal_cpu_interrupt_controller>
204022ee:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
204022f0:	853e                	mv	a0,a5
204022f2:	40f2                	lw	ra,28(sp)
204022f4:	4462                	lw	s0,24(sp)
204022f6:	6105                	addi	sp,sp,32
204022f8:	8082                	ret

204022fa <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
204022fa:	7139                	addi	sp,sp,-64
204022fc:	de06                	sw	ra,60(sp)
204022fe:	dc22                	sw	s0,56(sp)
20402300:	0080                	addi	s0,sp,64
20402302:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402306:	fcc42503          	lw	a0,-52(s0)
2040230a:	3bed                	jal	20402104 <__metal_driver_sifive_clint0_num_interrupts>
2040230c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20402310:	fcc42783          	lw	a5,-52(s0)
20402314:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20402318:	fe442783          	lw	a5,-28(s0)
2040231c:	43dc                	lw	a5,4(a5)
2040231e:	efa9                	bnez	a5,20402378 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20402320:	fe042623          	sw	zero,-20(s0)
20402324:	a081                	j	20402364 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402326:	fec42583          	lw	a1,-20(s0)
2040232a:	fcc42503          	lw	a0,-52(s0)
2040232e:	3bed                	jal	20402128 <__metal_driver_sifive_clint0_interrupt_parents>
20402330:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402334:	fec42583          	lw	a1,-20(s0)
20402338:	fcc42503          	lw	a0,-52(s0)
2040233c:	3525                	jal	20402164 <__metal_driver_sifive_clint0_interrupt_lines>
2040233e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402342:	fe042783          	lw	a5,-32(s0)
20402346:	439c                	lw	a5,0(a5)
20402348:	4fdc                	lw	a5,28(a5)
2040234a:	fcc42683          	lw	a3,-52(s0)
2040234e:	4601                	li	a2,0
20402350:	fdc42583          	lw	a1,-36(s0)
20402354:	fe042503          	lw	a0,-32(s0)
20402358:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
2040235a:	fec42783          	lw	a5,-20(s0)
2040235e:	0785                	addi	a5,a5,1
20402360:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402364:	fec42703          	lw	a4,-20(s0)
20402368:	fe842783          	lw	a5,-24(s0)
2040236c:	faf74de3          	blt	a4,a5,20402326 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402370:	fe442783          	lw	a5,-28(s0)
20402374:	4705                	li	a4,1
20402376:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20402378:	0001                	nop
2040237a:	50f2                	lw	ra,60(sp)
2040237c:	5462                	lw	s0,56(sp)
2040237e:	6121                	addi	sp,sp,64
20402380:	8082                	ret

20402382 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402382:	7139                	addi	sp,sp,-64
20402384:	de06                	sw	ra,60(sp)
20402386:	dc22                	sw	s0,56(sp)
20402388:	0080                	addi	s0,sp,64
2040238a:	fca42623          	sw	a0,-52(s0)
2040238e:	fcb42423          	sw	a1,-56(s0)
20402392:	fcc42223          	sw	a2,-60(s0)
20402396:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
2040239a:	57fd                	li	a5,-1
2040239c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204023a0:	374010ef          	jal	ra,20403714 <__metal_controller_interrupt_vector_mode>
204023a4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
204023a8:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204023ac:	3f21                	jal	204022c4 <_get_cpu_intc>
204023ae:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204023b2:	fcc42503          	lw	a0,-52(s0)
204023b6:	33b9                	jal	20402104 <__metal_driver_sifive_clint0_num_interrupts>
204023b8:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
204023bc:	fe042703          	lw	a4,-32(s0)
204023c0:	4785                	li	a5,1
204023c2:	00f70863          	beq	a4,a5,204023d2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
204023c6:	fe042783          	lw	a5,-32(s0)
204023ca:	c781                	beqz	a5,204023d2 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
204023cc:	fec42783          	lw	a5,-20(s0)
204023d0:	a049                	j	20402452 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
204023d2:	fe042223          	sw	zero,-28(s0)
204023d6:	a091                	j	2040241a <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204023d8:	fe442583          	lw	a1,-28(s0)
204023dc:	fcc42503          	lw	a0,-52(s0)
204023e0:	3351                	jal	20402164 <__metal_driver_sifive_clint0_interrupt_lines>
204023e2:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204023e6:	fe442583          	lw	a1,-28(s0)
204023ea:	fcc42503          	lw	a0,-52(s0)
204023ee:	3b2d                	jal	20402128 <__metal_driver_sifive_clint0_interrupt_parents>
204023f0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204023f4:	fdc42703          	lw	a4,-36(s0)
204023f8:	fe842783          	lw	a5,-24(s0)
204023fc:	00f71863          	bne	a4,a5,2040240c <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20402400:	fc842703          	lw	a4,-56(s0)
20402404:	fd442783          	lw	a5,-44(s0)
20402408:	02f70063          	beq	a4,a5,20402428 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
2040240c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20402410:	fe442783          	lw	a5,-28(s0)
20402414:	0785                	addi	a5,a5,1
20402416:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
2040241a:	fe442703          	lw	a4,-28(s0)
2040241e:	fd842783          	lw	a5,-40(s0)
20402422:	faf74be3          	blt	a4,a5,204023d8 <__metal_driver_riscv_clint0_register+0x56>
20402426:	a011                	j	2040242a <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20402428:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
2040242a:	fe842783          	lw	a5,-24(s0)
2040242e:	c385                	beqz	a5,2040244e <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20402430:	fe842783          	lw	a5,-24(s0)
20402434:	439c                	lw	a5,0(a5)
20402436:	4fdc                	lw	a5,28(a5)
20402438:	fc042683          	lw	a3,-64(s0)
2040243c:	fc442603          	lw	a2,-60(s0)
20402440:	fc842583          	lw	a1,-56(s0)
20402444:	fe842503          	lw	a0,-24(s0)
20402448:	9782                	jalr	a5
2040244a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2040244e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402452:	853e                	mv	a0,a5
20402454:	50f2                	lw	ra,60(sp)
20402456:	5462                	lw	s0,56(sp)
20402458:	6121                	addi	sp,sp,64
2040245a:	8082                	ret

2040245c <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
2040245c:	7179                	addi	sp,sp,-48
2040245e:	d622                	sw	s0,44(sp)
20402460:	1800                	addi	s0,sp,48
20402462:	fca42e23          	sw	a0,-36(s0)
20402466:	fcb42c23          	sw	a1,-40(s0)
2040246a:	fcc42a23          	sw	a2,-44(s0)
2040246e:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402472:	57fd                	li	a5,-1
20402474:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402478:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
2040247c:	853e                	mv	a0,a5
2040247e:	5432                	lw	s0,44(sp)
20402480:	6145                	addi	sp,sp,48
20402482:	8082                	ret

20402484 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402484:	1101                	addi	sp,sp,-32
20402486:	ce06                	sw	ra,28(sp)
20402488:	cc22                	sw	s0,24(sp)
2040248a:	1000                	addi	s0,sp,32
2040248c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402490:	284010ef          	jal	ra,20403714 <__metal_controller_interrupt_vector_mode>
20402494:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402496:	853e                	mv	a0,a5
20402498:	40f2                	lw	ra,28(sp)
2040249a:	4462                	lw	s0,24(sp)
2040249c:	6105                	addi	sp,sp,32
2040249e:	8082                	ret

204024a0 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
204024a0:	7179                	addi	sp,sp,-48
204024a2:	d606                	sw	ra,44(sp)
204024a4:	d422                	sw	s0,40(sp)
204024a6:	1800                	addi	s0,sp,48
204024a8:	fca42e23          	sw	a0,-36(s0)
204024ac:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
204024b0:	57fd                	li	a5,-1
204024b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
204024b6:	3539                	jal	204022c4 <_get_cpu_intc>
204024b8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
204024bc:	fe842783          	lw	a5,-24(s0)
204024c0:	c395                	beqz	a5,204024e4 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
204024c2:	fd842703          	lw	a4,-40(s0)
204024c6:	4785                	li	a5,1
204024c8:	00e7ef63          	bltu	a5,a4,204024e6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
204024cc:	fe842783          	lw	a5,-24(s0)
204024d0:	439c                	lw	a5,0(a5)
204024d2:	43dc                	lw	a5,4(a5)
204024d4:	fd842583          	lw	a1,-40(s0)
204024d8:	fe842503          	lw	a0,-24(s0)
204024dc:	9782                	jalr	a5
204024de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204024e2:	a011                	j	204024e6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204024e4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204024e6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204024ea:	853e                	mv	a0,a5
204024ec:	50b2                	lw	ra,44(sp)
204024ee:	5422                	lw	s0,40(sp)
204024f0:	6145                	addi	sp,sp,48
204024f2:	8082                	ret

204024f4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204024f4:	7139                	addi	sp,sp,-64
204024f6:	de06                	sw	ra,60(sp)
204024f8:	dc22                	sw	s0,56(sp)
204024fa:	0080                	addi	s0,sp,64
204024fc:	fca42623          	sw	a0,-52(s0)
20402500:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
20402504:	57fd                	li	a5,-1
20402506:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
2040250a:	fc842783          	lw	a5,-56(s0)
2040250e:	c7c9                	beqz	a5,20402598 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402510:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402514:	3b45                	jal	204022c4 <_get_cpu_intc>
20402516:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040251a:	fcc42503          	lw	a0,-52(s0)
2040251e:	36dd                	jal	20402104 <__metal_driver_sifive_clint0_num_interrupts>
20402520:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
20402524:	fe042223          	sw	zero,-28(s0)
20402528:	a091                	j	2040256c <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040252a:	fe442583          	lw	a1,-28(s0)
2040252e:	fcc42503          	lw	a0,-52(s0)
20402532:	390d                	jal	20402164 <__metal_driver_sifive_clint0_interrupt_lines>
20402534:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402538:	fe442583          	lw	a1,-28(s0)
2040253c:	fcc42503          	lw	a0,-52(s0)
20402540:	36e5                	jal	20402128 <__metal_driver_sifive_clint0_interrupt_parents>
20402542:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402546:	fe042703          	lw	a4,-32(s0)
2040254a:	fe842783          	lw	a5,-24(s0)
2040254e:	00f71863          	bne	a4,a5,2040255e <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402552:	fc842703          	lw	a4,-56(s0)
20402556:	fd842783          	lw	a5,-40(s0)
2040255a:	02f70063          	beq	a4,a5,2040257a <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
2040255e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402562:	fe442783          	lw	a5,-28(s0)
20402566:	0785                	addi	a5,a5,1
20402568:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
2040256c:	fe442703          	lw	a4,-28(s0)
20402570:	fdc42783          	lw	a5,-36(s0)
20402574:	faf74be3          	blt	a4,a5,2040252a <__metal_driver_riscv_clint0_enable+0x36>
20402578:	a011                	j	2040257c <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
2040257a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
2040257c:	fe842783          	lw	a5,-24(s0)
20402580:	cf81                	beqz	a5,20402598 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402582:	fe842783          	lw	a5,-24(s0)
20402586:	439c                	lw	a5,0(a5)
20402588:	53dc                	lw	a5,36(a5)
2040258a:	fc842583          	lw	a1,-56(s0)
2040258e:	fe842503          	lw	a0,-24(s0)
20402592:	9782                	jalr	a5
20402594:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402598:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
2040259c:	853e                	mv	a0,a5
2040259e:	50f2                	lw	ra,60(sp)
204025a0:	5462                	lw	s0,56(sp)
204025a2:	6121                	addi	sp,sp,64
204025a4:	8082                	ret

204025a6 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
204025a6:	7139                	addi	sp,sp,-64
204025a8:	de06                	sw	ra,60(sp)
204025aa:	dc22                	sw	s0,56(sp)
204025ac:	0080                	addi	s0,sp,64
204025ae:	fca42623          	sw	a0,-52(s0)
204025b2:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
204025b6:	57fd                	li	a5,-1
204025b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
204025bc:	fc842783          	lw	a5,-56(s0)
204025c0:	c7c9                	beqz	a5,2040264a <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
204025c2:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204025c6:	39fd                	jal	204022c4 <_get_cpu_intc>
204025c8:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204025cc:	fcc42503          	lw	a0,-52(s0)
204025d0:	3e15                	jal	20402104 <__metal_driver_sifive_clint0_num_interrupts>
204025d2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
204025d6:	fe042223          	sw	zero,-28(s0)
204025da:	a091                	j	2040261e <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204025dc:	fe442583          	lw	a1,-28(s0)
204025e0:	fcc42503          	lw	a0,-52(s0)
204025e4:	3641                	jal	20402164 <__metal_driver_sifive_clint0_interrupt_lines>
204025e6:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204025ea:	fe442583          	lw	a1,-28(s0)
204025ee:	fcc42503          	lw	a0,-52(s0)
204025f2:	3e1d                	jal	20402128 <__metal_driver_sifive_clint0_interrupt_parents>
204025f4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204025f8:	fe042703          	lw	a4,-32(s0)
204025fc:	fe842783          	lw	a5,-24(s0)
20402600:	00f71863          	bne	a4,a5,20402610 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
20402604:	fc842703          	lw	a4,-56(s0)
20402608:	fd842783          	lw	a5,-40(s0)
2040260c:	02f70063          	beq	a4,a5,2040262c <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402610:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402614:	fe442783          	lw	a5,-28(s0)
20402618:	0785                	addi	a5,a5,1
2040261a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
2040261e:	fe442703          	lw	a4,-28(s0)
20402622:	fdc42783          	lw	a5,-36(s0)
20402626:	faf74be3          	blt	a4,a5,204025dc <__metal_driver_riscv_clint0_disable+0x36>
2040262a:	a011                	j	2040262e <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
2040262c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
2040262e:	fe842783          	lw	a5,-24(s0)
20402632:	cf81                	beqz	a5,2040264a <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
20402634:	fe842783          	lw	a5,-24(s0)
20402638:	439c                	lw	a5,0(a5)
2040263a:	579c                	lw	a5,40(a5)
2040263c:	fc842583          	lw	a1,-56(s0)
20402640:	fe842503          	lw	a0,-24(s0)
20402644:	9782                	jalr	a5
20402646:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
2040264a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2040264e:	853e                	mv	a0,a5
20402650:	50f2                	lw	ra,60(sp)
20402652:	5462                	lw	s0,56(sp)
20402654:	6121                	addi	sp,sp,64
20402656:	8082                	ret

20402658 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402658:	7179                	addi	sp,sp,-48
2040265a:	d606                	sw	ra,44(sp)
2040265c:	d422                	sw	s0,40(sp)
2040265e:	1800                	addi	s0,sp,48
20402660:	fca42e23          	sw	a0,-36(s0)
20402664:	fcb42c23          	sw	a1,-40(s0)
20402668:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
2040266c:	57fd                	li	a5,-1
2040266e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402672:	fdc42783          	lw	a5,-36(s0)
20402676:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
2040267a:	fdc42503          	lw	a0,-36(s0)
2040267e:	a61ff0ef          	jal	ra,204020de <__metal_driver_sifive_clint0_control_base>
20402682:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402686:	fd842703          	lw	a4,-40(s0)
2040268a:	4789                	li	a5,2
2040268c:	04f70863          	beq	a4,a5,204026dc <__metal_driver_riscv_clint0_command_request+0x84>
20402690:	fd842703          	lw	a4,-40(s0)
20402694:	4789                	li	a5,2
20402696:	00e7c863          	blt	a5,a4,204026a6 <__metal_driver_riscv_clint0_command_request+0x4e>
2040269a:	fd842703          	lw	a4,-40(s0)
2040269e:	4785                	li	a5,1
204026a0:	00f70e63          	beq	a4,a5,204026bc <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204026a4:	a8e9                	j	2040277e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204026a6:	fd842703          	lw	a4,-40(s0)
204026aa:	478d                	li	a5,3
204026ac:	04f70c63          	beq	a4,a5,20402704 <__metal_driver_riscv_clint0_command_request+0xac>
204026b0:	fd842703          	lw	a4,-40(s0)
204026b4:	4791                	li	a5,4
204026b6:	08f70863          	beq	a4,a5,20402746 <__metal_driver_riscv_clint0_command_request+0xee>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204026ba:	a0d1                	j	2040277e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204026bc:	fd442783          	lw	a5,-44(s0)
204026c0:	cbc5                	beqz	a5,20402770 <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204026c2:	fe842503          	lw	a0,-24(s0)
204026c6:	34f9                	jal	20402194 <__metal_clint0_mtime_get>
204026c8:	87aa                	mv	a5,a0
204026ca:	882e                	mv	a6,a1
204026cc:	fd442703          	lw	a4,-44(s0)
204026d0:	c31c                	sw	a5,0(a4)
204026d2:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204026d6:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204026da:	a859                	j	20402770 <__metal_driver_riscv_clint0_command_request+0x118>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
204026dc:	fd442783          	lw	a5,-44(s0)
204026e0:	cbd1                	beqz	a5,20402774 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204026e2:	fd442783          	lw	a5,-44(s0)
204026e6:	439c                	lw	a5,0(a5)
204026e8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204026ec:	fe042783          	lw	a5,-32(s0)
204026f0:	078a                	slli	a5,a5,0x2
204026f2:	873e                	mv	a4,a5
204026f4:	fe442783          	lw	a5,-28(s0)
204026f8:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
204026fa:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
204026fe:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402702:	a88d                	j	20402774 <__metal_driver_riscv_clint0_command_request+0x11c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
20402704:	fd442783          	lw	a5,-44(s0)
20402708:	cba5                	beqz	a5,20402778 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
2040270a:	fd442783          	lw	a5,-44(s0)
2040270e:	439c                	lw	a5,0(a5)
20402710:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402714:	fe042783          	lw	a5,-32(s0)
20402718:	078a                	slli	a5,a5,0x2
2040271a:	873e                	mv	a4,a5
2040271c:	fe442783          	lw	a5,-28(s0)
20402720:	97ba                	add	a5,a5,a4
20402722:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
20402724:	4785                	li	a5,1
20402726:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402728:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040272c:	fe042783          	lw	a5,-32(s0)
20402730:	078a                	slli	a5,a5,0x2
20402732:	873e                	mv	a4,a5
20402734:	fe442783          	lw	a5,-28(s0)
20402738:	97ba                	add	a5,a5,a4
2040273a:	439c                	lw	a5,0(a5)
2040273c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402740:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402744:	a815                	j	20402778 <__metal_driver_riscv_clint0_command_request+0x120>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402746:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
2040274a:	fd442783          	lw	a5,-44(s0)
2040274e:	c79d                	beqz	a5,2040277c <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402750:	fd442783          	lw	a5,-44(s0)
20402754:	439c                	lw	a5,0(a5)
20402756:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040275a:	fe042783          	lw	a5,-32(s0)
2040275e:	078a                	slli	a5,a5,0x2
20402760:	873e                	mv	a4,a5
20402762:	fe442783          	lw	a5,-28(s0)
20402766:	97ba                	add	a5,a5,a4
20402768:	439c                	lw	a5,0(a5)
2040276a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040276e:	a039                	j	2040277c <__metal_driver_riscv_clint0_command_request+0x124>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402770:	0001                	nop
20402772:	a031                	j	2040277e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402774:	0001                	nop
20402776:	a021                	j	2040277e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402778:	0001                	nop
2040277a:	a011                	j	2040277e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040277c:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
2040277e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402782:	853e                	mv	a0,a5
20402784:	50b2                	lw	ra,44(sp)
20402786:	5422                	lw	s0,40(sp)
20402788:	6145                	addi	sp,sp,48
2040278a:	8082                	ret

2040278c <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
2040278c:	7179                	addi	sp,sp,-48
2040278e:	d606                	sw	ra,44(sp)
20402790:	d422                	sw	s0,40(sp)
20402792:	1800                	addi	s0,sp,48
20402794:	fca42e23          	sw	a0,-36(s0)
20402798:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
2040279c:	553020ef          	jal	ra,204054ee <metal_cpu_get_current_hartid>
204027a0:	87aa                	mv	a5,a0
204027a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
204027a6:	fec40793          	addi	a5,s0,-20
204027aa:	863e                	mv	a2,a5
204027ac:	4589                	li	a1,2
204027ae:	fdc42503          	lw	a0,-36(s0)
204027b2:	355d                	jal	20402658 <__metal_driver_riscv_clint0_command_request>
204027b4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204027b6:	853e                	mv	a0,a5
204027b8:	50b2                	lw	ra,44(sp)
204027ba:	5422                	lw	s0,40(sp)
204027bc:	6145                	addi	sp,sp,48
204027be:	8082                	ret

204027c0 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204027c0:	7179                	addi	sp,sp,-48
204027c2:	d606                	sw	ra,44(sp)
204027c4:	d422                	sw	s0,40(sp)
204027c6:	1800                	addi	s0,sp,48
204027c8:	fca42e23          	sw	a0,-36(s0)
204027cc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204027d0:	51f020ef          	jal	ra,204054ee <metal_cpu_get_current_hartid>
204027d4:	87aa                	mv	a5,a0
204027d6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204027da:	fec40793          	addi	a5,s0,-20
204027de:	863e                	mv	a2,a5
204027e0:	458d                	li	a1,3
204027e2:	fdc42503          	lw	a0,-36(s0)
204027e6:	3d8d                	jal	20402658 <__metal_driver_riscv_clint0_command_request>
204027e8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204027ea:	853e                	mv	a0,a5
204027ec:	50b2                	lw	ra,44(sp)
204027ee:	5422                	lw	s0,40(sp)
204027f0:	6145                	addi	sp,sp,48
204027f2:	8082                	ret

204027f4 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204027f4:	1101                	addi	sp,sp,-32
204027f6:	ce22                	sw	s0,28(sp)
204027f8:	1000                	addi	s0,sp,32
204027fa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204027fe:	fec42703          	lw	a4,-20(s0)
20402802:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402806:	00f71463          	bne	a4,a5,2040280e <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
2040280a:	4781                	li	a5,0
2040280c:	a011                	j	20402810 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
2040280e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402810:	853e                	mv	a0,a5
20402812:	4472                	lw	s0,28(sp)
20402814:	6105                	addi	sp,sp,32
20402816:	8082                	ret

20402818 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402818:	1101                	addi	sp,sp,-32
2040281a:	ce22                	sw	s0,28(sp)
2040281c:	1000                	addi	s0,sp,32
2040281e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402822:	fec42703          	lw	a4,-20(s0)
20402826:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
2040282a:	00f71763          	bne	a4,a5,20402838 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
2040282e:	000f47b7          	lui	a5,0xf4
20402832:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402836:	a011                	j	2040283a <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402838:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
2040283a:	853e                	mv	a0,a5
2040283c:	4472                	lw	s0,28(sp)
2040283e:	6105                	addi	sp,sp,32
20402840:	8082                	ret

20402842 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402842:	1101                	addi	sp,sp,-32
20402844:	ce22                	sw	s0,28(sp)
20402846:	1000                	addi	s0,sp,32
20402848:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040284c:	fec42703          	lw	a4,-20(s0)
20402850:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402854:	00f71763          	bne	a4,a5,20402862 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402858:	800007b7          	lui	a5,0x80000
2040285c:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
20402860:	a011                	j	20402864 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402862:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
20402864:	853e                	mv	a0,a5
20402866:	4472                	lw	s0,28(sp)
20402868:	6105                	addi	sp,sp,32
2040286a:	8082                	ret

2040286c <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2040286c:	1101                	addi	sp,sp,-32
2040286e:	ce22                	sw	s0,28(sp)
20402870:	1000                	addi	s0,sp,32
20402872:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402876:	fec42783          	lw	a5,-20(s0)
2040287a:	00f04a63          	bgtz	a5,2040288e <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
2040287e:	fec42703          	lw	a4,-20(s0)
20402882:	070a                	slli	a4,a4,0x2
20402884:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402888:	97ba                	add	a5,a5,a4
2040288a:	439c                	lw	a5,0(a5)
2040288c:	a011                	j	20402890 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
2040288e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402890:	853e                	mv	a0,a5
20402892:	4472                	lw	s0,28(sp)
20402894:	6105                	addi	sp,sp,32
20402896:	8082                	ret

20402898 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402898:	1101                	addi	sp,sp,-32
2040289a:	ce22                	sw	s0,28(sp)
2040289c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
2040289e:	f14027f3          	csrr	a5,mhartid
204028a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
204028a6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
204028aa:	853e                	mv	a0,a5
204028ac:	4472                	lw	s0,28(sp)
204028ae:	6105                	addi	sp,sp,32
204028b0:	8082                	ret

204028b2 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204028b2:	1101                	addi	sp,sp,-32
204028b4:	ce22                	sw	s0,28(sp)
204028b6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204028b8:	47a1                	li	a5,8
204028ba:	3007a7f3          	csrrs	a5,mstatus,a5
204028be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
204028c2:	0001                	nop
204028c4:	4472                	lw	s0,28(sp)
204028c6:	6105                	addi	sp,sp,32
204028c8:	8082                	ret

204028ca <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204028ca:	1101                	addi	sp,sp,-32
204028cc:	ce22                	sw	s0,28(sp)
204028ce:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204028d0:	47a1                	li	a5,8
204028d2:	3007b7f3          	csrrc	a5,mstatus,a5
204028d6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204028da:	0001                	nop
204028dc:	4472                	lw	s0,28(sp)
204028de:	6105                	addi	sp,sp,32
204028e0:	8082                	ret

204028e2 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204028e2:	1101                	addi	sp,sp,-32
204028e4:	ce22                	sw	s0,28(sp)
204028e6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204028e8:	47a1                	li	a5,8
204028ea:	3047a7f3          	csrrs	a5,mie,a5
204028ee:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204028f2:	0001                	nop
204028f4:	4472                	lw	s0,28(sp)
204028f6:	6105                	addi	sp,sp,32
204028f8:	8082                	ret

204028fa <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204028fa:	1101                	addi	sp,sp,-32
204028fc:	ce22                	sw	s0,28(sp)
204028fe:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402900:	47a1                	li	a5,8
20402902:	3047b7f3          	csrrc	a5,mie,a5
20402906:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
2040290a:	0001                	nop
2040290c:	4472                	lw	s0,28(sp)
2040290e:	6105                	addi	sp,sp,32
20402910:	8082                	ret

20402912 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
20402912:	1101                	addi	sp,sp,-32
20402914:	ce22                	sw	s0,28(sp)
20402916:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402918:	08000793          	li	a5,128
2040291c:	3047a7f3          	csrrs	a5,mie,a5
20402920:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
20402924:	0001                	nop
20402926:	4472                	lw	s0,28(sp)
20402928:	6105                	addi	sp,sp,32
2040292a:	8082                	ret

2040292c <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
2040292c:	1101                	addi	sp,sp,-32
2040292e:	ce22                	sw	s0,28(sp)
20402930:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402932:	08000793          	li	a5,128
20402936:	3047b7f3          	csrrc	a5,mie,a5
2040293a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
2040293e:	0001                	nop
20402940:	4472                	lw	s0,28(sp)
20402942:	6105                	addi	sp,sp,32
20402944:	8082                	ret

20402946 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402946:	1101                	addi	sp,sp,-32
20402948:	ce22                	sw	s0,28(sp)
2040294a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040294c:	6785                	lui	a5,0x1
2040294e:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402952:	3047a7f3          	csrrs	a5,mie,a5
20402956:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
2040295a:	0001                	nop
2040295c:	4472                	lw	s0,28(sp)
2040295e:	6105                	addi	sp,sp,32
20402960:	8082                	ret

20402962 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402962:	1101                	addi	sp,sp,-32
20402964:	ce22                	sw	s0,28(sp)
20402966:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402968:	6785                	lui	a5,0x1
2040296a:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040296e:	3047b7f3          	csrrc	a5,mie,a5
20402972:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402976:	0001                	nop
20402978:	4472                	lw	s0,28(sp)
2040297a:	6105                	addi	sp,sp,32
2040297c:	8082                	ret

2040297e <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
2040297e:	7179                	addi	sp,sp,-48
20402980:	d622                	sw	s0,44(sp)
20402982:	1800                	addi	s0,sp,48
20402984:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402988:	fdc42783          	lw	a5,-36(s0)
2040298c:	4705                	li	a4,1
2040298e:	00f717b3          	sll	a5,a4,a5
20402992:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402996:	fec42783          	lw	a5,-20(s0)
2040299a:	3047a7f3          	csrrs	a5,mie,a5
2040299e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
204029a2:	0001                	nop
204029a4:	5432                	lw	s0,44(sp)
204029a6:	6145                	addi	sp,sp,48
204029a8:	8082                	ret

204029aa <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
204029aa:	7179                	addi	sp,sp,-48
204029ac:	d622                	sw	s0,44(sp)
204029ae:	1800                	addi	s0,sp,48
204029b0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204029b4:	fdc42783          	lw	a5,-36(s0)
204029b8:	4705                	li	a4,1
204029ba:	00f717b3          	sll	a5,a4,a5
204029be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204029c2:	fec42783          	lw	a5,-20(s0)
204029c6:	3047b7f3          	csrrc	a5,mie,a5
204029ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204029ce:	0001                	nop
204029d0:	5432                	lw	s0,44(sp)
204029d2:	6145                	addi	sp,sp,48
204029d4:	8082                	ret

204029d6 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204029d6:	1101                	addi	sp,sp,-32
204029d8:	ce06                	sw	ra,28(sp)
204029da:	cc22                	sw	s0,24(sp)
204029dc:	1000                	addi	s0,sp,32
204029de:	fea42623          	sw	a0,-20(s0)
204029e2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204029e6:	06400513          	li	a0,100
204029ea:	31f020ef          	jal	ra,20405508 <metal_shutdown>

204029ee <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204029ee:	1101                	addi	sp,sp,-32
204029f0:	ce06                	sw	ra,28(sp)
204029f2:	cc22                	sw	s0,24(sp)
204029f4:	1000                	addi	s0,sp,32
204029f6:	fea42623          	sw	a0,-20(s0)
204029fa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204029fe:	0c800513          	li	a0,200
20402a02:	307020ef          	jal	ra,20405508 <metal_shutdown>

20402a06 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
20402a06:	715d                	addi	sp,sp,-80
20402a08:	c686                	sw	ra,76(sp)
20402a0a:	c496                	sw	t0,72(sp)
20402a0c:	c29a                	sw	t1,68(sp)
20402a0e:	c09e                	sw	t2,64(sp)
20402a10:	de22                	sw	s0,60(sp)
20402a12:	dc2a                	sw	a0,56(sp)
20402a14:	da2e                	sw	a1,52(sp)
20402a16:	d832                	sw	a2,48(sp)
20402a18:	d636                	sw	a3,44(sp)
20402a1a:	d43a                	sw	a4,40(sp)
20402a1c:	d23e                	sw	a5,36(sp)
20402a1e:	d042                	sw	a6,32(sp)
20402a20:	ce46                	sw	a7,28(sp)
20402a22:	cc72                	sw	t3,24(sp)
20402a24:	ca76                	sw	t4,20(sp)
20402a26:	c87a                	sw	t5,16(sp)
20402a28:	c67e                	sw	t6,12(sp)
20402a2a:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402a2c:	12c00513          	li	a0,300
20402a30:	2d9020ef          	jal	ra,20405508 <metal_shutdown>

20402a34 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
20402a34:	711d                	addi	sp,sp,-96
20402a36:	ce86                	sw	ra,92(sp)
20402a38:	cc96                	sw	t0,88(sp)
20402a3a:	ca9a                	sw	t1,84(sp)
20402a3c:	c89e                	sw	t2,80(sp)
20402a3e:	c6a2                	sw	s0,76(sp)
20402a40:	c4aa                	sw	a0,72(sp)
20402a42:	c2ae                	sw	a1,68(sp)
20402a44:	c0b2                	sw	a2,64(sp)
20402a46:	de36                	sw	a3,60(sp)
20402a48:	dc3a                	sw	a4,56(sp)
20402a4a:	da3e                	sw	a5,52(sp)
20402a4c:	d842                	sw	a6,48(sp)
20402a4e:	d646                	sw	a7,44(sp)
20402a50:	d472                	sw	t3,40(sp)
20402a52:	d276                	sw	t4,36(sp)
20402a54:	d07a                	sw	t5,32(sp)
20402a56:	ce7e                	sw	t6,28(sp)
20402a58:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a5a:	3d3d                	jal	20402898 <__metal_myhart_id>
20402a5c:	872a                	mv	a4,a0
20402a5e:	070a                	slli	a4,a4,0x2
20402a60:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402a64:	97ba                	add	a5,a5,a4
20402a66:	439c                	lw	a5,0(a5)
20402a68:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402a6c:	fac42783          	lw	a5,-84(s0)
20402a70:	c785                	beqz	a5,20402a98 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a72:	fac42503          	lw	a0,-84(s0)
20402a76:	33f1                	jal	20402842 <__metal_driver_cpu_interrupt_controller>
20402a78:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402a7c:	fa842783          	lw	a5,-88(s0)
20402a80:	0e07a783          	lw	a5,224(a5)
20402a84:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402a88:	fa842783          	lw	a5,-88(s0)
20402a8c:	0d87a783          	lw	a5,216(a5)
20402a90:	fa442583          	lw	a1,-92(s0)
20402a94:	450d                	li	a0,3
20402a96:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402a98:	0001                	nop
20402a9a:	40f6                	lw	ra,92(sp)
20402a9c:	42e6                	lw	t0,88(sp)
20402a9e:	4356                	lw	t1,84(sp)
20402aa0:	43c6                	lw	t2,80(sp)
20402aa2:	4436                	lw	s0,76(sp)
20402aa4:	4526                	lw	a0,72(sp)
20402aa6:	4596                	lw	a1,68(sp)
20402aa8:	4606                	lw	a2,64(sp)
20402aaa:	56f2                	lw	a3,60(sp)
20402aac:	5762                	lw	a4,56(sp)
20402aae:	57d2                	lw	a5,52(sp)
20402ab0:	5842                	lw	a6,48(sp)
20402ab2:	58b2                	lw	a7,44(sp)
20402ab4:	5e22                	lw	t3,40(sp)
20402ab6:	5e92                	lw	t4,36(sp)
20402ab8:	5f02                	lw	t5,32(sp)
20402aba:	4ff2                	lw	t6,28(sp)
20402abc:	6125                	addi	sp,sp,96
20402abe:	30200073          	mret

20402ac2 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402ac2:	7179                	addi	sp,sp,-48
20402ac4:	d606                	sw	ra,44(sp)
20402ac6:	d422                	sw	s0,40(sp)
20402ac8:	1800                	addi	s0,sp,48
20402aca:	fca42e23          	sw	a0,-36(s0)
20402ace:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ad2:	33d9                	jal	20402898 <__metal_myhart_id>
20402ad4:	872a                	mv	a4,a0
20402ad6:	070a                	slli	a4,a4,0x2
20402ad8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402adc:	97ba                	add	a5,a5,a4
20402ade:	439c                	lw	a5,0(a5)
20402ae0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402ae4:	342027f3          	csrr	a5,mcause
20402ae8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402aec:	fec42783          	lw	a5,-20(s0)
20402af0:	c795                	beqz	a5,20402b1c <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402af2:	fec42503          	lw	a0,-20(s0)
20402af6:	33b1                	jal	20402842 <__metal_driver_cpu_interrupt_controller>
20402af8:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402afc:	fe842783          	lw	a5,-24(s0)
20402b00:	3ff7f793          	andi	a5,a5,1023
20402b04:	fe442703          	lw	a4,-28(s0)
20402b08:	0e078793          	addi	a5,a5,224
20402b0c:	078a                	slli	a5,a5,0x2
20402b0e:	97ba                	add	a5,a5,a4
20402b10:	479c                	lw	a5,8(a5)
20402b12:	fdc42583          	lw	a1,-36(s0)
20402b16:	fec42503          	lw	a0,-20(s0)
20402b1a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402b1c:	0001                	nop
20402b1e:	50b2                	lw	ra,44(sp)
20402b20:	5422                	lw	s0,40(sp)
20402b22:	6145                	addi	sp,sp,48
20402b24:	8082                	ret

20402b26 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
20402b26:	711d                	addi	sp,sp,-96
20402b28:	ce86                	sw	ra,92(sp)
20402b2a:	cc96                	sw	t0,88(sp)
20402b2c:	ca9a                	sw	t1,84(sp)
20402b2e:	c89e                	sw	t2,80(sp)
20402b30:	c6a2                	sw	s0,76(sp)
20402b32:	c4aa                	sw	a0,72(sp)
20402b34:	c2ae                	sw	a1,68(sp)
20402b36:	c0b2                	sw	a2,64(sp)
20402b38:	de36                	sw	a3,60(sp)
20402b3a:	dc3a                	sw	a4,56(sp)
20402b3c:	da3e                	sw	a5,52(sp)
20402b3e:	d842                	sw	a6,48(sp)
20402b40:	d646                	sw	a7,44(sp)
20402b42:	d472                	sw	t3,40(sp)
20402b44:	d276                	sw	t4,36(sp)
20402b46:	d07a                	sw	t5,32(sp)
20402b48:	ce7e                	sw	t6,28(sp)
20402b4a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b4c:	33b1                	jal	20402898 <__metal_myhart_id>
20402b4e:	872a                	mv	a4,a0
20402b50:	070a                	slli	a4,a4,0x2
20402b52:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b56:	97ba                	add	a5,a5,a4
20402b58:	439c                	lw	a5,0(a5)
20402b5a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402b5e:	fac42783          	lw	a5,-84(s0)
20402b62:	c785                	beqz	a5,20402b8a <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b64:	fac42503          	lw	a0,-84(s0)
20402b68:	39e9                	jal	20402842 <__metal_driver_cpu_interrupt_controller>
20402b6a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402b6e:	fa842783          	lw	a5,-88(s0)
20402b72:	1407a783          	lw	a5,320(a5)
20402b76:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402b7a:	fa842783          	lw	a5,-88(s0)
20402b7e:	1387a783          	lw	a5,312(a5)
20402b82:	fa442583          	lw	a1,-92(s0)
20402b86:	451d                	li	a0,7
20402b88:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402b8a:	0001                	nop
20402b8c:	40f6                	lw	ra,92(sp)
20402b8e:	42e6                	lw	t0,88(sp)
20402b90:	4356                	lw	t1,84(sp)
20402b92:	43c6                	lw	t2,80(sp)
20402b94:	4436                	lw	s0,76(sp)
20402b96:	4526                	lw	a0,72(sp)
20402b98:	4596                	lw	a1,68(sp)
20402b9a:	4606                	lw	a2,64(sp)
20402b9c:	56f2                	lw	a3,60(sp)
20402b9e:	5762                	lw	a4,56(sp)
20402ba0:	57d2                	lw	a5,52(sp)
20402ba2:	5842                	lw	a6,48(sp)
20402ba4:	58b2                	lw	a7,44(sp)
20402ba6:	5e22                	lw	t3,40(sp)
20402ba8:	5e92                	lw	t4,36(sp)
20402baa:	5f02                	lw	t5,32(sp)
20402bac:	4ff2                	lw	t6,28(sp)
20402bae:	6125                	addi	sp,sp,96
20402bb0:	30200073          	mret

20402bb4 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402bb4:	7179                	addi	sp,sp,-48
20402bb6:	d606                	sw	ra,44(sp)
20402bb8:	d422                	sw	s0,40(sp)
20402bba:	1800                	addi	s0,sp,48
20402bbc:	fca42e23          	sw	a0,-36(s0)
20402bc0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402bc4:	39d1                	jal	20402898 <__metal_myhart_id>
20402bc6:	87aa                	mv	a5,a0
20402bc8:	853e                	mv	a0,a5
20402bca:	314d                	jal	2040286c <__metal_driver_cpu_get>
20402bcc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402bd0:	fec42503          	lw	a0,-20(s0)
20402bd4:	196010ef          	jal	ra,20403d6a <__metal_driver_cpu_mtime_get>
20402bd8:	fea42023          	sw	a0,-32(s0)
20402bdc:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402be0:	fe042783          	lw	a5,-32(s0)
20402be4:	fe442803          	lw	a6,-28(s0)
20402be8:	45a9                	li	a1,10
20402bea:	4601                	li	a2,0
20402bec:	00b786b3          	add	a3,a5,a1
20402bf0:	8536                	mv	a0,a3
20402bf2:	00f53533          	sltu	a0,a0,a5
20402bf6:	00c80733          	add	a4,a6,a2
20402bfa:	00e507b3          	add	a5,a0,a4
20402bfe:	873e                	mv	a4,a5
20402c00:	87b6                	mv	a5,a3
20402c02:	883a                	mv	a6,a4
20402c04:	85be                	mv	a1,a5
20402c06:	8642                	mv	a2,a6
20402c08:	fec42503          	lw	a0,-20(s0)
20402c0c:	1c4010ef          	jal	ra,20403dd0 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402c10:	0001                	nop
20402c12:	50b2                	lw	ra,44(sp)
20402c14:	5422                	lw	s0,40(sp)
20402c16:	6145                	addi	sp,sp,48
20402c18:	8082                	ret
	...

20402c80 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402c80:	7119                	addi	sp,sp,-128
20402c82:	de86                	sw	ra,124(sp)
20402c84:	dc96                	sw	t0,120(sp)
20402c86:	da9a                	sw	t1,116(sp)
20402c88:	d89e                	sw	t2,112(sp)
20402c8a:	d6a2                	sw	s0,108(sp)
20402c8c:	d4aa                	sw	a0,104(sp)
20402c8e:	d2ae                	sw	a1,100(sp)
20402c90:	d0b2                	sw	a2,96(sp)
20402c92:	ceb6                	sw	a3,92(sp)
20402c94:	ccba                	sw	a4,88(sp)
20402c96:	cabe                	sw	a5,84(sp)
20402c98:	c8c2                	sw	a6,80(sp)
20402c9a:	c6c6                	sw	a7,76(sp)
20402c9c:	c4f2                	sw	t3,72(sp)
20402c9e:	c2f6                	sw	t4,68(sp)
20402ca0:	c0fa                	sw	t5,64(sp)
20402ca2:	de7e                	sw	t6,60(sp)
20402ca4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ca6:	3ecd                	jal	20402898 <__metal_myhart_id>
20402ca8:	872a                	mv	a4,a0
20402caa:	070a                	slli	a4,a4,0x2
20402cac:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402cb0:	97ba                	add	a5,a5,a4
20402cb2:	439c                	lw	a5,0(a5)
20402cb4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402cb8:	342027f3          	csrr	a5,mcause
20402cbc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402cc0:	341027f3          	csrr	a5,mepc
20402cc4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402cc8:	343027f3          	csrr	a5,mtval
20402ccc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402cd0:	305027f3          	csrr	a5,mtvec
20402cd4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402cd8:	fac42783          	lw	a5,-84(s0)
20402cdc:	c7e9                	beqz	a5,20402da6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cde:	fac42503          	lw	a0,-84(s0)
20402ce2:	b61ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20402ce6:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402cea:	fa842783          	lw	a5,-88(s0)
20402cee:	3ff7f793          	andi	a5,a5,1023
20402cf2:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402cf6:	fa842783          	lw	a5,-88(s0)
20402cfa:	0807d863          	bgez	a5,20402d8a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402cfe:	f9442703          	lw	a4,-108(s0)
20402d02:	47ad                	li	a5,11
20402d04:	00e7d763          	bge	a5,a4,20402d12 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402d08:	f9c42783          	lw	a5,-100(s0)
20402d0c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402d10:	ef9d                	bnez	a5,20402d4e <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402d12:	f9842683          	lw	a3,-104(s0)
20402d16:	f9442703          	lw	a4,-108(s0)
20402d1a:	87ba                	mv	a5,a4
20402d1c:	0786                	slli	a5,a5,0x1
20402d1e:	97ba                	add	a5,a5,a4
20402d20:	078e                	slli	a5,a5,0x3
20402d22:	97b6                	add	a5,a5,a3
20402d24:	0987a783          	lw	a5,152(a5)
20402d28:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402d2c:	f9842683          	lw	a3,-104(s0)
20402d30:	f9442703          	lw	a4,-108(s0)
20402d34:	87ba                	mv	a5,a4
20402d36:	0786                	slli	a5,a5,0x1
20402d38:	97ba                	add	a5,a5,a4
20402d3a:	078e                	slli	a5,a5,0x3
20402d3c:	97b6                	add	a5,a5,a3
20402d3e:	0907a783          	lw	a5,144(a5)
20402d42:	f8c42583          	lw	a1,-116(s0)
20402d46:	f9442503          	lw	a0,-108(s0)
20402d4a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402d4c:	a8a9                	j	20402da6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402d4e:	f9c42783          	lw	a5,-100(s0)
20402d52:	03f7f713          	andi	a4,a5,63
20402d56:	4789                	li	a5,2
20402d58:	04f71763          	bne	a4,a5,20402da6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402d5c:	307027f3          	csrr	a5,mtvt
20402d60:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402d64:	f9842783          	lw	a5,-104(s0)
20402d68:	0dc7a783          	lw	a5,220(a5)
20402d6c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402d70:	f9042783          	lw	a5,-112(s0)
20402d74:	439c                	lw	a5,0(a5)
20402d76:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402d7a:	f8842783          	lw	a5,-120(s0)
20402d7e:	f8c42583          	lw	a1,-116(s0)
20402d82:	f9442503          	lw	a0,-108(s0)
20402d86:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402d88:	a839                	j	20402da6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402d8a:	f9842703          	lw	a4,-104(s0)
20402d8e:	f9442783          	lw	a5,-108(s0)
20402d92:	0e078793          	addi	a5,a5,224
20402d96:	078a                	slli	a5,a5,0x2
20402d98:	97ba                	add	a5,a5,a4
20402d9a:	479c                	lw	a5,8(a5)
20402d9c:	f9442583          	lw	a1,-108(s0)
20402da0:	fac42503          	lw	a0,-84(s0)
20402da4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402da6:	50f6                	lw	ra,124(sp)
20402da8:	52e6                	lw	t0,120(sp)
20402daa:	5356                	lw	t1,116(sp)
20402dac:	53c6                	lw	t2,112(sp)
20402dae:	5436                	lw	s0,108(sp)
20402db0:	5526                	lw	a0,104(sp)
20402db2:	5596                	lw	a1,100(sp)
20402db4:	5606                	lw	a2,96(sp)
20402db6:	46f6                	lw	a3,92(sp)
20402db8:	4766                	lw	a4,88(sp)
20402dba:	47d6                	lw	a5,84(sp)
20402dbc:	4846                	lw	a6,80(sp)
20402dbe:	48b6                	lw	a7,76(sp)
20402dc0:	4e26                	lw	t3,72(sp)
20402dc2:	4e96                	lw	t4,68(sp)
20402dc4:	4f06                	lw	t5,64(sp)
20402dc6:	5ff2                	lw	t6,60(sp)
20402dc8:	6109                	addi	sp,sp,128
20402dca:	30200073          	mret
	...

20402df4 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402df4:	711d                	addi	sp,sp,-96
20402df6:	ce86                	sw	ra,92(sp)
20402df8:	cc96                	sw	t0,88(sp)
20402dfa:	ca9a                	sw	t1,84(sp)
20402dfc:	c89e                	sw	t2,80(sp)
20402dfe:	c6a2                	sw	s0,76(sp)
20402e00:	c4aa                	sw	a0,72(sp)
20402e02:	c2ae                	sw	a1,68(sp)
20402e04:	c0b2                	sw	a2,64(sp)
20402e06:	de36                	sw	a3,60(sp)
20402e08:	dc3a                	sw	a4,56(sp)
20402e0a:	da3e                	sw	a5,52(sp)
20402e0c:	d842                	sw	a6,48(sp)
20402e0e:	d646                	sw	a7,44(sp)
20402e10:	d472                	sw	t3,40(sp)
20402e12:	d276                	sw	t4,36(sp)
20402e14:	d07a                	sw	t5,32(sp)
20402e16:	ce7e                	sw	t6,28(sp)
20402e18:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e1a:	a7fff0ef          	jal	ra,20402898 <__metal_myhart_id>
20402e1e:	872a                	mv	a4,a0
20402e20:	070a                	slli	a4,a4,0x2
20402e22:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e26:	97ba                	add	a5,a5,a4
20402e28:	439c                	lw	a5,0(a5)
20402e2a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402e2e:	fac42783          	lw	a5,-84(s0)
20402e32:	c78d                	beqz	a5,20402e5c <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e34:	fac42503          	lw	a0,-84(s0)
20402e38:	a0bff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20402e3c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402e40:	fa842783          	lw	a5,-88(s0)
20402e44:	2187a783          	lw	a5,536(a5)
20402e48:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402e4c:	fa842783          	lw	a5,-88(s0)
20402e50:	2107a783          	lw	a5,528(a5)
20402e54:	fa442583          	lw	a1,-92(s0)
20402e58:	4541                	li	a0,16
20402e5a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402e5c:	0001                	nop
20402e5e:	40f6                	lw	ra,92(sp)
20402e60:	42e6                	lw	t0,88(sp)
20402e62:	4356                	lw	t1,84(sp)
20402e64:	43c6                	lw	t2,80(sp)
20402e66:	4436                	lw	s0,76(sp)
20402e68:	4526                	lw	a0,72(sp)
20402e6a:	4596                	lw	a1,68(sp)
20402e6c:	4606                	lw	a2,64(sp)
20402e6e:	56f2                	lw	a3,60(sp)
20402e70:	5762                	lw	a4,56(sp)
20402e72:	57d2                	lw	a5,52(sp)
20402e74:	5842                	lw	a6,48(sp)
20402e76:	58b2                	lw	a7,44(sp)
20402e78:	5e22                	lw	t3,40(sp)
20402e7a:	5e92                	lw	t4,36(sp)
20402e7c:	5f02                	lw	t5,32(sp)
20402e7e:	4ff2                	lw	t6,28(sp)
20402e80:	6125                	addi	sp,sp,96
20402e82:	30200073          	mret

20402e86 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402e86:	711d                	addi	sp,sp,-96
20402e88:	ce86                	sw	ra,92(sp)
20402e8a:	cc96                	sw	t0,88(sp)
20402e8c:	ca9a                	sw	t1,84(sp)
20402e8e:	c89e                	sw	t2,80(sp)
20402e90:	c6a2                	sw	s0,76(sp)
20402e92:	c4aa                	sw	a0,72(sp)
20402e94:	c2ae                	sw	a1,68(sp)
20402e96:	c0b2                	sw	a2,64(sp)
20402e98:	de36                	sw	a3,60(sp)
20402e9a:	dc3a                	sw	a4,56(sp)
20402e9c:	da3e                	sw	a5,52(sp)
20402e9e:	d842                	sw	a6,48(sp)
20402ea0:	d646                	sw	a7,44(sp)
20402ea2:	d472                	sw	t3,40(sp)
20402ea4:	d276                	sw	t4,36(sp)
20402ea6:	d07a                	sw	t5,32(sp)
20402ea8:	ce7e                	sw	t6,28(sp)
20402eaa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402eac:	9edff0ef          	jal	ra,20402898 <__metal_myhart_id>
20402eb0:	872a                	mv	a4,a0
20402eb2:	070a                	slli	a4,a4,0x2
20402eb4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402eb8:	97ba                	add	a5,a5,a4
20402eba:	439c                	lw	a5,0(a5)
20402ebc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402ec0:	fac42783          	lw	a5,-84(s0)
20402ec4:	c78d                	beqz	a5,20402eee <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ec6:	fac42503          	lw	a0,-84(s0)
20402eca:	979ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20402ece:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402ed2:	fa842783          	lw	a5,-88(s0)
20402ed6:	2307a783          	lw	a5,560(a5)
20402eda:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402ede:	fa842783          	lw	a5,-88(s0)
20402ee2:	2287a783          	lw	a5,552(a5)
20402ee6:	fa442583          	lw	a1,-92(s0)
20402eea:	4545                	li	a0,17
20402eec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402eee:	0001                	nop
20402ef0:	40f6                	lw	ra,92(sp)
20402ef2:	42e6                	lw	t0,88(sp)
20402ef4:	4356                	lw	t1,84(sp)
20402ef6:	43c6                	lw	t2,80(sp)
20402ef8:	4436                	lw	s0,76(sp)
20402efa:	4526                	lw	a0,72(sp)
20402efc:	4596                	lw	a1,68(sp)
20402efe:	4606                	lw	a2,64(sp)
20402f00:	56f2                	lw	a3,60(sp)
20402f02:	5762                	lw	a4,56(sp)
20402f04:	57d2                	lw	a5,52(sp)
20402f06:	5842                	lw	a6,48(sp)
20402f08:	58b2                	lw	a7,44(sp)
20402f0a:	5e22                	lw	t3,40(sp)
20402f0c:	5e92                	lw	t4,36(sp)
20402f0e:	5f02                	lw	t5,32(sp)
20402f10:	4ff2                	lw	t6,28(sp)
20402f12:	6125                	addi	sp,sp,96
20402f14:	30200073          	mret

20402f18 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402f18:	711d                	addi	sp,sp,-96
20402f1a:	ce86                	sw	ra,92(sp)
20402f1c:	cc96                	sw	t0,88(sp)
20402f1e:	ca9a                	sw	t1,84(sp)
20402f20:	c89e                	sw	t2,80(sp)
20402f22:	c6a2                	sw	s0,76(sp)
20402f24:	c4aa                	sw	a0,72(sp)
20402f26:	c2ae                	sw	a1,68(sp)
20402f28:	c0b2                	sw	a2,64(sp)
20402f2a:	de36                	sw	a3,60(sp)
20402f2c:	dc3a                	sw	a4,56(sp)
20402f2e:	da3e                	sw	a5,52(sp)
20402f30:	d842                	sw	a6,48(sp)
20402f32:	d646                	sw	a7,44(sp)
20402f34:	d472                	sw	t3,40(sp)
20402f36:	d276                	sw	t4,36(sp)
20402f38:	d07a                	sw	t5,32(sp)
20402f3a:	ce7e                	sw	t6,28(sp)
20402f3c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f3e:	95bff0ef          	jal	ra,20402898 <__metal_myhart_id>
20402f42:	872a                	mv	a4,a0
20402f44:	070a                	slli	a4,a4,0x2
20402f46:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f4a:	97ba                	add	a5,a5,a4
20402f4c:	439c                	lw	a5,0(a5)
20402f4e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402f52:	fac42783          	lw	a5,-84(s0)
20402f56:	c78d                	beqz	a5,20402f80 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f58:	fac42503          	lw	a0,-84(s0)
20402f5c:	8e7ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20402f60:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402f64:	fa842783          	lw	a5,-88(s0)
20402f68:	2487a783          	lw	a5,584(a5)
20402f6c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402f70:	fa842783          	lw	a5,-88(s0)
20402f74:	2407a783          	lw	a5,576(a5)
20402f78:	fa442583          	lw	a1,-92(s0)
20402f7c:	4549                	li	a0,18
20402f7e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402f80:	0001                	nop
20402f82:	40f6                	lw	ra,92(sp)
20402f84:	42e6                	lw	t0,88(sp)
20402f86:	4356                	lw	t1,84(sp)
20402f88:	43c6                	lw	t2,80(sp)
20402f8a:	4436                	lw	s0,76(sp)
20402f8c:	4526                	lw	a0,72(sp)
20402f8e:	4596                	lw	a1,68(sp)
20402f90:	4606                	lw	a2,64(sp)
20402f92:	56f2                	lw	a3,60(sp)
20402f94:	5762                	lw	a4,56(sp)
20402f96:	57d2                	lw	a5,52(sp)
20402f98:	5842                	lw	a6,48(sp)
20402f9a:	58b2                	lw	a7,44(sp)
20402f9c:	5e22                	lw	t3,40(sp)
20402f9e:	5e92                	lw	t4,36(sp)
20402fa0:	5f02                	lw	t5,32(sp)
20402fa2:	4ff2                	lw	t6,28(sp)
20402fa4:	6125                	addi	sp,sp,96
20402fa6:	30200073          	mret

20402faa <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402faa:	711d                	addi	sp,sp,-96
20402fac:	ce86                	sw	ra,92(sp)
20402fae:	cc96                	sw	t0,88(sp)
20402fb0:	ca9a                	sw	t1,84(sp)
20402fb2:	c89e                	sw	t2,80(sp)
20402fb4:	c6a2                	sw	s0,76(sp)
20402fb6:	c4aa                	sw	a0,72(sp)
20402fb8:	c2ae                	sw	a1,68(sp)
20402fba:	c0b2                	sw	a2,64(sp)
20402fbc:	de36                	sw	a3,60(sp)
20402fbe:	dc3a                	sw	a4,56(sp)
20402fc0:	da3e                	sw	a5,52(sp)
20402fc2:	d842                	sw	a6,48(sp)
20402fc4:	d646                	sw	a7,44(sp)
20402fc6:	d472                	sw	t3,40(sp)
20402fc8:	d276                	sw	t4,36(sp)
20402fca:	d07a                	sw	t5,32(sp)
20402fcc:	ce7e                	sw	t6,28(sp)
20402fce:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fd0:	8c9ff0ef          	jal	ra,20402898 <__metal_myhart_id>
20402fd4:	872a                	mv	a4,a0
20402fd6:	070a                	slli	a4,a4,0x2
20402fd8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402fdc:	97ba                	add	a5,a5,a4
20402fde:	439c                	lw	a5,0(a5)
20402fe0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402fe4:	fac42783          	lw	a5,-84(s0)
20402fe8:	c78d                	beqz	a5,20403012 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fea:	fac42503          	lw	a0,-84(s0)
20402fee:	855ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20402ff2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402ff6:	fa842783          	lw	a5,-88(s0)
20402ffa:	2607a783          	lw	a5,608(a5)
20402ffe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20403002:	fa842783          	lw	a5,-88(s0)
20403006:	2587a783          	lw	a5,600(a5)
2040300a:	fa442583          	lw	a1,-92(s0)
2040300e:	454d                	li	a0,19
20403010:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20403012:	0001                	nop
20403014:	40f6                	lw	ra,92(sp)
20403016:	42e6                	lw	t0,88(sp)
20403018:	4356                	lw	t1,84(sp)
2040301a:	43c6                	lw	t2,80(sp)
2040301c:	4436                	lw	s0,76(sp)
2040301e:	4526                	lw	a0,72(sp)
20403020:	4596                	lw	a1,68(sp)
20403022:	4606                	lw	a2,64(sp)
20403024:	56f2                	lw	a3,60(sp)
20403026:	5762                	lw	a4,56(sp)
20403028:	57d2                	lw	a5,52(sp)
2040302a:	5842                	lw	a6,48(sp)
2040302c:	58b2                	lw	a7,44(sp)
2040302e:	5e22                	lw	t3,40(sp)
20403030:	5e92                	lw	t4,36(sp)
20403032:	5f02                	lw	t5,32(sp)
20403034:	4ff2                	lw	t6,28(sp)
20403036:	6125                	addi	sp,sp,96
20403038:	30200073          	mret

2040303c <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
2040303c:	711d                	addi	sp,sp,-96
2040303e:	ce86                	sw	ra,92(sp)
20403040:	cc96                	sw	t0,88(sp)
20403042:	ca9a                	sw	t1,84(sp)
20403044:	c89e                	sw	t2,80(sp)
20403046:	c6a2                	sw	s0,76(sp)
20403048:	c4aa                	sw	a0,72(sp)
2040304a:	c2ae                	sw	a1,68(sp)
2040304c:	c0b2                	sw	a2,64(sp)
2040304e:	de36                	sw	a3,60(sp)
20403050:	dc3a                	sw	a4,56(sp)
20403052:	da3e                	sw	a5,52(sp)
20403054:	d842                	sw	a6,48(sp)
20403056:	d646                	sw	a7,44(sp)
20403058:	d472                	sw	t3,40(sp)
2040305a:	d276                	sw	t4,36(sp)
2040305c:	d07a                	sw	t5,32(sp)
2040305e:	ce7e                	sw	t6,28(sp)
20403060:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403062:	837ff0ef          	jal	ra,20402898 <__metal_myhart_id>
20403066:	872a                	mv	a4,a0
20403068:	070a                	slli	a4,a4,0x2
2040306a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040306e:	97ba                	add	a5,a5,a4
20403070:	439c                	lw	a5,0(a5)
20403072:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20403076:	fac42783          	lw	a5,-84(s0)
2040307a:	c78d                	beqz	a5,204030a4 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040307c:	fac42503          	lw	a0,-84(s0)
20403080:	fc2ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403084:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20403088:	fa842783          	lw	a5,-88(s0)
2040308c:	2787a783          	lw	a5,632(a5)
20403090:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20403094:	fa842783          	lw	a5,-88(s0)
20403098:	2707a783          	lw	a5,624(a5)
2040309c:	fa442583          	lw	a1,-92(s0)
204030a0:	4551                	li	a0,20
204030a2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
204030a4:	0001                	nop
204030a6:	40f6                	lw	ra,92(sp)
204030a8:	42e6                	lw	t0,88(sp)
204030aa:	4356                	lw	t1,84(sp)
204030ac:	43c6                	lw	t2,80(sp)
204030ae:	4436                	lw	s0,76(sp)
204030b0:	4526                	lw	a0,72(sp)
204030b2:	4596                	lw	a1,68(sp)
204030b4:	4606                	lw	a2,64(sp)
204030b6:	56f2                	lw	a3,60(sp)
204030b8:	5762                	lw	a4,56(sp)
204030ba:	57d2                	lw	a5,52(sp)
204030bc:	5842                	lw	a6,48(sp)
204030be:	58b2                	lw	a7,44(sp)
204030c0:	5e22                	lw	t3,40(sp)
204030c2:	5e92                	lw	t4,36(sp)
204030c4:	5f02                	lw	t5,32(sp)
204030c6:	4ff2                	lw	t6,28(sp)
204030c8:	6125                	addi	sp,sp,96
204030ca:	30200073          	mret

204030ce <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
204030ce:	711d                	addi	sp,sp,-96
204030d0:	ce86                	sw	ra,92(sp)
204030d2:	cc96                	sw	t0,88(sp)
204030d4:	ca9a                	sw	t1,84(sp)
204030d6:	c89e                	sw	t2,80(sp)
204030d8:	c6a2                	sw	s0,76(sp)
204030da:	c4aa                	sw	a0,72(sp)
204030dc:	c2ae                	sw	a1,68(sp)
204030de:	c0b2                	sw	a2,64(sp)
204030e0:	de36                	sw	a3,60(sp)
204030e2:	dc3a                	sw	a4,56(sp)
204030e4:	da3e                	sw	a5,52(sp)
204030e6:	d842                	sw	a6,48(sp)
204030e8:	d646                	sw	a7,44(sp)
204030ea:	d472                	sw	t3,40(sp)
204030ec:	d276                	sw	t4,36(sp)
204030ee:	d07a                	sw	t5,32(sp)
204030f0:	ce7e                	sw	t6,28(sp)
204030f2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030f4:	fa4ff0ef          	jal	ra,20402898 <__metal_myhart_id>
204030f8:	872a                	mv	a4,a0
204030fa:	070a                	slli	a4,a4,0x2
204030fc:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403100:	97ba                	add	a5,a5,a4
20403102:	439c                	lw	a5,0(a5)
20403104:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20403108:	fac42783          	lw	a5,-84(s0)
2040310c:	c78d                	beqz	a5,20403136 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040310e:	fac42503          	lw	a0,-84(s0)
20403112:	f30ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403116:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
2040311a:	fa842783          	lw	a5,-88(s0)
2040311e:	2907a783          	lw	a5,656(a5)
20403122:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20403126:	fa842783          	lw	a5,-88(s0)
2040312a:	2887a783          	lw	a5,648(a5)
2040312e:	fa442583          	lw	a1,-92(s0)
20403132:	4555                	li	a0,21
20403134:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20403136:	0001                	nop
20403138:	40f6                	lw	ra,92(sp)
2040313a:	42e6                	lw	t0,88(sp)
2040313c:	4356                	lw	t1,84(sp)
2040313e:	43c6                	lw	t2,80(sp)
20403140:	4436                	lw	s0,76(sp)
20403142:	4526                	lw	a0,72(sp)
20403144:	4596                	lw	a1,68(sp)
20403146:	4606                	lw	a2,64(sp)
20403148:	56f2                	lw	a3,60(sp)
2040314a:	5762                	lw	a4,56(sp)
2040314c:	57d2                	lw	a5,52(sp)
2040314e:	5842                	lw	a6,48(sp)
20403150:	58b2                	lw	a7,44(sp)
20403152:	5e22                	lw	t3,40(sp)
20403154:	5e92                	lw	t4,36(sp)
20403156:	5f02                	lw	t5,32(sp)
20403158:	4ff2                	lw	t6,28(sp)
2040315a:	6125                	addi	sp,sp,96
2040315c:	30200073          	mret

20403160 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20403160:	711d                	addi	sp,sp,-96
20403162:	ce86                	sw	ra,92(sp)
20403164:	cc96                	sw	t0,88(sp)
20403166:	ca9a                	sw	t1,84(sp)
20403168:	c89e                	sw	t2,80(sp)
2040316a:	c6a2                	sw	s0,76(sp)
2040316c:	c4aa                	sw	a0,72(sp)
2040316e:	c2ae                	sw	a1,68(sp)
20403170:	c0b2                	sw	a2,64(sp)
20403172:	de36                	sw	a3,60(sp)
20403174:	dc3a                	sw	a4,56(sp)
20403176:	da3e                	sw	a5,52(sp)
20403178:	d842                	sw	a6,48(sp)
2040317a:	d646                	sw	a7,44(sp)
2040317c:	d472                	sw	t3,40(sp)
2040317e:	d276                	sw	t4,36(sp)
20403180:	d07a                	sw	t5,32(sp)
20403182:	ce7e                	sw	t6,28(sp)
20403184:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403186:	f12ff0ef          	jal	ra,20402898 <__metal_myhart_id>
2040318a:	872a                	mv	a4,a0
2040318c:	070a                	slli	a4,a4,0x2
2040318e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403192:	97ba                	add	a5,a5,a4
20403194:	439c                	lw	a5,0(a5)
20403196:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040319a:	fac42783          	lw	a5,-84(s0)
2040319e:	c78d                	beqz	a5,204031c8 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031a0:	fac42503          	lw	a0,-84(s0)
204031a4:	e9eff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
204031a8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
204031ac:	fa842783          	lw	a5,-88(s0)
204031b0:	2a87a783          	lw	a5,680(a5)
204031b4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
204031b8:	fa842783          	lw	a5,-88(s0)
204031bc:	2a07a783          	lw	a5,672(a5)
204031c0:	fa442583          	lw	a1,-92(s0)
204031c4:	4559                	li	a0,22
204031c6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
204031c8:	0001                	nop
204031ca:	40f6                	lw	ra,92(sp)
204031cc:	42e6                	lw	t0,88(sp)
204031ce:	4356                	lw	t1,84(sp)
204031d0:	43c6                	lw	t2,80(sp)
204031d2:	4436                	lw	s0,76(sp)
204031d4:	4526                	lw	a0,72(sp)
204031d6:	4596                	lw	a1,68(sp)
204031d8:	4606                	lw	a2,64(sp)
204031da:	56f2                	lw	a3,60(sp)
204031dc:	5762                	lw	a4,56(sp)
204031de:	57d2                	lw	a5,52(sp)
204031e0:	5842                	lw	a6,48(sp)
204031e2:	58b2                	lw	a7,44(sp)
204031e4:	5e22                	lw	t3,40(sp)
204031e6:	5e92                	lw	t4,36(sp)
204031e8:	5f02                	lw	t5,32(sp)
204031ea:	4ff2                	lw	t6,28(sp)
204031ec:	6125                	addi	sp,sp,96
204031ee:	30200073          	mret

204031f2 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
204031f2:	711d                	addi	sp,sp,-96
204031f4:	ce86                	sw	ra,92(sp)
204031f6:	cc96                	sw	t0,88(sp)
204031f8:	ca9a                	sw	t1,84(sp)
204031fa:	c89e                	sw	t2,80(sp)
204031fc:	c6a2                	sw	s0,76(sp)
204031fe:	c4aa                	sw	a0,72(sp)
20403200:	c2ae                	sw	a1,68(sp)
20403202:	c0b2                	sw	a2,64(sp)
20403204:	de36                	sw	a3,60(sp)
20403206:	dc3a                	sw	a4,56(sp)
20403208:	da3e                	sw	a5,52(sp)
2040320a:	d842                	sw	a6,48(sp)
2040320c:	d646                	sw	a7,44(sp)
2040320e:	d472                	sw	t3,40(sp)
20403210:	d276                	sw	t4,36(sp)
20403212:	d07a                	sw	t5,32(sp)
20403214:	ce7e                	sw	t6,28(sp)
20403216:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403218:	e80ff0ef          	jal	ra,20402898 <__metal_myhart_id>
2040321c:	872a                	mv	a4,a0
2040321e:	070a                	slli	a4,a4,0x2
20403220:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403224:	97ba                	add	a5,a5,a4
20403226:	439c                	lw	a5,0(a5)
20403228:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
2040322c:	fac42783          	lw	a5,-84(s0)
20403230:	c78d                	beqz	a5,2040325a <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403232:	fac42503          	lw	a0,-84(s0)
20403236:	e0cff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
2040323a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
2040323e:	fa842783          	lw	a5,-88(s0)
20403242:	2c07a783          	lw	a5,704(a5)
20403246:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
2040324a:	fa842783          	lw	a5,-88(s0)
2040324e:	2b87a783          	lw	a5,696(a5)
20403252:	fa442583          	lw	a1,-92(s0)
20403256:	455d                	li	a0,23
20403258:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
2040325a:	0001                	nop
2040325c:	40f6                	lw	ra,92(sp)
2040325e:	42e6                	lw	t0,88(sp)
20403260:	4356                	lw	t1,84(sp)
20403262:	43c6                	lw	t2,80(sp)
20403264:	4436                	lw	s0,76(sp)
20403266:	4526                	lw	a0,72(sp)
20403268:	4596                	lw	a1,68(sp)
2040326a:	4606                	lw	a2,64(sp)
2040326c:	56f2                	lw	a3,60(sp)
2040326e:	5762                	lw	a4,56(sp)
20403270:	57d2                	lw	a5,52(sp)
20403272:	5842                	lw	a6,48(sp)
20403274:	58b2                	lw	a7,44(sp)
20403276:	5e22                	lw	t3,40(sp)
20403278:	5e92                	lw	t4,36(sp)
2040327a:	5f02                	lw	t5,32(sp)
2040327c:	4ff2                	lw	t6,28(sp)
2040327e:	6125                	addi	sp,sp,96
20403280:	30200073          	mret

20403284 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403284:	711d                	addi	sp,sp,-96
20403286:	ce86                	sw	ra,92(sp)
20403288:	cc96                	sw	t0,88(sp)
2040328a:	ca9a                	sw	t1,84(sp)
2040328c:	c89e                	sw	t2,80(sp)
2040328e:	c6a2                	sw	s0,76(sp)
20403290:	c4aa                	sw	a0,72(sp)
20403292:	c2ae                	sw	a1,68(sp)
20403294:	c0b2                	sw	a2,64(sp)
20403296:	de36                	sw	a3,60(sp)
20403298:	dc3a                	sw	a4,56(sp)
2040329a:	da3e                	sw	a5,52(sp)
2040329c:	d842                	sw	a6,48(sp)
2040329e:	d646                	sw	a7,44(sp)
204032a0:	d472                	sw	t3,40(sp)
204032a2:	d276                	sw	t4,36(sp)
204032a4:	d07a                	sw	t5,32(sp)
204032a6:	ce7e                	sw	t6,28(sp)
204032a8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032aa:	deeff0ef          	jal	ra,20402898 <__metal_myhart_id>
204032ae:	872a                	mv	a4,a0
204032b0:	070a                	slli	a4,a4,0x2
204032b2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204032b6:	97ba                	add	a5,a5,a4
204032b8:	439c                	lw	a5,0(a5)
204032ba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
204032be:	fac42783          	lw	a5,-84(s0)
204032c2:	c78d                	beqz	a5,204032ec <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032c4:	fac42503          	lw	a0,-84(s0)
204032c8:	d7aff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
204032cc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
204032d0:	fa842783          	lw	a5,-88(s0)
204032d4:	2d87a783          	lw	a5,728(a5)
204032d8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
204032dc:	fa842783          	lw	a5,-88(s0)
204032e0:	2d07a783          	lw	a5,720(a5)
204032e4:	fa442583          	lw	a1,-92(s0)
204032e8:	4561                	li	a0,24
204032ea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
204032ec:	0001                	nop
204032ee:	40f6                	lw	ra,92(sp)
204032f0:	42e6                	lw	t0,88(sp)
204032f2:	4356                	lw	t1,84(sp)
204032f4:	43c6                	lw	t2,80(sp)
204032f6:	4436                	lw	s0,76(sp)
204032f8:	4526                	lw	a0,72(sp)
204032fa:	4596                	lw	a1,68(sp)
204032fc:	4606                	lw	a2,64(sp)
204032fe:	56f2                	lw	a3,60(sp)
20403300:	5762                	lw	a4,56(sp)
20403302:	57d2                	lw	a5,52(sp)
20403304:	5842                	lw	a6,48(sp)
20403306:	58b2                	lw	a7,44(sp)
20403308:	5e22                	lw	t3,40(sp)
2040330a:	5e92                	lw	t4,36(sp)
2040330c:	5f02                	lw	t5,32(sp)
2040330e:	4ff2                	lw	t6,28(sp)
20403310:	6125                	addi	sp,sp,96
20403312:	30200073          	mret

20403316 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403316:	711d                	addi	sp,sp,-96
20403318:	ce86                	sw	ra,92(sp)
2040331a:	cc96                	sw	t0,88(sp)
2040331c:	ca9a                	sw	t1,84(sp)
2040331e:	c89e                	sw	t2,80(sp)
20403320:	c6a2                	sw	s0,76(sp)
20403322:	c4aa                	sw	a0,72(sp)
20403324:	c2ae                	sw	a1,68(sp)
20403326:	c0b2                	sw	a2,64(sp)
20403328:	de36                	sw	a3,60(sp)
2040332a:	dc3a                	sw	a4,56(sp)
2040332c:	da3e                	sw	a5,52(sp)
2040332e:	d842                	sw	a6,48(sp)
20403330:	d646                	sw	a7,44(sp)
20403332:	d472                	sw	t3,40(sp)
20403334:	d276                	sw	t4,36(sp)
20403336:	d07a                	sw	t5,32(sp)
20403338:	ce7e                	sw	t6,28(sp)
2040333a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040333c:	d5cff0ef          	jal	ra,20402898 <__metal_myhart_id>
20403340:	872a                	mv	a4,a0
20403342:	070a                	slli	a4,a4,0x2
20403344:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403348:	97ba                	add	a5,a5,a4
2040334a:	439c                	lw	a5,0(a5)
2040334c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20403350:	fac42783          	lw	a5,-84(s0)
20403354:	c78d                	beqz	a5,2040337e <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403356:	fac42503          	lw	a0,-84(s0)
2040335a:	ce8ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
2040335e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20403362:	fa842783          	lw	a5,-88(s0)
20403366:	2f07a783          	lw	a5,752(a5)
2040336a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
2040336e:	fa842783          	lw	a5,-88(s0)
20403372:	2e87a783          	lw	a5,744(a5)
20403376:	fa442583          	lw	a1,-92(s0)
2040337a:	4565                	li	a0,25
2040337c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
2040337e:	0001                	nop
20403380:	40f6                	lw	ra,92(sp)
20403382:	42e6                	lw	t0,88(sp)
20403384:	4356                	lw	t1,84(sp)
20403386:	43c6                	lw	t2,80(sp)
20403388:	4436                	lw	s0,76(sp)
2040338a:	4526                	lw	a0,72(sp)
2040338c:	4596                	lw	a1,68(sp)
2040338e:	4606                	lw	a2,64(sp)
20403390:	56f2                	lw	a3,60(sp)
20403392:	5762                	lw	a4,56(sp)
20403394:	57d2                	lw	a5,52(sp)
20403396:	5842                	lw	a6,48(sp)
20403398:	58b2                	lw	a7,44(sp)
2040339a:	5e22                	lw	t3,40(sp)
2040339c:	5e92                	lw	t4,36(sp)
2040339e:	5f02                	lw	t5,32(sp)
204033a0:	4ff2                	lw	t6,28(sp)
204033a2:	6125                	addi	sp,sp,96
204033a4:	30200073          	mret

204033a8 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
204033a8:	711d                	addi	sp,sp,-96
204033aa:	ce86                	sw	ra,92(sp)
204033ac:	cc96                	sw	t0,88(sp)
204033ae:	ca9a                	sw	t1,84(sp)
204033b0:	c89e                	sw	t2,80(sp)
204033b2:	c6a2                	sw	s0,76(sp)
204033b4:	c4aa                	sw	a0,72(sp)
204033b6:	c2ae                	sw	a1,68(sp)
204033b8:	c0b2                	sw	a2,64(sp)
204033ba:	de36                	sw	a3,60(sp)
204033bc:	dc3a                	sw	a4,56(sp)
204033be:	da3e                	sw	a5,52(sp)
204033c0:	d842                	sw	a6,48(sp)
204033c2:	d646                	sw	a7,44(sp)
204033c4:	d472                	sw	t3,40(sp)
204033c6:	d276                	sw	t4,36(sp)
204033c8:	d07a                	sw	t5,32(sp)
204033ca:	ce7e                	sw	t6,28(sp)
204033cc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204033ce:	ccaff0ef          	jal	ra,20402898 <__metal_myhart_id>
204033d2:	872a                	mv	a4,a0
204033d4:	070a                	slli	a4,a4,0x2
204033d6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204033da:	97ba                	add	a5,a5,a4
204033dc:	439c                	lw	a5,0(a5)
204033de:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
204033e2:	fac42783          	lw	a5,-84(s0)
204033e6:	c78d                	beqz	a5,20403410 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204033e8:	fac42503          	lw	a0,-84(s0)
204033ec:	c56ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
204033f0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
204033f4:	fa842783          	lw	a5,-88(s0)
204033f8:	3087a783          	lw	a5,776(a5)
204033fc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403400:	fa842783          	lw	a5,-88(s0)
20403404:	3007a783          	lw	a5,768(a5)
20403408:	fa442583          	lw	a1,-92(s0)
2040340c:	4569                	li	a0,26
2040340e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403410:	0001                	nop
20403412:	40f6                	lw	ra,92(sp)
20403414:	42e6                	lw	t0,88(sp)
20403416:	4356                	lw	t1,84(sp)
20403418:	43c6                	lw	t2,80(sp)
2040341a:	4436                	lw	s0,76(sp)
2040341c:	4526                	lw	a0,72(sp)
2040341e:	4596                	lw	a1,68(sp)
20403420:	4606                	lw	a2,64(sp)
20403422:	56f2                	lw	a3,60(sp)
20403424:	5762                	lw	a4,56(sp)
20403426:	57d2                	lw	a5,52(sp)
20403428:	5842                	lw	a6,48(sp)
2040342a:	58b2                	lw	a7,44(sp)
2040342c:	5e22                	lw	t3,40(sp)
2040342e:	5e92                	lw	t4,36(sp)
20403430:	5f02                	lw	t5,32(sp)
20403432:	4ff2                	lw	t6,28(sp)
20403434:	6125                	addi	sp,sp,96
20403436:	30200073          	mret

2040343a <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
2040343a:	711d                	addi	sp,sp,-96
2040343c:	ce86                	sw	ra,92(sp)
2040343e:	cc96                	sw	t0,88(sp)
20403440:	ca9a                	sw	t1,84(sp)
20403442:	c89e                	sw	t2,80(sp)
20403444:	c6a2                	sw	s0,76(sp)
20403446:	c4aa                	sw	a0,72(sp)
20403448:	c2ae                	sw	a1,68(sp)
2040344a:	c0b2                	sw	a2,64(sp)
2040344c:	de36                	sw	a3,60(sp)
2040344e:	dc3a                	sw	a4,56(sp)
20403450:	da3e                	sw	a5,52(sp)
20403452:	d842                	sw	a6,48(sp)
20403454:	d646                	sw	a7,44(sp)
20403456:	d472                	sw	t3,40(sp)
20403458:	d276                	sw	t4,36(sp)
2040345a:	d07a                	sw	t5,32(sp)
2040345c:	ce7e                	sw	t6,28(sp)
2040345e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403460:	c38ff0ef          	jal	ra,20402898 <__metal_myhart_id>
20403464:	872a                	mv	a4,a0
20403466:	070a                	slli	a4,a4,0x2
20403468:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040346c:	97ba                	add	a5,a5,a4
2040346e:	439c                	lw	a5,0(a5)
20403470:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20403474:	fac42783          	lw	a5,-84(s0)
20403478:	c78d                	beqz	a5,204034a2 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040347a:	fac42503          	lw	a0,-84(s0)
2040347e:	bc4ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403482:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403486:	fa842783          	lw	a5,-88(s0)
2040348a:	3207a783          	lw	a5,800(a5)
2040348e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403492:	fa842783          	lw	a5,-88(s0)
20403496:	3187a783          	lw	a5,792(a5)
2040349a:	fa442583          	lw	a1,-92(s0)
2040349e:	456d                	li	a0,27
204034a0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
204034a2:	0001                	nop
204034a4:	40f6                	lw	ra,92(sp)
204034a6:	42e6                	lw	t0,88(sp)
204034a8:	4356                	lw	t1,84(sp)
204034aa:	43c6                	lw	t2,80(sp)
204034ac:	4436                	lw	s0,76(sp)
204034ae:	4526                	lw	a0,72(sp)
204034b0:	4596                	lw	a1,68(sp)
204034b2:	4606                	lw	a2,64(sp)
204034b4:	56f2                	lw	a3,60(sp)
204034b6:	5762                	lw	a4,56(sp)
204034b8:	57d2                	lw	a5,52(sp)
204034ba:	5842                	lw	a6,48(sp)
204034bc:	58b2                	lw	a7,44(sp)
204034be:	5e22                	lw	t3,40(sp)
204034c0:	5e92                	lw	t4,36(sp)
204034c2:	5f02                	lw	t5,32(sp)
204034c4:	4ff2                	lw	t6,28(sp)
204034c6:	6125                	addi	sp,sp,96
204034c8:	30200073          	mret

204034cc <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
204034cc:	711d                	addi	sp,sp,-96
204034ce:	ce86                	sw	ra,92(sp)
204034d0:	cc96                	sw	t0,88(sp)
204034d2:	ca9a                	sw	t1,84(sp)
204034d4:	c89e                	sw	t2,80(sp)
204034d6:	c6a2                	sw	s0,76(sp)
204034d8:	c4aa                	sw	a0,72(sp)
204034da:	c2ae                	sw	a1,68(sp)
204034dc:	c0b2                	sw	a2,64(sp)
204034de:	de36                	sw	a3,60(sp)
204034e0:	dc3a                	sw	a4,56(sp)
204034e2:	da3e                	sw	a5,52(sp)
204034e4:	d842                	sw	a6,48(sp)
204034e6:	d646                	sw	a7,44(sp)
204034e8:	d472                	sw	t3,40(sp)
204034ea:	d276                	sw	t4,36(sp)
204034ec:	d07a                	sw	t5,32(sp)
204034ee:	ce7e                	sw	t6,28(sp)
204034f0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204034f2:	ba6ff0ef          	jal	ra,20402898 <__metal_myhart_id>
204034f6:	872a                	mv	a4,a0
204034f8:	070a                	slli	a4,a4,0x2
204034fa:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204034fe:	97ba                	add	a5,a5,a4
20403500:	439c                	lw	a5,0(a5)
20403502:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403506:	fac42783          	lw	a5,-84(s0)
2040350a:	c78d                	beqz	a5,20403534 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040350c:	fac42503          	lw	a0,-84(s0)
20403510:	b32ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403514:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403518:	fa842783          	lw	a5,-88(s0)
2040351c:	3387a783          	lw	a5,824(a5)
20403520:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403524:	fa842783          	lw	a5,-88(s0)
20403528:	3307a783          	lw	a5,816(a5)
2040352c:	fa442583          	lw	a1,-92(s0)
20403530:	4571                	li	a0,28
20403532:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403534:	0001                	nop
20403536:	40f6                	lw	ra,92(sp)
20403538:	42e6                	lw	t0,88(sp)
2040353a:	4356                	lw	t1,84(sp)
2040353c:	43c6                	lw	t2,80(sp)
2040353e:	4436                	lw	s0,76(sp)
20403540:	4526                	lw	a0,72(sp)
20403542:	4596                	lw	a1,68(sp)
20403544:	4606                	lw	a2,64(sp)
20403546:	56f2                	lw	a3,60(sp)
20403548:	5762                	lw	a4,56(sp)
2040354a:	57d2                	lw	a5,52(sp)
2040354c:	5842                	lw	a6,48(sp)
2040354e:	58b2                	lw	a7,44(sp)
20403550:	5e22                	lw	t3,40(sp)
20403552:	5e92                	lw	t4,36(sp)
20403554:	5f02                	lw	t5,32(sp)
20403556:	4ff2                	lw	t6,28(sp)
20403558:	6125                	addi	sp,sp,96
2040355a:	30200073          	mret

2040355e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
2040355e:	711d                	addi	sp,sp,-96
20403560:	ce86                	sw	ra,92(sp)
20403562:	cc96                	sw	t0,88(sp)
20403564:	ca9a                	sw	t1,84(sp)
20403566:	c89e                	sw	t2,80(sp)
20403568:	c6a2                	sw	s0,76(sp)
2040356a:	c4aa                	sw	a0,72(sp)
2040356c:	c2ae                	sw	a1,68(sp)
2040356e:	c0b2                	sw	a2,64(sp)
20403570:	de36                	sw	a3,60(sp)
20403572:	dc3a                	sw	a4,56(sp)
20403574:	da3e                	sw	a5,52(sp)
20403576:	d842                	sw	a6,48(sp)
20403578:	d646                	sw	a7,44(sp)
2040357a:	d472                	sw	t3,40(sp)
2040357c:	d276                	sw	t4,36(sp)
2040357e:	d07a                	sw	t5,32(sp)
20403580:	ce7e                	sw	t6,28(sp)
20403582:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403584:	b14ff0ef          	jal	ra,20402898 <__metal_myhart_id>
20403588:	872a                	mv	a4,a0
2040358a:	070a                	slli	a4,a4,0x2
2040358c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403590:	97ba                	add	a5,a5,a4
20403592:	439c                	lw	a5,0(a5)
20403594:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403598:	fac42783          	lw	a5,-84(s0)
2040359c:	c78d                	beqz	a5,204035c6 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040359e:	fac42503          	lw	a0,-84(s0)
204035a2:	aa0ff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
204035a6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204035aa:	fa842783          	lw	a5,-88(s0)
204035ae:	3507a783          	lw	a5,848(a5)
204035b2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204035b6:	fa842783          	lw	a5,-88(s0)
204035ba:	3487a783          	lw	a5,840(a5)
204035be:	fa442583          	lw	a1,-92(s0)
204035c2:	4575                	li	a0,29
204035c4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204035c6:	0001                	nop
204035c8:	40f6                	lw	ra,92(sp)
204035ca:	42e6                	lw	t0,88(sp)
204035cc:	4356                	lw	t1,84(sp)
204035ce:	43c6                	lw	t2,80(sp)
204035d0:	4436                	lw	s0,76(sp)
204035d2:	4526                	lw	a0,72(sp)
204035d4:	4596                	lw	a1,68(sp)
204035d6:	4606                	lw	a2,64(sp)
204035d8:	56f2                	lw	a3,60(sp)
204035da:	5762                	lw	a4,56(sp)
204035dc:	57d2                	lw	a5,52(sp)
204035de:	5842                	lw	a6,48(sp)
204035e0:	58b2                	lw	a7,44(sp)
204035e2:	5e22                	lw	t3,40(sp)
204035e4:	5e92                	lw	t4,36(sp)
204035e6:	5f02                	lw	t5,32(sp)
204035e8:	4ff2                	lw	t6,28(sp)
204035ea:	6125                	addi	sp,sp,96
204035ec:	30200073          	mret

204035f0 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204035f0:	711d                	addi	sp,sp,-96
204035f2:	ce86                	sw	ra,92(sp)
204035f4:	cc96                	sw	t0,88(sp)
204035f6:	ca9a                	sw	t1,84(sp)
204035f8:	c89e                	sw	t2,80(sp)
204035fa:	c6a2                	sw	s0,76(sp)
204035fc:	c4aa                	sw	a0,72(sp)
204035fe:	c2ae                	sw	a1,68(sp)
20403600:	c0b2                	sw	a2,64(sp)
20403602:	de36                	sw	a3,60(sp)
20403604:	dc3a                	sw	a4,56(sp)
20403606:	da3e                	sw	a5,52(sp)
20403608:	d842                	sw	a6,48(sp)
2040360a:	d646                	sw	a7,44(sp)
2040360c:	d472                	sw	t3,40(sp)
2040360e:	d276                	sw	t4,36(sp)
20403610:	d07a                	sw	t5,32(sp)
20403612:	ce7e                	sw	t6,28(sp)
20403614:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403616:	a82ff0ef          	jal	ra,20402898 <__metal_myhart_id>
2040361a:	872a                	mv	a4,a0
2040361c:	070a                	slli	a4,a4,0x2
2040361e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403622:	97ba                	add	a5,a5,a4
20403624:	439c                	lw	a5,0(a5)
20403626:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040362a:	fac42783          	lw	a5,-84(s0)
2040362e:	c78d                	beqz	a5,20403658 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403630:	fac42503          	lw	a0,-84(s0)
20403634:	a0eff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403638:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040363c:	fa842783          	lw	a5,-88(s0)
20403640:	3687a783          	lw	a5,872(a5)
20403644:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403648:	fa842783          	lw	a5,-88(s0)
2040364c:	3607a783          	lw	a5,864(a5)
20403650:	fa442583          	lw	a1,-92(s0)
20403654:	4579                	li	a0,30
20403656:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403658:	0001                	nop
2040365a:	40f6                	lw	ra,92(sp)
2040365c:	42e6                	lw	t0,88(sp)
2040365e:	4356                	lw	t1,84(sp)
20403660:	43c6                	lw	t2,80(sp)
20403662:	4436                	lw	s0,76(sp)
20403664:	4526                	lw	a0,72(sp)
20403666:	4596                	lw	a1,68(sp)
20403668:	4606                	lw	a2,64(sp)
2040366a:	56f2                	lw	a3,60(sp)
2040366c:	5762                	lw	a4,56(sp)
2040366e:	57d2                	lw	a5,52(sp)
20403670:	5842                	lw	a6,48(sp)
20403672:	58b2                	lw	a7,44(sp)
20403674:	5e22                	lw	t3,40(sp)
20403676:	5e92                	lw	t4,36(sp)
20403678:	5f02                	lw	t5,32(sp)
2040367a:	4ff2                	lw	t6,28(sp)
2040367c:	6125                	addi	sp,sp,96
2040367e:	30200073          	mret

20403682 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403682:	711d                	addi	sp,sp,-96
20403684:	ce86                	sw	ra,92(sp)
20403686:	cc96                	sw	t0,88(sp)
20403688:	ca9a                	sw	t1,84(sp)
2040368a:	c89e                	sw	t2,80(sp)
2040368c:	c6a2                	sw	s0,76(sp)
2040368e:	c4aa                	sw	a0,72(sp)
20403690:	c2ae                	sw	a1,68(sp)
20403692:	c0b2                	sw	a2,64(sp)
20403694:	de36                	sw	a3,60(sp)
20403696:	dc3a                	sw	a4,56(sp)
20403698:	da3e                	sw	a5,52(sp)
2040369a:	d842                	sw	a6,48(sp)
2040369c:	d646                	sw	a7,44(sp)
2040369e:	d472                	sw	t3,40(sp)
204036a0:	d276                	sw	t4,36(sp)
204036a2:	d07a                	sw	t5,32(sp)
204036a4:	ce7e                	sw	t6,28(sp)
204036a6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204036a8:	9f0ff0ef          	jal	ra,20402898 <__metal_myhart_id>
204036ac:	872a                	mv	a4,a0
204036ae:	070a                	slli	a4,a4,0x2
204036b0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204036b4:	97ba                	add	a5,a5,a4
204036b6:	439c                	lw	a5,0(a5)
204036b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204036bc:	fac42783          	lw	a5,-84(s0)
204036c0:	c78d                	beqz	a5,204036ea <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204036c2:	fac42503          	lw	a0,-84(s0)
204036c6:	97cff0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
204036ca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204036ce:	fa842783          	lw	a5,-88(s0)
204036d2:	3807a783          	lw	a5,896(a5)
204036d6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204036da:	fa842783          	lw	a5,-88(s0)
204036de:	3787a783          	lw	a5,888(a5)
204036e2:	fa442583          	lw	a1,-92(s0)
204036e6:	457d                	li	a0,31
204036e8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204036ea:	0001                	nop
204036ec:	40f6                	lw	ra,92(sp)
204036ee:	42e6                	lw	t0,88(sp)
204036f0:	4356                	lw	t1,84(sp)
204036f2:	43c6                	lw	t2,80(sp)
204036f4:	4436                	lw	s0,76(sp)
204036f6:	4526                	lw	a0,72(sp)
204036f8:	4596                	lw	a1,68(sp)
204036fa:	4606                	lw	a2,64(sp)
204036fc:	56f2                	lw	a3,60(sp)
204036fe:	5762                	lw	a4,56(sp)
20403700:	57d2                	lw	a5,52(sp)
20403702:	5842                	lw	a6,48(sp)
20403704:	58b2                	lw	a7,44(sp)
20403706:	5e22                	lw	t3,40(sp)
20403708:	5e92                	lw	t4,36(sp)
2040370a:	5f02                	lw	t5,32(sp)
2040370c:	4ff2                	lw	t6,28(sp)
2040370e:	6125                	addi	sp,sp,96
20403710:	30200073          	mret

20403714 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403714:	1101                	addi	sp,sp,-32
20403716:	ce22                	sw	s0,28(sp)
20403718:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040371a:	305027f3          	csrr	a5,mtvec
2040371e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403722:	fec42783          	lw	a5,-20(s0)
20403726:	03f7f793          	andi	a5,a5,63
2040372a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040372e:	fec42703          	lw	a4,-20(s0)
20403732:	4789                	li	a5,2
20403734:	00f70d63          	beq	a4,a5,2040374e <__metal_controller_interrupt_vector_mode+0x3a>
20403738:	fec42703          	lw	a4,-20(s0)
2040373c:	478d                	li	a5,3
2040373e:	00f70a63          	beq	a4,a5,20403752 <__metal_controller_interrupt_vector_mode+0x3e>
20403742:	fec42703          	lw	a4,-20(s0)
20403746:	4785                	li	a5,1
20403748:	00f70763          	beq	a4,a5,20403756 <__metal_controller_interrupt_vector_mode+0x42>
2040374c:	a039                	j	2040375a <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040374e:	478d                	li	a5,3
20403750:	a031                	j	2040375c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403752:	4791                	li	a5,4
20403754:	a021                	j	2040375c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403756:	4785                	li	a5,1
20403758:	a011                	j	2040375c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040375a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040375c:	853e                	mv	a0,a5
2040375e:	4472                	lw	s0,28(sp)
20403760:	6105                	addi	sp,sp,32
20403762:	8082                	ret

20403764 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403764:	7179                	addi	sp,sp,-48
20403766:	d622                	sw	s0,44(sp)
20403768:	1800                	addi	s0,sp,48
2040376a:	fca42e23          	sw	a0,-36(s0)
2040376e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403772:	305027f3          	csrr	a5,mtvec
20403776:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040377a:	fec42783          	lw	a5,-20(s0)
2040377e:	fc07f793          	andi	a5,a5,-64
20403782:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403786:	fd842783          	lw	a5,-40(s0)
2040378a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040378e:	fdc42703          	lw	a4,-36(s0)
20403792:	4791                	li	a5,4
20403794:	06e7e063          	bltu	a5,a4,204037f4 <__metal_controller_interrupt_vector+0x90>
20403798:	fdc42783          	lw	a5,-36(s0)
2040379c:	00279713          	slli	a4,a5,0x2
204037a0:	204067b7          	lui	a5,0x20406
204037a4:	8cc78793          	addi	a5,a5,-1844 # 204058cc <__metal_driver_vtable_riscv_clint0+0x4c>
204037a8:	97ba                	add	a5,a5,a4
204037aa:	439c                	lw	a5,0(a5)
204037ac:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204037ae:	fe842783          	lw	a5,-24(s0)
204037b2:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204037b6:	fec42783          	lw	a5,-20(s0)
204037ba:	0027e793          	ori	a5,a5,2
204037be:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204037c2:	a80d                	j	204037f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204037c4:	fe842783          	lw	a5,-24(s0)
204037c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204037cc:	fec42783          	lw	a5,-20(s0)
204037d0:	0037e793          	ori	a5,a5,3
204037d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204037d8:	a831                	j	204037f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204037da:	fe842783          	lw	a5,-24(s0)
204037de:	0017e793          	ori	a5,a5,1
204037e2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204037e6:	a039                	j	204037f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204037e8:	fe842783          	lw	a5,-24(s0)
204037ec:	9bf1                	andi	a5,a5,-4
204037ee:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204037f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204037f4:	0001                	nop
204037f6:	5432                	lw	s0,44(sp)
204037f8:	6145                	addi	sp,sp,48
204037fa:	8082                	ret

204037fc <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204037fc:	1101                	addi	sp,sp,-32
204037fe:	ce22                	sw	s0,28(sp)
20403800:	1000                	addi	s0,sp,32
20403802:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403806:	fec42783          	lw	a5,-20(s0)
2040380a:	17f5                	addi	a5,a5,-3
2040380c:	4771                	li	a4,28
2040380e:	00f76d63          	bltu	a4,a5,20403828 <__metal_valid_interrupt_id+0x2c>
20403812:	00279713          	slli	a4,a5,0x2
20403816:	204067b7          	lui	a5,0x20406
2040381a:	8e078793          	addi	a5,a5,-1824 # 204058e0 <__metal_driver_vtable_riscv_clint0+0x60>
2040381e:	97ba                	add	a5,a5,a4
20403820:	439c                	lw	a5,0(a5)
20403822:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403824:	4785                	li	a5,1
20403826:	a019                	j	2040382c <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403828:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040382a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040382c:	853e                	mv	a0,a5
2040382e:	4472                	lw	s0,28(sp)
20403830:	6105                	addi	sp,sp,32
20403832:	8082                	ret

20403834 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403834:	7179                	addi	sp,sp,-48
20403836:	d606                	sw	ra,44(sp)
20403838:	d422                	sw	s0,40(sp)
2040383a:	1800                	addi	s0,sp,48
2040383c:	fca42e23          	sw	a0,-36(s0)
20403840:	fcb42c23          	sw	a1,-40(s0)
20403844:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403848:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040384c:	fdc42783          	lw	a5,-36(s0)
20403850:	e399                	bnez	a5,20403856 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403852:	57fd                	li	a5,-1
20403854:	a849                	j	204038e6 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403856:	fd842703          	lw	a4,-40(s0)
2040385a:	47fd                	li	a5,31
2040385c:	08e7e063          	bltu	a5,a4,204038dc <__metal_local_interrupt_enable+0xa8>
20403860:	fd842783          	lw	a5,-40(s0)
20403864:	00279713          	slli	a4,a5,0x2
20403868:	204067b7          	lui	a5,0x20406
2040386c:	95478793          	addi	a5,a5,-1708 # 20405954 <__metal_driver_vtable_riscv_clint0+0xd4>
20403870:	97ba                	add	a5,a5,a4
20403872:	439c                	lw	a5,0(a5)
20403874:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403876:	fd442783          	lw	a5,-44(s0)
2040387a:	c781                	beqz	a5,20403882 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040387c:	836ff0ef          	jal	ra,204028b2 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403880:	a08d                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403882:	848ff0ef          	jal	ra,204028ca <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403886:	a8b1                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403888:	fd442783          	lw	a5,-44(s0)
2040388c:	c781                	beqz	a5,20403894 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040388e:	854ff0ef          	jal	ra,204028e2 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403892:	a881                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403894:	866ff0ef          	jal	ra,204028fa <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403898:	a0a9                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040389a:	fd442783          	lw	a5,-44(s0)
2040389e:	c781                	beqz	a5,204038a6 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204038a0:	872ff0ef          	jal	ra,20402912 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204038a4:	a83d                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204038a6:	886ff0ef          	jal	ra,2040292c <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204038aa:	a825                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204038ac:	fd442783          	lw	a5,-44(s0)
204038b0:	c781                	beqz	a5,204038b8 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204038b2:	894ff0ef          	jal	ra,20402946 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204038b6:	a035                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204038b8:	8aaff0ef          	jal	ra,20402962 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204038bc:	a01d                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204038be:	fd442783          	lw	a5,-44(s0)
204038c2:	c799                	beqz	a5,204038d0 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204038c4:	fd842783          	lw	a5,-40(s0)
204038c8:	853e                	mv	a0,a5
204038ca:	8b4ff0ef          	jal	ra,2040297e <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204038ce:	a811                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204038d0:	fd842783          	lw	a5,-40(s0)
204038d4:	853e                	mv	a0,a5
204038d6:	8d4ff0ef          	jal	ra,204029aa <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204038da:	a021                	j	204038e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204038dc:	57fd                	li	a5,-1
204038de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204038e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204038e6:	853e                	mv	a0,a5
204038e8:	50b2                	lw	ra,44(sp)
204038ea:	5422                	lw	s0,40(sp)
204038ec:	6145                	addi	sp,sp,48
204038ee:	8082                	ret

204038f0 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204038f0:	7179                	addi	sp,sp,-48
204038f2:	d622                	sw	s0,44(sp)
204038f4:	1800                	addi	s0,sp,48
204038f6:	fca42e23          	sw	a0,-36(s0)
204038fa:	fcb42c23          	sw	a1,-40(s0)
204038fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403902:	fdc42783          	lw	a5,-36(s0)
20403906:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040390a:	fd842703          	lw	a4,-40(s0)
2040390e:	47ad                	li	a5,11
20403910:	02e7c263          	blt	a5,a4,20403934 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403914:	fd442783          	lw	a5,-44(s0)
20403918:	cf91                	beqz	a5,20403934 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040391a:	fec42703          	lw	a4,-20(s0)
2040391e:	fd842783          	lw	a5,-40(s0)
20403922:	0e078793          	addi	a5,a5,224
20403926:	078a                	slli	a5,a5,0x2
20403928:	97ba                	add	a5,a5,a4
2040392a:	fd442703          	lw	a4,-44(s0)
2040392e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403930:	4781                	li	a5,0
20403932:	a011                	j	20403936 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403934:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403936:	853e                	mv	a0,a5
20403938:	5432                	lw	s0,44(sp)
2040393a:	6145                	addi	sp,sp,48
2040393c:	8082                	ret

2040393e <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040393e:	7139                	addi	sp,sp,-64
20403940:	de06                	sw	ra,60(sp)
20403942:	dc22                	sw	s0,56(sp)
20403944:	0080                	addi	s0,sp,64
20403946:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040394a:	fcc42783          	lw	a5,-52(s0)
2040394e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403952:	fe442783          	lw	a5,-28(s0)
20403956:	43dc                	lw	a5,4(a5)
20403958:	10079d63          	bnez	a5,20403a72 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040395c:	57fd                	li	a5,-1
2040395e:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403962:	57fd                	li	a5,-1
20403964:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403968:	301027f3          	csrr	a5,misa
2040396c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403970:	fe042703          	lw	a4,-32(s0)
20403974:	6789                	lui	a5,0x2
20403976:	8ff9                	and	a5,a5,a4
20403978:	e799                	bnez	a5,20403986 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040397a:	fe042703          	lw	a4,-32(s0)
2040397e:	000407b7          	lui	a5,0x40
20403982:	8ff9                	and	a5,a5,a4
20403984:	c799                	beqz	a5,20403992 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403986:	57fd                	li	a5,-1
20403988:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040398c:	57fd                	li	a5,-1
2040398e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403992:	fe042703          	lw	a4,-32(s0)
20403996:	000407b7          	lui	a5,0x40
2040399a:	8ff9                	and	a5,a5,a4
2040399c:	c781                	beqz	a5,204039a4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040399e:	57fd                	li	a5,-1
204039a0:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204039a4:	fe042623          	sw	zero,-20(s0)
204039a8:	a0b9                	j	204039f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204039aa:	fe442683          	lw	a3,-28(s0)
204039ae:	fec42703          	lw	a4,-20(s0)
204039b2:	87ba                	mv	a5,a4
204039b4:	0786                	slli	a5,a5,0x1
204039b6:	97ba                	add	a5,a5,a4
204039b8:	078e                	slli	a5,a5,0x3
204039ba:	97b6                	add	a5,a5,a3
204039bc:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204039c0:	fe442683          	lw	a3,-28(s0)
204039c4:	fec42703          	lw	a4,-20(s0)
204039c8:	87ba                	mv	a5,a4
204039ca:	0786                	slli	a5,a5,0x1
204039cc:	97ba                	add	a5,a5,a4
204039ce:	078e                	slli	a5,a5,0x3
204039d0:	97b6                	add	a5,a5,a3
204039d2:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204039d6:	fe442683          	lw	a3,-28(s0)
204039da:	fec42703          	lw	a4,-20(s0)
204039de:	87ba                	mv	a5,a4
204039e0:	0786                	slli	a5,a5,0x1
204039e2:	97ba                	add	a5,a5,a4
204039e4:	078e                	slli	a5,a5,0x3
204039e6:	97b6                	add	a5,a5,a3
204039e8:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204039ec:	fec42783          	lw	a5,-20(s0)
204039f0:	0785                	addi	a5,a5,1
204039f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204039f6:	fec42703          	lw	a4,-20(s0)
204039fa:	47fd                	li	a5,31
204039fc:	fae7d7e3          	bge	a5,a4,204039aa <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403a00:	fe042423          	sw	zero,-24(s0)
20403a04:	a01d                	j	20403a2a <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403a06:	fe442703          	lw	a4,-28(s0)
20403a0a:	fe842783          	lw	a5,-24(s0)
20403a0e:	0e078793          	addi	a5,a5,224
20403a12:	078a                	slli	a5,a5,0x2
20403a14:	97ba                	add	a5,a5,a4
20403a16:	20403737          	lui	a4,0x20403
20403a1a:	9d670713          	addi	a4,a4,-1578 # 204029d6 <__metal_default_exception_handler>
20403a1e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403a20:	fe842783          	lw	a5,-24(s0)
20403a24:	0785                	addi	a5,a5,1
20403a26:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
20403a2a:	fe842703          	lw	a4,-24(s0)
20403a2e:	47ad                	li	a5,11
20403a30:	fce7dbe3          	bge	a5,a4,20403a06 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403a34:	204037b7          	lui	a5,0x20403
20403a38:	c8078593          	addi	a1,a5,-896 # 20402c80 <__metal_exception_handler>
20403a3c:	4501                	li	a0,0
20403a3e:	331d                	jal	20403764 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403a40:	301027f3          	csrr	a5,misa
20403a44:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403a48:	fdc42703          	lw	a4,-36(s0)
20403a4c:	67c1                	lui	a5,0x10
20403a4e:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403a52:	8ff9                	and	a5,a5,a4
20403a54:	cb99                	beqz	a5,20403a6a <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403a56:	300027f3          	csrr	a5,mstatus
20403a5a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20403a5e:	fdc42703          	lw	a4,-36(s0)
20403a62:	6789                	lui	a5,0x2
20403a64:	8fd9                	or	a5,a5,a4
20403a66:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
20403a6a:	fe442783          	lw	a5,-28(s0)
20403a6e:	4705                	li	a4,1
20403a70:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403a72:	0001                	nop
20403a74:	50f2                	lw	ra,60(sp)
20403a76:	5462                	lw	s0,56(sp)
20403a78:	6121                	addi	sp,sp,64
20403a7a:	8082                	ret

20403a7c <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20403a7c:	7179                	addi	sp,sp,-48
20403a7e:	d606                	sw	ra,44(sp)
20403a80:	d422                	sw	s0,40(sp)
20403a82:	1800                	addi	s0,sp,48
20403a84:	fca42e23          	sw	a0,-36(s0)
20403a88:	fcb42c23          	sw	a1,-40(s0)
20403a8c:	fcc42a23          	sw	a2,-44(s0)
20403a90:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403a94:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403a98:	fdc42783          	lw	a5,-36(s0)
20403a9c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403aa0:	fd842503          	lw	a0,-40(s0)
20403aa4:	3ba1                	jal	204037fc <__metal_valid_interrupt_id>
20403aa6:	87aa                	mv	a5,a0
20403aa8:	e399                	bnez	a5,20403aae <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
20403aaa:	57d5                	li	a5,-11
20403aac:	aa11                	j	20403bc0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403aae:	fd442783          	lw	a5,-44(s0)
20403ab2:	cf85                	beqz	a5,20403aea <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403ab4:	fe842683          	lw	a3,-24(s0)
20403ab8:	fd842703          	lw	a4,-40(s0)
20403abc:	87ba                	mv	a5,a4
20403abe:	0786                	slli	a5,a5,0x1
20403ac0:	97ba                	add	a5,a5,a4
20403ac2:	078e                	slli	a5,a5,0x3
20403ac4:	97b6                	add	a5,a5,a3
20403ac6:	fd442703          	lw	a4,-44(s0)
20403aca:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403ace:	fe842683          	lw	a3,-24(s0)
20403ad2:	fd842703          	lw	a4,-40(s0)
20403ad6:	87ba                	mv	a5,a4
20403ad8:	0786                	slli	a5,a5,0x1
20403ada:	97ba                	add	a5,a5,a4
20403adc:	078e                	slli	a5,a5,0x3
20403ade:	97b6                	add	a5,a5,a3
20403ae0:	fd042703          	lw	a4,-48(s0)
20403ae4:	08e7ac23          	sw	a4,152(a5)
20403ae8:	a8d1                	j	20403bbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
20403aea:	fd842783          	lw	a5,-40(s0)
20403aee:	17f5                	addi	a5,a5,-3
20403af0:	4771                	li	a4,28
20403af2:	0cf76263          	bltu	a4,a5,20403bb6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403af6:	00279713          	slli	a4,a5,0x2
20403afa:	204067b7          	lui	a5,0x20406
20403afe:	9d478793          	addi	a5,a5,-1580 # 204059d4 <__metal_driver_vtable_riscv_clint0+0x154>
20403b02:	97ba                	add	a5,a5,a4
20403b04:	439c                	lw	a5,0(a5)
20403b06:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403b08:	fe842683          	lw	a3,-24(s0)
20403b0c:	fd842703          	lw	a4,-40(s0)
20403b10:	87ba                	mv	a5,a4
20403b12:	0786                	slli	a5,a5,0x1
20403b14:	97ba                	add	a5,a5,a4
20403b16:	078e                	slli	a5,a5,0x3
20403b18:	97b6                	add	a5,a5,a3
20403b1a:	20403737          	lui	a4,0x20403
20403b1e:	ac270713          	addi	a4,a4,-1342 # 20402ac2 <__metal_default_sw_handler>
20403b22:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403b26:	fe842683          	lw	a3,-24(s0)
20403b2a:	fd842703          	lw	a4,-40(s0)
20403b2e:	87ba                	mv	a5,a4
20403b30:	0786                	slli	a5,a5,0x1
20403b32:	97ba                	add	a5,a5,a4
20403b34:	078e                	slli	a5,a5,0x3
20403b36:	97b6                	add	a5,a5,a3
20403b38:	fd042703          	lw	a4,-48(s0)
20403b3c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403b40:	a8b5                	j	20403bbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403b42:	fe842683          	lw	a3,-24(s0)
20403b46:	fd842703          	lw	a4,-40(s0)
20403b4a:	87ba                	mv	a5,a4
20403b4c:	0786                	slli	a5,a5,0x1
20403b4e:	97ba                	add	a5,a5,a4
20403b50:	078e                	slli	a5,a5,0x3
20403b52:	97b6                	add	a5,a5,a3
20403b54:	20403737          	lui	a4,0x20403
20403b58:	bb470713          	addi	a4,a4,-1100 # 20402bb4 <__metal_default_timer_handler>
20403b5c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403b60:	fe842683          	lw	a3,-24(s0)
20403b64:	fd842703          	lw	a4,-40(s0)
20403b68:	87ba                	mv	a5,a4
20403b6a:	0786                	slli	a5,a5,0x1
20403b6c:	97ba                	add	a5,a5,a4
20403b6e:	078e                	slli	a5,a5,0x3
20403b70:	97b6                	add	a5,a5,a3
20403b72:	fd042703          	lw	a4,-48(s0)
20403b76:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
20403b7a:	a089                	j	20403bbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20403b7c:	fe842683          	lw	a3,-24(s0)
20403b80:	fd842703          	lw	a4,-40(s0)
20403b84:	87ba                	mv	a5,a4
20403b86:	0786                	slli	a5,a5,0x1
20403b88:	97ba                	add	a5,a5,a4
20403b8a:	078e                	slli	a5,a5,0x3
20403b8c:	97b6                	add	a5,a5,a3
20403b8e:	20403737          	lui	a4,0x20403
20403b92:	9ee70713          	addi	a4,a4,-1554 # 204029ee <__metal_default_interrupt_handler>
20403b96:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403b9a:	fe842683          	lw	a3,-24(s0)
20403b9e:	fd842703          	lw	a4,-40(s0)
20403ba2:	87ba                	mv	a5,a4
20403ba4:	0786                	slli	a5,a5,0x1
20403ba6:	97ba                	add	a5,a5,a4
20403ba8:	078e                	slli	a5,a5,0x3
20403baa:	97b6                	add	a5,a5,a3
20403bac:	fd042703          	lw	a4,-48(s0)
20403bb0:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403bb4:	a021                	j	20403bbc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403bb6:	57d1                	li	a5,-12
20403bb8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403bbc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403bc0:	853e                	mv	a0,a5
20403bc2:	50b2                	lw	ra,44(sp)
20403bc4:	5422                	lw	s0,40(sp)
20403bc6:	6145                	addi	sp,sp,48
20403bc8:	8082                	ret

20403bca <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403bca:	1101                	addi	sp,sp,-32
20403bcc:	ce06                	sw	ra,28(sp)
20403bce:	cc22                	sw	s0,24(sp)
20403bd0:	1000                	addi	s0,sp,32
20403bd2:	fea42623          	sw	a0,-20(s0)
20403bd6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403bda:	fe842783          	lw	a5,-24(s0)
20403bde:	4605                	li	a2,1
20403be0:	85be                	mv	a1,a5
20403be2:	fec42503          	lw	a0,-20(s0)
20403be6:	31b9                	jal	20403834 <__metal_local_interrupt_enable>
20403be8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403bea:	853e                	mv	a0,a5
20403bec:	40f2                	lw	ra,28(sp)
20403bee:	4462                	lw	s0,24(sp)
20403bf0:	6105                	addi	sp,sp,32
20403bf2:	8082                	ret

20403bf4 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403bf4:	1101                	addi	sp,sp,-32
20403bf6:	ce06                	sw	ra,28(sp)
20403bf8:	cc22                	sw	s0,24(sp)
20403bfa:	1000                	addi	s0,sp,32
20403bfc:	fea42623          	sw	a0,-20(s0)
20403c00:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403c04:	fe842783          	lw	a5,-24(s0)
20403c08:	4601                	li	a2,0
20403c0a:	85be                	mv	a1,a5
20403c0c:	fec42503          	lw	a0,-20(s0)
20403c10:	3115                	jal	20403834 <__metal_local_interrupt_enable>
20403c12:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403c14:	853e                	mv	a0,a5
20403c16:	40f2                	lw	ra,28(sp)
20403c18:	4462                	lw	s0,24(sp)
20403c1a:	6105                	addi	sp,sp,32
20403c1c:	8082                	ret

20403c1e <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403c1e:	1101                	addi	sp,sp,-32
20403c20:	ce06                	sw	ra,28(sp)
20403c22:	cc22                	sw	s0,24(sp)
20403c24:	1000                	addi	s0,sp,32
20403c26:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403c2a:	aebff0ef          	jal	ra,20403714 <__metal_controller_interrupt_vector_mode>
20403c2e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403c30:	853e                	mv	a0,a5
20403c32:	40f2                	lw	ra,28(sp)
20403c34:	4462                	lw	s0,24(sp)
20403c36:	6105                	addi	sp,sp,32
20403c38:	8082                	ret

20403c3a <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403c3a:	7179                	addi	sp,sp,-48
20403c3c:	d606                	sw	ra,44(sp)
20403c3e:	d422                	sw	s0,40(sp)
20403c40:	1800                	addi	s0,sp,48
20403c42:	fca42e23          	sw	a0,-36(s0)
20403c46:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403c4a:	fdc42783          	lw	a5,-36(s0)
20403c4e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403c52:	fd842783          	lw	a5,-40(s0)
20403c56:	eb99                	bnez	a5,20403c6c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403c58:	204037b7          	lui	a5,0x20403
20403c5c:	c8078593          	addi	a1,a5,-896 # 20402c80 <__metal_exception_handler>
20403c60:	fd842503          	lw	a0,-40(s0)
20403c64:	b01ff0ef          	jal	ra,20403764 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403c68:	4781                	li	a5,0
20403c6a:	a00d                	j	20403c8c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403c6c:	fd842703          	lw	a4,-40(s0)
20403c70:	4785                	li	a5,1
20403c72:	00f71c63          	bne	a4,a5,20403c8a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403c76:	204057b7          	lui	a5,0x20405
20403c7a:	58078593          	addi	a1,a5,1408 # 20405580 <__metal_vector_table>
20403c7e:	fd842503          	lw	a0,-40(s0)
20403c82:	ae3ff0ef          	jal	ra,20403764 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403c86:	4781                	li	a5,0
20403c88:	a011                	j	20403c8c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403c8a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403c8c:	853e                	mv	a0,a5
20403c8e:	50b2                	lw	ra,44(sp)
20403c90:	5422                	lw	s0,40(sp)
20403c92:	6145                	addi	sp,sp,48
20403c94:	8082                	ret

20403c96 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403c96:	1101                	addi	sp,sp,-32
20403c98:	ce22                	sw	s0,28(sp)
20403c9a:	1000                	addi	s0,sp,32
20403c9c:	fea42623          	sw	a0,-20(s0)
20403ca0:	feb42423          	sw	a1,-24(s0)
20403ca4:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403ca8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403caa:	853e                	mv	a0,a5
20403cac:	4472                	lw	s0,28(sp)
20403cae:	6105                	addi	sp,sp,32
20403cb0:	8082                	ret

20403cb2 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403cb2:	7139                	addi	sp,sp,-64
20403cb4:	de22                	sw	s0,60(sp)
20403cb6:	0080                	addi	s0,sp,64
20403cb8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403cbc:	4301                	li	t1,0
20403cbe:	4381                	li	t2,0
20403cc0:	fe642423          	sw	t1,-24(s0)
20403cc4:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403cc8:	b8002573          	csrr	a0,mcycleh
20403ccc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403cd0:	b0002573          	csrr	a0,mcycle
20403cd4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403cd8:	b8002573          	csrr	a0,mcycleh
20403cdc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403ce0:	fe442883          	lw	a7,-28(s0)
20403ce4:	fdc42503          	lw	a0,-36(s0)
20403ce8:	02a89563          	bne	a7,a0,20403d12 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403cec:	fe442503          	lw	a0,-28(s0)
20403cf0:	85aa                	mv	a1,a0
20403cf2:	4601                	li	a2,0
20403cf4:	00059813          	slli	a6,a1,0x0
20403cf8:	4781                	li	a5,0
20403cfa:	fe042603          	lw	a2,-32(s0)
20403cfe:	86b2                	mv	a3,a2
20403d00:	4701                	li	a4,0
20403d02:	00d7e633          	or	a2,a5,a3
20403d06:	fec42423          	sw	a2,-24(s0)
20403d0a:	00e867b3          	or	a5,a6,a4
20403d0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403d12:	fe842783          	lw	a5,-24(s0)
20403d16:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403d1a:	853e                	mv	a0,a5
20403d1c:	85c2                	mv	a1,a6
20403d1e:	5472                	lw	s0,60(sp)
20403d20:	6121                	addi	sp,sp,64
20403d22:	8082                	ret

20403d24 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403d24:	7179                	addi	sp,sp,-48
20403d26:	d606                	sw	ra,44(sp)
20403d28:	d422                	sw	s0,40(sp)
20403d2a:	d24a                	sw	s2,36(sp)
20403d2c:	d04e                	sw	s3,32(sp)
20403d2e:	1800                	addi	s0,sp,48
20403d30:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403d34:	fdc42783          	lw	a5,-36(s0)
20403d38:	e781                	bnez	a5,20403d40 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403d3a:	4901                	li	s2,0
20403d3c:	4981                	li	s3,0
20403d3e:	a821                	j	20403d56 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403d40:	fdc42503          	lw	a0,-36(s0)
20403d44:	ad5fe0ef          	jal	ra,20402818 <__metal_driver_cpu_timebase>
20403d48:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403d4c:	fec42783          	lw	a5,-20(s0)
20403d50:	893e                	mv	s2,a5
20403d52:	87fd                	srai	a5,a5,0x1f
20403d54:	89be                	mv	s3,a5
20403d56:	87ca                	mv	a5,s2
20403d58:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403d5a:	853e                	mv	a0,a5
20403d5c:	85c2                	mv	a1,a6
20403d5e:	50b2                	lw	ra,44(sp)
20403d60:	5422                	lw	s0,40(sp)
20403d62:	5912                	lw	s2,36(sp)
20403d64:	5982                	lw	s3,32(sp)
20403d66:	6145                	addi	sp,sp,48
20403d68:	8082                	ret

20403d6a <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403d6a:	7179                	addi	sp,sp,-48
20403d6c:	d606                	sw	ra,44(sp)
20403d6e:	d422                	sw	s0,40(sp)
20403d70:	1800                	addi	s0,sp,48
20403d72:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403d76:	4781                	li	a5,0
20403d78:	4801                	li	a6,0
20403d7a:	fef42023          	sw	a5,-32(s0)
20403d7e:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d82:	fdc42503          	lw	a0,-36(s0)
20403d86:	abdfe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403d8a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403d8e:	fec42783          	lw	a5,-20(s0)
20403d92:	c78d                	beqz	a5,20403dbc <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403d94:	fec42783          	lw	a5,-20(s0)
20403d98:	13c7a783          	lw	a5,316(a5)
20403d9c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403da0:	fe842783          	lw	a5,-24(s0)
20403da4:	cf81                	beqz	a5,20403dbc <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403da6:	fe842783          	lw	a5,-24(s0)
20403daa:	439c                	lw	a5,0(a5)
20403dac:	43f8                	lw	a4,68(a5)
20403dae:	fe040793          	addi	a5,s0,-32
20403db2:	863e                	mv	a2,a5
20403db4:	4585                	li	a1,1
20403db6:	fe842503          	lw	a0,-24(s0)
20403dba:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403dbc:	fe042783          	lw	a5,-32(s0)
20403dc0:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403dc4:	853e                	mv	a0,a5
20403dc6:	85c2                	mv	a1,a6
20403dc8:	50b2                	lw	ra,44(sp)
20403dca:	5422                	lw	s0,40(sp)
20403dcc:	6145                	addi	sp,sp,48
20403dce:	8082                	ret

20403dd0 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403dd0:	7179                	addi	sp,sp,-48
20403dd2:	d606                	sw	ra,44(sp)
20403dd4:	d422                	sw	s0,40(sp)
20403dd6:	d226                	sw	s1,36(sp)
20403dd8:	1800                	addi	s0,sp,48
20403dda:	fca42e23          	sw	a0,-36(s0)
20403dde:	fcb42823          	sw	a1,-48(s0)
20403de2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403de6:	57fd                	li	a5,-1
20403de8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403dec:	fdc42503          	lw	a0,-36(s0)
20403df0:	a53fe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403df4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403df8:	fe842783          	lw	a5,-24(s0)
20403dfc:	cf8d                	beqz	a5,20403e36 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403dfe:	fe842783          	lw	a5,-24(s0)
20403e02:	13c7a783          	lw	a5,316(a5)
20403e06:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403e0a:	fe442783          	lw	a5,-28(s0)
20403e0e:	c785                	beqz	a5,20403e36 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403e10:	fe442783          	lw	a5,-28(s0)
20403e14:	439c                	lw	a5,0(a5)
20403e16:	47a4                	lw	s1,72(a5)
20403e18:	fdc42503          	lw	a0,-36(s0)
20403e1c:	9d9fe0ef          	jal	ra,204027f4 <__metal_driver_cpu_hartid>
20403e20:	87aa                	mv	a5,a0
20403e22:	fd042603          	lw	a2,-48(s0)
20403e26:	fd442683          	lw	a3,-44(s0)
20403e2a:	85be                	mv	a1,a5
20403e2c:	fe442503          	lw	a0,-28(s0)
20403e30:	9482                	jalr	s1
20403e32:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403e36:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403e3a:	853e                	mv	a0,a5
20403e3c:	50b2                	lw	ra,44(sp)
20403e3e:	5422                	lw	s0,40(sp)
20403e40:	5492                	lw	s1,36(sp)
20403e42:	6145                	addi	sp,sp,48
20403e44:	8082                	ret

20403e46 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403e46:	1101                	addi	sp,sp,-32
20403e48:	ce22                	sw	s0,28(sp)
20403e4a:	1000                	addi	s0,sp,32
20403e4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403e50:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403e54:	853e                	mv	a0,a5
20403e56:	4472                	lw	s0,28(sp)
20403e58:	6105                	addi	sp,sp,32
20403e5a:	8082                	ret

20403e5c <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403e5c:	1101                	addi	sp,sp,-32
20403e5e:	ce22                	sw	s0,28(sp)
20403e60:	1000                	addi	s0,sp,32
20403e62:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403e66:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403e68:	853e                	mv	a0,a5
20403e6a:	4472                	lw	s0,28(sp)
20403e6c:	6105                	addi	sp,sp,32
20403e6e:	8082                	ret

20403e70 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403e70:	1101                	addi	sp,sp,-32
20403e72:	ce22                	sw	s0,28(sp)
20403e74:	1000                	addi	s0,sp,32
20403e76:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403e7a:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403e7e:	853e                	mv	a0,a5
20403e80:	4472                	lw	s0,28(sp)
20403e82:	6105                	addi	sp,sp,32
20403e84:	8082                	ret

20403e86 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403e86:	1101                	addi	sp,sp,-32
20403e88:	ce22                	sw	s0,28(sp)
20403e8a:	1000                	addi	s0,sp,32
20403e8c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403e90:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403e92:	853e                	mv	a0,a5
20403e94:	4472                	lw	s0,28(sp)
20403e96:	6105                	addi	sp,sp,32
20403e98:	8082                	ret

20403e9a <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403e9a:	7179                	addi	sp,sp,-48
20403e9c:	d606                	sw	ra,44(sp)
20403e9e:	d422                	sw	s0,40(sp)
20403ea0:	1800                	addi	s0,sp,48
20403ea2:	fca42e23          	sw	a0,-36(s0)
20403ea6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403eaa:	57fd                	li	a5,-1
20403eac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403eb0:	fdc42503          	lw	a0,-36(s0)
20403eb4:	98ffe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403eb8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403ebc:	fe842783          	lw	a5,-24(s0)
20403ec0:	c79d                	beqz	a5,20403eee <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403ec2:	fe842783          	lw	a5,-24(s0)
20403ec6:	0dc7a783          	lw	a5,220(a5)
20403eca:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403ece:	fe442783          	lw	a5,-28(s0)
20403ed2:	cf91                	beqz	a5,20403eee <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403ed4:	fe442783          	lw	a5,-28(s0)
20403ed8:	439c                	lw	a5,0(a5)
20403eda:	43f8                	lw	a4,68(a5)
20403edc:	fd840793          	addi	a5,s0,-40
20403ee0:	863e                	mv	a2,a5
20403ee2:	458d                	li	a1,3
20403ee4:	fe442503          	lw	a0,-28(s0)
20403ee8:	9702                	jalr	a4
20403eea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403eee:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403ef2:	853e                	mv	a0,a5
20403ef4:	50b2                	lw	ra,44(sp)
20403ef6:	5422                	lw	s0,40(sp)
20403ef8:	6145                	addi	sp,sp,48
20403efa:	8082                	ret

20403efc <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403efc:	7179                	addi	sp,sp,-48
20403efe:	d606                	sw	ra,44(sp)
20403f00:	d422                	sw	s0,40(sp)
20403f02:	1800                	addi	s0,sp,48
20403f04:	fca42e23          	sw	a0,-36(s0)
20403f08:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403f0c:	57fd                	li	a5,-1
20403f0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403f12:	fdc42503          	lw	a0,-36(s0)
20403f16:	92dfe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403f1a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403f1e:	fe842783          	lw	a5,-24(s0)
20403f22:	c79d                	beqz	a5,20403f50 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403f24:	fe842783          	lw	a5,-24(s0)
20403f28:	0dc7a783          	lw	a5,220(a5)
20403f2c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403f30:	fe442783          	lw	a5,-28(s0)
20403f34:	cf91                	beqz	a5,20403f50 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403f36:	fe442783          	lw	a5,-28(s0)
20403f3a:	439c                	lw	a5,0(a5)
20403f3c:	43f8                	lw	a4,68(a5)
20403f3e:	fd840793          	addi	a5,s0,-40
20403f42:	863e                	mv	a2,a5
20403f44:	4589                	li	a1,2
20403f46:	fe442503          	lw	a0,-28(s0)
20403f4a:	9702                	jalr	a4
20403f4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403f50:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403f54:	853e                	mv	a0,a5
20403f56:	50b2                	lw	ra,44(sp)
20403f58:	5422                	lw	s0,40(sp)
20403f5a:	6145                	addi	sp,sp,48
20403f5c:	8082                	ret

20403f5e <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403f5e:	7179                	addi	sp,sp,-48
20403f60:	d606                	sw	ra,44(sp)
20403f62:	d422                	sw	s0,40(sp)
20403f64:	1800                	addi	s0,sp,48
20403f66:	fca42e23          	sw	a0,-36(s0)
20403f6a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403f6e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403f72:	fdc42503          	lw	a0,-36(s0)
20403f76:	8cdfe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403f7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403f7e:	fe842783          	lw	a5,-24(s0)
20403f82:	c79d                	beqz	a5,20403fb0 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403f84:	fe842783          	lw	a5,-24(s0)
20403f88:	0dc7a783          	lw	a5,220(a5)
20403f8c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403f90:	fe442783          	lw	a5,-28(s0)
20403f94:	cf91                	beqz	a5,20403fb0 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403f96:	fe442783          	lw	a5,-28(s0)
20403f9a:	439c                	lw	a5,0(a5)
20403f9c:	43f8                	lw	a4,68(a5)
20403f9e:	fd840793          	addi	a5,s0,-40
20403fa2:	863e                	mv	a2,a5
20403fa4:	4591                	li	a1,4
20403fa6:	fe442503          	lw	a0,-28(s0)
20403faa:	9702                	jalr	a4
20403fac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403fb0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403fb4:	853e                	mv	a0,a5
20403fb6:	50b2                	lw	ra,44(sp)
20403fb8:	5422                	lw	s0,40(sp)
20403fba:	6145                	addi	sp,sp,48
20403fbc:	8082                	ret

20403fbe <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403fbe:	1101                	addi	sp,sp,-32
20403fc0:	ce06                	sw	ra,28(sp)
20403fc2:	cc22                	sw	s0,24(sp)
20403fc4:	1000                	addi	s0,sp,32
20403fc6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403fca:	fec42503          	lw	a0,-20(s0)
20403fce:	875fe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403fd2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403fd4:	853e                	mv	a0,a5
20403fd6:	40f2                	lw	ra,28(sp)
20403fd8:	4462                	lw	s0,24(sp)
20403fda:	6105                	addi	sp,sp,32
20403fdc:	8082                	ret

20403fde <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403fde:	7179                	addi	sp,sp,-48
20403fe0:	d606                	sw	ra,44(sp)
20403fe2:	d422                	sw	s0,40(sp)
20403fe4:	1800                	addi	s0,sp,48
20403fe6:	fca42e23          	sw	a0,-36(s0)
20403fea:	fcb42c23          	sw	a1,-40(s0)
20403fee:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403ff2:	fdc42503          	lw	a0,-36(s0)
20403ff6:	84dfe0ef          	jal	ra,20402842 <__metal_driver_cpu_interrupt_controller>
20403ffa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403ffe:	fec42783          	lw	a5,-20(s0)
20404002:	cb99                	beqz	a5,20404018 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20404004:	fd442603          	lw	a2,-44(s0)
20404008:	fd842583          	lw	a1,-40(s0)
2040400c:	fec42503          	lw	a0,-20(s0)
20404010:	8e1ff0ef          	jal	ra,204038f0 <__metal_exception_register>
20404014:	87aa                	mv	a5,a0
20404016:	a011                	j	2040401a <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20404018:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
2040401a:	853e                	mv	a0,a5
2040401c:	50b2                	lw	ra,44(sp)
2040401e:	5422                	lw	s0,40(sp)
20404020:	6145                	addi	sp,sp,48
20404022:	8082                	ret

20404024 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20404024:	1101                	addi	sp,sp,-32
20404026:	ce22                	sw	s0,28(sp)
20404028:	1000                	addi	s0,sp,32
2040402a:	fea42623          	sw	a0,-20(s0)
2040402e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20404032:	fe842783          	lw	a5,-24(s0)
20404036:	0007d783          	lhu	a5,0(a5)
2040403a:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
2040403e:	478d                	li	a5,3
20404040:	00f71463          	bne	a4,a5,20404048 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20404044:	4791                	li	a5,4
20404046:	a011                	j	2040404a <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20404048:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
2040404a:	853e                	mv	a0,a5
2040404c:	4472                	lw	s0,28(sp)
2040404e:	6105                	addi	sp,sp,32
20404050:	8082                	ret

20404052 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20404052:	7179                	addi	sp,sp,-48
20404054:	d622                	sw	s0,44(sp)
20404056:	1800                	addi	s0,sp,48
20404058:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
2040405c:	341027f3          	csrr	a5,mepc
20404060:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20404064:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20404068:	853e                	mv	a0,a5
2040406a:	5432                	lw	s0,44(sp)
2040406c:	6145                	addi	sp,sp,48
2040406e:	8082                	ret

20404070 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20404070:	1101                	addi	sp,sp,-32
20404072:	ce22                	sw	s0,28(sp)
20404074:	1000                	addi	s0,sp,32
20404076:	fea42623          	sw	a0,-20(s0)
2040407a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
2040407e:	fe842783          	lw	a5,-24(s0)
20404082:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20404086:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20404088:	853e                	mv	a0,a5
2040408a:	4472                	lw	s0,28(sp)
2040408c:	6105                	addi	sp,sp,32
2040408e:	8082                	ret

20404090 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20404090:	1101                	addi	sp,sp,-32
20404092:	ce22                	sw	s0,28(sp)
20404094:	1000                	addi	s0,sp,32
20404096:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2040409a:	fec42703          	lw	a4,-20(s0)
2040409e:	800007b7          	lui	a5,0x80000
204040a2:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204040a6:	00f71563          	bne	a4,a5,204040b0 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
204040aa:	0c0007b7          	lui	a5,0xc000
204040ae:	a011                	j	204040b2 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
204040b0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
204040b2:	853e                	mv	a0,a5
204040b4:	4472                	lw	s0,28(sp)
204040b6:	6105                	addi	sp,sp,32
204040b8:	8082                	ret

204040ba <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
204040ba:	1101                	addi	sp,sp,-32
204040bc:	ce22                	sw	s0,28(sp)
204040be:	1000                	addi	s0,sp,32
204040c0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204040c4:	fec42703          	lw	a4,-20(s0)
204040c8:	800007b7          	lui	a5,0x80000
204040cc:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204040d0:	00f71463          	bne	a4,a5,204040d8 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
204040d4:	47ed                	li	a5,27
204040d6:	a011                	j	204040da <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
204040d8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
204040da:	853e                	mv	a0,a5
204040dc:	4472                	lw	s0,28(sp)
204040de:	6105                	addi	sp,sp,32
204040e0:	8082                	ret

204040e2 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
204040e2:	1101                	addi	sp,sp,-32
204040e4:	ce22                	sw	s0,28(sp)
204040e6:	1000                	addi	s0,sp,32
204040e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
204040ec:	fec42703          	lw	a4,-20(s0)
204040f0:	800007b7          	lui	a5,0x80000
204040f4:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204040f8:	00f71463          	bne	a4,a5,20404100 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
204040fc:	479d                	li	a5,7
204040fe:	a011                	j	20404102 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20404100:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20404102:	853e                	mv	a0,a5
20404104:	4472                	lw	s0,28(sp)
20404106:	6105                	addi	sp,sp,32
20404108:	8082                	ret

2040410a <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
2040410a:	1101                	addi	sp,sp,-32
2040410c:	ce22                	sw	s0,28(sp)
2040410e:	1000                	addi	s0,sp,32
20404110:	fea42623          	sw	a0,-20(s0)
20404114:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20404118:	fe842783          	lw	a5,-24(s0)
2040411c:	e791                	bnez	a5,20404128 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
2040411e:	800007b7          	lui	a5,0x80000
20404122:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xfff9fda4>
20404126:	a011                	j	2040412a <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20404128:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
2040412a:	853e                	mv	a0,a5
2040412c:	4472                	lw	s0,28(sp)
2040412e:	6105                	addi	sp,sp,32
20404130:	8082                	ret

20404132 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20404132:	1101                	addi	sp,sp,-32
20404134:	ce22                	sw	s0,28(sp)
20404136:	1000                	addi	s0,sp,32
20404138:	fea42623          	sw	a0,-20(s0)
2040413c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20404140:	fe842783          	lw	a5,-24(s0)
20404144:	e399                	bnez	a5,2040414a <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20404146:	47ad                	li	a5,11
20404148:	a011                	j	2040414c <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
2040414a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
2040414c:	853e                	mv	a0,a5
2040414e:	4472                	lw	s0,28(sp)
20404150:	6105                	addi	sp,sp,32
20404152:	8082                	ret

20404154 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20404154:	7179                	addi	sp,sp,-48
20404156:	d606                	sw	ra,44(sp)
20404158:	d422                	sw	s0,40(sp)
2040415a:	1800                	addi	s0,sp,48
2040415c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404160:	fdc42503          	lw	a0,-36(s0)
20404164:	3735                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
20404166:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040416a:	fec42703          	lw	a4,-20(s0)
2040416e:	002007b7          	lui	a5,0x200
20404172:	0791                	addi	a5,a5,4
20404174:	97ba                	add	a5,a5,a4
20404176:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20404178:	853e                	mv	a0,a5
2040417a:	50b2                	lw	ra,44(sp)
2040417c:	5422                	lw	s0,40(sp)
2040417e:	6145                	addi	sp,sp,48
20404180:	8082                	ret

20404182 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404182:	7179                	addi	sp,sp,-48
20404184:	d606                	sw	ra,44(sp)
20404186:	d422                	sw	s0,40(sp)
20404188:	1800                	addi	s0,sp,48
2040418a:	fca42e23          	sw	a0,-36(s0)
2040418e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404192:	fdc42503          	lw	a0,-36(s0)
20404196:	3ded                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
20404198:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040419c:	fec42703          	lw	a4,-20(s0)
204041a0:	002007b7          	lui	a5,0x200
204041a4:	0791                	addi	a5,a5,4
204041a6:	97ba                	add	a5,a5,a4
204041a8:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
204041aa:	fd842783          	lw	a5,-40(s0)
204041ae:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
204041b0:	0001                	nop
204041b2:	50b2                	lw	ra,44(sp)
204041b4:	5422                	lw	s0,40(sp)
204041b6:	6145                	addi	sp,sp,48
204041b8:	8082                	ret

204041ba <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
204041ba:	7179                	addi	sp,sp,-48
204041bc:	d606                	sw	ra,44(sp)
204041be:	d422                	sw	s0,40(sp)
204041c0:	1800                	addi	s0,sp,48
204041c2:	fca42e23          	sw	a0,-36(s0)
204041c6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204041ca:	fdc42503          	lw	a0,-36(s0)
204041ce:	35c9                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
204041d0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204041d4:	fec42703          	lw	a4,-20(s0)
204041d8:	002007b7          	lui	a5,0x200
204041dc:	97ba                	add	a5,a5,a4
204041de:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
204041e0:	fd842783          	lw	a5,-40(s0)
204041e4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
204041e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
204041e8:	853e                	mv	a0,a5
204041ea:	50b2                	lw	ra,44(sp)
204041ec:	5422                	lw	s0,40(sp)
204041ee:	6145                	addi	sp,sp,48
204041f0:	8082                	ret

204041f2 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
204041f2:	7179                	addi	sp,sp,-48
204041f4:	d606                	sw	ra,44(sp)
204041f6:	d422                	sw	s0,40(sp)
204041f8:	1800                	addi	s0,sp,48
204041fa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
204041fe:	fdc42503          	lw	a0,-36(s0)
20404202:	3579                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
20404204:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404208:	fec42703          	lw	a4,-20(s0)
2040420c:	002007b7          	lui	a5,0x200
20404210:	97ba                	add	a5,a5,a4
20404212:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20404214:	853e                	mv	a0,a5
20404216:	50b2                	lw	ra,44(sp)
20404218:	5422                	lw	s0,40(sp)
2040421a:	6145                	addi	sp,sp,48
2040421c:	8082                	ret

2040421e <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
2040421e:	7179                	addi	sp,sp,-48
20404220:	d606                	sw	ra,44(sp)
20404222:	d422                	sw	s0,40(sp)
20404224:	1800                	addi	s0,sp,48
20404226:	fca42e23          	sw	a0,-36(s0)
2040422a:	fcb42c23          	sw	a1,-40(s0)
2040422e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20404232:	fdc42503          	lw	a0,-36(s0)
20404236:	3da9                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
20404238:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
2040423c:	fdc42503          	lw	a0,-36(s0)
20404240:	354d                	jal	204040e2 <__metal_driver_sifive_plic0_max_priority>
20404242:	87aa                	mv	a5,a0
20404244:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20404248:	fe842783          	lw	a5,-24(s0)
2040424c:	c785                	beqz	a5,20404274 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
2040424e:	fd442703          	lw	a4,-44(s0)
20404252:	fe842783          	lw	a5,-24(s0)
20404256:	00f77f63          	bgeu	a4,a5,20404274 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040425a:	fd842783          	lw	a5,-40(s0)
2040425e:	078a                	slli	a5,a5,0x2
20404260:	873e                	mv	a4,a5
20404262:	fec42783          	lw	a5,-20(s0)
20404266:	97ba                	add	a5,a5,a4
20404268:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
2040426a:	fd442783          	lw	a5,-44(s0)
2040426e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20404270:	4781                	li	a5,0
20404272:	a011                	j	20404276 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20404274:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20404276:	853e                	mv	a0,a5
20404278:	50b2                	lw	ra,44(sp)
2040427a:	5422                	lw	s0,40(sp)
2040427c:	6145                	addi	sp,sp,48
2040427e:	8082                	ret

20404280 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404280:	7179                	addi	sp,sp,-48
20404282:	d606                	sw	ra,44(sp)
20404284:	d422                	sw	s0,40(sp)
20404286:	1800                	addi	s0,sp,48
20404288:	fca42e23          	sw	a0,-36(s0)
2040428c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404290:	fdc42503          	lw	a0,-36(s0)
20404294:	3bf5                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
20404296:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040429a:	fd842783          	lw	a5,-40(s0)
2040429e:	078a                	slli	a5,a5,0x2
204042a0:	873e                	mv	a4,a5
204042a2:	fec42783          	lw	a5,-20(s0)
204042a6:	97ba                	add	a5,a5,a4
204042a8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204042aa:	853e                	mv	a0,a5
204042ac:	50b2                	lw	ra,44(sp)
204042ae:	5422                	lw	s0,40(sp)
204042b0:	6145                	addi	sp,sp,48
204042b2:	8082                	ret

204042b4 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
204042b4:	7179                	addi	sp,sp,-48
204042b6:	d606                	sw	ra,44(sp)
204042b8:	d422                	sw	s0,40(sp)
204042ba:	1800                	addi	s0,sp,48
204042bc:	fca42e23          	sw	a0,-36(s0)
204042c0:	fcb42c23          	sw	a1,-40(s0)
204042c4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
204042c8:	fdc42503          	lw	a0,-36(s0)
204042cc:	33d1                	jal	20404090 <__metal_driver_sifive_plic0_control_base>
204042ce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204042d2:	fd842783          	lw	a5,-40(s0)
204042d6:	8795                	srai	a5,a5,0x5
204042d8:	078a                	slli	a5,a5,0x2
204042da:	873e                	mv	a4,a5
204042dc:	fec42783          	lw	a5,-20(s0)
204042e0:	973e                	add	a4,a4,a5
204042e2:	6789                	lui	a5,0x2
204042e4:	97ba                	add	a5,a5,a4
204042e6:	439c                	lw	a5,0(a5)
204042e8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
204042ec:	fd442783          	lw	a5,-44(s0)
204042f0:	cf81                	beqz	a5,20404308 <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
204042f2:	fd842783          	lw	a5,-40(s0)
204042f6:	8bfd                	andi	a5,a5,31
204042f8:	4705                	li	a4,1
204042fa:	00f717b3          	sll	a5,a4,a5
204042fe:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404300:	fe842783          	lw	a5,-24(s0)
20404304:	8fd9                	or	a5,a5,a4
20404306:	a829                	j	20404320 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20404308:	fd842783          	lw	a5,-40(s0)
2040430c:	8bfd                	andi	a5,a5,31
2040430e:	4705                	li	a4,1
20404310:	00f717b3          	sll	a5,a4,a5
20404314:	fff7c793          	not	a5,a5
20404318:	873e                	mv	a4,a5
2040431a:	fe842783          	lw	a5,-24(s0)
2040431e:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404320:	fd842703          	lw	a4,-40(s0)
20404324:	8715                	srai	a4,a4,0x5
20404326:	070a                	slli	a4,a4,0x2
20404328:	86ba                	mv	a3,a4
2040432a:	fec42703          	lw	a4,-20(s0)
2040432e:	96ba                	add	a3,a3,a4
20404330:	6709                	lui	a4,0x2
20404332:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404334:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20404336:	0001                	nop
20404338:	50b2                	lw	ra,44(sp)
2040433a:	5422                	lw	s0,40(sp)
2040433c:	6145                	addi	sp,sp,48
2040433e:	8082                	ret

20404340 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20404340:	1101                	addi	sp,sp,-32
20404342:	ce06                	sw	ra,28(sp)
20404344:	cc22                	sw	s0,24(sp)
20404346:	1000                	addi	s0,sp,32
20404348:	fea42623          	sw	a0,-20(s0)
2040434c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20404350:	12c00513          	li	a0,300
20404354:	1b4010ef          	jal	ra,20405508 <metal_shutdown>

20404358 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20404358:	7179                	addi	sp,sp,-48
2040435a:	d606                	sw	ra,44(sp)
2040435c:	d422                	sw	s0,40(sp)
2040435e:	1800                	addi	s0,sp,48
20404360:	fca42e23          	sw	a0,-36(s0)
20404364:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20404368:	fd842783          	lw	a5,-40(s0)
2040436c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20404370:	fec42503          	lw	a0,-20(s0)
20404374:	33c5                	jal	20404154 <__metal_plic0_claim_interrupt>
20404376:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
2040437a:	fec42503          	lw	a0,-20(s0)
2040437e:	3b35                	jal	204040ba <__metal_driver_sifive_plic0_num_interrupts>
20404380:	87aa                	mv	a5,a0
20404382:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20404386:	fe842703          	lw	a4,-24(s0)
2040438a:	fe442783          	lw	a5,-28(s0)
2040438e:	04f77263          	bgeu	a4,a5,204043d2 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404392:	fec42703          	lw	a4,-20(s0)
20404396:	fe842783          	lw	a5,-24(s0)
2040439a:	078a                	slli	a5,a5,0x2
2040439c:	97ba                	add	a5,a5,a4
2040439e:	479c                	lw	a5,8(a5)
204043a0:	cb8d                	beqz	a5,204043d2 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
204043a2:	fec42703          	lw	a4,-20(s0)
204043a6:	fe842783          	lw	a5,-24(s0)
204043aa:	078a                	slli	a5,a5,0x2
204043ac:	97ba                	add	a5,a5,a4
204043ae:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
204043b2:	fe842603          	lw	a2,-24(s0)
204043b6:	fec42683          	lw	a3,-20(s0)
204043ba:	fe842703          	lw	a4,-24(s0)
204043be:	87ba                	mv	a5,a4
204043c0:	0786                	slli	a5,a5,0x1
204043c2:	97ba                	add	a5,a5,a4
204043c4:	078e                	slli	a5,a5,0x3
204043c6:	97b6                	add	a5,a5,a3
204043c8:	0887a783          	lw	a5,136(a5)
204043cc:	85be                	mv	a1,a5
204043ce:	8532                	mv	a0,a2
204043d0:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
204043d2:	fe842583          	lw	a1,-24(s0)
204043d6:	fec42503          	lw	a0,-20(s0)
204043da:	3365                	jal	20404182 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
204043dc:	0001                	nop
204043de:	50b2                	lw	ra,44(sp)
204043e0:	5422                	lw	s0,40(sp)
204043e2:	6145                	addi	sp,sp,48
204043e4:	8082                	ret

204043e6 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
204043e6:	7139                	addi	sp,sp,-64
204043e8:	de06                	sw	ra,60(sp)
204043ea:	dc22                	sw	s0,56(sp)
204043ec:	0080                	addi	s0,sp,64
204043ee:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204043f2:	fcc42783          	lw	a5,-52(s0)
204043f6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
204043fa:	fe442783          	lw	a5,-28(s0)
204043fe:	43dc                	lw	a5,4(a5)
20404400:	10079c63          	bnez	a5,20404518 <__metal_driver_riscv_plic0_init+0x132>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404404:	fe042623          	sw	zero,-20(s0)
20404408:	a201                	j	20404508 <__metal_driver_riscv_plic0_init+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040440a:	fcc42503          	lw	a0,-52(s0)
2040440e:	3175                	jal	204040ba <__metal_driver_sifive_plic0_num_interrupts>
20404410:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20404414:	fec42583          	lw	a1,-20(s0)
20404418:	fcc42503          	lw	a0,-52(s0)
2040441c:	31fd                	jal	2040410a <__metal_driver_sifive_plic0_interrupt_parents>
2040441e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20404422:	fec42583          	lw	a1,-20(s0)
20404426:	fcc42503          	lw	a0,-52(s0)
2040442a:	3321                	jal	20404132 <__metal_driver_sifive_plic0_interrupt_lines>
2040442c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20404430:	fdc42783          	lw	a5,-36(s0)
20404434:	439c                	lw	a5,0(a5)
20404436:	439c                	lw	a5,0(a5)
20404438:	fdc42503          	lw	a0,-36(s0)
2040443c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
2040443e:	fe042423          	sw	zero,-24(s0)
20404442:	a085                	j	204044a2 <__metal_driver_riscv_plic0_init+0xbc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20404444:	4601                	li	a2,0
20404446:	fe842583          	lw	a1,-24(s0)
2040444a:	fe442503          	lw	a0,-28(s0)
2040444e:	359d                	jal	204042b4 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20404450:	4601                	li	a2,0
20404452:	fe842583          	lw	a1,-24(s0)
20404456:	fcc42503          	lw	a0,-52(s0)
2040445a:	33d1                	jal	2040421e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
2040445c:	fe442703          	lw	a4,-28(s0)
20404460:	fe842783          	lw	a5,-24(s0)
20404464:	078a                	slli	a5,a5,0x2
20404466:	97ba                	add	a5,a5,a4
20404468:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
2040446c:	fe442683          	lw	a3,-28(s0)
20404470:	fe842703          	lw	a4,-24(s0)
20404474:	87ba                	mv	a5,a4
20404476:	0786                	slli	a5,a5,0x1
20404478:	97ba                	add	a5,a5,a4
2040447a:	078e                	slli	a5,a5,0x3
2040447c:	97b6                	add	a5,a5,a3
2040447e:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404482:	fe442683          	lw	a3,-28(s0)
20404486:	fe842703          	lw	a4,-24(s0)
2040448a:	87ba                	mv	a5,a4
2040448c:	0786                	slli	a5,a5,0x1
2040448e:	97ba                	add	a5,a5,a4
20404490:	078e                	slli	a5,a5,0x3
20404492:	97b6                	add	a5,a5,a3
20404494:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404498:	fe842783          	lw	a5,-24(s0)
2040449c:	0785                	addi	a5,a5,1
2040449e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204044a2:	fe842703          	lw	a4,-24(s0)
204044a6:	fe042783          	lw	a5,-32(s0)
204044aa:	f8f74de3          	blt	a4,a5,20404444 <__metal_driver_riscv_plic0_init+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
204044ae:	4581                	li	a1,0
204044b0:	fcc42503          	lw	a0,-52(s0)
204044b4:	3319                	jal	204041ba <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
204044b6:	fdc42783          	lw	a5,-36(s0)
204044ba:	439c                	lw	a5,0(a5)
204044bc:	4fdc                	lw	a5,28(a5)
204044be:	fe442683          	lw	a3,-28(s0)
204044c2:	4601                	li	a2,0
204044c4:	fd842583          	lw	a1,-40(s0)
204044c8:	fdc42503          	lw	a0,-36(s0)
204044cc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
204044ce:	fdc42783          	lw	a5,-36(s0)
204044d2:	439c                	lw	a5,0(a5)
204044d4:	4fd8                	lw	a4,28(a5)
204044d6:	fe442683          	lw	a3,-28(s0)
204044da:	204047b7          	lui	a5,0x20404
204044de:	35878613          	addi	a2,a5,856 # 20404358 <__metal_plic0_handler>
204044e2:	fd842583          	lw	a1,-40(s0)
204044e6:	fdc42503          	lw	a0,-36(s0)
204044ea:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
204044ec:	fdc42783          	lw	a5,-36(s0)
204044f0:	439c                	lw	a5,0(a5)
204044f2:	53dc                	lw	a5,36(a5)
204044f4:	fd842583          	lw	a1,-40(s0)
204044f8:	fdc42503          	lw	a0,-36(s0)
204044fc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
204044fe:	fec42783          	lw	a5,-20(s0)
20404502:	0785                	addi	a5,a5,1
20404504:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404508:	fec42783          	lw	a5,-20(s0)
2040450c:	eef05fe3          	blez	a5,2040440a <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404510:	fe442783          	lw	a5,-28(s0)
20404514:	4705                	li	a4,1
20404516:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404518:	0001                	nop
2040451a:	50f2                	lw	ra,60(sp)
2040451c:	5462                	lw	s0,56(sp)
2040451e:	6121                	addi	sp,sp,64
20404520:	8082                	ret

20404522 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404522:	7179                	addi	sp,sp,-48
20404524:	d606                	sw	ra,44(sp)
20404526:	d422                	sw	s0,40(sp)
20404528:	1800                	addi	s0,sp,48
2040452a:	fca42e23          	sw	a0,-36(s0)
2040452e:	fcb42c23          	sw	a1,-40(s0)
20404532:	fcc42a23          	sw	a2,-44(s0)
20404536:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040453a:	fdc42783          	lw	a5,-36(s0)
2040453e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404542:	fdc42503          	lw	a0,-36(s0)
20404546:	b75ff0ef          	jal	ra,204040ba <__metal_driver_sifive_plic0_num_interrupts>
2040454a:	872a                	mv	a4,a0
2040454c:	fd842783          	lw	a5,-40(s0)
20404550:	00e7c463          	blt	a5,a4,20404558 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404554:	57fd                	li	a5,-1
20404556:	a049                	j	204045d8 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404558:	fd442783          	lw	a5,-44(s0)
2040455c:	cf95                	beqz	a5,20404598 <__metal_driver_riscv_plic0_register+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040455e:	4609                	li	a2,2
20404560:	fd842583          	lw	a1,-40(s0)
20404564:	fdc42503          	lw	a0,-36(s0)
20404568:	395d                	jal	2040421e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2040456a:	fec42703          	lw	a4,-20(s0)
2040456e:	fd842783          	lw	a5,-40(s0)
20404572:	078a                	slli	a5,a5,0x2
20404574:	97ba                	add	a5,a5,a4
20404576:	fd442703          	lw	a4,-44(s0)
2040457a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040457c:	fec42683          	lw	a3,-20(s0)
20404580:	fd842703          	lw	a4,-40(s0)
20404584:	87ba                	mv	a5,a4
20404586:	0786                	slli	a5,a5,0x1
20404588:	97ba                	add	a5,a5,a4
2040458a:	078e                	slli	a5,a5,0x3
2040458c:	97b6                	add	a5,a5,a3
2040458e:	fd042703          	lw	a4,-48(s0)
20404592:	08e7a423          	sw	a4,136(a5)
20404596:	a081                	j	204045d6 <__metal_driver_riscv_plic0_register+0xb4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404598:	4605                	li	a2,1
2040459a:	fd842583          	lw	a1,-40(s0)
2040459e:	fdc42503          	lw	a0,-36(s0)
204045a2:	c7dff0ef          	jal	ra,2040421e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204045a6:	fec42703          	lw	a4,-20(s0)
204045aa:	fd842783          	lw	a5,-40(s0)
204045ae:	078a                	slli	a5,a5,0x2
204045b0:	97ba                	add	a5,a5,a4
204045b2:	20404737          	lui	a4,0x20404
204045b6:	34070713          	addi	a4,a4,832 # 20404340 <__metal_plic0_default_handler>
204045ba:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204045bc:	fec42683          	lw	a3,-20(s0)
204045c0:	fd842703          	lw	a4,-40(s0)
204045c4:	87ba                	mv	a5,a4
204045c6:	0786                	slli	a5,a5,0x1
204045c8:	97ba                	add	a5,a5,a4
204045ca:	078e                	slli	a5,a5,0x3
204045cc:	97b6                	add	a5,a5,a3
204045ce:	fd042703          	lw	a4,-48(s0)
204045d2:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204045d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204045d8:	853e                	mv	a0,a5
204045da:	50b2                	lw	ra,44(sp)
204045dc:	5422                	lw	s0,40(sp)
204045de:	6145                	addi	sp,sp,48
204045e0:	8082                	ret

204045e2 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204045e2:	7179                	addi	sp,sp,-48
204045e4:	d606                	sw	ra,44(sp)
204045e6:	d422                	sw	s0,40(sp)
204045e8:	1800                	addi	s0,sp,48
204045ea:	fca42e23          	sw	a0,-36(s0)
204045ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204045f2:	fdc42783          	lw	a5,-36(s0)
204045f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204045fa:	fdc42503          	lw	a0,-36(s0)
204045fe:	abdff0ef          	jal	ra,204040ba <__metal_driver_sifive_plic0_num_interrupts>
20404602:	872a                	mv	a4,a0
20404604:	fd842783          	lw	a5,-40(s0)
20404608:	00e7c463          	blt	a5,a4,20404610 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040460c:	57fd                	li	a5,-1
2040460e:	a809                	j	20404620 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404610:	4605                	li	a2,1
20404612:	fd842583          	lw	a1,-40(s0)
20404616:	fec42503          	lw	a0,-20(s0)
2040461a:	c9bff0ef          	jal	ra,204042b4 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040461e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404620:	853e                	mv	a0,a5
20404622:	50b2                	lw	ra,44(sp)
20404624:	5422                	lw	s0,40(sp)
20404626:	6145                	addi	sp,sp,48
20404628:	8082                	ret

2040462a <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2040462a:	7179                	addi	sp,sp,-48
2040462c:	d606                	sw	ra,44(sp)
2040462e:	d422                	sw	s0,40(sp)
20404630:	1800                	addi	s0,sp,48
20404632:	fca42e23          	sw	a0,-36(s0)
20404636:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040463a:	fdc42783          	lw	a5,-36(s0)
2040463e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404642:	fdc42503          	lw	a0,-36(s0)
20404646:	a75ff0ef          	jal	ra,204040ba <__metal_driver_sifive_plic0_num_interrupts>
2040464a:	872a                	mv	a4,a0
2040464c:	fd842783          	lw	a5,-40(s0)
20404650:	00e7c463          	blt	a5,a4,20404658 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404654:	57fd                	li	a5,-1
20404656:	a809                	j	20404668 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404658:	4601                	li	a2,0
2040465a:	fd842583          	lw	a1,-40(s0)
2040465e:	fec42503          	lw	a0,-20(s0)
20404662:	c53ff0ef          	jal	ra,204042b4 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404666:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404668:	853e                	mv	a0,a5
2040466a:	50b2                	lw	ra,44(sp)
2040466c:	5422                	lw	s0,40(sp)
2040466e:	6145                	addi	sp,sp,48
20404670:	8082                	ret

20404672 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404672:	1101                	addi	sp,sp,-32
20404674:	ce22                	sw	s0,28(sp)
20404676:	1000                	addi	s0,sp,32
20404678:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040467c:	fec42703          	lw	a4,-20(s0)
20404680:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404684:	00f71563          	bne	a4,a5,2040468e <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404688:	100127b7          	lui	a5,0x10012
2040468c:	a011                	j	20404690 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040468e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404690:	853e                	mv	a0,a5
20404692:	4472                	lw	s0,28(sp)
20404694:	6105                	addi	sp,sp,32
20404696:	8082                	ret

20404698 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404698:	1101                	addi	sp,sp,-32
2040469a:	ce22                	sw	s0,28(sp)
2040469c:	1000                	addi	s0,sp,32
2040469e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204046a2:	fec42703          	lw	a4,-20(s0)
204046a6:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204046aa:	00f71763          	bne	a4,a5,204046b8 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204046ae:	800007b7          	lui	a5,0x80000
204046b2:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
204046b6:	a011                	j	204046ba <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204046b8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204046ba:	853e                	mv	a0,a5
204046bc:	4472                	lw	s0,28(sp)
204046be:	6105                	addi	sp,sp,32
204046c0:	8082                	ret

204046c2 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204046c2:	1101                	addi	sp,sp,-32
204046c4:	ce22                	sw	s0,28(sp)
204046c6:	1000                	addi	s0,sp,32
204046c8:	fea42623          	sw	a0,-20(s0)
204046cc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204046d0:	fec42703          	lw	a4,-20(s0)
204046d4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204046d8:	00f71763          	bne	a4,a5,204046e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204046dc:	fe842783          	lw	a5,-24(s0)
204046e0:	e399                	bnez	a5,204046e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204046e2:	479d                	li	a5,7
204046e4:	a269                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204046e6:	fec42703          	lw	a4,-20(s0)
204046ea:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204046ee:	00f71963          	bne	a4,a5,20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
204046f2:	fe842703          	lw	a4,-24(s0)
204046f6:	4785                	li	a5,1
204046f8:	00f71463          	bne	a4,a5,20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
204046fc:	47a1                	li	a5,8
204046fe:	aa85                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404700:	fec42703          	lw	a4,-20(s0)
20404704:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404708:	00f71963          	bne	a4,a5,2040471a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040470c:	fe842703          	lw	a4,-24(s0)
20404710:	4789                	li	a5,2
20404712:	00f71463          	bne	a4,a5,2040471a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404716:	47a5                	li	a5,9
20404718:	aa99                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2040471a:	fec42703          	lw	a4,-20(s0)
2040471e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404722:	00f71963          	bne	a4,a5,20404734 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404726:	fe842703          	lw	a4,-24(s0)
2040472a:	478d                	li	a5,3
2040472c:	00f71463          	bne	a4,a5,20404734 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404730:	47a9                	li	a5,10
20404732:	aa35                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404734:	fec42703          	lw	a4,-20(s0)
20404738:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040473c:	00f71963          	bne	a4,a5,2040474e <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404740:	fe842703          	lw	a4,-24(s0)
20404744:	4791                	li	a5,4
20404746:	00f71463          	bne	a4,a5,2040474e <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
2040474a:	47ad                	li	a5,11
2040474c:	a20d                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040474e:	fec42703          	lw	a4,-20(s0)
20404752:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404756:	00f71963          	bne	a4,a5,20404768 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
2040475a:	fe842703          	lw	a4,-24(s0)
2040475e:	4795                	li	a5,5
20404760:	00f71463          	bne	a4,a5,20404768 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404764:	47b1                	li	a5,12
20404766:	a221                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404768:	fec42703          	lw	a4,-20(s0)
2040476c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404770:	00f71963          	bne	a4,a5,20404782 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404774:	fe842703          	lw	a4,-24(s0)
20404778:	4799                	li	a5,6
2040477a:	00f71463          	bne	a4,a5,20404782 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
2040477e:	47b5                	li	a5,13
20404780:	a0fd                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404782:	fec42703          	lw	a4,-20(s0)
20404786:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040478a:	00f71963          	bne	a4,a5,2040479c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040478e:	fe842703          	lw	a4,-24(s0)
20404792:	479d                	li	a5,7
20404794:	00f71463          	bne	a4,a5,2040479c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404798:	47b9                	li	a5,14
2040479a:	a8d1                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040479c:	fec42703          	lw	a4,-20(s0)
204047a0:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047a4:	00f71963          	bne	a4,a5,204047b6 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
204047a8:	fe842703          	lw	a4,-24(s0)
204047ac:	47a1                	li	a5,8
204047ae:	00f71463          	bne	a4,a5,204047b6 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
204047b2:	47bd                	li	a5,15
204047b4:	a86d                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204047b6:	fec42703          	lw	a4,-20(s0)
204047ba:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047be:	00f71963          	bne	a4,a5,204047d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
204047c2:	fe842703          	lw	a4,-24(s0)
204047c6:	47a5                	li	a5,9
204047c8:	00f71463          	bne	a4,a5,204047d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
204047cc:	47c1                	li	a5,16
204047ce:	a045                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204047d0:	fec42703          	lw	a4,-20(s0)
204047d4:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047d8:	00f71963          	bne	a4,a5,204047ea <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
204047dc:	fe842703          	lw	a4,-24(s0)
204047e0:	47a9                	li	a5,10
204047e2:	00f71463          	bne	a4,a5,204047ea <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
204047e6:	47c5                	li	a5,17
204047e8:	a059                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204047ea:	fec42703          	lw	a4,-20(s0)
204047ee:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204047f2:	00f71963          	bne	a4,a5,20404804 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
204047f6:	fe842703          	lw	a4,-24(s0)
204047fa:	47ad                	li	a5,11
204047fc:	00f71463          	bne	a4,a5,20404804 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404800:	47c9                	li	a5,18
20404802:	a0b5                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404804:	fec42703          	lw	a4,-20(s0)
20404808:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040480c:	00f71963          	bne	a4,a5,2040481e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404810:	fe842703          	lw	a4,-24(s0)
20404814:	47b1                	li	a5,12
20404816:	00f71463          	bne	a4,a5,2040481e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
2040481a:	47cd                	li	a5,19
2040481c:	a889                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040481e:	fec42703          	lw	a4,-20(s0)
20404822:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404826:	00f71963          	bne	a4,a5,20404838 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
2040482a:	fe842703          	lw	a4,-24(s0)
2040482e:	47b5                	li	a5,13
20404830:	00f71463          	bne	a4,a5,20404838 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404834:	47d1                	li	a5,20
20404836:	a825                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404838:	fec42703          	lw	a4,-20(s0)
2040483c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404840:	00f71963          	bne	a4,a5,20404852 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404844:	fe842703          	lw	a4,-24(s0)
20404848:	47b9                	li	a5,14
2040484a:	00f71463          	bne	a4,a5,20404852 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
2040484e:	47d5                	li	a5,21
20404850:	a839                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404852:	fec42703          	lw	a4,-20(s0)
20404856:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040485a:	00f71963          	bne	a4,a5,2040486c <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
2040485e:	fe842703          	lw	a4,-24(s0)
20404862:	47bd                	li	a5,15
20404864:	00f71463          	bne	a4,a5,2040486c <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20404868:	47d9                	li	a5,22
2040486a:	a011                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040486c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
2040486e:	853e                	mv	a0,a5
20404870:	4472                	lw	s0,28(sp)
20404872:	6105                	addi	sp,sp,32
20404874:	8082                	ret

20404876 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404876:	7179                	addi	sp,sp,-48
20404878:	d606                	sw	ra,44(sp)
2040487a:	d422                	sw	s0,40(sp)
2040487c:	1800                	addi	s0,sp,48
2040487e:	fca42e23          	sw	a0,-36(s0)
20404882:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404886:	fdc42503          	lw	a0,-36(s0)
2040488a:	33e5                	jal	20404672 <__metal_driver_sifive_gpio0_base>
2040488c:	87aa                	mv	a5,a0
2040488e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404892:	fec42783          	lw	a5,-20(s0)
20404896:	0791                	addi	a5,a5,4
20404898:	4398                	lw	a4,0(a5)
2040489a:	fd842783          	lw	a5,-40(s0)
2040489e:	fec42683          	lw	a3,-20(s0)
204048a2:	0691                	addi	a3,a3,4
204048a4:	8fd9                	or	a5,a5,a4
204048a6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204048a8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204048aa:	853e                	mv	a0,a5
204048ac:	50b2                	lw	ra,44(sp)
204048ae:	5422                	lw	s0,40(sp)
204048b0:	6145                	addi	sp,sp,48
204048b2:	8082                	ret

204048b4 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204048b4:	7179                	addi	sp,sp,-48
204048b6:	d606                	sw	ra,44(sp)
204048b8:	d422                	sw	s0,40(sp)
204048ba:	1800                	addi	s0,sp,48
204048bc:	fca42e23          	sw	a0,-36(s0)
204048c0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048c4:	fdc42503          	lw	a0,-36(s0)
204048c8:	336d                	jal	20404672 <__metal_driver_sifive_gpio0_base>
204048ca:	87aa                	mv	a5,a0
204048cc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204048d0:	fec42783          	lw	a5,-20(s0)
204048d4:	0791                	addi	a5,a5,4
204048d6:	439c                	lw	a5,0(a5)
204048d8:	fd842703          	lw	a4,-40(s0)
204048dc:	fff74713          	not	a4,a4
204048e0:	86ba                	mv	a3,a4
204048e2:	fec42703          	lw	a4,-20(s0)
204048e6:	0711                	addi	a4,a4,4
204048e8:	8ff5                	and	a5,a5,a3
204048ea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204048ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204048ee:	853e                	mv	a0,a5
204048f0:	50b2                	lw	ra,44(sp)
204048f2:	5422                	lw	s0,40(sp)
204048f4:	6145                	addi	sp,sp,48
204048f6:	8082                	ret

204048f8 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
204048f8:	7179                	addi	sp,sp,-48
204048fa:	d606                	sw	ra,44(sp)
204048fc:	d422                	sw	s0,40(sp)
204048fe:	1800                	addi	s0,sp,48
20404900:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404904:	fdc42503          	lw	a0,-36(s0)
20404908:	33ad                	jal	20404672 <__metal_driver_sifive_gpio0_base>
2040490a:	87aa                	mv	a5,a0
2040490c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404910:	fec42783          	lw	a5,-20(s0)
20404914:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404916:	853e                	mv	a0,a5
20404918:	50b2                	lw	ra,44(sp)
2040491a:	5422                	lw	s0,40(sp)
2040491c:	6145                	addi	sp,sp,48
2040491e:	8082                	ret

20404920 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404920:	7179                	addi	sp,sp,-48
20404922:	d606                	sw	ra,44(sp)
20404924:	d422                	sw	s0,40(sp)
20404926:	1800                	addi	s0,sp,48
20404928:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040492c:	fdc42503          	lw	a0,-36(s0)
20404930:	3389                	jal	20404672 <__metal_driver_sifive_gpio0_base>
20404932:	87aa                	mv	a5,a0
20404934:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404938:	fec42783          	lw	a5,-20(s0)
2040493c:	07b1                	addi	a5,a5,12
2040493e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404940:	853e                	mv	a0,a5
20404942:	50b2                	lw	ra,44(sp)
20404944:	5422                	lw	s0,40(sp)
20404946:	6145                	addi	sp,sp,48
20404948:	8082                	ret

2040494a <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2040494a:	7179                	addi	sp,sp,-48
2040494c:	d606                	sw	ra,44(sp)
2040494e:	d422                	sw	s0,40(sp)
20404950:	1800                	addi	s0,sp,48
20404952:	fca42e23          	sw	a0,-36(s0)
20404956:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040495a:	fdc42503          	lw	a0,-36(s0)
2040495e:	d15ff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404962:	87aa                	mv	a5,a0
20404964:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404968:	fec42783          	lw	a5,-20(s0)
2040496c:	07a1                	addi	a5,a5,8
2040496e:	439c                	lw	a5,0(a5)
20404970:	fd842703          	lw	a4,-40(s0)
20404974:	fff74713          	not	a4,a4
20404978:	86ba                	mv	a3,a4
2040497a:	fec42703          	lw	a4,-20(s0)
2040497e:	0721                	addi	a4,a4,8
20404980:	8ff5                	and	a5,a5,a3
20404982:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404984:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404986:	853e                	mv	a0,a5
20404988:	50b2                	lw	ra,44(sp)
2040498a:	5422                	lw	s0,40(sp)
2040498c:	6145                	addi	sp,sp,48
2040498e:	8082                	ret

20404990 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404990:	7179                	addi	sp,sp,-48
20404992:	d606                	sw	ra,44(sp)
20404994:	d422                	sw	s0,40(sp)
20404996:	1800                	addi	s0,sp,48
20404998:	fca42e23          	sw	a0,-36(s0)
2040499c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049a0:	fdc42503          	lw	a0,-36(s0)
204049a4:	ccfff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
204049a8:	87aa                	mv	a5,a0
204049aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204049ae:	fec42783          	lw	a5,-20(s0)
204049b2:	07a1                	addi	a5,a5,8
204049b4:	4398                	lw	a4,0(a5)
204049b6:	fd842783          	lw	a5,-40(s0)
204049ba:	fec42683          	lw	a3,-20(s0)
204049be:	06a1                	addi	a3,a3,8
204049c0:	8fd9                	or	a5,a5,a4
204049c2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204049c4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204049c6:	853e                	mv	a0,a5
204049c8:	50b2                	lw	ra,44(sp)
204049ca:	5422                	lw	s0,40(sp)
204049cc:	6145                	addi	sp,sp,48
204049ce:	8082                	ret

204049d0 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204049d0:	7179                	addi	sp,sp,-48
204049d2:	d606                	sw	ra,44(sp)
204049d4:	d422                	sw	s0,40(sp)
204049d6:	1800                	addi	s0,sp,48
204049d8:	fca42e23          	sw	a0,-36(s0)
204049dc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049e0:	fdc42503          	lw	a0,-36(s0)
204049e4:	c8fff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
204049e8:	87aa                	mv	a5,a0
204049ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
204049ee:	fec42783          	lw	a5,-20(s0)
204049f2:	07b1                	addi	a5,a5,12
204049f4:	4398                	lw	a4,0(a5)
204049f6:	fd842783          	lw	a5,-40(s0)
204049fa:	fec42683          	lw	a3,-20(s0)
204049fe:	06b1                	addi	a3,a3,12
20404a00:	8fd9                	or	a5,a5,a4
20404a02:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404a04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404a06:	853e                	mv	a0,a5
20404a08:	50b2                	lw	ra,44(sp)
20404a0a:	5422                	lw	s0,40(sp)
20404a0c:	6145                	addi	sp,sp,48
20404a0e:	8082                	ret

20404a10 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404a10:	7179                	addi	sp,sp,-48
20404a12:	d606                	sw	ra,44(sp)
20404a14:	d422                	sw	s0,40(sp)
20404a16:	1800                	addi	s0,sp,48
20404a18:	fca42e23          	sw	a0,-36(s0)
20404a1c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a20:	fdc42503          	lw	a0,-36(s0)
20404a24:	c4fff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404a28:	87aa                	mv	a5,a0
20404a2a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
20404a2e:	fec42783          	lw	a5,-20(s0)
20404a32:	07b1                	addi	a5,a5,12
20404a34:	439c                	lw	a5,0(a5)
20404a36:	fd842703          	lw	a4,-40(s0)
20404a3a:	fff74713          	not	a4,a4
20404a3e:	86ba                	mv	a3,a4
20404a40:	fec42703          	lw	a4,-20(s0)
20404a44:	0731                	addi	a4,a4,12
20404a46:	8ff5                	and	a5,a5,a3
20404a48:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
20404a4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
20404a4c:	853e                	mv	a0,a5
20404a4e:	50b2                	lw	ra,44(sp)
20404a50:	5422                	lw	s0,40(sp)
20404a52:	6145                	addi	sp,sp,48
20404a54:	8082                	ret

20404a56 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404a56:	7179                	addi	sp,sp,-48
20404a58:	d606                	sw	ra,44(sp)
20404a5a:	d422                	sw	s0,40(sp)
20404a5c:	1800                	addi	s0,sp,48
20404a5e:	fca42e23          	sw	a0,-36(s0)
20404a62:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a66:	fdc42503          	lw	a0,-36(s0)
20404a6a:	c09ff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404a6e:	87aa                	mv	a5,a0
20404a70:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404a74:	fec42783          	lw	a5,-20(s0)
20404a78:	07b1                	addi	a5,a5,12
20404a7a:	4398                	lw	a4,0(a5)
20404a7c:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404a80:	fec42683          	lw	a3,-20(s0)
20404a84:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404a86:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404a88:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404a8a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404a8c:	853e                	mv	a0,a5
20404a8e:	50b2                	lw	ra,44(sp)
20404a90:	5422                	lw	s0,40(sp)
20404a92:	6145                	addi	sp,sp,48
20404a94:	8082                	ret

20404a96 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404a96:	7179                	addi	sp,sp,-48
20404a98:	d606                	sw	ra,44(sp)
20404a9a:	d422                	sw	s0,40(sp)
20404a9c:	1800                	addi	s0,sp,48
20404a9e:	fca42e23          	sw	a0,-36(s0)
20404aa2:	fcb42c23          	sw	a1,-40(s0)
20404aa6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404aaa:	fdc42503          	lw	a0,-36(s0)
20404aae:	bc5ff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404ab2:	87aa                	mv	a5,a0
20404ab4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404ab8:	fec42783          	lw	a5,-20(s0)
20404abc:	03c78793          	addi	a5,a5,60
20404ac0:	439c                	lw	a5,0(a5)
20404ac2:	fd842703          	lw	a4,-40(s0)
20404ac6:	fff74713          	not	a4,a4
20404aca:	86ba                	mv	a3,a4
20404acc:	fec42703          	lw	a4,-20(s0)
20404ad0:	03c70713          	addi	a4,a4,60
20404ad4:	8ff5                	and	a5,a5,a3
20404ad6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404ad8:	fec42783          	lw	a5,-20(s0)
20404adc:	03878793          	addi	a5,a5,56
20404ae0:	4398                	lw	a4,0(a5)
20404ae2:	fd442783          	lw	a5,-44(s0)
20404ae6:	fec42683          	lw	a3,-20(s0)
20404aea:	03868693          	addi	a3,a3,56 # 4000038 <__heap_size+0x3fff838>
20404aee:	8fd9                	or	a5,a5,a4
20404af0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404af2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404af4:	853e                	mv	a0,a5
20404af6:	50b2                	lw	ra,44(sp)
20404af8:	5422                	lw	s0,40(sp)
20404afa:	6145                	addi	sp,sp,48
20404afc:	8082                	ret

20404afe <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404afe:	7179                	addi	sp,sp,-48
20404b00:	d606                	sw	ra,44(sp)
20404b02:	d422                	sw	s0,40(sp)
20404b04:	1800                	addi	s0,sp,48
20404b06:	fca42e23          	sw	a0,-36(s0)
20404b0a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b0e:	fdc42503          	lw	a0,-36(s0)
20404b12:	b61ff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404b16:	87aa                	mv	a5,a0
20404b18:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
20404b1c:	fec42783          	lw	a5,-20(s0)
20404b20:	03878793          	addi	a5,a5,56
20404b24:	439c                	lw	a5,0(a5)
20404b26:	fd842703          	lw	a4,-40(s0)
20404b2a:	fff74713          	not	a4,a4
20404b2e:	86ba                	mv	a3,a4
20404b30:	fec42703          	lw	a4,-20(s0)
20404b34:	03870713          	addi	a4,a4,56
20404b38:	8ff5                	and	a5,a5,a3
20404b3a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
20404b3c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404b3e:	853e                	mv	a0,a5
20404b40:	50b2                	lw	ra,44(sp)
20404b42:	5422                	lw	s0,40(sp)
20404b44:	6145                	addi	sp,sp,48
20404b46:	8082                	ret

20404b48 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404b48:	7179                	addi	sp,sp,-48
20404b4a:	d606                	sw	ra,44(sp)
20404b4c:	d422                	sw	s0,40(sp)
20404b4e:	1800                	addi	s0,sp,48
20404b50:	fca42e23          	sw	a0,-36(s0)
20404b54:	fcb42c23          	sw	a1,-40(s0)
20404b58:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b5c:	fdc42503          	lw	a0,-36(s0)
20404b60:	b13ff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404b64:	87aa                	mv	a5,a0
20404b66:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404b6a:	fd442703          	lw	a4,-44(s0)
20404b6e:	479d                	li	a5,7
20404b70:	1ce7e963          	bltu	a5,a4,20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404b74:	fd442783          	lw	a5,-44(s0)
20404b78:	00279713          	slli	a4,a5,0x2
20404b7c:	204067b7          	lui	a5,0x20406
20404b80:	b2078793          	addi	a5,a5,-1248 # 20405b20 <__metal_driver_vtable_riscv_plic0+0x4c>
20404b84:	97ba                	add	a5,a5,a4
20404b86:	439c                	lw	a5,0(a5)
20404b88:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404b8a:	fec42783          	lw	a5,-20(s0)
20404b8e:	07e1                	addi	a5,a5,24
20404b90:	439c                	lw	a5,0(a5)
20404b92:	fd842703          	lw	a4,-40(s0)
20404b96:	fff74713          	not	a4,a4
20404b9a:	86ba                	mv	a3,a4
20404b9c:	fec42703          	lw	a4,-20(s0)
20404ba0:	0761                	addi	a4,a4,24
20404ba2:	8ff5                	and	a5,a5,a3
20404ba4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404ba6:	fec42783          	lw	a5,-20(s0)
20404baa:	02078793          	addi	a5,a5,32
20404bae:	439c                	lw	a5,0(a5)
20404bb0:	fd842703          	lw	a4,-40(s0)
20404bb4:	fff74713          	not	a4,a4
20404bb8:	86ba                	mv	a3,a4
20404bba:	fec42703          	lw	a4,-20(s0)
20404bbe:	02070713          	addi	a4,a4,32
20404bc2:	8ff5                	and	a5,a5,a3
20404bc4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404bc6:	fec42783          	lw	a5,-20(s0)
20404bca:	02878793          	addi	a5,a5,40
20404bce:	439c                	lw	a5,0(a5)
20404bd0:	fd842703          	lw	a4,-40(s0)
20404bd4:	fff74713          	not	a4,a4
20404bd8:	86ba                	mv	a3,a4
20404bda:	fec42703          	lw	a4,-20(s0)
20404bde:	02870713          	addi	a4,a4,40
20404be2:	8ff5                	and	a5,a5,a3
20404be4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404be6:	fec42783          	lw	a5,-20(s0)
20404bea:	03078793          	addi	a5,a5,48
20404bee:	439c                	lw	a5,0(a5)
20404bf0:	fd842703          	lw	a4,-40(s0)
20404bf4:	fff74713          	not	a4,a4
20404bf8:	86ba                	mv	a3,a4
20404bfa:	fec42703          	lw	a4,-20(s0)
20404bfe:	03070713          	addi	a4,a4,48
20404c02:	8ff5                	and	a5,a5,a3
20404c04:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404c06:	aa35                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404c08:	fec42783          	lw	a5,-20(s0)
20404c0c:	07e1                	addi	a5,a5,24
20404c0e:	4398                	lw	a4,0(a5)
20404c10:	fd842783          	lw	a5,-40(s0)
20404c14:	fec42683          	lw	a3,-20(s0)
20404c18:	06e1                	addi	a3,a3,24
20404c1a:	8fd9                	or	a5,a5,a4
20404c1c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404c1e:	a215                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404c20:	fec42783          	lw	a5,-20(s0)
20404c24:	02078793          	addi	a5,a5,32
20404c28:	4398                	lw	a4,0(a5)
20404c2a:	fd842783          	lw	a5,-40(s0)
20404c2e:	fec42683          	lw	a3,-20(s0)
20404c32:	02068693          	addi	a3,a3,32
20404c36:	8fd9                	or	a5,a5,a4
20404c38:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404c3a:	a221                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404c3c:	fec42783          	lw	a5,-20(s0)
20404c40:	07e1                	addi	a5,a5,24
20404c42:	4398                	lw	a4,0(a5)
20404c44:	fd842783          	lw	a5,-40(s0)
20404c48:	fec42683          	lw	a3,-20(s0)
20404c4c:	06e1                	addi	a3,a3,24
20404c4e:	8fd9                	or	a5,a5,a4
20404c50:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404c52:	fec42783          	lw	a5,-20(s0)
20404c56:	02078793          	addi	a5,a5,32
20404c5a:	4398                	lw	a4,0(a5)
20404c5c:	fd842783          	lw	a5,-40(s0)
20404c60:	fec42683          	lw	a3,-20(s0)
20404c64:	02068693          	addi	a3,a3,32
20404c68:	8fd9                	or	a5,a5,a4
20404c6a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404c6c:	a8d9                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404c6e:	fec42783          	lw	a5,-20(s0)
20404c72:	02878793          	addi	a5,a5,40
20404c76:	4398                	lw	a4,0(a5)
20404c78:	fd842783          	lw	a5,-40(s0)
20404c7c:	fec42683          	lw	a3,-20(s0)
20404c80:	02868693          	addi	a3,a3,40
20404c84:	8fd9                	or	a5,a5,a4
20404c86:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404c88:	a86d                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404c8a:	fec42783          	lw	a5,-20(s0)
20404c8e:	03078793          	addi	a5,a5,48
20404c92:	4398                	lw	a4,0(a5)
20404c94:	fd842783          	lw	a5,-40(s0)
20404c98:	fec42683          	lw	a3,-20(s0)
20404c9c:	03068693          	addi	a3,a3,48
20404ca0:	8fd9                	or	a5,a5,a4
20404ca2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404ca4:	a879                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404ca6:	fec42783          	lw	a5,-20(s0)
20404caa:	02878793          	addi	a5,a5,40
20404cae:	4398                	lw	a4,0(a5)
20404cb0:	fd842783          	lw	a5,-40(s0)
20404cb4:	fec42683          	lw	a3,-20(s0)
20404cb8:	02868693          	addi	a3,a3,40
20404cbc:	8fd9                	or	a5,a5,a4
20404cbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404cc0:	fec42783          	lw	a5,-20(s0)
20404cc4:	03078793          	addi	a5,a5,48
20404cc8:	4398                	lw	a4,0(a5)
20404cca:	fd842783          	lw	a5,-40(s0)
20404cce:	fec42683          	lw	a3,-20(s0)
20404cd2:	03068693          	addi	a3,a3,48
20404cd6:	8fd9                	or	a5,a5,a4
20404cd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404cda:	a0a5                	j	20404d42 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404cdc:	fec42783          	lw	a5,-20(s0)
20404ce0:	07e1                	addi	a5,a5,24
20404ce2:	4398                	lw	a4,0(a5)
20404ce4:	fd842783          	lw	a5,-40(s0)
20404ce8:	fec42683          	lw	a3,-20(s0)
20404cec:	06e1                	addi	a3,a3,24
20404cee:	8fd9                	or	a5,a5,a4
20404cf0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404cf2:	fec42783          	lw	a5,-20(s0)
20404cf6:	02078793          	addi	a5,a5,32
20404cfa:	4398                	lw	a4,0(a5)
20404cfc:	fd842783          	lw	a5,-40(s0)
20404d00:	fec42683          	lw	a3,-20(s0)
20404d04:	02068693          	addi	a3,a3,32
20404d08:	8fd9                	or	a5,a5,a4
20404d0a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404d0c:	fec42783          	lw	a5,-20(s0)
20404d10:	02878793          	addi	a5,a5,40
20404d14:	4398                	lw	a4,0(a5)
20404d16:	fd842783          	lw	a5,-40(s0)
20404d1a:	fec42683          	lw	a3,-20(s0)
20404d1e:	02868693          	addi	a3,a3,40
20404d22:	8fd9                	or	a5,a5,a4
20404d24:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404d26:	fec42783          	lw	a5,-20(s0)
20404d2a:	03078793          	addi	a5,a5,48
20404d2e:	4398                	lw	a4,0(a5)
20404d30:	fd842783          	lw	a5,-40(s0)
20404d34:	fec42683          	lw	a3,-20(s0)
20404d38:	03068693          	addi	a3,a3,48
20404d3c:	8fd9                	or	a5,a5,a4
20404d3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404d40:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404d42:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404d44:	853e                	mv	a0,a5
20404d46:	50b2                	lw	ra,44(sp)
20404d48:	5422                	lw	s0,40(sp)
20404d4a:	6145                	addi	sp,sp,48
20404d4c:	8082                	ret

20404d4e <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404d4e:	7179                	addi	sp,sp,-48
20404d50:	d606                	sw	ra,44(sp)
20404d52:	d422                	sw	s0,40(sp)
20404d54:	1800                	addi	s0,sp,48
20404d56:	fca42e23          	sw	a0,-36(s0)
20404d5a:	fcb42c23          	sw	a1,-40(s0)
20404d5e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d62:	fdc42503          	lw	a0,-36(s0)
20404d66:	90dff0ef          	jal	ra,20404672 <__metal_driver_sifive_gpio0_base>
20404d6a:	87aa                	mv	a5,a0
20404d6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404d70:	fd442703          	lw	a4,-44(s0)
20404d74:	479d                	li	a5,7
20404d76:	14e7ea63          	bltu	a5,a4,20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404d7a:	fd442783          	lw	a5,-44(s0)
20404d7e:	00279713          	slli	a4,a5,0x2
20404d82:	204067b7          	lui	a5,0x20406
20404d86:	b4078793          	addi	a5,a5,-1216 # 20405b40 <__metal_driver_vtable_riscv_plic0+0x6c>
20404d8a:	97ba                	add	a5,a5,a4
20404d8c:	439c                	lw	a5,0(a5)
20404d8e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404d90:	fec42783          	lw	a5,-20(s0)
20404d94:	07f1                	addi	a5,a5,28
20404d96:	4398                	lw	a4,0(a5)
20404d98:	fd842783          	lw	a5,-40(s0)
20404d9c:	fec42683          	lw	a3,-20(s0)
20404da0:	06f1                	addi	a3,a3,28
20404da2:	8fd9                	or	a5,a5,a4
20404da4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404da6:	a215                	j	20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404da8:	fec42783          	lw	a5,-20(s0)
20404dac:	02478793          	addi	a5,a5,36
20404db0:	4398                	lw	a4,0(a5)
20404db2:	fd842783          	lw	a5,-40(s0)
20404db6:	fec42683          	lw	a3,-20(s0)
20404dba:	02468693          	addi	a3,a3,36
20404dbe:	8fd9                	or	a5,a5,a4
20404dc0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404dc2:	a221                	j	20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404dc4:	fec42783          	lw	a5,-20(s0)
20404dc8:	07f1                	addi	a5,a5,28
20404dca:	4398                	lw	a4,0(a5)
20404dcc:	fd842783          	lw	a5,-40(s0)
20404dd0:	fec42683          	lw	a3,-20(s0)
20404dd4:	06f1                	addi	a3,a3,28
20404dd6:	8fd9                	or	a5,a5,a4
20404dd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404dda:	fec42783          	lw	a5,-20(s0)
20404dde:	02478793          	addi	a5,a5,36
20404de2:	4398                	lw	a4,0(a5)
20404de4:	fd842783          	lw	a5,-40(s0)
20404de8:	fec42683          	lw	a3,-20(s0)
20404dec:	02468693          	addi	a3,a3,36
20404df0:	8fd9                	or	a5,a5,a4
20404df2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404df4:	a8d9                	j	20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404df6:	fec42783          	lw	a5,-20(s0)
20404dfa:	02c78793          	addi	a5,a5,44
20404dfe:	4398                	lw	a4,0(a5)
20404e00:	fd842783          	lw	a5,-40(s0)
20404e04:	fec42683          	lw	a3,-20(s0)
20404e08:	02c68693          	addi	a3,a3,44
20404e0c:	8fd9                	or	a5,a5,a4
20404e0e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404e10:	a86d                	j	20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404e12:	fec42783          	lw	a5,-20(s0)
20404e16:	03478793          	addi	a5,a5,52
20404e1a:	4398                	lw	a4,0(a5)
20404e1c:	fd842783          	lw	a5,-40(s0)
20404e20:	fec42683          	lw	a3,-20(s0)
20404e24:	03468693          	addi	a3,a3,52
20404e28:	8fd9                	or	a5,a5,a4
20404e2a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404e2c:	a879                	j	20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404e2e:	fec42783          	lw	a5,-20(s0)
20404e32:	02c78793          	addi	a5,a5,44
20404e36:	4398                	lw	a4,0(a5)
20404e38:	fd842783          	lw	a5,-40(s0)
20404e3c:	fec42683          	lw	a3,-20(s0)
20404e40:	02c68693          	addi	a3,a3,44
20404e44:	8fd9                	or	a5,a5,a4
20404e46:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404e48:	fec42783          	lw	a5,-20(s0)
20404e4c:	03478793          	addi	a5,a5,52
20404e50:	4398                	lw	a4,0(a5)
20404e52:	fd842783          	lw	a5,-40(s0)
20404e56:	fec42683          	lw	a3,-20(s0)
20404e5a:	03468693          	addi	a3,a3,52
20404e5e:	8fd9                	or	a5,a5,a4
20404e60:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404e62:	a0a5                	j	20404eca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404e64:	fec42783          	lw	a5,-20(s0)
20404e68:	07f1                	addi	a5,a5,28
20404e6a:	4398                	lw	a4,0(a5)
20404e6c:	fd842783          	lw	a5,-40(s0)
20404e70:	fec42683          	lw	a3,-20(s0)
20404e74:	06f1                	addi	a3,a3,28
20404e76:	8fd9                	or	a5,a5,a4
20404e78:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404e7a:	fec42783          	lw	a5,-20(s0)
20404e7e:	02478793          	addi	a5,a5,36
20404e82:	4398                	lw	a4,0(a5)
20404e84:	fd842783          	lw	a5,-40(s0)
20404e88:	fec42683          	lw	a3,-20(s0)
20404e8c:	02468693          	addi	a3,a3,36
20404e90:	8fd9                	or	a5,a5,a4
20404e92:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404e94:	fec42783          	lw	a5,-20(s0)
20404e98:	02c78793          	addi	a5,a5,44
20404e9c:	4398                	lw	a4,0(a5)
20404e9e:	fd842783          	lw	a5,-40(s0)
20404ea2:	fec42683          	lw	a3,-20(s0)
20404ea6:	02c68693          	addi	a3,a3,44
20404eaa:	8fd9                	or	a5,a5,a4
20404eac:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404eae:	fec42783          	lw	a5,-20(s0)
20404eb2:	03478793          	addi	a5,a5,52
20404eb6:	4398                	lw	a4,0(a5)
20404eb8:	fd842783          	lw	a5,-40(s0)
20404ebc:	fec42683          	lw	a3,-20(s0)
20404ec0:	03468693          	addi	a3,a3,52
20404ec4:	8fd9                	or	a5,a5,a4
20404ec6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404ec8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404eca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404ecc:	853e                	mv	a0,a5
20404ece:	50b2                	lw	ra,44(sp)
20404ed0:	5422                	lw	s0,40(sp)
20404ed2:	6145                	addi	sp,sp,48
20404ed4:	8082                	ret

20404ed6 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404ed6:	1101                	addi	sp,sp,-32
20404ed8:	ce06                	sw	ra,28(sp)
20404eda:	cc22                	sw	s0,24(sp)
20404edc:	1000                	addi	s0,sp,32
20404ede:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404ee2:	fec42503          	lw	a0,-20(s0)
20404ee6:	fb2ff0ef          	jal	ra,20404698 <__metal_driver_sifive_gpio0_interrupt_parent>
20404eea:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404eec:	853e                	mv	a0,a5
20404eee:	40f2                	lw	ra,28(sp)
20404ef0:	4462                	lw	s0,24(sp)
20404ef2:	6105                	addi	sp,sp,32
20404ef4:	8082                	ret

20404ef6 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404ef6:	7179                	addi	sp,sp,-48
20404ef8:	d606                	sw	ra,44(sp)
20404efa:	d422                	sw	s0,40(sp)
20404efc:	1800                	addi	s0,sp,48
20404efe:	fca42e23          	sw	a0,-36(s0)
20404f02:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404f06:	fd842583          	lw	a1,-40(s0)
20404f0a:	fdc42503          	lw	a0,-36(s0)
20404f0e:	fb4ff0ef          	jal	ra,204046c2 <__metal_driver_sifive_gpio0_interrupt_lines>
20404f12:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404f16:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404f1a:	853e                	mv	a0,a5
20404f1c:	50b2                	lw	ra,44(sp)
20404f1e:	5422                	lw	s0,40(sp)
20404f20:	6145                	addi	sp,sp,48
20404f22:	8082                	ret

20404f24 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404f24:	1101                	addi	sp,sp,-32
20404f26:	ce22                	sw	s0,28(sp)
20404f28:	1000                	addi	s0,sp,32
20404f2a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f2e:	fec42703          	lw	a4,-20(s0)
20404f32:	800007b7          	lui	a5,0x80000
20404f36:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20404f3a:	00f71563          	bne	a4,a5,20404f44 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404f3e:	100137b7          	lui	a5,0x10013
20404f42:	a011                	j	20404f46 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404f44:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404f46:	853e                	mv	a0,a5
20404f48:	4472                	lw	s0,28(sp)
20404f4a:	6105                	addi	sp,sp,32
20404f4c:	8082                	ret

20404f4e <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404f4e:	1101                	addi	sp,sp,-32
20404f50:	ce22                	sw	s0,28(sp)
20404f52:	1000                	addi	s0,sp,32
20404f54:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f58:	fec42703          	lw	a4,-20(s0)
20404f5c:	800007b7          	lui	a5,0x80000
20404f60:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20404f64:	00f71763          	bne	a4,a5,20404f72 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404f68:	800007b7          	lui	a5,0x80000
20404f6c:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xfffa015c>
20404f70:	a011                	j	20404f74 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404f72:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404f74:	853e                	mv	a0,a5
20404f76:	4472                	lw	s0,28(sp)
20404f78:	6105                	addi	sp,sp,32
20404f7a:	8082                	ret

20404f7c <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404f7c:	1101                	addi	sp,sp,-32
20404f7e:	ce22                	sw	s0,28(sp)
20404f80:	1000                	addi	s0,sp,32
20404f82:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404f86:	fec42703          	lw	a4,-20(s0)
20404f8a:	800007b7          	lui	a5,0x80000
20404f8e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20404f92:	00f71463          	bne	a4,a5,20404f9a <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404f96:	4795                	li	a5,5
20404f98:	a011                	j	20404f9c <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404f9a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404f9c:	853e                	mv	a0,a5
20404f9e:	4472                	lw	s0,28(sp)
20404fa0:	6105                	addi	sp,sp,32
20404fa2:	8082                	ret

20404fa4 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404fa4:	1101                	addi	sp,sp,-32
20404fa6:	ce22                	sw	s0,28(sp)
20404fa8:	1000                	addi	s0,sp,32
20404faa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fae:	fec42703          	lw	a4,-20(s0)
20404fb2:	800007b7          	lui	a5,0x80000
20404fb6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20404fba:	00f71763          	bne	a4,a5,20404fc8 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404fbe:	800007b7          	lui	a5,0x80000
20404fc2:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xfff9fd94>
20404fc6:	a011                	j	20404fca <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404fc8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404fca:	853e                	mv	a0,a5
20404fcc:	4472                	lw	s0,28(sp)
20404fce:	6105                	addi	sp,sp,32
20404fd0:	8082                	ret

20404fd2 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404fd2:	1101                	addi	sp,sp,-32
20404fd4:	ce22                	sw	s0,28(sp)
20404fd6:	1000                	addi	s0,sp,32
20404fd8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404fdc:	fec42703          	lw	a4,-20(s0)
20404fe0:	800007b7          	lui	a5,0x80000
20404fe4:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20404fe8:	00f71563          	bne	a4,a5,20404ff2 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404fec:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404ff0:	a011                	j	20404ff4 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404ff2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404ff4:	853e                	mv	a0,a5
20404ff6:	4472                	lw	s0,28(sp)
20404ff8:	6105                	addi	sp,sp,32
20404ffa:	8082                	ret

20404ffc <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404ffc:	1101                	addi	sp,sp,-32
20404ffe:	ce22                	sw	s0,28(sp)
20405000:	1000                	addi	s0,sp,32
20405002:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405006:	fec42703          	lw	a4,-20(s0)
2040500a:	800007b7          	lui	a5,0x80000
2040500e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
20405012:	00f71563          	bne	a4,a5,2040501c <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20405016:	000307b7          	lui	a5,0x30
2040501a:	a011                	j	2040501e <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
2040501c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
2040501e:	853e                	mv	a0,a5
20405020:	4472                	lw	s0,28(sp)
20405022:	6105                	addi	sp,sp,32
20405024:	8082                	ret

20405026 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20405026:	1101                	addi	sp,sp,-32
20405028:	ce22                	sw	s0,28(sp)
2040502a:	1000                	addi	s0,sp,32
2040502c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405030:	fec42703          	lw	a4,-20(s0)
20405034:	800007b7          	lui	a5,0x80000
20405038:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xfffa045c>
2040503c:	00f71563          	bne	a4,a5,20405046 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20405040:	000307b7          	lui	a5,0x30
20405044:	a011                	j	20405048 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20405046:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20405048:	853e                	mv	a0,a5
2040504a:	4472                	lw	s0,28(sp)
2040504c:	6105                	addi	sp,sp,32
2040504e:	8082                	ret

20405050 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20405050:	1101                	addi	sp,sp,-32
20405052:	ce06                	sw	ra,28(sp)
20405054:	cc22                	sw	s0,24(sp)
20405056:	1000                	addi	s0,sp,32
20405058:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
2040505c:	fec42503          	lw	a0,-20(s0)
20405060:	35fd                	jal	20404f4e <__metal_driver_sifive_uart0_interrupt_parent>
20405062:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20405064:	853e                	mv	a0,a5
20405066:	40f2                	lw	ra,28(sp)
20405068:	4462                	lw	s0,24(sp)
2040506a:	6105                	addi	sp,sp,32
2040506c:	8082                	ret

2040506e <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
2040506e:	1101                	addi	sp,sp,-32
20405070:	ce06                	sw	ra,28(sp)
20405072:	cc22                	sw	s0,24(sp)
20405074:	1000                	addi	s0,sp,32
20405076:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
2040507a:	fec42503          	lw	a0,-20(s0)
2040507e:	3dfd                	jal	20404f7c <__metal_driver_sifive_uart0_interrupt_line>
20405080:	87aa                	mv	a5,a0
20405082:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405086:	853e                	mv	a0,a5
20405088:	40f2                	lw	ra,28(sp)
2040508a:	4462                	lw	s0,24(sp)
2040508c:	6105                	addi	sp,sp,32
2040508e:	8082                	ret

20405090 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20405090:	7179                	addi	sp,sp,-48
20405092:	d606                	sw	ra,44(sp)
20405094:	d422                	sw	s0,40(sp)
20405096:	1800                	addi	s0,sp,48
20405098:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040509c:	fdc42503          	lw	a0,-36(s0)
204050a0:	3551                	jal	20404f24 <__metal_driver_sifive_uart0_control_base>
204050a2:	87aa                	mv	a5,a0
204050a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
204050a8:	fec42783          	lw	a5,-20(s0)
204050ac:	439c                	lw	a5,0(a5)
204050ae:	fff7c793          	not	a5,a5
204050b2:	83fd                	srli	a5,a5,0x1f
204050b4:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
204050b8:	853e                	mv	a0,a5
204050ba:	50b2                	lw	ra,44(sp)
204050bc:	5422                	lw	s0,40(sp)
204050be:	6145                	addi	sp,sp,48
204050c0:	8082                	ret

204050c2 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
204050c2:	7179                	addi	sp,sp,-48
204050c4:	d606                	sw	ra,44(sp)
204050c6:	d422                	sw	s0,40(sp)
204050c8:	1800                	addi	s0,sp,48
204050ca:	fca42e23          	sw	a0,-36(s0)
204050ce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204050d2:	fdc42503          	lw	a0,-36(s0)
204050d6:	35b9                	jal	20404f24 <__metal_driver_sifive_uart0_control_base>
204050d8:	87aa                	mv	a5,a0
204050da:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
204050de:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
204050e0:	fdc42503          	lw	a0,-36(s0)
204050e4:	3775                	jal	20405090 <__metal_driver_sifive_uart0_txready>
204050e6:	87aa                	mv	a5,a0
204050e8:	dfe5                	beqz	a5,204050e0 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
204050ea:	fec42783          	lw	a5,-20(s0)
204050ee:	fd842703          	lw	a4,-40(s0)
204050f2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
204050f4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
204050f6:	853e                	mv	a0,a5
204050f8:	50b2                	lw	ra,44(sp)
204050fa:	5422                	lw	s0,40(sp)
204050fc:	6145                	addi	sp,sp,48
204050fe:	8082                	ret

20405100 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20405100:	7179                	addi	sp,sp,-48
20405102:	d606                	sw	ra,44(sp)
20405104:	d422                	sw	s0,40(sp)
20405106:	1800                	addi	s0,sp,48
20405108:	fca42e23          	sw	a0,-36(s0)
2040510c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405110:	fdc42503          	lw	a0,-36(s0)
20405114:	3d01                	jal	20404f24 <__metal_driver_sifive_uart0_control_base>
20405116:	87aa                	mv	a5,a0
20405118:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
2040511c:	fec42783          	lw	a5,-20(s0)
20405120:	0791                	addi	a5,a5,4
20405122:	439c                	lw	a5,0(a5)
20405124:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20405128:	fe842783          	lw	a5,-24(s0)
2040512c:	0007d763          	bgez	a5,2040513a <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20405130:	fd842783          	lw	a5,-40(s0)
20405134:	577d                	li	a4,-1
20405136:	c398                	sw	a4,0(a5)
20405138:	a801                	j	20405148 <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
2040513a:	fe842783          	lw	a5,-24(s0)
2040513e:	0ff7f713          	andi	a4,a5,255
20405142:	fd842783          	lw	a5,-40(s0)
20405146:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20405148:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
2040514a:	853e                	mv	a0,a5
2040514c:	50b2                	lw	ra,44(sp)
2040514e:	5422                	lw	s0,40(sp)
20405150:	6145                	addi	sp,sp,48
20405152:	8082                	ret

20405154 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20405154:	7179                	addi	sp,sp,-48
20405156:	d622                	sw	s0,44(sp)
20405158:	1800                	addi	s0,sp,48
2040515a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
2040515e:	fdc42783          	lw	a5,-36(s0)
20405162:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405166:	fec42783          	lw	a5,-20(s0)
2040516a:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040516c:	853e                	mv	a0,a5
2040516e:	5432                	lw	s0,44(sp)
20405170:	6145                	addi	sp,sp,48
20405172:	8082                	ret

20405174 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405174:	7179                	addi	sp,sp,-48
20405176:	d606                	sw	ra,44(sp)
20405178:	d422                	sw	s0,40(sp)
2040517a:	1800                	addi	s0,sp,48
2040517c:	fca42e23          	sw	a0,-36(s0)
20405180:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405184:	fdc42783          	lw	a5,-36(s0)
20405188:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040518c:	fdc42503          	lw	a0,-36(s0)
20405190:	3b51                	jal	20404f24 <__metal_driver_sifive_uart0_control_base>
20405192:	87aa                	mv	a5,a0
20405194:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405198:	fdc42503          	lw	a0,-36(s0)
2040519c:	3521                	jal	20404fa4 <__metal_driver_sifive_uart0_clock>
2040519e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
204051a2:	fd842703          	lw	a4,-40(s0)
204051a6:	fec42783          	lw	a5,-20(s0)
204051aa:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
204051ac:	fe442783          	lw	a5,-28(s0)
204051b0:	cbb1                	beqz	a5,20405204 <__metal_driver_sifive_uart0_set_baud_rate+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
204051b2:	fe442783          	lw	a5,-28(s0)
204051b6:	439c                	lw	a5,0(a5)
204051b8:	439c                	lw	a5,0(a5)
204051ba:	fe442503          	lw	a0,-28(s0)
204051be:	9782                	jalr	a5
204051c0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
204051c4:	fe042703          	lw	a4,-32(s0)
204051c8:	fd842783          	lw	a5,-40(s0)
204051cc:	02f747b3          	div	a5,a4,a5
204051d0:	fff78713          	addi	a4,a5,-1
204051d4:	fe842783          	lw	a5,-24(s0)
204051d8:	07e1                	addi	a5,a5,24
204051da:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
204051dc:	fe842783          	lw	a5,-24(s0)
204051e0:	07a1                	addi	a5,a5,8
204051e2:	439c                	lw	a5,0(a5)
204051e4:	fe842703          	lw	a4,-24(s0)
204051e8:	0721                	addi	a4,a4,8
204051ea:	0017e793          	ori	a5,a5,1
204051ee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
204051f0:	fe842783          	lw	a5,-24(s0)
204051f4:	07b1                	addi	a5,a5,12
204051f6:	439c                	lw	a5,0(a5)
204051f8:	fe842703          	lw	a4,-24(s0)
204051fc:	0731                	addi	a4,a4,12
204051fe:	0017e793          	ori	a5,a5,1
20405202:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20405204:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20405206:	853e                	mv	a0,a5
20405208:	50b2                	lw	ra,44(sp)
2040520a:	5422                	lw	s0,40(sp)
2040520c:	6145                	addi	sp,sp,48
2040520e:	8082                	ret

20405210 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20405210:	7139                	addi	sp,sp,-64
20405212:	de06                	sw	ra,60(sp)
20405214:	dc22                	sw	s0,56(sp)
20405216:	0080                	addi	s0,sp,64
20405218:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
2040521c:	fcc42783          	lw	a5,-52(s0)
20405220:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20405224:	fcc42503          	lw	a0,-52(s0)
20405228:	cfdff0ef          	jal	ra,20404f24 <__metal_driver_sifive_uart0_control_base>
2040522c:	87aa                	mv	a5,a0
2040522e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20405232:	fcc42503          	lw	a0,-52(s0)
20405236:	d6fff0ef          	jal	ra,20404fa4 <__metal_driver_sifive_uart0_clock>
2040523a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
2040523e:	fe842783          	lw	a5,-24(s0)
20405242:	07a1                	addi	a5,a5,8
20405244:	4398                	lw	a4,0(a5)
20405246:	fe842783          	lw	a5,-24(s0)
2040524a:	07a1                	addi	a5,a5,8
2040524c:	86be                	mv	a3,a5
2040524e:	fff907b7          	lui	a5,0xfff90
20405252:	17fd                	addi	a5,a5,-1
20405254:	8ff9                	and	a5,a5,a4
20405256:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20405258:	fe842783          	lw	a5,-24(s0)
2040525c:	07a1                	addi	a5,a5,8
2040525e:	4398                	lw	a4,0(a5)
20405260:	fe842783          	lw	a5,-24(s0)
20405264:	07a1                	addi	a5,a5,8
20405266:	86be                	mv	a3,a5
20405268:	67c1                	lui	a5,0x10
2040526a:	8fd9                	or	a5,a5,a4
2040526c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
2040526e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405270:	fe842783          	lw	a5,-24(s0)
20405274:	07d1                	addi	a5,a5,20
20405276:	439c                	lw	a5,0(a5)
20405278:	8b85                	andi	a5,a5,1
2040527a:	dbfd                	beqz	a5,20405270 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040527c:	fe842783          	lw	a5,-24(s0)
20405280:	07a1                	addi	a5,a5,8
20405282:	439c                	lw	a5,0(a5)
20405284:	8b89                	andi	a5,a5,2
20405286:	c399                	beqz	a5,2040528c <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20405288:	47a5                	li	a5,9
2040528a:	a011                	j	2040528e <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
2040528c:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
2040528e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405292:	fe442783          	lw	a5,-28(s0)
20405296:	439c                	lw	a5,0(a5)
20405298:	439c                	lw	a5,0(a5)
2040529a:	fe442503          	lw	a0,-28(s0)
2040529e:	9782                	jalr	a5
204052a0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
204052a4:	fe042703          	lw	a4,-32(s0)
204052a8:	fdc42783          	lw	a5,-36(s0)
204052ac:	02f707b3          	mul	a5,a4,a5
204052b0:	873e                	mv	a4,a5
204052b2:	fec42783          	lw	a5,-20(s0)
204052b6:	43dc                	lw	a5,4(a5)
204052b8:	02f757b3          	divu	a5,a4,a5
204052bc:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
204052c0:	fc042a23          	sw	zero,-44(s0)
204052c4:	a039                	j	204052d2 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
204052c6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
204052c8:	fd442783          	lw	a5,-44(s0)
204052cc:	0785                	addi	a5,a5,1
204052ce:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
204052d2:	fd442783          	lw	a5,-44(s0)
204052d6:	fd842703          	lw	a4,-40(s0)
204052da:	fee7c6e3          	blt	a5,a4,204052c6 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
204052de:	0001                	nop
204052e0:	50f2                	lw	ra,60(sp)
204052e2:	5462                	lw	s0,56(sp)
204052e4:	6121                	addi	sp,sp,64
204052e6:	8082                	ret

204052e8 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
204052e8:	7179                	addi	sp,sp,-48
204052ea:	d606                	sw	ra,44(sp)
204052ec:	d422                	sw	s0,40(sp)
204052ee:	1800                	addi	s0,sp,48
204052f0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
204052f4:	fdc42783          	lw	a5,-36(s0)
204052f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
204052fc:	fec42703          	lw	a4,-20(s0)
20405300:	fec42783          	lw	a5,-20(s0)
20405304:	43dc                	lw	a5,4(a5)
20405306:	85be                	mv	a1,a5
20405308:	853a                	mv	a0,a4
2040530a:	da7fc0ef          	jal	ra,204020b0 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
2040530e:	0001                	nop
20405310:	50b2                	lw	ra,44(sp)
20405312:	5422                	lw	s0,40(sp)
20405314:	6145                	addi	sp,sp,48
20405316:	8082                	ret

20405318 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20405318:	7139                	addi	sp,sp,-64
2040531a:	de06                	sw	ra,60(sp)
2040531c:	dc22                	sw	s0,56(sp)
2040531e:	0080                	addi	s0,sp,64
20405320:	fca42623          	sw	a0,-52(s0)
20405324:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20405328:	fcc42783          	lw	a5,-52(s0)
2040532c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405330:	fcc42503          	lw	a0,-52(s0)
20405334:	c71ff0ef          	jal	ra,20404fa4 <__metal_driver_sifive_uart0_clock>
20405338:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
2040533c:	fcc42503          	lw	a0,-52(s0)
20405340:	c93ff0ef          	jal	ra,20404fd2 <__metal_driver_sifive_uart0_pinmux>
20405344:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20405348:	fe842783          	lw	a5,-24(s0)
2040534c:	c7b9                	beqz	a5,2040539a <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
2040534e:	fec42783          	lw	a5,-20(s0)
20405352:	20405737          	lui	a4,0x20405
20405356:	21070713          	addi	a4,a4,528 # 20405210 <pre_rate_change_callback_func>
2040535a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
2040535c:	fec42783          	lw	a5,-20(s0)
20405360:	fcc42703          	lw	a4,-52(s0)
20405364:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405366:	fec42783          	lw	a5,-20(s0)
2040536a:	07a1                	addi	a5,a5,8
2040536c:	85be                	mv	a1,a5
2040536e:	fe842503          	lw	a0,-24(s0)
20405372:	20f1                	jal	2040543e <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405374:	fec42783          	lw	a5,-20(s0)
20405378:	20405737          	lui	a4,0x20405
2040537c:	2e870713          	addi	a4,a4,744 # 204052e8 <post_rate_change_callback_func>
20405380:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405382:	fec42783          	lw	a5,-20(s0)
20405386:	fcc42703          	lw	a4,-52(s0)
2040538a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
2040538c:	fec42783          	lw	a5,-20(s0)
20405390:	07d1                	addi	a5,a5,20
20405392:	85be                	mv	a1,a5
20405394:	fe842503          	lw	a0,-24(s0)
20405398:	28d9                	jal	2040546e <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
2040539a:	fec42783          	lw	a5,-20(s0)
2040539e:	fc842583          	lw	a1,-56(s0)
204053a2:	853e                	mv	a0,a5
204053a4:	d0dfc0ef          	jal	ra,204020b0 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
204053a8:	fe442783          	lw	a5,-28(s0)
204053ac:	cb95                	beqz	a5,204053e0 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
204053ae:	fcc42503          	lw	a0,-52(s0)
204053b2:	c4bff0ef          	jal	ra,20404ffc <__metal_driver_sifive_uart0_pinmux_output_selector>
204053b6:	87aa                	mv	a5,a0
204053b8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
204053bc:	fcc42503          	lw	a0,-52(s0)
204053c0:	c67ff0ef          	jal	ra,20405026 <__metal_driver_sifive_uart0_pinmux_source_selector>
204053c4:	87aa                	mv	a5,a0
204053c6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
204053ca:	fe442783          	lw	a5,-28(s0)
204053ce:	439c                	lw	a5,0(a5)
204053d0:	53dc                	lw	a5,36(a5)
204053d2:	fdc42603          	lw	a2,-36(s0)
204053d6:	fe042583          	lw	a1,-32(s0)
204053da:	fe442503          	lw	a0,-28(s0)
204053de:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
204053e0:	0001                	nop
204053e2:	50f2                	lw	ra,60(sp)
204053e4:	5462                	lw	s0,56(sp)
204053e6:	6121                	addi	sp,sp,64
204053e8:	8082                	ret

204053ea <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
204053ea:	7179                	addi	sp,sp,-48
204053ec:	d622                	sw	s0,44(sp)
204053ee:	1800                	addi	s0,sp,48
204053f0:	fca42e23          	sw	a0,-36(s0)
204053f4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
204053f8:	fd842783          	lw	a5,-40(s0)
204053fc:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405400:	fdc42783          	lw	a5,-36(s0)
20405404:	e781                	bnez	a5,2040540c <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405406:	fd842783          	lw	a5,-40(s0)
2040540a:	a035                	j	20405436 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
2040540c:	fdc42783          	lw	a5,-36(s0)
20405410:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405414:	a031                	j	20405420 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405416:	fec42783          	lw	a5,-20(s0)
2040541a:	479c                	lw	a5,8(a5)
2040541c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20405420:	fec42783          	lw	a5,-20(s0)
20405424:	479c                	lw	a5,8(a5)
20405426:	fbe5                	bnez	a5,20405416 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20405428:	fec42783          	lw	a5,-20(s0)
2040542c:	fd842703          	lw	a4,-40(s0)
20405430:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20405432:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20405436:	853e                	mv	a0,a5
20405438:	5432                	lw	s0,44(sp)
2040543a:	6145                	addi	sp,sp,48
2040543c:	8082                	ret

2040543e <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
2040543e:	1101                	addi	sp,sp,-32
20405440:	ce06                	sw	ra,28(sp)
20405442:	cc22                	sw	s0,24(sp)
20405444:	1000                	addi	s0,sp,32
20405446:	fea42623          	sw	a0,-20(s0)
2040544a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
2040544e:	fec42783          	lw	a5,-20(s0)
20405452:	43dc                	lw	a5,4(a5)
20405454:	fe842583          	lw	a1,-24(s0)
20405458:	853e                	mv	a0,a5
2040545a:	3f41                	jal	204053ea <_metal_clock_append_to_callbacks>
2040545c:	872a                	mv	a4,a0
2040545e:	fec42783          	lw	a5,-20(s0)
20405462:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405464:	0001                	nop
20405466:	40f2                	lw	ra,28(sp)
20405468:	4462                	lw	s0,24(sp)
2040546a:	6105                	addi	sp,sp,32
2040546c:	8082                	ret

2040546e <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
2040546e:	1101                	addi	sp,sp,-32
20405470:	ce06                	sw	ra,28(sp)
20405472:	cc22                	sw	s0,24(sp)
20405474:	1000                	addi	s0,sp,32
20405476:	fea42623          	sw	a0,-20(s0)
2040547a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
2040547e:	fec42783          	lw	a5,-20(s0)
20405482:	479c                	lw	a5,8(a5)
20405484:	fe842583          	lw	a1,-24(s0)
20405488:	853e                	mv	a0,a5
2040548a:	3785                	jal	204053ea <_metal_clock_append_to_callbacks>
2040548c:	872a                	mv	a4,a0
2040548e:	fec42783          	lw	a5,-20(s0)
20405492:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405494:	0001                	nop
20405496:	40f2                	lw	ra,28(sp)
20405498:	4462                	lw	s0,24(sp)
2040549a:	6105                	addi	sp,sp,32
2040549c:	8082                	ret

2040549e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
2040549e:	1101                	addi	sp,sp,-32
204054a0:	ce06                	sw	ra,28(sp)
204054a2:	cc22                	sw	s0,24(sp)
204054a4:	1000                	addi	s0,sp,32
204054a6:	fea42623          	sw	a0,-20(s0)
204054aa:	fec42783          	lw	a5,-20(s0)
204054ae:	439c                	lw	a5,0(a5)
204054b0:	57dc                	lw	a5,44(a5)
204054b2:	fec42503          	lw	a0,-20(s0)
204054b6:	9782                	jalr	a5
204054b8:	87aa                	mv	a5,a0
204054ba:	853e                	mv	a0,a5
204054bc:	40f2                	lw	ra,28(sp)
204054be:	4462                	lw	s0,24(sp)
204054c0:	6105                	addi	sp,sp,32
204054c2:	8082                	ret

204054c4 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
204054c4:	1101                	addi	sp,sp,-32
204054c6:	ce22                	sw	s0,28(sp)
204054c8:	1000                	addi	s0,sp,32
204054ca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
204054ce:	fec42783          	lw	a5,-20(s0)
204054d2:	eb89                	bnez	a5,204054e4 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
204054d4:	fec42703          	lw	a4,-20(s0)
204054d8:	070a                	slli	a4,a4,0x2
204054da:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204054de:	97ba                	add	a5,a5,a4
204054e0:	439c                	lw	a5,0(a5)
204054e2:	a011                	j	204054e6 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
204054e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
204054e6:	853e                	mv	a0,a5
204054e8:	4472                	lw	s0,28(sp)
204054ea:	6105                	addi	sp,sp,32
204054ec:	8082                	ret

204054ee <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
204054ee:	1101                	addi	sp,sp,-32
204054f0:	ce22                	sw	s0,28(sp)
204054f2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
204054f4:	f14027f3          	csrr	a5,mhartid
204054f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
204054fc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405500:	853e                	mv	a0,a5
20405502:	4472                	lw	s0,28(sp)
20405504:	6105                	addi	sp,sp,32
20405506:	8082                	ret

20405508 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405508:	1101                	addi	sp,sp,-32
2040550a:	ce22                	sw	s0,28(sp)
2040550c:	1000                	addi	s0,sp,32
2040550e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405512:	0001                	nop
20405514:	bffd                	j	20405512 <metal_shutdown+0xa>
	...

20405580 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405580:	c86fd06f          	j	20402a06 <metal_interrupt_vector_handler>

20405584 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405584:	c82fd06f          	j	20402a06 <metal_interrupt_vector_handler>

20405588 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405588:	c7efd06f          	j	20402a06 <metal_interrupt_vector_handler>

2040558c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040558c:	ca8fd06f          	j	20402a34 <metal_software_interrupt_vector_handler>

20405590 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405590:	c76fd06f          	j	20402a06 <metal_interrupt_vector_handler>

20405594 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405594:	c72fd06f          	j	20402a06 <metal_interrupt_vector_handler>

20405598 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405598:	c6efd06f          	j	20402a06 <metal_interrupt_vector_handler>

2040559c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040559c:	d8afd06f          	j	20402b26 <metal_timer_interrupt_vector_handler>

204055a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204055a0:	c66fd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204055a4:	c62fd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204055a8:	c5efd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204055ac:	c5afd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204055b0:	c56fd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204055b4:	c52fd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204055b8:	c4efd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204055bc:	c4afd06f          	j	20402a06 <metal_interrupt_vector_handler>

204055c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204055c0:	835fd06f          	j	20402df4 <metal_lc0_interrupt_vector_handler>

204055c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204055c4:	8c3fd06f          	j	20402e86 <metal_lc1_interrupt_vector_handler>

204055c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204055c8:	951fd06f          	j	20402f18 <metal_lc2_interrupt_vector_handler>

204055cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204055cc:	9dffd06f          	j	20402faa <metal_lc3_interrupt_vector_handler>

204055d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204055d0:	a6dfd06f          	j	2040303c <metal_lc4_interrupt_vector_handler>

204055d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204055d4:	afbfd06f          	j	204030ce <metal_lc5_interrupt_vector_handler>

204055d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204055d8:	b89fd06f          	j	20403160 <metal_lc6_interrupt_vector_handler>

204055dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204055dc:	c17fd06f          	j	204031f2 <metal_lc7_interrupt_vector_handler>

204055e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204055e0:	ca5fd06f          	j	20403284 <metal_lc8_interrupt_vector_handler>

204055e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204055e4:	d33fd06f          	j	20403316 <metal_lc9_interrupt_vector_handler>

204055e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204055e8:	dc1fd06f          	j	204033a8 <metal_lc10_interrupt_vector_handler>

204055ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204055ec:	e4ffd06f          	j	2040343a <metal_lc11_interrupt_vector_handler>

204055f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204055f0:	eddfd06f          	j	204034cc <metal_lc12_interrupt_vector_handler>

204055f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204055f4:	f6bfd06f          	j	2040355e <metal_lc13_interrupt_vector_handler>

204055f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204055f8:	ff9fd06f          	j	204035f0 <metal_lc14_interrupt_vector_handler>

204055fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204055fc:	886fe06f          	j	20403682 <metal_lc15_interrupt_vector_handler>

20405600 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405600:	1101                	addi	sp,sp,-32
20405602:	ce22                	sw	s0,28(sp)
20405604:	1000                	addi	s0,sp,32
20405606:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040560a:	fec42703          	lw	a4,-20(s0)
2040560e:	800007b7          	lui	a5,0x80000
20405612:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xfff9fd94>
20405616:	00f71763          	bne	a4,a5,20405624 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040561a:	03dfd7b7          	lui	a5,0x3dfd
2040561e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405622:	a011                	j	20405626 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405624:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405626:	853e                	mv	a0,a5
20405628:	4472                	lw	s0,28(sp)
2040562a:	6105                	addi	sp,sp,32
2040562c:	8082                	ret

2040562e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040562e:	1101                	addi	sp,sp,-32
20405630:	ce06                	sw	ra,28(sp)
20405632:	cc22                	sw	s0,24(sp)
20405634:	1000                	addi	s0,sp,32
20405636:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040563a:	fec42503          	lw	a0,-20(s0)
2040563e:	37c9                	jal	20405600 <__metal_driver_fixed_clock_rate>
20405640:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405642:	853e                	mv	a0,a5
20405644:	40f2                	lw	ra,28(sp)
20405646:	4462                	lw	s0,24(sp)
20405648:	6105                	addi	sp,sp,32
2040564a:	8082                	ret

2040564c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040564c:	1101                	addi	sp,sp,-32
2040564e:	ce06                	sw	ra,28(sp)
20405650:	cc22                	sw	s0,24(sp)
20405652:	1000                	addi	s0,sp,32
20405654:	fea42623          	sw	a0,-20(s0)
20405658:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040565c:	fec42503          	lw	a0,-20(s0)
20405660:	37f9                	jal	2040562e <__metal_driver_fixed_clock_get_rate_hz>
20405662:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405664:	853e                	mv	a0,a5
20405666:	40f2                	lw	ra,28(sp)
20405668:	4462                	lw	s0,24(sp)
2040566a:	6105                	addi	sp,sp,32
2040566c:	8082                	ret

2040566e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040566e:	1101                	addi	sp,sp,-32
20405670:	ce06                	sw	ra,28(sp)
20405672:	cc22                	sw	s0,24(sp)
20405674:	1000                	addi	s0,sp,32
20405676:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040567a:	fec42503          	lw	a0,-20(s0)
2040567e:	3569                	jal	20405508 <metal_shutdown>
