
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/debug/matmul.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/debug/matmul.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005744 memsz 0x00005744 flags rwx
    LOAD off    0x00006770 vaddr 0x80000770 paddr 0x80000770 align 2**12
         filesz 0x00000000 memsz 0x0000114c flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405748 align 2**12
         filesz 0x00000770 memsz 0x00000770 flags rw-
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00007770 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005100  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000440  20405300  20405300  00006300  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405740  20405740  00006740  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00000770  80000000  20405748  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              0000054c  80000770  80000770  00006770  2**3  ALLOC
  6 .stack            00000400  80000cbc  80000cbc  00006770  2**0  ALLOC
  7 .heap             00000800  800010bc  800010bc  00006770  2**0  ALLOC
  8 .debug_info       00014262  00000000  00000000  00007770  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002708  00000000  00000000  0001b9d2  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008b0  00000000  00000000  0001e0e0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000748  00000000  00000000  0001e990  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007942  00000000  00000000  0001f0d8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036b5  00000000  00000000  00026a1a  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002a0cf  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002a0f7  2**0  CONTENTS, READONLY
 16 .debug_frame      00002400  00000000  00000000  0002a124  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405300 l    d  .rodata	00000000 .rodata
20405740 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80000770 l    d  .bss	00000000 .bss
80000cbc l    d  .stack	00000000 .stack
800010bc l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
204053f0 l       .rodata	00000000 argv
204053f4 l       .rodata	00000000 envp
204053f8 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 matmul.c
8000077c l     O .bss	00000190 sa
8000090c l     O .bss	00000190 sb
80000a9c l     O .bss	00000190 sc
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400ace l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
2040101e l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000750 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000c2c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401cf4 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401d9e l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401dc4 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401de8 l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401e24 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401f84 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204024b6 l     F .text	00000024 __metal_driver_cpu_hartid
204024da l     F .text	0000002a __metal_driver_cpu_timebase
20402504 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403d10 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403d3a l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403d62 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403d8a l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403db2 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
204042f2 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404318 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404342 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404ba4 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404bce l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404bfc l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404c24 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404c52 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404c7c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404ca6 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404e90 l     F .text	000000d8 pre_rate_change_callback_func
20404f68 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405200 l       .text	00000000 IRQ_0
20405204 l       .text	00000000 IRQ_1
20405208 l       .text	00000000 IRQ_2
2040520c l       .text	00000000 IRQ_3
20405210 l       .text	00000000 IRQ_4
20405214 l       .text	00000000 IRQ_5
20405218 l       .text	00000000 IRQ_6
2040521c l       .text	00000000 IRQ_7
20405220 l       .text	00000000 IRQ_8
20405224 l       .text	00000000 IRQ_9
20405228 l       .text	00000000 IRQ_10
2040522c l       .text	00000000 IRQ_11
20405230 l       .text	00000000 IRQ_12
20405234 l       .text	00000000 IRQ_13
20405238 l       .text	00000000 IRQ_14
2040523c l       .text	00000000 IRQ_15
20405240 l       .text	00000000 IRQ_LC0
20405244 l       .text	00000000 IRQ_LC1
20405248 l       .text	00000000 IRQ_LC2
2040524c l       .text	00000000 IRQ_LC3
20405250 l       .text	00000000 IRQ_LC4
20405254 l       .text	00000000 IRQ_LC5
20405258 l       .text	00000000 IRQ_LC6
2040525c l       .text	00000000 IRQ_LC7
20405260 l       .text	00000000 IRQ_LC8
20405264 l       .text	00000000 IRQ_LC9
20405268 l       .text	00000000 IRQ_LC10
2040526c l       .text	00000000 IRQ_LC11
20405270 l       .text	00000000 IRQ_LC12
20405274 l       .text	00000000 IRQ_LC13
20405278 l       .text	00000000 IRQ_LC14
2040527c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405280 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405744 l       .init_array	00000000 __fini_array_end
20405744 l       .init_array	00000000 __fini_array_start
20405744 l       .init_array	00000000 __init_array_end
20405740 l       .init_array	00000000 __preinit_array_end
20405740 l       .init_array	00000000 __init_array_start
20405740 l       .init_array	00000000 __preinit_array_start
204005ba g     F .text	0000002c putchar
20405720 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401482 g     F .text	00000028 _isatty_r
20402cbc  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400668 g     F .text	000000da _puts_r
204014aa g     F .text	0000002c _lseek_r
20404df4 g     F .text	0000009c __metal_driver_sifive_uart0_set_baud_rate
20402160 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402c2a  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
2040347c g     F .text	00000038 __metal_valid_interrupt_id
20400576 g     F .text	00000044 printf
2040389e g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f48 g       .data	00000000 __global_pointer$
2040506a g     F .text	00000054 _metal_clock_append_to_callbacks
20403e02 g     F .text	00000038 __metal_plic0_complete_interrupt
204036fc g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
204013c8 g     F .text	00000036 __sseek
20400b84 g     F .text	0000006a __sinit
20400750 g     F .text	000000c0 __swbuf_r
20400b40 g     F .text	00000044 __sfmoreglue
204014f2 g     F .text	00000002 __malloc_unlock
20405144 g     F .text	0000002a metal_cpu_get
2040039c g     F .text	00000110 mm
80000728 g     O .data	00000020 __metal_dt_serial_10013000
2040477e g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20405404 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80000cbc g       .bss	00000000 metal_segment_bss_target_end
20401e54 g     F .text	0000009a __metal_clint0_mtime_get
20403ca4 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404534 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
20401a7c g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404d10 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80000770 g       .bss	00000000 metal_segment_bss_target_start
20401eee g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401458 g     F .text	0000002a _fstat_r
204049ce g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80000cb8 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
204050be g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402f96  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405658 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
20405618 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401d70 g     F .text	0000002e metal_uart_set_baud_rate
20404f98 g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403932 g     F .text	00000072 __metal_driver_cpu_mcycle_get
800010bc g       .heap	00000000 metal_segment_heap_target_start
20400b36 g     F .text	0000000a _cleanup_r
80000760 g     O .data	00000004 __metal_dt_cpu_0
20402f04  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400742 g     F .text	0000000e puts
204031de  w    F .text	00000092 metal_lc13_interrupt_vector_handler
20402698 g     F .text	00000018 __metal_default_exception_handler
204018f0 g     F .text	00000026 _fstat
20402482 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403e9e g     F .text	00000062 __metal_plic0_set_priority
204038ba g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
2040252e g     F .text	0000002c __metal_driver_cpu_get
204055cc g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
2040258c g     F .text	00000018 __metal_interrupt_global_disable
20402e72  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20403028  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401322 g     F .text	00000028 _sbrk_r
204042aa g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403570 g     F .text	0000004e __metal_exception_register
204018a2 g     F .text	0000002c _read_r
20403ac6 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404610 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
20402784 g     F .text	00000064 __metal_default_sw_handler
204050ee g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404cd0 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401916 g     F .text	00000020 _isatty
204046d6 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80000768 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000074c g     O .data	00000004 _global_impure_ptr
204027e8  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401aec g     F .text	0000006a __libc_init_array
20404650 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
204030ba  w    F .text	00000092 metal_lc11_interrupt_vector_handler
2040384a g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
2040198a g     F .text	0000007a _sbrk
204045ca g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
204025ee g     F .text	0000001a __metal_interrupt_timer_disable
204047c8 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403b7c g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204056e4 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404716 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401ab4 g     F .text	00000038 __libc_fini_array
20404b56 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403b06 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402640 g     F .text	0000002c __metal_interrupt_local_enable
2040244e g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401ca2 g     F .text	0000002c metal_tty_putc
204002a4 g     F .text	000000f8 init_matrix
20403fc0 g     F .text	00000018 __metal_plic0_default_handler
204005e6 g     F .text	00000082 _putc_r
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405354 g     O .rodata	00000020 __sf_fake_stderr
20402624 g     F .text	0000001c __metal_interrupt_external_disable
20404cee g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403916 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204035be g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401048 g     F .text	00000042 __sfputs_r
20403c5e g     F .text	00000046 __metal_driver_cpu_exception_register
204025a4 g     F .text	00000018 __metal_interrupt_software_enable
20402b06  w    F .text	00000092 metal_lc1_interrupt_vector_handler
204014d6 g     F .text	0000001a memchr
20400e94 g     F .text	000000ac _free_r
80000778 g     O .bss	00000004 _global_atexit
20403394 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401bda g     F .text	000000c8 __call_exitprocs
800010bc g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401936 g     F .text	0000002a _lseek
20403c3e g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403cd2 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402608 g     F .text	0000001c __metal_interrupt_external_enable
20401b56 g     F .text	00000084 __register_exitproc
20404d42 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20404066 g     F .text	0000013c __metal_driver_riscv_plic0_init
20404262 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204045a0 g     F .text	0000002a __metal_driver_sifive_gpio0_output
20402de0  w    F .text	00000092 metal_lc6_interrupt_vector_handler
2040255a g     F .text	0000001a __metal_myhart_id
20404b76 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204026f6  w    F .text	0000008e metal_software_interrupt_vector_handler
20403874 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401430 g     F .text	00000028 _close_r
20404dd4 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402042 g     F .text	000000da __metal_driver_riscv_clint0_register
80000758 g     O .data	00000008 __metal_dt_clint_2000000
20400810 g     F .text	00000110 __swsetup_r
20400bee g     F .text	0000009e __sfp
2040134a g     F .text	00000030 __sread
204044f6 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
204026c8  w    F .text	0000002e metal_interrupt_vector_handler
204014f0 g     F .text	00000002 __malloc_lock
20400a6a g     F .text	00000064 _fflush_r
20403e72 g     F .text	0000002c __metal_plic0_get_threshold
20405374 g     O .rodata	00000020 __sf_fake_stdin
204034b4 g     F .text	000000bc __metal_local_interrupt_enable
20402318 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400dec g     F .text	000000a8 memset
20402d4e  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204004ac g     F .text	000000ca main
80000770 g       .data	00000000 metal_segment_data_target_end
20403b1a g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403bde g     F .text	00000060 __metal_driver_cpu_get_msip
20405188 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403cf0 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403dd4 g     F .text	0000002e __metal_plic0_claim_interrupt
204013fe g     F .text	00000006 __sclose
2040314c  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400f40 g     F .text	000000de _malloc_r
20402144 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
204039a4 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
2040516e g     F .text	0000001a metal_cpu_get_current_hartid
20405200 g       .text	00000000 __metal_vector_table
20405748 g       *ABS*	00000000 metal_segment_itim_source_start
80000754  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20400576 g     F .text	00000044 iprintf
20402574 g     F .text	00000018 __metal_interrupt_global_enable
20401a72 g     F .text	0000000a atexit
20401cce g     F .text	00000026 metal_tty_putc_raw
20401404 g     F .text	0000002c _write_r
204025d4 g     F .text	0000001a __metal_interrupt_timer_enable
20404d80 g     F .text	00000054 __metal_driver_sifive_uart0_getc
20402266 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
204014f4 g     F .text	0000010c _printf_common
80000748 g     O .data	00000004 _impure_ptr
20403a50 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400920 g     F .text	0000014a __sflush_r
204052ae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204021b4 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405748 g       *ABS*	00000000 metal_segment_data_source_start
800018bc g       .heap	00000000 metal_segment_heap_target_end
204033e4 g     F .text	00000098 __metal_controller_interrupt_vector
80000428 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400cf8 g     F .text	00000058 __swhatbuf_r
20404690 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402876 g     F .text	00000066 __metal_default_timer_handler
20401a04 g     F .text	0000006e _write
20403fd8 g     F .text	0000008e __metal_plic0_handler
20402b98  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403302  w    F .text	00000092 metal_lc15_interrupt_vector_handler
2040511e g     F .text	00000026 metal_cpu_interrupt_controller
2040137a g     F .text	0000004e __swrite
20401a88 g     F .text	0000002c exit
2040108a g     F .text	00000298 _vfiprintf_r
20400c8c g     F .text	0000006c _fwalk_reent
204052cc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405394 g     O .rodata	00000020 __sf_fake_stdout
80000764 g     O .data	00000004 __metal_dt_gpio_10012000
204026b0 g     F .text	00000018 __metal_default_interrupt_handler
20401d42 g     F .text	0000002e metal_uart_putc
20401960 g     F .text	0000002a _read
20404578 g     F .text	00000028 __metal_driver_sifive_gpio0_input
20402900 g     F .text	0000014e __metal_exception_handler
20402a74  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204052ee g     F .text	00000012 _exit
204039ea g     F .text	00000066 __metal_driver_cpu_mtime_get
20400d50 g     F .text	0000009c __smakebuf_r
2040211c g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401600 g     F .text	000002a2 _printf_i
80000774 g     O .bss	00000004 __malloc_sbrk_start
20403270  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401fba g     F .text	00000088 __metal_driver_riscv_clint0_init
80000770 g     O .bss	00000004 __malloc_free_list
2040108a g     F .text	00000298 _vfprintf_r
20403adc g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403f34 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403af0 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
2040266c g     F .text	0000002c __metal_interrupt_local_disable
204025bc g     F .text	00000018 __metal_interrupt_software_disable
20403f00 g     F .text	00000034 __metal_plic0_get_priority
20401d16 g     F .text	0000002c metal_uart_init
2040021e g     F .text	00000086 print_matrix
20403e3a g     F .text	00000038 __metal_plic0_set_threshold
204018ce g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
204041a2 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f4818193          	addi	gp,gp,-184 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	ec818193          	addi	gp,gp,-312 # 80000f48 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	17418113          	addi	sp,gp,372 # 800010bc <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00005297          	auipc	t0,0x5
204000ac:	6a028293          	addi	t0,t0,1696 # 20405748 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00005297          	auipc	t0,0x5
204000d8:	67428293          	addi	t0,t0,1652 # 20405748 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	66830313          	addi	t1,t1,1640 # 80000770 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	d7418393          	addi	t2,gp,-652 # 80000cbc <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	98e50513          	addi	a0,a0,-1650 # 20401ab4 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	145010ef          	jal	ra,20401a72 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	1bb010ef          	jal	ra,20401aec <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	29658593          	addi	a1,a1,662 # 204053f0 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	29260613          	addi	a2,a2,658 # 204053f4 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	11d010ef          	jal	ra,20401a88 <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2605                	jal	204004ac <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <print_matrix>:
print_matrix():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:21
#ifndef WITH_MALLOC
static element_t sa[N * N], sb[N * N], sc[N * N];
#endif
#ifdef PFDEBUG

void print_matrix(element_t *a, int n, int m) {
2040021e:	7179                	addi	sp,sp,-48
20400220:	d606                	sw	ra,44(sp)
20400222:	d422                	sw	s0,40(sp)
20400224:	1800                	addi	s0,sp,48
20400226:	fca42e23          	sw	a0,-36(s0)
2040022a:	fcb42c23          	sw	a1,-40(s0)
2040022e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:23
    int i, j;
    for (i = 0; i < n; i++) {
20400232:	fe042623          	sw	zero,-20(s0)
20400236:	a891                	j	2040028a <print_matrix+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:24
        for (j = 0; j < m; j++)
20400238:	fe042423          	sw	zero,-24(s0)
2040023c:	a815                	j	20400270 <print_matrix+0x52>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:25 (discriminator 3)
            printf("%x ", a[i * n + j]);
2040023e:	fec42703          	lw	a4,-20(s0)
20400242:	fd842783          	lw	a5,-40(s0)
20400246:	02f70733          	mul	a4,a4,a5
2040024a:	fe842783          	lw	a5,-24(s0)
2040024e:	97ba                	add	a5,a5,a4
20400250:	078a                	slli	a5,a5,0x2
20400252:	fdc42703          	lw	a4,-36(s0)
20400256:	97ba                	add	a5,a5,a4
20400258:	439c                	lw	a5,0(a5)
2040025a:	85be                	mv	a1,a5
2040025c:	204057b7          	lui	a5,0x20405
20400260:	30078513          	addi	a0,a5,768 # 20405300 <_exit+0x12>
20400264:	2e09                	jal	20400576 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:24 (discriminator 3)
        for (j = 0; j < m; j++)
20400266:	fe842783          	lw	a5,-24(s0)
2040026a:	0785                	addi	a5,a5,1
2040026c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:24 (discriminator 1)
20400270:	fe842703          	lw	a4,-24(s0)
20400274:	fd442783          	lw	a5,-44(s0)
20400278:	fcf743e3          	blt	a4,a5,2040023e <print_matrix+0x20>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:26 (discriminator 2)
        printf("\n");
2040027c:	4529                	li	a0,10
2040027e:	2e35                	jal	204005ba <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:23 (discriminator 2)
    for (i = 0; i < n; i++) {
20400280:	fec42783          	lw	a5,-20(s0)
20400284:	0785                	addi	a5,a5,1
20400286:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:23 (discriminator 1)
2040028a:	fec42703          	lw	a4,-20(s0)
2040028e:	fd842783          	lw	a5,-40(s0)
20400292:	faf743e3          	blt	a4,a5,20400238 <print_matrix+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:28
    }
    printf("\n");
20400296:	4529                	li	a0,10
20400298:	260d                	jal	204005ba <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:29
}
2040029a:	0001                	nop
2040029c:	50b2                	lw	ra,44(sp)
2040029e:	5422                	lw	s0,40(sp)
204002a0:	6145                	addi	sp,sp,48
204002a2:	8082                	ret

204002a4 <init_matrix>:
init_matrix():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:33

#endif

void init_matrix(element_t **a, element_t **b, element_t **c, int n) {
204002a4:	7179                	addi	sp,sp,-48
204002a6:	d622                	sw	s0,44(sp)
204002a8:	1800                	addi	s0,sp,48
204002aa:	fca42e23          	sw	a0,-36(s0)
204002ae:	fcb42c23          	sw	a1,-40(s0)
204002b2:	fcc42a23          	sw	a2,-44(s0)
204002b6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:41
#ifdef WITH_MALLOC
    *a = (element_t*)malloc(n * n * sizeof(element_t));
    *b = (element_t*)malloc(n * n * sizeof(element_t));
    *c = (element_t*)malloc(n * n * sizeof(element_t));
#else
    *a = &(sa[0]);
204002ba:	fdc42783          	lw	a5,-36(s0)
204002be:	80000737          	lui	a4,0x80000
204002c2:	77c70713          	addi	a4,a4,1916 # 8000077c <metal_segment_heap_target_end+0xffffeec0>
204002c6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:42
    *b = &(sb[0]);
204002c8:	fd842783          	lw	a5,-40(s0)
204002cc:	80001737          	lui	a4,0x80001
204002d0:	90c70713          	addi	a4,a4,-1780 # 8000090c <metal_segment_heap_target_end+0xfffff050>
204002d4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:43
    *c = &(sc[0]);
204002d6:	fd442783          	lw	a5,-44(s0)
204002da:	b5418713          	addi	a4,gp,-1196 # 80000a9c <sc>
204002de:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:46
#endif

    for (i = 0; i < n; i++)
204002e0:	fe042623          	sw	zero,-20(s0)
204002e4:	a0a5                	j	2040034c <init_matrix+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:47
        for (j = 0; j < n; j++) {
204002e6:	fe042423          	sw	zero,-24(s0)
204002ea:	a0b1                	j	20400336 <init_matrix+0x92>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:48 (discriminator 3)
            (*a)[i * n + j] = zero;
204002ec:	fdc42783          	lw	a5,-36(s0)
204002f0:	4398                	lw	a4,0(a5)
204002f2:	fec42683          	lw	a3,-20(s0)
204002f6:	fd042783          	lw	a5,-48(s0)
204002fa:	02f686b3          	mul	a3,a3,a5
204002fe:	fe842783          	lw	a5,-24(s0)
20400302:	97b6                	add	a5,a5,a3
20400304:	078a                	slli	a5,a5,0x2
20400306:	97ba                	add	a5,a5,a4
20400308:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:49 (discriminator 3)
            (*b)[i * n + j] = pi;
2040030c:	fd842783          	lw	a5,-40(s0)
20400310:	4398                	lw	a4,0(a5)
20400312:	fec42683          	lw	a3,-20(s0)
20400316:	fd042783          	lw	a5,-48(s0)
2040031a:	02f686b3          	mul	a3,a3,a5
2040031e:	fe842783          	lw	a5,-24(s0)
20400322:	97b6                	add	a5,a5,a3
20400324:	078a                	slli	a5,a5,0x2
20400326:	97ba                	add	a5,a5,a4
20400328:	470d                	li	a4,3
2040032a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:47 (discriminator 3)
        for (j = 0; j < n; j++) {
2040032c:	fe842783          	lw	a5,-24(s0)
20400330:	0785                	addi	a5,a5,1
20400332:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:47 (discriminator 1)
20400336:	fe842703          	lw	a4,-24(s0)
2040033a:	fd042783          	lw	a5,-48(s0)
2040033e:	faf747e3          	blt	a4,a5,204002ec <init_matrix+0x48>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:46 (discriminator 2)
    for (i = 0; i < n; i++)
20400342:	fec42783          	lw	a5,-20(s0)
20400346:	0785                	addi	a5,a5,1
20400348:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:46 (discriminator 1)
2040034c:	fec42703          	lw	a4,-20(s0)
20400350:	fd042783          	lw	a5,-48(s0)
20400354:	f8f749e3          	blt	a4,a5,204002e6 <init_matrix+0x42>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:52
        }

    for (i = 0; i < n; i++)
20400358:	fe042623          	sw	zero,-20(s0)
2040035c:	a035                	j	20400388 <init_matrix+0xe4>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:53 (discriminator 3)
        (*a)[i * n + i] = one;
2040035e:	fdc42783          	lw	a5,-36(s0)
20400362:	4398                	lw	a4,0(a5)
20400364:	fec42683          	lw	a3,-20(s0)
20400368:	fd042783          	lw	a5,-48(s0)
2040036c:	02f686b3          	mul	a3,a3,a5
20400370:	fec42783          	lw	a5,-20(s0)
20400374:	97b6                	add	a5,a5,a3
20400376:	078a                	slli	a5,a5,0x2
20400378:	97ba                	add	a5,a5,a4
2040037a:	4705                	li	a4,1
2040037c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:52 (discriminator 3)
    for (i = 0; i < n; i++)
2040037e:	fec42783          	lw	a5,-20(s0)
20400382:	0785                	addi	a5,a5,1
20400384:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:52 (discriminator 1)
20400388:	fec42703          	lw	a4,-20(s0)
2040038c:	fd042783          	lw	a5,-48(s0)
20400390:	fcf747e3          	blt	a4,a5,2040035e <init_matrix+0xba>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:54
}
20400394:	0001                	nop
20400396:	5432                	lw	s0,44(sp)
20400398:	6145                	addi	sp,sp,48
2040039a:	8082                	ret

2040039c <mm>:
mm():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:56

void mm(element_t *a, element_t *b, element_t *c, int n, int m, int p) {
2040039c:	7139                	addi	sp,sp,-64
2040039e:	de06                	sw	ra,60(sp)
204003a0:	dc22                	sw	s0,56(sp)
204003a2:	0080                	addi	s0,sp,64
204003a4:	fca42e23          	sw	a0,-36(s0)
204003a8:	fcb42c23          	sw	a1,-40(s0)
204003ac:	fcc42a23          	sw	a2,-44(s0)
204003b0:	fcd42823          	sw	a3,-48(s0)
204003b4:	fce42623          	sw	a4,-52(s0)
204003b8:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:58
    int i, j, k;
    unsigned r = 0;
204003bc:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:60

    for (i = 0; i < n; i++) {
204003c0:	fe042623          	sw	zero,-20(s0)
204003c4:	a8c9                	j	20400496 <mm+0xfa>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:61
        printf("round %d %d\n", i, r);
204003c6:	fe042603          	lw	a2,-32(s0)
204003ca:	fec42583          	lw	a1,-20(s0)
204003ce:	204057b7          	lui	a5,0x20405
204003d2:	30478513          	addi	a0,a5,772 # 20405304 <_exit+0x16>
204003d6:	2245                	jal	20400576 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:62
        for (j = 0; j < p; j++) {
204003d8:	fe042423          	sw	zero,-24(s0)
204003dc:	a055                	j	20400480 <mm+0xe4>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:63
            r = 0;
204003de:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:64
            for (k = 0; k < m; k++) {
204003e2:	fe042223          	sw	zero,-28(s0)
204003e6:	a889                	j	20400438 <mm+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:65 (discriminator 3)
                r = r + a[i * m + k] * b[k * p + j];
204003e8:	fec42703          	lw	a4,-20(s0)
204003ec:	fcc42783          	lw	a5,-52(s0)
204003f0:	02f70733          	mul	a4,a4,a5
204003f4:	fe442783          	lw	a5,-28(s0)
204003f8:	97ba                	add	a5,a5,a4
204003fa:	078a                	slli	a5,a5,0x2
204003fc:	fdc42703          	lw	a4,-36(s0)
20400400:	97ba                	add	a5,a5,a4
20400402:	4398                	lw	a4,0(a5)
20400404:	fe442683          	lw	a3,-28(s0)
20400408:	fc842783          	lw	a5,-56(s0)
2040040c:	02f686b3          	mul	a3,a3,a5
20400410:	fe842783          	lw	a5,-24(s0)
20400414:	97b6                	add	a5,a5,a3
20400416:	078a                	slli	a5,a5,0x2
20400418:	fd842683          	lw	a3,-40(s0)
2040041c:	97b6                	add	a5,a5,a3
2040041e:	439c                	lw	a5,0(a5)
20400420:	02f707b3          	mul	a5,a4,a5
20400424:	fe042703          	lw	a4,-32(s0)
20400428:	97ba                	add	a5,a5,a4
2040042a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:64 (discriminator 3)
            for (k = 0; k < m; k++) {
2040042e:	fe442783          	lw	a5,-28(s0)
20400432:	0785                	addi	a5,a5,1
20400434:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:64 (discriminator 1)
20400438:	fe442703          	lw	a4,-28(s0)
2040043c:	fcc42783          	lw	a5,-52(s0)
20400440:	faf744e3          	blt	a4,a5,204003e8 <mm+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:67 (discriminator 2)
            }
            c[i * p + j] = r;
20400444:	fec42703          	lw	a4,-20(s0)
20400448:	fc842783          	lw	a5,-56(s0)
2040044c:	02f70733          	mul	a4,a4,a5
20400450:	fe842783          	lw	a5,-24(s0)
20400454:	97ba                	add	a5,a5,a4
20400456:	078a                	slli	a5,a5,0x2
20400458:	fd442703          	lw	a4,-44(s0)
2040045c:	97ba                	add	a5,a5,a4
2040045e:	fe042703          	lw	a4,-32(s0)
20400462:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:68 (discriminator 2)
            printf("round %d %d\n", i, r);
20400464:	fe042603          	lw	a2,-32(s0)
20400468:	fec42583          	lw	a1,-20(s0)
2040046c:	204057b7          	lui	a5,0x20405
20400470:	30478513          	addi	a0,a5,772 # 20405304 <_exit+0x16>
20400474:	2209                	jal	20400576 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:62 (discriminator 2)
        for (j = 0; j < p; j++) {
20400476:	fe842783          	lw	a5,-24(s0)
2040047a:	0785                	addi	a5,a5,1
2040047c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:62 (discriminator 1)
20400480:	fe842703          	lw	a4,-24(s0)
20400484:	fc842783          	lw	a5,-56(s0)
20400488:	f4f74be3          	blt	a4,a5,204003de <mm+0x42>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:60 (discriminator 2)
    for (i = 0; i < n; i++) {
2040048c:	fec42783          	lw	a5,-20(s0)
20400490:	0785                	addi	a5,a5,1
20400492:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:60 (discriminator 1)
20400496:	fec42703          	lw	a4,-20(s0)
2040049a:	fd042783          	lw	a5,-48(s0)
2040049e:	f2f744e3          	blt	a4,a5,204003c6 <mm+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:71
        }
    }
}
204004a2:	0001                	nop
204004a4:	50f2                	lw	ra,60(sp)
204004a6:	5462                	lw	s0,56(sp)
204004a8:	6121                	addi	sp,sp,64
204004aa:	8082                	ret

204004ac <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:74


int main() {
204004ac:	7179                	addi	sp,sp,-48
204004ae:	d606                	sw	ra,44(sp)
204004b0:	d422                	sw	s0,40(sp)
204004b2:	1800                	addi	s0,sp,48
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:75
    printf("hola inicio\n");
204004b4:	204057b7          	lui	a5,0x20405
204004b8:	31478513          	addi	a0,a5,788 # 20405314 <_exit+0x26>
204004bc:	2459                	jal	20400742 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:78
    element_t *a, *b, *c;
    // init matrix
    printf("hola 2\n");
204004be:	204057b7          	lui	a5,0x20405
204004c2:	32078513          	addi	a0,a5,800 # 20405320 <_exit+0x32>
204004c6:	2cb5                	jal	20400742 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:79
    init_matrix(&a, &b, &c, N);
204004c8:	fdc40613          	addi	a2,s0,-36
204004cc:	fe040713          	addi	a4,s0,-32
204004d0:	fe440793          	addi	a5,s0,-28
204004d4:	46a9                	li	a3,10
204004d6:	85ba                	mv	a1,a4
204004d8:	853e                	mv	a0,a5
204004da:	33e9                	jal	204002a4 <init_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:81
    // multiply
    printf("hola 3\n");
204004dc:	204057b7          	lui	a5,0x20405
204004e0:	32878513          	addi	a0,a5,808 # 20405328 <_exit+0x3a>
204004e4:	2cb9                	jal	20400742 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:82
    unsigned startc = rdcycle();
204004e6:	3b29                	jal	20400200 <rdcycle>
204004e8:	87aa                	mv	a5,a0
204004ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:83
    printf("hola 4\n");
204004ee:	204057b7          	lui	a5,0x20405
204004f2:	33078513          	addi	a0,a5,816 # 20405330 <_exit+0x42>
204004f6:	24b1                	jal	20400742 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:84
    mm(a, b, c, N, N, N);
204004f8:	fe442503          	lw	a0,-28(s0)
204004fc:	fe042583          	lw	a1,-32(s0)
20400500:	fdc42603          	lw	a2,-36(s0)
20400504:	47a9                	li	a5,10
20400506:	4729                	li	a4,10
20400508:	46a9                	li	a3,10
2040050a:	3d49                	jal	2040039c <mm>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:85
    printf("hola 5\n");
2040050c:	204057b7          	lui	a5,0x20405
20400510:	33878513          	addi	a0,a5,824 # 20405338 <_exit+0x4a>
20400514:	243d                	jal	20400742 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:86
    unsigned endc = rdcycle();
20400516:	31ed                	jal	20400200 <rdcycle>
20400518:	87aa                	mv	a5,a0
2040051a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:87
    endc = endc - startc;
2040051e:	fe842703          	lw	a4,-24(s0)
20400522:	fec42783          	lw	a5,-20(s0)
20400526:	40f707b3          	sub	a5,a4,a5
2040052a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:88
    printf("hola");
2040052e:	204057b7          	lui	a5,0x20405
20400532:	34078513          	addi	a0,a5,832 # 20405340 <_exit+0x52>
20400536:	2081                	jal	20400576 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:90
#ifdef PFDEBUG
    printf("Cycles %x\n", endc);
20400538:	fe842583          	lw	a1,-24(s0)
2040053c:	204057b7          	lui	a5,0x20405
20400540:	34878513          	addi	a0,a5,840 # 20405348 <_exit+0x5a>
20400544:	280d                	jal	20400576 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:91
    print_matrix(a, N, N);
20400546:	fe442783          	lw	a5,-28(s0)
2040054a:	4629                	li	a2,10
2040054c:	45a9                	li	a1,10
2040054e:	853e                	mv	a0,a5
20400550:	31f9                	jal	2040021e <print_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:92
    print_matrix(b, N, N);
20400552:	fe042783          	lw	a5,-32(s0)
20400556:	4629                	li	a2,10
20400558:	45a9                	li	a1,10
2040055a:	853e                	mv	a0,a5
2040055c:	31c9                	jal	2040021e <print_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:93
    print_matrix(c, N, N);
2040055e:	fdc42783          	lw	a5,-36(s0)
20400562:	4629                	li	a2,10
20400564:	45a9                	li	a1,10
20400566:	853e                	mv	a0,a5
20400568:	395d                	jal	2040021e <print_matrix>
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:101
    free(a);
    free(b);
    free(c);
#endif

    return 0;
2040056a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/matmul/matmul.c:102
2040056c:	853e                	mv	a0,a5
2040056e:	50b2                	lw	ra,44(sp)
20400570:	5422                	lw	s0,40(sp)
20400572:	6145                	addi	sp,sp,48
20400574:	8082                	ret

20400576 <iprintf>:
printf():
20400576:	7139                	addi	sp,sp,-64
20400578:	da3e                	sw	a5,52(sp)
2040057a:	d22e                	sw	a1,36(sp)
2040057c:	d432                	sw	a2,40(sp)
2040057e:	d636                	sw	a3,44(sp)
20400580:	d83a                	sw	a4,48(sp)
20400582:	dc42                	sw	a6,56(sp)
20400584:	de46                	sw	a7,60(sp)
20400586:	5fc00797          	auipc	a5,0x5fc00
2040058a:	1c278793          	addi	a5,a5,450 # 80000748 <_impure_ptr>
2040058e:	cc22                	sw	s0,24(sp)
20400590:	4380                	lw	s0,0(a5)
20400592:	ca26                	sw	s1,20(sp)
20400594:	ce06                	sw	ra,28(sp)
20400596:	84aa                	mv	s1,a0
20400598:	c409                	beqz	s0,204005a2 <iprintf+0x2c>
2040059a:	4c1c                	lw	a5,24(s0)
2040059c:	e399                	bnez	a5,204005a2 <iprintf+0x2c>
2040059e:	8522                	mv	a0,s0
204005a0:	23d5                	jal	20400b84 <__sinit>
204005a2:	440c                	lw	a1,8(s0)
204005a4:	1054                	addi	a3,sp,36
204005a6:	8626                	mv	a2,s1
204005a8:	8522                	mv	a0,s0
204005aa:	c636                	sw	a3,12(sp)
204005ac:	2df000ef          	jal	ra,2040108a <_vfiprintf_r>
204005b0:	40f2                	lw	ra,28(sp)
204005b2:	4462                	lw	s0,24(sp)
204005b4:	44d2                	lw	s1,20(sp)
204005b6:	6121                	addi	sp,sp,64
204005b8:	8082                	ret

204005ba <putchar>:
putchar():
204005ba:	1101                	addi	sp,sp,-32
204005bc:	5fc00797          	auipc	a5,0x5fc00
204005c0:	18c78793          	addi	a5,a5,396 # 80000748 <_impure_ptr>
204005c4:	cc22                	sw	s0,24(sp)
204005c6:	4380                	lw	s0,0(a5)
204005c8:	ce06                	sw	ra,28(sp)
204005ca:	85aa                	mv	a1,a0
204005cc:	c419                	beqz	s0,204005da <putchar+0x20>
204005ce:	4c1c                	lw	a5,24(s0)
204005d0:	e789                	bnez	a5,204005da <putchar+0x20>
204005d2:	c62a                	sw	a0,12(sp)
204005d4:	8522                	mv	a0,s0
204005d6:	237d                	jal	20400b84 <__sinit>
204005d8:	45b2                	lw	a1,12(sp)
204005da:	4410                	lw	a2,8(s0)
204005dc:	8522                	mv	a0,s0
204005de:	4462                	lw	s0,24(sp)
204005e0:	40f2                	lw	ra,28(sp)
204005e2:	6105                	addi	sp,sp,32
204005e4:	a009                	j	204005e6 <_putc_r>

204005e6 <_putc_r>:
_putc_r():
204005e6:	1101                	addi	sp,sp,-32
204005e8:	cc22                	sw	s0,24(sp)
204005ea:	ce06                	sw	ra,28(sp)
204005ec:	842a                	mv	s0,a0
204005ee:	c901                	beqz	a0,204005fe <_putc_r+0x18>
204005f0:	4d1c                	lw	a5,24(a0)
204005f2:	e791                	bnez	a5,204005fe <_putc_r+0x18>
204005f4:	c632                	sw	a2,12(sp)
204005f6:	c42e                	sw	a1,8(sp)
204005f8:	2371                	jal	20400b84 <__sinit>
204005fa:	4632                	lw	a2,12(sp)
204005fc:	45a2                	lw	a1,8(sp)
204005fe:	00005797          	auipc	a5,0x5
20400602:	d7678793          	addi	a5,a5,-650 # 20405374 <__sf_fake_stdin>
20400606:	02f61563          	bne	a2,a5,20400630 <_putc_r+0x4a>
2040060a:	4050                	lw	a2,4(s0)
2040060c:	461c                	lw	a5,8(a2)
2040060e:	17fd                	addi	a5,a5,-1
20400610:	c61c                	sw	a5,8(a2)
20400612:	0207df63          	bgez	a5,20400650 <_putc_r+0x6a>
20400616:	4e18                	lw	a4,24(a2)
20400618:	00e7c763          	blt	a5,a4,20400626 <_putc_r+0x40>
2040061c:	0ff5f793          	andi	a5,a1,255
20400620:	4729                	li	a4,10
20400622:	02e79763          	bne	a5,a4,20400650 <_putc_r+0x6a>
20400626:	8522                	mv	a0,s0
20400628:	4462                	lw	s0,24(sp)
2040062a:	40f2                	lw	ra,28(sp)
2040062c:	6105                	addi	sp,sp,32
2040062e:	a20d                	j	20400750 <__swbuf_r>
20400630:	00005797          	auipc	a5,0x5
20400634:	d6478793          	addi	a5,a5,-668 # 20405394 <__sf_fake_stdout>
20400638:	00f61463          	bne	a2,a5,20400640 <_putc_r+0x5a>
2040063c:	4410                	lw	a2,8(s0)
2040063e:	b7f9                	j	2040060c <_putc_r+0x26>
20400640:	00005797          	auipc	a5,0x5
20400644:	d1478793          	addi	a5,a5,-748 # 20405354 <__sf_fake_stderr>
20400648:	fcf612e3          	bne	a2,a5,2040060c <_putc_r+0x26>
2040064c:	4450                	lw	a2,12(s0)
2040064e:	bf7d                	j	2040060c <_putc_r+0x26>
20400650:	421c                	lw	a5,0(a2)
20400652:	0ff5f513          	andi	a0,a1,255
20400656:	00178713          	addi	a4,a5,1
2040065a:	c218                	sw	a4,0(a2)
2040065c:	00b78023          	sb	a1,0(a5)
20400660:	40f2                	lw	ra,28(sp)
20400662:	4462                	lw	s0,24(sp)
20400664:	6105                	addi	sp,sp,32
20400666:	8082                	ret

20400668 <_puts_r>:
_puts_r():
20400668:	1101                	addi	sp,sp,-32
2040066a:	ca26                	sw	s1,20(sp)
2040066c:	c84a                	sw	s2,16(sp)
2040066e:	ce06                	sw	ra,28(sp)
20400670:	cc22                	sw	s0,24(sp)
20400672:	c64e                	sw	s3,12(sp)
20400674:	c452                	sw	s4,8(sp)
20400676:	84aa                	mv	s1,a0
20400678:	892e                	mv	s2,a1
2040067a:	c501                	beqz	a0,20400682 <_puts_r+0x1a>
2040067c:	4d1c                	lw	a5,24(a0)
2040067e:	e391                	bnez	a5,20400682 <_puts_r+0x1a>
20400680:	2311                	jal	20400b84 <__sinit>
20400682:	4c9c                	lw	a5,24(s1)
20400684:	4480                	lw	s0,8(s1)
20400686:	e399                	bnez	a5,2040068c <_puts_r+0x24>
20400688:	8526                	mv	a0,s1
2040068a:	29ed                	jal	20400b84 <__sinit>
2040068c:	00005797          	auipc	a5,0x5
20400690:	ce878793          	addi	a5,a5,-792 # 20405374 <__sf_fake_stdin>
20400694:	02f41c63          	bne	s0,a5,204006cc <_puts_r+0x64>
20400698:	40c0                	lw	s0,4(s1)
2040069a:	00c45783          	lhu	a5,12(s0)
2040069e:	8ba1                	andi	a5,a5,8
204006a0:	c7b1                	beqz	a5,204006ec <_puts_r+0x84>
204006a2:	481c                	lw	a5,16(s0)
204006a4:	c7a1                	beqz	a5,204006ec <_puts_r+0x84>
204006a6:	59fd                	li	s3,-1
204006a8:	4a29                	li	s4,10
204006aa:	441c                	lw	a5,8(s0)
204006ac:	00094583          	lbu	a1,0(s2)
204006b0:	17fd                	addi	a5,a5,-1
204006b2:	e9b1                	bnez	a1,20400706 <_puts_r+0x9e>
204006b4:	c41c                	sw	a5,8(s0)
204006b6:	0607de63          	bgez	a5,20400732 <_puts_r+0xca>
204006ba:	8622                	mv	a2,s0
204006bc:	45a9                	li	a1,10
204006be:	8526                	mv	a0,s1
204006c0:	2841                	jal	20400750 <__swbuf_r>
204006c2:	57fd                	li	a5,-1
204006c4:	02f50863          	beq	a0,a5,204006f4 <_puts_r+0x8c>
204006c8:	4529                	li	a0,10
204006ca:	a035                	j	204006f6 <_puts_r+0x8e>
204006cc:	00005797          	auipc	a5,0x5
204006d0:	cc878793          	addi	a5,a5,-824 # 20405394 <__sf_fake_stdout>
204006d4:	00f41463          	bne	s0,a5,204006dc <_puts_r+0x74>
204006d8:	4480                	lw	s0,8(s1)
204006da:	b7c1                	j	2040069a <_puts_r+0x32>
204006dc:	00005797          	auipc	a5,0x5
204006e0:	c7878793          	addi	a5,a5,-904 # 20405354 <__sf_fake_stderr>
204006e4:	faf41be3          	bne	s0,a5,2040069a <_puts_r+0x32>
204006e8:	44c0                	lw	s0,12(s1)
204006ea:	bf45                	j	2040069a <_puts_r+0x32>
204006ec:	85a2                	mv	a1,s0
204006ee:	8526                	mv	a0,s1
204006f0:	2205                	jal	20400810 <__swsetup_r>
204006f2:	d955                	beqz	a0,204006a6 <_puts_r+0x3e>
204006f4:	557d                	li	a0,-1
204006f6:	40f2                	lw	ra,28(sp)
204006f8:	4462                	lw	s0,24(sp)
204006fa:	44d2                	lw	s1,20(sp)
204006fc:	4942                	lw	s2,16(sp)
204006fe:	49b2                	lw	s3,12(sp)
20400700:	4a22                	lw	s4,8(sp)
20400702:	6105                	addi	sp,sp,32
20400704:	8082                	ret
20400706:	c41c                	sw	a5,8(s0)
20400708:	0905                	addi	s2,s2,1
2040070a:	0007d763          	bgez	a5,20400718 <_puts_r+0xb0>
2040070e:	4c18                	lw	a4,24(s0)
20400710:	00e7cb63          	blt	a5,a4,20400726 <_puts_r+0xbe>
20400714:	01458963          	beq	a1,s4,20400726 <_puts_r+0xbe>
20400718:	401c                	lw	a5,0(s0)
2040071a:	00178713          	addi	a4,a5,1
2040071e:	c018                	sw	a4,0(s0)
20400720:	00b78023          	sb	a1,0(a5)
20400724:	b759                	j	204006aa <_puts_r+0x42>
20400726:	8622                	mv	a2,s0
20400728:	8526                	mv	a0,s1
2040072a:	201d                	jal	20400750 <__swbuf_r>
2040072c:	f7351fe3          	bne	a0,s3,204006aa <_puts_r+0x42>
20400730:	b7d1                	j	204006f4 <_puts_r+0x8c>
20400732:	401c                	lw	a5,0(s0)
20400734:	00178713          	addi	a4,a5,1
20400738:	c018                	sw	a4,0(s0)
2040073a:	4729                	li	a4,10
2040073c:	00e78023          	sb	a4,0(a5)
20400740:	b761                	j	204006c8 <_puts_r+0x60>

20400742 <puts>:
puts():
20400742:	5fc00797          	auipc	a5,0x5fc00
20400746:	00678793          	addi	a5,a5,6 # 80000748 <_impure_ptr>
2040074a:	85aa                	mv	a1,a0
2040074c:	4388                	lw	a0,0(a5)
2040074e:	bf29                	j	20400668 <_puts_r>

20400750 <__swbuf_r>:
__swbuf_r():
20400750:	1101                	addi	sp,sp,-32
20400752:	cc22                	sw	s0,24(sp)
20400754:	ca26                	sw	s1,20(sp)
20400756:	c84a                	sw	s2,16(sp)
20400758:	ce06                	sw	ra,28(sp)
2040075a:	c64e                	sw	s3,12(sp)
2040075c:	84aa                	mv	s1,a0
2040075e:	892e                	mv	s2,a1
20400760:	8432                	mv	s0,a2
20400762:	c501                	beqz	a0,2040076a <__swbuf_r+0x1a>
20400764:	4d1c                	lw	a5,24(a0)
20400766:	e391                	bnez	a5,2040076a <__swbuf_r+0x1a>
20400768:	2931                	jal	20400b84 <__sinit>
2040076a:	00005797          	auipc	a5,0x5
2040076e:	c0a78793          	addi	a5,a5,-1014 # 20405374 <__sf_fake_stdin>
20400772:	06f41963          	bne	s0,a5,204007e4 <__swbuf_r+0x94>
20400776:	40c0                	lw	s0,4(s1)
20400778:	4c1c                	lw	a5,24(s0)
2040077a:	c41c                	sw	a5,8(s0)
2040077c:	00c45783          	lhu	a5,12(s0)
20400780:	8ba1                	andi	a5,a5,8
20400782:	c3c9                	beqz	a5,20400804 <__swbuf_r+0xb4>
20400784:	481c                	lw	a5,16(s0)
20400786:	cfbd                	beqz	a5,20400804 <__swbuf_r+0xb4>
20400788:	481c                	lw	a5,16(s0)
2040078a:	4008                	lw	a0,0(s0)
2040078c:	0ff97993          	andi	s3,s2,255
20400790:	0ff97913          	andi	s2,s2,255
20400794:	8d1d                	sub	a0,a0,a5
20400796:	485c                	lw	a5,20(s0)
20400798:	00f54663          	blt	a0,a5,204007a4 <__swbuf_r+0x54>
2040079c:	85a2                	mv	a1,s0
2040079e:	8526                	mv	a0,s1
204007a0:	24e9                	jal	20400a6a <_fflush_r>
204007a2:	e52d                	bnez	a0,2040080c <__swbuf_r+0xbc>
204007a4:	441c                	lw	a5,8(s0)
204007a6:	0505                	addi	a0,a0,1
204007a8:	17fd                	addi	a5,a5,-1
204007aa:	c41c                	sw	a5,8(s0)
204007ac:	401c                	lw	a5,0(s0)
204007ae:	00178713          	addi	a4,a5,1
204007b2:	c018                	sw	a4,0(s0)
204007b4:	01378023          	sb	s3,0(a5)
204007b8:	485c                	lw	a5,20(s0)
204007ba:	00a78963          	beq	a5,a0,204007cc <__swbuf_r+0x7c>
204007be:	00c45783          	lhu	a5,12(s0)
204007c2:	8b85                	andi	a5,a5,1
204007c4:	cb81                	beqz	a5,204007d4 <__swbuf_r+0x84>
204007c6:	47a9                	li	a5,10
204007c8:	00f91663          	bne	s2,a5,204007d4 <__swbuf_r+0x84>
204007cc:	85a2                	mv	a1,s0
204007ce:	8526                	mv	a0,s1
204007d0:	2c69                	jal	20400a6a <_fflush_r>
204007d2:	ed0d                	bnez	a0,2040080c <__swbuf_r+0xbc>
204007d4:	40f2                	lw	ra,28(sp)
204007d6:	4462                	lw	s0,24(sp)
204007d8:	854a                	mv	a0,s2
204007da:	44d2                	lw	s1,20(sp)
204007dc:	4942                	lw	s2,16(sp)
204007de:	49b2                	lw	s3,12(sp)
204007e0:	6105                	addi	sp,sp,32
204007e2:	8082                	ret
204007e4:	00005797          	auipc	a5,0x5
204007e8:	bb078793          	addi	a5,a5,-1104 # 20405394 <__sf_fake_stdout>
204007ec:	00f41463          	bne	s0,a5,204007f4 <__swbuf_r+0xa4>
204007f0:	4480                	lw	s0,8(s1)
204007f2:	b759                	j	20400778 <__swbuf_r+0x28>
204007f4:	00005797          	auipc	a5,0x5
204007f8:	b6078793          	addi	a5,a5,-1184 # 20405354 <__sf_fake_stderr>
204007fc:	f6f41ee3          	bne	s0,a5,20400778 <__swbuf_r+0x28>
20400800:	44c0                	lw	s0,12(s1)
20400802:	bf9d                	j	20400778 <__swbuf_r+0x28>
20400804:	85a2                	mv	a1,s0
20400806:	8526                	mv	a0,s1
20400808:	2021                	jal	20400810 <__swsetup_r>
2040080a:	dd3d                	beqz	a0,20400788 <__swbuf_r+0x38>
2040080c:	597d                	li	s2,-1
2040080e:	b7d9                	j	204007d4 <__swbuf_r+0x84>

20400810 <__swsetup_r>:
__swsetup_r():
20400810:	1141                	addi	sp,sp,-16
20400812:	5fc00797          	auipc	a5,0x5fc00
20400816:	f3678793          	addi	a5,a5,-202 # 80000748 <_impure_ptr>
2040081a:	c226                	sw	s1,4(sp)
2040081c:	4384                	lw	s1,0(a5)
2040081e:	c422                	sw	s0,8(sp)
20400820:	c04a                	sw	s2,0(sp)
20400822:	c606                	sw	ra,12(sp)
20400824:	892a                	mv	s2,a0
20400826:	842e                	mv	s0,a1
20400828:	c489                	beqz	s1,20400832 <__swsetup_r+0x22>
2040082a:	4c9c                	lw	a5,24(s1)
2040082c:	e399                	bnez	a5,20400832 <__swsetup_r+0x22>
2040082e:	8526                	mv	a0,s1
20400830:	2e91                	jal	20400b84 <__sinit>
20400832:	00005797          	auipc	a5,0x5
20400836:	b4278793          	addi	a5,a5,-1214 # 20405374 <__sf_fake_stdin>
2040083a:	02f41c63          	bne	s0,a5,20400872 <__swsetup_r+0x62>
2040083e:	40c0                	lw	s0,4(s1)
20400840:	00c41703          	lh	a4,12(s0)
20400844:	01071793          	slli	a5,a4,0x10
20400848:	83c1                	srli	a5,a5,0x10
2040084a:	0087f693          	andi	a3,a5,8
2040084e:	eeb5                	bnez	a3,204008ca <__swsetup_r+0xba>
20400850:	0107f693          	andi	a3,a5,16
20400854:	ee9d                	bnez	a3,20400892 <__swsetup_r+0x82>
20400856:	47a5                	li	a5,9
20400858:	00f92023          	sw	a5,0(s2)
2040085c:	04076713          	ori	a4,a4,64
20400860:	00e41623          	sh	a4,12(s0)
20400864:	557d                	li	a0,-1
20400866:	40b2                	lw	ra,12(sp)
20400868:	4422                	lw	s0,8(sp)
2040086a:	4492                	lw	s1,4(sp)
2040086c:	4902                	lw	s2,0(sp)
2040086e:	0141                	addi	sp,sp,16
20400870:	8082                	ret
20400872:	00005797          	auipc	a5,0x5
20400876:	b2278793          	addi	a5,a5,-1246 # 20405394 <__sf_fake_stdout>
2040087a:	00f41463          	bne	s0,a5,20400882 <__swsetup_r+0x72>
2040087e:	4480                	lw	s0,8(s1)
20400880:	b7c1                	j	20400840 <__swsetup_r+0x30>
20400882:	00005797          	auipc	a5,0x5
20400886:	ad278793          	addi	a5,a5,-1326 # 20405354 <__sf_fake_stderr>
2040088a:	faf41be3          	bne	s0,a5,20400840 <__swsetup_r+0x30>
2040088e:	44c0                	lw	s0,12(s1)
20400890:	bf45                	j	20400840 <__swsetup_r+0x30>
20400892:	8b91                	andi	a5,a5,4
20400894:	c78d                	beqz	a5,204008be <__swsetup_r+0xae>
20400896:	584c                	lw	a1,52(s0)
20400898:	c989                	beqz	a1,204008aa <__swsetup_r+0x9a>
2040089a:	04440793          	addi	a5,s0,68
2040089e:	00f58463          	beq	a1,a5,204008a6 <__swsetup_r+0x96>
204008a2:	854a                	mv	a0,s2
204008a4:	2bc5                	jal	20400e94 <_free_r>
204008a6:	02042a23          	sw	zero,52(s0)
204008aa:	00c45783          	lhu	a5,12(s0)
204008ae:	00042223          	sw	zero,4(s0)
204008b2:	fdb7f793          	andi	a5,a5,-37
204008b6:	00f41623          	sh	a5,12(s0)
204008ba:	481c                	lw	a5,16(s0)
204008bc:	c01c                	sw	a5,0(s0)
204008be:	00c45783          	lhu	a5,12(s0)
204008c2:	0087e793          	ori	a5,a5,8
204008c6:	00f41623          	sh	a5,12(s0)
204008ca:	481c                	lw	a5,16(s0)
204008cc:	ef81                	bnez	a5,204008e4 <__swsetup_r+0xd4>
204008ce:	00c45783          	lhu	a5,12(s0)
204008d2:	20000713          	li	a4,512
204008d6:	2807f793          	andi	a5,a5,640
204008da:	00e78563          	beq	a5,a4,204008e4 <__swsetup_r+0xd4>
204008de:	85a2                	mv	a1,s0
204008e0:	854a                	mv	a0,s2
204008e2:	21bd                	jal	20400d50 <__smakebuf_r>
204008e4:	00c45783          	lhu	a5,12(s0)
204008e8:	0017f713          	andi	a4,a5,1
204008ec:	c705                	beqz	a4,20400914 <__swsetup_r+0x104>
204008ee:	485c                	lw	a5,20(s0)
204008f0:	00042423          	sw	zero,8(s0)
204008f4:	40f007b3          	neg	a5,a5
204008f8:	cc1c                	sw	a5,24(s0)
204008fa:	481c                	lw	a5,16(s0)
204008fc:	4501                	li	a0,0
204008fe:	f7a5                	bnez	a5,20400866 <__swsetup_r+0x56>
20400900:	00c41783          	lh	a5,12(s0)
20400904:	0807f713          	andi	a4,a5,128
20400908:	df39                	beqz	a4,20400866 <__swsetup_r+0x56>
2040090a:	0407e793          	ori	a5,a5,64
2040090e:	00f41623          	sh	a5,12(s0)
20400912:	bf89                	j	20400864 <__swsetup_r+0x54>
20400914:	8b89                	andi	a5,a5,2
20400916:	4701                	li	a4,0
20400918:	e391                	bnez	a5,2040091c <__swsetup_r+0x10c>
2040091a:	4858                	lw	a4,20(s0)
2040091c:	c418                	sw	a4,8(s0)
2040091e:	bff1                	j	204008fa <__swsetup_r+0xea>

20400920 <__sflush_r>:
__sflush_r():
20400920:	00c5d783          	lhu	a5,12(a1)
20400924:	1101                	addi	sp,sp,-32
20400926:	cc22                	sw	s0,24(sp)
20400928:	ca26                	sw	s1,20(sp)
2040092a:	ce06                	sw	ra,28(sp)
2040092c:	c84a                	sw	s2,16(sp)
2040092e:	c64e                	sw	s3,12(sp)
20400930:	0087f713          	andi	a4,a5,8
20400934:	84aa                	mv	s1,a0
20400936:	842e                	mv	s0,a1
20400938:	e765                	bnez	a4,20400a20 <__sflush_r+0x100>
2040093a:	41d8                	lw	a4,4(a1)
2040093c:	00e04763          	bgtz	a4,2040094a <__sflush_r+0x2a>
20400940:	41b8                	lw	a4,64(a1)
20400942:	00e04463          	bgtz	a4,2040094a <__sflush_r+0x2a>
20400946:	4501                	li	a0,0
20400948:	a0c1                	j	20400a08 <__sflush_r+0xe8>
2040094a:	5458                	lw	a4,44(s0)
2040094c:	df6d                	beqz	a4,20400946 <__sflush_r+0x26>
2040094e:	0004a903          	lw	s2,0(s1)
20400952:	01379693          	slli	a3,a5,0x13
20400956:	0004a023          	sw	zero,0(s1)
2040095a:	0606de63          	bgez	a3,204009d6 <__sflush_r+0xb6>
2040095e:	4868                	lw	a0,84(s0)
20400960:	00c45783          	lhu	a5,12(s0)
20400964:	8b91                	andi	a5,a5,4
20400966:	c799                	beqz	a5,20400974 <__sflush_r+0x54>
20400968:	405c                	lw	a5,4(s0)
2040096a:	8d1d                	sub	a0,a0,a5
2040096c:	585c                	lw	a5,52(s0)
2040096e:	c399                	beqz	a5,20400974 <__sflush_r+0x54>
20400970:	403c                	lw	a5,64(s0)
20400972:	8d1d                	sub	a0,a0,a5
20400974:	545c                	lw	a5,44(s0)
20400976:	500c                	lw	a1,32(s0)
20400978:	862a                	mv	a2,a0
2040097a:	4681                	li	a3,0
2040097c:	8526                	mv	a0,s1
2040097e:	9782                	jalr	a5
20400980:	57fd                	li	a5,-1
20400982:	00c45703          	lhu	a4,12(s0)
20400986:	00f51d63          	bne	a0,a5,204009a0 <__sflush_r+0x80>
2040098a:	4094                	lw	a3,0(s1)
2040098c:	47f5                	li	a5,29
2040098e:	08d7e463          	bltu	a5,a3,20400a16 <__sflush_r+0xf6>
20400992:	204007b7          	lui	a5,0x20400
20400996:	0785                	addi	a5,a5,1
20400998:	00d7d7b3          	srl	a5,a5,a3
2040099c:	8b85                	andi	a5,a5,1
2040099e:	cfa5                	beqz	a5,20400a16 <__sflush_r+0xf6>
204009a0:	481c                	lw	a5,16(s0)
204009a2:	00042223          	sw	zero,4(s0)
204009a6:	c01c                	sw	a5,0(s0)
204009a8:	01371793          	slli	a5,a4,0x13
204009ac:	0007d863          	bgez	a5,204009bc <__sflush_r+0x9c>
204009b0:	57fd                	li	a5,-1
204009b2:	00f51463          	bne	a0,a5,204009ba <__sflush_r+0x9a>
204009b6:	409c                	lw	a5,0(s1)
204009b8:	e391                	bnez	a5,204009bc <__sflush_r+0x9c>
204009ba:	c868                	sw	a0,84(s0)
204009bc:	584c                	lw	a1,52(s0)
204009be:	0124a023          	sw	s2,0(s1)
204009c2:	d1d1                	beqz	a1,20400946 <__sflush_r+0x26>
204009c4:	04440793          	addi	a5,s0,68
204009c8:	00f58463          	beq	a1,a5,204009d0 <__sflush_r+0xb0>
204009cc:	8526                	mv	a0,s1
204009ce:	21d9                	jal	20400e94 <_free_r>
204009d0:	02042a23          	sw	zero,52(s0)
204009d4:	bf8d                	j	20400946 <__sflush_r+0x26>
204009d6:	500c                	lw	a1,32(s0)
204009d8:	4685                	li	a3,1
204009da:	4601                	li	a2,0
204009dc:	8526                	mv	a0,s1
204009de:	9702                	jalr	a4
204009e0:	57fd                	li	a5,-1
204009e2:	f6f51fe3          	bne	a0,a5,20400960 <__sflush_r+0x40>
204009e6:	409c                	lw	a5,0(s1)
204009e8:	dfa5                	beqz	a5,20400960 <__sflush_r+0x40>
204009ea:	4775                	li	a4,29
204009ec:	00e78563          	beq	a5,a4,204009f6 <__sflush_r+0xd6>
204009f0:	4759                	li	a4,22
204009f2:	00e79563          	bne	a5,a4,204009fc <__sflush_r+0xdc>
204009f6:	0124a023          	sw	s2,0(s1)
204009fa:	b7b1                	j	20400946 <__sflush_r+0x26>
204009fc:	00c45783          	lhu	a5,12(s0)
20400a00:	0407e793          	ori	a5,a5,64
20400a04:	00f41623          	sh	a5,12(s0)
20400a08:	40f2                	lw	ra,28(sp)
20400a0a:	4462                	lw	s0,24(sp)
20400a0c:	44d2                	lw	s1,20(sp)
20400a0e:	4942                	lw	s2,16(sp)
20400a10:	49b2                	lw	s3,12(sp)
20400a12:	6105                	addi	sp,sp,32
20400a14:	8082                	ret
20400a16:	04076713          	ori	a4,a4,64
20400a1a:	00e41623          	sh	a4,12(s0)
20400a1e:	b7ed                	j	20400a08 <__sflush_r+0xe8>
20400a20:	0105a983          	lw	s3,16(a1)
20400a24:	f20981e3          	beqz	s3,20400946 <__sflush_r+0x26>
20400a28:	0005a903          	lw	s2,0(a1)
20400a2c:	8b8d                	andi	a5,a5,3
20400a2e:	0135a023          	sw	s3,0(a1)
20400a32:	41390933          	sub	s2,s2,s3
20400a36:	4701                	li	a4,0
20400a38:	e391                	bnez	a5,20400a3c <__sflush_r+0x11c>
20400a3a:	49d8                	lw	a4,20(a1)
20400a3c:	c418                	sw	a4,8(s0)
20400a3e:	f12054e3          	blez	s2,20400946 <__sflush_r+0x26>
20400a42:	541c                	lw	a5,40(s0)
20400a44:	500c                	lw	a1,32(s0)
20400a46:	86ca                	mv	a3,s2
20400a48:	864e                	mv	a2,s3
20400a4a:	8526                	mv	a0,s1
20400a4c:	9782                	jalr	a5
20400a4e:	00a04a63          	bgtz	a0,20400a62 <__sflush_r+0x142>
20400a52:	00c45783          	lhu	a5,12(s0)
20400a56:	557d                	li	a0,-1
20400a58:	0407e793          	ori	a5,a5,64
20400a5c:	00f41623          	sh	a5,12(s0)
20400a60:	b765                	j	20400a08 <__sflush_r+0xe8>
20400a62:	99aa                	add	s3,s3,a0
20400a64:	40a90933          	sub	s2,s2,a0
20400a68:	bfd9                	j	20400a3e <__sflush_r+0x11e>

20400a6a <_fflush_r>:
_fflush_r():
20400a6a:	499c                	lw	a5,16(a1)
20400a6c:	cfb9                	beqz	a5,20400aca <_fflush_r+0x60>
20400a6e:	1101                	addi	sp,sp,-32
20400a70:	cc22                	sw	s0,24(sp)
20400a72:	ce06                	sw	ra,28(sp)
20400a74:	842a                	mv	s0,a0
20400a76:	c511                	beqz	a0,20400a82 <_fflush_r+0x18>
20400a78:	4d1c                	lw	a5,24(a0)
20400a7a:	e781                	bnez	a5,20400a82 <_fflush_r+0x18>
20400a7c:	c62e                	sw	a1,12(sp)
20400a7e:	2219                	jal	20400b84 <__sinit>
20400a80:	45b2                	lw	a1,12(sp)
20400a82:	00005797          	auipc	a5,0x5
20400a86:	8f278793          	addi	a5,a5,-1806 # 20405374 <__sf_fake_stdin>
20400a8a:	00f59b63          	bne	a1,a5,20400aa0 <_fflush_r+0x36>
20400a8e:	404c                	lw	a1,4(s0)
20400a90:	00c59783          	lh	a5,12(a1)
20400a94:	c795                	beqz	a5,20400ac0 <_fflush_r+0x56>
20400a96:	8522                	mv	a0,s0
20400a98:	4462                	lw	s0,24(sp)
20400a9a:	40f2                	lw	ra,28(sp)
20400a9c:	6105                	addi	sp,sp,32
20400a9e:	b549                	j	20400920 <__sflush_r>
20400aa0:	00005797          	auipc	a5,0x5
20400aa4:	8f478793          	addi	a5,a5,-1804 # 20405394 <__sf_fake_stdout>
20400aa8:	00f59463          	bne	a1,a5,20400ab0 <_fflush_r+0x46>
20400aac:	440c                	lw	a1,8(s0)
20400aae:	b7cd                	j	20400a90 <_fflush_r+0x26>
20400ab0:	00005797          	auipc	a5,0x5
20400ab4:	8a478793          	addi	a5,a5,-1884 # 20405354 <__sf_fake_stderr>
20400ab8:	fcf59ce3          	bne	a1,a5,20400a90 <_fflush_r+0x26>
20400abc:	444c                	lw	a1,12(s0)
20400abe:	bfc9                	j	20400a90 <_fflush_r+0x26>
20400ac0:	40f2                	lw	ra,28(sp)
20400ac2:	4462                	lw	s0,24(sp)
20400ac4:	4501                	li	a0,0
20400ac6:	6105                	addi	sp,sp,32
20400ac8:	8082                	ret
20400aca:	4501                	li	a0,0
20400acc:	8082                	ret

20400ace <std>:
std():
20400ace:	1141                	addi	sp,sp,-16
20400ad0:	c422                	sw	s0,8(sp)
20400ad2:	c606                	sw	ra,12(sp)
20400ad4:	842a                	mv	s0,a0
20400ad6:	00b51623          	sh	a1,12(a0)
20400ada:	00c51723          	sh	a2,14(a0)
20400ade:	00052023          	sw	zero,0(a0)
20400ae2:	00052223          	sw	zero,4(a0)
20400ae6:	00052423          	sw	zero,8(a0)
20400aea:	06052223          	sw	zero,100(a0)
20400aee:	00052823          	sw	zero,16(a0)
20400af2:	00052a23          	sw	zero,20(a0)
20400af6:	00052c23          	sw	zero,24(a0)
20400afa:	4621                	li	a2,8
20400afc:	4581                	li	a1,0
20400afe:	05c50513          	addi	a0,a0,92
20400b02:	24ed                	jal	20400dec <memset>
20400b04:	00001797          	auipc	a5,0x1
20400b08:	84678793          	addi	a5,a5,-1978 # 2040134a <__sread>
20400b0c:	d05c                	sw	a5,36(s0)
20400b0e:	00001797          	auipc	a5,0x1
20400b12:	86c78793          	addi	a5,a5,-1940 # 2040137a <__swrite>
20400b16:	d41c                	sw	a5,40(s0)
20400b18:	00001797          	auipc	a5,0x1
20400b1c:	8b078793          	addi	a5,a5,-1872 # 204013c8 <__sseek>
20400b20:	d45c                	sw	a5,44(s0)
20400b22:	00001797          	auipc	a5,0x1
20400b26:	8dc78793          	addi	a5,a5,-1828 # 204013fe <__sclose>
20400b2a:	d000                	sw	s0,32(s0)
20400b2c:	d81c                	sw	a5,48(s0)
20400b2e:	40b2                	lw	ra,12(sp)
20400b30:	4422                	lw	s0,8(sp)
20400b32:	0141                	addi	sp,sp,16
20400b34:	8082                	ret

20400b36 <_cleanup_r>:
_cleanup_r():
20400b36:	00000597          	auipc	a1,0x0
20400b3a:	f3458593          	addi	a1,a1,-204 # 20400a6a <_fflush_r>
20400b3e:	a2b9                	j	20400c8c <_fwalk_reent>

20400b40 <__sfmoreglue>:
__sfmoreglue():
20400b40:	1141                	addi	sp,sp,-16
20400b42:	c226                	sw	s1,4(sp)
20400b44:	06800613          	li	a2,104
20400b48:	fff58493          	addi	s1,a1,-1
20400b4c:	02c484b3          	mul	s1,s1,a2
20400b50:	c04a                	sw	s2,0(sp)
20400b52:	892e                	mv	s2,a1
20400b54:	c422                	sw	s0,8(sp)
20400b56:	c606                	sw	ra,12(sp)
20400b58:	07448593          	addi	a1,s1,116
20400b5c:	26d5                	jal	20400f40 <_malloc_r>
20400b5e:	842a                	mv	s0,a0
20400b60:	c919                	beqz	a0,20400b76 <__sfmoreglue+0x36>
20400b62:	00052023          	sw	zero,0(a0)
20400b66:	01252223          	sw	s2,4(a0)
20400b6a:	0531                	addi	a0,a0,12
20400b6c:	c408                	sw	a0,8(s0)
20400b6e:	06848613          	addi	a2,s1,104
20400b72:	4581                	li	a1,0
20400b74:	2ca5                	jal	20400dec <memset>
20400b76:	8522                	mv	a0,s0
20400b78:	40b2                	lw	ra,12(sp)
20400b7a:	4422                	lw	s0,8(sp)
20400b7c:	4492                	lw	s1,4(sp)
20400b7e:	4902                	lw	s2,0(sp)
20400b80:	0141                	addi	sp,sp,16
20400b82:	8082                	ret

20400b84 <__sinit>:
__sinit():
20400b84:	4d1c                	lw	a5,24(a0)
20400b86:	e3bd                	bnez	a5,20400bec <__sinit+0x68>
20400b88:	1141                	addi	sp,sp,-16
20400b8a:	c606                	sw	ra,12(sp)
20400b8c:	c422                	sw	s0,8(sp)
20400b8e:	00000797          	auipc	a5,0x0
20400b92:	fa878793          	addi	a5,a5,-88 # 20400b36 <_cleanup_r>
20400b96:	d51c                	sw	a5,40(a0)
20400b98:	5fc00797          	auipc	a5,0x5fc00
20400b9c:	bb478793          	addi	a5,a5,-1100 # 8000074c <_global_impure_ptr>
20400ba0:	439c                	lw	a5,0(a5)
20400ba2:	04052423          	sw	zero,72(a0)
20400ba6:	04052623          	sw	zero,76(a0)
20400baa:	04052823          	sw	zero,80(a0)
20400bae:	00f51463          	bne	a0,a5,20400bb6 <__sinit+0x32>
20400bb2:	4785                	li	a5,1
20400bb4:	cd1c                	sw	a5,24(a0)
20400bb6:	842a                	mv	s0,a0
20400bb8:	281d                	jal	20400bee <__sfp>
20400bba:	c048                	sw	a0,4(s0)
20400bbc:	8522                	mv	a0,s0
20400bbe:	2805                	jal	20400bee <__sfp>
20400bc0:	c408                	sw	a0,8(s0)
20400bc2:	8522                	mv	a0,s0
20400bc4:	202d                	jal	20400bee <__sfp>
20400bc6:	c448                	sw	a0,12(s0)
20400bc8:	4048                	lw	a0,4(s0)
20400bca:	4601                	li	a2,0
20400bcc:	4591                	li	a1,4
20400bce:	3701                	jal	20400ace <std>
20400bd0:	4408                	lw	a0,8(s0)
20400bd2:	4605                	li	a2,1
20400bd4:	45a5                	li	a1,9
20400bd6:	3de5                	jal	20400ace <std>
20400bd8:	4448                	lw	a0,12(s0)
20400bda:	4609                	li	a2,2
20400bdc:	45c9                	li	a1,18
20400bde:	3dc5                	jal	20400ace <std>
20400be0:	4785                	li	a5,1
20400be2:	cc1c                	sw	a5,24(s0)
20400be4:	40b2                	lw	ra,12(sp)
20400be6:	4422                	lw	s0,8(sp)
20400be8:	0141                	addi	sp,sp,16
20400bea:	8082                	ret
20400bec:	8082                	ret

20400bee <__sfp>:
__sfp():
20400bee:	1141                	addi	sp,sp,-16
20400bf0:	5fc00797          	auipc	a5,0x5fc00
20400bf4:	b5c78793          	addi	a5,a5,-1188 # 8000074c <_global_impure_ptr>
20400bf8:	c226                	sw	s1,4(sp)
20400bfa:	4384                	lw	s1,0(a5)
20400bfc:	c04a                	sw	s2,0(sp)
20400bfe:	c606                	sw	ra,12(sp)
20400c00:	4c9c                	lw	a5,24(s1)
20400c02:	c422                	sw	s0,8(sp)
20400c04:	892a                	mv	s2,a0
20400c06:	e399                	bnez	a5,20400c0c <__sfp+0x1e>
20400c08:	8526                	mv	a0,s1
20400c0a:	3fad                	jal	20400b84 <__sinit>
20400c0c:	04848493          	addi	s1,s1,72
20400c10:	4480                	lw	s0,8(s1)
20400c12:	40dc                	lw	a5,4(s1)
20400c14:	17fd                	addi	a5,a5,-1
20400c16:	0007d663          	bgez	a5,20400c22 <__sfp+0x34>
20400c1a:	409c                	lw	a5,0(s1)
20400c1c:	cfb1                	beqz	a5,20400c78 <__sfp+0x8a>
20400c1e:	4084                	lw	s1,0(s1)
20400c20:	bfc5                	j	20400c10 <__sfp+0x22>
20400c22:	00c41703          	lh	a4,12(s0)
20400c26:	e731                	bnez	a4,20400c72 <__sfp+0x84>
20400c28:	77c1                	lui	a5,0xffff0
20400c2a:	0785                	addi	a5,a5,1
20400c2c:	06042223          	sw	zero,100(s0)
20400c30:	00042023          	sw	zero,0(s0)
20400c34:	00042223          	sw	zero,4(s0)
20400c38:	00042423          	sw	zero,8(s0)
20400c3c:	c45c                	sw	a5,12(s0)
20400c3e:	00042823          	sw	zero,16(s0)
20400c42:	00042a23          	sw	zero,20(s0)
20400c46:	00042c23          	sw	zero,24(s0)
20400c4a:	4621                	li	a2,8
20400c4c:	4581                	li	a1,0
20400c4e:	05c40513          	addi	a0,s0,92
20400c52:	2a69                	jal	20400dec <memset>
20400c54:	02042a23          	sw	zero,52(s0)
20400c58:	02042c23          	sw	zero,56(s0)
20400c5c:	04042423          	sw	zero,72(s0)
20400c60:	04042623          	sw	zero,76(s0)
20400c64:	8522                	mv	a0,s0
20400c66:	40b2                	lw	ra,12(sp)
20400c68:	4422                	lw	s0,8(sp)
20400c6a:	4492                	lw	s1,4(sp)
20400c6c:	4902                	lw	s2,0(sp)
20400c6e:	0141                	addi	sp,sp,16
20400c70:	8082                	ret
20400c72:	06840413          	addi	s0,s0,104
20400c76:	bf79                	j	20400c14 <__sfp+0x26>
20400c78:	4591                	li	a1,4
20400c7a:	854a                	mv	a0,s2
20400c7c:	35d1                	jal	20400b40 <__sfmoreglue>
20400c7e:	c088                	sw	a0,0(s1)
20400c80:	842a                	mv	s0,a0
20400c82:	fd51                	bnez	a0,20400c1e <__sfp+0x30>
20400c84:	47b1                	li	a5,12
20400c86:	00f92023          	sw	a5,0(s2)
20400c8a:	bfe9                	j	20400c64 <__sfp+0x76>

20400c8c <_fwalk_reent>:
_fwalk_reent():
20400c8c:	7179                	addi	sp,sp,-48
20400c8e:	d422                	sw	s0,40(sp)
20400c90:	d04a                	sw	s2,32(sp)
20400c92:	cc52                	sw	s4,24(sp)
20400c94:	ca56                	sw	s5,20(sp)
20400c96:	c85a                	sw	s6,16(sp)
20400c98:	c65e                	sw	s7,12(sp)
20400c9a:	d606                	sw	ra,44(sp)
20400c9c:	d226                	sw	s1,36(sp)
20400c9e:	ce4e                	sw	s3,28(sp)
20400ca0:	8a2a                	mv	s4,a0
20400ca2:	8aae                	mv	s5,a1
20400ca4:	04850413          	addi	s0,a0,72
20400ca8:	4901                	li	s2,0
20400caa:	4b05                	li	s6,1
20400cac:	5bfd                	li	s7,-1
20400cae:	ec09                	bnez	s0,20400cc8 <_fwalk_reent+0x3c>
20400cb0:	50b2                	lw	ra,44(sp)
20400cb2:	5422                	lw	s0,40(sp)
20400cb4:	854a                	mv	a0,s2
20400cb6:	5492                	lw	s1,36(sp)
20400cb8:	5902                	lw	s2,32(sp)
20400cba:	49f2                	lw	s3,28(sp)
20400cbc:	4a62                	lw	s4,24(sp)
20400cbe:	4ad2                	lw	s5,20(sp)
20400cc0:	4b42                	lw	s6,16(sp)
20400cc2:	4bb2                	lw	s7,12(sp)
20400cc4:	6145                	addi	sp,sp,48
20400cc6:	8082                	ret
20400cc8:	4404                	lw	s1,8(s0)
20400cca:	00442983          	lw	s3,4(s0)
20400cce:	19fd                	addi	s3,s3,-1
20400cd0:	0009d463          	bgez	s3,20400cd8 <_fwalk_reent+0x4c>
20400cd4:	4000                	lw	s0,0(s0)
20400cd6:	bfe1                	j	20400cae <_fwalk_reent+0x22>
20400cd8:	00c4d783          	lhu	a5,12(s1)
20400cdc:	00fb7b63          	bgeu	s6,a5,20400cf2 <_fwalk_reent+0x66>
20400ce0:	00e49783          	lh	a5,14(s1)
20400ce4:	01778763          	beq	a5,s7,20400cf2 <_fwalk_reent+0x66>
20400ce8:	85a6                	mv	a1,s1
20400cea:	8552                	mv	a0,s4
20400cec:	9a82                	jalr	s5
20400cee:	00a96933          	or	s2,s2,a0
20400cf2:	06848493          	addi	s1,s1,104
20400cf6:	bfe1                	j	20400cce <_fwalk_reent+0x42>

20400cf8 <__swhatbuf_r>:
__swhatbuf_r():
20400cf8:	7119                	addi	sp,sp,-128
20400cfa:	daa6                	sw	s1,116(sp)
20400cfc:	84ae                	mv	s1,a1
20400cfe:	00e59583          	lh	a1,14(a1)
20400d02:	dca2                	sw	s0,120(sp)
20400d04:	de86                	sw	ra,124(sp)
20400d06:	8432                	mv	s0,a2
20400d08:	0005dc63          	bgez	a1,20400d20 <__swhatbuf_r+0x28>
20400d0c:	00c4d783          	lhu	a5,12(s1)
20400d10:	0006a023          	sw	zero,0(a3)
20400d14:	0807f793          	andi	a5,a5,128
20400d18:	e39d                	bnez	a5,20400d3e <__swhatbuf_r+0x46>
20400d1a:	40000793          	li	a5,1024
20400d1e:	a015                	j	20400d42 <__swhatbuf_r+0x4a>
20400d20:	0830                	addi	a2,sp,24
20400d22:	c636                	sw	a3,12(sp)
20400d24:	2f15                	jal	20401458 <_fstat_r>
20400d26:	46b2                	lw	a3,12(sp)
20400d28:	fe0542e3          	bltz	a0,20400d0c <__swhatbuf_r+0x14>
20400d2c:	4772                	lw	a4,28(sp)
20400d2e:	67bd                	lui	a5,0xf
20400d30:	8ff9                	and	a5,a5,a4
20400d32:	7779                	lui	a4,0xffffe
20400d34:	97ba                	add	a5,a5,a4
20400d36:	0017b793          	seqz	a5,a5
20400d3a:	c29c                	sw	a5,0(a3)
20400d3c:	bff9                	j	20400d1a <__swhatbuf_r+0x22>
20400d3e:	04000793          	li	a5,64
20400d42:	c01c                	sw	a5,0(s0)
20400d44:	50f6                	lw	ra,124(sp)
20400d46:	5466                	lw	s0,120(sp)
20400d48:	54d6                	lw	s1,116(sp)
20400d4a:	4501                	li	a0,0
20400d4c:	6109                	addi	sp,sp,128
20400d4e:	8082                	ret

20400d50 <__smakebuf_r>:
__smakebuf_r():
20400d50:	00c5d783          	lhu	a5,12(a1)
20400d54:	1101                	addi	sp,sp,-32
20400d56:	cc22                	sw	s0,24(sp)
20400d58:	ce06                	sw	ra,28(sp)
20400d5a:	ca26                	sw	s1,20(sp)
20400d5c:	c84a                	sw	s2,16(sp)
20400d5e:	8b89                	andi	a5,a5,2
20400d60:	842e                	mv	s0,a1
20400d62:	cf89                	beqz	a5,20400d7c <__smakebuf_r+0x2c>
20400d64:	04740793          	addi	a5,s0,71
20400d68:	c01c                	sw	a5,0(s0)
20400d6a:	c81c                	sw	a5,16(s0)
20400d6c:	4785                	li	a5,1
20400d6e:	c85c                	sw	a5,20(s0)
20400d70:	40f2                	lw	ra,28(sp)
20400d72:	4462                	lw	s0,24(sp)
20400d74:	44d2                	lw	s1,20(sp)
20400d76:	4942                	lw	s2,16(sp)
20400d78:	6105                	addi	sp,sp,32
20400d7a:	8082                	ret
20400d7c:	0074                	addi	a3,sp,12
20400d7e:	0030                	addi	a2,sp,8
20400d80:	84aa                	mv	s1,a0
20400d82:	3f9d                	jal	20400cf8 <__swhatbuf_r>
20400d84:	45a2                	lw	a1,8(sp)
20400d86:	892a                	mv	s2,a0
20400d88:	8526                	mv	a0,s1
20400d8a:	2a5d                	jal	20400f40 <_malloc_r>
20400d8c:	ed01                	bnez	a0,20400da4 <__smakebuf_r+0x54>
20400d8e:	00c41783          	lh	a5,12(s0)
20400d92:	2007f713          	andi	a4,a5,512
20400d96:	ff69                	bnez	a4,20400d70 <__smakebuf_r+0x20>
20400d98:	9bf1                	andi	a5,a5,-4
20400d9a:	0027e793          	ori	a5,a5,2
20400d9e:	00f41623          	sh	a5,12(s0)
20400da2:	b7c9                	j	20400d64 <__smakebuf_r+0x14>
20400da4:	00000797          	auipc	a5,0x0
20400da8:	d9278793          	addi	a5,a5,-622 # 20400b36 <_cleanup_r>
20400dac:	d49c                	sw	a5,40(s1)
20400dae:	00c45783          	lhu	a5,12(s0)
20400db2:	c008                	sw	a0,0(s0)
20400db4:	c808                	sw	a0,16(s0)
20400db6:	0807e793          	ori	a5,a5,128
20400dba:	00f41623          	sh	a5,12(s0)
20400dbe:	47a2                	lw	a5,8(sp)
20400dc0:	c85c                	sw	a5,20(s0)
20400dc2:	47b2                	lw	a5,12(sp)
20400dc4:	cf89                	beqz	a5,20400dde <__smakebuf_r+0x8e>
20400dc6:	00e41583          	lh	a1,14(s0)
20400dca:	8526                	mv	a0,s1
20400dcc:	2d5d                	jal	20401482 <_isatty_r>
20400dce:	c901                	beqz	a0,20400dde <__smakebuf_r+0x8e>
20400dd0:	00c45783          	lhu	a5,12(s0)
20400dd4:	9bf1                	andi	a5,a5,-4
20400dd6:	0017e793          	ori	a5,a5,1
20400dda:	00f41623          	sh	a5,12(s0)
20400dde:	00c45783          	lhu	a5,12(s0)
20400de2:	00f96933          	or	s2,s2,a5
20400de6:	01241623          	sh	s2,12(s0)
20400dea:	b759                	j	20400d70 <__smakebuf_r+0x20>

20400dec <memset>:
memset():
20400dec:	433d                	li	t1,15
20400dee:	872a                	mv	a4,a0
20400df0:	02c37363          	bgeu	t1,a2,20400e16 <memset+0x2a>
20400df4:	00f77793          	andi	a5,a4,15
20400df8:	efbd                	bnez	a5,20400e76 <memset+0x8a>
20400dfa:	e5ad                	bnez	a1,20400e64 <memset+0x78>
20400dfc:	ff067693          	andi	a3,a2,-16
20400e00:	8a3d                	andi	a2,a2,15
20400e02:	96ba                	add	a3,a3,a4
20400e04:	c30c                	sw	a1,0(a4)
20400e06:	c34c                	sw	a1,4(a4)
20400e08:	c70c                	sw	a1,8(a4)
20400e0a:	c74c                	sw	a1,12(a4)
20400e0c:	0741                	addi	a4,a4,16
20400e0e:	fed76be3          	bltu	a4,a3,20400e04 <memset+0x18>
20400e12:	e211                	bnez	a2,20400e16 <memset+0x2a>
20400e14:	8082                	ret
20400e16:	40c306b3          	sub	a3,t1,a2
20400e1a:	068a                	slli	a3,a3,0x2
20400e1c:	00000297          	auipc	t0,0x0
20400e20:	9696                	add	a3,a3,t0
20400e22:	00a68067          	jr	10(a3)
20400e26:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffc752>
20400e2a:	00b706a3          	sb	a1,13(a4)
20400e2e:	00b70623          	sb	a1,12(a4)
20400e32:	00b705a3          	sb	a1,11(a4)
20400e36:	00b70523          	sb	a1,10(a4)
20400e3a:	00b704a3          	sb	a1,9(a4)
20400e3e:	00b70423          	sb	a1,8(a4)
20400e42:	00b703a3          	sb	a1,7(a4)
20400e46:	00b70323          	sb	a1,6(a4)
20400e4a:	00b702a3          	sb	a1,5(a4)
20400e4e:	00b70223          	sb	a1,4(a4)
20400e52:	00b701a3          	sb	a1,3(a4)
20400e56:	00b70123          	sb	a1,2(a4)
20400e5a:	00b700a3          	sb	a1,1(a4)
20400e5e:	00b70023          	sb	a1,0(a4)
20400e62:	8082                	ret
20400e64:	0ff5f593          	andi	a1,a1,255
20400e68:	00859693          	slli	a3,a1,0x8
20400e6c:	8dd5                	or	a1,a1,a3
20400e6e:	01059693          	slli	a3,a1,0x10
20400e72:	8dd5                	or	a1,a1,a3
20400e74:	b761                	j	20400dfc <memset+0x10>
20400e76:	00279693          	slli	a3,a5,0x2
20400e7a:	00000297          	auipc	t0,0x0
20400e7e:	9696                	add	a3,a3,t0
20400e80:	8286                	mv	t0,ra
20400e82:	fa8680e7          	jalr	-88(a3)
20400e86:	8096                	mv	ra,t0
20400e88:	17c1                	addi	a5,a5,-16
20400e8a:	8f1d                	sub	a4,a4,a5
20400e8c:	963e                	add	a2,a2,a5
20400e8e:	f8c374e3          	bgeu	t1,a2,20400e16 <memset+0x2a>
20400e92:	b7a5                	j	20400dfa <memset+0xe>

20400e94 <_free_r>:
_free_r():
20400e94:	c5cd                	beqz	a1,20400f3e <_free_r+0xaa>
20400e96:	ffc5a783          	lw	a5,-4(a1)
20400e9a:	1141                	addi	sp,sp,-16
20400e9c:	c422                	sw	s0,8(sp)
20400e9e:	c606                	sw	ra,12(sp)
20400ea0:	c226                	sw	s1,4(sp)
20400ea2:	ffc58413          	addi	s0,a1,-4
20400ea6:	0007d363          	bgez	a5,20400eac <_free_r+0x18>
20400eaa:	943e                	add	s0,s0,a5
20400eac:	84aa                	mv	s1,a0
20400eae:	2589                	jal	204014f0 <__malloc_lock>
20400eb0:	5fc00797          	auipc	a5,0x5fc00
20400eb4:	8c078793          	addi	a5,a5,-1856 # 80000770 <metal_segment_data_target_end>
20400eb8:	439c                	lw	a5,0(a5)
20400eba:	ef89                	bnez	a5,20400ed4 <_free_r+0x40>
20400ebc:	00042223          	sw	zero,4(s0)
20400ec0:	5fc00797          	auipc	a5,0x5fc00
20400ec4:	8a87a823          	sw	s0,-1872(a5) # 80000770 <metal_segment_data_target_end>
20400ec8:	4422                	lw	s0,8(sp)
20400eca:	40b2                	lw	ra,12(sp)
20400ecc:	8526                	mv	a0,s1
20400ece:	4492                	lw	s1,4(sp)
20400ed0:	0141                	addi	sp,sp,16
20400ed2:	a505                	j	204014f2 <__malloc_unlock>
20400ed4:	00f47e63          	bgeu	s0,a5,20400ef0 <_free_r+0x5c>
20400ed8:	4014                	lw	a3,0(s0)
20400eda:	00d40733          	add	a4,s0,a3
20400ede:	00e79663          	bne	a5,a4,20400eea <_free_r+0x56>
20400ee2:	4398                	lw	a4,0(a5)
20400ee4:	43dc                	lw	a5,4(a5)
20400ee6:	9736                	add	a4,a4,a3
20400ee8:	c018                	sw	a4,0(s0)
20400eea:	c05c                	sw	a5,4(s0)
20400eec:	bfd1                	j	20400ec0 <_free_r+0x2c>
20400eee:	87ba                	mv	a5,a4
20400ef0:	43d8                	lw	a4,4(a5)
20400ef2:	c319                	beqz	a4,20400ef8 <_free_r+0x64>
20400ef4:	fee47de3          	bgeu	s0,a4,20400eee <_free_r+0x5a>
20400ef8:	4394                	lw	a3,0(a5)
20400efa:	00d78633          	add	a2,a5,a3
20400efe:	00861f63          	bne	a2,s0,20400f1c <_free_r+0x88>
20400f02:	4010                	lw	a2,0(s0)
20400f04:	96b2                	add	a3,a3,a2
20400f06:	c394                	sw	a3,0(a5)
20400f08:	00d78633          	add	a2,a5,a3
20400f0c:	fac71ee3          	bne	a4,a2,20400ec8 <_free_r+0x34>
20400f10:	4310                	lw	a2,0(a4)
20400f12:	4358                	lw	a4,4(a4)
20400f14:	96b2                	add	a3,a3,a2
20400f16:	c394                	sw	a3,0(a5)
20400f18:	c3d8                	sw	a4,4(a5)
20400f1a:	b77d                	j	20400ec8 <_free_r+0x34>
20400f1c:	00c47563          	bgeu	s0,a2,20400f26 <_free_r+0x92>
20400f20:	47b1                	li	a5,12
20400f22:	c09c                	sw	a5,0(s1)
20400f24:	b755                	j	20400ec8 <_free_r+0x34>
20400f26:	4010                	lw	a2,0(s0)
20400f28:	00c406b3          	add	a3,s0,a2
20400f2c:	00d71663          	bne	a4,a3,20400f38 <_free_r+0xa4>
20400f30:	4314                	lw	a3,0(a4)
20400f32:	4358                	lw	a4,4(a4)
20400f34:	96b2                	add	a3,a3,a2
20400f36:	c014                	sw	a3,0(s0)
20400f38:	c058                	sw	a4,4(s0)
20400f3a:	c3c0                	sw	s0,4(a5)
20400f3c:	b771                	j	20400ec8 <_free_r+0x34>
20400f3e:	8082                	ret

20400f40 <_malloc_r>:
_malloc_r():
20400f40:	1101                	addi	sp,sp,-32
20400f42:	ca26                	sw	s1,20(sp)
20400f44:	00358493          	addi	s1,a1,3
20400f48:	98f1                	andi	s1,s1,-4
20400f4a:	ce06                	sw	ra,28(sp)
20400f4c:	cc22                	sw	s0,24(sp)
20400f4e:	c84a                	sw	s2,16(sp)
20400f50:	c64e                	sw	s3,12(sp)
20400f52:	04a1                	addi	s1,s1,8
20400f54:	47b1                	li	a5,12
20400f56:	04f4f763          	bgeu	s1,a5,20400fa4 <_malloc_r+0x64>
20400f5a:	44b1                	li	s1,12
20400f5c:	04b4e663          	bltu	s1,a1,20400fa8 <_malloc_r+0x68>
20400f60:	892a                	mv	s2,a0
20400f62:	2379                	jal	204014f0 <__malloc_lock>
20400f64:	5fc00797          	auipc	a5,0x5fc00
20400f68:	80c78793          	addi	a5,a5,-2036 # 80000770 <metal_segment_data_target_end>
20400f6c:	4398                	lw	a4,0(a5)
20400f6e:	843a                	mv	s0,a4
20400f70:	e431                	bnez	s0,20400fbc <_malloc_r+0x7c>
20400f72:	5fc00797          	auipc	a5,0x5fc00
20400f76:	80278793          	addi	a5,a5,-2046 # 80000774 <__malloc_sbrk_start>
20400f7a:	439c                	lw	a5,0(a5)
20400f7c:	eb81                	bnez	a5,20400f8c <_malloc_r+0x4c>
20400f7e:	4581                	li	a1,0
20400f80:	854a                	mv	a0,s2
20400f82:	2645                	jal	20401322 <_sbrk_r>
20400f84:	5fbff797          	auipc	a5,0x5fbff
20400f88:	7ea7a823          	sw	a0,2032(a5) # 80000774 <__malloc_sbrk_start>
20400f8c:	85a6                	mv	a1,s1
20400f8e:	854a                	mv	a0,s2
20400f90:	2e49                	jal	20401322 <_sbrk_r>
20400f92:	59fd                	li	s3,-1
20400f94:	07351963          	bne	a0,s3,20401006 <_malloc_r+0xc6>
20400f98:	47b1                	li	a5,12
20400f9a:	00f92023          	sw	a5,0(s2)
20400f9e:	854a                	mv	a0,s2
20400fa0:	2b89                	jal	204014f2 <__malloc_unlock>
20400fa2:	a029                	j	20400fac <_malloc_r+0x6c>
20400fa4:	fa04dce3          	bgez	s1,20400f5c <_malloc_r+0x1c>
20400fa8:	47b1                	li	a5,12
20400faa:	c11c                	sw	a5,0(a0)
20400fac:	4501                	li	a0,0
20400fae:	40f2                	lw	ra,28(sp)
20400fb0:	4462                	lw	s0,24(sp)
20400fb2:	44d2                	lw	s1,20(sp)
20400fb4:	4942                	lw	s2,16(sp)
20400fb6:	49b2                	lw	s3,12(sp)
20400fb8:	6105                	addi	sp,sp,32
20400fba:	8082                	ret
20400fbc:	401c                	lw	a5,0(s0)
20400fbe:	8f85                	sub	a5,a5,s1
20400fc0:	0407c063          	bltz	a5,20401000 <_malloc_r+0xc0>
20400fc4:	46ad                	li	a3,11
20400fc6:	00f6f663          	bgeu	a3,a5,20400fd2 <_malloc_r+0x92>
20400fca:	c01c                	sw	a5,0(s0)
20400fcc:	943e                	add	s0,s0,a5
20400fce:	c004                	sw	s1,0(s0)
20400fd0:	a801                	j	20400fe0 <_malloc_r+0xa0>
20400fd2:	405c                	lw	a5,4(s0)
20400fd4:	02871463          	bne	a4,s0,20400ffc <_malloc_r+0xbc>
20400fd8:	5fbff717          	auipc	a4,0x5fbff
20400fdc:	78f72c23          	sw	a5,1944(a4) # 80000770 <metal_segment_data_target_end>
20400fe0:	854a                	mv	a0,s2
20400fe2:	2b01                	jal	204014f2 <__malloc_unlock>
20400fe4:	00b40513          	addi	a0,s0,11
20400fe8:	00440793          	addi	a5,s0,4
20400fec:	9961                	andi	a0,a0,-8
20400fee:	40f50733          	sub	a4,a0,a5
20400ff2:	df55                	beqz	a4,20400fae <_malloc_r+0x6e>
20400ff4:	943a                	add	s0,s0,a4
20400ff6:	8f89                	sub	a5,a5,a0
20400ff8:	c01c                	sw	a5,0(s0)
20400ffa:	bf55                	j	20400fae <_malloc_r+0x6e>
20400ffc:	c35c                	sw	a5,4(a4)
20400ffe:	b7cd                	j	20400fe0 <_malloc_r+0xa0>
20401000:	8722                	mv	a4,s0
20401002:	4040                	lw	s0,4(s0)
20401004:	b7b5                	j	20400f70 <_malloc_r+0x30>
20401006:	00350413          	addi	s0,a0,3
2040100a:	9871                	andi	s0,s0,-4
2040100c:	fc8501e3          	beq	a0,s0,20400fce <_malloc_r+0x8e>
20401010:	40a405b3          	sub	a1,s0,a0
20401014:	854a                	mv	a0,s2
20401016:	2631                	jal	20401322 <_sbrk_r>
20401018:	fb351be3          	bne	a0,s3,20400fce <_malloc_r+0x8e>
2040101c:	bfb5                	j	20400f98 <_malloc_r+0x58>

2040101e <__sfputc_r>:
__sfputc_r():
2040101e:	461c                	lw	a5,8(a2)
20401020:	17fd                	addi	a5,a5,-1
20401022:	c61c                	sw	a5,8(a2)
20401024:	0007da63          	bgez	a5,20401038 <__sfputc_r+0x1a>
20401028:	4e18                	lw	a4,24(a2)
2040102a:	00e7c563          	blt	a5,a4,20401034 <__sfputc_r+0x16>
2040102e:	47a9                	li	a5,10
20401030:	00f59463          	bne	a1,a5,20401038 <__sfputc_r+0x1a>
20401034:	f1cff06f          	j	20400750 <__swbuf_r>
20401038:	421c                	lw	a5,0(a2)
2040103a:	852e                	mv	a0,a1
2040103c:	00178713          	addi	a4,a5,1
20401040:	c218                	sw	a4,0(a2)
20401042:	00b78023          	sb	a1,0(a5)
20401046:	8082                	ret

20401048 <__sfputs_r>:
__sfputs_r():
20401048:	1101                	addi	sp,sp,-32
2040104a:	cc22                	sw	s0,24(sp)
2040104c:	ca26                	sw	s1,20(sp)
2040104e:	c84a                	sw	s2,16(sp)
20401050:	c64e                	sw	s3,12(sp)
20401052:	c452                	sw	s4,8(sp)
20401054:	ce06                	sw	ra,28(sp)
20401056:	892a                	mv	s2,a0
20401058:	89ae                	mv	s3,a1
2040105a:	8432                	mv	s0,a2
2040105c:	00d604b3          	add	s1,a2,a3
20401060:	5a7d                	li	s4,-1
20401062:	00941463          	bne	s0,s1,2040106a <__sfputs_r+0x22>
20401066:	4501                	li	a0,0
20401068:	a809                	j	2040107a <__sfputs_r+0x32>
2040106a:	00044583          	lbu	a1,0(s0)
2040106e:	864e                	mv	a2,s3
20401070:	854a                	mv	a0,s2
20401072:	3775                	jal	2040101e <__sfputc_r>
20401074:	0405                	addi	s0,s0,1
20401076:	ff4516e3          	bne	a0,s4,20401062 <__sfputs_r+0x1a>
2040107a:	40f2                	lw	ra,28(sp)
2040107c:	4462                	lw	s0,24(sp)
2040107e:	44d2                	lw	s1,20(sp)
20401080:	4942                	lw	s2,16(sp)
20401082:	49b2                	lw	s3,12(sp)
20401084:	4a22                	lw	s4,8(sp)
20401086:	6105                	addi	sp,sp,32
20401088:	8082                	ret

2040108a <_vfiprintf_r>:
_vfiprintf_r():
2040108a:	7135                	addi	sp,sp,-160
2040108c:	cd22                	sw	s0,152(sp)
2040108e:	cb26                	sw	s1,148(sp)
20401090:	c94a                	sw	s2,144(sp)
20401092:	c74e                	sw	s3,140(sp)
20401094:	cf06                	sw	ra,156(sp)
20401096:	c552                	sw	s4,136(sp)
20401098:	c356                	sw	s5,132(sp)
2040109a:	c15a                	sw	s6,128(sp)
2040109c:	dede                	sw	s7,124(sp)
2040109e:	dce2                	sw	s8,120(sp)
204010a0:	dae6                	sw	s9,116(sp)
204010a2:	89aa                	mv	s3,a0
204010a4:	84ae                	mv	s1,a1
204010a6:	8932                	mv	s2,a2
204010a8:	8436                	mv	s0,a3
204010aa:	c501                	beqz	a0,204010b2 <_vfiprintf_r+0x28>
204010ac:	4d1c                	lw	a5,24(a0)
204010ae:	e391                	bnez	a5,204010b2 <_vfiprintf_r+0x28>
204010b0:	3cd1                	jal	20400b84 <__sinit>
204010b2:	00004797          	auipc	a5,0x4
204010b6:	2c278793          	addi	a5,a5,706 # 20405374 <__sf_fake_stdin>
204010ba:	0cf49b63          	bne	s1,a5,20401190 <_vfiprintf_r+0x106>
204010be:	0049a483          	lw	s1,4(s3)
204010c2:	00c4d783          	lhu	a5,12(s1)
204010c6:	8ba1                	andi	a5,a5,8
204010c8:	c7f5                	beqz	a5,204011b4 <_vfiprintf_r+0x12a>
204010ca:	489c                	lw	a5,16(s1)
204010cc:	c7e5                	beqz	a5,204011b4 <_vfiprintf_r+0x12a>
204010ce:	02000793          	li	a5,32
204010d2:	02f104a3          	sb	a5,41(sp)
204010d6:	03000793          	li	a5,48
204010da:	d202                	sw	zero,36(sp)
204010dc:	02f10523          	sb	a5,42(sp)
204010e0:	c622                	sw	s0,12(sp)
204010e2:	02500b93          	li	s7,37
204010e6:	00004a97          	auipc	s5,0x4
204010ea:	2cea8a93          	addi	s5,s5,718 # 204053b4 <__sf_fake_stdout+0x20>
204010ee:	4c05                	li	s8,1
204010f0:	4b29                	li	s6,10
204010f2:	844a                	mv	s0,s2
204010f4:	00044783          	lbu	a5,0(s0)
204010f8:	c399                	beqz	a5,204010fe <_vfiprintf_r+0x74>
204010fa:	0f779063          	bne	a5,s7,204011da <_vfiprintf_r+0x150>
204010fe:	41240cb3          	sub	s9,s0,s2
20401102:	000c8d63          	beqz	s9,2040111c <_vfiprintf_r+0x92>
20401106:	86e6                	mv	a3,s9
20401108:	864a                	mv	a2,s2
2040110a:	85a6                	mv	a1,s1
2040110c:	854e                	mv	a0,s3
2040110e:	3f2d                	jal	20401048 <__sfputs_r>
20401110:	57fd                	li	a5,-1
20401112:	1ef50663          	beq	a0,a5,204012fe <_vfiprintf_r+0x274>
20401116:	5692                	lw	a3,36(sp)
20401118:	96e6                	add	a3,a3,s9
2040111a:	d236                	sw	a3,36(sp)
2040111c:	00044783          	lbu	a5,0(s0)
20401120:	1c078f63          	beqz	a5,204012fe <_vfiprintf_r+0x274>
20401124:	57fd                	li	a5,-1
20401126:	00140913          	addi	s2,s0,1
2040112a:	c802                	sw	zero,16(sp)
2040112c:	ce02                	sw	zero,28(sp)
2040112e:	ca3e                	sw	a5,20(sp)
20401130:	cc02                	sw	zero,24(sp)
20401132:	040109a3          	sb	zero,83(sp)
20401136:	d482                	sw	zero,104(sp)
20401138:	00094583          	lbu	a1,0(s2)
2040113c:	4615                	li	a2,5
2040113e:	8556                	mv	a0,s5
20401140:	2e59                	jal	204014d6 <memchr>
20401142:	00190413          	addi	s0,s2,1
20401146:	47c2                	lw	a5,16(sp)
20401148:	e959                	bnez	a0,204011de <_vfiprintf_r+0x154>
2040114a:	0107f713          	andi	a4,a5,16
2040114e:	c709                	beqz	a4,20401158 <_vfiprintf_r+0xce>
20401150:	02000713          	li	a4,32
20401154:	04e109a3          	sb	a4,83(sp)
20401158:	0087f713          	andi	a4,a5,8
2040115c:	c709                	beqz	a4,20401166 <_vfiprintf_r+0xdc>
2040115e:	02b00713          	li	a4,43
20401162:	04e109a3          	sb	a4,83(sp)
20401166:	00094683          	lbu	a3,0(s2)
2040116a:	02a00713          	li	a4,42
2040116e:	08e68063          	beq	a3,a4,204011ee <_vfiprintf_r+0x164>
20401172:	47f2                	lw	a5,28(sp)
20401174:	844a                	mv	s0,s2
20401176:	4681                	li	a3,0
20401178:	4625                	li	a2,9
2040117a:	00044703          	lbu	a4,0(s0)
2040117e:	00140593          	addi	a1,s0,1
20401182:	fd070713          	addi	a4,a4,-48
20401186:	0ae67963          	bgeu	a2,a4,20401238 <_vfiprintf_r+0x1ae>
2040118a:	cab5                	beqz	a3,204011fe <_vfiprintf_r+0x174>
2040118c:	ce3e                	sw	a5,28(sp)
2040118e:	a885                	j	204011fe <_vfiprintf_r+0x174>
20401190:	00004797          	auipc	a5,0x4
20401194:	20478793          	addi	a5,a5,516 # 20405394 <__sf_fake_stdout>
20401198:	00f49563          	bne	s1,a5,204011a2 <_vfiprintf_r+0x118>
2040119c:	0089a483          	lw	s1,8(s3)
204011a0:	b70d                	j	204010c2 <_vfiprintf_r+0x38>
204011a2:	00004797          	auipc	a5,0x4
204011a6:	1b278793          	addi	a5,a5,434 # 20405354 <__sf_fake_stderr>
204011aa:	f0f49ce3          	bne	s1,a5,204010c2 <_vfiprintf_r+0x38>
204011ae:	00c9a483          	lw	s1,12(s3)
204011b2:	bf01                	j	204010c2 <_vfiprintf_r+0x38>
204011b4:	85a6                	mv	a1,s1
204011b6:	854e                	mv	a0,s3
204011b8:	e58ff0ef          	jal	ra,20400810 <__swsetup_r>
204011bc:	d909                	beqz	a0,204010ce <_vfiprintf_r+0x44>
204011be:	557d                	li	a0,-1
204011c0:	40fa                	lw	ra,156(sp)
204011c2:	446a                	lw	s0,152(sp)
204011c4:	44da                	lw	s1,148(sp)
204011c6:	494a                	lw	s2,144(sp)
204011c8:	49ba                	lw	s3,140(sp)
204011ca:	4a2a                	lw	s4,136(sp)
204011cc:	4a9a                	lw	s5,132(sp)
204011ce:	4b0a                	lw	s6,128(sp)
204011d0:	5bf6                	lw	s7,124(sp)
204011d2:	5c66                	lw	s8,120(sp)
204011d4:	5cd6                	lw	s9,116(sp)
204011d6:	610d                	addi	sp,sp,160
204011d8:	8082                	ret
204011da:	0405                	addi	s0,s0,1
204011dc:	bf21                	j	204010f4 <_vfiprintf_r+0x6a>
204011de:	41550533          	sub	a0,a0,s5
204011e2:	00ac1533          	sll	a0,s8,a0
204011e6:	8fc9                	or	a5,a5,a0
204011e8:	c83e                	sw	a5,16(sp)
204011ea:	8922                	mv	s2,s0
204011ec:	b7b1                	j	20401138 <_vfiprintf_r+0xae>
204011ee:	4732                	lw	a4,12(sp)
204011f0:	00470693          	addi	a3,a4,4
204011f4:	4318                	lw	a4,0(a4)
204011f6:	c636                	sw	a3,12(sp)
204011f8:	02074963          	bltz	a4,2040122a <_vfiprintf_r+0x1a0>
204011fc:	ce3a                	sw	a4,28(sp)
204011fe:	00044703          	lbu	a4,0(s0)
20401202:	02e00793          	li	a5,46
20401206:	04f71f63          	bne	a4,a5,20401264 <_vfiprintf_r+0x1da>
2040120a:	00144703          	lbu	a4,1(s0)
2040120e:	02a00793          	li	a5,42
20401212:	02f71b63          	bne	a4,a5,20401248 <_vfiprintf_r+0x1be>
20401216:	47b2                	lw	a5,12(sp)
20401218:	0409                	addi	s0,s0,2
2040121a:	00478713          	addi	a4,a5,4
2040121e:	439c                	lw	a5,0(a5)
20401220:	c63a                	sw	a4,12(sp)
20401222:	0207c163          	bltz	a5,20401244 <_vfiprintf_r+0x1ba>
20401226:	ca3e                	sw	a5,20(sp)
20401228:	a835                	j	20401264 <_vfiprintf_r+0x1da>
2040122a:	40e00733          	neg	a4,a4
2040122e:	0027e793          	ori	a5,a5,2
20401232:	ce3a                	sw	a4,28(sp)
20401234:	c83e                	sw	a5,16(sp)
20401236:	b7e1                	j	204011fe <_vfiprintf_r+0x174>
20401238:	036787b3          	mul	a5,a5,s6
2040123c:	4685                	li	a3,1
2040123e:	842e                	mv	s0,a1
20401240:	97ba                	add	a5,a5,a4
20401242:	bf25                	j	2040117a <_vfiprintf_r+0xf0>
20401244:	57fd                	li	a5,-1
20401246:	b7c5                	j	20401226 <_vfiprintf_r+0x19c>
20401248:	0405                	addi	s0,s0,1
2040124a:	ca02                	sw	zero,20(sp)
2040124c:	4681                	li	a3,0
2040124e:	4781                	li	a5,0
20401250:	4625                	li	a2,9
20401252:	00044703          	lbu	a4,0(s0)
20401256:	00140593          	addi	a1,s0,1
2040125a:	fd070713          	addi	a4,a4,-48
2040125e:	06e67663          	bgeu	a2,a4,204012ca <_vfiprintf_r+0x240>
20401262:	f2f1                	bnez	a3,20401226 <_vfiprintf_r+0x19c>
20401264:	00044583          	lbu	a1,0(s0)
20401268:	460d                	li	a2,3
2040126a:	00004517          	auipc	a0,0x4
2040126e:	15250513          	addi	a0,a0,338 # 204053bc <__sf_fake_stdout+0x28>
20401272:	2495                	jal	204014d6 <memchr>
20401274:	cd11                	beqz	a0,20401290 <_vfiprintf_r+0x206>
20401276:	00004797          	auipc	a5,0x4
2040127a:	14678793          	addi	a5,a5,326 # 204053bc <__sf_fake_stdout+0x28>
2040127e:	8d1d                	sub	a0,a0,a5
20401280:	04000793          	li	a5,64
20401284:	00a797b3          	sll	a5,a5,a0
20401288:	4542                	lw	a0,16(sp)
2040128a:	0405                	addi	s0,s0,1
2040128c:	8d5d                	or	a0,a0,a5
2040128e:	c82a                	sw	a0,16(sp)
20401290:	00044583          	lbu	a1,0(s0)
20401294:	4619                	li	a2,6
20401296:	00004517          	auipc	a0,0x4
2040129a:	12a50513          	addi	a0,a0,298 # 204053c0 <__sf_fake_stdout+0x2c>
2040129e:	00140913          	addi	s2,s0,1
204012a2:	02b10423          	sb	a1,40(sp)
204012a6:	2c05                	jal	204014d6 <memchr>
204012a8:	c13d                	beqz	a0,2040130e <_vfiprintf_r+0x284>
204012aa:	dfbff797          	auipc	a5,0xdfbff
204012ae:	d5678793          	addi	a5,a5,-682 # 0 <__metal_boot_hart>
204012b2:	e795                	bnez	a5,204012de <_vfiprintf_r+0x254>
204012b4:	4742                	lw	a4,16(sp)
204012b6:	47b2                	lw	a5,12(sp)
204012b8:	10077713          	andi	a4,a4,256
204012bc:	cf09                	beqz	a4,204012d6 <_vfiprintf_r+0x24c>
204012be:	0791                	addi	a5,a5,4
204012c0:	c63e                	sw	a5,12(sp)
204012c2:	5792                	lw	a5,36(sp)
204012c4:	97d2                	add	a5,a5,s4
204012c6:	d23e                	sw	a5,36(sp)
204012c8:	b52d                	j	204010f2 <_vfiprintf_r+0x68>
204012ca:	036787b3          	mul	a5,a5,s6
204012ce:	4685                	li	a3,1
204012d0:	842e                	mv	s0,a1
204012d2:	97ba                	add	a5,a5,a4
204012d4:	bfbd                	j	20401252 <_vfiprintf_r+0x1c8>
204012d6:	079d                	addi	a5,a5,7
204012d8:	9be1                	andi	a5,a5,-8
204012da:	07a1                	addi	a5,a5,8
204012dc:	b7d5                	j	204012c0 <_vfiprintf_r+0x236>
204012de:	0078                	addi	a4,sp,12
204012e0:	00000697          	auipc	a3,0x0
204012e4:	d6868693          	addi	a3,a3,-664 # 20401048 <__sfputs_r>
204012e8:	8626                	mv	a2,s1
204012ea:	080c                	addi	a1,sp,16
204012ec:	854e                	mv	a0,s3
204012ee:	00000097          	auipc	ra,0x0
204012f2:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
204012f6:	57fd                	li	a5,-1
204012f8:	8a2a                	mv	s4,a0
204012fa:	fcf514e3          	bne	a0,a5,204012c2 <_vfiprintf_r+0x238>
204012fe:	00c4d783          	lhu	a5,12(s1)
20401302:	0407f793          	andi	a5,a5,64
20401306:	ea079ce3          	bnez	a5,204011be <_vfiprintf_r+0x134>
2040130a:	5512                	lw	a0,36(sp)
2040130c:	bd55                	j	204011c0 <_vfiprintf_r+0x136>
2040130e:	0078                	addi	a4,sp,12
20401310:	00000697          	auipc	a3,0x0
20401314:	d3868693          	addi	a3,a3,-712 # 20401048 <__sfputs_r>
20401318:	8626                	mv	a2,s1
2040131a:	080c                	addi	a1,sp,16
2040131c:	854e                	mv	a0,s3
2040131e:	24cd                	jal	20401600 <_printf_i>
20401320:	bfd9                	j	204012f6 <_vfiprintf_r+0x26c>

20401322 <_sbrk_r>:
_sbrk_r():
20401322:	1141                	addi	sp,sp,-16
20401324:	c422                	sw	s0,8(sp)
20401326:	842a                	mv	s0,a0
20401328:	852e                	mv	a0,a1
2040132a:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
2040132e:	c606                	sw	ra,12(sp)
20401330:	2da9                	jal	2040198a <_sbrk>
20401332:	57fd                	li	a5,-1
20401334:	00f51763          	bne	a0,a5,20401342 <_sbrk_r+0x20>
20401338:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
2040133c:	439c                	lw	a5,0(a5)
2040133e:	c391                	beqz	a5,20401342 <_sbrk_r+0x20>
20401340:	c01c                	sw	a5,0(s0)
20401342:	40b2                	lw	ra,12(sp)
20401344:	4422                	lw	s0,8(sp)
20401346:	0141                	addi	sp,sp,16
20401348:	8082                	ret

2040134a <__sread>:
__sread():
2040134a:	1141                	addi	sp,sp,-16
2040134c:	c422                	sw	s0,8(sp)
2040134e:	842e                	mv	s0,a1
20401350:	00e59583          	lh	a1,14(a1)
20401354:	c606                	sw	ra,12(sp)
20401356:	23b1                	jal	204018a2 <_read_r>
20401358:	00054963          	bltz	a0,2040136a <__sread+0x20>
2040135c:	487c                	lw	a5,84(s0)
2040135e:	97aa                	add	a5,a5,a0
20401360:	c87c                	sw	a5,84(s0)
20401362:	40b2                	lw	ra,12(sp)
20401364:	4422                	lw	s0,8(sp)
20401366:	0141                	addi	sp,sp,16
20401368:	8082                	ret
2040136a:	00c45783          	lhu	a5,12(s0)
2040136e:	777d                	lui	a4,0xfffff
20401370:	177d                	addi	a4,a4,-1
20401372:	8ff9                	and	a5,a5,a4
20401374:	00f41623          	sh	a5,12(s0)
20401378:	b7ed                	j	20401362 <__sread+0x18>

2040137a <__swrite>:
__swrite():
2040137a:	00c5d783          	lhu	a5,12(a1)
2040137e:	1101                	addi	sp,sp,-32
20401380:	cc22                	sw	s0,24(sp)
20401382:	ca26                	sw	s1,20(sp)
20401384:	c84a                	sw	s2,16(sp)
20401386:	c64e                	sw	s3,12(sp)
20401388:	ce06                	sw	ra,28(sp)
2040138a:	1007f793          	andi	a5,a5,256
2040138e:	84aa                	mv	s1,a0
20401390:	842e                	mv	s0,a1
20401392:	8932                	mv	s2,a2
20401394:	89b6                	mv	s3,a3
20401396:	c791                	beqz	a5,204013a2 <__swrite+0x28>
20401398:	00e59583          	lh	a1,14(a1)
2040139c:	4689                	li	a3,2
2040139e:	4601                	li	a2,0
204013a0:	2229                	jal	204014aa <_lseek_r>
204013a2:	00c45783          	lhu	a5,12(s0)
204013a6:	777d                	lui	a4,0xfffff
204013a8:	177d                	addi	a4,a4,-1
204013aa:	8ff9                	and	a5,a5,a4
204013ac:	00f41623          	sh	a5,12(s0)
204013b0:	00e41583          	lh	a1,14(s0)
204013b4:	4462                	lw	s0,24(sp)
204013b6:	40f2                	lw	ra,28(sp)
204013b8:	86ce                	mv	a3,s3
204013ba:	864a                	mv	a2,s2
204013bc:	49b2                	lw	s3,12(sp)
204013be:	4942                	lw	s2,16(sp)
204013c0:	8526                	mv	a0,s1
204013c2:	44d2                	lw	s1,20(sp)
204013c4:	6105                	addi	sp,sp,32
204013c6:	a83d                	j	20401404 <_write_r>

204013c8 <__sseek>:
__sseek():
204013c8:	1141                	addi	sp,sp,-16
204013ca:	c422                	sw	s0,8(sp)
204013cc:	842e                	mv	s0,a1
204013ce:	00e59583          	lh	a1,14(a1)
204013d2:	c606                	sw	ra,12(sp)
204013d4:	28d9                	jal	204014aa <_lseek_r>
204013d6:	57fd                	li	a5,-1
204013d8:	00c45703          	lhu	a4,12(s0)
204013dc:	00f51b63          	bne	a0,a5,204013f2 <__sseek+0x2a>
204013e0:	77fd                	lui	a5,0xfffff
204013e2:	17fd                	addi	a5,a5,-1
204013e4:	8ff9                	and	a5,a5,a4
204013e6:	00f41623          	sh	a5,12(s0)
204013ea:	40b2                	lw	ra,12(sp)
204013ec:	4422                	lw	s0,8(sp)
204013ee:	0141                	addi	sp,sp,16
204013f0:	8082                	ret
204013f2:	6785                	lui	a5,0x1
204013f4:	8fd9                	or	a5,a5,a4
204013f6:	00f41623          	sh	a5,12(s0)
204013fa:	c868                	sw	a0,84(s0)
204013fc:	b7fd                	j	204013ea <__sseek+0x22>

204013fe <__sclose>:
__sclose():
204013fe:	00e59583          	lh	a1,14(a1)
20401402:	a03d                	j	20401430 <_close_r>

20401404 <_write_r>:
_write_r():
20401404:	1141                	addi	sp,sp,-16
20401406:	c422                	sw	s0,8(sp)
20401408:	842a                	mv	s0,a0
2040140a:	852e                	mv	a0,a1
2040140c:	85b2                	mv	a1,a2
2040140e:	8636                	mv	a2,a3
20401410:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
20401414:	c606                	sw	ra,12(sp)
20401416:	23fd                	jal	20401a04 <_write>
20401418:	57fd                	li	a5,-1
2040141a:	00f51763          	bne	a0,a5,20401428 <_write_r+0x24>
2040141e:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
20401422:	439c                	lw	a5,0(a5)
20401424:	c391                	beqz	a5,20401428 <_write_r+0x24>
20401426:	c01c                	sw	a5,0(s0)
20401428:	40b2                	lw	ra,12(sp)
2040142a:	4422                	lw	s0,8(sp)
2040142c:	0141                	addi	sp,sp,16
2040142e:	8082                	ret

20401430 <_close_r>:
_close_r():
20401430:	1141                	addi	sp,sp,-16
20401432:	c422                	sw	s0,8(sp)
20401434:	842a                	mv	s0,a0
20401436:	852e                	mv	a0,a1
20401438:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
2040143c:	c606                	sw	ra,12(sp)
2040143e:	2941                	jal	204018ce <_close>
20401440:	57fd                	li	a5,-1
20401442:	00f51763          	bne	a0,a5,20401450 <_close_r+0x20>
20401446:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
2040144a:	439c                	lw	a5,0(a5)
2040144c:	c391                	beqz	a5,20401450 <_close_r+0x20>
2040144e:	c01c                	sw	a5,0(s0)
20401450:	40b2                	lw	ra,12(sp)
20401452:	4422                	lw	s0,8(sp)
20401454:	0141                	addi	sp,sp,16
20401456:	8082                	ret

20401458 <_fstat_r>:
_fstat_r():
20401458:	1141                	addi	sp,sp,-16
2040145a:	c422                	sw	s0,8(sp)
2040145c:	842a                	mv	s0,a0
2040145e:	852e                	mv	a0,a1
20401460:	85b2                	mv	a1,a2
20401462:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
20401466:	c606                	sw	ra,12(sp)
20401468:	2161                	jal	204018f0 <_fstat>
2040146a:	57fd                	li	a5,-1
2040146c:	00f51763          	bne	a0,a5,2040147a <_fstat_r+0x22>
20401470:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
20401474:	439c                	lw	a5,0(a5)
20401476:	c391                	beqz	a5,2040147a <_fstat_r+0x22>
20401478:	c01c                	sw	a5,0(s0)
2040147a:	40b2                	lw	ra,12(sp)
2040147c:	4422                	lw	s0,8(sp)
2040147e:	0141                	addi	sp,sp,16
20401480:	8082                	ret

20401482 <_isatty_r>:
_isatty_r():
20401482:	1141                	addi	sp,sp,-16
20401484:	c422                	sw	s0,8(sp)
20401486:	842a                	mv	s0,a0
20401488:	852e                	mv	a0,a1
2040148a:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
2040148e:	c606                	sw	ra,12(sp)
20401490:	2159                	jal	20401916 <_isatty>
20401492:	57fd                	li	a5,-1
20401494:	00f51763          	bne	a0,a5,204014a2 <_isatty_r+0x20>
20401498:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
2040149c:	439c                	lw	a5,0(a5)
2040149e:	c391                	beqz	a5,204014a2 <_isatty_r+0x20>
204014a0:	c01c                	sw	a5,0(s0)
204014a2:	40b2                	lw	ra,12(sp)
204014a4:	4422                	lw	s0,8(sp)
204014a6:	0141                	addi	sp,sp,16
204014a8:	8082                	ret

204014aa <_lseek_r>:
_lseek_r():
204014aa:	1141                	addi	sp,sp,-16
204014ac:	c422                	sw	s0,8(sp)
204014ae:	842a                	mv	s0,a0
204014b0:	852e                	mv	a0,a1
204014b2:	85b2                	mv	a1,a2
204014b4:	8636                	mv	a2,a3
204014b6:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
204014ba:	c606                	sw	ra,12(sp)
204014bc:	29ad                	jal	20401936 <_lseek>
204014be:	57fd                	li	a5,-1
204014c0:	00f51763          	bne	a0,a5,204014ce <_lseek_r+0x24>
204014c4:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
204014c8:	439c                	lw	a5,0(a5)
204014ca:	c391                	beqz	a5,204014ce <_lseek_r+0x24>
204014cc:	c01c                	sw	a5,0(s0)
204014ce:	40b2                	lw	ra,12(sp)
204014d0:	4422                	lw	s0,8(sp)
204014d2:	0141                	addi	sp,sp,16
204014d4:	8082                	ret

204014d6 <memchr>:
memchr():
204014d6:	0ff5f593          	andi	a1,a1,255
204014da:	962a                	add	a2,a2,a0
204014dc:	00c51463          	bne	a0,a2,204014e4 <memchr+0xe>
204014e0:	4501                	li	a0,0
204014e2:	8082                	ret
204014e4:	00054783          	lbu	a5,0(a0)
204014e8:	feb78de3          	beq	a5,a1,204014e2 <memchr+0xc>
204014ec:	0505                	addi	a0,a0,1
204014ee:	b7fd                	j	204014dc <memchr+0x6>

204014f0 <__malloc_lock>:
__malloc_lock():
204014f0:	8082                	ret

204014f2 <__malloc_unlock>:
__malloc_unlock():
204014f2:	8082                	ret

204014f4 <_printf_common>:
_printf_common():
204014f4:	7179                	addi	sp,sp,-48
204014f6:	ca56                	sw	s5,20(sp)
204014f8:	499c                	lw	a5,16(a1)
204014fa:	8aba                	mv	s5,a4
204014fc:	4598                	lw	a4,8(a1)
204014fe:	d422                	sw	s0,40(sp)
20401500:	d226                	sw	s1,36(sp)
20401502:	ce4e                	sw	s3,28(sp)
20401504:	cc52                	sw	s4,24(sp)
20401506:	d606                	sw	ra,44(sp)
20401508:	d04a                	sw	s2,32(sp)
2040150a:	c85a                	sw	s6,16(sp)
2040150c:	c65e                	sw	s7,12(sp)
2040150e:	89aa                	mv	s3,a0
20401510:	842e                	mv	s0,a1
20401512:	84b2                	mv	s1,a2
20401514:	8a36                	mv	s4,a3
20401516:	00e7d363          	bge	a5,a4,2040151c <_printf_common+0x28>
2040151a:	87ba                	mv	a5,a4
2040151c:	c09c                	sw	a5,0(s1)
2040151e:	04344703          	lbu	a4,67(s0)
20401522:	c319                	beqz	a4,20401528 <_printf_common+0x34>
20401524:	0785                	addi	a5,a5,1
20401526:	c09c                	sw	a5,0(s1)
20401528:	401c                	lw	a5,0(s0)
2040152a:	0207f793          	andi	a5,a5,32
2040152e:	c781                	beqz	a5,20401536 <_printf_common+0x42>
20401530:	409c                	lw	a5,0(s1)
20401532:	0789                	addi	a5,a5,2
20401534:	c09c                	sw	a5,0(s1)
20401536:	00042903          	lw	s2,0(s0)
2040153a:	00697913          	andi	s2,s2,6
2040153e:	00091a63          	bnez	s2,20401552 <_printf_common+0x5e>
20401542:	01940b13          	addi	s6,s0,25
20401546:	5bfd                	li	s7,-1
20401548:	445c                	lw	a5,12(s0)
2040154a:	4098                	lw	a4,0(s1)
2040154c:	8f99                	sub	a5,a5,a4
2040154e:	04f94c63          	blt	s2,a5,204015a6 <_printf_common+0xb2>
20401552:	401c                	lw	a5,0(s0)
20401554:	04344683          	lbu	a3,67(s0)
20401558:	0207f793          	andi	a5,a5,32
2040155c:	00d036b3          	snez	a3,a3
20401560:	eba5                	bnez	a5,204015d0 <_printf_common+0xdc>
20401562:	04340613          	addi	a2,s0,67
20401566:	85d2                	mv	a1,s4
20401568:	854e                	mv	a0,s3
2040156a:	9a82                	jalr	s5
2040156c:	57fd                	li	a5,-1
2040156e:	04f50363          	beq	a0,a5,204015b4 <_printf_common+0xc0>
20401572:	401c                	lw	a5,0(s0)
20401574:	4611                	li	a2,4
20401576:	4098                	lw	a4,0(s1)
20401578:	8b99                	andi	a5,a5,6
2040157a:	4454                	lw	a3,12(s0)
2040157c:	4481                	li	s1,0
2040157e:	00c79763          	bne	a5,a2,2040158c <_printf_common+0x98>
20401582:	40e684b3          	sub	s1,a3,a4
20401586:	0004d363          	bgez	s1,2040158c <_printf_common+0x98>
2040158a:	4481                	li	s1,0
2040158c:	441c                	lw	a5,8(s0)
2040158e:	4818                	lw	a4,16(s0)
20401590:	00f75463          	bge	a4,a5,20401598 <_printf_common+0xa4>
20401594:	8f99                	sub	a5,a5,a4
20401596:	94be                	add	s1,s1,a5
20401598:	4901                	li	s2,0
2040159a:	0469                	addi	s0,s0,26
2040159c:	5b7d                	li	s6,-1
2040159e:	05249863          	bne	s1,s2,204015ee <_printf_common+0xfa>
204015a2:	4501                	li	a0,0
204015a4:	a809                	j	204015b6 <_printf_common+0xc2>
204015a6:	4685                	li	a3,1
204015a8:	865a                	mv	a2,s6
204015aa:	85d2                	mv	a1,s4
204015ac:	854e                	mv	a0,s3
204015ae:	9a82                	jalr	s5
204015b0:	01751e63          	bne	a0,s7,204015cc <_printf_common+0xd8>
204015b4:	557d                	li	a0,-1
204015b6:	50b2                	lw	ra,44(sp)
204015b8:	5422                	lw	s0,40(sp)
204015ba:	5492                	lw	s1,36(sp)
204015bc:	5902                	lw	s2,32(sp)
204015be:	49f2                	lw	s3,28(sp)
204015c0:	4a62                	lw	s4,24(sp)
204015c2:	4ad2                	lw	s5,20(sp)
204015c4:	4b42                	lw	s6,16(sp)
204015c6:	4bb2                	lw	s7,12(sp)
204015c8:	6145                	addi	sp,sp,48
204015ca:	8082                	ret
204015cc:	0905                	addi	s2,s2,1
204015ce:	bfad                	j	20401548 <_printf_common+0x54>
204015d0:	00d40733          	add	a4,s0,a3
204015d4:	03000613          	li	a2,48
204015d8:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffd787>
204015dc:	04544703          	lbu	a4,69(s0)
204015e0:	00168793          	addi	a5,a3,1
204015e4:	97a2                	add	a5,a5,s0
204015e6:	0689                	addi	a3,a3,2
204015e8:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
204015ec:	bf9d                	j	20401562 <_printf_common+0x6e>
204015ee:	4685                	li	a3,1
204015f0:	8622                	mv	a2,s0
204015f2:	85d2                	mv	a1,s4
204015f4:	854e                	mv	a0,s3
204015f6:	9a82                	jalr	s5
204015f8:	fb650ee3          	beq	a0,s6,204015b4 <_printf_common+0xc0>
204015fc:	0905                	addi	s2,s2,1
204015fe:	b745                	j	2040159e <_printf_common+0xaa>

20401600 <_printf_i>:
_printf_i():
20401600:	7179                	addi	sp,sp,-48
20401602:	d422                	sw	s0,40(sp)
20401604:	d226                	sw	s1,36(sp)
20401606:	d04a                	sw	s2,32(sp)
20401608:	ce4e                	sw	s3,28(sp)
2040160a:	d606                	sw	ra,44(sp)
2040160c:	cc52                	sw	s4,24(sp)
2040160e:	ca56                	sw	s5,20(sp)
20401610:	c85a                	sw	s6,16(sp)
20401612:	89b6                	mv	s3,a3
20401614:	0185c683          	lbu	a3,24(a1)
20401618:	06e00793          	li	a5,110
2040161c:	8932                	mv	s2,a2
2040161e:	84aa                	mv	s1,a0
20401620:	842e                	mv	s0,a1
20401622:	04358613          	addi	a2,a1,67
20401626:	1ef68063          	beq	a3,a5,20401806 <_printf_i+0x206>
2040162a:	06d7e263          	bltu	a5,a3,2040168e <_printf_i+0x8e>
2040162e:	06300793          	li	a5,99
20401632:	0af68263          	beq	a3,a5,204016d6 <_printf_i+0xd6>
20401636:	00d7ed63          	bltu	a5,a3,20401650 <_printf_i+0x50>
2040163a:	1e068a63          	beqz	a3,2040182e <_printf_i+0x22e>
2040163e:	05800793          	li	a5,88
20401642:	16f68663          	beq	a3,a5,204017ae <_printf_i+0x1ae>
20401646:	04240a93          	addi	s5,s0,66
2040164a:	04d40123          	sb	a3,66(s0)
2040164e:	a869                	j	204016e8 <_printf_i+0xe8>
20401650:	06400793          	li	a5,100
20401654:	00f68663          	beq	a3,a5,20401660 <_printf_i+0x60>
20401658:	06900793          	li	a5,105
2040165c:	fef695e3          	bne	a3,a5,20401646 <_printf_i+0x46>
20401660:	401c                	lw	a5,0(s0)
20401662:	4308                	lw	a0,0(a4)
20401664:	0807f693          	andi	a3,a5,128
20401668:	00450593          	addi	a1,a0,4
2040166c:	c2c1                	beqz	a3,204016ec <_printf_i+0xec>
2040166e:	411c                	lw	a5,0(a0)
20401670:	c30c                	sw	a1,0(a4)
20401672:	0007d863          	bgez	a5,20401682 <_printf_i+0x82>
20401676:	02d00713          	li	a4,45
2040167a:	40f007b3          	neg	a5,a5
2040167e:	04e401a3          	sb	a4,67(s0)
20401682:	00004697          	auipc	a3,0x4
20401686:	d4668693          	addi	a3,a3,-698 # 204053c8 <__sf_fake_stdout+0x34>
2040168a:	4729                	li	a4,10
2040168c:	a065                	j	20401734 <_printf_i+0x134>
2040168e:	07300793          	li	a5,115
20401692:	1af68263          	beq	a3,a5,20401836 <_printf_i+0x236>
20401696:	00d7ef63          	bltu	a5,a3,204016b4 <_printf_i+0xb4>
2040169a:	06f00793          	li	a5,111
2040169e:	04f68f63          	beq	a3,a5,204016fc <_printf_i+0xfc>
204016a2:	07000793          	li	a5,112
204016a6:	faf690e3          	bne	a3,a5,20401646 <_printf_i+0x46>
204016aa:	419c                	lw	a5,0(a1)
204016ac:	0207e793          	ori	a5,a5,32
204016b0:	c19c                	sw	a5,0(a1)
204016b2:	a809                	j	204016c4 <_printf_i+0xc4>
204016b4:	07500793          	li	a5,117
204016b8:	04f68263          	beq	a3,a5,204016fc <_printf_i+0xfc>
204016bc:	07800793          	li	a5,120
204016c0:	f8f693e3          	bne	a3,a5,20401646 <_printf_i+0x46>
204016c4:	07800793          	li	a5,120
204016c8:	04f402a3          	sb	a5,69(s0)
204016cc:	00004697          	auipc	a3,0x4
204016d0:	d1068693          	addi	a3,a3,-752 # 204053dc <__sf_fake_stdout+0x48>
204016d4:	a0dd                	j	204017ba <_printf_i+0x1ba>
204016d6:	431c                	lw	a5,0(a4)
204016d8:	04258a93          	addi	s5,a1,66
204016dc:	00478693          	addi	a3,a5,4
204016e0:	439c                	lw	a5,0(a5)
204016e2:	c314                	sw	a3,0(a4)
204016e4:	04f58123          	sb	a5,66(a1)
204016e8:	4785                	li	a5,1
204016ea:	a2ad                	j	20401854 <_printf_i+0x254>
204016ec:	0407f693          	andi	a3,a5,64
204016f0:	411c                	lw	a5,0(a0)
204016f2:	c30c                	sw	a1,0(a4)
204016f4:	debd                	beqz	a3,20401672 <_printf_i+0x72>
204016f6:	07c2                	slli	a5,a5,0x10
204016f8:	87c1                	srai	a5,a5,0x10
204016fa:	bfa5                	j	20401672 <_printf_i+0x72>
204016fc:	400c                	lw	a1,0(s0)
204016fe:	431c                	lw	a5,0(a4)
20401700:	0805f813          	andi	a6,a1,128
20401704:	00478513          	addi	a0,a5,4
20401708:	00080563          	beqz	a6,20401712 <_printf_i+0x112>
2040170c:	c308                	sw	a0,0(a4)
2040170e:	439c                	lw	a5,0(a5)
20401710:	a039                	j	2040171e <_printf_i+0x11e>
20401712:	0405f593          	andi	a1,a1,64
20401716:	c308                	sw	a0,0(a4)
20401718:	d9fd                	beqz	a1,2040170e <_printf_i+0x10e>
2040171a:	0007d783          	lhu	a5,0(a5)
2040171e:	06f00713          	li	a4,111
20401722:	0ce68a63          	beq	a3,a4,204017f6 <_printf_i+0x1f6>
20401726:	00004697          	auipc	a3,0x4
2040172a:	ca268693          	addi	a3,a3,-862 # 204053c8 <__sf_fake_stdout+0x34>
2040172e:	4729                	li	a4,10
20401730:	040401a3          	sb	zero,67(s0)
20401734:	404c                	lw	a1,4(s0)
20401736:	c40c                	sw	a1,8(s0)
20401738:	0005c563          	bltz	a1,20401742 <_printf_i+0x142>
2040173c:	4008                	lw	a0,0(s0)
2040173e:	996d                	andi	a0,a0,-5
20401740:	c008                	sw	a0,0(s0)
20401742:	e399                	bnez	a5,20401748 <_printf_i+0x148>
20401744:	8ab2                	mv	s5,a2
20401746:	cd91                	beqz	a1,20401762 <_printf_i+0x162>
20401748:	8ab2                	mv	s5,a2
2040174a:	02e7f5b3          	remu	a1,a5,a4
2040174e:	1afd                	addi	s5,s5,-1
20401750:	95b6                	add	a1,a1,a3
20401752:	0005c583          	lbu	a1,0(a1)
20401756:	00ba8023          	sb	a1,0(s5)
2040175a:	02e7d5b3          	divu	a1,a5,a4
2040175e:	0ae7f263          	bgeu	a5,a4,20401802 <_printf_i+0x202>
20401762:	47a1                	li	a5,8
20401764:	00f71e63          	bne	a4,a5,20401780 <_printf_i+0x180>
20401768:	401c                	lw	a5,0(s0)
2040176a:	8b85                	andi	a5,a5,1
2040176c:	cb91                	beqz	a5,20401780 <_printf_i+0x180>
2040176e:	4058                	lw	a4,4(s0)
20401770:	481c                	lw	a5,16(s0)
20401772:	00e7c763          	blt	a5,a4,20401780 <_printf_i+0x180>
20401776:	03000793          	li	a5,48
2040177a:	fefa8fa3          	sb	a5,-1(s5)
2040177e:	1afd                	addi	s5,s5,-1
20401780:	41560633          	sub	a2,a2,s5
20401784:	c810                	sw	a2,16(s0)
20401786:	874e                	mv	a4,s3
20401788:	86ca                	mv	a3,s2
2040178a:	0070                	addi	a2,sp,12
2040178c:	85a2                	mv	a1,s0
2040178e:	8526                	mv	a0,s1
20401790:	3395                	jal	204014f4 <_printf_common>
20401792:	5a7d                	li	s4,-1
20401794:	0d451463          	bne	a0,s4,2040185c <_printf_i+0x25c>
20401798:	557d                	li	a0,-1
2040179a:	50b2                	lw	ra,44(sp)
2040179c:	5422                	lw	s0,40(sp)
2040179e:	5492                	lw	s1,36(sp)
204017a0:	5902                	lw	s2,32(sp)
204017a2:	49f2                	lw	s3,28(sp)
204017a4:	4a62                	lw	s4,24(sp)
204017a6:	4ad2                	lw	s5,20(sp)
204017a8:	4b42                	lw	s6,16(sp)
204017aa:	6145                	addi	sp,sp,48
204017ac:	8082                	ret
204017ae:	04d582a3          	sb	a3,69(a1)
204017b2:	00004697          	auipc	a3,0x4
204017b6:	c1668693          	addi	a3,a3,-1002 # 204053c8 <__sf_fake_stdout+0x34>
204017ba:	400c                	lw	a1,0(s0)
204017bc:	4308                	lw	a0,0(a4)
204017be:	0805f813          	andi	a6,a1,128
204017c2:	411c                	lw	a5,0(a0)
204017c4:	0511                	addi	a0,a0,4
204017c6:	02080063          	beqz	a6,204017e6 <_printf_i+0x1e6>
204017ca:	c308                	sw	a0,0(a4)
204017cc:	0015f713          	andi	a4,a1,1
204017d0:	c701                	beqz	a4,204017d8 <_printf_i+0x1d8>
204017d2:	0205e593          	ori	a1,a1,32
204017d6:	c00c                	sw	a1,0(s0)
204017d8:	4741                	li	a4,16
204017da:	fbb9                	bnez	a5,20401730 <_printf_i+0x130>
204017dc:	400c                	lw	a1,0(s0)
204017de:	fdf5f593          	andi	a1,a1,-33
204017e2:	c00c                	sw	a1,0(s0)
204017e4:	b7b1                	j	20401730 <_printf_i+0x130>
204017e6:	0405f813          	andi	a6,a1,64
204017ea:	c308                	sw	a0,0(a4)
204017ec:	fe0800e3          	beqz	a6,204017cc <_printf_i+0x1cc>
204017f0:	07c2                	slli	a5,a5,0x10
204017f2:	83c1                	srli	a5,a5,0x10
204017f4:	bfe1                	j	204017cc <_printf_i+0x1cc>
204017f6:	00004697          	auipc	a3,0x4
204017fa:	bd268693          	addi	a3,a3,-1070 # 204053c8 <__sf_fake_stdout+0x34>
204017fe:	4721                	li	a4,8
20401800:	bf05                	j	20401730 <_printf_i+0x130>
20401802:	87ae                	mv	a5,a1
20401804:	b799                	j	2040174a <_printf_i+0x14a>
20401806:	4194                	lw	a3,0(a1)
20401808:	431c                	lw	a5,0(a4)
2040180a:	49cc                	lw	a1,20(a1)
2040180c:	0806f813          	andi	a6,a3,128
20401810:	00478513          	addi	a0,a5,4
20401814:	00080663          	beqz	a6,20401820 <_printf_i+0x220>
20401818:	c308                	sw	a0,0(a4)
2040181a:	439c                	lw	a5,0(a5)
2040181c:	c38c                	sw	a1,0(a5)
2040181e:	a801                	j	2040182e <_printf_i+0x22e>
20401820:	c308                	sw	a0,0(a4)
20401822:	0406f693          	andi	a3,a3,64
20401826:	439c                	lw	a5,0(a5)
20401828:	daf5                	beqz	a3,2040181c <_printf_i+0x21c>
2040182a:	00b79023          	sh	a1,0(a5)
2040182e:	00042823          	sw	zero,16(s0)
20401832:	8ab2                	mv	s5,a2
20401834:	bf89                	j	20401786 <_printf_i+0x186>
20401836:	431c                	lw	a5,0(a4)
20401838:	41d0                	lw	a2,4(a1)
2040183a:	4581                	li	a1,0
2040183c:	00478693          	addi	a3,a5,4
20401840:	c314                	sw	a3,0(a4)
20401842:	0007aa83          	lw	s5,0(a5)
20401846:	8556                	mv	a0,s5
20401848:	3179                	jal	204014d6 <memchr>
2040184a:	c501                	beqz	a0,20401852 <_printf_i+0x252>
2040184c:	41550533          	sub	a0,a0,s5
20401850:	c048                	sw	a0,4(s0)
20401852:	405c                	lw	a5,4(s0)
20401854:	c81c                	sw	a5,16(s0)
20401856:	040401a3          	sb	zero,67(s0)
2040185a:	b735                	j	20401786 <_printf_i+0x186>
2040185c:	4814                	lw	a3,16(s0)
2040185e:	8656                	mv	a2,s5
20401860:	85ca                	mv	a1,s2
20401862:	8526                	mv	a0,s1
20401864:	9982                	jalr	s3
20401866:	f34509e3          	beq	a0,s4,20401798 <_printf_i+0x198>
2040186a:	401c                	lw	a5,0(s0)
2040186c:	8b89                	andi	a5,a5,2
2040186e:	e78d                	bnez	a5,20401898 <_printf_i+0x298>
20401870:	47b2                	lw	a5,12(sp)
20401872:	4448                	lw	a0,12(s0)
20401874:	f2f553e3          	bge	a0,a5,2040179a <_printf_i+0x19a>
20401878:	853e                	mv	a0,a5
2040187a:	b705                	j	2040179a <_printf_i+0x19a>
2040187c:	4685                	li	a3,1
2040187e:	8656                	mv	a2,s5
20401880:	85ca                	mv	a1,s2
20401882:	8526                	mv	a0,s1
20401884:	9982                	jalr	s3
20401886:	f16509e3          	beq	a0,s6,20401798 <_printf_i+0x198>
2040188a:	0a05                	addi	s4,s4,1
2040188c:	445c                	lw	a5,12(s0)
2040188e:	4732                	lw	a4,12(sp)
20401890:	8f99                	sub	a5,a5,a4
20401892:	fefa45e3          	blt	s4,a5,2040187c <_printf_i+0x27c>
20401896:	bfe9                	j	20401870 <_printf_i+0x270>
20401898:	4a01                	li	s4,0
2040189a:	01940a93          	addi	s5,s0,25
2040189e:	5b7d                	li	s6,-1
204018a0:	b7f5                	j	2040188c <_printf_i+0x28c>

204018a2 <_read_r>:
_read_r():
204018a2:	1141                	addi	sp,sp,-16
204018a4:	c422                	sw	s0,8(sp)
204018a6:	842a                	mv	s0,a0
204018a8:	852e                	mv	a0,a1
204018aa:	85b2                	mv	a1,a2
204018ac:	8636                	mv	a2,a3
204018ae:	d601a823          	sw	zero,-656(gp) # 80000cb8 <errno>
204018b2:	c606                	sw	ra,12(sp)
204018b4:	2075                	jal	20401960 <_read>
204018b6:	57fd                	li	a5,-1
204018b8:	00f51763          	bne	a0,a5,204018c6 <_read_r+0x24>
204018bc:	d7018793          	addi	a5,gp,-656 # 80000cb8 <errno>
204018c0:	439c                	lw	a5,0(a5)
204018c2:	c391                	beqz	a5,204018c6 <_read_r+0x24>
204018c4:	c01c                	sw	a5,0(s0)
204018c6:	40b2                	lw	ra,12(sp)
204018c8:	4422                	lw	s0,8(sp)
204018ca:	0141                	addi	sp,sp,16
204018cc:	8082                	ret

204018ce <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
204018ce:	1101                	addi	sp,sp,-32
204018d0:	ce06                	sw	ra,28(sp)
204018d2:	cc22                	sw	s0,24(sp)
204018d4:	1000                	addi	s0,sp,32
204018d6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
204018da:	224d                	jal	20401a7c <__errno>
204018dc:	872a                	mv	a4,a0
204018de:	05800793          	li	a5,88
204018e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
204018e4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
204018e6:	853e                	mv	a0,a5
204018e8:	40f2                	lw	ra,28(sp)
204018ea:	4462                	lw	s0,24(sp)
204018ec:	6105                	addi	sp,sp,32
204018ee:	8082                	ret

204018f0 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
204018f0:	1101                	addi	sp,sp,-32
204018f2:	ce06                	sw	ra,28(sp)
204018f4:	cc22                	sw	s0,24(sp)
204018f6:	1000                	addi	s0,sp,32
204018f8:	fea42623          	sw	a0,-20(s0)
204018fc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401900:	2ab5                	jal	20401a7c <__errno>
20401902:	872a                	mv	a4,a0
20401904:	fa800793          	li	a5,-88
20401908:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
2040190a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
2040190c:	853e                	mv	a0,a5
2040190e:	40f2                	lw	ra,28(sp)
20401910:	4462                	lw	s0,24(sp)
20401912:	6105                	addi	sp,sp,32
20401914:	8082                	ret

20401916 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401916:	1101                	addi	sp,sp,-32
20401918:	ce22                	sw	s0,28(sp)
2040191a:	1000                	addi	s0,sp,32
2040191c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401920:	fec42783          	lw	a5,-20(s0)
20401924:	17fd                	addi	a5,a5,-1
20401926:	0017b793          	seqz	a5,a5
2040192a:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
2040192e:	853e                	mv	a0,a5
20401930:	4472                	lw	s0,28(sp)
20401932:	6105                	addi	sp,sp,32
20401934:	8082                	ret

20401936 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401936:	1101                	addi	sp,sp,-32
20401938:	ce06                	sw	ra,28(sp)
2040193a:	cc22                	sw	s0,24(sp)
2040193c:	1000                	addi	s0,sp,32
2040193e:	fea42623          	sw	a0,-20(s0)
20401942:	feb42423          	sw	a1,-24(s0)
20401946:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
2040194a:	2a0d                	jal	20401a7c <__errno>
2040194c:	872a                	mv	a4,a0
2040194e:	05800793          	li	a5,88
20401952:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401954:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401956:	853e                	mv	a0,a5
20401958:	40f2                	lw	ra,28(sp)
2040195a:	4462                	lw	s0,24(sp)
2040195c:	6105                	addi	sp,sp,32
2040195e:	8082                	ret

20401960 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401960:	1101                	addi	sp,sp,-32
20401962:	ce06                	sw	ra,28(sp)
20401964:	cc22                	sw	s0,24(sp)
20401966:	1000                	addi	s0,sp,32
20401968:	fea42623          	sw	a0,-20(s0)
2040196c:	feb42423          	sw	a1,-24(s0)
20401970:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401974:	2221                	jal	20401a7c <__errno>
20401976:	872a                	mv	a4,a0
20401978:	05800793          	li	a5,88
2040197c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
2040197e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401980:	853e                	mv	a0,a5
20401982:	40f2                	lw	ra,28(sp)
20401984:	4462                	lw	s0,24(sp)
20401986:	6105                	addi	sp,sp,32
20401988:	8082                	ret

2040198a <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
2040198a:	7179                	addi	sp,sp,-48
2040198c:	d622                	sw	s0,44(sp)
2040198e:	1800                	addi	s0,sp,48
20401990:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401994:	800007b7          	lui	a5,0x80000
20401998:	7507a783          	lw	a5,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffee94>
2040199c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
204019a0:	17418713          	addi	a4,gp,372 # 800010bc <_sp>
204019a4:	800027b7          	lui	a5,0x80002
204019a8:	8bc78793          	addi	a5,a5,-1860 # 800018bc <metal_segment_heap_target_end+0x0>
204019ac:	00f71463          	bne	a4,a5,204019b4 <_sbrk+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
204019b0:	57fd                	li	a5,-1
204019b2:	a0a9                	j	204019fc <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
204019b4:	800007b7          	lui	a5,0x80000
204019b8:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffee94>
204019bc:	fdc42783          	lw	a5,-36(s0)
204019c0:	973e                	add	a4,a4,a5
204019c2:	800027b7          	lui	a5,0x80002
204019c6:	8bc78793          	addi	a5,a5,-1860 # 800018bc <metal_segment_heap_target_end+0x0>
204019ca:	02f77063          	bgeu	a4,a5,204019ea <_sbrk+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
204019ce:	800007b7          	lui	a5,0x80000
204019d2:	7507a703          	lw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffee94>
204019d6:	fdc42783          	lw	a5,-36(s0)
204019da:	973e                	add	a4,a4,a5
204019dc:	800007b7          	lui	a5,0x80000
204019e0:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffee94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
204019e4:	fec42783          	lw	a5,-20(s0)
204019e8:	a811                	j	204019fc <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
204019ea:	800007b7          	lui	a5,0x80000
204019ee:	80002737          	lui	a4,0x80002
204019f2:	8bc70713          	addi	a4,a4,-1860 # 800018bc <metal_segment_heap_target_end+0x0>
204019f6:	74e7a823          	sw	a4,1872(a5) # 80000750 <metal_segment_heap_target_end+0xffffee94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
204019fa:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
204019fc:	853e                	mv	a0,a5
204019fe:	5432                	lw	s0,44(sp)
20401a00:	6145                	addi	sp,sp,48
20401a02:	8082                	ret

20401a04 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401a04:	7179                	addi	sp,sp,-48
20401a06:	d606                	sw	ra,44(sp)
20401a08:	d422                	sw	s0,40(sp)
20401a0a:	1800                	addi	s0,sp,48
20401a0c:	fca42e23          	sw	a0,-36(s0)
20401a10:	fcb42c23          	sw	a1,-40(s0)
20401a14:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401a18:	fdc42703          	lw	a4,-36(s0)
20401a1c:	4785                	li	a5,1
20401a1e:	00f70963          	beq	a4,a5,20401a30 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401a22:	28a9                	jal	20401a7c <__errno>
20401a24:	872a                	mv	a4,a0
20401a26:	05800793          	li	a5,88
20401a2a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401a2c:	57fd                	li	a5,-1
20401a2e:	a82d                	j	20401a68 <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401a30:	fd842783          	lw	a5,-40(s0)
20401a34:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401a38:	fe042623          	sw	zero,-20(s0)
20401a3c:	a839                	j	20401a5a <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401a3e:	fe842703          	lw	a4,-24(s0)
20401a42:	fec42783          	lw	a5,-20(s0)
20401a46:	97ba                	add	a5,a5,a4
20401a48:	0007c783          	lbu	a5,0(a5)
20401a4c:	853e                	mv	a0,a5
20401a4e:	2c91                	jal	20401ca2 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401a50:	fec42783          	lw	a5,-20(s0)
20401a54:	0785                	addi	a5,a5,1
20401a56:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401a5a:	fec42703          	lw	a4,-20(s0)
20401a5e:	fd442783          	lw	a5,-44(s0)
20401a62:	fcf76ee3          	bltu	a4,a5,20401a3e <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401a66:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401a68:	853e                	mv	a0,a5
20401a6a:	50b2                	lw	ra,44(sp)
20401a6c:	5422                	lw	s0,40(sp)
20401a6e:	6145                	addi	sp,sp,48
20401a70:	8082                	ret

20401a72 <atexit>:
atexit():
20401a72:	85aa                	mv	a1,a0
20401a74:	4681                	li	a3,0
20401a76:	4601                	li	a2,0
20401a78:	4501                	li	a0,0
20401a7a:	a8f1                	j	20401b56 <__register_exitproc>

20401a7c <__errno>:
__errno():
20401a7c:	5fbff797          	auipc	a5,0x5fbff
20401a80:	ccc78793          	addi	a5,a5,-820 # 80000748 <_impure_ptr>
20401a84:	4388                	lw	a0,0(a5)
20401a86:	8082                	ret

20401a88 <exit>:
exit():
20401a88:	1141                	addi	sp,sp,-16
20401a8a:	c422                	sw	s0,8(sp)
20401a8c:	c606                	sw	ra,12(sp)
20401a8e:	00000797          	auipc	a5,0x0
20401a92:	14c78793          	addi	a5,a5,332 # 20401bda <__call_exitprocs>
20401a96:	842a                	mv	s0,a0
20401a98:	c399                	beqz	a5,20401a9e <exit+0x16>
20401a9a:	4581                	li	a1,0
20401a9c:	2a3d                	jal	20401bda <__call_exitprocs>
20401a9e:	5fbff797          	auipc	a5,0x5fbff
20401aa2:	cae78793          	addi	a5,a5,-850 # 8000074c <_global_impure_ptr>
20401aa6:	4388                	lw	a0,0(a5)
20401aa8:	551c                	lw	a5,40(a0)
20401aaa:	c391                	beqz	a5,20401aae <exit+0x26>
20401aac:	9782                	jalr	a5
20401aae:	8522                	mv	a0,s0
20401ab0:	03f030ef          	jal	ra,204052ee <_exit>

20401ab4 <__libc_fini_array>:
__libc_fini_array():
20401ab4:	1141                	addi	sp,sp,-16
20401ab6:	00004797          	auipc	a5,0x4
20401aba:	c8e78793          	addi	a5,a5,-882 # 20405744 <__fini_array_end>
20401abe:	c422                	sw	s0,8(sp)
20401ac0:	00004417          	auipc	s0,0x4
20401ac4:	c8440413          	addi	s0,s0,-892 # 20405744 <__fini_array_end>
20401ac8:	8c1d                	sub	s0,s0,a5
20401aca:	c226                	sw	s1,4(sp)
20401acc:	c606                	sw	ra,12(sp)
20401ace:	8409                	srai	s0,s0,0x2
20401ad0:	84be                	mv	s1,a5
20401ad2:	e411                	bnez	s0,20401ade <__libc_fini_array+0x2a>
20401ad4:	40b2                	lw	ra,12(sp)
20401ad6:	4422                	lw	s0,8(sp)
20401ad8:	4492                	lw	s1,4(sp)
20401ada:	0141                	addi	sp,sp,16
20401adc:	8082                	ret
20401ade:	147d                	addi	s0,s0,-1
20401ae0:	00241793          	slli	a5,s0,0x2
20401ae4:	97a6                	add	a5,a5,s1
20401ae6:	439c                	lw	a5,0(a5)
20401ae8:	9782                	jalr	a5
20401aea:	b7e5                	j	20401ad2 <__libc_fini_array+0x1e>

20401aec <__libc_init_array>:
__libc_init_array():
20401aec:	1141                	addi	sp,sp,-16
20401aee:	00004797          	auipc	a5,0x4
20401af2:	c5278793          	addi	a5,a5,-942 # 20405740 <__init_array_start>
20401af6:	c422                	sw	s0,8(sp)
20401af8:	00004417          	auipc	s0,0x4
20401afc:	c4840413          	addi	s0,s0,-952 # 20405740 <__init_array_start>
20401b00:	8c1d                	sub	s0,s0,a5
20401b02:	c226                	sw	s1,4(sp)
20401b04:	c04a                	sw	s2,0(sp)
20401b06:	c606                	sw	ra,12(sp)
20401b08:	8409                	srai	s0,s0,0x2
20401b0a:	4481                	li	s1,0
20401b0c:	893e                	mv	s2,a5
20401b0e:	02849663          	bne	s1,s0,20401b3a <__libc_init_array+0x4e>
20401b12:	00004797          	auipc	a5,0x4
20401b16:	c2e78793          	addi	a5,a5,-978 # 20405740 <__init_array_start>
20401b1a:	00004417          	auipc	s0,0x4
20401b1e:	c2a40413          	addi	s0,s0,-982 # 20405744 <__fini_array_end>
20401b22:	8c1d                	sub	s0,s0,a5
20401b24:	8409                	srai	s0,s0,0x2
20401b26:	4481                	li	s1,0
20401b28:	893e                	mv	s2,a5
20401b2a:	00849f63          	bne	s1,s0,20401b48 <__libc_init_array+0x5c>
20401b2e:	40b2                	lw	ra,12(sp)
20401b30:	4422                	lw	s0,8(sp)
20401b32:	4492                	lw	s1,4(sp)
20401b34:	4902                	lw	s2,0(sp)
20401b36:	0141                	addi	sp,sp,16
20401b38:	8082                	ret
20401b3a:	00249793          	slli	a5,s1,0x2
20401b3e:	97ca                	add	a5,a5,s2
20401b40:	439c                	lw	a5,0(a5)
20401b42:	0485                	addi	s1,s1,1
20401b44:	9782                	jalr	a5
20401b46:	b7e1                	j	20401b0e <__libc_init_array+0x22>
20401b48:	00249793          	slli	a5,s1,0x2
20401b4c:	97ca                	add	a5,a5,s2
20401b4e:	439c                	lw	a5,0(a5)
20401b50:	0485                	addi	s1,s1,1
20401b52:	9782                	jalr	a5
20401b54:	bfd9                	j	20401b2a <__libc_init_array+0x3e>

20401b56 <__register_exitproc>:
__register_exitproc():
20401b56:	5fbff797          	auipc	a5,0x5fbff
20401b5a:	c2278793          	addi	a5,a5,-990 # 80000778 <_global_atexit>
20401b5e:	439c                	lw	a5,0(a5)
20401b60:	8e2a                	mv	t3,a0
20401b62:	e38d                	bnez	a5,20401b84 <__register_exitproc+0x2e>
20401b64:	ce418713          	addi	a4,gp,-796 # 80000c2c <_global_atexit0>
20401b68:	5fbff797          	auipc	a5,0x5fbff
20401b6c:	c0e7a823          	sw	a4,-1008(a5) # 80000778 <_global_atexit>
20401b70:	dfbfe517          	auipc	a0,0xdfbfe
20401b74:	49050513          	addi	a0,a0,1168 # 0 <__metal_boot_hart>
20401b78:	87ba                	mv	a5,a4
20401b7a:	c509                	beqz	a0,20401b84 <__register_exitproc+0x2e>
20401b7c:	411c                	lw	a5,0(a0)
20401b7e:	d6f1a623          	sw	a5,-660(gp) # 80000cb4 <_global_atexit0+0x88>
20401b82:	87ba                	mv	a5,a4
20401b84:	43d8                	lw	a4,4(a5)
20401b86:	487d                	li	a6,31
20401b88:	557d                	li	a0,-1
20401b8a:	04e84763          	blt	a6,a4,20401bd8 <__register_exitproc+0x82>
20401b8e:	020e0e63          	beqz	t3,20401bca <__register_exitproc+0x74>
20401b92:	0887a803          	lw	a6,136(a5)
20401b96:	04080163          	beqz	a6,20401bd8 <__register_exitproc+0x82>
20401b9a:	00271893          	slli	a7,a4,0x2
20401b9e:	98c2                	add	a7,a7,a6
20401ba0:	00c8a023          	sw	a2,0(a7)
20401ba4:	10082303          	lw	t1,256(a6)
20401ba8:	4605                	li	a2,1
20401baa:	00e61633          	sll	a2,a2,a4
20401bae:	00c36333          	or	t1,t1,a2
20401bb2:	10682023          	sw	t1,256(a6)
20401bb6:	08d8a023          	sw	a3,128(a7)
20401bba:	4689                	li	a3,2
20401bbc:	00de1763          	bne	t3,a3,20401bca <__register_exitproc+0x74>
20401bc0:	10482683          	lw	a3,260(a6)
20401bc4:	8e55                	or	a2,a2,a3
20401bc6:	10c82223          	sw	a2,260(a6)
20401bca:	00170693          	addi	a3,a4,1
20401bce:	070a                	slli	a4,a4,0x2
20401bd0:	c3d4                	sw	a3,4(a5)
20401bd2:	97ba                	add	a5,a5,a4
20401bd4:	c78c                	sw	a1,8(a5)
20401bd6:	4501                	li	a0,0
20401bd8:	8082                	ret

20401bda <__call_exitprocs>:
__call_exitprocs():
20401bda:	7179                	addi	sp,sp,-48
20401bdc:	cc52                	sw	s4,24(sp)
20401bde:	ca56                	sw	s5,20(sp)
20401be0:	c85a                	sw	s6,16(sp)
20401be2:	c65e                	sw	s7,12(sp)
20401be4:	d606                	sw	ra,44(sp)
20401be6:	d422                	sw	s0,40(sp)
20401be8:	d226                	sw	s1,36(sp)
20401bea:	d04a                	sw	s2,32(sp)
20401bec:	ce4e                	sw	s3,28(sp)
20401bee:	c462                	sw	s8,8(sp)
20401bf0:	8b2a                	mv	s6,a0
20401bf2:	8a2e                	mv	s4,a1
20401bf4:	5fbffa97          	auipc	s5,0x5fbff
20401bf8:	b84a8a93          	addi	s5,s5,-1148 # 80000778 <_global_atexit>
20401bfc:	4b85                	li	s7,1
20401bfe:	000aa403          	lw	s0,0(s5)
20401c02:	c811                	beqz	s0,20401c16 <__call_exitprocs+0x3c>
20401c04:	4044                	lw	s1,4(s0)
20401c06:	08842983          	lw	s3,136(s0)
20401c0a:	fff48913          	addi	s2,s1,-1
20401c0e:	048a                	slli	s1,s1,0x2
20401c10:	94a2                	add	s1,s1,s0
20401c12:	00095e63          	bgez	s2,20401c2e <__call_exitprocs+0x54>
20401c16:	50b2                	lw	ra,44(sp)
20401c18:	5422                	lw	s0,40(sp)
20401c1a:	5492                	lw	s1,36(sp)
20401c1c:	5902                	lw	s2,32(sp)
20401c1e:	49f2                	lw	s3,28(sp)
20401c20:	4a62                	lw	s4,24(sp)
20401c22:	4ad2                	lw	s5,20(sp)
20401c24:	4b42                	lw	s6,16(sp)
20401c26:	4bb2                	lw	s7,12(sp)
20401c28:	4c22                	lw	s8,8(sp)
20401c2a:	6145                	addi	sp,sp,48
20401c2c:	8082                	ret
20401c2e:	000a0e63          	beqz	s4,20401c4a <__call_exitprocs+0x70>
20401c32:	00099563          	bnez	s3,20401c3c <__call_exitprocs+0x62>
20401c36:	197d                	addi	s2,s2,-1
20401c38:	14f1                	addi	s1,s1,-4
20401c3a:	bfe1                	j	20401c12 <__call_exitprocs+0x38>
20401c3c:	00291793          	slli	a5,s2,0x2
20401c40:	97ce                	add	a5,a5,s3
20401c42:	0807a783          	lw	a5,128(a5)
20401c46:	ff4798e3          	bne	a5,s4,20401c36 <__call_exitprocs+0x5c>
20401c4a:	4058                	lw	a4,4(s0)
20401c4c:	40dc                	lw	a5,4(s1)
20401c4e:	177d                	addi	a4,a4,-1
20401c50:	03271863          	bne	a4,s2,20401c80 <__call_exitprocs+0xa6>
20401c54:	01242223          	sw	s2,4(s0)
20401c58:	dff9                	beqz	a5,20401c36 <__call_exitprocs+0x5c>
20401c5a:	00442c03          	lw	s8,4(s0)
20401c5e:	00098863          	beqz	s3,20401c6e <__call_exitprocs+0x94>
20401c62:	1009a683          	lw	a3,256(s3)
20401c66:	012b9733          	sll	a4,s7,s2
20401c6a:	8ef9                	and	a3,a3,a4
20401c6c:	ee89                	bnez	a3,20401c86 <__call_exitprocs+0xac>
20401c6e:	9782                	jalr	a5
20401c70:	4058                	lw	a4,4(s0)
20401c72:	000aa783          	lw	a5,0(s5)
20401c76:	f98714e3          	bne	a4,s8,20401bfe <__call_exitprocs+0x24>
20401c7a:	faf40ee3          	beq	s0,a5,20401c36 <__call_exitprocs+0x5c>
20401c7e:	b741                	j	20401bfe <__call_exitprocs+0x24>
20401c80:	0004a223          	sw	zero,4(s1)
20401c84:	bfd1                	j	20401c58 <__call_exitprocs+0x7e>
20401c86:	00291693          	slli	a3,s2,0x2
20401c8a:	96ce                	add	a3,a3,s3
20401c8c:	428c                	lw	a1,0(a3)
20401c8e:	1049a683          	lw	a3,260(s3)
20401c92:	8f75                	and	a4,a4,a3
20401c94:	e701                	bnez	a4,20401c9c <__call_exitprocs+0xc2>
20401c96:	855a                	mv	a0,s6
20401c98:	9782                	jalr	a5
20401c9a:	bfd9                	j	20401c70 <__call_exitprocs+0x96>
20401c9c:	852e                	mv	a0,a1
20401c9e:	9782                	jalr	a5
20401ca0:	bfc1                	j	20401c70 <__call_exitprocs+0x96>

20401ca2 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401ca2:	1101                	addi	sp,sp,-32
20401ca4:	ce06                	sw	ra,28(sp)
20401ca6:	cc22                	sw	s0,24(sp)
20401ca8:	1000                	addi	s0,sp,32
20401caa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401cae:	fec42703          	lw	a4,-20(s0)
20401cb2:	47a9                	li	a5,10
20401cb4:	00f71463          	bne	a4,a5,20401cbc <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401cb8:	4535                	li	a0,13
20401cba:	2811                	jal	20401cce <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401cbc:	fec42503          	lw	a0,-20(s0)
20401cc0:	2039                	jal	20401cce <metal_tty_putc_raw>
20401cc2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401cc4:	853e                	mv	a0,a5
20401cc6:	40f2                	lw	ra,28(sp)
20401cc8:	4462                	lw	s0,24(sp)
20401cca:	6105                	addi	sp,sp,32
20401ccc:	8082                	ret

20401cce <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401cce:	1101                	addi	sp,sp,-32
20401cd0:	ce06                	sw	ra,28(sp)
20401cd2:	cc22                	sw	s0,24(sp)
20401cd4:	1000                	addi	s0,sp,32
20401cd6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401cda:	fec42583          	lw	a1,-20(s0)
20401cde:	800007b7          	lui	a5,0x80000
20401ce2:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20401ce6:	28b1                	jal	20401d42 <metal_uart_putc>
20401ce8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401cea:	853e                	mv	a0,a5
20401cec:	40f2                	lw	ra,28(sp)
20401cee:	4462                	lw	s0,24(sp)
20401cf0:	6105                	addi	sp,sp,32
20401cf2:	8082                	ret

20401cf4 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401cf4:	1141                	addi	sp,sp,-16
20401cf6:	c606                	sw	ra,12(sp)
20401cf8:	c422                	sw	s0,8(sp)
20401cfa:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401cfc:	67f1                	lui	a5,0x1c
20401cfe:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401d02:	800007b7          	lui	a5,0x80000
20401d06:	72878513          	addi	a0,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20401d0a:	2031                	jal	20401d16 <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401d0c:	0001                	nop
20401d0e:	40b2                	lw	ra,12(sp)
20401d10:	4422                	lw	s0,8(sp)
20401d12:	0141                	addi	sp,sp,16
20401d14:	8082                	ret

20401d16 <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401d16:	1101                	addi	sp,sp,-32
20401d18:	ce06                	sw	ra,28(sp)
20401d1a:	cc22                	sw	s0,24(sp)
20401d1c:	1000                	addi	s0,sp,32
20401d1e:	fea42623          	sw	a0,-20(s0)
20401d22:	feb42423          	sw	a1,-24(s0)
20401d26:	fec42783          	lw	a5,-20(s0)
20401d2a:	439c                	lw	a5,0(a5)
20401d2c:	439c                	lw	a5,0(a5)
20401d2e:	fe842583          	lw	a1,-24(s0)
20401d32:	fec42503          	lw	a0,-20(s0)
20401d36:	9782                	jalr	a5
20401d38:	0001                	nop
20401d3a:	40f2                	lw	ra,28(sp)
20401d3c:	4462                	lw	s0,24(sp)
20401d3e:	6105                	addi	sp,sp,32
20401d40:	8082                	ret

20401d42 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401d42:	1101                	addi	sp,sp,-32
20401d44:	ce06                	sw	ra,28(sp)
20401d46:	cc22                	sw	s0,24(sp)
20401d48:	1000                	addi	s0,sp,32
20401d4a:	fea42623          	sw	a0,-20(s0)
20401d4e:	feb42423          	sw	a1,-24(s0)
20401d52:	fec42783          	lw	a5,-20(s0)
20401d56:	439c                	lw	a5,0(a5)
20401d58:	43dc                	lw	a5,4(a5)
20401d5a:	fe842583          	lw	a1,-24(s0)
20401d5e:	fec42503          	lw	a0,-20(s0)
20401d62:	9782                	jalr	a5
20401d64:	87aa                	mv	a5,a0
20401d66:	853e                	mv	a0,a5
20401d68:	40f2                	lw	ra,28(sp)
20401d6a:	4462                	lw	s0,24(sp)
20401d6c:	6105                	addi	sp,sp,32
20401d6e:	8082                	ret

20401d70 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401d70:	1101                	addi	sp,sp,-32
20401d72:	ce06                	sw	ra,28(sp)
20401d74:	cc22                	sw	s0,24(sp)
20401d76:	1000                	addi	s0,sp,32
20401d78:	fea42623          	sw	a0,-20(s0)
20401d7c:	feb42423          	sw	a1,-24(s0)
20401d80:	fec42783          	lw	a5,-20(s0)
20401d84:	439c                	lw	a5,0(a5)
20401d86:	4bdc                	lw	a5,20(a5)
20401d88:	fe842583          	lw	a1,-24(s0)
20401d8c:	fec42503          	lw	a0,-20(s0)
20401d90:	9782                	jalr	a5
20401d92:	87aa                	mv	a5,a0
20401d94:	853e                	mv	a0,a5
20401d96:	40f2                	lw	ra,28(sp)
20401d98:	4462                	lw	s0,24(sp)
20401d9a:	6105                	addi	sp,sp,32
20401d9c:	8082                	ret

20401d9e <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401d9e:	1101                	addi	sp,sp,-32
20401da0:	ce22                	sw	s0,28(sp)
20401da2:	1000                	addi	s0,sp,32
20401da4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401da8:	fec42703          	lw	a4,-20(s0)
20401dac:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401db0:	00f71563          	bne	a4,a5,20401dba <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401db4:	020007b7          	lui	a5,0x2000
20401db8:	a011                	j	20401dbc <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401dba:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401dbc:	853e                	mv	a0,a5
20401dbe:	4472                	lw	s0,28(sp)
20401dc0:	6105                	addi	sp,sp,32
20401dc2:	8082                	ret

20401dc4 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401dc4:	1101                	addi	sp,sp,-32
20401dc6:	ce22                	sw	s0,28(sp)
20401dc8:	1000                	addi	s0,sp,32
20401dca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401dce:	fec42703          	lw	a4,-20(s0)
20401dd2:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
20401dd6:	00f71463          	bne	a4,a5,20401dde <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401dda:	4789                	li	a5,2
20401ddc:	a011                	j	20401de0 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401dde:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401de0:	853e                	mv	a0,a5
20401de2:	4472                	lw	s0,28(sp)
20401de4:	6105                	addi	sp,sp,32
20401de6:	8082                	ret

20401de8 <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401de8:	1101                	addi	sp,sp,-32
20401dea:	ce22                	sw	s0,28(sp)
20401dec:	1000                	addi	s0,sp,32
20401dee:	fea42623          	sw	a0,-20(s0)
20401df2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401df6:	fe842783          	lw	a5,-24(s0)
20401dfa:	e791                	bnez	a5,20401e06 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401dfc:	800007b7          	lui	a5,0x80000
20401e00:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe7b4>
20401e04:	a821                	j	20401e1c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401e06:	fe842703          	lw	a4,-24(s0)
20401e0a:	4785                	li	a5,1
20401e0c:	00f71763          	bne	a4,a5,20401e1a <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401e10:	800007b7          	lui	a5,0x80000
20401e14:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe7b4>
20401e18:	a011                	j	20401e1c <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401e1a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20401e1c:	853e                	mv	a0,a5
20401e1e:	4472                	lw	s0,28(sp)
20401e20:	6105                	addi	sp,sp,32
20401e22:	8082                	ret

20401e24 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401e24:	1101                	addi	sp,sp,-32
20401e26:	ce22                	sw	s0,28(sp)
20401e28:	1000                	addi	s0,sp,32
20401e2a:	fea42623          	sw	a0,-20(s0)
20401e2e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401e32:	fe842783          	lw	a5,-24(s0)
20401e36:	e399                	bnez	a5,20401e3c <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20401e38:	478d                	li	a5,3
20401e3a:	a809                	j	20401e4c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401e3c:	fe842703          	lw	a4,-24(s0)
20401e40:	4785                	li	a5,1
20401e42:	00f71463          	bne	a4,a5,20401e4a <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20401e46:	479d                	li	a5,7
20401e48:	a011                	j	20401e4c <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401e4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20401e4c:	853e                	mv	a0,a5
20401e4e:	4472                	lw	s0,28(sp)
20401e50:	6105                	addi	sp,sp,32
20401e52:	8082                	ret

20401e54 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401e54:	715d                	addi	sp,sp,-80
20401e56:	c686                	sw	ra,76(sp)
20401e58:	c4a2                	sw	s0,72(sp)
20401e5a:	c2ca                	sw	s2,68(sp)
20401e5c:	c0ce                	sw	s3,64(sp)
20401e5e:	de52                	sw	s4,60(sp)
20401e60:	dc56                	sw	s5,56(sp)
20401e62:	da5a                	sw	s6,52(sp)
20401e64:	d85e                	sw	s7,48(sp)
20401e66:	d662                	sw	s8,44(sp)
20401e68:	d466                	sw	s9,40(sp)
20401e6a:	0880                	addi	s0,sp,80
20401e6c:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401e70:	fbc42783          	lw	a5,-68(s0)
20401e74:	853e                	mv	a0,a5
20401e76:	3725                	jal	20401d9e <__metal_driver_sifive_clint0_control_base>
20401e78:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401e7c:	fcc42703          	lw	a4,-52(s0)
20401e80:	67b1                	lui	a5,0xc
20401e82:	17f1                	addi	a5,a5,-4
20401e84:	97ba                	add	a5,a5,a4
20401e86:	439c                	lw	a5,0(a5)
20401e88:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401e8c:	fcc42703          	lw	a4,-52(s0)
20401e90:	67b1                	lui	a5,0xc
20401e92:	17e1                	addi	a5,a5,-8
20401e94:	97ba                	add	a5,a5,a4
20401e96:	439c                	lw	a5,0(a5)
20401e98:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401e9c:	fcc42703          	lw	a4,-52(s0)
20401ea0:	67b1                	lui	a5,0xc
20401ea2:	17f1                	addi	a5,a5,-4
20401ea4:	97ba                	add	a5,a5,a4
20401ea6:	439c                	lw	a5,0(a5)
20401ea8:	fc842703          	lw	a4,-56(s0)
20401eac:	fcf718e3          	bne	a4,a5,20401e7c <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401eb0:	fc842783          	lw	a5,-56(s0)
20401eb4:	8c3e                	mv	s8,a5
20401eb6:	4c81                	li	s9,0
20401eb8:	000c1993          	slli	s3,s8,0x0
20401ebc:	4901                	li	s2,0
20401ebe:	fc442783          	lw	a5,-60(s0)
20401ec2:	8a3e                	mv	s4,a5
20401ec4:	4a81                	li	s5,0
20401ec6:	01496b33          	or	s6,s2,s4
20401eca:	0159ebb3          	or	s7,s3,s5
20401ece:	87da                	mv	a5,s6
20401ed0:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401ed2:	853e                	mv	a0,a5
20401ed4:	85c2                	mv	a1,a6
20401ed6:	40b6                	lw	ra,76(sp)
20401ed8:	4426                	lw	s0,72(sp)
20401eda:	4916                	lw	s2,68(sp)
20401edc:	4986                	lw	s3,64(sp)
20401ede:	5a72                	lw	s4,60(sp)
20401ee0:	5ae2                	lw	s5,56(sp)
20401ee2:	5b52                	lw	s6,52(sp)
20401ee4:	5bc2                	lw	s7,48(sp)
20401ee6:	5c32                	lw	s8,44(sp)
20401ee8:	5ca2                	lw	s9,40(sp)
20401eea:	6161                	addi	sp,sp,80
20401eec:	8082                	ret

20401eee <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401eee:	7179                	addi	sp,sp,-48
20401ef0:	d606                	sw	ra,44(sp)
20401ef2:	d422                	sw	s0,40(sp)
20401ef4:	d24a                	sw	s2,36(sp)
20401ef6:	d04e                	sw	s3,32(sp)
20401ef8:	1800                	addi	s0,sp,48
20401efa:	fca42e23          	sw	a0,-36(s0)
20401efe:	fcb42c23          	sw	a1,-40(s0)
20401f02:	fcc42823          	sw	a2,-48(s0)
20401f06:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401f0a:	fdc42783          	lw	a5,-36(s0)
20401f0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401f12:	fec42783          	lw	a5,-20(s0)
20401f16:	853e                	mv	a0,a5
20401f18:	3559                	jal	20401d9e <__metal_driver_sifive_clint0_control_base>
20401f1a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401f1e:	fd842783          	lw	a5,-40(s0)
20401f22:	078e                	slli	a5,a5,0x3
20401f24:	873e                	mv	a4,a5
20401f26:	fe842783          	lw	a5,-24(s0)
20401f2a:	973e                	add	a4,a4,a5
20401f2c:	6791                	lui	a5,0x4
20401f2e:	0791                	addi	a5,a5,4
20401f30:	97ba                	add	a5,a5,a4
20401f32:	873e                	mv	a4,a5
20401f34:	57fd                	li	a5,-1
20401f36:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401f38:	fd842783          	lw	a5,-40(s0)
20401f3c:	078e                	slli	a5,a5,0x3
20401f3e:	873e                	mv	a4,a5
20401f40:	fe842783          	lw	a5,-24(s0)
20401f44:	973e                	add	a4,a4,a5
20401f46:	6791                	lui	a5,0x4
20401f48:	97ba                	add	a5,a5,a4
20401f4a:	873e                	mv	a4,a5
20401f4c:	fd042783          	lw	a5,-48(s0)
20401f50:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401f52:	fd442783          	lw	a5,-44(s0)
20401f56:	0007d913          	srli	s2,a5,0x0
20401f5a:	4981                	li	s3,0
20401f5c:	fd842783          	lw	a5,-40(s0)
20401f60:	078e                	slli	a5,a5,0x3
20401f62:	873e                	mv	a4,a5
20401f64:	fe842783          	lw	a5,-24(s0)
20401f68:	973e                	add	a4,a4,a5
20401f6a:	6791                	lui	a5,0x4
20401f6c:	0791                	addi	a5,a5,4
20401f6e:	97ba                	add	a5,a5,a4
20401f70:	874a                	mv	a4,s2
20401f72:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401f74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401f76:	853e                	mv	a0,a5
20401f78:	50b2                	lw	ra,44(sp)
20401f7a:	5422                	lw	s0,40(sp)
20401f7c:	5912                	lw	s2,36(sp)
20401f7e:	5982                	lw	s3,32(sp)
20401f80:	6145                	addi	sp,sp,48
20401f82:	8082                	ret

20401f84 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401f84:	1101                	addi	sp,sp,-32
20401f86:	ce06                	sw	ra,28(sp)
20401f88:	cc22                	sw	s0,24(sp)
20401f8a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401f8c:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401f90:	f14027f3          	csrr	a5,mhartid
20401f94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401f98:	fec42783          	lw	a5,-20(s0)
20401f9c:	853e                	mv	a0,a5
20401f9e:	1a6030ef          	jal	ra,20405144 <metal_cpu_get>
20401fa2:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401fa6:	fe842503          	lw	a0,-24(s0)
20401faa:	174030ef          	jal	ra,2040511e <metal_cpu_interrupt_controller>
20401fae:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401fb0:	853e                	mv	a0,a5
20401fb2:	40f2                	lw	ra,28(sp)
20401fb4:	4462                	lw	s0,24(sp)
20401fb6:	6105                	addi	sp,sp,32
20401fb8:	8082                	ret

20401fba <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401fba:	7139                	addi	sp,sp,-64
20401fbc:	de06                	sw	ra,60(sp)
20401fbe:	dc22                	sw	s0,56(sp)
20401fc0:	0080                	addi	s0,sp,64
20401fc2:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401fc6:	fcc42503          	lw	a0,-52(s0)
20401fca:	3bed                	jal	20401dc4 <__metal_driver_sifive_clint0_num_interrupts>
20401fcc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401fd0:	fcc42783          	lw	a5,-52(s0)
20401fd4:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401fd8:	fe442783          	lw	a5,-28(s0)
20401fdc:	43dc                	lw	a5,4(a5)
20401fde:	efa9                	bnez	a5,20402038 <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401fe0:	fe042623          	sw	zero,-20(s0)
20401fe4:	a081                	j	20402024 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401fe6:	fec42583          	lw	a1,-20(s0)
20401fea:	fcc42503          	lw	a0,-52(s0)
20401fee:	3bed                	jal	20401de8 <__metal_driver_sifive_clint0_interrupt_parents>
20401ff0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401ff4:	fec42583          	lw	a1,-20(s0)
20401ff8:	fcc42503          	lw	a0,-52(s0)
20401ffc:	3525                	jal	20401e24 <__metal_driver_sifive_clint0_interrupt_lines>
20401ffe:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402002:	fe042783          	lw	a5,-32(s0)
20402006:	439c                	lw	a5,0(a5)
20402008:	4fdc                	lw	a5,28(a5)
2040200a:	fcc42683          	lw	a3,-52(s0)
2040200e:	4601                	li	a2,0
20402010:	fdc42583          	lw	a1,-36(s0)
20402014:	fe042503          	lw	a0,-32(s0)
20402018:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
2040201a:	fec42783          	lw	a5,-20(s0)
2040201e:	0785                	addi	a5,a5,1
20402020:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402024:	fec42703          	lw	a4,-20(s0)
20402028:	fe842783          	lw	a5,-24(s0)
2040202c:	faf74de3          	blt	a4,a5,20401fe6 <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402030:	fe442783          	lw	a5,-28(s0)
20402034:	4705                	li	a4,1
20402036:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20402038:	0001                	nop
2040203a:	50f2                	lw	ra,60(sp)
2040203c:	5462                	lw	s0,56(sp)
2040203e:	6121                	addi	sp,sp,64
20402040:	8082                	ret

20402042 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402042:	7139                	addi	sp,sp,-64
20402044:	de06                	sw	ra,60(sp)
20402046:	dc22                	sw	s0,56(sp)
20402048:	0080                	addi	s0,sp,64
2040204a:	fca42623          	sw	a0,-52(s0)
2040204e:	fcb42423          	sw	a1,-56(s0)
20402052:	fcc42223          	sw	a2,-60(s0)
20402056:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
2040205a:	57fd                	li	a5,-1
2040205c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402060:	334010ef          	jal	ra,20403394 <__metal_controller_interrupt_vector_mode>
20402064:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20402068:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040206c:	3f21                	jal	20401f84 <_get_cpu_intc>
2040206e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402072:	fcc42503          	lw	a0,-52(s0)
20402076:	33b9                	jal	20401dc4 <__metal_driver_sifive_clint0_num_interrupts>
20402078:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
2040207c:	fe042703          	lw	a4,-32(s0)
20402080:	4785                	li	a5,1
20402082:	00f70863          	beq	a4,a5,20402092 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20402086:	fe042783          	lw	a5,-32(s0)
2040208a:	c781                	beqz	a5,20402092 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
2040208c:	fec42783          	lw	a5,-20(s0)
20402090:	a049                	j	20402112 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402092:	fe042223          	sw	zero,-28(s0)
20402096:	a091                	j	204020da <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402098:	fe442583          	lw	a1,-28(s0)
2040209c:	fcc42503          	lw	a0,-52(s0)
204020a0:	3351                	jal	20401e24 <__metal_driver_sifive_clint0_interrupt_lines>
204020a2:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204020a6:	fe442583          	lw	a1,-28(s0)
204020aa:	fcc42503          	lw	a0,-52(s0)
204020ae:	3b2d                	jal	20401de8 <__metal_driver_sifive_clint0_interrupt_parents>
204020b0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204020b4:	fdc42703          	lw	a4,-36(s0)
204020b8:	fe842783          	lw	a5,-24(s0)
204020bc:	00f71863          	bne	a4,a5,204020cc <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
204020c0:	fc842703          	lw	a4,-56(s0)
204020c4:	fd442783          	lw	a5,-44(s0)
204020c8:	02f70063          	beq	a4,a5,204020e8 <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
204020cc:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
204020d0:	fe442783          	lw	a5,-28(s0)
204020d4:	0785                	addi	a5,a5,1
204020d6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
204020da:	fe442703          	lw	a4,-28(s0)
204020de:	fd842783          	lw	a5,-40(s0)
204020e2:	faf74be3          	blt	a4,a5,20402098 <__metal_driver_riscv_clint0_register+0x56>
204020e6:	a011                	j	204020ea <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
204020e8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
204020ea:	fe842783          	lw	a5,-24(s0)
204020ee:	c385                	beqz	a5,2040210e <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
204020f0:	fe842783          	lw	a5,-24(s0)
204020f4:	439c                	lw	a5,0(a5)
204020f6:	4fdc                	lw	a5,28(a5)
204020f8:	fc042683          	lw	a3,-64(s0)
204020fc:	fc442603          	lw	a2,-60(s0)
20402100:	fc842583          	lw	a1,-56(s0)
20402104:	fe842503          	lw	a0,-24(s0)
20402108:	9782                	jalr	a5
2040210a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
2040210e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402112:	853e                	mv	a0,a5
20402114:	50f2                	lw	ra,60(sp)
20402116:	5462                	lw	s0,56(sp)
20402118:	6121                	addi	sp,sp,64
2040211a:	8082                	ret

2040211c <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
2040211c:	7179                	addi	sp,sp,-48
2040211e:	d622                	sw	s0,44(sp)
20402120:	1800                	addi	s0,sp,48
20402122:	fca42e23          	sw	a0,-36(s0)
20402126:	fcb42c23          	sw	a1,-40(s0)
2040212a:	fcc42a23          	sw	a2,-44(s0)
2040212e:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402132:	57fd                	li	a5,-1
20402134:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20402138:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
2040213c:	853e                	mv	a0,a5
2040213e:	5432                	lw	s0,44(sp)
20402140:	6145                	addi	sp,sp,48
20402142:	8082                	ret

20402144 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402144:	1101                	addi	sp,sp,-32
20402146:	ce06                	sw	ra,28(sp)
20402148:	cc22                	sw	s0,24(sp)
2040214a:	1000                	addi	s0,sp,32
2040214c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402150:	244010ef          	jal	ra,20403394 <__metal_controller_interrupt_vector_mode>
20402154:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20402156:	853e                	mv	a0,a5
20402158:	40f2                	lw	ra,28(sp)
2040215a:	4462                	lw	s0,24(sp)
2040215c:	6105                	addi	sp,sp,32
2040215e:	8082                	ret

20402160 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402160:	7179                	addi	sp,sp,-48
20402162:	d606                	sw	ra,44(sp)
20402164:	d422                	sw	s0,40(sp)
20402166:	1800                	addi	s0,sp,48
20402168:	fca42e23          	sw	a0,-36(s0)
2040216c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402170:	57fd                	li	a5,-1
20402172:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20402176:	3539                	jal	20401f84 <_get_cpu_intc>
20402178:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
2040217c:	fe842783          	lw	a5,-24(s0)
20402180:	c395                	beqz	a5,204021a4 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402182:	fd842703          	lw	a4,-40(s0)
20402186:	4785                	li	a5,1
20402188:	00e7ef63          	bltu	a5,a4,204021a6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
2040218c:	fe842783          	lw	a5,-24(s0)
20402190:	439c                	lw	a5,0(a5)
20402192:	43dc                	lw	a5,4(a5)
20402194:	fd842583          	lw	a1,-40(s0)
20402198:	fe842503          	lw	a0,-24(s0)
2040219c:	9782                	jalr	a5
2040219e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204021a2:	a011                	j	204021a6 <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204021a4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204021a6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204021aa:	853e                	mv	a0,a5
204021ac:	50b2                	lw	ra,44(sp)
204021ae:	5422                	lw	s0,40(sp)
204021b0:	6145                	addi	sp,sp,48
204021b2:	8082                	ret

204021b4 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204021b4:	7139                	addi	sp,sp,-64
204021b6:	de06                	sw	ra,60(sp)
204021b8:	dc22                	sw	s0,56(sp)
204021ba:	0080                	addi	s0,sp,64
204021bc:	fca42623          	sw	a0,-52(s0)
204021c0:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204021c4:	57fd                	li	a5,-1
204021c6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204021ca:	fc842783          	lw	a5,-56(s0)
204021ce:	c7c9                	beqz	a5,20402258 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
204021d0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204021d4:	3b45                	jal	20401f84 <_get_cpu_intc>
204021d6:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204021da:	fcc42503          	lw	a0,-52(s0)
204021de:	36dd                	jal	20401dc4 <__metal_driver_sifive_clint0_num_interrupts>
204021e0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
204021e4:	fe042223          	sw	zero,-28(s0)
204021e8:	a091                	j	2040222c <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204021ea:	fe442583          	lw	a1,-28(s0)
204021ee:	fcc42503          	lw	a0,-52(s0)
204021f2:	390d                	jal	20401e24 <__metal_driver_sifive_clint0_interrupt_lines>
204021f4:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204021f8:	fe442583          	lw	a1,-28(s0)
204021fc:	fcc42503          	lw	a0,-52(s0)
20402200:	36e5                	jal	20401de8 <__metal_driver_sifive_clint0_interrupt_parents>
20402202:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
20402206:	fe042703          	lw	a4,-32(s0)
2040220a:	fe842783          	lw	a5,-24(s0)
2040220e:	00f71863          	bne	a4,a5,2040221e <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402212:	fc842703          	lw	a4,-56(s0)
20402216:	fd842783          	lw	a5,-40(s0)
2040221a:	02f70063          	beq	a4,a5,2040223a <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
2040221e:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402222:	fe442783          	lw	a5,-28(s0)
20402226:	0785                	addi	a5,a5,1
20402228:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
2040222c:	fe442703          	lw	a4,-28(s0)
20402230:	fdc42783          	lw	a5,-36(s0)
20402234:	faf74be3          	blt	a4,a5,204021ea <__metal_driver_riscv_clint0_enable+0x36>
20402238:	a011                	j	2040223c <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
2040223a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
2040223c:	fe842783          	lw	a5,-24(s0)
20402240:	cf81                	beqz	a5,20402258 <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402242:	fe842783          	lw	a5,-24(s0)
20402246:	439c                	lw	a5,0(a5)
20402248:	53dc                	lw	a5,36(a5)
2040224a:	fc842583          	lw	a1,-56(s0)
2040224e:	fe842503          	lw	a0,-24(s0)
20402252:	9782                	jalr	a5
20402254:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
20402258:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
2040225c:	853e                	mv	a0,a5
2040225e:	50f2                	lw	ra,60(sp)
20402260:	5462                	lw	s0,56(sp)
20402262:	6121                	addi	sp,sp,64
20402264:	8082                	ret

20402266 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
20402266:	7139                	addi	sp,sp,-64
20402268:	de06                	sw	ra,60(sp)
2040226a:	dc22                	sw	s0,56(sp)
2040226c:	0080                	addi	s0,sp,64
2040226e:	fca42623          	sw	a0,-52(s0)
20402272:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
20402276:	57fd                	li	a5,-1
20402278:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
2040227c:	fc842783          	lw	a5,-56(s0)
20402280:	c7c9                	beqz	a5,2040230a <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402282:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402286:	39fd                	jal	20401f84 <_get_cpu_intc>
20402288:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
2040228c:	fcc42503          	lw	a0,-52(s0)
20402290:	3e15                	jal	20401dc4 <__metal_driver_sifive_clint0_num_interrupts>
20402292:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
20402296:	fe042223          	sw	zero,-28(s0)
2040229a:	a091                	j	204022de <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040229c:	fe442583          	lw	a1,-28(s0)
204022a0:	fcc42503          	lw	a0,-52(s0)
204022a4:	3641                	jal	20401e24 <__metal_driver_sifive_clint0_interrupt_lines>
204022a6:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204022aa:	fe442583          	lw	a1,-28(s0)
204022ae:	fcc42503          	lw	a0,-52(s0)
204022b2:	3e1d                	jal	20401de8 <__metal_driver_sifive_clint0_interrupt_parents>
204022b4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204022b8:	fe042703          	lw	a4,-32(s0)
204022bc:	fe842783          	lw	a5,-24(s0)
204022c0:	00f71863          	bne	a4,a5,204022d0 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204022c4:	fc842703          	lw	a4,-56(s0)
204022c8:	fd842783          	lw	a5,-40(s0)
204022cc:	02f70063          	beq	a4,a5,204022ec <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
204022d0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204022d4:	fe442783          	lw	a5,-28(s0)
204022d8:	0785                	addi	a5,a5,1
204022da:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
204022de:	fe442703          	lw	a4,-28(s0)
204022e2:	fdc42783          	lw	a5,-36(s0)
204022e6:	faf74be3          	blt	a4,a5,2040229c <__metal_driver_riscv_clint0_disable+0x36>
204022ea:	a011                	j	204022ee <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
204022ec:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
204022ee:	fe842783          	lw	a5,-24(s0)
204022f2:	cf81                	beqz	a5,2040230a <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
204022f4:	fe842783          	lw	a5,-24(s0)
204022f8:	439c                	lw	a5,0(a5)
204022fa:	579c                	lw	a5,40(a5)
204022fc:	fc842583          	lw	a1,-56(s0)
20402300:	fe842503          	lw	a0,-24(s0)
20402304:	9782                	jalr	a5
20402306:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
2040230a:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
2040230e:	853e                	mv	a0,a5
20402310:	50f2                	lw	ra,60(sp)
20402312:	5462                	lw	s0,56(sp)
20402314:	6121                	addi	sp,sp,64
20402316:	8082                	ret

20402318 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402318:	7179                	addi	sp,sp,-48
2040231a:	d606                	sw	ra,44(sp)
2040231c:	d422                	sw	s0,40(sp)
2040231e:	1800                	addi	s0,sp,48
20402320:	fca42e23          	sw	a0,-36(s0)
20402324:	fcb42c23          	sw	a1,-40(s0)
20402328:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
2040232c:	57fd                	li	a5,-1
2040232e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402332:	fdc42783          	lw	a5,-36(s0)
20402336:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
2040233a:	fdc42503          	lw	a0,-36(s0)
2040233e:	a61ff0ef          	jal	ra,20401d9e <__metal_driver_sifive_clint0_control_base>
20402342:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
20402346:	fd842703          	lw	a4,-40(s0)
2040234a:	4789                	li	a5,2
2040234c:	04f70963          	beq	a4,a5,2040239e <__metal_driver_riscv_clint0_command_request+0x86>
20402350:	fd842703          	lw	a4,-40(s0)
20402354:	4789                	li	a5,2
20402356:	00e7c863          	blt	a5,a4,20402366 <__metal_driver_riscv_clint0_command_request+0x4e>
2040235a:	fd842703          	lw	a4,-40(s0)
2040235e:	4785                	li	a5,1
20402360:	00f70e63          	beq	a4,a5,2040237c <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
20402364:	a8f1                	j	20402440 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
20402366:	fd842703          	lw	a4,-40(s0)
2040236a:	478d                	li	a5,3
2040236c:	04f70d63          	beq	a4,a5,204023c6 <__metal_driver_riscv_clint0_command_request+0xae>
20402370:	fd842703          	lw	a4,-40(s0)
20402374:	4791                	li	a5,4
20402376:	08f70963          	beq	a4,a5,20402408 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
2040237a:	a0d9                	j	20402440 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
2040237c:	fd442783          	lw	a5,-44(s0)
20402380:	cbcd                	beqz	a5,20402432 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20402382:	fe842503          	lw	a0,-24(s0)
20402386:	acfff0ef          	jal	ra,20401e54 <__metal_clint0_mtime_get>
2040238a:	87aa                	mv	a5,a0
2040238c:	882e                	mv	a6,a1
2040238e:	fd442703          	lw	a4,-44(s0)
20402392:	c31c                	sw	a5,0(a4)
20402394:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
20402398:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040239c:	a859                	j	20402432 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
2040239e:	fd442783          	lw	a5,-44(s0)
204023a2:	cbd1                	beqz	a5,20402436 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204023a4:	fd442783          	lw	a5,-44(s0)
204023a8:	439c                	lw	a5,0(a5)
204023aa:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204023ae:	fe042783          	lw	a5,-32(s0)
204023b2:	078a                	slli	a5,a5,0x2
204023b4:	873e                	mv	a4,a5
204023b6:	fe442783          	lw	a5,-28(s0)
204023ba:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
204023bc:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
204023c0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204023c4:	a88d                	j	20402436 <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
204023c6:	fd442783          	lw	a5,-44(s0)
204023ca:	cba5                	beqz	a5,2040243a <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
204023cc:	fd442783          	lw	a5,-44(s0)
204023d0:	439c                	lw	a5,0(a5)
204023d2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204023d6:	fe042783          	lw	a5,-32(s0)
204023da:	078a                	slli	a5,a5,0x2
204023dc:	873e                	mv	a4,a5
204023de:	fe442783          	lw	a5,-28(s0)
204023e2:	97ba                	add	a5,a5,a4
204023e4:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
204023e6:	4785                	li	a5,1
204023e8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
204023ea:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204023ee:	fe042783          	lw	a5,-32(s0)
204023f2:	078a                	slli	a5,a5,0x2
204023f4:	873e                	mv	a4,a5
204023f6:	fe442783          	lw	a5,-28(s0)
204023fa:	97ba                	add	a5,a5,a4
204023fc:	439c                	lw	a5,0(a5)
204023fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402402:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402406:	a815                	j	2040243a <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402408:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
2040240c:	fd442783          	lw	a5,-44(s0)
20402410:	c79d                	beqz	a5,2040243e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402412:	fd442783          	lw	a5,-44(s0)
20402416:	439c                	lw	a5,0(a5)
20402418:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040241c:	fe042783          	lw	a5,-32(s0)
20402420:	078a                	slli	a5,a5,0x2
20402422:	873e                	mv	a4,a5
20402424:	fe442783          	lw	a5,-28(s0)
20402428:	97ba                	add	a5,a5,a4
2040242a:	439c                	lw	a5,0(a5)
2040242c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402430:	a039                	j	2040243e <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402432:	0001                	nop
20402434:	a031                	j	20402440 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
20402436:	0001                	nop
20402438:	a021                	j	20402440 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040243a:	0001                	nop
2040243c:	a011                	j	20402440 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
2040243e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402440:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
20402444:	853e                	mv	a0,a5
20402446:	50b2                	lw	ra,44(sp)
20402448:	5422                	lw	s0,40(sp)
2040244a:	6145                	addi	sp,sp,48
2040244c:	8082                	ret

2040244e <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
2040244e:	7179                	addi	sp,sp,-48
20402450:	d606                	sw	ra,44(sp)
20402452:	d422                	sw	s0,40(sp)
20402454:	1800                	addi	s0,sp,48
20402456:	fca42e23          	sw	a0,-36(s0)
2040245a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
2040245e:	511020ef          	jal	ra,2040516e <metal_cpu_get_current_hartid>
20402462:	87aa                	mv	a5,a0
20402464:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402468:	fec40793          	addi	a5,s0,-20
2040246c:	863e                	mv	a2,a5
2040246e:	4589                	li	a1,2
20402470:	fdc42503          	lw	a0,-36(s0)
20402474:	3555                	jal	20402318 <__metal_driver_riscv_clint0_command_request>
20402476:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402478:	853e                	mv	a0,a5
2040247a:	50b2                	lw	ra,44(sp)
2040247c:	5422                	lw	s0,40(sp)
2040247e:	6145                	addi	sp,sp,48
20402480:	8082                	ret

20402482 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
20402482:	7179                	addi	sp,sp,-48
20402484:	d606                	sw	ra,44(sp)
20402486:	d422                	sw	s0,40(sp)
20402488:	1800                	addi	s0,sp,48
2040248a:	fca42e23          	sw	a0,-36(s0)
2040248e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
20402492:	4dd020ef          	jal	ra,2040516e <metal_cpu_get_current_hartid>
20402496:	87aa                	mv	a5,a0
20402498:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
2040249c:	fec40793          	addi	a5,s0,-20
204024a0:	863e                	mv	a2,a5
204024a2:	458d                	li	a1,3
204024a4:	fdc42503          	lw	a0,-36(s0)
204024a8:	3d85                	jal	20402318 <__metal_driver_riscv_clint0_command_request>
204024aa:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204024ac:	853e                	mv	a0,a5
204024ae:	50b2                	lw	ra,44(sp)
204024b0:	5422                	lw	s0,40(sp)
204024b2:	6145                	addi	sp,sp,48
204024b4:	8082                	ret

204024b6 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204024b6:	1101                	addi	sp,sp,-32
204024b8:	ce22                	sw	s0,28(sp)
204024ba:	1000                	addi	s0,sp,32
204024bc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204024c0:	fec42703          	lw	a4,-20(s0)
204024c4:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204024c8:	00f71463          	bne	a4,a5,204024d0 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
204024cc:	4781                	li	a5,0
204024ce:	a011                	j	204024d2 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
204024d0:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
204024d2:	853e                	mv	a0,a5
204024d4:	4472                	lw	s0,28(sp)
204024d6:	6105                	addi	sp,sp,32
204024d8:	8082                	ret

204024da <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
204024da:	1101                	addi	sp,sp,-32
204024dc:	ce22                	sw	s0,28(sp)
204024de:	1000                	addi	s0,sp,32
204024e0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204024e4:	fec42703          	lw	a4,-20(s0)
204024e8:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
204024ec:	00f71763          	bne	a4,a5,204024fa <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
204024f0:	000f47b7          	lui	a5,0xf4
204024f4:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
204024f8:	a011                	j	204024fc <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
204024fa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
204024fc:	853e                	mv	a0,a5
204024fe:	4472                	lw	s0,28(sp)
20402500:	6105                	addi	sp,sp,32
20402502:	8082                	ret

20402504 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
20402504:	1101                	addi	sp,sp,-32
20402506:	ce22                	sw	s0,28(sp)
20402508:	1000                	addi	s0,sp,32
2040250a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040250e:	fec42703          	lw	a4,-20(s0)
20402512:	81818793          	addi	a5,gp,-2024 # 80000760 <__metal_dt_cpu_0>
20402516:	00f71763          	bne	a4,a5,20402524 <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
2040251a:	800007b7          	lui	a5,0x80000
2040251e:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe7b4>
20402522:	a011                	j	20402526 <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
20402524:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
20402526:	853e                	mv	a0,a5
20402528:	4472                	lw	s0,28(sp)
2040252a:	6105                	addi	sp,sp,32
2040252c:	8082                	ret

2040252e <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2040252e:	1101                	addi	sp,sp,-32
20402530:	ce22                	sw	s0,28(sp)
20402532:	1000                	addi	s0,sp,32
20402534:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402538:	fec42783          	lw	a5,-20(s0)
2040253c:	00f04a63          	bgtz	a5,20402550 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402540:	fec42703          	lw	a4,-20(s0)
20402544:	070a                	slli	a4,a4,0x2
20402546:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040254a:	97ba                	add	a5,a5,a4
2040254c:	439c                	lw	a5,0(a5)
2040254e:	a011                	j	20402552 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402550:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
20402552:	853e                	mv	a0,a5
20402554:	4472                	lw	s0,28(sp)
20402556:	6105                	addi	sp,sp,32
20402558:	8082                	ret

2040255a <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
2040255a:	1101                	addi	sp,sp,-32
2040255c:	ce22                	sw	s0,28(sp)
2040255e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402560:	f14027f3          	csrr	a5,mhartid
20402564:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402568:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
2040256c:	853e                	mv	a0,a5
2040256e:	4472                	lw	s0,28(sp)
20402570:	6105                	addi	sp,sp,32
20402572:	8082                	ret

20402574 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
20402574:	1101                	addi	sp,sp,-32
20402576:	ce22                	sw	s0,28(sp)
20402578:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040257a:	47a1                	li	a5,8
2040257c:	3007a7f3          	csrrs	a5,mstatus,a5
20402580:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
20402584:	0001                	nop
20402586:	4472                	lw	s0,28(sp)
20402588:	6105                	addi	sp,sp,32
2040258a:	8082                	ret

2040258c <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
2040258c:	1101                	addi	sp,sp,-32
2040258e:	ce22                	sw	s0,28(sp)
20402590:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402592:	47a1                	li	a5,8
20402594:	3007b7f3          	csrrc	a5,mstatus,a5
20402598:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
2040259c:	0001                	nop
2040259e:	4472                	lw	s0,28(sp)
204025a0:	6105                	addi	sp,sp,32
204025a2:	8082                	ret

204025a4 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204025a4:	1101                	addi	sp,sp,-32
204025a6:	ce22                	sw	s0,28(sp)
204025a8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204025aa:	47a1                	li	a5,8
204025ac:	3047a7f3          	csrrs	a5,mie,a5
204025b0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204025b4:	0001                	nop
204025b6:	4472                	lw	s0,28(sp)
204025b8:	6105                	addi	sp,sp,32
204025ba:	8082                	ret

204025bc <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204025bc:	1101                	addi	sp,sp,-32
204025be:	ce22                	sw	s0,28(sp)
204025c0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204025c2:	47a1                	li	a5,8
204025c4:	3047b7f3          	csrrc	a5,mie,a5
204025c8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204025cc:	0001                	nop
204025ce:	4472                	lw	s0,28(sp)
204025d0:	6105                	addi	sp,sp,32
204025d2:	8082                	ret

204025d4 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204025d4:	1101                	addi	sp,sp,-32
204025d6:	ce22                	sw	s0,28(sp)
204025d8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204025da:	08000793          	li	a5,128
204025de:	3047a7f3          	csrrs	a5,mie,a5
204025e2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204025e6:	0001                	nop
204025e8:	4472                	lw	s0,28(sp)
204025ea:	6105                	addi	sp,sp,32
204025ec:	8082                	ret

204025ee <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204025ee:	1101                	addi	sp,sp,-32
204025f0:	ce22                	sw	s0,28(sp)
204025f2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204025f4:	08000793          	li	a5,128
204025f8:	3047b7f3          	csrrc	a5,mie,a5
204025fc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402600:	0001                	nop
20402602:	4472                	lw	s0,28(sp)
20402604:	6105                	addi	sp,sp,32
20402606:	8082                	ret

20402608 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402608:	1101                	addi	sp,sp,-32
2040260a:	ce22                	sw	s0,28(sp)
2040260c:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040260e:	6785                	lui	a5,0x1
20402610:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402614:	3047a7f3          	csrrs	a5,mie,a5
20402618:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
2040261c:	0001                	nop
2040261e:	4472                	lw	s0,28(sp)
20402620:	6105                	addi	sp,sp,32
20402622:	8082                	ret

20402624 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
20402624:	1101                	addi	sp,sp,-32
20402626:	ce22                	sw	s0,28(sp)
20402628:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2040262a:	6785                	lui	a5,0x1
2040262c:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402630:	3047b7f3          	csrrc	a5,mie,a5
20402634:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402638:	0001                	nop
2040263a:	4472                	lw	s0,28(sp)
2040263c:	6105                	addi	sp,sp,32
2040263e:	8082                	ret

20402640 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402640:	7179                	addi	sp,sp,-48
20402642:	d622                	sw	s0,44(sp)
20402644:	1800                	addi	s0,sp,48
20402646:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
2040264a:	fdc42783          	lw	a5,-36(s0)
2040264e:	4705                	li	a4,1
20402650:	00f717b3          	sll	a5,a4,a5
20402654:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402658:	fec42783          	lw	a5,-20(s0)
2040265c:	3047a7f3          	csrrs	a5,mie,a5
20402660:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
20402664:	0001                	nop
20402666:	5432                	lw	s0,44(sp)
20402668:	6145                	addi	sp,sp,48
2040266a:	8082                	ret

2040266c <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
2040266c:	7179                	addi	sp,sp,-48
2040266e:	d622                	sw	s0,44(sp)
20402670:	1800                	addi	s0,sp,48
20402672:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
20402676:	fdc42783          	lw	a5,-36(s0)
2040267a:	4705                	li	a4,1
2040267c:	00f717b3          	sll	a5,a4,a5
20402680:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402684:	fec42783          	lw	a5,-20(s0)
20402688:	3047b7f3          	csrrc	a5,mie,a5
2040268c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402690:	0001                	nop
20402692:	5432                	lw	s0,44(sp)
20402694:	6145                	addi	sp,sp,48
20402696:	8082                	ret

20402698 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
20402698:	1101                	addi	sp,sp,-32
2040269a:	ce06                	sw	ra,28(sp)
2040269c:	cc22                	sw	s0,24(sp)
2040269e:	1000                	addi	s0,sp,32
204026a0:	fea42623          	sw	a0,-20(s0)
204026a4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204026a8:	06400513          	li	a0,100
204026ac:	2dd020ef          	jal	ra,20405188 <metal_shutdown>

204026b0 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204026b0:	1101                	addi	sp,sp,-32
204026b2:	ce06                	sw	ra,28(sp)
204026b4:	cc22                	sw	s0,24(sp)
204026b6:	1000                	addi	s0,sp,32
204026b8:	fea42623          	sw	a0,-20(s0)
204026bc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204026c0:	0c800513          	li	a0,200
204026c4:	2c5020ef          	jal	ra,20405188 <metal_shutdown>

204026c8 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204026c8:	715d                	addi	sp,sp,-80
204026ca:	c686                	sw	ra,76(sp)
204026cc:	c496                	sw	t0,72(sp)
204026ce:	c29a                	sw	t1,68(sp)
204026d0:	c09e                	sw	t2,64(sp)
204026d2:	de22                	sw	s0,60(sp)
204026d4:	dc2a                	sw	a0,56(sp)
204026d6:	da2e                	sw	a1,52(sp)
204026d8:	d832                	sw	a2,48(sp)
204026da:	d636                	sw	a3,44(sp)
204026dc:	d43a                	sw	a4,40(sp)
204026de:	d23e                	sw	a5,36(sp)
204026e0:	d042                	sw	a6,32(sp)
204026e2:	ce46                	sw	a7,28(sp)
204026e4:	cc72                	sw	t3,24(sp)
204026e6:	ca76                	sw	t4,20(sp)
204026e8:	c87a                	sw	t5,16(sp)
204026ea:	c67e                	sw	t6,12(sp)
204026ec:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
204026ee:	12c00513          	li	a0,300
204026f2:	297020ef          	jal	ra,20405188 <metal_shutdown>

204026f6 <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
204026f6:	711d                	addi	sp,sp,-96
204026f8:	ce86                	sw	ra,92(sp)
204026fa:	cc96                	sw	t0,88(sp)
204026fc:	ca9a                	sw	t1,84(sp)
204026fe:	c89e                	sw	t2,80(sp)
20402700:	c6a2                	sw	s0,76(sp)
20402702:	c4aa                	sw	a0,72(sp)
20402704:	c2ae                	sw	a1,68(sp)
20402706:	c0b2                	sw	a2,64(sp)
20402708:	de36                	sw	a3,60(sp)
2040270a:	dc3a                	sw	a4,56(sp)
2040270c:	da3e                	sw	a5,52(sp)
2040270e:	d842                	sw	a6,48(sp)
20402710:	d646                	sw	a7,44(sp)
20402712:	d472                	sw	t3,40(sp)
20402714:	d276                	sw	t4,36(sp)
20402716:	d07a                	sw	t5,32(sp)
20402718:	ce7e                	sw	t6,28(sp)
2040271a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040271c:	3d3d                	jal	2040255a <__metal_myhart_id>
2040271e:	872a                	mv	a4,a0
20402720:	070a                	slli	a4,a4,0x2
20402722:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402726:	97ba                	add	a5,a5,a4
20402728:	439c                	lw	a5,0(a5)
2040272a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
2040272e:	fac42783          	lw	a5,-84(s0)
20402732:	c785                	beqz	a5,2040275a <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402734:	fac42503          	lw	a0,-84(s0)
20402738:	33f1                	jal	20402504 <__metal_driver_cpu_interrupt_controller>
2040273a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
2040273e:	fa842783          	lw	a5,-88(s0)
20402742:	0e07a783          	lw	a5,224(a5)
20402746:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
2040274a:	fa842783          	lw	a5,-88(s0)
2040274e:	0d87a783          	lw	a5,216(a5)
20402752:	fa442583          	lw	a1,-92(s0)
20402756:	450d                	li	a0,3
20402758:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
2040275a:	0001                	nop
2040275c:	40f6                	lw	ra,92(sp)
2040275e:	42e6                	lw	t0,88(sp)
20402760:	4356                	lw	t1,84(sp)
20402762:	43c6                	lw	t2,80(sp)
20402764:	4436                	lw	s0,76(sp)
20402766:	4526                	lw	a0,72(sp)
20402768:	4596                	lw	a1,68(sp)
2040276a:	4606                	lw	a2,64(sp)
2040276c:	56f2                	lw	a3,60(sp)
2040276e:	5762                	lw	a4,56(sp)
20402770:	57d2                	lw	a5,52(sp)
20402772:	5842                	lw	a6,48(sp)
20402774:	58b2                	lw	a7,44(sp)
20402776:	5e22                	lw	t3,40(sp)
20402778:	5e92                	lw	t4,36(sp)
2040277a:	5f02                	lw	t5,32(sp)
2040277c:	4ff2                	lw	t6,28(sp)
2040277e:	6125                	addi	sp,sp,96
20402780:	30200073          	mret

20402784 <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
20402784:	7179                	addi	sp,sp,-48
20402786:	d606                	sw	ra,44(sp)
20402788:	d422                	sw	s0,40(sp)
2040278a:	1800                	addi	s0,sp,48
2040278c:	fca42e23          	sw	a0,-36(s0)
20402790:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402794:	33d9                	jal	2040255a <__metal_myhart_id>
20402796:	872a                	mv	a4,a0
20402798:	070a                	slli	a4,a4,0x2
2040279a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040279e:	97ba                	add	a5,a5,a4
204027a0:	439c                	lw	a5,0(a5)
204027a2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204027a6:	342027f3          	csrr	a5,mcause
204027aa:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204027ae:	fec42783          	lw	a5,-20(s0)
204027b2:	c795                	beqz	a5,204027de <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204027b4:	fec42503          	lw	a0,-20(s0)
204027b8:	33b1                	jal	20402504 <__metal_driver_cpu_interrupt_controller>
204027ba:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204027be:	fe842783          	lw	a5,-24(s0)
204027c2:	3ff7f793          	andi	a5,a5,1023
204027c6:	fe442703          	lw	a4,-28(s0)
204027ca:	0e078793          	addi	a5,a5,224
204027ce:	078a                	slli	a5,a5,0x2
204027d0:	97ba                	add	a5,a5,a4
204027d2:	479c                	lw	a5,8(a5)
204027d4:	fdc42583          	lw	a1,-36(s0)
204027d8:	fec42503          	lw	a0,-20(s0)
204027dc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
204027de:	0001                	nop
204027e0:	50b2                	lw	ra,44(sp)
204027e2:	5422                	lw	s0,40(sp)
204027e4:	6145                	addi	sp,sp,48
204027e6:	8082                	ret

204027e8 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204027e8:	711d                	addi	sp,sp,-96
204027ea:	ce86                	sw	ra,92(sp)
204027ec:	cc96                	sw	t0,88(sp)
204027ee:	ca9a                	sw	t1,84(sp)
204027f0:	c89e                	sw	t2,80(sp)
204027f2:	c6a2                	sw	s0,76(sp)
204027f4:	c4aa                	sw	a0,72(sp)
204027f6:	c2ae                	sw	a1,68(sp)
204027f8:	c0b2                	sw	a2,64(sp)
204027fa:	de36                	sw	a3,60(sp)
204027fc:	dc3a                	sw	a4,56(sp)
204027fe:	da3e                	sw	a5,52(sp)
20402800:	d842                	sw	a6,48(sp)
20402802:	d646                	sw	a7,44(sp)
20402804:	d472                	sw	t3,40(sp)
20402806:	d276                	sw	t4,36(sp)
20402808:	d07a                	sw	t5,32(sp)
2040280a:	ce7e                	sw	t6,28(sp)
2040280c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040280e:	33b1                	jal	2040255a <__metal_myhart_id>
20402810:	872a                	mv	a4,a0
20402812:	070a                	slli	a4,a4,0x2
20402814:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402818:	97ba                	add	a5,a5,a4
2040281a:	439c                	lw	a5,0(a5)
2040281c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402820:	fac42783          	lw	a5,-84(s0)
20402824:	c785                	beqz	a5,2040284c <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402826:	fac42503          	lw	a0,-84(s0)
2040282a:	39e9                	jal	20402504 <__metal_driver_cpu_interrupt_controller>
2040282c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402830:	fa842783          	lw	a5,-88(s0)
20402834:	1407a783          	lw	a5,320(a5)
20402838:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
2040283c:	fa842783          	lw	a5,-88(s0)
20402840:	1387a783          	lw	a5,312(a5)
20402844:	fa442583          	lw	a1,-92(s0)
20402848:	451d                	li	a0,7
2040284a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
2040284c:	0001                	nop
2040284e:	40f6                	lw	ra,92(sp)
20402850:	42e6                	lw	t0,88(sp)
20402852:	4356                	lw	t1,84(sp)
20402854:	43c6                	lw	t2,80(sp)
20402856:	4436                	lw	s0,76(sp)
20402858:	4526                	lw	a0,72(sp)
2040285a:	4596                	lw	a1,68(sp)
2040285c:	4606                	lw	a2,64(sp)
2040285e:	56f2                	lw	a3,60(sp)
20402860:	5762                	lw	a4,56(sp)
20402862:	57d2                	lw	a5,52(sp)
20402864:	5842                	lw	a6,48(sp)
20402866:	58b2                	lw	a7,44(sp)
20402868:	5e22                	lw	t3,40(sp)
2040286a:	5e92                	lw	t4,36(sp)
2040286c:	5f02                	lw	t5,32(sp)
2040286e:	4ff2                	lw	t6,28(sp)
20402870:	6125                	addi	sp,sp,96
20402872:	30200073          	mret

20402876 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402876:	7179                	addi	sp,sp,-48
20402878:	d606                	sw	ra,44(sp)
2040287a:	d422                	sw	s0,40(sp)
2040287c:	1800                	addi	s0,sp,48
2040287e:	fca42e23          	sw	a0,-36(s0)
20402882:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402886:	39d1                	jal	2040255a <__metal_myhart_id>
20402888:	87aa                	mv	a5,a0
2040288a:	853e                	mv	a0,a5
2040288c:	314d                	jal	2040252e <__metal_driver_cpu_get>
2040288e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402892:	fec42503          	lw	a0,-20(s0)
20402896:	154010ef          	jal	ra,204039ea <__metal_driver_cpu_mtime_get>
2040289a:	fea42023          	sw	a0,-32(s0)
2040289e:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
204028a2:	fe042783          	lw	a5,-32(s0)
204028a6:	fe442803          	lw	a6,-28(s0)
204028aa:	45a9                	li	a1,10
204028ac:	4601                	li	a2,0
204028ae:	00b786b3          	add	a3,a5,a1
204028b2:	8536                	mv	a0,a3
204028b4:	00f53533          	sltu	a0,a0,a5
204028b8:	00c80733          	add	a4,a6,a2
204028bc:	00e507b3          	add	a5,a0,a4
204028c0:	873e                	mv	a4,a5
204028c2:	87b6                	mv	a5,a3
204028c4:	883a                	mv	a6,a4
204028c6:	85be                	mv	a1,a5
204028c8:	8642                	mv	a2,a6
204028ca:	fec42503          	lw	a0,-20(s0)
204028ce:	182010ef          	jal	ra,20403a50 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
204028d2:	0001                	nop
204028d4:	50b2                	lw	ra,44(sp)
204028d6:	5422                	lw	s0,40(sp)
204028d8:	6145                	addi	sp,sp,48
204028da:	8082                	ret
	...

20402900 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402900:	7119                	addi	sp,sp,-128
20402902:	de86                	sw	ra,124(sp)
20402904:	dc96                	sw	t0,120(sp)
20402906:	da9a                	sw	t1,116(sp)
20402908:	d89e                	sw	t2,112(sp)
2040290a:	d6a2                	sw	s0,108(sp)
2040290c:	d4aa                	sw	a0,104(sp)
2040290e:	d2ae                	sw	a1,100(sp)
20402910:	d0b2                	sw	a2,96(sp)
20402912:	ceb6                	sw	a3,92(sp)
20402914:	ccba                	sw	a4,88(sp)
20402916:	cabe                	sw	a5,84(sp)
20402918:	c8c2                	sw	a6,80(sp)
2040291a:	c6c6                	sw	a7,76(sp)
2040291c:	c4f2                	sw	t3,72(sp)
2040291e:	c2f6                	sw	t4,68(sp)
20402920:	c0fa                	sw	t5,64(sp)
20402922:	de7e                	sw	t6,60(sp)
20402924:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402926:	3915                	jal	2040255a <__metal_myhart_id>
20402928:	872a                	mv	a4,a0
2040292a:	070a                	slli	a4,a4,0x2
2040292c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402930:	97ba                	add	a5,a5,a4
20402932:	439c                	lw	a5,0(a5)
20402934:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402938:	342027f3          	csrr	a5,mcause
2040293c:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402940:	341027f3          	csrr	a5,mepc
20402944:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402948:	343027f3          	csrr	a5,mtval
2040294c:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402950:	305027f3          	csrr	a5,mtvec
20402954:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402958:	fac42783          	lw	a5,-84(s0)
2040295c:	c7e9                	beqz	a5,20402a26 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040295e:	fac42503          	lw	a0,-84(s0)
20402962:	ba3ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402966:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
2040296a:	fa842783          	lw	a5,-88(s0)
2040296e:	3ff7f793          	andi	a5,a5,1023
20402972:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402976:	fa842783          	lw	a5,-88(s0)
2040297a:	0807d863          	bgez	a5,20402a0a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2040297e:	f9442703          	lw	a4,-108(s0)
20402982:	47ad                	li	a5,11
20402984:	00e7d763          	bge	a5,a4,20402992 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402988:	f9c42783          	lw	a5,-100(s0)
2040298c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402990:	ef9d                	bnez	a5,204029ce <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402992:	f9842683          	lw	a3,-104(s0)
20402996:	f9442703          	lw	a4,-108(s0)
2040299a:	87ba                	mv	a5,a4
2040299c:	0786                	slli	a5,a5,0x1
2040299e:	97ba                	add	a5,a5,a4
204029a0:	078e                	slli	a5,a5,0x3
204029a2:	97b6                	add	a5,a5,a3
204029a4:	0987a783          	lw	a5,152(a5)
204029a8:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
204029ac:	f9842683          	lw	a3,-104(s0)
204029b0:	f9442703          	lw	a4,-108(s0)
204029b4:	87ba                	mv	a5,a4
204029b6:	0786                	slli	a5,a5,0x1
204029b8:	97ba                	add	a5,a5,a4
204029ba:	078e                	slli	a5,a5,0x3
204029bc:	97b6                	add	a5,a5,a3
204029be:	0907a783          	lw	a5,144(a5)
204029c2:	f8c42583          	lw	a1,-116(s0)
204029c6:	f9442503          	lw	a0,-108(s0)
204029ca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
204029cc:	a8a9                	j	20402a26 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
204029ce:	f9c42783          	lw	a5,-100(s0)
204029d2:	03f7f713          	andi	a4,a5,63
204029d6:	4789                	li	a5,2
204029d8:	04f71763          	bne	a4,a5,20402a26 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
204029dc:	307027f3          	csrr	a5,mtvt
204029e0:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204029e4:	f9842783          	lw	a5,-104(s0)
204029e8:	0dc7a783          	lw	a5,220(a5)
204029ec:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
204029f0:	f9042783          	lw	a5,-112(s0)
204029f4:	439c                	lw	a5,0(a5)
204029f6:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
204029fa:	f8842783          	lw	a5,-120(s0)
204029fe:	f8c42583          	lw	a1,-116(s0)
20402a02:	f9442503          	lw	a0,-108(s0)
20402a06:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402a08:	a839                	j	20402a26 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402a0a:	f9842703          	lw	a4,-104(s0)
20402a0e:	f9442783          	lw	a5,-108(s0)
20402a12:	0e078793          	addi	a5,a5,224
20402a16:	078a                	slli	a5,a5,0x2
20402a18:	97ba                	add	a5,a5,a4
20402a1a:	479c                	lw	a5,8(a5)
20402a1c:	f9442583          	lw	a1,-108(s0)
20402a20:	fac42503          	lw	a0,-84(s0)
20402a24:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402a26:	50f6                	lw	ra,124(sp)
20402a28:	52e6                	lw	t0,120(sp)
20402a2a:	5356                	lw	t1,116(sp)
20402a2c:	53c6                	lw	t2,112(sp)
20402a2e:	5436                	lw	s0,108(sp)
20402a30:	5526                	lw	a0,104(sp)
20402a32:	5596                	lw	a1,100(sp)
20402a34:	5606                	lw	a2,96(sp)
20402a36:	46f6                	lw	a3,92(sp)
20402a38:	4766                	lw	a4,88(sp)
20402a3a:	47d6                	lw	a5,84(sp)
20402a3c:	4846                	lw	a6,80(sp)
20402a3e:	48b6                	lw	a7,76(sp)
20402a40:	4e26                	lw	t3,72(sp)
20402a42:	4e96                	lw	t4,68(sp)
20402a44:	4f06                	lw	t5,64(sp)
20402a46:	5ff2                	lw	t6,60(sp)
20402a48:	6109                	addi	sp,sp,128
20402a4a:	30200073          	mret
	...

20402a74 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402a74:	711d                	addi	sp,sp,-96
20402a76:	ce86                	sw	ra,92(sp)
20402a78:	cc96                	sw	t0,88(sp)
20402a7a:	ca9a                	sw	t1,84(sp)
20402a7c:	c89e                	sw	t2,80(sp)
20402a7e:	c6a2                	sw	s0,76(sp)
20402a80:	c4aa                	sw	a0,72(sp)
20402a82:	c2ae                	sw	a1,68(sp)
20402a84:	c0b2                	sw	a2,64(sp)
20402a86:	de36                	sw	a3,60(sp)
20402a88:	dc3a                	sw	a4,56(sp)
20402a8a:	da3e                	sw	a5,52(sp)
20402a8c:	d842                	sw	a6,48(sp)
20402a8e:	d646                	sw	a7,44(sp)
20402a90:	d472                	sw	t3,40(sp)
20402a92:	d276                	sw	t4,36(sp)
20402a94:	d07a                	sw	t5,32(sp)
20402a96:	ce7e                	sw	t6,28(sp)
20402a98:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a9a:	ac1ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402a9e:	872a                	mv	a4,a0
20402aa0:	070a                	slli	a4,a4,0x2
20402aa2:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402aa6:	97ba                	add	a5,a5,a4
20402aa8:	439c                	lw	a5,0(a5)
20402aaa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402aae:	fac42783          	lw	a5,-84(s0)
20402ab2:	c78d                	beqz	a5,20402adc <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ab4:	fac42503          	lw	a0,-84(s0)
20402ab8:	a4dff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402abc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402ac0:	fa842783          	lw	a5,-88(s0)
20402ac4:	2187a783          	lw	a5,536(a5)
20402ac8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402acc:	fa842783          	lw	a5,-88(s0)
20402ad0:	2107a783          	lw	a5,528(a5)
20402ad4:	fa442583          	lw	a1,-92(s0)
20402ad8:	4541                	li	a0,16
20402ada:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402adc:	0001                	nop
20402ade:	40f6                	lw	ra,92(sp)
20402ae0:	42e6                	lw	t0,88(sp)
20402ae2:	4356                	lw	t1,84(sp)
20402ae4:	43c6                	lw	t2,80(sp)
20402ae6:	4436                	lw	s0,76(sp)
20402ae8:	4526                	lw	a0,72(sp)
20402aea:	4596                	lw	a1,68(sp)
20402aec:	4606                	lw	a2,64(sp)
20402aee:	56f2                	lw	a3,60(sp)
20402af0:	5762                	lw	a4,56(sp)
20402af2:	57d2                	lw	a5,52(sp)
20402af4:	5842                	lw	a6,48(sp)
20402af6:	58b2                	lw	a7,44(sp)
20402af8:	5e22                	lw	t3,40(sp)
20402afa:	5e92                	lw	t4,36(sp)
20402afc:	5f02                	lw	t5,32(sp)
20402afe:	4ff2                	lw	t6,28(sp)
20402b00:	6125                	addi	sp,sp,96
20402b02:	30200073          	mret

20402b06 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402b06:	711d                	addi	sp,sp,-96
20402b08:	ce86                	sw	ra,92(sp)
20402b0a:	cc96                	sw	t0,88(sp)
20402b0c:	ca9a                	sw	t1,84(sp)
20402b0e:	c89e                	sw	t2,80(sp)
20402b10:	c6a2                	sw	s0,76(sp)
20402b12:	c4aa                	sw	a0,72(sp)
20402b14:	c2ae                	sw	a1,68(sp)
20402b16:	c0b2                	sw	a2,64(sp)
20402b18:	de36                	sw	a3,60(sp)
20402b1a:	dc3a                	sw	a4,56(sp)
20402b1c:	da3e                	sw	a5,52(sp)
20402b1e:	d842                	sw	a6,48(sp)
20402b20:	d646                	sw	a7,44(sp)
20402b22:	d472                	sw	t3,40(sp)
20402b24:	d276                	sw	t4,36(sp)
20402b26:	d07a                	sw	t5,32(sp)
20402b28:	ce7e                	sw	t6,28(sp)
20402b2a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b2c:	a2fff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402b30:	872a                	mv	a4,a0
20402b32:	070a                	slli	a4,a4,0x2
20402b34:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402b38:	97ba                	add	a5,a5,a4
20402b3a:	439c                	lw	a5,0(a5)
20402b3c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402b40:	fac42783          	lw	a5,-84(s0)
20402b44:	c78d                	beqz	a5,20402b6e <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b46:	fac42503          	lw	a0,-84(s0)
20402b4a:	9bbff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402b4e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402b52:	fa842783          	lw	a5,-88(s0)
20402b56:	2307a783          	lw	a5,560(a5)
20402b5a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402b5e:	fa842783          	lw	a5,-88(s0)
20402b62:	2287a783          	lw	a5,552(a5)
20402b66:	fa442583          	lw	a1,-92(s0)
20402b6a:	4545                	li	a0,17
20402b6c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402b6e:	0001                	nop
20402b70:	40f6                	lw	ra,92(sp)
20402b72:	42e6                	lw	t0,88(sp)
20402b74:	4356                	lw	t1,84(sp)
20402b76:	43c6                	lw	t2,80(sp)
20402b78:	4436                	lw	s0,76(sp)
20402b7a:	4526                	lw	a0,72(sp)
20402b7c:	4596                	lw	a1,68(sp)
20402b7e:	4606                	lw	a2,64(sp)
20402b80:	56f2                	lw	a3,60(sp)
20402b82:	5762                	lw	a4,56(sp)
20402b84:	57d2                	lw	a5,52(sp)
20402b86:	5842                	lw	a6,48(sp)
20402b88:	58b2                	lw	a7,44(sp)
20402b8a:	5e22                	lw	t3,40(sp)
20402b8c:	5e92                	lw	t4,36(sp)
20402b8e:	5f02                	lw	t5,32(sp)
20402b90:	4ff2                	lw	t6,28(sp)
20402b92:	6125                	addi	sp,sp,96
20402b94:	30200073          	mret

20402b98 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402b98:	711d                	addi	sp,sp,-96
20402b9a:	ce86                	sw	ra,92(sp)
20402b9c:	cc96                	sw	t0,88(sp)
20402b9e:	ca9a                	sw	t1,84(sp)
20402ba0:	c89e                	sw	t2,80(sp)
20402ba2:	c6a2                	sw	s0,76(sp)
20402ba4:	c4aa                	sw	a0,72(sp)
20402ba6:	c2ae                	sw	a1,68(sp)
20402ba8:	c0b2                	sw	a2,64(sp)
20402baa:	de36                	sw	a3,60(sp)
20402bac:	dc3a                	sw	a4,56(sp)
20402bae:	da3e                	sw	a5,52(sp)
20402bb0:	d842                	sw	a6,48(sp)
20402bb2:	d646                	sw	a7,44(sp)
20402bb4:	d472                	sw	t3,40(sp)
20402bb6:	d276                	sw	t4,36(sp)
20402bb8:	d07a                	sw	t5,32(sp)
20402bba:	ce7e                	sw	t6,28(sp)
20402bbc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402bbe:	99dff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402bc2:	872a                	mv	a4,a0
20402bc4:	070a                	slli	a4,a4,0x2
20402bc6:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402bca:	97ba                	add	a5,a5,a4
20402bcc:	439c                	lw	a5,0(a5)
20402bce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402bd2:	fac42783          	lw	a5,-84(s0)
20402bd6:	c78d                	beqz	a5,20402c00 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402bd8:	fac42503          	lw	a0,-84(s0)
20402bdc:	929ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402be0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402be4:	fa842783          	lw	a5,-88(s0)
20402be8:	2487a783          	lw	a5,584(a5)
20402bec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402bf0:	fa842783          	lw	a5,-88(s0)
20402bf4:	2407a783          	lw	a5,576(a5)
20402bf8:	fa442583          	lw	a1,-92(s0)
20402bfc:	4549                	li	a0,18
20402bfe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402c00:	0001                	nop
20402c02:	40f6                	lw	ra,92(sp)
20402c04:	42e6                	lw	t0,88(sp)
20402c06:	4356                	lw	t1,84(sp)
20402c08:	43c6                	lw	t2,80(sp)
20402c0a:	4436                	lw	s0,76(sp)
20402c0c:	4526                	lw	a0,72(sp)
20402c0e:	4596                	lw	a1,68(sp)
20402c10:	4606                	lw	a2,64(sp)
20402c12:	56f2                	lw	a3,60(sp)
20402c14:	5762                	lw	a4,56(sp)
20402c16:	57d2                	lw	a5,52(sp)
20402c18:	5842                	lw	a6,48(sp)
20402c1a:	58b2                	lw	a7,44(sp)
20402c1c:	5e22                	lw	t3,40(sp)
20402c1e:	5e92                	lw	t4,36(sp)
20402c20:	5f02                	lw	t5,32(sp)
20402c22:	4ff2                	lw	t6,28(sp)
20402c24:	6125                	addi	sp,sp,96
20402c26:	30200073          	mret

20402c2a <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402c2a:	711d                	addi	sp,sp,-96
20402c2c:	ce86                	sw	ra,92(sp)
20402c2e:	cc96                	sw	t0,88(sp)
20402c30:	ca9a                	sw	t1,84(sp)
20402c32:	c89e                	sw	t2,80(sp)
20402c34:	c6a2                	sw	s0,76(sp)
20402c36:	c4aa                	sw	a0,72(sp)
20402c38:	c2ae                	sw	a1,68(sp)
20402c3a:	c0b2                	sw	a2,64(sp)
20402c3c:	de36                	sw	a3,60(sp)
20402c3e:	dc3a                	sw	a4,56(sp)
20402c40:	da3e                	sw	a5,52(sp)
20402c42:	d842                	sw	a6,48(sp)
20402c44:	d646                	sw	a7,44(sp)
20402c46:	d472                	sw	t3,40(sp)
20402c48:	d276                	sw	t4,36(sp)
20402c4a:	d07a                	sw	t5,32(sp)
20402c4c:	ce7e                	sw	t6,28(sp)
20402c4e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c50:	90bff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402c54:	872a                	mv	a4,a0
20402c56:	070a                	slli	a4,a4,0x2
20402c58:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402c5c:	97ba                	add	a5,a5,a4
20402c5e:	439c                	lw	a5,0(a5)
20402c60:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402c64:	fac42783          	lw	a5,-84(s0)
20402c68:	c78d                	beqz	a5,20402c92 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c6a:	fac42503          	lw	a0,-84(s0)
20402c6e:	897ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402c72:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402c76:	fa842783          	lw	a5,-88(s0)
20402c7a:	2607a783          	lw	a5,608(a5)
20402c7e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402c82:	fa842783          	lw	a5,-88(s0)
20402c86:	2587a783          	lw	a5,600(a5)
20402c8a:	fa442583          	lw	a1,-92(s0)
20402c8e:	454d                	li	a0,19
20402c90:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402c92:	0001                	nop
20402c94:	40f6                	lw	ra,92(sp)
20402c96:	42e6                	lw	t0,88(sp)
20402c98:	4356                	lw	t1,84(sp)
20402c9a:	43c6                	lw	t2,80(sp)
20402c9c:	4436                	lw	s0,76(sp)
20402c9e:	4526                	lw	a0,72(sp)
20402ca0:	4596                	lw	a1,68(sp)
20402ca2:	4606                	lw	a2,64(sp)
20402ca4:	56f2                	lw	a3,60(sp)
20402ca6:	5762                	lw	a4,56(sp)
20402ca8:	57d2                	lw	a5,52(sp)
20402caa:	5842                	lw	a6,48(sp)
20402cac:	58b2                	lw	a7,44(sp)
20402cae:	5e22                	lw	t3,40(sp)
20402cb0:	5e92                	lw	t4,36(sp)
20402cb2:	5f02                	lw	t5,32(sp)
20402cb4:	4ff2                	lw	t6,28(sp)
20402cb6:	6125                	addi	sp,sp,96
20402cb8:	30200073          	mret

20402cbc <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402cbc:	711d                	addi	sp,sp,-96
20402cbe:	ce86                	sw	ra,92(sp)
20402cc0:	cc96                	sw	t0,88(sp)
20402cc2:	ca9a                	sw	t1,84(sp)
20402cc4:	c89e                	sw	t2,80(sp)
20402cc6:	c6a2                	sw	s0,76(sp)
20402cc8:	c4aa                	sw	a0,72(sp)
20402cca:	c2ae                	sw	a1,68(sp)
20402ccc:	c0b2                	sw	a2,64(sp)
20402cce:	de36                	sw	a3,60(sp)
20402cd0:	dc3a                	sw	a4,56(sp)
20402cd2:	da3e                	sw	a5,52(sp)
20402cd4:	d842                	sw	a6,48(sp)
20402cd6:	d646                	sw	a7,44(sp)
20402cd8:	d472                	sw	t3,40(sp)
20402cda:	d276                	sw	t4,36(sp)
20402cdc:	d07a                	sw	t5,32(sp)
20402cde:	ce7e                	sw	t6,28(sp)
20402ce0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ce2:	879ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402ce6:	872a                	mv	a4,a0
20402ce8:	070a                	slli	a4,a4,0x2
20402cea:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402cee:	97ba                	add	a5,a5,a4
20402cf0:	439c                	lw	a5,0(a5)
20402cf2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402cf6:	fac42783          	lw	a5,-84(s0)
20402cfa:	c78d                	beqz	a5,20402d24 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cfc:	fac42503          	lw	a0,-84(s0)
20402d00:	805ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402d04:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402d08:	fa842783          	lw	a5,-88(s0)
20402d0c:	2787a783          	lw	a5,632(a5)
20402d10:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402d14:	fa842783          	lw	a5,-88(s0)
20402d18:	2707a783          	lw	a5,624(a5)
20402d1c:	fa442583          	lw	a1,-92(s0)
20402d20:	4551                	li	a0,20
20402d22:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402d24:	0001                	nop
20402d26:	40f6                	lw	ra,92(sp)
20402d28:	42e6                	lw	t0,88(sp)
20402d2a:	4356                	lw	t1,84(sp)
20402d2c:	43c6                	lw	t2,80(sp)
20402d2e:	4436                	lw	s0,76(sp)
20402d30:	4526                	lw	a0,72(sp)
20402d32:	4596                	lw	a1,68(sp)
20402d34:	4606                	lw	a2,64(sp)
20402d36:	56f2                	lw	a3,60(sp)
20402d38:	5762                	lw	a4,56(sp)
20402d3a:	57d2                	lw	a5,52(sp)
20402d3c:	5842                	lw	a6,48(sp)
20402d3e:	58b2                	lw	a7,44(sp)
20402d40:	5e22                	lw	t3,40(sp)
20402d42:	5e92                	lw	t4,36(sp)
20402d44:	5f02                	lw	t5,32(sp)
20402d46:	4ff2                	lw	t6,28(sp)
20402d48:	6125                	addi	sp,sp,96
20402d4a:	30200073          	mret

20402d4e <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402d4e:	711d                	addi	sp,sp,-96
20402d50:	ce86                	sw	ra,92(sp)
20402d52:	cc96                	sw	t0,88(sp)
20402d54:	ca9a                	sw	t1,84(sp)
20402d56:	c89e                	sw	t2,80(sp)
20402d58:	c6a2                	sw	s0,76(sp)
20402d5a:	c4aa                	sw	a0,72(sp)
20402d5c:	c2ae                	sw	a1,68(sp)
20402d5e:	c0b2                	sw	a2,64(sp)
20402d60:	de36                	sw	a3,60(sp)
20402d62:	dc3a                	sw	a4,56(sp)
20402d64:	da3e                	sw	a5,52(sp)
20402d66:	d842                	sw	a6,48(sp)
20402d68:	d646                	sw	a7,44(sp)
20402d6a:	d472                	sw	t3,40(sp)
20402d6c:	d276                	sw	t4,36(sp)
20402d6e:	d07a                	sw	t5,32(sp)
20402d70:	ce7e                	sw	t6,28(sp)
20402d72:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d74:	fe6ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402d78:	872a                	mv	a4,a0
20402d7a:	070a                	slli	a4,a4,0x2
20402d7c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402d80:	97ba                	add	a5,a5,a4
20402d82:	439c                	lw	a5,0(a5)
20402d84:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402d88:	fac42783          	lw	a5,-84(s0)
20402d8c:	c78d                	beqz	a5,20402db6 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d8e:	fac42503          	lw	a0,-84(s0)
20402d92:	f72ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402d96:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402d9a:	fa842783          	lw	a5,-88(s0)
20402d9e:	2907a783          	lw	a5,656(a5)
20402da2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402da6:	fa842783          	lw	a5,-88(s0)
20402daa:	2887a783          	lw	a5,648(a5)
20402dae:	fa442583          	lw	a1,-92(s0)
20402db2:	4555                	li	a0,21
20402db4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402db6:	0001                	nop
20402db8:	40f6                	lw	ra,92(sp)
20402dba:	42e6                	lw	t0,88(sp)
20402dbc:	4356                	lw	t1,84(sp)
20402dbe:	43c6                	lw	t2,80(sp)
20402dc0:	4436                	lw	s0,76(sp)
20402dc2:	4526                	lw	a0,72(sp)
20402dc4:	4596                	lw	a1,68(sp)
20402dc6:	4606                	lw	a2,64(sp)
20402dc8:	56f2                	lw	a3,60(sp)
20402dca:	5762                	lw	a4,56(sp)
20402dcc:	57d2                	lw	a5,52(sp)
20402dce:	5842                	lw	a6,48(sp)
20402dd0:	58b2                	lw	a7,44(sp)
20402dd2:	5e22                	lw	t3,40(sp)
20402dd4:	5e92                	lw	t4,36(sp)
20402dd6:	5f02                	lw	t5,32(sp)
20402dd8:	4ff2                	lw	t6,28(sp)
20402dda:	6125                	addi	sp,sp,96
20402ddc:	30200073          	mret

20402de0 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402de0:	711d                	addi	sp,sp,-96
20402de2:	ce86                	sw	ra,92(sp)
20402de4:	cc96                	sw	t0,88(sp)
20402de6:	ca9a                	sw	t1,84(sp)
20402de8:	c89e                	sw	t2,80(sp)
20402dea:	c6a2                	sw	s0,76(sp)
20402dec:	c4aa                	sw	a0,72(sp)
20402dee:	c2ae                	sw	a1,68(sp)
20402df0:	c0b2                	sw	a2,64(sp)
20402df2:	de36                	sw	a3,60(sp)
20402df4:	dc3a                	sw	a4,56(sp)
20402df6:	da3e                	sw	a5,52(sp)
20402df8:	d842                	sw	a6,48(sp)
20402dfa:	d646                	sw	a7,44(sp)
20402dfc:	d472                	sw	t3,40(sp)
20402dfe:	d276                	sw	t4,36(sp)
20402e00:	d07a                	sw	t5,32(sp)
20402e02:	ce7e                	sw	t6,28(sp)
20402e04:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e06:	f54ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402e0a:	872a                	mv	a4,a0
20402e0c:	070a                	slli	a4,a4,0x2
20402e0e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402e12:	97ba                	add	a5,a5,a4
20402e14:	439c                	lw	a5,0(a5)
20402e16:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402e1a:	fac42783          	lw	a5,-84(s0)
20402e1e:	c78d                	beqz	a5,20402e48 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e20:	fac42503          	lw	a0,-84(s0)
20402e24:	ee0ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402e28:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402e2c:	fa842783          	lw	a5,-88(s0)
20402e30:	2a87a783          	lw	a5,680(a5)
20402e34:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402e38:	fa842783          	lw	a5,-88(s0)
20402e3c:	2a07a783          	lw	a5,672(a5)
20402e40:	fa442583          	lw	a1,-92(s0)
20402e44:	4559                	li	a0,22
20402e46:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402e48:	0001                	nop
20402e4a:	40f6                	lw	ra,92(sp)
20402e4c:	42e6                	lw	t0,88(sp)
20402e4e:	4356                	lw	t1,84(sp)
20402e50:	43c6                	lw	t2,80(sp)
20402e52:	4436                	lw	s0,76(sp)
20402e54:	4526                	lw	a0,72(sp)
20402e56:	4596                	lw	a1,68(sp)
20402e58:	4606                	lw	a2,64(sp)
20402e5a:	56f2                	lw	a3,60(sp)
20402e5c:	5762                	lw	a4,56(sp)
20402e5e:	57d2                	lw	a5,52(sp)
20402e60:	5842                	lw	a6,48(sp)
20402e62:	58b2                	lw	a7,44(sp)
20402e64:	5e22                	lw	t3,40(sp)
20402e66:	5e92                	lw	t4,36(sp)
20402e68:	5f02                	lw	t5,32(sp)
20402e6a:	4ff2                	lw	t6,28(sp)
20402e6c:	6125                	addi	sp,sp,96
20402e6e:	30200073          	mret

20402e72 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402e72:	711d                	addi	sp,sp,-96
20402e74:	ce86                	sw	ra,92(sp)
20402e76:	cc96                	sw	t0,88(sp)
20402e78:	ca9a                	sw	t1,84(sp)
20402e7a:	c89e                	sw	t2,80(sp)
20402e7c:	c6a2                	sw	s0,76(sp)
20402e7e:	c4aa                	sw	a0,72(sp)
20402e80:	c2ae                	sw	a1,68(sp)
20402e82:	c0b2                	sw	a2,64(sp)
20402e84:	de36                	sw	a3,60(sp)
20402e86:	dc3a                	sw	a4,56(sp)
20402e88:	da3e                	sw	a5,52(sp)
20402e8a:	d842                	sw	a6,48(sp)
20402e8c:	d646                	sw	a7,44(sp)
20402e8e:	d472                	sw	t3,40(sp)
20402e90:	d276                	sw	t4,36(sp)
20402e92:	d07a                	sw	t5,32(sp)
20402e94:	ce7e                	sw	t6,28(sp)
20402e96:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e98:	ec2ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402e9c:	872a                	mv	a4,a0
20402e9e:	070a                	slli	a4,a4,0x2
20402ea0:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402ea4:	97ba                	add	a5,a5,a4
20402ea6:	439c                	lw	a5,0(a5)
20402ea8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402eac:	fac42783          	lw	a5,-84(s0)
20402eb0:	c78d                	beqz	a5,20402eda <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402eb2:	fac42503          	lw	a0,-84(s0)
20402eb6:	e4eff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402eba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402ebe:	fa842783          	lw	a5,-88(s0)
20402ec2:	2c07a783          	lw	a5,704(a5)
20402ec6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402eca:	fa842783          	lw	a5,-88(s0)
20402ece:	2b87a783          	lw	a5,696(a5)
20402ed2:	fa442583          	lw	a1,-92(s0)
20402ed6:	455d                	li	a0,23
20402ed8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402eda:	0001                	nop
20402edc:	40f6                	lw	ra,92(sp)
20402ede:	42e6                	lw	t0,88(sp)
20402ee0:	4356                	lw	t1,84(sp)
20402ee2:	43c6                	lw	t2,80(sp)
20402ee4:	4436                	lw	s0,76(sp)
20402ee6:	4526                	lw	a0,72(sp)
20402ee8:	4596                	lw	a1,68(sp)
20402eea:	4606                	lw	a2,64(sp)
20402eec:	56f2                	lw	a3,60(sp)
20402eee:	5762                	lw	a4,56(sp)
20402ef0:	57d2                	lw	a5,52(sp)
20402ef2:	5842                	lw	a6,48(sp)
20402ef4:	58b2                	lw	a7,44(sp)
20402ef6:	5e22                	lw	t3,40(sp)
20402ef8:	5e92                	lw	t4,36(sp)
20402efa:	5f02                	lw	t5,32(sp)
20402efc:	4ff2                	lw	t6,28(sp)
20402efe:	6125                	addi	sp,sp,96
20402f00:	30200073          	mret

20402f04 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402f04:	711d                	addi	sp,sp,-96
20402f06:	ce86                	sw	ra,92(sp)
20402f08:	cc96                	sw	t0,88(sp)
20402f0a:	ca9a                	sw	t1,84(sp)
20402f0c:	c89e                	sw	t2,80(sp)
20402f0e:	c6a2                	sw	s0,76(sp)
20402f10:	c4aa                	sw	a0,72(sp)
20402f12:	c2ae                	sw	a1,68(sp)
20402f14:	c0b2                	sw	a2,64(sp)
20402f16:	de36                	sw	a3,60(sp)
20402f18:	dc3a                	sw	a4,56(sp)
20402f1a:	da3e                	sw	a5,52(sp)
20402f1c:	d842                	sw	a6,48(sp)
20402f1e:	d646                	sw	a7,44(sp)
20402f20:	d472                	sw	t3,40(sp)
20402f22:	d276                	sw	t4,36(sp)
20402f24:	d07a                	sw	t5,32(sp)
20402f26:	ce7e                	sw	t6,28(sp)
20402f28:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f2a:	e30ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402f2e:	872a                	mv	a4,a0
20402f30:	070a                	slli	a4,a4,0x2
20402f32:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402f36:	97ba                	add	a5,a5,a4
20402f38:	439c                	lw	a5,0(a5)
20402f3a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402f3e:	fac42783          	lw	a5,-84(s0)
20402f42:	c78d                	beqz	a5,20402f6c <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f44:	fac42503          	lw	a0,-84(s0)
20402f48:	dbcff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402f4c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402f50:	fa842783          	lw	a5,-88(s0)
20402f54:	2d87a783          	lw	a5,728(a5)
20402f58:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402f5c:	fa842783          	lw	a5,-88(s0)
20402f60:	2d07a783          	lw	a5,720(a5)
20402f64:	fa442583          	lw	a1,-92(s0)
20402f68:	4561                	li	a0,24
20402f6a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402f6c:	0001                	nop
20402f6e:	40f6                	lw	ra,92(sp)
20402f70:	42e6                	lw	t0,88(sp)
20402f72:	4356                	lw	t1,84(sp)
20402f74:	43c6                	lw	t2,80(sp)
20402f76:	4436                	lw	s0,76(sp)
20402f78:	4526                	lw	a0,72(sp)
20402f7a:	4596                	lw	a1,68(sp)
20402f7c:	4606                	lw	a2,64(sp)
20402f7e:	56f2                	lw	a3,60(sp)
20402f80:	5762                	lw	a4,56(sp)
20402f82:	57d2                	lw	a5,52(sp)
20402f84:	5842                	lw	a6,48(sp)
20402f86:	58b2                	lw	a7,44(sp)
20402f88:	5e22                	lw	t3,40(sp)
20402f8a:	5e92                	lw	t4,36(sp)
20402f8c:	5f02                	lw	t5,32(sp)
20402f8e:	4ff2                	lw	t6,28(sp)
20402f90:	6125                	addi	sp,sp,96
20402f92:	30200073          	mret

20402f96 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402f96:	711d                	addi	sp,sp,-96
20402f98:	ce86                	sw	ra,92(sp)
20402f9a:	cc96                	sw	t0,88(sp)
20402f9c:	ca9a                	sw	t1,84(sp)
20402f9e:	c89e                	sw	t2,80(sp)
20402fa0:	c6a2                	sw	s0,76(sp)
20402fa2:	c4aa                	sw	a0,72(sp)
20402fa4:	c2ae                	sw	a1,68(sp)
20402fa6:	c0b2                	sw	a2,64(sp)
20402fa8:	de36                	sw	a3,60(sp)
20402faa:	dc3a                	sw	a4,56(sp)
20402fac:	da3e                	sw	a5,52(sp)
20402fae:	d842                	sw	a6,48(sp)
20402fb0:	d646                	sw	a7,44(sp)
20402fb2:	d472                	sw	t3,40(sp)
20402fb4:	d276                	sw	t4,36(sp)
20402fb6:	d07a                	sw	t5,32(sp)
20402fb8:	ce7e                	sw	t6,28(sp)
20402fba:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402fbc:	d9eff0ef          	jal	ra,2040255a <__metal_myhart_id>
20402fc0:	872a                	mv	a4,a0
20402fc2:	070a                	slli	a4,a4,0x2
20402fc4:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20402fc8:	97ba                	add	a5,a5,a4
20402fca:	439c                	lw	a5,0(a5)
20402fcc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402fd0:	fac42783          	lw	a5,-84(s0)
20402fd4:	c78d                	beqz	a5,20402ffe <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402fd6:	fac42503          	lw	a0,-84(s0)
20402fda:	d2aff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20402fde:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402fe2:	fa842783          	lw	a5,-88(s0)
20402fe6:	2f07a783          	lw	a5,752(a5)
20402fea:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402fee:	fa842783          	lw	a5,-88(s0)
20402ff2:	2e87a783          	lw	a5,744(a5)
20402ff6:	fa442583          	lw	a1,-92(s0)
20402ffa:	4565                	li	a0,25
20402ffc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402ffe:	0001                	nop
20403000:	40f6                	lw	ra,92(sp)
20403002:	42e6                	lw	t0,88(sp)
20403004:	4356                	lw	t1,84(sp)
20403006:	43c6                	lw	t2,80(sp)
20403008:	4436                	lw	s0,76(sp)
2040300a:	4526                	lw	a0,72(sp)
2040300c:	4596                	lw	a1,68(sp)
2040300e:	4606                	lw	a2,64(sp)
20403010:	56f2                	lw	a3,60(sp)
20403012:	5762                	lw	a4,56(sp)
20403014:	57d2                	lw	a5,52(sp)
20403016:	5842                	lw	a6,48(sp)
20403018:	58b2                	lw	a7,44(sp)
2040301a:	5e22                	lw	t3,40(sp)
2040301c:	5e92                	lw	t4,36(sp)
2040301e:	5f02                	lw	t5,32(sp)
20403020:	4ff2                	lw	t6,28(sp)
20403022:	6125                	addi	sp,sp,96
20403024:	30200073          	mret

20403028 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20403028:	711d                	addi	sp,sp,-96
2040302a:	ce86                	sw	ra,92(sp)
2040302c:	cc96                	sw	t0,88(sp)
2040302e:	ca9a                	sw	t1,84(sp)
20403030:	c89e                	sw	t2,80(sp)
20403032:	c6a2                	sw	s0,76(sp)
20403034:	c4aa                	sw	a0,72(sp)
20403036:	c2ae                	sw	a1,68(sp)
20403038:	c0b2                	sw	a2,64(sp)
2040303a:	de36                	sw	a3,60(sp)
2040303c:	dc3a                	sw	a4,56(sp)
2040303e:	da3e                	sw	a5,52(sp)
20403040:	d842                	sw	a6,48(sp)
20403042:	d646                	sw	a7,44(sp)
20403044:	d472                	sw	t3,40(sp)
20403046:	d276                	sw	t4,36(sp)
20403048:	d07a                	sw	t5,32(sp)
2040304a:	ce7e                	sw	t6,28(sp)
2040304c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040304e:	d0cff0ef          	jal	ra,2040255a <__metal_myhart_id>
20403052:	872a                	mv	a4,a0
20403054:	070a                	slli	a4,a4,0x2
20403056:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040305a:	97ba                	add	a5,a5,a4
2040305c:	439c                	lw	a5,0(a5)
2040305e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403062:	fac42783          	lw	a5,-84(s0)
20403066:	c78d                	beqz	a5,20403090 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403068:	fac42503          	lw	a0,-84(s0)
2040306c:	c98ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403070:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403074:	fa842783          	lw	a5,-88(s0)
20403078:	3087a783          	lw	a5,776(a5)
2040307c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403080:	fa842783          	lw	a5,-88(s0)
20403084:	3007a783          	lw	a5,768(a5)
20403088:	fa442583          	lw	a1,-92(s0)
2040308c:	4569                	li	a0,26
2040308e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403090:	0001                	nop
20403092:	40f6                	lw	ra,92(sp)
20403094:	42e6                	lw	t0,88(sp)
20403096:	4356                	lw	t1,84(sp)
20403098:	43c6                	lw	t2,80(sp)
2040309a:	4436                	lw	s0,76(sp)
2040309c:	4526                	lw	a0,72(sp)
2040309e:	4596                	lw	a1,68(sp)
204030a0:	4606                	lw	a2,64(sp)
204030a2:	56f2                	lw	a3,60(sp)
204030a4:	5762                	lw	a4,56(sp)
204030a6:	57d2                	lw	a5,52(sp)
204030a8:	5842                	lw	a6,48(sp)
204030aa:	58b2                	lw	a7,44(sp)
204030ac:	5e22                	lw	t3,40(sp)
204030ae:	5e92                	lw	t4,36(sp)
204030b0:	5f02                	lw	t5,32(sp)
204030b2:	4ff2                	lw	t6,28(sp)
204030b4:	6125                	addi	sp,sp,96
204030b6:	30200073          	mret

204030ba <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
204030ba:	711d                	addi	sp,sp,-96
204030bc:	ce86                	sw	ra,92(sp)
204030be:	cc96                	sw	t0,88(sp)
204030c0:	ca9a                	sw	t1,84(sp)
204030c2:	c89e                	sw	t2,80(sp)
204030c4:	c6a2                	sw	s0,76(sp)
204030c6:	c4aa                	sw	a0,72(sp)
204030c8:	c2ae                	sw	a1,68(sp)
204030ca:	c0b2                	sw	a2,64(sp)
204030cc:	de36                	sw	a3,60(sp)
204030ce:	dc3a                	sw	a4,56(sp)
204030d0:	da3e                	sw	a5,52(sp)
204030d2:	d842                	sw	a6,48(sp)
204030d4:	d646                	sw	a7,44(sp)
204030d6:	d472                	sw	t3,40(sp)
204030d8:	d276                	sw	t4,36(sp)
204030da:	d07a                	sw	t5,32(sp)
204030dc:	ce7e                	sw	t6,28(sp)
204030de:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204030e0:	c7aff0ef          	jal	ra,2040255a <__metal_myhart_id>
204030e4:	872a                	mv	a4,a0
204030e6:	070a                	slli	a4,a4,0x2
204030e8:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204030ec:	97ba                	add	a5,a5,a4
204030ee:	439c                	lw	a5,0(a5)
204030f0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
204030f4:	fac42783          	lw	a5,-84(s0)
204030f8:	c78d                	beqz	a5,20403122 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030fa:	fac42503          	lw	a0,-84(s0)
204030fe:	c06ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403102:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403106:	fa842783          	lw	a5,-88(s0)
2040310a:	3207a783          	lw	a5,800(a5)
2040310e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403112:	fa842783          	lw	a5,-88(s0)
20403116:	3187a783          	lw	a5,792(a5)
2040311a:	fa442583          	lw	a1,-92(s0)
2040311e:	456d                	li	a0,27
20403120:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403122:	0001                	nop
20403124:	40f6                	lw	ra,92(sp)
20403126:	42e6                	lw	t0,88(sp)
20403128:	4356                	lw	t1,84(sp)
2040312a:	43c6                	lw	t2,80(sp)
2040312c:	4436                	lw	s0,76(sp)
2040312e:	4526                	lw	a0,72(sp)
20403130:	4596                	lw	a1,68(sp)
20403132:	4606                	lw	a2,64(sp)
20403134:	56f2                	lw	a3,60(sp)
20403136:	5762                	lw	a4,56(sp)
20403138:	57d2                	lw	a5,52(sp)
2040313a:	5842                	lw	a6,48(sp)
2040313c:	58b2                	lw	a7,44(sp)
2040313e:	5e22                	lw	t3,40(sp)
20403140:	5e92                	lw	t4,36(sp)
20403142:	5f02                	lw	t5,32(sp)
20403144:	4ff2                	lw	t6,28(sp)
20403146:	6125                	addi	sp,sp,96
20403148:	30200073          	mret

2040314c <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
2040314c:	711d                	addi	sp,sp,-96
2040314e:	ce86                	sw	ra,92(sp)
20403150:	cc96                	sw	t0,88(sp)
20403152:	ca9a                	sw	t1,84(sp)
20403154:	c89e                	sw	t2,80(sp)
20403156:	c6a2                	sw	s0,76(sp)
20403158:	c4aa                	sw	a0,72(sp)
2040315a:	c2ae                	sw	a1,68(sp)
2040315c:	c0b2                	sw	a2,64(sp)
2040315e:	de36                	sw	a3,60(sp)
20403160:	dc3a                	sw	a4,56(sp)
20403162:	da3e                	sw	a5,52(sp)
20403164:	d842                	sw	a6,48(sp)
20403166:	d646                	sw	a7,44(sp)
20403168:	d472                	sw	t3,40(sp)
2040316a:	d276                	sw	t4,36(sp)
2040316c:	d07a                	sw	t5,32(sp)
2040316e:	ce7e                	sw	t6,28(sp)
20403170:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403172:	be8ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20403176:	872a                	mv	a4,a0
20403178:	070a                	slli	a4,a4,0x2
2040317a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040317e:	97ba                	add	a5,a5,a4
20403180:	439c                	lw	a5,0(a5)
20403182:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403186:	fac42783          	lw	a5,-84(s0)
2040318a:	c78d                	beqz	a5,204031b4 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040318c:	fac42503          	lw	a0,-84(s0)
20403190:	b74ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403194:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403198:	fa842783          	lw	a5,-88(s0)
2040319c:	3387a783          	lw	a5,824(a5)
204031a0:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
204031a4:	fa842783          	lw	a5,-88(s0)
204031a8:	3307a783          	lw	a5,816(a5)
204031ac:	fa442583          	lw	a1,-92(s0)
204031b0:	4571                	li	a0,28
204031b2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
204031b4:	0001                	nop
204031b6:	40f6                	lw	ra,92(sp)
204031b8:	42e6                	lw	t0,88(sp)
204031ba:	4356                	lw	t1,84(sp)
204031bc:	43c6                	lw	t2,80(sp)
204031be:	4436                	lw	s0,76(sp)
204031c0:	4526                	lw	a0,72(sp)
204031c2:	4596                	lw	a1,68(sp)
204031c4:	4606                	lw	a2,64(sp)
204031c6:	56f2                	lw	a3,60(sp)
204031c8:	5762                	lw	a4,56(sp)
204031ca:	57d2                	lw	a5,52(sp)
204031cc:	5842                	lw	a6,48(sp)
204031ce:	58b2                	lw	a7,44(sp)
204031d0:	5e22                	lw	t3,40(sp)
204031d2:	5e92                	lw	t4,36(sp)
204031d4:	5f02                	lw	t5,32(sp)
204031d6:	4ff2                	lw	t6,28(sp)
204031d8:	6125                	addi	sp,sp,96
204031da:	30200073          	mret

204031de <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
204031de:	711d                	addi	sp,sp,-96
204031e0:	ce86                	sw	ra,92(sp)
204031e2:	cc96                	sw	t0,88(sp)
204031e4:	ca9a                	sw	t1,84(sp)
204031e6:	c89e                	sw	t2,80(sp)
204031e8:	c6a2                	sw	s0,76(sp)
204031ea:	c4aa                	sw	a0,72(sp)
204031ec:	c2ae                	sw	a1,68(sp)
204031ee:	c0b2                	sw	a2,64(sp)
204031f0:	de36                	sw	a3,60(sp)
204031f2:	dc3a                	sw	a4,56(sp)
204031f4:	da3e                	sw	a5,52(sp)
204031f6:	d842                	sw	a6,48(sp)
204031f8:	d646                	sw	a7,44(sp)
204031fa:	d472                	sw	t3,40(sp)
204031fc:	d276                	sw	t4,36(sp)
204031fe:	d07a                	sw	t5,32(sp)
20403200:	ce7e                	sw	t6,28(sp)
20403202:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403204:	b56ff0ef          	jal	ra,2040255a <__metal_myhart_id>
20403208:	872a                	mv	a4,a0
2040320a:	070a                	slli	a4,a4,0x2
2040320c:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403210:	97ba                	add	a5,a5,a4
20403212:	439c                	lw	a5,0(a5)
20403214:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403218:	fac42783          	lw	a5,-84(s0)
2040321c:	c78d                	beqz	a5,20403246 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040321e:	fac42503          	lw	a0,-84(s0)
20403222:	ae2ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403226:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
2040322a:	fa842783          	lw	a5,-88(s0)
2040322e:	3507a783          	lw	a5,848(a5)
20403232:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403236:	fa842783          	lw	a5,-88(s0)
2040323a:	3487a783          	lw	a5,840(a5)
2040323e:	fa442583          	lw	a1,-92(s0)
20403242:	4575                	li	a0,29
20403244:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403246:	0001                	nop
20403248:	40f6                	lw	ra,92(sp)
2040324a:	42e6                	lw	t0,88(sp)
2040324c:	4356                	lw	t1,84(sp)
2040324e:	43c6                	lw	t2,80(sp)
20403250:	4436                	lw	s0,76(sp)
20403252:	4526                	lw	a0,72(sp)
20403254:	4596                	lw	a1,68(sp)
20403256:	4606                	lw	a2,64(sp)
20403258:	56f2                	lw	a3,60(sp)
2040325a:	5762                	lw	a4,56(sp)
2040325c:	57d2                	lw	a5,52(sp)
2040325e:	5842                	lw	a6,48(sp)
20403260:	58b2                	lw	a7,44(sp)
20403262:	5e22                	lw	t3,40(sp)
20403264:	5e92                	lw	t4,36(sp)
20403266:	5f02                	lw	t5,32(sp)
20403268:	4ff2                	lw	t6,28(sp)
2040326a:	6125                	addi	sp,sp,96
2040326c:	30200073          	mret

20403270 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403270:	711d                	addi	sp,sp,-96
20403272:	ce86                	sw	ra,92(sp)
20403274:	cc96                	sw	t0,88(sp)
20403276:	ca9a                	sw	t1,84(sp)
20403278:	c89e                	sw	t2,80(sp)
2040327a:	c6a2                	sw	s0,76(sp)
2040327c:	c4aa                	sw	a0,72(sp)
2040327e:	c2ae                	sw	a1,68(sp)
20403280:	c0b2                	sw	a2,64(sp)
20403282:	de36                	sw	a3,60(sp)
20403284:	dc3a                	sw	a4,56(sp)
20403286:	da3e                	sw	a5,52(sp)
20403288:	d842                	sw	a6,48(sp)
2040328a:	d646                	sw	a7,44(sp)
2040328c:	d472                	sw	t3,40(sp)
2040328e:	d276                	sw	t4,36(sp)
20403290:	d07a                	sw	t5,32(sp)
20403292:	ce7e                	sw	t6,28(sp)
20403294:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403296:	ac4ff0ef          	jal	ra,2040255a <__metal_myhart_id>
2040329a:	872a                	mv	a4,a0
2040329c:	070a                	slli	a4,a4,0x2
2040329e:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
204032a2:	97ba                	add	a5,a5,a4
204032a4:	439c                	lw	a5,0(a5)
204032a6:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204032aa:	fac42783          	lw	a5,-84(s0)
204032ae:	c78d                	beqz	a5,204032d8 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032b0:	fac42503          	lw	a0,-84(s0)
204032b4:	a50ff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
204032b8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204032bc:	fa842783          	lw	a5,-88(s0)
204032c0:	3687a783          	lw	a5,872(a5)
204032c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
204032c8:	fa842783          	lw	a5,-88(s0)
204032cc:	3607a783          	lw	a5,864(a5)
204032d0:	fa442583          	lw	a1,-92(s0)
204032d4:	4579                	li	a0,30
204032d6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
204032d8:	0001                	nop
204032da:	40f6                	lw	ra,92(sp)
204032dc:	42e6                	lw	t0,88(sp)
204032de:	4356                	lw	t1,84(sp)
204032e0:	43c6                	lw	t2,80(sp)
204032e2:	4436                	lw	s0,76(sp)
204032e4:	4526                	lw	a0,72(sp)
204032e6:	4596                	lw	a1,68(sp)
204032e8:	4606                	lw	a2,64(sp)
204032ea:	56f2                	lw	a3,60(sp)
204032ec:	5762                	lw	a4,56(sp)
204032ee:	57d2                	lw	a5,52(sp)
204032f0:	5842                	lw	a6,48(sp)
204032f2:	58b2                	lw	a7,44(sp)
204032f4:	5e22                	lw	t3,40(sp)
204032f6:	5e92                	lw	t4,36(sp)
204032f8:	5f02                	lw	t5,32(sp)
204032fa:	4ff2                	lw	t6,28(sp)
204032fc:	6125                	addi	sp,sp,96
204032fe:	30200073          	mret

20403302 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403302:	711d                	addi	sp,sp,-96
20403304:	ce86                	sw	ra,92(sp)
20403306:	cc96                	sw	t0,88(sp)
20403308:	ca9a                	sw	t1,84(sp)
2040330a:	c89e                	sw	t2,80(sp)
2040330c:	c6a2                	sw	s0,76(sp)
2040330e:	c4aa                	sw	a0,72(sp)
20403310:	c2ae                	sw	a1,68(sp)
20403312:	c0b2                	sw	a2,64(sp)
20403314:	de36                	sw	a3,60(sp)
20403316:	dc3a                	sw	a4,56(sp)
20403318:	da3e                	sw	a5,52(sp)
2040331a:	d842                	sw	a6,48(sp)
2040331c:	d646                	sw	a7,44(sp)
2040331e:	d472                	sw	t3,40(sp)
20403320:	d276                	sw	t4,36(sp)
20403322:	d07a                	sw	t5,32(sp)
20403324:	ce7e                	sw	t6,28(sp)
20403326:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403328:	a32ff0ef          	jal	ra,2040255a <__metal_myhart_id>
2040332c:	872a                	mv	a4,a0
2040332e:	070a                	slli	a4,a4,0x2
20403330:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
20403334:	97ba                	add	a5,a5,a4
20403336:	439c                	lw	a5,0(a5)
20403338:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2040333c:	fac42783          	lw	a5,-84(s0)
20403340:	c78d                	beqz	a5,2040336a <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403342:	fac42503          	lw	a0,-84(s0)
20403346:	9beff0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
2040334a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
2040334e:	fa842783          	lw	a5,-88(s0)
20403352:	3807a783          	lw	a5,896(a5)
20403356:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
2040335a:	fa842783          	lw	a5,-88(s0)
2040335e:	3787a783          	lw	a5,888(a5)
20403362:	fa442583          	lw	a1,-92(s0)
20403366:	457d                	li	a0,31
20403368:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
2040336a:	0001                	nop
2040336c:	40f6                	lw	ra,92(sp)
2040336e:	42e6                	lw	t0,88(sp)
20403370:	4356                	lw	t1,84(sp)
20403372:	43c6                	lw	t2,80(sp)
20403374:	4436                	lw	s0,76(sp)
20403376:	4526                	lw	a0,72(sp)
20403378:	4596                	lw	a1,68(sp)
2040337a:	4606                	lw	a2,64(sp)
2040337c:	56f2                	lw	a3,60(sp)
2040337e:	5762                	lw	a4,56(sp)
20403380:	57d2                	lw	a5,52(sp)
20403382:	5842                	lw	a6,48(sp)
20403384:	58b2                	lw	a7,44(sp)
20403386:	5e22                	lw	t3,40(sp)
20403388:	5e92                	lw	t4,36(sp)
2040338a:	5f02                	lw	t5,32(sp)
2040338c:	4ff2                	lw	t6,28(sp)
2040338e:	6125                	addi	sp,sp,96
20403390:	30200073          	mret

20403394 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403394:	1101                	addi	sp,sp,-32
20403396:	ce22                	sw	s0,28(sp)
20403398:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040339a:	305027f3          	csrr	a5,mtvec
2040339e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204033a2:	fec42783          	lw	a5,-20(s0)
204033a6:	03f7f793          	andi	a5,a5,63
204033aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204033ae:	fec42703          	lw	a4,-20(s0)
204033b2:	4789                	li	a5,2
204033b4:	00f70d63          	beq	a4,a5,204033ce <__metal_controller_interrupt_vector_mode+0x3a>
204033b8:	fec42703          	lw	a4,-20(s0)
204033bc:	478d                	li	a5,3
204033be:	00f70a63          	beq	a4,a5,204033d2 <__metal_controller_interrupt_vector_mode+0x3e>
204033c2:	fec42703          	lw	a4,-20(s0)
204033c6:	4785                	li	a5,1
204033c8:	00f70763          	beq	a4,a5,204033d6 <__metal_controller_interrupt_vector_mode+0x42>
204033cc:	a039                	j	204033da <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
204033ce:	478d                	li	a5,3
204033d0:	a031                	j	204033dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204033d2:	4791                	li	a5,4
204033d4:	a021                	j	204033dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204033d6:	4785                	li	a5,1
204033d8:	a011                	j	204033dc <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
204033da:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
204033dc:	853e                	mv	a0,a5
204033de:	4472                	lw	s0,28(sp)
204033e0:	6105                	addi	sp,sp,32
204033e2:	8082                	ret

204033e4 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204033e4:	7179                	addi	sp,sp,-48
204033e6:	d622                	sw	s0,44(sp)
204033e8:	1800                	addi	s0,sp,48
204033ea:	fca42e23          	sw	a0,-36(s0)
204033ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
204033f2:	305027f3          	csrr	a5,mtvec
204033f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204033fa:	fec42783          	lw	a5,-20(s0)
204033fe:	fc07f793          	andi	a5,a5,-64
20403402:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403406:	fd842783          	lw	a5,-40(s0)
2040340a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040340e:	fdc42703          	lw	a4,-36(s0)
20403412:	4791                	li	a5,4
20403414:	06e7e063          	bltu	a5,a4,20403474 <__metal_controller_interrupt_vector+0x90>
20403418:	fdc42783          	lw	a5,-36(s0)
2040341c:	00279713          	slli	a4,a5,0x2
20403420:	204057b7          	lui	a5,0x20405
20403424:	45078793          	addi	a5,a5,1104 # 20405450 <__metal_driver_vtable_riscv_clint0+0x4c>
20403428:	97ba                	add	a5,a5,a4
2040342a:	439c                	lw	a5,0(a5)
2040342c:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
2040342e:	fe842783          	lw	a5,-24(s0)
20403432:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403436:	fec42783          	lw	a5,-20(s0)
2040343a:	0027e793          	ori	a5,a5,2
2040343e:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403442:	a80d                	j	20403474 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403444:	fe842783          	lw	a5,-24(s0)
20403448:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040344c:	fec42783          	lw	a5,-20(s0)
20403450:	0037e793          	ori	a5,a5,3
20403454:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
20403458:	a831                	j	20403474 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040345a:	fe842783          	lw	a5,-24(s0)
2040345e:	0017e793          	ori	a5,a5,1
20403462:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403466:	a039                	j	20403474 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403468:	fe842783          	lw	a5,-24(s0)
2040346c:	9bf1                	andi	a5,a5,-4
2040346e:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403472:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403474:	0001                	nop
20403476:	5432                	lw	s0,44(sp)
20403478:	6145                	addi	sp,sp,48
2040347a:	8082                	ret

2040347c <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040347c:	1101                	addi	sp,sp,-32
2040347e:	ce22                	sw	s0,28(sp)
20403480:	1000                	addi	s0,sp,32
20403482:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403486:	fec42783          	lw	a5,-20(s0)
2040348a:	17f5                	addi	a5,a5,-3
2040348c:	4771                	li	a4,28
2040348e:	00f76d63          	bltu	a4,a5,204034a8 <__metal_valid_interrupt_id+0x2c>
20403492:	00279713          	slli	a4,a5,0x2
20403496:	204057b7          	lui	a5,0x20405
2040349a:	46478793          	addi	a5,a5,1124 # 20405464 <__metal_driver_vtable_riscv_clint0+0x60>
2040349e:	97ba                	add	a5,a5,a4
204034a0:	439c                	lw	a5,0(a5)
204034a2:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204034a4:	4785                	li	a5,1
204034a6:	a019                	j	204034ac <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204034a8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204034aa:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204034ac:	853e                	mv	a0,a5
204034ae:	4472                	lw	s0,28(sp)
204034b0:	6105                	addi	sp,sp,32
204034b2:	8082                	ret

204034b4 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204034b4:	7179                	addi	sp,sp,-48
204034b6:	d606                	sw	ra,44(sp)
204034b8:	d422                	sw	s0,40(sp)
204034ba:	1800                	addi	s0,sp,48
204034bc:	fca42e23          	sw	a0,-36(s0)
204034c0:	fcb42c23          	sw	a1,-40(s0)
204034c4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204034c8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204034cc:	fdc42783          	lw	a5,-36(s0)
204034d0:	e399                	bnez	a5,204034d6 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204034d2:	57fd                	li	a5,-1
204034d4:	a849                	j	20403566 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204034d6:	fd842703          	lw	a4,-40(s0)
204034da:	47fd                	li	a5,31
204034dc:	08e7e063          	bltu	a5,a4,2040355c <__metal_local_interrupt_enable+0xa8>
204034e0:	fd842783          	lw	a5,-40(s0)
204034e4:	00279713          	slli	a4,a5,0x2
204034e8:	204057b7          	lui	a5,0x20405
204034ec:	4d878793          	addi	a5,a5,1240 # 204054d8 <__metal_driver_vtable_riscv_clint0+0xd4>
204034f0:	97ba                	add	a5,a5,a4
204034f2:	439c                	lw	a5,0(a5)
204034f4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204034f6:	fd442783          	lw	a5,-44(s0)
204034fa:	c781                	beqz	a5,20403502 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204034fc:	878ff0ef          	jal	ra,20402574 <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403500:	a08d                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403502:	88aff0ef          	jal	ra,2040258c <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403506:	a8b1                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403508:	fd442783          	lw	a5,-44(s0)
2040350c:	c781                	beqz	a5,20403514 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040350e:	896ff0ef          	jal	ra,204025a4 <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403512:	a881                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403514:	8a8ff0ef          	jal	ra,204025bc <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403518:	a0a9                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040351a:	fd442783          	lw	a5,-44(s0)
2040351e:	c781                	beqz	a5,20403526 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403520:	8b4ff0ef          	jal	ra,204025d4 <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403524:	a83d                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403526:	8c8ff0ef          	jal	ra,204025ee <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040352a:	a825                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040352c:	fd442783          	lw	a5,-44(s0)
20403530:	c781                	beqz	a5,20403538 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403532:	8d6ff0ef          	jal	ra,20402608 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403536:	a035                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
20403538:	8ecff0ef          	jal	ra,20402624 <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040353c:	a01d                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
2040353e:	fd442783          	lw	a5,-44(s0)
20403542:	c799                	beqz	a5,20403550 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403544:	fd842783          	lw	a5,-40(s0)
20403548:	853e                	mv	a0,a5
2040354a:	8f6ff0ef          	jal	ra,20402640 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
2040354e:	a811                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403550:	fd842783          	lw	a5,-40(s0)
20403554:	853e                	mv	a0,a5
20403556:	916ff0ef          	jal	ra,2040266c <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040355a:	a021                	j	20403562 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040355c:	57fd                	li	a5,-1
2040355e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403562:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403566:	853e                	mv	a0,a5
20403568:	50b2                	lw	ra,44(sp)
2040356a:	5422                	lw	s0,40(sp)
2040356c:	6145                	addi	sp,sp,48
2040356e:	8082                	ret

20403570 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403570:	7179                	addi	sp,sp,-48
20403572:	d622                	sw	s0,44(sp)
20403574:	1800                	addi	s0,sp,48
20403576:	fca42e23          	sw	a0,-36(s0)
2040357a:	fcb42c23          	sw	a1,-40(s0)
2040357e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403582:	fdc42783          	lw	a5,-36(s0)
20403586:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040358a:	fd842703          	lw	a4,-40(s0)
2040358e:	47ad                	li	a5,11
20403590:	02e7c263          	blt	a5,a4,204035b4 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403594:	fd442783          	lw	a5,-44(s0)
20403598:	cf91                	beqz	a5,204035b4 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040359a:	fec42703          	lw	a4,-20(s0)
2040359e:	fd842783          	lw	a5,-40(s0)
204035a2:	0e078793          	addi	a5,a5,224
204035a6:	078a                	slli	a5,a5,0x2
204035a8:	97ba                	add	a5,a5,a4
204035aa:	fd442703          	lw	a4,-44(s0)
204035ae:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204035b0:	4781                	li	a5,0
204035b2:	a011                	j	204035b6 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204035b4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204035b6:	853e                	mv	a0,a5
204035b8:	5432                	lw	s0,44(sp)
204035ba:	6145                	addi	sp,sp,48
204035bc:	8082                	ret

204035be <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204035be:	7139                	addi	sp,sp,-64
204035c0:	de06                	sw	ra,60(sp)
204035c2:	dc22                	sw	s0,56(sp)
204035c4:	0080                	addi	s0,sp,64
204035c6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204035ca:	fcc42783          	lw	a5,-52(s0)
204035ce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204035d2:	fe442783          	lw	a5,-28(s0)
204035d6:	43dc                	lw	a5,4(a5)
204035d8:	10079d63          	bnez	a5,204036f2 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204035dc:	57fd                	li	a5,-1
204035de:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204035e2:	57fd                	li	a5,-1
204035e4:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204035e8:	301027f3          	csrr	a5,misa
204035ec:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204035f0:	fe042703          	lw	a4,-32(s0)
204035f4:	6789                	lui	a5,0x2
204035f6:	8ff9                	and	a5,a5,a4
204035f8:	e799                	bnez	a5,20403606 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204035fa:	fe042703          	lw	a4,-32(s0)
204035fe:	000407b7          	lui	a5,0x40
20403602:	8ff9                	and	a5,a5,a4
20403604:	c799                	beqz	a5,20403612 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403606:	57fd                	li	a5,-1
20403608:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040360c:	57fd                	li	a5,-1
2040360e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403612:	fe042703          	lw	a4,-32(s0)
20403616:	000407b7          	lui	a5,0x40
2040361a:	8ff9                	and	a5,a5,a4
2040361c:	c781                	beqz	a5,20403624 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040361e:	57fd                	li	a5,-1
20403620:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403624:	fe042623          	sw	zero,-20(s0)
20403628:	a0b9                	j	20403676 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040362a:	fe442683          	lw	a3,-28(s0)
2040362e:	fec42703          	lw	a4,-20(s0)
20403632:	87ba                	mv	a5,a4
20403634:	0786                	slli	a5,a5,0x1
20403636:	97ba                	add	a5,a5,a4
20403638:	078e                	slli	a5,a5,0x3
2040363a:	97b6                	add	a5,a5,a3
2040363c:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403640:	fe442683          	lw	a3,-28(s0)
20403644:	fec42703          	lw	a4,-20(s0)
20403648:	87ba                	mv	a5,a4
2040364a:	0786                	slli	a5,a5,0x1
2040364c:	97ba                	add	a5,a5,a4
2040364e:	078e                	slli	a5,a5,0x3
20403650:	97b6                	add	a5,a5,a3
20403652:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403656:	fe442683          	lw	a3,-28(s0)
2040365a:	fec42703          	lw	a4,-20(s0)
2040365e:	87ba                	mv	a5,a4
20403660:	0786                	slli	a5,a5,0x1
20403662:	97ba                	add	a5,a5,a4
20403664:	078e                	slli	a5,a5,0x3
20403666:	97b6                	add	a5,a5,a3
20403668:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040366c:	fec42783          	lw	a5,-20(s0)
20403670:	0785                	addi	a5,a5,1
20403672:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403676:	fec42703          	lw	a4,-20(s0)
2040367a:	47fd                	li	a5,31
2040367c:	fae7d7e3          	bge	a5,a4,2040362a <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403680:	fe042423          	sw	zero,-24(s0)
20403684:	a01d                	j	204036aa <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403686:	fe442703          	lw	a4,-28(s0)
2040368a:	fe842783          	lw	a5,-24(s0)
2040368e:	0e078793          	addi	a5,a5,224
20403692:	078a                	slli	a5,a5,0x2
20403694:	97ba                	add	a5,a5,a4
20403696:	20402737          	lui	a4,0x20402
2040369a:	69870713          	addi	a4,a4,1688 # 20402698 <__metal_default_exception_handler>
2040369e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204036a0:	fe842783          	lw	a5,-24(s0)
204036a4:	0785                	addi	a5,a5,1
204036a6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204036aa:	fe842703          	lw	a4,-24(s0)
204036ae:	47ad                	li	a5,11
204036b0:	fce7dbe3          	bge	a5,a4,20403686 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204036b4:	204037b7          	lui	a5,0x20403
204036b8:	90078593          	addi	a1,a5,-1792 # 20402900 <__metal_exception_handler>
204036bc:	4501                	li	a0,0
204036be:	331d                	jal	204033e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204036c0:	301027f3          	csrr	a5,misa
204036c4:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204036c8:	fdc42703          	lw	a4,-36(s0)
204036cc:	67c1                	lui	a5,0x10
204036ce:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204036d2:	8ff9                	and	a5,a5,a4
204036d4:	cb99                	beqz	a5,204036ea <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204036d6:	300027f3          	csrr	a5,mstatus
204036da:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204036de:	fdc42703          	lw	a4,-36(s0)
204036e2:	6789                	lui	a5,0x2
204036e4:	8fd9                	or	a5,a5,a4
204036e6:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204036ea:	fe442783          	lw	a5,-28(s0)
204036ee:	4705                	li	a4,1
204036f0:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204036f2:	0001                	nop
204036f4:	50f2                	lw	ra,60(sp)
204036f6:	5462                	lw	s0,56(sp)
204036f8:	6121                	addi	sp,sp,64
204036fa:	8082                	ret

204036fc <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204036fc:	7179                	addi	sp,sp,-48
204036fe:	d606                	sw	ra,44(sp)
20403700:	d422                	sw	s0,40(sp)
20403702:	1800                	addi	s0,sp,48
20403704:	fca42e23          	sw	a0,-36(s0)
20403708:	fcb42c23          	sw	a1,-40(s0)
2040370c:	fcc42a23          	sw	a2,-44(s0)
20403710:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403714:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403718:	fdc42783          	lw	a5,-36(s0)
2040371c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403720:	fd842503          	lw	a0,-40(s0)
20403724:	3ba1                	jal	2040347c <__metal_valid_interrupt_id>
20403726:	87aa                	mv	a5,a0
20403728:	e399                	bnez	a5,2040372e <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
2040372a:	57d5                	li	a5,-11
2040372c:	aa11                	j	20403840 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
2040372e:	fd442783          	lw	a5,-44(s0)
20403732:	cf85                	beqz	a5,2040376a <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403734:	fe842683          	lw	a3,-24(s0)
20403738:	fd842703          	lw	a4,-40(s0)
2040373c:	87ba                	mv	a5,a4
2040373e:	0786                	slli	a5,a5,0x1
20403740:	97ba                	add	a5,a5,a4
20403742:	078e                	slli	a5,a5,0x3
20403744:	97b6                	add	a5,a5,a3
20403746:	fd442703          	lw	a4,-44(s0)
2040374a:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
2040374e:	fe842683          	lw	a3,-24(s0)
20403752:	fd842703          	lw	a4,-40(s0)
20403756:	87ba                	mv	a5,a4
20403758:	0786                	slli	a5,a5,0x1
2040375a:	97ba                	add	a5,a5,a4
2040375c:	078e                	slli	a5,a5,0x3
2040375e:	97b6                	add	a5,a5,a3
20403760:	fd042703          	lw	a4,-48(s0)
20403764:	08e7ac23          	sw	a4,152(a5)
20403768:	a8d1                	j	2040383c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
2040376a:	fd842783          	lw	a5,-40(s0)
2040376e:	17f5                	addi	a5,a5,-3
20403770:	4771                	li	a4,28
20403772:	0cf76263          	bltu	a4,a5,20403836 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403776:	00279713          	slli	a4,a5,0x2
2040377a:	204057b7          	lui	a5,0x20405
2040377e:	55878793          	addi	a5,a5,1368 # 20405558 <__metal_driver_vtable_riscv_clint0+0x154>
20403782:	97ba                	add	a5,a5,a4
20403784:	439c                	lw	a5,0(a5)
20403786:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403788:	fe842683          	lw	a3,-24(s0)
2040378c:	fd842703          	lw	a4,-40(s0)
20403790:	87ba                	mv	a5,a4
20403792:	0786                	slli	a5,a5,0x1
20403794:	97ba                	add	a5,a5,a4
20403796:	078e                	slli	a5,a5,0x3
20403798:	97b6                	add	a5,a5,a3
2040379a:	20402737          	lui	a4,0x20402
2040379e:	78470713          	addi	a4,a4,1924 # 20402784 <__metal_default_sw_handler>
204037a2:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204037a6:	fe842683          	lw	a3,-24(s0)
204037aa:	fd842703          	lw	a4,-40(s0)
204037ae:	87ba                	mv	a5,a4
204037b0:	0786                	slli	a5,a5,0x1
204037b2:	97ba                	add	a5,a5,a4
204037b4:	078e                	slli	a5,a5,0x3
204037b6:	97b6                	add	a5,a5,a3
204037b8:	fd042703          	lw	a4,-48(s0)
204037bc:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204037c0:	a8b5                	j	2040383c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204037c2:	fe842683          	lw	a3,-24(s0)
204037c6:	fd842703          	lw	a4,-40(s0)
204037ca:	87ba                	mv	a5,a4
204037cc:	0786                	slli	a5,a5,0x1
204037ce:	97ba                	add	a5,a5,a4
204037d0:	078e                	slli	a5,a5,0x3
204037d2:	97b6                	add	a5,a5,a3
204037d4:	20403737          	lui	a4,0x20403
204037d8:	87670713          	addi	a4,a4,-1930 # 20402876 <__metal_default_timer_handler>
204037dc:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204037e0:	fe842683          	lw	a3,-24(s0)
204037e4:	fd842703          	lw	a4,-40(s0)
204037e8:	87ba                	mv	a5,a4
204037ea:	0786                	slli	a5,a5,0x1
204037ec:	97ba                	add	a5,a5,a4
204037ee:	078e                	slli	a5,a5,0x3
204037f0:	97b6                	add	a5,a5,a3
204037f2:	fd042703          	lw	a4,-48(s0)
204037f6:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
204037fa:	a089                	j	2040383c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204037fc:	fe842683          	lw	a3,-24(s0)
20403800:	fd842703          	lw	a4,-40(s0)
20403804:	87ba                	mv	a5,a4
20403806:	0786                	slli	a5,a5,0x1
20403808:	97ba                	add	a5,a5,a4
2040380a:	078e                	slli	a5,a5,0x3
2040380c:	97b6                	add	a5,a5,a3
2040380e:	20402737          	lui	a4,0x20402
20403812:	6b070713          	addi	a4,a4,1712 # 204026b0 <__metal_default_interrupt_handler>
20403816:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040381a:	fe842683          	lw	a3,-24(s0)
2040381e:	fd842703          	lw	a4,-40(s0)
20403822:	87ba                	mv	a5,a4
20403824:	0786                	slli	a5,a5,0x1
20403826:	97ba                	add	a5,a5,a4
20403828:	078e                	slli	a5,a5,0x3
2040382a:	97b6                	add	a5,a5,a3
2040382c:	fd042703          	lw	a4,-48(s0)
20403830:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403834:	a021                	j	2040383c <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403836:	57d1                	li	a5,-12
20403838:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
2040383c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403840:	853e                	mv	a0,a5
20403842:	50b2                	lw	ra,44(sp)
20403844:	5422                	lw	s0,40(sp)
20403846:	6145                	addi	sp,sp,48
20403848:	8082                	ret

2040384a <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
2040384a:	1101                	addi	sp,sp,-32
2040384c:	ce06                	sw	ra,28(sp)
2040384e:	cc22                	sw	s0,24(sp)
20403850:	1000                	addi	s0,sp,32
20403852:	fea42623          	sw	a0,-20(s0)
20403856:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
2040385a:	fe842783          	lw	a5,-24(s0)
2040385e:	4605                	li	a2,1
20403860:	85be                	mv	a1,a5
20403862:	fec42503          	lw	a0,-20(s0)
20403866:	31b9                	jal	204034b4 <__metal_local_interrupt_enable>
20403868:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
2040386a:	853e                	mv	a0,a5
2040386c:	40f2                	lw	ra,28(sp)
2040386e:	4462                	lw	s0,24(sp)
20403870:	6105                	addi	sp,sp,32
20403872:	8082                	ret

20403874 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403874:	1101                	addi	sp,sp,-32
20403876:	ce06                	sw	ra,28(sp)
20403878:	cc22                	sw	s0,24(sp)
2040387a:	1000                	addi	s0,sp,32
2040387c:	fea42623          	sw	a0,-20(s0)
20403880:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403884:	fe842783          	lw	a5,-24(s0)
20403888:	4601                	li	a2,0
2040388a:	85be                	mv	a1,a5
2040388c:	fec42503          	lw	a0,-20(s0)
20403890:	3115                	jal	204034b4 <__metal_local_interrupt_enable>
20403892:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403894:	853e                	mv	a0,a5
20403896:	40f2                	lw	ra,28(sp)
20403898:	4462                	lw	s0,24(sp)
2040389a:	6105                	addi	sp,sp,32
2040389c:	8082                	ret

2040389e <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
2040389e:	1101                	addi	sp,sp,-32
204038a0:	ce06                	sw	ra,28(sp)
204038a2:	cc22                	sw	s0,24(sp)
204038a4:	1000                	addi	s0,sp,32
204038a6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
204038aa:	aebff0ef          	jal	ra,20403394 <__metal_controller_interrupt_vector_mode>
204038ae:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
204038b0:	853e                	mv	a0,a5
204038b2:	40f2                	lw	ra,28(sp)
204038b4:	4462                	lw	s0,24(sp)
204038b6:	6105                	addi	sp,sp,32
204038b8:	8082                	ret

204038ba <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
204038ba:	7179                	addi	sp,sp,-48
204038bc:	d606                	sw	ra,44(sp)
204038be:	d422                	sw	s0,40(sp)
204038c0:	1800                	addi	s0,sp,48
204038c2:	fca42e23          	sw	a0,-36(s0)
204038c6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204038ca:	fdc42783          	lw	a5,-36(s0)
204038ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
204038d2:	fd842783          	lw	a5,-40(s0)
204038d6:	eb99                	bnez	a5,204038ec <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
204038d8:	204037b7          	lui	a5,0x20403
204038dc:	90078593          	addi	a1,a5,-1792 # 20402900 <__metal_exception_handler>
204038e0:	fd842503          	lw	a0,-40(s0)
204038e4:	b01ff0ef          	jal	ra,204033e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
204038e8:	4781                	li	a5,0
204038ea:	a00d                	j	2040390c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
204038ec:	fd842703          	lw	a4,-40(s0)
204038f0:	4785                	li	a5,1
204038f2:	00f71c63          	bne	a4,a5,2040390a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
204038f6:	204057b7          	lui	a5,0x20405
204038fa:	20078593          	addi	a1,a5,512 # 20405200 <__metal_vector_table>
204038fe:	fd842503          	lw	a0,-40(s0)
20403902:	ae3ff0ef          	jal	ra,204033e4 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403906:	4781                	li	a5,0
20403908:	a011                	j	2040390c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040390a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
2040390c:	853e                	mv	a0,a5
2040390e:	50b2                	lw	ra,44(sp)
20403910:	5422                	lw	s0,40(sp)
20403912:	6145                	addi	sp,sp,48
20403914:	8082                	ret

20403916 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403916:	1101                	addi	sp,sp,-32
20403918:	ce22                	sw	s0,28(sp)
2040391a:	1000                	addi	s0,sp,32
2040391c:	fea42623          	sw	a0,-20(s0)
20403920:	feb42423          	sw	a1,-24(s0)
20403924:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403928:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
2040392a:	853e                	mv	a0,a5
2040392c:	4472                	lw	s0,28(sp)
2040392e:	6105                	addi	sp,sp,32
20403930:	8082                	ret

20403932 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403932:	7139                	addi	sp,sp,-64
20403934:	de22                	sw	s0,60(sp)
20403936:	0080                	addi	s0,sp,64
20403938:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
2040393c:	4301                	li	t1,0
2040393e:	4381                	li	t2,0
20403940:	fe642423          	sw	t1,-24(s0)
20403944:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403948:	b8002573          	csrr	a0,mcycleh
2040394c:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403950:	b0002573          	csrr	a0,mcycle
20403954:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403958:	b8002573          	csrr	a0,mcycleh
2040395c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403960:	fe442883          	lw	a7,-28(s0)
20403964:	fdc42503          	lw	a0,-36(s0)
20403968:	02a89563          	bne	a7,a0,20403992 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
2040396c:	fe442503          	lw	a0,-28(s0)
20403970:	85aa                	mv	a1,a0
20403972:	4601                	li	a2,0
20403974:	00059813          	slli	a6,a1,0x0
20403978:	4781                	li	a5,0
2040397a:	fe042603          	lw	a2,-32(s0)
2040397e:	86b2                	mv	a3,a2
20403980:	4701                	li	a4,0
20403982:	00d7e633          	or	a2,a5,a3
20403986:	fec42423          	sw	a2,-24(s0)
2040398a:	00e867b3          	or	a5,a6,a4
2040398e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403992:	fe842783          	lw	a5,-24(s0)
20403996:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
2040399a:	853e                	mv	a0,a5
2040399c:	85c2                	mv	a1,a6
2040399e:	5472                	lw	s0,60(sp)
204039a0:	6121                	addi	sp,sp,64
204039a2:	8082                	ret

204039a4 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
204039a4:	7179                	addi	sp,sp,-48
204039a6:	d606                	sw	ra,44(sp)
204039a8:	d422                	sw	s0,40(sp)
204039aa:	d24a                	sw	s2,36(sp)
204039ac:	d04e                	sw	s3,32(sp)
204039ae:	1800                	addi	s0,sp,48
204039b0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
204039b4:	fdc42783          	lw	a5,-36(s0)
204039b8:	e781                	bnez	a5,204039c0 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
204039ba:	4901                	li	s2,0
204039bc:	4981                	li	s3,0
204039be:	a821                	j	204039d6 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
204039c0:	fdc42503          	lw	a0,-36(s0)
204039c4:	b17fe0ef          	jal	ra,204024da <__metal_driver_cpu_timebase>
204039c8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
204039cc:	fec42783          	lw	a5,-20(s0)
204039d0:	893e                	mv	s2,a5
204039d2:	87fd                	srai	a5,a5,0x1f
204039d4:	89be                	mv	s3,a5
204039d6:	87ca                	mv	a5,s2
204039d8:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
204039da:	853e                	mv	a0,a5
204039dc:	85c2                	mv	a1,a6
204039de:	50b2                	lw	ra,44(sp)
204039e0:	5422                	lw	s0,40(sp)
204039e2:	5912                	lw	s2,36(sp)
204039e4:	5982                	lw	s3,32(sp)
204039e6:	6145                	addi	sp,sp,48
204039e8:	8082                	ret

204039ea <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
204039ea:	7179                	addi	sp,sp,-48
204039ec:	d606                	sw	ra,44(sp)
204039ee:	d422                	sw	s0,40(sp)
204039f0:	1800                	addi	s0,sp,48
204039f2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
204039f6:	4781                	li	a5,0
204039f8:	4801                	li	a6,0
204039fa:	fef42023          	sw	a5,-32(s0)
204039fe:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a02:	fdc42503          	lw	a0,-36(s0)
20403a06:	afffe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403a0a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403a0e:	fec42783          	lw	a5,-20(s0)
20403a12:	c78d                	beqz	a5,20403a3c <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403a14:	fec42783          	lw	a5,-20(s0)
20403a18:	13c7a783          	lw	a5,316(a5)
20403a1c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403a20:	fe842783          	lw	a5,-24(s0)
20403a24:	cf81                	beqz	a5,20403a3c <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403a26:	fe842783          	lw	a5,-24(s0)
20403a2a:	439c                	lw	a5,0(a5)
20403a2c:	43f8                	lw	a4,68(a5)
20403a2e:	fe040793          	addi	a5,s0,-32
20403a32:	863e                	mv	a2,a5
20403a34:	4585                	li	a1,1
20403a36:	fe842503          	lw	a0,-24(s0)
20403a3a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403a3c:	fe042783          	lw	a5,-32(s0)
20403a40:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403a44:	853e                	mv	a0,a5
20403a46:	85c2                	mv	a1,a6
20403a48:	50b2                	lw	ra,44(sp)
20403a4a:	5422                	lw	s0,40(sp)
20403a4c:	6145                	addi	sp,sp,48
20403a4e:	8082                	ret

20403a50 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403a50:	7179                	addi	sp,sp,-48
20403a52:	d606                	sw	ra,44(sp)
20403a54:	d422                	sw	s0,40(sp)
20403a56:	d226                	sw	s1,36(sp)
20403a58:	1800                	addi	s0,sp,48
20403a5a:	fca42e23          	sw	a0,-36(s0)
20403a5e:	fcb42823          	sw	a1,-48(s0)
20403a62:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403a66:	57fd                	li	a5,-1
20403a68:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a6c:	fdc42503          	lw	a0,-36(s0)
20403a70:	a95fe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403a74:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403a78:	fe842783          	lw	a5,-24(s0)
20403a7c:	cf8d                	beqz	a5,20403ab6 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403a7e:	fe842783          	lw	a5,-24(s0)
20403a82:	13c7a783          	lw	a5,316(a5)
20403a86:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403a8a:	fe442783          	lw	a5,-28(s0)
20403a8e:	c785                	beqz	a5,20403ab6 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403a90:	fe442783          	lw	a5,-28(s0)
20403a94:	439c                	lw	a5,0(a5)
20403a96:	47a4                	lw	s1,72(a5)
20403a98:	fdc42503          	lw	a0,-36(s0)
20403a9c:	a1bfe0ef          	jal	ra,204024b6 <__metal_driver_cpu_hartid>
20403aa0:	87aa                	mv	a5,a0
20403aa2:	fd042603          	lw	a2,-48(s0)
20403aa6:	fd442683          	lw	a3,-44(s0)
20403aaa:	85be                	mv	a1,a5
20403aac:	fe442503          	lw	a0,-28(s0)
20403ab0:	9482                	jalr	s1
20403ab2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403ab6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403aba:	853e                	mv	a0,a5
20403abc:	50b2                	lw	ra,44(sp)
20403abe:	5422                	lw	s0,40(sp)
20403ac0:	5492                	lw	s1,36(sp)
20403ac2:	6145                	addi	sp,sp,48
20403ac4:	8082                	ret

20403ac6 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403ac6:	1101                	addi	sp,sp,-32
20403ac8:	ce22                	sw	s0,28(sp)
20403aca:	1000                	addi	s0,sp,32
20403acc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403ad0:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403ad4:	853e                	mv	a0,a5
20403ad6:	4472                	lw	s0,28(sp)
20403ad8:	6105                	addi	sp,sp,32
20403ada:	8082                	ret

20403adc <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403adc:	1101                	addi	sp,sp,-32
20403ade:	ce22                	sw	s0,28(sp)
20403ae0:	1000                	addi	s0,sp,32
20403ae2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403ae6:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403ae8:	853e                	mv	a0,a5
20403aea:	4472                	lw	s0,28(sp)
20403aec:	6105                	addi	sp,sp,32
20403aee:	8082                	ret

20403af0 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403af0:	1101                	addi	sp,sp,-32
20403af2:	ce22                	sw	s0,28(sp)
20403af4:	1000                	addi	s0,sp,32
20403af6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403afa:	81018793          	addi	a5,gp,-2032 # 80000758 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403afe:	853e                	mv	a0,a5
20403b00:	4472                	lw	s0,28(sp)
20403b02:	6105                	addi	sp,sp,32
20403b04:	8082                	ret

20403b06 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403b06:	1101                	addi	sp,sp,-32
20403b08:	ce22                	sw	s0,28(sp)
20403b0a:	1000                	addi	s0,sp,32
20403b0c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403b10:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403b12:	853e                	mv	a0,a5
20403b14:	4472                	lw	s0,28(sp)
20403b16:	6105                	addi	sp,sp,32
20403b18:	8082                	ret

20403b1a <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403b1a:	7179                	addi	sp,sp,-48
20403b1c:	d606                	sw	ra,44(sp)
20403b1e:	d422                	sw	s0,40(sp)
20403b20:	1800                	addi	s0,sp,48
20403b22:	fca42e23          	sw	a0,-36(s0)
20403b26:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403b2a:	57fd                	li	a5,-1
20403b2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403b30:	fdc42503          	lw	a0,-36(s0)
20403b34:	9d1fe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403b38:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403b3c:	fe842783          	lw	a5,-24(s0)
20403b40:	c79d                	beqz	a5,20403b6e <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403b42:	fe842783          	lw	a5,-24(s0)
20403b46:	0dc7a783          	lw	a5,220(a5)
20403b4a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403b4e:	fe442783          	lw	a5,-28(s0)
20403b52:	cf91                	beqz	a5,20403b6e <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403b54:	fe442783          	lw	a5,-28(s0)
20403b58:	439c                	lw	a5,0(a5)
20403b5a:	43f8                	lw	a4,68(a5)
20403b5c:	fd840793          	addi	a5,s0,-40
20403b60:	863e                	mv	a2,a5
20403b62:	458d                	li	a1,3
20403b64:	fe442503          	lw	a0,-28(s0)
20403b68:	9702                	jalr	a4
20403b6a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403b6e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403b72:	853e                	mv	a0,a5
20403b74:	50b2                	lw	ra,44(sp)
20403b76:	5422                	lw	s0,40(sp)
20403b78:	6145                	addi	sp,sp,48
20403b7a:	8082                	ret

20403b7c <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403b7c:	7179                	addi	sp,sp,-48
20403b7e:	d606                	sw	ra,44(sp)
20403b80:	d422                	sw	s0,40(sp)
20403b82:	1800                	addi	s0,sp,48
20403b84:	fca42e23          	sw	a0,-36(s0)
20403b88:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403b8c:	57fd                	li	a5,-1
20403b8e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403b92:	fdc42503          	lw	a0,-36(s0)
20403b96:	96ffe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403b9a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403b9e:	fe842783          	lw	a5,-24(s0)
20403ba2:	c79d                	beqz	a5,20403bd0 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403ba4:	fe842783          	lw	a5,-24(s0)
20403ba8:	0dc7a783          	lw	a5,220(a5)
20403bac:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403bb0:	fe442783          	lw	a5,-28(s0)
20403bb4:	cf91                	beqz	a5,20403bd0 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403bb6:	fe442783          	lw	a5,-28(s0)
20403bba:	439c                	lw	a5,0(a5)
20403bbc:	43f8                	lw	a4,68(a5)
20403bbe:	fd840793          	addi	a5,s0,-40
20403bc2:	863e                	mv	a2,a5
20403bc4:	4589                	li	a1,2
20403bc6:	fe442503          	lw	a0,-28(s0)
20403bca:	9702                	jalr	a4
20403bcc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403bd0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403bd4:	853e                	mv	a0,a5
20403bd6:	50b2                	lw	ra,44(sp)
20403bd8:	5422                	lw	s0,40(sp)
20403bda:	6145                	addi	sp,sp,48
20403bdc:	8082                	ret

20403bde <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403bde:	7179                	addi	sp,sp,-48
20403be0:	d606                	sw	ra,44(sp)
20403be2:	d422                	sw	s0,40(sp)
20403be4:	1800                	addi	s0,sp,48
20403be6:	fca42e23          	sw	a0,-36(s0)
20403bea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403bee:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403bf2:	fdc42503          	lw	a0,-36(s0)
20403bf6:	90ffe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403bfa:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403bfe:	fe842783          	lw	a5,-24(s0)
20403c02:	c79d                	beqz	a5,20403c30 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403c04:	fe842783          	lw	a5,-24(s0)
20403c08:	0dc7a783          	lw	a5,220(a5)
20403c0c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403c10:	fe442783          	lw	a5,-28(s0)
20403c14:	cf91                	beqz	a5,20403c30 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403c16:	fe442783          	lw	a5,-28(s0)
20403c1a:	439c                	lw	a5,0(a5)
20403c1c:	43f8                	lw	a4,68(a5)
20403c1e:	fd840793          	addi	a5,s0,-40
20403c22:	863e                	mv	a2,a5
20403c24:	4591                	li	a1,4
20403c26:	fe442503          	lw	a0,-28(s0)
20403c2a:	9702                	jalr	a4
20403c2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403c30:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403c34:	853e                	mv	a0,a5
20403c36:	50b2                	lw	ra,44(sp)
20403c38:	5422                	lw	s0,40(sp)
20403c3a:	6145                	addi	sp,sp,48
20403c3c:	8082                	ret

20403c3e <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403c3e:	1101                	addi	sp,sp,-32
20403c40:	ce06                	sw	ra,28(sp)
20403c42:	cc22                	sw	s0,24(sp)
20403c44:	1000                	addi	s0,sp,32
20403c46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403c4a:	fec42503          	lw	a0,-20(s0)
20403c4e:	8b7fe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403c52:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403c54:	853e                	mv	a0,a5
20403c56:	40f2                	lw	ra,28(sp)
20403c58:	4462                	lw	s0,24(sp)
20403c5a:	6105                	addi	sp,sp,32
20403c5c:	8082                	ret

20403c5e <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403c5e:	7179                	addi	sp,sp,-48
20403c60:	d606                	sw	ra,44(sp)
20403c62:	d422                	sw	s0,40(sp)
20403c64:	1800                	addi	s0,sp,48
20403c66:	fca42e23          	sw	a0,-36(s0)
20403c6a:	fcb42c23          	sw	a1,-40(s0)
20403c6e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403c72:	fdc42503          	lw	a0,-36(s0)
20403c76:	88ffe0ef          	jal	ra,20402504 <__metal_driver_cpu_interrupt_controller>
20403c7a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403c7e:	fec42783          	lw	a5,-20(s0)
20403c82:	cb99                	beqz	a5,20403c98 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403c84:	fd442603          	lw	a2,-44(s0)
20403c88:	fd842583          	lw	a1,-40(s0)
20403c8c:	fec42503          	lw	a0,-20(s0)
20403c90:	8e1ff0ef          	jal	ra,20403570 <__metal_exception_register>
20403c94:	87aa                	mv	a5,a0
20403c96:	a011                	j	20403c9a <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403c98:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403c9a:	853e                	mv	a0,a5
20403c9c:	50b2                	lw	ra,44(sp)
20403c9e:	5422                	lw	s0,40(sp)
20403ca0:	6145                	addi	sp,sp,48
20403ca2:	8082                	ret

20403ca4 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403ca4:	1101                	addi	sp,sp,-32
20403ca6:	ce22                	sw	s0,28(sp)
20403ca8:	1000                	addi	s0,sp,32
20403caa:	fea42623          	sw	a0,-20(s0)
20403cae:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403cb2:	fe842783          	lw	a5,-24(s0)
20403cb6:	0007d783          	lhu	a5,0(a5)
20403cba:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403cbe:	478d                	li	a5,3
20403cc0:	00f71463          	bne	a4,a5,20403cc8 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403cc4:	4791                	li	a5,4
20403cc6:	a011                	j	20403cca <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403cc8:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403cca:	853e                	mv	a0,a5
20403ccc:	4472                	lw	s0,28(sp)
20403cce:	6105                	addi	sp,sp,32
20403cd0:	8082                	ret

20403cd2 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403cd2:	7179                	addi	sp,sp,-48
20403cd4:	d622                	sw	s0,44(sp)
20403cd6:	1800                	addi	s0,sp,48
20403cd8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403cdc:	341027f3          	csrr	a5,mepc
20403ce0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403ce4:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403ce8:	853e                	mv	a0,a5
20403cea:	5432                	lw	s0,44(sp)
20403cec:	6145                	addi	sp,sp,48
20403cee:	8082                	ret

20403cf0 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403cf0:	1101                	addi	sp,sp,-32
20403cf2:	ce22                	sw	s0,28(sp)
20403cf4:	1000                	addi	s0,sp,32
20403cf6:	fea42623          	sw	a0,-20(s0)
20403cfa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403cfe:	fe842783          	lw	a5,-24(s0)
20403d02:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403d06:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403d08:	853e                	mv	a0,a5
20403d0a:	4472                	lw	s0,28(sp)
20403d0c:	6105                	addi	sp,sp,32
20403d0e:	8082                	ret

20403d10 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403d10:	1101                	addi	sp,sp,-32
20403d12:	ce22                	sw	s0,28(sp)
20403d14:	1000                	addi	s0,sp,32
20403d16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403d1a:	fec42703          	lw	a4,-20(s0)
20403d1e:	800007b7          	lui	a5,0x80000
20403d22:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffeb6c>
20403d26:	00f71563          	bne	a4,a5,20403d30 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403d2a:	0c0007b7          	lui	a5,0xc000
20403d2e:	a011                	j	20403d32 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403d30:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403d32:	853e                	mv	a0,a5
20403d34:	4472                	lw	s0,28(sp)
20403d36:	6105                	addi	sp,sp,32
20403d38:	8082                	ret

20403d3a <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403d3a:	1101                	addi	sp,sp,-32
20403d3c:	ce22                	sw	s0,28(sp)
20403d3e:	1000                	addi	s0,sp,32
20403d40:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403d44:	fec42703          	lw	a4,-20(s0)
20403d48:	800007b7          	lui	a5,0x80000
20403d4c:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffeb6c>
20403d50:	00f71463          	bne	a4,a5,20403d58 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403d54:	47ed                	li	a5,27
20403d56:	a011                	j	20403d5a <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403d58:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403d5a:	853e                	mv	a0,a5
20403d5c:	4472                	lw	s0,28(sp)
20403d5e:	6105                	addi	sp,sp,32
20403d60:	8082                	ret

20403d62 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403d62:	1101                	addi	sp,sp,-32
20403d64:	ce22                	sw	s0,28(sp)
20403d66:	1000                	addi	s0,sp,32
20403d68:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403d6c:	fec42703          	lw	a4,-20(s0)
20403d70:	800007b7          	lui	a5,0x80000
20403d74:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffeb6c>
20403d78:	00f71463          	bne	a4,a5,20403d80 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403d7c:	479d                	li	a5,7
20403d7e:	a011                	j	20403d82 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403d80:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403d82:	853e                	mv	a0,a5
20403d84:	4472                	lw	s0,28(sp)
20403d86:	6105                	addi	sp,sp,32
20403d88:	8082                	ret

20403d8a <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403d8a:	1101                	addi	sp,sp,-32
20403d8c:	ce22                	sw	s0,28(sp)
20403d8e:	1000                	addi	s0,sp,32
20403d90:	fea42623          	sw	a0,-20(s0)
20403d94:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403d98:	fe842783          	lw	a5,-24(s0)
20403d9c:	e791                	bnez	a5,20403da8 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403d9e:	800007b7          	lui	a5,0x80000
20403da2:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffe7b4>
20403da6:	a011                	j	20403daa <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403da8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403daa:	853e                	mv	a0,a5
20403dac:	4472                	lw	s0,28(sp)
20403dae:	6105                	addi	sp,sp,32
20403db0:	8082                	ret

20403db2 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403db2:	1101                	addi	sp,sp,-32
20403db4:	ce22                	sw	s0,28(sp)
20403db6:	1000                	addi	s0,sp,32
20403db8:	fea42623          	sw	a0,-20(s0)
20403dbc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403dc0:	fe842783          	lw	a5,-24(s0)
20403dc4:	e399                	bnez	a5,20403dca <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403dc6:	47ad                	li	a5,11
20403dc8:	a011                	j	20403dcc <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403dca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403dcc:	853e                	mv	a0,a5
20403dce:	4472                	lw	s0,28(sp)
20403dd0:	6105                	addi	sp,sp,32
20403dd2:	8082                	ret

20403dd4 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403dd4:	7179                	addi	sp,sp,-48
20403dd6:	d606                	sw	ra,44(sp)
20403dd8:	d422                	sw	s0,40(sp)
20403dda:	1800                	addi	s0,sp,48
20403ddc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403de0:	fdc42503          	lw	a0,-36(s0)
20403de4:	3735                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403de6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403dea:	fec42703          	lw	a4,-20(s0)
20403dee:	002007b7          	lui	a5,0x200
20403df2:	0791                	addi	a5,a5,4
20403df4:	97ba                	add	a5,a5,a4
20403df6:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403df8:	853e                	mv	a0,a5
20403dfa:	50b2                	lw	ra,44(sp)
20403dfc:	5422                	lw	s0,40(sp)
20403dfe:	6145                	addi	sp,sp,48
20403e00:	8082                	ret

20403e02 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403e02:	7179                	addi	sp,sp,-48
20403e04:	d606                	sw	ra,44(sp)
20403e06:	d422                	sw	s0,40(sp)
20403e08:	1800                	addi	s0,sp,48
20403e0a:	fca42e23          	sw	a0,-36(s0)
20403e0e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403e12:	fdc42503          	lw	a0,-36(s0)
20403e16:	3ded                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403e18:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e1c:	fec42703          	lw	a4,-20(s0)
20403e20:	002007b7          	lui	a5,0x200
20403e24:	0791                	addi	a5,a5,4
20403e26:	97ba                	add	a5,a5,a4
20403e28:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403e2a:	fd842783          	lw	a5,-40(s0)
20403e2e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403e30:	0001                	nop
20403e32:	50b2                	lw	ra,44(sp)
20403e34:	5422                	lw	s0,40(sp)
20403e36:	6145                	addi	sp,sp,48
20403e38:	8082                	ret

20403e3a <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403e3a:	7179                	addi	sp,sp,-48
20403e3c:	d606                	sw	ra,44(sp)
20403e3e:	d422                	sw	s0,40(sp)
20403e40:	1800                	addi	s0,sp,48
20403e42:	fca42e23          	sw	a0,-36(s0)
20403e46:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403e4a:	fdc42503          	lw	a0,-36(s0)
20403e4e:	35c9                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403e50:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e54:	fec42703          	lw	a4,-20(s0)
20403e58:	002007b7          	lui	a5,0x200
20403e5c:	97ba                	add	a5,a5,a4
20403e5e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403e60:	fd842783          	lw	a5,-40(s0)
20403e64:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403e66:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403e68:	853e                	mv	a0,a5
20403e6a:	50b2                	lw	ra,44(sp)
20403e6c:	5422                	lw	s0,40(sp)
20403e6e:	6145                	addi	sp,sp,48
20403e70:	8082                	ret

20403e72 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403e72:	7179                	addi	sp,sp,-48
20403e74:	d606                	sw	ra,44(sp)
20403e76:	d422                	sw	s0,40(sp)
20403e78:	1800                	addi	s0,sp,48
20403e7a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403e7e:	fdc42503          	lw	a0,-36(s0)
20403e82:	3579                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403e84:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e88:	fec42703          	lw	a4,-20(s0)
20403e8c:	002007b7          	lui	a5,0x200
20403e90:	97ba                	add	a5,a5,a4
20403e92:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403e94:	853e                	mv	a0,a5
20403e96:	50b2                	lw	ra,44(sp)
20403e98:	5422                	lw	s0,40(sp)
20403e9a:	6145                	addi	sp,sp,48
20403e9c:	8082                	ret

20403e9e <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403e9e:	7179                	addi	sp,sp,-48
20403ea0:	d606                	sw	ra,44(sp)
20403ea2:	d422                	sw	s0,40(sp)
20403ea4:	1800                	addi	s0,sp,48
20403ea6:	fca42e23          	sw	a0,-36(s0)
20403eaa:	fcb42c23          	sw	a1,-40(s0)
20403eae:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403eb2:	fdc42503          	lw	a0,-36(s0)
20403eb6:	3da9                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403eb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403ebc:	fdc42503          	lw	a0,-36(s0)
20403ec0:	354d                	jal	20403d62 <__metal_driver_sifive_plic0_max_priority>
20403ec2:	87aa                	mv	a5,a0
20403ec4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403ec8:	fe842783          	lw	a5,-24(s0)
20403ecc:	c785                	beqz	a5,20403ef4 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403ece:	fd442703          	lw	a4,-44(s0)
20403ed2:	fe842783          	lw	a5,-24(s0)
20403ed6:	00f77f63          	bgeu	a4,a5,20403ef4 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403eda:	fd842783          	lw	a5,-40(s0)
20403ede:	078a                	slli	a5,a5,0x2
20403ee0:	873e                	mv	a4,a5
20403ee2:	fec42783          	lw	a5,-20(s0)
20403ee6:	97ba                	add	a5,a5,a4
20403ee8:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403eea:	fd442783          	lw	a5,-44(s0)
20403eee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403ef0:	4781                	li	a5,0
20403ef2:	a011                	j	20403ef6 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403ef4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403ef6:	853e                	mv	a0,a5
20403ef8:	50b2                	lw	ra,44(sp)
20403efa:	5422                	lw	s0,40(sp)
20403efc:	6145                	addi	sp,sp,48
20403efe:	8082                	ret

20403f00 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403f00:	7179                	addi	sp,sp,-48
20403f02:	d606                	sw	ra,44(sp)
20403f04:	d422                	sw	s0,40(sp)
20403f06:	1800                	addi	s0,sp,48
20403f08:	fca42e23          	sw	a0,-36(s0)
20403f0c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403f10:	fdc42503          	lw	a0,-36(s0)
20403f14:	3bf5                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403f16:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f1a:	fd842783          	lw	a5,-40(s0)
20403f1e:	078a                	slli	a5,a5,0x2
20403f20:	873e                	mv	a4,a5
20403f22:	fec42783          	lw	a5,-20(s0)
20403f26:	97ba                	add	a5,a5,a4
20403f28:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403f2a:	853e                	mv	a0,a5
20403f2c:	50b2                	lw	ra,44(sp)
20403f2e:	5422                	lw	s0,40(sp)
20403f30:	6145                	addi	sp,sp,48
20403f32:	8082                	ret

20403f34 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403f34:	7179                	addi	sp,sp,-48
20403f36:	d606                	sw	ra,44(sp)
20403f38:	d422                	sw	s0,40(sp)
20403f3a:	1800                	addi	s0,sp,48
20403f3c:	fca42e23          	sw	a0,-36(s0)
20403f40:	fcb42c23          	sw	a1,-40(s0)
20403f44:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403f48:	fdc42503          	lw	a0,-36(s0)
20403f4c:	33d1                	jal	20403d10 <__metal_driver_sifive_plic0_control_base>
20403f4e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403f52:	fd842783          	lw	a5,-40(s0)
20403f56:	8795                	srai	a5,a5,0x5
20403f58:	078a                	slli	a5,a5,0x2
20403f5a:	873e                	mv	a4,a5
20403f5c:	fec42783          	lw	a5,-20(s0)
20403f60:	973e                	add	a4,a4,a5
20403f62:	6789                	lui	a5,0x2
20403f64:	97ba                	add	a5,a5,a4
20403f66:	439c                	lw	a5,0(a5)
20403f68:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403f6c:	fd442783          	lw	a5,-44(s0)
20403f70:	cf81                	beqz	a5,20403f88 <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403f72:	fd842783          	lw	a5,-40(s0)
20403f76:	8bfd                	andi	a5,a5,31
20403f78:	4705                	li	a4,1
20403f7a:	00f717b3          	sll	a5,a4,a5
20403f7e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403f80:	fe842783          	lw	a5,-24(s0)
20403f84:	8fd9                	or	a5,a5,a4
20403f86:	a829                	j	20403fa0 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403f88:	fd842783          	lw	a5,-40(s0)
20403f8c:	8bfd                	andi	a5,a5,31
20403f8e:	4705                	li	a4,1
20403f90:	00f717b3          	sll	a5,a4,a5
20403f94:	fff7c793          	not	a5,a5
20403f98:	873e                	mv	a4,a5
20403f9a:	fe842783          	lw	a5,-24(s0)
20403f9e:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403fa0:	fd842703          	lw	a4,-40(s0)
20403fa4:	8715                	srai	a4,a4,0x5
20403fa6:	070a                	slli	a4,a4,0x2
20403fa8:	86ba                	mv	a3,a4
20403faa:	fec42703          	lw	a4,-20(s0)
20403fae:	96ba                	add	a3,a3,a4
20403fb0:	6709                	lui	a4,0x2
20403fb2:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403fb4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403fb6:	0001                	nop
20403fb8:	50b2                	lw	ra,44(sp)
20403fba:	5422                	lw	s0,40(sp)
20403fbc:	6145                	addi	sp,sp,48
20403fbe:	8082                	ret

20403fc0 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403fc0:	1101                	addi	sp,sp,-32
20403fc2:	ce06                	sw	ra,28(sp)
20403fc4:	cc22                	sw	s0,24(sp)
20403fc6:	1000                	addi	s0,sp,32
20403fc8:	fea42623          	sw	a0,-20(s0)
20403fcc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403fd0:	12c00513          	li	a0,300
20403fd4:	1b4010ef          	jal	ra,20405188 <metal_shutdown>

20403fd8 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403fd8:	7179                	addi	sp,sp,-48
20403fda:	d606                	sw	ra,44(sp)
20403fdc:	d422                	sw	s0,40(sp)
20403fde:	1800                	addi	s0,sp,48
20403fe0:	fca42e23          	sw	a0,-36(s0)
20403fe4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403fe8:	fd842783          	lw	a5,-40(s0)
20403fec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403ff0:	fec42503          	lw	a0,-20(s0)
20403ff4:	33c5                	jal	20403dd4 <__metal_plic0_claim_interrupt>
20403ff6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403ffa:	fec42503          	lw	a0,-20(s0)
20403ffe:	3b35                	jal	20403d3a <__metal_driver_sifive_plic0_num_interrupts>
20404000:	87aa                	mv	a5,a0
20404002:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20404006:	fe842703          	lw	a4,-24(s0)
2040400a:	fe442783          	lw	a5,-28(s0)
2040400e:	04f77263          	bgeu	a4,a5,20404052 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20404012:	fec42703          	lw	a4,-20(s0)
20404016:	fe842783          	lw	a5,-24(s0)
2040401a:	078a                	slli	a5,a5,0x2
2040401c:	97ba                	add	a5,a5,a4
2040401e:	479c                	lw	a5,8(a5)
20404020:	cb8d                	beqz	a5,20404052 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20404022:	fec42703          	lw	a4,-20(s0)
20404026:	fe842783          	lw	a5,-24(s0)
2040402a:	078a                	slli	a5,a5,0x2
2040402c:	97ba                	add	a5,a5,a4
2040402e:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20404032:	fe842603          	lw	a2,-24(s0)
20404036:	fec42683          	lw	a3,-20(s0)
2040403a:	fe842703          	lw	a4,-24(s0)
2040403e:	87ba                	mv	a5,a4
20404040:	0786                	slli	a5,a5,0x1
20404042:	97ba                	add	a5,a5,a4
20404044:	078e                	slli	a5,a5,0x3
20404046:	97b6                	add	a5,a5,a3
20404048:	0887a783          	lw	a5,136(a5)
2040404c:	85be                	mv	a1,a5
2040404e:	8532                	mv	a0,a2
20404050:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20404052:	fe842583          	lw	a1,-24(s0)
20404056:	fec42503          	lw	a0,-20(s0)
2040405a:	3365                	jal	20403e02 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
2040405c:	0001                	nop
2040405e:	50b2                	lw	ra,44(sp)
20404060:	5422                	lw	s0,40(sp)
20404062:	6145                	addi	sp,sp,48
20404064:	8082                	ret

20404066 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20404066:	7139                	addi	sp,sp,-64
20404068:	de06                	sw	ra,60(sp)
2040406a:	dc22                	sw	s0,56(sp)
2040406c:	0080                	addi	s0,sp,64
2040406e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404072:	fcc42783          	lw	a5,-52(s0)
20404076:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
2040407a:	fe442783          	lw	a5,-28(s0)
2040407e:	43dc                	lw	a5,4(a5)
20404080:	10079c63          	bnez	a5,20404198 <__metal_driver_riscv_plic0_init+0x132>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404084:	fe042623          	sw	zero,-20(s0)
20404088:	a201                	j	20404188 <__metal_driver_riscv_plic0_init+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
2040408a:	fcc42503          	lw	a0,-52(s0)
2040408e:	3175                	jal	20403d3a <__metal_driver_sifive_plic0_num_interrupts>
20404090:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20404094:	fec42583          	lw	a1,-20(s0)
20404098:	fcc42503          	lw	a0,-52(s0)
2040409c:	31fd                	jal	20403d8a <__metal_driver_sifive_plic0_interrupt_parents>
2040409e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
204040a2:	fec42583          	lw	a1,-20(s0)
204040a6:	fcc42503          	lw	a0,-52(s0)
204040aa:	3321                	jal	20403db2 <__metal_driver_sifive_plic0_interrupt_lines>
204040ac:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
204040b0:	fdc42783          	lw	a5,-36(s0)
204040b4:	439c                	lw	a5,0(a5)
204040b6:	439c                	lw	a5,0(a5)
204040b8:	fdc42503          	lw	a0,-36(s0)
204040bc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
204040be:	fe042423          	sw	zero,-24(s0)
204040c2:	a085                	j	20404122 <__metal_driver_riscv_plic0_init+0xbc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
204040c4:	4601                	li	a2,0
204040c6:	fe842583          	lw	a1,-24(s0)
204040ca:	fe442503          	lw	a0,-28(s0)
204040ce:	359d                	jal	20403f34 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
204040d0:	4601                	li	a2,0
204040d2:	fe842583          	lw	a1,-24(s0)
204040d6:	fcc42503          	lw	a0,-52(s0)
204040da:	33d1                	jal	20403e9e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
204040dc:	fe442703          	lw	a4,-28(s0)
204040e0:	fe842783          	lw	a5,-24(s0)
204040e4:	078a                	slli	a5,a5,0x2
204040e6:	97ba                	add	a5,a5,a4
204040e8:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
204040ec:	fe442683          	lw	a3,-28(s0)
204040f0:	fe842703          	lw	a4,-24(s0)
204040f4:	87ba                	mv	a5,a4
204040f6:	0786                	slli	a5,a5,0x1
204040f8:	97ba                	add	a5,a5,a4
204040fa:	078e                	slli	a5,a5,0x3
204040fc:	97b6                	add	a5,a5,a3
204040fe:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404102:	fe442683          	lw	a3,-28(s0)
20404106:	fe842703          	lw	a4,-24(s0)
2040410a:	87ba                	mv	a5,a4
2040410c:	0786                	slli	a5,a5,0x1
2040410e:	97ba                	add	a5,a5,a4
20404110:	078e                	slli	a5,a5,0x3
20404112:	97b6                	add	a5,a5,a3
20404114:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404118:	fe842783          	lw	a5,-24(s0)
2040411c:	0785                	addi	a5,a5,1
2040411e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404122:	fe842703          	lw	a4,-24(s0)
20404126:	fe042783          	lw	a5,-32(s0)
2040412a:	f8f74de3          	blt	a4,a5,204040c4 <__metal_driver_riscv_plic0_init+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
2040412e:	4581                	li	a1,0
20404130:	fcc42503          	lw	a0,-52(s0)
20404134:	3319                	jal	20403e3a <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404136:	fdc42783          	lw	a5,-36(s0)
2040413a:	439c                	lw	a5,0(a5)
2040413c:	4fdc                	lw	a5,28(a5)
2040413e:	fe442683          	lw	a3,-28(s0)
20404142:	4601                	li	a2,0
20404144:	fd842583          	lw	a1,-40(s0)
20404148:	fdc42503          	lw	a0,-36(s0)
2040414c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
2040414e:	fdc42783          	lw	a5,-36(s0)
20404152:	439c                	lw	a5,0(a5)
20404154:	4fd8                	lw	a4,28(a5)
20404156:	fe442683          	lw	a3,-28(s0)
2040415a:	204047b7          	lui	a5,0x20404
2040415e:	fd878613          	addi	a2,a5,-40 # 20403fd8 <__metal_plic0_handler>
20404162:	fd842583          	lw	a1,-40(s0)
20404166:	fdc42503          	lw	a0,-36(s0)
2040416a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
2040416c:	fdc42783          	lw	a5,-36(s0)
20404170:	439c                	lw	a5,0(a5)
20404172:	53dc                	lw	a5,36(a5)
20404174:	fd842583          	lw	a1,-40(s0)
20404178:	fdc42503          	lw	a0,-36(s0)
2040417c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040417e:	fec42783          	lw	a5,-20(s0)
20404182:	0785                	addi	a5,a5,1
20404184:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404188:	fec42783          	lw	a5,-20(s0)
2040418c:	eef05fe3          	blez	a5,2040408a <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404190:	fe442783          	lw	a5,-28(s0)
20404194:	4705                	li	a4,1
20404196:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404198:	0001                	nop
2040419a:	50f2                	lw	ra,60(sp)
2040419c:	5462                	lw	s0,56(sp)
2040419e:	6121                	addi	sp,sp,64
204041a0:	8082                	ret

204041a2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
204041a2:	7179                	addi	sp,sp,-48
204041a4:	d606                	sw	ra,44(sp)
204041a6:	d422                	sw	s0,40(sp)
204041a8:	1800                	addi	s0,sp,48
204041aa:	fca42e23          	sw	a0,-36(s0)
204041ae:	fcb42c23          	sw	a1,-40(s0)
204041b2:	fcc42a23          	sw	a2,-44(s0)
204041b6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204041ba:	fdc42783          	lw	a5,-36(s0)
204041be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204041c2:	fdc42503          	lw	a0,-36(s0)
204041c6:	b75ff0ef          	jal	ra,20403d3a <__metal_driver_sifive_plic0_num_interrupts>
204041ca:	872a                	mv	a4,a0
204041cc:	fd842783          	lw	a5,-40(s0)
204041d0:	00e7c463          	blt	a5,a4,204041d8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
204041d4:	57fd                	li	a5,-1
204041d6:	a049                	j	20404258 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
204041d8:	fd442783          	lw	a5,-44(s0)
204041dc:	cf95                	beqz	a5,20404218 <__metal_driver_riscv_plic0_register+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
204041de:	4609                	li	a2,2
204041e0:	fd842583          	lw	a1,-40(s0)
204041e4:	fdc42503          	lw	a0,-36(s0)
204041e8:	395d                	jal	20403e9e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
204041ea:	fec42703          	lw	a4,-20(s0)
204041ee:	fd842783          	lw	a5,-40(s0)
204041f2:	078a                	slli	a5,a5,0x2
204041f4:	97ba                	add	a5,a5,a4
204041f6:	fd442703          	lw	a4,-44(s0)
204041fa:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
204041fc:	fec42683          	lw	a3,-20(s0)
20404200:	fd842703          	lw	a4,-40(s0)
20404204:	87ba                	mv	a5,a4
20404206:	0786                	slli	a5,a5,0x1
20404208:	97ba                	add	a5,a5,a4
2040420a:	078e                	slli	a5,a5,0x3
2040420c:	97b6                	add	a5,a5,a3
2040420e:	fd042703          	lw	a4,-48(s0)
20404212:	08e7a423          	sw	a4,136(a5)
20404216:	a081                	j	20404256 <__metal_driver_riscv_plic0_register+0xb4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404218:	4605                	li	a2,1
2040421a:	fd842583          	lw	a1,-40(s0)
2040421e:	fdc42503          	lw	a0,-36(s0)
20404222:	c7dff0ef          	jal	ra,20403e9e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404226:	fec42703          	lw	a4,-20(s0)
2040422a:	fd842783          	lw	a5,-40(s0)
2040422e:	078a                	slli	a5,a5,0x2
20404230:	97ba                	add	a5,a5,a4
20404232:	20404737          	lui	a4,0x20404
20404236:	fc070713          	addi	a4,a4,-64 # 20403fc0 <__metal_plic0_default_handler>
2040423a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2040423c:	fec42683          	lw	a3,-20(s0)
20404240:	fd842703          	lw	a4,-40(s0)
20404244:	87ba                	mv	a5,a4
20404246:	0786                	slli	a5,a5,0x1
20404248:	97ba                	add	a5,a5,a4
2040424a:	078e                	slli	a5,a5,0x3
2040424c:	97b6                	add	a5,a5,a3
2040424e:	fd042703          	lw	a4,-48(s0)
20404252:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404256:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
20404258:	853e                	mv	a0,a5
2040425a:	50b2                	lw	ra,44(sp)
2040425c:	5422                	lw	s0,40(sp)
2040425e:	6145                	addi	sp,sp,48
20404260:	8082                	ret

20404262 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404262:	7179                	addi	sp,sp,-48
20404264:	d606                	sw	ra,44(sp)
20404266:	d422                	sw	s0,40(sp)
20404268:	1800                	addi	s0,sp,48
2040426a:	fca42e23          	sw	a0,-36(s0)
2040426e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404272:	fdc42783          	lw	a5,-36(s0)
20404276:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040427a:	fdc42503          	lw	a0,-36(s0)
2040427e:	abdff0ef          	jal	ra,20403d3a <__metal_driver_sifive_plic0_num_interrupts>
20404282:	872a                	mv	a4,a0
20404284:	fd842783          	lw	a5,-40(s0)
20404288:	00e7c463          	blt	a5,a4,20404290 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040428c:	57fd                	li	a5,-1
2040428e:	a809                	j	204042a0 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404290:	4605                	li	a2,1
20404292:	fd842583          	lw	a1,-40(s0)
20404296:	fec42503          	lw	a0,-20(s0)
2040429a:	c9bff0ef          	jal	ra,20403f34 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040429e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
204042a0:	853e                	mv	a0,a5
204042a2:	50b2                	lw	ra,44(sp)
204042a4:	5422                	lw	s0,40(sp)
204042a6:	6145                	addi	sp,sp,48
204042a8:	8082                	ret

204042aa <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204042aa:	7179                	addi	sp,sp,-48
204042ac:	d606                	sw	ra,44(sp)
204042ae:	d422                	sw	s0,40(sp)
204042b0:	1800                	addi	s0,sp,48
204042b2:	fca42e23          	sw	a0,-36(s0)
204042b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204042ba:	fdc42783          	lw	a5,-36(s0)
204042be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204042c2:	fdc42503          	lw	a0,-36(s0)
204042c6:	a75ff0ef          	jal	ra,20403d3a <__metal_driver_sifive_plic0_num_interrupts>
204042ca:	872a                	mv	a4,a0
204042cc:	fd842783          	lw	a5,-40(s0)
204042d0:	00e7c463          	blt	a5,a4,204042d8 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
204042d4:	57fd                	li	a5,-1
204042d6:	a809                	j	204042e8 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204042d8:	4601                	li	a2,0
204042da:	fd842583          	lw	a1,-40(s0)
204042de:	fec42503          	lw	a0,-20(s0)
204042e2:	c53ff0ef          	jal	ra,20403f34 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
204042e6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
204042e8:	853e                	mv	a0,a5
204042ea:	50b2                	lw	ra,44(sp)
204042ec:	5422                	lw	s0,40(sp)
204042ee:	6145                	addi	sp,sp,48
204042f0:	8082                	ret

204042f2 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
204042f2:	1101                	addi	sp,sp,-32
204042f4:	ce22                	sw	s0,28(sp)
204042f6:	1000                	addi	s0,sp,32
204042f8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204042fc:	fec42703          	lw	a4,-20(s0)
20404300:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404304:	00f71563          	bne	a4,a5,2040430e <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404308:	100127b7          	lui	a5,0x10012
2040430c:	a011                	j	20404310 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040430e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404310:	853e                	mv	a0,a5
20404312:	4472                	lw	s0,28(sp)
20404314:	6105                	addi	sp,sp,32
20404316:	8082                	ret

20404318 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404318:	1101                	addi	sp,sp,-32
2040431a:	ce22                	sw	s0,28(sp)
2040431c:	1000                	addi	s0,sp,32
2040431e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404322:	fec42703          	lw	a4,-20(s0)
20404326:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040432a:	00f71763          	bne	a4,a5,20404338 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040432e:	800007b7          	lui	a5,0x80000
20404332:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffeb6c>
20404336:	a011                	j	2040433a <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
20404338:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
2040433a:	853e                	mv	a0,a5
2040433c:	4472                	lw	s0,28(sp)
2040433e:	6105                	addi	sp,sp,32
20404340:	8082                	ret

20404342 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404342:	1101                	addi	sp,sp,-32
20404344:	ce22                	sw	s0,28(sp)
20404346:	1000                	addi	s0,sp,32
20404348:	fea42623          	sw	a0,-20(s0)
2040434c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404350:	fec42703          	lw	a4,-20(s0)
20404354:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404358:	00f71763          	bne	a4,a5,20404366 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
2040435c:	fe842783          	lw	a5,-24(s0)
20404360:	e399                	bnez	a5,20404366 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404362:	479d                	li	a5,7
20404364:	a269                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404366:	fec42703          	lw	a4,-20(s0)
2040436a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040436e:	00f71963          	bne	a4,a5,20404380 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404372:	fe842703          	lw	a4,-24(s0)
20404376:	4785                	li	a5,1
20404378:	00f71463          	bne	a4,a5,20404380 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040437c:	47a1                	li	a5,8
2040437e:	aa85                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404380:	fec42703          	lw	a4,-20(s0)
20404384:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404388:	00f71963          	bne	a4,a5,2040439a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040438c:	fe842703          	lw	a4,-24(s0)
20404390:	4789                	li	a5,2
20404392:	00f71463          	bne	a4,a5,2040439a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404396:	47a5                	li	a5,9
20404398:	aa99                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2040439a:	fec42703          	lw	a4,-20(s0)
2040439e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043a2:	00f71963          	bne	a4,a5,204043b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
204043a6:	fe842703          	lw	a4,-24(s0)
204043aa:	478d                	li	a5,3
204043ac:	00f71463          	bne	a4,a5,204043b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
204043b0:	47a9                	li	a5,10
204043b2:	aa35                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204043b4:	fec42703          	lw	a4,-20(s0)
204043b8:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043bc:	00f71963          	bne	a4,a5,204043ce <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
204043c0:	fe842703          	lw	a4,-24(s0)
204043c4:	4791                	li	a5,4
204043c6:	00f71463          	bne	a4,a5,204043ce <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
204043ca:	47ad                	li	a5,11
204043cc:	a20d                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204043ce:	fec42703          	lw	a4,-20(s0)
204043d2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043d6:	00f71963          	bne	a4,a5,204043e8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
204043da:	fe842703          	lw	a4,-24(s0)
204043de:	4795                	li	a5,5
204043e0:	00f71463          	bne	a4,a5,204043e8 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
204043e4:	47b1                	li	a5,12
204043e6:	a221                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204043e8:	fec42703          	lw	a4,-20(s0)
204043ec:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204043f0:	00f71963          	bne	a4,a5,20404402 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
204043f4:	fe842703          	lw	a4,-24(s0)
204043f8:	4799                	li	a5,6
204043fa:	00f71463          	bne	a4,a5,20404402 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
204043fe:	47b5                	li	a5,13
20404400:	a0fd                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404402:	fec42703          	lw	a4,-20(s0)
20404406:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040440a:	00f71963          	bne	a4,a5,2040441c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040440e:	fe842703          	lw	a4,-24(s0)
20404412:	479d                	li	a5,7
20404414:	00f71463          	bne	a4,a5,2040441c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404418:	47b9                	li	a5,14
2040441a:	a8d1                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040441c:	fec42703          	lw	a4,-20(s0)
20404420:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404424:	00f71963          	bne	a4,a5,20404436 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
20404428:	fe842703          	lw	a4,-24(s0)
2040442c:	47a1                	li	a5,8
2040442e:	00f71463          	bne	a4,a5,20404436 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404432:	47bd                	li	a5,15
20404434:	a86d                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404436:	fec42703          	lw	a4,-20(s0)
2040443a:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040443e:	00f71963          	bne	a4,a5,20404450 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404442:	fe842703          	lw	a4,-24(s0)
20404446:	47a5                	li	a5,9
20404448:	00f71463          	bne	a4,a5,20404450 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040444c:	47c1                	li	a5,16
2040444e:	a045                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404450:	fec42703          	lw	a4,-20(s0)
20404454:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404458:	00f71963          	bne	a4,a5,2040446a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040445c:	fe842703          	lw	a4,-24(s0)
20404460:	47a9                	li	a5,10
20404462:	00f71463          	bne	a4,a5,2040446a <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404466:	47c5                	li	a5,17
20404468:	a059                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2040446a:	fec42703          	lw	a4,-20(s0)
2040446e:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404472:	00f71963          	bne	a4,a5,20404484 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404476:	fe842703          	lw	a4,-24(s0)
2040447a:	47ad                	li	a5,11
2040447c:	00f71463          	bne	a4,a5,20404484 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404480:	47c9                	li	a5,18
20404482:	a0b5                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404484:	fec42703          	lw	a4,-20(s0)
20404488:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
2040448c:	00f71963          	bne	a4,a5,2040449e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404490:	fe842703          	lw	a4,-24(s0)
20404494:	47b1                	li	a5,12
20404496:	00f71463          	bne	a4,a5,2040449e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
2040449a:	47cd                	li	a5,19
2040449c:	a889                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040449e:	fec42703          	lw	a4,-20(s0)
204044a2:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204044a6:	00f71963          	bne	a4,a5,204044b8 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204044aa:	fe842703          	lw	a4,-24(s0)
204044ae:	47b5                	li	a5,13
204044b0:	00f71463          	bne	a4,a5,204044b8 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204044b4:	47d1                	li	a5,20
204044b6:	a825                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204044b8:	fec42703          	lw	a4,-20(s0)
204044bc:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204044c0:	00f71963          	bne	a4,a5,204044d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204044c4:	fe842703          	lw	a4,-24(s0)
204044c8:	47b9                	li	a5,14
204044ca:	00f71463          	bne	a4,a5,204044d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204044ce:	47d5                	li	a5,21
204044d0:	a839                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204044d2:	fec42703          	lw	a4,-20(s0)
204044d6:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
204044da:	00f71963          	bne	a4,a5,204044ec <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204044de:	fe842703          	lw	a4,-24(s0)
204044e2:	47bd                	li	a5,15
204044e4:	00f71463          	bne	a4,a5,204044ec <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
204044e8:	47d9                	li	a5,22
204044ea:	a011                	j	204044ee <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
204044ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
204044ee:	853e                	mv	a0,a5
204044f0:	4472                	lw	s0,28(sp)
204044f2:	6105                	addi	sp,sp,32
204044f4:	8082                	ret

204044f6 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
204044f6:	7179                	addi	sp,sp,-48
204044f8:	d606                	sw	ra,44(sp)
204044fa:	d422                	sw	s0,40(sp)
204044fc:	1800                	addi	s0,sp,48
204044fe:	fca42e23          	sw	a0,-36(s0)
20404502:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404506:	fdc42503          	lw	a0,-36(s0)
2040450a:	33e5                	jal	204042f2 <__metal_driver_sifive_gpio0_base>
2040450c:	87aa                	mv	a5,a0
2040450e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404512:	fec42783          	lw	a5,-20(s0)
20404516:	0791                	addi	a5,a5,4
20404518:	4398                	lw	a4,0(a5)
2040451a:	fd842783          	lw	a5,-40(s0)
2040451e:	fec42683          	lw	a3,-20(s0)
20404522:	0691                	addi	a3,a3,4
20404524:	8fd9                	or	a5,a5,a4
20404526:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
20404528:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040452a:	853e                	mv	a0,a5
2040452c:	50b2                	lw	ra,44(sp)
2040452e:	5422                	lw	s0,40(sp)
20404530:	6145                	addi	sp,sp,48
20404532:	8082                	ret

20404534 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404534:	7179                	addi	sp,sp,-48
20404536:	d606                	sw	ra,44(sp)
20404538:	d422                	sw	s0,40(sp)
2040453a:	1800                	addi	s0,sp,48
2040453c:	fca42e23          	sw	a0,-36(s0)
20404540:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404544:	fdc42503          	lw	a0,-36(s0)
20404548:	336d                	jal	204042f2 <__metal_driver_sifive_gpio0_base>
2040454a:	87aa                	mv	a5,a0
2040454c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404550:	fec42783          	lw	a5,-20(s0)
20404554:	0791                	addi	a5,a5,4
20404556:	439c                	lw	a5,0(a5)
20404558:	fd842703          	lw	a4,-40(s0)
2040455c:	fff74713          	not	a4,a4
20404560:	86ba                	mv	a3,a4
20404562:	fec42703          	lw	a4,-20(s0)
20404566:	0711                	addi	a4,a4,4
20404568:	8ff5                	and	a5,a5,a3
2040456a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
2040456c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
2040456e:	853e                	mv	a0,a5
20404570:	50b2                	lw	ra,44(sp)
20404572:	5422                	lw	s0,40(sp)
20404574:	6145                	addi	sp,sp,48
20404576:	8082                	ret

20404578 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
20404578:	7179                	addi	sp,sp,-48
2040457a:	d606                	sw	ra,44(sp)
2040457c:	d422                	sw	s0,40(sp)
2040457e:	1800                	addi	s0,sp,48
20404580:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404584:	fdc42503          	lw	a0,-36(s0)
20404588:	33ad                	jal	204042f2 <__metal_driver_sifive_gpio0_base>
2040458a:	87aa                	mv	a5,a0
2040458c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404590:	fec42783          	lw	a5,-20(s0)
20404594:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404596:	853e                	mv	a0,a5
20404598:	50b2                	lw	ra,44(sp)
2040459a:	5422                	lw	s0,40(sp)
2040459c:	6145                	addi	sp,sp,48
2040459e:	8082                	ret

204045a0 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204045a0:	7179                	addi	sp,sp,-48
204045a2:	d606                	sw	ra,44(sp)
204045a4:	d422                	sw	s0,40(sp)
204045a6:	1800                	addi	s0,sp,48
204045a8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045ac:	fdc42503          	lw	a0,-36(s0)
204045b0:	3389                	jal	204042f2 <__metal_driver_sifive_gpio0_base>
204045b2:	87aa                	mv	a5,a0
204045b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204045b8:	fec42783          	lw	a5,-20(s0)
204045bc:	07b1                	addi	a5,a5,12
204045be:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204045c0:	853e                	mv	a0,a5
204045c2:	50b2                	lw	ra,44(sp)
204045c4:	5422                	lw	s0,40(sp)
204045c6:	6145                	addi	sp,sp,48
204045c8:	8082                	ret

204045ca <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204045ca:	7179                	addi	sp,sp,-48
204045cc:	d606                	sw	ra,44(sp)
204045ce:	d422                	sw	s0,40(sp)
204045d0:	1800                	addi	s0,sp,48
204045d2:	fca42e23          	sw	a0,-36(s0)
204045d6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045da:	fdc42503          	lw	a0,-36(s0)
204045de:	d15ff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
204045e2:	87aa                	mv	a5,a0
204045e4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
204045e8:	fec42783          	lw	a5,-20(s0)
204045ec:	07a1                	addi	a5,a5,8
204045ee:	439c                	lw	a5,0(a5)
204045f0:	fd842703          	lw	a4,-40(s0)
204045f4:	fff74713          	not	a4,a4
204045f8:	86ba                	mv	a3,a4
204045fa:	fec42703          	lw	a4,-20(s0)
204045fe:	0721                	addi	a4,a4,8
20404600:	8ff5                	and	a5,a5,a3
20404602:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404604:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404606:	853e                	mv	a0,a5
20404608:	50b2                	lw	ra,44(sp)
2040460a:	5422                	lw	s0,40(sp)
2040460c:	6145                	addi	sp,sp,48
2040460e:	8082                	ret

20404610 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404610:	7179                	addi	sp,sp,-48
20404612:	d606                	sw	ra,44(sp)
20404614:	d422                	sw	s0,40(sp)
20404616:	1800                	addi	s0,sp,48
20404618:	fca42e23          	sw	a0,-36(s0)
2040461c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404620:	fdc42503          	lw	a0,-36(s0)
20404624:	ccfff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
20404628:	87aa                	mv	a5,a0
2040462a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
2040462e:	fec42783          	lw	a5,-20(s0)
20404632:	07a1                	addi	a5,a5,8
20404634:	4398                	lw	a4,0(a5)
20404636:	fd842783          	lw	a5,-40(s0)
2040463a:	fec42683          	lw	a3,-20(s0)
2040463e:	06a1                	addi	a3,a3,8
20404640:	8fd9                	or	a5,a5,a4
20404642:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
20404644:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404646:	853e                	mv	a0,a5
20404648:	50b2                	lw	ra,44(sp)
2040464a:	5422                	lw	s0,40(sp)
2040464c:	6145                	addi	sp,sp,48
2040464e:	8082                	ret

20404650 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20404650:	7179                	addi	sp,sp,-48
20404652:	d606                	sw	ra,44(sp)
20404654:	d422                	sw	s0,40(sp)
20404656:	1800                	addi	s0,sp,48
20404658:	fca42e23          	sw	a0,-36(s0)
2040465c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404660:	fdc42503          	lw	a0,-36(s0)
20404664:	c8fff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
20404668:	87aa                	mv	a5,a0
2040466a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
2040466e:	fec42783          	lw	a5,-20(s0)
20404672:	07b1                	addi	a5,a5,12
20404674:	4398                	lw	a4,0(a5)
20404676:	fd842783          	lw	a5,-40(s0)
2040467a:	fec42683          	lw	a3,-20(s0)
2040467e:	06b1                	addi	a3,a3,12
20404680:	8fd9                	or	a5,a5,a4
20404682:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404684:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404686:	853e                	mv	a0,a5
20404688:	50b2                	lw	ra,44(sp)
2040468a:	5422                	lw	s0,40(sp)
2040468c:	6145                	addi	sp,sp,48
2040468e:	8082                	ret

20404690 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404690:	7179                	addi	sp,sp,-48
20404692:	d606                	sw	ra,44(sp)
20404694:	d422                	sw	s0,40(sp)
20404696:	1800                	addi	s0,sp,48
20404698:	fca42e23          	sw	a0,-36(s0)
2040469c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046a0:	fdc42503          	lw	a0,-36(s0)
204046a4:	c4fff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
204046a8:	87aa                	mv	a5,a0
204046aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204046ae:	fec42783          	lw	a5,-20(s0)
204046b2:	07b1                	addi	a5,a5,12
204046b4:	439c                	lw	a5,0(a5)
204046b6:	fd842703          	lw	a4,-40(s0)
204046ba:	fff74713          	not	a4,a4
204046be:	86ba                	mv	a3,a4
204046c0:	fec42703          	lw	a4,-20(s0)
204046c4:	0731                	addi	a4,a4,12
204046c6:	8ff5                	and	a5,a5,a3
204046c8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204046ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204046cc:	853e                	mv	a0,a5
204046ce:	50b2                	lw	ra,44(sp)
204046d0:	5422                	lw	s0,40(sp)
204046d2:	6145                	addi	sp,sp,48
204046d4:	8082                	ret

204046d6 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204046d6:	7179                	addi	sp,sp,-48
204046d8:	d606                	sw	ra,44(sp)
204046da:	d422                	sw	s0,40(sp)
204046dc:	1800                	addi	s0,sp,48
204046de:	fca42e23          	sw	a0,-36(s0)
204046e2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204046e6:	fdc42503          	lw	a0,-36(s0)
204046ea:	c09ff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
204046ee:	87aa                	mv	a5,a0
204046f0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
204046f4:	fec42783          	lw	a5,-20(s0)
204046f8:	07b1                	addi	a5,a5,12
204046fa:	4398                	lw	a4,0(a5)
204046fc:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404700:	fec42683          	lw	a3,-20(s0)
20404704:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404706:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404708:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040470a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040470c:	853e                	mv	a0,a5
2040470e:	50b2                	lw	ra,44(sp)
20404710:	5422                	lw	s0,40(sp)
20404712:	6145                	addi	sp,sp,48
20404714:	8082                	ret

20404716 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404716:	7179                	addi	sp,sp,-48
20404718:	d606                	sw	ra,44(sp)
2040471a:	d422                	sw	s0,40(sp)
2040471c:	1800                	addi	s0,sp,48
2040471e:	fca42e23          	sw	a0,-36(s0)
20404722:	fcb42c23          	sw	a1,-40(s0)
20404726:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040472a:	fdc42503          	lw	a0,-36(s0)
2040472e:	bc5ff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
20404732:	87aa                	mv	a5,a0
20404734:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404738:	fec42783          	lw	a5,-20(s0)
2040473c:	03c78793          	addi	a5,a5,60
20404740:	439c                	lw	a5,0(a5)
20404742:	fd842703          	lw	a4,-40(s0)
20404746:	fff74713          	not	a4,a4
2040474a:	86ba                	mv	a3,a4
2040474c:	fec42703          	lw	a4,-20(s0)
20404750:	03c70713          	addi	a4,a4,60
20404754:	8ff5                	and	a5,a5,a3
20404756:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404758:	fec42783          	lw	a5,-20(s0)
2040475c:	03878793          	addi	a5,a5,56
20404760:	4398                	lw	a4,0(a5)
20404762:	fd442783          	lw	a5,-44(s0)
20404766:	fec42683          	lw	a3,-20(s0)
2040476a:	03868693          	addi	a3,a3,56
2040476e:	8fd9                	or	a5,a5,a4
20404770:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
20404772:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
20404774:	853e                	mv	a0,a5
20404776:	50b2                	lw	ra,44(sp)
20404778:	5422                	lw	s0,40(sp)
2040477a:	6145                	addi	sp,sp,48
2040477c:	8082                	ret

2040477e <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
2040477e:	7179                	addi	sp,sp,-48
20404780:	d606                	sw	ra,44(sp)
20404782:	d422                	sw	s0,40(sp)
20404784:	1800                	addi	s0,sp,48
20404786:	fca42e23          	sw	a0,-36(s0)
2040478a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040478e:	fdc42503          	lw	a0,-36(s0)
20404792:	b61ff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
20404796:	87aa                	mv	a5,a0
20404798:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040479c:	fec42783          	lw	a5,-20(s0)
204047a0:	03878793          	addi	a5,a5,56
204047a4:	439c                	lw	a5,0(a5)
204047a6:	fd842703          	lw	a4,-40(s0)
204047aa:	fff74713          	not	a4,a4
204047ae:	86ba                	mv	a3,a4
204047b0:	fec42703          	lw	a4,-20(s0)
204047b4:	03870713          	addi	a4,a4,56
204047b8:	8ff5                	and	a5,a5,a3
204047ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204047bc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204047be:	853e                	mv	a0,a5
204047c0:	50b2                	lw	ra,44(sp)
204047c2:	5422                	lw	s0,40(sp)
204047c4:	6145                	addi	sp,sp,48
204047c6:	8082                	ret

204047c8 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204047c8:	7179                	addi	sp,sp,-48
204047ca:	d606                	sw	ra,44(sp)
204047cc:	d422                	sw	s0,40(sp)
204047ce:	1800                	addi	s0,sp,48
204047d0:	fca42e23          	sw	a0,-36(s0)
204047d4:	fcb42c23          	sw	a1,-40(s0)
204047d8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047dc:	fdc42503          	lw	a0,-36(s0)
204047e0:	b13ff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
204047e4:	87aa                	mv	a5,a0
204047e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
204047ea:	fd442703          	lw	a4,-44(s0)
204047ee:	479d                	li	a5,7
204047f0:	1ce7e963          	bltu	a5,a4,204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
204047f4:	fd442783          	lw	a5,-44(s0)
204047f8:	00279713          	slli	a4,a5,0x2
204047fc:	204057b7          	lui	a5,0x20405
20404800:	6a478793          	addi	a5,a5,1700 # 204056a4 <__metal_driver_vtable_riscv_plic0+0x4c>
20404804:	97ba                	add	a5,a5,a4
20404806:	439c                	lw	a5,0(a5)
20404808:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040480a:	fec42783          	lw	a5,-20(s0)
2040480e:	07e1                	addi	a5,a5,24
20404810:	439c                	lw	a5,0(a5)
20404812:	fd842703          	lw	a4,-40(s0)
20404816:	fff74713          	not	a4,a4
2040481a:	86ba                	mv	a3,a4
2040481c:	fec42703          	lw	a4,-20(s0)
20404820:	0761                	addi	a4,a4,24
20404822:	8ff5                	and	a5,a5,a3
20404824:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404826:	fec42783          	lw	a5,-20(s0)
2040482a:	02078793          	addi	a5,a5,32
2040482e:	439c                	lw	a5,0(a5)
20404830:	fd842703          	lw	a4,-40(s0)
20404834:	fff74713          	not	a4,a4
20404838:	86ba                	mv	a3,a4
2040483a:	fec42703          	lw	a4,-20(s0)
2040483e:	02070713          	addi	a4,a4,32
20404842:	8ff5                	and	a5,a5,a3
20404844:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404846:	fec42783          	lw	a5,-20(s0)
2040484a:	02878793          	addi	a5,a5,40
2040484e:	439c                	lw	a5,0(a5)
20404850:	fd842703          	lw	a4,-40(s0)
20404854:	fff74713          	not	a4,a4
20404858:	86ba                	mv	a3,a4
2040485a:	fec42703          	lw	a4,-20(s0)
2040485e:	02870713          	addi	a4,a4,40
20404862:	8ff5                	and	a5,a5,a3
20404864:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404866:	fec42783          	lw	a5,-20(s0)
2040486a:	03078793          	addi	a5,a5,48
2040486e:	439c                	lw	a5,0(a5)
20404870:	fd842703          	lw	a4,-40(s0)
20404874:	fff74713          	not	a4,a4
20404878:	86ba                	mv	a3,a4
2040487a:	fec42703          	lw	a4,-20(s0)
2040487e:	03070713          	addi	a4,a4,48
20404882:	8ff5                	and	a5,a5,a3
20404884:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404886:	aa35                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404888:	fec42783          	lw	a5,-20(s0)
2040488c:	07e1                	addi	a5,a5,24
2040488e:	4398                	lw	a4,0(a5)
20404890:	fd842783          	lw	a5,-40(s0)
20404894:	fec42683          	lw	a3,-20(s0)
20404898:	06e1                	addi	a3,a3,24
2040489a:	8fd9                	or	a5,a5,a4
2040489c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
2040489e:	a215                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204048a0:	fec42783          	lw	a5,-20(s0)
204048a4:	02078793          	addi	a5,a5,32
204048a8:	4398                	lw	a4,0(a5)
204048aa:	fd842783          	lw	a5,-40(s0)
204048ae:	fec42683          	lw	a3,-20(s0)
204048b2:	02068693          	addi	a3,a3,32
204048b6:	8fd9                	or	a5,a5,a4
204048b8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
204048ba:	a221                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204048bc:	fec42783          	lw	a5,-20(s0)
204048c0:	07e1                	addi	a5,a5,24
204048c2:	4398                	lw	a4,0(a5)
204048c4:	fd842783          	lw	a5,-40(s0)
204048c8:	fec42683          	lw	a3,-20(s0)
204048cc:	06e1                	addi	a3,a3,24
204048ce:	8fd9                	or	a5,a5,a4
204048d0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204048d2:	fec42783          	lw	a5,-20(s0)
204048d6:	02078793          	addi	a5,a5,32
204048da:	4398                	lw	a4,0(a5)
204048dc:	fd842783          	lw	a5,-40(s0)
204048e0:	fec42683          	lw	a3,-20(s0)
204048e4:	02068693          	addi	a3,a3,32
204048e8:	8fd9                	or	a5,a5,a4
204048ea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
204048ec:	a8d9                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204048ee:	fec42783          	lw	a5,-20(s0)
204048f2:	02878793          	addi	a5,a5,40
204048f6:	4398                	lw	a4,0(a5)
204048f8:	fd842783          	lw	a5,-40(s0)
204048fc:	fec42683          	lw	a3,-20(s0)
20404900:	02868693          	addi	a3,a3,40
20404904:	8fd9                	or	a5,a5,a4
20404906:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404908:	a86d                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040490a:	fec42783          	lw	a5,-20(s0)
2040490e:	03078793          	addi	a5,a5,48
20404912:	4398                	lw	a4,0(a5)
20404914:	fd842783          	lw	a5,-40(s0)
20404918:	fec42683          	lw	a3,-20(s0)
2040491c:	03068693          	addi	a3,a3,48
20404920:	8fd9                	or	a5,a5,a4
20404922:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404924:	a879                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404926:	fec42783          	lw	a5,-20(s0)
2040492a:	02878793          	addi	a5,a5,40
2040492e:	4398                	lw	a4,0(a5)
20404930:	fd842783          	lw	a5,-40(s0)
20404934:	fec42683          	lw	a3,-20(s0)
20404938:	02868693          	addi	a3,a3,40
2040493c:	8fd9                	or	a5,a5,a4
2040493e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404940:	fec42783          	lw	a5,-20(s0)
20404944:	03078793          	addi	a5,a5,48
20404948:	4398                	lw	a4,0(a5)
2040494a:	fd842783          	lw	a5,-40(s0)
2040494e:	fec42683          	lw	a3,-20(s0)
20404952:	03068693          	addi	a3,a3,48
20404956:	8fd9                	or	a5,a5,a4
20404958:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
2040495a:	a0a5                	j	204049c2 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040495c:	fec42783          	lw	a5,-20(s0)
20404960:	07e1                	addi	a5,a5,24
20404962:	4398                	lw	a4,0(a5)
20404964:	fd842783          	lw	a5,-40(s0)
20404968:	fec42683          	lw	a3,-20(s0)
2040496c:	06e1                	addi	a3,a3,24
2040496e:	8fd9                	or	a5,a5,a4
20404970:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404972:	fec42783          	lw	a5,-20(s0)
20404976:	02078793          	addi	a5,a5,32
2040497a:	4398                	lw	a4,0(a5)
2040497c:	fd842783          	lw	a5,-40(s0)
20404980:	fec42683          	lw	a3,-20(s0)
20404984:	02068693          	addi	a3,a3,32
20404988:	8fd9                	or	a5,a5,a4
2040498a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040498c:	fec42783          	lw	a5,-20(s0)
20404990:	02878793          	addi	a5,a5,40
20404994:	4398                	lw	a4,0(a5)
20404996:	fd842783          	lw	a5,-40(s0)
2040499a:	fec42683          	lw	a3,-20(s0)
2040499e:	02868693          	addi	a3,a3,40
204049a2:	8fd9                	or	a5,a5,a4
204049a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204049a6:	fec42783          	lw	a5,-20(s0)
204049aa:	03078793          	addi	a5,a5,48
204049ae:	4398                	lw	a4,0(a5)
204049b0:	fd842783          	lw	a5,-40(s0)
204049b4:	fec42683          	lw	a3,-20(s0)
204049b8:	03068693          	addi	a3,a3,48
204049bc:	8fd9                	or	a5,a5,a4
204049be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
204049c0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
204049c2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
204049c4:	853e                	mv	a0,a5
204049c6:	50b2                	lw	ra,44(sp)
204049c8:	5422                	lw	s0,40(sp)
204049ca:	6145                	addi	sp,sp,48
204049cc:	8082                	ret

204049ce <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204049ce:	7179                	addi	sp,sp,-48
204049d0:	d606                	sw	ra,44(sp)
204049d2:	d422                	sw	s0,40(sp)
204049d4:	1800                	addi	s0,sp,48
204049d6:	fca42e23          	sw	a0,-36(s0)
204049da:	fcb42c23          	sw	a1,-40(s0)
204049de:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049e2:	fdc42503          	lw	a0,-36(s0)
204049e6:	90dff0ef          	jal	ra,204042f2 <__metal_driver_sifive_gpio0_base>
204049ea:	87aa                	mv	a5,a0
204049ec:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
204049f0:	fd442703          	lw	a4,-44(s0)
204049f4:	479d                	li	a5,7
204049f6:	14e7ea63          	bltu	a5,a4,20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
204049fa:	fd442783          	lw	a5,-44(s0)
204049fe:	00279713          	slli	a4,a5,0x2
20404a02:	204057b7          	lui	a5,0x20405
20404a06:	6c478793          	addi	a5,a5,1732 # 204056c4 <__metal_driver_vtable_riscv_plic0+0x6c>
20404a0a:	97ba                	add	a5,a5,a4
20404a0c:	439c                	lw	a5,0(a5)
20404a0e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404a10:	fec42783          	lw	a5,-20(s0)
20404a14:	07f1                	addi	a5,a5,28
20404a16:	4398                	lw	a4,0(a5)
20404a18:	fd842783          	lw	a5,-40(s0)
20404a1c:	fec42683          	lw	a3,-20(s0)
20404a20:	06f1                	addi	a3,a3,28
20404a22:	8fd9                	or	a5,a5,a4
20404a24:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404a26:	a215                	j	20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404a28:	fec42783          	lw	a5,-20(s0)
20404a2c:	02478793          	addi	a5,a5,36
20404a30:	4398                	lw	a4,0(a5)
20404a32:	fd842783          	lw	a5,-40(s0)
20404a36:	fec42683          	lw	a3,-20(s0)
20404a3a:	02468693          	addi	a3,a3,36
20404a3e:	8fd9                	or	a5,a5,a4
20404a40:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404a42:	a221                	j	20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404a44:	fec42783          	lw	a5,-20(s0)
20404a48:	07f1                	addi	a5,a5,28
20404a4a:	4398                	lw	a4,0(a5)
20404a4c:	fd842783          	lw	a5,-40(s0)
20404a50:	fec42683          	lw	a3,-20(s0)
20404a54:	06f1                	addi	a3,a3,28
20404a56:	8fd9                	or	a5,a5,a4
20404a58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404a5a:	fec42783          	lw	a5,-20(s0)
20404a5e:	02478793          	addi	a5,a5,36
20404a62:	4398                	lw	a4,0(a5)
20404a64:	fd842783          	lw	a5,-40(s0)
20404a68:	fec42683          	lw	a3,-20(s0)
20404a6c:	02468693          	addi	a3,a3,36
20404a70:	8fd9                	or	a5,a5,a4
20404a72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404a74:	a8d9                	j	20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404a76:	fec42783          	lw	a5,-20(s0)
20404a7a:	02c78793          	addi	a5,a5,44
20404a7e:	4398                	lw	a4,0(a5)
20404a80:	fd842783          	lw	a5,-40(s0)
20404a84:	fec42683          	lw	a3,-20(s0)
20404a88:	02c68693          	addi	a3,a3,44
20404a8c:	8fd9                	or	a5,a5,a4
20404a8e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404a90:	a86d                	j	20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404a92:	fec42783          	lw	a5,-20(s0)
20404a96:	03478793          	addi	a5,a5,52
20404a9a:	4398                	lw	a4,0(a5)
20404a9c:	fd842783          	lw	a5,-40(s0)
20404aa0:	fec42683          	lw	a3,-20(s0)
20404aa4:	03468693          	addi	a3,a3,52
20404aa8:	8fd9                	or	a5,a5,a4
20404aaa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404aac:	a879                	j	20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404aae:	fec42783          	lw	a5,-20(s0)
20404ab2:	02c78793          	addi	a5,a5,44
20404ab6:	4398                	lw	a4,0(a5)
20404ab8:	fd842783          	lw	a5,-40(s0)
20404abc:	fec42683          	lw	a3,-20(s0)
20404ac0:	02c68693          	addi	a3,a3,44
20404ac4:	8fd9                	or	a5,a5,a4
20404ac6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404ac8:	fec42783          	lw	a5,-20(s0)
20404acc:	03478793          	addi	a5,a5,52
20404ad0:	4398                	lw	a4,0(a5)
20404ad2:	fd842783          	lw	a5,-40(s0)
20404ad6:	fec42683          	lw	a3,-20(s0)
20404ada:	03468693          	addi	a3,a3,52
20404ade:	8fd9                	or	a5,a5,a4
20404ae0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404ae2:	a0a5                	j	20404b4a <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404ae4:	fec42783          	lw	a5,-20(s0)
20404ae8:	07f1                	addi	a5,a5,28
20404aea:	4398                	lw	a4,0(a5)
20404aec:	fd842783          	lw	a5,-40(s0)
20404af0:	fec42683          	lw	a3,-20(s0)
20404af4:	06f1                	addi	a3,a3,28
20404af6:	8fd9                	or	a5,a5,a4
20404af8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404afa:	fec42783          	lw	a5,-20(s0)
20404afe:	02478793          	addi	a5,a5,36
20404b02:	4398                	lw	a4,0(a5)
20404b04:	fd842783          	lw	a5,-40(s0)
20404b08:	fec42683          	lw	a3,-20(s0)
20404b0c:	02468693          	addi	a3,a3,36
20404b10:	8fd9                	or	a5,a5,a4
20404b12:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404b14:	fec42783          	lw	a5,-20(s0)
20404b18:	02c78793          	addi	a5,a5,44
20404b1c:	4398                	lw	a4,0(a5)
20404b1e:	fd842783          	lw	a5,-40(s0)
20404b22:	fec42683          	lw	a3,-20(s0)
20404b26:	02c68693          	addi	a3,a3,44
20404b2a:	8fd9                	or	a5,a5,a4
20404b2c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404b2e:	fec42783          	lw	a5,-20(s0)
20404b32:	03478793          	addi	a5,a5,52
20404b36:	4398                	lw	a4,0(a5)
20404b38:	fd842783          	lw	a5,-40(s0)
20404b3c:	fec42683          	lw	a3,-20(s0)
20404b40:	03468693          	addi	a3,a3,52
20404b44:	8fd9                	or	a5,a5,a4
20404b46:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404b48:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404b4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404b4c:	853e                	mv	a0,a5
20404b4e:	50b2                	lw	ra,44(sp)
20404b50:	5422                	lw	s0,40(sp)
20404b52:	6145                	addi	sp,sp,48
20404b54:	8082                	ret

20404b56 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404b56:	1101                	addi	sp,sp,-32
20404b58:	ce06                	sw	ra,28(sp)
20404b5a:	cc22                	sw	s0,24(sp)
20404b5c:	1000                	addi	s0,sp,32
20404b5e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404b62:	fec42503          	lw	a0,-20(s0)
20404b66:	fb2ff0ef          	jal	ra,20404318 <__metal_driver_sifive_gpio0_interrupt_parent>
20404b6a:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404b6c:	853e                	mv	a0,a5
20404b6e:	40f2                	lw	ra,28(sp)
20404b70:	4462                	lw	s0,24(sp)
20404b72:	6105                	addi	sp,sp,32
20404b74:	8082                	ret

20404b76 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404b76:	7179                	addi	sp,sp,-48
20404b78:	d606                	sw	ra,44(sp)
20404b7a:	d422                	sw	s0,40(sp)
20404b7c:	1800                	addi	s0,sp,48
20404b7e:	fca42e23          	sw	a0,-36(s0)
20404b82:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404b86:	fd842583          	lw	a1,-40(s0)
20404b8a:	fdc42503          	lw	a0,-36(s0)
20404b8e:	fb4ff0ef          	jal	ra,20404342 <__metal_driver_sifive_gpio0_interrupt_lines>
20404b92:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404b96:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404b9a:	853e                	mv	a0,a5
20404b9c:	50b2                	lw	ra,44(sp)
20404b9e:	5422                	lw	s0,40(sp)
20404ba0:	6145                	addi	sp,sp,48
20404ba2:	8082                	ret

20404ba4 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404ba4:	1101                	addi	sp,sp,-32
20404ba6:	ce22                	sw	s0,28(sp)
20404ba8:	1000                	addi	s0,sp,32
20404baa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404bae:	fec42703          	lw	a4,-20(s0)
20404bb2:	800007b7          	lui	a5,0x80000
20404bb6:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404bba:	00f71563          	bne	a4,a5,20404bc4 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404bbe:	100137b7          	lui	a5,0x10013
20404bc2:	a011                	j	20404bc6 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404bc4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404bc6:	853e                	mv	a0,a5
20404bc8:	4472                	lw	s0,28(sp)
20404bca:	6105                	addi	sp,sp,32
20404bcc:	8082                	ret

20404bce <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404bce:	1101                	addi	sp,sp,-32
20404bd0:	ce22                	sw	s0,28(sp)
20404bd2:	1000                	addi	s0,sp,32
20404bd4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404bd8:	fec42703          	lw	a4,-20(s0)
20404bdc:	800007b7          	lui	a5,0x80000
20404be0:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404be4:	00f71763          	bne	a4,a5,20404bf2 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404be8:	800007b7          	lui	a5,0x80000
20404bec:	42878793          	addi	a5,a5,1064 # 80000428 <metal_segment_heap_target_end+0xffffeb6c>
20404bf0:	a011                	j	20404bf4 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404bf2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404bf4:	853e                	mv	a0,a5
20404bf6:	4472                	lw	s0,28(sp)
20404bf8:	6105                	addi	sp,sp,32
20404bfa:	8082                	ret

20404bfc <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404bfc:	1101                	addi	sp,sp,-32
20404bfe:	ce22                	sw	s0,28(sp)
20404c00:	1000                	addi	s0,sp,32
20404c02:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c06:	fec42703          	lw	a4,-20(s0)
20404c0a:	800007b7          	lui	a5,0x80000
20404c0e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404c12:	00f71463          	bne	a4,a5,20404c1a <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404c16:	4795                	li	a5,5
20404c18:	a011                	j	20404c1c <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404c1a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404c1c:	853e                	mv	a0,a5
20404c1e:	4472                	lw	s0,28(sp)
20404c20:	6105                	addi	sp,sp,32
20404c22:	8082                	ret

20404c24 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404c24:	1101                	addi	sp,sp,-32
20404c26:	ce22                	sw	s0,28(sp)
20404c28:	1000                	addi	s0,sp,32
20404c2a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c2e:	fec42703          	lw	a4,-20(s0)
20404c32:	800007b7          	lui	a5,0x80000
20404c36:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404c3a:	00f71763          	bne	a4,a5,20404c48 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404c3e:	800007b7          	lui	a5,0x80000
20404c42:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe7a4>
20404c46:	a011                	j	20404c4a <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404c48:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404c4a:	853e                	mv	a0,a5
20404c4c:	4472                	lw	s0,28(sp)
20404c4e:	6105                	addi	sp,sp,32
20404c50:	8082                	ret

20404c52 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404c52:	1101                	addi	sp,sp,-32
20404c54:	ce22                	sw	s0,28(sp)
20404c56:	1000                	addi	s0,sp,32
20404c58:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c5c:	fec42703          	lw	a4,-20(s0)
20404c60:	800007b7          	lui	a5,0x80000
20404c64:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404c68:	00f71563          	bne	a4,a5,20404c72 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404c6c:	81c18793          	addi	a5,gp,-2020 # 80000764 <__metal_dt_gpio_10012000>
20404c70:	a011                	j	20404c74 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404c72:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404c74:	853e                	mv	a0,a5
20404c76:	4472                	lw	s0,28(sp)
20404c78:	6105                	addi	sp,sp,32
20404c7a:	8082                	ret

20404c7c <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404c7c:	1101                	addi	sp,sp,-32
20404c7e:	ce22                	sw	s0,28(sp)
20404c80:	1000                	addi	s0,sp,32
20404c82:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404c86:	fec42703          	lw	a4,-20(s0)
20404c8a:	800007b7          	lui	a5,0x80000
20404c8e:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404c92:	00f71563          	bne	a4,a5,20404c9c <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404c96:	000307b7          	lui	a5,0x30
20404c9a:	a011                	j	20404c9e <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404c9c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404c9e:	853e                	mv	a0,a5
20404ca0:	4472                	lw	s0,28(sp)
20404ca2:	6105                	addi	sp,sp,32
20404ca4:	8082                	ret

20404ca6 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404ca6:	1101                	addi	sp,sp,-32
20404ca8:	ce22                	sw	s0,28(sp)
20404caa:	1000                	addi	s0,sp,32
20404cac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404cb0:	fec42703          	lw	a4,-20(s0)
20404cb4:	800007b7          	lui	a5,0x80000
20404cb8:	72878793          	addi	a5,a5,1832 # 80000728 <metal_segment_heap_target_end+0xffffee6c>
20404cbc:	00f71563          	bne	a4,a5,20404cc6 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404cc0:	000307b7          	lui	a5,0x30
20404cc4:	a011                	j	20404cc8 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404cc6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404cc8:	853e                	mv	a0,a5
20404cca:	4472                	lw	s0,28(sp)
20404ccc:	6105                	addi	sp,sp,32
20404cce:	8082                	ret

20404cd0 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404cd0:	1101                	addi	sp,sp,-32
20404cd2:	ce06                	sw	ra,28(sp)
20404cd4:	cc22                	sw	s0,24(sp)
20404cd6:	1000                	addi	s0,sp,32
20404cd8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404cdc:	fec42503          	lw	a0,-20(s0)
20404ce0:	35fd                	jal	20404bce <__metal_driver_sifive_uart0_interrupt_parent>
20404ce2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404ce4:	853e                	mv	a0,a5
20404ce6:	40f2                	lw	ra,28(sp)
20404ce8:	4462                	lw	s0,24(sp)
20404cea:	6105                	addi	sp,sp,32
20404cec:	8082                	ret

20404cee <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404cee:	1101                	addi	sp,sp,-32
20404cf0:	ce06                	sw	ra,28(sp)
20404cf2:	cc22                	sw	s0,24(sp)
20404cf4:	1000                	addi	s0,sp,32
20404cf6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404cfa:	fec42503          	lw	a0,-20(s0)
20404cfe:	3dfd                	jal	20404bfc <__metal_driver_sifive_uart0_interrupt_line>
20404d00:	87aa                	mv	a5,a0
20404d02:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404d06:	853e                	mv	a0,a5
20404d08:	40f2                	lw	ra,28(sp)
20404d0a:	4462                	lw	s0,24(sp)
20404d0c:	6105                	addi	sp,sp,32
20404d0e:	8082                	ret

20404d10 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404d10:	7179                	addi	sp,sp,-48
20404d12:	d606                	sw	ra,44(sp)
20404d14:	d422                	sw	s0,40(sp)
20404d16:	1800                	addi	s0,sp,48
20404d18:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404d1c:	fdc42503          	lw	a0,-36(s0)
20404d20:	3551                	jal	20404ba4 <__metal_driver_sifive_uart0_control_base>
20404d22:	87aa                	mv	a5,a0
20404d24:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404d28:	fec42783          	lw	a5,-20(s0)
20404d2c:	439c                	lw	a5,0(a5)
20404d2e:	fff7c793          	not	a5,a5
20404d32:	83fd                	srli	a5,a5,0x1f
20404d34:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404d38:	853e                	mv	a0,a5
20404d3a:	50b2                	lw	ra,44(sp)
20404d3c:	5422                	lw	s0,40(sp)
20404d3e:	6145                	addi	sp,sp,48
20404d40:	8082                	ret

20404d42 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404d42:	7179                	addi	sp,sp,-48
20404d44:	d606                	sw	ra,44(sp)
20404d46:	d422                	sw	s0,40(sp)
20404d48:	1800                	addi	s0,sp,48
20404d4a:	fca42e23          	sw	a0,-36(s0)
20404d4e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404d52:	fdc42503          	lw	a0,-36(s0)
20404d56:	35b9                	jal	20404ba4 <__metal_driver_sifive_uart0_control_base>
20404d58:	87aa                	mv	a5,a0
20404d5a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404d5e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404d60:	fdc42503          	lw	a0,-36(s0)
20404d64:	3775                	jal	20404d10 <__metal_driver_sifive_uart0_txready>
20404d66:	87aa                	mv	a5,a0
20404d68:	dfe5                	beqz	a5,20404d60 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404d6a:	fec42783          	lw	a5,-20(s0)
20404d6e:	fd842703          	lw	a4,-40(s0)
20404d72:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404d74:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404d76:	853e                	mv	a0,a5
20404d78:	50b2                	lw	ra,44(sp)
20404d7a:	5422                	lw	s0,40(sp)
20404d7c:	6145                	addi	sp,sp,48
20404d7e:	8082                	ret

20404d80 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404d80:	7179                	addi	sp,sp,-48
20404d82:	d606                	sw	ra,44(sp)
20404d84:	d422                	sw	s0,40(sp)
20404d86:	1800                	addi	s0,sp,48
20404d88:	fca42e23          	sw	a0,-36(s0)
20404d8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404d90:	fdc42503          	lw	a0,-36(s0)
20404d94:	3d01                	jal	20404ba4 <__metal_driver_sifive_uart0_control_base>
20404d96:	87aa                	mv	a5,a0
20404d98:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404d9c:	fec42783          	lw	a5,-20(s0)
20404da0:	0791                	addi	a5,a5,4
20404da2:	439c                	lw	a5,0(a5)
20404da4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404da8:	fe842783          	lw	a5,-24(s0)
20404dac:	0007d763          	bgez	a5,20404dba <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404db0:	fd842783          	lw	a5,-40(s0)
20404db4:	577d                	li	a4,-1
20404db6:	c398                	sw	a4,0(a5)
20404db8:	a801                	j	20404dc8 <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404dba:	fe842783          	lw	a5,-24(s0)
20404dbe:	0ff7f713          	andi	a4,a5,255
20404dc2:	fd842783          	lw	a5,-40(s0)
20404dc6:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404dc8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404dca:	853e                	mv	a0,a5
20404dcc:	50b2                	lw	ra,44(sp)
20404dce:	5422                	lw	s0,40(sp)
20404dd0:	6145                	addi	sp,sp,48
20404dd2:	8082                	ret

20404dd4 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404dd4:	7179                	addi	sp,sp,-48
20404dd6:	d622                	sw	s0,44(sp)
20404dd8:	1800                	addi	s0,sp,48
20404dda:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404dde:	fdc42783          	lw	a5,-36(s0)
20404de2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404de6:	fec42783          	lw	a5,-20(s0)
20404dea:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404dec:	853e                	mv	a0,a5
20404dee:	5432                	lw	s0,44(sp)
20404df0:	6145                	addi	sp,sp,48
20404df2:	8082                	ret

20404df4 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404df4:	7179                	addi	sp,sp,-48
20404df6:	d606                	sw	ra,44(sp)
20404df8:	d422                	sw	s0,40(sp)
20404dfa:	1800                	addi	s0,sp,48
20404dfc:	fca42e23          	sw	a0,-36(s0)
20404e00:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404e04:	fdc42783          	lw	a5,-36(s0)
20404e08:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404e0c:	fdc42503          	lw	a0,-36(s0)
20404e10:	3b51                	jal	20404ba4 <__metal_driver_sifive_uart0_control_base>
20404e12:	87aa                	mv	a5,a0
20404e14:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404e18:	fdc42503          	lw	a0,-36(s0)
20404e1c:	3521                	jal	20404c24 <__metal_driver_sifive_uart0_clock>
20404e1e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404e22:	fd842703          	lw	a4,-40(s0)
20404e26:	fec42783          	lw	a5,-20(s0)
20404e2a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404e2c:	fe442783          	lw	a5,-28(s0)
20404e30:	cbb1                	beqz	a5,20404e84 <__metal_driver_sifive_uart0_set_baud_rate+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404e32:	fe442783          	lw	a5,-28(s0)
20404e36:	439c                	lw	a5,0(a5)
20404e38:	439c                	lw	a5,0(a5)
20404e3a:	fe442503          	lw	a0,-28(s0)
20404e3e:	9782                	jalr	a5
20404e40:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404e44:	fe042703          	lw	a4,-32(s0)
20404e48:	fd842783          	lw	a5,-40(s0)
20404e4c:	02f747b3          	div	a5,a4,a5
20404e50:	fff78713          	addi	a4,a5,-1
20404e54:	fe842783          	lw	a5,-24(s0)
20404e58:	07e1                	addi	a5,a5,24
20404e5a:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404e5c:	fe842783          	lw	a5,-24(s0)
20404e60:	07a1                	addi	a5,a5,8
20404e62:	439c                	lw	a5,0(a5)
20404e64:	fe842703          	lw	a4,-24(s0)
20404e68:	0721                	addi	a4,a4,8
20404e6a:	0017e793          	ori	a5,a5,1
20404e6e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404e70:	fe842783          	lw	a5,-24(s0)
20404e74:	07b1                	addi	a5,a5,12
20404e76:	439c                	lw	a5,0(a5)
20404e78:	fe842703          	lw	a4,-24(s0)
20404e7c:	0731                	addi	a4,a4,12
20404e7e:	0017e793          	ori	a5,a5,1
20404e82:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404e84:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404e86:	853e                	mv	a0,a5
20404e88:	50b2                	lw	ra,44(sp)
20404e8a:	5422                	lw	s0,40(sp)
20404e8c:	6145                	addi	sp,sp,48
20404e8e:	8082                	ret

20404e90 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404e90:	7139                	addi	sp,sp,-64
20404e92:	de06                	sw	ra,60(sp)
20404e94:	dc22                	sw	s0,56(sp)
20404e96:	0080                	addi	s0,sp,64
20404e98:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404e9c:	fcc42783          	lw	a5,-52(s0)
20404ea0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404ea4:	fcc42503          	lw	a0,-52(s0)
20404ea8:	cfdff0ef          	jal	ra,20404ba4 <__metal_driver_sifive_uart0_control_base>
20404eac:	87aa                	mv	a5,a0
20404eae:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404eb2:	fcc42503          	lw	a0,-52(s0)
20404eb6:	d6fff0ef          	jal	ra,20404c24 <__metal_driver_sifive_uart0_clock>
20404eba:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404ebe:	fe842783          	lw	a5,-24(s0)
20404ec2:	07a1                	addi	a5,a5,8
20404ec4:	4398                	lw	a4,0(a5)
20404ec6:	fe842783          	lw	a5,-24(s0)
20404eca:	07a1                	addi	a5,a5,8
20404ecc:	86be                	mv	a3,a5
20404ece:	fff907b7          	lui	a5,0xfff90
20404ed2:	17fd                	addi	a5,a5,-1
20404ed4:	8ff9                	and	a5,a5,a4
20404ed6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404ed8:	fe842783          	lw	a5,-24(s0)
20404edc:	07a1                	addi	a5,a5,8
20404ede:	4398                	lw	a4,0(a5)
20404ee0:	fe842783          	lw	a5,-24(s0)
20404ee4:	07a1                	addi	a5,a5,8
20404ee6:	86be                	mv	a3,a5
20404ee8:	67c1                	lui	a5,0x10
20404eea:	8fd9                	or	a5,a5,a4
20404eec:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404eee:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404ef0:	fe842783          	lw	a5,-24(s0)
20404ef4:	07d1                	addi	a5,a5,20
20404ef6:	439c                	lw	a5,0(a5)
20404ef8:	8b85                	andi	a5,a5,1
20404efa:	dbfd                	beqz	a5,20404ef0 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404efc:	fe842783          	lw	a5,-24(s0)
20404f00:	07a1                	addi	a5,a5,8
20404f02:	439c                	lw	a5,0(a5)
20404f04:	8b89                	andi	a5,a5,2
20404f06:	c399                	beqz	a5,20404f0c <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404f08:	47a5                	li	a5,9
20404f0a:	a011                	j	20404f0e <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404f0c:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404f0e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404f12:	fe442783          	lw	a5,-28(s0)
20404f16:	439c                	lw	a5,0(a5)
20404f18:	439c                	lw	a5,0(a5)
20404f1a:	fe442503          	lw	a0,-28(s0)
20404f1e:	9782                	jalr	a5
20404f20:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404f24:	fe042703          	lw	a4,-32(s0)
20404f28:	fdc42783          	lw	a5,-36(s0)
20404f2c:	02f707b3          	mul	a5,a4,a5
20404f30:	873e                	mv	a4,a5
20404f32:	fec42783          	lw	a5,-20(s0)
20404f36:	43dc                	lw	a5,4(a5)
20404f38:	02f757b3          	divu	a5,a4,a5
20404f3c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404f40:	fc042a23          	sw	zero,-44(s0)
20404f44:	a039                	j	20404f52 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404f46:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404f48:	fd442783          	lw	a5,-44(s0)
20404f4c:	0785                	addi	a5,a5,1
20404f4e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404f52:	fd442783          	lw	a5,-44(s0)
20404f56:	fd842703          	lw	a4,-40(s0)
20404f5a:	fee7c6e3          	blt	a5,a4,20404f46 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404f5e:	0001                	nop
20404f60:	50f2                	lw	ra,60(sp)
20404f62:	5462                	lw	s0,56(sp)
20404f64:	6121                	addi	sp,sp,64
20404f66:	8082                	ret

20404f68 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404f68:	7179                	addi	sp,sp,-48
20404f6a:	d606                	sw	ra,44(sp)
20404f6c:	d422                	sw	s0,40(sp)
20404f6e:	1800                	addi	s0,sp,48
20404f70:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404f74:	fdc42783          	lw	a5,-36(s0)
20404f78:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404f7c:	fec42703          	lw	a4,-20(s0)
20404f80:	fec42783          	lw	a5,-20(s0)
20404f84:	43dc                	lw	a5,4(a5)
20404f86:	85be                	mv	a1,a5
20404f88:	853a                	mv	a0,a4
20404f8a:	de7fc0ef          	jal	ra,20401d70 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404f8e:	0001                	nop
20404f90:	50b2                	lw	ra,44(sp)
20404f92:	5422                	lw	s0,40(sp)
20404f94:	6145                	addi	sp,sp,48
20404f96:	8082                	ret

20404f98 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404f98:	7139                	addi	sp,sp,-64
20404f9a:	de06                	sw	ra,60(sp)
20404f9c:	dc22                	sw	s0,56(sp)
20404f9e:	0080                	addi	s0,sp,64
20404fa0:	fca42623          	sw	a0,-52(s0)
20404fa4:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404fa8:	fcc42783          	lw	a5,-52(s0)
20404fac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404fb0:	fcc42503          	lw	a0,-52(s0)
20404fb4:	c71ff0ef          	jal	ra,20404c24 <__metal_driver_sifive_uart0_clock>
20404fb8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404fbc:	fcc42503          	lw	a0,-52(s0)
20404fc0:	c93ff0ef          	jal	ra,20404c52 <__metal_driver_sifive_uart0_pinmux>
20404fc4:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404fc8:	fe842783          	lw	a5,-24(s0)
20404fcc:	c7b9                	beqz	a5,2040501a <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404fce:	fec42783          	lw	a5,-20(s0)
20404fd2:	20405737          	lui	a4,0x20405
20404fd6:	e9070713          	addi	a4,a4,-368 # 20404e90 <pre_rate_change_callback_func>
20404fda:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404fdc:	fec42783          	lw	a5,-20(s0)
20404fe0:	fcc42703          	lw	a4,-52(s0)
20404fe4:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404fe6:	fec42783          	lw	a5,-20(s0)
20404fea:	07a1                	addi	a5,a5,8
20404fec:	85be                	mv	a1,a5
20404fee:	fe842503          	lw	a0,-24(s0)
20404ff2:	20f1                	jal	204050be <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404ff4:	fec42783          	lw	a5,-20(s0)
20404ff8:	20405737          	lui	a4,0x20405
20404ffc:	f6870713          	addi	a4,a4,-152 # 20404f68 <post_rate_change_callback_func>
20405000:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405002:	fec42783          	lw	a5,-20(s0)
20405006:	fcc42703          	lw	a4,-52(s0)
2040500a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
2040500c:	fec42783          	lw	a5,-20(s0)
20405010:	07d1                	addi	a5,a5,20
20405012:	85be                	mv	a1,a5
20405014:	fe842503          	lw	a0,-24(s0)
20405018:	28d9                	jal	204050ee <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
2040501a:	fec42783          	lw	a5,-20(s0)
2040501e:	fc842583          	lw	a1,-56(s0)
20405022:	853e                	mv	a0,a5
20405024:	d4dfc0ef          	jal	ra,20401d70 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20405028:	fe442783          	lw	a5,-28(s0)
2040502c:	cb95                	beqz	a5,20405060 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
2040502e:	fcc42503          	lw	a0,-52(s0)
20405032:	c4bff0ef          	jal	ra,20404c7c <__metal_driver_sifive_uart0_pinmux_output_selector>
20405036:	87aa                	mv	a5,a0
20405038:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
2040503c:	fcc42503          	lw	a0,-52(s0)
20405040:	c67ff0ef          	jal	ra,20404ca6 <__metal_driver_sifive_uart0_pinmux_source_selector>
20405044:	87aa                	mv	a5,a0
20405046:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
2040504a:	fe442783          	lw	a5,-28(s0)
2040504e:	439c                	lw	a5,0(a5)
20405050:	53dc                	lw	a5,36(a5)
20405052:	fdc42603          	lw	a2,-36(s0)
20405056:	fe042583          	lw	a1,-32(s0)
2040505a:	fe442503          	lw	a0,-28(s0)
2040505e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405060:	0001                	nop
20405062:	50f2                	lw	ra,60(sp)
20405064:	5462                	lw	s0,56(sp)
20405066:	6121                	addi	sp,sp,64
20405068:	8082                	ret

2040506a <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040506a:	7179                	addi	sp,sp,-48
2040506c:	d622                	sw	s0,44(sp)
2040506e:	1800                	addi	s0,sp,48
20405070:	fca42e23          	sw	a0,-36(s0)
20405074:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20405078:	fd842783          	lw	a5,-40(s0)
2040507c:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20405080:	fdc42783          	lw	a5,-36(s0)
20405084:	e781                	bnez	a5,2040508c <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20405086:	fd842783          	lw	a5,-40(s0)
2040508a:	a035                	j	204050b6 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
2040508c:	fdc42783          	lw	a5,-36(s0)
20405090:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20405094:	a031                	j	204050a0 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20405096:	fec42783          	lw	a5,-20(s0)
2040509a:	479c                	lw	a5,8(a5)
2040509c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
204050a0:	fec42783          	lw	a5,-20(s0)
204050a4:	479c                	lw	a5,8(a5)
204050a6:	fbe5                	bnez	a5,20405096 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
204050a8:	fec42783          	lw	a5,-20(s0)
204050ac:	fd842703          	lw	a4,-40(s0)
204050b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
204050b2:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
204050b6:	853e                	mv	a0,a5
204050b8:	5432                	lw	s0,44(sp)
204050ba:	6145                	addi	sp,sp,48
204050bc:	8082                	ret

204050be <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204050be:	1101                	addi	sp,sp,-32
204050c0:	ce06                	sw	ra,28(sp)
204050c2:	cc22                	sw	s0,24(sp)
204050c4:	1000                	addi	s0,sp,32
204050c6:	fea42623          	sw	a0,-20(s0)
204050ca:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
204050ce:	fec42783          	lw	a5,-20(s0)
204050d2:	43dc                	lw	a5,4(a5)
204050d4:	fe842583          	lw	a1,-24(s0)
204050d8:	853e                	mv	a0,a5
204050da:	3f41                	jal	2040506a <_metal_clock_append_to_callbacks>
204050dc:	872a                	mv	a4,a0
204050de:	fec42783          	lw	a5,-20(s0)
204050e2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
204050e4:	0001                	nop
204050e6:	40f2                	lw	ra,28(sp)
204050e8:	4462                	lw	s0,24(sp)
204050ea:	6105                	addi	sp,sp,32
204050ec:	8082                	ret

204050ee <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204050ee:	1101                	addi	sp,sp,-32
204050f0:	ce06                	sw	ra,28(sp)
204050f2:	cc22                	sw	s0,24(sp)
204050f4:	1000                	addi	s0,sp,32
204050f6:	fea42623          	sw	a0,-20(s0)
204050fa:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
204050fe:	fec42783          	lw	a5,-20(s0)
20405102:	479c                	lw	a5,8(a5)
20405104:	fe842583          	lw	a1,-24(s0)
20405108:	853e                	mv	a0,a5
2040510a:	3785                	jal	2040506a <_metal_clock_append_to_callbacks>
2040510c:	872a                	mv	a4,a0
2040510e:	fec42783          	lw	a5,-20(s0)
20405112:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405114:	0001                	nop
20405116:	40f2                	lw	ra,28(sp)
20405118:	4462                	lw	s0,24(sp)
2040511a:	6105                	addi	sp,sp,32
2040511c:	8082                	ret

2040511e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
2040511e:	1101                	addi	sp,sp,-32
20405120:	ce06                	sw	ra,28(sp)
20405122:	cc22                	sw	s0,24(sp)
20405124:	1000                	addi	s0,sp,32
20405126:	fea42623          	sw	a0,-20(s0)
2040512a:	fec42783          	lw	a5,-20(s0)
2040512e:	439c                	lw	a5,0(a5)
20405130:	57dc                	lw	a5,44(a5)
20405132:	fec42503          	lw	a0,-20(s0)
20405136:	9782                	jalr	a5
20405138:	87aa                	mv	a5,a0
2040513a:	853e                	mv	a0,a5
2040513c:	40f2                	lw	ra,28(sp)
2040513e:	4462                	lw	s0,24(sp)
20405140:	6105                	addi	sp,sp,32
20405142:	8082                	ret

20405144 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405144:	1101                	addi	sp,sp,-32
20405146:	ce22                	sw	s0,28(sp)
20405148:	1000                	addi	s0,sp,32
2040514a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
2040514e:	fec42783          	lw	a5,-20(s0)
20405152:	eb89                	bnez	a5,20405164 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405154:	fec42703          	lw	a4,-20(s0)
20405158:	070a                	slli	a4,a4,0x2
2040515a:	80c18793          	addi	a5,gp,-2036 # 80000754 <__metal_cpu_table>
2040515e:	97ba                	add	a5,a5,a4
20405160:	439c                	lw	a5,0(a5)
20405162:	a011                	j	20405166 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405164:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405166:	853e                	mv	a0,a5
20405168:	4472                	lw	s0,28(sp)
2040516a:	6105                	addi	sp,sp,32
2040516c:	8082                	ret

2040516e <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
2040516e:	1101                	addi	sp,sp,-32
20405170:	ce22                	sw	s0,28(sp)
20405172:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405174:	f14027f3          	csrr	a5,mhartid
20405178:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040517c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405180:	853e                	mv	a0,a5
20405182:	4472                	lw	s0,28(sp)
20405184:	6105                	addi	sp,sp,32
20405186:	8082                	ret

20405188 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405188:	1101                	addi	sp,sp,-32
2040518a:	ce22                	sw	s0,28(sp)
2040518c:	1000                	addi	s0,sp,32
2040518e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405192:	0001                	nop
20405194:	bffd                	j	20405192 <metal_shutdown+0xa>
	...

20405200 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405200:	cc8fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405204 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405204:	cc4fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405208 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405208:	cc0fd06f          	j	204026c8 <metal_interrupt_vector_handler>

2040520c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040520c:	ceafd06f          	j	204026f6 <metal_software_interrupt_vector_handler>

20405210 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405210:	cb8fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405214 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405214:	cb4fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405218 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405218:	cb0fd06f          	j	204026c8 <metal_interrupt_vector_handler>

2040521c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040521c:	dccfd06f          	j	204027e8 <metal_timer_interrupt_vector_handler>

20405220 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405220:	ca8fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405224 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405224:	ca4fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405228 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405228:	ca0fd06f          	j	204026c8 <metal_interrupt_vector_handler>

2040522c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040522c:	c9cfd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405230 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405230:	c98fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405234 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405234:	c94fd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405238 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405238:	c90fd06f          	j	204026c8 <metal_interrupt_vector_handler>

2040523c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040523c:	c8cfd06f          	j	204026c8 <metal_interrupt_vector_handler>

20405240 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405240:	835fd06f          	j	20402a74 <metal_lc0_interrupt_vector_handler>

20405244 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405244:	8c3fd06f          	j	20402b06 <metal_lc1_interrupt_vector_handler>

20405248 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405248:	951fd06f          	j	20402b98 <metal_lc2_interrupt_vector_handler>

2040524c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040524c:	9dffd06f          	j	20402c2a <metal_lc3_interrupt_vector_handler>

20405250 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405250:	a6dfd06f          	j	20402cbc <metal_lc4_interrupt_vector_handler>

20405254 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405254:	afbfd06f          	j	20402d4e <metal_lc5_interrupt_vector_handler>

20405258 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405258:	b89fd06f          	j	20402de0 <metal_lc6_interrupt_vector_handler>

2040525c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040525c:	c17fd06f          	j	20402e72 <metal_lc7_interrupt_vector_handler>

20405260 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405260:	ca5fd06f          	j	20402f04 <metal_lc8_interrupt_vector_handler>

20405264 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405264:	d33fd06f          	j	20402f96 <metal_lc9_interrupt_vector_handler>

20405268 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405268:	dc1fd06f          	j	20403028 <metal_lc10_interrupt_vector_handler>

2040526c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040526c:	e4ffd06f          	j	204030ba <metal_lc11_interrupt_vector_handler>

20405270 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405270:	eddfd06f          	j	2040314c <metal_lc12_interrupt_vector_handler>

20405274 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405274:	f6bfd06f          	j	204031de <metal_lc13_interrupt_vector_handler>

20405278 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405278:	ff9fd06f          	j	20403270 <metal_lc14_interrupt_vector_handler>

2040527c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040527c:	886fe06f          	j	20403302 <metal_lc15_interrupt_vector_handler>

20405280 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405280:	1101                	addi	sp,sp,-32
20405282:	ce22                	sw	s0,28(sp)
20405284:	1000                	addi	s0,sp,32
20405286:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040528a:	fec42703          	lw	a4,-20(s0)
2040528e:	800007b7          	lui	a5,0x80000
20405292:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffe7a4>
20405296:	00f71763          	bne	a4,a5,204052a4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040529a:	03dfd7b7          	lui	a5,0x3dfd
2040529e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
204052a2:	a011                	j	204052a6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
204052a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
204052a6:	853e                	mv	a0,a5
204052a8:	4472                	lw	s0,28(sp)
204052aa:	6105                	addi	sp,sp,32
204052ac:	8082                	ret

204052ae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204052ae:	1101                	addi	sp,sp,-32
204052b0:	ce06                	sw	ra,28(sp)
204052b2:	cc22                	sw	s0,24(sp)
204052b4:	1000                	addi	s0,sp,32
204052b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
204052ba:	fec42503          	lw	a0,-20(s0)
204052be:	37c9                	jal	20405280 <__metal_driver_fixed_clock_rate>
204052c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
204052c2:	853e                	mv	a0,a5
204052c4:	40f2                	lw	ra,28(sp)
204052c6:	4462                	lw	s0,24(sp)
204052c8:	6105                	addi	sp,sp,32
204052ca:	8082                	ret

204052cc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204052cc:	1101                	addi	sp,sp,-32
204052ce:	ce06                	sw	ra,28(sp)
204052d0:	cc22                	sw	s0,24(sp)
204052d2:	1000                	addi	s0,sp,32
204052d4:	fea42623          	sw	a0,-20(s0)
204052d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204052dc:	fec42503          	lw	a0,-20(s0)
204052e0:	37f9                	jal	204052ae <__metal_driver_fixed_clock_get_rate_hz>
204052e2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
204052e4:	853e                	mv	a0,a5
204052e6:	40f2                	lw	ra,28(sp)
204052e8:	4462                	lw	s0,24(sp)
204052ea:	6105                	addi	sp,sp,32
204052ec:	8082                	ret

204052ee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204052ee:	1101                	addi	sp,sp,-32
204052f0:	ce06                	sw	ra,28(sp)
204052f2:	cc22                	sw	s0,24(sp)
204052f4:	1000                	addi	s0,sp,32
204052f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204052fa:	fec42503          	lw	a0,-20(s0)
204052fe:	3569                	jal	20405188 <metal_shutdown>
