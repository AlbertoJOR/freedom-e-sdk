
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000570c memsz 0x0000570c flags rwx
    LOAD off    0x00006730 vaddr 0x80001730 paddr 0x80001730 align 2**12
         filesz 0x00000000 memsz 0x000014a4 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405710 align 2**12
         filesz 0x00001730 memsz 0x00001730 flags rw-
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00008730 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00004f80  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000588  20405180  20405180  00006180  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405708  20405708  00006708  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             00001730  80000000  20405710  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000008a4  80001730  80001730  00006730  2**3  ALLOC
  6 .stack            00000400  80001fd4  80001fd4  00006730  2**0  ALLOC
  7 .heap             00000800  800023d4  800023d4  00006730  2**0  ALLOC
  8 .debug_info       000146f9  00000000  00000000  00008730  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     00002729  00000000  00000000  0001ce29  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    000008c0  00000000  00000000  0001f558  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000758  00000000  00000000  0001fe18  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007a19  00000000  00000000  00020570  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00003786  00000000  00000000  00027f89  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002b70f  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002b737  2**0  CONTENTS, READONLY
 16 .debug_frame      00002450  00000000  00000000  0002b764  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405180 l    d  .rodata	00000000 .rodata
20405708 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
80001730 l    d  .bss	00000000 .bss
80001fd4 l    d  .stack	00000000 .stack
800023d4 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
204053b8 l       .rodata	00000000 argv
204053bc l       .rodata	00000000 envp
204053c0 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 E300RW.c
80000000 l     O .data	000007d0 asso_text.2678
800007d0 l     O .data	000007d0 plain_text.2677
8000173c l     O .bss	000007e0 cipher_text.2679
80000fa0 l     O .data	00000010 Key.2683
80000fb0 l     O .data	00000010 Nonce.2680
80001f1c l     O .bss	00000028 hash.2682
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400934 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20400e84 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80001710 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80001f44 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401b5a l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401c04 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401c2a l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401c4e l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401c8a l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20401dea l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
2040231c l     F .text	00000024 __metal_driver_cpu_hartid
20402340 l     F .text	0000002a __metal_driver_cpu_timebase
2040236a l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403b90 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403bba l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403be2 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403c0a l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403c32 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404172 l     F .text	00000026 __metal_driver_sifive_gpio0_base
20404198 l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
204041c2 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404a24 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404a4e l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404a7c l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404aa4 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404ad2 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404afc l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404b26 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20404d10 l     F .text	000000d8 pre_rate_change_callback_func
20404de8 l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405080 l       .text	00000000 IRQ_0
20405084 l       .text	00000000 IRQ_1
20405088 l       .text	00000000 IRQ_2
2040508c l       .text	00000000 IRQ_3
20405090 l       .text	00000000 IRQ_4
20405094 l       .text	00000000 IRQ_5
20405098 l       .text	00000000 IRQ_6
2040509c l       .text	00000000 IRQ_7
204050a0 l       .text	00000000 IRQ_8
204050a4 l       .text	00000000 IRQ_9
204050a8 l       .text	00000000 IRQ_10
204050ac l       .text	00000000 IRQ_11
204050b0 l       .text	00000000 IRQ_12
204050b4 l       .text	00000000 IRQ_13
204050b8 l       .text	00000000 IRQ_14
204050bc l       .text	00000000 IRQ_15
204050c0 l       .text	00000000 IRQ_LC0
204050c4 l       .text	00000000 IRQ_LC1
204050c8 l       .text	00000000 IRQ_LC2
204050cc l       .text	00000000 IRQ_LC3
204050d0 l       .text	00000000 IRQ_LC4
204050d4 l       .text	00000000 IRQ_LC5
204050d8 l       .text	00000000 IRQ_LC6
204050dc l       .text	00000000 IRQ_LC7
204050e0 l       .text	00000000 IRQ_LC8
204050e4 l       .text	00000000 IRQ_LC9
204050e8 l       .text	00000000 IRQ_LC10
204050ec l       .text	00000000 IRQ_LC11
204050f0 l       .text	00000000 IRQ_LC12
204050f4 l       .text	00000000 IRQ_LC13
204050f8 l       .text	00000000 IRQ_LC14
204050fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405100 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000fc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
2040570c l       .init_array	00000000 __fini_array_end
2040570c l       .init_array	00000000 __fini_array_start
2040570c l       .init_array	00000000 __init_array_end
20405708 l       .init_array	00000000 __preinit_array_end
20405708 l       .init_array	00000000 __init_array_start
20405708 l       .init_array	00000000 __preinit_array_start
20400420 g     F .text	0000002c putchar
204056e8 g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
204012e8 g     F .text	00000028 _isatty_r
20402b3c  w    F .text	00000092 metal_lc4_interrupt_vector_handler
204004ce g     F .text	000000da _puts_r
20401310 g     F .text	0000002c _lseek_r
20404c74 g     F .text	0000009c __metal_driver_sifive_uart0_set_baud_rate
20401fc6 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402aaa  w    F .text	00000092 metal_lc3_interrupt_vector_handler
204032fc g     F .text	00000038 __metal_valid_interrupt_id
204003dc g     F .text	00000044 printf
2040371e g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80001f08 g       .data	00000000 __global_pointer$
20404eea g     F .text	00000054 _metal_clock_append_to_callbacks
20403c82 g     F .text	00000038 __metal_plic0_complete_interrupt
2040357c g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
2040122e g     F .text	00000036 __sseek
204009ea g     F .text	0000006a __sinit
204005b6 g     F .text	000000c0 __swbuf_r
204009a6 g     F .text	00000044 __sfmoreglue
20401358 g     F .text	00000002 __malloc_unlock
20404fc4 g     F .text	0000002a metal_cpu_get
800016e8 g     O .data	00000020 __metal_dt_serial_10013000
204045fe g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
204053cc g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
80001fd4 g       .bss	00000000 metal_segment_bss_target_end
20401cba g     F .text	0000009a __metal_clint0_mtime_get
20403b24 g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
204043b4 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
204018e2 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404b90 g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
80001730 g       .bss	00000000 metal_segment_bss_target_start
20401d54 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
204012be g     F .text	0000002a _fstat_r
2040484e g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
80001fd0 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
20404f3e g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20402e16  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405620 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
204055e0 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401bd6 g     F .text	0000002e metal_uart_set_baud_rate
20404e18 g     F .text	000000d2 __metal_driver_sifive_uart0_init
204037b2 g     F .text	00000072 __metal_driver_cpu_mcycle_get
800023d4 g       .heap	00000000 metal_segment_heap_target_start
2040099c g     F .text	0000000a _cleanup_r
80001720 g     O .data	00000004 __metal_dt_cpu_0
20402d84  w    F .text	00000092 metal_lc8_interrupt_vector_handler
204005a8 g     F .text	0000000e puts
2040305e  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204024fe g     F .text	00000018 __metal_default_exception_handler
20401756 g     F .text	00000026 _fstat
204022e8 g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403d1e g     F .text	00000062 __metal_plic0_set_priority
2040373a g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402394 g     F .text	0000002c __metal_driver_cpu_get
20405594 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
204023f2 g     F .text	00000018 __metal_interrupt_global_disable
20402cf2  w    F .text	00000092 metal_lc7_interrupt_vector_handler
20402ea8  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401188 g     F .text	00000028 _sbrk_r
2040412a g     F .text	00000048 __metal_driver_riscv_plic0_disable
204033f0 g     F .text	0000004e __metal_exception_register
20401708 g     F .text	0000002c _read_r
20403946 g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404490 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
204025ea g     F .text	00000064 __metal_default_sw_handler
20404f6e g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404b50 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
2040177c g     F .text	00000020 _isatty
20404556 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
80001728 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000170c g     O .data	00000004 _global_impure_ptr
2040264e  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401952 g     F .text	0000006a __libc_init_array
204044d0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
20402f3a  w    F .text	00000092 metal_lc11_interrupt_vector_handler
204036ca g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
204017f0 g     F .text	0000007a _sbrk
2040444a g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
20402454 g     F .text	0000001a __metal_interrupt_timer_disable
20404648 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
204039fc g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204056ac g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404596 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
2040191a g     F .text	00000038 __libc_fini_array
204049d6 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403986 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
204024a6 g     F .text	0000002c __metal_interrupt_local_enable
204022b4 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401b08 g     F .text	0000002c metal_tty_putc
20403e40 g     F .text	00000018 __metal_plic0_default_handler
2040044c g     F .text	00000082 _putc_r
80001020 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
2040531c g     O .rodata	00000020 __sf_fake_stderr
2040248a g     F .text	0000001c __metal_interrupt_external_disable
20404b6e g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403796 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
2040343e g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20400eae g     F .text	00000042 __sfputs_r
20403ade g     F .text	00000046 __metal_driver_cpu_exception_register
2040240a g     F .text	00000018 __metal_interrupt_software_enable
20402986  w    F .text	00000092 metal_lc1_interrupt_vector_handler
2040133c g     F .text	0000001a memchr
20400cfa g     F .text	000000ac _free_r
80001738 g     O .bss	00000004 _global_atexit
20403214 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401a40 g     F .text	000000c8 __call_exitprocs
800023d4 g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
2040179c g     F .text	0000002a _lseek
20403abe g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403b52 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
2040246e g     F .text	0000001c __metal_interrupt_external_enable
204019bc g     F .text	00000084 __register_exitproc
20404bc2 g     F .text	0000003e __metal_driver_sifive_uart0_putc
20403ee6 g     F .text	0000013c __metal_driver_riscv_plic0_init
204040e2 g     F .text	00000048 __metal_driver_riscv_plic0_enable
20404420 g     F .text	0000002a __metal_driver_sifive_gpio0_output
20400200 g     F .text	000000b0 printC
20402c60  w    F .text	00000092 metal_lc6_interrupt_vector_handler
204023c0 g     F .text	0000001a __metal_myhart_id
204049f6 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
2040255c  w    F .text	0000008e metal_software_interrupt_vector_handler
204036f4 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20401296 g     F .text	00000028 _close_r
20404c54 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20401ea8 g     F .text	000000da __metal_driver_riscv_clint0_register
80001718 g     O .data	00000008 __metal_dt_clint_2000000
20400676 g     F .text	00000110 __swsetup_r
20400a54 g     F .text	0000009e __sfp
204011b0 g     F .text	00000030 __sread
20404376 g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
2040252e  w    F .text	0000002e metal_interrupt_vector_handler
20401356 g     F .text	00000002 __malloc_lock
204008d0 g     F .text	00000064 _fflush_r
20403cf2 g     F .text	0000002c __metal_plic0_get_threshold
2040533c g     O .rodata	00000020 __sf_fake_stdin
20403334 g     F .text	000000bc __metal_local_interrupt_enable
2040217e g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400c52 g     F .text	000000a8 memset
20402bce  w    F .text	00000092 metal_lc5_interrupt_vector_handler
204002b0 g     F .text	0000012c main
80001730 g       .data	00000000 metal_segment_data_target_end
2040399a g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403a5e g     F .text	00000060 __metal_driver_cpu_get_msip
20405008 g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403b70 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403c54 g     F .text	0000002e __metal_plic0_claim_interrupt
20401264 g     F .text	00000006 __sclose
20402fcc  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20400da6 g     F .text	000000de _malloc_r
20401faa g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403824 g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20404fee g     F .text	0000001a metal_cpu_get_current_hartid
20405080 g       .text	00000000 __metal_vector_table
20405710 g       *ABS*	00000000 metal_segment_itim_source_start
80001714  w    O .data	00000004 __metal_cpu_table
80001030 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
204003dc g     F .text	00000044 iprintf
204023da g     F .text	00000018 __metal_interrupt_global_enable
204018d8 g     F .text	0000000a atexit
20401b34 g     F .text	00000026 metal_tty_putc_raw
2040126a g     F .text	0000002c _write_r
2040243a g     F .text	0000001a __metal_interrupt_timer_enable
20404c00 g     F .text	00000054 __metal_driver_sifive_uart0_getc
204020cc g     F .text	000000b2 __metal_driver_riscv_clint0_disable
2040135a g     F .text	0000010c _printf_common
80001708 g     O .data	00000004 _impure_ptr
204038d0 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400786 g     F .text	0000014a __sflush_r
2040512e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
2040201a g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405710 g       *ABS*	00000000 metal_segment_data_source_start
80002bd4 g       .heap	00000000 metal_segment_heap_target_end
20403264 g     F .text	00000098 __metal_controller_interrupt_vector
800013e8 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400b5e g     F .text	00000058 __swhatbuf_r
20404510 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
204026dc g     F .text	00000066 __metal_default_timer_handler
2040186a g     F .text	0000006e _write
20403e58 g     F .text	0000008e __metal_plic0_handler
20402a18  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403182  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20404f9e g     F .text	00000026 metal_cpu_interrupt_controller
204011e0 g     F .text	0000004e __swrite
204018ee g     F .text	0000002c exit
20400ef0 g     F .text	00000298 _vfiprintf_r
20400af2 g     F .text	0000006c _fwalk_reent
2040514c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
2040535c g     O .rodata	00000020 __sf_fake_stdout
80001724 g     O .data	00000004 __metal_dt_gpio_10012000
20402516 g     F .text	00000018 __metal_default_interrupt_handler
20401ba8 g     F .text	0000002e metal_uart_putc
204017c6 g     F .text	0000002a _read
204043f8 g     F .text	00000028 __metal_driver_sifive_gpio0_input
20402780 g     F .text	0000014e __metal_exception_handler
204028f4  w    F .text	00000092 metal_lc0_interrupt_vector_handler
2040516e g     F .text	00000012 _exit
2040386a g     F .text	00000066 __metal_driver_cpu_mtime_get
20400bb6 g     F .text	0000009c __smakebuf_r
20401f82 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401466 g     F .text	000002a2 _printf_i
80001734 g     O .bss	00000004 __malloc_sbrk_start
204030f0  w    F .text	00000092 metal_lc14_interrupt_vector_handler
20401e20 g     F .text	00000088 __metal_driver_riscv_clint0_init
80001730 g     O .bss	00000004 __malloc_free_list
20400ef0 g     F .text	00000298 _vfprintf_r
2040395c g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20403db4 g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403970 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
204024d2 g     F .text	0000002c __metal_interrupt_local_disable
20402422 g     F .text	00000018 __metal_interrupt_software_disable
20403d80 g     F .text	00000034 __metal_plic0_get_priority
20401b7c g     F .text	0000002c metal_uart_init
20403cba g     F .text	00000038 __metal_plic0_set_threshold
20401734 g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404022 g     F .text	000000c0 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc02197          	auipc	gp,0x5fc02
20400004:	f0818193          	addi	gp,gp,-248 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc02197          	auipc	gp,0x5fc02
20400084:	e8818193          	addi	gp,gp,-376 # 80001f08 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	4cc18113          	addi	sp,gp,1228 # 800023d4 <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00005297          	auipc	t0,0x5
204000ac:	66828293          	addi	t0,t0,1640 # 20405710 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00005297          	auipc	t0,0x5
204000d8:	63c28293          	addi	t0,t0,1596 # 20405710 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc01317          	auipc	t1,0x5fc01
2040010c:	62830313          	addi	t1,t1,1576 # 80001730 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	0cc18393          	addi	t2,gp,204 # 80001fd4 <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00001517          	auipc	a0,0x1
2040012a:	7f450513          	addi	a0,a0,2036 # 2040191a <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	7aa010ef          	jal	ra,204018d8 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	021010ef          	jal	ra,20401952 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	25e58593          	addi	a1,a1,606 # 204053b8 <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	25a60613          	addi	a2,a2,602 # 204053bc <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	782010ef          	jal	ra,204018ee <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2215                	jal	204002b0 <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <printC>:
printC():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:37
             unsigned *d_addr, unsigned *nonce_addr,
             unsigned *key_addr, unsigned *tag_addr);
unsigned HASH(unsigned *m_addr, unsigned m_len,
             unsigned *c_addr );

void printC(unsigned *arr, unsigned a_len, int cipher, int del) {
20400200:	7179                	addi	sp,sp,-48
20400202:	d606                	sw	ra,44(sp)
20400204:	d422                	sw	s0,40(sp)
20400206:	1800                	addi	s0,sp,48
20400208:	fca42e23          	sw	a0,-36(s0)
2040020c:	fcb42c23          	sw	a1,-40(s0)
20400210:	fcc42a23          	sw	a2,-44(s0)
20400214:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38
    int len = (cipher) ? a_len + 4 : a_len;
20400218:	fd442783          	lw	a5,-44(s0)
2040021c:	c789                	beqz	a5,20400226 <printC+0x26>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38 (discriminator 1)
2040021e:	fd842783          	lw	a5,-40(s0)
20400222:	0791                	addi	a5,a5,4
20400224:	a019                	j	2040022a <printC+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38 (discriminator 2)
20400226:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:38 (discriminator 4)
2040022a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 4)
    len = (len % 8 == 0)? len : len + 1;
2040022e:	fe842783          	lw	a5,-24(s0)
20400232:	8b9d                	andi	a5,a5,7
20400234:	c789                	beqz	a5,2040023e <printC+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 1)
20400236:	fe842783          	lw	a5,-24(s0)
2040023a:	0785                	addi	a5,a5,1
2040023c:	a019                	j	20400242 <printC+0x42>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 2)
2040023e:	fe842783          	lw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:39 (discriminator 4)
20400242:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40 (discriminator 4)
    for (int i = 0; i < len; i++) {
20400246:	fe042623          	sw	zero,-20(s0)
2040024a:	a0b1                	j	20400296 <printC+0x96>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:41
        if (i % 2 == 0) {
2040024c:	fec42783          	lw	a5,-20(s0)
20400250:	8b85                	andi	a5,a5,1
20400252:	e399                	bnez	a5,20400258 <printC+0x58>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:42
            printf("\n");
20400254:	4529                	li	a0,10
20400256:	22e9                	jal	20400420 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:44
        }
        printf("%08x ", arr[i], i);
20400258:	fec42783          	lw	a5,-20(s0)
2040025c:	078a                	slli	a5,a5,0x2
2040025e:	fdc42703          	lw	a4,-36(s0)
20400262:	97ba                	add	a5,a5,a4
20400264:	439c                	lw	a5,0(a5)
20400266:	fec42603          	lw	a2,-20(s0)
2040026a:	85be                	mv	a1,a5
2040026c:	204057b7          	lui	a5,0x20405
20400270:	18078513          	addi	a0,a5,384 # 20405180 <_exit+0x12>
20400274:	22a5                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:45
        if (del) {
20400276:	fd042783          	lw	a5,-48(s0)
2040027a:	cb89                	beqz	a5,2040028c <printC+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:46
            arr[i] = 0;
2040027c:	fec42783          	lw	a5,-20(s0)
20400280:	078a                	slli	a5,a5,0x2
20400282:	fdc42703          	lw	a4,-36(s0)
20400286:	97ba                	add	a5,a5,a4
20400288:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40 (discriminator 2)
    for (int i = 0; i < len; i++) {
2040028c:	fec42783          	lw	a5,-20(s0)
20400290:	0785                	addi	a5,a5,1
20400292:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:40 (discriminator 1)
20400296:	fec42703          	lw	a4,-20(s0)
2040029a:	fe842783          	lw	a5,-24(s0)
2040029e:	faf747e3          	blt	a4,a5,2040024c <printC+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:49
        }
    }
    printf("\n");
204002a2:	4529                	li	a0,10
204002a4:	2ab5                	jal	20400420 <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/AEAD_HW.h:50
}
204002a6:	0001                	nop
204002a8:	50b2                	lw	ra,44(sp)
204002aa:	5422                	lw	s0,40(sp)
204002ac:	6145                	addi	sp,sp,48
204002ae:	8082                	ret

204002b0 <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:7
#include "../RoCCcommon/rocc.h"
#include "AEAD_HW.h"

#include <stdio.h>

int main(void) {
204002b0:	1101                	addi	sp,sp,-32
204002b2:	ce06                	sw	ra,28(sp)
204002b4:	cc22                	sw	s0,24(sp)
204002b6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:8
    unsigned plain_len = 32;
204002b8:	02000793          	li	a5,32
204002bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:9
    unsigned asso_len = 32; /// CReo que asignaste a memoria
204002c0:	02000793          	li	a5,32
204002c4:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:10
    unsigned plain_len_int = plain_len / 4;
204002c8:	fec42783          	lw	a5,-20(s0)
204002cc:	8389                	srli	a5,a5,0x2
204002ce:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11
    plain_len_int = (plain_len % 4 == 0) ? plain_len_int : plain_len_int + 1;
204002d2:	fec42783          	lw	a5,-20(s0)
204002d6:	8b8d                	andi	a5,a5,3
204002d8:	c789                	beqz	a5,204002e2 <main+0x32>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 1)
204002da:	fe442783          	lw	a5,-28(s0)
204002de:	0785                	addi	a5,a5,1
204002e0:	a019                	j	204002e6 <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 2)
204002e2:	fe442783          	lw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:11 (discriminator 4)
204002e6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:27 (discriminator 4)

    static unsigned *tag_addr;


    // printf("Init AEAD \n");
    printf("Init Hola2\n");
204002ea:	204057b7          	lui	a5,0x20405
204002ee:	2ac78513          	addi	a0,a5,684 # 204052ac <_exit+0x13e>
204002f2:	2c5d                	jal	204005a8 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:28 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
204002f4:	800007b7          	lui	a5,0x80000
204002f8:	00078593          	mv	a1,a5
204002fc:	204057b7          	lui	a5,0x20405
20400300:	2b878513          	addi	a0,a5,696 # 204052b8 <_exit+0x14a>
20400304:	28e1                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:29 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400306:	800007b7          	lui	a5,0x80000
2040030a:	7d078593          	addi	a1,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
2040030e:	204057b7          	lui	a5,0x20405
20400312:	2c878513          	addi	a0,a5,712 # 204052c8 <_exit+0x15a>
20400316:	20d9                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:30 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400318:	800017b7          	lui	a5,0x80001
2040031c:	73c78593          	addi	a1,a5,1852 # 8000173c <metal_segment_heap_target_end+0xffffeb68>
20400320:	204057b7          	lui	a5,0x20405
20400324:	2d878513          	addi	a0,a5,728 # 204052d8 <_exit+0x16a>
20400328:	2855                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:31 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
2040032a:	800017b7          	lui	a5,0x80001
2040032e:	fa078593          	addi	a1,a5,-96 # 80000fa0 <metal_segment_heap_target_end+0xffffe3cc>
20400332:	204057b7          	lui	a5,0x20405
20400336:	2e878513          	addi	a0,a5,744 # 204052e8 <_exit+0x17a>
2040033a:	204d                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:32 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
2040033c:	800017b7          	lui	a5,0x80001
20400340:	fb078593          	addi	a1,a5,-80 # 80000fb0 <metal_segment_heap_target_end+0xffffe3dc>
20400344:	204057b7          	lui	a5,0x20405
20400348:	2f878513          	addi	a0,a5,760 # 204052f8 <_exit+0x18a>
2040034c:	2841                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:33 (discriminator 4)
    printf("hash addr = %08x\n", hash);
2040034e:	01418593          	addi	a1,gp,20 # 80001f1c <hash.2682>
20400352:	204057b7          	lui	a5,0x20405
20400356:	30878513          	addi	a0,a5,776 # 20405308 <_exit+0x19a>
2040035a:	2049                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:35 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
2040035c:	fe042023          	sw	zero,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:37 (discriminator 4)
    // RoCC
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
20400360:	67e1                	lui	a5,0x18
20400362:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:43 (discriminator 4)
    // start = rdcycle();
    // HASH(plain_text,plain_len,hash);
    // end = rdcycle();
    /*printf("Total time = %d cycles\n",HWcycles);
    printC(hash, 8, 0, 0);*/
 printf("Init Hash\n");
20400366:	204057b7          	lui	a5,0x20405
2040036a:	27878513          	addi	a0,a5,632 # 20405278 <_exit+0x10a>
2040036e:	2c2d                	jal	204005a8 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:44 (discriminator 4)
     asm volatile("fence");
20400370:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:45 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0, rd, plain_text, plain_len, 0x19);
20400374:	800007b7          	lui	a5,0x80000
20400378:	7d078793          	addi	a5,a5,2000 # 800007d0 <metal_segment_heap_target_end+0xffffdbfc>
2040037c:	85be                	mv	a1,a5
2040037e:	fec42603          	lw	a2,-20(s0)
20400382:	32c5f50b          	0x32c5f50b
20400386:	87aa                	mv	a5,a0
20400388:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:46 (discriminator 4)
    asm volatile("fence":: : "memory");
2040038c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:47 (discriminator 4)
    printf("Set M : %08x \n", rd);
20400390:	fe042583          	lw	a1,-32(s0)
20400394:	204057b7          	lui	a5,0x20405
20400398:	28478513          	addi	a0,a5,644 # 20405284 <_exit+0x116>
2040039c:	2081                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:49 (discriminator 4)

    asm volatile("fence");
2040039e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:50 (discriminator 4)
    ROCC_INSTRUCTION_DS(0, rd, hash, 0x1a);
204003a2:	01418793          	addi	a5,gp,20 # 80001f1c <hash.2682>
204003a6:	85be                	mv	a1,a5
204003a8:	3405e50b          	0x3405e50b
204003ac:	87aa                	mv	a5,a0
204003ae:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:51 (discriminator 4)
    asm volatile("fence":: : "memory");
204003b2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:52 (discriminator 4)
    printf(" Finish Hash: %08x \n", rd);
204003b6:	fe042583          	lw	a1,-32(s0)
204003ba:	204057b7          	lui	a5,0x20405
204003be:	29478513          	addi	a0,a5,660 # 20405294 <_exit+0x126>
204003c2:	2829                	jal	204003dc <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
    printC(hash,10,0,0);
204003c4:	4681                	li	a3,0
204003c6:	4601                	li	a2,0
204003c8:	45a9                	li	a1,10
204003ca:	01418513          	addi	a0,gp,20 # 80001f1c <hash.2682>
204003ce:	3d0d                	jal	20400200 <printC>
204003d0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:92 (discriminator 4)

    rd2 = AEAD_DEC(asso_text, asso_len, cipher_text, plain_len, dec_text, Nonce, Key, tag_addr);
    printC(dec_text, plain_len_int, 0, 0);
    printf("\n%08x\n", rd2);*/

204003d2:	853e                	mv	a0,a5
204003d4:	40f2                	lw	ra,28(sp)
204003d6:	4462                	lw	s0,24(sp)
204003d8:	6105                	addi	sp,sp,32
204003da:	8082                	ret

204003dc <iprintf>:
printf():
204003dc:	7139                	addi	sp,sp,-64
204003de:	da3e                	sw	a5,52(sp)
204003e0:	d22e                	sw	a1,36(sp)
204003e2:	d432                	sw	a2,40(sp)
204003e4:	d636                	sw	a3,44(sp)
204003e6:	d83a                	sw	a4,48(sp)
204003e8:	dc42                	sw	a6,56(sp)
204003ea:	de46                	sw	a7,60(sp)
204003ec:	5fc01797          	auipc	a5,0x5fc01
204003f0:	31c78793          	addi	a5,a5,796 # 80001708 <_impure_ptr>
204003f4:	cc22                	sw	s0,24(sp)
204003f6:	4380                	lw	s0,0(a5)
204003f8:	ca26                	sw	s1,20(sp)
204003fa:	ce06                	sw	ra,28(sp)
204003fc:	84aa                	mv	s1,a0
204003fe:	c409                	beqz	s0,20400408 <iprintf+0x2c>
20400400:	4c1c                	lw	a5,24(s0)
20400402:	e399                	bnez	a5,20400408 <iprintf+0x2c>
20400404:	8522                	mv	a0,s0
20400406:	23d5                	jal	204009ea <__sinit>
20400408:	440c                	lw	a1,8(s0)
2040040a:	1054                	addi	a3,sp,36
2040040c:	8626                	mv	a2,s1
2040040e:	8522                	mv	a0,s0
20400410:	c636                	sw	a3,12(sp)
20400412:	2df000ef          	jal	ra,20400ef0 <_vfiprintf_r>
20400416:	40f2                	lw	ra,28(sp)
20400418:	4462                	lw	s0,24(sp)
2040041a:	44d2                	lw	s1,20(sp)
2040041c:	6121                	addi	sp,sp,64
2040041e:	8082                	ret

20400420 <putchar>:
putchar():
20400420:	1101                	addi	sp,sp,-32
20400422:	5fc01797          	auipc	a5,0x5fc01
20400426:	2e678793          	addi	a5,a5,742 # 80001708 <_impure_ptr>
2040042a:	cc22                	sw	s0,24(sp)
2040042c:	4380                	lw	s0,0(a5)
2040042e:	ce06                	sw	ra,28(sp)
20400430:	85aa                	mv	a1,a0
20400432:	c419                	beqz	s0,20400440 <putchar+0x20>
20400434:	4c1c                	lw	a5,24(s0)
20400436:	e789                	bnez	a5,20400440 <putchar+0x20>
20400438:	c62a                	sw	a0,12(sp)
2040043a:	8522                	mv	a0,s0
2040043c:	237d                	jal	204009ea <__sinit>
2040043e:	45b2                	lw	a1,12(sp)
20400440:	4410                	lw	a2,8(s0)
20400442:	8522                	mv	a0,s0
20400444:	4462                	lw	s0,24(sp)
20400446:	40f2                	lw	ra,28(sp)
20400448:	6105                	addi	sp,sp,32
2040044a:	a009                	j	2040044c <_putc_r>

2040044c <_putc_r>:
_putc_r():
2040044c:	1101                	addi	sp,sp,-32
2040044e:	cc22                	sw	s0,24(sp)
20400450:	ce06                	sw	ra,28(sp)
20400452:	842a                	mv	s0,a0
20400454:	c901                	beqz	a0,20400464 <_putc_r+0x18>
20400456:	4d1c                	lw	a5,24(a0)
20400458:	e791                	bnez	a5,20400464 <_putc_r+0x18>
2040045a:	c632                	sw	a2,12(sp)
2040045c:	c42e                	sw	a1,8(sp)
2040045e:	2371                	jal	204009ea <__sinit>
20400460:	4632                	lw	a2,12(sp)
20400462:	45a2                	lw	a1,8(sp)
20400464:	00005797          	auipc	a5,0x5
20400468:	ed878793          	addi	a5,a5,-296 # 2040533c <__sf_fake_stdin>
2040046c:	02f61563          	bne	a2,a5,20400496 <_putc_r+0x4a>
20400470:	4050                	lw	a2,4(s0)
20400472:	461c                	lw	a5,8(a2)
20400474:	17fd                	addi	a5,a5,-1
20400476:	c61c                	sw	a5,8(a2)
20400478:	0207df63          	bgez	a5,204004b6 <_putc_r+0x6a>
2040047c:	4e18                	lw	a4,24(a2)
2040047e:	00e7c763          	blt	a5,a4,2040048c <_putc_r+0x40>
20400482:	0ff5f793          	andi	a5,a1,255
20400486:	4729                	li	a4,10
20400488:	02e79763          	bne	a5,a4,204004b6 <_putc_r+0x6a>
2040048c:	8522                	mv	a0,s0
2040048e:	4462                	lw	s0,24(sp)
20400490:	40f2                	lw	ra,28(sp)
20400492:	6105                	addi	sp,sp,32
20400494:	a20d                	j	204005b6 <__swbuf_r>
20400496:	00005797          	auipc	a5,0x5
2040049a:	ec678793          	addi	a5,a5,-314 # 2040535c <__sf_fake_stdout>
2040049e:	00f61463          	bne	a2,a5,204004a6 <_putc_r+0x5a>
204004a2:	4410                	lw	a2,8(s0)
204004a4:	b7f9                	j	20400472 <_putc_r+0x26>
204004a6:	00005797          	auipc	a5,0x5
204004aa:	e7678793          	addi	a5,a5,-394 # 2040531c <__sf_fake_stderr>
204004ae:	fcf612e3          	bne	a2,a5,20400472 <_putc_r+0x26>
204004b2:	4450                	lw	a2,12(s0)
204004b4:	bf7d                	j	20400472 <_putc_r+0x26>
204004b6:	421c                	lw	a5,0(a2)
204004b8:	0ff5f513          	andi	a0,a1,255
204004bc:	00178713          	addi	a4,a5,1
204004c0:	c218                	sw	a4,0(a2)
204004c2:	00b78023          	sb	a1,0(a5)
204004c6:	40f2                	lw	ra,28(sp)
204004c8:	4462                	lw	s0,24(sp)
204004ca:	6105                	addi	sp,sp,32
204004cc:	8082                	ret

204004ce <_puts_r>:
_puts_r():
204004ce:	1101                	addi	sp,sp,-32
204004d0:	ca26                	sw	s1,20(sp)
204004d2:	c84a                	sw	s2,16(sp)
204004d4:	ce06                	sw	ra,28(sp)
204004d6:	cc22                	sw	s0,24(sp)
204004d8:	c64e                	sw	s3,12(sp)
204004da:	c452                	sw	s4,8(sp)
204004dc:	84aa                	mv	s1,a0
204004de:	892e                	mv	s2,a1
204004e0:	c501                	beqz	a0,204004e8 <_puts_r+0x1a>
204004e2:	4d1c                	lw	a5,24(a0)
204004e4:	e391                	bnez	a5,204004e8 <_puts_r+0x1a>
204004e6:	2311                	jal	204009ea <__sinit>
204004e8:	4c9c                	lw	a5,24(s1)
204004ea:	4480                	lw	s0,8(s1)
204004ec:	e399                	bnez	a5,204004f2 <_puts_r+0x24>
204004ee:	8526                	mv	a0,s1
204004f0:	29ed                	jal	204009ea <__sinit>
204004f2:	00005797          	auipc	a5,0x5
204004f6:	e4a78793          	addi	a5,a5,-438 # 2040533c <__sf_fake_stdin>
204004fa:	02f41c63          	bne	s0,a5,20400532 <_puts_r+0x64>
204004fe:	40c0                	lw	s0,4(s1)
20400500:	00c45783          	lhu	a5,12(s0)
20400504:	8ba1                	andi	a5,a5,8
20400506:	c7b1                	beqz	a5,20400552 <_puts_r+0x84>
20400508:	481c                	lw	a5,16(s0)
2040050a:	c7a1                	beqz	a5,20400552 <_puts_r+0x84>
2040050c:	59fd                	li	s3,-1
2040050e:	4a29                	li	s4,10
20400510:	441c                	lw	a5,8(s0)
20400512:	00094583          	lbu	a1,0(s2)
20400516:	17fd                	addi	a5,a5,-1
20400518:	e9b1                	bnez	a1,2040056c <_puts_r+0x9e>
2040051a:	c41c                	sw	a5,8(s0)
2040051c:	0607de63          	bgez	a5,20400598 <_puts_r+0xca>
20400520:	8622                	mv	a2,s0
20400522:	45a9                	li	a1,10
20400524:	8526                	mv	a0,s1
20400526:	2841                	jal	204005b6 <__swbuf_r>
20400528:	57fd                	li	a5,-1
2040052a:	02f50863          	beq	a0,a5,2040055a <_puts_r+0x8c>
2040052e:	4529                	li	a0,10
20400530:	a035                	j	2040055c <_puts_r+0x8e>
20400532:	00005797          	auipc	a5,0x5
20400536:	e2a78793          	addi	a5,a5,-470 # 2040535c <__sf_fake_stdout>
2040053a:	00f41463          	bne	s0,a5,20400542 <_puts_r+0x74>
2040053e:	4480                	lw	s0,8(s1)
20400540:	b7c1                	j	20400500 <_puts_r+0x32>
20400542:	00005797          	auipc	a5,0x5
20400546:	dda78793          	addi	a5,a5,-550 # 2040531c <__sf_fake_stderr>
2040054a:	faf41be3          	bne	s0,a5,20400500 <_puts_r+0x32>
2040054e:	44c0                	lw	s0,12(s1)
20400550:	bf45                	j	20400500 <_puts_r+0x32>
20400552:	85a2                	mv	a1,s0
20400554:	8526                	mv	a0,s1
20400556:	2205                	jal	20400676 <__swsetup_r>
20400558:	d955                	beqz	a0,2040050c <_puts_r+0x3e>
2040055a:	557d                	li	a0,-1
2040055c:	40f2                	lw	ra,28(sp)
2040055e:	4462                	lw	s0,24(sp)
20400560:	44d2                	lw	s1,20(sp)
20400562:	4942                	lw	s2,16(sp)
20400564:	49b2                	lw	s3,12(sp)
20400566:	4a22                	lw	s4,8(sp)
20400568:	6105                	addi	sp,sp,32
2040056a:	8082                	ret
2040056c:	c41c                	sw	a5,8(s0)
2040056e:	0905                	addi	s2,s2,1
20400570:	0007d763          	bgez	a5,2040057e <_puts_r+0xb0>
20400574:	4c18                	lw	a4,24(s0)
20400576:	00e7cb63          	blt	a5,a4,2040058c <_puts_r+0xbe>
2040057a:	01458963          	beq	a1,s4,2040058c <_puts_r+0xbe>
2040057e:	401c                	lw	a5,0(s0)
20400580:	00178713          	addi	a4,a5,1
20400584:	c018                	sw	a4,0(s0)
20400586:	00b78023          	sb	a1,0(a5)
2040058a:	b759                	j	20400510 <_puts_r+0x42>
2040058c:	8622                	mv	a2,s0
2040058e:	8526                	mv	a0,s1
20400590:	201d                	jal	204005b6 <__swbuf_r>
20400592:	f7351fe3          	bne	a0,s3,20400510 <_puts_r+0x42>
20400596:	b7d1                	j	2040055a <_puts_r+0x8c>
20400598:	401c                	lw	a5,0(s0)
2040059a:	00178713          	addi	a4,a5,1
2040059e:	c018                	sw	a4,0(s0)
204005a0:	4729                	li	a4,10
204005a2:	00e78023          	sb	a4,0(a5)
204005a6:	b761                	j	2040052e <_puts_r+0x60>

204005a8 <puts>:
puts():
204005a8:	5fc01797          	auipc	a5,0x5fc01
204005ac:	16078793          	addi	a5,a5,352 # 80001708 <_impure_ptr>
204005b0:	85aa                	mv	a1,a0
204005b2:	4388                	lw	a0,0(a5)
204005b4:	bf29                	j	204004ce <_puts_r>

204005b6 <__swbuf_r>:
__swbuf_r():
204005b6:	1101                	addi	sp,sp,-32
204005b8:	cc22                	sw	s0,24(sp)
204005ba:	ca26                	sw	s1,20(sp)
204005bc:	c84a                	sw	s2,16(sp)
204005be:	ce06                	sw	ra,28(sp)
204005c0:	c64e                	sw	s3,12(sp)
204005c2:	84aa                	mv	s1,a0
204005c4:	892e                	mv	s2,a1
204005c6:	8432                	mv	s0,a2
204005c8:	c501                	beqz	a0,204005d0 <__swbuf_r+0x1a>
204005ca:	4d1c                	lw	a5,24(a0)
204005cc:	e391                	bnez	a5,204005d0 <__swbuf_r+0x1a>
204005ce:	2931                	jal	204009ea <__sinit>
204005d0:	00005797          	auipc	a5,0x5
204005d4:	d6c78793          	addi	a5,a5,-660 # 2040533c <__sf_fake_stdin>
204005d8:	06f41963          	bne	s0,a5,2040064a <__swbuf_r+0x94>
204005dc:	40c0                	lw	s0,4(s1)
204005de:	4c1c                	lw	a5,24(s0)
204005e0:	c41c                	sw	a5,8(s0)
204005e2:	00c45783          	lhu	a5,12(s0)
204005e6:	8ba1                	andi	a5,a5,8
204005e8:	c3c9                	beqz	a5,2040066a <__swbuf_r+0xb4>
204005ea:	481c                	lw	a5,16(s0)
204005ec:	cfbd                	beqz	a5,2040066a <__swbuf_r+0xb4>
204005ee:	481c                	lw	a5,16(s0)
204005f0:	4008                	lw	a0,0(s0)
204005f2:	0ff97993          	andi	s3,s2,255
204005f6:	0ff97913          	andi	s2,s2,255
204005fa:	8d1d                	sub	a0,a0,a5
204005fc:	485c                	lw	a5,20(s0)
204005fe:	00f54663          	blt	a0,a5,2040060a <__swbuf_r+0x54>
20400602:	85a2                	mv	a1,s0
20400604:	8526                	mv	a0,s1
20400606:	24e9                	jal	204008d0 <_fflush_r>
20400608:	e52d                	bnez	a0,20400672 <__swbuf_r+0xbc>
2040060a:	441c                	lw	a5,8(s0)
2040060c:	0505                	addi	a0,a0,1
2040060e:	17fd                	addi	a5,a5,-1
20400610:	c41c                	sw	a5,8(s0)
20400612:	401c                	lw	a5,0(s0)
20400614:	00178713          	addi	a4,a5,1
20400618:	c018                	sw	a4,0(s0)
2040061a:	01378023          	sb	s3,0(a5)
2040061e:	485c                	lw	a5,20(s0)
20400620:	00a78963          	beq	a5,a0,20400632 <__swbuf_r+0x7c>
20400624:	00c45783          	lhu	a5,12(s0)
20400628:	8b85                	andi	a5,a5,1
2040062a:	cb81                	beqz	a5,2040063a <__swbuf_r+0x84>
2040062c:	47a9                	li	a5,10
2040062e:	00f91663          	bne	s2,a5,2040063a <__swbuf_r+0x84>
20400632:	85a2                	mv	a1,s0
20400634:	8526                	mv	a0,s1
20400636:	2c69                	jal	204008d0 <_fflush_r>
20400638:	ed0d                	bnez	a0,20400672 <__swbuf_r+0xbc>
2040063a:	40f2                	lw	ra,28(sp)
2040063c:	4462                	lw	s0,24(sp)
2040063e:	854a                	mv	a0,s2
20400640:	44d2                	lw	s1,20(sp)
20400642:	4942                	lw	s2,16(sp)
20400644:	49b2                	lw	s3,12(sp)
20400646:	6105                	addi	sp,sp,32
20400648:	8082                	ret
2040064a:	00005797          	auipc	a5,0x5
2040064e:	d1278793          	addi	a5,a5,-750 # 2040535c <__sf_fake_stdout>
20400652:	00f41463          	bne	s0,a5,2040065a <__swbuf_r+0xa4>
20400656:	4480                	lw	s0,8(s1)
20400658:	b759                	j	204005de <__swbuf_r+0x28>
2040065a:	00005797          	auipc	a5,0x5
2040065e:	cc278793          	addi	a5,a5,-830 # 2040531c <__sf_fake_stderr>
20400662:	f6f41ee3          	bne	s0,a5,204005de <__swbuf_r+0x28>
20400666:	44c0                	lw	s0,12(s1)
20400668:	bf9d                	j	204005de <__swbuf_r+0x28>
2040066a:	85a2                	mv	a1,s0
2040066c:	8526                	mv	a0,s1
2040066e:	2021                	jal	20400676 <__swsetup_r>
20400670:	dd3d                	beqz	a0,204005ee <__swbuf_r+0x38>
20400672:	597d                	li	s2,-1
20400674:	b7d9                	j	2040063a <__swbuf_r+0x84>

20400676 <__swsetup_r>:
__swsetup_r():
20400676:	1141                	addi	sp,sp,-16
20400678:	5fc01797          	auipc	a5,0x5fc01
2040067c:	09078793          	addi	a5,a5,144 # 80001708 <_impure_ptr>
20400680:	c226                	sw	s1,4(sp)
20400682:	4384                	lw	s1,0(a5)
20400684:	c422                	sw	s0,8(sp)
20400686:	c04a                	sw	s2,0(sp)
20400688:	c606                	sw	ra,12(sp)
2040068a:	892a                	mv	s2,a0
2040068c:	842e                	mv	s0,a1
2040068e:	c489                	beqz	s1,20400698 <__swsetup_r+0x22>
20400690:	4c9c                	lw	a5,24(s1)
20400692:	e399                	bnez	a5,20400698 <__swsetup_r+0x22>
20400694:	8526                	mv	a0,s1
20400696:	2e91                	jal	204009ea <__sinit>
20400698:	00005797          	auipc	a5,0x5
2040069c:	ca478793          	addi	a5,a5,-860 # 2040533c <__sf_fake_stdin>
204006a0:	02f41c63          	bne	s0,a5,204006d8 <__swsetup_r+0x62>
204006a4:	40c0                	lw	s0,4(s1)
204006a6:	00c41703          	lh	a4,12(s0)
204006aa:	01071793          	slli	a5,a4,0x10
204006ae:	83c1                	srli	a5,a5,0x10
204006b0:	0087f693          	andi	a3,a5,8
204006b4:	eeb5                	bnez	a3,20400730 <__swsetup_r+0xba>
204006b6:	0107f693          	andi	a3,a5,16
204006ba:	ee9d                	bnez	a3,204006f8 <__swsetup_r+0x82>
204006bc:	47a5                	li	a5,9
204006be:	00f92023          	sw	a5,0(s2)
204006c2:	04076713          	ori	a4,a4,64
204006c6:	00e41623          	sh	a4,12(s0)
204006ca:	557d                	li	a0,-1
204006cc:	40b2                	lw	ra,12(sp)
204006ce:	4422                	lw	s0,8(sp)
204006d0:	4492                	lw	s1,4(sp)
204006d2:	4902                	lw	s2,0(sp)
204006d4:	0141                	addi	sp,sp,16
204006d6:	8082                	ret
204006d8:	00005797          	auipc	a5,0x5
204006dc:	c8478793          	addi	a5,a5,-892 # 2040535c <__sf_fake_stdout>
204006e0:	00f41463          	bne	s0,a5,204006e8 <__swsetup_r+0x72>
204006e4:	4480                	lw	s0,8(s1)
204006e6:	b7c1                	j	204006a6 <__swsetup_r+0x30>
204006e8:	00005797          	auipc	a5,0x5
204006ec:	c3478793          	addi	a5,a5,-972 # 2040531c <__sf_fake_stderr>
204006f0:	faf41be3          	bne	s0,a5,204006a6 <__swsetup_r+0x30>
204006f4:	44c0                	lw	s0,12(s1)
204006f6:	bf45                	j	204006a6 <__swsetup_r+0x30>
204006f8:	8b91                	andi	a5,a5,4
204006fa:	c78d                	beqz	a5,20400724 <__swsetup_r+0xae>
204006fc:	584c                	lw	a1,52(s0)
204006fe:	c989                	beqz	a1,20400710 <__swsetup_r+0x9a>
20400700:	04440793          	addi	a5,s0,68
20400704:	00f58463          	beq	a1,a5,2040070c <__swsetup_r+0x96>
20400708:	854a                	mv	a0,s2
2040070a:	2bc5                	jal	20400cfa <_free_r>
2040070c:	02042a23          	sw	zero,52(s0)
20400710:	00c45783          	lhu	a5,12(s0)
20400714:	00042223          	sw	zero,4(s0)
20400718:	fdb7f793          	andi	a5,a5,-37
2040071c:	00f41623          	sh	a5,12(s0)
20400720:	481c                	lw	a5,16(s0)
20400722:	c01c                	sw	a5,0(s0)
20400724:	00c45783          	lhu	a5,12(s0)
20400728:	0087e793          	ori	a5,a5,8
2040072c:	00f41623          	sh	a5,12(s0)
20400730:	481c                	lw	a5,16(s0)
20400732:	ef81                	bnez	a5,2040074a <__swsetup_r+0xd4>
20400734:	00c45783          	lhu	a5,12(s0)
20400738:	20000713          	li	a4,512
2040073c:	2807f793          	andi	a5,a5,640
20400740:	00e78563          	beq	a5,a4,2040074a <__swsetup_r+0xd4>
20400744:	85a2                	mv	a1,s0
20400746:	854a                	mv	a0,s2
20400748:	21bd                	jal	20400bb6 <__smakebuf_r>
2040074a:	00c45783          	lhu	a5,12(s0)
2040074e:	0017f713          	andi	a4,a5,1
20400752:	c705                	beqz	a4,2040077a <__swsetup_r+0x104>
20400754:	485c                	lw	a5,20(s0)
20400756:	00042423          	sw	zero,8(s0)
2040075a:	40f007b3          	neg	a5,a5
2040075e:	cc1c                	sw	a5,24(s0)
20400760:	481c                	lw	a5,16(s0)
20400762:	4501                	li	a0,0
20400764:	f7a5                	bnez	a5,204006cc <__swsetup_r+0x56>
20400766:	00c41783          	lh	a5,12(s0)
2040076a:	0807f713          	andi	a4,a5,128
2040076e:	df39                	beqz	a4,204006cc <__swsetup_r+0x56>
20400770:	0407e793          	ori	a5,a5,64
20400774:	00f41623          	sh	a5,12(s0)
20400778:	bf89                	j	204006ca <__swsetup_r+0x54>
2040077a:	8b89                	andi	a5,a5,2
2040077c:	4701                	li	a4,0
2040077e:	e391                	bnez	a5,20400782 <__swsetup_r+0x10c>
20400780:	4858                	lw	a4,20(s0)
20400782:	c418                	sw	a4,8(s0)
20400784:	bff1                	j	20400760 <__swsetup_r+0xea>

20400786 <__sflush_r>:
__sflush_r():
20400786:	00c5d783          	lhu	a5,12(a1)
2040078a:	1101                	addi	sp,sp,-32
2040078c:	cc22                	sw	s0,24(sp)
2040078e:	ca26                	sw	s1,20(sp)
20400790:	ce06                	sw	ra,28(sp)
20400792:	c84a                	sw	s2,16(sp)
20400794:	c64e                	sw	s3,12(sp)
20400796:	0087f713          	andi	a4,a5,8
2040079a:	84aa                	mv	s1,a0
2040079c:	842e                	mv	s0,a1
2040079e:	e765                	bnez	a4,20400886 <__sflush_r+0x100>
204007a0:	41d8                	lw	a4,4(a1)
204007a2:	00e04763          	bgtz	a4,204007b0 <__sflush_r+0x2a>
204007a6:	41b8                	lw	a4,64(a1)
204007a8:	00e04463          	bgtz	a4,204007b0 <__sflush_r+0x2a>
204007ac:	4501                	li	a0,0
204007ae:	a0c1                	j	2040086e <__sflush_r+0xe8>
204007b0:	5458                	lw	a4,44(s0)
204007b2:	df6d                	beqz	a4,204007ac <__sflush_r+0x26>
204007b4:	0004a903          	lw	s2,0(s1)
204007b8:	01379693          	slli	a3,a5,0x13
204007bc:	0004a023          	sw	zero,0(s1)
204007c0:	0606de63          	bgez	a3,2040083c <__sflush_r+0xb6>
204007c4:	4868                	lw	a0,84(s0)
204007c6:	00c45783          	lhu	a5,12(s0)
204007ca:	8b91                	andi	a5,a5,4
204007cc:	c799                	beqz	a5,204007da <__sflush_r+0x54>
204007ce:	405c                	lw	a5,4(s0)
204007d0:	8d1d                	sub	a0,a0,a5
204007d2:	585c                	lw	a5,52(s0)
204007d4:	c399                	beqz	a5,204007da <__sflush_r+0x54>
204007d6:	403c                	lw	a5,64(s0)
204007d8:	8d1d                	sub	a0,a0,a5
204007da:	545c                	lw	a5,44(s0)
204007dc:	500c                	lw	a1,32(s0)
204007de:	862a                	mv	a2,a0
204007e0:	4681                	li	a3,0
204007e2:	8526                	mv	a0,s1
204007e4:	9782                	jalr	a5
204007e6:	57fd                	li	a5,-1
204007e8:	00c45703          	lhu	a4,12(s0)
204007ec:	00f51d63          	bne	a0,a5,20400806 <__sflush_r+0x80>
204007f0:	4094                	lw	a3,0(s1)
204007f2:	47f5                	li	a5,29
204007f4:	08d7e463          	bltu	a5,a3,2040087c <__sflush_r+0xf6>
204007f8:	204007b7          	lui	a5,0x20400
204007fc:	0785                	addi	a5,a5,1
204007fe:	00d7d7b3          	srl	a5,a5,a3
20400802:	8b85                	andi	a5,a5,1
20400804:	cfa5                	beqz	a5,2040087c <__sflush_r+0xf6>
20400806:	481c                	lw	a5,16(s0)
20400808:	00042223          	sw	zero,4(s0)
2040080c:	c01c                	sw	a5,0(s0)
2040080e:	01371793          	slli	a5,a4,0x13
20400812:	0007d863          	bgez	a5,20400822 <__sflush_r+0x9c>
20400816:	57fd                	li	a5,-1
20400818:	00f51463          	bne	a0,a5,20400820 <__sflush_r+0x9a>
2040081c:	409c                	lw	a5,0(s1)
2040081e:	e391                	bnez	a5,20400822 <__sflush_r+0x9c>
20400820:	c868                	sw	a0,84(s0)
20400822:	584c                	lw	a1,52(s0)
20400824:	0124a023          	sw	s2,0(s1)
20400828:	d1d1                	beqz	a1,204007ac <__sflush_r+0x26>
2040082a:	04440793          	addi	a5,s0,68
2040082e:	00f58463          	beq	a1,a5,20400836 <__sflush_r+0xb0>
20400832:	8526                	mv	a0,s1
20400834:	21d9                	jal	20400cfa <_free_r>
20400836:	02042a23          	sw	zero,52(s0)
2040083a:	bf8d                	j	204007ac <__sflush_r+0x26>
2040083c:	500c                	lw	a1,32(s0)
2040083e:	4685                	li	a3,1
20400840:	4601                	li	a2,0
20400842:	8526                	mv	a0,s1
20400844:	9702                	jalr	a4
20400846:	57fd                	li	a5,-1
20400848:	f6f51fe3          	bne	a0,a5,204007c6 <__sflush_r+0x40>
2040084c:	409c                	lw	a5,0(s1)
2040084e:	dfa5                	beqz	a5,204007c6 <__sflush_r+0x40>
20400850:	4775                	li	a4,29
20400852:	00e78563          	beq	a5,a4,2040085c <__sflush_r+0xd6>
20400856:	4759                	li	a4,22
20400858:	00e79563          	bne	a5,a4,20400862 <__sflush_r+0xdc>
2040085c:	0124a023          	sw	s2,0(s1)
20400860:	b7b1                	j	204007ac <__sflush_r+0x26>
20400862:	00c45783          	lhu	a5,12(s0)
20400866:	0407e793          	ori	a5,a5,64
2040086a:	00f41623          	sh	a5,12(s0)
2040086e:	40f2                	lw	ra,28(sp)
20400870:	4462                	lw	s0,24(sp)
20400872:	44d2                	lw	s1,20(sp)
20400874:	4942                	lw	s2,16(sp)
20400876:	49b2                	lw	s3,12(sp)
20400878:	6105                	addi	sp,sp,32
2040087a:	8082                	ret
2040087c:	04076713          	ori	a4,a4,64
20400880:	00e41623          	sh	a4,12(s0)
20400884:	b7ed                	j	2040086e <__sflush_r+0xe8>
20400886:	0105a983          	lw	s3,16(a1)
2040088a:	f20981e3          	beqz	s3,204007ac <__sflush_r+0x26>
2040088e:	0005a903          	lw	s2,0(a1)
20400892:	8b8d                	andi	a5,a5,3
20400894:	0135a023          	sw	s3,0(a1)
20400898:	41390933          	sub	s2,s2,s3
2040089c:	4701                	li	a4,0
2040089e:	e391                	bnez	a5,204008a2 <__sflush_r+0x11c>
204008a0:	49d8                	lw	a4,20(a1)
204008a2:	c418                	sw	a4,8(s0)
204008a4:	f12054e3          	blez	s2,204007ac <__sflush_r+0x26>
204008a8:	541c                	lw	a5,40(s0)
204008aa:	500c                	lw	a1,32(s0)
204008ac:	86ca                	mv	a3,s2
204008ae:	864e                	mv	a2,s3
204008b0:	8526                	mv	a0,s1
204008b2:	9782                	jalr	a5
204008b4:	00a04a63          	bgtz	a0,204008c8 <__sflush_r+0x142>
204008b8:	00c45783          	lhu	a5,12(s0)
204008bc:	557d                	li	a0,-1
204008be:	0407e793          	ori	a5,a5,64
204008c2:	00f41623          	sh	a5,12(s0)
204008c6:	b765                	j	2040086e <__sflush_r+0xe8>
204008c8:	99aa                	add	s3,s3,a0
204008ca:	40a90933          	sub	s2,s2,a0
204008ce:	bfd9                	j	204008a4 <__sflush_r+0x11e>

204008d0 <_fflush_r>:
_fflush_r():
204008d0:	499c                	lw	a5,16(a1)
204008d2:	cfb9                	beqz	a5,20400930 <_fflush_r+0x60>
204008d4:	1101                	addi	sp,sp,-32
204008d6:	cc22                	sw	s0,24(sp)
204008d8:	ce06                	sw	ra,28(sp)
204008da:	842a                	mv	s0,a0
204008dc:	c511                	beqz	a0,204008e8 <_fflush_r+0x18>
204008de:	4d1c                	lw	a5,24(a0)
204008e0:	e781                	bnez	a5,204008e8 <_fflush_r+0x18>
204008e2:	c62e                	sw	a1,12(sp)
204008e4:	2219                	jal	204009ea <__sinit>
204008e6:	45b2                	lw	a1,12(sp)
204008e8:	00005797          	auipc	a5,0x5
204008ec:	a5478793          	addi	a5,a5,-1452 # 2040533c <__sf_fake_stdin>
204008f0:	00f59b63          	bne	a1,a5,20400906 <_fflush_r+0x36>
204008f4:	404c                	lw	a1,4(s0)
204008f6:	00c59783          	lh	a5,12(a1)
204008fa:	c795                	beqz	a5,20400926 <_fflush_r+0x56>
204008fc:	8522                	mv	a0,s0
204008fe:	4462                	lw	s0,24(sp)
20400900:	40f2                	lw	ra,28(sp)
20400902:	6105                	addi	sp,sp,32
20400904:	b549                	j	20400786 <__sflush_r>
20400906:	00005797          	auipc	a5,0x5
2040090a:	a5678793          	addi	a5,a5,-1450 # 2040535c <__sf_fake_stdout>
2040090e:	00f59463          	bne	a1,a5,20400916 <_fflush_r+0x46>
20400912:	440c                	lw	a1,8(s0)
20400914:	b7cd                	j	204008f6 <_fflush_r+0x26>
20400916:	00005797          	auipc	a5,0x5
2040091a:	a0678793          	addi	a5,a5,-1530 # 2040531c <__sf_fake_stderr>
2040091e:	fcf59ce3          	bne	a1,a5,204008f6 <_fflush_r+0x26>
20400922:	444c                	lw	a1,12(s0)
20400924:	bfc9                	j	204008f6 <_fflush_r+0x26>
20400926:	40f2                	lw	ra,28(sp)
20400928:	4462                	lw	s0,24(sp)
2040092a:	4501                	li	a0,0
2040092c:	6105                	addi	sp,sp,32
2040092e:	8082                	ret
20400930:	4501                	li	a0,0
20400932:	8082                	ret

20400934 <std>:
std():
20400934:	1141                	addi	sp,sp,-16
20400936:	c422                	sw	s0,8(sp)
20400938:	c606                	sw	ra,12(sp)
2040093a:	842a                	mv	s0,a0
2040093c:	00b51623          	sh	a1,12(a0)
20400940:	00c51723          	sh	a2,14(a0)
20400944:	00052023          	sw	zero,0(a0)
20400948:	00052223          	sw	zero,4(a0)
2040094c:	00052423          	sw	zero,8(a0)
20400950:	06052223          	sw	zero,100(a0)
20400954:	00052823          	sw	zero,16(a0)
20400958:	00052a23          	sw	zero,20(a0)
2040095c:	00052c23          	sw	zero,24(a0)
20400960:	4621                	li	a2,8
20400962:	4581                	li	a1,0
20400964:	05c50513          	addi	a0,a0,92
20400968:	24ed                	jal	20400c52 <memset>
2040096a:	00001797          	auipc	a5,0x1
2040096e:	84678793          	addi	a5,a5,-1978 # 204011b0 <__sread>
20400972:	d05c                	sw	a5,36(s0)
20400974:	00001797          	auipc	a5,0x1
20400978:	86c78793          	addi	a5,a5,-1940 # 204011e0 <__swrite>
2040097c:	d41c                	sw	a5,40(s0)
2040097e:	00001797          	auipc	a5,0x1
20400982:	8b078793          	addi	a5,a5,-1872 # 2040122e <__sseek>
20400986:	d45c                	sw	a5,44(s0)
20400988:	00001797          	auipc	a5,0x1
2040098c:	8dc78793          	addi	a5,a5,-1828 # 20401264 <__sclose>
20400990:	d000                	sw	s0,32(s0)
20400992:	d81c                	sw	a5,48(s0)
20400994:	40b2                	lw	ra,12(sp)
20400996:	4422                	lw	s0,8(sp)
20400998:	0141                	addi	sp,sp,16
2040099a:	8082                	ret

2040099c <_cleanup_r>:
_cleanup_r():
2040099c:	00000597          	auipc	a1,0x0
204009a0:	f3458593          	addi	a1,a1,-204 # 204008d0 <_fflush_r>
204009a4:	a2b9                	j	20400af2 <_fwalk_reent>

204009a6 <__sfmoreglue>:
__sfmoreglue():
204009a6:	1141                	addi	sp,sp,-16
204009a8:	c226                	sw	s1,4(sp)
204009aa:	06800613          	li	a2,104
204009ae:	fff58493          	addi	s1,a1,-1
204009b2:	02c484b3          	mul	s1,s1,a2
204009b6:	c04a                	sw	s2,0(sp)
204009b8:	892e                	mv	s2,a1
204009ba:	c422                	sw	s0,8(sp)
204009bc:	c606                	sw	ra,12(sp)
204009be:	07448593          	addi	a1,s1,116
204009c2:	26d5                	jal	20400da6 <_malloc_r>
204009c4:	842a                	mv	s0,a0
204009c6:	c919                	beqz	a0,204009dc <__sfmoreglue+0x36>
204009c8:	00052023          	sw	zero,0(a0)
204009cc:	01252223          	sw	s2,4(a0)
204009d0:	0531                	addi	a0,a0,12
204009d2:	c408                	sw	a0,8(s0)
204009d4:	06848613          	addi	a2,s1,104
204009d8:	4581                	li	a1,0
204009da:	2ca5                	jal	20400c52 <memset>
204009dc:	8522                	mv	a0,s0
204009de:	40b2                	lw	ra,12(sp)
204009e0:	4422                	lw	s0,8(sp)
204009e2:	4492                	lw	s1,4(sp)
204009e4:	4902                	lw	s2,0(sp)
204009e6:	0141                	addi	sp,sp,16
204009e8:	8082                	ret

204009ea <__sinit>:
__sinit():
204009ea:	4d1c                	lw	a5,24(a0)
204009ec:	e3bd                	bnez	a5,20400a52 <__sinit+0x68>
204009ee:	1141                	addi	sp,sp,-16
204009f0:	c606                	sw	ra,12(sp)
204009f2:	c422                	sw	s0,8(sp)
204009f4:	00000797          	auipc	a5,0x0
204009f8:	fa878793          	addi	a5,a5,-88 # 2040099c <_cleanup_r>
204009fc:	d51c                	sw	a5,40(a0)
204009fe:	5fc01797          	auipc	a5,0x5fc01
20400a02:	d0e78793          	addi	a5,a5,-754 # 8000170c <_global_impure_ptr>
20400a06:	439c                	lw	a5,0(a5)
20400a08:	04052423          	sw	zero,72(a0)
20400a0c:	04052623          	sw	zero,76(a0)
20400a10:	04052823          	sw	zero,80(a0)
20400a14:	00f51463          	bne	a0,a5,20400a1c <__sinit+0x32>
20400a18:	4785                	li	a5,1
20400a1a:	cd1c                	sw	a5,24(a0)
20400a1c:	842a                	mv	s0,a0
20400a1e:	281d                	jal	20400a54 <__sfp>
20400a20:	c048                	sw	a0,4(s0)
20400a22:	8522                	mv	a0,s0
20400a24:	2805                	jal	20400a54 <__sfp>
20400a26:	c408                	sw	a0,8(s0)
20400a28:	8522                	mv	a0,s0
20400a2a:	202d                	jal	20400a54 <__sfp>
20400a2c:	c448                	sw	a0,12(s0)
20400a2e:	4048                	lw	a0,4(s0)
20400a30:	4601                	li	a2,0
20400a32:	4591                	li	a1,4
20400a34:	3701                	jal	20400934 <std>
20400a36:	4408                	lw	a0,8(s0)
20400a38:	4605                	li	a2,1
20400a3a:	45a5                	li	a1,9
20400a3c:	3de5                	jal	20400934 <std>
20400a3e:	4448                	lw	a0,12(s0)
20400a40:	4609                	li	a2,2
20400a42:	45c9                	li	a1,18
20400a44:	3dc5                	jal	20400934 <std>
20400a46:	4785                	li	a5,1
20400a48:	cc1c                	sw	a5,24(s0)
20400a4a:	40b2                	lw	ra,12(sp)
20400a4c:	4422                	lw	s0,8(sp)
20400a4e:	0141                	addi	sp,sp,16
20400a50:	8082                	ret
20400a52:	8082                	ret

20400a54 <__sfp>:
__sfp():
20400a54:	1141                	addi	sp,sp,-16
20400a56:	5fc01797          	auipc	a5,0x5fc01
20400a5a:	cb678793          	addi	a5,a5,-842 # 8000170c <_global_impure_ptr>
20400a5e:	c226                	sw	s1,4(sp)
20400a60:	4384                	lw	s1,0(a5)
20400a62:	c04a                	sw	s2,0(sp)
20400a64:	c606                	sw	ra,12(sp)
20400a66:	4c9c                	lw	a5,24(s1)
20400a68:	c422                	sw	s0,8(sp)
20400a6a:	892a                	mv	s2,a0
20400a6c:	e399                	bnez	a5,20400a72 <__sfp+0x1e>
20400a6e:	8526                	mv	a0,s1
20400a70:	3fad                	jal	204009ea <__sinit>
20400a72:	04848493          	addi	s1,s1,72
20400a76:	4480                	lw	s0,8(s1)
20400a78:	40dc                	lw	a5,4(s1)
20400a7a:	17fd                	addi	a5,a5,-1
20400a7c:	0007d663          	bgez	a5,20400a88 <__sfp+0x34>
20400a80:	409c                	lw	a5,0(s1)
20400a82:	cfb1                	beqz	a5,20400ade <__sfp+0x8a>
20400a84:	4084                	lw	s1,0(s1)
20400a86:	bfc5                	j	20400a76 <__sfp+0x22>
20400a88:	00c41703          	lh	a4,12(s0)
20400a8c:	e731                	bnez	a4,20400ad8 <__sfp+0x84>
20400a8e:	77c1                	lui	a5,0xffff0
20400a90:	0785                	addi	a5,a5,1
20400a92:	06042223          	sw	zero,100(s0)
20400a96:	00042023          	sw	zero,0(s0)
20400a9a:	00042223          	sw	zero,4(s0)
20400a9e:	00042423          	sw	zero,8(s0)
20400aa2:	c45c                	sw	a5,12(s0)
20400aa4:	00042823          	sw	zero,16(s0)
20400aa8:	00042a23          	sw	zero,20(s0)
20400aac:	00042c23          	sw	zero,24(s0)
20400ab0:	4621                	li	a2,8
20400ab2:	4581                	li	a1,0
20400ab4:	05c40513          	addi	a0,s0,92
20400ab8:	2a69                	jal	20400c52 <memset>
20400aba:	02042a23          	sw	zero,52(s0)
20400abe:	02042c23          	sw	zero,56(s0)
20400ac2:	04042423          	sw	zero,72(s0)
20400ac6:	04042623          	sw	zero,76(s0)
20400aca:	8522                	mv	a0,s0
20400acc:	40b2                	lw	ra,12(sp)
20400ace:	4422                	lw	s0,8(sp)
20400ad0:	4492                	lw	s1,4(sp)
20400ad2:	4902                	lw	s2,0(sp)
20400ad4:	0141                	addi	sp,sp,16
20400ad6:	8082                	ret
20400ad8:	06840413          	addi	s0,s0,104
20400adc:	bf79                	j	20400a7a <__sfp+0x26>
20400ade:	4591                	li	a1,4
20400ae0:	854a                	mv	a0,s2
20400ae2:	35d1                	jal	204009a6 <__sfmoreglue>
20400ae4:	c088                	sw	a0,0(s1)
20400ae6:	842a                	mv	s0,a0
20400ae8:	fd51                	bnez	a0,20400a84 <__sfp+0x30>
20400aea:	47b1                	li	a5,12
20400aec:	00f92023          	sw	a5,0(s2)
20400af0:	bfe9                	j	20400aca <__sfp+0x76>

20400af2 <_fwalk_reent>:
_fwalk_reent():
20400af2:	7179                	addi	sp,sp,-48
20400af4:	d422                	sw	s0,40(sp)
20400af6:	d04a                	sw	s2,32(sp)
20400af8:	cc52                	sw	s4,24(sp)
20400afa:	ca56                	sw	s5,20(sp)
20400afc:	c85a                	sw	s6,16(sp)
20400afe:	c65e                	sw	s7,12(sp)
20400b00:	d606                	sw	ra,44(sp)
20400b02:	d226                	sw	s1,36(sp)
20400b04:	ce4e                	sw	s3,28(sp)
20400b06:	8a2a                	mv	s4,a0
20400b08:	8aae                	mv	s5,a1
20400b0a:	04850413          	addi	s0,a0,72
20400b0e:	4901                	li	s2,0
20400b10:	4b05                	li	s6,1
20400b12:	5bfd                	li	s7,-1
20400b14:	ec09                	bnez	s0,20400b2e <_fwalk_reent+0x3c>
20400b16:	50b2                	lw	ra,44(sp)
20400b18:	5422                	lw	s0,40(sp)
20400b1a:	854a                	mv	a0,s2
20400b1c:	5492                	lw	s1,36(sp)
20400b1e:	5902                	lw	s2,32(sp)
20400b20:	49f2                	lw	s3,28(sp)
20400b22:	4a62                	lw	s4,24(sp)
20400b24:	4ad2                	lw	s5,20(sp)
20400b26:	4b42                	lw	s6,16(sp)
20400b28:	4bb2                	lw	s7,12(sp)
20400b2a:	6145                	addi	sp,sp,48
20400b2c:	8082                	ret
20400b2e:	4404                	lw	s1,8(s0)
20400b30:	00442983          	lw	s3,4(s0)
20400b34:	19fd                	addi	s3,s3,-1
20400b36:	0009d463          	bgez	s3,20400b3e <_fwalk_reent+0x4c>
20400b3a:	4000                	lw	s0,0(s0)
20400b3c:	bfe1                	j	20400b14 <_fwalk_reent+0x22>
20400b3e:	00c4d783          	lhu	a5,12(s1)
20400b42:	00fb7b63          	bgeu	s6,a5,20400b58 <_fwalk_reent+0x66>
20400b46:	00e49783          	lh	a5,14(s1)
20400b4a:	01778763          	beq	a5,s7,20400b58 <_fwalk_reent+0x66>
20400b4e:	85a6                	mv	a1,s1
20400b50:	8552                	mv	a0,s4
20400b52:	9a82                	jalr	s5
20400b54:	00a96933          	or	s2,s2,a0
20400b58:	06848493          	addi	s1,s1,104
20400b5c:	bfe1                	j	20400b34 <_fwalk_reent+0x42>

20400b5e <__swhatbuf_r>:
__swhatbuf_r():
20400b5e:	7119                	addi	sp,sp,-128
20400b60:	daa6                	sw	s1,116(sp)
20400b62:	84ae                	mv	s1,a1
20400b64:	00e59583          	lh	a1,14(a1)
20400b68:	dca2                	sw	s0,120(sp)
20400b6a:	de86                	sw	ra,124(sp)
20400b6c:	8432                	mv	s0,a2
20400b6e:	0005dc63          	bgez	a1,20400b86 <__swhatbuf_r+0x28>
20400b72:	00c4d783          	lhu	a5,12(s1)
20400b76:	0006a023          	sw	zero,0(a3)
20400b7a:	0807f793          	andi	a5,a5,128
20400b7e:	e39d                	bnez	a5,20400ba4 <__swhatbuf_r+0x46>
20400b80:	40000793          	li	a5,1024
20400b84:	a015                	j	20400ba8 <__swhatbuf_r+0x4a>
20400b86:	0830                	addi	a2,sp,24
20400b88:	c636                	sw	a3,12(sp)
20400b8a:	2f15                	jal	204012be <_fstat_r>
20400b8c:	46b2                	lw	a3,12(sp)
20400b8e:	fe0542e3          	bltz	a0,20400b72 <__swhatbuf_r+0x14>
20400b92:	4772                	lw	a4,28(sp)
20400b94:	67bd                	lui	a5,0xf
20400b96:	8ff9                	and	a5,a5,a4
20400b98:	7779                	lui	a4,0xffffe
20400b9a:	97ba                	add	a5,a5,a4
20400b9c:	0017b793          	seqz	a5,a5
20400ba0:	c29c                	sw	a5,0(a3)
20400ba2:	bff9                	j	20400b80 <__swhatbuf_r+0x22>
20400ba4:	04000793          	li	a5,64
20400ba8:	c01c                	sw	a5,0(s0)
20400baa:	50f6                	lw	ra,124(sp)
20400bac:	5466                	lw	s0,120(sp)
20400bae:	54d6                	lw	s1,116(sp)
20400bb0:	4501                	li	a0,0
20400bb2:	6109                	addi	sp,sp,128
20400bb4:	8082                	ret

20400bb6 <__smakebuf_r>:
__smakebuf_r():
20400bb6:	00c5d783          	lhu	a5,12(a1)
20400bba:	1101                	addi	sp,sp,-32
20400bbc:	cc22                	sw	s0,24(sp)
20400bbe:	ce06                	sw	ra,28(sp)
20400bc0:	ca26                	sw	s1,20(sp)
20400bc2:	c84a                	sw	s2,16(sp)
20400bc4:	8b89                	andi	a5,a5,2
20400bc6:	842e                	mv	s0,a1
20400bc8:	cf89                	beqz	a5,20400be2 <__smakebuf_r+0x2c>
20400bca:	04740793          	addi	a5,s0,71
20400bce:	c01c                	sw	a5,0(s0)
20400bd0:	c81c                	sw	a5,16(s0)
20400bd2:	4785                	li	a5,1
20400bd4:	c85c                	sw	a5,20(s0)
20400bd6:	40f2                	lw	ra,28(sp)
20400bd8:	4462                	lw	s0,24(sp)
20400bda:	44d2                	lw	s1,20(sp)
20400bdc:	4942                	lw	s2,16(sp)
20400bde:	6105                	addi	sp,sp,32
20400be0:	8082                	ret
20400be2:	0074                	addi	a3,sp,12
20400be4:	0030                	addi	a2,sp,8
20400be6:	84aa                	mv	s1,a0
20400be8:	3f9d                	jal	20400b5e <__swhatbuf_r>
20400bea:	45a2                	lw	a1,8(sp)
20400bec:	892a                	mv	s2,a0
20400bee:	8526                	mv	a0,s1
20400bf0:	2a5d                	jal	20400da6 <_malloc_r>
20400bf2:	ed01                	bnez	a0,20400c0a <__smakebuf_r+0x54>
20400bf4:	00c41783          	lh	a5,12(s0)
20400bf8:	2007f713          	andi	a4,a5,512
20400bfc:	ff69                	bnez	a4,20400bd6 <__smakebuf_r+0x20>
20400bfe:	9bf1                	andi	a5,a5,-4
20400c00:	0027e793          	ori	a5,a5,2
20400c04:	00f41623          	sh	a5,12(s0)
20400c08:	b7c9                	j	20400bca <__smakebuf_r+0x14>
20400c0a:	00000797          	auipc	a5,0x0
20400c0e:	d9278793          	addi	a5,a5,-622 # 2040099c <_cleanup_r>
20400c12:	d49c                	sw	a5,40(s1)
20400c14:	00c45783          	lhu	a5,12(s0)
20400c18:	c008                	sw	a0,0(s0)
20400c1a:	c808                	sw	a0,16(s0)
20400c1c:	0807e793          	ori	a5,a5,128
20400c20:	00f41623          	sh	a5,12(s0)
20400c24:	47a2                	lw	a5,8(sp)
20400c26:	c85c                	sw	a5,20(s0)
20400c28:	47b2                	lw	a5,12(sp)
20400c2a:	cf89                	beqz	a5,20400c44 <__smakebuf_r+0x8e>
20400c2c:	00e41583          	lh	a1,14(s0)
20400c30:	8526                	mv	a0,s1
20400c32:	2d5d                	jal	204012e8 <_isatty_r>
20400c34:	c901                	beqz	a0,20400c44 <__smakebuf_r+0x8e>
20400c36:	00c45783          	lhu	a5,12(s0)
20400c3a:	9bf1                	andi	a5,a5,-4
20400c3c:	0017e793          	ori	a5,a5,1
20400c40:	00f41623          	sh	a5,12(s0)
20400c44:	00c45783          	lhu	a5,12(s0)
20400c48:	00f96933          	or	s2,s2,a5
20400c4c:	01241623          	sh	s2,12(s0)
20400c50:	b759                	j	20400bd6 <__smakebuf_r+0x20>

20400c52 <memset>:
memset():
20400c52:	433d                	li	t1,15
20400c54:	872a                	mv	a4,a0
20400c56:	02c37363          	bgeu	t1,a2,20400c7c <memset+0x2a>
20400c5a:	00f77793          	andi	a5,a4,15
20400c5e:	efbd                	bnez	a5,20400cdc <memset+0x8a>
20400c60:	e5ad                	bnez	a1,20400cca <memset+0x78>
20400c62:	ff067693          	andi	a3,a2,-16
20400c66:	8a3d                	andi	a2,a2,15
20400c68:	96ba                	add	a3,a3,a4
20400c6a:	c30c                	sw	a1,0(a4)
20400c6c:	c34c                	sw	a1,4(a4)
20400c6e:	c70c                	sw	a1,8(a4)
20400c70:	c74c                	sw	a1,12(a4)
20400c72:	0741                	addi	a4,a4,16
20400c74:	fed76be3          	bltu	a4,a3,20400c6a <memset+0x18>
20400c78:	e211                	bnez	a2,20400c7c <memset+0x2a>
20400c7a:	8082                	ret
20400c7c:	40c306b3          	sub	a3,t1,a2
20400c80:	068a                	slli	a3,a3,0x2
20400c82:	00000297          	auipc	t0,0x0
20400c86:	9696                	add	a3,a3,t0
20400c88:	00a68067          	jr	10(a3)
20400c8c:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffb43a>
20400c90:	00b706a3          	sb	a1,13(a4)
20400c94:	00b70623          	sb	a1,12(a4)
20400c98:	00b705a3          	sb	a1,11(a4)
20400c9c:	00b70523          	sb	a1,10(a4)
20400ca0:	00b704a3          	sb	a1,9(a4)
20400ca4:	00b70423          	sb	a1,8(a4)
20400ca8:	00b703a3          	sb	a1,7(a4)
20400cac:	00b70323          	sb	a1,6(a4)
20400cb0:	00b702a3          	sb	a1,5(a4)
20400cb4:	00b70223          	sb	a1,4(a4)
20400cb8:	00b701a3          	sb	a1,3(a4)
20400cbc:	00b70123          	sb	a1,2(a4)
20400cc0:	00b700a3          	sb	a1,1(a4)
20400cc4:	00b70023          	sb	a1,0(a4)
20400cc8:	8082                	ret
20400cca:	0ff5f593          	andi	a1,a1,255
20400cce:	00859693          	slli	a3,a1,0x8
20400cd2:	8dd5                	or	a1,a1,a3
20400cd4:	01059693          	slli	a3,a1,0x10
20400cd8:	8dd5                	or	a1,a1,a3
20400cda:	b761                	j	20400c62 <memset+0x10>
20400cdc:	00279693          	slli	a3,a5,0x2
20400ce0:	00000297          	auipc	t0,0x0
20400ce4:	9696                	add	a3,a3,t0
20400ce6:	8286                	mv	t0,ra
20400ce8:	fa8680e7          	jalr	-88(a3)
20400cec:	8096                	mv	ra,t0
20400cee:	17c1                	addi	a5,a5,-16
20400cf0:	8f1d                	sub	a4,a4,a5
20400cf2:	963e                	add	a2,a2,a5
20400cf4:	f8c374e3          	bgeu	t1,a2,20400c7c <memset+0x2a>
20400cf8:	b7a5                	j	20400c60 <memset+0xe>

20400cfa <_free_r>:
_free_r():
20400cfa:	c5cd                	beqz	a1,20400da4 <_free_r+0xaa>
20400cfc:	ffc5a783          	lw	a5,-4(a1)
20400d00:	1141                	addi	sp,sp,-16
20400d02:	c422                	sw	s0,8(sp)
20400d04:	c606                	sw	ra,12(sp)
20400d06:	c226                	sw	s1,4(sp)
20400d08:	ffc58413          	addi	s0,a1,-4
20400d0c:	0007d363          	bgez	a5,20400d12 <_free_r+0x18>
20400d10:	943e                	add	s0,s0,a5
20400d12:	84aa                	mv	s1,a0
20400d14:	2589                	jal	20401356 <__malloc_lock>
20400d16:	5fc01797          	auipc	a5,0x5fc01
20400d1a:	a1a78793          	addi	a5,a5,-1510 # 80001730 <metal_segment_data_target_end>
20400d1e:	439c                	lw	a5,0(a5)
20400d20:	ef89                	bnez	a5,20400d3a <_free_r+0x40>
20400d22:	00042223          	sw	zero,4(s0)
20400d26:	5fc01797          	auipc	a5,0x5fc01
20400d2a:	a087a523          	sw	s0,-1526(a5) # 80001730 <metal_segment_data_target_end>
20400d2e:	4422                	lw	s0,8(sp)
20400d30:	40b2                	lw	ra,12(sp)
20400d32:	8526                	mv	a0,s1
20400d34:	4492                	lw	s1,4(sp)
20400d36:	0141                	addi	sp,sp,16
20400d38:	a505                	j	20401358 <__malloc_unlock>
20400d3a:	00f47e63          	bgeu	s0,a5,20400d56 <_free_r+0x5c>
20400d3e:	4014                	lw	a3,0(s0)
20400d40:	00d40733          	add	a4,s0,a3
20400d44:	00e79663          	bne	a5,a4,20400d50 <_free_r+0x56>
20400d48:	4398                	lw	a4,0(a5)
20400d4a:	43dc                	lw	a5,4(a5)
20400d4c:	9736                	add	a4,a4,a3
20400d4e:	c018                	sw	a4,0(s0)
20400d50:	c05c                	sw	a5,4(s0)
20400d52:	bfd1                	j	20400d26 <_free_r+0x2c>
20400d54:	87ba                	mv	a5,a4
20400d56:	43d8                	lw	a4,4(a5)
20400d58:	c319                	beqz	a4,20400d5e <_free_r+0x64>
20400d5a:	fee47de3          	bgeu	s0,a4,20400d54 <_free_r+0x5a>
20400d5e:	4394                	lw	a3,0(a5)
20400d60:	00d78633          	add	a2,a5,a3
20400d64:	00861f63          	bne	a2,s0,20400d82 <_free_r+0x88>
20400d68:	4010                	lw	a2,0(s0)
20400d6a:	96b2                	add	a3,a3,a2
20400d6c:	c394                	sw	a3,0(a5)
20400d6e:	00d78633          	add	a2,a5,a3
20400d72:	fac71ee3          	bne	a4,a2,20400d2e <_free_r+0x34>
20400d76:	4310                	lw	a2,0(a4)
20400d78:	4358                	lw	a4,4(a4)
20400d7a:	96b2                	add	a3,a3,a2
20400d7c:	c394                	sw	a3,0(a5)
20400d7e:	c3d8                	sw	a4,4(a5)
20400d80:	b77d                	j	20400d2e <_free_r+0x34>
20400d82:	00c47563          	bgeu	s0,a2,20400d8c <_free_r+0x92>
20400d86:	47b1                	li	a5,12
20400d88:	c09c                	sw	a5,0(s1)
20400d8a:	b755                	j	20400d2e <_free_r+0x34>
20400d8c:	4010                	lw	a2,0(s0)
20400d8e:	00c406b3          	add	a3,s0,a2
20400d92:	00d71663          	bne	a4,a3,20400d9e <_free_r+0xa4>
20400d96:	4314                	lw	a3,0(a4)
20400d98:	4358                	lw	a4,4(a4)
20400d9a:	96b2                	add	a3,a3,a2
20400d9c:	c014                	sw	a3,0(s0)
20400d9e:	c058                	sw	a4,4(s0)
20400da0:	c3c0                	sw	s0,4(a5)
20400da2:	b771                	j	20400d2e <_free_r+0x34>
20400da4:	8082                	ret

20400da6 <_malloc_r>:
_malloc_r():
20400da6:	1101                	addi	sp,sp,-32
20400da8:	ca26                	sw	s1,20(sp)
20400daa:	00358493          	addi	s1,a1,3
20400dae:	98f1                	andi	s1,s1,-4
20400db0:	ce06                	sw	ra,28(sp)
20400db2:	cc22                	sw	s0,24(sp)
20400db4:	c84a                	sw	s2,16(sp)
20400db6:	c64e                	sw	s3,12(sp)
20400db8:	04a1                	addi	s1,s1,8
20400dba:	47b1                	li	a5,12
20400dbc:	04f4f763          	bgeu	s1,a5,20400e0a <_malloc_r+0x64>
20400dc0:	44b1                	li	s1,12
20400dc2:	04b4e663          	bltu	s1,a1,20400e0e <_malloc_r+0x68>
20400dc6:	892a                	mv	s2,a0
20400dc8:	2379                	jal	20401356 <__malloc_lock>
20400dca:	5fc01797          	auipc	a5,0x5fc01
20400dce:	96678793          	addi	a5,a5,-1690 # 80001730 <metal_segment_data_target_end>
20400dd2:	4398                	lw	a4,0(a5)
20400dd4:	843a                	mv	s0,a4
20400dd6:	e431                	bnez	s0,20400e22 <_malloc_r+0x7c>
20400dd8:	5fc01797          	auipc	a5,0x5fc01
20400ddc:	95c78793          	addi	a5,a5,-1700 # 80001734 <__malloc_sbrk_start>
20400de0:	439c                	lw	a5,0(a5)
20400de2:	eb81                	bnez	a5,20400df2 <_malloc_r+0x4c>
20400de4:	4581                	li	a1,0
20400de6:	854a                	mv	a0,s2
20400de8:	2645                	jal	20401188 <_sbrk_r>
20400dea:	5fc01797          	auipc	a5,0x5fc01
20400dee:	94a7a523          	sw	a0,-1718(a5) # 80001734 <__malloc_sbrk_start>
20400df2:	85a6                	mv	a1,s1
20400df4:	854a                	mv	a0,s2
20400df6:	2e49                	jal	20401188 <_sbrk_r>
20400df8:	59fd                	li	s3,-1
20400dfa:	07351963          	bne	a0,s3,20400e6c <_malloc_r+0xc6>
20400dfe:	47b1                	li	a5,12
20400e00:	00f92023          	sw	a5,0(s2)
20400e04:	854a                	mv	a0,s2
20400e06:	2b89                	jal	20401358 <__malloc_unlock>
20400e08:	a029                	j	20400e12 <_malloc_r+0x6c>
20400e0a:	fa04dce3          	bgez	s1,20400dc2 <_malloc_r+0x1c>
20400e0e:	47b1                	li	a5,12
20400e10:	c11c                	sw	a5,0(a0)
20400e12:	4501                	li	a0,0
20400e14:	40f2                	lw	ra,28(sp)
20400e16:	4462                	lw	s0,24(sp)
20400e18:	44d2                	lw	s1,20(sp)
20400e1a:	4942                	lw	s2,16(sp)
20400e1c:	49b2                	lw	s3,12(sp)
20400e1e:	6105                	addi	sp,sp,32
20400e20:	8082                	ret
20400e22:	401c                	lw	a5,0(s0)
20400e24:	8f85                	sub	a5,a5,s1
20400e26:	0407c063          	bltz	a5,20400e66 <_malloc_r+0xc0>
20400e2a:	46ad                	li	a3,11
20400e2c:	00f6f663          	bgeu	a3,a5,20400e38 <_malloc_r+0x92>
20400e30:	c01c                	sw	a5,0(s0)
20400e32:	943e                	add	s0,s0,a5
20400e34:	c004                	sw	s1,0(s0)
20400e36:	a801                	j	20400e46 <_malloc_r+0xa0>
20400e38:	405c                	lw	a5,4(s0)
20400e3a:	02871463          	bne	a4,s0,20400e62 <_malloc_r+0xbc>
20400e3e:	5fc01717          	auipc	a4,0x5fc01
20400e42:	8ef72923          	sw	a5,-1806(a4) # 80001730 <metal_segment_data_target_end>
20400e46:	854a                	mv	a0,s2
20400e48:	2b01                	jal	20401358 <__malloc_unlock>
20400e4a:	00b40513          	addi	a0,s0,11
20400e4e:	00440793          	addi	a5,s0,4
20400e52:	9961                	andi	a0,a0,-8
20400e54:	40f50733          	sub	a4,a0,a5
20400e58:	df55                	beqz	a4,20400e14 <_malloc_r+0x6e>
20400e5a:	943a                	add	s0,s0,a4
20400e5c:	8f89                	sub	a5,a5,a0
20400e5e:	c01c                	sw	a5,0(s0)
20400e60:	bf55                	j	20400e14 <_malloc_r+0x6e>
20400e62:	c35c                	sw	a5,4(a4)
20400e64:	b7cd                	j	20400e46 <_malloc_r+0xa0>
20400e66:	8722                	mv	a4,s0
20400e68:	4040                	lw	s0,4(s0)
20400e6a:	b7b5                	j	20400dd6 <_malloc_r+0x30>
20400e6c:	00350413          	addi	s0,a0,3
20400e70:	9871                	andi	s0,s0,-4
20400e72:	fc8501e3          	beq	a0,s0,20400e34 <_malloc_r+0x8e>
20400e76:	40a405b3          	sub	a1,s0,a0
20400e7a:	854a                	mv	a0,s2
20400e7c:	2631                	jal	20401188 <_sbrk_r>
20400e7e:	fb351be3          	bne	a0,s3,20400e34 <_malloc_r+0x8e>
20400e82:	bfb5                	j	20400dfe <_malloc_r+0x58>

20400e84 <__sfputc_r>:
__sfputc_r():
20400e84:	461c                	lw	a5,8(a2)
20400e86:	17fd                	addi	a5,a5,-1
20400e88:	c61c                	sw	a5,8(a2)
20400e8a:	0007da63          	bgez	a5,20400e9e <__sfputc_r+0x1a>
20400e8e:	4e18                	lw	a4,24(a2)
20400e90:	00e7c563          	blt	a5,a4,20400e9a <__sfputc_r+0x16>
20400e94:	47a9                	li	a5,10
20400e96:	00f59463          	bne	a1,a5,20400e9e <__sfputc_r+0x1a>
20400e9a:	f1cff06f          	j	204005b6 <__swbuf_r>
20400e9e:	421c                	lw	a5,0(a2)
20400ea0:	852e                	mv	a0,a1
20400ea2:	00178713          	addi	a4,a5,1
20400ea6:	c218                	sw	a4,0(a2)
20400ea8:	00b78023          	sb	a1,0(a5)
20400eac:	8082                	ret

20400eae <__sfputs_r>:
__sfputs_r():
20400eae:	1101                	addi	sp,sp,-32
20400eb0:	cc22                	sw	s0,24(sp)
20400eb2:	ca26                	sw	s1,20(sp)
20400eb4:	c84a                	sw	s2,16(sp)
20400eb6:	c64e                	sw	s3,12(sp)
20400eb8:	c452                	sw	s4,8(sp)
20400eba:	ce06                	sw	ra,28(sp)
20400ebc:	892a                	mv	s2,a0
20400ebe:	89ae                	mv	s3,a1
20400ec0:	8432                	mv	s0,a2
20400ec2:	00d604b3          	add	s1,a2,a3
20400ec6:	5a7d                	li	s4,-1
20400ec8:	00941463          	bne	s0,s1,20400ed0 <__sfputs_r+0x22>
20400ecc:	4501                	li	a0,0
20400ece:	a809                	j	20400ee0 <__sfputs_r+0x32>
20400ed0:	00044583          	lbu	a1,0(s0)
20400ed4:	864e                	mv	a2,s3
20400ed6:	854a                	mv	a0,s2
20400ed8:	3775                	jal	20400e84 <__sfputc_r>
20400eda:	0405                	addi	s0,s0,1
20400edc:	ff4516e3          	bne	a0,s4,20400ec8 <__sfputs_r+0x1a>
20400ee0:	40f2                	lw	ra,28(sp)
20400ee2:	4462                	lw	s0,24(sp)
20400ee4:	44d2                	lw	s1,20(sp)
20400ee6:	4942                	lw	s2,16(sp)
20400ee8:	49b2                	lw	s3,12(sp)
20400eea:	4a22                	lw	s4,8(sp)
20400eec:	6105                	addi	sp,sp,32
20400eee:	8082                	ret

20400ef0 <_vfiprintf_r>:
_vfiprintf_r():
20400ef0:	7135                	addi	sp,sp,-160
20400ef2:	cd22                	sw	s0,152(sp)
20400ef4:	cb26                	sw	s1,148(sp)
20400ef6:	c94a                	sw	s2,144(sp)
20400ef8:	c74e                	sw	s3,140(sp)
20400efa:	cf06                	sw	ra,156(sp)
20400efc:	c552                	sw	s4,136(sp)
20400efe:	c356                	sw	s5,132(sp)
20400f00:	c15a                	sw	s6,128(sp)
20400f02:	dede                	sw	s7,124(sp)
20400f04:	dce2                	sw	s8,120(sp)
20400f06:	dae6                	sw	s9,116(sp)
20400f08:	89aa                	mv	s3,a0
20400f0a:	84ae                	mv	s1,a1
20400f0c:	8932                	mv	s2,a2
20400f0e:	8436                	mv	s0,a3
20400f10:	c501                	beqz	a0,20400f18 <_vfiprintf_r+0x28>
20400f12:	4d1c                	lw	a5,24(a0)
20400f14:	e391                	bnez	a5,20400f18 <_vfiprintf_r+0x28>
20400f16:	3cd1                	jal	204009ea <__sinit>
20400f18:	00004797          	auipc	a5,0x4
20400f1c:	42478793          	addi	a5,a5,1060 # 2040533c <__sf_fake_stdin>
20400f20:	0cf49b63          	bne	s1,a5,20400ff6 <_vfiprintf_r+0x106>
20400f24:	0049a483          	lw	s1,4(s3)
20400f28:	00c4d783          	lhu	a5,12(s1)
20400f2c:	8ba1                	andi	a5,a5,8
20400f2e:	c7f5                	beqz	a5,2040101a <_vfiprintf_r+0x12a>
20400f30:	489c                	lw	a5,16(s1)
20400f32:	c7e5                	beqz	a5,2040101a <_vfiprintf_r+0x12a>
20400f34:	02000793          	li	a5,32
20400f38:	02f104a3          	sb	a5,41(sp)
20400f3c:	03000793          	li	a5,48
20400f40:	d202                	sw	zero,36(sp)
20400f42:	02f10523          	sb	a5,42(sp)
20400f46:	c622                	sw	s0,12(sp)
20400f48:	02500b93          	li	s7,37
20400f4c:	00004a97          	auipc	s5,0x4
20400f50:	430a8a93          	addi	s5,s5,1072 # 2040537c <__sf_fake_stdout+0x20>
20400f54:	4c05                	li	s8,1
20400f56:	4b29                	li	s6,10
20400f58:	844a                	mv	s0,s2
20400f5a:	00044783          	lbu	a5,0(s0)
20400f5e:	c399                	beqz	a5,20400f64 <_vfiprintf_r+0x74>
20400f60:	0f779063          	bne	a5,s7,20401040 <_vfiprintf_r+0x150>
20400f64:	41240cb3          	sub	s9,s0,s2
20400f68:	000c8d63          	beqz	s9,20400f82 <_vfiprintf_r+0x92>
20400f6c:	86e6                	mv	a3,s9
20400f6e:	864a                	mv	a2,s2
20400f70:	85a6                	mv	a1,s1
20400f72:	854e                	mv	a0,s3
20400f74:	3f2d                	jal	20400eae <__sfputs_r>
20400f76:	57fd                	li	a5,-1
20400f78:	1ef50663          	beq	a0,a5,20401164 <_vfiprintf_r+0x274>
20400f7c:	5692                	lw	a3,36(sp)
20400f7e:	96e6                	add	a3,a3,s9
20400f80:	d236                	sw	a3,36(sp)
20400f82:	00044783          	lbu	a5,0(s0)
20400f86:	1c078f63          	beqz	a5,20401164 <_vfiprintf_r+0x274>
20400f8a:	57fd                	li	a5,-1
20400f8c:	00140913          	addi	s2,s0,1
20400f90:	c802                	sw	zero,16(sp)
20400f92:	ce02                	sw	zero,28(sp)
20400f94:	ca3e                	sw	a5,20(sp)
20400f96:	cc02                	sw	zero,24(sp)
20400f98:	040109a3          	sb	zero,83(sp)
20400f9c:	d482                	sw	zero,104(sp)
20400f9e:	00094583          	lbu	a1,0(s2)
20400fa2:	4615                	li	a2,5
20400fa4:	8556                	mv	a0,s5
20400fa6:	2e59                	jal	2040133c <memchr>
20400fa8:	00190413          	addi	s0,s2,1
20400fac:	47c2                	lw	a5,16(sp)
20400fae:	e959                	bnez	a0,20401044 <_vfiprintf_r+0x154>
20400fb0:	0107f713          	andi	a4,a5,16
20400fb4:	c709                	beqz	a4,20400fbe <_vfiprintf_r+0xce>
20400fb6:	02000713          	li	a4,32
20400fba:	04e109a3          	sb	a4,83(sp)
20400fbe:	0087f713          	andi	a4,a5,8
20400fc2:	c709                	beqz	a4,20400fcc <_vfiprintf_r+0xdc>
20400fc4:	02b00713          	li	a4,43
20400fc8:	04e109a3          	sb	a4,83(sp)
20400fcc:	00094683          	lbu	a3,0(s2)
20400fd0:	02a00713          	li	a4,42
20400fd4:	08e68063          	beq	a3,a4,20401054 <_vfiprintf_r+0x164>
20400fd8:	47f2                	lw	a5,28(sp)
20400fda:	844a                	mv	s0,s2
20400fdc:	4681                	li	a3,0
20400fde:	4625                	li	a2,9
20400fe0:	00044703          	lbu	a4,0(s0)
20400fe4:	00140593          	addi	a1,s0,1
20400fe8:	fd070713          	addi	a4,a4,-48
20400fec:	0ae67963          	bgeu	a2,a4,2040109e <_vfiprintf_r+0x1ae>
20400ff0:	cab5                	beqz	a3,20401064 <_vfiprintf_r+0x174>
20400ff2:	ce3e                	sw	a5,28(sp)
20400ff4:	a885                	j	20401064 <_vfiprintf_r+0x174>
20400ff6:	00004797          	auipc	a5,0x4
20400ffa:	36678793          	addi	a5,a5,870 # 2040535c <__sf_fake_stdout>
20400ffe:	00f49563          	bne	s1,a5,20401008 <_vfiprintf_r+0x118>
20401002:	0089a483          	lw	s1,8(s3)
20401006:	b70d                	j	20400f28 <_vfiprintf_r+0x38>
20401008:	00004797          	auipc	a5,0x4
2040100c:	31478793          	addi	a5,a5,788 # 2040531c <__sf_fake_stderr>
20401010:	f0f49ce3          	bne	s1,a5,20400f28 <_vfiprintf_r+0x38>
20401014:	00c9a483          	lw	s1,12(s3)
20401018:	bf01                	j	20400f28 <_vfiprintf_r+0x38>
2040101a:	85a6                	mv	a1,s1
2040101c:	854e                	mv	a0,s3
2040101e:	e58ff0ef          	jal	ra,20400676 <__swsetup_r>
20401022:	d909                	beqz	a0,20400f34 <_vfiprintf_r+0x44>
20401024:	557d                	li	a0,-1
20401026:	40fa                	lw	ra,156(sp)
20401028:	446a                	lw	s0,152(sp)
2040102a:	44da                	lw	s1,148(sp)
2040102c:	494a                	lw	s2,144(sp)
2040102e:	49ba                	lw	s3,140(sp)
20401030:	4a2a                	lw	s4,136(sp)
20401032:	4a9a                	lw	s5,132(sp)
20401034:	4b0a                	lw	s6,128(sp)
20401036:	5bf6                	lw	s7,124(sp)
20401038:	5c66                	lw	s8,120(sp)
2040103a:	5cd6                	lw	s9,116(sp)
2040103c:	610d                	addi	sp,sp,160
2040103e:	8082                	ret
20401040:	0405                	addi	s0,s0,1
20401042:	bf21                	j	20400f5a <_vfiprintf_r+0x6a>
20401044:	41550533          	sub	a0,a0,s5
20401048:	00ac1533          	sll	a0,s8,a0
2040104c:	8fc9                	or	a5,a5,a0
2040104e:	c83e                	sw	a5,16(sp)
20401050:	8922                	mv	s2,s0
20401052:	b7b1                	j	20400f9e <_vfiprintf_r+0xae>
20401054:	4732                	lw	a4,12(sp)
20401056:	00470693          	addi	a3,a4,4
2040105a:	4318                	lw	a4,0(a4)
2040105c:	c636                	sw	a3,12(sp)
2040105e:	02074963          	bltz	a4,20401090 <_vfiprintf_r+0x1a0>
20401062:	ce3a                	sw	a4,28(sp)
20401064:	00044703          	lbu	a4,0(s0)
20401068:	02e00793          	li	a5,46
2040106c:	04f71f63          	bne	a4,a5,204010ca <_vfiprintf_r+0x1da>
20401070:	00144703          	lbu	a4,1(s0)
20401074:	02a00793          	li	a5,42
20401078:	02f71b63          	bne	a4,a5,204010ae <_vfiprintf_r+0x1be>
2040107c:	47b2                	lw	a5,12(sp)
2040107e:	0409                	addi	s0,s0,2
20401080:	00478713          	addi	a4,a5,4
20401084:	439c                	lw	a5,0(a5)
20401086:	c63a                	sw	a4,12(sp)
20401088:	0207c163          	bltz	a5,204010aa <_vfiprintf_r+0x1ba>
2040108c:	ca3e                	sw	a5,20(sp)
2040108e:	a835                	j	204010ca <_vfiprintf_r+0x1da>
20401090:	40e00733          	neg	a4,a4
20401094:	0027e793          	ori	a5,a5,2
20401098:	ce3a                	sw	a4,28(sp)
2040109a:	c83e                	sw	a5,16(sp)
2040109c:	b7e1                	j	20401064 <_vfiprintf_r+0x174>
2040109e:	036787b3          	mul	a5,a5,s6
204010a2:	4685                	li	a3,1
204010a4:	842e                	mv	s0,a1
204010a6:	97ba                	add	a5,a5,a4
204010a8:	bf25                	j	20400fe0 <_vfiprintf_r+0xf0>
204010aa:	57fd                	li	a5,-1
204010ac:	b7c5                	j	2040108c <_vfiprintf_r+0x19c>
204010ae:	0405                	addi	s0,s0,1
204010b0:	ca02                	sw	zero,20(sp)
204010b2:	4681                	li	a3,0
204010b4:	4781                	li	a5,0
204010b6:	4625                	li	a2,9
204010b8:	00044703          	lbu	a4,0(s0)
204010bc:	00140593          	addi	a1,s0,1
204010c0:	fd070713          	addi	a4,a4,-48
204010c4:	06e67663          	bgeu	a2,a4,20401130 <_vfiprintf_r+0x240>
204010c8:	f2f1                	bnez	a3,2040108c <_vfiprintf_r+0x19c>
204010ca:	00044583          	lbu	a1,0(s0)
204010ce:	460d                	li	a2,3
204010d0:	00004517          	auipc	a0,0x4
204010d4:	2b450513          	addi	a0,a0,692 # 20405384 <__sf_fake_stdout+0x28>
204010d8:	2495                	jal	2040133c <memchr>
204010da:	cd11                	beqz	a0,204010f6 <_vfiprintf_r+0x206>
204010dc:	00004797          	auipc	a5,0x4
204010e0:	2a878793          	addi	a5,a5,680 # 20405384 <__sf_fake_stdout+0x28>
204010e4:	8d1d                	sub	a0,a0,a5
204010e6:	04000793          	li	a5,64
204010ea:	00a797b3          	sll	a5,a5,a0
204010ee:	4542                	lw	a0,16(sp)
204010f0:	0405                	addi	s0,s0,1
204010f2:	8d5d                	or	a0,a0,a5
204010f4:	c82a                	sw	a0,16(sp)
204010f6:	00044583          	lbu	a1,0(s0)
204010fa:	4619                	li	a2,6
204010fc:	00004517          	auipc	a0,0x4
20401100:	28c50513          	addi	a0,a0,652 # 20405388 <__sf_fake_stdout+0x2c>
20401104:	00140913          	addi	s2,s0,1
20401108:	02b10423          	sb	a1,40(sp)
2040110c:	2c05                	jal	2040133c <memchr>
2040110e:	c13d                	beqz	a0,20401174 <_vfiprintf_r+0x284>
20401110:	dfbff797          	auipc	a5,0xdfbff
20401114:	ef078793          	addi	a5,a5,-272 # 0 <__metal_boot_hart>
20401118:	e795                	bnez	a5,20401144 <_vfiprintf_r+0x254>
2040111a:	4742                	lw	a4,16(sp)
2040111c:	47b2                	lw	a5,12(sp)
2040111e:	10077713          	andi	a4,a4,256
20401122:	cf09                	beqz	a4,2040113c <_vfiprintf_r+0x24c>
20401124:	0791                	addi	a5,a5,4
20401126:	c63e                	sw	a5,12(sp)
20401128:	5792                	lw	a5,36(sp)
2040112a:	97d2                	add	a5,a5,s4
2040112c:	d23e                	sw	a5,36(sp)
2040112e:	b52d                	j	20400f58 <_vfiprintf_r+0x68>
20401130:	036787b3          	mul	a5,a5,s6
20401134:	4685                	li	a3,1
20401136:	842e                	mv	s0,a1
20401138:	97ba                	add	a5,a5,a4
2040113a:	bfbd                	j	204010b8 <_vfiprintf_r+0x1c8>
2040113c:	079d                	addi	a5,a5,7
2040113e:	9be1                	andi	a5,a5,-8
20401140:	07a1                	addi	a5,a5,8
20401142:	b7d5                	j	20401126 <_vfiprintf_r+0x236>
20401144:	0078                	addi	a4,sp,12
20401146:	00000697          	auipc	a3,0x0
2040114a:	d6868693          	addi	a3,a3,-664 # 20400eae <__sfputs_r>
2040114e:	8626                	mv	a2,s1
20401150:	080c                	addi	a1,sp,16
20401152:	854e                	mv	a0,s3
20401154:	00000097          	auipc	ra,0x0
20401158:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
2040115c:	57fd                	li	a5,-1
2040115e:	8a2a                	mv	s4,a0
20401160:	fcf514e3          	bne	a0,a5,20401128 <_vfiprintf_r+0x238>
20401164:	00c4d783          	lhu	a5,12(s1)
20401168:	0407f793          	andi	a5,a5,64
2040116c:	ea079ce3          	bnez	a5,20401024 <_vfiprintf_r+0x134>
20401170:	5512                	lw	a0,36(sp)
20401172:	bd55                	j	20401026 <_vfiprintf_r+0x136>
20401174:	0078                	addi	a4,sp,12
20401176:	00000697          	auipc	a3,0x0
2040117a:	d3868693          	addi	a3,a3,-712 # 20400eae <__sfputs_r>
2040117e:	8626                	mv	a2,s1
20401180:	080c                	addi	a1,sp,16
20401182:	854e                	mv	a0,s3
20401184:	24cd                	jal	20401466 <_printf_i>
20401186:	bfd9                	j	2040115c <_vfiprintf_r+0x26c>

20401188 <_sbrk_r>:
_sbrk_r():
20401188:	1141                	addi	sp,sp,-16
2040118a:	c422                	sw	s0,8(sp)
2040118c:	842a                	mv	s0,a0
2040118e:	852e                	mv	a0,a1
20401190:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401194:	c606                	sw	ra,12(sp)
20401196:	2da9                	jal	204017f0 <_sbrk>
20401198:	57fd                	li	a5,-1
2040119a:	00f51763          	bne	a0,a5,204011a8 <_sbrk_r+0x20>
2040119e:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
204011a2:	439c                	lw	a5,0(a5)
204011a4:	c391                	beqz	a5,204011a8 <_sbrk_r+0x20>
204011a6:	c01c                	sw	a5,0(s0)
204011a8:	40b2                	lw	ra,12(sp)
204011aa:	4422                	lw	s0,8(sp)
204011ac:	0141                	addi	sp,sp,16
204011ae:	8082                	ret

204011b0 <__sread>:
__sread():
204011b0:	1141                	addi	sp,sp,-16
204011b2:	c422                	sw	s0,8(sp)
204011b4:	842e                	mv	s0,a1
204011b6:	00e59583          	lh	a1,14(a1)
204011ba:	c606                	sw	ra,12(sp)
204011bc:	23b1                	jal	20401708 <_read_r>
204011be:	00054963          	bltz	a0,204011d0 <__sread+0x20>
204011c2:	487c                	lw	a5,84(s0)
204011c4:	97aa                	add	a5,a5,a0
204011c6:	c87c                	sw	a5,84(s0)
204011c8:	40b2                	lw	ra,12(sp)
204011ca:	4422                	lw	s0,8(sp)
204011cc:	0141                	addi	sp,sp,16
204011ce:	8082                	ret
204011d0:	00c45783          	lhu	a5,12(s0)
204011d4:	777d                	lui	a4,0xfffff
204011d6:	177d                	addi	a4,a4,-1
204011d8:	8ff9                	and	a5,a5,a4
204011da:	00f41623          	sh	a5,12(s0)
204011de:	b7ed                	j	204011c8 <__sread+0x18>

204011e0 <__swrite>:
__swrite():
204011e0:	00c5d783          	lhu	a5,12(a1)
204011e4:	1101                	addi	sp,sp,-32
204011e6:	cc22                	sw	s0,24(sp)
204011e8:	ca26                	sw	s1,20(sp)
204011ea:	c84a                	sw	s2,16(sp)
204011ec:	c64e                	sw	s3,12(sp)
204011ee:	ce06                	sw	ra,28(sp)
204011f0:	1007f793          	andi	a5,a5,256
204011f4:	84aa                	mv	s1,a0
204011f6:	842e                	mv	s0,a1
204011f8:	8932                	mv	s2,a2
204011fa:	89b6                	mv	s3,a3
204011fc:	c791                	beqz	a5,20401208 <__swrite+0x28>
204011fe:	00e59583          	lh	a1,14(a1)
20401202:	4689                	li	a3,2
20401204:	4601                	li	a2,0
20401206:	2229                	jal	20401310 <_lseek_r>
20401208:	00c45783          	lhu	a5,12(s0)
2040120c:	777d                	lui	a4,0xfffff
2040120e:	177d                	addi	a4,a4,-1
20401210:	8ff9                	and	a5,a5,a4
20401212:	00f41623          	sh	a5,12(s0)
20401216:	00e41583          	lh	a1,14(s0)
2040121a:	4462                	lw	s0,24(sp)
2040121c:	40f2                	lw	ra,28(sp)
2040121e:	86ce                	mv	a3,s3
20401220:	864a                	mv	a2,s2
20401222:	49b2                	lw	s3,12(sp)
20401224:	4942                	lw	s2,16(sp)
20401226:	8526                	mv	a0,s1
20401228:	44d2                	lw	s1,20(sp)
2040122a:	6105                	addi	sp,sp,32
2040122c:	a83d                	j	2040126a <_write_r>

2040122e <__sseek>:
__sseek():
2040122e:	1141                	addi	sp,sp,-16
20401230:	c422                	sw	s0,8(sp)
20401232:	842e                	mv	s0,a1
20401234:	00e59583          	lh	a1,14(a1)
20401238:	c606                	sw	ra,12(sp)
2040123a:	28d9                	jal	20401310 <_lseek_r>
2040123c:	57fd                	li	a5,-1
2040123e:	00c45703          	lhu	a4,12(s0)
20401242:	00f51b63          	bne	a0,a5,20401258 <__sseek+0x2a>
20401246:	77fd                	lui	a5,0xfffff
20401248:	17fd                	addi	a5,a5,-1
2040124a:	8ff9                	and	a5,a5,a4
2040124c:	00f41623          	sh	a5,12(s0)
20401250:	40b2                	lw	ra,12(sp)
20401252:	4422                	lw	s0,8(sp)
20401254:	0141                	addi	sp,sp,16
20401256:	8082                	ret
20401258:	6785                	lui	a5,0x1
2040125a:	8fd9                	or	a5,a5,a4
2040125c:	00f41623          	sh	a5,12(s0)
20401260:	c868                	sw	a0,84(s0)
20401262:	b7fd                	j	20401250 <__sseek+0x22>

20401264 <__sclose>:
__sclose():
20401264:	00e59583          	lh	a1,14(a1)
20401268:	a03d                	j	20401296 <_close_r>

2040126a <_write_r>:
_write_r():
2040126a:	1141                	addi	sp,sp,-16
2040126c:	c422                	sw	s0,8(sp)
2040126e:	842a                	mv	s0,a0
20401270:	852e                	mv	a0,a1
20401272:	85b2                	mv	a1,a2
20401274:	8636                	mv	a2,a3
20401276:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
2040127a:	c606                	sw	ra,12(sp)
2040127c:	23fd                	jal	2040186a <_write>
2040127e:	57fd                	li	a5,-1
20401280:	00f51763          	bne	a0,a5,2040128e <_write_r+0x24>
20401284:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401288:	439c                	lw	a5,0(a5)
2040128a:	c391                	beqz	a5,2040128e <_write_r+0x24>
2040128c:	c01c                	sw	a5,0(s0)
2040128e:	40b2                	lw	ra,12(sp)
20401290:	4422                	lw	s0,8(sp)
20401292:	0141                	addi	sp,sp,16
20401294:	8082                	ret

20401296 <_close_r>:
_close_r():
20401296:	1141                	addi	sp,sp,-16
20401298:	c422                	sw	s0,8(sp)
2040129a:	842a                	mv	s0,a0
2040129c:	852e                	mv	a0,a1
2040129e:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
204012a2:	c606                	sw	ra,12(sp)
204012a4:	2941                	jal	20401734 <_close>
204012a6:	57fd                	li	a5,-1
204012a8:	00f51763          	bne	a0,a5,204012b6 <_close_r+0x20>
204012ac:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
204012b0:	439c                	lw	a5,0(a5)
204012b2:	c391                	beqz	a5,204012b6 <_close_r+0x20>
204012b4:	c01c                	sw	a5,0(s0)
204012b6:	40b2                	lw	ra,12(sp)
204012b8:	4422                	lw	s0,8(sp)
204012ba:	0141                	addi	sp,sp,16
204012bc:	8082                	ret

204012be <_fstat_r>:
_fstat_r():
204012be:	1141                	addi	sp,sp,-16
204012c0:	c422                	sw	s0,8(sp)
204012c2:	842a                	mv	s0,a0
204012c4:	852e                	mv	a0,a1
204012c6:	85b2                	mv	a1,a2
204012c8:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
204012cc:	c606                	sw	ra,12(sp)
204012ce:	2161                	jal	20401756 <_fstat>
204012d0:	57fd                	li	a5,-1
204012d2:	00f51763          	bne	a0,a5,204012e0 <_fstat_r+0x22>
204012d6:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
204012da:	439c                	lw	a5,0(a5)
204012dc:	c391                	beqz	a5,204012e0 <_fstat_r+0x22>
204012de:	c01c                	sw	a5,0(s0)
204012e0:	40b2                	lw	ra,12(sp)
204012e2:	4422                	lw	s0,8(sp)
204012e4:	0141                	addi	sp,sp,16
204012e6:	8082                	ret

204012e8 <_isatty_r>:
_isatty_r():
204012e8:	1141                	addi	sp,sp,-16
204012ea:	c422                	sw	s0,8(sp)
204012ec:	842a                	mv	s0,a0
204012ee:	852e                	mv	a0,a1
204012f0:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
204012f4:	c606                	sw	ra,12(sp)
204012f6:	2159                	jal	2040177c <_isatty>
204012f8:	57fd                	li	a5,-1
204012fa:	00f51763          	bne	a0,a5,20401308 <_isatty_r+0x20>
204012fe:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401302:	439c                	lw	a5,0(a5)
20401304:	c391                	beqz	a5,20401308 <_isatty_r+0x20>
20401306:	c01c                	sw	a5,0(s0)
20401308:	40b2                	lw	ra,12(sp)
2040130a:	4422                	lw	s0,8(sp)
2040130c:	0141                	addi	sp,sp,16
2040130e:	8082                	ret

20401310 <_lseek_r>:
_lseek_r():
20401310:	1141                	addi	sp,sp,-16
20401312:	c422                	sw	s0,8(sp)
20401314:	842a                	mv	s0,a0
20401316:	852e                	mv	a0,a1
20401318:	85b2                	mv	a1,a2
2040131a:	8636                	mv	a2,a3
2040131c:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401320:	c606                	sw	ra,12(sp)
20401322:	29ad                	jal	2040179c <_lseek>
20401324:	57fd                	li	a5,-1
20401326:	00f51763          	bne	a0,a5,20401334 <_lseek_r+0x24>
2040132a:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
2040132e:	439c                	lw	a5,0(a5)
20401330:	c391                	beqz	a5,20401334 <_lseek_r+0x24>
20401332:	c01c                	sw	a5,0(s0)
20401334:	40b2                	lw	ra,12(sp)
20401336:	4422                	lw	s0,8(sp)
20401338:	0141                	addi	sp,sp,16
2040133a:	8082                	ret

2040133c <memchr>:
memchr():
2040133c:	0ff5f593          	andi	a1,a1,255
20401340:	962a                	add	a2,a2,a0
20401342:	00c51463          	bne	a0,a2,2040134a <memchr+0xe>
20401346:	4501                	li	a0,0
20401348:	8082                	ret
2040134a:	00054783          	lbu	a5,0(a0)
2040134e:	feb78de3          	beq	a5,a1,20401348 <memchr+0xc>
20401352:	0505                	addi	a0,a0,1
20401354:	b7fd                	j	20401342 <memchr+0x6>

20401356 <__malloc_lock>:
__malloc_lock():
20401356:	8082                	ret

20401358 <__malloc_unlock>:
__malloc_unlock():
20401358:	8082                	ret

2040135a <_printf_common>:
_printf_common():
2040135a:	7179                	addi	sp,sp,-48
2040135c:	ca56                	sw	s5,20(sp)
2040135e:	499c                	lw	a5,16(a1)
20401360:	8aba                	mv	s5,a4
20401362:	4598                	lw	a4,8(a1)
20401364:	d422                	sw	s0,40(sp)
20401366:	d226                	sw	s1,36(sp)
20401368:	ce4e                	sw	s3,28(sp)
2040136a:	cc52                	sw	s4,24(sp)
2040136c:	d606                	sw	ra,44(sp)
2040136e:	d04a                	sw	s2,32(sp)
20401370:	c85a                	sw	s6,16(sp)
20401372:	c65e                	sw	s7,12(sp)
20401374:	89aa                	mv	s3,a0
20401376:	842e                	mv	s0,a1
20401378:	84b2                	mv	s1,a2
2040137a:	8a36                	mv	s4,a3
2040137c:	00e7d363          	bge	a5,a4,20401382 <_printf_common+0x28>
20401380:	87ba                	mv	a5,a4
20401382:	c09c                	sw	a5,0(s1)
20401384:	04344703          	lbu	a4,67(s0)
20401388:	c319                	beqz	a4,2040138e <_printf_common+0x34>
2040138a:	0785                	addi	a5,a5,1
2040138c:	c09c                	sw	a5,0(s1)
2040138e:	401c                	lw	a5,0(s0)
20401390:	0207f793          	andi	a5,a5,32
20401394:	c781                	beqz	a5,2040139c <_printf_common+0x42>
20401396:	409c                	lw	a5,0(s1)
20401398:	0789                	addi	a5,a5,2
2040139a:	c09c                	sw	a5,0(s1)
2040139c:	00042903          	lw	s2,0(s0)
204013a0:	00697913          	andi	s2,s2,6
204013a4:	00091a63          	bnez	s2,204013b8 <_printf_common+0x5e>
204013a8:	01940b13          	addi	s6,s0,25
204013ac:	5bfd                	li	s7,-1
204013ae:	445c                	lw	a5,12(s0)
204013b0:	4098                	lw	a4,0(s1)
204013b2:	8f99                	sub	a5,a5,a4
204013b4:	04f94c63          	blt	s2,a5,2040140c <_printf_common+0xb2>
204013b8:	401c                	lw	a5,0(s0)
204013ba:	04344683          	lbu	a3,67(s0)
204013be:	0207f793          	andi	a5,a5,32
204013c2:	00d036b3          	snez	a3,a3
204013c6:	eba5                	bnez	a5,20401436 <_printf_common+0xdc>
204013c8:	04340613          	addi	a2,s0,67
204013cc:	85d2                	mv	a1,s4
204013ce:	854e                	mv	a0,s3
204013d0:	9a82                	jalr	s5
204013d2:	57fd                	li	a5,-1
204013d4:	04f50363          	beq	a0,a5,2040141a <_printf_common+0xc0>
204013d8:	401c                	lw	a5,0(s0)
204013da:	4611                	li	a2,4
204013dc:	4098                	lw	a4,0(s1)
204013de:	8b99                	andi	a5,a5,6
204013e0:	4454                	lw	a3,12(s0)
204013e2:	4481                	li	s1,0
204013e4:	00c79763          	bne	a5,a2,204013f2 <_printf_common+0x98>
204013e8:	40e684b3          	sub	s1,a3,a4
204013ec:	0004d363          	bgez	s1,204013f2 <_printf_common+0x98>
204013f0:	4481                	li	s1,0
204013f2:	441c                	lw	a5,8(s0)
204013f4:	4818                	lw	a4,16(s0)
204013f6:	00f75463          	bge	a4,a5,204013fe <_printf_common+0xa4>
204013fa:	8f99                	sub	a5,a5,a4
204013fc:	94be                	add	s1,s1,a5
204013fe:	4901                	li	s2,0
20401400:	0469                	addi	s0,s0,26
20401402:	5b7d                	li	s6,-1
20401404:	05249863          	bne	s1,s2,20401454 <_printf_common+0xfa>
20401408:	4501                	li	a0,0
2040140a:	a809                	j	2040141c <_printf_common+0xc2>
2040140c:	4685                	li	a3,1
2040140e:	865a                	mv	a2,s6
20401410:	85d2                	mv	a1,s4
20401412:	854e                	mv	a0,s3
20401414:	9a82                	jalr	s5
20401416:	01751e63          	bne	a0,s7,20401432 <_printf_common+0xd8>
2040141a:	557d                	li	a0,-1
2040141c:	50b2                	lw	ra,44(sp)
2040141e:	5422                	lw	s0,40(sp)
20401420:	5492                	lw	s1,36(sp)
20401422:	5902                	lw	s2,32(sp)
20401424:	49f2                	lw	s3,28(sp)
20401426:	4a62                	lw	s4,24(sp)
20401428:	4ad2                	lw	s5,20(sp)
2040142a:	4b42                	lw	s6,16(sp)
2040142c:	4bb2                	lw	s7,12(sp)
2040142e:	6145                	addi	sp,sp,48
20401430:	8082                	ret
20401432:	0905                	addi	s2,s2,1
20401434:	bfad                	j	204013ae <_printf_common+0x54>
20401436:	00d40733          	add	a4,s0,a3
2040143a:	03000613          	li	a2,48
2040143e:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffc46f>
20401442:	04544703          	lbu	a4,69(s0)
20401446:	00168793          	addi	a5,a3,1
2040144a:	97a2                	add	a5,a5,s0
2040144c:	0689                	addi	a3,a3,2
2040144e:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
20401452:	bf9d                	j	204013c8 <_printf_common+0x6e>
20401454:	4685                	li	a3,1
20401456:	8622                	mv	a2,s0
20401458:	85d2                	mv	a1,s4
2040145a:	854e                	mv	a0,s3
2040145c:	9a82                	jalr	s5
2040145e:	fb650ee3          	beq	a0,s6,2040141a <_printf_common+0xc0>
20401462:	0905                	addi	s2,s2,1
20401464:	b745                	j	20401404 <_printf_common+0xaa>

20401466 <_printf_i>:
_printf_i():
20401466:	7179                	addi	sp,sp,-48
20401468:	d422                	sw	s0,40(sp)
2040146a:	d226                	sw	s1,36(sp)
2040146c:	d04a                	sw	s2,32(sp)
2040146e:	ce4e                	sw	s3,28(sp)
20401470:	d606                	sw	ra,44(sp)
20401472:	cc52                	sw	s4,24(sp)
20401474:	ca56                	sw	s5,20(sp)
20401476:	c85a                	sw	s6,16(sp)
20401478:	89b6                	mv	s3,a3
2040147a:	0185c683          	lbu	a3,24(a1)
2040147e:	06e00793          	li	a5,110
20401482:	8932                	mv	s2,a2
20401484:	84aa                	mv	s1,a0
20401486:	842e                	mv	s0,a1
20401488:	04358613          	addi	a2,a1,67
2040148c:	1ef68063          	beq	a3,a5,2040166c <_printf_i+0x206>
20401490:	06d7e263          	bltu	a5,a3,204014f4 <_printf_i+0x8e>
20401494:	06300793          	li	a5,99
20401498:	0af68263          	beq	a3,a5,2040153c <_printf_i+0xd6>
2040149c:	00d7ed63          	bltu	a5,a3,204014b6 <_printf_i+0x50>
204014a0:	1e068a63          	beqz	a3,20401694 <_printf_i+0x22e>
204014a4:	05800793          	li	a5,88
204014a8:	16f68663          	beq	a3,a5,20401614 <_printf_i+0x1ae>
204014ac:	04240a93          	addi	s5,s0,66
204014b0:	04d40123          	sb	a3,66(s0)
204014b4:	a869                	j	2040154e <_printf_i+0xe8>
204014b6:	06400793          	li	a5,100
204014ba:	00f68663          	beq	a3,a5,204014c6 <_printf_i+0x60>
204014be:	06900793          	li	a5,105
204014c2:	fef695e3          	bne	a3,a5,204014ac <_printf_i+0x46>
204014c6:	401c                	lw	a5,0(s0)
204014c8:	4308                	lw	a0,0(a4)
204014ca:	0807f693          	andi	a3,a5,128
204014ce:	00450593          	addi	a1,a0,4
204014d2:	c2c1                	beqz	a3,20401552 <_printf_i+0xec>
204014d4:	411c                	lw	a5,0(a0)
204014d6:	c30c                	sw	a1,0(a4)
204014d8:	0007d863          	bgez	a5,204014e8 <_printf_i+0x82>
204014dc:	02d00713          	li	a4,45
204014e0:	40f007b3          	neg	a5,a5
204014e4:	04e401a3          	sb	a4,67(s0)
204014e8:	00004697          	auipc	a3,0x4
204014ec:	ea868693          	addi	a3,a3,-344 # 20405390 <__sf_fake_stdout+0x34>
204014f0:	4729                	li	a4,10
204014f2:	a065                	j	2040159a <_printf_i+0x134>
204014f4:	07300793          	li	a5,115
204014f8:	1af68263          	beq	a3,a5,2040169c <_printf_i+0x236>
204014fc:	00d7ef63          	bltu	a5,a3,2040151a <_printf_i+0xb4>
20401500:	06f00793          	li	a5,111
20401504:	04f68f63          	beq	a3,a5,20401562 <_printf_i+0xfc>
20401508:	07000793          	li	a5,112
2040150c:	faf690e3          	bne	a3,a5,204014ac <_printf_i+0x46>
20401510:	419c                	lw	a5,0(a1)
20401512:	0207e793          	ori	a5,a5,32
20401516:	c19c                	sw	a5,0(a1)
20401518:	a809                	j	2040152a <_printf_i+0xc4>
2040151a:	07500793          	li	a5,117
2040151e:	04f68263          	beq	a3,a5,20401562 <_printf_i+0xfc>
20401522:	07800793          	li	a5,120
20401526:	f8f693e3          	bne	a3,a5,204014ac <_printf_i+0x46>
2040152a:	07800793          	li	a5,120
2040152e:	04f402a3          	sb	a5,69(s0)
20401532:	00004697          	auipc	a3,0x4
20401536:	e7268693          	addi	a3,a3,-398 # 204053a4 <__sf_fake_stdout+0x48>
2040153a:	a0dd                	j	20401620 <_printf_i+0x1ba>
2040153c:	431c                	lw	a5,0(a4)
2040153e:	04258a93          	addi	s5,a1,66
20401542:	00478693          	addi	a3,a5,4
20401546:	439c                	lw	a5,0(a5)
20401548:	c314                	sw	a3,0(a4)
2040154a:	04f58123          	sb	a5,66(a1)
2040154e:	4785                	li	a5,1
20401550:	a2ad                	j	204016ba <_printf_i+0x254>
20401552:	0407f693          	andi	a3,a5,64
20401556:	411c                	lw	a5,0(a0)
20401558:	c30c                	sw	a1,0(a4)
2040155a:	debd                	beqz	a3,204014d8 <_printf_i+0x72>
2040155c:	07c2                	slli	a5,a5,0x10
2040155e:	87c1                	srai	a5,a5,0x10
20401560:	bfa5                	j	204014d8 <_printf_i+0x72>
20401562:	400c                	lw	a1,0(s0)
20401564:	431c                	lw	a5,0(a4)
20401566:	0805f813          	andi	a6,a1,128
2040156a:	00478513          	addi	a0,a5,4
2040156e:	00080563          	beqz	a6,20401578 <_printf_i+0x112>
20401572:	c308                	sw	a0,0(a4)
20401574:	439c                	lw	a5,0(a5)
20401576:	a039                	j	20401584 <_printf_i+0x11e>
20401578:	0405f593          	andi	a1,a1,64
2040157c:	c308                	sw	a0,0(a4)
2040157e:	d9fd                	beqz	a1,20401574 <_printf_i+0x10e>
20401580:	0007d783          	lhu	a5,0(a5)
20401584:	06f00713          	li	a4,111
20401588:	0ce68a63          	beq	a3,a4,2040165c <_printf_i+0x1f6>
2040158c:	00004697          	auipc	a3,0x4
20401590:	e0468693          	addi	a3,a3,-508 # 20405390 <__sf_fake_stdout+0x34>
20401594:	4729                	li	a4,10
20401596:	040401a3          	sb	zero,67(s0)
2040159a:	404c                	lw	a1,4(s0)
2040159c:	c40c                	sw	a1,8(s0)
2040159e:	0005c563          	bltz	a1,204015a8 <_printf_i+0x142>
204015a2:	4008                	lw	a0,0(s0)
204015a4:	996d                	andi	a0,a0,-5
204015a6:	c008                	sw	a0,0(s0)
204015a8:	e399                	bnez	a5,204015ae <_printf_i+0x148>
204015aa:	8ab2                	mv	s5,a2
204015ac:	cd91                	beqz	a1,204015c8 <_printf_i+0x162>
204015ae:	8ab2                	mv	s5,a2
204015b0:	02e7f5b3          	remu	a1,a5,a4
204015b4:	1afd                	addi	s5,s5,-1
204015b6:	95b6                	add	a1,a1,a3
204015b8:	0005c583          	lbu	a1,0(a1)
204015bc:	00ba8023          	sb	a1,0(s5)
204015c0:	02e7d5b3          	divu	a1,a5,a4
204015c4:	0ae7f263          	bgeu	a5,a4,20401668 <_printf_i+0x202>
204015c8:	47a1                	li	a5,8
204015ca:	00f71e63          	bne	a4,a5,204015e6 <_printf_i+0x180>
204015ce:	401c                	lw	a5,0(s0)
204015d0:	8b85                	andi	a5,a5,1
204015d2:	cb91                	beqz	a5,204015e6 <_printf_i+0x180>
204015d4:	4058                	lw	a4,4(s0)
204015d6:	481c                	lw	a5,16(s0)
204015d8:	00e7c763          	blt	a5,a4,204015e6 <_printf_i+0x180>
204015dc:	03000793          	li	a5,48
204015e0:	fefa8fa3          	sb	a5,-1(s5)
204015e4:	1afd                	addi	s5,s5,-1
204015e6:	41560633          	sub	a2,a2,s5
204015ea:	c810                	sw	a2,16(s0)
204015ec:	874e                	mv	a4,s3
204015ee:	86ca                	mv	a3,s2
204015f0:	0070                	addi	a2,sp,12
204015f2:	85a2                	mv	a1,s0
204015f4:	8526                	mv	a0,s1
204015f6:	3395                	jal	2040135a <_printf_common>
204015f8:	5a7d                	li	s4,-1
204015fa:	0d451463          	bne	a0,s4,204016c2 <_printf_i+0x25c>
204015fe:	557d                	li	a0,-1
20401600:	50b2                	lw	ra,44(sp)
20401602:	5422                	lw	s0,40(sp)
20401604:	5492                	lw	s1,36(sp)
20401606:	5902                	lw	s2,32(sp)
20401608:	49f2                	lw	s3,28(sp)
2040160a:	4a62                	lw	s4,24(sp)
2040160c:	4ad2                	lw	s5,20(sp)
2040160e:	4b42                	lw	s6,16(sp)
20401610:	6145                	addi	sp,sp,48
20401612:	8082                	ret
20401614:	04d582a3          	sb	a3,69(a1)
20401618:	00004697          	auipc	a3,0x4
2040161c:	d7868693          	addi	a3,a3,-648 # 20405390 <__sf_fake_stdout+0x34>
20401620:	400c                	lw	a1,0(s0)
20401622:	4308                	lw	a0,0(a4)
20401624:	0805f813          	andi	a6,a1,128
20401628:	411c                	lw	a5,0(a0)
2040162a:	0511                	addi	a0,a0,4
2040162c:	02080063          	beqz	a6,2040164c <_printf_i+0x1e6>
20401630:	c308                	sw	a0,0(a4)
20401632:	0015f713          	andi	a4,a1,1
20401636:	c701                	beqz	a4,2040163e <_printf_i+0x1d8>
20401638:	0205e593          	ori	a1,a1,32
2040163c:	c00c                	sw	a1,0(s0)
2040163e:	4741                	li	a4,16
20401640:	fbb9                	bnez	a5,20401596 <_printf_i+0x130>
20401642:	400c                	lw	a1,0(s0)
20401644:	fdf5f593          	andi	a1,a1,-33
20401648:	c00c                	sw	a1,0(s0)
2040164a:	b7b1                	j	20401596 <_printf_i+0x130>
2040164c:	0405f813          	andi	a6,a1,64
20401650:	c308                	sw	a0,0(a4)
20401652:	fe0800e3          	beqz	a6,20401632 <_printf_i+0x1cc>
20401656:	07c2                	slli	a5,a5,0x10
20401658:	83c1                	srli	a5,a5,0x10
2040165a:	bfe1                	j	20401632 <_printf_i+0x1cc>
2040165c:	00004697          	auipc	a3,0x4
20401660:	d3468693          	addi	a3,a3,-716 # 20405390 <__sf_fake_stdout+0x34>
20401664:	4721                	li	a4,8
20401666:	bf05                	j	20401596 <_printf_i+0x130>
20401668:	87ae                	mv	a5,a1
2040166a:	b799                	j	204015b0 <_printf_i+0x14a>
2040166c:	4194                	lw	a3,0(a1)
2040166e:	431c                	lw	a5,0(a4)
20401670:	49cc                	lw	a1,20(a1)
20401672:	0806f813          	andi	a6,a3,128
20401676:	00478513          	addi	a0,a5,4
2040167a:	00080663          	beqz	a6,20401686 <_printf_i+0x220>
2040167e:	c308                	sw	a0,0(a4)
20401680:	439c                	lw	a5,0(a5)
20401682:	c38c                	sw	a1,0(a5)
20401684:	a801                	j	20401694 <_printf_i+0x22e>
20401686:	c308                	sw	a0,0(a4)
20401688:	0406f693          	andi	a3,a3,64
2040168c:	439c                	lw	a5,0(a5)
2040168e:	daf5                	beqz	a3,20401682 <_printf_i+0x21c>
20401690:	00b79023          	sh	a1,0(a5)
20401694:	00042823          	sw	zero,16(s0)
20401698:	8ab2                	mv	s5,a2
2040169a:	bf89                	j	204015ec <_printf_i+0x186>
2040169c:	431c                	lw	a5,0(a4)
2040169e:	41d0                	lw	a2,4(a1)
204016a0:	4581                	li	a1,0
204016a2:	00478693          	addi	a3,a5,4
204016a6:	c314                	sw	a3,0(a4)
204016a8:	0007aa83          	lw	s5,0(a5)
204016ac:	8556                	mv	a0,s5
204016ae:	3179                	jal	2040133c <memchr>
204016b0:	c501                	beqz	a0,204016b8 <_printf_i+0x252>
204016b2:	41550533          	sub	a0,a0,s5
204016b6:	c048                	sw	a0,4(s0)
204016b8:	405c                	lw	a5,4(s0)
204016ba:	c81c                	sw	a5,16(s0)
204016bc:	040401a3          	sb	zero,67(s0)
204016c0:	b735                	j	204015ec <_printf_i+0x186>
204016c2:	4814                	lw	a3,16(s0)
204016c4:	8656                	mv	a2,s5
204016c6:	85ca                	mv	a1,s2
204016c8:	8526                	mv	a0,s1
204016ca:	9982                	jalr	s3
204016cc:	f34509e3          	beq	a0,s4,204015fe <_printf_i+0x198>
204016d0:	401c                	lw	a5,0(s0)
204016d2:	8b89                	andi	a5,a5,2
204016d4:	e78d                	bnez	a5,204016fe <_printf_i+0x298>
204016d6:	47b2                	lw	a5,12(sp)
204016d8:	4448                	lw	a0,12(s0)
204016da:	f2f553e3          	bge	a0,a5,20401600 <_printf_i+0x19a>
204016de:	853e                	mv	a0,a5
204016e0:	b705                	j	20401600 <_printf_i+0x19a>
204016e2:	4685                	li	a3,1
204016e4:	8656                	mv	a2,s5
204016e6:	85ca                	mv	a1,s2
204016e8:	8526                	mv	a0,s1
204016ea:	9982                	jalr	s3
204016ec:	f16509e3          	beq	a0,s6,204015fe <_printf_i+0x198>
204016f0:	0a05                	addi	s4,s4,1
204016f2:	445c                	lw	a5,12(s0)
204016f4:	4732                	lw	a4,12(sp)
204016f6:	8f99                	sub	a5,a5,a4
204016f8:	fefa45e3          	blt	s4,a5,204016e2 <_printf_i+0x27c>
204016fc:	bfe9                	j	204016d6 <_printf_i+0x270>
204016fe:	4a01                	li	s4,0
20401700:	01940a93          	addi	s5,s0,25
20401704:	5b7d                	li	s6,-1
20401706:	b7f5                	j	204016f2 <_printf_i+0x28c>

20401708 <_read_r>:
_read_r():
20401708:	1141                	addi	sp,sp,-16
2040170a:	c422                	sw	s0,8(sp)
2040170c:	842a                	mv	s0,a0
2040170e:	852e                	mv	a0,a1
20401710:	85b2                	mv	a1,a2
20401712:	8636                	mv	a2,a3
20401714:	0c01a423          	sw	zero,200(gp) # 80001fd0 <errno>
20401718:	c606                	sw	ra,12(sp)
2040171a:	2075                	jal	204017c6 <_read>
2040171c:	57fd                	li	a5,-1
2040171e:	00f51763          	bne	a0,a5,2040172c <_read_r+0x24>
20401722:	0c818793          	addi	a5,gp,200 # 80001fd0 <errno>
20401726:	439c                	lw	a5,0(a5)
20401728:	c391                	beqz	a5,2040172c <_read_r+0x24>
2040172a:	c01c                	sw	a5,0(s0)
2040172c:	40b2                	lw	ra,12(sp)
2040172e:	4422                	lw	s0,8(sp)
20401730:	0141                	addi	sp,sp,16
20401732:	8082                	ret

20401734 <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401734:	1101                	addi	sp,sp,-32
20401736:	ce06                	sw	ra,28(sp)
20401738:	cc22                	sw	s0,24(sp)
2040173a:	1000                	addi	s0,sp,32
2040173c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401740:	224d                	jal	204018e2 <__errno>
20401742:	872a                	mv	a4,a0
20401744:	05800793          	li	a5,88
20401748:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
2040174a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
2040174c:	853e                	mv	a0,a5
2040174e:	40f2                	lw	ra,28(sp)
20401750:	4462                	lw	s0,24(sp)
20401752:	6105                	addi	sp,sp,32
20401754:	8082                	ret

20401756 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401756:	1101                	addi	sp,sp,-32
20401758:	ce06                	sw	ra,28(sp)
2040175a:	cc22                	sw	s0,24(sp)
2040175c:	1000                	addi	s0,sp,32
2040175e:	fea42623          	sw	a0,-20(s0)
20401762:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401766:	2ab5                	jal	204018e2 <__errno>
20401768:	872a                	mv	a4,a0
2040176a:	fa800793          	li	a5,-88
2040176e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401770:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401772:	853e                	mv	a0,a5
20401774:	40f2                	lw	ra,28(sp)
20401776:	4462                	lw	s0,24(sp)
20401778:	6105                	addi	sp,sp,32
2040177a:	8082                	ret

2040177c <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
2040177c:	1101                	addi	sp,sp,-32
2040177e:	ce22                	sw	s0,28(sp)
20401780:	1000                	addi	s0,sp,32
20401782:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401786:	fec42783          	lw	a5,-20(s0)
2040178a:	17fd                	addi	a5,a5,-1
2040178c:	0017b793          	seqz	a5,a5
20401790:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401794:	853e                	mv	a0,a5
20401796:	4472                	lw	s0,28(sp)
20401798:	6105                	addi	sp,sp,32
2040179a:	8082                	ret

2040179c <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
2040179c:	1101                	addi	sp,sp,-32
2040179e:	ce06                	sw	ra,28(sp)
204017a0:	cc22                	sw	s0,24(sp)
204017a2:	1000                	addi	s0,sp,32
204017a4:	fea42623          	sw	a0,-20(s0)
204017a8:	feb42423          	sw	a1,-24(s0)
204017ac:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
204017b0:	2a0d                	jal	204018e2 <__errno>
204017b2:	872a                	mv	a4,a0
204017b4:	05800793          	li	a5,88
204017b8:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
204017ba:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
204017bc:	853e                	mv	a0,a5
204017be:	40f2                	lw	ra,28(sp)
204017c0:	4462                	lw	s0,24(sp)
204017c2:	6105                	addi	sp,sp,32
204017c4:	8082                	ret

204017c6 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
204017c6:	1101                	addi	sp,sp,-32
204017c8:	ce06                	sw	ra,28(sp)
204017ca:	cc22                	sw	s0,24(sp)
204017cc:	1000                	addi	s0,sp,32
204017ce:	fea42623          	sw	a0,-20(s0)
204017d2:	feb42423          	sw	a1,-24(s0)
204017d6:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
204017da:	2221                	jal	204018e2 <__errno>
204017dc:	872a                	mv	a4,a0
204017de:	05800793          	li	a5,88
204017e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
204017e4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
204017e6:	853e                	mv	a0,a5
204017e8:	40f2                	lw	ra,28(sp)
204017ea:	4462                	lw	s0,24(sp)
204017ec:	6105                	addi	sp,sp,32
204017ee:	8082                	ret

204017f0 <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
204017f0:	7179                	addi	sp,sp,-48
204017f2:	d622                	sw	s0,44(sp)
204017f4:	1800                	addi	s0,sp,48
204017f6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
204017fa:	800017b7          	lui	a5,0x80001
204017fe:	7107a783          	lw	a5,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
20401802:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401806:	4cc18713          	addi	a4,gp,1228 # 800023d4 <_sp>
2040180a:	800037b7          	lui	a5,0x80003
2040180e:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
20401812:	00f71463          	bne	a4,a5,2040181a <_sbrk+0x2a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401816:	57fd                	li	a5,-1
20401818:	a0a9                	j	20401862 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
2040181a:	800017b7          	lui	a5,0x80001
2040181e:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
20401822:	fdc42783          	lw	a5,-36(s0)
20401826:	973e                	add	a4,a4,a5
20401828:	800037b7          	lui	a5,0x80003
2040182c:	bd478793          	addi	a5,a5,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
20401830:	02f77063          	bgeu	a4,a5,20401850 <_sbrk+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401834:	800017b7          	lui	a5,0x80001
20401838:	7107a703          	lw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
2040183c:	fdc42783          	lw	a5,-36(s0)
20401840:	973e                	add	a4,a4,a5
20401842:	800017b7          	lui	a5,0x80001
20401846:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
2040184a:	fec42783          	lw	a5,-20(s0)
2040184e:	a811                	j	20401862 <_sbrk+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401850:	800017b7          	lui	a5,0x80001
20401854:	80003737          	lui	a4,0x80003
20401858:	bd470713          	addi	a4,a4,-1068 # 80002bd4 <metal_segment_heap_target_end+0x0>
2040185c:	70e7a823          	sw	a4,1808(a5) # 80001710 <metal_segment_heap_target_end+0xffffeb3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401860:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401862:	853e                	mv	a0,a5
20401864:	5432                	lw	s0,44(sp)
20401866:	6145                	addi	sp,sp,48
20401868:	8082                	ret

2040186a <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
2040186a:	7179                	addi	sp,sp,-48
2040186c:	d606                	sw	ra,44(sp)
2040186e:	d422                	sw	s0,40(sp)
20401870:	1800                	addi	s0,sp,48
20401872:	fca42e23          	sw	a0,-36(s0)
20401876:	fcb42c23          	sw	a1,-40(s0)
2040187a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
2040187e:	fdc42703          	lw	a4,-36(s0)
20401882:	4785                	li	a5,1
20401884:	00f70963          	beq	a4,a5,20401896 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401888:	28a9                	jal	204018e2 <__errno>
2040188a:	872a                	mv	a4,a0
2040188c:	05800793          	li	a5,88
20401890:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401892:	57fd                	li	a5,-1
20401894:	a82d                	j	204018ce <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401896:	fd842783          	lw	a5,-40(s0)
2040189a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
2040189e:	fe042623          	sw	zero,-20(s0)
204018a2:	a839                	j	204018c0 <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
204018a4:	fe842703          	lw	a4,-24(s0)
204018a8:	fec42783          	lw	a5,-20(s0)
204018ac:	97ba                	add	a5,a5,a4
204018ae:	0007c783          	lbu	a5,0(a5)
204018b2:	853e                	mv	a0,a5
204018b4:	2c91                	jal	20401b08 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
204018b6:	fec42783          	lw	a5,-20(s0)
204018ba:	0785                	addi	a5,a5,1
204018bc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
204018c0:	fec42703          	lw	a4,-20(s0)
204018c4:	fd442783          	lw	a5,-44(s0)
204018c8:	fcf76ee3          	bltu	a4,a5,204018a4 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
204018cc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
204018ce:	853e                	mv	a0,a5
204018d0:	50b2                	lw	ra,44(sp)
204018d2:	5422                	lw	s0,40(sp)
204018d4:	6145                	addi	sp,sp,48
204018d6:	8082                	ret

204018d8 <atexit>:
atexit():
204018d8:	85aa                	mv	a1,a0
204018da:	4681                	li	a3,0
204018dc:	4601                	li	a2,0
204018de:	4501                	li	a0,0
204018e0:	a8f1                	j	204019bc <__register_exitproc>

204018e2 <__errno>:
__errno():
204018e2:	5fc00797          	auipc	a5,0x5fc00
204018e6:	e2678793          	addi	a5,a5,-474 # 80001708 <_impure_ptr>
204018ea:	4388                	lw	a0,0(a5)
204018ec:	8082                	ret

204018ee <exit>:
exit():
204018ee:	1141                	addi	sp,sp,-16
204018f0:	c422                	sw	s0,8(sp)
204018f2:	c606                	sw	ra,12(sp)
204018f4:	00000797          	auipc	a5,0x0
204018f8:	14c78793          	addi	a5,a5,332 # 20401a40 <__call_exitprocs>
204018fc:	842a                	mv	s0,a0
204018fe:	c399                	beqz	a5,20401904 <exit+0x16>
20401900:	4581                	li	a1,0
20401902:	2a3d                	jal	20401a40 <__call_exitprocs>
20401904:	5fc00797          	auipc	a5,0x5fc00
20401908:	e0878793          	addi	a5,a5,-504 # 8000170c <_global_impure_ptr>
2040190c:	4388                	lw	a0,0(a5)
2040190e:	551c                	lw	a5,40(a0)
20401910:	c391                	beqz	a5,20401914 <exit+0x26>
20401912:	9782                	jalr	a5
20401914:	8522                	mv	a0,s0
20401916:	059030ef          	jal	ra,2040516e <_exit>

2040191a <__libc_fini_array>:
__libc_fini_array():
2040191a:	1141                	addi	sp,sp,-16
2040191c:	00004797          	auipc	a5,0x4
20401920:	df078793          	addi	a5,a5,-528 # 2040570c <__fini_array_end>
20401924:	c422                	sw	s0,8(sp)
20401926:	00004417          	auipc	s0,0x4
2040192a:	de640413          	addi	s0,s0,-538 # 2040570c <__fini_array_end>
2040192e:	8c1d                	sub	s0,s0,a5
20401930:	c226                	sw	s1,4(sp)
20401932:	c606                	sw	ra,12(sp)
20401934:	8409                	srai	s0,s0,0x2
20401936:	84be                	mv	s1,a5
20401938:	e411                	bnez	s0,20401944 <__libc_fini_array+0x2a>
2040193a:	40b2                	lw	ra,12(sp)
2040193c:	4422                	lw	s0,8(sp)
2040193e:	4492                	lw	s1,4(sp)
20401940:	0141                	addi	sp,sp,16
20401942:	8082                	ret
20401944:	147d                	addi	s0,s0,-1
20401946:	00241793          	slli	a5,s0,0x2
2040194a:	97a6                	add	a5,a5,s1
2040194c:	439c                	lw	a5,0(a5)
2040194e:	9782                	jalr	a5
20401950:	b7e5                	j	20401938 <__libc_fini_array+0x1e>

20401952 <__libc_init_array>:
__libc_init_array():
20401952:	1141                	addi	sp,sp,-16
20401954:	00004797          	auipc	a5,0x4
20401958:	db478793          	addi	a5,a5,-588 # 20405708 <__init_array_start>
2040195c:	c422                	sw	s0,8(sp)
2040195e:	00004417          	auipc	s0,0x4
20401962:	daa40413          	addi	s0,s0,-598 # 20405708 <__init_array_start>
20401966:	8c1d                	sub	s0,s0,a5
20401968:	c226                	sw	s1,4(sp)
2040196a:	c04a                	sw	s2,0(sp)
2040196c:	c606                	sw	ra,12(sp)
2040196e:	8409                	srai	s0,s0,0x2
20401970:	4481                	li	s1,0
20401972:	893e                	mv	s2,a5
20401974:	02849663          	bne	s1,s0,204019a0 <__libc_init_array+0x4e>
20401978:	00004797          	auipc	a5,0x4
2040197c:	d9078793          	addi	a5,a5,-624 # 20405708 <__init_array_start>
20401980:	00004417          	auipc	s0,0x4
20401984:	d8c40413          	addi	s0,s0,-628 # 2040570c <__fini_array_end>
20401988:	8c1d                	sub	s0,s0,a5
2040198a:	8409                	srai	s0,s0,0x2
2040198c:	4481                	li	s1,0
2040198e:	893e                	mv	s2,a5
20401990:	00849f63          	bne	s1,s0,204019ae <__libc_init_array+0x5c>
20401994:	40b2                	lw	ra,12(sp)
20401996:	4422                	lw	s0,8(sp)
20401998:	4492                	lw	s1,4(sp)
2040199a:	4902                	lw	s2,0(sp)
2040199c:	0141                	addi	sp,sp,16
2040199e:	8082                	ret
204019a0:	00249793          	slli	a5,s1,0x2
204019a4:	97ca                	add	a5,a5,s2
204019a6:	439c                	lw	a5,0(a5)
204019a8:	0485                	addi	s1,s1,1
204019aa:	9782                	jalr	a5
204019ac:	b7e1                	j	20401974 <__libc_init_array+0x22>
204019ae:	00249793          	slli	a5,s1,0x2
204019b2:	97ca                	add	a5,a5,s2
204019b4:	439c                	lw	a5,0(a5)
204019b6:	0485                	addi	s1,s1,1
204019b8:	9782                	jalr	a5
204019ba:	bfd9                	j	20401990 <__libc_init_array+0x3e>

204019bc <__register_exitproc>:
__register_exitproc():
204019bc:	5fc00797          	auipc	a5,0x5fc00
204019c0:	d7c78793          	addi	a5,a5,-644 # 80001738 <_global_atexit>
204019c4:	439c                	lw	a5,0(a5)
204019c6:	8e2a                	mv	t3,a0
204019c8:	e38d                	bnez	a5,204019ea <__register_exitproc+0x2e>
204019ca:	03c18713          	addi	a4,gp,60 # 80001f44 <_global_atexit0>
204019ce:	5fc00797          	auipc	a5,0x5fc00
204019d2:	d6e7a523          	sw	a4,-662(a5) # 80001738 <_global_atexit>
204019d6:	dfbfe517          	auipc	a0,0xdfbfe
204019da:	62a50513          	addi	a0,a0,1578 # 0 <__metal_boot_hart>
204019de:	87ba                	mv	a5,a4
204019e0:	c509                	beqz	a0,204019ea <__register_exitproc+0x2e>
204019e2:	411c                	lw	a5,0(a0)
204019e4:	0cf1a223          	sw	a5,196(gp) # 80001fcc <_global_atexit0+0x88>
204019e8:	87ba                	mv	a5,a4
204019ea:	43d8                	lw	a4,4(a5)
204019ec:	487d                	li	a6,31
204019ee:	557d                	li	a0,-1
204019f0:	04e84763          	blt	a6,a4,20401a3e <__register_exitproc+0x82>
204019f4:	020e0e63          	beqz	t3,20401a30 <__register_exitproc+0x74>
204019f8:	0887a803          	lw	a6,136(a5)
204019fc:	04080163          	beqz	a6,20401a3e <__register_exitproc+0x82>
20401a00:	00271893          	slli	a7,a4,0x2
20401a04:	98c2                	add	a7,a7,a6
20401a06:	00c8a023          	sw	a2,0(a7)
20401a0a:	10082303          	lw	t1,256(a6)
20401a0e:	4605                	li	a2,1
20401a10:	00e61633          	sll	a2,a2,a4
20401a14:	00c36333          	or	t1,t1,a2
20401a18:	10682023          	sw	t1,256(a6)
20401a1c:	08d8a023          	sw	a3,128(a7)
20401a20:	4689                	li	a3,2
20401a22:	00de1763          	bne	t3,a3,20401a30 <__register_exitproc+0x74>
20401a26:	10482683          	lw	a3,260(a6)
20401a2a:	8e55                	or	a2,a2,a3
20401a2c:	10c82223          	sw	a2,260(a6)
20401a30:	00170693          	addi	a3,a4,1
20401a34:	070a                	slli	a4,a4,0x2
20401a36:	c3d4                	sw	a3,4(a5)
20401a38:	97ba                	add	a5,a5,a4
20401a3a:	c78c                	sw	a1,8(a5)
20401a3c:	4501                	li	a0,0
20401a3e:	8082                	ret

20401a40 <__call_exitprocs>:
__call_exitprocs():
20401a40:	7179                	addi	sp,sp,-48
20401a42:	cc52                	sw	s4,24(sp)
20401a44:	ca56                	sw	s5,20(sp)
20401a46:	c85a                	sw	s6,16(sp)
20401a48:	c65e                	sw	s7,12(sp)
20401a4a:	d606                	sw	ra,44(sp)
20401a4c:	d422                	sw	s0,40(sp)
20401a4e:	d226                	sw	s1,36(sp)
20401a50:	d04a                	sw	s2,32(sp)
20401a52:	ce4e                	sw	s3,28(sp)
20401a54:	c462                	sw	s8,8(sp)
20401a56:	8b2a                	mv	s6,a0
20401a58:	8a2e                	mv	s4,a1
20401a5a:	5fc00a97          	auipc	s5,0x5fc00
20401a5e:	cdea8a93          	addi	s5,s5,-802 # 80001738 <_global_atexit>
20401a62:	4b85                	li	s7,1
20401a64:	000aa403          	lw	s0,0(s5)
20401a68:	c811                	beqz	s0,20401a7c <__call_exitprocs+0x3c>
20401a6a:	4044                	lw	s1,4(s0)
20401a6c:	08842983          	lw	s3,136(s0)
20401a70:	fff48913          	addi	s2,s1,-1
20401a74:	048a                	slli	s1,s1,0x2
20401a76:	94a2                	add	s1,s1,s0
20401a78:	00095e63          	bgez	s2,20401a94 <__call_exitprocs+0x54>
20401a7c:	50b2                	lw	ra,44(sp)
20401a7e:	5422                	lw	s0,40(sp)
20401a80:	5492                	lw	s1,36(sp)
20401a82:	5902                	lw	s2,32(sp)
20401a84:	49f2                	lw	s3,28(sp)
20401a86:	4a62                	lw	s4,24(sp)
20401a88:	4ad2                	lw	s5,20(sp)
20401a8a:	4b42                	lw	s6,16(sp)
20401a8c:	4bb2                	lw	s7,12(sp)
20401a8e:	4c22                	lw	s8,8(sp)
20401a90:	6145                	addi	sp,sp,48
20401a92:	8082                	ret
20401a94:	000a0e63          	beqz	s4,20401ab0 <__call_exitprocs+0x70>
20401a98:	00099563          	bnez	s3,20401aa2 <__call_exitprocs+0x62>
20401a9c:	197d                	addi	s2,s2,-1
20401a9e:	14f1                	addi	s1,s1,-4
20401aa0:	bfe1                	j	20401a78 <__call_exitprocs+0x38>
20401aa2:	00291793          	slli	a5,s2,0x2
20401aa6:	97ce                	add	a5,a5,s3
20401aa8:	0807a783          	lw	a5,128(a5)
20401aac:	ff4798e3          	bne	a5,s4,20401a9c <__call_exitprocs+0x5c>
20401ab0:	4058                	lw	a4,4(s0)
20401ab2:	40dc                	lw	a5,4(s1)
20401ab4:	177d                	addi	a4,a4,-1
20401ab6:	03271863          	bne	a4,s2,20401ae6 <__call_exitprocs+0xa6>
20401aba:	01242223          	sw	s2,4(s0)
20401abe:	dff9                	beqz	a5,20401a9c <__call_exitprocs+0x5c>
20401ac0:	00442c03          	lw	s8,4(s0)
20401ac4:	00098863          	beqz	s3,20401ad4 <__call_exitprocs+0x94>
20401ac8:	1009a683          	lw	a3,256(s3)
20401acc:	012b9733          	sll	a4,s7,s2
20401ad0:	8ef9                	and	a3,a3,a4
20401ad2:	ee89                	bnez	a3,20401aec <__call_exitprocs+0xac>
20401ad4:	9782                	jalr	a5
20401ad6:	4058                	lw	a4,4(s0)
20401ad8:	000aa783          	lw	a5,0(s5)
20401adc:	f98714e3          	bne	a4,s8,20401a64 <__call_exitprocs+0x24>
20401ae0:	faf40ee3          	beq	s0,a5,20401a9c <__call_exitprocs+0x5c>
20401ae4:	b741                	j	20401a64 <__call_exitprocs+0x24>
20401ae6:	0004a223          	sw	zero,4(s1)
20401aea:	bfd1                	j	20401abe <__call_exitprocs+0x7e>
20401aec:	00291693          	slli	a3,s2,0x2
20401af0:	96ce                	add	a3,a3,s3
20401af2:	428c                	lw	a1,0(a3)
20401af4:	1049a683          	lw	a3,260(s3)
20401af8:	8f75                	and	a4,a4,a3
20401afa:	e701                	bnez	a4,20401b02 <__call_exitprocs+0xc2>
20401afc:	855a                	mv	a0,s6
20401afe:	9782                	jalr	a5
20401b00:	bfd9                	j	20401ad6 <__call_exitprocs+0x96>
20401b02:	852e                	mv	a0,a1
20401b04:	9782                	jalr	a5
20401b06:	bfc1                	j	20401ad6 <__call_exitprocs+0x96>

20401b08 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401b08:	1101                	addi	sp,sp,-32
20401b0a:	ce06                	sw	ra,28(sp)
20401b0c:	cc22                	sw	s0,24(sp)
20401b0e:	1000                	addi	s0,sp,32
20401b10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401b14:	fec42703          	lw	a4,-20(s0)
20401b18:	47a9                	li	a5,10
20401b1a:	00f71463          	bne	a4,a5,20401b22 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401b1e:	4535                	li	a0,13
20401b20:	2811                	jal	20401b34 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401b22:	fec42503          	lw	a0,-20(s0)
20401b26:	2039                	jal	20401b34 <metal_tty_putc_raw>
20401b28:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401b2a:	853e                	mv	a0,a5
20401b2c:	40f2                	lw	ra,28(sp)
20401b2e:	4462                	lw	s0,24(sp)
20401b30:	6105                	addi	sp,sp,32
20401b32:	8082                	ret

20401b34 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401b34:	1101                	addi	sp,sp,-32
20401b36:	ce06                	sw	ra,28(sp)
20401b38:	cc22                	sw	s0,24(sp)
20401b3a:	1000                	addi	s0,sp,32
20401b3c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401b40:	fec42583          	lw	a1,-20(s0)
20401b44:	800017b7          	lui	a5,0x80001
20401b48:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20401b4c:	28b1                	jal	20401ba8 <metal_uart_putc>
20401b4e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401b50:	853e                	mv	a0,a5
20401b52:	40f2                	lw	ra,28(sp)
20401b54:	4462                	lw	s0,24(sp)
20401b56:	6105                	addi	sp,sp,32
20401b58:	8082                	ret

20401b5a <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401b5a:	1141                	addi	sp,sp,-16
20401b5c:	c606                	sw	ra,12(sp)
20401b5e:	c422                	sw	s0,8(sp)
20401b60:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401b62:	67f1                	lui	a5,0x1c
20401b64:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401b68:	800017b7          	lui	a5,0x80001
20401b6c:	6e878513          	addi	a0,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20401b70:	2031                	jal	20401b7c <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401b72:	0001                	nop
20401b74:	40b2                	lw	ra,12(sp)
20401b76:	4422                	lw	s0,8(sp)
20401b78:	0141                	addi	sp,sp,16
20401b7a:	8082                	ret

20401b7c <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401b7c:	1101                	addi	sp,sp,-32
20401b7e:	ce06                	sw	ra,28(sp)
20401b80:	cc22                	sw	s0,24(sp)
20401b82:	1000                	addi	s0,sp,32
20401b84:	fea42623          	sw	a0,-20(s0)
20401b88:	feb42423          	sw	a1,-24(s0)
20401b8c:	fec42783          	lw	a5,-20(s0)
20401b90:	439c                	lw	a5,0(a5)
20401b92:	439c                	lw	a5,0(a5)
20401b94:	fe842583          	lw	a1,-24(s0)
20401b98:	fec42503          	lw	a0,-20(s0)
20401b9c:	9782                	jalr	a5
20401b9e:	0001                	nop
20401ba0:	40f2                	lw	ra,28(sp)
20401ba2:	4462                	lw	s0,24(sp)
20401ba4:	6105                	addi	sp,sp,32
20401ba6:	8082                	ret

20401ba8 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401ba8:	1101                	addi	sp,sp,-32
20401baa:	ce06                	sw	ra,28(sp)
20401bac:	cc22                	sw	s0,24(sp)
20401bae:	1000                	addi	s0,sp,32
20401bb0:	fea42623          	sw	a0,-20(s0)
20401bb4:	feb42423          	sw	a1,-24(s0)
20401bb8:	fec42783          	lw	a5,-20(s0)
20401bbc:	439c                	lw	a5,0(a5)
20401bbe:	43dc                	lw	a5,4(a5)
20401bc0:	fe842583          	lw	a1,-24(s0)
20401bc4:	fec42503          	lw	a0,-20(s0)
20401bc8:	9782                	jalr	a5
20401bca:	87aa                	mv	a5,a0
20401bcc:	853e                	mv	a0,a5
20401bce:	40f2                	lw	ra,28(sp)
20401bd0:	4462                	lw	s0,24(sp)
20401bd2:	6105                	addi	sp,sp,32
20401bd4:	8082                	ret

20401bd6 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401bd6:	1101                	addi	sp,sp,-32
20401bd8:	ce06                	sw	ra,28(sp)
20401bda:	cc22                	sw	s0,24(sp)
20401bdc:	1000                	addi	s0,sp,32
20401bde:	fea42623          	sw	a0,-20(s0)
20401be2:	feb42423          	sw	a1,-24(s0)
20401be6:	fec42783          	lw	a5,-20(s0)
20401bea:	439c                	lw	a5,0(a5)
20401bec:	4bdc                	lw	a5,20(a5)
20401bee:	fe842583          	lw	a1,-24(s0)
20401bf2:	fec42503          	lw	a0,-20(s0)
20401bf6:	9782                	jalr	a5
20401bf8:	87aa                	mv	a5,a0
20401bfa:	853e                	mv	a0,a5
20401bfc:	40f2                	lw	ra,28(sp)
20401bfe:	4462                	lw	s0,24(sp)
20401c00:	6105                	addi	sp,sp,32
20401c02:	8082                	ret

20401c04 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401c04:	1101                	addi	sp,sp,-32
20401c06:	ce22                	sw	s0,28(sp)
20401c08:	1000                	addi	s0,sp,32
20401c0a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401c0e:	fec42703          	lw	a4,-20(s0)
20401c12:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20401c16:	00f71563          	bne	a4,a5,20401c20 <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401c1a:	020007b7          	lui	a5,0x2000
20401c1e:	a011                	j	20401c22 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401c20:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401c22:	853e                	mv	a0,a5
20401c24:	4472                	lw	s0,28(sp)
20401c26:	6105                	addi	sp,sp,32
20401c28:	8082                	ret

20401c2a <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401c2a:	1101                	addi	sp,sp,-32
20401c2c:	ce22                	sw	s0,28(sp)
20401c2e:	1000                	addi	s0,sp,32
20401c30:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401c34:	fec42703          	lw	a4,-20(s0)
20401c38:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
20401c3c:	00f71463          	bne	a4,a5,20401c44 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401c40:	4789                	li	a5,2
20401c42:	a011                	j	20401c46 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401c44:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401c46:	853e                	mv	a0,a5
20401c48:	4472                	lw	s0,28(sp)
20401c4a:	6105                	addi	sp,sp,32
20401c4c:	8082                	ret

20401c4e <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401c4e:	1101                	addi	sp,sp,-32
20401c50:	ce22                	sw	s0,28(sp)
20401c52:	1000                	addi	s0,sp,32
20401c54:	fea42623          	sw	a0,-20(s0)
20401c58:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401c5c:	fe842783          	lw	a5,-24(s0)
20401c60:	e791                	bnez	a5,20401c6c <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401c62:	800017b7          	lui	a5,0x80001
20401c66:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20401c6a:	a821                	j	20401c82 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
20401c6c:	fe842703          	lw	a4,-24(s0)
20401c70:	4785                	li	a5,1
20401c72:	00f71763          	bne	a4,a5,20401c80 <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401c76:	800017b7          	lui	a5,0x80001
20401c7a:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20401c7e:	a011                	j	20401c82 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
20401c80:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20401c82:	853e                	mv	a0,a5
20401c84:	4472                	lw	s0,28(sp)
20401c86:	6105                	addi	sp,sp,32
20401c88:	8082                	ret

20401c8a <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401c8a:	1101                	addi	sp,sp,-32
20401c8c:	ce22                	sw	s0,28(sp)
20401c8e:	1000                	addi	s0,sp,32
20401c90:	fea42623          	sw	a0,-20(s0)
20401c94:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20401c98:	fe842783          	lw	a5,-24(s0)
20401c9c:	e399                	bnez	a5,20401ca2 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
20401c9e:	478d                	li	a5,3
20401ca0:	a809                	j	20401cb2 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20401ca2:	fe842703          	lw	a4,-24(s0)
20401ca6:	4785                	li	a5,1
20401ca8:	00f71463          	bne	a4,a5,20401cb0 <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
20401cac:	479d                	li	a5,7
20401cae:	a011                	j	20401cb2 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
20401cb0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20401cb2:	853e                	mv	a0,a5
20401cb4:	4472                	lw	s0,28(sp)
20401cb6:	6105                	addi	sp,sp,32
20401cb8:	8082                	ret

20401cba <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20401cba:	715d                	addi	sp,sp,-80
20401cbc:	c686                	sw	ra,76(sp)
20401cbe:	c4a2                	sw	s0,72(sp)
20401cc0:	c2ca                	sw	s2,68(sp)
20401cc2:	c0ce                	sw	s3,64(sp)
20401cc4:	de52                	sw	s4,60(sp)
20401cc6:	dc56                	sw	s5,56(sp)
20401cc8:	da5a                	sw	s6,52(sp)
20401cca:	d85e                	sw	s7,48(sp)
20401ccc:	d662                	sw	s8,44(sp)
20401cce:	d466                	sw	s9,40(sp)
20401cd0:	0880                	addi	s0,sp,80
20401cd2:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401cd6:	fbc42783          	lw	a5,-68(s0)
20401cda:	853e                	mv	a0,a5
20401cdc:	3725                	jal	20401c04 <__metal_driver_sifive_clint0_control_base>
20401cde:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20401ce2:	fcc42703          	lw	a4,-52(s0)
20401ce6:	67b1                	lui	a5,0xc
20401ce8:	17f1                	addi	a5,a5,-4
20401cea:	97ba                	add	a5,a5,a4
20401cec:	439c                	lw	a5,0(a5)
20401cee:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20401cf2:	fcc42703          	lw	a4,-52(s0)
20401cf6:	67b1                	lui	a5,0xc
20401cf8:	17e1                	addi	a5,a5,-8
20401cfa:	97ba                	add	a5,a5,a4
20401cfc:	439c                	lw	a5,0(a5)
20401cfe:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
20401d02:	fcc42703          	lw	a4,-52(s0)
20401d06:	67b1                	lui	a5,0xc
20401d08:	17f1                	addi	a5,a5,-4
20401d0a:	97ba                	add	a5,a5,a4
20401d0c:	439c                	lw	a5,0(a5)
20401d0e:	fc842703          	lw	a4,-56(s0)
20401d12:	fcf718e3          	bne	a4,a5,20401ce2 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
20401d16:	fc842783          	lw	a5,-56(s0)
20401d1a:	8c3e                	mv	s8,a5
20401d1c:	4c81                	li	s9,0
20401d1e:	000c1993          	slli	s3,s8,0x0
20401d22:	4901                	li	s2,0
20401d24:	fc442783          	lw	a5,-60(s0)
20401d28:	8a3e                	mv	s4,a5
20401d2a:	4a81                	li	s5,0
20401d2c:	01496b33          	or	s6,s2,s4
20401d30:	0159ebb3          	or	s7,s3,s5
20401d34:	87da                	mv	a5,s6
20401d36:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
20401d38:	853e                	mv	a0,a5
20401d3a:	85c2                	mv	a1,a6
20401d3c:	40b6                	lw	ra,76(sp)
20401d3e:	4426                	lw	s0,72(sp)
20401d40:	4916                	lw	s2,68(sp)
20401d42:	4986                	lw	s3,64(sp)
20401d44:	5a72                	lw	s4,60(sp)
20401d46:	5ae2                	lw	s5,56(sp)
20401d48:	5b52                	lw	s6,52(sp)
20401d4a:	5bc2                	lw	s7,48(sp)
20401d4c:	5c32                	lw	s8,44(sp)
20401d4e:	5ca2                	lw	s9,40(sp)
20401d50:	6161                	addi	sp,sp,80
20401d52:	8082                	ret

20401d54 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
20401d54:	7179                	addi	sp,sp,-48
20401d56:	d606                	sw	ra,44(sp)
20401d58:	d422                	sw	s0,40(sp)
20401d5a:	d24a                	sw	s2,36(sp)
20401d5c:	d04e                	sw	s3,32(sp)
20401d5e:	1800                	addi	s0,sp,48
20401d60:	fca42e23          	sw	a0,-36(s0)
20401d64:	fcb42c23          	sw	a1,-40(s0)
20401d68:	fcc42823          	sw	a2,-48(s0)
20401d6c:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
20401d70:	fdc42783          	lw	a5,-36(s0)
20401d74:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20401d78:	fec42783          	lw	a5,-20(s0)
20401d7c:	853e                	mv	a0,a5
20401d7e:	3559                	jal	20401c04 <__metal_driver_sifive_clint0_control_base>
20401d80:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20401d84:	fd842783          	lw	a5,-40(s0)
20401d88:	078e                	slli	a5,a5,0x3
20401d8a:	873e                	mv	a4,a5
20401d8c:	fe842783          	lw	a5,-24(s0)
20401d90:	973e                	add	a4,a4,a5
20401d92:	6791                	lui	a5,0x4
20401d94:	0791                	addi	a5,a5,4
20401d96:	97ba                	add	a5,a5,a4
20401d98:	873e                	mv	a4,a5
20401d9a:	57fd                	li	a5,-1
20401d9c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
20401d9e:	fd842783          	lw	a5,-40(s0)
20401da2:	078e                	slli	a5,a5,0x3
20401da4:	873e                	mv	a4,a5
20401da6:	fe842783          	lw	a5,-24(s0)
20401daa:	973e                	add	a4,a4,a5
20401dac:	6791                	lui	a5,0x4
20401dae:	97ba                	add	a5,a5,a4
20401db0:	873e                	mv	a4,a5
20401db2:	fd042783          	lw	a5,-48(s0)
20401db6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20401db8:	fd442783          	lw	a5,-44(s0)
20401dbc:	0007d913          	srli	s2,a5,0x0
20401dc0:	4981                	li	s3,0
20401dc2:	fd842783          	lw	a5,-40(s0)
20401dc6:	078e                	slli	a5,a5,0x3
20401dc8:	873e                	mv	a4,a5
20401dca:	fe842783          	lw	a5,-24(s0)
20401dce:	973e                	add	a4,a4,a5
20401dd0:	6791                	lui	a5,0x4
20401dd2:	0791                	addi	a5,a5,4
20401dd4:	97ba                	add	a5,a5,a4
20401dd6:	874a                	mv	a4,s2
20401dd8:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20401dda:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
20401ddc:	853e                	mv	a0,a5
20401dde:	50b2                	lw	ra,44(sp)
20401de0:	5422                	lw	s0,40(sp)
20401de2:	5912                	lw	s2,36(sp)
20401de4:	5982                	lw	s3,32(sp)
20401de6:	6145                	addi	sp,sp,48
20401de8:	8082                	ret

20401dea <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20401dea:	1101                	addi	sp,sp,-32
20401dec:	ce06                	sw	ra,28(sp)
20401dee:	cc22                	sw	s0,24(sp)
20401df0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20401df2:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20401df6:	f14027f3          	csrr	a5,mhartid
20401dfa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
20401dfe:	fec42783          	lw	a5,-20(s0)
20401e02:	853e                	mv	a0,a5
20401e04:	1c0030ef          	jal	ra,20404fc4 <metal_cpu_get>
20401e08:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
20401e0c:	fe842503          	lw	a0,-24(s0)
20401e10:	18e030ef          	jal	ra,20404f9e <metal_cpu_interrupt_controller>
20401e14:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20401e16:	853e                	mv	a0,a5
20401e18:	40f2                	lw	ra,28(sp)
20401e1a:	4462                	lw	s0,24(sp)
20401e1c:	6105                	addi	sp,sp,32
20401e1e:	8082                	ret

20401e20 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
20401e20:	7139                	addi	sp,sp,-64
20401e22:	de06                	sw	ra,60(sp)
20401e24:	dc22                	sw	s0,56(sp)
20401e26:	0080                	addi	s0,sp,64
20401e28:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401e2c:	fcc42503          	lw	a0,-52(s0)
20401e30:	3bed                	jal	20401c2a <__metal_driver_sifive_clint0_num_interrupts>
20401e32:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
20401e36:	fcc42783          	lw	a5,-52(s0)
20401e3a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
20401e3e:	fe442783          	lw	a5,-28(s0)
20401e42:	43dc                	lw	a5,4(a5)
20401e44:	efa9                	bnez	a5,20401e9e <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
20401e46:	fe042623          	sw	zero,-20(s0)
20401e4a:	a081                	j	20401e8a <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401e4c:	fec42583          	lw	a1,-20(s0)
20401e50:	fcc42503          	lw	a0,-52(s0)
20401e54:	3bed                	jal	20401c4e <__metal_driver_sifive_clint0_interrupt_parents>
20401e56:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401e5a:	fec42583          	lw	a1,-20(s0)
20401e5e:	fcc42503          	lw	a0,-52(s0)
20401e62:	3525                	jal	20401c8a <__metal_driver_sifive_clint0_interrupt_lines>
20401e64:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20401e68:	fe042783          	lw	a5,-32(s0)
20401e6c:	439c                	lw	a5,0(a5)
20401e6e:	4fdc                	lw	a5,28(a5)
20401e70:	fcc42683          	lw	a3,-52(s0)
20401e74:	4601                	li	a2,0
20401e76:	fdc42583          	lw	a1,-36(s0)
20401e7a:	fe042503          	lw	a0,-32(s0)
20401e7e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
20401e80:	fec42783          	lw	a5,-20(s0)
20401e84:	0785                	addi	a5,a5,1
20401e86:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20401e8a:	fec42703          	lw	a4,-20(s0)
20401e8e:	fe842783          	lw	a5,-24(s0)
20401e92:	faf74de3          	blt	a4,a5,20401e4c <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20401e96:	fe442783          	lw	a5,-28(s0)
20401e9a:	4705                	li	a4,1
20401e9c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
20401e9e:	0001                	nop
20401ea0:	50f2                	lw	ra,60(sp)
20401ea2:	5462                	lw	s0,56(sp)
20401ea4:	6121                	addi	sp,sp,64
20401ea6:	8082                	ret

20401ea8 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20401ea8:	7139                	addi	sp,sp,-64
20401eaa:	de06                	sw	ra,60(sp)
20401eac:	dc22                	sw	s0,56(sp)
20401eae:	0080                	addi	s0,sp,64
20401eb0:	fca42623          	sw	a0,-52(s0)
20401eb4:	fcb42423          	sw	a1,-56(s0)
20401eb8:	fcc42223          	sw	a2,-60(s0)
20401ebc:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
20401ec0:	57fd                	li	a5,-1
20401ec2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20401ec6:	34e010ef          	jal	ra,20403214 <__metal_controller_interrupt_vector_mode>
20401eca:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
20401ece:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20401ed2:	3f21                	jal	20401dea <_get_cpu_intc>
20401ed4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20401ed8:	fcc42503          	lw	a0,-52(s0)
20401edc:	33b9                	jal	20401c2a <__metal_driver_sifive_clint0_num_interrupts>
20401ede:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20401ee2:	fe042703          	lw	a4,-32(s0)
20401ee6:	4785                	li	a5,1
20401ee8:	00f70863          	beq	a4,a5,20401ef8 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
20401eec:	fe042783          	lw	a5,-32(s0)
20401ef0:	c781                	beqz	a5,20401ef8 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20401ef2:	fec42783          	lw	a5,-20(s0)
20401ef6:	a049                	j	20401f78 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20401ef8:	fe042223          	sw	zero,-28(s0)
20401efc:	a091                	j	20401f40 <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20401efe:	fe442583          	lw	a1,-28(s0)
20401f02:	fcc42503          	lw	a0,-52(s0)
20401f06:	3351                	jal	20401c8a <__metal_driver_sifive_clint0_interrupt_lines>
20401f08:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20401f0c:	fe442583          	lw	a1,-28(s0)
20401f10:	fcc42503          	lw	a0,-52(s0)
20401f14:	3b2d                	jal	20401c4e <__metal_driver_sifive_clint0_interrupt_parents>
20401f16:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
20401f1a:	fdc42703          	lw	a4,-36(s0)
20401f1e:	fe842783          	lw	a5,-24(s0)
20401f22:	00f71863          	bne	a4,a5,20401f32 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
20401f26:	fc842703          	lw	a4,-56(s0)
20401f2a:	fd442783          	lw	a5,-44(s0)
20401f2e:	02f70063          	beq	a4,a5,20401f4e <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
20401f32:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
20401f36:	fe442783          	lw	a5,-28(s0)
20401f3a:	0785                	addi	a5,a5,1
20401f3c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
20401f40:	fe442703          	lw	a4,-28(s0)
20401f44:	fd842783          	lw	a5,-40(s0)
20401f48:	faf74be3          	blt	a4,a5,20401efe <__metal_driver_riscv_clint0_register+0x56>
20401f4c:	a011                	j	20401f50 <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
20401f4e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20401f50:	fe842783          	lw	a5,-24(s0)
20401f54:	c385                	beqz	a5,20401f74 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20401f56:	fe842783          	lw	a5,-24(s0)
20401f5a:	439c                	lw	a5,0(a5)
20401f5c:	4fdc                	lw	a5,28(a5)
20401f5e:	fc042683          	lw	a3,-64(s0)
20401f62:	fc442603          	lw	a2,-60(s0)
20401f66:	fc842583          	lw	a1,-56(s0)
20401f6a:	fe842503          	lw	a0,-24(s0)
20401f6e:	9782                	jalr	a5
20401f70:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20401f74:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20401f78:	853e                	mv	a0,a5
20401f7a:	50f2                	lw	ra,60(sp)
20401f7c:	5462                	lw	s0,56(sp)
20401f7e:	6121                	addi	sp,sp,64
20401f80:	8082                	ret

20401f82 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20401f82:	7179                	addi	sp,sp,-48
20401f84:	d622                	sw	s0,44(sp)
20401f86:	1800                	addi	s0,sp,48
20401f88:	fca42e23          	sw	a0,-36(s0)
20401f8c:	fcb42c23          	sw	a1,-40(s0)
20401f90:	fcc42a23          	sw	a2,-44(s0)
20401f94:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20401f98:	57fd                	li	a5,-1
20401f9a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
20401f9e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20401fa2:	853e                	mv	a0,a5
20401fa4:	5432                	lw	s0,44(sp)
20401fa6:	6145                	addi	sp,sp,48
20401fa8:	8082                	ret

20401faa <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20401faa:	1101                	addi	sp,sp,-32
20401fac:	ce06                	sw	ra,28(sp)
20401fae:	cc22                	sw	s0,24(sp)
20401fb0:	1000                	addi	s0,sp,32
20401fb2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20401fb6:	25e010ef          	jal	ra,20403214 <__metal_controller_interrupt_vector_mode>
20401fba:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
20401fbc:	853e                	mv	a0,a5
20401fbe:	40f2                	lw	ra,28(sp)
20401fc0:	4462                	lw	s0,24(sp)
20401fc2:	6105                	addi	sp,sp,32
20401fc4:	8082                	ret

20401fc6 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20401fc6:	7179                	addi	sp,sp,-48
20401fc8:	d606                	sw	ra,44(sp)
20401fca:	d422                	sw	s0,40(sp)
20401fcc:	1800                	addi	s0,sp,48
20401fce:	fca42e23          	sw	a0,-36(s0)
20401fd2:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20401fd6:	57fd                	li	a5,-1
20401fd8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
20401fdc:	3539                	jal	20401dea <_get_cpu_intc>
20401fde:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20401fe2:	fe842783          	lw	a5,-24(s0)
20401fe6:	c395                	beqz	a5,2040200a <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20401fe8:	fd842703          	lw	a4,-40(s0)
20401fec:	4785                	li	a5,1
20401fee:	00e7ef63          	bltu	a5,a4,2040200c <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20401ff2:	fe842783          	lw	a5,-24(s0)
20401ff6:	439c                	lw	a5,0(a5)
20401ff8:	43dc                	lw	a5,4(a5)
20401ffa:	fd842583          	lw	a1,-40(s0)
20401ffe:	fe842503          	lw	a0,-24(s0)
20402002:	9782                	jalr	a5
20402004:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
20402008:	a011                	j	2040200c <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
2040200a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
2040200c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
20402010:	853e                	mv	a0,a5
20402012:	50b2                	lw	ra,44(sp)
20402014:	5422                	lw	s0,40(sp)
20402016:	6145                	addi	sp,sp,48
20402018:	8082                	ret

2040201a <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
2040201a:	7139                	addi	sp,sp,-64
2040201c:	de06                	sw	ra,60(sp)
2040201e:	dc22                	sw	s0,56(sp)
20402020:	0080                	addi	s0,sp,64
20402022:	fca42623          	sw	a0,-52(s0)
20402026:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
2040202a:	57fd                	li	a5,-1
2040202c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
20402030:	fc842783          	lw	a5,-56(s0)
20402034:	c7c9                	beqz	a5,204020be <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
20402036:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040203a:	3b45                	jal	20401dea <_get_cpu_intc>
2040203c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402040:	fcc42503          	lw	a0,-52(s0)
20402044:	36dd                	jal	20401c2a <__metal_driver_sifive_clint0_num_interrupts>
20402046:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
2040204a:	fe042223          	sw	zero,-28(s0)
2040204e:	a091                	j	20402092 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402050:	fe442583          	lw	a1,-28(s0)
20402054:	fcc42503          	lw	a0,-52(s0)
20402058:	390d                	jal	20401c8a <__metal_driver_sifive_clint0_interrupt_lines>
2040205a:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040205e:	fe442583          	lw	a1,-28(s0)
20402062:	fcc42503          	lw	a0,-52(s0)
20402066:	36e5                	jal	20401c4e <__metal_driver_sifive_clint0_interrupt_parents>
20402068:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
2040206c:	fe042703          	lw	a4,-32(s0)
20402070:	fe842783          	lw	a5,-24(s0)
20402074:	00f71863          	bne	a4,a5,20402084 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402078:	fc842703          	lw	a4,-56(s0)
2040207c:	fd842783          	lw	a5,-40(s0)
20402080:	02f70063          	beq	a4,a5,204020a0 <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402084:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402088:	fe442783          	lw	a5,-28(s0)
2040208c:	0785                	addi	a5,a5,1
2040208e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402092:	fe442703          	lw	a4,-28(s0)
20402096:	fdc42783          	lw	a5,-36(s0)
2040209a:	faf74be3          	blt	a4,a5,20402050 <__metal_driver_riscv_clint0_enable+0x36>
2040209e:	a011                	j	204020a2 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
204020a0:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
204020a2:	fe842783          	lw	a5,-24(s0)
204020a6:	cf81                	beqz	a5,204020be <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
204020a8:	fe842783          	lw	a5,-24(s0)
204020ac:	439c                	lw	a5,0(a5)
204020ae:	53dc                	lw	a5,36(a5)
204020b0:	fc842583          	lw	a1,-56(s0)
204020b4:	fe842503          	lw	a0,-24(s0)
204020b8:	9782                	jalr	a5
204020ba:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
204020be:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
204020c2:	853e                	mv	a0,a5
204020c4:	50f2                	lw	ra,60(sp)
204020c6:	5462                	lw	s0,56(sp)
204020c8:	6121                	addi	sp,sp,64
204020ca:	8082                	ret

204020cc <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
204020cc:	7139                	addi	sp,sp,-64
204020ce:	de06                	sw	ra,60(sp)
204020d0:	dc22                	sw	s0,56(sp)
204020d2:	0080                	addi	s0,sp,64
204020d4:	fca42623          	sw	a0,-52(s0)
204020d8:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
204020dc:	57fd                	li	a5,-1
204020de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
204020e2:	fc842783          	lw	a5,-56(s0)
204020e6:	c7c9                	beqz	a5,20402170 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
204020e8:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204020ec:	39fd                	jal	20401dea <_get_cpu_intc>
204020ee:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204020f2:	fcc42503          	lw	a0,-52(s0)
204020f6:	3e15                	jal	20401c2a <__metal_driver_sifive_clint0_num_interrupts>
204020f8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
204020fc:	fe042223          	sw	zero,-28(s0)
20402100:	a091                	j	20402144 <__metal_driver_riscv_clint0_disable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402102:	fe442583          	lw	a1,-28(s0)
20402106:	fcc42503          	lw	a0,-52(s0)
2040210a:	3641                	jal	20401c8a <__metal_driver_sifive_clint0_interrupt_lines>
2040210c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402110:	fe442583          	lw	a1,-28(s0)
20402114:	fcc42503          	lw	a0,-52(s0)
20402118:	3e1d                	jal	20401c4e <__metal_driver_sifive_clint0_interrupt_parents>
2040211a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
2040211e:	fe042703          	lw	a4,-32(s0)
20402122:	fe842783          	lw	a5,-24(s0)
20402126:	00f71863          	bne	a4,a5,20402136 <__metal_driver_riscv_clint0_disable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
2040212a:	fc842703          	lw	a4,-56(s0)
2040212e:	fd842783          	lw	a5,-40(s0)
20402132:	02f70063          	beq	a4,a5,20402152 <__metal_driver_riscv_clint0_disable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
20402136:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
2040213a:	fe442783          	lw	a5,-28(s0)
2040213e:	0785                	addi	a5,a5,1
20402140:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
20402144:	fe442703          	lw	a4,-28(s0)
20402148:	fdc42783          	lw	a5,-36(s0)
2040214c:	faf74be3          	blt	a4,a5,20402102 <__metal_driver_riscv_clint0_disable+0x36>
20402150:	a011                	j	20402154 <__metal_driver_riscv_clint0_disable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
20402152:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20402154:	fe842783          	lw	a5,-24(s0)
20402158:	cf81                	beqz	a5,20402170 <__metal_driver_riscv_clint0_disable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
2040215a:	fe842783          	lw	a5,-24(s0)
2040215e:	439c                	lw	a5,0(a5)
20402160:	579c                	lw	a5,40(a5)
20402162:	fc842583          	lw	a1,-56(s0)
20402166:	fe842503          	lw	a0,-24(s0)
2040216a:	9782                	jalr	a5
2040216c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402170:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402174:	853e                	mv	a0,a5
20402176:	50f2                	lw	ra,60(sp)
20402178:	5462                	lw	s0,56(sp)
2040217a:	6121                	addi	sp,sp,64
2040217c:	8082                	ret

2040217e <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
2040217e:	7179                	addi	sp,sp,-48
20402180:	d606                	sw	ra,44(sp)
20402182:	d422                	sw	s0,40(sp)
20402184:	1800                	addi	s0,sp,48
20402186:	fca42e23          	sw	a0,-36(s0)
2040218a:	fcb42c23          	sw	a1,-40(s0)
2040218e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402192:	57fd                	li	a5,-1
20402194:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
20402198:	fdc42783          	lw	a5,-36(s0)
2040219c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
204021a0:	fdc42503          	lw	a0,-36(s0)
204021a4:	a61ff0ef          	jal	ra,20401c04 <__metal_driver_sifive_clint0_control_base>
204021a8:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
204021ac:	fd842703          	lw	a4,-40(s0)
204021b0:	4789                	li	a5,2
204021b2:	04f70963          	beq	a4,a5,20402204 <__metal_driver_riscv_clint0_command_request+0x86>
204021b6:	fd842703          	lw	a4,-40(s0)
204021ba:	4789                	li	a5,2
204021bc:	00e7c863          	blt	a5,a4,204021cc <__metal_driver_riscv_clint0_command_request+0x4e>
204021c0:	fd842703          	lw	a4,-40(s0)
204021c4:	4785                	li	a5,1
204021c6:	00f70e63          	beq	a4,a5,204021e2 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
204021ca:	a8f1                	j	204022a6 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
204021cc:	fd842703          	lw	a4,-40(s0)
204021d0:	478d                	li	a5,3
204021d2:	04f70d63          	beq	a4,a5,2040222c <__metal_driver_riscv_clint0_command_request+0xae>
204021d6:	fd842703          	lw	a4,-40(s0)
204021da:	4791                	li	a5,4
204021dc:	08f70963          	beq	a4,a5,2040226e <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
204021e0:	a0d9                	j	204022a6 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
204021e2:	fd442783          	lw	a5,-44(s0)
204021e6:	cbcd                	beqz	a5,20402298 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
204021e8:	fe842503          	lw	a0,-24(s0)
204021ec:	acfff0ef          	jal	ra,20401cba <__metal_clint0_mtime_get>
204021f0:	87aa                	mv	a5,a0
204021f2:	882e                	mv	a6,a1
204021f4:	fd442703          	lw	a4,-44(s0)
204021f8:	c31c                	sw	a5,0(a4)
204021fa:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204021fe:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402202:	a859                	j	20402298 <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
20402204:	fd442783          	lw	a5,-44(s0)
20402208:	cbd1                	beqz	a5,2040229c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
2040220a:	fd442783          	lw	a5,-44(s0)
2040220e:	439c                	lw	a5,0(a5)
20402210:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402214:	fe042783          	lw	a5,-32(s0)
20402218:	078a                	slli	a5,a5,0x2
2040221a:	873e                	mv	a4,a5
2040221c:	fe442783          	lw	a5,-28(s0)
20402220:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
20402222:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
20402226:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040222a:	a88d                	j	2040229c <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
2040222c:	fd442783          	lw	a5,-44(s0)
20402230:	cba5                	beqz	a5,204022a0 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
20402232:	fd442783          	lw	a5,-44(s0)
20402236:	439c                	lw	a5,0(a5)
20402238:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040223c:	fe042783          	lw	a5,-32(s0)
20402240:	078a                	slli	a5,a5,0x2
20402242:	873e                	mv	a4,a5
20402244:	fe442783          	lw	a5,-28(s0)
20402248:	97ba                	add	a5,a5,a4
2040224a:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
2040224c:	4785                	li	a5,1
2040224e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
20402250:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402254:	fe042783          	lw	a5,-32(s0)
20402258:	078a                	slli	a5,a5,0x2
2040225a:	873e                	mv	a4,a5
2040225c:	fe442783          	lw	a5,-28(s0)
20402260:	97ba                	add	a5,a5,a4
20402262:	439c                	lw	a5,0(a5)
20402264:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
20402268:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040226c:	a815                	j	204022a0 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
2040226e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402272:	fd442783          	lw	a5,-44(s0)
20402276:	c79d                	beqz	a5,204022a4 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
20402278:	fd442783          	lw	a5,-44(s0)
2040227c:	439c                	lw	a5,0(a5)
2040227e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402282:	fe042783          	lw	a5,-32(s0)
20402286:	078a                	slli	a5,a5,0x2
20402288:	873e                	mv	a4,a5
2040228a:	fe442783          	lw	a5,-28(s0)
2040228e:	97ba                	add	a5,a5,a4
20402290:	439c                	lw	a5,0(a5)
20402292:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402296:	a039                	j	204022a4 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
20402298:	0001                	nop
2040229a:	a031                	j	204022a6 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040229c:	0001                	nop
2040229e:	a021                	j	204022a6 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
204022a0:	0001                	nop
204022a2:	a011                	j	204022a6 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
204022a4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
204022a6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
204022aa:	853e                	mv	a0,a5
204022ac:	50b2                	lw	ra,44(sp)
204022ae:	5422                	lw	s0,40(sp)
204022b0:	6145                	addi	sp,sp,48
204022b2:	8082                	ret

204022b4 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
204022b4:	7179                	addi	sp,sp,-48
204022b6:	d606                	sw	ra,44(sp)
204022b8:	d422                	sw	s0,40(sp)
204022ba:	1800                	addi	s0,sp,48
204022bc:	fca42e23          	sw	a0,-36(s0)
204022c0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
204022c4:	52b020ef          	jal	ra,20404fee <metal_cpu_get_current_hartid>
204022c8:	87aa                	mv	a5,a0
204022ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
204022ce:	fec40793          	addi	a5,s0,-20
204022d2:	863e                	mv	a2,a5
204022d4:	4589                	li	a1,2
204022d6:	fdc42503          	lw	a0,-36(s0)
204022da:	3555                	jal	2040217e <__metal_driver_riscv_clint0_command_request>
204022dc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
204022de:	853e                	mv	a0,a5
204022e0:	50b2                	lw	ra,44(sp)
204022e2:	5422                	lw	s0,40(sp)
204022e4:	6145                	addi	sp,sp,48
204022e6:	8082                	ret

204022e8 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
204022e8:	7179                	addi	sp,sp,-48
204022ea:	d606                	sw	ra,44(sp)
204022ec:	d422                	sw	s0,40(sp)
204022ee:	1800                	addi	s0,sp,48
204022f0:	fca42e23          	sw	a0,-36(s0)
204022f4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
204022f8:	4f7020ef          	jal	ra,20404fee <metal_cpu_get_current_hartid>
204022fc:	87aa                	mv	a5,a0
204022fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
20402302:	fec40793          	addi	a5,s0,-20
20402306:	863e                	mv	a2,a5
20402308:	458d                	li	a1,3
2040230a:	fdc42503          	lw	a0,-36(s0)
2040230e:	3d85                	jal	2040217e <__metal_driver_riscv_clint0_command_request>
20402310:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
20402312:	853e                	mv	a0,a5
20402314:	50b2                	lw	ra,44(sp)
20402316:	5422                	lw	s0,40(sp)
20402318:	6145                	addi	sp,sp,48
2040231a:	8082                	ret

2040231c <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
2040231c:	1101                	addi	sp,sp,-32
2040231e:	ce22                	sw	s0,28(sp)
20402320:	1000                	addi	s0,sp,32
20402322:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402326:	fec42703          	lw	a4,-20(s0)
2040232a:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
2040232e:	00f71463          	bne	a4,a5,20402336 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
20402332:	4781                	li	a5,0
20402334:	a011                	j	20402338 <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
20402336:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
20402338:	853e                	mv	a0,a5
2040233a:	4472                	lw	s0,28(sp)
2040233c:	6105                	addi	sp,sp,32
2040233e:	8082                	ret

20402340 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402340:	1101                	addi	sp,sp,-32
20402342:	ce22                	sw	s0,28(sp)
20402344:	1000                	addi	s0,sp,32
20402346:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040234a:	fec42703          	lw	a4,-20(s0)
2040234e:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
20402352:	00f71763          	bne	a4,a5,20402360 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
20402356:	000f47b7          	lui	a5,0xf4
2040235a:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
2040235e:	a011                	j	20402362 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402360:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20402362:	853e                	mv	a0,a5
20402364:	4472                	lw	s0,28(sp)
20402366:	6105                	addi	sp,sp,32
20402368:	8082                	ret

2040236a <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040236a:	1101                	addi	sp,sp,-32
2040236c:	ce22                	sw	s0,28(sp)
2040236e:	1000                	addi	s0,sp,32
20402370:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402374:	fec42703          	lw	a4,-20(s0)
20402378:	81818793          	addi	a5,gp,-2024 # 80001720 <__metal_dt_cpu_0>
2040237c:	00f71763          	bne	a4,a5,2040238a <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402380:	800017b7          	lui	a5,0x80001
20402384:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20402388:	a011                	j	2040238c <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040238a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
2040238c:	853e                	mv	a0,a5
2040238e:	4472                	lw	s0,28(sp)
20402390:	6105                	addi	sp,sp,32
20402392:	8082                	ret

20402394 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402394:	1101                	addi	sp,sp,-32
20402396:	ce22                	sw	s0,28(sp)
20402398:	1000                	addi	s0,sp,32
2040239a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
2040239e:	fec42783          	lw	a5,-20(s0)
204023a2:	00f04a63          	bgtz	a5,204023b6 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
204023a6:	fec42703          	lw	a4,-20(s0)
204023aa:	070a                	slli	a4,a4,0x2
204023ac:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204023b0:	97ba                	add	a5,a5,a4
204023b2:	439c                	lw	a5,0(a5)
204023b4:	a011                	j	204023b8 <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
204023b6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
204023b8:	853e                	mv	a0,a5
204023ba:	4472                	lw	s0,28(sp)
204023bc:	6105                	addi	sp,sp,32
204023be:	8082                	ret

204023c0 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
204023c0:	1101                	addi	sp,sp,-32
204023c2:	ce22                	sw	s0,28(sp)
204023c4:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
204023c6:	f14027f3          	csrr	a5,mhartid
204023ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
204023ce:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
204023d2:	853e                	mv	a0,a5
204023d4:	4472                	lw	s0,28(sp)
204023d6:	6105                	addi	sp,sp,32
204023d8:	8082                	ret

204023da <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
204023da:	1101                	addi	sp,sp,-32
204023dc:	ce22                	sw	s0,28(sp)
204023de:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204023e0:	47a1                	li	a5,8
204023e2:	3007a7f3          	csrrs	a5,mstatus,a5
204023e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
204023ea:	0001                	nop
204023ec:	4472                	lw	s0,28(sp)
204023ee:	6105                	addi	sp,sp,32
204023f0:	8082                	ret

204023f2 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
204023f2:	1101                	addi	sp,sp,-32
204023f4:	ce22                	sw	s0,28(sp)
204023f6:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
204023f8:	47a1                	li	a5,8
204023fa:	3007b7f3          	csrrc	a5,mstatus,a5
204023fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
20402402:	0001                	nop
20402404:	4472                	lw	s0,28(sp)
20402406:	6105                	addi	sp,sp,32
20402408:	8082                	ret

2040240a <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
2040240a:	1101                	addi	sp,sp,-32
2040240c:	ce22                	sw	s0,28(sp)
2040240e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402410:	47a1                	li	a5,8
20402412:	3047a7f3          	csrrs	a5,mie,a5
20402416:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
2040241a:	0001                	nop
2040241c:	4472                	lw	s0,28(sp)
2040241e:	6105                	addi	sp,sp,32
20402420:	8082                	ret

20402422 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
20402422:	1101                	addi	sp,sp,-32
20402424:	ce22                	sw	s0,28(sp)
20402426:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20402428:	47a1                	li	a5,8
2040242a:	3047b7f3          	csrrc	a5,mie,a5
2040242e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
20402432:	0001                	nop
20402434:	4472                	lw	s0,28(sp)
20402436:	6105                	addi	sp,sp,32
20402438:	8082                	ret

2040243a <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
2040243a:	1101                	addi	sp,sp,-32
2040243c:	ce22                	sw	s0,28(sp)
2040243e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20402440:	08000793          	li	a5,128
20402444:	3047a7f3          	csrrs	a5,mie,a5
20402448:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
2040244c:	0001                	nop
2040244e:	4472                	lw	s0,28(sp)
20402450:	6105                	addi	sp,sp,32
20402452:	8082                	ret

20402454 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
20402454:	1101                	addi	sp,sp,-32
20402456:	ce22                	sw	s0,28(sp)
20402458:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2040245a:	08000793          	li	a5,128
2040245e:	3047b7f3          	csrrc	a5,mie,a5
20402462:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402466:	0001                	nop
20402468:	4472                	lw	s0,28(sp)
2040246a:	6105                	addi	sp,sp,32
2040246c:	8082                	ret

2040246e <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
2040246e:	1101                	addi	sp,sp,-32
20402470:	ce22                	sw	s0,28(sp)
20402472:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402474:	6785                	lui	a5,0x1
20402476:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040247a:	3047a7f3          	csrrs	a5,mie,a5
2040247e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402482:	0001                	nop
20402484:	4472                	lw	s0,28(sp)
20402486:	6105                	addi	sp,sp,32
20402488:	8082                	ret

2040248a <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040248a:	1101                	addi	sp,sp,-32
2040248c:	ce22                	sw	s0,28(sp)
2040248e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402490:	6785                	lui	a5,0x1
20402492:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402496:	3047b7f3          	csrrc	a5,mie,a5
2040249a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
2040249e:	0001                	nop
204024a0:	4472                	lw	s0,28(sp)
204024a2:	6105                	addi	sp,sp,32
204024a4:	8082                	ret

204024a6 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
204024a6:	7179                	addi	sp,sp,-48
204024a8:	d622                	sw	s0,44(sp)
204024aa:	1800                	addi	s0,sp,48
204024ac:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
204024b0:	fdc42783          	lw	a5,-36(s0)
204024b4:	4705                	li	a4,1
204024b6:	00f717b3          	sll	a5,a4,a5
204024ba:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
204024be:	fec42783          	lw	a5,-20(s0)
204024c2:	3047a7f3          	csrrs	a5,mie,a5
204024c6:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
204024ca:	0001                	nop
204024cc:	5432                	lw	s0,44(sp)
204024ce:	6145                	addi	sp,sp,48
204024d0:	8082                	ret

204024d2 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
204024d2:	7179                	addi	sp,sp,-48
204024d4:	d622                	sw	s0,44(sp)
204024d6:	1800                	addi	s0,sp,48
204024d8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
204024dc:	fdc42783          	lw	a5,-36(s0)
204024e0:	4705                	li	a4,1
204024e2:	00f717b3          	sll	a5,a4,a5
204024e6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
204024ea:	fec42783          	lw	a5,-20(s0)
204024ee:	3047b7f3          	csrrc	a5,mie,a5
204024f2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
204024f6:	0001                	nop
204024f8:	5432                	lw	s0,44(sp)
204024fa:	6145                	addi	sp,sp,48
204024fc:	8082                	ret

204024fe <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204024fe:	1101                	addi	sp,sp,-32
20402500:	ce06                	sw	ra,28(sp)
20402502:	cc22                	sw	s0,24(sp)
20402504:	1000                	addi	s0,sp,32
20402506:	fea42623          	sw	a0,-20(s0)
2040250a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
2040250e:	06400513          	li	a0,100
20402512:	2f7020ef          	jal	ra,20405008 <metal_shutdown>

20402516 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
20402516:	1101                	addi	sp,sp,-32
20402518:	ce06                	sw	ra,28(sp)
2040251a:	cc22                	sw	s0,24(sp)
2040251c:	1000                	addi	s0,sp,32
2040251e:	fea42623          	sw	a0,-20(s0)
20402522:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
20402526:	0c800513          	li	a0,200
2040252a:	2df020ef          	jal	ra,20405008 <metal_shutdown>

2040252e <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
2040252e:	715d                	addi	sp,sp,-80
20402530:	c686                	sw	ra,76(sp)
20402532:	c496                	sw	t0,72(sp)
20402534:	c29a                	sw	t1,68(sp)
20402536:	c09e                	sw	t2,64(sp)
20402538:	de22                	sw	s0,60(sp)
2040253a:	dc2a                	sw	a0,56(sp)
2040253c:	da2e                	sw	a1,52(sp)
2040253e:	d832                	sw	a2,48(sp)
20402540:	d636                	sw	a3,44(sp)
20402542:	d43a                	sw	a4,40(sp)
20402544:	d23e                	sw	a5,36(sp)
20402546:	d042                	sw	a6,32(sp)
20402548:	ce46                	sw	a7,28(sp)
2040254a:	cc72                	sw	t3,24(sp)
2040254c:	ca76                	sw	t4,20(sp)
2040254e:	c87a                	sw	t5,16(sp)
20402550:	c67e                	sw	t6,12(sp)
20402552:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
20402554:	12c00513          	li	a0,300
20402558:	2b1020ef          	jal	ra,20405008 <metal_shutdown>

2040255c <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
2040255c:	711d                	addi	sp,sp,-96
2040255e:	ce86                	sw	ra,92(sp)
20402560:	cc96                	sw	t0,88(sp)
20402562:	ca9a                	sw	t1,84(sp)
20402564:	c89e                	sw	t2,80(sp)
20402566:	c6a2                	sw	s0,76(sp)
20402568:	c4aa                	sw	a0,72(sp)
2040256a:	c2ae                	sw	a1,68(sp)
2040256c:	c0b2                	sw	a2,64(sp)
2040256e:	de36                	sw	a3,60(sp)
20402570:	dc3a                	sw	a4,56(sp)
20402572:	da3e                	sw	a5,52(sp)
20402574:	d842                	sw	a6,48(sp)
20402576:	d646                	sw	a7,44(sp)
20402578:	d472                	sw	t3,40(sp)
2040257a:	d276                	sw	t4,36(sp)
2040257c:	d07a                	sw	t5,32(sp)
2040257e:	ce7e                	sw	t6,28(sp)
20402580:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402582:	3d3d                	jal	204023c0 <__metal_myhart_id>
20402584:	872a                	mv	a4,a0
20402586:	070a                	slli	a4,a4,0x2
20402588:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040258c:	97ba                	add	a5,a5,a4
2040258e:	439c                	lw	a5,0(a5)
20402590:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402594:	fac42783          	lw	a5,-84(s0)
20402598:	c785                	beqz	a5,204025c0 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040259a:	fac42503          	lw	a0,-84(s0)
2040259e:	33f1                	jal	2040236a <__metal_driver_cpu_interrupt_controller>
204025a0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
204025a4:	fa842783          	lw	a5,-88(s0)
204025a8:	0e07a783          	lw	a5,224(a5)
204025ac:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
204025b0:	fa842783          	lw	a5,-88(s0)
204025b4:	0d87a783          	lw	a5,216(a5)
204025b8:	fa442583          	lw	a1,-92(s0)
204025bc:	450d                	li	a0,3
204025be:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
204025c0:	0001                	nop
204025c2:	40f6                	lw	ra,92(sp)
204025c4:	42e6                	lw	t0,88(sp)
204025c6:	4356                	lw	t1,84(sp)
204025c8:	43c6                	lw	t2,80(sp)
204025ca:	4436                	lw	s0,76(sp)
204025cc:	4526                	lw	a0,72(sp)
204025ce:	4596                	lw	a1,68(sp)
204025d0:	4606                	lw	a2,64(sp)
204025d2:	56f2                	lw	a3,60(sp)
204025d4:	5762                	lw	a4,56(sp)
204025d6:	57d2                	lw	a5,52(sp)
204025d8:	5842                	lw	a6,48(sp)
204025da:	58b2                	lw	a7,44(sp)
204025dc:	5e22                	lw	t3,40(sp)
204025de:	5e92                	lw	t4,36(sp)
204025e0:	5f02                	lw	t5,32(sp)
204025e2:	4ff2                	lw	t6,28(sp)
204025e4:	6125                	addi	sp,sp,96
204025e6:	30200073          	mret

204025ea <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
204025ea:	7179                	addi	sp,sp,-48
204025ec:	d606                	sw	ra,44(sp)
204025ee:	d422                	sw	s0,40(sp)
204025f0:	1800                	addi	s0,sp,48
204025f2:	fca42e23          	sw	a0,-36(s0)
204025f6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204025fa:	33d9                	jal	204023c0 <__metal_myhart_id>
204025fc:	872a                	mv	a4,a0
204025fe:	070a                	slli	a4,a4,0x2
20402600:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402604:	97ba                	add	a5,a5,a4
20402606:	439c                	lw	a5,0(a5)
20402608:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
2040260c:	342027f3          	csrr	a5,mcause
20402610:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
20402614:	fec42783          	lw	a5,-20(s0)
20402618:	c795                	beqz	a5,20402644 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040261a:	fec42503          	lw	a0,-20(s0)
2040261e:	33b1                	jal	2040236a <__metal_driver_cpu_interrupt_controller>
20402620:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20402624:	fe842783          	lw	a5,-24(s0)
20402628:	3ff7f793          	andi	a5,a5,1023
2040262c:	fe442703          	lw	a4,-28(s0)
20402630:	0e078793          	addi	a5,a5,224
20402634:	078a                	slli	a5,a5,0x2
20402636:	97ba                	add	a5,a5,a4
20402638:	479c                	lw	a5,8(a5)
2040263a:	fdc42583          	lw	a1,-36(s0)
2040263e:	fec42503          	lw	a0,-20(s0)
20402642:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
20402644:	0001                	nop
20402646:	50b2                	lw	ra,44(sp)
20402648:	5422                	lw	s0,40(sp)
2040264a:	6145                	addi	sp,sp,48
2040264c:	8082                	ret

2040264e <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
2040264e:	711d                	addi	sp,sp,-96
20402650:	ce86                	sw	ra,92(sp)
20402652:	cc96                	sw	t0,88(sp)
20402654:	ca9a                	sw	t1,84(sp)
20402656:	c89e                	sw	t2,80(sp)
20402658:	c6a2                	sw	s0,76(sp)
2040265a:	c4aa                	sw	a0,72(sp)
2040265c:	c2ae                	sw	a1,68(sp)
2040265e:	c0b2                	sw	a2,64(sp)
20402660:	de36                	sw	a3,60(sp)
20402662:	dc3a                	sw	a4,56(sp)
20402664:	da3e                	sw	a5,52(sp)
20402666:	d842                	sw	a6,48(sp)
20402668:	d646                	sw	a7,44(sp)
2040266a:	d472                	sw	t3,40(sp)
2040266c:	d276                	sw	t4,36(sp)
2040266e:	d07a                	sw	t5,32(sp)
20402670:	ce7e                	sw	t6,28(sp)
20402672:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402674:	33b1                	jal	204023c0 <__metal_myhart_id>
20402676:	872a                	mv	a4,a0
20402678:	070a                	slli	a4,a4,0x2
2040267a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
2040267e:	97ba                	add	a5,a5,a4
20402680:	439c                	lw	a5,0(a5)
20402682:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402686:	fac42783          	lw	a5,-84(s0)
2040268a:	c785                	beqz	a5,204026b2 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040268c:	fac42503          	lw	a0,-84(s0)
20402690:	39e9                	jal	2040236a <__metal_driver_cpu_interrupt_controller>
20402692:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402696:	fa842783          	lw	a5,-88(s0)
2040269a:	1407a783          	lw	a5,320(a5)
2040269e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
204026a2:	fa842783          	lw	a5,-88(s0)
204026a6:	1387a783          	lw	a5,312(a5)
204026aa:	fa442583          	lw	a1,-92(s0)
204026ae:	451d                	li	a0,7
204026b0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
204026b2:	0001                	nop
204026b4:	40f6                	lw	ra,92(sp)
204026b6:	42e6                	lw	t0,88(sp)
204026b8:	4356                	lw	t1,84(sp)
204026ba:	43c6                	lw	t2,80(sp)
204026bc:	4436                	lw	s0,76(sp)
204026be:	4526                	lw	a0,72(sp)
204026c0:	4596                	lw	a1,68(sp)
204026c2:	4606                	lw	a2,64(sp)
204026c4:	56f2                	lw	a3,60(sp)
204026c6:	5762                	lw	a4,56(sp)
204026c8:	57d2                	lw	a5,52(sp)
204026ca:	5842                	lw	a6,48(sp)
204026cc:	58b2                	lw	a7,44(sp)
204026ce:	5e22                	lw	t3,40(sp)
204026d0:	5e92                	lw	t4,36(sp)
204026d2:	5f02                	lw	t5,32(sp)
204026d4:	4ff2                	lw	t6,28(sp)
204026d6:	6125                	addi	sp,sp,96
204026d8:	30200073          	mret

204026dc <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
204026dc:	7179                	addi	sp,sp,-48
204026de:	d606                	sw	ra,44(sp)
204026e0:	d422                	sw	s0,40(sp)
204026e2:	1800                	addi	s0,sp,48
204026e4:	fca42e23          	sw	a0,-36(s0)
204026e8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
204026ec:	39d1                	jal	204023c0 <__metal_myhart_id>
204026ee:	87aa                	mv	a5,a0
204026f0:	853e                	mv	a0,a5
204026f2:	314d                	jal	20402394 <__metal_driver_cpu_get>
204026f4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
204026f8:	fec42503          	lw	a0,-20(s0)
204026fc:	16e010ef          	jal	ra,2040386a <__metal_driver_cpu_mtime_get>
20402700:	fea42023          	sw	a0,-32(s0)
20402704:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402708:	fe042783          	lw	a5,-32(s0)
2040270c:	fe442803          	lw	a6,-28(s0)
20402710:	45a9                	li	a1,10
20402712:	4601                	li	a2,0
20402714:	00b786b3          	add	a3,a5,a1
20402718:	8536                	mv	a0,a3
2040271a:	00f53533          	sltu	a0,a0,a5
2040271e:	00c80733          	add	a4,a6,a2
20402722:	00e507b3          	add	a5,a0,a4
20402726:	873e                	mv	a4,a5
20402728:	87b6                	mv	a5,a3
2040272a:	883a                	mv	a6,a4
2040272c:	85be                	mv	a1,a5
2040272e:	8642                	mv	a2,a6
20402730:	fec42503          	lw	a0,-20(s0)
20402734:	19c010ef          	jal	ra,204038d0 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402738:	0001                	nop
2040273a:	50b2                	lw	ra,44(sp)
2040273c:	5422                	lw	s0,40(sp)
2040273e:	6145                	addi	sp,sp,48
20402740:	8082                	ret
	...

20402780 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402780:	7119                	addi	sp,sp,-128
20402782:	de86                	sw	ra,124(sp)
20402784:	dc96                	sw	t0,120(sp)
20402786:	da9a                	sw	t1,116(sp)
20402788:	d89e                	sw	t2,112(sp)
2040278a:	d6a2                	sw	s0,108(sp)
2040278c:	d4aa                	sw	a0,104(sp)
2040278e:	d2ae                	sw	a1,100(sp)
20402790:	d0b2                	sw	a2,96(sp)
20402792:	ceb6                	sw	a3,92(sp)
20402794:	ccba                	sw	a4,88(sp)
20402796:	cabe                	sw	a5,84(sp)
20402798:	c8c2                	sw	a6,80(sp)
2040279a:	c6c6                	sw	a7,76(sp)
2040279c:	c4f2                	sw	t3,72(sp)
2040279e:	c2f6                	sw	t4,68(sp)
204027a0:	c0fa                	sw	t5,64(sp)
204027a2:	de7e                	sw	t6,60(sp)
204027a4:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204027a6:	3929                	jal	204023c0 <__metal_myhart_id>
204027a8:	872a                	mv	a4,a0
204027aa:	070a                	slli	a4,a4,0x2
204027ac:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204027b0:	97ba                	add	a5,a5,a4
204027b2:	439c                	lw	a5,0(a5)
204027b4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204027b8:	342027f3          	csrr	a5,mcause
204027bc:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
204027c0:	341027f3          	csrr	a5,mepc
204027c4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
204027c8:	343027f3          	csrr	a5,mtval
204027cc:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
204027d0:	305027f3          	csrr	a5,mtvec
204027d4:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
204027d8:	fac42783          	lw	a5,-84(s0)
204027dc:	c7e9                	beqz	a5,204028a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204027de:	fac42503          	lw	a0,-84(s0)
204027e2:	b89ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
204027e6:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
204027ea:	fa842783          	lw	a5,-88(s0)
204027ee:	3ff7f793          	andi	a5,a5,1023
204027f2:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
204027f6:	fa842783          	lw	a5,-88(s0)
204027fa:	0807d863          	bgez	a5,2040288a <__metal_exception_handler+0x10a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
204027fe:	f9442703          	lw	a4,-108(s0)
20402802:	47ad                	li	a5,11
20402804:	00e7d763          	bge	a5,a4,20402812 <__metal_exception_handler+0x92>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402808:	f9c42783          	lw	a5,-100(s0)
2040280c:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402810:	ef9d                	bnez	a5,2040284e <__metal_exception_handler+0xce>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402812:	f9842683          	lw	a3,-104(s0)
20402816:	f9442703          	lw	a4,-108(s0)
2040281a:	87ba                	mv	a5,a4
2040281c:	0786                	slli	a5,a5,0x1
2040281e:	97ba                	add	a5,a5,a4
20402820:	078e                	slli	a5,a5,0x3
20402822:	97b6                	add	a5,a5,a3
20402824:	0987a783          	lw	a5,152(a5)
20402828:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
2040282c:	f9842683          	lw	a3,-104(s0)
20402830:	f9442703          	lw	a4,-108(s0)
20402834:	87ba                	mv	a5,a4
20402836:	0786                	slli	a5,a5,0x1
20402838:	97ba                	add	a5,a5,a4
2040283a:	078e                	slli	a5,a5,0x3
2040283c:	97b6                	add	a5,a5,a3
2040283e:	0907a783          	lw	a5,144(a5)
20402842:	f8c42583          	lw	a1,-116(s0)
20402846:	f9442503          	lw	a0,-108(s0)
2040284a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
2040284c:	a8a9                	j	204028a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2040284e:	f9c42783          	lw	a5,-100(s0)
20402852:	03f7f713          	andi	a4,a5,63
20402856:	4789                	li	a5,2
20402858:	04f71763          	bne	a4,a5,204028a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
2040285c:	307027f3          	csrr	a5,mtvt
20402860:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402864:	f9842783          	lw	a5,-104(s0)
20402868:	0dc7a783          	lw	a5,220(a5)
2040286c:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402870:	f9042783          	lw	a5,-112(s0)
20402874:	439c                	lw	a5,0(a5)
20402876:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
2040287a:	f8842783          	lw	a5,-120(s0)
2040287e:	f8c42583          	lw	a1,-116(s0)
20402882:	f9442503          	lw	a0,-108(s0)
20402886:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402888:	a839                	j	204028a6 <__metal_exception_handler+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
2040288a:	f9842703          	lw	a4,-104(s0)
2040288e:	f9442783          	lw	a5,-108(s0)
20402892:	0e078793          	addi	a5,a5,224
20402896:	078a                	slli	a5,a5,0x2
20402898:	97ba                	add	a5,a5,a4
2040289a:	479c                	lw	a5,8(a5)
2040289c:	f9442583          	lw	a1,-108(s0)
204028a0:	fac42503          	lw	a0,-84(s0)
204028a4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
204028a6:	50f6                	lw	ra,124(sp)
204028a8:	52e6                	lw	t0,120(sp)
204028aa:	5356                	lw	t1,116(sp)
204028ac:	53c6                	lw	t2,112(sp)
204028ae:	5436                	lw	s0,108(sp)
204028b0:	5526                	lw	a0,104(sp)
204028b2:	5596                	lw	a1,100(sp)
204028b4:	5606                	lw	a2,96(sp)
204028b6:	46f6                	lw	a3,92(sp)
204028b8:	4766                	lw	a4,88(sp)
204028ba:	47d6                	lw	a5,84(sp)
204028bc:	4846                	lw	a6,80(sp)
204028be:	48b6                	lw	a7,76(sp)
204028c0:	4e26                	lw	t3,72(sp)
204028c2:	4e96                	lw	t4,68(sp)
204028c4:	4f06                	lw	t5,64(sp)
204028c6:	5ff2                	lw	t6,60(sp)
204028c8:	6109                	addi	sp,sp,128
204028ca:	30200073          	mret
	...

204028f4 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
204028f4:	711d                	addi	sp,sp,-96
204028f6:	ce86                	sw	ra,92(sp)
204028f8:	cc96                	sw	t0,88(sp)
204028fa:	ca9a                	sw	t1,84(sp)
204028fc:	c89e                	sw	t2,80(sp)
204028fe:	c6a2                	sw	s0,76(sp)
20402900:	c4aa                	sw	a0,72(sp)
20402902:	c2ae                	sw	a1,68(sp)
20402904:	c0b2                	sw	a2,64(sp)
20402906:	de36                	sw	a3,60(sp)
20402908:	dc3a                	sw	a4,56(sp)
2040290a:	da3e                	sw	a5,52(sp)
2040290c:	d842                	sw	a6,48(sp)
2040290e:	d646                	sw	a7,44(sp)
20402910:	d472                	sw	t3,40(sp)
20402912:	d276                	sw	t4,36(sp)
20402914:	d07a                	sw	t5,32(sp)
20402916:	ce7e                	sw	t6,28(sp)
20402918:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040291a:	aa7ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
2040291e:	872a                	mv	a4,a0
20402920:	070a                	slli	a4,a4,0x2
20402922:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402926:	97ba                	add	a5,a5,a4
20402928:	439c                	lw	a5,0(a5)
2040292a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
2040292e:	fac42783          	lw	a5,-84(s0)
20402932:	c78d                	beqz	a5,2040295c <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402934:	fac42503          	lw	a0,-84(s0)
20402938:	a33ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
2040293c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402940:	fa842783          	lw	a5,-88(s0)
20402944:	2187a783          	lw	a5,536(a5)
20402948:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
2040294c:	fa842783          	lw	a5,-88(s0)
20402950:	2107a783          	lw	a5,528(a5)
20402954:	fa442583          	lw	a1,-92(s0)
20402958:	4541                	li	a0,16
2040295a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
2040295c:	0001                	nop
2040295e:	40f6                	lw	ra,92(sp)
20402960:	42e6                	lw	t0,88(sp)
20402962:	4356                	lw	t1,84(sp)
20402964:	43c6                	lw	t2,80(sp)
20402966:	4436                	lw	s0,76(sp)
20402968:	4526                	lw	a0,72(sp)
2040296a:	4596                	lw	a1,68(sp)
2040296c:	4606                	lw	a2,64(sp)
2040296e:	56f2                	lw	a3,60(sp)
20402970:	5762                	lw	a4,56(sp)
20402972:	57d2                	lw	a5,52(sp)
20402974:	5842                	lw	a6,48(sp)
20402976:	58b2                	lw	a7,44(sp)
20402978:	5e22                	lw	t3,40(sp)
2040297a:	5e92                	lw	t4,36(sp)
2040297c:	5f02                	lw	t5,32(sp)
2040297e:	4ff2                	lw	t6,28(sp)
20402980:	6125                	addi	sp,sp,96
20402982:	30200073          	mret

20402986 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402986:	711d                	addi	sp,sp,-96
20402988:	ce86                	sw	ra,92(sp)
2040298a:	cc96                	sw	t0,88(sp)
2040298c:	ca9a                	sw	t1,84(sp)
2040298e:	c89e                	sw	t2,80(sp)
20402990:	c6a2                	sw	s0,76(sp)
20402992:	c4aa                	sw	a0,72(sp)
20402994:	c2ae                	sw	a1,68(sp)
20402996:	c0b2                	sw	a2,64(sp)
20402998:	de36                	sw	a3,60(sp)
2040299a:	dc3a                	sw	a4,56(sp)
2040299c:	da3e                	sw	a5,52(sp)
2040299e:	d842                	sw	a6,48(sp)
204029a0:	d646                	sw	a7,44(sp)
204029a2:	d472                	sw	t3,40(sp)
204029a4:	d276                	sw	t4,36(sp)
204029a6:	d07a                	sw	t5,32(sp)
204029a8:	ce7e                	sw	t6,28(sp)
204029aa:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204029ac:	a15ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
204029b0:	872a                	mv	a4,a0
204029b2:	070a                	slli	a4,a4,0x2
204029b4:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204029b8:	97ba                	add	a5,a5,a4
204029ba:	439c                	lw	a5,0(a5)
204029bc:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
204029c0:	fac42783          	lw	a5,-84(s0)
204029c4:	c78d                	beqz	a5,204029ee <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029c6:	fac42503          	lw	a0,-84(s0)
204029ca:	9a1ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
204029ce:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
204029d2:	fa842783          	lw	a5,-88(s0)
204029d6:	2307a783          	lw	a5,560(a5)
204029da:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
204029de:	fa842783          	lw	a5,-88(s0)
204029e2:	2287a783          	lw	a5,552(a5)
204029e6:	fa442583          	lw	a1,-92(s0)
204029ea:	4545                	li	a0,17
204029ec:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
204029ee:	0001                	nop
204029f0:	40f6                	lw	ra,92(sp)
204029f2:	42e6                	lw	t0,88(sp)
204029f4:	4356                	lw	t1,84(sp)
204029f6:	43c6                	lw	t2,80(sp)
204029f8:	4436                	lw	s0,76(sp)
204029fa:	4526                	lw	a0,72(sp)
204029fc:	4596                	lw	a1,68(sp)
204029fe:	4606                	lw	a2,64(sp)
20402a00:	56f2                	lw	a3,60(sp)
20402a02:	5762                	lw	a4,56(sp)
20402a04:	57d2                	lw	a5,52(sp)
20402a06:	5842                	lw	a6,48(sp)
20402a08:	58b2                	lw	a7,44(sp)
20402a0a:	5e22                	lw	t3,40(sp)
20402a0c:	5e92                	lw	t4,36(sp)
20402a0e:	5f02                	lw	t5,32(sp)
20402a10:	4ff2                	lw	t6,28(sp)
20402a12:	6125                	addi	sp,sp,96
20402a14:	30200073          	mret

20402a18 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402a18:	711d                	addi	sp,sp,-96
20402a1a:	ce86                	sw	ra,92(sp)
20402a1c:	cc96                	sw	t0,88(sp)
20402a1e:	ca9a                	sw	t1,84(sp)
20402a20:	c89e                	sw	t2,80(sp)
20402a22:	c6a2                	sw	s0,76(sp)
20402a24:	c4aa                	sw	a0,72(sp)
20402a26:	c2ae                	sw	a1,68(sp)
20402a28:	c0b2                	sw	a2,64(sp)
20402a2a:	de36                	sw	a3,60(sp)
20402a2c:	dc3a                	sw	a4,56(sp)
20402a2e:	da3e                	sw	a5,52(sp)
20402a30:	d842                	sw	a6,48(sp)
20402a32:	d646                	sw	a7,44(sp)
20402a34:	d472                	sw	t3,40(sp)
20402a36:	d276                	sw	t4,36(sp)
20402a38:	d07a                	sw	t5,32(sp)
20402a3a:	ce7e                	sw	t6,28(sp)
20402a3c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a3e:	983ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402a42:	872a                	mv	a4,a0
20402a44:	070a                	slli	a4,a4,0x2
20402a46:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402a4a:	97ba                	add	a5,a5,a4
20402a4c:	439c                	lw	a5,0(a5)
20402a4e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402a52:	fac42783          	lw	a5,-84(s0)
20402a56:	c78d                	beqz	a5,20402a80 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a58:	fac42503          	lw	a0,-84(s0)
20402a5c:	90fff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402a60:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402a64:	fa842783          	lw	a5,-88(s0)
20402a68:	2487a783          	lw	a5,584(a5)
20402a6c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402a70:	fa842783          	lw	a5,-88(s0)
20402a74:	2407a783          	lw	a5,576(a5)
20402a78:	fa442583          	lw	a1,-92(s0)
20402a7c:	4549                	li	a0,18
20402a7e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402a80:	0001                	nop
20402a82:	40f6                	lw	ra,92(sp)
20402a84:	42e6                	lw	t0,88(sp)
20402a86:	4356                	lw	t1,84(sp)
20402a88:	43c6                	lw	t2,80(sp)
20402a8a:	4436                	lw	s0,76(sp)
20402a8c:	4526                	lw	a0,72(sp)
20402a8e:	4596                	lw	a1,68(sp)
20402a90:	4606                	lw	a2,64(sp)
20402a92:	56f2                	lw	a3,60(sp)
20402a94:	5762                	lw	a4,56(sp)
20402a96:	57d2                	lw	a5,52(sp)
20402a98:	5842                	lw	a6,48(sp)
20402a9a:	58b2                	lw	a7,44(sp)
20402a9c:	5e22                	lw	t3,40(sp)
20402a9e:	5e92                	lw	t4,36(sp)
20402aa0:	5f02                	lw	t5,32(sp)
20402aa2:	4ff2                	lw	t6,28(sp)
20402aa4:	6125                	addi	sp,sp,96
20402aa6:	30200073          	mret

20402aaa <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402aaa:	711d                	addi	sp,sp,-96
20402aac:	ce86                	sw	ra,92(sp)
20402aae:	cc96                	sw	t0,88(sp)
20402ab0:	ca9a                	sw	t1,84(sp)
20402ab2:	c89e                	sw	t2,80(sp)
20402ab4:	c6a2                	sw	s0,76(sp)
20402ab6:	c4aa                	sw	a0,72(sp)
20402ab8:	c2ae                	sw	a1,68(sp)
20402aba:	c0b2                	sw	a2,64(sp)
20402abc:	de36                	sw	a3,60(sp)
20402abe:	dc3a                	sw	a4,56(sp)
20402ac0:	da3e                	sw	a5,52(sp)
20402ac2:	d842                	sw	a6,48(sp)
20402ac4:	d646                	sw	a7,44(sp)
20402ac6:	d472                	sw	t3,40(sp)
20402ac8:	d276                	sw	t4,36(sp)
20402aca:	d07a                	sw	t5,32(sp)
20402acc:	ce7e                	sw	t6,28(sp)
20402ace:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ad0:	8f1ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402ad4:	872a                	mv	a4,a0
20402ad6:	070a                	slli	a4,a4,0x2
20402ad8:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402adc:	97ba                	add	a5,a5,a4
20402ade:	439c                	lw	a5,0(a5)
20402ae0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402ae4:	fac42783          	lw	a5,-84(s0)
20402ae8:	c78d                	beqz	a5,20402b12 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402aea:	fac42503          	lw	a0,-84(s0)
20402aee:	87dff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402af2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402af6:	fa842783          	lw	a5,-88(s0)
20402afa:	2607a783          	lw	a5,608(a5)
20402afe:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402b02:	fa842783          	lw	a5,-88(s0)
20402b06:	2587a783          	lw	a5,600(a5)
20402b0a:	fa442583          	lw	a1,-92(s0)
20402b0e:	454d                	li	a0,19
20402b10:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402b12:	0001                	nop
20402b14:	40f6                	lw	ra,92(sp)
20402b16:	42e6                	lw	t0,88(sp)
20402b18:	4356                	lw	t1,84(sp)
20402b1a:	43c6                	lw	t2,80(sp)
20402b1c:	4436                	lw	s0,76(sp)
20402b1e:	4526                	lw	a0,72(sp)
20402b20:	4596                	lw	a1,68(sp)
20402b22:	4606                	lw	a2,64(sp)
20402b24:	56f2                	lw	a3,60(sp)
20402b26:	5762                	lw	a4,56(sp)
20402b28:	57d2                	lw	a5,52(sp)
20402b2a:	5842                	lw	a6,48(sp)
20402b2c:	58b2                	lw	a7,44(sp)
20402b2e:	5e22                	lw	t3,40(sp)
20402b30:	5e92                	lw	t4,36(sp)
20402b32:	5f02                	lw	t5,32(sp)
20402b34:	4ff2                	lw	t6,28(sp)
20402b36:	6125                	addi	sp,sp,96
20402b38:	30200073          	mret

20402b3c <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402b3c:	711d                	addi	sp,sp,-96
20402b3e:	ce86                	sw	ra,92(sp)
20402b40:	cc96                	sw	t0,88(sp)
20402b42:	ca9a                	sw	t1,84(sp)
20402b44:	c89e                	sw	t2,80(sp)
20402b46:	c6a2                	sw	s0,76(sp)
20402b48:	c4aa                	sw	a0,72(sp)
20402b4a:	c2ae                	sw	a1,68(sp)
20402b4c:	c0b2                	sw	a2,64(sp)
20402b4e:	de36                	sw	a3,60(sp)
20402b50:	dc3a                	sw	a4,56(sp)
20402b52:	da3e                	sw	a5,52(sp)
20402b54:	d842                	sw	a6,48(sp)
20402b56:	d646                	sw	a7,44(sp)
20402b58:	d472                	sw	t3,40(sp)
20402b5a:	d276                	sw	t4,36(sp)
20402b5c:	d07a                	sw	t5,32(sp)
20402b5e:	ce7e                	sw	t6,28(sp)
20402b60:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b62:	85fff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402b66:	872a                	mv	a4,a0
20402b68:	070a                	slli	a4,a4,0x2
20402b6a:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402b6e:	97ba                	add	a5,a5,a4
20402b70:	439c                	lw	a5,0(a5)
20402b72:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402b76:	fac42783          	lw	a5,-84(s0)
20402b7a:	c78d                	beqz	a5,20402ba4 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b7c:	fac42503          	lw	a0,-84(s0)
20402b80:	feaff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402b84:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402b88:	fa842783          	lw	a5,-88(s0)
20402b8c:	2787a783          	lw	a5,632(a5)
20402b90:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402b94:	fa842783          	lw	a5,-88(s0)
20402b98:	2707a783          	lw	a5,624(a5)
20402b9c:	fa442583          	lw	a1,-92(s0)
20402ba0:	4551                	li	a0,20
20402ba2:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402ba4:	0001                	nop
20402ba6:	40f6                	lw	ra,92(sp)
20402ba8:	42e6                	lw	t0,88(sp)
20402baa:	4356                	lw	t1,84(sp)
20402bac:	43c6                	lw	t2,80(sp)
20402bae:	4436                	lw	s0,76(sp)
20402bb0:	4526                	lw	a0,72(sp)
20402bb2:	4596                	lw	a1,68(sp)
20402bb4:	4606                	lw	a2,64(sp)
20402bb6:	56f2                	lw	a3,60(sp)
20402bb8:	5762                	lw	a4,56(sp)
20402bba:	57d2                	lw	a5,52(sp)
20402bbc:	5842                	lw	a6,48(sp)
20402bbe:	58b2                	lw	a7,44(sp)
20402bc0:	5e22                	lw	t3,40(sp)
20402bc2:	5e92                	lw	t4,36(sp)
20402bc4:	5f02                	lw	t5,32(sp)
20402bc6:	4ff2                	lw	t6,28(sp)
20402bc8:	6125                	addi	sp,sp,96
20402bca:	30200073          	mret

20402bce <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402bce:	711d                	addi	sp,sp,-96
20402bd0:	ce86                	sw	ra,92(sp)
20402bd2:	cc96                	sw	t0,88(sp)
20402bd4:	ca9a                	sw	t1,84(sp)
20402bd6:	c89e                	sw	t2,80(sp)
20402bd8:	c6a2                	sw	s0,76(sp)
20402bda:	c4aa                	sw	a0,72(sp)
20402bdc:	c2ae                	sw	a1,68(sp)
20402bde:	c0b2                	sw	a2,64(sp)
20402be0:	de36                	sw	a3,60(sp)
20402be2:	dc3a                	sw	a4,56(sp)
20402be4:	da3e                	sw	a5,52(sp)
20402be6:	d842                	sw	a6,48(sp)
20402be8:	d646                	sw	a7,44(sp)
20402bea:	d472                	sw	t3,40(sp)
20402bec:	d276                	sw	t4,36(sp)
20402bee:	d07a                	sw	t5,32(sp)
20402bf0:	ce7e                	sw	t6,28(sp)
20402bf2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402bf4:	fccff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402bf8:	872a                	mv	a4,a0
20402bfa:	070a                	slli	a4,a4,0x2
20402bfc:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402c00:	97ba                	add	a5,a5,a4
20402c02:	439c                	lw	a5,0(a5)
20402c04:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402c08:	fac42783          	lw	a5,-84(s0)
20402c0c:	c78d                	beqz	a5,20402c36 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402c0e:	fac42503          	lw	a0,-84(s0)
20402c12:	f58ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402c16:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402c1a:	fa842783          	lw	a5,-88(s0)
20402c1e:	2907a783          	lw	a5,656(a5)
20402c22:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402c26:	fa842783          	lw	a5,-88(s0)
20402c2a:	2887a783          	lw	a5,648(a5)
20402c2e:	fa442583          	lw	a1,-92(s0)
20402c32:	4555                	li	a0,21
20402c34:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402c36:	0001                	nop
20402c38:	40f6                	lw	ra,92(sp)
20402c3a:	42e6                	lw	t0,88(sp)
20402c3c:	4356                	lw	t1,84(sp)
20402c3e:	43c6                	lw	t2,80(sp)
20402c40:	4436                	lw	s0,76(sp)
20402c42:	4526                	lw	a0,72(sp)
20402c44:	4596                	lw	a1,68(sp)
20402c46:	4606                	lw	a2,64(sp)
20402c48:	56f2                	lw	a3,60(sp)
20402c4a:	5762                	lw	a4,56(sp)
20402c4c:	57d2                	lw	a5,52(sp)
20402c4e:	5842                	lw	a6,48(sp)
20402c50:	58b2                	lw	a7,44(sp)
20402c52:	5e22                	lw	t3,40(sp)
20402c54:	5e92                	lw	t4,36(sp)
20402c56:	5f02                	lw	t5,32(sp)
20402c58:	4ff2                	lw	t6,28(sp)
20402c5a:	6125                	addi	sp,sp,96
20402c5c:	30200073          	mret

20402c60 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402c60:	711d                	addi	sp,sp,-96
20402c62:	ce86                	sw	ra,92(sp)
20402c64:	cc96                	sw	t0,88(sp)
20402c66:	ca9a                	sw	t1,84(sp)
20402c68:	c89e                	sw	t2,80(sp)
20402c6a:	c6a2                	sw	s0,76(sp)
20402c6c:	c4aa                	sw	a0,72(sp)
20402c6e:	c2ae                	sw	a1,68(sp)
20402c70:	c0b2                	sw	a2,64(sp)
20402c72:	de36                	sw	a3,60(sp)
20402c74:	dc3a                	sw	a4,56(sp)
20402c76:	da3e                	sw	a5,52(sp)
20402c78:	d842                	sw	a6,48(sp)
20402c7a:	d646                	sw	a7,44(sp)
20402c7c:	d472                	sw	t3,40(sp)
20402c7e:	d276                	sw	t4,36(sp)
20402c80:	d07a                	sw	t5,32(sp)
20402c82:	ce7e                	sw	t6,28(sp)
20402c84:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c86:	f3aff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402c8a:	872a                	mv	a4,a0
20402c8c:	070a                	slli	a4,a4,0x2
20402c8e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402c92:	97ba                	add	a5,a5,a4
20402c94:	439c                	lw	a5,0(a5)
20402c96:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
20402c9a:	fac42783          	lw	a5,-84(s0)
20402c9e:	c78d                	beqz	a5,20402cc8 <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ca0:	fac42503          	lw	a0,-84(s0)
20402ca4:	ec6ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402ca8:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
20402cac:	fa842783          	lw	a5,-88(s0)
20402cb0:	2a87a783          	lw	a5,680(a5)
20402cb4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
20402cb8:	fa842783          	lw	a5,-88(s0)
20402cbc:	2a07a783          	lw	a5,672(a5)
20402cc0:	fa442583          	lw	a1,-92(s0)
20402cc4:	4559                	li	a0,22
20402cc6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
20402cc8:	0001                	nop
20402cca:	40f6                	lw	ra,92(sp)
20402ccc:	42e6                	lw	t0,88(sp)
20402cce:	4356                	lw	t1,84(sp)
20402cd0:	43c6                	lw	t2,80(sp)
20402cd2:	4436                	lw	s0,76(sp)
20402cd4:	4526                	lw	a0,72(sp)
20402cd6:	4596                	lw	a1,68(sp)
20402cd8:	4606                	lw	a2,64(sp)
20402cda:	56f2                	lw	a3,60(sp)
20402cdc:	5762                	lw	a4,56(sp)
20402cde:	57d2                	lw	a5,52(sp)
20402ce0:	5842                	lw	a6,48(sp)
20402ce2:	58b2                	lw	a7,44(sp)
20402ce4:	5e22                	lw	t3,40(sp)
20402ce6:	5e92                	lw	t4,36(sp)
20402ce8:	5f02                	lw	t5,32(sp)
20402cea:	4ff2                	lw	t6,28(sp)
20402cec:	6125                	addi	sp,sp,96
20402cee:	30200073          	mret

20402cf2 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20402cf2:	711d                	addi	sp,sp,-96
20402cf4:	ce86                	sw	ra,92(sp)
20402cf6:	cc96                	sw	t0,88(sp)
20402cf8:	ca9a                	sw	t1,84(sp)
20402cfa:	c89e                	sw	t2,80(sp)
20402cfc:	c6a2                	sw	s0,76(sp)
20402cfe:	c4aa                	sw	a0,72(sp)
20402d00:	c2ae                	sw	a1,68(sp)
20402d02:	c0b2                	sw	a2,64(sp)
20402d04:	de36                	sw	a3,60(sp)
20402d06:	dc3a                	sw	a4,56(sp)
20402d08:	da3e                	sw	a5,52(sp)
20402d0a:	d842                	sw	a6,48(sp)
20402d0c:	d646                	sw	a7,44(sp)
20402d0e:	d472                	sw	t3,40(sp)
20402d10:	d276                	sw	t4,36(sp)
20402d12:	d07a                	sw	t5,32(sp)
20402d14:	ce7e                	sw	t6,28(sp)
20402d16:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d18:	ea8ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402d1c:	872a                	mv	a4,a0
20402d1e:	070a                	slli	a4,a4,0x2
20402d20:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402d24:	97ba                	add	a5,a5,a4
20402d26:	439c                	lw	a5,0(a5)
20402d28:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
20402d2c:	fac42783          	lw	a5,-84(s0)
20402d30:	c78d                	beqz	a5,20402d5a <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d32:	fac42503          	lw	a0,-84(s0)
20402d36:	e34ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402d3a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
20402d3e:	fa842783          	lw	a5,-88(s0)
20402d42:	2c07a783          	lw	a5,704(a5)
20402d46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
20402d4a:	fa842783          	lw	a5,-88(s0)
20402d4e:	2b87a783          	lw	a5,696(a5)
20402d52:	fa442583          	lw	a1,-92(s0)
20402d56:	455d                	li	a0,23
20402d58:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
20402d5a:	0001                	nop
20402d5c:	40f6                	lw	ra,92(sp)
20402d5e:	42e6                	lw	t0,88(sp)
20402d60:	4356                	lw	t1,84(sp)
20402d62:	43c6                	lw	t2,80(sp)
20402d64:	4436                	lw	s0,76(sp)
20402d66:	4526                	lw	a0,72(sp)
20402d68:	4596                	lw	a1,68(sp)
20402d6a:	4606                	lw	a2,64(sp)
20402d6c:	56f2                	lw	a3,60(sp)
20402d6e:	5762                	lw	a4,56(sp)
20402d70:	57d2                	lw	a5,52(sp)
20402d72:	5842                	lw	a6,48(sp)
20402d74:	58b2                	lw	a7,44(sp)
20402d76:	5e22                	lw	t3,40(sp)
20402d78:	5e92                	lw	t4,36(sp)
20402d7a:	5f02                	lw	t5,32(sp)
20402d7c:	4ff2                	lw	t6,28(sp)
20402d7e:	6125                	addi	sp,sp,96
20402d80:	30200073          	mret

20402d84 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20402d84:	711d                	addi	sp,sp,-96
20402d86:	ce86                	sw	ra,92(sp)
20402d88:	cc96                	sw	t0,88(sp)
20402d8a:	ca9a                	sw	t1,84(sp)
20402d8c:	c89e                	sw	t2,80(sp)
20402d8e:	c6a2                	sw	s0,76(sp)
20402d90:	c4aa                	sw	a0,72(sp)
20402d92:	c2ae                	sw	a1,68(sp)
20402d94:	c0b2                	sw	a2,64(sp)
20402d96:	de36                	sw	a3,60(sp)
20402d98:	dc3a                	sw	a4,56(sp)
20402d9a:	da3e                	sw	a5,52(sp)
20402d9c:	d842                	sw	a6,48(sp)
20402d9e:	d646                	sw	a7,44(sp)
20402da0:	d472                	sw	t3,40(sp)
20402da2:	d276                	sw	t4,36(sp)
20402da4:	d07a                	sw	t5,32(sp)
20402da6:	ce7e                	sw	t6,28(sp)
20402da8:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402daa:	e16ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402dae:	872a                	mv	a4,a0
20402db0:	070a                	slli	a4,a4,0x2
20402db2:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402db6:	97ba                	add	a5,a5,a4
20402db8:	439c                	lw	a5,0(a5)
20402dba:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20402dbe:	fac42783          	lw	a5,-84(s0)
20402dc2:	c78d                	beqz	a5,20402dec <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dc4:	fac42503          	lw	a0,-84(s0)
20402dc8:	da2ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402dcc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20402dd0:	fa842783          	lw	a5,-88(s0)
20402dd4:	2d87a783          	lw	a5,728(a5)
20402dd8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
20402ddc:	fa842783          	lw	a5,-88(s0)
20402de0:	2d07a783          	lw	a5,720(a5)
20402de4:	fa442583          	lw	a1,-92(s0)
20402de8:	4561                	li	a0,24
20402dea:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
20402dec:	0001                	nop
20402dee:	40f6                	lw	ra,92(sp)
20402df0:	42e6                	lw	t0,88(sp)
20402df2:	4356                	lw	t1,84(sp)
20402df4:	43c6                	lw	t2,80(sp)
20402df6:	4436                	lw	s0,76(sp)
20402df8:	4526                	lw	a0,72(sp)
20402dfa:	4596                	lw	a1,68(sp)
20402dfc:	4606                	lw	a2,64(sp)
20402dfe:	56f2                	lw	a3,60(sp)
20402e00:	5762                	lw	a4,56(sp)
20402e02:	57d2                	lw	a5,52(sp)
20402e04:	5842                	lw	a6,48(sp)
20402e06:	58b2                	lw	a7,44(sp)
20402e08:	5e22                	lw	t3,40(sp)
20402e0a:	5e92                	lw	t4,36(sp)
20402e0c:	5f02                	lw	t5,32(sp)
20402e0e:	4ff2                	lw	t6,28(sp)
20402e10:	6125                	addi	sp,sp,96
20402e12:	30200073          	mret

20402e16 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20402e16:	711d                	addi	sp,sp,-96
20402e18:	ce86                	sw	ra,92(sp)
20402e1a:	cc96                	sw	t0,88(sp)
20402e1c:	ca9a                	sw	t1,84(sp)
20402e1e:	c89e                	sw	t2,80(sp)
20402e20:	c6a2                	sw	s0,76(sp)
20402e22:	c4aa                	sw	a0,72(sp)
20402e24:	c2ae                	sw	a1,68(sp)
20402e26:	c0b2                	sw	a2,64(sp)
20402e28:	de36                	sw	a3,60(sp)
20402e2a:	dc3a                	sw	a4,56(sp)
20402e2c:	da3e                	sw	a5,52(sp)
20402e2e:	d842                	sw	a6,48(sp)
20402e30:	d646                	sw	a7,44(sp)
20402e32:	d472                	sw	t3,40(sp)
20402e34:	d276                	sw	t4,36(sp)
20402e36:	d07a                	sw	t5,32(sp)
20402e38:	ce7e                	sw	t6,28(sp)
20402e3a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e3c:	d84ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402e40:	872a                	mv	a4,a0
20402e42:	070a                	slli	a4,a4,0x2
20402e44:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402e48:	97ba                	add	a5,a5,a4
20402e4a:	439c                	lw	a5,0(a5)
20402e4c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
20402e50:	fac42783          	lw	a5,-84(s0)
20402e54:	c78d                	beqz	a5,20402e7e <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e56:	fac42503          	lw	a0,-84(s0)
20402e5a:	d10ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402e5e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
20402e62:	fa842783          	lw	a5,-88(s0)
20402e66:	2f07a783          	lw	a5,752(a5)
20402e6a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
20402e6e:	fa842783          	lw	a5,-88(s0)
20402e72:	2e87a783          	lw	a5,744(a5)
20402e76:	fa442583          	lw	a1,-92(s0)
20402e7a:	4565                	li	a0,25
20402e7c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20402e7e:	0001                	nop
20402e80:	40f6                	lw	ra,92(sp)
20402e82:	42e6                	lw	t0,88(sp)
20402e84:	4356                	lw	t1,84(sp)
20402e86:	43c6                	lw	t2,80(sp)
20402e88:	4436                	lw	s0,76(sp)
20402e8a:	4526                	lw	a0,72(sp)
20402e8c:	4596                	lw	a1,68(sp)
20402e8e:	4606                	lw	a2,64(sp)
20402e90:	56f2                	lw	a3,60(sp)
20402e92:	5762                	lw	a4,56(sp)
20402e94:	57d2                	lw	a5,52(sp)
20402e96:	5842                	lw	a6,48(sp)
20402e98:	58b2                	lw	a7,44(sp)
20402e9a:	5e22                	lw	t3,40(sp)
20402e9c:	5e92                	lw	t4,36(sp)
20402e9e:	5f02                	lw	t5,32(sp)
20402ea0:	4ff2                	lw	t6,28(sp)
20402ea2:	6125                	addi	sp,sp,96
20402ea4:	30200073          	mret

20402ea8 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
20402ea8:	711d                	addi	sp,sp,-96
20402eaa:	ce86                	sw	ra,92(sp)
20402eac:	cc96                	sw	t0,88(sp)
20402eae:	ca9a                	sw	t1,84(sp)
20402eb0:	c89e                	sw	t2,80(sp)
20402eb2:	c6a2                	sw	s0,76(sp)
20402eb4:	c4aa                	sw	a0,72(sp)
20402eb6:	c2ae                	sw	a1,68(sp)
20402eb8:	c0b2                	sw	a2,64(sp)
20402eba:	de36                	sw	a3,60(sp)
20402ebc:	dc3a                	sw	a4,56(sp)
20402ebe:	da3e                	sw	a5,52(sp)
20402ec0:	d842                	sw	a6,48(sp)
20402ec2:	d646                	sw	a7,44(sp)
20402ec4:	d472                	sw	t3,40(sp)
20402ec6:	d276                	sw	t4,36(sp)
20402ec8:	d07a                	sw	t5,32(sp)
20402eca:	ce7e                	sw	t6,28(sp)
20402ecc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ece:	cf2ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402ed2:	872a                	mv	a4,a0
20402ed4:	070a                	slli	a4,a4,0x2
20402ed6:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402eda:	97ba                	add	a5,a5,a4
20402edc:	439c                	lw	a5,0(a5)
20402ede:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20402ee2:	fac42783          	lw	a5,-84(s0)
20402ee6:	c78d                	beqz	a5,20402f10 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402ee8:	fac42503          	lw	a0,-84(s0)
20402eec:	c7eff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402ef0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20402ef4:	fa842783          	lw	a5,-88(s0)
20402ef8:	3087a783          	lw	a5,776(a5)
20402efc:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20402f00:	fa842783          	lw	a5,-88(s0)
20402f04:	3007a783          	lw	a5,768(a5)
20402f08:	fa442583          	lw	a1,-92(s0)
20402f0c:	4569                	li	a0,26
20402f0e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20402f10:	0001                	nop
20402f12:	40f6                	lw	ra,92(sp)
20402f14:	42e6                	lw	t0,88(sp)
20402f16:	4356                	lw	t1,84(sp)
20402f18:	43c6                	lw	t2,80(sp)
20402f1a:	4436                	lw	s0,76(sp)
20402f1c:	4526                	lw	a0,72(sp)
20402f1e:	4596                	lw	a1,68(sp)
20402f20:	4606                	lw	a2,64(sp)
20402f22:	56f2                	lw	a3,60(sp)
20402f24:	5762                	lw	a4,56(sp)
20402f26:	57d2                	lw	a5,52(sp)
20402f28:	5842                	lw	a6,48(sp)
20402f2a:	58b2                	lw	a7,44(sp)
20402f2c:	5e22                	lw	t3,40(sp)
20402f2e:	5e92                	lw	t4,36(sp)
20402f30:	5f02                	lw	t5,32(sp)
20402f32:	4ff2                	lw	t6,28(sp)
20402f34:	6125                	addi	sp,sp,96
20402f36:	30200073          	mret

20402f3a <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
20402f3a:	711d                	addi	sp,sp,-96
20402f3c:	ce86                	sw	ra,92(sp)
20402f3e:	cc96                	sw	t0,88(sp)
20402f40:	ca9a                	sw	t1,84(sp)
20402f42:	c89e                	sw	t2,80(sp)
20402f44:	c6a2                	sw	s0,76(sp)
20402f46:	c4aa                	sw	a0,72(sp)
20402f48:	c2ae                	sw	a1,68(sp)
20402f4a:	c0b2                	sw	a2,64(sp)
20402f4c:	de36                	sw	a3,60(sp)
20402f4e:	dc3a                	sw	a4,56(sp)
20402f50:	da3e                	sw	a5,52(sp)
20402f52:	d842                	sw	a6,48(sp)
20402f54:	d646                	sw	a7,44(sp)
20402f56:	d472                	sw	t3,40(sp)
20402f58:	d276                	sw	t4,36(sp)
20402f5a:	d07a                	sw	t5,32(sp)
20402f5c:	ce7e                	sw	t6,28(sp)
20402f5e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f60:	c60ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402f64:	872a                	mv	a4,a0
20402f66:	070a                	slli	a4,a4,0x2
20402f68:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402f6c:	97ba                	add	a5,a5,a4
20402f6e:	439c                	lw	a5,0(a5)
20402f70:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
20402f74:	fac42783          	lw	a5,-84(s0)
20402f78:	c78d                	beqz	a5,20402fa2 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f7a:	fac42503          	lw	a0,-84(s0)
20402f7e:	becff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20402f82:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20402f86:	fa842783          	lw	a5,-88(s0)
20402f8a:	3207a783          	lw	a5,800(a5)
20402f8e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20402f92:	fa842783          	lw	a5,-88(s0)
20402f96:	3187a783          	lw	a5,792(a5)
20402f9a:	fa442583          	lw	a1,-92(s0)
20402f9e:	456d                	li	a0,27
20402fa0:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20402fa2:	0001                	nop
20402fa4:	40f6                	lw	ra,92(sp)
20402fa6:	42e6                	lw	t0,88(sp)
20402fa8:	4356                	lw	t1,84(sp)
20402faa:	43c6                	lw	t2,80(sp)
20402fac:	4436                	lw	s0,76(sp)
20402fae:	4526                	lw	a0,72(sp)
20402fb0:	4596                	lw	a1,68(sp)
20402fb2:	4606                	lw	a2,64(sp)
20402fb4:	56f2                	lw	a3,60(sp)
20402fb6:	5762                	lw	a4,56(sp)
20402fb8:	57d2                	lw	a5,52(sp)
20402fba:	5842                	lw	a6,48(sp)
20402fbc:	58b2                	lw	a7,44(sp)
20402fbe:	5e22                	lw	t3,40(sp)
20402fc0:	5e92                	lw	t4,36(sp)
20402fc2:	5f02                	lw	t5,32(sp)
20402fc4:	4ff2                	lw	t6,28(sp)
20402fc6:	6125                	addi	sp,sp,96
20402fc8:	30200073          	mret

20402fcc <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
20402fcc:	711d                	addi	sp,sp,-96
20402fce:	ce86                	sw	ra,92(sp)
20402fd0:	cc96                	sw	t0,88(sp)
20402fd2:	ca9a                	sw	t1,84(sp)
20402fd4:	c89e                	sw	t2,80(sp)
20402fd6:	c6a2                	sw	s0,76(sp)
20402fd8:	c4aa                	sw	a0,72(sp)
20402fda:	c2ae                	sw	a1,68(sp)
20402fdc:	c0b2                	sw	a2,64(sp)
20402fde:	de36                	sw	a3,60(sp)
20402fe0:	dc3a                	sw	a4,56(sp)
20402fe2:	da3e                	sw	a5,52(sp)
20402fe4:	d842                	sw	a6,48(sp)
20402fe6:	d646                	sw	a7,44(sp)
20402fe8:	d472                	sw	t3,40(sp)
20402fea:	d276                	sw	t4,36(sp)
20402fec:	d07a                	sw	t5,32(sp)
20402fee:	ce7e                	sw	t6,28(sp)
20402ff0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ff2:	bceff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20402ff6:	872a                	mv	a4,a0
20402ff8:	070a                	slli	a4,a4,0x2
20402ffa:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20402ffe:	97ba                	add	a5,a5,a4
20403000:	439c                	lw	a5,0(a5)
20403002:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403006:	fac42783          	lw	a5,-84(s0)
2040300a:	c78d                	beqz	a5,20403034 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040300c:	fac42503          	lw	a0,-84(s0)
20403010:	b5aff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20403014:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
20403018:	fa842783          	lw	a5,-88(s0)
2040301c:	3387a783          	lw	a5,824(a5)
20403020:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
20403024:	fa842783          	lw	a5,-88(s0)
20403028:	3307a783          	lw	a5,816(a5)
2040302c:	fa442583          	lw	a1,-92(s0)
20403030:	4571                	li	a0,28
20403032:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
20403034:	0001                	nop
20403036:	40f6                	lw	ra,92(sp)
20403038:	42e6                	lw	t0,88(sp)
2040303a:	4356                	lw	t1,84(sp)
2040303c:	43c6                	lw	t2,80(sp)
2040303e:	4436                	lw	s0,76(sp)
20403040:	4526                	lw	a0,72(sp)
20403042:	4596                	lw	a1,68(sp)
20403044:	4606                	lw	a2,64(sp)
20403046:	56f2                	lw	a3,60(sp)
20403048:	5762                	lw	a4,56(sp)
2040304a:	57d2                	lw	a5,52(sp)
2040304c:	5842                	lw	a6,48(sp)
2040304e:	58b2                	lw	a7,44(sp)
20403050:	5e22                	lw	t3,40(sp)
20403052:	5e92                	lw	t4,36(sp)
20403054:	5f02                	lw	t5,32(sp)
20403056:	4ff2                	lw	t6,28(sp)
20403058:	6125                	addi	sp,sp,96
2040305a:	30200073          	mret

2040305e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
2040305e:	711d                	addi	sp,sp,-96
20403060:	ce86                	sw	ra,92(sp)
20403062:	cc96                	sw	t0,88(sp)
20403064:	ca9a                	sw	t1,84(sp)
20403066:	c89e                	sw	t2,80(sp)
20403068:	c6a2                	sw	s0,76(sp)
2040306a:	c4aa                	sw	a0,72(sp)
2040306c:	c2ae                	sw	a1,68(sp)
2040306e:	c0b2                	sw	a2,64(sp)
20403070:	de36                	sw	a3,60(sp)
20403072:	dc3a                	sw	a4,56(sp)
20403074:	da3e                	sw	a5,52(sp)
20403076:	d842                	sw	a6,48(sp)
20403078:	d646                	sw	a7,44(sp)
2040307a:	d472                	sw	t3,40(sp)
2040307c:	d276                	sw	t4,36(sp)
2040307e:	d07a                	sw	t5,32(sp)
20403080:	ce7e                	sw	t6,28(sp)
20403082:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403084:	b3cff0ef          	jal	ra,204023c0 <__metal_myhart_id>
20403088:	872a                	mv	a4,a0
2040308a:	070a                	slli	a4,a4,0x2
2040308c:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403090:	97ba                	add	a5,a5,a4
20403092:	439c                	lw	a5,0(a5)
20403094:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
20403098:	fac42783          	lw	a5,-84(s0)
2040309c:	c78d                	beqz	a5,204030c6 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040309e:	fac42503          	lw	a0,-84(s0)
204030a2:	ac8ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
204030a6:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
204030aa:	fa842783          	lw	a5,-88(s0)
204030ae:	3507a783          	lw	a5,848(a5)
204030b2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
204030b6:	fa842783          	lw	a5,-88(s0)
204030ba:	3487a783          	lw	a5,840(a5)
204030be:	fa442583          	lw	a1,-92(s0)
204030c2:	4575                	li	a0,29
204030c4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
204030c6:	0001                	nop
204030c8:	40f6                	lw	ra,92(sp)
204030ca:	42e6                	lw	t0,88(sp)
204030cc:	4356                	lw	t1,84(sp)
204030ce:	43c6                	lw	t2,80(sp)
204030d0:	4436                	lw	s0,76(sp)
204030d2:	4526                	lw	a0,72(sp)
204030d4:	4596                	lw	a1,68(sp)
204030d6:	4606                	lw	a2,64(sp)
204030d8:	56f2                	lw	a3,60(sp)
204030da:	5762                	lw	a4,56(sp)
204030dc:	57d2                	lw	a5,52(sp)
204030de:	5842                	lw	a6,48(sp)
204030e0:	58b2                	lw	a7,44(sp)
204030e2:	5e22                	lw	t3,40(sp)
204030e4:	5e92                	lw	t4,36(sp)
204030e6:	5f02                	lw	t5,32(sp)
204030e8:	4ff2                	lw	t6,28(sp)
204030ea:	6125                	addi	sp,sp,96
204030ec:	30200073          	mret

204030f0 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
204030f0:	711d                	addi	sp,sp,-96
204030f2:	ce86                	sw	ra,92(sp)
204030f4:	cc96                	sw	t0,88(sp)
204030f6:	ca9a                	sw	t1,84(sp)
204030f8:	c89e                	sw	t2,80(sp)
204030fa:	c6a2                	sw	s0,76(sp)
204030fc:	c4aa                	sw	a0,72(sp)
204030fe:	c2ae                	sw	a1,68(sp)
20403100:	c0b2                	sw	a2,64(sp)
20403102:	de36                	sw	a3,60(sp)
20403104:	dc3a                	sw	a4,56(sp)
20403106:	da3e                	sw	a5,52(sp)
20403108:	d842                	sw	a6,48(sp)
2040310a:	d646                	sw	a7,44(sp)
2040310c:	d472                	sw	t3,40(sp)
2040310e:	d276                	sw	t4,36(sp)
20403110:	d07a                	sw	t5,32(sp)
20403112:	ce7e                	sw	t6,28(sp)
20403114:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403116:	aaaff0ef          	jal	ra,204023c0 <__metal_myhart_id>
2040311a:	872a                	mv	a4,a0
2040311c:	070a                	slli	a4,a4,0x2
2040311e:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20403122:	97ba                	add	a5,a5,a4
20403124:	439c                	lw	a5,0(a5)
20403126:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
2040312a:	fac42783          	lw	a5,-84(s0)
2040312e:	c78d                	beqz	a5,20403158 <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403130:	fac42503          	lw	a0,-84(s0)
20403134:	a36ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20403138:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
2040313c:	fa842783          	lw	a5,-88(s0)
20403140:	3687a783          	lw	a5,872(a5)
20403144:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
20403148:	fa842783          	lw	a5,-88(s0)
2040314c:	3607a783          	lw	a5,864(a5)
20403150:	fa442583          	lw	a1,-92(s0)
20403154:	4579                	li	a0,30
20403156:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
20403158:	0001                	nop
2040315a:	40f6                	lw	ra,92(sp)
2040315c:	42e6                	lw	t0,88(sp)
2040315e:	4356                	lw	t1,84(sp)
20403160:	43c6                	lw	t2,80(sp)
20403162:	4436                	lw	s0,76(sp)
20403164:	4526                	lw	a0,72(sp)
20403166:	4596                	lw	a1,68(sp)
20403168:	4606                	lw	a2,64(sp)
2040316a:	56f2                	lw	a3,60(sp)
2040316c:	5762                	lw	a4,56(sp)
2040316e:	57d2                	lw	a5,52(sp)
20403170:	5842                	lw	a6,48(sp)
20403172:	58b2                	lw	a7,44(sp)
20403174:	5e22                	lw	t3,40(sp)
20403176:	5e92                	lw	t4,36(sp)
20403178:	5f02                	lw	t5,32(sp)
2040317a:	4ff2                	lw	t6,28(sp)
2040317c:	6125                	addi	sp,sp,96
2040317e:	30200073          	mret

20403182 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403182:	711d                	addi	sp,sp,-96
20403184:	ce86                	sw	ra,92(sp)
20403186:	cc96                	sw	t0,88(sp)
20403188:	ca9a                	sw	t1,84(sp)
2040318a:	c89e                	sw	t2,80(sp)
2040318c:	c6a2                	sw	s0,76(sp)
2040318e:	c4aa                	sw	a0,72(sp)
20403190:	c2ae                	sw	a1,68(sp)
20403192:	c0b2                	sw	a2,64(sp)
20403194:	de36                	sw	a3,60(sp)
20403196:	dc3a                	sw	a4,56(sp)
20403198:	da3e                	sw	a5,52(sp)
2040319a:	d842                	sw	a6,48(sp)
2040319c:	d646                	sw	a7,44(sp)
2040319e:	d472                	sw	t3,40(sp)
204031a0:	d276                	sw	t4,36(sp)
204031a2:	d07a                	sw	t5,32(sp)
204031a4:	ce7e                	sw	t6,28(sp)
204031a6:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031a8:	a18ff0ef          	jal	ra,204023c0 <__metal_myhart_id>
204031ac:	872a                	mv	a4,a0
204031ae:	070a                	slli	a4,a4,0x2
204031b0:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
204031b4:	97ba                	add	a5,a5,a4
204031b6:	439c                	lw	a5,0(a5)
204031b8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
204031bc:	fac42783          	lw	a5,-84(s0)
204031c0:	c78d                	beqz	a5,204031ea <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031c2:	fac42503          	lw	a0,-84(s0)
204031c6:	9a4ff0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
204031ca:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
204031ce:	fa842783          	lw	a5,-88(s0)
204031d2:	3807a783          	lw	a5,896(a5)
204031d6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
204031da:	fa842783          	lw	a5,-88(s0)
204031de:	3787a783          	lw	a5,888(a5)
204031e2:	fa442583          	lw	a1,-92(s0)
204031e6:	457d                	li	a0,31
204031e8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
204031ea:	0001                	nop
204031ec:	40f6                	lw	ra,92(sp)
204031ee:	42e6                	lw	t0,88(sp)
204031f0:	4356                	lw	t1,84(sp)
204031f2:	43c6                	lw	t2,80(sp)
204031f4:	4436                	lw	s0,76(sp)
204031f6:	4526                	lw	a0,72(sp)
204031f8:	4596                	lw	a1,68(sp)
204031fa:	4606                	lw	a2,64(sp)
204031fc:	56f2                	lw	a3,60(sp)
204031fe:	5762                	lw	a4,56(sp)
20403200:	57d2                	lw	a5,52(sp)
20403202:	5842                	lw	a6,48(sp)
20403204:	58b2                	lw	a7,44(sp)
20403206:	5e22                	lw	t3,40(sp)
20403208:	5e92                	lw	t4,36(sp)
2040320a:	5f02                	lw	t5,32(sp)
2040320c:	4ff2                	lw	t6,28(sp)
2040320e:	6125                	addi	sp,sp,96
20403210:	30200073          	mret

20403214 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403214:	1101                	addi	sp,sp,-32
20403216:	ce22                	sw	s0,28(sp)
20403218:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040321a:	305027f3          	csrr	a5,mtvec
2040321e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
20403222:	fec42783          	lw	a5,-20(s0)
20403226:	03f7f793          	andi	a5,a5,63
2040322a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
2040322e:	fec42703          	lw	a4,-20(s0)
20403232:	4789                	li	a5,2
20403234:	00f70d63          	beq	a4,a5,2040324e <__metal_controller_interrupt_vector_mode+0x3a>
20403238:	fec42703          	lw	a4,-20(s0)
2040323c:	478d                	li	a5,3
2040323e:	00f70a63          	beq	a4,a5,20403252 <__metal_controller_interrupt_vector_mode+0x3e>
20403242:	fec42703          	lw	a4,-20(s0)
20403246:	4785                	li	a5,1
20403248:	00f70763          	beq	a4,a5,20403256 <__metal_controller_interrupt_vector_mode+0x42>
2040324c:	a039                	j	2040325a <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040324e:	478d                	li	a5,3
20403250:	a031                	j	2040325c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
20403252:	4791                	li	a5,4
20403254:	a021                	j	2040325c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
20403256:	4785                	li	a5,1
20403258:	a011                	j	2040325c <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
2040325a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
2040325c:	853e                	mv	a0,a5
2040325e:	4472                	lw	s0,28(sp)
20403260:	6105                	addi	sp,sp,32
20403262:	8082                	ret

20403264 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20403264:	7179                	addi	sp,sp,-48
20403266:	d622                	sw	s0,44(sp)
20403268:	1800                	addi	s0,sp,48
2040326a:	fca42e23          	sw	a0,-36(s0)
2040326e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
20403272:	305027f3          	csrr	a5,mtvec
20403276:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2040327a:	fec42783          	lw	a5,-20(s0)
2040327e:	fc07f793          	andi	a5,a5,-64
20403282:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403286:	fd842783          	lw	a5,-40(s0)
2040328a:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
2040328e:	fdc42703          	lw	a4,-36(s0)
20403292:	4791                	li	a5,4
20403294:	06e7e063          	bltu	a5,a4,204032f4 <__metal_controller_interrupt_vector+0x90>
20403298:	fdc42783          	lw	a5,-36(s0)
2040329c:	00279713          	slli	a4,a5,0x2
204032a0:	204057b7          	lui	a5,0x20405
204032a4:	41878793          	addi	a5,a5,1048 # 20405418 <__metal_driver_vtable_riscv_clint0+0x4c>
204032a8:	97ba                	add	a5,a5,a4
204032aa:	439c                	lw	a5,0(a5)
204032ac:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204032ae:	fe842783          	lw	a5,-24(s0)
204032b2:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
204032b6:	fec42783          	lw	a5,-20(s0)
204032ba:	0027e793          	ori	a5,a5,2
204032be:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
204032c2:	a80d                	j	204032f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
204032c4:	fe842783          	lw	a5,-24(s0)
204032c8:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
204032cc:	fec42783          	lw	a5,-20(s0)
204032d0:	0037e793          	ori	a5,a5,3
204032d4:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
204032d8:	a831                	j	204032f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
204032da:	fe842783          	lw	a5,-24(s0)
204032de:	0017e793          	ori	a5,a5,1
204032e2:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
204032e6:	a039                	j	204032f4 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
204032e8:	fe842783          	lw	a5,-24(s0)
204032ec:	9bf1                	andi	a5,a5,-4
204032ee:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
204032f2:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
204032f4:	0001                	nop
204032f6:	5432                	lw	s0,44(sp)
204032f8:	6145                	addi	sp,sp,48
204032fa:	8082                	ret

204032fc <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
204032fc:	1101                	addi	sp,sp,-32
204032fe:	ce22                	sw	s0,28(sp)
20403300:	1000                	addi	s0,sp,32
20403302:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403306:	fec42783          	lw	a5,-20(s0)
2040330a:	17f5                	addi	a5,a5,-3
2040330c:	4771                	li	a4,28
2040330e:	00f76d63          	bltu	a4,a5,20403328 <__metal_valid_interrupt_id+0x2c>
20403312:	00279713          	slli	a4,a5,0x2
20403316:	204057b7          	lui	a5,0x20405
2040331a:	42c78793          	addi	a5,a5,1068 # 2040542c <__metal_driver_vtable_riscv_clint0+0x60>
2040331e:	97ba                	add	a5,a5,a4
20403320:	439c                	lw	a5,0(a5)
20403322:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20403324:	4785                	li	a5,1
20403326:	a019                	j	2040332c <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
20403328:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
2040332a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
2040332c:	853e                	mv	a0,a5
2040332e:	4472                	lw	s0,28(sp)
20403330:	6105                	addi	sp,sp,32
20403332:	8082                	ret

20403334 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20403334:	7179                	addi	sp,sp,-48
20403336:	d606                	sw	ra,44(sp)
20403338:	d422                	sw	s0,40(sp)
2040333a:	1800                	addi	s0,sp,48
2040333c:	fca42e23          	sw	a0,-36(s0)
20403340:	fcb42c23          	sw	a1,-40(s0)
20403344:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
20403348:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
2040334c:	fdc42783          	lw	a5,-36(s0)
20403350:	e399                	bnez	a5,20403356 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
20403352:	57fd                	li	a5,-1
20403354:	a849                	j	204033e6 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
20403356:	fd842703          	lw	a4,-40(s0)
2040335a:	47fd                	li	a5,31
2040335c:	08e7e063          	bltu	a5,a4,204033dc <__metal_local_interrupt_enable+0xa8>
20403360:	fd842783          	lw	a5,-40(s0)
20403364:	00279713          	slli	a4,a5,0x2
20403368:	204057b7          	lui	a5,0x20405
2040336c:	4a078793          	addi	a5,a5,1184 # 204054a0 <__metal_driver_vtable_riscv_clint0+0xd4>
20403370:	97ba                	add	a5,a5,a4
20403372:	439c                	lw	a5,0(a5)
20403374:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20403376:	fd442783          	lw	a5,-44(s0)
2040337a:	c781                	beqz	a5,20403382 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
2040337c:	85eff0ef          	jal	ra,204023da <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403380:	a08d                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403382:	870ff0ef          	jal	ra,204023f2 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403386:	a8b1                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403388:	fd442783          	lw	a5,-44(s0)
2040338c:	c781                	beqz	a5,20403394 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
2040338e:	87cff0ef          	jal	ra,2040240a <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403392:	a881                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403394:	88eff0ef          	jal	ra,20402422 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
20403398:	a0a9                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040339a:	fd442783          	lw	a5,-44(s0)
2040339e:	c781                	beqz	a5,204033a6 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
204033a0:	89aff0ef          	jal	ra,2040243a <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
204033a4:	a83d                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
204033a6:	8aeff0ef          	jal	ra,20402454 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
204033aa:	a825                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
204033ac:	fd442783          	lw	a5,-44(s0)
204033b0:	c781                	beqz	a5,204033b8 <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
204033b2:	8bcff0ef          	jal	ra,2040246e <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
204033b6:	a035                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
204033b8:	8d2ff0ef          	jal	ra,2040248a <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
204033bc:	a01d                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
204033be:	fd442783          	lw	a5,-44(s0)
204033c2:	c799                	beqz	a5,204033d0 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
204033c4:	fd842783          	lw	a5,-40(s0)
204033c8:	853e                	mv	a0,a5
204033ca:	8dcff0ef          	jal	ra,204024a6 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
204033ce:	a811                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
204033d0:	fd842783          	lw	a5,-40(s0)
204033d4:	853e                	mv	a0,a5
204033d6:	8fcff0ef          	jal	ra,204024d2 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
204033da:	a021                	j	204033e2 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
204033dc:	57fd                	li	a5,-1
204033de:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
204033e2:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
204033e6:	853e                	mv	a0,a5
204033e8:	50b2                	lw	ra,44(sp)
204033ea:	5422                	lw	s0,40(sp)
204033ec:	6145                	addi	sp,sp,48
204033ee:	8082                	ret

204033f0 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
204033f0:	7179                	addi	sp,sp,-48
204033f2:	d622                	sw	s0,44(sp)
204033f4:	1800                	addi	s0,sp,48
204033f6:	fca42e23          	sw	a0,-36(s0)
204033fa:	fcb42c23          	sw	a1,-40(s0)
204033fe:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403402:	fdc42783          	lw	a5,-36(s0)
20403406:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040340a:	fd842703          	lw	a4,-40(s0)
2040340e:	47ad                	li	a5,11
20403410:	02e7c263          	blt	a5,a4,20403434 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403414:	fd442783          	lw	a5,-44(s0)
20403418:	cf91                	beqz	a5,20403434 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040341a:	fec42703          	lw	a4,-20(s0)
2040341e:	fd842783          	lw	a5,-40(s0)
20403422:	0e078793          	addi	a5,a5,224
20403426:	078a                	slli	a5,a5,0x2
20403428:	97ba                	add	a5,a5,a4
2040342a:	fd442703          	lw	a4,-44(s0)
2040342e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
20403430:	4781                	li	a5,0
20403432:	a011                	j	20403436 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
20403434:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
20403436:	853e                	mv	a0,a5
20403438:	5432                	lw	s0,44(sp)
2040343a:	6145                	addi	sp,sp,48
2040343c:	8082                	ret

2040343e <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
2040343e:	7139                	addi	sp,sp,-64
20403440:	de06                	sw	ra,60(sp)
20403442:	dc22                	sw	s0,56(sp)
20403444:	0080                	addi	s0,sp,64
20403446:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040344a:	fcc42783          	lw	a5,-52(s0)
2040344e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
20403452:	fe442783          	lw	a5,-28(s0)
20403456:	43dc                	lw	a5,4(a5)
20403458:	10079d63          	bnez	a5,20403572 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
2040345c:	57fd                	li	a5,-1
2040345e:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
20403462:	57fd                	li	a5,-1
20403464:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
20403468:	301027f3          	csrr	a5,misa
2040346c:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
20403470:	fe042703          	lw	a4,-32(s0)
20403474:	6789                	lui	a5,0x2
20403476:	8ff9                	and	a5,a5,a4
20403478:	e799                	bnez	a5,20403486 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
2040347a:	fe042703          	lw	a4,-32(s0)
2040347e:	000407b7          	lui	a5,0x40
20403482:	8ff9                	and	a5,a5,a4
20403484:	c799                	beqz	a5,20403492 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403486:	57fd                	li	a5,-1
20403488:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040348c:	57fd                	li	a5,-1
2040348e:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403492:	fe042703          	lw	a4,-32(s0)
20403496:	000407b7          	lui	a5,0x40
2040349a:	8ff9                	and	a5,a5,a4
2040349c:	c781                	beqz	a5,204034a4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
2040349e:	57fd                	li	a5,-1
204034a0:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204034a4:	fe042623          	sw	zero,-20(s0)
204034a8:	a0b9                	j	204034f6 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204034aa:	fe442683          	lw	a3,-28(s0)
204034ae:	fec42703          	lw	a4,-20(s0)
204034b2:	87ba                	mv	a5,a4
204034b4:	0786                	slli	a5,a5,0x1
204034b6:	97ba                	add	a5,a5,a4
204034b8:	078e                	slli	a5,a5,0x3
204034ba:	97b6                	add	a5,a5,a3
204034bc:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204034c0:	fe442683          	lw	a3,-28(s0)
204034c4:	fec42703          	lw	a4,-20(s0)
204034c8:	87ba                	mv	a5,a4
204034ca:	0786                	slli	a5,a5,0x1
204034cc:	97ba                	add	a5,a5,a4
204034ce:	078e                	slli	a5,a5,0x3
204034d0:	97b6                	add	a5,a5,a3
204034d2:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
204034d6:	fe442683          	lw	a3,-28(s0)
204034da:	fec42703          	lw	a4,-20(s0)
204034de:	87ba                	mv	a5,a4
204034e0:	0786                	slli	a5,a5,0x1
204034e2:	97ba                	add	a5,a5,a4
204034e4:	078e                	slli	a5,a5,0x3
204034e6:	97b6                	add	a5,a5,a3
204034e8:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
204034ec:	fec42783          	lw	a5,-20(s0)
204034f0:	0785                	addi	a5,a5,1
204034f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
204034f6:	fec42703          	lw	a4,-20(s0)
204034fa:	47fd                	li	a5,31
204034fc:	fae7d7e3          	bge	a5,a4,204034aa <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403500:	fe042423          	sw	zero,-24(s0)
20403504:	a01d                	j	2040352a <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403506:	fe442703          	lw	a4,-28(s0)
2040350a:	fe842783          	lw	a5,-24(s0)
2040350e:	0e078793          	addi	a5,a5,224
20403512:	078a                	slli	a5,a5,0x2
20403514:	97ba                	add	a5,a5,a4
20403516:	20402737          	lui	a4,0x20402
2040351a:	4fe70713          	addi	a4,a4,1278 # 204024fe <__metal_default_exception_handler>
2040351e:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403520:	fe842783          	lw	a5,-24(s0)
20403524:	0785                	addi	a5,a5,1
20403526:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
2040352a:	fe842703          	lw	a4,-24(s0)
2040352e:	47ad                	li	a5,11
20403530:	fce7dbe3          	bge	a5,a4,20403506 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
20403534:	204027b7          	lui	a5,0x20402
20403538:	78078593          	addi	a1,a5,1920 # 20402780 <__metal_exception_handler>
2040353c:	4501                	li	a0,0
2040353e:	331d                	jal	20403264 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
20403540:	301027f3          	csrr	a5,misa
20403544:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20403548:	fdc42703          	lw	a4,-36(s0)
2040354c:	67c1                	lui	a5,0x10
2040354e:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
20403552:	8ff9                	and	a5,a5,a4
20403554:	cb99                	beqz	a5,2040356a <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
20403556:	300027f3          	csrr	a5,mstatus
2040355a:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
2040355e:	fdc42703          	lw	a4,-36(s0)
20403562:	6789                	lui	a5,0x2
20403564:	8fd9                	or	a5,a5,a4
20403566:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
2040356a:	fe442783          	lw	a5,-28(s0)
2040356e:	4705                	li	a4,1
20403570:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
20403572:	0001                	nop
20403574:	50f2                	lw	ra,60(sp)
20403576:	5462                	lw	s0,56(sp)
20403578:	6121                	addi	sp,sp,64
2040357a:	8082                	ret

2040357c <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
2040357c:	7179                	addi	sp,sp,-48
2040357e:	d606                	sw	ra,44(sp)
20403580:	d422                	sw	s0,40(sp)
20403582:	1800                	addi	s0,sp,48
20403584:	fca42e23          	sw	a0,-36(s0)
20403588:	fcb42c23          	sw	a1,-40(s0)
2040358c:	fcc42a23          	sw	a2,-44(s0)
20403590:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403594:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403598:	fdc42783          	lw	a5,-36(s0)
2040359c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
204035a0:	fd842503          	lw	a0,-40(s0)
204035a4:	3ba1                	jal	204032fc <__metal_valid_interrupt_id>
204035a6:	87aa                	mv	a5,a0
204035a8:	e399                	bnez	a5,204035ae <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
204035aa:	57d5                	li	a5,-11
204035ac:	aa11                	j	204036c0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
204035ae:	fd442783          	lw	a5,-44(s0)
204035b2:	cf85                	beqz	a5,204035ea <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
204035b4:	fe842683          	lw	a3,-24(s0)
204035b8:	fd842703          	lw	a4,-40(s0)
204035bc:	87ba                	mv	a5,a4
204035be:	0786                	slli	a5,a5,0x1
204035c0:	97ba                	add	a5,a5,a4
204035c2:	078e                	slli	a5,a5,0x3
204035c4:	97b6                	add	a5,a5,a3
204035c6:	fd442703          	lw	a4,-44(s0)
204035ca:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
204035ce:	fe842683          	lw	a3,-24(s0)
204035d2:	fd842703          	lw	a4,-40(s0)
204035d6:	87ba                	mv	a5,a4
204035d8:	0786                	slli	a5,a5,0x1
204035da:	97ba                	add	a5,a5,a4
204035dc:	078e                	slli	a5,a5,0x3
204035de:	97b6                	add	a5,a5,a3
204035e0:	fd042703          	lw	a4,-48(s0)
204035e4:	08e7ac23          	sw	a4,152(a5)
204035e8:	a8d1                	j	204036bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
204035ea:	fd842783          	lw	a5,-40(s0)
204035ee:	17f5                	addi	a5,a5,-3
204035f0:	4771                	li	a4,28
204035f2:	0cf76263          	bltu	a4,a5,204036b6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204035f6:	00279713          	slli	a4,a5,0x2
204035fa:	204057b7          	lui	a5,0x20405
204035fe:	52078793          	addi	a5,a5,1312 # 20405520 <__metal_driver_vtable_riscv_clint0+0x154>
20403602:	97ba                	add	a5,a5,a4
20403604:	439c                	lw	a5,0(a5)
20403606:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20403608:	fe842683          	lw	a3,-24(s0)
2040360c:	fd842703          	lw	a4,-40(s0)
20403610:	87ba                	mv	a5,a4
20403612:	0786                	slli	a5,a5,0x1
20403614:	97ba                	add	a5,a5,a4
20403616:	078e                	slli	a5,a5,0x3
20403618:	97b6                	add	a5,a5,a3
2040361a:	20402737          	lui	a4,0x20402
2040361e:	5ea70713          	addi	a4,a4,1514 # 204025ea <__metal_default_sw_handler>
20403622:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
20403626:	fe842683          	lw	a3,-24(s0)
2040362a:	fd842703          	lw	a4,-40(s0)
2040362e:	87ba                	mv	a5,a4
20403630:	0786                	slli	a5,a5,0x1
20403632:	97ba                	add	a5,a5,a4
20403634:	078e                	slli	a5,a5,0x3
20403636:	97b6                	add	a5,a5,a3
20403638:	fd042703          	lw	a4,-48(s0)
2040363c:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
20403640:	a8b5                	j	204036bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20403642:	fe842683          	lw	a3,-24(s0)
20403646:	fd842703          	lw	a4,-40(s0)
2040364a:	87ba                	mv	a5,a4
2040364c:	0786                	slli	a5,a5,0x1
2040364e:	97ba                	add	a5,a5,a4
20403650:	078e                	slli	a5,a5,0x3
20403652:	97b6                	add	a5,a5,a3
20403654:	20402737          	lui	a4,0x20402
20403658:	6dc70713          	addi	a4,a4,1756 # 204026dc <__metal_default_timer_handler>
2040365c:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
20403660:	fe842683          	lw	a3,-24(s0)
20403664:	fd842703          	lw	a4,-40(s0)
20403668:	87ba                	mv	a5,a4
2040366a:	0786                	slli	a5,a5,0x1
2040366c:	97ba                	add	a5,a5,a4
2040366e:	078e                	slli	a5,a5,0x3
20403670:	97b6                	add	a5,a5,a3
20403672:	fd042703          	lw	a4,-48(s0)
20403676:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
2040367a:	a089                	j	204036bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
2040367c:	fe842683          	lw	a3,-24(s0)
20403680:	fd842703          	lw	a4,-40(s0)
20403684:	87ba                	mv	a5,a4
20403686:	0786                	slli	a5,a5,0x1
20403688:	97ba                	add	a5,a5,a4
2040368a:	078e                	slli	a5,a5,0x3
2040368c:	97b6                	add	a5,a5,a3
2040368e:	20402737          	lui	a4,0x20402
20403692:	51670713          	addi	a4,a4,1302 # 20402516 <__metal_default_interrupt_handler>
20403696:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
2040369a:	fe842683          	lw	a3,-24(s0)
2040369e:	fd842703          	lw	a4,-40(s0)
204036a2:	87ba                	mv	a5,a4
204036a4:	0786                	slli	a5,a5,0x1
204036a6:	97ba                	add	a5,a5,a4
204036a8:	078e                	slli	a5,a5,0x3
204036aa:	97b6                	add	a5,a5,a3
204036ac:	fd042703          	lw	a4,-48(s0)
204036b0:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
204036b4:	a021                	j	204036bc <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
204036b6:	57d1                	li	a5,-12
204036b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
204036bc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
204036c0:	853e                	mv	a0,a5
204036c2:	50b2                	lw	ra,44(sp)
204036c4:	5422                	lw	s0,40(sp)
204036c6:	6145                	addi	sp,sp,48
204036c8:	8082                	ret

204036ca <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
204036ca:	1101                	addi	sp,sp,-32
204036cc:	ce06                	sw	ra,28(sp)
204036ce:	cc22                	sw	s0,24(sp)
204036d0:	1000                	addi	s0,sp,32
204036d2:	fea42623          	sw	a0,-20(s0)
204036d6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
204036da:	fe842783          	lw	a5,-24(s0)
204036de:	4605                	li	a2,1
204036e0:	85be                	mv	a1,a5
204036e2:	fec42503          	lw	a0,-20(s0)
204036e6:	31b9                	jal	20403334 <__metal_local_interrupt_enable>
204036e8:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
204036ea:	853e                	mv	a0,a5
204036ec:	40f2                	lw	ra,28(sp)
204036ee:	4462                	lw	s0,24(sp)
204036f0:	6105                	addi	sp,sp,32
204036f2:	8082                	ret

204036f4 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
204036f4:	1101                	addi	sp,sp,-32
204036f6:	ce06                	sw	ra,28(sp)
204036f8:	cc22                	sw	s0,24(sp)
204036fa:	1000                	addi	s0,sp,32
204036fc:	fea42623          	sw	a0,-20(s0)
20403700:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403704:	fe842783          	lw	a5,-24(s0)
20403708:	4601                	li	a2,0
2040370a:	85be                	mv	a1,a5
2040370c:	fec42503          	lw	a0,-20(s0)
20403710:	3115                	jal	20403334 <__metal_local_interrupt_enable>
20403712:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403714:	853e                	mv	a0,a5
20403716:	40f2                	lw	ra,28(sp)
20403718:	4462                	lw	s0,24(sp)
2040371a:	6105                	addi	sp,sp,32
2040371c:	8082                	ret

2040371e <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
2040371e:	1101                	addi	sp,sp,-32
20403720:	ce06                	sw	ra,28(sp)
20403722:	cc22                	sw	s0,24(sp)
20403724:	1000                	addi	s0,sp,32
20403726:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
2040372a:	aebff0ef          	jal	ra,20403214 <__metal_controller_interrupt_vector_mode>
2040372e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403730:	853e                	mv	a0,a5
20403732:	40f2                	lw	ra,28(sp)
20403734:	4462                	lw	s0,24(sp)
20403736:	6105                	addi	sp,sp,32
20403738:	8082                	ret

2040373a <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
2040373a:	7179                	addi	sp,sp,-48
2040373c:	d606                	sw	ra,44(sp)
2040373e:	d422                	sw	s0,40(sp)
20403740:	1800                	addi	s0,sp,48
20403742:	fca42e23          	sw	a0,-36(s0)
20403746:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040374a:	fdc42783          	lw	a5,-36(s0)
2040374e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403752:	fd842783          	lw	a5,-40(s0)
20403756:	eb99                	bnez	a5,2040376c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403758:	204027b7          	lui	a5,0x20402
2040375c:	78078593          	addi	a1,a5,1920 # 20402780 <__metal_exception_handler>
20403760:	fd842503          	lw	a0,-40(s0)
20403764:	b01ff0ef          	jal	ra,20403264 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403768:	4781                	li	a5,0
2040376a:	a00d                	j	2040378c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
2040376c:	fd842703          	lw	a4,-40(s0)
20403770:	4785                	li	a5,1
20403772:	00f71c63          	bne	a4,a5,2040378a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403776:	204057b7          	lui	a5,0x20405
2040377a:	08078593          	addi	a1,a5,128 # 20405080 <__metal_vector_table>
2040377e:	fd842503          	lw	a0,-40(s0)
20403782:	ae3ff0ef          	jal	ra,20403264 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403786:	4781                	li	a5,0
20403788:	a011                	j	2040378c <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
2040378a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
2040378c:	853e                	mv	a0,a5
2040378e:	50b2                	lw	ra,44(sp)
20403790:	5422                	lw	s0,40(sp)
20403792:	6145                	addi	sp,sp,48
20403794:	8082                	ret

20403796 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403796:	1101                	addi	sp,sp,-32
20403798:	ce22                	sw	s0,28(sp)
2040379a:	1000                	addi	s0,sp,32
2040379c:	fea42623          	sw	a0,-20(s0)
204037a0:	feb42423          	sw	a1,-24(s0)
204037a4:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
204037a8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
204037aa:	853e                	mv	a0,a5
204037ac:	4472                	lw	s0,28(sp)
204037ae:	6105                	addi	sp,sp,32
204037b0:	8082                	ret

204037b2 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
204037b2:	7139                	addi	sp,sp,-64
204037b4:	de22                	sw	s0,60(sp)
204037b6:	0080                	addi	s0,sp,64
204037b8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
204037bc:	4301                	li	t1,0
204037be:	4381                	li	t2,0
204037c0:	fe642423          	sw	t1,-24(s0)
204037c4:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
204037c8:	b8002573          	csrr	a0,mcycleh
204037cc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
204037d0:	b0002573          	csrr	a0,mcycle
204037d4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
204037d8:	b8002573          	csrr	a0,mcycleh
204037dc:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
204037e0:	fe442883          	lw	a7,-28(s0)
204037e4:	fdc42503          	lw	a0,-36(s0)
204037e8:	02a89563          	bne	a7,a0,20403812 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
204037ec:	fe442503          	lw	a0,-28(s0)
204037f0:	85aa                	mv	a1,a0
204037f2:	4601                	li	a2,0
204037f4:	00059813          	slli	a6,a1,0x0
204037f8:	4781                	li	a5,0
204037fa:	fe042603          	lw	a2,-32(s0)
204037fe:	86b2                	mv	a3,a2
20403800:	4701                	li	a4,0
20403802:	00d7e633          	or	a2,a5,a3
20403806:	fec42423          	sw	a2,-24(s0)
2040380a:	00e867b3          	or	a5,a6,a4
2040380e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403812:	fe842783          	lw	a5,-24(s0)
20403816:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
2040381a:	853e                	mv	a0,a5
2040381c:	85c2                	mv	a1,a6
2040381e:	5472                	lw	s0,60(sp)
20403820:	6121                	addi	sp,sp,64
20403822:	8082                	ret

20403824 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403824:	7179                	addi	sp,sp,-48
20403826:	d606                	sw	ra,44(sp)
20403828:	d422                	sw	s0,40(sp)
2040382a:	d24a                	sw	s2,36(sp)
2040382c:	d04e                	sw	s3,32(sp)
2040382e:	1800                	addi	s0,sp,48
20403830:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403834:	fdc42783          	lw	a5,-36(s0)
20403838:	e781                	bnez	a5,20403840 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
2040383a:	4901                	li	s2,0
2040383c:	4981                	li	s3,0
2040383e:	a821                	j	20403856 <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403840:	fdc42503          	lw	a0,-36(s0)
20403844:	afdfe0ef          	jal	ra,20402340 <__metal_driver_cpu_timebase>
20403848:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
2040384c:	fec42783          	lw	a5,-20(s0)
20403850:	893e                	mv	s2,a5
20403852:	87fd                	srai	a5,a5,0x1f
20403854:	89be                	mv	s3,a5
20403856:	87ca                	mv	a5,s2
20403858:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
2040385a:	853e                	mv	a0,a5
2040385c:	85c2                	mv	a1,a6
2040385e:	50b2                	lw	ra,44(sp)
20403860:	5422                	lw	s0,40(sp)
20403862:	5912                	lw	s2,36(sp)
20403864:	5982                	lw	s3,32(sp)
20403866:	6145                	addi	sp,sp,48
20403868:	8082                	ret

2040386a <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
2040386a:	7179                	addi	sp,sp,-48
2040386c:	d606                	sw	ra,44(sp)
2040386e:	d422                	sw	s0,40(sp)
20403870:	1800                	addi	s0,sp,48
20403872:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403876:	4781                	li	a5,0
20403878:	4801                	li	a6,0
2040387a:	fef42023          	sw	a5,-32(s0)
2040387e:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403882:	fdc42503          	lw	a0,-36(s0)
20403886:	ae5fe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
2040388a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
2040388e:	fec42783          	lw	a5,-20(s0)
20403892:	c78d                	beqz	a5,204038bc <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403894:	fec42783          	lw	a5,-20(s0)
20403898:	13c7a783          	lw	a5,316(a5)
2040389c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
204038a0:	fe842783          	lw	a5,-24(s0)
204038a4:	cf81                	beqz	a5,204038bc <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
204038a6:	fe842783          	lw	a5,-24(s0)
204038aa:	439c                	lw	a5,0(a5)
204038ac:	43f8                	lw	a4,68(a5)
204038ae:	fe040793          	addi	a5,s0,-32
204038b2:	863e                	mv	a2,a5
204038b4:	4585                	li	a1,1
204038b6:	fe842503          	lw	a0,-24(s0)
204038ba:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
204038bc:	fe042783          	lw	a5,-32(s0)
204038c0:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
204038c4:	853e                	mv	a0,a5
204038c6:	85c2                	mv	a1,a6
204038c8:	50b2                	lw	ra,44(sp)
204038ca:	5422                	lw	s0,40(sp)
204038cc:	6145                	addi	sp,sp,48
204038ce:	8082                	ret

204038d0 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
204038d0:	7179                	addi	sp,sp,-48
204038d2:	d606                	sw	ra,44(sp)
204038d4:	d422                	sw	s0,40(sp)
204038d6:	d226                	sw	s1,36(sp)
204038d8:	1800                	addi	s0,sp,48
204038da:	fca42e23          	sw	a0,-36(s0)
204038de:	fcb42823          	sw	a1,-48(s0)
204038e2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
204038e6:	57fd                	li	a5,-1
204038e8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204038ec:	fdc42503          	lw	a0,-36(s0)
204038f0:	a7bfe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
204038f4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
204038f8:	fe842783          	lw	a5,-24(s0)
204038fc:	cf8d                	beqz	a5,20403936 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
204038fe:	fe842783          	lw	a5,-24(s0)
20403902:	13c7a783          	lw	a5,316(a5)
20403906:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
2040390a:	fe442783          	lw	a5,-28(s0)
2040390e:	c785                	beqz	a5,20403936 <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403910:	fe442783          	lw	a5,-28(s0)
20403914:	439c                	lw	a5,0(a5)
20403916:	47a4                	lw	s1,72(a5)
20403918:	fdc42503          	lw	a0,-36(s0)
2040391c:	a01fe0ef          	jal	ra,2040231c <__metal_driver_cpu_hartid>
20403920:	87aa                	mv	a5,a0
20403922:	fd042603          	lw	a2,-48(s0)
20403926:	fd442683          	lw	a3,-44(s0)
2040392a:	85be                	mv	a1,a5
2040392c:	fe442503          	lw	a0,-28(s0)
20403930:	9482                	jalr	s1
20403932:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403936:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
2040393a:	853e                	mv	a0,a5
2040393c:	50b2                	lw	ra,44(sp)
2040393e:	5422                	lw	s0,40(sp)
20403940:	5492                	lw	s1,36(sp)
20403942:	6145                	addi	sp,sp,48
20403944:	8082                	ret

20403946 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403946:	1101                	addi	sp,sp,-32
20403948:	ce22                	sw	s0,28(sp)
2040394a:	1000                	addi	s0,sp,32
2040394c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403950:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403954:	853e                	mv	a0,a5
20403956:	4472                	lw	s0,28(sp)
20403958:	6105                	addi	sp,sp,32
2040395a:	8082                	ret

2040395c <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
2040395c:	1101                	addi	sp,sp,-32
2040395e:	ce22                	sw	s0,28(sp)
20403960:	1000                	addi	s0,sp,32
20403962:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403966:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403968:	853e                	mv	a0,a5
2040396a:	4472                	lw	s0,28(sp)
2040396c:	6105                	addi	sp,sp,32
2040396e:	8082                	ret

20403970 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403970:	1101                	addi	sp,sp,-32
20403972:	ce22                	sw	s0,28(sp)
20403974:	1000                	addi	s0,sp,32
20403976:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
2040397a:	81018793          	addi	a5,gp,-2032 # 80001718 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
2040397e:	853e                	mv	a0,a5
20403980:	4472                	lw	s0,28(sp)
20403982:	6105                	addi	sp,sp,32
20403984:	8082                	ret

20403986 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403986:	1101                	addi	sp,sp,-32
20403988:	ce22                	sw	s0,28(sp)
2040398a:	1000                	addi	s0,sp,32
2040398c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403990:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403992:	853e                	mv	a0,a5
20403994:	4472                	lw	s0,28(sp)
20403996:	6105                	addi	sp,sp,32
20403998:	8082                	ret

2040399a <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
2040399a:	7179                	addi	sp,sp,-48
2040399c:	d606                	sw	ra,44(sp)
2040399e:	d422                	sw	s0,40(sp)
204039a0:	1800                	addi	s0,sp,48
204039a2:	fca42e23          	sw	a0,-36(s0)
204039a6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
204039aa:	57fd                	li	a5,-1
204039ac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
204039b0:	fdc42503          	lw	a0,-36(s0)
204039b4:	9b7fe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
204039b8:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
204039bc:	fe842783          	lw	a5,-24(s0)
204039c0:	c79d                	beqz	a5,204039ee <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
204039c2:	fe842783          	lw	a5,-24(s0)
204039c6:	0dc7a783          	lw	a5,220(a5)
204039ca:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
204039ce:	fe442783          	lw	a5,-28(s0)
204039d2:	cf91                	beqz	a5,204039ee <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
204039d4:	fe442783          	lw	a5,-28(s0)
204039d8:	439c                	lw	a5,0(a5)
204039da:	43f8                	lw	a4,68(a5)
204039dc:	fd840793          	addi	a5,s0,-40
204039e0:	863e                	mv	a2,a5
204039e2:	458d                	li	a1,3
204039e4:	fe442503          	lw	a0,-28(s0)
204039e8:	9702                	jalr	a4
204039ea:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
204039ee:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
204039f2:	853e                	mv	a0,a5
204039f4:	50b2                	lw	ra,44(sp)
204039f6:	5422                	lw	s0,40(sp)
204039f8:	6145                	addi	sp,sp,48
204039fa:	8082                	ret

204039fc <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
204039fc:	7179                	addi	sp,sp,-48
204039fe:	d606                	sw	ra,44(sp)
20403a00:	d422                	sw	s0,40(sp)
20403a02:	1800                	addi	s0,sp,48
20403a04:	fca42e23          	sw	a0,-36(s0)
20403a08:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403a0c:	57fd                	li	a5,-1
20403a0e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a12:	fdc42503          	lw	a0,-36(s0)
20403a16:	955fe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20403a1a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403a1e:	fe842783          	lw	a5,-24(s0)
20403a22:	c79d                	beqz	a5,20403a50 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403a24:	fe842783          	lw	a5,-24(s0)
20403a28:	0dc7a783          	lw	a5,220(a5)
20403a2c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403a30:	fe442783          	lw	a5,-28(s0)
20403a34:	cf91                	beqz	a5,20403a50 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403a36:	fe442783          	lw	a5,-28(s0)
20403a3a:	439c                	lw	a5,0(a5)
20403a3c:	43f8                	lw	a4,68(a5)
20403a3e:	fd840793          	addi	a5,s0,-40
20403a42:	863e                	mv	a2,a5
20403a44:	4589                	li	a1,2
20403a46:	fe442503          	lw	a0,-28(s0)
20403a4a:	9702                	jalr	a4
20403a4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403a50:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403a54:	853e                	mv	a0,a5
20403a56:	50b2                	lw	ra,44(sp)
20403a58:	5422                	lw	s0,40(sp)
20403a5a:	6145                	addi	sp,sp,48
20403a5c:	8082                	ret

20403a5e <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403a5e:	7179                	addi	sp,sp,-48
20403a60:	d606                	sw	ra,44(sp)
20403a62:	d422                	sw	s0,40(sp)
20403a64:	1800                	addi	s0,sp,48
20403a66:	fca42e23          	sw	a0,-36(s0)
20403a6a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403a6e:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403a72:	fdc42503          	lw	a0,-36(s0)
20403a76:	8f5fe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20403a7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403a7e:	fe842783          	lw	a5,-24(s0)
20403a82:	c79d                	beqz	a5,20403ab0 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403a84:	fe842783          	lw	a5,-24(s0)
20403a88:	0dc7a783          	lw	a5,220(a5)
20403a8c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403a90:	fe442783          	lw	a5,-28(s0)
20403a94:	cf91                	beqz	a5,20403ab0 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403a96:	fe442783          	lw	a5,-28(s0)
20403a9a:	439c                	lw	a5,0(a5)
20403a9c:	43f8                	lw	a4,68(a5)
20403a9e:	fd840793          	addi	a5,s0,-40
20403aa2:	863e                	mv	a2,a5
20403aa4:	4591                	li	a1,4
20403aa6:	fe442503          	lw	a0,-28(s0)
20403aaa:	9702                	jalr	a4
20403aac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403ab0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403ab4:	853e                	mv	a0,a5
20403ab6:	50b2                	lw	ra,44(sp)
20403ab8:	5422                	lw	s0,40(sp)
20403aba:	6145                	addi	sp,sp,48
20403abc:	8082                	ret

20403abe <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403abe:	1101                	addi	sp,sp,-32
20403ac0:	ce06                	sw	ra,28(sp)
20403ac2:	cc22                	sw	s0,24(sp)
20403ac4:	1000                	addi	s0,sp,32
20403ac6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403aca:	fec42503          	lw	a0,-20(s0)
20403ace:	89dfe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20403ad2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403ad4:	853e                	mv	a0,a5
20403ad6:	40f2                	lw	ra,28(sp)
20403ad8:	4462                	lw	s0,24(sp)
20403ada:	6105                	addi	sp,sp,32
20403adc:	8082                	ret

20403ade <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403ade:	7179                	addi	sp,sp,-48
20403ae0:	d606                	sw	ra,44(sp)
20403ae2:	d422                	sw	s0,40(sp)
20403ae4:	1800                	addi	s0,sp,48
20403ae6:	fca42e23          	sw	a0,-36(s0)
20403aea:	fcb42c23          	sw	a1,-40(s0)
20403aee:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403af2:	fdc42503          	lw	a0,-36(s0)
20403af6:	875fe0ef          	jal	ra,2040236a <__metal_driver_cpu_interrupt_controller>
20403afa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403afe:	fec42783          	lw	a5,-20(s0)
20403b02:	cb99                	beqz	a5,20403b18 <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403b04:	fd442603          	lw	a2,-44(s0)
20403b08:	fd842583          	lw	a1,-40(s0)
20403b0c:	fec42503          	lw	a0,-20(s0)
20403b10:	8e1ff0ef          	jal	ra,204033f0 <__metal_exception_register>
20403b14:	87aa                	mv	a5,a0
20403b16:	a011                	j	20403b1a <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403b18:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403b1a:	853e                	mv	a0,a5
20403b1c:	50b2                	lw	ra,44(sp)
20403b1e:	5422                	lw	s0,40(sp)
20403b20:	6145                	addi	sp,sp,48
20403b22:	8082                	ret

20403b24 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403b24:	1101                	addi	sp,sp,-32
20403b26:	ce22                	sw	s0,28(sp)
20403b28:	1000                	addi	s0,sp,32
20403b2a:	fea42623          	sw	a0,-20(s0)
20403b2e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403b32:	fe842783          	lw	a5,-24(s0)
20403b36:	0007d783          	lhu	a5,0(a5)
20403b3a:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403b3e:	478d                	li	a5,3
20403b40:	00f71463          	bne	a4,a5,20403b48 <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403b44:	4791                	li	a5,4
20403b46:	a011                	j	20403b4a <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403b48:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403b4a:	853e                	mv	a0,a5
20403b4c:	4472                	lw	s0,28(sp)
20403b4e:	6105                	addi	sp,sp,32
20403b50:	8082                	ret

20403b52 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403b52:	7179                	addi	sp,sp,-48
20403b54:	d622                	sw	s0,44(sp)
20403b56:	1800                	addi	s0,sp,48
20403b58:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403b5c:	341027f3          	csrr	a5,mepc
20403b60:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403b64:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403b68:	853e                	mv	a0,a5
20403b6a:	5432                	lw	s0,44(sp)
20403b6c:	6145                	addi	sp,sp,48
20403b6e:	8082                	ret

20403b70 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403b70:	1101                	addi	sp,sp,-32
20403b72:	ce22                	sw	s0,28(sp)
20403b74:	1000                	addi	s0,sp,32
20403b76:	fea42623          	sw	a0,-20(s0)
20403b7a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403b7e:	fe842783          	lw	a5,-24(s0)
20403b82:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403b86:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403b88:	853e                	mv	a0,a5
20403b8a:	4472                	lw	s0,28(sp)
20403b8c:	6105                	addi	sp,sp,32
20403b8e:	8082                	ret

20403b90 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403b90:	1101                	addi	sp,sp,-32
20403b92:	ce22                	sw	s0,28(sp)
20403b94:	1000                	addi	s0,sp,32
20403b96:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403b9a:	fec42703          	lw	a4,-20(s0)
20403b9e:	800017b7          	lui	a5,0x80001
20403ba2:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20403ba6:	00f71563          	bne	a4,a5,20403bb0 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403baa:	0c0007b7          	lui	a5,0xc000
20403bae:	a011                	j	20403bb2 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403bb0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403bb2:	853e                	mv	a0,a5
20403bb4:	4472                	lw	s0,28(sp)
20403bb6:	6105                	addi	sp,sp,32
20403bb8:	8082                	ret

20403bba <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403bba:	1101                	addi	sp,sp,-32
20403bbc:	ce22                	sw	s0,28(sp)
20403bbe:	1000                	addi	s0,sp,32
20403bc0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403bc4:	fec42703          	lw	a4,-20(s0)
20403bc8:	800017b7          	lui	a5,0x80001
20403bcc:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20403bd0:	00f71463          	bne	a4,a5,20403bd8 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403bd4:	47ed                	li	a5,27
20403bd6:	a011                	j	20403bda <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403bd8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403bda:	853e                	mv	a0,a5
20403bdc:	4472                	lw	s0,28(sp)
20403bde:	6105                	addi	sp,sp,32
20403be0:	8082                	ret

20403be2 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403be2:	1101                	addi	sp,sp,-32
20403be4:	ce22                	sw	s0,28(sp)
20403be6:	1000                	addi	s0,sp,32
20403be8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403bec:	fec42703          	lw	a4,-20(s0)
20403bf0:	800017b7          	lui	a5,0x80001
20403bf4:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20403bf8:	00f71463          	bne	a4,a5,20403c00 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403bfc:	479d                	li	a5,7
20403bfe:	a011                	j	20403c02 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403c00:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403c02:	853e                	mv	a0,a5
20403c04:	4472                	lw	s0,28(sp)
20403c06:	6105                	addi	sp,sp,32
20403c08:	8082                	ret

20403c0a <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403c0a:	1101                	addi	sp,sp,-32
20403c0c:	ce22                	sw	s0,28(sp)
20403c0e:	1000                	addi	s0,sp,32
20403c10:	fea42623          	sw	a0,-20(s0)
20403c14:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403c18:	fe842783          	lw	a5,-24(s0)
20403c1c:	e791                	bnez	a5,20403c28 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403c1e:	800017b7          	lui	a5,0x80001
20403c22:	03078793          	addi	a5,a5,48 # 80001030 <metal_segment_heap_target_end+0xffffe45c>
20403c26:	a011                	j	20403c2a <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403c28:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403c2a:	853e                	mv	a0,a5
20403c2c:	4472                	lw	s0,28(sp)
20403c2e:	6105                	addi	sp,sp,32
20403c30:	8082                	ret

20403c32 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403c32:	1101                	addi	sp,sp,-32
20403c34:	ce22                	sw	s0,28(sp)
20403c36:	1000                	addi	s0,sp,32
20403c38:	fea42623          	sw	a0,-20(s0)
20403c3c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403c40:	fe842783          	lw	a5,-24(s0)
20403c44:	e399                	bnez	a5,20403c4a <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403c46:	47ad                	li	a5,11
20403c48:	a011                	j	20403c4c <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403c4a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403c4c:	853e                	mv	a0,a5
20403c4e:	4472                	lw	s0,28(sp)
20403c50:	6105                	addi	sp,sp,32
20403c52:	8082                	ret

20403c54 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403c54:	7179                	addi	sp,sp,-48
20403c56:	d606                	sw	ra,44(sp)
20403c58:	d422                	sw	s0,40(sp)
20403c5a:	1800                	addi	s0,sp,48
20403c5c:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403c60:	fdc42503          	lw	a0,-36(s0)
20403c64:	3735                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403c66:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c6a:	fec42703          	lw	a4,-20(s0)
20403c6e:	002007b7          	lui	a5,0x200
20403c72:	0791                	addi	a5,a5,4
20403c74:	97ba                	add	a5,a5,a4
20403c76:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403c78:	853e                	mv	a0,a5
20403c7a:	50b2                	lw	ra,44(sp)
20403c7c:	5422                	lw	s0,40(sp)
20403c7e:	6145                	addi	sp,sp,48
20403c80:	8082                	ret

20403c82 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20403c82:	7179                	addi	sp,sp,-48
20403c84:	d606                	sw	ra,44(sp)
20403c86:	d422                	sw	s0,40(sp)
20403c88:	1800                	addi	s0,sp,48
20403c8a:	fca42e23          	sw	a0,-36(s0)
20403c8e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403c92:	fdc42503          	lw	a0,-36(s0)
20403c96:	3ded                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403c98:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403c9c:	fec42703          	lw	a4,-20(s0)
20403ca0:	002007b7          	lui	a5,0x200
20403ca4:	0791                	addi	a5,a5,4
20403ca6:	97ba                	add	a5,a5,a4
20403ca8:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20403caa:	fd842783          	lw	a5,-40(s0)
20403cae:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20403cb0:	0001                	nop
20403cb2:	50b2                	lw	ra,44(sp)
20403cb4:	5422                	lw	s0,40(sp)
20403cb6:	6145                	addi	sp,sp,48
20403cb8:	8082                	ret

20403cba <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20403cba:	7179                	addi	sp,sp,-48
20403cbc:	d606                	sw	ra,44(sp)
20403cbe:	d422                	sw	s0,40(sp)
20403cc0:	1800                	addi	s0,sp,48
20403cc2:	fca42e23          	sw	a0,-36(s0)
20403cc6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403cca:	fdc42503          	lw	a0,-36(s0)
20403cce:	35c9                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403cd0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403cd4:	fec42703          	lw	a4,-20(s0)
20403cd8:	002007b7          	lui	a5,0x200
20403cdc:	97ba                	add	a5,a5,a4
20403cde:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20403ce0:	fd842783          	lw	a5,-40(s0)
20403ce4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
20403ce6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
20403ce8:	853e                	mv	a0,a5
20403cea:	50b2                	lw	ra,44(sp)
20403cec:	5422                	lw	s0,40(sp)
20403cee:	6145                	addi	sp,sp,48
20403cf0:	8082                	ret

20403cf2 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20403cf2:	7179                	addi	sp,sp,-48
20403cf4:	d606                	sw	ra,44(sp)
20403cf6:	d422                	sw	s0,40(sp)
20403cf8:	1800                	addi	s0,sp,48
20403cfa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403cfe:	fdc42503          	lw	a0,-36(s0)
20403d02:	3579                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403d04:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d08:	fec42703          	lw	a4,-20(s0)
20403d0c:	002007b7          	lui	a5,0x200
20403d10:	97ba                	add	a5,a5,a4
20403d12:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
20403d14:	853e                	mv	a0,a5
20403d16:	50b2                	lw	ra,44(sp)
20403d18:	5422                	lw	s0,40(sp)
20403d1a:	6145                	addi	sp,sp,48
20403d1c:	8082                	ret

20403d1e <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
20403d1e:	7179                	addi	sp,sp,-48
20403d20:	d606                	sw	ra,44(sp)
20403d22:	d422                	sw	s0,40(sp)
20403d24:	1800                	addi	s0,sp,48
20403d26:	fca42e23          	sw	a0,-36(s0)
20403d2a:	fcb42c23          	sw	a1,-40(s0)
20403d2e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
20403d32:	fdc42503          	lw	a0,-36(s0)
20403d36:	3da9                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403d38:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
20403d3c:	fdc42503          	lw	a0,-36(s0)
20403d40:	354d                	jal	20403be2 <__metal_driver_sifive_plic0_max_priority>
20403d42:	87aa                	mv	a5,a0
20403d44:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
20403d48:	fe842783          	lw	a5,-24(s0)
20403d4c:	c785                	beqz	a5,20403d74 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
20403d4e:	fd442703          	lw	a4,-44(s0)
20403d52:	fe842783          	lw	a5,-24(s0)
20403d56:	00f77f63          	bgeu	a4,a5,20403d74 <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d5a:	fd842783          	lw	a5,-40(s0)
20403d5e:	078a                	slli	a5,a5,0x2
20403d60:	873e                	mv	a4,a5
20403d62:	fec42783          	lw	a5,-20(s0)
20403d66:	97ba                	add	a5,a5,a4
20403d68:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20403d6a:	fd442783          	lw	a5,-44(s0)
20403d6e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
20403d70:	4781                	li	a5,0
20403d72:	a011                	j	20403d76 <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
20403d74:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
20403d76:	853e                	mv	a0,a5
20403d78:	50b2                	lw	ra,44(sp)
20403d7a:	5422                	lw	s0,40(sp)
20403d7c:	6145                	addi	sp,sp,48
20403d7e:	8082                	ret

20403d80 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20403d80:	7179                	addi	sp,sp,-48
20403d82:	d606                	sw	ra,44(sp)
20403d84:	d422                	sw	s0,40(sp)
20403d86:	1800                	addi	s0,sp,48
20403d88:	fca42e23          	sw	a0,-36(s0)
20403d8c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20403d90:	fdc42503          	lw	a0,-36(s0)
20403d94:	3bf5                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403d96:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403d9a:	fd842783          	lw	a5,-40(s0)
20403d9e:	078a                	slli	a5,a5,0x2
20403da0:	873e                	mv	a4,a5
20403da2:	fec42783          	lw	a5,-20(s0)
20403da6:	97ba                	add	a5,a5,a4
20403da8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20403daa:	853e                	mv	a0,a5
20403dac:	50b2                	lw	ra,44(sp)
20403dae:	5422                	lw	s0,40(sp)
20403db0:	6145                	addi	sp,sp,48
20403db2:	8082                	ret

20403db4 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20403db4:	7179                	addi	sp,sp,-48
20403db6:	d606                	sw	ra,44(sp)
20403db8:	d422                	sw	s0,40(sp)
20403dba:	1800                	addi	s0,sp,48
20403dbc:	fca42e23          	sw	a0,-36(s0)
20403dc0:	fcb42c23          	sw	a1,-40(s0)
20403dc4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403dc8:	fdc42503          	lw	a0,-36(s0)
20403dcc:	33d1                	jal	20403b90 <__metal_driver_sifive_plic0_control_base>
20403dce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403dd2:	fd842783          	lw	a5,-40(s0)
20403dd6:	8795                	srai	a5,a5,0x5
20403dd8:	078a                	slli	a5,a5,0x2
20403dda:	873e                	mv	a4,a5
20403ddc:	fec42783          	lw	a5,-20(s0)
20403de0:	973e                	add	a4,a4,a5
20403de2:	6789                	lui	a5,0x2
20403de4:	97ba                	add	a5,a5,a4
20403de6:	439c                	lw	a5,0(a5)
20403de8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403dec:	fd442783          	lw	a5,-44(s0)
20403df0:	cf81                	beqz	a5,20403e08 <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20403df2:	fd842783          	lw	a5,-40(s0)
20403df6:	8bfd                	andi	a5,a5,31
20403df8:	4705                	li	a4,1
20403dfa:	00f717b3          	sll	a5,a4,a5
20403dfe:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20403e00:	fe842783          	lw	a5,-24(s0)
20403e04:	8fd9                	or	a5,a5,a4
20403e06:	a829                	j	20403e20 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
20403e08:	fd842783          	lw	a5,-40(s0)
20403e0c:	8bfd                	andi	a5,a5,31
20403e0e:	4705                	li	a4,1
20403e10:	00f717b3          	sll	a5,a4,a5
20403e14:	fff7c793          	not	a5,a5
20403e18:	873e                	mv	a4,a5
20403e1a:	fe842783          	lw	a5,-24(s0)
20403e1e:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403e20:	fd842703          	lw	a4,-40(s0)
20403e24:	8715                	srai	a4,a4,0x5
20403e26:	070a                	slli	a4,a4,0x2
20403e28:	86ba                	mv	a3,a4
20403e2a:	fec42703          	lw	a4,-20(s0)
20403e2e:	96ba                	add	a3,a3,a4
20403e30:	6709                	lui	a4,0x2
20403e32:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20403e34:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
20403e36:	0001                	nop
20403e38:	50b2                	lw	ra,44(sp)
20403e3a:	5422                	lw	s0,40(sp)
20403e3c:	6145                	addi	sp,sp,48
20403e3e:	8082                	ret

20403e40 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
20403e40:	1101                	addi	sp,sp,-32
20403e42:	ce06                	sw	ra,28(sp)
20403e44:	cc22                	sw	s0,24(sp)
20403e46:	1000                	addi	s0,sp,32
20403e48:	fea42623          	sw	a0,-20(s0)
20403e4c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
20403e50:	12c00513          	li	a0,300
20403e54:	1b4010ef          	jal	ra,20405008 <metal_shutdown>

20403e58 <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
20403e58:	7179                	addi	sp,sp,-48
20403e5a:	d606                	sw	ra,44(sp)
20403e5c:	d422                	sw	s0,40(sp)
20403e5e:	1800                	addi	s0,sp,48
20403e60:	fca42e23          	sw	a0,-36(s0)
20403e64:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
20403e68:	fd842783          	lw	a5,-40(s0)
20403e6c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
20403e70:	fec42503          	lw	a0,-20(s0)
20403e74:	33c5                	jal	20403c54 <__metal_plic0_claim_interrupt>
20403e76:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20403e7a:	fec42503          	lw	a0,-20(s0)
20403e7e:	3b35                	jal	20403bba <__metal_driver_sifive_plic0_num_interrupts>
20403e80:	87aa                	mv	a5,a0
20403e82:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
20403e86:	fe842703          	lw	a4,-24(s0)
20403e8a:	fe442783          	lw	a5,-28(s0)
20403e8e:	04f77263          	bgeu	a4,a5,20403ed2 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
20403e92:	fec42703          	lw	a4,-20(s0)
20403e96:	fe842783          	lw	a5,-24(s0)
20403e9a:	078a                	slli	a5,a5,0x2
20403e9c:	97ba                	add	a5,a5,a4
20403e9e:	479c                	lw	a5,8(a5)
20403ea0:	cb8d                	beqz	a5,20403ed2 <__metal_plic0_handler+0x7a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
20403ea2:	fec42703          	lw	a4,-20(s0)
20403ea6:	fe842783          	lw	a5,-24(s0)
20403eaa:	078a                	slli	a5,a5,0x2
20403eac:	97ba                	add	a5,a5,a4
20403eae:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20403eb2:	fe842603          	lw	a2,-24(s0)
20403eb6:	fec42683          	lw	a3,-20(s0)
20403eba:	fe842703          	lw	a4,-24(s0)
20403ebe:	87ba                	mv	a5,a4
20403ec0:	0786                	slli	a5,a5,0x1
20403ec2:	97ba                	add	a5,a5,a4
20403ec4:	078e                	slli	a5,a5,0x3
20403ec6:	97b6                	add	a5,a5,a3
20403ec8:	0887a783          	lw	a5,136(a5)
20403ecc:	85be                	mv	a1,a5
20403ece:	8532                	mv	a0,a2
20403ed0:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
20403ed2:	fe842583          	lw	a1,-24(s0)
20403ed6:	fec42503          	lw	a0,-20(s0)
20403eda:	3365                	jal	20403c82 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20403edc:	0001                	nop
20403ede:	50b2                	lw	ra,44(sp)
20403ee0:	5422                	lw	s0,40(sp)
20403ee2:	6145                	addi	sp,sp,48
20403ee4:	8082                	ret

20403ee6 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20403ee6:	7139                	addi	sp,sp,-64
20403ee8:	de06                	sw	ra,60(sp)
20403eea:	dc22                	sw	s0,56(sp)
20403eec:	0080                	addi	s0,sp,64
20403eee:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20403ef2:	fcc42783          	lw	a5,-52(s0)
20403ef6:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20403efa:	fe442783          	lw	a5,-28(s0)
20403efe:	43dc                	lw	a5,4(a5)
20403f00:	10079c63          	bnez	a5,20404018 <__metal_driver_riscv_plic0_init+0x132>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403f04:	fe042623          	sw	zero,-20(s0)
20403f08:	a201                	j	20404008 <__metal_driver_riscv_plic0_init+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20403f0a:	fcc42503          	lw	a0,-52(s0)
20403f0e:	3175                	jal	20403bba <__metal_driver_sifive_plic0_num_interrupts>
20403f10:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
20403f14:	fec42583          	lw	a1,-20(s0)
20403f18:	fcc42503          	lw	a0,-52(s0)
20403f1c:	31fd                	jal	20403c0a <__metal_driver_sifive_plic0_interrupt_parents>
20403f1e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20403f22:	fec42583          	lw	a1,-20(s0)
20403f26:	fcc42503          	lw	a0,-52(s0)
20403f2a:	3321                	jal	20403c32 <__metal_driver_sifive_plic0_interrupt_lines>
20403f2c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
20403f30:	fdc42783          	lw	a5,-36(s0)
20403f34:	439c                	lw	a5,0(a5)
20403f36:	439c                	lw	a5,0(a5)
20403f38:	fdc42503          	lw	a0,-36(s0)
20403f3c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
20403f3e:	fe042423          	sw	zero,-24(s0)
20403f42:	a085                	j	20403fa2 <__metal_driver_riscv_plic0_init+0xbc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
20403f44:	4601                	li	a2,0
20403f46:	fe842583          	lw	a1,-24(s0)
20403f4a:	fe442503          	lw	a0,-28(s0)
20403f4e:	359d                	jal	20403db4 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
20403f50:	4601                	li	a2,0
20403f52:	fe842583          	lw	a1,-24(s0)
20403f56:	fcc42503          	lw	a0,-52(s0)
20403f5a:	33d1                	jal	20403d1e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
20403f5c:	fe442703          	lw	a4,-28(s0)
20403f60:	fe842783          	lw	a5,-24(s0)
20403f64:	078a                	slli	a5,a5,0x2
20403f66:	97ba                	add	a5,a5,a4
20403f68:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
20403f6c:	fe442683          	lw	a3,-28(s0)
20403f70:	fe842703          	lw	a4,-24(s0)
20403f74:	87ba                	mv	a5,a4
20403f76:	0786                	slli	a5,a5,0x1
20403f78:	97ba                	add	a5,a5,a4
20403f7a:	078e                	slli	a5,a5,0x3
20403f7c:	97b6                	add	a5,a5,a3
20403f7e:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20403f82:	fe442683          	lw	a3,-28(s0)
20403f86:	fe842703          	lw	a4,-24(s0)
20403f8a:	87ba                	mv	a5,a4
20403f8c:	0786                	slli	a5,a5,0x1
20403f8e:	97ba                	add	a5,a5,a4
20403f90:	078e                	slli	a5,a5,0x3
20403f92:	97b6                	add	a5,a5,a3
20403f94:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20403f98:	fe842783          	lw	a5,-24(s0)
20403f9c:	0785                	addi	a5,a5,1
20403f9e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20403fa2:	fe842703          	lw	a4,-24(s0)
20403fa6:	fe042783          	lw	a5,-32(s0)
20403faa:	f8f74de3          	blt	a4,a5,20403f44 <__metal_driver_riscv_plic0_init+0x5e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
20403fae:	4581                	li	a1,0
20403fb0:	fcc42503          	lw	a0,-52(s0)
20403fb4:	3319                	jal	20403cba <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20403fb6:	fdc42783          	lw	a5,-36(s0)
20403fba:	439c                	lw	a5,0(a5)
20403fbc:	4fdc                	lw	a5,28(a5)
20403fbe:	fe442683          	lw	a3,-28(s0)
20403fc2:	4601                	li	a2,0
20403fc4:	fd842583          	lw	a1,-40(s0)
20403fc8:	fdc42503          	lw	a0,-36(s0)
20403fcc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
20403fce:	fdc42783          	lw	a5,-36(s0)
20403fd2:	439c                	lw	a5,0(a5)
20403fd4:	4fd8                	lw	a4,28(a5)
20403fd6:	fe442683          	lw	a3,-28(s0)
20403fda:	204047b7          	lui	a5,0x20404
20403fde:	e5878613          	addi	a2,a5,-424 # 20403e58 <__metal_plic0_handler>
20403fe2:	fd842583          	lw	a1,-40(s0)
20403fe6:	fdc42503          	lw	a0,-36(s0)
20403fea:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
20403fec:	fdc42783          	lw	a5,-36(s0)
20403ff0:	439c                	lw	a5,0(a5)
20403ff2:	53dc                	lw	a5,36(a5)
20403ff4:	fd842583          	lw	a1,-40(s0)
20403ff8:	fdc42503          	lw	a0,-36(s0)
20403ffc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20403ffe:	fec42783          	lw	a5,-20(s0)
20404002:	0785                	addi	a5,a5,1
20404004:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404008:	fec42783          	lw	a5,-20(s0)
2040400c:	eef05fe3          	blez	a5,20403f0a <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
20404010:	fe442783          	lw	a5,-28(s0)
20404014:	4705                	li	a4,1
20404016:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
20404018:	0001                	nop
2040401a:	50f2                	lw	ra,60(sp)
2040401c:	5462                	lw	s0,56(sp)
2040401e:	6121                	addi	sp,sp,64
20404020:	8082                	ret

20404022 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
20404022:	7179                	addi	sp,sp,-48
20404024:	d606                	sw	ra,44(sp)
20404026:	d422                	sw	s0,40(sp)
20404028:	1800                	addi	s0,sp,48
2040402a:	fca42e23          	sw	a0,-36(s0)
2040402e:	fcb42c23          	sw	a1,-40(s0)
20404032:	fcc42a23          	sw	a2,-44(s0)
20404036:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040403a:	fdc42783          	lw	a5,-36(s0)
2040403e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404042:	fdc42503          	lw	a0,-36(s0)
20404046:	b75ff0ef          	jal	ra,20403bba <__metal_driver_sifive_plic0_num_interrupts>
2040404a:	872a                	mv	a4,a0
2040404c:	fd842783          	lw	a5,-40(s0)
20404050:	00e7c463          	blt	a5,a4,20404058 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
20404054:	57fd                	li	a5,-1
20404056:	a049                	j	204040d8 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
20404058:	fd442783          	lw	a5,-44(s0)
2040405c:	cf95                	beqz	a5,20404098 <__metal_driver_riscv_plic0_register+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
2040405e:	4609                	li	a2,2
20404060:	fd842583          	lw	a1,-40(s0)
20404064:	fdc42503          	lw	a0,-36(s0)
20404068:	395d                	jal	20403d1e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
2040406a:	fec42703          	lw	a4,-20(s0)
2040406e:	fd842783          	lw	a5,-40(s0)
20404072:	078a                	slli	a5,a5,0x2
20404074:	97ba                	add	a5,a5,a4
20404076:	fd442703          	lw	a4,-44(s0)
2040407a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040407c:	fec42683          	lw	a3,-20(s0)
20404080:	fd842703          	lw	a4,-40(s0)
20404084:	87ba                	mv	a5,a4
20404086:	0786                	slli	a5,a5,0x1
20404088:	97ba                	add	a5,a5,a4
2040408a:	078e                	slli	a5,a5,0x3
2040408c:	97b6                	add	a5,a5,a3
2040408e:	fd042703          	lw	a4,-48(s0)
20404092:	08e7a423          	sw	a4,136(a5)
20404096:	a081                	j	204040d6 <__metal_driver_riscv_plic0_register+0xb4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
20404098:	4605                	li	a2,1
2040409a:	fd842583          	lw	a1,-40(s0)
2040409e:	fdc42503          	lw	a0,-36(s0)
204040a2:	c7dff0ef          	jal	ra,20403d1e <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
204040a6:	fec42703          	lw	a4,-20(s0)
204040aa:	fd842783          	lw	a5,-40(s0)
204040ae:	078a                	slli	a5,a5,0x2
204040b0:	97ba                	add	a5,a5,a4
204040b2:	20404737          	lui	a4,0x20404
204040b6:	e4070713          	addi	a4,a4,-448 # 20403e40 <__metal_plic0_default_handler>
204040ba:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
204040bc:	fec42683          	lw	a3,-20(s0)
204040c0:	fd842703          	lw	a4,-40(s0)
204040c4:	87ba                	mv	a5,a4
204040c6:	0786                	slli	a5,a5,0x1
204040c8:	97ba                	add	a5,a5,a4
204040ca:	078e                	slli	a5,a5,0x3
204040cc:	97b6                	add	a5,a5,a3
204040ce:	fd042703          	lw	a4,-48(s0)
204040d2:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
204040d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
204040d8:	853e                	mv	a0,a5
204040da:	50b2                	lw	ra,44(sp)
204040dc:	5422                	lw	s0,40(sp)
204040de:	6145                	addi	sp,sp,48
204040e0:	8082                	ret

204040e2 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
204040e2:	7179                	addi	sp,sp,-48
204040e4:	d606                	sw	ra,44(sp)
204040e6:	d422                	sw	s0,40(sp)
204040e8:	1800                	addi	s0,sp,48
204040ea:	fca42e23          	sw	a0,-36(s0)
204040ee:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204040f2:	fdc42783          	lw	a5,-36(s0)
204040f6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204040fa:	fdc42503          	lw	a0,-36(s0)
204040fe:	abdff0ef          	jal	ra,20403bba <__metal_driver_sifive_plic0_num_interrupts>
20404102:	872a                	mv	a4,a0
20404104:	fd842783          	lw	a5,-40(s0)
20404108:	00e7c463          	blt	a5,a4,20404110 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040410c:	57fd                	li	a5,-1
2040410e:	a809                	j	20404120 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20404110:	4605                	li	a2,1
20404112:	fd842583          	lw	a1,-40(s0)
20404116:	fec42503          	lw	a0,-20(s0)
2040411a:	c9bff0ef          	jal	ra,20403db4 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
2040411e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
20404120:	853e                	mv	a0,a5
20404122:	50b2                	lw	ra,44(sp)
20404124:	5422                	lw	s0,40(sp)
20404126:	6145                	addi	sp,sp,48
20404128:	8082                	ret

2040412a <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2040412a:	7179                	addi	sp,sp,-48
2040412c:	d606                	sw	ra,44(sp)
2040412e:	d422                	sw	s0,40(sp)
20404130:	1800                	addi	s0,sp,48
20404132:	fca42e23          	sw	a0,-36(s0)
20404136:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040413a:	fdc42783          	lw	a5,-36(s0)
2040413e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404142:	fdc42503          	lw	a0,-36(s0)
20404146:	a75ff0ef          	jal	ra,20403bba <__metal_driver_sifive_plic0_num_interrupts>
2040414a:	872a                	mv	a4,a0
2040414c:	fd842783          	lw	a5,-40(s0)
20404150:	00e7c463          	blt	a5,a4,20404158 <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
20404154:	57fd                	li	a5,-1
20404156:	a809                	j	20404168 <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
20404158:	4601                	li	a2,0
2040415a:	fd842583          	lw	a1,-40(s0)
2040415e:	fec42503          	lw	a0,-20(s0)
20404162:	c53ff0ef          	jal	ra,20403db4 <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
20404166:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
20404168:	853e                	mv	a0,a5
2040416a:	50b2                	lw	ra,44(sp)
2040416c:	5422                	lw	s0,40(sp)
2040416e:	6145                	addi	sp,sp,48
20404170:	8082                	ret

20404172 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404172:	1101                	addi	sp,sp,-32
20404174:	ce22                	sw	s0,28(sp)
20404176:	1000                	addi	s0,sp,32
20404178:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040417c:	fec42703          	lw	a4,-20(s0)
20404180:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404184:	00f71563          	bne	a4,a5,2040418e <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20404188:	100127b7          	lui	a5,0x10012
2040418c:	a011                	j	20404190 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
2040418e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404190:	853e                	mv	a0,a5
20404192:	4472                	lw	s0,28(sp)
20404194:	6105                	addi	sp,sp,32
20404196:	8082                	ret

20404198 <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
20404198:	1101                	addi	sp,sp,-32
2040419a:	ce22                	sw	s0,28(sp)
2040419c:	1000                	addi	s0,sp,32
2040419e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
204041a2:	fec42703          	lw	a4,-20(s0)
204041a6:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204041aa:	00f71763          	bne	a4,a5,204041b8 <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
204041ae:	800017b7          	lui	a5,0x80001
204041b2:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
204041b6:	a011                	j	204041ba <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
204041b8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
204041ba:	853e                	mv	a0,a5
204041bc:	4472                	lw	s0,28(sp)
204041be:	6105                	addi	sp,sp,32
204041c0:	8082                	ret

204041c2 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
204041c2:	1101                	addi	sp,sp,-32
204041c4:	ce22                	sw	s0,28(sp)
204041c6:	1000                	addi	s0,sp,32
204041c8:	fea42623          	sw	a0,-20(s0)
204041cc:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
204041d0:	fec42703          	lw	a4,-20(s0)
204041d4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204041d8:	00f71763          	bne	a4,a5,204041e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
204041dc:	fe842783          	lw	a5,-24(s0)
204041e0:	e399                	bnez	a5,204041e6 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
204041e2:	479d                	li	a5,7
204041e4:	a269                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
204041e6:	fec42703          	lw	a4,-20(s0)
204041ea:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204041ee:	00f71963          	bne	a4,a5,20404200 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
204041f2:	fe842703          	lw	a4,-24(s0)
204041f6:	4785                	li	a5,1
204041f8:	00f71463          	bne	a4,a5,20404200 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
204041fc:	47a1                	li	a5,8
204041fe:	aa85                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404200:	fec42703          	lw	a4,-20(s0)
20404204:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404208:	00f71963          	bne	a4,a5,2040421a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040420c:	fe842703          	lw	a4,-24(s0)
20404210:	4789                	li	a5,2
20404212:	00f71463          	bne	a4,a5,2040421a <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
20404216:	47a5                	li	a5,9
20404218:	aa99                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2040421a:	fec42703          	lw	a4,-20(s0)
2040421e:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404222:	00f71963          	bne	a4,a5,20404234 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
20404226:	fe842703          	lw	a4,-24(s0)
2040422a:	478d                	li	a5,3
2040422c:	00f71463          	bne	a4,a5,20404234 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
20404230:	47a9                	li	a5,10
20404232:	aa35                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20404234:	fec42703          	lw	a4,-20(s0)
20404238:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040423c:	00f71963          	bne	a4,a5,2040424e <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
20404240:	fe842703          	lw	a4,-24(s0)
20404244:	4791                	li	a5,4
20404246:	00f71463          	bne	a4,a5,2040424e <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
2040424a:	47ad                	li	a5,11
2040424c:	a20d                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2040424e:	fec42703          	lw	a4,-20(s0)
20404252:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404256:	00f71963          	bne	a4,a5,20404268 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
2040425a:	fe842703          	lw	a4,-24(s0)
2040425e:	4795                	li	a5,5
20404260:	00f71463          	bne	a4,a5,20404268 <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
20404264:	47b1                	li	a5,12
20404266:	a221                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20404268:	fec42703          	lw	a4,-20(s0)
2040426c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404270:	00f71963          	bne	a4,a5,20404282 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404274:	fe842703          	lw	a4,-24(s0)
20404278:	4799                	li	a5,6
2040427a:	00f71463          	bne	a4,a5,20404282 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
2040427e:	47b5                	li	a5,13
20404280:	a0fd                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404282:	fec42703          	lw	a4,-20(s0)
20404286:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040428a:	00f71963          	bne	a4,a5,2040429c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
2040428e:	fe842703          	lw	a4,-24(s0)
20404292:	479d                	li	a5,7
20404294:	00f71463          	bne	a4,a5,2040429c <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
20404298:	47b9                	li	a5,14
2040429a:	a8d1                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040429c:	fec42703          	lw	a4,-20(s0)
204042a0:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204042a4:	00f71963          	bne	a4,a5,204042b6 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
204042a8:	fe842703          	lw	a4,-24(s0)
204042ac:	47a1                	li	a5,8
204042ae:	00f71463          	bne	a4,a5,204042b6 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
204042b2:	47bd                	li	a5,15
204042b4:	a86d                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
204042b6:	fec42703          	lw	a4,-20(s0)
204042ba:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204042be:	00f71963          	bne	a4,a5,204042d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
204042c2:	fe842703          	lw	a4,-24(s0)
204042c6:	47a5                	li	a5,9
204042c8:	00f71463          	bne	a4,a5,204042d0 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
204042cc:	47c1                	li	a5,16
204042ce:	a045                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
204042d0:	fec42703          	lw	a4,-20(s0)
204042d4:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204042d8:	00f71963          	bne	a4,a5,204042ea <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
204042dc:	fe842703          	lw	a4,-24(s0)
204042e0:	47a9                	li	a5,10
204042e2:	00f71463          	bne	a4,a5,204042ea <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
204042e6:	47c5                	li	a5,17
204042e8:	a059                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
204042ea:	fec42703          	lw	a4,-20(s0)
204042ee:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
204042f2:	00f71963          	bne	a4,a5,20404304 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
204042f6:	fe842703          	lw	a4,-24(s0)
204042fa:	47ad                	li	a5,11
204042fc:	00f71463          	bne	a4,a5,20404304 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404300:	47c9                	li	a5,18
20404302:	a0b5                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404304:	fec42703          	lw	a4,-20(s0)
20404308:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040430c:	00f71963          	bne	a4,a5,2040431e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
20404310:	fe842703          	lw	a4,-24(s0)
20404314:	47b1                	li	a5,12
20404316:	00f71463          	bne	a4,a5,2040431e <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
2040431a:	47cd                	li	a5,19
2040431c:	a889                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2040431e:	fec42703          	lw	a4,-20(s0)
20404322:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404326:	00f71963          	bne	a4,a5,20404338 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
2040432a:	fe842703          	lw	a4,-24(s0)
2040432e:	47b5                	li	a5,13
20404330:	00f71463          	bne	a4,a5,20404338 <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
20404334:	47d1                	li	a5,20
20404336:	a825                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20404338:	fec42703          	lw	a4,-20(s0)
2040433c:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404340:	00f71963          	bne	a4,a5,20404352 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
20404344:	fe842703          	lw	a4,-24(s0)
20404348:	47b9                	li	a5,14
2040434a:	00f71463          	bne	a4,a5,20404352 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
2040434e:	47d5                	li	a5,21
20404350:	a839                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404352:	fec42703          	lw	a4,-20(s0)
20404356:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
2040435a:	00f71963          	bne	a4,a5,2040436c <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
2040435e:	fe842703          	lw	a4,-24(s0)
20404362:	47bd                	li	a5,15
20404364:	00f71463          	bne	a4,a5,2040436c <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
20404368:	47d9                	li	a5,22
2040436a:	a011                	j	2040436e <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
2040436c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
2040436e:	853e                	mv	a0,a5
20404370:	4472                	lw	s0,28(sp)
20404372:	6105                	addi	sp,sp,32
20404374:	8082                	ret

20404376 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404376:	7179                	addi	sp,sp,-48
20404378:	d606                	sw	ra,44(sp)
2040437a:	d422                	sw	s0,40(sp)
2040437c:	1800                	addi	s0,sp,48
2040437e:	fca42e23          	sw	a0,-36(s0)
20404382:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404386:	fdc42503          	lw	a0,-36(s0)
2040438a:	33e5                	jal	20404172 <__metal_driver_sifive_gpio0_base>
2040438c:	87aa                	mv	a5,a0
2040438e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404392:	fec42783          	lw	a5,-20(s0)
20404396:	0791                	addi	a5,a5,4
20404398:	4398                	lw	a4,0(a5)
2040439a:	fd842783          	lw	a5,-40(s0)
2040439e:	fec42683          	lw	a3,-20(s0)
204043a2:	0691                	addi	a3,a3,4
204043a4:	8fd9                	or	a5,a5,a4
204043a6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
204043a8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
204043aa:	853e                	mv	a0,a5
204043ac:	50b2                	lw	ra,44(sp)
204043ae:	5422                	lw	s0,40(sp)
204043b0:	6145                	addi	sp,sp,48
204043b2:	8082                	ret

204043b4 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
204043b4:	7179                	addi	sp,sp,-48
204043b6:	d606                	sw	ra,44(sp)
204043b8:	d422                	sw	s0,40(sp)
204043ba:	1800                	addi	s0,sp,48
204043bc:	fca42e23          	sw	a0,-36(s0)
204043c0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204043c4:	fdc42503          	lw	a0,-36(s0)
204043c8:	336d                	jal	20404172 <__metal_driver_sifive_gpio0_base>
204043ca:	87aa                	mv	a5,a0
204043cc:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
204043d0:	fec42783          	lw	a5,-20(s0)
204043d4:	0791                	addi	a5,a5,4
204043d6:	439c                	lw	a5,0(a5)
204043d8:	fd842703          	lw	a4,-40(s0)
204043dc:	fff74713          	not	a4,a4
204043e0:	86ba                	mv	a3,a4
204043e2:	fec42703          	lw	a4,-20(s0)
204043e6:	0711                	addi	a4,a4,4
204043e8:	8ff5                	and	a5,a5,a3
204043ea:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
204043ec:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
204043ee:	853e                	mv	a0,a5
204043f0:	50b2                	lw	ra,44(sp)
204043f2:	5422                	lw	s0,40(sp)
204043f4:	6145                	addi	sp,sp,48
204043f6:	8082                	ret

204043f8 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
204043f8:	7179                	addi	sp,sp,-48
204043fa:	d606                	sw	ra,44(sp)
204043fc:	d422                	sw	s0,40(sp)
204043fe:	1800                	addi	s0,sp,48
20404400:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404404:	fdc42503          	lw	a0,-36(s0)
20404408:	33ad                	jal	20404172 <__metal_driver_sifive_gpio0_base>
2040440a:	87aa                	mv	a5,a0
2040440c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
20404410:	fec42783          	lw	a5,-20(s0)
20404414:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
20404416:	853e                	mv	a0,a5
20404418:	50b2                	lw	ra,44(sp)
2040441a:	5422                	lw	s0,40(sp)
2040441c:	6145                	addi	sp,sp,48
2040441e:	8082                	ret

20404420 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20404420:	7179                	addi	sp,sp,-48
20404422:	d606                	sw	ra,44(sp)
20404424:	d422                	sw	s0,40(sp)
20404426:	1800                	addi	s0,sp,48
20404428:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040442c:	fdc42503          	lw	a0,-36(s0)
20404430:	3389                	jal	20404172 <__metal_driver_sifive_gpio0_base>
20404432:	87aa                	mv	a5,a0
20404434:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
20404438:	fec42783          	lw	a5,-20(s0)
2040443c:	07b1                	addi	a5,a5,12
2040443e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
20404440:	853e                	mv	a0,a5
20404442:	50b2                	lw	ra,44(sp)
20404444:	5422                	lw	s0,40(sp)
20404446:	6145                	addi	sp,sp,48
20404448:	8082                	ret

2040444a <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
2040444a:	7179                	addi	sp,sp,-48
2040444c:	d606                	sw	ra,44(sp)
2040444e:	d422                	sw	s0,40(sp)
20404450:	1800                	addi	s0,sp,48
20404452:	fca42e23          	sw	a0,-36(s0)
20404456:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040445a:	fdc42503          	lw	a0,-36(s0)
2040445e:	d15ff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
20404462:	87aa                	mv	a5,a0
20404464:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404468:	fec42783          	lw	a5,-20(s0)
2040446c:	07a1                	addi	a5,a5,8
2040446e:	439c                	lw	a5,0(a5)
20404470:	fd842703          	lw	a4,-40(s0)
20404474:	fff74713          	not	a4,a4
20404478:	86ba                	mv	a3,a4
2040447a:	fec42703          	lw	a4,-20(s0)
2040447e:	0721                	addi	a4,a4,8
20404480:	8ff5                	and	a5,a5,a3
20404482:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
20404484:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404486:	853e                	mv	a0,a5
20404488:	50b2                	lw	ra,44(sp)
2040448a:	5422                	lw	s0,40(sp)
2040448c:	6145                	addi	sp,sp,48
2040448e:	8082                	ret

20404490 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20404490:	7179                	addi	sp,sp,-48
20404492:	d606                	sw	ra,44(sp)
20404494:	d422                	sw	s0,40(sp)
20404496:	1800                	addi	s0,sp,48
20404498:	fca42e23          	sw	a0,-36(s0)
2040449c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044a0:	fdc42503          	lw	a0,-36(s0)
204044a4:	ccfff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
204044a8:	87aa                	mv	a5,a0
204044aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
204044ae:	fec42783          	lw	a5,-20(s0)
204044b2:	07a1                	addi	a5,a5,8
204044b4:	4398                	lw	a4,0(a5)
204044b6:	fd842783          	lw	a5,-40(s0)
204044ba:	fec42683          	lw	a3,-20(s0)
204044be:	06a1                	addi	a3,a3,8
204044c0:	8fd9                	or	a5,a5,a4
204044c2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
204044c4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
204044c6:	853e                	mv	a0,a5
204044c8:	50b2                	lw	ra,44(sp)
204044ca:	5422                	lw	s0,40(sp)
204044cc:	6145                	addi	sp,sp,48
204044ce:	8082                	ret

204044d0 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
204044d0:	7179                	addi	sp,sp,-48
204044d2:	d606                	sw	ra,44(sp)
204044d4:	d422                	sw	s0,40(sp)
204044d6:	1800                	addi	s0,sp,48
204044d8:	fca42e23          	sw	a0,-36(s0)
204044dc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204044e0:	fdc42503          	lw	a0,-36(s0)
204044e4:	c8fff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
204044e8:	87aa                	mv	a5,a0
204044ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
204044ee:	fec42783          	lw	a5,-20(s0)
204044f2:	07b1                	addi	a5,a5,12
204044f4:	4398                	lw	a4,0(a5)
204044f6:	fd842783          	lw	a5,-40(s0)
204044fa:	fec42683          	lw	a3,-20(s0)
204044fe:	06b1                	addi	a3,a3,12
20404500:	8fd9                	or	a5,a5,a4
20404502:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
20404504:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
20404506:	853e                	mv	a0,a5
20404508:	50b2                	lw	ra,44(sp)
2040450a:	5422                	lw	s0,40(sp)
2040450c:	6145                	addi	sp,sp,48
2040450e:	8082                	ret

20404510 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20404510:	7179                	addi	sp,sp,-48
20404512:	d606                	sw	ra,44(sp)
20404514:	d422                	sw	s0,40(sp)
20404516:	1800                	addi	s0,sp,48
20404518:	fca42e23          	sw	a0,-36(s0)
2040451c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404520:	fdc42503          	lw	a0,-36(s0)
20404524:	c4fff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
20404528:	87aa                	mv	a5,a0
2040452a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
2040452e:	fec42783          	lw	a5,-20(s0)
20404532:	07b1                	addi	a5,a5,12
20404534:	439c                	lw	a5,0(a5)
20404536:	fd842703          	lw	a4,-40(s0)
2040453a:	fff74713          	not	a4,a4
2040453e:	86ba                	mv	a3,a4
20404540:	fec42703          	lw	a4,-20(s0)
20404544:	0731                	addi	a4,a4,12
20404546:	8ff5                	and	a5,a5,a3
20404548:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
2040454a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
2040454c:	853e                	mv	a0,a5
2040454e:	50b2                	lw	ra,44(sp)
20404550:	5422                	lw	s0,40(sp)
20404552:	6145                	addi	sp,sp,48
20404554:	8082                	ret

20404556 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20404556:	7179                	addi	sp,sp,-48
20404558:	d606                	sw	ra,44(sp)
2040455a:	d422                	sw	s0,40(sp)
2040455c:	1800                	addi	s0,sp,48
2040455e:	fca42e23          	sw	a0,-36(s0)
20404562:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404566:	fdc42503          	lw	a0,-36(s0)
2040456a:	c09ff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
2040456e:	87aa                	mv	a5,a0
20404570:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404574:	fec42783          	lw	a5,-20(s0)
20404578:	07b1                	addi	a5,a5,12
2040457a:	4398                	lw	a4,0(a5)
2040457c:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404580:	fec42683          	lw	a3,-20(s0)
20404584:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404586:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404588:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
2040458a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
2040458c:	853e                	mv	a0,a5
2040458e:	50b2                	lw	ra,44(sp)
20404590:	5422                	lw	s0,40(sp)
20404592:	6145                	addi	sp,sp,48
20404594:	8082                	ret

20404596 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404596:	7179                	addi	sp,sp,-48
20404598:	d606                	sw	ra,44(sp)
2040459a:	d422                	sw	s0,40(sp)
2040459c:	1800                	addi	s0,sp,48
2040459e:	fca42e23          	sw	a0,-36(s0)
204045a2:	fcb42c23          	sw	a1,-40(s0)
204045a6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204045aa:	fdc42503          	lw	a0,-36(s0)
204045ae:	bc5ff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
204045b2:	87aa                	mv	a5,a0
204045b4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
204045b8:	fec42783          	lw	a5,-20(s0)
204045bc:	03c78793          	addi	a5,a5,60
204045c0:	439c                	lw	a5,0(a5)
204045c2:	fd842703          	lw	a4,-40(s0)
204045c6:	fff74713          	not	a4,a4
204045ca:	86ba                	mv	a3,a4
204045cc:	fec42703          	lw	a4,-20(s0)
204045d0:	03c70713          	addi	a4,a4,60
204045d4:	8ff5                	and	a5,a5,a3
204045d6:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
204045d8:	fec42783          	lw	a5,-20(s0)
204045dc:	03878793          	addi	a5,a5,56
204045e0:	4398                	lw	a4,0(a5)
204045e2:	fd442783          	lw	a5,-44(s0)
204045e6:	fec42683          	lw	a3,-20(s0)
204045ea:	03868693          	addi	a3,a3,56
204045ee:	8fd9                	or	a5,a5,a4
204045f0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
204045f2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
204045f4:	853e                	mv	a0,a5
204045f6:	50b2                	lw	ra,44(sp)
204045f8:	5422                	lw	s0,40(sp)
204045fa:	6145                	addi	sp,sp,48
204045fc:	8082                	ret

204045fe <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
204045fe:	7179                	addi	sp,sp,-48
20404600:	d606                	sw	ra,44(sp)
20404602:	d422                	sw	s0,40(sp)
20404604:	1800                	addi	s0,sp,48
20404606:	fca42e23          	sw	a0,-36(s0)
2040460a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040460e:	fdc42503          	lw	a0,-36(s0)
20404612:	b61ff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
20404616:	87aa                	mv	a5,a0
20404618:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
2040461c:	fec42783          	lw	a5,-20(s0)
20404620:	03878793          	addi	a5,a5,56
20404624:	439c                	lw	a5,0(a5)
20404626:	fd842703          	lw	a4,-40(s0)
2040462a:	fff74713          	not	a4,a4
2040462e:	86ba                	mv	a3,a4
20404630:	fec42703          	lw	a4,-20(s0)
20404634:	03870713          	addi	a4,a4,56
20404638:	8ff5                	and	a5,a5,a3
2040463a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
2040463c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
2040463e:	853e                	mv	a0,a5
20404640:	50b2                	lw	ra,44(sp)
20404642:	5422                	lw	s0,40(sp)
20404644:	6145                	addi	sp,sp,48
20404646:	8082                	ret

20404648 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404648:	7179                	addi	sp,sp,-48
2040464a:	d606                	sw	ra,44(sp)
2040464c:	d422                	sw	s0,40(sp)
2040464e:	1800                	addi	s0,sp,48
20404650:	fca42e23          	sw	a0,-36(s0)
20404654:	fcb42c23          	sw	a1,-40(s0)
20404658:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040465c:	fdc42503          	lw	a0,-36(s0)
20404660:	b13ff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
20404664:	87aa                	mv	a5,a0
20404666:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
2040466a:	fd442703          	lw	a4,-44(s0)
2040466e:	479d                	li	a5,7
20404670:	1ce7e963          	bltu	a5,a4,20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404674:	fd442783          	lw	a5,-44(s0)
20404678:	00279713          	slli	a4,a5,0x2
2040467c:	204057b7          	lui	a5,0x20405
20404680:	66c78793          	addi	a5,a5,1644 # 2040566c <__metal_driver_vtable_riscv_plic0+0x4c>
20404684:	97ba                	add	a5,a5,a4
20404686:	439c                	lw	a5,0(a5)
20404688:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
2040468a:	fec42783          	lw	a5,-20(s0)
2040468e:	07e1                	addi	a5,a5,24
20404690:	439c                	lw	a5,0(a5)
20404692:	fd842703          	lw	a4,-40(s0)
20404696:	fff74713          	not	a4,a4
2040469a:	86ba                	mv	a3,a4
2040469c:	fec42703          	lw	a4,-20(s0)
204046a0:	0761                	addi	a4,a4,24
204046a2:	8ff5                	and	a5,a5,a3
204046a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
204046a6:	fec42783          	lw	a5,-20(s0)
204046aa:	02078793          	addi	a5,a5,32
204046ae:	439c                	lw	a5,0(a5)
204046b0:	fd842703          	lw	a4,-40(s0)
204046b4:	fff74713          	not	a4,a4
204046b8:	86ba                	mv	a3,a4
204046ba:	fec42703          	lw	a4,-20(s0)
204046be:	02070713          	addi	a4,a4,32
204046c2:	8ff5                	and	a5,a5,a3
204046c4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
204046c6:	fec42783          	lw	a5,-20(s0)
204046ca:	02878793          	addi	a5,a5,40
204046ce:	439c                	lw	a5,0(a5)
204046d0:	fd842703          	lw	a4,-40(s0)
204046d4:	fff74713          	not	a4,a4
204046d8:	86ba                	mv	a3,a4
204046da:	fec42703          	lw	a4,-20(s0)
204046de:	02870713          	addi	a4,a4,40
204046e2:	8ff5                	and	a5,a5,a3
204046e4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
204046e6:	fec42783          	lw	a5,-20(s0)
204046ea:	03078793          	addi	a5,a5,48
204046ee:	439c                	lw	a5,0(a5)
204046f0:	fd842703          	lw	a4,-40(s0)
204046f4:	fff74713          	not	a4,a4
204046f8:	86ba                	mv	a3,a4
204046fa:	fec42703          	lw	a4,-20(s0)
204046fe:	03070713          	addi	a4,a4,48
20404702:	8ff5                	and	a5,a5,a3
20404704:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404706:	aa35                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404708:	fec42783          	lw	a5,-20(s0)
2040470c:	07e1                	addi	a5,a5,24
2040470e:	4398                	lw	a4,0(a5)
20404710:	fd842783          	lw	a5,-40(s0)
20404714:	fec42683          	lw	a3,-20(s0)
20404718:	06e1                	addi	a3,a3,24
2040471a:	8fd9                	or	a5,a5,a4
2040471c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
2040471e:	a215                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404720:	fec42783          	lw	a5,-20(s0)
20404724:	02078793          	addi	a5,a5,32
20404728:	4398                	lw	a4,0(a5)
2040472a:	fd842783          	lw	a5,-40(s0)
2040472e:	fec42683          	lw	a3,-20(s0)
20404732:	02068693          	addi	a3,a3,32
20404736:	8fd9                	or	a5,a5,a4
20404738:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
2040473a:	a221                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
2040473c:	fec42783          	lw	a5,-20(s0)
20404740:	07e1                	addi	a5,a5,24
20404742:	4398                	lw	a4,0(a5)
20404744:	fd842783          	lw	a5,-40(s0)
20404748:	fec42683          	lw	a3,-20(s0)
2040474c:	06e1                	addi	a3,a3,24
2040474e:	8fd9                	or	a5,a5,a4
20404750:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404752:	fec42783          	lw	a5,-20(s0)
20404756:	02078793          	addi	a5,a5,32
2040475a:	4398                	lw	a4,0(a5)
2040475c:	fd842783          	lw	a5,-40(s0)
20404760:	fec42683          	lw	a3,-20(s0)
20404764:	02068693          	addi	a3,a3,32
20404768:	8fd9                	or	a5,a5,a4
2040476a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
2040476c:	a8d9                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040476e:	fec42783          	lw	a5,-20(s0)
20404772:	02878793          	addi	a5,a5,40
20404776:	4398                	lw	a4,0(a5)
20404778:	fd842783          	lw	a5,-40(s0)
2040477c:	fec42683          	lw	a3,-20(s0)
20404780:	02868693          	addi	a3,a3,40
20404784:	8fd9                	or	a5,a5,a4
20404786:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404788:	a86d                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
2040478a:	fec42783          	lw	a5,-20(s0)
2040478e:	03078793          	addi	a5,a5,48
20404792:	4398                	lw	a4,0(a5)
20404794:	fd842783          	lw	a5,-40(s0)
20404798:	fec42683          	lw	a3,-20(s0)
2040479c:	03068693          	addi	a3,a3,48
204047a0:	8fd9                	or	a5,a5,a4
204047a2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
204047a4:	a879                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
204047a6:	fec42783          	lw	a5,-20(s0)
204047aa:	02878793          	addi	a5,a5,40
204047ae:	4398                	lw	a4,0(a5)
204047b0:	fd842783          	lw	a5,-40(s0)
204047b4:	fec42683          	lw	a3,-20(s0)
204047b8:	02868693          	addi	a3,a3,40
204047bc:	8fd9                	or	a5,a5,a4
204047be:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
204047c0:	fec42783          	lw	a5,-20(s0)
204047c4:	03078793          	addi	a5,a5,48
204047c8:	4398                	lw	a4,0(a5)
204047ca:	fd842783          	lw	a5,-40(s0)
204047ce:	fec42683          	lw	a3,-20(s0)
204047d2:	03068693          	addi	a3,a3,48
204047d6:	8fd9                	or	a5,a5,a4
204047d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
204047da:	a0a5                	j	20404842 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
204047dc:	fec42783          	lw	a5,-20(s0)
204047e0:	07e1                	addi	a5,a5,24
204047e2:	4398                	lw	a4,0(a5)
204047e4:	fd842783          	lw	a5,-40(s0)
204047e8:	fec42683          	lw	a3,-20(s0)
204047ec:	06e1                	addi	a3,a3,24
204047ee:	8fd9                	or	a5,a5,a4
204047f0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
204047f2:	fec42783          	lw	a5,-20(s0)
204047f6:	02078793          	addi	a5,a5,32
204047fa:	4398                	lw	a4,0(a5)
204047fc:	fd842783          	lw	a5,-40(s0)
20404800:	fec42683          	lw	a3,-20(s0)
20404804:	02068693          	addi	a3,a3,32
20404808:	8fd9                	or	a5,a5,a4
2040480a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
2040480c:	fec42783          	lw	a5,-20(s0)
20404810:	02878793          	addi	a5,a5,40
20404814:	4398                	lw	a4,0(a5)
20404816:	fd842783          	lw	a5,-40(s0)
2040481a:	fec42683          	lw	a3,-20(s0)
2040481e:	02868693          	addi	a3,a3,40
20404822:	8fd9                	or	a5,a5,a4
20404824:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404826:	fec42783          	lw	a5,-20(s0)
2040482a:	03078793          	addi	a5,a5,48
2040482e:	4398                	lw	a4,0(a5)
20404830:	fd842783          	lw	a5,-40(s0)
20404834:	fec42683          	lw	a3,-20(s0)
20404838:	03068693          	addi	a3,a3,48
2040483c:	8fd9                	or	a5,a5,a4
2040483e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404840:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404842:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404844:	853e                	mv	a0,a5
20404846:	50b2                	lw	ra,44(sp)
20404848:	5422                	lw	s0,40(sp)
2040484a:	6145                	addi	sp,sp,48
2040484c:	8082                	ret

2040484e <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
2040484e:	7179                	addi	sp,sp,-48
20404850:	d606                	sw	ra,44(sp)
20404852:	d422                	sw	s0,40(sp)
20404854:	1800                	addi	s0,sp,48
20404856:	fca42e23          	sw	a0,-36(s0)
2040485a:	fcb42c23          	sw	a1,-40(s0)
2040485e:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404862:	fdc42503          	lw	a0,-36(s0)
20404866:	90dff0ef          	jal	ra,20404172 <__metal_driver_sifive_gpio0_base>
2040486a:	87aa                	mv	a5,a0
2040486c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404870:	fd442703          	lw	a4,-44(s0)
20404874:	479d                	li	a5,7
20404876:	14e7ea63          	bltu	a5,a4,204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
2040487a:	fd442783          	lw	a5,-44(s0)
2040487e:	00279713          	slli	a4,a5,0x2
20404882:	204057b7          	lui	a5,0x20405
20404886:	68c78793          	addi	a5,a5,1676 # 2040568c <__metal_driver_vtable_riscv_plic0+0x6c>
2040488a:	97ba                	add	a5,a5,a4
2040488c:	439c                	lw	a5,0(a5)
2040488e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404890:	fec42783          	lw	a5,-20(s0)
20404894:	07f1                	addi	a5,a5,28
20404896:	4398                	lw	a4,0(a5)
20404898:	fd842783          	lw	a5,-40(s0)
2040489c:	fec42683          	lw	a3,-20(s0)
204048a0:	06f1                	addi	a3,a3,28
204048a2:	8fd9                	or	a5,a5,a4
204048a4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
204048a6:	a215                	j	204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204048a8:	fec42783          	lw	a5,-20(s0)
204048ac:	02478793          	addi	a5,a5,36
204048b0:	4398                	lw	a4,0(a5)
204048b2:	fd842783          	lw	a5,-40(s0)
204048b6:	fec42683          	lw	a3,-20(s0)
204048ba:	02468693          	addi	a3,a3,36
204048be:	8fd9                	or	a5,a5,a4
204048c0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
204048c2:	a221                	j	204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
204048c4:	fec42783          	lw	a5,-20(s0)
204048c8:	07f1                	addi	a5,a5,28
204048ca:	4398                	lw	a4,0(a5)
204048cc:	fd842783          	lw	a5,-40(s0)
204048d0:	fec42683          	lw	a3,-20(s0)
204048d4:	06f1                	addi	a3,a3,28
204048d6:	8fd9                	or	a5,a5,a4
204048d8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
204048da:	fec42783          	lw	a5,-20(s0)
204048de:	02478793          	addi	a5,a5,36
204048e2:	4398                	lw	a4,0(a5)
204048e4:	fd842783          	lw	a5,-40(s0)
204048e8:	fec42683          	lw	a3,-20(s0)
204048ec:	02468693          	addi	a3,a3,36
204048f0:	8fd9                	or	a5,a5,a4
204048f2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
204048f4:	a8d9                	j	204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
204048f6:	fec42783          	lw	a5,-20(s0)
204048fa:	02c78793          	addi	a5,a5,44
204048fe:	4398                	lw	a4,0(a5)
20404900:	fd842783          	lw	a5,-40(s0)
20404904:	fec42683          	lw	a3,-20(s0)
20404908:	02c68693          	addi	a3,a3,44
2040490c:	8fd9                	or	a5,a5,a4
2040490e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404910:	a86d                	j	204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404912:	fec42783          	lw	a5,-20(s0)
20404916:	03478793          	addi	a5,a5,52
2040491a:	4398                	lw	a4,0(a5)
2040491c:	fd842783          	lw	a5,-40(s0)
20404920:	fec42683          	lw	a3,-20(s0)
20404924:	03468693          	addi	a3,a3,52
20404928:	8fd9                	or	a5,a5,a4
2040492a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
2040492c:	a879                	j	204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
2040492e:	fec42783          	lw	a5,-20(s0)
20404932:	02c78793          	addi	a5,a5,44
20404936:	4398                	lw	a4,0(a5)
20404938:	fd842783          	lw	a5,-40(s0)
2040493c:	fec42683          	lw	a3,-20(s0)
20404940:	02c68693          	addi	a3,a3,44
20404944:	8fd9                	or	a5,a5,a4
20404946:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404948:	fec42783          	lw	a5,-20(s0)
2040494c:	03478793          	addi	a5,a5,52
20404950:	4398                	lw	a4,0(a5)
20404952:	fd842783          	lw	a5,-40(s0)
20404956:	fec42683          	lw	a3,-20(s0)
2040495a:	03468693          	addi	a3,a3,52
2040495e:	8fd9                	or	a5,a5,a4
20404960:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404962:	a0a5                	j	204049ca <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404964:	fec42783          	lw	a5,-20(s0)
20404968:	07f1                	addi	a5,a5,28
2040496a:	4398                	lw	a4,0(a5)
2040496c:	fd842783          	lw	a5,-40(s0)
20404970:	fec42683          	lw	a3,-20(s0)
20404974:	06f1                	addi	a3,a3,28
20404976:	8fd9                	or	a5,a5,a4
20404978:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
2040497a:	fec42783          	lw	a5,-20(s0)
2040497e:	02478793          	addi	a5,a5,36
20404982:	4398                	lw	a4,0(a5)
20404984:	fd842783          	lw	a5,-40(s0)
20404988:	fec42683          	lw	a3,-20(s0)
2040498c:	02468693          	addi	a3,a3,36
20404990:	8fd9                	or	a5,a5,a4
20404992:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404994:	fec42783          	lw	a5,-20(s0)
20404998:	02c78793          	addi	a5,a5,44
2040499c:	4398                	lw	a4,0(a5)
2040499e:	fd842783          	lw	a5,-40(s0)
204049a2:	fec42683          	lw	a3,-20(s0)
204049a6:	02c68693          	addi	a3,a3,44
204049aa:	8fd9                	or	a5,a5,a4
204049ac:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
204049ae:	fec42783          	lw	a5,-20(s0)
204049b2:	03478793          	addi	a5,a5,52
204049b6:	4398                	lw	a4,0(a5)
204049b8:	fd842783          	lw	a5,-40(s0)
204049bc:	fec42683          	lw	a3,-20(s0)
204049c0:	03468693          	addi	a3,a3,52
204049c4:	8fd9                	or	a5,a5,a4
204049c6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
204049c8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
204049ca:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
204049cc:	853e                	mv	a0,a5
204049ce:	50b2                	lw	ra,44(sp)
204049d0:	5422                	lw	s0,40(sp)
204049d2:	6145                	addi	sp,sp,48
204049d4:	8082                	ret

204049d6 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
204049d6:	1101                	addi	sp,sp,-32
204049d8:	ce06                	sw	ra,28(sp)
204049da:	cc22                	sw	s0,24(sp)
204049dc:	1000                	addi	s0,sp,32
204049de:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
204049e2:	fec42503          	lw	a0,-20(s0)
204049e6:	fb2ff0ef          	jal	ra,20404198 <__metal_driver_sifive_gpio0_interrupt_parent>
204049ea:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
204049ec:	853e                	mv	a0,a5
204049ee:	40f2                	lw	ra,28(sp)
204049f0:	4462                	lw	s0,24(sp)
204049f2:	6105                	addi	sp,sp,32
204049f4:	8082                	ret

204049f6 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
204049f6:	7179                	addi	sp,sp,-48
204049f8:	d606                	sw	ra,44(sp)
204049fa:	d422                	sw	s0,40(sp)
204049fc:	1800                	addi	s0,sp,48
204049fe:	fca42e23          	sw	a0,-36(s0)
20404a02:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404a06:	fd842583          	lw	a1,-40(s0)
20404a0a:	fdc42503          	lw	a0,-36(s0)
20404a0e:	fb4ff0ef          	jal	ra,204041c2 <__metal_driver_sifive_gpio0_interrupt_lines>
20404a12:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404a16:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404a1a:	853e                	mv	a0,a5
20404a1c:	50b2                	lw	ra,44(sp)
20404a1e:	5422                	lw	s0,40(sp)
20404a20:	6145                	addi	sp,sp,48
20404a22:	8082                	ret

20404a24 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404a24:	1101                	addi	sp,sp,-32
20404a26:	ce22                	sw	s0,28(sp)
20404a28:	1000                	addi	s0,sp,32
20404a2a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a2e:	fec42703          	lw	a4,-20(s0)
20404a32:	800017b7          	lui	a5,0x80001
20404a36:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404a3a:	00f71563          	bne	a4,a5,20404a44 <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404a3e:	100137b7          	lui	a5,0x10013
20404a42:	a011                	j	20404a46 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404a44:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404a46:	853e                	mv	a0,a5
20404a48:	4472                	lw	s0,28(sp)
20404a4a:	6105                	addi	sp,sp,32
20404a4c:	8082                	ret

20404a4e <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404a4e:	1101                	addi	sp,sp,-32
20404a50:	ce22                	sw	s0,28(sp)
20404a52:	1000                	addi	s0,sp,32
20404a54:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a58:	fec42703          	lw	a4,-20(s0)
20404a5c:	800017b7          	lui	a5,0x80001
20404a60:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404a64:	00f71763          	bne	a4,a5,20404a72 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404a68:	800017b7          	lui	a5,0x80001
20404a6c:	3e878793          	addi	a5,a5,1000 # 800013e8 <metal_segment_heap_target_end+0xffffe814>
20404a70:	a011                	j	20404a74 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404a72:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404a74:	853e                	mv	a0,a5
20404a76:	4472                	lw	s0,28(sp)
20404a78:	6105                	addi	sp,sp,32
20404a7a:	8082                	ret

20404a7c <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404a7c:	1101                	addi	sp,sp,-32
20404a7e:	ce22                	sw	s0,28(sp)
20404a80:	1000                	addi	s0,sp,32
20404a82:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404a86:	fec42703          	lw	a4,-20(s0)
20404a8a:	800017b7          	lui	a5,0x80001
20404a8e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404a92:	00f71463          	bne	a4,a5,20404a9a <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404a96:	4795                	li	a5,5
20404a98:	a011                	j	20404a9c <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404a9a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404a9c:	853e                	mv	a0,a5
20404a9e:	4472                	lw	s0,28(sp)
20404aa0:	6105                	addi	sp,sp,32
20404aa2:	8082                	ret

20404aa4 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404aa4:	1101                	addi	sp,sp,-32
20404aa6:	ce22                	sw	s0,28(sp)
20404aa8:	1000                	addi	s0,sp,32
20404aaa:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404aae:	fec42703          	lw	a4,-20(s0)
20404ab2:	800017b7          	lui	a5,0x80001
20404ab6:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404aba:	00f71763          	bne	a4,a5,20404ac8 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404abe:	800017b7          	lui	a5,0x80001
20404ac2:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
20404ac6:	a011                	j	20404aca <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404ac8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404aca:	853e                	mv	a0,a5
20404acc:	4472                	lw	s0,28(sp)
20404ace:	6105                	addi	sp,sp,32
20404ad0:	8082                	ret

20404ad2 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404ad2:	1101                	addi	sp,sp,-32
20404ad4:	ce22                	sw	s0,28(sp)
20404ad6:	1000                	addi	s0,sp,32
20404ad8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404adc:	fec42703          	lw	a4,-20(s0)
20404ae0:	800017b7          	lui	a5,0x80001
20404ae4:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404ae8:	00f71563          	bne	a4,a5,20404af2 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404aec:	81c18793          	addi	a5,gp,-2020 # 80001724 <__metal_dt_gpio_10012000>
20404af0:	a011                	j	20404af4 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404af2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404af4:	853e                	mv	a0,a5
20404af6:	4472                	lw	s0,28(sp)
20404af8:	6105                	addi	sp,sp,32
20404afa:	8082                	ret

20404afc <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404afc:	1101                	addi	sp,sp,-32
20404afe:	ce22                	sw	s0,28(sp)
20404b00:	1000                	addi	s0,sp,32
20404b02:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b06:	fec42703          	lw	a4,-20(s0)
20404b0a:	800017b7          	lui	a5,0x80001
20404b0e:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404b12:	00f71563          	bne	a4,a5,20404b1c <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404b16:	000307b7          	lui	a5,0x30
20404b1a:	a011                	j	20404b1e <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404b1c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404b1e:	853e                	mv	a0,a5
20404b20:	4472                	lw	s0,28(sp)
20404b22:	6105                	addi	sp,sp,32
20404b24:	8082                	ret

20404b26 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404b26:	1101                	addi	sp,sp,-32
20404b28:	ce22                	sw	s0,28(sp)
20404b2a:	1000                	addi	s0,sp,32
20404b2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404b30:	fec42703          	lw	a4,-20(s0)
20404b34:	800017b7          	lui	a5,0x80001
20404b38:	6e878793          	addi	a5,a5,1768 # 800016e8 <metal_segment_heap_target_end+0xffffeb14>
20404b3c:	00f71563          	bne	a4,a5,20404b46 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404b40:	000307b7          	lui	a5,0x30
20404b44:	a011                	j	20404b48 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404b46:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404b48:	853e                	mv	a0,a5
20404b4a:	4472                	lw	s0,28(sp)
20404b4c:	6105                	addi	sp,sp,32
20404b4e:	8082                	ret

20404b50 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404b50:	1101                	addi	sp,sp,-32
20404b52:	ce06                	sw	ra,28(sp)
20404b54:	cc22                	sw	s0,24(sp)
20404b56:	1000                	addi	s0,sp,32
20404b58:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404b5c:	fec42503          	lw	a0,-20(s0)
20404b60:	35fd                	jal	20404a4e <__metal_driver_sifive_uart0_interrupt_parent>
20404b62:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404b64:	853e                	mv	a0,a5
20404b66:	40f2                	lw	ra,28(sp)
20404b68:	4462                	lw	s0,24(sp)
20404b6a:	6105                	addi	sp,sp,32
20404b6c:	8082                	ret

20404b6e <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404b6e:	1101                	addi	sp,sp,-32
20404b70:	ce06                	sw	ra,28(sp)
20404b72:	cc22                	sw	s0,24(sp)
20404b74:	1000                	addi	s0,sp,32
20404b76:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404b7a:	fec42503          	lw	a0,-20(s0)
20404b7e:	3dfd                	jal	20404a7c <__metal_driver_sifive_uart0_interrupt_line>
20404b80:	87aa                	mv	a5,a0
20404b82:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404b86:	853e                	mv	a0,a5
20404b88:	40f2                	lw	ra,28(sp)
20404b8a:	4462                	lw	s0,24(sp)
20404b8c:	6105                	addi	sp,sp,32
20404b8e:	8082                	ret

20404b90 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404b90:	7179                	addi	sp,sp,-48
20404b92:	d606                	sw	ra,44(sp)
20404b94:	d422                	sw	s0,40(sp)
20404b96:	1800                	addi	s0,sp,48
20404b98:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404b9c:	fdc42503          	lw	a0,-36(s0)
20404ba0:	3551                	jal	20404a24 <__metal_driver_sifive_uart0_control_base>
20404ba2:	87aa                	mv	a5,a0
20404ba4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404ba8:	fec42783          	lw	a5,-20(s0)
20404bac:	439c                	lw	a5,0(a5)
20404bae:	fff7c793          	not	a5,a5
20404bb2:	83fd                	srli	a5,a5,0x1f
20404bb4:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404bb8:	853e                	mv	a0,a5
20404bba:	50b2                	lw	ra,44(sp)
20404bbc:	5422                	lw	s0,40(sp)
20404bbe:	6145                	addi	sp,sp,48
20404bc0:	8082                	ret

20404bc2 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404bc2:	7179                	addi	sp,sp,-48
20404bc4:	d606                	sw	ra,44(sp)
20404bc6:	d422                	sw	s0,40(sp)
20404bc8:	1800                	addi	s0,sp,48
20404bca:	fca42e23          	sw	a0,-36(s0)
20404bce:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404bd2:	fdc42503          	lw	a0,-36(s0)
20404bd6:	35b9                	jal	20404a24 <__metal_driver_sifive_uart0_control_base>
20404bd8:	87aa                	mv	a5,a0
20404bda:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404bde:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404be0:	fdc42503          	lw	a0,-36(s0)
20404be4:	3775                	jal	20404b90 <__metal_driver_sifive_uart0_txready>
20404be6:	87aa                	mv	a5,a0
20404be8:	dfe5                	beqz	a5,20404be0 <__metal_driver_sifive_uart0_putc+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404bea:	fec42783          	lw	a5,-20(s0)
20404bee:	fd842703          	lw	a4,-40(s0)
20404bf2:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404bf4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404bf6:	853e                	mv	a0,a5
20404bf8:	50b2                	lw	ra,44(sp)
20404bfa:	5422                	lw	s0,40(sp)
20404bfc:	6145                	addi	sp,sp,48
20404bfe:	8082                	ret

20404c00 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404c00:	7179                	addi	sp,sp,-48
20404c02:	d606                	sw	ra,44(sp)
20404c04:	d422                	sw	s0,40(sp)
20404c06:	1800                	addi	s0,sp,48
20404c08:	fca42e23          	sw	a0,-36(s0)
20404c0c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404c10:	fdc42503          	lw	a0,-36(s0)
20404c14:	3d01                	jal	20404a24 <__metal_driver_sifive_uart0_control_base>
20404c16:	87aa                	mv	a5,a0
20404c18:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404c1c:	fec42783          	lw	a5,-20(s0)
20404c20:	0791                	addi	a5,a5,4
20404c22:	439c                	lw	a5,0(a5)
20404c24:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404c28:	fe842783          	lw	a5,-24(s0)
20404c2c:	0007d763          	bgez	a5,20404c3a <__metal_driver_sifive_uart0_getc+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404c30:	fd842783          	lw	a5,-40(s0)
20404c34:	577d                	li	a4,-1
20404c36:	c398                	sw	a4,0(a5)
20404c38:	a801                	j	20404c48 <__metal_driver_sifive_uart0_getc+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404c3a:	fe842783          	lw	a5,-24(s0)
20404c3e:	0ff7f713          	andi	a4,a5,255
20404c42:	fd842783          	lw	a5,-40(s0)
20404c46:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404c48:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404c4a:	853e                	mv	a0,a5
20404c4c:	50b2                	lw	ra,44(sp)
20404c4e:	5422                	lw	s0,40(sp)
20404c50:	6145                	addi	sp,sp,48
20404c52:	8082                	ret

20404c54 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404c54:	7179                	addi	sp,sp,-48
20404c56:	d622                	sw	s0,44(sp)
20404c58:	1800                	addi	s0,sp,48
20404c5a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404c5e:	fdc42783          	lw	a5,-36(s0)
20404c62:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20404c66:	fec42783          	lw	a5,-20(s0)
20404c6a:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
20404c6c:	853e                	mv	a0,a5
20404c6e:	5432                	lw	s0,44(sp)
20404c70:	6145                	addi	sp,sp,48
20404c72:	8082                	ret

20404c74 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20404c74:	7179                	addi	sp,sp,-48
20404c76:	d606                	sw	ra,44(sp)
20404c78:	d422                	sw	s0,40(sp)
20404c7a:	1800                	addi	s0,sp,48
20404c7c:	fca42e23          	sw	a0,-36(s0)
20404c80:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404c84:	fdc42783          	lw	a5,-36(s0)
20404c88:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20404c8c:	fdc42503          	lw	a0,-36(s0)
20404c90:	3b51                	jal	20404a24 <__metal_driver_sifive_uart0_control_base>
20404c92:	87aa                	mv	a5,a0
20404c94:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404c98:	fdc42503          	lw	a0,-36(s0)
20404c9c:	3521                	jal	20404aa4 <__metal_driver_sifive_uart0_clock>
20404c9e:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20404ca2:	fd842703          	lw	a4,-40(s0)
20404ca6:	fec42783          	lw	a5,-20(s0)
20404caa:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
20404cac:	fe442783          	lw	a5,-28(s0)
20404cb0:	cbb1                	beqz	a5,20404d04 <__metal_driver_sifive_uart0_set_baud_rate+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20404cb2:	fe442783          	lw	a5,-28(s0)
20404cb6:	439c                	lw	a5,0(a5)
20404cb8:	439c                	lw	a5,0(a5)
20404cba:	fe442503          	lw	a0,-28(s0)
20404cbe:	9782                	jalr	a5
20404cc0:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20404cc4:	fe042703          	lw	a4,-32(s0)
20404cc8:	fd842783          	lw	a5,-40(s0)
20404ccc:	02f747b3          	div	a5,a4,a5
20404cd0:	fff78713          	addi	a4,a5,-1
20404cd4:	fe842783          	lw	a5,-24(s0)
20404cd8:	07e1                	addi	a5,a5,24
20404cda:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20404cdc:	fe842783          	lw	a5,-24(s0)
20404ce0:	07a1                	addi	a5,a5,8
20404ce2:	439c                	lw	a5,0(a5)
20404ce4:	fe842703          	lw	a4,-24(s0)
20404ce8:	0721                	addi	a4,a4,8
20404cea:	0017e793          	ori	a5,a5,1
20404cee:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20404cf0:	fe842783          	lw	a5,-24(s0)
20404cf4:	07b1                	addi	a5,a5,12
20404cf6:	439c                	lw	a5,0(a5)
20404cf8:	fe842703          	lw	a4,-24(s0)
20404cfc:	0731                	addi	a4,a4,12
20404cfe:	0017e793          	ori	a5,a5,1
20404d02:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
20404d04:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
20404d06:	853e                	mv	a0,a5
20404d08:	50b2                	lw	ra,44(sp)
20404d0a:	5422                	lw	s0,40(sp)
20404d0c:	6145                	addi	sp,sp,48
20404d0e:	8082                	ret

20404d10 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
20404d10:	7139                	addi	sp,sp,-64
20404d12:	de06                	sw	ra,60(sp)
20404d14:	dc22                	sw	s0,56(sp)
20404d16:	0080                	addi	s0,sp,64
20404d18:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
20404d1c:	fcc42783          	lw	a5,-52(s0)
20404d20:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20404d24:	fcc42503          	lw	a0,-52(s0)
20404d28:	cfdff0ef          	jal	ra,20404a24 <__metal_driver_sifive_uart0_control_base>
20404d2c:	87aa                	mv	a5,a0
20404d2e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
20404d32:	fcc42503          	lw	a0,-52(s0)
20404d36:	d6fff0ef          	jal	ra,20404aa4 <__metal_driver_sifive_uart0_clock>
20404d3a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20404d3e:	fe842783          	lw	a5,-24(s0)
20404d42:	07a1                	addi	a5,a5,8
20404d44:	4398                	lw	a4,0(a5)
20404d46:	fe842783          	lw	a5,-24(s0)
20404d4a:	07a1                	addi	a5,a5,8
20404d4c:	86be                	mv	a3,a5
20404d4e:	fff907b7          	lui	a5,0xfff90
20404d52:	17fd                	addi	a5,a5,-1
20404d54:	8ff9                	and	a5,a5,a4
20404d56:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20404d58:	fe842783          	lw	a5,-24(s0)
20404d5c:	07a1                	addi	a5,a5,8
20404d5e:	4398                	lw	a4,0(a5)
20404d60:	fe842783          	lw	a5,-24(s0)
20404d64:	07a1                	addi	a5,a5,8
20404d66:	86be                	mv	a3,a5
20404d68:	67c1                	lui	a5,0x10
20404d6a:	8fd9                	or	a5,a5,a4
20404d6c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20404d6e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20404d70:	fe842783          	lw	a5,-24(s0)
20404d74:	07d1                	addi	a5,a5,20
20404d76:	439c                	lw	a5,0(a5)
20404d78:	8b85                	andi	a5,a5,1
20404d7a:	dbfd                	beqz	a5,20404d70 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20404d7c:	fe842783          	lw	a5,-24(s0)
20404d80:	07a1                	addi	a5,a5,8
20404d82:	439c                	lw	a5,0(a5)
20404d84:	8b89                	andi	a5,a5,2
20404d86:	c399                	beqz	a5,20404d8c <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
20404d88:	47a5                	li	a5,9
20404d8a:	a011                	j	20404d8e <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
20404d8c:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20404d8e:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20404d92:	fe442783          	lw	a5,-28(s0)
20404d96:	439c                	lw	a5,0(a5)
20404d98:	439c                	lw	a5,0(a5)
20404d9a:	fe442503          	lw	a0,-28(s0)
20404d9e:	9782                	jalr	a5
20404da0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20404da4:	fe042703          	lw	a4,-32(s0)
20404da8:	fdc42783          	lw	a5,-36(s0)
20404dac:	02f707b3          	mul	a5,a4,a5
20404db0:	873e                	mv	a4,a5
20404db2:	fec42783          	lw	a5,-20(s0)
20404db6:	43dc                	lw	a5,4(a5)
20404db8:	02f757b3          	divu	a5,a4,a5
20404dbc:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20404dc0:	fc042a23          	sw	zero,-44(s0)
20404dc4:	a039                	j	20404dd2 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20404dc6:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20404dc8:	fd442783          	lw	a5,-44(s0)
20404dcc:	0785                	addi	a5,a5,1
20404dce:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20404dd2:	fd442783          	lw	a5,-44(s0)
20404dd6:	fd842703          	lw	a4,-40(s0)
20404dda:	fee7c6e3          	blt	a5,a4,20404dc6 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20404dde:	0001                	nop
20404de0:	50f2                	lw	ra,60(sp)
20404de2:	5462                	lw	s0,56(sp)
20404de4:	6121                	addi	sp,sp,64
20404de6:	8082                	ret

20404de8 <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
20404de8:	7179                	addi	sp,sp,-48
20404dea:	d606                	sw	ra,44(sp)
20404dec:	d422                	sw	s0,40(sp)
20404dee:	1800                	addi	s0,sp,48
20404df0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20404df4:	fdc42783          	lw	a5,-36(s0)
20404df8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20404dfc:	fec42703          	lw	a4,-20(s0)
20404e00:	fec42783          	lw	a5,-20(s0)
20404e04:	43dc                	lw	a5,4(a5)
20404e06:	85be                	mv	a1,a5
20404e08:	853a                	mv	a0,a4
20404e0a:	dcdfc0ef          	jal	ra,20401bd6 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
20404e0e:	0001                	nop
20404e10:	50b2                	lw	ra,44(sp)
20404e12:	5422                	lw	s0,40(sp)
20404e14:	6145                	addi	sp,sp,48
20404e16:	8082                	ret

20404e18 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20404e18:	7139                	addi	sp,sp,-64
20404e1a:	de06                	sw	ra,60(sp)
20404e1c:	dc22                	sw	s0,56(sp)
20404e1e:	0080                	addi	s0,sp,64
20404e20:	fca42623          	sw	a0,-52(s0)
20404e24:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20404e28:	fcc42783          	lw	a5,-52(s0)
20404e2c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20404e30:	fcc42503          	lw	a0,-52(s0)
20404e34:	c71ff0ef          	jal	ra,20404aa4 <__metal_driver_sifive_uart0_clock>
20404e38:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
20404e3c:	fcc42503          	lw	a0,-52(s0)
20404e40:	c93ff0ef          	jal	ra,20404ad2 <__metal_driver_sifive_uart0_pinmux>
20404e44:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
20404e48:	fe842783          	lw	a5,-24(s0)
20404e4c:	c7b9                	beqz	a5,20404e9a <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
20404e4e:	fec42783          	lw	a5,-20(s0)
20404e52:	20405737          	lui	a4,0x20405
20404e56:	d1070713          	addi	a4,a4,-752 # 20404d10 <pre_rate_change_callback_func>
20404e5a:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
20404e5c:	fec42783          	lw	a5,-20(s0)
20404e60:	fcc42703          	lw	a4,-52(s0)
20404e64:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20404e66:	fec42783          	lw	a5,-20(s0)
20404e6a:	07a1                	addi	a5,a5,8
20404e6c:	85be                	mv	a1,a5
20404e6e:	fe842503          	lw	a0,-24(s0)
20404e72:	20f1                	jal	20404f3e <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20404e74:	fec42783          	lw	a5,-20(s0)
20404e78:	20405737          	lui	a4,0x20405
20404e7c:	de870713          	addi	a4,a4,-536 # 20404de8 <post_rate_change_callback_func>
20404e80:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20404e82:	fec42783          	lw	a5,-20(s0)
20404e86:	fcc42703          	lw	a4,-52(s0)
20404e8a:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
20404e8c:	fec42783          	lw	a5,-20(s0)
20404e90:	07d1                	addi	a5,a5,20
20404e92:	85be                	mv	a1,a5
20404e94:	fe842503          	lw	a0,-24(s0)
20404e98:	28d9                	jal	20404f6e <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20404e9a:	fec42783          	lw	a5,-20(s0)
20404e9e:	fc842583          	lw	a1,-56(s0)
20404ea2:	853e                	mv	a0,a5
20404ea4:	d33fc0ef          	jal	ra,20401bd6 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
20404ea8:	fe442783          	lw	a5,-28(s0)
20404eac:	cb95                	beqz	a5,20404ee0 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20404eae:	fcc42503          	lw	a0,-52(s0)
20404eb2:	c4bff0ef          	jal	ra,20404afc <__metal_driver_sifive_uart0_pinmux_output_selector>
20404eb6:	87aa                	mv	a5,a0
20404eb8:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20404ebc:	fcc42503          	lw	a0,-52(s0)
20404ec0:	c67ff0ef          	jal	ra,20404b26 <__metal_driver_sifive_uart0_pinmux_source_selector>
20404ec4:	87aa                	mv	a5,a0
20404ec6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
20404eca:	fe442783          	lw	a5,-28(s0)
20404ece:	439c                	lw	a5,0(a5)
20404ed0:	53dc                	lw	a5,36(a5)
20404ed2:	fdc42603          	lw	a2,-36(s0)
20404ed6:	fe042583          	lw	a1,-32(s0)
20404eda:	fe442503          	lw	a0,-28(s0)
20404ede:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20404ee0:	0001                	nop
20404ee2:	50f2                	lw	ra,60(sp)
20404ee4:	5462                	lw	s0,56(sp)
20404ee6:	6121                	addi	sp,sp,64
20404ee8:	8082                	ret

20404eea <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
20404eea:	7179                	addi	sp,sp,-48
20404eec:	d622                	sw	s0,44(sp)
20404eee:	1800                	addi	s0,sp,48
20404ef0:	fca42e23          	sw	a0,-36(s0)
20404ef4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
20404ef8:	fd842783          	lw	a5,-40(s0)
20404efc:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
20404f00:	fdc42783          	lw	a5,-36(s0)
20404f04:	e781                	bnez	a5,20404f0c <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
20404f06:	fd842783          	lw	a5,-40(s0)
20404f0a:	a035                	j	20404f36 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
20404f0c:	fdc42783          	lw	a5,-36(s0)
20404f10:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
20404f14:	a031                	j	20404f20 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
20404f16:	fec42783          	lw	a5,-20(s0)
20404f1a:	479c                	lw	a5,8(a5)
20404f1c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
20404f20:	fec42783          	lw	a5,-20(s0)
20404f24:	479c                	lw	a5,8(a5)
20404f26:	fbe5                	bnez	a5,20404f16 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
20404f28:	fec42783          	lw	a5,-20(s0)
20404f2c:	fd842703          	lw	a4,-40(s0)
20404f30:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
20404f32:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
20404f36:	853e                	mv	a0,a5
20404f38:	5432                	lw	s0,44(sp)
20404f3a:	6145                	addi	sp,sp,48
20404f3c:	8082                	ret

20404f3e <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404f3e:	1101                	addi	sp,sp,-32
20404f40:	ce06                	sw	ra,28(sp)
20404f42:	cc22                	sw	s0,24(sp)
20404f44:	1000                	addi	s0,sp,32
20404f46:	fea42623          	sw	a0,-20(s0)
20404f4a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20404f4e:	fec42783          	lw	a5,-20(s0)
20404f52:	43dc                	lw	a5,4(a5)
20404f54:	fe842583          	lw	a1,-24(s0)
20404f58:	853e                	mv	a0,a5
20404f5a:	3f41                	jal	20404eea <_metal_clock_append_to_callbacks>
20404f5c:	872a                	mv	a4,a0
20404f5e:	fec42783          	lw	a5,-20(s0)
20404f62:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20404f64:	0001                	nop
20404f66:	40f2                	lw	ra,28(sp)
20404f68:	4462                	lw	s0,24(sp)
20404f6a:	6105                	addi	sp,sp,32
20404f6c:	8082                	ret

20404f6e <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20404f6e:	1101                	addi	sp,sp,-32
20404f70:	ce06                	sw	ra,28(sp)
20404f72:	cc22                	sw	s0,24(sp)
20404f74:	1000                	addi	s0,sp,32
20404f76:	fea42623          	sw	a0,-20(s0)
20404f7a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20404f7e:	fec42783          	lw	a5,-20(s0)
20404f82:	479c                	lw	a5,8(a5)
20404f84:	fe842583          	lw	a1,-24(s0)
20404f88:	853e                	mv	a0,a5
20404f8a:	3785                	jal	20404eea <_metal_clock_append_to_callbacks>
20404f8c:	872a                	mv	a4,a0
20404f8e:	fec42783          	lw	a5,-20(s0)
20404f92:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20404f94:	0001                	nop
20404f96:	40f2                	lw	ra,28(sp)
20404f98:	4462                	lw	s0,24(sp)
20404f9a:	6105                	addi	sp,sp,32
20404f9c:	8082                	ret

20404f9e <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20404f9e:	1101                	addi	sp,sp,-32
20404fa0:	ce06                	sw	ra,28(sp)
20404fa2:	cc22                	sw	s0,24(sp)
20404fa4:	1000                	addi	s0,sp,32
20404fa6:	fea42623          	sw	a0,-20(s0)
20404faa:	fec42783          	lw	a5,-20(s0)
20404fae:	439c                	lw	a5,0(a5)
20404fb0:	57dc                	lw	a5,44(a5)
20404fb2:	fec42503          	lw	a0,-20(s0)
20404fb6:	9782                	jalr	a5
20404fb8:	87aa                	mv	a5,a0
20404fba:	853e                	mv	a0,a5
20404fbc:	40f2                	lw	ra,28(sp)
20404fbe:	4462                	lw	s0,24(sp)
20404fc0:	6105                	addi	sp,sp,32
20404fc2:	8082                	ret

20404fc4 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20404fc4:	1101                	addi	sp,sp,-32
20404fc6:	ce22                	sw	s0,28(sp)
20404fc8:	1000                	addi	s0,sp,32
20404fca:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20404fce:	fec42783          	lw	a5,-20(s0)
20404fd2:	eb89                	bnez	a5,20404fe4 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20404fd4:	fec42703          	lw	a4,-20(s0)
20404fd8:	070a                	slli	a4,a4,0x2
20404fda:	80c18793          	addi	a5,gp,-2036 # 80001714 <__metal_cpu_table>
20404fde:	97ba                	add	a5,a5,a4
20404fe0:	439c                	lw	a5,0(a5)
20404fe2:	a011                	j	20404fe6 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20404fe4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20404fe6:	853e                	mv	a0,a5
20404fe8:	4472                	lw	s0,28(sp)
20404fea:	6105                	addi	sp,sp,32
20404fec:	8082                	ret

20404fee <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20404fee:	1101                	addi	sp,sp,-32
20404ff0:	ce22                	sw	s0,28(sp)
20404ff2:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20404ff4:	f14027f3          	csrr	a5,mhartid
20404ff8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
20404ffc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
20405000:	853e                	mv	a0,a5
20405002:	4472                	lw	s0,28(sp)
20405004:	6105                	addi	sp,sp,32
20405006:	8082                	ret

20405008 <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
20405008:	1101                	addi	sp,sp,-32
2040500a:	ce22                	sw	s0,28(sp)
2040500c:	1000                	addi	s0,sp,32
2040500e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20405012:	0001                	nop
20405014:	bffd                	j	20405012 <metal_shutdown+0xa>
	...

20405080 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405080:	caefd06f          	j	2040252e <metal_interrupt_vector_handler>

20405084 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405084:	caafd06f          	j	2040252e <metal_interrupt_vector_handler>

20405088 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405088:	ca6fd06f          	j	2040252e <metal_interrupt_vector_handler>

2040508c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040508c:	cd0fd06f          	j	2040255c <metal_software_interrupt_vector_handler>

20405090 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405090:	c9efd06f          	j	2040252e <metal_interrupt_vector_handler>

20405094 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405094:	c9afd06f          	j	2040252e <metal_interrupt_vector_handler>

20405098 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405098:	c96fd06f          	j	2040252e <metal_interrupt_vector_handler>

2040509c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040509c:	db2fd06f          	j	2040264e <metal_timer_interrupt_vector_handler>

204050a0 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204050a0:	c8efd06f          	j	2040252e <metal_interrupt_vector_handler>

204050a4 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204050a4:	c8afd06f          	j	2040252e <metal_interrupt_vector_handler>

204050a8 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204050a8:	c86fd06f          	j	2040252e <metal_interrupt_vector_handler>

204050ac <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204050ac:	c82fd06f          	j	2040252e <metal_interrupt_vector_handler>

204050b0 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204050b0:	c7efd06f          	j	2040252e <metal_interrupt_vector_handler>

204050b4 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204050b4:	c7afd06f          	j	2040252e <metal_interrupt_vector_handler>

204050b8 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204050b8:	c76fd06f          	j	2040252e <metal_interrupt_vector_handler>

204050bc <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204050bc:	c72fd06f          	j	2040252e <metal_interrupt_vector_handler>

204050c0 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204050c0:	835fd06f          	j	204028f4 <metal_lc0_interrupt_vector_handler>

204050c4 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204050c4:	8c3fd06f          	j	20402986 <metal_lc1_interrupt_vector_handler>

204050c8 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204050c8:	951fd06f          	j	20402a18 <metal_lc2_interrupt_vector_handler>

204050cc <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204050cc:	9dffd06f          	j	20402aaa <metal_lc3_interrupt_vector_handler>

204050d0 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204050d0:	a6dfd06f          	j	20402b3c <metal_lc4_interrupt_vector_handler>

204050d4 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204050d4:	afbfd06f          	j	20402bce <metal_lc5_interrupt_vector_handler>

204050d8 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204050d8:	b89fd06f          	j	20402c60 <metal_lc6_interrupt_vector_handler>

204050dc <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204050dc:	c17fd06f          	j	20402cf2 <metal_lc7_interrupt_vector_handler>

204050e0 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204050e0:	ca5fd06f          	j	20402d84 <metal_lc8_interrupt_vector_handler>

204050e4 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204050e4:	d33fd06f          	j	20402e16 <metal_lc9_interrupt_vector_handler>

204050e8 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204050e8:	dc1fd06f          	j	20402ea8 <metal_lc10_interrupt_vector_handler>

204050ec <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204050ec:	e4ffd06f          	j	20402f3a <metal_lc11_interrupt_vector_handler>

204050f0 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204050f0:	eddfd06f          	j	20402fcc <metal_lc12_interrupt_vector_handler>

204050f4 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204050f4:	f6bfd06f          	j	2040305e <metal_lc13_interrupt_vector_handler>

204050f8 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204050f8:	ff9fd06f          	j	204030f0 <metal_lc14_interrupt_vector_handler>

204050fc <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204050fc:	886fe06f          	j	20403182 <metal_lc15_interrupt_vector_handler>

20405100 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405100:	1101                	addi	sp,sp,-32
20405102:	ce22                	sw	s0,28(sp)
20405104:	1000                	addi	s0,sp,32
20405106:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040510a:	fec42703          	lw	a4,-20(s0)
2040510e:	800017b7          	lui	a5,0x80001
20405112:	02078793          	addi	a5,a5,32 # 80001020 <metal_segment_heap_target_end+0xffffe44c>
20405116:	00f71763          	bne	a4,a5,20405124 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040511a:	03dfd7b7          	lui	a5,0x3dfd
2040511e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405122:	a011                	j	20405126 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
20405124:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
20405126:	853e                	mv	a0,a5
20405128:	4472                	lw	s0,28(sp)
2040512a:	6105                	addi	sp,sp,32
2040512c:	8082                	ret

2040512e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
2040512e:	1101                	addi	sp,sp,-32
20405130:	ce06                	sw	ra,28(sp)
20405132:	cc22                	sw	s0,24(sp)
20405134:	1000                	addi	s0,sp,32
20405136:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
2040513a:	fec42503          	lw	a0,-20(s0)
2040513e:	37c9                	jal	20405100 <__metal_driver_fixed_clock_rate>
20405140:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
20405142:	853e                	mv	a0,a5
20405144:	40f2                	lw	ra,28(sp)
20405146:	4462                	lw	s0,24(sp)
20405148:	6105                	addi	sp,sp,32
2040514a:	8082                	ret

2040514c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
2040514c:	1101                	addi	sp,sp,-32
2040514e:	ce06                	sw	ra,28(sp)
20405150:	cc22                	sw	s0,24(sp)
20405152:	1000                	addi	s0,sp,32
20405154:	fea42623          	sw	a0,-20(s0)
20405158:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040515c:	fec42503          	lw	a0,-20(s0)
20405160:	37f9                	jal	2040512e <__metal_driver_fixed_clock_get_rate_hz>
20405162:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
20405164:	853e                	mv	a0,a5
20405166:	40f2                	lw	ra,28(sp)
20405168:	4462                	lw	s0,24(sp)
2040516a:	6105                	addi	sp,sp,32
2040516c:	8082                	ret

2040516e <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2040516e:	1101                	addi	sp,sp,-32
20405170:	ce06                	sw	ra,28(sp)
20405172:	cc22                	sw	s0,24(sp)
20405174:	1000                	addi	s0,sp,32
20405176:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
2040517a:	fec42503          	lw	a0,-20(s0)
2040517e:	3569                	jal	20405008 <metal_shutdown>
