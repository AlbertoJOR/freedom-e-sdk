
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf:     file format elf32-littleriscv
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/debug/E300RW.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x00005a14 memsz 0x00005a14 flags rwx
    LOAD off    0x000077c0 vaddr 0x800007c0 paddr 0x800007c0 align 2**12
         filesz 0x00000000 memsz 0x00000cec flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405a18 align 2**12
         filesz 0x000007c0 memsz 0x000007c0 flags rw-
    LOAD off    0x000077c0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x000077c0 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000194  20400000  20400000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00005300  20400200  20400200  00001200  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000510  20405500  20405500  00006500  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       00000004  20405a10  20405a10  00006a10  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .data             000007c0  80000000  20405a18  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  5 .bss              000000ec  800007c0  800007c0  000077c0  2**3  ALLOC
  6 .stack            00000400  800008ac  800008ac  000077c0  2**0  ALLOC
  7 .heap             00000800  80000cac  80000cac  000077c0  2**0  ALLOC
  8 .debug_info       0001453c  00000000  00000000  000077c0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev     000026a6  00000000  00000000  0001bcfc  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges    00000898  00000000  00000000  0001e3a8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges     00000730  00000000  00000000  0001ec40  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       00007a0e  00000000  00000000  0001f370  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        000036ea  00000000  00000000  00026d7e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000028  00000000  00000000  0002a468  2**0  CONTENTS, READONLY
 15 .riscv.attributes 0000002b  00000000  00000000  0002a490  2**0  CONTENTS, READONLY
 16 .debug_frame      0000238c  00000000  00000000  0002a4bc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
20400200 l    d  .text	00000000 .text
20405500 l    d  .rodata	00000000 .rodata
20405a10 l    d  .init_array	00000000 .init_array
80000000 l    d  .data	00000000 .data
800007c0 l    d  .bss	00000000 .bss
800008ac l    d  .stack	00000000 .stack
80000cac l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-entry.o
20400060 l       .init	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400136 l       .init	00000000 _skip_init
204056bc l       .rodata	00000000 argv
204056c0 l       .rodata	00000000 envp
204056c4 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 E300RW.c
80000000 l     O .data	00000020 asso_text.2591
80000020 l     O .data	00000020 plain_text.2590
800007cc l     O .bss	00000030 cipher_text.2592
800007fc l     O .bss	00000010 Key.2594
80000040 l     O .data	00000010 Nonce.2593
8000080c l     O .bss	00000010 dummy_array.2595
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20400cde l     F .text	00000068 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
2040122e l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
800007a0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
8000081c l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20401ef8 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401fa2 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401fc8 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401fec l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20402028 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402188 l     F .text	00000036 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
204026be l     F .text	00000024 __metal_driver_cpu_hartid
204026e2 l     F .text	0000002a __metal_driver_cpu_timebase
2040270c l     F .text	0000002a __metal_driver_cpu_interrupt_controller
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403f16 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403f40 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403f68 l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403f90 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
20403fb8 l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404504 l     F .text	00000026 __metal_driver_sifive_gpio0_base
2040452a l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404554 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
20404dbe l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20404de8 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
20404e16 l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20404e3e l     F .text	0000002e __metal_driver_sifive_uart0_clock
20404e6c l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
20404e96 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_output_selector
20404ec0 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
204050b2 l     F .text	000000d8 pre_rate_change_callback_func
2040518a l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 libriscv__mmachine__freedom-e310-arty-xmem_a-vector.o
20405400 l       .text	00000000 IRQ_0
20405404 l       .text	00000000 IRQ_1
20405408 l       .text	00000000 IRQ_2
2040540c l       .text	00000000 IRQ_3
20405410 l       .text	00000000 IRQ_4
20405414 l       .text	00000000 IRQ_5
20405418 l       .text	00000000 IRQ_6
2040541c l       .text	00000000 IRQ_7
20405420 l       .text	00000000 IRQ_8
20405424 l       .text	00000000 IRQ_9
20405428 l       .text	00000000 IRQ_10
2040542c l       .text	00000000 IRQ_11
20405430 l       .text	00000000 IRQ_12
20405434 l       .text	00000000 IRQ_13
20405438 l       .text	00000000 IRQ_14
2040543c l       .text	00000000 IRQ_15
20405440 l       .text	00000000 IRQ_LC0
20405444 l       .text	00000000 IRQ_LC1
20405448 l       .text	00000000 IRQ_LC2
2040544c l       .text	00000000 IRQ_LC3
20405450 l       .text	00000000 IRQ_LC4
20405454 l       .text	00000000 IRQ_LC5
20405458 l       .text	00000000 IRQ_LC6
2040545c l       .text	00000000 IRQ_LC7
20405460 l       .text	00000000 IRQ_LC8
20405464 l       .text	00000000 IRQ_LC9
20405468 l       .text	00000000 IRQ_LC10
2040546c l       .text	00000000 IRQ_LC11
20405470 l       .text	00000000 IRQ_LC12
20405474 l       .text	00000000 IRQ_LC13
20405478 l       .text	00000000 IRQ_LC14
2040547c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 fixed-clock.c
20405480 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000050 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
20405a14 l       .init_array	00000000 __fini_array_end
20405a14 l       .init_array	00000000 __fini_array_start
20405a14 l       .init_array	00000000 __init_array_end
20405a10 l       .init_array	00000000 __preinit_array_end
20405a10 l       .init_array	00000000 __init_array_start
20405a10 l       .init_array	00000000 __preinit_array_start
204007ca g     F .text	0000002c putchar
204059ec g     O .rodata	00000020 __metal_driver_vtable_sifive_uart0
20401692 g     F .text	00000028 _isatty_r
20402ebe  w    F .text	00000092 metal_lc4_interrupt_vector_handler
20400878 g     F .text	000000da _puts_r
204016ba g     F .text	0000002c _lseek_r
20405012 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
20402364 g     F .text	00000054 __metal_driver_riscv_clint0_set_vector_mode
20402e2c  w    F .text	00000092 metal_lc3_interrupt_vector_handler
20400200 g     F .text	0000001e rdcycle
2040367e g     F .text	00000038 __metal_valid_interrupt_id
20400786 g     F .text	00000044 printf
20403aa4 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f98 g       .data	00000000 __global_pointer$
2040528c g     F .text	00000054 _metal_clock_append_to_callbacks
20404008 g     F .text	00000038 __metal_plic0_complete_interrupt
204038fe g     F .text	0000014e __metal_driver_riscv_cpu_controller_interrupt_register
204015d8 g     F .text	00000036 __sseek
20400d94 g     F .text	0000006a __sinit
20400960 g     F .text	000000c0 __swbuf_r
20400d50 g     F .text	00000044 __sfmoreglue
20401702 g     F .text	00000002 __malloc_unlock
20405366 g     F .text	0000002a metal_cpu_get
80000778 g     O .data	00000020 __metal_dt_serial_10013000
20404998 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
204056d0 g     O .rodata	0000004c __metal_driver_vtable_riscv_clint0
800008ac g       .bss	00000000 metal_segment_bss_target_end
20402058 g     F .text	0000009a __metal_clint0_mtime_get
20403eaa g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000000 g       *ABS*	00000000 __metal_chicken_bit
20404748 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_input
20401c80 g     F .text	0000000c __errno
08000000 g       .init_array	00000000 metal_segment_itim_target_start
20404f2a g     F .text	00000032 __metal_driver_sifive_uart0_txready
20400070 g     F .init	0000000e __metal_synchronize_harts
800007c0 g       .bss	00000000 metal_segment_bss_target_start
204020f2 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401668 g     F .text	0000002a _fstat_r
20404be8 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
800008a8 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
204052e0 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403198  w    F .text	00000092 metal_lc9_interrupt_vector_handler
20405924 g     O .rodata	0000004c __metal_driver_vtable_riscv_plic0
204058e4 g     O .rodata	00000040 __metal_driver_vtable_cpu
20401f74 g     F .text	0000002e metal_uart_set_baud_rate
204051ba g     F .text	000000d2 __metal_driver_sifive_uart0_init
20403b38 g     F .text	00000072 __metal_driver_cpu_mcycle_get
80000cac g       .heap	00000000 metal_segment_heap_target_start
20400d46 g     F .text	0000000a _cleanup_r
800007b0 g     O .data	00000004 __metal_dt_cpu_0
20403106  w    F .text	00000092 metal_lc8_interrupt_vector_handler
20400952 g     F .text	0000000e puts
204033e0  w    F .text	00000092 metal_lc13_interrupt_vector_handler
204028a0 g     F .text	00000018 __metal_default_exception_handler
20401b00 g     F .text	00000026 _fstat
2040268a g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
204040a4 g     F .text	00000062 __metal_plic0_set_priority
20403ac0 g     F .text	0000005c __metal_driver_riscv_cpu_controller_set_vector_mode
20402736 g     F .text	0000002c __metal_driver_cpu_get
20405898 g     O .rodata	0000004c __metal_driver_vtable_riscv_cpu_intc
20402794 g     F .text	00000018 __metal_interrupt_global_disable
20403074  w    F .text	00000092 metal_lc7_interrupt_vector_handler
2040322a  w    F .text	00000092 metal_lc10_interrupt_vector_handler
20401532 g     F .text	00000028 _sbrk_r
204044bc g     F .text	00000048 __metal_driver_riscv_plic0_disable
20403772 g     F .text	0000004e __metal_exception_register
20401ab2 g     F .text	0000002c _read_r
20403ccc g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
2040482a g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
2040298c g     F .text	00000064 __metal_default_sw_handler
20405310 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20404eea g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
20401b26 g     F .text	00000020 _isatty
204048f0 g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
800007b8 g     O .data	00000008 __metal_driver_vtable_fixed_clock
8000079c g     O .data	00000004 _global_impure_ptr
204029f0  w    F .text	0000008e metal_timer_interrupt_vector_handler
20401cf0 g     F .text	0000006a __libc_init_array
2040486a g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
204032bc  w    F .text	00000092 metal_lc11_interrupt_vector_handler
20403a4c g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20401b9a g     F .text	0000006e _sbrk
204047e4 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
20400174 g     F .init	00000002 _init
204027f6 g     F .text	0000001a __metal_interrupt_timer_disable
204049e2 g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403d82 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204059b0 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20404930 g     F .text	00000068 __metal_driver_sifive_gpio0_enable_io
20401cb8 g     F .text	00000038 __libc_fini_array
20404d70 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403d0c g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .data	00000000 metal_segment_data_target_start
20402848 g     F .text	0000002c __metal_interrupt_local_enable
20402656 g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401ea6 g     F .text	0000002c metal_tty_putc
204041c6 g     F .text	00000018 __metal_plic0_default_handler
204007f6 g     F .text	00000082 _putc_r
800000b0 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20405620 g     O .rodata	00000020 __sf_fake_stderr
2040282c g     F .text	0000001c __metal_interrupt_external_disable
20404f08 g     F .text	00000022 __metal_driver_sifive_uart0_get_interrupt_id
20403b1c g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204037c0 g     F .text	0000013e __metal_driver_riscv_cpu_controller_interrupt_init
20401258 g     F .text	00000042 __sfputs_r
20403e64 g     F .text	00000046 __metal_driver_cpu_exception_register
204027ac g     F .text	00000018 __metal_interrupt_software_enable
20402d08  w    F .text	00000092 metal_lc1_interrupt_vector_handler
204016e6 g     F .text	0000001a memchr
204010a4 g     F .text	000000ac _free_r
800007c8 g     O .bss	00000004 _global_atexit
20403596 g     F .text	00000050 __metal_controller_interrupt_vector_mode
20401dde g     F .text	000000c8 __call_exitprocs
80000cac g       .stack	00000000 _sp
2040007e g     F .init	00000000 _start
20401b46 g     F .text	0000002a _lseek
20403e44 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403ed8 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20402810 g     F .text	0000001c __metal_interrupt_external_enable
20401d5a g     F .text	00000084 __register_exitproc
20404f5c g     F .text	00000040 __metal_driver_sifive_uart0_putc
2040426e g     F .text	00000144 __metal_driver_riscv_plic0_init
20404474 g     F .text	00000048 __metal_driver_riscv_plic0_enable
204047b8 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402fe2  w    F .text	00000092 metal_lc6_interrupt_vector_handler
20402762 g     F .text	0000001a __metal_myhart_id
20404d90 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204028fe  w    F .text	0000008e metal_software_interrupt_vector_handler
20403a78 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401640 g     F .text	00000028 _close_r
20404ff2 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
20402246 g     F .text	000000da __metal_driver_riscv_clint0_register
800007a8 g     O .data	00000008 __metal_dt_clint_2000000
20400a20 g     F .text	00000110 __swsetup_r
20400dfe g     F .text	0000009e __sfp
2040155a g     F .text	00000030 __sread
20404708 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_input
20400176  w    F .init	00000000 secondary_main
204028d0  w    F .text	0000002e metal_interrupt_vector_handler
20401700 g     F .text	00000002 __malloc_lock
20400c7a g     F .text	00000064 _fflush_r
20404078 g     F .text	0000002c __metal_plic0_get_threshold
20405640 g     O .rodata	00000020 __sf_fake_stdin
204036b6 g     F .text	000000bc __metal_local_interrupt_enable
20402520 g     F .text	00000136 __metal_driver_riscv_clint0_command_request
20400ffc g     F .text	000000a8 memset
20402f50  w    F .text	00000092 metal_lc5_interrupt_vector_handler
2040021e g     F .text	00000568 main
800007c0 g       .data	00000000 metal_segment_data_target_end
20403d20 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403de4 g     F .text	00000060 __metal_driver_cpu_get_msip
204053aa g     F .text	0000000e metal_shutdown
08000000 g       .init_array	00000000 metal_segment_itim_target_end
20403ef6 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20403fda g     F .text	0000002e __metal_plic0_claim_interrupt
2040160e g     F .text	00000006 __sclose
2040334e  w    F .text	00000092 metal_lc12_interrupt_vector_handler
20401150 g     F .text	000000de _malloc_r
20402348 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403baa g     F .text	00000046 __metal_driver_cpu_timebase_get
20400000 g       .init	00000000 _enter
20405390 g     F .text	0000001a metal_cpu_get_current_hartid
20405400 g       .text	00000000 __metal_vector_table
20405a18 g       *ABS*	00000000 metal_segment_itim_source_start
800007a4  w    O .data	00000004 __metal_cpu_table
800000c0 g     O .data	000003b8 __metal_dt_cpu_0_interrupt_controller
20400174 g     F .init	00000002 _fini
20400786 g     F .text	00000044 iprintf
2040277c g     F .text	00000018 __metal_interrupt_global_enable
20401c76 g     F .text	0000000a atexit
20401ed2 g     F .text	00000026 metal_tty_putc_raw
20401614 g     F .text	0000002c _write_r
204027dc g     F .text	0000001a __metal_interrupt_timer_enable
20404f9c g     F .text	00000056 __metal_driver_sifive_uart0_getc
2040246a g     F .text	000000b6 __metal_driver_riscv_clint0_disable
20401704 g     F .text	0000010c _printf_common
80000798 g     O .data	00000004 _impure_ptr
20403c56 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
20400b30 g     F .text	0000014a __sflush_r
204054ae g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
204023b8 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405a18 g       *ABS*	00000000 metal_segment_data_source_start
800014ac g       .heap	00000000 metal_segment_heap_target_end
204035e6 g     F .text	00000098 __metal_controller_interrupt_vector
80000478 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
20400f08 g     F .text	00000058 __swhatbuf_r
204048aa g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
20402a7e g     F .text	00000066 __metal_default_timer_handler
20401c08 g     F .text	0000006e _write
204041de g     F .text	00000090 __metal_plic0_handler
20402d9a  w    F .text	00000092 metal_lc2_interrupt_vector_handler
20403504  w    F .text	00000092 metal_lc15_interrupt_vector_handler
20405340 g     F .text	00000026 metal_cpu_interrupt_controller
2040158a g     F .text	0000004e __swrite
20401c8c g     F .text	0000002c exit
2040129a g     F .text	00000298 _vfiprintf_r
20400e9c g     F .text	0000006c _fwalk_reent
204054cc g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20405660 g     O .rodata	00000020 __sf_fake_stdout
800007b4 g     O .data	00000004 __metal_dt_gpio_10012000
204028b8 g     F .text	00000018 __metal_default_interrupt_handler
20401f46 g     F .text	0000002e metal_uart_putc
20401b70 g     F .text	0000002a _read
2040478e g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402b00 g     F .text	00000150 __metal_exception_handler
20402c76  w    F .text	00000092 metal_lc0_interrupt_vector_handler
204054ee g     F .text	00000012 _exit
20403bf0 g     F .text	00000066 __metal_driver_cpu_mtime_get
20400f60 g     F .text	0000009c __smakebuf_r
20402320 g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401810 g     F .text	000002a2 _printf_i
800007c4 g     O .bss	00000004 __malloc_sbrk_start
20403472  w    F .text	00000092 metal_lc14_interrupt_vector_handler
204021be g     F .text	00000088 __metal_driver_riscv_clint0_init
800007c0 g     O .bss	00000004 __malloc_free_list
2040129a g     F .text	00000298 _vfprintf_r
20403ce2 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
2040413a g     F .text	0000008c __metal_plic0_enable
2040006e  w      .init	00000000 __register_frame_info
20403cf6 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402874 g     F .text	0000002c __metal_interrupt_local_disable
204027c4 g     F .text	00000018 __metal_interrupt_software_disable
20404106 g     F .text	00000034 __metal_plic0_get_priority
20401f1a g     F .text	0000002c metal_uart_init
20404040 g     F .text	00000038 __metal_plic0_set_threshold
20401ade g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
204043b2 g     F .text	000000c2 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f9818193          	addi	gp,gp,-104 # 80000f98 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400008:	00000297          	auipc	t0,0x0
2040000c:	05828293          	addi	t0,t0,88 # 20400060 <early_trap_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:32
    /* enable chicken bit if core is bullet series*/
    la t0, __metal_chicken_bit
20400014:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:33
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:34
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:43
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20400020:	dfc00117          	auipc	sp,0xdfc00
20400024:	fe010113          	addi	sp,sp,-32 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:52
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
20400028:	dfc00097          	auipc	ra,0xdfc00
2040002c:	fd808093          	addi	ra,ra,-40 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:53
    beqz ra, 1f
20400030:	00008363          	beqz	ra,20400036 <_enter+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:54
    jalr ra
20400034:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:60
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
20400036:	f1402573          	csrr	a0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:61
    li a1, 0
2040003a:	4581                	li	a1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:62
    li a2, 0
2040003c:	4601                	li	a2,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:63
    call _start
2040003e:	2081                	jal	2040007e <_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:68

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400040:	dfc00097          	auipc	ra,0xdfc00
20400044:	fc008093          	addi	ra,ra,-64 # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:69
    beqz ra, 1f
20400048:	00008363          	beqz	ra,2040004e <_enter+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:70
    jalr ra
2040004c:	9082                	jalr	ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:75
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
2040004e:	00000297          	auipc	t0,0x0
20400052:	00c28293          	addi	t0,t0,12 # 2040005a <_enter+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:76
     csrw mtvec, t0
20400056:	30529073          	csrw	mtvec,t0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:78
1:
     lw t1, 0(x0)
2040005a:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:79
     j 1b
2040005e:	bff5                	j	2040005a <_enter+0x5a>

20400060 <early_trap_vector>:
early_trap_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:89
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400060:	342022f3          	csrr	t0,mcause
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:90
    csrr t1, mepc
20400064:	34102373          	csrr	t1,mepc
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:91
    csrr t2, mtval
20400068:	343023f3          	csrr	t2,mtval
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:92
    j early_trap_vector
2040006c:	bfd5                	j	20400060 <early_trap_vector>

2040006e <__register_frame_info>:
__register_frame_info():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/entry.S:105
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
2040006e:	8082                	ret

20400070 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init")))
void __metal_synchronize_harts() {
20400070:	1141                	addi	sp,sp,-16
20400072:	c622                	sw	s0,12(sp)
20400074:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:61
        /* Wait for hart 0 to clear the MSIP bit */
        while (METAL_MSIP(msip_base, hart) == 1) ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400076:	0001                	nop
20400078:	4432                	lw	s0,12(sp)
2040007a:	0141                	addi	sp,sp,16
2040007c:	8082                	ret

2040007e <_start>:
_start():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
2040007e:	8406                	mv	s0,ra
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400080:	5fc01197          	auipc	gp,0x5fc01
20400084:	f1818193          	addi	gp,gp,-232 # 80000f98 <__global_pointer$>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, _sp
20400088:	d1418113          	addi	sp,gp,-748 # 80000cac <_sp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:54

  /* Increment by hartid number of stack sizes */
  li t0, 0
2040008c:	4281                	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:55
  la t1, __stack_size
2040008e:	40000313          	li	t1,1024
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:57
1:
  beq t0, a0, 1f
20400092:	00a28563          	beq	t0,a0,2040009c <_start+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:58
  add sp, sp, t1
20400096:	911a                	add	sp,sp,t1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:59
  addi t0, t0, 1
20400098:	0285                	addi	t0,t0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
  j 1b
2040009a:	bfe5                	j	20400092 <_start+0x14>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
1:
  andi sp, sp, -16
2040009c:	ff017113          	andi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:65

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
204000a0:	00000293          	li	t0,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:66
  bne a0, t0, _skip_init
204000a4:	08551963          	bne	a0,t0,20400136 <_skip_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:75
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
204000a8:	00006297          	auipc	t0,0x6
204000ac:	97028293          	addi	t0,t0,-1680 # 20405a18 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:76
  la t1, metal_segment_data_target_start
204000b0:	5fc00317          	auipc	t1,0x5fc00
204000b4:	f5030313          	addi	t1,t1,-176 # 80000000 <metal_segment_data_target_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:77
  la t2, metal_segment_data_target_end
204000b8:	82818393          	addi	t2,gp,-2008 # 800007c0 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:79

  beq t0, t1, 2f
204000bc:	00628c63          	beq	t0,t1,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:80
  bge t1, t2, 2f
204000c0:	00735a63          	bge	t1,t2,204000d4 <_start+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:84

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000c4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  addi t0, t0, 4
204000c8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  sw   a0, 0(t1)
204000ca:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:87
  addi t1, t1, 4
204000ce:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:88
  blt  t1, t2, 1b
204000d0:	fe734ae3          	blt	t1,t2,204000c4 <_start+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:99
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
204000d4:	00006297          	auipc	t0,0x6
204000d8:	94428293          	addi	t0,t0,-1724 # 20405a18 <metal_segment_data_source_start>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:100
  la t1, metal_segment_itim_target_start
204000dc:	e7c00317          	auipc	t1,0xe7c00
204000e0:	f2430313          	addi	t1,t1,-220 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:101
  la t2, metal_segment_itim_target_end
204000e4:	e7c00397          	auipc	t2,0xe7c00
204000e8:	f1c38393          	addi	t2,t2,-228 # 8000000 <metal_segment_itim_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:103

  beq t0, t1, 2f
204000ec:	00628c63          	beq	t0,t1,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:104
  bge t1, t2, 2f
204000f0:	00735a63          	bge	t1,t2,20400104 <_start+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:108

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204000f4:	0002a503          	lw	a0,0(t0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
  addi t0, t0, 4
204000f8:	0291                	addi	t0,t0,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:110
  sw   a0, 0(t1)
204000fa:	00a32023          	sw	a0,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:111
  addi t1, t1, 4
204000fe:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:112
  blt  t1, t2, 1b
20400100:	fe734ae3          	blt	t1,t2,204000f4 <_start+0x76>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
20400104:	0000100f          	fence.i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:127

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
20400108:	5fc00317          	auipc	t1,0x5fc00
2040010c:	6b830313          	addi	t1,t1,1720 # 800007c0 <metal_segment_data_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:128
  la t2, metal_segment_bss_target_end
20400110:	91418393          	addi	t2,gp,-1772 # 800008ac <metal_segment_bss_target_end>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:130

  bge t1, t2, 2f
20400114:	00735763          	bge	t1,t2,20400122 <_start+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:134

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
20400118:	00032023          	sw	zero,0(t1)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:135
  addi t1, t1, 4
2040011c:	0311                	addi	t1,t1,4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:136
  blt  t1, t2, 1b
2040011e:	fe734de3          	blt	t1,t2,20400118 <_start+0x9a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:147
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20400122:	c211                	beqz	a2,20400126 <_start+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:148
  jalr a2
20400124:	9602                	jalr	a2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:152
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400126:	00002517          	auipc	a0,0x2
2040012a:	b9250513          	addi	a0,a0,-1134 # 20401cb8 <__libc_fini_array>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:153
  call atexit
2040012e:	349010ef          	jal	ra,20401c76 <atexit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:154
  call __libc_init_array
20400132:	3bf010ef          	jal	ra,20401cf0 <__libc_init_array>

20400136 <_skip_init>:
_skip_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:160

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400136:	3f2d                	jal	20400070 <__metal_synchronize_harts>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:163

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
20400138:	301027f3          	csrr	a5,misa
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:164
  li   a4, 0x10028
2040013c:	00010737          	lui	a4,0x10
20400140:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:165
  and  a5, a5, a4
20400144:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:166
  beqz a5, 1f
20400146:	cb89                	beqz	a5,20400158 <_skip_init+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  csrr a5, mstatus
20400148:	300027f3          	csrr	a5,mstatus
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:168
  lui  a4, 0x2
2040014c:	6709                	lui	a4,0x2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:169
  or   a5, a5, a4
2040014e:	8fd9                	or	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:170
  csrw mstatus, a5
20400150:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
  csrwi fcsr, 0
20400154:	00305073          	csrwi	fcsr,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:177
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20400158:	4505                	li	a0,1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  la a1, argv  /* argv = {"libgloss", NULL} */
2040015a:	00005597          	auipc	a1,0x5
2040015e:	56258593          	addi	a1,a1,1378 # 204056bc <argv>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  la a2, envp  /* envp = {NULL} */
20400162:	00005617          	auipc	a2,0x5
20400166:	55e60613          	addi	a2,a2,1374 # 204056c0 <envp>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:180
  call secondary_main
2040016a:	2031                	jal	20400176 <secondary_main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:186

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2040016c:	321010ef          	jal	ra,20401c8c <exit>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:191

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
20400170:	80a2                	mv	ra,s0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:192
  ret
20400172:	8082                	ret

20400174 <_fini>:
_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20400174:	8082                	ret

20400176 <secondary_main>:
secondary_main():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
20400176:	1141                	addi	sp,sp,-16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
#if __riscv_xlen == 32
  sw ra, 4(sp)
20400178:	c206                	sw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
2040017a:	f14022f3          	csrr	t0,mhartid
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  la t1, __metal_boot_hart
2040017e:	00000313          	li	t1,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  beq t0, t1, 2f
20400182:	00628563          	beq	t0,t1,2040018c <secondary_main+0x16>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
1:
  wfi
20400186:	10500073          	wfi
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  j 1b
2040018a:	bff5                	j	20400186 <secondary_main+0x10>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:228
2:
  call main
2040018c:	2849                	jal	2040021e <main>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:230
#if __riscv_xlen == 32
  lw ra, 4(sp)
2040018e:	4092                	lw	ra,4(sp)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
20400190:	0141                	addi	sp,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  ret
20400192:	8082                	ret

Disassembly of section .text:

20400200 <rdcycle>:
rdcycle():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:49

#define rdtime() read_csr(time)
//#define rdcycle() read_csr(cycle)
#define rdinstret() read_csr(instret)

int rdcycle() {
20400200:	1101                	addi	sp,sp,-32
20400202:	ce22                	sw	s0,28(sp)
20400204:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:50
    int tmp = 0;
20400206:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:51
    asm __volatile__ ("csrr %[dst01], mcycle\n" : [dst01]"=r"(tmp) : : );
2040020a:	b00027f3          	csrr	a5,mcycle
2040020e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:52
    return tmp;
20400212:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/../RoCCcommon/csr.h:53
}
20400216:	853e                	mv	a0,a5
20400218:	4472                	lw	s0,28(sp)
2040021a:	6105                	addi	sp,sp,32
2040021c:	8082                	ret

2040021e <main>:
main():
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:7
#include "../RoCCcommon/rocc.h"
#include "AEAD_HW.h"

#include <stdio.h>

int main(void) {
2040021e:	7139                	addi	sp,sp,-64
20400220:	de06                	sw	ra,60(sp)
20400222:	dc22                	sw	s0,56(sp)
20400224:	0080                	addi	s0,sp,64
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:17
    static unsigned cipher_text [12]= {0};
    static unsigned Nonce [4]= {0x77777777, 0xeeeeeeee, 0xffffffff, 0x33333333};
    // static unsigned Nonce [4]= {0};
    static unsigned Key [4] = {0};
    static unsigned dummy_array [4] = {0};
    unsigned plain_len = 32;
20400226:	02000793          	li	a5,32
2040022a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:18
    unsigned asso_len = 64; /// CReo que asignaste a memoria
2040022e:	04000793          	li	a5,64
20400232:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:19
    unsigned plain_len_int = plain_len / 4 ;
20400236:	fe042783          	lw	a5,-32(s0)
2040023a:	8389                	srli	a5,a5,0x2
2040023c:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20
    plain_len_int = (plain_len % 4 == 0 )? plain_len_int :plain_len_int+1;
20400240:	fe042783          	lw	a5,-32(s0)
20400244:	8b8d                	andi	a5,a5,3
20400246:	c789                	beqz	a5,20400250 <main+0x32>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20 (discriminator 1)
20400248:	fd842783          	lw	a5,-40(s0)
2040024c:	0785                	addi	a5,a5,1
2040024e:	a019                	j	20400254 <main+0x36>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20 (discriminator 2)
20400250:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:20 (discriminator 4)
20400254:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:24 (discriminator 4)


    // printf("Init AEAD \n");
    printf("Init\n");
20400258:	204057b7          	lui	a5,0x20405
2040025c:	50078513          	addi	a0,a5,1280 # 20405500 <_exit+0x12>
20400260:	6f2000ef          	jal	ra,20400952 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:25 (discriminator 4)
    printf("Ad addr = %08x\n", asso_text);
20400264:	800007b7          	lui	a5,0x80000
20400268:	00078593          	mv	a1,a5
2040026c:	204057b7          	lui	a5,0x20405
20400270:	50878513          	addi	a0,a5,1288 # 20405508 <_exit+0x1a>
20400274:	2b09                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:26 (discriminator 4)
    printf("Pl addr = %08x\n", plain_text);
20400276:	800007b7          	lui	a5,0x80000
2040027a:	02078593          	addi	a1,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb74>
2040027e:	204057b7          	lui	a5,0x20405
20400282:	51878513          	addi	a0,a5,1304 # 20405518 <_exit+0x2a>
20400286:	2301                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:27 (discriminator 4)
    printf("Ct addr = %08x\n", cipher_text);
20400288:	800007b7          	lui	a5,0x80000
2040028c:	7cc78593          	addi	a1,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
20400290:	204057b7          	lui	a5,0x20405
20400294:	52878513          	addi	a0,a5,1320 # 20405528 <_exit+0x3a>
20400298:	21fd                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:28 (discriminator 4)
    printf("Ke addr = %08x\n", Key);
2040029a:	800007b7          	lui	a5,0x80000
2040029e:	7fc78593          	addi	a1,a5,2044 # 800007fc <metal_segment_heap_target_end+0xfffff350>
204002a2:	204057b7          	lui	a5,0x20405
204002a6:	53878513          	addi	a0,a5,1336 # 20405538 <_exit+0x4a>
204002aa:	29f1                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:29 (discriminator 4)
    printf("Np addr = %08x\n", Nonce);
204002ac:	800007b7          	lui	a5,0x80000
204002b0:	04078593          	addi	a1,a5,64 # 80000040 <metal_segment_heap_target_end+0xffffeb94>
204002b4:	204057b7          	lui	a5,0x20405
204002b8:	54878513          	addi	a0,a5,1352 # 20405548 <_exit+0x5a>
204002bc:	21e9                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:31 (discriminator 4)
    unsigned start, end, HWcycles;
    int rd = 0;
204002be:	fc042a23          	sw	zero,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:33 (discriminator 4)
    // RoCC
    start = rdcycle();
204002c2:	3f3d                	jal	20400200 <rdcycle>
204002c4:	87aa                	mv	a5,a0
204002c6:	fcf42823          	sw	a5,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:34 (discriminator 4)
    write_csr(mstatus, MSTATUS_XS); // Always initialize the CSR such that the accelerator is recognized
204002ca:	67e1                	lui	a5,0x18
204002cc:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:37 (discriminator 4)

    //rd = AEAD_E_Set_P( plain_text, plain_len);
    asm volatile("fence");
204002d0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:38 (discriminator 4)
    ROCC_INSTRUCTION_DS(0,rd, Nonce, Enc_Set_Nonce );
204002d4:	800007b7          	lui	a5,0x80000
204002d8:	04078793          	addi	a5,a5,64 # 80000040 <metal_segment_heap_target_end+0xffffeb94>
204002dc:	85be                	mv	a1,a5
204002de:	2805e50b          	0x2805e50b
204002e2:	87aa                	mv	a5,a0
204002e4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:39 (discriminator 4)
    asm volatile("fence" ::: "memory");
204002e8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:40 (discriminator 4)
    printf("Set Nonce finish : %08x \n", rd);
204002ec:	fd442583          	lw	a1,-44(s0)
204002f0:	204057b7          	lui	a5,0x20405
204002f4:	55878513          	addi	a0,a5,1368 # 20405558 <_exit+0x6a>
204002f8:	2179                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:42 (discriminator 4)

    asm volatile("fence");
204002fa:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:43 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0,rd, plain_text, plain_len, Enc_Set_P );
204002fe:	800007b7          	lui	a5,0x80000
20400302:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb74>
20400306:	85be                	mv	a1,a5
20400308:	fe042603          	lw	a2,-32(s0)
2040030c:	22c5f50b          	0x22c5f50b
20400310:	87aa                	mv	a5,a0
20400312:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:44 (discriminator 4)
    asm volatile("fence" ::: "memory");
20400316:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:45 (discriminator 4)
    printf("Set Plain text finish length : %08x \n", rd);
2040031a:	fd442583          	lw	a1,-44(s0)
2040031e:	204057b7          	lui	a5,0x20405
20400322:	57478513          	addi	a0,a5,1396 # 20405574 <_exit+0x86>
20400326:	2185                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:50 (discriminator 4)



    // rd = AEAD_E_Set_AD(plain_text, plain_len );
    asm volatile("fence");
20400328:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:51 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0, rd,asso_text, asso_len, Enc_Set_AD );
2040032c:	800007b7          	lui	a5,0x80000
20400330:	00078793          	mv	a5,a5
20400334:	85be                	mv	a1,a5
20400336:	fdc42603          	lw	a2,-36(s0)
2040033a:	24c5f50b          	0x24c5f50b
2040033e:	87aa                	mv	a5,a0
20400340:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:52 (discriminator 4)
    asm volatile("fence" ::: "memory");
20400344:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:53 (discriminator 4)
    printf("Set Associated Data finish length: %08x \n", rd);
20400348:	fd442583          	lw	a1,-44(s0)
2040034c:	204057b7          	lui	a5,0x20405
20400350:	59c78513          	addi	a0,a5,1436 # 2040559c <_exit+0xae>
20400354:	290d                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:58 (discriminator 4)



    // rd = AEAD_E_Set_C_Tag(cipher_text,dumm_array);
    asm volatile("fence");
20400356:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:59 (discriminator 4)
    ROCC_INSTRUCTION_DSS(0,rd, cipher_text, dummy_array, Enc_Set_C_Tag );
2040035a:	800007b7          	lui	a5,0x80000
2040035e:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
20400362:	85be                	mv	a1,a5
20400364:	800017b7          	lui	a5,0x80001
20400368:	80c78793          	addi	a5,a5,-2036 # 8000080c <metal_segment_heap_target_end+0xfffff360>
2040036c:	863e                	mv	a2,a5
2040036e:	26c5f50b          	0x26c5f50b
20400372:	87aa                	mv	a5,a0
20400374:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:60 (discriminator 4)
    asm volatile("fence" ::: "memory");
20400378:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:62 (discriminator 4)
    // printf("Set Tag and C finish : %d \n", rd);
    printf("Set Cipher addr: %08x \n", rd);
2040037c:	fd442583          	lw	a1,-44(s0)
20400380:	204057b7          	lui	a5,0x20405
20400384:	5c878513          	addi	a0,a5,1480 # 204055c8 <_exit+0xda>
20400388:	2efd                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:68 (discriminator 4)

    // rd = AEAD_E_Set_Nonce(dumm_array );


    // rd = AEAD_E_Set_Key(rd);
    asm volatile("fence");
2040038a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:69 (discriminator 4)
    ROCC_INSTRUCTION_DS(0,rd,  rd, Enc_Set_Key );
2040038e:	fd442783          	lw	a5,-44(s0)
20400392:	85be                	mv	a1,a5
20400394:	2a05e50b          	0x2a05e50b
20400398:	87aa                	mv	a5,a0
2040039a:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:70 (discriminator 4)
    asm volatile("fence" ::: "memory");
2040039e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:71 (discriminator 4)
    printf("Set Key  finish : %08x \n", rd);
204003a2:	fd442583          	lw	a1,-44(s0)
204003a6:	204057b7          	lui	a5,0x20405
204003aa:	5e078513          	addi	a0,a5,1504 # 204055e0 <_exit+0xf2>
204003ae:	2ee1                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:74 (discriminator 4)

    //rd = AEAD_E_Set_Init();
    asm volatile("fence");
204003b0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:75 (discriminator 4)
    ROCC_INSTRUCTION_DS(0,rd, rd,  Enc_Init );
204003b4:	fd442783          	lw	a5,-44(s0)
204003b8:	85be                	mv	a1,a5
204003ba:	2c05e50b          	0x2c05e50b
204003be:	87aa                	mv	a5,a0
204003c0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:76 (discriminator 4)
    asm volatile("fence" ::: "memory");
204003c4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:77 (discriminator 4)
   printf("Finish AEAD : %08x \n", rd);
204003c8:	fd442583          	lw	a1,-44(s0)
204003cc:	204057b7          	lui	a5,0x20405
204003d0:	5fc78513          	addi	a0,a5,1532 # 204055fc <_exit+0x10e>
204003d4:	2e4d                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:79 (discriminator 4)

    end = rdcycle();
204003d6:	352d                	jal	20400200 <rdcycle>
204003d8:	87aa                	mv	a5,a0
204003da:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:80 (discriminator 4)
    HWcycles = end - start;
204003de:	fcc42703          	lw	a4,-52(s0)
204003e2:	fd042783          	lw	a5,-48(s0)
204003e6:	40f707b3          	sub	a5,a4,a5
204003ea:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:82 (discriminator 4)
   //  printf("Total time = %d cycles\n",HWcycles);
    printf("C");
204003ee:	04300513          	li	a0,67
204003f2:	2ee1                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:83 (discriminator 4)
    for(int i = 0; i < 8+4; i ++){
204003f4:	fe042623          	sw	zero,-20(s0)
204003f8:	a0b9                	j	20400446 <main+0x228>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:84
       if(i%2==0 ){
204003fa:	fec42783          	lw	a5,-20(s0)
204003fe:	8b85                	andi	a5,a5,1
20400400:	e399                	bnez	a5,20400406 <main+0x1e8>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:85
            printf("\n");
20400402:	4529                	li	a0,10
20400404:	26d9                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:87 (discriminator 2)
        }
        printf("%08x ",cipher_text[i], i);
20400406:	800007b7          	lui	a5,0x80000
2040040a:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
2040040e:	fec42783          	lw	a5,-20(s0)
20400412:	078a                	slli	a5,a5,0x2
20400414:	97ba                	add	a5,a5,a4
20400416:	439c                	lw	a5,0(a5)
20400418:	fec42603          	lw	a2,-20(s0)
2040041c:	85be                	mv	a1,a5
2040041e:	204057b7          	lui	a5,0x20405
20400422:	61478513          	addi	a0,a5,1556 # 20405614 <_exit+0x126>
20400426:	2685                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:88 (discriminator 2)
       cipher_text[i] = 0;
20400428:	800007b7          	lui	a5,0x80000
2040042c:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
20400430:	fec42783          	lw	a5,-20(s0)
20400434:	078a                	slli	a5,a5,0x2
20400436:	97ba                	add	a5,a5,a4
20400438:	0007a023          	sw	zero,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:83 (discriminator 2)
    for(int i = 0; i < 8+4; i ++){
2040043c:	fec42783          	lw	a5,-20(s0)
20400440:	0785                	addi	a5,a5,1
20400442:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:83 (discriminator 1)
20400446:	fec42703          	lw	a4,-20(s0)
2040044a:	47ad                	li	a5,11
2040044c:	fae7d7e3          	bge	a5,a4,204003fa <main+0x1dc>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:90
    }
    printf("\n");
20400450:	4529                	li	a0,10
20400452:	2ea5                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:91
    printf("X\n\n");
20400454:	204057b7          	lui	a5,0x20405
20400458:	61c78513          	addi	a0,a5,1564 # 2040561c <_exit+0x12e>
2040045c:	29dd                	jal	20400952 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:98
    /* plain_len = 32;
    asso_len = 10; /// CReo que asignaste a memoria
    plain_text[0] = 12;
    asso_text[0] = 123; */
    //rd = AEAD_E_Set_P( plain_text, plain_len);
    asm volatile("fence");
2040045e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:99
    ROCC_INSTRUCTION_DS(0,rd, Nonce, Enc_Set_Nonce );
20400462:	800007b7          	lui	a5,0x80000
20400466:	04078793          	addi	a5,a5,64 # 80000040 <metal_segment_heap_target_end+0xffffeb94>
2040046a:	85be                	mv	a1,a5
2040046c:	2805e50b          	0x2805e50b
20400470:	87aa                	mv	a5,a0
20400472:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:100
    asm volatile("fence" ::: "memory");
20400476:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:101
    printf("Set Nonce finish : %08x \n", rd);
2040047a:	fd442583          	lw	a1,-44(s0)
2040047e:	204057b7          	lui	a5,0x20405
20400482:	55878513          	addi	a0,a5,1368 # 20405558 <_exit+0x6a>
20400486:	2601                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:103

    asm volatile("fence");
20400488:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:104
    ROCC_INSTRUCTION_DSS(0,rd, plain_text, plain_len, Enc_Set_P );
2040048c:	800007b7          	lui	a5,0x80000
20400490:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb74>
20400494:	85be                	mv	a1,a5
20400496:	fe042603          	lw	a2,-32(s0)
2040049a:	22c5f50b          	0x22c5f50b
2040049e:	87aa                	mv	a5,a0
204004a0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:105
    asm volatile("fence" ::: "memory");
204004a4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:106
    printf("Set Plain text finish length : %08x \n", rd);
204004a8:	fd442583          	lw	a1,-44(s0)
204004ac:	204057b7          	lui	a5,0x20405
204004b0:	57478513          	addi	a0,a5,1396 # 20405574 <_exit+0x86>
204004b4:	2cc9                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:111



    // rd = AEAD_E_Set_AD(plain_text, plain_len );
    asm volatile("fence");
204004b6:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:112
    ROCC_INSTRUCTION_DSS(0, rd,asso_text, asso_len, Enc_Set_AD );
204004ba:	800007b7          	lui	a5,0x80000
204004be:	00078793          	mv	a5,a5
204004c2:	85be                	mv	a1,a5
204004c4:	fdc42603          	lw	a2,-36(s0)
204004c8:	24c5f50b          	0x24c5f50b
204004cc:	87aa                	mv	a5,a0
204004ce:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:113
    asm volatile("fence" ::: "memory");
204004d2:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:114
    printf("Set Associated Data finish length: %08x \n", rd);
204004d6:	fd442583          	lw	a1,-44(s0)
204004da:	204057b7          	lui	a5,0x20405
204004de:	59c78513          	addi	a0,a5,1436 # 2040559c <_exit+0xae>
204004e2:	2455                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:119



    // rd = AEAD_E_Set_C_Tag(cipher_text,dumm_array);
    asm volatile("fence");
204004e4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:120
    ROCC_INSTRUCTION_DSS(0,rd, cipher_text, dummy_array, Enc_Set_C_Tag );
204004e8:	800007b7          	lui	a5,0x80000
204004ec:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
204004f0:	85be                	mv	a1,a5
204004f2:	800017b7          	lui	a5,0x80001
204004f6:	80c78793          	addi	a5,a5,-2036 # 8000080c <metal_segment_heap_target_end+0xfffff360>
204004fa:	863e                	mv	a2,a5
204004fc:	26c5f50b          	0x26c5f50b
20400500:	87aa                	mv	a5,a0
20400502:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:121
    asm volatile("fence" ::: "memory");
20400506:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:123
    // printf("Set Tag and C finish : %d \n", rd);
    printf("Set Cipher addr: %08x \n", rd);
2040050a:	fd442583          	lw	a1,-44(s0)
2040050e:	204057b7          	lui	a5,0x20405
20400512:	5c878513          	addi	a0,a5,1480 # 204055c8 <_exit+0xda>
20400516:	2c85                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:129

    // rd = AEAD_E_Set_Nonce(dumm_array );


    // rd = AEAD_E_Set_Key(rd);
    asm volatile("fence");
20400518:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:130
    ROCC_INSTRUCTION_DS(0,rd,  rd, Enc_Set_Key );
2040051c:	fd442783          	lw	a5,-44(s0)
20400520:	85be                	mv	a1,a5
20400522:	2a05e50b          	0x2a05e50b
20400526:	87aa                	mv	a5,a0
20400528:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:131
    asm volatile("fence" ::: "memory");
2040052c:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:132
    printf("Set Key  finish : %08x \n", rd);
20400530:	fd442583          	lw	a1,-44(s0)
20400534:	204057b7          	lui	a5,0x20405
20400538:	5e078513          	addi	a0,a5,1504 # 204055e0 <_exit+0xf2>
2040053c:	24a9                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:135

    //rd = AEAD_E_Set_Init();
    asm volatile("fence");
2040053e:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:136
    ROCC_INSTRUCTION_DS(0,rd, rd,  Enc_Init );
20400542:	fd442783          	lw	a5,-44(s0)
20400546:	85be                	mv	a1,a5
20400548:	2c05e50b          	0x2c05e50b
2040054c:	87aa                	mv	a5,a0
2040054e:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:137
    asm volatile("fence" ::: "memory");
20400552:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:138
    printf("Finish AEAD : %08x \n", rd);
20400556:	fd442583          	lw	a1,-44(s0)
2040055a:	204057b7          	lui	a5,0x20405
2040055e:	5fc78513          	addi	a0,a5,1532 # 204055fc <_exit+0x10e>
20400562:	2415                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:140

    end = rdcycle();
20400564:	3971                	jal	20400200 <rdcycle>
20400566:	87aa                	mv	a5,a0
20400568:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:141
    HWcycles = end - start;
2040056c:	fcc42703          	lw	a4,-52(s0)
20400570:	fd042783          	lw	a5,-48(s0)
20400574:	40f707b3          	sub	a5,a4,a5
20400578:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:143
    //  printf("Total time = %d cycles\n",HWcycles);
    printf("C");
2040057c:	04300513          	li	a0,67
20400580:	24a9                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:144
    for(int i = 0; i < 8+4; i ++){
20400582:	fe042423          	sw	zero,-24(s0)
20400586:	a82d                	j	204005c0 <main+0x3a2>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:145
        if(i%2==0 ){
20400588:	fe842783          	lw	a5,-24(s0)
2040058c:	8b85                	andi	a5,a5,1
2040058e:	e399                	bnez	a5,20400594 <main+0x376>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:146
            printf("\n");
20400590:	4529                	li	a0,10
20400592:	2c25                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:148 (discriminator 2)
        }
        printf("%08x ",cipher_text[i], i);
20400594:	800007b7          	lui	a5,0x80000
20400598:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
2040059c:	fe842783          	lw	a5,-24(s0)
204005a0:	078a                	slli	a5,a5,0x2
204005a2:	97ba                	add	a5,a5,a4
204005a4:	439c                	lw	a5,0(a5)
204005a6:	fe842603          	lw	a2,-24(s0)
204005aa:	85be                	mv	a1,a5
204005ac:	204057b7          	lui	a5,0x20405
204005b0:	61478513          	addi	a0,a5,1556 # 20405614 <_exit+0x126>
204005b4:	2ac9                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:144 (discriminator 2)
    for(int i = 0; i < 8+4; i ++){
204005b6:	fe842783          	lw	a5,-24(s0)
204005ba:	0785                	addi	a5,a5,1
204005bc:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:144 (discriminator 1)
204005c0:	fe842703          	lw	a4,-24(s0)
204005c4:	47ad                	li	a5,11
204005c6:	fce7d1e3          	bge	a5,a4,20400588 <main+0x36a>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:150
    }
    printf("\n");
204005ca:	4529                	li	a0,10
204005cc:	2afd                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:151
    printf("X\n\n");
204005ce:	204057b7          	lui	a5,0x20405
204005d2:	61c78513          	addi	a0,a5,1564 # 2040561c <_exit+0x12e>
204005d6:	2eb5                	jal	20400952 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:153

    plain_len = 32;
204005d8:	02000793          	li	a5,32
204005dc:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:154
       asso_len = 10; /// CReo que asignaste a memoria
204005e0:	47a9                	li	a5,10
204005e2:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:155
       plain_text[0] = 12;
204005e6:	800007b7          	lui	a5,0x80000
204005ea:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb74>
204005ee:	4731                	li	a4,12
204005f0:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:156
       asso_text[0] = 123;
204005f2:	800007b7          	lui	a5,0x80000
204005f6:	00078793          	mv	a5,a5
204005fa:	07b00713          	li	a4,123
204005fe:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:158
    //rd = AEAD_E_Set_P( plain_text, plain_len);
    asm volatile("fence");
20400600:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:159
    ROCC_INSTRUCTION_DS(0,rd, Nonce, Enc_Set_Nonce );
20400604:	800007b7          	lui	a5,0x80000
20400608:	04078793          	addi	a5,a5,64 # 80000040 <metal_segment_heap_target_end+0xffffeb94>
2040060c:	85be                	mv	a1,a5
2040060e:	2805e50b          	0x2805e50b
20400612:	87aa                	mv	a5,a0
20400614:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:160
    asm volatile("fence" ::: "memory");
20400618:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:161
    printf("Set Nonce finish : %08x \n", rd);
2040061c:	fd442583          	lw	a1,-44(s0)
20400620:	204057b7          	lui	a5,0x20405
20400624:	55878513          	addi	a0,a5,1368 # 20405558 <_exit+0x6a>
20400628:	2ab9                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:163

    asm volatile("fence");
2040062a:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:164
    ROCC_INSTRUCTION_DSS(0,rd, plain_text, plain_len, Enc_Set_P );
2040062e:	800007b7          	lui	a5,0x80000
20400632:	02078793          	addi	a5,a5,32 # 80000020 <metal_segment_heap_target_end+0xffffeb74>
20400636:	85be                	mv	a1,a5
20400638:	fe042603          	lw	a2,-32(s0)
2040063c:	22c5f50b          	0x22c5f50b
20400640:	87aa                	mv	a5,a0
20400642:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:165
    asm volatile("fence" ::: "memory");
20400646:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:166
    printf("Set Plain text finish length : %08x \n", rd);
2040064a:	fd442583          	lw	a1,-44(s0)
2040064e:	204057b7          	lui	a5,0x20405
20400652:	57478513          	addi	a0,a5,1396 # 20405574 <_exit+0x86>
20400656:	2a05                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:171



    // rd = AEAD_E_Set_AD(plain_text, plain_len );
    asm volatile("fence");
20400658:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:172
    ROCC_INSTRUCTION_DSS(0, rd,asso_text, asso_len, Enc_Set_AD );
2040065c:	800007b7          	lui	a5,0x80000
20400660:	00078793          	mv	a5,a5
20400664:	85be                	mv	a1,a5
20400666:	fdc42603          	lw	a2,-36(s0)
2040066a:	24c5f50b          	0x24c5f50b
2040066e:	87aa                	mv	a5,a0
20400670:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:173
    asm volatile("fence" ::: "memory");
20400674:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:174
    printf("Set Associated Data finish length: %08x \n", rd);
20400678:	fd442583          	lw	a1,-44(s0)
2040067c:	204057b7          	lui	a5,0x20405
20400680:	59c78513          	addi	a0,a5,1436 # 2040559c <_exit+0xae>
20400684:	2209                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:179



    // rd = AEAD_E_Set_C_Tag(cipher_text,dumm_array);
    asm volatile("fence");
20400686:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:180
    ROCC_INSTRUCTION_DSS(0,rd, cipher_text, dummy_array, Enc_Set_C_Tag );
2040068a:	800007b7          	lui	a5,0x80000
2040068e:	7cc78793          	addi	a5,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
20400692:	85be                	mv	a1,a5
20400694:	800017b7          	lui	a5,0x80001
20400698:	80c78793          	addi	a5,a5,-2036 # 8000080c <metal_segment_heap_target_end+0xfffff360>
2040069c:	863e                	mv	a2,a5
2040069e:	26c5f50b          	0x26c5f50b
204006a2:	87aa                	mv	a5,a0
204006a4:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:181
    asm volatile("fence" ::: "memory");
204006a8:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:183
    // printf("Set Tag and C finish : %d \n", rd);
    printf("Set Cipher addr: %08x \n", rd);
204006ac:	fd442583          	lw	a1,-44(s0)
204006b0:	204057b7          	lui	a5,0x20405
204006b4:	5c878513          	addi	a0,a5,1480 # 204055c8 <_exit+0xda>
204006b8:	20f9                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:189

    // rd = AEAD_E_Set_Nonce(dumm_array );


    // rd = AEAD_E_Set_Key(rd);
    asm volatile("fence");
204006ba:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:190
    ROCC_INSTRUCTION_DS(0,rd,  rd, Enc_Set_Key );
204006be:	fd442783          	lw	a5,-44(s0)
204006c2:	85be                	mv	a1,a5
204006c4:	2a05e50b          	0x2a05e50b
204006c8:	87aa                	mv	a5,a0
204006ca:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:191
    asm volatile("fence" ::: "memory");
204006ce:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:192
    printf("Set Key  finish : %08x \n", rd);
204006d2:	fd442583          	lw	a1,-44(s0)
204006d6:	204057b7          	lui	a5,0x20405
204006da:	5e078513          	addi	a0,a5,1504 # 204055e0 <_exit+0xf2>
204006de:	2065                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:195

    //rd = AEAD_E_Set_Init();
    asm volatile("fence");
204006e0:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:196
    ROCC_INSTRUCTION_DS(0,rd, rd,  Enc_Init );
204006e4:	fd442783          	lw	a5,-44(s0)
204006e8:	85be                	mv	a1,a5
204006ea:	2c05e50b          	0x2c05e50b
204006ee:	87aa                	mv	a5,a0
204006f0:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:197
    asm volatile("fence" ::: "memory");
204006f4:	0ff0000f          	fence
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:198
    printf("Finish AEAD : %08x \n", rd);
204006f8:	fd442583          	lw	a1,-44(s0)
204006fc:	204057b7          	lui	a5,0x20405
20400700:	5fc78513          	addi	a0,a5,1532 # 204055fc <_exit+0x10e>
20400704:	2049                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:200

    end = rdcycle();
20400706:	3ced                	jal	20400200 <rdcycle>
20400708:	87aa                	mv	a5,a0
2040070a:	fcf42623          	sw	a5,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:201
    HWcycles = end - start;
2040070e:	fcc42703          	lw	a4,-52(s0)
20400712:	fd042783          	lw	a5,-48(s0)
20400716:	40f707b3          	sub	a5,a4,a5
2040071a:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:203
    //  printf("Total time = %d cycles\n",HWcycles);
    printf("C");
2040071e:	04300513          	li	a0,67
20400722:	2065                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:204
    for(int i = 0; i < 8+4; i ++){
20400724:	fe042223          	sw	zero,-28(s0)
20400728:	a82d                	j	20400762 <main+0x544>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:205
        if(i%2==0 ){
2040072a:	fe442783          	lw	a5,-28(s0)
2040072e:	8b85                	andi	a5,a5,1
20400730:	e399                	bnez	a5,20400736 <main+0x518>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:206
            printf("\n");
20400732:	4529                	li	a0,10
20400734:	2859                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:208 (discriminator 2)
        }
        printf("%08x ",cipher_text[i], i);
20400736:	800007b7          	lui	a5,0x80000
2040073a:	7cc78713          	addi	a4,a5,1996 # 800007cc <metal_segment_heap_target_end+0xfffff320>
2040073e:	fe442783          	lw	a5,-28(s0)
20400742:	078a                	slli	a5,a5,0x2
20400744:	97ba                	add	a5,a5,a4
20400746:	439c                	lw	a5,0(a5)
20400748:	fe442603          	lw	a2,-28(s0)
2040074c:	85be                	mv	a1,a5
2040074e:	204057b7          	lui	a5,0x20405
20400752:	61478513          	addi	a0,a5,1556 # 20405614 <_exit+0x126>
20400756:	2805                	jal	20400786 <iprintf>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:204 (discriminator 2)
    for(int i = 0; i < 8+4; i ++){
20400758:	fe442783          	lw	a5,-28(s0)
2040075c:	0785                	addi	a5,a5,1
2040075e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:204 (discriminator 1)
20400762:	fe442703          	lw	a4,-28(s0)
20400766:	47ad                	li	a5,11
20400768:	fce7d1e3          	bge	a5,a4,2040072a <main+0x50c>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:210
    }
    printf("\n");
2040076c:	4529                	li	a0,10
2040076e:	28b1                	jal	204007ca <putchar>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:211
    printf("X\n\n");
20400770:	204057b7          	lui	a5,0x20405
20400774:	61c78513          	addi	a0,a5,1564 # 2040561c <_exit+0x12e>
20400778:	2ae9                	jal	20400952 <puts>
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:216




    return 0;
2040077a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/software/E300RW/E300RW.c:217
}
2040077c:	853e                	mv	a0,a5
2040077e:	50f2                	lw	ra,60(sp)
20400780:	5462                	lw	s0,56(sp)
20400782:	6121                	addi	sp,sp,64
20400784:	8082                	ret

20400786 <iprintf>:
printf():
20400786:	7139                	addi	sp,sp,-64
20400788:	da3e                	sw	a5,52(sp)
2040078a:	d22e                	sw	a1,36(sp)
2040078c:	d432                	sw	a2,40(sp)
2040078e:	d636                	sw	a3,44(sp)
20400790:	d83a                	sw	a4,48(sp)
20400792:	dc42                	sw	a6,56(sp)
20400794:	de46                	sw	a7,60(sp)
20400796:	5fc00797          	auipc	a5,0x5fc00
2040079a:	00278793          	addi	a5,a5,2 # 80000798 <_impure_ptr>
2040079e:	cc22                	sw	s0,24(sp)
204007a0:	4380                	lw	s0,0(a5)
204007a2:	ca26                	sw	s1,20(sp)
204007a4:	ce06                	sw	ra,28(sp)
204007a6:	84aa                	mv	s1,a0
204007a8:	c409                	beqz	s0,204007b2 <iprintf+0x2c>
204007aa:	4c1c                	lw	a5,24(s0)
204007ac:	e399                	bnez	a5,204007b2 <iprintf+0x2c>
204007ae:	8522                	mv	a0,s0
204007b0:	23d5                	jal	20400d94 <__sinit>
204007b2:	440c                	lw	a1,8(s0)
204007b4:	1054                	addi	a3,sp,36
204007b6:	8626                	mv	a2,s1
204007b8:	8522                	mv	a0,s0
204007ba:	c636                	sw	a3,12(sp)
204007bc:	2df000ef          	jal	ra,2040129a <_vfiprintf_r>
204007c0:	40f2                	lw	ra,28(sp)
204007c2:	4462                	lw	s0,24(sp)
204007c4:	44d2                	lw	s1,20(sp)
204007c6:	6121                	addi	sp,sp,64
204007c8:	8082                	ret

204007ca <putchar>:
putchar():
204007ca:	1101                	addi	sp,sp,-32
204007cc:	5fc00797          	auipc	a5,0x5fc00
204007d0:	fcc78793          	addi	a5,a5,-52 # 80000798 <_impure_ptr>
204007d4:	cc22                	sw	s0,24(sp)
204007d6:	4380                	lw	s0,0(a5)
204007d8:	ce06                	sw	ra,28(sp)
204007da:	85aa                	mv	a1,a0
204007dc:	c419                	beqz	s0,204007ea <putchar+0x20>
204007de:	4c1c                	lw	a5,24(s0)
204007e0:	e789                	bnez	a5,204007ea <putchar+0x20>
204007e2:	c62a                	sw	a0,12(sp)
204007e4:	8522                	mv	a0,s0
204007e6:	237d                	jal	20400d94 <__sinit>
204007e8:	45b2                	lw	a1,12(sp)
204007ea:	4410                	lw	a2,8(s0)
204007ec:	8522                	mv	a0,s0
204007ee:	4462                	lw	s0,24(sp)
204007f0:	40f2                	lw	ra,28(sp)
204007f2:	6105                	addi	sp,sp,32
204007f4:	a009                	j	204007f6 <_putc_r>

204007f6 <_putc_r>:
_putc_r():
204007f6:	1101                	addi	sp,sp,-32
204007f8:	cc22                	sw	s0,24(sp)
204007fa:	ce06                	sw	ra,28(sp)
204007fc:	842a                	mv	s0,a0
204007fe:	c901                	beqz	a0,2040080e <_putc_r+0x18>
20400800:	4d1c                	lw	a5,24(a0)
20400802:	e791                	bnez	a5,2040080e <_putc_r+0x18>
20400804:	c632                	sw	a2,12(sp)
20400806:	c42e                	sw	a1,8(sp)
20400808:	2371                	jal	20400d94 <__sinit>
2040080a:	4632                	lw	a2,12(sp)
2040080c:	45a2                	lw	a1,8(sp)
2040080e:	00005797          	auipc	a5,0x5
20400812:	e3278793          	addi	a5,a5,-462 # 20405640 <__sf_fake_stdin>
20400816:	02f61563          	bne	a2,a5,20400840 <_putc_r+0x4a>
2040081a:	4050                	lw	a2,4(s0)
2040081c:	461c                	lw	a5,8(a2)
2040081e:	17fd                	addi	a5,a5,-1
20400820:	c61c                	sw	a5,8(a2)
20400822:	0207df63          	bgez	a5,20400860 <_putc_r+0x6a>
20400826:	4e18                	lw	a4,24(a2)
20400828:	00e7c763          	blt	a5,a4,20400836 <_putc_r+0x40>
2040082c:	0ff5f793          	andi	a5,a1,255
20400830:	4729                	li	a4,10
20400832:	02e79763          	bne	a5,a4,20400860 <_putc_r+0x6a>
20400836:	8522                	mv	a0,s0
20400838:	4462                	lw	s0,24(sp)
2040083a:	40f2                	lw	ra,28(sp)
2040083c:	6105                	addi	sp,sp,32
2040083e:	a20d                	j	20400960 <__swbuf_r>
20400840:	00005797          	auipc	a5,0x5
20400844:	e2078793          	addi	a5,a5,-480 # 20405660 <__sf_fake_stdout>
20400848:	00f61463          	bne	a2,a5,20400850 <_putc_r+0x5a>
2040084c:	4410                	lw	a2,8(s0)
2040084e:	b7f9                	j	2040081c <_putc_r+0x26>
20400850:	00005797          	auipc	a5,0x5
20400854:	dd078793          	addi	a5,a5,-560 # 20405620 <__sf_fake_stderr>
20400858:	fcf612e3          	bne	a2,a5,2040081c <_putc_r+0x26>
2040085c:	4450                	lw	a2,12(s0)
2040085e:	bf7d                	j	2040081c <_putc_r+0x26>
20400860:	421c                	lw	a5,0(a2)
20400862:	0ff5f513          	andi	a0,a1,255
20400866:	00178713          	addi	a4,a5,1
2040086a:	c218                	sw	a4,0(a2)
2040086c:	00b78023          	sb	a1,0(a5)
20400870:	40f2                	lw	ra,28(sp)
20400872:	4462                	lw	s0,24(sp)
20400874:	6105                	addi	sp,sp,32
20400876:	8082                	ret

20400878 <_puts_r>:
_puts_r():
20400878:	1101                	addi	sp,sp,-32
2040087a:	ca26                	sw	s1,20(sp)
2040087c:	c84a                	sw	s2,16(sp)
2040087e:	ce06                	sw	ra,28(sp)
20400880:	cc22                	sw	s0,24(sp)
20400882:	c64e                	sw	s3,12(sp)
20400884:	c452                	sw	s4,8(sp)
20400886:	84aa                	mv	s1,a0
20400888:	892e                	mv	s2,a1
2040088a:	c501                	beqz	a0,20400892 <_puts_r+0x1a>
2040088c:	4d1c                	lw	a5,24(a0)
2040088e:	e391                	bnez	a5,20400892 <_puts_r+0x1a>
20400890:	2311                	jal	20400d94 <__sinit>
20400892:	4c9c                	lw	a5,24(s1)
20400894:	4480                	lw	s0,8(s1)
20400896:	e399                	bnez	a5,2040089c <_puts_r+0x24>
20400898:	8526                	mv	a0,s1
2040089a:	29ed                	jal	20400d94 <__sinit>
2040089c:	00005797          	auipc	a5,0x5
204008a0:	da478793          	addi	a5,a5,-604 # 20405640 <__sf_fake_stdin>
204008a4:	02f41c63          	bne	s0,a5,204008dc <_puts_r+0x64>
204008a8:	40c0                	lw	s0,4(s1)
204008aa:	00c45783          	lhu	a5,12(s0)
204008ae:	8ba1                	andi	a5,a5,8
204008b0:	c7b1                	beqz	a5,204008fc <_puts_r+0x84>
204008b2:	481c                	lw	a5,16(s0)
204008b4:	c7a1                	beqz	a5,204008fc <_puts_r+0x84>
204008b6:	59fd                	li	s3,-1
204008b8:	4a29                	li	s4,10
204008ba:	441c                	lw	a5,8(s0)
204008bc:	00094583          	lbu	a1,0(s2)
204008c0:	17fd                	addi	a5,a5,-1
204008c2:	e9b1                	bnez	a1,20400916 <_puts_r+0x9e>
204008c4:	c41c                	sw	a5,8(s0)
204008c6:	0607de63          	bgez	a5,20400942 <_puts_r+0xca>
204008ca:	8622                	mv	a2,s0
204008cc:	45a9                	li	a1,10
204008ce:	8526                	mv	a0,s1
204008d0:	2841                	jal	20400960 <__swbuf_r>
204008d2:	57fd                	li	a5,-1
204008d4:	02f50863          	beq	a0,a5,20400904 <_puts_r+0x8c>
204008d8:	4529                	li	a0,10
204008da:	a035                	j	20400906 <_puts_r+0x8e>
204008dc:	00005797          	auipc	a5,0x5
204008e0:	d8478793          	addi	a5,a5,-636 # 20405660 <__sf_fake_stdout>
204008e4:	00f41463          	bne	s0,a5,204008ec <_puts_r+0x74>
204008e8:	4480                	lw	s0,8(s1)
204008ea:	b7c1                	j	204008aa <_puts_r+0x32>
204008ec:	00005797          	auipc	a5,0x5
204008f0:	d3478793          	addi	a5,a5,-716 # 20405620 <__sf_fake_stderr>
204008f4:	faf41be3          	bne	s0,a5,204008aa <_puts_r+0x32>
204008f8:	44c0                	lw	s0,12(s1)
204008fa:	bf45                	j	204008aa <_puts_r+0x32>
204008fc:	85a2                	mv	a1,s0
204008fe:	8526                	mv	a0,s1
20400900:	2205                	jal	20400a20 <__swsetup_r>
20400902:	d955                	beqz	a0,204008b6 <_puts_r+0x3e>
20400904:	557d                	li	a0,-1
20400906:	40f2                	lw	ra,28(sp)
20400908:	4462                	lw	s0,24(sp)
2040090a:	44d2                	lw	s1,20(sp)
2040090c:	4942                	lw	s2,16(sp)
2040090e:	49b2                	lw	s3,12(sp)
20400910:	4a22                	lw	s4,8(sp)
20400912:	6105                	addi	sp,sp,32
20400914:	8082                	ret
20400916:	c41c                	sw	a5,8(s0)
20400918:	0905                	addi	s2,s2,1
2040091a:	0007d763          	bgez	a5,20400928 <_puts_r+0xb0>
2040091e:	4c18                	lw	a4,24(s0)
20400920:	00e7cb63          	blt	a5,a4,20400936 <_puts_r+0xbe>
20400924:	01458963          	beq	a1,s4,20400936 <_puts_r+0xbe>
20400928:	401c                	lw	a5,0(s0)
2040092a:	00178713          	addi	a4,a5,1
2040092e:	c018                	sw	a4,0(s0)
20400930:	00b78023          	sb	a1,0(a5)
20400934:	b759                	j	204008ba <_puts_r+0x42>
20400936:	8622                	mv	a2,s0
20400938:	8526                	mv	a0,s1
2040093a:	201d                	jal	20400960 <__swbuf_r>
2040093c:	f7351fe3          	bne	a0,s3,204008ba <_puts_r+0x42>
20400940:	b7d1                	j	20400904 <_puts_r+0x8c>
20400942:	401c                	lw	a5,0(s0)
20400944:	00178713          	addi	a4,a5,1
20400948:	c018                	sw	a4,0(s0)
2040094a:	4729                	li	a4,10
2040094c:	00e78023          	sb	a4,0(a5)
20400950:	b761                	j	204008d8 <_puts_r+0x60>

20400952 <puts>:
puts():
20400952:	5fc00797          	auipc	a5,0x5fc00
20400956:	e4678793          	addi	a5,a5,-442 # 80000798 <_impure_ptr>
2040095a:	85aa                	mv	a1,a0
2040095c:	4388                	lw	a0,0(a5)
2040095e:	bf29                	j	20400878 <_puts_r>

20400960 <__swbuf_r>:
__swbuf_r():
20400960:	1101                	addi	sp,sp,-32
20400962:	cc22                	sw	s0,24(sp)
20400964:	ca26                	sw	s1,20(sp)
20400966:	c84a                	sw	s2,16(sp)
20400968:	ce06                	sw	ra,28(sp)
2040096a:	c64e                	sw	s3,12(sp)
2040096c:	84aa                	mv	s1,a0
2040096e:	892e                	mv	s2,a1
20400970:	8432                	mv	s0,a2
20400972:	c501                	beqz	a0,2040097a <__swbuf_r+0x1a>
20400974:	4d1c                	lw	a5,24(a0)
20400976:	e391                	bnez	a5,2040097a <__swbuf_r+0x1a>
20400978:	2931                	jal	20400d94 <__sinit>
2040097a:	00005797          	auipc	a5,0x5
2040097e:	cc678793          	addi	a5,a5,-826 # 20405640 <__sf_fake_stdin>
20400982:	06f41963          	bne	s0,a5,204009f4 <__swbuf_r+0x94>
20400986:	40c0                	lw	s0,4(s1)
20400988:	4c1c                	lw	a5,24(s0)
2040098a:	c41c                	sw	a5,8(s0)
2040098c:	00c45783          	lhu	a5,12(s0)
20400990:	8ba1                	andi	a5,a5,8
20400992:	c3c9                	beqz	a5,20400a14 <__swbuf_r+0xb4>
20400994:	481c                	lw	a5,16(s0)
20400996:	cfbd                	beqz	a5,20400a14 <__swbuf_r+0xb4>
20400998:	481c                	lw	a5,16(s0)
2040099a:	4008                	lw	a0,0(s0)
2040099c:	0ff97993          	andi	s3,s2,255
204009a0:	0ff97913          	andi	s2,s2,255
204009a4:	8d1d                	sub	a0,a0,a5
204009a6:	485c                	lw	a5,20(s0)
204009a8:	00f54663          	blt	a0,a5,204009b4 <__swbuf_r+0x54>
204009ac:	85a2                	mv	a1,s0
204009ae:	8526                	mv	a0,s1
204009b0:	24e9                	jal	20400c7a <_fflush_r>
204009b2:	e52d                	bnez	a0,20400a1c <__swbuf_r+0xbc>
204009b4:	441c                	lw	a5,8(s0)
204009b6:	0505                	addi	a0,a0,1
204009b8:	17fd                	addi	a5,a5,-1
204009ba:	c41c                	sw	a5,8(s0)
204009bc:	401c                	lw	a5,0(s0)
204009be:	00178713          	addi	a4,a5,1
204009c2:	c018                	sw	a4,0(s0)
204009c4:	01378023          	sb	s3,0(a5)
204009c8:	485c                	lw	a5,20(s0)
204009ca:	00a78963          	beq	a5,a0,204009dc <__swbuf_r+0x7c>
204009ce:	00c45783          	lhu	a5,12(s0)
204009d2:	8b85                	andi	a5,a5,1
204009d4:	cb81                	beqz	a5,204009e4 <__swbuf_r+0x84>
204009d6:	47a9                	li	a5,10
204009d8:	00f91663          	bne	s2,a5,204009e4 <__swbuf_r+0x84>
204009dc:	85a2                	mv	a1,s0
204009de:	8526                	mv	a0,s1
204009e0:	2c69                	jal	20400c7a <_fflush_r>
204009e2:	ed0d                	bnez	a0,20400a1c <__swbuf_r+0xbc>
204009e4:	40f2                	lw	ra,28(sp)
204009e6:	4462                	lw	s0,24(sp)
204009e8:	854a                	mv	a0,s2
204009ea:	44d2                	lw	s1,20(sp)
204009ec:	4942                	lw	s2,16(sp)
204009ee:	49b2                	lw	s3,12(sp)
204009f0:	6105                	addi	sp,sp,32
204009f2:	8082                	ret
204009f4:	00005797          	auipc	a5,0x5
204009f8:	c6c78793          	addi	a5,a5,-916 # 20405660 <__sf_fake_stdout>
204009fc:	00f41463          	bne	s0,a5,20400a04 <__swbuf_r+0xa4>
20400a00:	4480                	lw	s0,8(s1)
20400a02:	b759                	j	20400988 <__swbuf_r+0x28>
20400a04:	00005797          	auipc	a5,0x5
20400a08:	c1c78793          	addi	a5,a5,-996 # 20405620 <__sf_fake_stderr>
20400a0c:	f6f41ee3          	bne	s0,a5,20400988 <__swbuf_r+0x28>
20400a10:	44c0                	lw	s0,12(s1)
20400a12:	bf9d                	j	20400988 <__swbuf_r+0x28>
20400a14:	85a2                	mv	a1,s0
20400a16:	8526                	mv	a0,s1
20400a18:	2021                	jal	20400a20 <__swsetup_r>
20400a1a:	dd3d                	beqz	a0,20400998 <__swbuf_r+0x38>
20400a1c:	597d                	li	s2,-1
20400a1e:	b7d9                	j	204009e4 <__swbuf_r+0x84>

20400a20 <__swsetup_r>:
__swsetup_r():
20400a20:	1141                	addi	sp,sp,-16
20400a22:	5fc00797          	auipc	a5,0x5fc00
20400a26:	d7678793          	addi	a5,a5,-650 # 80000798 <_impure_ptr>
20400a2a:	c226                	sw	s1,4(sp)
20400a2c:	4384                	lw	s1,0(a5)
20400a2e:	c422                	sw	s0,8(sp)
20400a30:	c04a                	sw	s2,0(sp)
20400a32:	c606                	sw	ra,12(sp)
20400a34:	892a                	mv	s2,a0
20400a36:	842e                	mv	s0,a1
20400a38:	c489                	beqz	s1,20400a42 <__swsetup_r+0x22>
20400a3a:	4c9c                	lw	a5,24(s1)
20400a3c:	e399                	bnez	a5,20400a42 <__swsetup_r+0x22>
20400a3e:	8526                	mv	a0,s1
20400a40:	2e91                	jal	20400d94 <__sinit>
20400a42:	00005797          	auipc	a5,0x5
20400a46:	bfe78793          	addi	a5,a5,-1026 # 20405640 <__sf_fake_stdin>
20400a4a:	02f41c63          	bne	s0,a5,20400a82 <__swsetup_r+0x62>
20400a4e:	40c0                	lw	s0,4(s1)
20400a50:	00c41703          	lh	a4,12(s0)
20400a54:	01071793          	slli	a5,a4,0x10
20400a58:	83c1                	srli	a5,a5,0x10
20400a5a:	0087f693          	andi	a3,a5,8
20400a5e:	eeb5                	bnez	a3,20400ada <__swsetup_r+0xba>
20400a60:	0107f693          	andi	a3,a5,16
20400a64:	ee9d                	bnez	a3,20400aa2 <__swsetup_r+0x82>
20400a66:	47a5                	li	a5,9
20400a68:	00f92023          	sw	a5,0(s2)
20400a6c:	04076713          	ori	a4,a4,64
20400a70:	00e41623          	sh	a4,12(s0)
20400a74:	557d                	li	a0,-1
20400a76:	40b2                	lw	ra,12(sp)
20400a78:	4422                	lw	s0,8(sp)
20400a7a:	4492                	lw	s1,4(sp)
20400a7c:	4902                	lw	s2,0(sp)
20400a7e:	0141                	addi	sp,sp,16
20400a80:	8082                	ret
20400a82:	00005797          	auipc	a5,0x5
20400a86:	bde78793          	addi	a5,a5,-1058 # 20405660 <__sf_fake_stdout>
20400a8a:	00f41463          	bne	s0,a5,20400a92 <__swsetup_r+0x72>
20400a8e:	4480                	lw	s0,8(s1)
20400a90:	b7c1                	j	20400a50 <__swsetup_r+0x30>
20400a92:	00005797          	auipc	a5,0x5
20400a96:	b8e78793          	addi	a5,a5,-1138 # 20405620 <__sf_fake_stderr>
20400a9a:	faf41be3          	bne	s0,a5,20400a50 <__swsetup_r+0x30>
20400a9e:	44c0                	lw	s0,12(s1)
20400aa0:	bf45                	j	20400a50 <__swsetup_r+0x30>
20400aa2:	8b91                	andi	a5,a5,4
20400aa4:	c78d                	beqz	a5,20400ace <__swsetup_r+0xae>
20400aa6:	584c                	lw	a1,52(s0)
20400aa8:	c989                	beqz	a1,20400aba <__swsetup_r+0x9a>
20400aaa:	04440793          	addi	a5,s0,68
20400aae:	00f58463          	beq	a1,a5,20400ab6 <__swsetup_r+0x96>
20400ab2:	854a                	mv	a0,s2
20400ab4:	2bc5                	jal	204010a4 <_free_r>
20400ab6:	02042a23          	sw	zero,52(s0)
20400aba:	00c45783          	lhu	a5,12(s0)
20400abe:	00042223          	sw	zero,4(s0)
20400ac2:	fdb7f793          	andi	a5,a5,-37
20400ac6:	00f41623          	sh	a5,12(s0)
20400aca:	481c                	lw	a5,16(s0)
20400acc:	c01c                	sw	a5,0(s0)
20400ace:	00c45783          	lhu	a5,12(s0)
20400ad2:	0087e793          	ori	a5,a5,8
20400ad6:	00f41623          	sh	a5,12(s0)
20400ada:	481c                	lw	a5,16(s0)
20400adc:	ef81                	bnez	a5,20400af4 <__swsetup_r+0xd4>
20400ade:	00c45783          	lhu	a5,12(s0)
20400ae2:	20000713          	li	a4,512
20400ae6:	2807f793          	andi	a5,a5,640
20400aea:	00e78563          	beq	a5,a4,20400af4 <__swsetup_r+0xd4>
20400aee:	85a2                	mv	a1,s0
20400af0:	854a                	mv	a0,s2
20400af2:	21bd                	jal	20400f60 <__smakebuf_r>
20400af4:	00c45783          	lhu	a5,12(s0)
20400af8:	0017f713          	andi	a4,a5,1
20400afc:	c705                	beqz	a4,20400b24 <__swsetup_r+0x104>
20400afe:	485c                	lw	a5,20(s0)
20400b00:	00042423          	sw	zero,8(s0)
20400b04:	40f007b3          	neg	a5,a5
20400b08:	cc1c                	sw	a5,24(s0)
20400b0a:	481c                	lw	a5,16(s0)
20400b0c:	4501                	li	a0,0
20400b0e:	f7a5                	bnez	a5,20400a76 <__swsetup_r+0x56>
20400b10:	00c41783          	lh	a5,12(s0)
20400b14:	0807f713          	andi	a4,a5,128
20400b18:	df39                	beqz	a4,20400a76 <__swsetup_r+0x56>
20400b1a:	0407e793          	ori	a5,a5,64
20400b1e:	00f41623          	sh	a5,12(s0)
20400b22:	bf89                	j	20400a74 <__swsetup_r+0x54>
20400b24:	8b89                	andi	a5,a5,2
20400b26:	4701                	li	a4,0
20400b28:	e391                	bnez	a5,20400b2c <__swsetup_r+0x10c>
20400b2a:	4858                	lw	a4,20(s0)
20400b2c:	c418                	sw	a4,8(s0)
20400b2e:	bff1                	j	20400b0a <__swsetup_r+0xea>

20400b30 <__sflush_r>:
__sflush_r():
20400b30:	00c5d783          	lhu	a5,12(a1)
20400b34:	1101                	addi	sp,sp,-32
20400b36:	cc22                	sw	s0,24(sp)
20400b38:	ca26                	sw	s1,20(sp)
20400b3a:	ce06                	sw	ra,28(sp)
20400b3c:	c84a                	sw	s2,16(sp)
20400b3e:	c64e                	sw	s3,12(sp)
20400b40:	0087f713          	andi	a4,a5,8
20400b44:	84aa                	mv	s1,a0
20400b46:	842e                	mv	s0,a1
20400b48:	e765                	bnez	a4,20400c30 <__sflush_r+0x100>
20400b4a:	41d8                	lw	a4,4(a1)
20400b4c:	00e04763          	bgtz	a4,20400b5a <__sflush_r+0x2a>
20400b50:	41b8                	lw	a4,64(a1)
20400b52:	00e04463          	bgtz	a4,20400b5a <__sflush_r+0x2a>
20400b56:	4501                	li	a0,0
20400b58:	a0c1                	j	20400c18 <__sflush_r+0xe8>
20400b5a:	5458                	lw	a4,44(s0)
20400b5c:	df6d                	beqz	a4,20400b56 <__sflush_r+0x26>
20400b5e:	0004a903          	lw	s2,0(s1)
20400b62:	01379693          	slli	a3,a5,0x13
20400b66:	0004a023          	sw	zero,0(s1)
20400b6a:	0606de63          	bgez	a3,20400be6 <__sflush_r+0xb6>
20400b6e:	4868                	lw	a0,84(s0)
20400b70:	00c45783          	lhu	a5,12(s0)
20400b74:	8b91                	andi	a5,a5,4
20400b76:	c799                	beqz	a5,20400b84 <__sflush_r+0x54>
20400b78:	405c                	lw	a5,4(s0)
20400b7a:	8d1d                	sub	a0,a0,a5
20400b7c:	585c                	lw	a5,52(s0)
20400b7e:	c399                	beqz	a5,20400b84 <__sflush_r+0x54>
20400b80:	403c                	lw	a5,64(s0)
20400b82:	8d1d                	sub	a0,a0,a5
20400b84:	545c                	lw	a5,44(s0)
20400b86:	500c                	lw	a1,32(s0)
20400b88:	862a                	mv	a2,a0
20400b8a:	4681                	li	a3,0
20400b8c:	8526                	mv	a0,s1
20400b8e:	9782                	jalr	a5
20400b90:	57fd                	li	a5,-1
20400b92:	00c45703          	lhu	a4,12(s0)
20400b96:	00f51d63          	bne	a0,a5,20400bb0 <__sflush_r+0x80>
20400b9a:	4094                	lw	a3,0(s1)
20400b9c:	47f5                	li	a5,29
20400b9e:	08d7e463          	bltu	a5,a3,20400c26 <__sflush_r+0xf6>
20400ba2:	204007b7          	lui	a5,0x20400
20400ba6:	0785                	addi	a5,a5,1
20400ba8:	00d7d7b3          	srl	a5,a5,a3
20400bac:	8b85                	andi	a5,a5,1
20400bae:	cfa5                	beqz	a5,20400c26 <__sflush_r+0xf6>
20400bb0:	481c                	lw	a5,16(s0)
20400bb2:	00042223          	sw	zero,4(s0)
20400bb6:	c01c                	sw	a5,0(s0)
20400bb8:	01371793          	slli	a5,a4,0x13
20400bbc:	0007d863          	bgez	a5,20400bcc <__sflush_r+0x9c>
20400bc0:	57fd                	li	a5,-1
20400bc2:	00f51463          	bne	a0,a5,20400bca <__sflush_r+0x9a>
20400bc6:	409c                	lw	a5,0(s1)
20400bc8:	e391                	bnez	a5,20400bcc <__sflush_r+0x9c>
20400bca:	c868                	sw	a0,84(s0)
20400bcc:	584c                	lw	a1,52(s0)
20400bce:	0124a023          	sw	s2,0(s1)
20400bd2:	d1d1                	beqz	a1,20400b56 <__sflush_r+0x26>
20400bd4:	04440793          	addi	a5,s0,68
20400bd8:	00f58463          	beq	a1,a5,20400be0 <__sflush_r+0xb0>
20400bdc:	8526                	mv	a0,s1
20400bde:	21d9                	jal	204010a4 <_free_r>
20400be0:	02042a23          	sw	zero,52(s0)
20400be4:	bf8d                	j	20400b56 <__sflush_r+0x26>
20400be6:	500c                	lw	a1,32(s0)
20400be8:	4685                	li	a3,1
20400bea:	4601                	li	a2,0
20400bec:	8526                	mv	a0,s1
20400bee:	9702                	jalr	a4
20400bf0:	57fd                	li	a5,-1
20400bf2:	f6f51fe3          	bne	a0,a5,20400b70 <__sflush_r+0x40>
20400bf6:	409c                	lw	a5,0(s1)
20400bf8:	dfa5                	beqz	a5,20400b70 <__sflush_r+0x40>
20400bfa:	4775                	li	a4,29
20400bfc:	00e78563          	beq	a5,a4,20400c06 <__sflush_r+0xd6>
20400c00:	4759                	li	a4,22
20400c02:	00e79563          	bne	a5,a4,20400c0c <__sflush_r+0xdc>
20400c06:	0124a023          	sw	s2,0(s1)
20400c0a:	b7b1                	j	20400b56 <__sflush_r+0x26>
20400c0c:	00c45783          	lhu	a5,12(s0)
20400c10:	0407e793          	ori	a5,a5,64
20400c14:	00f41623          	sh	a5,12(s0)
20400c18:	40f2                	lw	ra,28(sp)
20400c1a:	4462                	lw	s0,24(sp)
20400c1c:	44d2                	lw	s1,20(sp)
20400c1e:	4942                	lw	s2,16(sp)
20400c20:	49b2                	lw	s3,12(sp)
20400c22:	6105                	addi	sp,sp,32
20400c24:	8082                	ret
20400c26:	04076713          	ori	a4,a4,64
20400c2a:	00e41623          	sh	a4,12(s0)
20400c2e:	b7ed                	j	20400c18 <__sflush_r+0xe8>
20400c30:	0105a983          	lw	s3,16(a1)
20400c34:	f20981e3          	beqz	s3,20400b56 <__sflush_r+0x26>
20400c38:	0005a903          	lw	s2,0(a1)
20400c3c:	8b8d                	andi	a5,a5,3
20400c3e:	0135a023          	sw	s3,0(a1)
20400c42:	41390933          	sub	s2,s2,s3
20400c46:	4701                	li	a4,0
20400c48:	e391                	bnez	a5,20400c4c <__sflush_r+0x11c>
20400c4a:	49d8                	lw	a4,20(a1)
20400c4c:	c418                	sw	a4,8(s0)
20400c4e:	f12054e3          	blez	s2,20400b56 <__sflush_r+0x26>
20400c52:	541c                	lw	a5,40(s0)
20400c54:	500c                	lw	a1,32(s0)
20400c56:	86ca                	mv	a3,s2
20400c58:	864e                	mv	a2,s3
20400c5a:	8526                	mv	a0,s1
20400c5c:	9782                	jalr	a5
20400c5e:	00a04a63          	bgtz	a0,20400c72 <__sflush_r+0x142>
20400c62:	00c45783          	lhu	a5,12(s0)
20400c66:	557d                	li	a0,-1
20400c68:	0407e793          	ori	a5,a5,64
20400c6c:	00f41623          	sh	a5,12(s0)
20400c70:	b765                	j	20400c18 <__sflush_r+0xe8>
20400c72:	99aa                	add	s3,s3,a0
20400c74:	40a90933          	sub	s2,s2,a0
20400c78:	bfd9                	j	20400c4e <__sflush_r+0x11e>

20400c7a <_fflush_r>:
_fflush_r():
20400c7a:	499c                	lw	a5,16(a1)
20400c7c:	cfb9                	beqz	a5,20400cda <_fflush_r+0x60>
20400c7e:	1101                	addi	sp,sp,-32
20400c80:	cc22                	sw	s0,24(sp)
20400c82:	ce06                	sw	ra,28(sp)
20400c84:	842a                	mv	s0,a0
20400c86:	c511                	beqz	a0,20400c92 <_fflush_r+0x18>
20400c88:	4d1c                	lw	a5,24(a0)
20400c8a:	e781                	bnez	a5,20400c92 <_fflush_r+0x18>
20400c8c:	c62e                	sw	a1,12(sp)
20400c8e:	2219                	jal	20400d94 <__sinit>
20400c90:	45b2                	lw	a1,12(sp)
20400c92:	00005797          	auipc	a5,0x5
20400c96:	9ae78793          	addi	a5,a5,-1618 # 20405640 <__sf_fake_stdin>
20400c9a:	00f59b63          	bne	a1,a5,20400cb0 <_fflush_r+0x36>
20400c9e:	404c                	lw	a1,4(s0)
20400ca0:	00c59783          	lh	a5,12(a1)
20400ca4:	c795                	beqz	a5,20400cd0 <_fflush_r+0x56>
20400ca6:	8522                	mv	a0,s0
20400ca8:	4462                	lw	s0,24(sp)
20400caa:	40f2                	lw	ra,28(sp)
20400cac:	6105                	addi	sp,sp,32
20400cae:	b549                	j	20400b30 <__sflush_r>
20400cb0:	00005797          	auipc	a5,0x5
20400cb4:	9b078793          	addi	a5,a5,-1616 # 20405660 <__sf_fake_stdout>
20400cb8:	00f59463          	bne	a1,a5,20400cc0 <_fflush_r+0x46>
20400cbc:	440c                	lw	a1,8(s0)
20400cbe:	b7cd                	j	20400ca0 <_fflush_r+0x26>
20400cc0:	00005797          	auipc	a5,0x5
20400cc4:	96078793          	addi	a5,a5,-1696 # 20405620 <__sf_fake_stderr>
20400cc8:	fcf59ce3          	bne	a1,a5,20400ca0 <_fflush_r+0x26>
20400ccc:	444c                	lw	a1,12(s0)
20400cce:	bfc9                	j	20400ca0 <_fflush_r+0x26>
20400cd0:	40f2                	lw	ra,28(sp)
20400cd2:	4462                	lw	s0,24(sp)
20400cd4:	4501                	li	a0,0
20400cd6:	6105                	addi	sp,sp,32
20400cd8:	8082                	ret
20400cda:	4501                	li	a0,0
20400cdc:	8082                	ret

20400cde <std>:
std():
20400cde:	1141                	addi	sp,sp,-16
20400ce0:	c422                	sw	s0,8(sp)
20400ce2:	c606                	sw	ra,12(sp)
20400ce4:	842a                	mv	s0,a0
20400ce6:	00b51623          	sh	a1,12(a0)
20400cea:	00c51723          	sh	a2,14(a0)
20400cee:	00052023          	sw	zero,0(a0)
20400cf2:	00052223          	sw	zero,4(a0)
20400cf6:	00052423          	sw	zero,8(a0)
20400cfa:	06052223          	sw	zero,100(a0)
20400cfe:	00052823          	sw	zero,16(a0)
20400d02:	00052a23          	sw	zero,20(a0)
20400d06:	00052c23          	sw	zero,24(a0)
20400d0a:	4621                	li	a2,8
20400d0c:	4581                	li	a1,0
20400d0e:	05c50513          	addi	a0,a0,92
20400d12:	24ed                	jal	20400ffc <memset>
20400d14:	00001797          	auipc	a5,0x1
20400d18:	84678793          	addi	a5,a5,-1978 # 2040155a <__sread>
20400d1c:	d05c                	sw	a5,36(s0)
20400d1e:	00001797          	auipc	a5,0x1
20400d22:	86c78793          	addi	a5,a5,-1940 # 2040158a <__swrite>
20400d26:	d41c                	sw	a5,40(s0)
20400d28:	00001797          	auipc	a5,0x1
20400d2c:	8b078793          	addi	a5,a5,-1872 # 204015d8 <__sseek>
20400d30:	d45c                	sw	a5,44(s0)
20400d32:	00001797          	auipc	a5,0x1
20400d36:	8dc78793          	addi	a5,a5,-1828 # 2040160e <__sclose>
20400d3a:	d000                	sw	s0,32(s0)
20400d3c:	d81c                	sw	a5,48(s0)
20400d3e:	40b2                	lw	ra,12(sp)
20400d40:	4422                	lw	s0,8(sp)
20400d42:	0141                	addi	sp,sp,16
20400d44:	8082                	ret

20400d46 <_cleanup_r>:
_cleanup_r():
20400d46:	00000597          	auipc	a1,0x0
20400d4a:	f3458593          	addi	a1,a1,-204 # 20400c7a <_fflush_r>
20400d4e:	a2b9                	j	20400e9c <_fwalk_reent>

20400d50 <__sfmoreglue>:
__sfmoreglue():
20400d50:	1141                	addi	sp,sp,-16
20400d52:	c226                	sw	s1,4(sp)
20400d54:	06800613          	li	a2,104
20400d58:	fff58493          	addi	s1,a1,-1
20400d5c:	02c484b3          	mul	s1,s1,a2
20400d60:	c04a                	sw	s2,0(sp)
20400d62:	892e                	mv	s2,a1
20400d64:	c422                	sw	s0,8(sp)
20400d66:	c606                	sw	ra,12(sp)
20400d68:	07448593          	addi	a1,s1,116
20400d6c:	26d5                	jal	20401150 <_malloc_r>
20400d6e:	842a                	mv	s0,a0
20400d70:	c919                	beqz	a0,20400d86 <__sfmoreglue+0x36>
20400d72:	00052023          	sw	zero,0(a0)
20400d76:	01252223          	sw	s2,4(a0)
20400d7a:	0531                	addi	a0,a0,12
20400d7c:	c408                	sw	a0,8(s0)
20400d7e:	06848613          	addi	a2,s1,104
20400d82:	4581                	li	a1,0
20400d84:	2ca5                	jal	20400ffc <memset>
20400d86:	8522                	mv	a0,s0
20400d88:	40b2                	lw	ra,12(sp)
20400d8a:	4422                	lw	s0,8(sp)
20400d8c:	4492                	lw	s1,4(sp)
20400d8e:	4902                	lw	s2,0(sp)
20400d90:	0141                	addi	sp,sp,16
20400d92:	8082                	ret

20400d94 <__sinit>:
__sinit():
20400d94:	4d1c                	lw	a5,24(a0)
20400d96:	e3bd                	bnez	a5,20400dfc <__sinit+0x68>
20400d98:	1141                	addi	sp,sp,-16
20400d9a:	c606                	sw	ra,12(sp)
20400d9c:	c422                	sw	s0,8(sp)
20400d9e:	00000797          	auipc	a5,0x0
20400da2:	fa878793          	addi	a5,a5,-88 # 20400d46 <_cleanup_r>
20400da6:	d51c                	sw	a5,40(a0)
20400da8:	5fc00797          	auipc	a5,0x5fc00
20400dac:	9f478793          	addi	a5,a5,-1548 # 8000079c <_global_impure_ptr>
20400db0:	439c                	lw	a5,0(a5)
20400db2:	04052423          	sw	zero,72(a0)
20400db6:	04052623          	sw	zero,76(a0)
20400dba:	04052823          	sw	zero,80(a0)
20400dbe:	00f51463          	bne	a0,a5,20400dc6 <__sinit+0x32>
20400dc2:	4785                	li	a5,1
20400dc4:	cd1c                	sw	a5,24(a0)
20400dc6:	842a                	mv	s0,a0
20400dc8:	281d                	jal	20400dfe <__sfp>
20400dca:	c048                	sw	a0,4(s0)
20400dcc:	8522                	mv	a0,s0
20400dce:	2805                	jal	20400dfe <__sfp>
20400dd0:	c408                	sw	a0,8(s0)
20400dd2:	8522                	mv	a0,s0
20400dd4:	202d                	jal	20400dfe <__sfp>
20400dd6:	c448                	sw	a0,12(s0)
20400dd8:	4048                	lw	a0,4(s0)
20400dda:	4601                	li	a2,0
20400ddc:	4591                	li	a1,4
20400dde:	3701                	jal	20400cde <std>
20400de0:	4408                	lw	a0,8(s0)
20400de2:	4605                	li	a2,1
20400de4:	45a5                	li	a1,9
20400de6:	3de5                	jal	20400cde <std>
20400de8:	4448                	lw	a0,12(s0)
20400dea:	4609                	li	a2,2
20400dec:	45c9                	li	a1,18
20400dee:	3dc5                	jal	20400cde <std>
20400df0:	4785                	li	a5,1
20400df2:	cc1c                	sw	a5,24(s0)
20400df4:	40b2                	lw	ra,12(sp)
20400df6:	4422                	lw	s0,8(sp)
20400df8:	0141                	addi	sp,sp,16
20400dfa:	8082                	ret
20400dfc:	8082                	ret

20400dfe <__sfp>:
__sfp():
20400dfe:	1141                	addi	sp,sp,-16
20400e00:	5fc00797          	auipc	a5,0x5fc00
20400e04:	99c78793          	addi	a5,a5,-1636 # 8000079c <_global_impure_ptr>
20400e08:	c226                	sw	s1,4(sp)
20400e0a:	4384                	lw	s1,0(a5)
20400e0c:	c04a                	sw	s2,0(sp)
20400e0e:	c606                	sw	ra,12(sp)
20400e10:	4c9c                	lw	a5,24(s1)
20400e12:	c422                	sw	s0,8(sp)
20400e14:	892a                	mv	s2,a0
20400e16:	e399                	bnez	a5,20400e1c <__sfp+0x1e>
20400e18:	8526                	mv	a0,s1
20400e1a:	3fad                	jal	20400d94 <__sinit>
20400e1c:	04848493          	addi	s1,s1,72
20400e20:	4480                	lw	s0,8(s1)
20400e22:	40dc                	lw	a5,4(s1)
20400e24:	17fd                	addi	a5,a5,-1
20400e26:	0007d663          	bgez	a5,20400e32 <__sfp+0x34>
20400e2a:	409c                	lw	a5,0(s1)
20400e2c:	cfb1                	beqz	a5,20400e88 <__sfp+0x8a>
20400e2e:	4084                	lw	s1,0(s1)
20400e30:	bfc5                	j	20400e20 <__sfp+0x22>
20400e32:	00c41703          	lh	a4,12(s0)
20400e36:	e731                	bnez	a4,20400e82 <__sfp+0x84>
20400e38:	77c1                	lui	a5,0xffff0
20400e3a:	0785                	addi	a5,a5,1
20400e3c:	06042223          	sw	zero,100(s0)
20400e40:	00042023          	sw	zero,0(s0)
20400e44:	00042223          	sw	zero,4(s0)
20400e48:	00042423          	sw	zero,8(s0)
20400e4c:	c45c                	sw	a5,12(s0)
20400e4e:	00042823          	sw	zero,16(s0)
20400e52:	00042a23          	sw	zero,20(s0)
20400e56:	00042c23          	sw	zero,24(s0)
20400e5a:	4621                	li	a2,8
20400e5c:	4581                	li	a1,0
20400e5e:	05c40513          	addi	a0,s0,92
20400e62:	2a69                	jal	20400ffc <memset>
20400e64:	02042a23          	sw	zero,52(s0)
20400e68:	02042c23          	sw	zero,56(s0)
20400e6c:	04042423          	sw	zero,72(s0)
20400e70:	04042623          	sw	zero,76(s0)
20400e74:	8522                	mv	a0,s0
20400e76:	40b2                	lw	ra,12(sp)
20400e78:	4422                	lw	s0,8(sp)
20400e7a:	4492                	lw	s1,4(sp)
20400e7c:	4902                	lw	s2,0(sp)
20400e7e:	0141                	addi	sp,sp,16
20400e80:	8082                	ret
20400e82:	06840413          	addi	s0,s0,104
20400e86:	bf79                	j	20400e24 <__sfp+0x26>
20400e88:	4591                	li	a1,4
20400e8a:	854a                	mv	a0,s2
20400e8c:	35d1                	jal	20400d50 <__sfmoreglue>
20400e8e:	c088                	sw	a0,0(s1)
20400e90:	842a                	mv	s0,a0
20400e92:	fd51                	bnez	a0,20400e2e <__sfp+0x30>
20400e94:	47b1                	li	a5,12
20400e96:	00f92023          	sw	a5,0(s2)
20400e9a:	bfe9                	j	20400e74 <__sfp+0x76>

20400e9c <_fwalk_reent>:
_fwalk_reent():
20400e9c:	7179                	addi	sp,sp,-48
20400e9e:	d422                	sw	s0,40(sp)
20400ea0:	d04a                	sw	s2,32(sp)
20400ea2:	cc52                	sw	s4,24(sp)
20400ea4:	ca56                	sw	s5,20(sp)
20400ea6:	c85a                	sw	s6,16(sp)
20400ea8:	c65e                	sw	s7,12(sp)
20400eaa:	d606                	sw	ra,44(sp)
20400eac:	d226                	sw	s1,36(sp)
20400eae:	ce4e                	sw	s3,28(sp)
20400eb0:	8a2a                	mv	s4,a0
20400eb2:	8aae                	mv	s5,a1
20400eb4:	04850413          	addi	s0,a0,72
20400eb8:	4901                	li	s2,0
20400eba:	4b05                	li	s6,1
20400ebc:	5bfd                	li	s7,-1
20400ebe:	ec09                	bnez	s0,20400ed8 <_fwalk_reent+0x3c>
20400ec0:	50b2                	lw	ra,44(sp)
20400ec2:	5422                	lw	s0,40(sp)
20400ec4:	854a                	mv	a0,s2
20400ec6:	5492                	lw	s1,36(sp)
20400ec8:	5902                	lw	s2,32(sp)
20400eca:	49f2                	lw	s3,28(sp)
20400ecc:	4a62                	lw	s4,24(sp)
20400ece:	4ad2                	lw	s5,20(sp)
20400ed0:	4b42                	lw	s6,16(sp)
20400ed2:	4bb2                	lw	s7,12(sp)
20400ed4:	6145                	addi	sp,sp,48
20400ed6:	8082                	ret
20400ed8:	4404                	lw	s1,8(s0)
20400eda:	00442983          	lw	s3,4(s0)
20400ede:	19fd                	addi	s3,s3,-1
20400ee0:	0009d463          	bgez	s3,20400ee8 <_fwalk_reent+0x4c>
20400ee4:	4000                	lw	s0,0(s0)
20400ee6:	bfe1                	j	20400ebe <_fwalk_reent+0x22>
20400ee8:	00c4d783          	lhu	a5,12(s1)
20400eec:	00fb7b63          	bgeu	s6,a5,20400f02 <_fwalk_reent+0x66>
20400ef0:	00e49783          	lh	a5,14(s1)
20400ef4:	01778763          	beq	a5,s7,20400f02 <_fwalk_reent+0x66>
20400ef8:	85a6                	mv	a1,s1
20400efa:	8552                	mv	a0,s4
20400efc:	9a82                	jalr	s5
20400efe:	00a96933          	or	s2,s2,a0
20400f02:	06848493          	addi	s1,s1,104
20400f06:	bfe1                	j	20400ede <_fwalk_reent+0x42>

20400f08 <__swhatbuf_r>:
__swhatbuf_r():
20400f08:	7119                	addi	sp,sp,-128
20400f0a:	daa6                	sw	s1,116(sp)
20400f0c:	84ae                	mv	s1,a1
20400f0e:	00e59583          	lh	a1,14(a1)
20400f12:	dca2                	sw	s0,120(sp)
20400f14:	de86                	sw	ra,124(sp)
20400f16:	8432                	mv	s0,a2
20400f18:	0005dc63          	bgez	a1,20400f30 <__swhatbuf_r+0x28>
20400f1c:	00c4d783          	lhu	a5,12(s1)
20400f20:	0006a023          	sw	zero,0(a3)
20400f24:	0807f793          	andi	a5,a5,128
20400f28:	e39d                	bnez	a5,20400f4e <__swhatbuf_r+0x46>
20400f2a:	40000793          	li	a5,1024
20400f2e:	a015                	j	20400f52 <__swhatbuf_r+0x4a>
20400f30:	0830                	addi	a2,sp,24
20400f32:	c636                	sw	a3,12(sp)
20400f34:	2f15                	jal	20401668 <_fstat_r>
20400f36:	46b2                	lw	a3,12(sp)
20400f38:	fe0542e3          	bltz	a0,20400f1c <__swhatbuf_r+0x14>
20400f3c:	4772                	lw	a4,28(sp)
20400f3e:	67bd                	lui	a5,0xf
20400f40:	8ff9                	and	a5,a5,a4
20400f42:	7779                	lui	a4,0xffffe
20400f44:	97ba                	add	a5,a5,a4
20400f46:	0017b793          	seqz	a5,a5
20400f4a:	c29c                	sw	a5,0(a3)
20400f4c:	bff9                	j	20400f2a <__swhatbuf_r+0x22>
20400f4e:	04000793          	li	a5,64
20400f52:	c01c                	sw	a5,0(s0)
20400f54:	50f6                	lw	ra,124(sp)
20400f56:	5466                	lw	s0,120(sp)
20400f58:	54d6                	lw	s1,116(sp)
20400f5a:	4501                	li	a0,0
20400f5c:	6109                	addi	sp,sp,128
20400f5e:	8082                	ret

20400f60 <__smakebuf_r>:
__smakebuf_r():
20400f60:	00c5d783          	lhu	a5,12(a1)
20400f64:	1101                	addi	sp,sp,-32
20400f66:	cc22                	sw	s0,24(sp)
20400f68:	ce06                	sw	ra,28(sp)
20400f6a:	ca26                	sw	s1,20(sp)
20400f6c:	c84a                	sw	s2,16(sp)
20400f6e:	8b89                	andi	a5,a5,2
20400f70:	842e                	mv	s0,a1
20400f72:	cf89                	beqz	a5,20400f8c <__smakebuf_r+0x2c>
20400f74:	04740793          	addi	a5,s0,71
20400f78:	c01c                	sw	a5,0(s0)
20400f7a:	c81c                	sw	a5,16(s0)
20400f7c:	4785                	li	a5,1
20400f7e:	c85c                	sw	a5,20(s0)
20400f80:	40f2                	lw	ra,28(sp)
20400f82:	4462                	lw	s0,24(sp)
20400f84:	44d2                	lw	s1,20(sp)
20400f86:	4942                	lw	s2,16(sp)
20400f88:	6105                	addi	sp,sp,32
20400f8a:	8082                	ret
20400f8c:	0074                	addi	a3,sp,12
20400f8e:	0030                	addi	a2,sp,8
20400f90:	84aa                	mv	s1,a0
20400f92:	3f9d                	jal	20400f08 <__swhatbuf_r>
20400f94:	45a2                	lw	a1,8(sp)
20400f96:	892a                	mv	s2,a0
20400f98:	8526                	mv	a0,s1
20400f9a:	2a5d                	jal	20401150 <_malloc_r>
20400f9c:	ed01                	bnez	a0,20400fb4 <__smakebuf_r+0x54>
20400f9e:	00c41783          	lh	a5,12(s0)
20400fa2:	2007f713          	andi	a4,a5,512
20400fa6:	ff69                	bnez	a4,20400f80 <__smakebuf_r+0x20>
20400fa8:	9bf1                	andi	a5,a5,-4
20400faa:	0027e793          	ori	a5,a5,2
20400fae:	00f41623          	sh	a5,12(s0)
20400fb2:	b7c9                	j	20400f74 <__smakebuf_r+0x14>
20400fb4:	00000797          	auipc	a5,0x0
20400fb8:	d9278793          	addi	a5,a5,-622 # 20400d46 <_cleanup_r>
20400fbc:	d49c                	sw	a5,40(s1)
20400fbe:	00c45783          	lhu	a5,12(s0)
20400fc2:	c008                	sw	a0,0(s0)
20400fc4:	c808                	sw	a0,16(s0)
20400fc6:	0807e793          	ori	a5,a5,128
20400fca:	00f41623          	sh	a5,12(s0)
20400fce:	47a2                	lw	a5,8(sp)
20400fd0:	c85c                	sw	a5,20(s0)
20400fd2:	47b2                	lw	a5,12(sp)
20400fd4:	cf89                	beqz	a5,20400fee <__smakebuf_r+0x8e>
20400fd6:	00e41583          	lh	a1,14(s0)
20400fda:	8526                	mv	a0,s1
20400fdc:	2d5d                	jal	20401692 <_isatty_r>
20400fde:	c901                	beqz	a0,20400fee <__smakebuf_r+0x8e>
20400fe0:	00c45783          	lhu	a5,12(s0)
20400fe4:	9bf1                	andi	a5,a5,-4
20400fe6:	0017e793          	ori	a5,a5,1
20400fea:	00f41623          	sh	a5,12(s0)
20400fee:	00c45783          	lhu	a5,12(s0)
20400ff2:	00f96933          	or	s2,s2,a5
20400ff6:	01241623          	sh	s2,12(s0)
20400ffa:	b759                	j	20400f80 <__smakebuf_r+0x20>

20400ffc <memset>:
memset():
20400ffc:	433d                	li	t1,15
20400ffe:	872a                	mv	a4,a0
20401000:	02c37363          	bgeu	t1,a2,20401026 <memset+0x2a>
20401004:	00f77793          	andi	a5,a4,15
20401008:	efbd                	bnez	a5,20401086 <memset+0x8a>
2040100a:	e5ad                	bnez	a1,20401074 <memset+0x78>
2040100c:	ff067693          	andi	a3,a2,-16
20401010:	8a3d                	andi	a2,a2,15
20401012:	96ba                	add	a3,a3,a4
20401014:	c30c                	sw	a1,0(a4)
20401016:	c34c                	sw	a1,4(a4)
20401018:	c70c                	sw	a1,8(a4)
2040101a:	c74c                	sw	a1,12(a4)
2040101c:	0741                	addi	a4,a4,16
2040101e:	fed76be3          	bltu	a4,a3,20401014 <memset+0x18>
20401022:	e211                	bnez	a2,20401026 <memset+0x2a>
20401024:	8082                	ret
20401026:	40c306b3          	sub	a3,t1,a2
2040102a:	068a                	slli	a3,a3,0x2
2040102c:	00000297          	auipc	t0,0x0
20401030:	9696                	add	a3,a3,t0
20401032:	00a68067          	jr	10(a3)
20401036:	00b70723          	sb	a1,14(a4) # ffffe00e <metal_segment_heap_target_end+0x7fffcb62>
2040103a:	00b706a3          	sb	a1,13(a4)
2040103e:	00b70623          	sb	a1,12(a4)
20401042:	00b705a3          	sb	a1,11(a4)
20401046:	00b70523          	sb	a1,10(a4)
2040104a:	00b704a3          	sb	a1,9(a4)
2040104e:	00b70423          	sb	a1,8(a4)
20401052:	00b703a3          	sb	a1,7(a4)
20401056:	00b70323          	sb	a1,6(a4)
2040105a:	00b702a3          	sb	a1,5(a4)
2040105e:	00b70223          	sb	a1,4(a4)
20401062:	00b701a3          	sb	a1,3(a4)
20401066:	00b70123          	sb	a1,2(a4)
2040106a:	00b700a3          	sb	a1,1(a4)
2040106e:	00b70023          	sb	a1,0(a4)
20401072:	8082                	ret
20401074:	0ff5f593          	andi	a1,a1,255
20401078:	00859693          	slli	a3,a1,0x8
2040107c:	8dd5                	or	a1,a1,a3
2040107e:	01059693          	slli	a3,a1,0x10
20401082:	8dd5                	or	a1,a1,a3
20401084:	b761                	j	2040100c <memset+0x10>
20401086:	00279693          	slli	a3,a5,0x2
2040108a:	00000297          	auipc	t0,0x0
2040108e:	9696                	add	a3,a3,t0
20401090:	8286                	mv	t0,ra
20401092:	fa8680e7          	jalr	-88(a3)
20401096:	8096                	mv	ra,t0
20401098:	17c1                	addi	a5,a5,-16
2040109a:	8f1d                	sub	a4,a4,a5
2040109c:	963e                	add	a2,a2,a5
2040109e:	f8c374e3          	bgeu	t1,a2,20401026 <memset+0x2a>
204010a2:	b7a5                	j	2040100a <memset+0xe>

204010a4 <_free_r>:
_free_r():
204010a4:	c5cd                	beqz	a1,2040114e <_free_r+0xaa>
204010a6:	ffc5a783          	lw	a5,-4(a1)
204010aa:	1141                	addi	sp,sp,-16
204010ac:	c422                	sw	s0,8(sp)
204010ae:	c606                	sw	ra,12(sp)
204010b0:	c226                	sw	s1,4(sp)
204010b2:	ffc58413          	addi	s0,a1,-4
204010b6:	0007d363          	bgez	a5,204010bc <_free_r+0x18>
204010ba:	943e                	add	s0,s0,a5
204010bc:	84aa                	mv	s1,a0
204010be:	2589                	jal	20401700 <__malloc_lock>
204010c0:	5fbff797          	auipc	a5,0x5fbff
204010c4:	70078793          	addi	a5,a5,1792 # 800007c0 <metal_segment_data_target_end>
204010c8:	439c                	lw	a5,0(a5)
204010ca:	ef89                	bnez	a5,204010e4 <_free_r+0x40>
204010cc:	00042223          	sw	zero,4(s0)
204010d0:	5fbff797          	auipc	a5,0x5fbff
204010d4:	6e87a823          	sw	s0,1776(a5) # 800007c0 <metal_segment_data_target_end>
204010d8:	4422                	lw	s0,8(sp)
204010da:	40b2                	lw	ra,12(sp)
204010dc:	8526                	mv	a0,s1
204010de:	4492                	lw	s1,4(sp)
204010e0:	0141                	addi	sp,sp,16
204010e2:	a505                	j	20401702 <__malloc_unlock>
204010e4:	00f47e63          	bgeu	s0,a5,20401100 <_free_r+0x5c>
204010e8:	4014                	lw	a3,0(s0)
204010ea:	00d40733          	add	a4,s0,a3
204010ee:	00e79663          	bne	a5,a4,204010fa <_free_r+0x56>
204010f2:	4398                	lw	a4,0(a5)
204010f4:	43dc                	lw	a5,4(a5)
204010f6:	9736                	add	a4,a4,a3
204010f8:	c018                	sw	a4,0(s0)
204010fa:	c05c                	sw	a5,4(s0)
204010fc:	bfd1                	j	204010d0 <_free_r+0x2c>
204010fe:	87ba                	mv	a5,a4
20401100:	43d8                	lw	a4,4(a5)
20401102:	c319                	beqz	a4,20401108 <_free_r+0x64>
20401104:	fee47de3          	bgeu	s0,a4,204010fe <_free_r+0x5a>
20401108:	4394                	lw	a3,0(a5)
2040110a:	00d78633          	add	a2,a5,a3
2040110e:	00861f63          	bne	a2,s0,2040112c <_free_r+0x88>
20401112:	4010                	lw	a2,0(s0)
20401114:	96b2                	add	a3,a3,a2
20401116:	c394                	sw	a3,0(a5)
20401118:	00d78633          	add	a2,a5,a3
2040111c:	fac71ee3          	bne	a4,a2,204010d8 <_free_r+0x34>
20401120:	4310                	lw	a2,0(a4)
20401122:	4358                	lw	a4,4(a4)
20401124:	96b2                	add	a3,a3,a2
20401126:	c394                	sw	a3,0(a5)
20401128:	c3d8                	sw	a4,4(a5)
2040112a:	b77d                	j	204010d8 <_free_r+0x34>
2040112c:	00c47563          	bgeu	s0,a2,20401136 <_free_r+0x92>
20401130:	47b1                	li	a5,12
20401132:	c09c                	sw	a5,0(s1)
20401134:	b755                	j	204010d8 <_free_r+0x34>
20401136:	4010                	lw	a2,0(s0)
20401138:	00c406b3          	add	a3,s0,a2
2040113c:	00d71663          	bne	a4,a3,20401148 <_free_r+0xa4>
20401140:	4314                	lw	a3,0(a4)
20401142:	4358                	lw	a4,4(a4)
20401144:	96b2                	add	a3,a3,a2
20401146:	c014                	sw	a3,0(s0)
20401148:	c058                	sw	a4,4(s0)
2040114a:	c3c0                	sw	s0,4(a5)
2040114c:	b771                	j	204010d8 <_free_r+0x34>
2040114e:	8082                	ret

20401150 <_malloc_r>:
_malloc_r():
20401150:	1101                	addi	sp,sp,-32
20401152:	ca26                	sw	s1,20(sp)
20401154:	00358493          	addi	s1,a1,3
20401158:	98f1                	andi	s1,s1,-4
2040115a:	ce06                	sw	ra,28(sp)
2040115c:	cc22                	sw	s0,24(sp)
2040115e:	c84a                	sw	s2,16(sp)
20401160:	c64e                	sw	s3,12(sp)
20401162:	04a1                	addi	s1,s1,8
20401164:	47b1                	li	a5,12
20401166:	04f4f763          	bgeu	s1,a5,204011b4 <_malloc_r+0x64>
2040116a:	44b1                	li	s1,12
2040116c:	04b4e663          	bltu	s1,a1,204011b8 <_malloc_r+0x68>
20401170:	892a                	mv	s2,a0
20401172:	2379                	jal	20401700 <__malloc_lock>
20401174:	5fbff797          	auipc	a5,0x5fbff
20401178:	64c78793          	addi	a5,a5,1612 # 800007c0 <metal_segment_data_target_end>
2040117c:	4398                	lw	a4,0(a5)
2040117e:	843a                	mv	s0,a4
20401180:	e431                	bnez	s0,204011cc <_malloc_r+0x7c>
20401182:	5fbff797          	auipc	a5,0x5fbff
20401186:	64278793          	addi	a5,a5,1602 # 800007c4 <__malloc_sbrk_start>
2040118a:	439c                	lw	a5,0(a5)
2040118c:	eb81                	bnez	a5,2040119c <_malloc_r+0x4c>
2040118e:	4581                	li	a1,0
20401190:	854a                	mv	a0,s2
20401192:	2645                	jal	20401532 <_sbrk_r>
20401194:	5fbff797          	auipc	a5,0x5fbff
20401198:	62a7a823          	sw	a0,1584(a5) # 800007c4 <__malloc_sbrk_start>
2040119c:	85a6                	mv	a1,s1
2040119e:	854a                	mv	a0,s2
204011a0:	2e49                	jal	20401532 <_sbrk_r>
204011a2:	59fd                	li	s3,-1
204011a4:	07351963          	bne	a0,s3,20401216 <_malloc_r+0xc6>
204011a8:	47b1                	li	a5,12
204011aa:	00f92023          	sw	a5,0(s2)
204011ae:	854a                	mv	a0,s2
204011b0:	2b89                	jal	20401702 <__malloc_unlock>
204011b2:	a029                	j	204011bc <_malloc_r+0x6c>
204011b4:	fa04dce3          	bgez	s1,2040116c <_malloc_r+0x1c>
204011b8:	47b1                	li	a5,12
204011ba:	c11c                	sw	a5,0(a0)
204011bc:	4501                	li	a0,0
204011be:	40f2                	lw	ra,28(sp)
204011c0:	4462                	lw	s0,24(sp)
204011c2:	44d2                	lw	s1,20(sp)
204011c4:	4942                	lw	s2,16(sp)
204011c6:	49b2                	lw	s3,12(sp)
204011c8:	6105                	addi	sp,sp,32
204011ca:	8082                	ret
204011cc:	401c                	lw	a5,0(s0)
204011ce:	8f85                	sub	a5,a5,s1
204011d0:	0407c063          	bltz	a5,20401210 <_malloc_r+0xc0>
204011d4:	46ad                	li	a3,11
204011d6:	00f6f663          	bgeu	a3,a5,204011e2 <_malloc_r+0x92>
204011da:	c01c                	sw	a5,0(s0)
204011dc:	943e                	add	s0,s0,a5
204011de:	c004                	sw	s1,0(s0)
204011e0:	a801                	j	204011f0 <_malloc_r+0xa0>
204011e2:	405c                	lw	a5,4(s0)
204011e4:	02871463          	bne	a4,s0,2040120c <_malloc_r+0xbc>
204011e8:	5fbff717          	auipc	a4,0x5fbff
204011ec:	5cf72c23          	sw	a5,1496(a4) # 800007c0 <metal_segment_data_target_end>
204011f0:	854a                	mv	a0,s2
204011f2:	2b01                	jal	20401702 <__malloc_unlock>
204011f4:	00b40513          	addi	a0,s0,11
204011f8:	00440793          	addi	a5,s0,4
204011fc:	9961                	andi	a0,a0,-8
204011fe:	40f50733          	sub	a4,a0,a5
20401202:	df55                	beqz	a4,204011be <_malloc_r+0x6e>
20401204:	943a                	add	s0,s0,a4
20401206:	8f89                	sub	a5,a5,a0
20401208:	c01c                	sw	a5,0(s0)
2040120a:	bf55                	j	204011be <_malloc_r+0x6e>
2040120c:	c35c                	sw	a5,4(a4)
2040120e:	b7cd                	j	204011f0 <_malloc_r+0xa0>
20401210:	8722                	mv	a4,s0
20401212:	4040                	lw	s0,4(s0)
20401214:	b7b5                	j	20401180 <_malloc_r+0x30>
20401216:	00350413          	addi	s0,a0,3
2040121a:	9871                	andi	s0,s0,-4
2040121c:	fc8501e3          	beq	a0,s0,204011de <_malloc_r+0x8e>
20401220:	40a405b3          	sub	a1,s0,a0
20401224:	854a                	mv	a0,s2
20401226:	2631                	jal	20401532 <_sbrk_r>
20401228:	fb351be3          	bne	a0,s3,204011de <_malloc_r+0x8e>
2040122c:	bfb5                	j	204011a8 <_malloc_r+0x58>

2040122e <__sfputc_r>:
__sfputc_r():
2040122e:	461c                	lw	a5,8(a2)
20401230:	17fd                	addi	a5,a5,-1
20401232:	c61c                	sw	a5,8(a2)
20401234:	0007da63          	bgez	a5,20401248 <__sfputc_r+0x1a>
20401238:	4e18                	lw	a4,24(a2)
2040123a:	00e7c563          	blt	a5,a4,20401244 <__sfputc_r+0x16>
2040123e:	47a9                	li	a5,10
20401240:	00f59463          	bne	a1,a5,20401248 <__sfputc_r+0x1a>
20401244:	f1cff06f          	j	20400960 <__swbuf_r>
20401248:	421c                	lw	a5,0(a2)
2040124a:	852e                	mv	a0,a1
2040124c:	00178713          	addi	a4,a5,1
20401250:	c218                	sw	a4,0(a2)
20401252:	00b78023          	sb	a1,0(a5)
20401256:	8082                	ret

20401258 <__sfputs_r>:
__sfputs_r():
20401258:	1101                	addi	sp,sp,-32
2040125a:	cc22                	sw	s0,24(sp)
2040125c:	ca26                	sw	s1,20(sp)
2040125e:	c84a                	sw	s2,16(sp)
20401260:	c64e                	sw	s3,12(sp)
20401262:	c452                	sw	s4,8(sp)
20401264:	ce06                	sw	ra,28(sp)
20401266:	892a                	mv	s2,a0
20401268:	89ae                	mv	s3,a1
2040126a:	8432                	mv	s0,a2
2040126c:	00d604b3          	add	s1,a2,a3
20401270:	5a7d                	li	s4,-1
20401272:	00941463          	bne	s0,s1,2040127a <__sfputs_r+0x22>
20401276:	4501                	li	a0,0
20401278:	a809                	j	2040128a <__sfputs_r+0x32>
2040127a:	00044583          	lbu	a1,0(s0)
2040127e:	864e                	mv	a2,s3
20401280:	854a                	mv	a0,s2
20401282:	3775                	jal	2040122e <__sfputc_r>
20401284:	0405                	addi	s0,s0,1
20401286:	ff4516e3          	bne	a0,s4,20401272 <__sfputs_r+0x1a>
2040128a:	40f2                	lw	ra,28(sp)
2040128c:	4462                	lw	s0,24(sp)
2040128e:	44d2                	lw	s1,20(sp)
20401290:	4942                	lw	s2,16(sp)
20401292:	49b2                	lw	s3,12(sp)
20401294:	4a22                	lw	s4,8(sp)
20401296:	6105                	addi	sp,sp,32
20401298:	8082                	ret

2040129a <_vfiprintf_r>:
_vfiprintf_r():
2040129a:	7135                	addi	sp,sp,-160
2040129c:	cd22                	sw	s0,152(sp)
2040129e:	cb26                	sw	s1,148(sp)
204012a0:	c94a                	sw	s2,144(sp)
204012a2:	c74e                	sw	s3,140(sp)
204012a4:	cf06                	sw	ra,156(sp)
204012a6:	c552                	sw	s4,136(sp)
204012a8:	c356                	sw	s5,132(sp)
204012aa:	c15a                	sw	s6,128(sp)
204012ac:	dede                	sw	s7,124(sp)
204012ae:	dce2                	sw	s8,120(sp)
204012b0:	dae6                	sw	s9,116(sp)
204012b2:	89aa                	mv	s3,a0
204012b4:	84ae                	mv	s1,a1
204012b6:	8932                	mv	s2,a2
204012b8:	8436                	mv	s0,a3
204012ba:	c501                	beqz	a0,204012c2 <_vfiprintf_r+0x28>
204012bc:	4d1c                	lw	a5,24(a0)
204012be:	e391                	bnez	a5,204012c2 <_vfiprintf_r+0x28>
204012c0:	3cd1                	jal	20400d94 <__sinit>
204012c2:	00004797          	auipc	a5,0x4
204012c6:	37e78793          	addi	a5,a5,894 # 20405640 <__sf_fake_stdin>
204012ca:	0cf49b63          	bne	s1,a5,204013a0 <_vfiprintf_r+0x106>
204012ce:	0049a483          	lw	s1,4(s3)
204012d2:	00c4d783          	lhu	a5,12(s1)
204012d6:	8ba1                	andi	a5,a5,8
204012d8:	c7f5                	beqz	a5,204013c4 <_vfiprintf_r+0x12a>
204012da:	489c                	lw	a5,16(s1)
204012dc:	c7e5                	beqz	a5,204013c4 <_vfiprintf_r+0x12a>
204012de:	02000793          	li	a5,32
204012e2:	02f104a3          	sb	a5,41(sp)
204012e6:	03000793          	li	a5,48
204012ea:	d202                	sw	zero,36(sp)
204012ec:	02f10523          	sb	a5,42(sp)
204012f0:	c622                	sw	s0,12(sp)
204012f2:	02500b93          	li	s7,37
204012f6:	00004a97          	auipc	s5,0x4
204012fa:	38aa8a93          	addi	s5,s5,906 # 20405680 <__sf_fake_stdout+0x20>
204012fe:	4c05                	li	s8,1
20401300:	4b29                	li	s6,10
20401302:	844a                	mv	s0,s2
20401304:	00044783          	lbu	a5,0(s0)
20401308:	c399                	beqz	a5,2040130e <_vfiprintf_r+0x74>
2040130a:	0f779063          	bne	a5,s7,204013ea <_vfiprintf_r+0x150>
2040130e:	41240cb3          	sub	s9,s0,s2
20401312:	000c8d63          	beqz	s9,2040132c <_vfiprintf_r+0x92>
20401316:	86e6                	mv	a3,s9
20401318:	864a                	mv	a2,s2
2040131a:	85a6                	mv	a1,s1
2040131c:	854e                	mv	a0,s3
2040131e:	3f2d                	jal	20401258 <__sfputs_r>
20401320:	57fd                	li	a5,-1
20401322:	1ef50663          	beq	a0,a5,2040150e <_vfiprintf_r+0x274>
20401326:	5692                	lw	a3,36(sp)
20401328:	96e6                	add	a3,a3,s9
2040132a:	d236                	sw	a3,36(sp)
2040132c:	00044783          	lbu	a5,0(s0)
20401330:	1c078f63          	beqz	a5,2040150e <_vfiprintf_r+0x274>
20401334:	57fd                	li	a5,-1
20401336:	00140913          	addi	s2,s0,1
2040133a:	c802                	sw	zero,16(sp)
2040133c:	ce02                	sw	zero,28(sp)
2040133e:	ca3e                	sw	a5,20(sp)
20401340:	cc02                	sw	zero,24(sp)
20401342:	040109a3          	sb	zero,83(sp)
20401346:	d482                	sw	zero,104(sp)
20401348:	00094583          	lbu	a1,0(s2)
2040134c:	4615                	li	a2,5
2040134e:	8556                	mv	a0,s5
20401350:	2e59                	jal	204016e6 <memchr>
20401352:	00190413          	addi	s0,s2,1
20401356:	47c2                	lw	a5,16(sp)
20401358:	e959                	bnez	a0,204013ee <_vfiprintf_r+0x154>
2040135a:	0107f713          	andi	a4,a5,16
2040135e:	c709                	beqz	a4,20401368 <_vfiprintf_r+0xce>
20401360:	02000713          	li	a4,32
20401364:	04e109a3          	sb	a4,83(sp)
20401368:	0087f713          	andi	a4,a5,8
2040136c:	c709                	beqz	a4,20401376 <_vfiprintf_r+0xdc>
2040136e:	02b00713          	li	a4,43
20401372:	04e109a3          	sb	a4,83(sp)
20401376:	00094683          	lbu	a3,0(s2)
2040137a:	02a00713          	li	a4,42
2040137e:	08e68063          	beq	a3,a4,204013fe <_vfiprintf_r+0x164>
20401382:	47f2                	lw	a5,28(sp)
20401384:	844a                	mv	s0,s2
20401386:	4681                	li	a3,0
20401388:	4625                	li	a2,9
2040138a:	00044703          	lbu	a4,0(s0)
2040138e:	00140593          	addi	a1,s0,1
20401392:	fd070713          	addi	a4,a4,-48
20401396:	0ae67963          	bgeu	a2,a4,20401448 <_vfiprintf_r+0x1ae>
2040139a:	cab5                	beqz	a3,2040140e <_vfiprintf_r+0x174>
2040139c:	ce3e                	sw	a5,28(sp)
2040139e:	a885                	j	2040140e <_vfiprintf_r+0x174>
204013a0:	00004797          	auipc	a5,0x4
204013a4:	2c078793          	addi	a5,a5,704 # 20405660 <__sf_fake_stdout>
204013a8:	00f49563          	bne	s1,a5,204013b2 <_vfiprintf_r+0x118>
204013ac:	0089a483          	lw	s1,8(s3)
204013b0:	b70d                	j	204012d2 <_vfiprintf_r+0x38>
204013b2:	00004797          	auipc	a5,0x4
204013b6:	26e78793          	addi	a5,a5,622 # 20405620 <__sf_fake_stderr>
204013ba:	f0f49ce3          	bne	s1,a5,204012d2 <_vfiprintf_r+0x38>
204013be:	00c9a483          	lw	s1,12(s3)
204013c2:	bf01                	j	204012d2 <_vfiprintf_r+0x38>
204013c4:	85a6                	mv	a1,s1
204013c6:	854e                	mv	a0,s3
204013c8:	e58ff0ef          	jal	ra,20400a20 <__swsetup_r>
204013cc:	d909                	beqz	a0,204012de <_vfiprintf_r+0x44>
204013ce:	557d                	li	a0,-1
204013d0:	40fa                	lw	ra,156(sp)
204013d2:	446a                	lw	s0,152(sp)
204013d4:	44da                	lw	s1,148(sp)
204013d6:	494a                	lw	s2,144(sp)
204013d8:	49ba                	lw	s3,140(sp)
204013da:	4a2a                	lw	s4,136(sp)
204013dc:	4a9a                	lw	s5,132(sp)
204013de:	4b0a                	lw	s6,128(sp)
204013e0:	5bf6                	lw	s7,124(sp)
204013e2:	5c66                	lw	s8,120(sp)
204013e4:	5cd6                	lw	s9,116(sp)
204013e6:	610d                	addi	sp,sp,160
204013e8:	8082                	ret
204013ea:	0405                	addi	s0,s0,1
204013ec:	bf21                	j	20401304 <_vfiprintf_r+0x6a>
204013ee:	41550533          	sub	a0,a0,s5
204013f2:	00ac1533          	sll	a0,s8,a0
204013f6:	8fc9                	or	a5,a5,a0
204013f8:	c83e                	sw	a5,16(sp)
204013fa:	8922                	mv	s2,s0
204013fc:	b7b1                	j	20401348 <_vfiprintf_r+0xae>
204013fe:	4732                	lw	a4,12(sp)
20401400:	00470693          	addi	a3,a4,4
20401404:	4318                	lw	a4,0(a4)
20401406:	c636                	sw	a3,12(sp)
20401408:	02074963          	bltz	a4,2040143a <_vfiprintf_r+0x1a0>
2040140c:	ce3a                	sw	a4,28(sp)
2040140e:	00044703          	lbu	a4,0(s0)
20401412:	02e00793          	li	a5,46
20401416:	04f71f63          	bne	a4,a5,20401474 <_vfiprintf_r+0x1da>
2040141a:	00144703          	lbu	a4,1(s0)
2040141e:	02a00793          	li	a5,42
20401422:	02f71b63          	bne	a4,a5,20401458 <_vfiprintf_r+0x1be>
20401426:	47b2                	lw	a5,12(sp)
20401428:	0409                	addi	s0,s0,2
2040142a:	00478713          	addi	a4,a5,4
2040142e:	439c                	lw	a5,0(a5)
20401430:	c63a                	sw	a4,12(sp)
20401432:	0207c163          	bltz	a5,20401454 <_vfiprintf_r+0x1ba>
20401436:	ca3e                	sw	a5,20(sp)
20401438:	a835                	j	20401474 <_vfiprintf_r+0x1da>
2040143a:	40e00733          	neg	a4,a4
2040143e:	0027e793          	ori	a5,a5,2
20401442:	ce3a                	sw	a4,28(sp)
20401444:	c83e                	sw	a5,16(sp)
20401446:	b7e1                	j	2040140e <_vfiprintf_r+0x174>
20401448:	036787b3          	mul	a5,a5,s6
2040144c:	4685                	li	a3,1
2040144e:	842e                	mv	s0,a1
20401450:	97ba                	add	a5,a5,a4
20401452:	bf25                	j	2040138a <_vfiprintf_r+0xf0>
20401454:	57fd                	li	a5,-1
20401456:	b7c5                	j	20401436 <_vfiprintf_r+0x19c>
20401458:	0405                	addi	s0,s0,1
2040145a:	ca02                	sw	zero,20(sp)
2040145c:	4681                	li	a3,0
2040145e:	4781                	li	a5,0
20401460:	4625                	li	a2,9
20401462:	00044703          	lbu	a4,0(s0)
20401466:	00140593          	addi	a1,s0,1
2040146a:	fd070713          	addi	a4,a4,-48
2040146e:	06e67663          	bgeu	a2,a4,204014da <_vfiprintf_r+0x240>
20401472:	f2f1                	bnez	a3,20401436 <_vfiprintf_r+0x19c>
20401474:	00044583          	lbu	a1,0(s0)
20401478:	460d                	li	a2,3
2040147a:	00004517          	auipc	a0,0x4
2040147e:	20e50513          	addi	a0,a0,526 # 20405688 <__sf_fake_stdout+0x28>
20401482:	2495                	jal	204016e6 <memchr>
20401484:	cd11                	beqz	a0,204014a0 <_vfiprintf_r+0x206>
20401486:	00004797          	auipc	a5,0x4
2040148a:	20278793          	addi	a5,a5,514 # 20405688 <__sf_fake_stdout+0x28>
2040148e:	8d1d                	sub	a0,a0,a5
20401490:	04000793          	li	a5,64
20401494:	00a797b3          	sll	a5,a5,a0
20401498:	4542                	lw	a0,16(sp)
2040149a:	0405                	addi	s0,s0,1
2040149c:	8d5d                	or	a0,a0,a5
2040149e:	c82a                	sw	a0,16(sp)
204014a0:	00044583          	lbu	a1,0(s0)
204014a4:	4619                	li	a2,6
204014a6:	00004517          	auipc	a0,0x4
204014aa:	1e650513          	addi	a0,a0,486 # 2040568c <__sf_fake_stdout+0x2c>
204014ae:	00140913          	addi	s2,s0,1
204014b2:	02b10423          	sb	a1,40(sp)
204014b6:	2c05                	jal	204016e6 <memchr>
204014b8:	c13d                	beqz	a0,2040151e <_vfiprintf_r+0x284>
204014ba:	dfbff797          	auipc	a5,0xdfbff
204014be:	b4678793          	addi	a5,a5,-1210 # 0 <__metal_boot_hart>
204014c2:	e795                	bnez	a5,204014ee <_vfiprintf_r+0x254>
204014c4:	4742                	lw	a4,16(sp)
204014c6:	47b2                	lw	a5,12(sp)
204014c8:	10077713          	andi	a4,a4,256
204014cc:	cf09                	beqz	a4,204014e6 <_vfiprintf_r+0x24c>
204014ce:	0791                	addi	a5,a5,4
204014d0:	c63e                	sw	a5,12(sp)
204014d2:	5792                	lw	a5,36(sp)
204014d4:	97d2                	add	a5,a5,s4
204014d6:	d23e                	sw	a5,36(sp)
204014d8:	b52d                	j	20401302 <_vfiprintf_r+0x68>
204014da:	036787b3          	mul	a5,a5,s6
204014de:	4685                	li	a3,1
204014e0:	842e                	mv	s0,a1
204014e2:	97ba                	add	a5,a5,a4
204014e4:	bfbd                	j	20401462 <_vfiprintf_r+0x1c8>
204014e6:	079d                	addi	a5,a5,7
204014e8:	9be1                	andi	a5,a5,-8
204014ea:	07a1                	addi	a5,a5,8
204014ec:	b7d5                	j	204014d0 <_vfiprintf_r+0x236>
204014ee:	0078                	addi	a4,sp,12
204014f0:	00000697          	auipc	a3,0x0
204014f4:	d6868693          	addi	a3,a3,-664 # 20401258 <__sfputs_r>
204014f8:	8626                	mv	a2,s1
204014fa:	080c                	addi	a1,sp,16
204014fc:	854e                	mv	a0,s3
204014fe:	00000097          	auipc	ra,0x0
20401502:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20401506:	57fd                	li	a5,-1
20401508:	8a2a                	mv	s4,a0
2040150a:	fcf514e3          	bne	a0,a5,204014d2 <_vfiprintf_r+0x238>
2040150e:	00c4d783          	lhu	a5,12(s1)
20401512:	0407f793          	andi	a5,a5,64
20401516:	ea079ce3          	bnez	a5,204013ce <_vfiprintf_r+0x134>
2040151a:	5512                	lw	a0,36(sp)
2040151c:	bd55                	j	204013d0 <_vfiprintf_r+0x136>
2040151e:	0078                	addi	a4,sp,12
20401520:	00000697          	auipc	a3,0x0
20401524:	d3868693          	addi	a3,a3,-712 # 20401258 <__sfputs_r>
20401528:	8626                	mv	a2,s1
2040152a:	080c                	addi	a1,sp,16
2040152c:	854e                	mv	a0,s3
2040152e:	24cd                	jal	20401810 <_printf_i>
20401530:	bfd9                	j	20401506 <_vfiprintf_r+0x26c>

20401532 <_sbrk_r>:
_sbrk_r():
20401532:	1141                	addi	sp,sp,-16
20401534:	c422                	sw	s0,8(sp)
20401536:	842a                	mv	s0,a0
20401538:	852e                	mv	a0,a1
2040153a:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
2040153e:	c606                	sw	ra,12(sp)
20401540:	2da9                	jal	20401b9a <_sbrk>
20401542:	57fd                	li	a5,-1
20401544:	00f51763          	bne	a0,a5,20401552 <_sbrk_r+0x20>
20401548:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
2040154c:	439c                	lw	a5,0(a5)
2040154e:	c391                	beqz	a5,20401552 <_sbrk_r+0x20>
20401550:	c01c                	sw	a5,0(s0)
20401552:	40b2                	lw	ra,12(sp)
20401554:	4422                	lw	s0,8(sp)
20401556:	0141                	addi	sp,sp,16
20401558:	8082                	ret

2040155a <__sread>:
__sread():
2040155a:	1141                	addi	sp,sp,-16
2040155c:	c422                	sw	s0,8(sp)
2040155e:	842e                	mv	s0,a1
20401560:	00e59583          	lh	a1,14(a1)
20401564:	c606                	sw	ra,12(sp)
20401566:	23b1                	jal	20401ab2 <_read_r>
20401568:	00054963          	bltz	a0,2040157a <__sread+0x20>
2040156c:	487c                	lw	a5,84(s0)
2040156e:	97aa                	add	a5,a5,a0
20401570:	c87c                	sw	a5,84(s0)
20401572:	40b2                	lw	ra,12(sp)
20401574:	4422                	lw	s0,8(sp)
20401576:	0141                	addi	sp,sp,16
20401578:	8082                	ret
2040157a:	00c45783          	lhu	a5,12(s0)
2040157e:	777d                	lui	a4,0xfffff
20401580:	177d                	addi	a4,a4,-1
20401582:	8ff9                	and	a5,a5,a4
20401584:	00f41623          	sh	a5,12(s0)
20401588:	b7ed                	j	20401572 <__sread+0x18>

2040158a <__swrite>:
__swrite():
2040158a:	00c5d783          	lhu	a5,12(a1)
2040158e:	1101                	addi	sp,sp,-32
20401590:	cc22                	sw	s0,24(sp)
20401592:	ca26                	sw	s1,20(sp)
20401594:	c84a                	sw	s2,16(sp)
20401596:	c64e                	sw	s3,12(sp)
20401598:	ce06                	sw	ra,28(sp)
2040159a:	1007f793          	andi	a5,a5,256
2040159e:	84aa                	mv	s1,a0
204015a0:	842e                	mv	s0,a1
204015a2:	8932                	mv	s2,a2
204015a4:	89b6                	mv	s3,a3
204015a6:	c791                	beqz	a5,204015b2 <__swrite+0x28>
204015a8:	00e59583          	lh	a1,14(a1)
204015ac:	4689                	li	a3,2
204015ae:	4601                	li	a2,0
204015b0:	2229                	jal	204016ba <_lseek_r>
204015b2:	00c45783          	lhu	a5,12(s0)
204015b6:	777d                	lui	a4,0xfffff
204015b8:	177d                	addi	a4,a4,-1
204015ba:	8ff9                	and	a5,a5,a4
204015bc:	00f41623          	sh	a5,12(s0)
204015c0:	00e41583          	lh	a1,14(s0)
204015c4:	4462                	lw	s0,24(sp)
204015c6:	40f2                	lw	ra,28(sp)
204015c8:	86ce                	mv	a3,s3
204015ca:	864a                	mv	a2,s2
204015cc:	49b2                	lw	s3,12(sp)
204015ce:	4942                	lw	s2,16(sp)
204015d0:	8526                	mv	a0,s1
204015d2:	44d2                	lw	s1,20(sp)
204015d4:	6105                	addi	sp,sp,32
204015d6:	a83d                	j	20401614 <_write_r>

204015d8 <__sseek>:
__sseek():
204015d8:	1141                	addi	sp,sp,-16
204015da:	c422                	sw	s0,8(sp)
204015dc:	842e                	mv	s0,a1
204015de:	00e59583          	lh	a1,14(a1)
204015e2:	c606                	sw	ra,12(sp)
204015e4:	28d9                	jal	204016ba <_lseek_r>
204015e6:	57fd                	li	a5,-1
204015e8:	00c45703          	lhu	a4,12(s0)
204015ec:	00f51b63          	bne	a0,a5,20401602 <__sseek+0x2a>
204015f0:	77fd                	lui	a5,0xfffff
204015f2:	17fd                	addi	a5,a5,-1
204015f4:	8ff9                	and	a5,a5,a4
204015f6:	00f41623          	sh	a5,12(s0)
204015fa:	40b2                	lw	ra,12(sp)
204015fc:	4422                	lw	s0,8(sp)
204015fe:	0141                	addi	sp,sp,16
20401600:	8082                	ret
20401602:	6785                	lui	a5,0x1
20401604:	8fd9                	or	a5,a5,a4
20401606:	00f41623          	sh	a5,12(s0)
2040160a:	c868                	sw	a0,84(s0)
2040160c:	b7fd                	j	204015fa <__sseek+0x22>

2040160e <__sclose>:
__sclose():
2040160e:	00e59583          	lh	a1,14(a1)
20401612:	a03d                	j	20401640 <_close_r>

20401614 <_write_r>:
_write_r():
20401614:	1141                	addi	sp,sp,-16
20401616:	c422                	sw	s0,8(sp)
20401618:	842a                	mv	s0,a0
2040161a:	852e                	mv	a0,a1
2040161c:	85b2                	mv	a1,a2
2040161e:	8636                	mv	a2,a3
20401620:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
20401624:	c606                	sw	ra,12(sp)
20401626:	23cd                	jal	20401c08 <_write>
20401628:	57fd                	li	a5,-1
2040162a:	00f51763          	bne	a0,a5,20401638 <_write_r+0x24>
2040162e:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
20401632:	439c                	lw	a5,0(a5)
20401634:	c391                	beqz	a5,20401638 <_write_r+0x24>
20401636:	c01c                	sw	a5,0(s0)
20401638:	40b2                	lw	ra,12(sp)
2040163a:	4422                	lw	s0,8(sp)
2040163c:	0141                	addi	sp,sp,16
2040163e:	8082                	ret

20401640 <_close_r>:
_close_r():
20401640:	1141                	addi	sp,sp,-16
20401642:	c422                	sw	s0,8(sp)
20401644:	842a                	mv	s0,a0
20401646:	852e                	mv	a0,a1
20401648:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
2040164c:	c606                	sw	ra,12(sp)
2040164e:	2941                	jal	20401ade <_close>
20401650:	57fd                	li	a5,-1
20401652:	00f51763          	bne	a0,a5,20401660 <_close_r+0x20>
20401656:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
2040165a:	439c                	lw	a5,0(a5)
2040165c:	c391                	beqz	a5,20401660 <_close_r+0x20>
2040165e:	c01c                	sw	a5,0(s0)
20401660:	40b2                	lw	ra,12(sp)
20401662:	4422                	lw	s0,8(sp)
20401664:	0141                	addi	sp,sp,16
20401666:	8082                	ret

20401668 <_fstat_r>:
_fstat_r():
20401668:	1141                	addi	sp,sp,-16
2040166a:	c422                	sw	s0,8(sp)
2040166c:	842a                	mv	s0,a0
2040166e:	852e                	mv	a0,a1
20401670:	85b2                	mv	a1,a2
20401672:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
20401676:	c606                	sw	ra,12(sp)
20401678:	2161                	jal	20401b00 <_fstat>
2040167a:	57fd                	li	a5,-1
2040167c:	00f51763          	bne	a0,a5,2040168a <_fstat_r+0x22>
20401680:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
20401684:	439c                	lw	a5,0(a5)
20401686:	c391                	beqz	a5,2040168a <_fstat_r+0x22>
20401688:	c01c                	sw	a5,0(s0)
2040168a:	40b2                	lw	ra,12(sp)
2040168c:	4422                	lw	s0,8(sp)
2040168e:	0141                	addi	sp,sp,16
20401690:	8082                	ret

20401692 <_isatty_r>:
_isatty_r():
20401692:	1141                	addi	sp,sp,-16
20401694:	c422                	sw	s0,8(sp)
20401696:	842a                	mv	s0,a0
20401698:	852e                	mv	a0,a1
2040169a:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
2040169e:	c606                	sw	ra,12(sp)
204016a0:	2159                	jal	20401b26 <_isatty>
204016a2:	57fd                	li	a5,-1
204016a4:	00f51763          	bne	a0,a5,204016b2 <_isatty_r+0x20>
204016a8:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
204016ac:	439c                	lw	a5,0(a5)
204016ae:	c391                	beqz	a5,204016b2 <_isatty_r+0x20>
204016b0:	c01c                	sw	a5,0(s0)
204016b2:	40b2                	lw	ra,12(sp)
204016b4:	4422                	lw	s0,8(sp)
204016b6:	0141                	addi	sp,sp,16
204016b8:	8082                	ret

204016ba <_lseek_r>:
_lseek_r():
204016ba:	1141                	addi	sp,sp,-16
204016bc:	c422                	sw	s0,8(sp)
204016be:	842a                	mv	s0,a0
204016c0:	852e                	mv	a0,a1
204016c2:	85b2                	mv	a1,a2
204016c4:	8636                	mv	a2,a3
204016c6:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
204016ca:	c606                	sw	ra,12(sp)
204016cc:	29ad                	jal	20401b46 <_lseek>
204016ce:	57fd                	li	a5,-1
204016d0:	00f51763          	bne	a0,a5,204016de <_lseek_r+0x24>
204016d4:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
204016d8:	439c                	lw	a5,0(a5)
204016da:	c391                	beqz	a5,204016de <_lseek_r+0x24>
204016dc:	c01c                	sw	a5,0(s0)
204016de:	40b2                	lw	ra,12(sp)
204016e0:	4422                	lw	s0,8(sp)
204016e2:	0141                	addi	sp,sp,16
204016e4:	8082                	ret

204016e6 <memchr>:
memchr():
204016e6:	0ff5f593          	andi	a1,a1,255
204016ea:	962a                	add	a2,a2,a0
204016ec:	00c51463          	bne	a0,a2,204016f4 <memchr+0xe>
204016f0:	4501                	li	a0,0
204016f2:	8082                	ret
204016f4:	00054783          	lbu	a5,0(a0)
204016f8:	feb78de3          	beq	a5,a1,204016f2 <memchr+0xc>
204016fc:	0505                	addi	a0,a0,1
204016fe:	b7fd                	j	204016ec <memchr+0x6>

20401700 <__malloc_lock>:
__malloc_lock():
20401700:	8082                	ret

20401702 <__malloc_unlock>:
__malloc_unlock():
20401702:	8082                	ret

20401704 <_printf_common>:
_printf_common():
20401704:	7179                	addi	sp,sp,-48
20401706:	ca56                	sw	s5,20(sp)
20401708:	499c                	lw	a5,16(a1)
2040170a:	8aba                	mv	s5,a4
2040170c:	4598                	lw	a4,8(a1)
2040170e:	d422                	sw	s0,40(sp)
20401710:	d226                	sw	s1,36(sp)
20401712:	ce4e                	sw	s3,28(sp)
20401714:	cc52                	sw	s4,24(sp)
20401716:	d606                	sw	ra,44(sp)
20401718:	d04a                	sw	s2,32(sp)
2040171a:	c85a                	sw	s6,16(sp)
2040171c:	c65e                	sw	s7,12(sp)
2040171e:	89aa                	mv	s3,a0
20401720:	842e                	mv	s0,a1
20401722:	84b2                	mv	s1,a2
20401724:	8a36                	mv	s4,a3
20401726:	00e7d363          	bge	a5,a4,2040172c <_printf_common+0x28>
2040172a:	87ba                	mv	a5,a4
2040172c:	c09c                	sw	a5,0(s1)
2040172e:	04344703          	lbu	a4,67(s0)
20401732:	c319                	beqz	a4,20401738 <_printf_common+0x34>
20401734:	0785                	addi	a5,a5,1
20401736:	c09c                	sw	a5,0(s1)
20401738:	401c                	lw	a5,0(s0)
2040173a:	0207f793          	andi	a5,a5,32
2040173e:	c781                	beqz	a5,20401746 <_printf_common+0x42>
20401740:	409c                	lw	a5,0(s1)
20401742:	0789                	addi	a5,a5,2
20401744:	c09c                	sw	a5,0(s1)
20401746:	00042903          	lw	s2,0(s0)
2040174a:	00697913          	andi	s2,s2,6
2040174e:	00091a63          	bnez	s2,20401762 <_printf_common+0x5e>
20401752:	01940b13          	addi	s6,s0,25
20401756:	5bfd                	li	s7,-1
20401758:	445c                	lw	a5,12(s0)
2040175a:	4098                	lw	a4,0(s1)
2040175c:	8f99                	sub	a5,a5,a4
2040175e:	04f94c63          	blt	s2,a5,204017b6 <_printf_common+0xb2>
20401762:	401c                	lw	a5,0(s0)
20401764:	04344683          	lbu	a3,67(s0)
20401768:	0207f793          	andi	a5,a5,32
2040176c:	00d036b3          	snez	a3,a3
20401770:	eba5                	bnez	a5,204017e0 <_printf_common+0xdc>
20401772:	04340613          	addi	a2,s0,67
20401776:	85d2                	mv	a1,s4
20401778:	854e                	mv	a0,s3
2040177a:	9a82                	jalr	s5
2040177c:	57fd                	li	a5,-1
2040177e:	04f50363          	beq	a0,a5,204017c4 <_printf_common+0xc0>
20401782:	401c                	lw	a5,0(s0)
20401784:	4611                	li	a2,4
20401786:	4098                	lw	a4,0(s1)
20401788:	8b99                	andi	a5,a5,6
2040178a:	4454                	lw	a3,12(s0)
2040178c:	4481                	li	s1,0
2040178e:	00c79763          	bne	a5,a2,2040179c <_printf_common+0x98>
20401792:	40e684b3          	sub	s1,a3,a4
20401796:	0004d363          	bgez	s1,2040179c <_printf_common+0x98>
2040179a:	4481                	li	s1,0
2040179c:	441c                	lw	a5,8(s0)
2040179e:	4818                	lw	a4,16(s0)
204017a0:	00f75463          	bge	a4,a5,204017a8 <_printf_common+0xa4>
204017a4:	8f99                	sub	a5,a5,a4
204017a6:	94be                	add	s1,s1,a5
204017a8:	4901                	li	s2,0
204017aa:	0469                	addi	s0,s0,26
204017ac:	5b7d                	li	s6,-1
204017ae:	05249863          	bne	s1,s2,204017fe <_printf_common+0xfa>
204017b2:	4501                	li	a0,0
204017b4:	a809                	j	204017c6 <_printf_common+0xc2>
204017b6:	4685                	li	a3,1
204017b8:	865a                	mv	a2,s6
204017ba:	85d2                	mv	a1,s4
204017bc:	854e                	mv	a0,s3
204017be:	9a82                	jalr	s5
204017c0:	01751e63          	bne	a0,s7,204017dc <_printf_common+0xd8>
204017c4:	557d                	li	a0,-1
204017c6:	50b2                	lw	ra,44(sp)
204017c8:	5422                	lw	s0,40(sp)
204017ca:	5492                	lw	s1,36(sp)
204017cc:	5902                	lw	s2,32(sp)
204017ce:	49f2                	lw	s3,28(sp)
204017d0:	4a62                	lw	s4,24(sp)
204017d2:	4ad2                	lw	s5,20(sp)
204017d4:	4b42                	lw	s6,16(sp)
204017d6:	4bb2                	lw	s7,12(sp)
204017d8:	6145                	addi	sp,sp,48
204017da:	8082                	ret
204017dc:	0905                	addi	s2,s2,1
204017de:	bfad                	j	20401758 <_printf_common+0x54>
204017e0:	00d40733          	add	a4,s0,a3
204017e4:	03000613          	li	a2,48
204017e8:	04c701a3          	sb	a2,67(a4) # fffff043 <metal_segment_heap_target_end+0x7fffdb97>
204017ec:	04544703          	lbu	a4,69(s0)
204017f0:	00168793          	addi	a5,a3,1
204017f4:	97a2                	add	a5,a5,s0
204017f6:	0689                	addi	a3,a3,2
204017f8:	04e781a3          	sb	a4,67(a5) # 1043 <__heap_size+0x843>
204017fc:	bf9d                	j	20401772 <_printf_common+0x6e>
204017fe:	4685                	li	a3,1
20401800:	8622                	mv	a2,s0
20401802:	85d2                	mv	a1,s4
20401804:	854e                	mv	a0,s3
20401806:	9a82                	jalr	s5
20401808:	fb650ee3          	beq	a0,s6,204017c4 <_printf_common+0xc0>
2040180c:	0905                	addi	s2,s2,1
2040180e:	b745                	j	204017ae <_printf_common+0xaa>

20401810 <_printf_i>:
_printf_i():
20401810:	7179                	addi	sp,sp,-48
20401812:	d422                	sw	s0,40(sp)
20401814:	d226                	sw	s1,36(sp)
20401816:	d04a                	sw	s2,32(sp)
20401818:	ce4e                	sw	s3,28(sp)
2040181a:	d606                	sw	ra,44(sp)
2040181c:	cc52                	sw	s4,24(sp)
2040181e:	ca56                	sw	s5,20(sp)
20401820:	c85a                	sw	s6,16(sp)
20401822:	89b6                	mv	s3,a3
20401824:	0185c683          	lbu	a3,24(a1)
20401828:	06e00793          	li	a5,110
2040182c:	8932                	mv	s2,a2
2040182e:	84aa                	mv	s1,a0
20401830:	842e                	mv	s0,a1
20401832:	04358613          	addi	a2,a1,67
20401836:	1ef68063          	beq	a3,a5,20401a16 <_printf_i+0x206>
2040183a:	06d7e263          	bltu	a5,a3,2040189e <_printf_i+0x8e>
2040183e:	06300793          	li	a5,99
20401842:	0af68263          	beq	a3,a5,204018e6 <_printf_i+0xd6>
20401846:	00d7ed63          	bltu	a5,a3,20401860 <_printf_i+0x50>
2040184a:	1e068a63          	beqz	a3,20401a3e <_printf_i+0x22e>
2040184e:	05800793          	li	a5,88
20401852:	16f68663          	beq	a3,a5,204019be <_printf_i+0x1ae>
20401856:	04240a93          	addi	s5,s0,66
2040185a:	04d40123          	sb	a3,66(s0)
2040185e:	a869                	j	204018f8 <_printf_i+0xe8>
20401860:	06400793          	li	a5,100
20401864:	00f68663          	beq	a3,a5,20401870 <_printf_i+0x60>
20401868:	06900793          	li	a5,105
2040186c:	fef695e3          	bne	a3,a5,20401856 <_printf_i+0x46>
20401870:	401c                	lw	a5,0(s0)
20401872:	4308                	lw	a0,0(a4)
20401874:	0807f693          	andi	a3,a5,128
20401878:	00450593          	addi	a1,a0,4
2040187c:	c2c1                	beqz	a3,204018fc <_printf_i+0xec>
2040187e:	411c                	lw	a5,0(a0)
20401880:	c30c                	sw	a1,0(a4)
20401882:	0007d863          	bgez	a5,20401892 <_printf_i+0x82>
20401886:	02d00713          	li	a4,45
2040188a:	40f007b3          	neg	a5,a5
2040188e:	04e401a3          	sb	a4,67(s0)
20401892:	00004697          	auipc	a3,0x4
20401896:	e0268693          	addi	a3,a3,-510 # 20405694 <__sf_fake_stdout+0x34>
2040189a:	4729                	li	a4,10
2040189c:	a065                	j	20401944 <_printf_i+0x134>
2040189e:	07300793          	li	a5,115
204018a2:	1af68263          	beq	a3,a5,20401a46 <_printf_i+0x236>
204018a6:	00d7ef63          	bltu	a5,a3,204018c4 <_printf_i+0xb4>
204018aa:	06f00793          	li	a5,111
204018ae:	04f68f63          	beq	a3,a5,2040190c <_printf_i+0xfc>
204018b2:	07000793          	li	a5,112
204018b6:	faf690e3          	bne	a3,a5,20401856 <_printf_i+0x46>
204018ba:	419c                	lw	a5,0(a1)
204018bc:	0207e793          	ori	a5,a5,32
204018c0:	c19c                	sw	a5,0(a1)
204018c2:	a809                	j	204018d4 <_printf_i+0xc4>
204018c4:	07500793          	li	a5,117
204018c8:	04f68263          	beq	a3,a5,2040190c <_printf_i+0xfc>
204018cc:	07800793          	li	a5,120
204018d0:	f8f693e3          	bne	a3,a5,20401856 <_printf_i+0x46>
204018d4:	07800793          	li	a5,120
204018d8:	04f402a3          	sb	a5,69(s0)
204018dc:	00004697          	auipc	a3,0x4
204018e0:	dcc68693          	addi	a3,a3,-564 # 204056a8 <__sf_fake_stdout+0x48>
204018e4:	a0dd                	j	204019ca <_printf_i+0x1ba>
204018e6:	431c                	lw	a5,0(a4)
204018e8:	04258a93          	addi	s5,a1,66
204018ec:	00478693          	addi	a3,a5,4
204018f0:	439c                	lw	a5,0(a5)
204018f2:	c314                	sw	a3,0(a4)
204018f4:	04f58123          	sb	a5,66(a1)
204018f8:	4785                	li	a5,1
204018fa:	a2ad                	j	20401a64 <_printf_i+0x254>
204018fc:	0407f693          	andi	a3,a5,64
20401900:	411c                	lw	a5,0(a0)
20401902:	c30c                	sw	a1,0(a4)
20401904:	debd                	beqz	a3,20401882 <_printf_i+0x72>
20401906:	07c2                	slli	a5,a5,0x10
20401908:	87c1                	srai	a5,a5,0x10
2040190a:	bfa5                	j	20401882 <_printf_i+0x72>
2040190c:	400c                	lw	a1,0(s0)
2040190e:	431c                	lw	a5,0(a4)
20401910:	0805f813          	andi	a6,a1,128
20401914:	00478513          	addi	a0,a5,4
20401918:	00080563          	beqz	a6,20401922 <_printf_i+0x112>
2040191c:	c308                	sw	a0,0(a4)
2040191e:	439c                	lw	a5,0(a5)
20401920:	a039                	j	2040192e <_printf_i+0x11e>
20401922:	0405f593          	andi	a1,a1,64
20401926:	c308                	sw	a0,0(a4)
20401928:	d9fd                	beqz	a1,2040191e <_printf_i+0x10e>
2040192a:	0007d783          	lhu	a5,0(a5)
2040192e:	06f00713          	li	a4,111
20401932:	0ce68a63          	beq	a3,a4,20401a06 <_printf_i+0x1f6>
20401936:	00004697          	auipc	a3,0x4
2040193a:	d5e68693          	addi	a3,a3,-674 # 20405694 <__sf_fake_stdout+0x34>
2040193e:	4729                	li	a4,10
20401940:	040401a3          	sb	zero,67(s0)
20401944:	404c                	lw	a1,4(s0)
20401946:	c40c                	sw	a1,8(s0)
20401948:	0005c563          	bltz	a1,20401952 <_printf_i+0x142>
2040194c:	4008                	lw	a0,0(s0)
2040194e:	996d                	andi	a0,a0,-5
20401950:	c008                	sw	a0,0(s0)
20401952:	e399                	bnez	a5,20401958 <_printf_i+0x148>
20401954:	8ab2                	mv	s5,a2
20401956:	cd91                	beqz	a1,20401972 <_printf_i+0x162>
20401958:	8ab2                	mv	s5,a2
2040195a:	02e7f5b3          	remu	a1,a5,a4
2040195e:	1afd                	addi	s5,s5,-1
20401960:	95b6                	add	a1,a1,a3
20401962:	0005c583          	lbu	a1,0(a1)
20401966:	00ba8023          	sb	a1,0(s5)
2040196a:	02e7d5b3          	divu	a1,a5,a4
2040196e:	0ae7f263          	bgeu	a5,a4,20401a12 <_printf_i+0x202>
20401972:	47a1                	li	a5,8
20401974:	00f71e63          	bne	a4,a5,20401990 <_printf_i+0x180>
20401978:	401c                	lw	a5,0(s0)
2040197a:	8b85                	andi	a5,a5,1
2040197c:	cb91                	beqz	a5,20401990 <_printf_i+0x180>
2040197e:	4058                	lw	a4,4(s0)
20401980:	481c                	lw	a5,16(s0)
20401982:	00e7c763          	blt	a5,a4,20401990 <_printf_i+0x180>
20401986:	03000793          	li	a5,48
2040198a:	fefa8fa3          	sb	a5,-1(s5)
2040198e:	1afd                	addi	s5,s5,-1
20401990:	41560633          	sub	a2,a2,s5
20401994:	c810                	sw	a2,16(s0)
20401996:	874e                	mv	a4,s3
20401998:	86ca                	mv	a3,s2
2040199a:	0070                	addi	a2,sp,12
2040199c:	85a2                	mv	a1,s0
2040199e:	8526                	mv	a0,s1
204019a0:	3395                	jal	20401704 <_printf_common>
204019a2:	5a7d                	li	s4,-1
204019a4:	0d451463          	bne	a0,s4,20401a6c <_printf_i+0x25c>
204019a8:	557d                	li	a0,-1
204019aa:	50b2                	lw	ra,44(sp)
204019ac:	5422                	lw	s0,40(sp)
204019ae:	5492                	lw	s1,36(sp)
204019b0:	5902                	lw	s2,32(sp)
204019b2:	49f2                	lw	s3,28(sp)
204019b4:	4a62                	lw	s4,24(sp)
204019b6:	4ad2                	lw	s5,20(sp)
204019b8:	4b42                	lw	s6,16(sp)
204019ba:	6145                	addi	sp,sp,48
204019bc:	8082                	ret
204019be:	04d582a3          	sb	a3,69(a1)
204019c2:	00004697          	auipc	a3,0x4
204019c6:	cd268693          	addi	a3,a3,-814 # 20405694 <__sf_fake_stdout+0x34>
204019ca:	400c                	lw	a1,0(s0)
204019cc:	4308                	lw	a0,0(a4)
204019ce:	0805f813          	andi	a6,a1,128
204019d2:	411c                	lw	a5,0(a0)
204019d4:	0511                	addi	a0,a0,4
204019d6:	02080063          	beqz	a6,204019f6 <_printf_i+0x1e6>
204019da:	c308                	sw	a0,0(a4)
204019dc:	0015f713          	andi	a4,a1,1
204019e0:	c701                	beqz	a4,204019e8 <_printf_i+0x1d8>
204019e2:	0205e593          	ori	a1,a1,32
204019e6:	c00c                	sw	a1,0(s0)
204019e8:	4741                	li	a4,16
204019ea:	fbb9                	bnez	a5,20401940 <_printf_i+0x130>
204019ec:	400c                	lw	a1,0(s0)
204019ee:	fdf5f593          	andi	a1,a1,-33
204019f2:	c00c                	sw	a1,0(s0)
204019f4:	b7b1                	j	20401940 <_printf_i+0x130>
204019f6:	0405f813          	andi	a6,a1,64
204019fa:	c308                	sw	a0,0(a4)
204019fc:	fe0800e3          	beqz	a6,204019dc <_printf_i+0x1cc>
20401a00:	07c2                	slli	a5,a5,0x10
20401a02:	83c1                	srli	a5,a5,0x10
20401a04:	bfe1                	j	204019dc <_printf_i+0x1cc>
20401a06:	00004697          	auipc	a3,0x4
20401a0a:	c8e68693          	addi	a3,a3,-882 # 20405694 <__sf_fake_stdout+0x34>
20401a0e:	4721                	li	a4,8
20401a10:	bf05                	j	20401940 <_printf_i+0x130>
20401a12:	87ae                	mv	a5,a1
20401a14:	b799                	j	2040195a <_printf_i+0x14a>
20401a16:	4194                	lw	a3,0(a1)
20401a18:	431c                	lw	a5,0(a4)
20401a1a:	49cc                	lw	a1,20(a1)
20401a1c:	0806f813          	andi	a6,a3,128
20401a20:	00478513          	addi	a0,a5,4
20401a24:	00080663          	beqz	a6,20401a30 <_printf_i+0x220>
20401a28:	c308                	sw	a0,0(a4)
20401a2a:	439c                	lw	a5,0(a5)
20401a2c:	c38c                	sw	a1,0(a5)
20401a2e:	a801                	j	20401a3e <_printf_i+0x22e>
20401a30:	c308                	sw	a0,0(a4)
20401a32:	0406f693          	andi	a3,a3,64
20401a36:	439c                	lw	a5,0(a5)
20401a38:	daf5                	beqz	a3,20401a2c <_printf_i+0x21c>
20401a3a:	00b79023          	sh	a1,0(a5)
20401a3e:	00042823          	sw	zero,16(s0)
20401a42:	8ab2                	mv	s5,a2
20401a44:	bf89                	j	20401996 <_printf_i+0x186>
20401a46:	431c                	lw	a5,0(a4)
20401a48:	41d0                	lw	a2,4(a1)
20401a4a:	4581                	li	a1,0
20401a4c:	00478693          	addi	a3,a5,4
20401a50:	c314                	sw	a3,0(a4)
20401a52:	0007aa83          	lw	s5,0(a5)
20401a56:	8556                	mv	a0,s5
20401a58:	3179                	jal	204016e6 <memchr>
20401a5a:	c501                	beqz	a0,20401a62 <_printf_i+0x252>
20401a5c:	41550533          	sub	a0,a0,s5
20401a60:	c048                	sw	a0,4(s0)
20401a62:	405c                	lw	a5,4(s0)
20401a64:	c81c                	sw	a5,16(s0)
20401a66:	040401a3          	sb	zero,67(s0)
20401a6a:	b735                	j	20401996 <_printf_i+0x186>
20401a6c:	4814                	lw	a3,16(s0)
20401a6e:	8656                	mv	a2,s5
20401a70:	85ca                	mv	a1,s2
20401a72:	8526                	mv	a0,s1
20401a74:	9982                	jalr	s3
20401a76:	f34509e3          	beq	a0,s4,204019a8 <_printf_i+0x198>
20401a7a:	401c                	lw	a5,0(s0)
20401a7c:	8b89                	andi	a5,a5,2
20401a7e:	e78d                	bnez	a5,20401aa8 <_printf_i+0x298>
20401a80:	47b2                	lw	a5,12(sp)
20401a82:	4448                	lw	a0,12(s0)
20401a84:	f2f553e3          	bge	a0,a5,204019aa <_printf_i+0x19a>
20401a88:	853e                	mv	a0,a5
20401a8a:	b705                	j	204019aa <_printf_i+0x19a>
20401a8c:	4685                	li	a3,1
20401a8e:	8656                	mv	a2,s5
20401a90:	85ca                	mv	a1,s2
20401a92:	8526                	mv	a0,s1
20401a94:	9982                	jalr	s3
20401a96:	f16509e3          	beq	a0,s6,204019a8 <_printf_i+0x198>
20401a9a:	0a05                	addi	s4,s4,1
20401a9c:	445c                	lw	a5,12(s0)
20401a9e:	4732                	lw	a4,12(sp)
20401aa0:	8f99                	sub	a5,a5,a4
20401aa2:	fefa45e3          	blt	s4,a5,20401a8c <_printf_i+0x27c>
20401aa6:	bfe9                	j	20401a80 <_printf_i+0x270>
20401aa8:	4a01                	li	s4,0
20401aaa:	01940a93          	addi	s5,s0,25
20401aae:	5b7d                	li	s6,-1
20401ab0:	b7f5                	j	20401a9c <_printf_i+0x28c>

20401ab2 <_read_r>:
_read_r():
20401ab2:	1141                	addi	sp,sp,-16
20401ab4:	c422                	sw	s0,8(sp)
20401ab6:	842a                	mv	s0,a0
20401ab8:	852e                	mv	a0,a1
20401aba:	85b2                	mv	a1,a2
20401abc:	8636                	mv	a2,a3
20401abe:	9001a823          	sw	zero,-1776(gp) # 800008a8 <errno>
20401ac2:	c606                	sw	ra,12(sp)
20401ac4:	2075                	jal	20401b70 <_read>
20401ac6:	57fd                	li	a5,-1
20401ac8:	00f51763          	bne	a0,a5,20401ad6 <_read_r+0x24>
20401acc:	91018793          	addi	a5,gp,-1776 # 800008a8 <errno>
20401ad0:	439c                	lw	a5,0(a5)
20401ad2:	c391                	beqz	a5,20401ad6 <_read_r+0x24>
20401ad4:	c01c                	sw	a5,0(s0)
20401ad6:	40b2                	lw	ra,12(sp)
20401ad8:	4422                	lw	s0,8(sp)
20401ada:	0141                	addi	sp,sp,16
20401adc:	8082                	ret

20401ade <_close>:
_close():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20401ade:	1101                	addi	sp,sp,-32
20401ae0:	ce06                	sw	ra,28(sp)
20401ae2:	cc22                	sw	s0,24(sp)
20401ae4:	1000                	addi	s0,sp,32
20401ae6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20401aea:	2a59                	jal	20401c80 <__errno>
20401aec:	872a                	mv	a4,a0
20401aee:	05800793          	li	a5,88
20401af2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:7
  return -1;
20401af4:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_close.c:8
}
20401af6:	853e                	mv	a0,a5
20401af8:	40f2                	lw	ra,28(sp)
20401afa:	4462                	lw	s0,24(sp)
20401afc:	6105                	addi	sp,sp,32
20401afe:	8082                	ret

20401b00 <_fstat>:
_fstat():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20401b00:	1101                	addi	sp,sp,-32
20401b02:	ce06                	sw	ra,28(sp)
20401b04:	cc22                	sw	s0,24(sp)
20401b06:	1000                	addi	s0,sp,32
20401b08:	fea42623          	sw	a0,-20(s0)
20401b0c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20401b10:	2a85                	jal	20401c80 <__errno>
20401b12:	872a                	mv	a4,a0
20401b14:	fa800793          	li	a5,-88
20401b18:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20401b1a:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:9
}
20401b1c:	853e                	mv	a0,a5
20401b1e:	40f2                	lw	ra,28(sp)
20401b20:	4462                	lw	s0,24(sp)
20401b22:	6105                	addi	sp,sp,32
20401b24:	8082                	ret

20401b26 <_isatty>:
_isatty():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20401b26:	1101                	addi	sp,sp,-32
20401b28:	ce22                	sw	s0,28(sp)
20401b2a:	1000                	addi	s0,sp,32
20401b2c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20401b30:	fec42783          	lw	a5,-20(s0)
20401b34:	17fd                	addi	a5,a5,-1
20401b36:	0017b793          	seqz	a5,a5
20401b3a:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:7
}
20401b3e:	853e                	mv	a0,a5
20401b40:	4472                	lw	s0,28(sp)
20401b42:	6105                	addi	sp,sp,32
20401b44:	8082                	ret

20401b46 <_lseek>:
_lseek():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20401b46:	1101                	addi	sp,sp,-32
20401b48:	ce06                	sw	ra,28(sp)
20401b4a:	cc22                	sw	s0,24(sp)
20401b4c:	1000                	addi	s0,sp,32
20401b4e:	fea42623          	sw	a0,-20(s0)
20401b52:	feb42423          	sw	a1,-24(s0)
20401b56:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20401b5a:	221d                	jal	20401c80 <__errno>
20401b5c:	872a                	mv	a4,a0
20401b5e:	05800793          	li	a5,88
20401b62:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20401b64:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:9
}
20401b66:	853e                	mv	a0,a5
20401b68:	40f2                	lw	ra,28(sp)
20401b6a:	4462                	lw	s0,24(sp)
20401b6c:	6105                	addi	sp,sp,32
20401b6e:	8082                	ret

20401b70 <_read>:
_read():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20401b70:	1101                	addi	sp,sp,-32
20401b72:	ce06                	sw	ra,28(sp)
20401b74:	cc22                	sw	s0,24(sp)
20401b76:	1000                	addi	s0,sp,32
20401b78:	fea42623          	sw	a0,-20(s0)
20401b7c:	feb42423          	sw	a1,-24(s0)
20401b80:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20401b84:	28f5                	jal	20401c80 <__errno>
20401b86:	872a                	mv	a4,a0
20401b88:	05800793          	li	a5,88
20401b8c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:8
  return -1;
20401b8e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_read.c:9
}
20401b90:	853e                	mv	a0,a5
20401b92:	40f2                	lw	ra,28(sp)
20401b94:	4462                	lw	s0,24(sp)
20401b96:	6105                	addi	sp,sp,32
20401b98:	8082                	ret

20401b9a <_sbrk>:
_sbrk():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20401b9a:	7179                	addi	sp,sp,-48
20401b9c:	d622                	sw	s0,44(sp)
20401b9e:	1800                	addi	s0,sp,48
20401ba0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20401ba4:	800007b7          	lui	a5,0x80000
20401ba8:	7a07a783          	lw	a5,1952(a5) # 800007a0 <metal_segment_heap_target_end+0xfffff2f4>
20401bac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20401bb0:	d1418713          	addi	a4,gp,-748 # 80000cac <_sp>
20401bb4:	51418793          	addi	a5,gp,1300 # 800014ac <metal_segment_heap_target_end>
20401bb8:	00f71463          	bne	a4,a5,20401bc0 <_sbrk+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:27
    return (void *)-1;
20401bbc:	57fd                	li	a5,-1
20401bbe:	a089                	j	20401c00 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20401bc0:	800007b7          	lui	a5,0x80000
20401bc4:	7a07a703          	lw	a4,1952(a5) # 800007a0 <metal_segment_heap_target_end+0xfffff2f4>
20401bc8:	fdc42783          	lw	a5,-36(s0)
20401bcc:	973e                	add	a4,a4,a5
20401bce:	51418793          	addi	a5,gp,1300 # 800014ac <metal_segment_heap_target_end>
20401bd2:	02f77063          	bgeu	a4,a5,20401bf2 <_sbrk+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20401bd6:	800007b7          	lui	a5,0x80000
20401bda:	7a07a703          	lw	a4,1952(a5) # 800007a0 <metal_segment_heap_target_end+0xfffff2f4>
20401bde:	fdc42783          	lw	a5,-36(s0)
20401be2:	973e                	add	a4,a4,a5
20401be4:	800007b7          	lui	a5,0x80000
20401be8:	7ae7a023          	sw	a4,1952(a5) # 800007a0 <metal_segment_heap_target_end+0xfffff2f4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:38
  } else {
    brk = &metal_segment_heap_target_end;
    return (void *)-1;
  }

  return old;
20401bec:	fec42783          	lw	a5,-20(s0)
20401bf0:	a801                	j	20401c00 <_sbrk+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
    brk = &metal_segment_heap_target_end;
20401bf2:	800007b7          	lui	a5,0x80000
20401bf6:	51418713          	addi	a4,gp,1300 # 800014ac <metal_segment_heap_target_end>
20401bfa:	7ae7a023          	sw	a4,1952(a5) # 800007a0 <metal_segment_heap_target_end+0xfffff2f4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:35
    return (void *)-1;
20401bfe:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:39
}
20401c00:	853e                	mv	a0,a5
20401c02:	5432                	lw	s0,44(sp)
20401c04:	6145                	addi	sp,sp,48
20401c06:	8082                	ret

20401c08 <_write>:
_write():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20401c08:	7179                	addi	sp,sp,-48
20401c0a:	d606                	sw	ra,44(sp)
20401c0c:	d422                	sw	s0,40(sp)
20401c0e:	1800                	addi	s0,sp,48
20401c10:	fca42e23          	sw	a0,-36(s0)
20401c14:	fcb42c23          	sw	a1,-40(s0)
20401c18:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20401c1c:	fdc42703          	lw	a4,-36(s0)
20401c20:	4785                	li	a5,1
20401c22:	00f70963          	beq	a4,a5,20401c34 <_write+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20401c26:	28a9                	jal	20401c80 <__errno>
20401c28:	872a                	mv	a4,a0
20401c2a:	05800793          	li	a5,88
20401c2e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:12
    return -1;
20401c30:	57fd                	li	a5,-1
20401c32:	a82d                	j	20401c6c <_write+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20401c34:	fd842783          	lw	a5,-40(s0)
20401c38:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20401c3c:	fe042623          	sw	zero,-20(s0)
20401c40:	a839                	j	20401c5e <_write+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20401c42:	fe842703          	lw	a4,-24(s0)
20401c46:	fec42783          	lw	a5,-20(s0)
20401c4a:	97ba                	add	a5,a5,a4
20401c4c:	0007c783          	lbu	a5,0(a5)
20401c50:	853e                	mv	a0,a5
20401c52:	2c91                	jal	20401ea6 <metal_tty_putc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20401c54:	fec42783          	lw	a5,-20(s0)
20401c58:	0785                	addi	a5,a5,1
20401c5a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20401c5e:	fec42703          	lw	a4,-20(s0)
20401c62:	fd442783          	lw	a5,-44(s0)
20401c66:	fcf76ee3          	bltu	a4,a5,20401c42 <_write+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:18
  return 0;
20401c6a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_write.c:19
}
20401c6c:	853e                	mv	a0,a5
20401c6e:	50b2                	lw	ra,44(sp)
20401c70:	5422                	lw	s0,40(sp)
20401c72:	6145                	addi	sp,sp,48
20401c74:	8082                	ret

20401c76 <atexit>:
atexit():
20401c76:	85aa                	mv	a1,a0
20401c78:	4681                	li	a3,0
20401c7a:	4601                	li	a2,0
20401c7c:	4501                	li	a0,0
20401c7e:	a8f1                	j	20401d5a <__register_exitproc>

20401c80 <__errno>:
__errno():
20401c80:	5fbff797          	auipc	a5,0x5fbff
20401c84:	b1878793          	addi	a5,a5,-1256 # 80000798 <_impure_ptr>
20401c88:	4388                	lw	a0,0(a5)
20401c8a:	8082                	ret

20401c8c <exit>:
exit():
20401c8c:	1141                	addi	sp,sp,-16
20401c8e:	c422                	sw	s0,8(sp)
20401c90:	c606                	sw	ra,12(sp)
20401c92:	00000797          	auipc	a5,0x0
20401c96:	14c78793          	addi	a5,a5,332 # 20401dde <__call_exitprocs>
20401c9a:	842a                	mv	s0,a0
20401c9c:	c399                	beqz	a5,20401ca2 <exit+0x16>
20401c9e:	4581                	li	a1,0
20401ca0:	2a3d                	jal	20401dde <__call_exitprocs>
20401ca2:	5fbff797          	auipc	a5,0x5fbff
20401ca6:	afa78793          	addi	a5,a5,-1286 # 8000079c <_global_impure_ptr>
20401caa:	4388                	lw	a0,0(a5)
20401cac:	551c                	lw	a5,40(a0)
20401cae:	c391                	beqz	a5,20401cb2 <exit+0x26>
20401cb0:	9782                	jalr	a5
20401cb2:	8522                	mv	a0,s0
20401cb4:	03b030ef          	jal	ra,204054ee <_exit>

20401cb8 <__libc_fini_array>:
__libc_fini_array():
20401cb8:	1141                	addi	sp,sp,-16
20401cba:	00004797          	auipc	a5,0x4
20401cbe:	d5a78793          	addi	a5,a5,-678 # 20405a14 <__fini_array_end>
20401cc2:	c422                	sw	s0,8(sp)
20401cc4:	00004417          	auipc	s0,0x4
20401cc8:	d5040413          	addi	s0,s0,-688 # 20405a14 <__fini_array_end>
20401ccc:	8c1d                	sub	s0,s0,a5
20401cce:	c226                	sw	s1,4(sp)
20401cd0:	c606                	sw	ra,12(sp)
20401cd2:	8409                	srai	s0,s0,0x2
20401cd4:	84be                	mv	s1,a5
20401cd6:	e411                	bnez	s0,20401ce2 <__libc_fini_array+0x2a>
20401cd8:	40b2                	lw	ra,12(sp)
20401cda:	4422                	lw	s0,8(sp)
20401cdc:	4492                	lw	s1,4(sp)
20401cde:	0141                	addi	sp,sp,16
20401ce0:	8082                	ret
20401ce2:	147d                	addi	s0,s0,-1
20401ce4:	00241793          	slli	a5,s0,0x2
20401ce8:	97a6                	add	a5,a5,s1
20401cea:	439c                	lw	a5,0(a5)
20401cec:	9782                	jalr	a5
20401cee:	b7e5                	j	20401cd6 <__libc_fini_array+0x1e>

20401cf0 <__libc_init_array>:
__libc_init_array():
20401cf0:	1141                	addi	sp,sp,-16
20401cf2:	00004797          	auipc	a5,0x4
20401cf6:	d1e78793          	addi	a5,a5,-738 # 20405a10 <__init_array_start>
20401cfa:	c422                	sw	s0,8(sp)
20401cfc:	00004417          	auipc	s0,0x4
20401d00:	d1440413          	addi	s0,s0,-748 # 20405a10 <__init_array_start>
20401d04:	8c1d                	sub	s0,s0,a5
20401d06:	c226                	sw	s1,4(sp)
20401d08:	c04a                	sw	s2,0(sp)
20401d0a:	c606                	sw	ra,12(sp)
20401d0c:	8409                	srai	s0,s0,0x2
20401d0e:	4481                	li	s1,0
20401d10:	893e                	mv	s2,a5
20401d12:	02849663          	bne	s1,s0,20401d3e <__libc_init_array+0x4e>
20401d16:	00004797          	auipc	a5,0x4
20401d1a:	cfa78793          	addi	a5,a5,-774 # 20405a10 <__init_array_start>
20401d1e:	00004417          	auipc	s0,0x4
20401d22:	cf640413          	addi	s0,s0,-778 # 20405a14 <__fini_array_end>
20401d26:	8c1d                	sub	s0,s0,a5
20401d28:	8409                	srai	s0,s0,0x2
20401d2a:	4481                	li	s1,0
20401d2c:	893e                	mv	s2,a5
20401d2e:	00849f63          	bne	s1,s0,20401d4c <__libc_init_array+0x5c>
20401d32:	40b2                	lw	ra,12(sp)
20401d34:	4422                	lw	s0,8(sp)
20401d36:	4492                	lw	s1,4(sp)
20401d38:	4902                	lw	s2,0(sp)
20401d3a:	0141                	addi	sp,sp,16
20401d3c:	8082                	ret
20401d3e:	00249793          	slli	a5,s1,0x2
20401d42:	97ca                	add	a5,a5,s2
20401d44:	439c                	lw	a5,0(a5)
20401d46:	0485                	addi	s1,s1,1
20401d48:	9782                	jalr	a5
20401d4a:	b7e1                	j	20401d12 <__libc_init_array+0x22>
20401d4c:	00249793          	slli	a5,s1,0x2
20401d50:	97ca                	add	a5,a5,s2
20401d52:	439c                	lw	a5,0(a5)
20401d54:	0485                	addi	s1,s1,1
20401d56:	9782                	jalr	a5
20401d58:	bfd9                	j	20401d2e <__libc_init_array+0x3e>

20401d5a <__register_exitproc>:
__register_exitproc():
20401d5a:	5fbff797          	auipc	a5,0x5fbff
20401d5e:	a6e78793          	addi	a5,a5,-1426 # 800007c8 <_global_atexit>
20401d62:	439c                	lw	a5,0(a5)
20401d64:	8e2a                	mv	t3,a0
20401d66:	e38d                	bnez	a5,20401d88 <__register_exitproc+0x2e>
20401d68:	88418713          	addi	a4,gp,-1916 # 8000081c <_global_atexit0>
20401d6c:	5fbff797          	auipc	a5,0x5fbff
20401d70:	a4e7ae23          	sw	a4,-1444(a5) # 800007c8 <_global_atexit>
20401d74:	dfbfe517          	auipc	a0,0xdfbfe
20401d78:	28c50513          	addi	a0,a0,652 # 0 <__metal_boot_hart>
20401d7c:	87ba                	mv	a5,a4
20401d7e:	c509                	beqz	a0,20401d88 <__register_exitproc+0x2e>
20401d80:	411c                	lw	a5,0(a0)
20401d82:	90f1a623          	sw	a5,-1780(gp) # 800008a4 <_global_atexit0+0x88>
20401d86:	87ba                	mv	a5,a4
20401d88:	43d8                	lw	a4,4(a5)
20401d8a:	487d                	li	a6,31
20401d8c:	557d                	li	a0,-1
20401d8e:	04e84763          	blt	a6,a4,20401ddc <__register_exitproc+0x82>
20401d92:	020e0e63          	beqz	t3,20401dce <__register_exitproc+0x74>
20401d96:	0887a803          	lw	a6,136(a5)
20401d9a:	04080163          	beqz	a6,20401ddc <__register_exitproc+0x82>
20401d9e:	00271893          	slli	a7,a4,0x2
20401da2:	98c2                	add	a7,a7,a6
20401da4:	00c8a023          	sw	a2,0(a7)
20401da8:	10082303          	lw	t1,256(a6)
20401dac:	4605                	li	a2,1
20401dae:	00e61633          	sll	a2,a2,a4
20401db2:	00c36333          	or	t1,t1,a2
20401db6:	10682023          	sw	t1,256(a6)
20401dba:	08d8a023          	sw	a3,128(a7)
20401dbe:	4689                	li	a3,2
20401dc0:	00de1763          	bne	t3,a3,20401dce <__register_exitproc+0x74>
20401dc4:	10482683          	lw	a3,260(a6)
20401dc8:	8e55                	or	a2,a2,a3
20401dca:	10c82223          	sw	a2,260(a6)
20401dce:	00170693          	addi	a3,a4,1
20401dd2:	070a                	slli	a4,a4,0x2
20401dd4:	c3d4                	sw	a3,4(a5)
20401dd6:	97ba                	add	a5,a5,a4
20401dd8:	c78c                	sw	a1,8(a5)
20401dda:	4501                	li	a0,0
20401ddc:	8082                	ret

20401dde <__call_exitprocs>:
__call_exitprocs():
20401dde:	7179                	addi	sp,sp,-48
20401de0:	cc52                	sw	s4,24(sp)
20401de2:	ca56                	sw	s5,20(sp)
20401de4:	c85a                	sw	s6,16(sp)
20401de6:	c65e                	sw	s7,12(sp)
20401de8:	d606                	sw	ra,44(sp)
20401dea:	d422                	sw	s0,40(sp)
20401dec:	d226                	sw	s1,36(sp)
20401dee:	d04a                	sw	s2,32(sp)
20401df0:	ce4e                	sw	s3,28(sp)
20401df2:	c462                	sw	s8,8(sp)
20401df4:	8b2a                	mv	s6,a0
20401df6:	8a2e                	mv	s4,a1
20401df8:	5fbffa97          	auipc	s5,0x5fbff
20401dfc:	9d0a8a93          	addi	s5,s5,-1584 # 800007c8 <_global_atexit>
20401e00:	4b85                	li	s7,1
20401e02:	000aa403          	lw	s0,0(s5)
20401e06:	c811                	beqz	s0,20401e1a <__call_exitprocs+0x3c>
20401e08:	4044                	lw	s1,4(s0)
20401e0a:	08842983          	lw	s3,136(s0)
20401e0e:	fff48913          	addi	s2,s1,-1
20401e12:	048a                	slli	s1,s1,0x2
20401e14:	94a2                	add	s1,s1,s0
20401e16:	00095e63          	bgez	s2,20401e32 <__call_exitprocs+0x54>
20401e1a:	50b2                	lw	ra,44(sp)
20401e1c:	5422                	lw	s0,40(sp)
20401e1e:	5492                	lw	s1,36(sp)
20401e20:	5902                	lw	s2,32(sp)
20401e22:	49f2                	lw	s3,28(sp)
20401e24:	4a62                	lw	s4,24(sp)
20401e26:	4ad2                	lw	s5,20(sp)
20401e28:	4b42                	lw	s6,16(sp)
20401e2a:	4bb2                	lw	s7,12(sp)
20401e2c:	4c22                	lw	s8,8(sp)
20401e2e:	6145                	addi	sp,sp,48
20401e30:	8082                	ret
20401e32:	000a0e63          	beqz	s4,20401e4e <__call_exitprocs+0x70>
20401e36:	00099563          	bnez	s3,20401e40 <__call_exitprocs+0x62>
20401e3a:	197d                	addi	s2,s2,-1
20401e3c:	14f1                	addi	s1,s1,-4
20401e3e:	bfe1                	j	20401e16 <__call_exitprocs+0x38>
20401e40:	00291793          	slli	a5,s2,0x2
20401e44:	97ce                	add	a5,a5,s3
20401e46:	0807a783          	lw	a5,128(a5)
20401e4a:	ff4798e3          	bne	a5,s4,20401e3a <__call_exitprocs+0x5c>
20401e4e:	4058                	lw	a4,4(s0)
20401e50:	40dc                	lw	a5,4(s1)
20401e52:	177d                	addi	a4,a4,-1
20401e54:	03271863          	bne	a4,s2,20401e84 <__call_exitprocs+0xa6>
20401e58:	01242223          	sw	s2,4(s0)
20401e5c:	dff9                	beqz	a5,20401e3a <__call_exitprocs+0x5c>
20401e5e:	00442c03          	lw	s8,4(s0)
20401e62:	00098863          	beqz	s3,20401e72 <__call_exitprocs+0x94>
20401e66:	1009a683          	lw	a3,256(s3)
20401e6a:	012b9733          	sll	a4,s7,s2
20401e6e:	8ef9                	and	a3,a3,a4
20401e70:	ee89                	bnez	a3,20401e8a <__call_exitprocs+0xac>
20401e72:	9782                	jalr	a5
20401e74:	4058                	lw	a4,4(s0)
20401e76:	000aa783          	lw	a5,0(s5)
20401e7a:	f98714e3          	bne	a4,s8,20401e02 <__call_exitprocs+0x24>
20401e7e:	faf40ee3          	beq	s0,a5,20401e3a <__call_exitprocs+0x5c>
20401e82:	b741                	j	20401e02 <__call_exitprocs+0x24>
20401e84:	0004a223          	sw	zero,4(s1)
20401e88:	bfd1                	j	20401e5c <__call_exitprocs+0x7e>
20401e8a:	00291693          	slli	a3,s2,0x2
20401e8e:	96ce                	add	a3,a3,s3
20401e90:	428c                	lw	a1,0(a3)
20401e92:	1049a683          	lw	a3,260(s3)
20401e96:	8f75                	and	a4,a4,a3
20401e98:	e701                	bnez	a4,20401ea0 <__call_exitprocs+0xc2>
20401e9a:	855a                	mv	a0,s6
20401e9c:	9782                	jalr	a5
20401e9e:	bfd9                	j	20401e74 <__call_exitprocs+0x96>
20401ea0:	852e                	mv	a0,a1
20401ea2:	9782                	jalr	a5
20401ea4:	bfc1                	j	20401e74 <__call_exitprocs+0x96>

20401ea6 <metal_tty_putc>:
metal_tty_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:12

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(int c)
{
20401ea6:	1101                	addi	sp,sp,-32
20401ea8:	ce06                	sw	ra,28(sp)
20401eaa:	cc22                	sw	s0,24(sp)
20401eac:	1000                	addi	s0,sp,32
20401eae:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:13
    if (c == '\n') {
20401eb2:	fec42703          	lw	a4,-20(s0)
20401eb6:	47a9                	li	a5,10
20401eb8:	00f71463          	bne	a4,a5,20401ec0 <metal_tty_putc+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:14
        metal_tty_putc_raw( '\r' );
20401ebc:	4535                	li	a0,13
20401ebe:	2811                	jal	20401ed2 <metal_tty_putc_raw>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:16
    }
    return metal_tty_putc_raw( c );
20401ec0:	fec42503          	lw	a0,-20(s0)
20401ec4:	2039                	jal	20401ed2 <metal_tty_putc_raw>
20401ec6:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:17
}
20401ec8:	853e                	mv	a0,a5
20401eca:	40f2                	lw	ra,28(sp)
20401ecc:	4462                	lw	s0,24(sp)
20401ece:	6105                	addi	sp,sp,32
20401ed0:	8082                	ret

20401ed2 <metal_tty_putc_raw>:
metal_tty_putc_raw():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:20

int metal_tty_putc_raw(int c)
{
20401ed2:	1101                	addi	sp,sp,-32
20401ed4:	ce06                	sw	ra,28(sp)
20401ed6:	cc22                	sw	s0,24(sp)
20401ed8:	1000                	addi	s0,sp,32
20401eda:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:21
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401ede:	fec42583          	lw	a1,-20(s0)
20401ee2:	800007b7          	lui	a5,0x80000
20401ee6:	77878513          	addi	a0,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20401eea:	28b1                	jal	20401f46 <metal_uart_putc>
20401eec:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401eee:	853e                	mv	a0,a5
20401ef0:	40f2                	lw	ra,28(sp)
20401ef2:	4462                	lw	s0,24(sp)
20401ef4:	6105                	addi	sp,sp,32
20401ef6:	8082                	ret

20401ef8 <metal_tty_init>:
metal_tty_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:40
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20401ef8:	1141                	addi	sp,sp,-16
20401efa:	c606                	sw	ra,12(sp)
20401efc:	c422                	sw	s0,8(sp)
20401efe:	0800                	addi	s0,sp,16
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:41
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20401f00:	67f1                	lui	a5,0x1c
20401f02:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
20401f06:	800007b7          	lui	a5,0x80000
20401f0a:	77878513          	addi	a0,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20401f0e:	2031                	jal	20401f1a <metal_uart_init>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/tty.c:42
}
20401f10:	0001                	nop
20401f12:	40b2                	lw	ra,12(sp)
20401f14:	4422                	lw	s0,8(sp)
20401f16:	0141                	addi	sp,sp,16
20401f18:	8082                	ret

20401f1a <metal_uart_init>:
metal_uart_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:44
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) { uart->vtable->init(uart, baud_rate); }
20401f1a:	1101                	addi	sp,sp,-32
20401f1c:	ce06                	sw	ra,28(sp)
20401f1e:	cc22                	sw	s0,24(sp)
20401f20:	1000                	addi	s0,sp,32
20401f22:	fea42623          	sw	a0,-20(s0)
20401f26:	feb42423          	sw	a1,-24(s0)
20401f2a:	fec42783          	lw	a5,-20(s0)
20401f2e:	439c                	lw	a5,0(a5)
20401f30:	439c                	lw	a5,0(a5)
20401f32:	fe842583          	lw	a1,-24(s0)
20401f36:	fec42503          	lw	a0,-20(s0)
20401f3a:	9782                	jalr	a5
20401f3c:	0001                	nop
20401f3e:	40f2                	lw	ra,28(sp)
20401f40:	4462                	lw	s0,24(sp)
20401f42:	6105                	addi	sp,sp,32
20401f44:	8082                	ret

20401f46 <metal_uart_putc>:
metal_uart_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:52
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) { return uart->vtable->putc(uart, c); }
20401f46:	1101                	addi	sp,sp,-32
20401f48:	ce06                	sw	ra,28(sp)
20401f4a:	cc22                	sw	s0,24(sp)
20401f4c:	1000                	addi	s0,sp,32
20401f4e:	fea42623          	sw	a0,-20(s0)
20401f52:	feb42423          	sw	a1,-24(s0)
20401f56:	fec42783          	lw	a5,-20(s0)
20401f5a:	439c                	lw	a5,0(a5)
20401f5c:	43dc                	lw	a5,4(a5)
20401f5e:	fe842583          	lw	a1,-24(s0)
20401f62:	fec42503          	lw	a0,-20(s0)
20401f66:	9782                	jalr	a5
20401f68:	87aa                	mv	a5,a0
20401f6a:	853e                	mv	a0,a5
20401f6c:	40f2                	lw	ra,28(sp)
20401f6e:	4462                	lw	s0,24(sp)
20401f70:	6105                	addi	sp,sp,32
20401f72:	8082                	ret

20401f74 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/uart.h:85
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20401f74:	1101                	addi	sp,sp,-32
20401f76:	ce06                	sw	ra,28(sp)
20401f78:	cc22                	sw	s0,24(sp)
20401f7a:	1000                	addi	s0,sp,32
20401f7c:	fea42623          	sw	a0,-20(s0)
20401f80:	feb42423          	sw	a1,-24(s0)
20401f84:	fec42783          	lw	a5,-20(s0)
20401f88:	439c                	lw	a5,0(a5)
20401f8a:	4bdc                	lw	a5,20(a5)
20401f8c:	fe842583          	lw	a1,-24(s0)
20401f90:	fec42503          	lw	a0,-20(s0)
20401f94:	9782                	jalr	a5
20401f96:	87aa                	mv	a5,a0
20401f98:	853e                	mv	a0,a5
20401f9a:	40f2                	lw	ra,28(sp)
20401f9c:	4462                	lw	s0,24(sp)
20401f9e:	6105                	addi	sp,sp,32
20401fa0:	8082                	ret

20401fa2 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:136
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401fa2:	1101                	addi	sp,sp,-32
20401fa4:	ce22                	sw	s0,28(sp)
20401fa6:	1000                	addi	s0,sp,32
20401fa8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:137
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401fac:	fec42703          	lw	a4,-20(s0)
20401fb0:	81018793          	addi	a5,gp,-2032 # 800007a8 <__metal_dt_clint_2000000>
20401fb4:	00f71563          	bne	a4,a5,20401fbe <__metal_driver_sifive_clint0_control_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:138
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401fb8:	020007b7          	lui	a5,0x2000
20401fbc:	a011                	j	20401fc0 <__metal_driver_sifive_clint0_control_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:141
	}
	else {
		return 0;
20401fbe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:143
	}
}
20401fc0:	853e                	mv	a0,a5
20401fc2:	4472                	lw	s0,28(sp)
20401fc4:	6105                	addi	sp,sp,32
20401fc6:	8082                	ret

20401fc8 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:156
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401fc8:	1101                	addi	sp,sp,-32
20401fca:	ce22                	sw	s0,28(sp)
20401fcc:	1000                	addi	s0,sp,32
20401fce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:157
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401fd2:	fec42703          	lw	a4,-20(s0)
20401fd6:	81018793          	addi	a5,gp,-2032 # 800007a8 <__metal_dt_clint_2000000>
20401fda:	00f71463          	bne	a4,a5,20401fe2 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:158
		return METAL_MAX_CLINT_INTERRUPTS;
20401fde:	4789                	li	a5,2
20401fe0:	a011                	j	20401fe4 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:161
	}
	else {
		return 0;
20401fe2:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:163
	}
}
20401fe4:	853e                	mv	a0,a5
20401fe6:	4472                	lw	s0,28(sp)
20401fe8:	6105                	addi	sp,sp,32
20401fea:	8082                	ret

20401fec <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:166

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401fec:	1101                	addi	sp,sp,-32
20401fee:	ce22                	sw	s0,28(sp)
20401ff0:	1000                	addi	s0,sp,32
20401ff2:	fea42623          	sw	a0,-20(s0)
20401ff6:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:167
	if (idx == 0) {
20401ffa:	fe842783          	lw	a5,-24(s0)
20401ffe:	e791                	bnez	a5,2040200a <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:168
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402000:	800007b7          	lui	a5,0x80000
20402004:	0c078793          	addi	a5,a5,192 # 800000c0 <metal_segment_heap_target_end+0xffffec14>
20402008:	a821                	j	20402020 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:170
	}
	else if (idx == 1) {
2040200a:	fe842703          	lw	a4,-24(s0)
2040200e:	4785                	li	a5,1
20402010:	00f71763          	bne	a4,a5,2040201e <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:171
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20402014:	800007b7          	lui	a5,0x80000
20402018:	0c078793          	addi	a5,a5,192 # 800000c0 <metal_segment_heap_target_end+0xffffec14>
2040201c:	a011                	j	20402020 <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:174
	}
	else {
		return NULL;
2040201e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:176
	}
}
20402020:	853e                	mv	a0,a5
20402022:	4472                	lw	s0,28(sp)
20402024:	6105                	addi	sp,sp,32
20402026:	8082                	ret

20402028 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:179

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20402028:	1101                	addi	sp,sp,-32
2040202a:	ce22                	sw	s0,28(sp)
2040202c:	1000                	addi	s0,sp,32
2040202e:	fea42623          	sw	a0,-20(s0)
20402032:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:180
	if (idx == 0) {
20402036:	fe842783          	lw	a5,-24(s0)
2040203a:	e399                	bnez	a5,20402040 <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:181
		return 3;
2040203c:	478d                	li	a5,3
2040203e:	a809                	j	20402050 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:183
	}
	else if (idx == 1) {
20402040:	fe842703          	lw	a4,-24(s0)
20402044:	4785                	li	a5,1
20402046:	00f71463          	bne	a4,a5,2040204e <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:184
		return 7;
2040204a:	479d                	li	a5,7
2040204c:	a011                	j	20402050 <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:187
	}
	else {
		return 0;
2040204e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:189
	}
}
20402050:	853e                	mv	a0,a5
20402052:	4472                	lw	s0,28(sp)
20402054:	6105                	addi	sp,sp,32
20402056:	8082                	ret

20402058 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/cpu.h>
#include <metal/drivers/riscv_clint0.h>
#include <metal/machine.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20402058:	715d                	addi	sp,sp,-80
2040205a:	c686                	sw	ra,76(sp)
2040205c:	c4a2                	sw	s0,72(sp)
2040205e:	c2ca                	sw	s2,68(sp)
20402060:	c0ce                	sw	s3,64(sp)
20402062:	de52                	sw	s4,60(sp)
20402064:	dc56                	sw	s5,56(sp)
20402066:	da5a                	sw	s6,52(sp)
20402068:	d85e                	sw	s7,48(sp)
2040206a:	d662                	sw	s8,44(sp)
2040206c:	d466                	sw	s9,40(sp)
2040206e:	0880                	addi	s0,sp,80
20402070:	faa42e23          	sw	a0,-68(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:16
    __metal_io_u32 lo, hi;
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402074:	fbc42783          	lw	a5,-68(s0)
20402078:	853e                	mv	a0,a5
2040207a:	3725                	jal	20401fa2 <__metal_driver_sifive_clint0_control_base>
2040207c:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:20 (discriminator 1)

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
20402080:	fcc42703          	lw	a4,-52(s0)
20402084:	67b1                	lui	a5,0xc
20402086:	17f1                	addi	a5,a5,-4
20402088:	97ba                	add	a5,a5,a4
2040208a:	439c                	lw	a5,0(a5)
2040208c:	fcf42423          	sw	a5,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
20402090:	fcc42703          	lw	a4,-52(s0)
20402094:	67b1                	lui	a5,0xc
20402096:	17e1                	addi	a5,a5,-8
20402098:	97ba                	add	a5,a5,a4
2040209a:	439c                	lw	a5,0(a5)
2040209c:	fcf42223          	sw	a5,-60(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:22 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4)) != hi);
204020a0:	fcc42703          	lw	a4,-52(s0)
204020a4:	67b1                	lui	a5,0xc
204020a6:	17f1                	addi	a5,a5,-4
204020a8:	97ba                	add	a5,a5,a4
204020aa:	439c                	lw	a5,0(a5)
204020ac:	fc842703          	lw	a4,-56(s0)
204020b0:	fcf718e3          	bne	a4,a5,20402080 <__metal_clint0_mtime_get+0x28>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:24

    return (((unsigned long long)hi) << 32) | lo;
204020b4:	fc842783          	lw	a5,-56(s0)
204020b8:	8c3e                	mv	s8,a5
204020ba:	4c81                	li	s9,0
204020bc:	000c1993          	slli	s3,s8,0x0
204020c0:	4901                	li	s2,0
204020c2:	fc442783          	lw	a5,-60(s0)
204020c6:	8a3e                	mv	s4,a5
204020c8:	4a81                	li	s5,0
204020ca:	01496b33          	or	s6,s2,s4
204020ce:	0159ebb3          	or	s7,s3,s5
204020d2:	87da                	mv	a5,s6
204020d4:	885e                	mv	a6,s7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25
}
204020d6:	853e                	mv	a0,a5
204020d8:	85c2                	mv	a1,a6
204020da:	40b6                	lw	ra,76(sp)
204020dc:	4426                	lw	s0,72(sp)
204020de:	4916                	lw	s2,68(sp)
204020e0:	4986                	lw	s3,64(sp)
204020e2:	5a72                	lw	s4,60(sp)
204020e4:	5ae2                	lw	s5,56(sp)
204020e6:	5b52                	lw	s6,52(sp)
204020e8:	5bc2                	lw	s7,48(sp)
204020ea:	5c32                	lw	s8,44(sp)
204020ec:	5ca2                	lw	s9,40(sp)
204020ee:	6161                	addi	sp,sp,80
204020f0:	8082                	ret

204020f2 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time)
{   
204020f2:	7179                	addi	sp,sp,-48
204020f4:	d606                	sw	ra,44(sp)
204020f6:	d422                	sw	s0,40(sp)
204020f8:	d24a                	sw	s2,36(sp)
204020fa:	d04e                	sw	s3,32(sp)
204020fc:	1800                	addi	s0,sp,48
204020fe:	fca42e23          	sw	a0,-36(s0)
20402102:	fcb42c23          	sw	a1,-40(s0)
20402106:	fcc42823          	sw	a2,-48(s0)
2040210a:	fcd42a23          	sw	a3,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:31
    struct __metal_driver_riscv_clint0 *clint =
2040210e:	fdc42783          	lw	a5,-36(s0)
20402112:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:33
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(&clint->controller);
20402116:	fec42783          	lw	a5,-20(s0)
2040211a:	853e                	mv	a0,a5
2040211c:	3559                	jal	20401fa2 <__metal_driver_sifive_clint0_control_base>
2040211e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:40
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = 0xFFFFFFFF;
20402122:	fd842783          	lw	a5,-40(s0)
20402126:	078e                	slli	a5,a5,0x3
20402128:	873e                	mv	a4,a5
2040212a:	fe842783          	lw	a5,-24(s0)
2040212e:	973e                	add	a4,a4,a5
20402130:	6791                	lui	a5,0x4
20402132:	0791                	addi	a5,a5,4
20402134:	97ba                	add	a5,a5,a4
20402136:	873e                	mv	a4,a5
20402138:	57fd                	li	a5,-1
2040213a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:41
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE)) = (__metal_io_u32)time;
2040213c:	fd842783          	lw	a5,-40(s0)
20402140:	078e                	slli	a5,a5,0x3
20402142:	873e                	mv	a4,a5
20402144:	fe842783          	lw	a5,-24(s0)
20402148:	973e                	add	a4,a4,a5
2040214a:	6791                	lui	a5,0x4
2040214c:	97ba                	add	a5,a5,a4
2040214e:	873e                	mv	a4,a5
20402150:	fd042783          	lw	a5,-48(s0)
20402154:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:42
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) + METAL_RISCV_CLINT0_MTIMECMP_BASE + 4)) = (__metal_io_u32)(time >> 32);
20402156:	fd442783          	lw	a5,-44(s0)
2040215a:	0007d913          	srli	s2,a5,0x0
2040215e:	4981                	li	s3,0
20402160:	fd842783          	lw	a5,-40(s0)
20402164:	078e                	slli	a5,a5,0x3
20402166:	873e                	mv	a4,a5
20402168:	fe842783          	lw	a5,-24(s0)
2040216c:	973e                	add	a4,a4,a5
2040216e:	6791                	lui	a5,0x4
20402170:	0791                	addi	a5,a5,4
20402172:	97ba                	add	a5,a5,a4
20402174:	874a                	mv	a4,s2
20402176:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:43
    return 0;
20402178:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:44
}
2040217a:	853e                	mv	a0,a5
2040217c:	50b2                	lw	ra,44(sp)
2040217e:	5422                	lw	s0,40(sp)
20402180:	5912                	lw	s2,36(sp)
20402182:	5982                	lw	s3,32(sp)
20402184:	6145                	addi	sp,sp,48
20402186:	8082                	ret

20402188 <_get_cpu_intc>:
_get_cpu_intc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47

static struct metal_interrupt *_get_cpu_intc()
{
20402188:	1101                	addi	sp,sp,-32
2040218a:	ce06                	sw	ra,28(sp)
2040218c:	cc22                	sw	s0,24(sp)
2040218e:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    int hartid = 0;
20402190:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
    __asm__ volatile("csrr %[hartid], mhartid"
20402194:	f14027f3          	csrr	a5,mhartid
20402198:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:52
                     : [hartid] "=r" (hartid) :: "memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
2040219c:	fec42783          	lw	a5,-20(s0)
204021a0:	853e                	mv	a0,a5
204021a2:	1c4030ef          	jal	ra,20405366 <metal_cpu_get>
204021a6:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54

    return metal_cpu_interrupt_controller(cpu);
204021aa:	fe842503          	lw	a0,-24(s0)
204021ae:	192030ef          	jal	ra,20405340 <metal_cpu_interrupt_controller>
204021b2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
204021b4:	853e                	mv	a0,a5
204021b6:	40f2                	lw	ra,28(sp)
204021b8:	4462                	lw	s0,24(sp)
204021ba:	6105                	addi	sp,sp,32
204021bc:	8082                	ret

204021be <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
204021be:	7139                	addi	sp,sp,-64
204021c0:	de06                	sw	ra,60(sp)
204021c2:	dc22                	sw	s0,56(sp)
204021c4:	0080                	addi	s0,sp,64
204021c6:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204021ca:	fcc42503          	lw	a0,-52(s0)
204021ce:	3bed                	jal	20401fc8 <__metal_driver_sifive_clint0_num_interrupts>
204021d0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:60
    struct __metal_driver_riscv_clint0 *clint =
204021d4:	fcc42783          	lw	a5,-52(s0)
204021d8:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:63
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
204021dc:	fe442783          	lw	a5,-28(s0)
204021e0:	43dc                	lw	a5,4(a5)
204021e2:	efa9                	bnez	a5,2040223c <__metal_driver_riscv_clint0_init+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
204021e4:	fe042623          	sw	zero,-20(s0)
204021e8:	a081                	j	20402228 <__metal_driver_riscv_clint0_init+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:66 (discriminator 3)
	  struct metal_interrupt *intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204021ea:	fec42583          	lw	a1,-20(s0)
204021ee:	fcc42503          	lw	a0,-52(s0)
204021f2:	3bed                	jal	20401fec <__metal_driver_sifive_clint0_interrupt_parents>
204021f4:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67 (discriminator 3)
	  int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204021f8:	fec42583          	lw	a1,-20(s0)
204021fc:	fcc42503          	lw	a0,-52(s0)
20402200:	3525                	jal	20402028 <__metal_driver_sifive_clint0_interrupt_lines>
20402202:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:68 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402206:	fe042783          	lw	a5,-32(s0)
2040220a:	439c                	lw	a5,0(a5)
2040220c:	4fdc                	lw	a5,28(a5)
2040220e:	fcc42683          	lw	a3,-52(s0)
20402212:	4601                	li	a2,0
20402214:	fdc42583          	lw	a1,-36(s0)
20402218:	fe042503          	lw	a0,-32(s0)
2040221c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
2040221e:	fec42783          	lw	a5,-20(s0)
20402222:	0785                	addi	a5,a5,1
20402224:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65 (discriminator 1)
20402228:	fec42703          	lw	a4,-20(s0)
2040222c:	fe842783          	lw	a5,-24(s0)
20402230:	faf74de3          	blt	a4,a5,204021ea <__metal_driver_riscv_clint0_init+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
	}
	clint->init_done = 1;
20402234:	fe442783          	lw	a5,-28(s0)
20402238:	4705                	li	a4,1
2040223a:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:72
    }	
}
2040223c:	0001                	nop
2040223e:	50f2                	lw	ra,60(sp)
20402240:	5462                	lw	s0,56(sp)
20402242:	6121                	addi	sp,sp,64
20402244:	8082                	ret

20402246 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:77

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
20402246:	7139                	addi	sp,sp,-64
20402248:	de06                	sw	ra,60(sp)
2040224a:	dc22                	sw	s0,56(sp)
2040224c:	0080                	addi	s0,sp,64
2040224e:	fca42623          	sw	a0,-52(s0)
20402252:	fcb42423          	sw	a1,-56(s0)
20402256:	fcc42223          	sw	a2,-60(s0)
2040225a:	fcd42023          	sw	a3,-64(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78
    int rc = -1;
2040225e:	57fd                	li	a5,-1
20402260:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:79
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20402264:	332010ef          	jal	ra,20403596 <__metal_controller_interrupt_vector_mode>
20402268:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80
    struct metal_interrupt *intc = NULL;
2040226c:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402270:	3f21                	jal	20402188 <_get_cpu_intc>
20402272:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:82
    int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402276:	fcc42503          	lw	a0,-52(s0)
2040227a:	33b9                	jal	20401fc8 <__metal_driver_sifive_clint0_num_interrupts>
2040227c:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84

    if ( (mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE) ) {
20402280:	fe042703          	lw	a4,-32(s0)
20402284:	4785                	li	a5,1
20402286:	00f70863          	beq	a4,a5,20402296 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:84 (discriminator 1)
2040228a:	fe042783          	lw	a5,-32(s0)
2040228e:	c781                	beqz	a5,20402296 <__metal_driver_riscv_clint0_register+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
        return rc;
20402290:	fec42783          	lw	a5,-20(s0)
20402294:	a049                	j	20402316 <__metal_driver_riscv_clint0_register+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88
    }

    for(int i = 0; i < num_interrupts; i++) {
20402296:	fe042223          	sw	zero,-28(s0)
2040229a:	a091                	j	204022de <__metal_driver_riscv_clint0_register+0x98>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89
	int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040229c:	fe442583          	lw	a1,-28(s0)
204022a0:	fcc42503          	lw	a0,-52(s0)
204022a4:	3351                	jal	20402028 <__metal_driver_sifive_clint0_interrupt_lines>
204022a6:	fca42a23          	sw	a0,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204022aa:	fe442583          	lw	a1,-28(s0)
204022ae:	fcc42503          	lw	a0,-52(s0)
204022b2:	3b2d                	jal	20401fec <__metal_driver_sifive_clint0_interrupt_parents>
204022b4:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
        if (cpu_intc == intc && id == line) {
204022b8:	fdc42703          	lw	a4,-36(s0)
204022bc:	fe842783          	lw	a5,-24(s0)
204022c0:	00f71863          	bne	a4,a5,204022d0 <__metal_driver_riscv_clint0_register+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91 (discriminator 1)
204022c4:	fc842703          	lw	a4,-56(s0)
204022c8:	fd442783          	lw	a5,-44(s0)
204022cc:	02f70063          	beq	a4,a5,204022ec <__metal_driver_riscv_clint0_register+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:94 (discriminator 2)
            break;
        }
	intc = NULL;
204022d0:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 2)
    for(int i = 0; i < num_interrupts; i++) {
204022d4:	fe442783          	lw	a5,-28(s0)
204022d8:	0785                	addi	a5,a5,1
204022da:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:88 (discriminator 1)
204022de:	fe442703          	lw	a4,-28(s0)
204022e2:	fd842783          	lw	a5,-40(s0)
204022e6:	faf74be3          	blt	a4,a5,2040229c <__metal_driver_riscv_clint0_register+0x56>
204022ea:	a011                	j	204022ee <__metal_driver_riscv_clint0_register+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
            break;
204022ec:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
    }

    /* Register its interrupts with parent controller */
    if (intc) {
204022ee:	fe842783          	lw	a5,-24(s0)
204022f2:	c385                	beqz	a5,20402312 <__metal_driver_riscv_clint0_register+0xcc>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:99
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
204022f4:	fe842783          	lw	a5,-24(s0)
204022f8:	439c                	lw	a5,0(a5)
204022fa:	4fdc                	lw	a5,28(a5)
204022fc:	fc042683          	lw	a3,-64(s0)
20402300:	fc442603          	lw	a2,-60(s0)
20402304:	fc842583          	lw	a1,-56(s0)
20402308:	fe842503          	lw	a0,-24(s0)
2040230c:	9782                	jalr	a5
2040230e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }
    return rc;
20402312:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
}
20402316:	853e                	mv	a0,a5
20402318:	50f2                	lw	ra,60(sp)
2040231a:	5462                	lw	s0,56(sp)
2040231c:	6121                	addi	sp,sp,64
2040231e:	8082                	ret

20402320 <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107

int __metal_driver_riscv_clint0_vector_register (struct metal_interrupt *controller,
                                                 int id, metal_interrupt_vector_handler_t isr,
                                                 void *priv)
{   
20402320:	7179                	addi	sp,sp,-48
20402322:	d622                	sw	s0,44(sp)
20402324:	1800                	addi	s0,sp,48
20402326:	fca42e23          	sw	a0,-36(s0)
2040232a:	fcb42c23          	sw	a1,-40(s0)
2040232e:	fcc42a23          	sw	a2,-44(s0)
20402332:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:109
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
20402336:	57fd                	li	a5,-1
20402338:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:110
    return rc;
2040233c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
}
20402340:	853e                	mv	a0,a5
20402342:	5432                	lw	s0,44(sp)
20402344:	6145                	addi	sp,sp,48
20402346:	8082                	ret

20402348 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode (struct metal_interrupt *controller)
{
20402348:	1101                	addi	sp,sp,-32
2040234a:	ce06                	sw	ra,28(sp)
2040234c:	cc22                	sw	s0,24(sp)
2040234e:	1000                	addi	s0,sp,32
20402350:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
    return __metal_controller_interrupt_vector_mode();
20402354:	242010ef          	jal	ra,20403596 <__metal_controller_interrupt_vector_mode>
20402358:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:116
}
2040235a:	853e                	mv	a0,a5
2040235c:	40f2                	lw	ra,28(sp)
2040235e:	4462                	lw	s0,24(sp)
20402360:	6105                	addi	sp,sp,32
20402362:	8082                	ret

20402364 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_set_vector_mode (struct metal_interrupt *controller, metal_vector_mode mode)
{
20402364:	7179                	addi	sp,sp,-48
20402366:	d606                	sw	ra,44(sp)
20402368:	d422                	sw	s0,40(sp)
2040236a:	1800                	addi	s0,sp,48
2040236c:	fca42e23          	sw	a0,-36(s0)
20402370:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:120
    int rc = -1;
20402374:	57fd                	li	a5,-1
20402376:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    struct metal_interrupt *intc = _get_cpu_intc();
2040237a:	3539                	jal	20402188 <_get_cpu_intc>
2040237c:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123

    if (intc) {
20402380:	fe842783          	lw	a5,-24(s0)
20402384:	c395                	beqz	a5,204023a8 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:125
	/* Valid vector modes are VECTOR and DIRECT, anything else is invalid (-1) */
        switch (mode) {
20402386:	fd842703          	lw	a4,-40(s0)
2040238a:	4785                	li	a5,1
2040238c:	00e7ef63          	bltu	a5,a4,204023aa <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20402390:	fe842783          	lw	a5,-24(s0)
20402394:	439c                	lw	a5,0(a5)
20402396:	43dc                	lw	a5,4(a5)
20402398:	fd842583          	lw	a1,-40(s0)
2040239c:	fe842503          	lw	a0,-24(s0)
204023a0:	9782                	jalr	a5
204023a2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:129
            break;
204023a6:	a011                	j	204023aa <__metal_driver_riscv_clint0_set_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131
        }
    }
204023a8:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    return rc;
204023aa:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
}
204023ae:	853e                	mv	a0,a5
204023b0:	50b2                	lw	ra,44(sp)
204023b2:	5422                	lw	s0,40(sp)
204023b4:	6145                	addi	sp,sp,48
204023b6:	8082                	ret

204023b8 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:136

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
204023b8:	7139                	addi	sp,sp,-64
204023ba:	de06                	sw	ra,60(sp)
204023bc:	dc22                	sw	s0,56(sp)
204023be:	0080                	addi	s0,sp,64
204023c0:	fca42623          	sw	a0,-52(s0)
204023c4:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:137
    int rc = -1;
204023c8:	57fd                	li	a5,-1
204023ca:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:139

    if ( id ) {
204023ce:	fc842783          	lw	a5,-56(s0)
204023d2:	c7c9                	beqz	a5,2040245c <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:140
        struct metal_interrupt *intc = NULL;
204023d4:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
204023d8:	3b45                	jal	20402188 <_get_cpu_intc>
204023da:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
204023de:	fcc42503          	lw	a0,-52(s0)
204023e2:	36dd                	jal	20401fc8 <__metal_driver_sifive_clint0_num_interrupts>
204023e4:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144

        for(int i = 0; i < num_interrupts; i++) {
204023e8:	fe042223          	sw	zero,-28(s0)
204023ec:	a091                	j	20402430 <__metal_driver_riscv_clint0_enable+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:145
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204023ee:	fe442583          	lw	a1,-28(s0)
204023f2:	fcc42503          	lw	a0,-52(s0)
204023f6:	390d                	jal	20402028 <__metal_driver_sifive_clint0_interrupt_lines>
204023f8:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204023fc:	fe442583          	lw	a1,-28(s0)
20402400:	fcc42503          	lw	a0,-52(s0)
20402404:	36e5                	jal	20401fec <__metal_driver_sifive_clint0_interrupt_parents>
20402406:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
            if(cpu_intc == intc && id == line) {
2040240a:	fe042703          	lw	a4,-32(s0)
2040240e:	fe842783          	lw	a5,-24(s0)
20402412:	00f71863          	bne	a4,a5,20402422 <__metal_driver_riscv_clint0_enable+0x6a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147 (discriminator 1)
20402416:	fc842703          	lw	a4,-56(s0)
2040241a:	fd842783          	lw	a5,-40(s0)
2040241e:	02f70063          	beq	a4,a5,2040243e <__metal_driver_riscv_clint0_enable+0x86>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:150 (discriminator 2)
                break;
            }
	    intc = NULL;
20402422:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
20402426:	fe442783          	lw	a5,-28(s0)
2040242a:	0785                	addi	a5,a5,1
2040242c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144 (discriminator 1)
20402430:	fe442703          	lw	a4,-28(s0)
20402434:	fdc42783          	lw	a5,-36(s0)
20402438:	faf74be3          	blt	a4,a5,204023ee <__metal_driver_riscv_clint0_enable+0x36>
2040243c:	a011                	j	20402440 <__metal_driver_riscv_clint0_enable+0x88>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
                break;
2040243e:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154
        }
        
        /* Enable its interrupts with parent controller */
        if (intc) {
20402440:	fe842783          	lw	a5,-24(s0)
20402444:	cf81                	beqz	a5,2040245c <__metal_driver_riscv_clint0_enable+0xa4>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
            rc = intc->vtable->interrupt_enable(intc, id);
20402446:	fe842783          	lw	a5,-24(s0)
2040244a:	439c                	lw	a5,0(a5)
2040244c:	53dc                	lw	a5,36(a5)
2040244e:	fc842583          	lw	a1,-56(s0)
20402452:	fe842503          	lw	a0,-24(s0)
20402456:	9782                	jalr	a5
20402458:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:159
        }
    }

    return rc;
2040245c:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160
}
20402460:	853e                	mv	a0,a5
20402462:	50f2                	lw	ra,60(sp)
20402464:	5462                	lw	s0,56(sp)
20402466:	6121                	addi	sp,sp,64
20402468:	8082                	ret

2040246a <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:163

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
2040246a:	7139                	addi	sp,sp,-64
2040246c:	de06                	sw	ra,60(sp)
2040246e:	dc22                	sw	s0,56(sp)
20402470:	0080                	addi	s0,sp,64
20402472:	fca42623          	sw	a0,-52(s0)
20402476:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
    int rc = -1;
2040247a:	57fd                	li	a5,-1
2040247c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166

    if ( id ) {
20402480:	fc842783          	lw	a5,-56(s0)
20402484:	c7d9                	beqz	a5,20402512 <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:167
        struct metal_interrupt *intc = NULL;
20402486:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
2040248a:	39fd                	jal	20402188 <_get_cpu_intc>
2040248c:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:169
	int num_interrupts = __metal_driver_sifive_clint0_num_interrupts(controller);
20402490:	fcc42503          	lw	a0,-52(s0)
20402494:	b35ff0ef          	jal	ra,20401fc8 <__metal_driver_sifive_clint0_num_interrupts>
20402498:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171

        for(int i = 0; i < num_interrupts; i++) {
2040249c:	fe042223          	sw	zero,-28(s0)
204024a0:	a099                	j	204024e6 <__metal_driver_riscv_clint0_disable+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
	    int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
204024a2:	fe442583          	lw	a1,-28(s0)
204024a6:	fcc42503          	lw	a0,-52(s0)
204024aa:	3ebd                	jal	20402028 <__metal_driver_sifive_clint0_interrupt_lines>
204024ac:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
	    intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
204024b0:	fe442583          	lw	a1,-28(s0)
204024b4:	fcc42503          	lw	a0,-52(s0)
204024b8:	b35ff0ef          	jal	ra,20401fec <__metal_driver_sifive_clint0_interrupt_parents>
204024bc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174
            if(cpu_intc == intc && id == line) {
204024c0:	fe042703          	lw	a4,-32(s0)
204024c4:	fe842783          	lw	a5,-24(s0)
204024c8:	00f71863          	bne	a4,a5,204024d8 <__metal_driver_riscv_clint0_disable+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:174 (discriminator 1)
204024cc:	fc842703          	lw	a4,-56(s0)
204024d0:	fd842783          	lw	a5,-40(s0)
204024d4:	02f70063          	beq	a4,a5,204024f4 <__metal_driver_riscv_clint0_disable+0x8a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177 (discriminator 2)
                break;
            }
	    intc = NULL;
204024d8:	fe042423          	sw	zero,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 2)
        for(int i = 0; i < num_interrupts; i++) {
204024dc:	fe442783          	lw	a5,-28(s0)
204024e0:	0785                	addi	a5,a5,1
204024e2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:171 (discriminator 1)
204024e6:	fe442703          	lw	a4,-28(s0)
204024ea:	fdc42783          	lw	a5,-36(s0)
204024ee:	faf74ae3          	blt	a4,a5,204024a2 <__metal_driver_riscv_clint0_disable+0x38>
204024f2:	a011                	j	204024f6 <__metal_driver_riscv_clint0_disable+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:175
                break;
204024f4:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181
        }
        
        /* Disable its interrupts with parent controller */
        if (intc) {
204024f6:	fe842783          	lw	a5,-24(s0)
204024fa:	cf81                	beqz	a5,20402512 <__metal_driver_riscv_clint0_disable+0xa8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
            rc = intc->vtable->interrupt_disable(intc, id);
204024fc:	fe842783          	lw	a5,-24(s0)
20402500:	439c                	lw	a5,0(a5)
20402502:	579c                	lw	a5,40(a5)
20402504:	fc842583          	lw	a1,-56(s0)
20402508:	fe842503          	lw	a0,-24(s0)
2040250c:	9782                	jalr	a5
2040250e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        }
    }

    return rc;
20402512:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:187
}
20402516:	853e                	mv	a0,a5
20402518:	50f2                	lw	ra,60(sp)
2040251a:	5462                	lw	s0,56(sp)
2040251c:	6121                	addi	sp,sp,64
2040251e:	8082                	ret

20402520 <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:191

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
20402520:	7179                	addi	sp,sp,-48
20402522:	d606                	sw	ra,44(sp)
20402524:	d422                	sw	s0,40(sp)
20402526:	1800                	addi	s0,sp,48
20402528:	fca42e23          	sw	a0,-36(s0)
2040252c:	fcb42c23          	sw	a1,-40(s0)
20402530:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:193
    int hartid;
    int rc = -1;
20402534:	57fd                	li	a5,-1
20402536:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
    struct __metal_driver_riscv_clint0 *clint =
2040253a:	fdc42783          	lw	a5,-36(s0)
2040253e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                              (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base = __metal_driver_sifive_clint0_control_base(controller);
20402542:	fdc42503          	lw	a0,-36(s0)
20402546:	a5dff0ef          	jal	ra,20401fa2 <__metal_driver_sifive_clint0_control_base>
2040254a:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198

    switch (command) {
2040254e:	fd842703          	lw	a4,-40(s0)
20402552:	4789                	li	a5,2
20402554:	04f70963          	beq	a4,a5,204025a6 <__metal_driver_riscv_clint0_command_request+0x86>
20402558:	fd842703          	lw	a4,-40(s0)
2040255c:	4789                	li	a5,2
2040255e:	00e7c863          	blt	a5,a4,2040256e <__metal_driver_riscv_clint0_command_request+0x4e>
20402562:	fd842703          	lw	a4,-40(s0)
20402566:	4785                	li	a5,1
20402568:	00f70e63          	beq	a4,a5,20402584 <__metal_driver_riscv_clint0_command_request+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
						    (hartid * 4)));
        }
        break;
    default:
	break;
2040256c:	a8f1                	j	20402648 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198
    switch (command) {
2040256e:	fd842703          	lw	a4,-40(s0)
20402572:	478d                	li	a5,3
20402574:	04f70d63          	beq	a4,a5,204025ce <__metal_driver_riscv_clint0_command_request+0xae>
20402578:	fd842703          	lw	a4,-40(s0)
2040257c:	4791                	li	a5,4
2040257e:	08f70963          	beq	a4,a5,20402610 <__metal_driver_riscv_clint0_command_request+0xf0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:242
	break;
20402582:	a0d9                	j	20402648 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:200
        if (data) {
20402584:	fd442783          	lw	a5,-44(s0)
20402588:	cbcd                	beqz	a5,2040263a <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:201
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
2040258a:	fe842503          	lw	a0,-24(s0)
2040258e:	acbff0ef          	jal	ra,20402058 <__metal_clint0_mtime_get>
20402592:	87aa                	mv	a5,a0
20402594:	882e                	mv	a6,a1
20402596:	fd442703          	lw	a4,-44(s0)
2040259a:	c31c                	sw	a5,0(a4)
2040259c:	01072223          	sw	a6,4(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
            rc = 0;
204025a0:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
204025a4:	a859                	j	2040263a <__metal_driver_riscv_clint0_command_request+0x11a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:206
	if (data) {
204025a6:	fd442783          	lw	a5,-44(s0)
204025aa:	cbd1                	beqz	a5,2040263e <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
	    hartid = *(int *)data;
204025ac:	fd442783          	lw	a5,-44(s0)
204025b0:	439c                	lw	a5,0(a5)
204025b2:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204025b6:	fe042783          	lw	a5,-32(s0)
204025ba:	078a                	slli	a5,a5,0x2
204025bc:	873e                	mv	a4,a5
204025be:	fe442783          	lw	a5,-28(s0)
204025c2:	97ba                	add	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:209
					       (hartid * 4))) = METAL_DISABLE;
204025c4:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:210
            rc = 0;
204025c8:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
204025cc:	a88d                	j	2040263e <__metal_driver_riscv_clint0_command_request+0x11e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
	if (data) {
204025ce:	fd442783          	lw	a5,-44(s0)
204025d2:	cba5                	beqz	a5,20402642 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:215
	    hartid = *(int *)data;
204025d4:	fd442783          	lw	a5,-44(s0)
204025d8:	439c                	lw	a5,0(a5)
204025da:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:216
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204025de:	fe042783          	lw	a5,-32(s0)
204025e2:	078a                	slli	a5,a5,0x2
204025e4:	873e                	mv	a4,a5
204025e6:	fe442783          	lw	a5,-28(s0)
204025ea:	97ba                	add	a5,a5,a4
204025ec:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
					       (hartid * 4))) = METAL_ENABLE;
204025ee:	4785                	li	a5,1
204025f0:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
	    __METAL_IO_FENCE(o,i);
204025f2:	0480000f          	fence	o,i
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204025f6:	fe042783          	lw	a5,-32(s0)
204025fa:	078a                	slli	a5,a5,0x2
204025fc:	873e                	mv	a4,a5
204025fe:	fe442783          	lw	a5,-28(s0)
20402602:	97ba                	add	a5,a5,a4
20402604:	439c                	lw	a5,0(a5)
20402606:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
            rc = 0;
2040260a:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
2040260e:	a815                	j	20402642 <__metal_driver_riscv_clint0_command_request+0x122>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:234
        rc = 0;
20402610:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
	if (data) {
20402614:	fd442783          	lw	a5,-44(s0)
20402618:	c79d                	beqz	a5,20402646 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
	    hartid = *(int *)data;
2040261a:	fd442783          	lw	a5,-44(s0)
2040261e:	439c                	lw	a5,0(a5)
20402620:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20402624:	fe042783          	lw	a5,-32(s0)
20402628:	078a                	slli	a5,a5,0x2
2040262a:	873e                	mv	a4,a5
2040262c:	fe442783          	lw	a5,-28(s0)
20402630:	97ba                	add	a5,a5,a4
20402632:	439c                	lw	a5,0(a5)
20402634:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402638:	a039                	j	20402646 <__metal_driver_riscv_clint0_command_request+0x126>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:204
        break;
2040263a:	0001                	nop
2040263c:	a031                	j	20402648 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:212
        break;
2040263e:	0001                	nop
20402640:	a021                	j	20402648 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:232
        break;
20402642:	0001                	nop
20402644:	a011                	j	20402648 <__metal_driver_riscv_clint0_command_request+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:240
        break;
20402646:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:245
    }

    return rc;
20402648:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:246
}
2040264c:	853e                	mv	a0,a5
2040264e:	50b2                	lw	ra,44(sp)
20402650:	5422                	lw	s0,40(sp)
20402652:	6145                	addi	sp,sp,48
20402654:	8082                	ret

20402656 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249

int __metal_driver_riscv_clint0_clear_interrupt (struct metal_interrupt *controller, int id)
{
20402656:	7179                	addi	sp,sp,-48
20402658:	d606                	sw	ra,44(sp)
2040265a:	d422                	sw	s0,40(sp)
2040265c:	1800                	addi	s0,sp,48
2040265e:	fca42e23          	sw	a0,-36(s0)
20402662:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:250
    int hartid = metal_cpu_get_current_hartid();
20402666:	52b020ef          	jal	ra,20405390 <metal_cpu_get_current_hartid>
2040266a:	87aa                	mv	a5,a0
2040266c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
    return __metal_driver_riscv_clint0_command_request(controller,
20402670:	fec40793          	addi	a5,s0,-20
20402674:	863e                	mv	a2,a5
20402676:	4589                	li	a1,2
20402678:	fdc42503          	lw	a0,-36(s0)
2040267c:	3555                	jal	20402520 <__metal_driver_riscv_clint0_command_request>
2040267e:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
						METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402680:	853e                	mv	a0,a5
20402682:	50b2                	lw	ra,44(sp)
20402684:	5422                	lw	s0,40(sp)
20402686:	6145                	addi	sp,sp,48
20402688:	8082                	ret

2040268a <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256

int __metal_driver_riscv_clint0_set_interrupt (struct metal_interrupt *controller, int id)
{
2040268a:	7179                	addi	sp,sp,-48
2040268c:	d606                	sw	ra,44(sp)
2040268e:	d422                	sw	s0,40(sp)
20402690:	1800                	addi	s0,sp,48
20402692:	fca42e23          	sw	a0,-36(s0)
20402696:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
    int hartid = metal_cpu_get_current_hartid();
2040269a:	4f7020ef          	jal	ra,20405390 <metal_cpu_get_current_hartid>
2040269e:	87aa                	mv	a5,a0
204026a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
    return __metal_driver_riscv_clint0_command_request(controller,
204026a4:	fec40793          	addi	a5,s0,-20
204026a8:	863e                	mv	a2,a5
204026aa:	458d                	li	a1,3
204026ac:	fdc42503          	lw	a0,-36(s0)
204026b0:	3d85                	jal	20402520 <__metal_driver_riscv_clint0_command_request>
204026b2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:260
						METAL_SOFTWARE_IPI_SET, &hartid);
}
204026b4:	853e                	mv	a0,a5
204026b6:	50b2                	lw	ra,44(sp)
204026b8:	5422                	lw	s0,40(sp)
204026ba:	6145                	addi	sp,sp,48
204026bc:	8082                	ret

204026be <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:195



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
204026be:	1101                	addi	sp,sp,-32
204026c0:	ce22                	sw	s0,28(sp)
204026c2:	1000                	addi	s0,sp,32
204026c4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:196
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204026c8:	fec42703          	lw	a4,-20(s0)
204026cc:	81818793          	addi	a5,gp,-2024 # 800007b0 <__metal_dt_cpu_0>
204026d0:	00f71463          	bne	a4,a5,204026d8 <__metal_driver_cpu_hartid+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:197
		return 0;
204026d4:	4781                	li	a5,0
204026d6:	a011                	j	204026da <__metal_driver_cpu_hartid+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:200
	}
	else {
		return -1;
204026d8:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:202
	}
}
204026da:	853e                	mv	a0,a5
204026dc:	4472                	lw	s0,28(sp)
204026de:	6105                	addi	sp,sp,32
204026e0:	8082                	ret

204026e2 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:205

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
204026e2:	1101                	addi	sp,sp,-32
204026e4:	ce22                	sw	s0,28(sp)
204026e6:	1000                	addi	s0,sp,32
204026e8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:206
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204026ec:	fec42703          	lw	a4,-20(s0)
204026f0:	81818793          	addi	a5,gp,-2024 # 800007b0 <__metal_dt_cpu_0>
204026f4:	00f71763          	bne	a4,a5,20402702 <__metal_driver_cpu_timebase+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:207
		return 1000000;
204026f8:	000f47b7          	lui	a5,0xf4
204026fc:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402700:	a011                	j	20402704 <__metal_driver_cpu_timebase+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:210
	}
	else {
		return 0;
20402702:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:212
	}
}
20402704:	853e                	mv	a0,a5
20402706:	4472                	lw	s0,28(sp)
20402708:	6105                	addi	sp,sp,32
2040270a:	8082                	ret

2040270c <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:215

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
2040270c:	1101                	addi	sp,sp,-32
2040270e:	ce22                	sw	s0,28(sp)
20402710:	1000                	addi	s0,sp,32
20402712:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:216
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402716:	fec42703          	lw	a4,-20(s0)
2040271a:	81818793          	addi	a5,gp,-2024 # 800007b0 <__metal_dt_cpu_0>
2040271e:	00f71763          	bne	a4,a5,2040272c <__metal_driver_cpu_interrupt_controller+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:217
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20402722:	800007b7          	lui	a5,0x80000
20402726:	0c078793          	addi	a5,a5,192 # 800000c0 <metal_segment_heap_target_end+0xffffec14>
2040272a:	a011                	j	2040272e <__metal_driver_cpu_interrupt_controller+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:220
	}
	else {
		return NULL;
2040272c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:222
	}
}
2040272e:	853e                	mv	a0,a5
20402730:	4472                	lw	s0,28(sp)
20402732:	6105                	addi	sp,sp,32
20402734:	8082                	ret

20402736 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:14
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu, unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
20402736:	1101                	addi	sp,sp,-32
20402738:	ce22                	sw	s0,28(sp)
2040273a:	1000                	addi	s0,sp,32
2040273c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:15
    if (hartid < __METAL_DT_MAX_HARTS) {
20402740:	fec42783          	lw	a5,-20(s0)
20402744:	00f04a63          	bgtz	a5,20402758 <__metal_driver_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:16
        return &(__metal_cpu_table[hartid]->cpu);
20402748:	fec42703          	lw	a4,-20(s0)
2040274c:	070a                	slli	a4,a4,0x2
2040274e:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402752:	97ba                	add	a5,a5,a4
20402754:	439c                	lw	a5,0(a5)
20402756:	a011                	j	2040275a <__metal_driver_cpu_get+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:18
    }
    return (struct metal_cpu *)NULL;
20402758:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:19
}
2040275a:	853e                	mv	a0,a5
2040275c:	4472                	lw	s0,28(sp)
2040275e:	6105                	addi	sp,sp,32
20402760:	8082                	ret

20402762 <__metal_myhart_id>:
__metal_myhart_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:22

uintptr_t __metal_myhart_id (void)
{
20402762:	1101                	addi	sp,sp,-32
20402764:	ce22                	sw	s0,28(sp)
20402766:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:24
    uintptr_t myhart;
    __asm__ volatile ("csrr %0, mhartid" : "=r"(myhart));
20402768:	f14027f3          	csrr	a5,mhartid
2040276c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
    return myhart;
20402770:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
}
20402774:	853e                	mv	a0,a5
20402776:	4472                	lw	s0,28(sp)
20402778:	6105                	addi	sp,sp,32
2040277a:	8082                	ret

2040277c <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
2040277c:	1101                	addi	sp,sp,-32
2040277e:	ce22                	sw	s0,28(sp)
20402780:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:38
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
20402782:	47a1                	li	a5,8
20402784:	3007a7f3          	csrrs	a5,mstatus,a5
20402788:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:39
}
2040278c:	0001                	nop
2040278e:	4472                	lw	s0,28(sp)
20402790:	6105                	addi	sp,sp,32
20402792:	8082                	ret

20402794 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:41

void __metal_interrupt_global_disable (void) {
20402794:	1101                	addi	sp,sp,-32
20402796:	ce22                	sw	s0,28(sp)
20402798:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:43
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
2040279a:	47a1                	li	a5,8
2040279c:	3007b7f3          	csrrc	a5,mstatus,a5
204027a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:44
}
204027a4:	0001                	nop
204027a6:	4472                	lw	s0,28(sp)
204027a8:	6105                	addi	sp,sp,32
204027aa:	8082                	ret

204027ac <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:46

void __metal_interrupt_software_enable (void) {
204027ac:	1101                	addi	sp,sp,-32
204027ae:	ce22                	sw	s0,28(sp)
204027b0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:48
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204027b2:	47a1                	li	a5,8
204027b4:	3047a7f3          	csrrs	a5,mie,a5
204027b8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:49
}
204027bc:	0001                	nop
204027be:	4472                	lw	s0,28(sp)
204027c0:	6105                	addi	sp,sp,32
204027c2:	8082                	ret

204027c4 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:51

void __metal_interrupt_software_disable (void) {
204027c4:	1101                	addi	sp,sp,-32
204027c6:	ce22                	sw	s0,28(sp)
204027c8:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:53
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
204027ca:	47a1                	li	a5,8
204027cc:	3047b7f3          	csrrc	a5,mie,a5
204027d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
}
204027d4:	0001                	nop
204027d6:	4472                	lw	s0,28(sp)
204027d8:	6105                	addi	sp,sp,32
204027da:	8082                	ret

204027dc <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:56

void __metal_interrupt_timer_enable (void) {
204027dc:	1101                	addi	sp,sp,-32
204027de:	ce22                	sw	s0,28(sp)
204027e0:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:58
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204027e2:	08000793          	li	a5,128
204027e6:	3047a7f3          	csrrs	a5,mie,a5
204027ea:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59
}
204027ee:	0001                	nop
204027f0:	4472                	lw	s0,28(sp)
204027f2:	6105                	addi	sp,sp,32
204027f4:	8082                	ret

204027f6 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61

void __metal_interrupt_timer_disable (void) {
204027f6:	1101                	addi	sp,sp,-32
204027f8:	ce22                	sw	s0,28(sp)
204027fa:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:63
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
204027fc:	08000793          	li	a5,128
20402800:	3047b7f3          	csrrc	a5,mie,a5
20402804:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
}
20402808:	0001                	nop
2040280a:	4472                	lw	s0,28(sp)
2040280c:	6105                	addi	sp,sp,32
2040280e:	8082                	ret

20402810 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_external_enable (void) {
20402810:	1101                	addi	sp,sp,-32
20402812:	ce22                	sw	s0,28(sp)
20402814:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402816:	6785                	lui	a5,0x1
20402818:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
2040281c:	3047a7f3          	csrrs	a5,mie,a5
20402820:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:69
}
20402824:	0001                	nop
20402826:	4472                	lw	s0,28(sp)
20402828:	6105                	addi	sp,sp,32
2040282a:	8082                	ret

2040282c <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71

void __metal_interrupt_external_disable (void) {
2040282c:	1101                	addi	sp,sp,-32
2040282e:	ce22                	sw	s0,28(sp)
20402830:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73
    unsigned long m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
20402832:	6785                	lui	a5,0x1
20402834:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20402838:	3047b7f3          	csrrc	a5,mie,a5
2040283c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:74
}
20402840:	0001                	nop
20402842:	4472                	lw	s0,28(sp)
20402844:	6105                	addi	sp,sp,32
20402846:	8082                	ret

20402848 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:76

void __metal_interrupt_local_enable (int id) {
20402848:	7179                	addi	sp,sp,-48
2040284a:	d622                	sw	s0,44(sp)
2040284c:	1800                	addi	s0,sp,48
2040284e:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:77
    uintptr_t b = 1 << id;
20402852:	fdc42783          	lw	a5,-36(s0)
20402856:	4705                	li	a4,1
20402858:	00f717b3          	sll	a5,a4,a5
2040285c:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:79
    uintptr_t m;
    __asm__ volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20402860:	fec42783          	lw	a5,-20(s0)
20402864:	3047a7f3          	csrrs	a5,mie,a5
20402868:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80
}
2040286c:	0001                	nop
2040286e:	5432                	lw	s0,44(sp)
20402870:	6145                	addi	sp,sp,48
20402872:	8082                	ret

20402874 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82

void __metal_interrupt_local_disable (int id) {
20402874:	7179                	addi	sp,sp,-48
20402876:	d622                	sw	s0,44(sp)
20402878:	1800                	addi	s0,sp,48
2040287a:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:83
    uintptr_t b = 1 << id;
2040287e:	fdc42783          	lw	a5,-36(s0)
20402882:	4705                	li	a4,1
20402884:	00f717b3          	sll	a5,a4,a5
20402888:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
    uintptr_t m;
    __asm__ volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
2040288c:	fec42783          	lw	a5,-20(s0)
20402890:	3047b7f3          	csrrc	a5,mie,a5
20402894:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:86
}
20402898:	0001                	nop
2040289a:	5432                	lw	s0,44(sp)
2040289c:	6145                	addi	sp,sp,48
2040289e:	8082                	ret

204028a0 <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:88

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
204028a0:	1101                	addi	sp,sp,-32
204028a2:	ce06                	sw	ra,28(sp)
204028a4:	cc22                	sw	s0,24(sp)
204028a6:	1000                	addi	s0,sp,32
204028a8:	fea42623          	sw	a0,-20(s0)
204028ac:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    metal_shutdown(100);
204028b0:	06400513          	li	a0,100
204028b4:	2f7020ef          	jal	ra,204053aa <metal_shutdown>

204028b8 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
}

void __metal_default_interrupt_handler (int id, void *priv) {
204028b8:	1101                	addi	sp,sp,-32
204028ba:	ce06                	sw	ra,28(sp)
204028bc:	cc22                	sw	s0,24(sp)
204028be:	1000                	addi	s0,sp,32
204028c0:	fea42623          	sw	a0,-20(s0)
204028c4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:93
    metal_shutdown(200);
204028c8:	0c800513          	li	a0,200
204028cc:	2df020ef          	jal	ra,204053aa <metal_shutdown>

204028d0 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:97
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler (void) {
204028d0:	715d                	addi	sp,sp,-80
204028d2:	c686                	sw	ra,76(sp)
204028d4:	c496                	sw	t0,72(sp)
204028d6:	c29a                	sw	t1,68(sp)
204028d8:	c09e                	sw	t2,64(sp)
204028da:	de22                	sw	s0,60(sp)
204028dc:	dc2a                	sw	a0,56(sp)
204028de:	da2e                	sw	a1,52(sp)
204028e0:	d832                	sw	a2,48(sp)
204028e2:	d636                	sw	a3,44(sp)
204028e4:	d43a                	sw	a4,40(sp)
204028e6:	d23e                	sw	a5,36(sp)
204028e8:	d042                	sw	a6,32(sp)
204028ea:	ce46                	sw	a7,28(sp)
204028ec:	cc72                	sw	t3,24(sp)
204028ee:	ca76                	sw	t4,20(sp)
204028f0:	c87a                	sw	t5,16(sp)
204028f2:	c67e                	sw	t6,12(sp)
204028f4:	0880                	addi	s0,sp,80
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:98
    metal_shutdown(300);
204028f6:	12c00513          	li	a0,300
204028fa:	2b1020ef          	jal	ra,204053aa <metal_shutdown>

204028fe <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_software_interrupt_vector_handler (void) {
204028fe:	711d                	addi	sp,sp,-96
20402900:	ce86                	sw	ra,92(sp)
20402902:	cc96                	sw	t0,88(sp)
20402904:	ca9a                	sw	t1,84(sp)
20402906:	c89e                	sw	t2,80(sp)
20402908:	c6a2                	sw	s0,76(sp)
2040290a:	c4aa                	sw	a0,72(sp)
2040290c:	c2ae                	sw	a1,68(sp)
2040290e:	c0b2                	sw	a2,64(sp)
20402910:	de36                	sw	a3,60(sp)
20402912:	dc3a                	sw	a4,56(sp)
20402914:	da3e                	sw	a5,52(sp)
20402916:	d842                	sw	a6,48(sp)
20402918:	d646                	sw	a7,44(sp)
2040291a:	d472                	sw	t3,40(sp)
2040291c:	d276                	sw	t4,36(sp)
2040291e:	d07a                	sw	t5,32(sp)
20402920:	ce7e                	sw	t6,28(sp)
20402922:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402924:	3d3d                	jal	20402762 <__metal_myhart_id>
20402926:	872a                	mv	a4,a0
20402928:	070a                	slli	a4,a4,0x2
2040292a:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
2040292e:	97ba                	add	a5,a5,a4
20402930:	439c                	lw	a5,0(a5)
20402932:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

    if ( cpu ) {
20402936:	fac42783          	lw	a5,-84(s0)
2040293a:	c785                	beqz	a5,20402962 <metal_software_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:109
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040293c:	fac42503          	lw	a0,-84(s0)
20402940:	33f1                	jal	2040270c <__metal_driver_cpu_interrupt_controller>
20402942:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].exint_data;
20402946:	fa842783          	lw	a5,-88(s0)
2040294a:	0e07a783          	lw	a5,224(a5)
2040294e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
        intc->metal_int_table[METAL_INTERRUPT_ID_SW].handler(METAL_INTERRUPT_ID_SW, priv);
20402952:	fa842783          	lw	a5,-88(s0)
20402956:	0d87a783          	lw	a5,216(a5)
2040295a:	fa442583          	lw	a1,-92(s0)
2040295e:	450d                	li	a0,3
20402960:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113
    }
}
20402962:	0001                	nop
20402964:	40f6                	lw	ra,92(sp)
20402966:	42e6                	lw	t0,88(sp)
20402968:	4356                	lw	t1,84(sp)
2040296a:	43c6                	lw	t2,80(sp)
2040296c:	4436                	lw	s0,76(sp)
2040296e:	4526                	lw	a0,72(sp)
20402970:	4596                	lw	a1,68(sp)
20402972:	4606                	lw	a2,64(sp)
20402974:	56f2                	lw	a3,60(sp)
20402976:	5762                	lw	a4,56(sp)
20402978:	57d2                	lw	a5,52(sp)
2040297a:	5842                	lw	a6,48(sp)
2040297c:	58b2                	lw	a7,44(sp)
2040297e:	5e22                	lw	t3,40(sp)
20402980:	5e92                	lw	t4,36(sp)
20402982:	5f02                	lw	t5,32(sp)
20402984:	4ff2                	lw	t6,28(sp)
20402986:	6125                	addi	sp,sp,96
20402988:	30200073          	mret

2040298c <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:115

void __metal_default_sw_handler (int id, void *priv) {
2040298c:	7179                	addi	sp,sp,-48
2040298e:	d606                	sw	ra,44(sp)
20402990:	d422                	sw	s0,40(sp)
20402992:	1800                	addi	s0,sp,48
20402994:	fca42e23          	sw	a0,-36(s0)
20402998:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040299c:	33d9                	jal	20402762 <__metal_myhart_id>
2040299e:	872a                	mv	a4,a0
204029a0:	070a                	slli	a4,a4,0x2
204029a2:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
204029a6:	97ba                	add	a5,a5,a4
204029a8:	439c                	lw	a5,0(a5)
204029aa:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:120

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
204029ae:	342027f3          	csrr	a5,mcause
204029b2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:121
    if ( cpu ) {
204029b6:	fec42783          	lw	a5,-20(s0)
204029ba:	c795                	beqz	a5,204029e6 <__metal_default_sw_handler+0x5a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204029bc:	fec42503          	lw	a0,-20(s0)
204029c0:	33b1                	jal	2040270c <__metal_driver_cpu_interrupt_controller>
204029c2:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:124
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
204029c6:	fe842783          	lw	a5,-24(s0)
204029ca:	3ff7f793          	andi	a5,a5,1023
204029ce:	fe442703          	lw	a4,-28(s0)
204029d2:	0e078793          	addi	a5,a5,224
204029d6:	078a                	slli	a5,a5,0x2
204029d8:	97ba                	add	a5,a5,a4
204029da:	479c                	lw	a5,8(a5)
204029dc:	fdc42583          	lw	a1,-36(s0)
204029e0:	fec42503          	lw	a0,-20(s0)
204029e4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:126
    }
}
204029e6:	0001                	nop
204029e8:	50b2                	lw	ra,44(sp)
204029ea:	5422                	lw	s0,40(sp)
204029ec:	6145                	addi	sp,sp,48
204029ee:	8082                	ret

204029f0 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_timer_interrupt_vector_handler (void) {
204029f0:	711d                	addi	sp,sp,-96
204029f2:	ce86                	sw	ra,92(sp)
204029f4:	cc96                	sw	t0,88(sp)
204029f6:	ca9a                	sw	t1,84(sp)
204029f8:	c89e                	sw	t2,80(sp)
204029fa:	c6a2                	sw	s0,76(sp)
204029fc:	c4aa                	sw	a0,72(sp)
204029fe:	c2ae                	sw	a1,68(sp)
20402a00:	c0b2                	sw	a2,64(sp)
20402a02:	de36                	sw	a3,60(sp)
20402a04:	dc3a                	sw	a4,56(sp)
20402a06:	da3e                	sw	a5,52(sp)
20402a08:	d842                	sw	a6,48(sp)
20402a0a:	d646                	sw	a7,44(sp)
20402a0c:	d472                	sw	t3,40(sp)
20402a0e:	d276                	sw	t4,36(sp)
20402a10:	d07a                	sw	t5,32(sp)
20402a12:	ce7e                	sw	t6,28(sp)
20402a14:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a16:	33b1                	jal	20402762 <__metal_myhart_id>
20402a18:	872a                	mv	a4,a0
20402a1a:	070a                	slli	a4,a4,0x2
20402a1c:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402a20:	97ba                	add	a5,a5,a4
20402a22:	439c                	lw	a5,0(a5)
20402a24:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:134

    if ( cpu ) {
20402a28:	fac42783          	lw	a5,-84(s0)
20402a2c:	c785                	beqz	a5,20402a54 <metal_timer_interrupt_vector_handler+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:136
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a2e:	fac42503          	lw	a0,-84(s0)
20402a32:	39e9                	jal	2040270c <__metal_driver_cpu_interrupt_controller>
20402a34:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].exint_data;
20402a38:	fa842783          	lw	a5,-88(s0)
20402a3c:	1407a783          	lw	a5,320(a5)
20402a40:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
        intc->metal_int_table[METAL_INTERRUPT_ID_TMR].handler(METAL_INTERRUPT_ID_TMR, priv);
20402a44:	fa842783          	lw	a5,-88(s0)
20402a48:	1387a783          	lw	a5,312(a5)
20402a4c:	fa442583          	lw	a1,-92(s0)
20402a50:	451d                	li	a0,7
20402a52:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
    }
}
20402a54:	0001                	nop
20402a56:	40f6                	lw	ra,92(sp)
20402a58:	42e6                	lw	t0,88(sp)
20402a5a:	4356                	lw	t1,84(sp)
20402a5c:	43c6                	lw	t2,80(sp)
20402a5e:	4436                	lw	s0,76(sp)
20402a60:	4526                	lw	a0,72(sp)
20402a62:	4596                	lw	a1,68(sp)
20402a64:	4606                	lw	a2,64(sp)
20402a66:	56f2                	lw	a3,60(sp)
20402a68:	5762                	lw	a4,56(sp)
20402a6a:	57d2                	lw	a5,52(sp)
20402a6c:	5842                	lw	a6,48(sp)
20402a6e:	58b2                	lw	a7,44(sp)
20402a70:	5e22                	lw	t3,40(sp)
20402a72:	5e92                	lw	t4,36(sp)
20402a74:	5f02                	lw	t5,32(sp)
20402a76:	4ff2                	lw	t6,28(sp)
20402a78:	6125                	addi	sp,sp,96
20402a7a:	30200073          	mret

20402a7e <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:142

void __metal_default_timer_handler (int id, void *priv) {
20402a7e:	7179                	addi	sp,sp,-48
20402a80:	d606                	sw	ra,44(sp)
20402a82:	d422                	sw	s0,40(sp)
20402a84:	1800                	addi	s0,sp,48
20402a86:	fca42e23          	sw	a0,-36(s0)
20402a8a:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:143
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
20402a8e:	39d1                	jal	20402762 <__metal_myhart_id>
20402a90:	87aa                	mv	a5,a0
20402a92:	853e                	mv	a0,a5
20402a94:	314d                	jal	20402736 <__metal_driver_cpu_get>
20402a96:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402a9a:	fec42503          	lw	a0,-20(s0)
20402a9e:	152010ef          	jal	ra,20403bf0 <__metal_driver_cpu_mtime_get>
20402aa2:	fea42023          	sw	a0,-32(s0)
20402aa6:	feb42223          	sw	a1,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:147

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402aaa:	fe042783          	lw	a5,-32(s0)
20402aae:	fe442803          	lw	a6,-28(s0)
20402ab2:	45a9                	li	a1,10
20402ab4:	4601                	li	a2,0
20402ab6:	00b786b3          	add	a3,a5,a1
20402aba:	8536                	mv	a0,a3
20402abc:	00f53533          	sltu	a0,a0,a5
20402ac0:	00c80733          	add	a4,a6,a2
20402ac4:	00e507b3          	add	a5,a0,a4
20402ac8:	873e                	mv	a4,a5
20402aca:	87b6                	mv	a5,a3
20402acc:	883a                	mv	a6,a4
20402ace:	85be                	mv	a1,a5
20402ad0:	8642                	mv	a2,a6
20402ad2:	fec42503          	lw	a0,-20(s0)
20402ad6:	180010ef          	jal	ra,20403c56 <__metal_driver_cpu_mtimecmp_set>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148
}
20402ada:	0001                	nop
20402adc:	50b2                	lw	ra,44(sp)
20402ade:	5422                	lw	s0,40(sp)
20402ae0:	6145                	addi	sp,sp,48
20402ae2:	8082                	ret
	...

20402b00 <__metal_exception_handler>:
__metal_exception_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:165
        intc->metal_int_table[METAL_INTERRUPT_ID_EXT].handler(METAL_INTERRUPT_ID_EXT, priv);
    }
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20402b00:	7119                	addi	sp,sp,-128
20402b02:	de86                	sw	ra,124(sp)
20402b04:	dc96                	sw	t0,120(sp)
20402b06:	da9a                	sw	t1,116(sp)
20402b08:	d89e                	sw	t2,112(sp)
20402b0a:	d6a2                	sw	s0,108(sp)
20402b0c:	d4aa                	sw	a0,104(sp)
20402b0e:	d2ae                	sw	a1,100(sp)
20402b10:	d0b2                	sw	a2,96(sp)
20402b12:	ceb6                	sw	a3,92(sp)
20402b14:	ccba                	sw	a4,88(sp)
20402b16:	cabe                	sw	a5,84(sp)
20402b18:	c8c2                	sw	a6,80(sp)
20402b1a:	c6c6                	sw	a7,76(sp)
20402b1c:	c4f2                	sw	t3,72(sp)
20402b1e:	c2f6                	sw	t4,68(sp)
20402b20:	c0fa                	sw	t5,64(sp)
20402b22:	de7e                	sw	t6,60(sp)
20402b24:	0100                	addi	s0,sp,128
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:170
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402b26:	c3dff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402b2a:	872a                	mv	a4,a0
20402b2c:	070a                	slli	a4,a4,0x2
20402b2e:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402b32:	97ba                	add	a5,a5,a4
20402b34:	439c                	lw	a5,0(a5)
20402b36:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:172

    __asm__ volatile ("csrr %0, mcause" : "=r"(mcause));
20402b3a:	342027f3          	csrr	a5,mcause
20402b3e:	faf42423          	sw	a5,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:173
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20402b42:	341027f3          	csrr	a5,mepc
20402b46:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    __asm__ volatile ("csrr %0, mtval" : "=r"(mtval));
20402b4a:	343027f3          	csrr	a5,mtval
20402b4e:	faf42023          	sw	a5,-96(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:175
    __asm__ volatile ("csrr %0, mtvec" : "=r"(mtvec));
20402b52:	305027f3          	csrr	a5,mtvec
20402b56:	f8f42e23          	sw	a5,-100(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177

    if ( cpu ) {
20402b5a:	fac42783          	lw	a5,-84(s0)
20402b5e:	c7e9                	beqz	a5,20402c28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
        intc = (struct __metal_driver_riscv_cpu_intc *)
	  __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402b60:	fac42503          	lw	a0,-84(s0)
20402b64:	ba9ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402b68:	f8a42c23          	sw	a0,-104(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:180
        id = mcause & METAL_MCAUSE_CAUSE;
20402b6c:	fa842783          	lw	a5,-88(s0)
20402b70:	3ff7f793          	andi	a5,a5,1023
20402b74:	f8f42a23          	sw	a5,-108(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181
        if (mcause & METAL_MCAUSE_INTR) {
20402b78:	fa842783          	lw	a5,-88(s0)
20402b7c:	0807d863          	bgez	a5,20402c0c <__metal_exception_handler+0x10c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402b80:	f9442703          	lw	a4,-108(s0)
20402b84:	47ad                	li	a5,11
20402b86:	00e7d763          	bge	a5,a4,20402b94 <__metal_exception_handler+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402b8a:	f9c42783          	lw	a5,-100(s0)
20402b8e:	03f7f793          	andi	a5,a5,63
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:182 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402b92:	ef9d                	bnez	a5,20402bd0 <__metal_exception_handler+0xd0>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
                priv = intc->metal_int_table[id].exint_data;
20402b94:	f9842683          	lw	a3,-104(s0)
20402b98:	f9442703          	lw	a4,-108(s0)
20402b9c:	87ba                	mv	a5,a4
20402b9e:	0786                	slli	a5,a5,0x1
20402ba0:	97ba                	add	a5,a5,a4
20402ba2:	078e                	slli	a5,a5,0x3
20402ba4:	97b6                	add	a5,a5,a3
20402ba6:	0987a783          	lw	a5,152(a5)
20402baa:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
                intc->metal_int_table[id].handler(id, priv);
20402bae:	f9842683          	lw	a3,-104(s0)
20402bb2:	f9442703          	lw	a4,-108(s0)
20402bb6:	87ba                	mv	a5,a4
20402bb8:	0786                	slli	a5,a5,0x1
20402bba:	97ba                	add	a5,a5,a4
20402bbc:	078e                	slli	a5,a5,0x3
20402bbe:	97b6                	add	a5,a5,a3
20402bc0:	0907a783          	lw	a5,144(a5)
20402bc4:	f8c42583          	lw	a1,-116(s0)
20402bc8:	f9442503          	lw	a0,-108(s0)
20402bcc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
		return;
20402bce:	a8a9                	j	20402c28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402bd0:	f9c42783          	lw	a5,-100(s0)
20402bd4:	03f7f713          	andi	a4,a5,63
20402bd8:	4789                	li	a5,2
20402bda:	04f71763          	bne	a4,a5,20402c28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile ("csrr %0, 0x307" : "=r"(mtvt));
20402bde:	307027f3          	csrr	a5,mtvt
20402be2:	f8f42823          	sw	a5,-112(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402be6:	f9842783          	lw	a5,-104(s0)
20402bea:	0dc7a783          	lw	a5,220(a5)
20402bee:	f8f42623          	sw	a5,-116(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
               	mtvt_handler = (metal_interrupt_handler_t)*(uintptr_t *)mtvt;
20402bf2:	f9042783          	lw	a5,-112(s0)
20402bf6:	439c                	lw	a5,0(a5)
20402bf8:	f8f42423          	sw	a5,-120(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
               	mtvt_handler(id, priv);
20402bfc:	f8842783          	lw	a5,-120(s0)
20402c00:	f8c42583          	lw	a1,-116(s0)
20402c04:	f9442503          	lw	a0,-108(s0)
20402c08:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:196
		return;
20402c0a:	a839                	j	20402c28 <__metal_exception_handler+0x128>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:199
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402c0c:	f9842703          	lw	a4,-104(s0)
20402c10:	f9442783          	lw	a5,-108(s0)
20402c14:	0e078793          	addi	a5,a5,224
20402c18:	078a                	slli	a5,a5,0x2
20402c1a:	97ba                	add	a5,a5,a4
20402c1c:	479c                	lw	a5,8(a5)
20402c1e:	f9442583          	lw	a1,-108(s0)
20402c22:	fac42503          	lw	a0,-84(s0)
20402c26:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
        }
    }
}
20402c28:	50f6                	lw	ra,124(sp)
20402c2a:	52e6                	lw	t0,120(sp)
20402c2c:	5356                	lw	t1,116(sp)
20402c2e:	53c6                	lw	t2,112(sp)
20402c30:	5436                	lw	s0,108(sp)
20402c32:	5526                	lw	a0,104(sp)
20402c34:	5596                	lw	a1,100(sp)
20402c36:	5606                	lw	a2,96(sp)
20402c38:	46f6                	lw	a3,92(sp)
20402c3a:	4766                	lw	a4,88(sp)
20402c3c:	47d6                	lw	a5,84(sp)
20402c3e:	4846                	lw	a6,80(sp)
20402c40:	48b6                	lw	a7,76(sp)
20402c42:	4e26                	lw	t3,72(sp)
20402c44:	4e96                	lw	t4,68(sp)
20402c46:	4f06                	lw	t5,64(sp)
20402c48:	5ff2                	lw	t6,60(sp)
20402c4a:	6109                	addi	sp,sp,128
20402c4c:	30200073          	mret
	...

20402c76 <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler (void) {
20402c76:	711d                	addi	sp,sp,-96
20402c78:	ce86                	sw	ra,92(sp)
20402c7a:	cc96                	sw	t0,88(sp)
20402c7c:	ca9a                	sw	t1,84(sp)
20402c7e:	c89e                	sw	t2,80(sp)
20402c80:	c6a2                	sw	s0,76(sp)
20402c82:	c4aa                	sw	a0,72(sp)
20402c84:	c2ae                	sw	a1,68(sp)
20402c86:	c0b2                	sw	a2,64(sp)
20402c88:	de36                	sw	a3,60(sp)
20402c8a:	dc3a                	sw	a4,56(sp)
20402c8c:	da3e                	sw	a5,52(sp)
20402c8e:	d842                	sw	a6,48(sp)
20402c90:	d646                	sw	a7,44(sp)
20402c92:	d472                	sw	t3,40(sp)
20402c94:	d276                	sw	t4,36(sp)
20402c96:	d07a                	sw	t5,32(sp)
20402c98:	ce7e                	sw	t6,28(sp)
20402c9a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402c9c:	ac7ff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402ca0:	872a                	mv	a4,a0
20402ca2:	070a                	slli	a4,a4,0x2
20402ca4:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402ca8:	97ba                	add	a5,a5,a4
20402caa:	439c                	lw	a5,0(a5)
20402cac:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:210

    if ( cpu ) {
20402cb0:	fac42783          	lw	a5,-84(s0)
20402cb4:	c78d                	beqz	a5,20402cde <metal_lc0_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:212
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402cb6:	fac42503          	lw	a0,-84(s0)
20402cba:	a53ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402cbe:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:213
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC0].exint_data;
20402cc2:	fa842783          	lw	a5,-88(s0)
20402cc6:	2187a783          	lw	a5,536(a5)
20402cca:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214
        intc->metal_int_table[METAL_INTERRUPT_ID_LC0].handler(METAL_INTERRUPT_ID_LC0, priv);
20402cce:	fa842783          	lw	a5,-88(s0)
20402cd2:	2107a783          	lw	a5,528(a5)
20402cd6:	fa442583          	lw	a1,-92(s0)
20402cda:	4541                	li	a0,16
20402cdc:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
    }
}
20402cde:	0001                	nop
20402ce0:	40f6                	lw	ra,92(sp)
20402ce2:	42e6                	lw	t0,88(sp)
20402ce4:	4356                	lw	t1,84(sp)
20402ce6:	43c6                	lw	t2,80(sp)
20402ce8:	4436                	lw	s0,76(sp)
20402cea:	4526                	lw	a0,72(sp)
20402cec:	4596                	lw	a1,68(sp)
20402cee:	4606                	lw	a2,64(sp)
20402cf0:	56f2                	lw	a3,60(sp)
20402cf2:	5762                	lw	a4,56(sp)
20402cf4:	57d2                	lw	a5,52(sp)
20402cf6:	5842                	lw	a6,48(sp)
20402cf8:	58b2                	lw	a7,44(sp)
20402cfa:	5e22                	lw	t3,40(sp)
20402cfc:	5e92                	lw	t4,36(sp)
20402cfe:	5f02                	lw	t5,32(sp)
20402d00:	4ff2                	lw	t6,28(sp)
20402d02:	6125                	addi	sp,sp,96
20402d04:	30200073          	mret

20402d08 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler (void) {
20402d08:	711d                	addi	sp,sp,-96
20402d0a:	ce86                	sw	ra,92(sp)
20402d0c:	cc96                	sw	t0,88(sp)
20402d0e:	ca9a                	sw	t1,84(sp)
20402d10:	c89e                	sw	t2,80(sp)
20402d12:	c6a2                	sw	s0,76(sp)
20402d14:	c4aa                	sw	a0,72(sp)
20402d16:	c2ae                	sw	a1,68(sp)
20402d18:	c0b2                	sw	a2,64(sp)
20402d1a:	de36                	sw	a3,60(sp)
20402d1c:	dc3a                	sw	a4,56(sp)
20402d1e:	da3e                	sw	a5,52(sp)
20402d20:	d842                	sw	a6,48(sp)
20402d22:	d646                	sw	a7,44(sp)
20402d24:	d472                	sw	t3,40(sp)
20402d26:	d276                	sw	t4,36(sp)
20402d28:	d07a                	sw	t5,32(sp)
20402d2a:	ce7e                	sw	t6,28(sp)
20402d2c:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:222
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402d2e:	a35ff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402d32:	872a                	mv	a4,a0
20402d34:	070a                	slli	a4,a4,0x2
20402d36:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402d3a:	97ba                	add	a5,a5,a4
20402d3c:	439c                	lw	a5,0(a5)
20402d3e:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

    if ( cpu ) {
20402d42:	fac42783          	lw	a5,-84(s0)
20402d46:	c78d                	beqz	a5,20402d70 <metal_lc1_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402d48:	fac42503          	lw	a0,-84(s0)
20402d4c:	9c1ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402d50:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:227
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC1].exint_data;
20402d54:	fa842783          	lw	a5,-88(s0)
20402d58:	2307a783          	lw	a5,560(a5)
20402d5c:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:228
        intc->metal_int_table[METAL_INTERRUPT_ID_LC1].handler(METAL_INTERRUPT_ID_LC1, priv);
20402d60:	fa842783          	lw	a5,-88(s0)
20402d64:	2287a783          	lw	a5,552(a5)
20402d68:	fa442583          	lw	a1,-92(s0)
20402d6c:	4545                	li	a0,17
20402d6e:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    }
}
20402d70:	0001                	nop
20402d72:	40f6                	lw	ra,92(sp)
20402d74:	42e6                	lw	t0,88(sp)
20402d76:	4356                	lw	t1,84(sp)
20402d78:	43c6                	lw	t2,80(sp)
20402d7a:	4436                	lw	s0,76(sp)
20402d7c:	4526                	lw	a0,72(sp)
20402d7e:	4596                	lw	a1,68(sp)
20402d80:	4606                	lw	a2,64(sp)
20402d82:	56f2                	lw	a3,60(sp)
20402d84:	5762                	lw	a4,56(sp)
20402d86:	57d2                	lw	a5,52(sp)
20402d88:	5842                	lw	a6,48(sp)
20402d8a:	58b2                	lw	a7,44(sp)
20402d8c:	5e22                	lw	t3,40(sp)
20402d8e:	5e92                	lw	t4,36(sp)
20402d90:	5f02                	lw	t5,32(sp)
20402d92:	4ff2                	lw	t6,28(sp)
20402d94:	6125                	addi	sp,sp,96
20402d96:	30200073          	mret

20402d9a <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:233

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler (void) {
20402d9a:	711d                	addi	sp,sp,-96
20402d9c:	ce86                	sw	ra,92(sp)
20402d9e:	cc96                	sw	t0,88(sp)
20402da0:	ca9a                	sw	t1,84(sp)
20402da2:	c89e                	sw	t2,80(sp)
20402da4:	c6a2                	sw	s0,76(sp)
20402da6:	c4aa                	sw	a0,72(sp)
20402da8:	c2ae                	sw	a1,68(sp)
20402daa:	c0b2                	sw	a2,64(sp)
20402dac:	de36                	sw	a3,60(sp)
20402dae:	dc3a                	sw	a4,56(sp)
20402db0:	da3e                	sw	a5,52(sp)
20402db2:	d842                	sw	a6,48(sp)
20402db4:	d646                	sw	a7,44(sp)
20402db6:	d472                	sw	t3,40(sp)
20402db8:	d276                	sw	t4,36(sp)
20402dba:	d07a                	sw	t5,32(sp)
20402dbc:	ce7e                	sw	t6,28(sp)
20402dbe:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402dc0:	9a3ff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402dc4:	872a                	mv	a4,a0
20402dc6:	070a                	slli	a4,a4,0x2
20402dc8:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402dcc:	97ba                	add	a5,a5,a4
20402dce:	439c                	lw	a5,0(a5)
20402dd0:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:238

    if ( cpu ) {
20402dd4:	fac42783          	lw	a5,-84(s0)
20402dd8:	c78d                	beqz	a5,20402e02 <metal_lc2_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402dda:	fac42503          	lw	a0,-84(s0)
20402dde:	92fff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402de2:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC2].exint_data;
20402de6:	fa842783          	lw	a5,-88(s0)
20402dea:	2487a783          	lw	a5,584(a5)
20402dee:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:242
        intc->metal_int_table[METAL_INTERRUPT_ID_LC2].handler(METAL_INTERRUPT_ID_LC2, priv);
20402df2:	fa842783          	lw	a5,-88(s0)
20402df6:	2407a783          	lw	a5,576(a5)
20402dfa:	fa442583          	lw	a1,-92(s0)
20402dfe:	4549                	li	a0,18
20402e00:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244
    }
}
20402e02:	0001                	nop
20402e04:	40f6                	lw	ra,92(sp)
20402e06:	42e6                	lw	t0,88(sp)
20402e08:	4356                	lw	t1,84(sp)
20402e0a:	43c6                	lw	t2,80(sp)
20402e0c:	4436                	lw	s0,76(sp)
20402e0e:	4526                	lw	a0,72(sp)
20402e10:	4596                	lw	a1,68(sp)
20402e12:	4606                	lw	a2,64(sp)
20402e14:	56f2                	lw	a3,60(sp)
20402e16:	5762                	lw	a4,56(sp)
20402e18:	57d2                	lw	a5,52(sp)
20402e1a:	5842                	lw	a6,48(sp)
20402e1c:	58b2                	lw	a7,44(sp)
20402e1e:	5e22                	lw	t3,40(sp)
20402e20:	5e92                	lw	t4,36(sp)
20402e22:	5f02                	lw	t5,32(sp)
20402e24:	4ff2                	lw	t6,28(sp)
20402e26:	6125                	addi	sp,sp,96
20402e28:	30200073          	mret

20402e2c <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:247

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler (void) {
20402e2c:	711d                	addi	sp,sp,-96
20402e2e:	ce86                	sw	ra,92(sp)
20402e30:	cc96                	sw	t0,88(sp)
20402e32:	ca9a                	sw	t1,84(sp)
20402e34:	c89e                	sw	t2,80(sp)
20402e36:	c6a2                	sw	s0,76(sp)
20402e38:	c4aa                	sw	a0,72(sp)
20402e3a:	c2ae                	sw	a1,68(sp)
20402e3c:	c0b2                	sw	a2,64(sp)
20402e3e:	de36                	sw	a3,60(sp)
20402e40:	dc3a                	sw	a4,56(sp)
20402e42:	da3e                	sw	a5,52(sp)
20402e44:	d842                	sw	a6,48(sp)
20402e46:	d646                	sw	a7,44(sp)
20402e48:	d472                	sw	t3,40(sp)
20402e4a:	d276                	sw	t4,36(sp)
20402e4c:	d07a                	sw	t5,32(sp)
20402e4e:	ce7e                	sw	t6,28(sp)
20402e50:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402e52:	911ff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402e56:	872a                	mv	a4,a0
20402e58:	070a                	slli	a4,a4,0x2
20402e5a:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402e5e:	97ba                	add	a5,a5,a4
20402e60:	439c                	lw	a5,0(a5)
20402e62:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:252

    if ( cpu ) {
20402e66:	fac42783          	lw	a5,-84(s0)
20402e6a:	c78d                	beqz	a5,20402e94 <metal_lc3_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402e6c:	fac42503          	lw	a0,-84(s0)
20402e70:	89dff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402e74:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC3].exint_data;
20402e78:	fa842783          	lw	a5,-88(s0)
20402e7c:	2607a783          	lw	a5,608(a5)
20402e80:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
        intc->metal_int_table[METAL_INTERRUPT_ID_LC3].handler(METAL_INTERRUPT_ID_LC3, priv);
20402e84:	fa842783          	lw	a5,-88(s0)
20402e88:	2587a783          	lw	a5,600(a5)
20402e8c:	fa442583          	lw	a1,-92(s0)
20402e90:	454d                	li	a0,19
20402e92:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:258
    }
}
20402e94:	0001                	nop
20402e96:	40f6                	lw	ra,92(sp)
20402e98:	42e6                	lw	t0,88(sp)
20402e9a:	4356                	lw	t1,84(sp)
20402e9c:	43c6                	lw	t2,80(sp)
20402e9e:	4436                	lw	s0,76(sp)
20402ea0:	4526                	lw	a0,72(sp)
20402ea2:	4596                	lw	a1,68(sp)
20402ea4:	4606                	lw	a2,64(sp)
20402ea6:	56f2                	lw	a3,60(sp)
20402ea8:	5762                	lw	a4,56(sp)
20402eaa:	57d2                	lw	a5,52(sp)
20402eac:	5842                	lw	a6,48(sp)
20402eae:	58b2                	lw	a7,44(sp)
20402eb0:	5e22                	lw	t3,40(sp)
20402eb2:	5e92                	lw	t4,36(sp)
20402eb4:	5f02                	lw	t5,32(sp)
20402eb6:	4ff2                	lw	t6,28(sp)
20402eb8:	6125                	addi	sp,sp,96
20402eba:	30200073          	mret

20402ebe <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler (void) {
20402ebe:	711d                	addi	sp,sp,-96
20402ec0:	ce86                	sw	ra,92(sp)
20402ec2:	cc96                	sw	t0,88(sp)
20402ec4:	ca9a                	sw	t1,84(sp)
20402ec6:	c89e                	sw	t2,80(sp)
20402ec8:	c6a2                	sw	s0,76(sp)
20402eca:	c4aa                	sw	a0,72(sp)
20402ecc:	c2ae                	sw	a1,68(sp)
20402ece:	c0b2                	sw	a2,64(sp)
20402ed0:	de36                	sw	a3,60(sp)
20402ed2:	dc3a                	sw	a4,56(sp)
20402ed4:	da3e                	sw	a5,52(sp)
20402ed6:	d842                	sw	a6,48(sp)
20402ed8:	d646                	sw	a7,44(sp)
20402eda:	d472                	sw	t3,40(sp)
20402edc:	d276                	sw	t4,36(sp)
20402ede:	d07a                	sw	t5,32(sp)
20402ee0:	ce7e                	sw	t6,28(sp)
20402ee2:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:264
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402ee4:	87fff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402ee8:	872a                	mv	a4,a0
20402eea:	070a                	slli	a4,a4,0x2
20402eec:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402ef0:	97ba                	add	a5,a5,a4
20402ef2:	439c                	lw	a5,0(a5)
20402ef4:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266

    if ( cpu ) {
20402ef8:	fac42783          	lw	a5,-84(s0)
20402efc:	c78d                	beqz	a5,20402f26 <metal_lc4_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:268
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402efe:	fac42503          	lw	a0,-84(s0)
20402f02:	80bff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402f06:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:269
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC4].exint_data;
20402f0a:	fa842783          	lw	a5,-88(s0)
20402f0e:	2787a783          	lw	a5,632(a5)
20402f12:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:270
        intc->metal_int_table[METAL_INTERRUPT_ID_LC4].handler(METAL_INTERRUPT_ID_LC4, priv);
20402f16:	fa842783          	lw	a5,-88(s0)
20402f1a:	2707a783          	lw	a5,624(a5)
20402f1e:	fa442583          	lw	a1,-92(s0)
20402f22:	4551                	li	a0,20
20402f24:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    }
}
20402f26:	0001                	nop
20402f28:	40f6                	lw	ra,92(sp)
20402f2a:	42e6                	lw	t0,88(sp)
20402f2c:	4356                	lw	t1,84(sp)
20402f2e:	43c6                	lw	t2,80(sp)
20402f30:	4436                	lw	s0,76(sp)
20402f32:	4526                	lw	a0,72(sp)
20402f34:	4596                	lw	a1,68(sp)
20402f36:	4606                	lw	a2,64(sp)
20402f38:	56f2                	lw	a3,60(sp)
20402f3a:	5762                	lw	a4,56(sp)
20402f3c:	57d2                	lw	a5,52(sp)
20402f3e:	5842                	lw	a6,48(sp)
20402f40:	58b2                	lw	a7,44(sp)
20402f42:	5e22                	lw	t3,40(sp)
20402f44:	5e92                	lw	t4,36(sp)
20402f46:	5f02                	lw	t5,32(sp)
20402f48:	4ff2                	lw	t6,28(sp)
20402f4a:	6125                	addi	sp,sp,96
20402f4c:	30200073          	mret

20402f50 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:275

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler (void) {
20402f50:	711d                	addi	sp,sp,-96
20402f52:	ce86                	sw	ra,92(sp)
20402f54:	cc96                	sw	t0,88(sp)
20402f56:	ca9a                	sw	t1,84(sp)
20402f58:	c89e                	sw	t2,80(sp)
20402f5a:	c6a2                	sw	s0,76(sp)
20402f5c:	c4aa                	sw	a0,72(sp)
20402f5e:	c2ae                	sw	a1,68(sp)
20402f60:	c0b2                	sw	a2,64(sp)
20402f62:	de36                	sw	a3,60(sp)
20402f64:	dc3a                	sw	a4,56(sp)
20402f66:	da3e                	sw	a5,52(sp)
20402f68:	d842                	sw	a6,48(sp)
20402f6a:	d646                	sw	a7,44(sp)
20402f6c:	d472                	sw	t3,40(sp)
20402f6e:	d276                	sw	t4,36(sp)
20402f70:	d07a                	sw	t5,32(sp)
20402f72:	ce7e                	sw	t6,28(sp)
20402f74:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402f76:	fecff0ef          	jal	ra,20402762 <__metal_myhart_id>
20402f7a:	872a                	mv	a4,a0
20402f7c:	070a                	slli	a4,a4,0x2
20402f7e:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20402f82:	97ba                	add	a5,a5,a4
20402f84:	439c                	lw	a5,0(a5)
20402f86:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:280

    if ( cpu ) {
20402f8a:	fac42783          	lw	a5,-84(s0)
20402f8e:	c78d                	beqz	a5,20402fb8 <metal_lc5_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:282
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402f90:	fac42503          	lw	a0,-84(s0)
20402f94:	f78ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20402f98:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC5].exint_data;
20402f9c:	fa842783          	lw	a5,-88(s0)
20402fa0:	2907a783          	lw	a5,656(a5)
20402fa4:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
        intc->metal_int_table[METAL_INTERRUPT_ID_LC5].handler(METAL_INTERRUPT_ID_LC5, priv);
20402fa8:	fa842783          	lw	a5,-88(s0)
20402fac:	2887a783          	lw	a5,648(a5)
20402fb0:	fa442583          	lw	a1,-92(s0)
20402fb4:	4555                	li	a0,21
20402fb6:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:286
    }
}
20402fb8:	0001                	nop
20402fba:	40f6                	lw	ra,92(sp)
20402fbc:	42e6                	lw	t0,88(sp)
20402fbe:	4356                	lw	t1,84(sp)
20402fc0:	43c6                	lw	t2,80(sp)
20402fc2:	4436                	lw	s0,76(sp)
20402fc4:	4526                	lw	a0,72(sp)
20402fc6:	4596                	lw	a1,68(sp)
20402fc8:	4606                	lw	a2,64(sp)
20402fca:	56f2                	lw	a3,60(sp)
20402fcc:	5762                	lw	a4,56(sp)
20402fce:	57d2                	lw	a5,52(sp)
20402fd0:	5842                	lw	a6,48(sp)
20402fd2:	58b2                	lw	a7,44(sp)
20402fd4:	5e22                	lw	t3,40(sp)
20402fd6:	5e92                	lw	t4,36(sp)
20402fd8:	5f02                	lw	t5,32(sp)
20402fda:	4ff2                	lw	t6,28(sp)
20402fdc:	6125                	addi	sp,sp,96
20402fde:	30200073          	mret

20402fe2 <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler (void) {
20402fe2:	711d                	addi	sp,sp,-96
20402fe4:	ce86                	sw	ra,92(sp)
20402fe6:	cc96                	sw	t0,88(sp)
20402fe8:	ca9a                	sw	t1,84(sp)
20402fea:	c89e                	sw	t2,80(sp)
20402fec:	c6a2                	sw	s0,76(sp)
20402fee:	c4aa                	sw	a0,72(sp)
20402ff0:	c2ae                	sw	a1,68(sp)
20402ff2:	c0b2                	sw	a2,64(sp)
20402ff4:	de36                	sw	a3,60(sp)
20402ff6:	dc3a                	sw	a4,56(sp)
20402ff8:	da3e                	sw	a5,52(sp)
20402ffa:	d842                	sw	a6,48(sp)
20402ffc:	d646                	sw	a7,44(sp)
20402ffe:	d472                	sw	t3,40(sp)
20403000:	d276                	sw	t4,36(sp)
20403002:	d07a                	sw	t5,32(sp)
20403004:	ce7e                	sw	t6,28(sp)
20403006:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:292
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403008:	f5aff0ef          	jal	ra,20402762 <__metal_myhart_id>
2040300c:	872a                	mv	a4,a0
2040300e:	070a                	slli	a4,a4,0x2
20403010:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20403014:	97ba                	add	a5,a5,a4
20403016:	439c                	lw	a5,0(a5)
20403018:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:294

    if ( cpu ) {
2040301c:	fac42783          	lw	a5,-84(s0)
20403020:	c78d                	beqz	a5,2040304a <metal_lc6_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403022:	fac42503          	lw	a0,-84(s0)
20403026:	ee6ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
2040302a:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC6].exint_data;
2040302e:	fa842783          	lw	a5,-88(s0)
20403032:	2a87a783          	lw	a5,680(a5)
20403036:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:298
        intc->metal_int_table[METAL_INTERRUPT_ID_LC6].handler(METAL_INTERRUPT_ID_LC6, priv);
2040303a:	fa842783          	lw	a5,-88(s0)
2040303e:	2a07a783          	lw	a5,672(a5)
20403042:	fa442583          	lw	a1,-92(s0)
20403046:	4559                	li	a0,22
20403048:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:300
    }
}
2040304a:	0001                	nop
2040304c:	40f6                	lw	ra,92(sp)
2040304e:	42e6                	lw	t0,88(sp)
20403050:	4356                	lw	t1,84(sp)
20403052:	43c6                	lw	t2,80(sp)
20403054:	4436                	lw	s0,76(sp)
20403056:	4526                	lw	a0,72(sp)
20403058:	4596                	lw	a1,68(sp)
2040305a:	4606                	lw	a2,64(sp)
2040305c:	56f2                	lw	a3,60(sp)
2040305e:	5762                	lw	a4,56(sp)
20403060:	57d2                	lw	a5,52(sp)
20403062:	5842                	lw	a6,48(sp)
20403064:	58b2                	lw	a7,44(sp)
20403066:	5e22                	lw	t3,40(sp)
20403068:	5e92                	lw	t4,36(sp)
2040306a:	5f02                	lw	t5,32(sp)
2040306c:	4ff2                	lw	t6,28(sp)
2040306e:	6125                	addi	sp,sp,96
20403070:	30200073          	mret

20403074 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler (void) {
20403074:	711d                	addi	sp,sp,-96
20403076:	ce86                	sw	ra,92(sp)
20403078:	cc96                	sw	t0,88(sp)
2040307a:	ca9a                	sw	t1,84(sp)
2040307c:	c89e                	sw	t2,80(sp)
2040307e:	c6a2                	sw	s0,76(sp)
20403080:	c4aa                	sw	a0,72(sp)
20403082:	c2ae                	sw	a1,68(sp)
20403084:	c0b2                	sw	a2,64(sp)
20403086:	de36                	sw	a3,60(sp)
20403088:	dc3a                	sw	a4,56(sp)
2040308a:	da3e                	sw	a5,52(sp)
2040308c:	d842                	sw	a6,48(sp)
2040308e:	d646                	sw	a7,44(sp)
20403090:	d472                	sw	t3,40(sp)
20403092:	d276                	sw	t4,36(sp)
20403094:	d07a                	sw	t5,32(sp)
20403096:	ce7e                	sw	t6,28(sp)
20403098:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:306
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040309a:	ec8ff0ef          	jal	ra,20402762 <__metal_myhart_id>
2040309e:	872a                	mv	a4,a0
204030a0:	070a                	slli	a4,a4,0x2
204030a2:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
204030a6:	97ba                	add	a5,a5,a4
204030a8:	439c                	lw	a5,0(a5)
204030aa:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:308

    if ( cpu ) {
204030ae:	fac42783          	lw	a5,-84(s0)
204030b2:	c78d                	beqz	a5,204030dc <metal_lc7_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:310
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204030b4:	fac42503          	lw	a0,-84(s0)
204030b8:	e54ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
204030bc:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC7].exint_data;
204030c0:	fa842783          	lw	a5,-88(s0)
204030c4:	2c07a783          	lw	a5,704(a5)
204030c8:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:312
        intc->metal_int_table[METAL_INTERRUPT_ID_LC7].handler(METAL_INTERRUPT_ID_LC7, priv);
204030cc:	fa842783          	lw	a5,-88(s0)
204030d0:	2b87a783          	lw	a5,696(a5)
204030d4:	fa442583          	lw	a1,-92(s0)
204030d8:	455d                	li	a0,23
204030da:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
    }
}
204030dc:	0001                	nop
204030de:	40f6                	lw	ra,92(sp)
204030e0:	42e6                	lw	t0,88(sp)
204030e2:	4356                	lw	t1,84(sp)
204030e4:	43c6                	lw	t2,80(sp)
204030e6:	4436                	lw	s0,76(sp)
204030e8:	4526                	lw	a0,72(sp)
204030ea:	4596                	lw	a1,68(sp)
204030ec:	4606                	lw	a2,64(sp)
204030ee:	56f2                	lw	a3,60(sp)
204030f0:	5762                	lw	a4,56(sp)
204030f2:	57d2                	lw	a5,52(sp)
204030f4:	5842                	lw	a6,48(sp)
204030f6:	58b2                	lw	a7,44(sp)
204030f8:	5e22                	lw	t3,40(sp)
204030fa:	5e92                	lw	t4,36(sp)
204030fc:	5f02                	lw	t5,32(sp)
204030fe:	4ff2                	lw	t6,28(sp)
20403100:	6125                	addi	sp,sp,96
20403102:	30200073          	mret

20403106 <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler (void) {
20403106:	711d                	addi	sp,sp,-96
20403108:	ce86                	sw	ra,92(sp)
2040310a:	cc96                	sw	t0,88(sp)
2040310c:	ca9a                	sw	t1,84(sp)
2040310e:	c89e                	sw	t2,80(sp)
20403110:	c6a2                	sw	s0,76(sp)
20403112:	c4aa                	sw	a0,72(sp)
20403114:	c2ae                	sw	a1,68(sp)
20403116:	c0b2                	sw	a2,64(sp)
20403118:	de36                	sw	a3,60(sp)
2040311a:	dc3a                	sw	a4,56(sp)
2040311c:	da3e                	sw	a5,52(sp)
2040311e:	d842                	sw	a6,48(sp)
20403120:	d646                	sw	a7,44(sp)
20403122:	d472                	sw	t3,40(sp)
20403124:	d276                	sw	t4,36(sp)
20403126:	d07a                	sw	t5,32(sp)
20403128:	ce7e                	sw	t6,28(sp)
2040312a:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040312c:	e36ff0ef          	jal	ra,20402762 <__metal_myhart_id>
20403130:	872a                	mv	a4,a0
20403132:	070a                	slli	a4,a4,0x2
20403134:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20403138:	97ba                	add	a5,a5,a4
2040313a:	439c                	lw	a5,0(a5)
2040313c:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322

    if ( cpu ) {
20403140:	fac42783          	lw	a5,-84(s0)
20403144:	c78d                	beqz	a5,2040316e <metal_lc8_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403146:	fac42503          	lw	a0,-84(s0)
2040314a:	dc2ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
2040314e:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:325
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC8].exint_data;
20403152:	fa842783          	lw	a5,-88(s0)
20403156:	2d87a783          	lw	a5,728(a5)
2040315a:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:326
        intc->metal_int_table[METAL_INTERRUPT_ID_LC8].handler(METAL_INTERRUPT_ID_LC8, priv);
2040315e:	fa842783          	lw	a5,-88(s0)
20403162:	2d07a783          	lw	a5,720(a5)
20403166:	fa442583          	lw	a1,-92(s0)
2040316a:	4561                	li	a0,24
2040316c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
    }
}
2040316e:	0001                	nop
20403170:	40f6                	lw	ra,92(sp)
20403172:	42e6                	lw	t0,88(sp)
20403174:	4356                	lw	t1,84(sp)
20403176:	43c6                	lw	t2,80(sp)
20403178:	4436                	lw	s0,76(sp)
2040317a:	4526                	lw	a0,72(sp)
2040317c:	4596                	lw	a1,68(sp)
2040317e:	4606                	lw	a2,64(sp)
20403180:	56f2                	lw	a3,60(sp)
20403182:	5762                	lw	a4,56(sp)
20403184:	57d2                	lw	a5,52(sp)
20403186:	5842                	lw	a6,48(sp)
20403188:	58b2                	lw	a7,44(sp)
2040318a:	5e22                	lw	t3,40(sp)
2040318c:	5e92                	lw	t4,36(sp)
2040318e:	5f02                	lw	t5,32(sp)
20403190:	4ff2                	lw	t6,28(sp)
20403192:	6125                	addi	sp,sp,96
20403194:	30200073          	mret

20403198 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler (void) {
20403198:	711d                	addi	sp,sp,-96
2040319a:	ce86                	sw	ra,92(sp)
2040319c:	cc96                	sw	t0,88(sp)
2040319e:	ca9a                	sw	t1,84(sp)
204031a0:	c89e                	sw	t2,80(sp)
204031a2:	c6a2                	sw	s0,76(sp)
204031a4:	c4aa                	sw	a0,72(sp)
204031a6:	c2ae                	sw	a1,68(sp)
204031a8:	c0b2                	sw	a2,64(sp)
204031aa:	de36                	sw	a3,60(sp)
204031ac:	dc3a                	sw	a4,56(sp)
204031ae:	da3e                	sw	a5,52(sp)
204031b0:	d842                	sw	a6,48(sp)
204031b2:	d646                	sw	a7,44(sp)
204031b4:	d472                	sw	t3,40(sp)
204031b6:	d276                	sw	t4,36(sp)
204031b8:	d07a                	sw	t5,32(sp)
204031ba:	ce7e                	sw	t6,28(sp)
204031bc:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204031be:	da4ff0ef          	jal	ra,20402762 <__metal_myhart_id>
204031c2:	872a                	mv	a4,a0
204031c4:	070a                	slli	a4,a4,0x2
204031c6:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
204031ca:	97ba                	add	a5,a5,a4
204031cc:	439c                	lw	a5,0(a5)
204031ce:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336

    if ( cpu ) {
204031d2:	fac42783          	lw	a5,-84(s0)
204031d6:	c78d                	beqz	a5,20403200 <metal_lc9_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204031d8:	fac42503          	lw	a0,-84(s0)
204031dc:	d30ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
204031e0:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:339
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC9].exint_data;
204031e4:	fa842783          	lw	a5,-88(s0)
204031e8:	2f07a783          	lw	a5,752(a5)
204031ec:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        intc->metal_int_table[METAL_INTERRUPT_ID_LC9].handler(METAL_INTERRUPT_ID_LC9, priv);
204031f0:	fa842783          	lw	a5,-88(s0)
204031f4:	2e87a783          	lw	a5,744(a5)
204031f8:	fa442583          	lw	a1,-92(s0)
204031fc:	4565                	li	a0,25
204031fe:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
    }
}
20403200:	0001                	nop
20403202:	40f6                	lw	ra,92(sp)
20403204:	42e6                	lw	t0,88(sp)
20403206:	4356                	lw	t1,84(sp)
20403208:	43c6                	lw	t2,80(sp)
2040320a:	4436                	lw	s0,76(sp)
2040320c:	4526                	lw	a0,72(sp)
2040320e:	4596                	lw	a1,68(sp)
20403210:	4606                	lw	a2,64(sp)
20403212:	56f2                	lw	a3,60(sp)
20403214:	5762                	lw	a4,56(sp)
20403216:	57d2                	lw	a5,52(sp)
20403218:	5842                	lw	a6,48(sp)
2040321a:	58b2                	lw	a7,44(sp)
2040321c:	5e22                	lw	t3,40(sp)
2040321e:	5e92                	lw	t4,36(sp)
20403220:	5f02                	lw	t5,32(sp)
20403222:	4ff2                	lw	t6,28(sp)
20403224:	6125                	addi	sp,sp,96
20403226:	30200073          	mret

2040322a <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:345

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc10_interrupt_vector_handler (void) {
2040322a:	711d                	addi	sp,sp,-96
2040322c:	ce86                	sw	ra,92(sp)
2040322e:	cc96                	sw	t0,88(sp)
20403230:	ca9a                	sw	t1,84(sp)
20403232:	c89e                	sw	t2,80(sp)
20403234:	c6a2                	sw	s0,76(sp)
20403236:	c4aa                	sw	a0,72(sp)
20403238:	c2ae                	sw	a1,68(sp)
2040323a:	c0b2                	sw	a2,64(sp)
2040323c:	de36                	sw	a3,60(sp)
2040323e:	dc3a                	sw	a4,56(sp)
20403240:	da3e                	sw	a5,52(sp)
20403242:	d842                	sw	a6,48(sp)
20403244:	d646                	sw	a7,44(sp)
20403246:	d472                	sw	t3,40(sp)
20403248:	d276                	sw	t4,36(sp)
2040324a:	d07a                	sw	t5,32(sp)
2040324c:	ce7e                	sw	t6,28(sp)
2040324e:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:348
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403250:	d12ff0ef          	jal	ra,20402762 <__metal_myhart_id>
20403254:	872a                	mv	a4,a0
20403256:	070a                	slli	a4,a4,0x2
20403258:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
2040325c:	97ba                	add	a5,a5,a4
2040325e:	439c                	lw	a5,0(a5)
20403260:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:350

    if ( cpu ) {
20403264:	fac42783          	lw	a5,-84(s0)
20403268:	c78d                	beqz	a5,20403292 <metal_lc10_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:352
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040326a:	fac42503          	lw	a0,-84(s0)
2040326e:	c9eff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403272:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:353
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC10].exint_data;
20403276:	fa842783          	lw	a5,-88(s0)
2040327a:	3087a783          	lw	a5,776(a5)
2040327e:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:354
        intc->metal_int_table[METAL_INTERRUPT_ID_LC10].handler(METAL_INTERRUPT_ID_LC10, priv);
20403282:	fa842783          	lw	a5,-88(s0)
20403286:	3007a783          	lw	a5,768(a5)
2040328a:	fa442583          	lw	a1,-92(s0)
2040328e:	4569                	li	a0,26
20403290:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:356
    }
}
20403292:	0001                	nop
20403294:	40f6                	lw	ra,92(sp)
20403296:	42e6                	lw	t0,88(sp)
20403298:	4356                	lw	t1,84(sp)
2040329a:	43c6                	lw	t2,80(sp)
2040329c:	4436                	lw	s0,76(sp)
2040329e:	4526                	lw	a0,72(sp)
204032a0:	4596                	lw	a1,68(sp)
204032a2:	4606                	lw	a2,64(sp)
204032a4:	56f2                	lw	a3,60(sp)
204032a6:	5762                	lw	a4,56(sp)
204032a8:	57d2                	lw	a5,52(sp)
204032aa:	5842                	lw	a6,48(sp)
204032ac:	58b2                	lw	a7,44(sp)
204032ae:	5e22                	lw	t3,40(sp)
204032b0:	5e92                	lw	t4,36(sp)
204032b2:	5f02                	lw	t5,32(sp)
204032b4:	4ff2                	lw	t6,28(sp)
204032b6:	6125                	addi	sp,sp,96
204032b8:	30200073          	mret

204032bc <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:359

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc11_interrupt_vector_handler (void) {
204032bc:	711d                	addi	sp,sp,-96
204032be:	ce86                	sw	ra,92(sp)
204032c0:	cc96                	sw	t0,88(sp)
204032c2:	ca9a                	sw	t1,84(sp)
204032c4:	c89e                	sw	t2,80(sp)
204032c6:	c6a2                	sw	s0,76(sp)
204032c8:	c4aa                	sw	a0,72(sp)
204032ca:	c2ae                	sw	a1,68(sp)
204032cc:	c0b2                	sw	a2,64(sp)
204032ce:	de36                	sw	a3,60(sp)
204032d0:	dc3a                	sw	a4,56(sp)
204032d2:	da3e                	sw	a5,52(sp)
204032d4:	d842                	sw	a6,48(sp)
204032d6:	d646                	sw	a7,44(sp)
204032d8:	d472                	sw	t3,40(sp)
204032da:	d276                	sw	t4,36(sp)
204032dc:	d07a                	sw	t5,32(sp)
204032de:	ce7e                	sw	t6,28(sp)
204032e0:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:362
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
204032e2:	c80ff0ef          	jal	ra,20402762 <__metal_myhart_id>
204032e6:	872a                	mv	a4,a0
204032e8:	070a                	slli	a4,a4,0x2
204032ea:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
204032ee:	97ba                	add	a5,a5,a4
204032f0:	439c                	lw	a5,0(a5)
204032f2:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:364

    if ( cpu ) {
204032f6:	fac42783          	lw	a5,-84(s0)
204032fa:	c78d                	beqz	a5,20403324 <metal_lc11_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:366
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204032fc:	fac42503          	lw	a0,-84(s0)
20403300:	c0cff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403304:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:367
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC11].exint_data;
20403308:	fa842783          	lw	a5,-88(s0)
2040330c:	3207a783          	lw	a5,800(a5)
20403310:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        intc->metal_int_table[METAL_INTERRUPT_ID_LC11].handler(METAL_INTERRUPT_ID_LC11, priv);
20403314:	fa842783          	lw	a5,-88(s0)
20403318:	3187a783          	lw	a5,792(a5)
2040331c:	fa442583          	lw	a1,-92(s0)
20403320:	456d                	li	a0,27
20403322:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    }
}
20403324:	0001                	nop
20403326:	40f6                	lw	ra,92(sp)
20403328:	42e6                	lw	t0,88(sp)
2040332a:	4356                	lw	t1,84(sp)
2040332c:	43c6                	lw	t2,80(sp)
2040332e:	4436                	lw	s0,76(sp)
20403330:	4526                	lw	a0,72(sp)
20403332:	4596                	lw	a1,68(sp)
20403334:	4606                	lw	a2,64(sp)
20403336:	56f2                	lw	a3,60(sp)
20403338:	5762                	lw	a4,56(sp)
2040333a:	57d2                	lw	a5,52(sp)
2040333c:	5842                	lw	a6,48(sp)
2040333e:	58b2                	lw	a7,44(sp)
20403340:	5e22                	lw	t3,40(sp)
20403342:	5e92                	lw	t4,36(sp)
20403344:	5f02                	lw	t5,32(sp)
20403346:	4ff2                	lw	t6,28(sp)
20403348:	6125                	addi	sp,sp,96
2040334a:	30200073          	mret

2040334e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc12_interrupt_vector_handler (void) {
2040334e:	711d                	addi	sp,sp,-96
20403350:	ce86                	sw	ra,92(sp)
20403352:	cc96                	sw	t0,88(sp)
20403354:	ca9a                	sw	t1,84(sp)
20403356:	c89e                	sw	t2,80(sp)
20403358:	c6a2                	sw	s0,76(sp)
2040335a:	c4aa                	sw	a0,72(sp)
2040335c:	c2ae                	sw	a1,68(sp)
2040335e:	c0b2                	sw	a2,64(sp)
20403360:	de36                	sw	a3,60(sp)
20403362:	dc3a                	sw	a4,56(sp)
20403364:	da3e                	sw	a5,52(sp)
20403366:	d842                	sw	a6,48(sp)
20403368:	d646                	sw	a7,44(sp)
2040336a:	d472                	sw	t3,40(sp)
2040336c:	d276                	sw	t4,36(sp)
2040336e:	d07a                	sw	t5,32(sp)
20403370:	ce7e                	sw	t6,28(sp)
20403372:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:376
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403374:	beeff0ef          	jal	ra,20402762 <__metal_myhart_id>
20403378:	872a                	mv	a4,a0
2040337a:	070a                	slli	a4,a4,0x2
2040337c:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20403380:	97ba                	add	a5,a5,a4
20403382:	439c                	lw	a5,0(a5)
20403384:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378

    if ( cpu ) {
20403388:	fac42783          	lw	a5,-84(s0)
2040338c:	c78d                	beqz	a5,204033b6 <metal_lc12_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
2040338e:	fac42503          	lw	a0,-84(s0)
20403392:	b7aff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403396:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC12].exint_data;
2040339a:	fa842783          	lw	a5,-88(s0)
2040339e:	3387a783          	lw	a5,824(a5)
204033a2:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:382
        intc->metal_int_table[METAL_INTERRUPT_ID_LC12].handler(METAL_INTERRUPT_ID_LC12, priv);
204033a6:	fa842783          	lw	a5,-88(s0)
204033aa:	3307a783          	lw	a5,816(a5)
204033ae:	fa442583          	lw	a1,-92(s0)
204033b2:	4571                	li	a0,28
204033b4:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:384
    }
}
204033b6:	0001                	nop
204033b8:	40f6                	lw	ra,92(sp)
204033ba:	42e6                	lw	t0,88(sp)
204033bc:	4356                	lw	t1,84(sp)
204033be:	43c6                	lw	t2,80(sp)
204033c0:	4436                	lw	s0,76(sp)
204033c2:	4526                	lw	a0,72(sp)
204033c4:	4596                	lw	a1,68(sp)
204033c6:	4606                	lw	a2,64(sp)
204033c8:	56f2                	lw	a3,60(sp)
204033ca:	5762                	lw	a4,56(sp)
204033cc:	57d2                	lw	a5,52(sp)
204033ce:	5842                	lw	a6,48(sp)
204033d0:	58b2                	lw	a7,44(sp)
204033d2:	5e22                	lw	t3,40(sp)
204033d4:	5e92                	lw	t4,36(sp)
204033d6:	5f02                	lw	t5,32(sp)
204033d8:	4ff2                	lw	t6,28(sp)
204033da:	6125                	addi	sp,sp,96
204033dc:	30200073          	mret

204033e0 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc13_interrupt_vector_handler (void) {
204033e0:	711d                	addi	sp,sp,-96
204033e2:	ce86                	sw	ra,92(sp)
204033e4:	cc96                	sw	t0,88(sp)
204033e6:	ca9a                	sw	t1,84(sp)
204033e8:	c89e                	sw	t2,80(sp)
204033ea:	c6a2                	sw	s0,76(sp)
204033ec:	c4aa                	sw	a0,72(sp)
204033ee:	c2ae                	sw	a1,68(sp)
204033f0:	c0b2                	sw	a2,64(sp)
204033f2:	de36                	sw	a3,60(sp)
204033f4:	dc3a                	sw	a4,56(sp)
204033f6:	da3e                	sw	a5,52(sp)
204033f8:	d842                	sw	a6,48(sp)
204033fa:	d646                	sw	a7,44(sp)
204033fc:	d472                	sw	t3,40(sp)
204033fe:	d276                	sw	t4,36(sp)
20403400:	d07a                	sw	t5,32(sp)
20403402:	ce7e                	sw	t6,28(sp)
20403404:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:390
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403406:	b5cff0ef          	jal	ra,20402762 <__metal_myhart_id>
2040340a:	872a                	mv	a4,a0
2040340c:	070a                	slli	a4,a4,0x2
2040340e:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20403412:	97ba                	add	a5,a5,a4
20403414:	439c                	lw	a5,0(a5)
20403416:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:392

    if ( cpu ) {
2040341a:	fac42783          	lw	a5,-84(s0)
2040341e:	c78d                	beqz	a5,20403448 <metal_lc13_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403420:	fac42503          	lw	a0,-84(s0)
20403424:	ae8ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403428:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:395
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC13].exint_data;
2040342c:	fa842783          	lw	a5,-88(s0)
20403430:	3507a783          	lw	a5,848(a5)
20403434:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
        intc->metal_int_table[METAL_INTERRUPT_ID_LC13].handler(METAL_INTERRUPT_ID_LC13, priv);
20403438:	fa842783          	lw	a5,-88(s0)
2040343c:	3487a783          	lw	a5,840(a5)
20403440:	fa442583          	lw	a1,-92(s0)
20403444:	4575                	li	a0,29
20403446:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
    }
}
20403448:	0001                	nop
2040344a:	40f6                	lw	ra,92(sp)
2040344c:	42e6                	lw	t0,88(sp)
2040344e:	4356                	lw	t1,84(sp)
20403450:	43c6                	lw	t2,80(sp)
20403452:	4436                	lw	s0,76(sp)
20403454:	4526                	lw	a0,72(sp)
20403456:	4596                	lw	a1,68(sp)
20403458:	4606                	lw	a2,64(sp)
2040345a:	56f2                	lw	a3,60(sp)
2040345c:	5762                	lw	a4,56(sp)
2040345e:	57d2                	lw	a5,52(sp)
20403460:	5842                	lw	a6,48(sp)
20403462:	58b2                	lw	a7,44(sp)
20403464:	5e22                	lw	t3,40(sp)
20403466:	5e92                	lw	t4,36(sp)
20403468:	5f02                	lw	t5,32(sp)
2040346a:	4ff2                	lw	t6,28(sp)
2040346c:	6125                	addi	sp,sp,96
2040346e:	30200073          	mret

20403472 <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc14_interrupt_vector_handler (void) {
20403472:	711d                	addi	sp,sp,-96
20403474:	ce86                	sw	ra,92(sp)
20403476:	cc96                	sw	t0,88(sp)
20403478:	ca9a                	sw	t1,84(sp)
2040347a:	c89e                	sw	t2,80(sp)
2040347c:	c6a2                	sw	s0,76(sp)
2040347e:	c4aa                	sw	a0,72(sp)
20403480:	c2ae                	sw	a1,68(sp)
20403482:	c0b2                	sw	a2,64(sp)
20403484:	de36                	sw	a3,60(sp)
20403486:	dc3a                	sw	a4,56(sp)
20403488:	da3e                	sw	a5,52(sp)
2040348a:	d842                	sw	a6,48(sp)
2040348c:	d646                	sw	a7,44(sp)
2040348e:	d472                	sw	t3,40(sp)
20403490:	d276                	sw	t4,36(sp)
20403492:	d07a                	sw	t5,32(sp)
20403494:	ce7e                	sw	t6,28(sp)
20403496:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:404
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20403498:	acaff0ef          	jal	ra,20402762 <__metal_myhart_id>
2040349c:	872a                	mv	a4,a0
2040349e:	070a                	slli	a4,a4,0x2
204034a0:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
204034a4:	97ba                	add	a5,a5,a4
204034a6:	439c                	lw	a5,0(a5)
204034a8:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:406

    if ( cpu ) {
204034ac:	fac42783          	lw	a5,-84(s0)
204034b0:	c78d                	beqz	a5,204034da <metal_lc14_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
204034b2:	fac42503          	lw	a0,-84(s0)
204034b6:	a56ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
204034ba:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:409
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC14].exint_data;
204034be:	fa842783          	lw	a5,-88(s0)
204034c2:	3687a783          	lw	a5,872(a5)
204034c6:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
        intc->metal_int_table[METAL_INTERRUPT_ID_LC14].handler(METAL_INTERRUPT_ID_LC14, priv);
204034ca:	fa842783          	lw	a5,-88(s0)
204034ce:	3607a783          	lw	a5,864(a5)
204034d2:	fa442583          	lw	a1,-92(s0)
204034d6:	4579                	li	a0,30
204034d8:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
    }
}
204034da:	0001                	nop
204034dc:	40f6                	lw	ra,92(sp)
204034de:	42e6                	lw	t0,88(sp)
204034e0:	4356                	lw	t1,84(sp)
204034e2:	43c6                	lw	t2,80(sp)
204034e4:	4436                	lw	s0,76(sp)
204034e6:	4526                	lw	a0,72(sp)
204034e8:	4596                	lw	a1,68(sp)
204034ea:	4606                	lw	a2,64(sp)
204034ec:	56f2                	lw	a3,60(sp)
204034ee:	5762                	lw	a4,56(sp)
204034f0:	57d2                	lw	a5,52(sp)
204034f2:	5842                	lw	a6,48(sp)
204034f4:	58b2                	lw	a7,44(sp)
204034f6:	5e22                	lw	t3,40(sp)
204034f8:	5e92                	lw	t4,36(sp)
204034fa:	5f02                	lw	t5,32(sp)
204034fc:	4ff2                	lw	t6,28(sp)
204034fe:	6125                	addi	sp,sp,96
20403500:	30200073          	mret

20403504 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:415

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc15_interrupt_vector_handler (void) {
20403504:	711d                	addi	sp,sp,-96
20403506:	ce86                	sw	ra,92(sp)
20403508:	cc96                	sw	t0,88(sp)
2040350a:	ca9a                	sw	t1,84(sp)
2040350c:	c89e                	sw	t2,80(sp)
2040350e:	c6a2                	sw	s0,76(sp)
20403510:	c4aa                	sw	a0,72(sp)
20403512:	c2ae                	sw	a1,68(sp)
20403514:	c0b2                	sw	a2,64(sp)
20403516:	de36                	sw	a3,60(sp)
20403518:	dc3a                	sw	a4,56(sp)
2040351a:	da3e                	sw	a5,52(sp)
2040351c:	d842                	sw	a6,48(sp)
2040351e:	d646                	sw	a7,44(sp)
20403520:	d472                	sw	t3,40(sp)
20403522:	d276                	sw	t4,36(sp)
20403524:	d07a                	sw	t5,32(sp)
20403526:	ce7e                	sw	t6,28(sp)
20403528:	1080                	addi	s0,sp,96
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:418
    void *priv;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040352a:	a38ff0ef          	jal	ra,20402762 <__metal_myhart_id>
2040352e:	872a                	mv	a4,a0
20403530:	070a                	slli	a4,a4,0x2
20403532:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20403536:	97ba                	add	a5,a5,a4
20403538:	439c                	lw	a5,0(a5)
2040353a:	faf42623          	sw	a5,-84(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:420

    if ( cpu ) {
2040353e:	fac42783          	lw	a5,-84(s0)
20403542:	c78d                	beqz	a5,2040356c <metal_lc15_interrupt_vector_handler+0x68>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:422
        intc = (struct __metal_driver_riscv_cpu_intc *)
          __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20403544:	fac42503          	lw	a0,-84(s0)
20403548:	9c4ff0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
2040354c:	faa42423          	sw	a0,-88(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:423
        priv = intc->metal_int_table[METAL_INTERRUPT_ID_LC15].exint_data;
20403550:	fa842783          	lw	a5,-88(s0)
20403554:	3807a783          	lw	a5,896(a5)
20403558:	faf42223          	sw	a5,-92(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:424
        intc->metal_int_table[METAL_INTERRUPT_ID_LC15].handler(METAL_INTERRUPT_ID_LC15, priv);
2040355c:	fa842783          	lw	a5,-88(s0)
20403560:	3787a783          	lw	a5,888(a5)
20403564:	fa442583          	lw	a1,-92(s0)
20403568:	457d                	li	a0,31
2040356a:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:426
    }
}
2040356c:	0001                	nop
2040356e:	40f6                	lw	ra,92(sp)
20403570:	42e6                	lw	t0,88(sp)
20403572:	4356                	lw	t1,84(sp)
20403574:	43c6                	lw	t2,80(sp)
20403576:	4436                	lw	s0,76(sp)
20403578:	4526                	lw	a0,72(sp)
2040357a:	4596                	lw	a1,68(sp)
2040357c:	4606                	lw	a2,64(sp)
2040357e:	56f2                	lw	a3,60(sp)
20403580:	5762                	lw	a4,56(sp)
20403582:	57d2                	lw	a5,52(sp)
20403584:	5842                	lw	a6,48(sp)
20403586:	58b2                	lw	a7,44(sp)
20403588:	5e22                	lw	t3,40(sp)
2040358a:	5e92                	lw	t4,36(sp)
2040358c:	5f02                	lw	t5,32(sp)
2040358e:	4ff2                	lw	t6,28(sp)
20403590:	6125                	addi	sp,sp,96
20403592:	30200073          	mret

20403596 <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429

metal_vector_mode __metal_controller_interrupt_vector_mode (void)
{
20403596:	1101                	addi	sp,sp,-32
20403598:	ce22                	sw	s0,28(sp)
2040359a:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
    uintptr_t val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
2040359c:	305027f3          	csrr	a5,mtvec
204035a0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:433
    val &= METAL_MTVEC_MASK;
204035a4:	fec42783          	lw	a5,-20(s0)
204035a8:	03f7f793          	andi	a5,a5,63
204035ac:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:435

    switch (val) {
204035b0:	fec42703          	lw	a4,-20(s0)
204035b4:	4789                	li	a5,2
204035b6:	00f70d63          	beq	a4,a5,204035d0 <__metal_controller_interrupt_vector_mode+0x3a>
204035ba:	fec42703          	lw	a4,-20(s0)
204035be:	478d                	li	a5,3
204035c0:	00f70a63          	beq	a4,a5,204035d4 <__metal_controller_interrupt_vector_mode+0x3e>
204035c4:	fec42703          	lw	a4,-20(s0)
204035c8:	4785                	li	a5,1
204035ca:	00f70763          	beq	a4,a5,204035d8 <__metal_controller_interrupt_vector_mode+0x42>
204035ce:	a039                	j	204035dc <__metal_controller_interrupt_vector_mode+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:437
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
204035d0:	478d                	li	a5,3
204035d2:	a031                	j	204035de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204035d4:	4791                	li	a5,4
204035d6:	a021                	j	204035de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:441
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204035d8:	4785                	li	a5,1
204035da:	a011                	j	204035de <__metal_controller_interrupt_vector_mode+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    }
    return METAL_DIRECT_MODE;
204035dc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:444
}
204035de:	853e                	mv	a0,a5
204035e0:	4472                	lw	s0,28(sp)
204035e2:	6105                	addi	sp,sp,32
204035e4:	8082                	ret

204035e6 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
204035e6:	7179                	addi	sp,sp,-48
204035e8:	d622                	sw	s0,44(sp)
204035ea:	1800                	addi	s0,sp,48
204035ec:	fca42e23          	sw	a0,-36(s0)
204035f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
    uintptr_t trap_entry, val;

    __asm__ volatile ("csrr %0, mtvec" : "=r"(val));
204035f4:	305027f3          	csrr	a5,mtvec
204035f8:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:451
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204035fc:	fec42783          	lw	a5,-20(s0)
20403600:	fc07f793          	andi	a5,a5,-64
20403604:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:452
    trap_entry = (uintptr_t)vec_table;
20403608:	fd842783          	lw	a5,-40(s0)
2040360c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

    switch (mode) {
20403610:	fdc42703          	lw	a4,-36(s0)
20403614:	4791                	li	a5,4
20403616:	06e7e063          	bltu	a5,a4,20403676 <__metal_controller_interrupt_vector+0x90>
2040361a:	fdc42783          	lw	a5,-36(s0)
2040361e:	00279713          	slli	a4,a5,0x2
20403622:	204057b7          	lui	a5,0x20405
20403626:	71c78793          	addi	a5,a5,1820 # 2040571c <__metal_driver_vtable_riscv_clint0+0x4c>
2040362a:	97ba                	add	a5,a5,a4
2040362c:	439c                	lw	a5,0(a5)
2040362e:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457
    case METAL_SELECTIVE_NONVECTOR_MODE:
    case METAL_SELECTIVE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403630:	fe842783          	lw	a5,-24(s0)
20403634:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:458
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
20403638:	fec42783          	lw	a5,-20(s0)
2040363c:	0027e793          	ori	a5,a5,2
20403640:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        break;
20403644:	a80d                	j	20403676 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461
    case METAL_HARDWARE_VECTOR_MODE:
        __asm__ volatile ("csrw 0x307, %0" :: "r"(trap_entry));
20403646:	fe842783          	lw	a5,-24(s0)
2040364a:	30779073          	csrw	mtvt,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462
        __asm__ volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
2040364e:	fec42783          	lw	a5,-20(s0)
20403652:	0037e793          	ori	a5,a5,3
20403656:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:463
        break;
2040365a:	a831                	j	20403676 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
    case METAL_VECTOR_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
2040365c:	fe842783          	lw	a5,-24(s0)
20403660:	0017e793          	ori	a5,a5,1
20403664:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466
        break;
20403668:	a039                	j	20403676 <__metal_controller_interrupt_vector+0x90>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:468
    case METAL_DIRECT_MODE:
        __asm__ volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2040366a:	fe842783          	lw	a5,-24(s0)
2040366e:	9bf1                	andi	a5,a5,-4
20403670:	30579073          	csrw	mtvec,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:469
        break;
20403674:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:471
    }
}
20403676:	0001                	nop
20403678:	5432                	lw	s0,44(sp)
2040367a:	6145                	addi	sp,sp,48
2040367c:	8082                	ret

2040367e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:474

int __metal_valid_interrupt_id (int id)
{
2040367e:	1101                	addi	sp,sp,-32
20403680:	ce22                	sw	s0,28(sp)
20403682:	1000                	addi	s0,sp,32
20403684:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
    switch (id) {
20403688:	fec42783          	lw	a5,-20(s0)
2040368c:	17f5                	addi	a5,a5,-3
2040368e:	4771                	li	a4,28
20403690:	00f76d63          	bltu	a4,a5,204036aa <__metal_valid_interrupt_id+0x2c>
20403694:	00279713          	slli	a4,a5,0x2
20403698:	204057b7          	lui	a5,0x20405
2040369c:	73078793          	addi	a5,a5,1840 # 20405730 <__metal_driver_vtable_riscv_clint0+0x60>
204036a0:	97ba                	add	a5,a5,a4
204036a2:	439c                	lw	a5,0(a5)
204036a4:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
204036a6:	4785                	li	a5,1
204036a8:	a019                	j	204036ae <__metal_valid_interrupt_id+0x30>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:497
    default:
        break;
204036aa:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:500
    }

    return 0;
204036ac:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
}
204036ae:	853e                	mv	a0,a5
204036b0:	4472                	lw	s0,28(sp)
204036b2:	6105                	addi	sp,sp,32
204036b4:	8082                	ret

204036b6 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
204036b6:	7179                	addi	sp,sp,-48
204036b8:	d606                	sw	ra,44(sp)
204036ba:	d422                	sw	s0,40(sp)
204036bc:	1800                	addi	s0,sp,48
204036be:	fca42e23          	sw	a0,-36(s0)
204036c2:	fcb42c23          	sw	a1,-40(s0)
204036c6:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
    int rc = 0;
204036ca:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:509
  
    if ( !controller) {
204036ce:	fdc42783          	lw	a5,-36(s0)
204036d2:	e399                	bnez	a5,204036d8 <__metal_local_interrupt_enable+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        return -1;
204036d4:	57fd                	li	a5,-1
204036d6:	a849                	j	20403768 <__metal_local_interrupt_enable+0xb2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
    }

    switch (id) {
204036d8:	fd842703          	lw	a4,-40(s0)
204036dc:	47fd                	li	a5,31
204036de:	08e7e063          	bltu	a5,a4,2040375e <__metal_local_interrupt_enable+0xa8>
204036e2:	fd842783          	lw	a5,-40(s0)
204036e6:	00279713          	slli	a4,a5,0x2
204036ea:	204057b7          	lui	a5,0x20405
204036ee:	7a478793          	addi	a5,a5,1956 # 204057a4 <__metal_driver_vtable_riscv_clint0+0xd4>
204036f2:	97ba                	add	a5,a5,a4
204036f4:	439c                	lw	a5,0(a5)
204036f6:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:515
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204036f8:	fd442783          	lw	a5,-44(s0)
204036fc:	c781                	beqz	a5,20403704 <__metal_local_interrupt_enable+0x4e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
            __metal_interrupt_global_enable();
204036fe:	87eff0ef          	jal	ra,2040277c <__metal_interrupt_global_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403702:	a08d                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            __metal_interrupt_global_disable();
20403704:	890ff0ef          	jal	ra,20402794 <__metal_interrupt_global_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        break;
20403708:	a8b1                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
2040370a:	fd442783          	lw	a5,-44(s0)
2040370e:	c781                	beqz	a5,20403716 <__metal_local_interrupt_enable+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:523
            __metal_interrupt_software_enable();
20403710:	89cff0ef          	jal	ra,204027ac <__metal_interrupt_software_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        } else {
            __metal_interrupt_software_disable();
        }
        break;
20403714:	a881                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:525
            __metal_interrupt_software_disable();
20403716:	8aeff0ef          	jal	ra,204027c4 <__metal_interrupt_software_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:527
        break;
2040371a:	a0a9                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:529
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
2040371c:	fd442783          	lw	a5,-44(s0)
20403720:	c781                	beqz	a5,20403728 <__metal_local_interrupt_enable+0x72>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:530
	    __metal_interrupt_timer_enable();
20403722:	8baff0ef          	jal	ra,204027dc <__metal_interrupt_timer_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
20403726:	a83d                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:532
	    __metal_interrupt_timer_disable();
20403728:	8ceff0ef          	jal	ra,204027f6 <__metal_interrupt_timer_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:534
	break;
2040372c:	a825                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:536
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
2040372e:	fd442783          	lw	a5,-44(s0)
20403732:	c781                	beqz	a5,2040373a <__metal_local_interrupt_enable+0x84>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:537
            __metal_interrupt_external_enable();
20403734:	8dcff0ef          	jal	ra,20402810 <__metal_interrupt_external_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        } else {
            __metal_interrupt_external_disable();
        }
        break;
20403738:	a035                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:539
            __metal_interrupt_external_disable();
2040373a:	8f2ff0ef          	jal	ra,2040282c <__metal_interrupt_external_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:541
        break;
2040373e:	a01d                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403740:	fd442783          	lw	a5,-44(s0)
20403744:	c799                	beqz	a5,20403752 <__metal_local_interrupt_enable+0x9c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
            __metal_interrupt_local_enable(id);
20403746:	fd842783          	lw	a5,-40(s0)
2040374a:	853e                	mv	a0,a5
2040374c:	8fcff0ef          	jal	ra,20402848 <__metal_interrupt_local_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403750:	a811                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:561
            __metal_interrupt_local_disable(id);
20403752:	fd842783          	lw	a5,-40(s0)
20403756:	853e                	mv	a0,a5
20403758:	91cff0ef          	jal	ra,20402874 <__metal_interrupt_local_disable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:563
        break;
2040375c:	a021                	j	20403764 <__metal_local_interrupt_enable+0xae>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:565
    default:
        rc = -1;
2040375e:	57fd                	li	a5,-1
20403760:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:567
    }
    return rc;
20403764:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:568
}
20403768:	853e                	mv	a0,a5
2040376a:	50b2                	lw	ra,44(sp)
2040376c:	5422                	lw	s0,40(sp)
2040376e:	6145                	addi	sp,sp,48
20403770:	8082                	ret

20403772 <__metal_exception_register>:
__metal_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:572

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
20403772:	7179                	addi	sp,sp,-48
20403774:	d622                	sw	s0,44(sp)
20403776:	1800                	addi	s0,sp,48
20403778:	fca42e23          	sw	a0,-36(s0)
2040377c:	fcb42c23          	sw	a1,-40(s0)
20403780:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:573
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403784:	fdc42783          	lw	a5,-36(s0)
20403788:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
2040378c:	fd842703          	lw	a4,-40(s0)
20403790:	47ad                	li	a5,11
20403792:	02e7c263          	blt	a5,a4,204037b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:575 (discriminator 1)
20403796:	fd442783          	lw	a5,-44(s0)
2040379a:	cf91                	beqz	a5,204037b6 <__metal_exception_register+0x44>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:576
        intc->metal_exception_table[ecode] = isr;
2040379c:	fec42703          	lw	a4,-20(s0)
204037a0:	fd842783          	lw	a5,-40(s0)
204037a4:	0e078793          	addi	a5,a5,224
204037a8:	078a                	slli	a5,a5,0x2
204037aa:	97ba                	add	a5,a5,a4
204037ac:	fd442703          	lw	a4,-44(s0)
204037b0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:577
        return 0;
204037b2:	4781                	li	a5,0
204037b4:	a011                	j	204037b8 <__metal_exception_register+0x46>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:579
    }
    return -1;
204037b6:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:580
}
204037b8:	853e                	mv	a0,a5
204037ba:	5432                	lw	s0,44(sp)
204037bc:	6145                	addi	sp,sp,48
204037be:	8082                	ret

204037c0 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:583

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
204037c0:	7139                	addi	sp,sp,-64
204037c2:	de06                	sw	ra,60(sp)
204037c4:	dc22                	sw	s0,56(sp)
204037c6:	0080                	addi	s0,sp,64
204037c8:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:584
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204037cc:	fcc42783          	lw	a5,-52(s0)
204037d0:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:587
    uintptr_t val;

    if ( !intc->init_done ) {
204037d4:	fe442783          	lw	a5,-28(s0)
204037d8:	43dc                	lw	a5,4(a5)
204037da:	10079d63          	bnez	a5,204038f4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x134>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:589
        /* Disable and clear all interrupt sources */
        __asm__ volatile ("csrc mie, %0" :: "r"(-1));
204037de:	57fd                	li	a5,-1
204037e0:	3047b073          	csrc	mie,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:590
        __asm__ volatile ("csrc mip, %0" :: "r"(-1));
204037e4:	57fd                	li	a5,-1
204037e6:	3447b073          	csrc	mip,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:594

        /* Read the misa CSR to determine if the delegation registers exist */
        uintptr_t misa;
        __asm__ volatile ("csrr %0, misa" : "=r" (misa));
204037ea:	301027f3          	csrr	a5,misa
204037ee:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

        /* The delegation CSRs exist if user mode interrupts (N extension) or
         * supervisor mode (S extension) are supported */
        if((misa & METAL_ISA_N_EXTENSIONS) || (misa & METAL_ISA_S_EXTENSIONS)) {
204037f2:	fe042703          	lw	a4,-32(s0)
204037f6:	6789                	lui	a5,0x2
204037f8:	8ff9                	and	a5,a5,a4
204037fa:	e799                	bnez	a5,20403808 <__metal_driver_riscv_cpu_controller_interrupt_init+0x48>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598 (discriminator 1)
204037fc:	fe042703          	lw	a4,-32(s0)
20403800:	000407b7          	lui	a5,0x40
20403804:	8ff9                	and	a5,a5,a4
20403806:	c799                	beqz	a5,20403814 <__metal_driver_riscv_cpu_controller_interrupt_init+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:600
            /* Disable interrupt and exception delegation */
            __asm__ volatile ("csrc mideleg, %0" :: "r"(-1));
20403808:	57fd                	li	a5,-1
2040380a:	3037b073          	csrc	mideleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            __asm__ volatile ("csrc medeleg, %0" :: "r"(-1));
2040380e:	57fd                	li	a5,-1
20403810:	3027b073          	csrc	medeleg,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:605
        }

        /* The satp CSR exists if supervisor mode (S extension) is supported */
        if(misa & METAL_ISA_S_EXTENSIONS) {
20403814:	fe042703          	lw	a4,-32(s0)
20403818:	000407b7          	lui	a5,0x40
2040381c:	8ff9                	and	a5,a5,a4
2040381e:	c781                	beqz	a5,20403826 <__metal_driver_riscv_cpu_controller_interrupt_init+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:607
            /* Clear the entire CSR to make sure that satp.MODE = 0 */
            __asm__ volatile ("csrc satp, %0" :: "r"(-1));
20403820:	57fd                	li	a5,-1
20403822:	1807b073          	csrc	satp,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611
        }

        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20403826:	fe042623          	sw	zero,-20(s0)
2040382a:	a0b9                	j	20403878 <__metal_driver_riscv_cpu_controller_interrupt_init+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
2040382c:	fe442683          	lw	a3,-28(s0)
20403830:	fec42703          	lw	a4,-20(s0)
20403834:	87ba                	mv	a5,a4
20403836:	0786                	slli	a5,a5,0x1
20403838:	97ba                	add	a5,a5,a4
2040383a:	078e                	slli	a5,a5,0x3
2040383c:	97b6                	add	a5,a5,a3
2040383e:	0807a823          	sw	zero,144(a5) # 40090 <__heap_size+0x3f890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:613 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
20403842:	fe442683          	lw	a3,-28(s0)
20403846:	fec42703          	lw	a4,-20(s0)
2040384a:	87ba                	mv	a5,a4
2040384c:	0786                	slli	a5,a5,0x1
2040384e:	97ba                	add	a5,a5,a4
20403850:	078e                	slli	a5,a5,0x3
20403852:	97b6                	add	a5,a5,a3
20403854:	0807aa23          	sw	zero,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:614 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403858:	fe442683          	lw	a3,-28(s0)
2040385c:	fec42703          	lw	a4,-20(s0)
20403860:	87ba                	mv	a5,a4
20403862:	0786                	slli	a5,a5,0x1
20403864:	97ba                	add	a5,a5,a4
20403866:	078e                	slli	a5,a5,0x3
20403868:	97b6                	add	a5,a5,a3
2040386a:	0807ac23          	sw	zero,152(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040386e:	fec42783          	lw	a5,-20(s0)
20403872:	0785                	addi	a5,a5,1
20403874:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:611 (discriminator 1)
20403878:	fec42703          	lw	a4,-20(s0)
2040387c:	47fd                	li	a5,31
2040387e:	fae7d7e3          	bge	a5,a4,2040382c <__metal_driver_riscv_cpu_controller_interrupt_init+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
20403882:	fe042423          	sw	zero,-24(s0)
20403886:	a01d                	j	204038ac <__metal_driver_riscv_cpu_controller_interrupt_init+0xec>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:617 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
20403888:	fe442703          	lw	a4,-28(s0)
2040388c:	fe842783          	lw	a5,-24(s0)
20403890:	0e078793          	addi	a5,a5,224
20403894:	078a                	slli	a5,a5,0x2
20403896:	97ba                	add	a5,a5,a4
20403898:	20403737          	lui	a4,0x20403
2040389c:	8a070713          	addi	a4,a4,-1888 # 204028a0 <__metal_default_exception_handler>
204038a0:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
204038a2:	fe842783          	lw	a5,-24(s0)
204038a6:	0785                	addi	a5,a5,1
204038a8:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616 (discriminator 1)
204038ac:	fe842703          	lw	a4,-24(s0)
204038b0:	47ad                	li	a5,11
204038b2:	fce7dbe3          	bge	a5,a4,20403888 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:619
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, (void *)(uintptr_t)&__metal_exception_handler);
204038b6:	204037b7          	lui	a5,0x20403
204038ba:	b0078593          	addi	a1,a5,-1280 # 20402b00 <__metal_exception_handler>
204038be:	4501                	li	a0,0
204038c0:	331d                	jal	204035e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620
	__asm__ volatile ("csrr %0, misa" : "=r"(val));
204038c2:	301027f3          	csrr	a5,misa
204038c6:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
204038ca:	fdc42703          	lw	a4,-36(s0)
204038ce:	67c1                	lui	a5,0x10
204038d0:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xf828>
204038d4:	8ff9                	and	a5,a5,a4
204038d6:	cb99                	beqz	a5,204038ec <__metal_driver_riscv_cpu_controller_interrupt_init+0x12c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:623
	    /* Floating point architecture, so turn on FP register saving*/
	    __asm__ volatile ("csrr %0, mstatus" : "=r"(val));
204038d8:	300027f3          	csrr	a5,mstatus
204038dc:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:624
	    __asm__ volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
204038e0:	fdc42703          	lw	a4,-36(s0)
204038e4:	6789                	lui	a5,0x2
204038e6:	8fd9                	or	a5,a5,a4
204038e8:	30079073          	csrw	mstatus,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:626
	}
	intc->init_done = 1;
204038ec:	fe442783          	lw	a5,-28(s0)
204038f0:	4705                	li	a4,1
204038f2:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628
    }
}
204038f4:	0001                	nop
204038f6:	50f2                	lw	ra,60(sp)
204038f8:	5462                	lw	s0,56(sp)
204038fa:	6121                	addi	sp,sp,64
204038fc:	8082                	ret

204038fe <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:633

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
204038fe:	7179                	addi	sp,sp,-48
20403900:	d606                	sw	ra,44(sp)
20403902:	d422                	sw	s0,40(sp)
20403904:	1800                	addi	s0,sp,48
20403906:	fca42e23          	sw	a0,-36(s0)
2040390a:	fcb42c23          	sw	a1,-40(s0)
2040390e:	fcc42a23          	sw	a2,-44(s0)
20403912:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634
    int rc = 0;
20403916:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:635
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040391a:	fdc42783          	lw	a5,-36(s0)
2040391e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:637
 
    if ( !__metal_valid_interrupt_id(id) ) {
20403922:	fd842503          	lw	a0,-40(s0)
20403926:	3ba1                	jal	2040367e <__metal_valid_interrupt_id>
20403928:	87aa                	mv	a5,a0
2040392a:	e399                	bnez	a5,20403930 <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:638
        return -11;
2040392c:	57d5                	li	a5,-11
2040392e:	aa11                	j	20403a42 <__metal_driver_riscv_cpu_controller_interrupt_register+0x144>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:641
    }

    if (isr) {
20403930:	fd442783          	lw	a5,-44(s0)
20403934:	cf85                	beqz	a5,2040396c <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642
        intc->metal_int_table[id].handler = isr;
20403936:	fe842683          	lw	a3,-24(s0)
2040393a:	fd842703          	lw	a4,-40(s0)
2040393e:	87ba                	mv	a5,a4
20403940:	0786                	slli	a5,a5,0x1
20403942:	97ba                	add	a5,a5,a4
20403944:	078e                	slli	a5,a5,0x3
20403946:	97b6                	add	a5,a5,a3
20403948:	fd442703          	lw	a4,-44(s0)
2040394c:	08e7a823          	sw	a4,144(a5) # 2090 <__heap_size+0x1890>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:643
        intc->metal_int_table[id].exint_data = priv;
20403950:	fe842683          	lw	a3,-24(s0)
20403954:	fd842703          	lw	a4,-40(s0)
20403958:	87ba                	mv	a5,a4
2040395a:	0786                	slli	a5,a5,0x1
2040395c:	97ba                	add	a5,a5,a4
2040395e:	078e                	slli	a5,a5,0x3
20403960:	97b6                	add	a5,a5,a3
20403962:	fd042703          	lw	a4,-48(s0)
20403966:	08e7ac23          	sw	a4,152(a5)
2040396a:	a8d1                	j	20403a3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
    } else {
	switch (id) {
2040396c:	fd842783          	lw	a5,-40(s0)
20403970:	17f5                	addi	a5,a5,-3
20403972:	4771                	li	a4,28
20403974:	0cf76263          	bltu	a4,a5,20403a38 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20403978:	00279713          	slli	a4,a5,0x2
2040397c:	204067b7          	lui	a5,0x20406
20403980:	82478793          	addi	a5,a5,-2012 # 20405824 <__metal_driver_vtable_riscv_clint0+0x154>
20403984:	97ba                	add	a5,a5,a4
20403986:	439c                	lw	a5,0(a5)
20403988:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:647
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
2040398a:	fe842683          	lw	a3,-24(s0)
2040398e:	fd842703          	lw	a4,-40(s0)
20403992:	87ba                	mv	a5,a4
20403994:	0786                	slli	a5,a5,0x1
20403996:	97ba                	add	a5,a5,a4
20403998:	078e                	slli	a5,a5,0x3
2040399a:	97b6                	add	a5,a5,a3
2040399c:	20403737          	lui	a4,0x20403
204039a0:	98c70713          	addi	a4,a4,-1652 # 2040298c <__metal_default_sw_handler>
204039a4:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
            intc->metal_int_table[id].sub_int = priv;
204039a8:	fe842683          	lw	a3,-24(s0)
204039ac:	fd842703          	lw	a4,-40(s0)
204039b0:	87ba                	mv	a5,a4
204039b2:	0786                	slli	a5,a5,0x1
204039b4:	97ba                	add	a5,a5,a4
204039b6:	078e                	slli	a5,a5,0x3
204039b8:	97b6                	add	a5,a5,a3
204039ba:	fd042703          	lw	a4,-48(s0)
204039be:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
	  break;
204039c2:	a8b5                	j	20403a3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:651
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204039c4:	fe842683          	lw	a3,-24(s0)
204039c8:	fd842703          	lw	a4,-40(s0)
204039cc:	87ba                	mv	a5,a4
204039ce:	0786                	slli	a5,a5,0x1
204039d0:	97ba                	add	a5,a5,a4
204039d2:	078e                	slli	a5,a5,0x3
204039d4:	97b6                	add	a5,a5,a3
204039d6:	20403737          	lui	a4,0x20403
204039da:	a7e70713          	addi	a4,a4,-1410 # 20402a7e <__metal_default_timer_handler>
204039de:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652
            intc->metal_int_table[id].sub_int = priv;
204039e2:	fe842683          	lw	a3,-24(s0)
204039e6:	fd842703          	lw	a4,-40(s0)
204039ea:	87ba                	mv	a5,a4
204039ec:	0786                	slli	a5,a5,0x1
204039ee:	97ba                	add	a5,a5,a4
204039f0:	078e                	slli	a5,a5,0x3
204039f2:	97b6                	add	a5,a5,a3
204039f4:	fd042703          	lw	a4,-48(s0)
204039f8:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
	  break;
204039fc:	a089                	j	20403a3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
204039fe:	fe842683          	lw	a3,-24(s0)
20403a02:	fd842703          	lw	a4,-40(s0)
20403a06:	87ba                	mv	a5,a4
20403a08:	0786                	slli	a5,a5,0x1
20403a0a:	97ba                	add	a5,a5,a4
20403a0c:	078e                	slli	a5,a5,0x3
20403a0e:	97b6                	add	a5,a5,a3
20403a10:	20403737          	lui	a4,0x20403
20403a14:	8b870713          	addi	a4,a4,-1864 # 204028b8 <__metal_default_interrupt_handler>
20403a18:	08e7a823          	sw	a4,144(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:672
            intc->metal_int_table[id].sub_int = priv;
20403a1c:	fe842683          	lw	a3,-24(s0)
20403a20:	fd842703          	lw	a4,-40(s0)
20403a24:	87ba                	mv	a5,a4
20403a26:	0786                	slli	a5,a5,0x1
20403a28:	97ba                	add	a5,a5,a4
20403a2a:	078e                	slli	a5,a5,0x3
20403a2c:	97b6                	add	a5,a5,a3
20403a2e:	fd042703          	lw	a4,-48(s0)
20403a32:	08e7aa23          	sw	a4,148(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:673
	  break;
20403a36:	a021                	j	20403a3e <__metal_driver_riscv_cpu_controller_interrupt_register+0x140>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
	default:
	  rc = -12;
20403a38:	57d1                	li	a5,-12
20403a3a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
	}
    }
    return rc;
20403a3e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
}
20403a42:	853e                	mv	a0,a5
20403a44:	50b2                	lw	ra,44(sp)
20403a46:	5422                	lw	s0,40(sp)
20403a48:	6145                	addi	sp,sp,48
20403a4a:	8082                	ret

20403a4c <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:683

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20403a4c:	1101                	addi	sp,sp,-32
20403a4e:	ce06                	sw	ra,28(sp)
20403a50:	cc22                	sw	s0,24(sp)
20403a52:	1000                	addi	s0,sp,32
20403a54:	fea42623          	sw	a0,-20(s0)
20403a58:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403a5c:	fe842783          	lw	a5,-24(s0)
20403a60:	4605                	li	a2,1
20403a62:	85be                	mv	a1,a5
20403a64:	fec42503          	lw	a0,-20(s0)
20403a68:	c4fff0ef          	jal	ra,204036b6 <__metal_local_interrupt_enable>
20403a6c:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403a6e:	853e                	mv	a0,a5
20403a70:	40f2                	lw	ra,28(sp)
20403a72:	4462                	lw	s0,24(sp)
20403a74:	6105                	addi	sp,sp,32
20403a76:	8082                	ret

20403a78 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:689

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20403a78:	1101                	addi	sp,sp,-32
20403a7a:	ce06                	sw	ra,28(sp)
20403a7c:	cc22                	sw	s0,24(sp)
20403a7e:	1000                	addi	s0,sp,32
20403a80:	fea42623          	sw	a0,-20(s0)
20403a84:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403a88:	fe842783          	lw	a5,-24(s0)
20403a8c:	4601                	li	a2,0
20403a8e:	85be                	mv	a1,a5
20403a90:	fec42503          	lw	a0,-20(s0)
20403a94:	c23ff0ef          	jal	ra,204036b6 <__metal_local_interrupt_enable>
20403a98:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:691
}
20403a9a:	853e                	mv	a0,a5
20403a9c:	40f2                	lw	ra,28(sp)
20403a9e:	4462                	lw	s0,24(sp)
20403aa0:	6105                	addi	sp,sp,32
20403aa2:	8082                	ret

20403aa4 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:722
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode (struct metal_interrupt *controller)
{   
20403aa4:	1101                	addi	sp,sp,-32
20403aa6:	ce06                	sw	ra,28(sp)
20403aa8:	cc22                	sw	s0,24(sp)
20403aaa:	1000                	addi	s0,sp,32
20403aac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723
    return __metal_controller_interrupt_vector_mode();
20403ab0:	ae7ff0ef          	jal	ra,20403596 <__metal_controller_interrupt_vector_mode>
20403ab4:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
}
20403ab6:	853e                	mv	a0,a5
20403ab8:	40f2                	lw	ra,28(sp)
20403aba:	4462                	lw	s0,24(sp)
20403abc:	6105                	addi	sp,sp,32
20403abe:	8082                	ret

20403ac0 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728

int __metal_driver_riscv_cpu_controller_set_vector_mode (struct metal_interrupt *controller,
                                                         metal_vector_mode mode)
{   
20403ac0:	7179                	addi	sp,sp,-48
20403ac2:	d606                	sw	ra,44(sp)
20403ac4:	d422                	sw	s0,40(sp)
20403ac6:	1800                	addi	s0,sp,48
20403ac8:	fca42e23          	sw	a0,-36(s0)
20403acc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:729
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20403ad0:	fdc42783          	lw	a5,-36(s0)
20403ad4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731

    if (mode == METAL_DIRECT_MODE) {
20403ad8:	fd842783          	lw	a5,-40(s0)
20403adc:	eb99                	bnez	a5,20403af2 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        __metal_controller_interrupt_vector(mode, (void *)(uintptr_t)&__metal_exception_handler);
20403ade:	204037b7          	lui	a5,0x20403
20403ae2:	b0078593          	addi	a1,a5,-1280 # 20402b00 <__metal_exception_handler>
20403ae6:	fd842503          	lw	a0,-40(s0)
20403aea:	afdff0ef          	jal	ra,204035e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            return 0;
20403aee:	4781                	li	a5,0
20403af0:	a00d                	j	20403b12 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:735
    }
    if (mode == METAL_VECTOR_MODE) {
20403af2:	fd842703          	lw	a4,-40(s0)
20403af6:	4785                	li	a5,1
20403af8:	00f71c63          	bne	a4,a5,20403b10 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x50>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:736
        __metal_controller_interrupt_vector(mode, (void *)__metal_vector_table);
20403afc:	204057b7          	lui	a5,0x20405
20403b00:	40078593          	addi	a1,a5,1024 # 20405400 <__metal_vector_table>
20403b04:	fd842503          	lw	a0,-40(s0)
20403b08:	adfff0ef          	jal	ra,204035e6 <__metal_controller_interrupt_vector>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
        return 0;
20403b0c:	4781                	li	a5,0
20403b0e:	a011                	j	20403b12 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:739
    }
    return -1;
20403b10:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740
}
20403b12:	853e                	mv	a0,a5
20403b14:	50b2                	lw	ra,44(sp)
20403b16:	5422                	lw	s0,40(sp)
20403b18:	6145                	addi	sp,sp,48
20403b1a:	8082                	ret

20403b1c <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:744

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20403b1c:	1101                	addi	sp,sp,-32
20403b1e:	ce22                	sw	s0,28(sp)
20403b20:	1000                	addi	s0,sp,32
20403b22:	fea42623          	sw	a0,-20(s0)
20403b26:	feb42423          	sw	a1,-24(s0)
20403b2a:	fec42223          	sw	a2,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:746
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20403b2e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747
}
20403b30:	853e                	mv	a0,a5
20403b32:	4472                	lw	s0,28(sp)
20403b34:	6105                	addi	sp,sp,32
20403b36:	8082                	ret

20403b38 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:752

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu)
{
20403b38:	7139                	addi	sp,sp,-64
20403b3a:	de22                	sw	s0,60(sp)
20403b3c:	0080                	addi	s0,sp,64
20403b3e:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:753
    unsigned long long val = 0;
20403b42:	4301                	li	t1,0
20403b44:	4381                	li	t2,0
20403b46:	fe642423          	sw	t1,-24(s0)
20403b4a:	fe742623          	sw	t2,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi));
20403b4e:	b8002573          	csrr	a0,mcycleh
20403b52:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:759
    __asm__ volatile ("csrr %0, mcycle" : "=r"(lo));
20403b56:	b0002573          	csrr	a0,mcycle
20403b5a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:760
    __asm__ volatile ("csrr %0, mcycleh" : "=r"(hi1));
20403b5e:	b8002573          	csrr	a0,mcycleh
20403b62:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:761
    if (hi == hi1) {
20403b66:	fe442883          	lw	a7,-28(s0)
20403b6a:	fdc42503          	lw	a0,-36(s0)
20403b6e:	02a89563          	bne	a7,a0,20403b98 <__metal_driver_cpu_mcycle_get+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
        val = ((unsigned long long)hi << 32) | lo;
20403b72:	fe442503          	lw	a0,-28(s0)
20403b76:	85aa                	mv	a1,a0
20403b78:	4601                	li	a2,0
20403b7a:	00059813          	slli	a6,a1,0x0
20403b7e:	4781                	li	a5,0
20403b80:	fe042603          	lw	a2,-32(s0)
20403b84:	86b2                	mv	a3,a2
20403b86:	4701                	li	a4,0
20403b88:	00d7e633          	or	a2,a5,a3
20403b8c:	fec42423          	sw	a2,-24(s0)
20403b90:	00e867b3          	or	a5,a6,a4
20403b94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:768
    }
#else
    __asm__ volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403b98:	fe842783          	lw	a5,-24(s0)
20403b9c:	fec42803          	lw	a6,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:769
}
20403ba0:	853e                	mv	a0,a5
20403ba2:	85c2                	mv	a1,a6
20403ba4:	5472                	lw	s0,60(sp)
20403ba6:	6121                	addi	sp,sp,64
20403ba8:	8082                	ret

20403baa <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20403baa:	7179                	addi	sp,sp,-48
20403bac:	d606                	sw	ra,44(sp)
20403bae:	d422                	sw	s0,40(sp)
20403bb0:	d24a                	sw	s2,36(sp)
20403bb2:	d04e                	sw	s3,32(sp)
20403bb4:	1800                	addi	s0,sp,48
20403bb6:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:774
  int timebase;
    if (!cpu) {
20403bba:	fdc42783          	lw	a5,-36(s0)
20403bbe:	e781                	bnez	a5,20403bc6 <__metal_driver_cpu_timebase_get+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775
        return 0;
20403bc0:	4901                	li	s2,0
20403bc2:	4981                	li	s3,0
20403bc4:	a821                	j	20403bdc <__metal_driver_cpu_timebase_get+0x32>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:778
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403bc6:	fdc42503          	lw	a0,-36(s0)
20403bca:	b19fe0ef          	jal	ra,204026e2 <__metal_driver_cpu_timebase>
20403bce:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:779
    return timebase;
20403bd2:	fec42783          	lw	a5,-20(s0)
20403bd6:	893e                	mv	s2,a5
20403bd8:	87fd                	srai	a5,a5,0x1f
20403bda:	89be                	mv	s3,a5
20403bdc:	87ca                	mv	a5,s2
20403bde:	884e                	mv	a6,s3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:780
}
20403be0:	853e                	mv	a0,a5
20403be2:	85c2                	mv	a1,a6
20403be4:	50b2                	lw	ra,44(sp)
20403be6:	5422                	lw	s0,40(sp)
20403be8:	5912                	lw	s2,36(sp)
20403bea:	5982                	lw	s3,32(sp)
20403bec:	6145                	addi	sp,sp,48
20403bee:	8082                	ret

20403bf0 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:783

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20403bf0:	7179                	addi	sp,sp,-48
20403bf2:	d606                	sw	ra,44(sp)
20403bf4:	d422                	sw	s0,40(sp)
20403bf6:	1800                	addi	s0,sp,48
20403bf8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:784
    unsigned long long time = 0;
20403bfc:	4781                	li	a5,0
20403bfe:	4801                	li	a6,0
20403c00:	fef42023          	sw	a5,-32(s0)
20403c04:	ff042223          	sw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:787
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403c08:	fdc42503          	lw	a0,-36(s0)
20403c0c:	b01fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403c10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:789

    if (intc) {
20403c14:	fec42783          	lw	a5,-20(s0)
20403c18:	c78d                	beqz	a5,20403c42 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:790
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403c1a:	fec42783          	lw	a5,-20(s0)
20403c1e:	13c7a783          	lw	a5,316(a5)
20403c22:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:791
        if (tmr_intc) {
20403c26:	fe842783          	lw	a5,-24(s0)
20403c2a:	cf81                	beqz	a5,20403c42 <__metal_driver_cpu_mtime_get+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:792
            tmr_intc->vtable->command_request(tmr_intc,
20403c2c:	fe842783          	lw	a5,-24(s0)
20403c30:	439c                	lw	a5,0(a5)
20403c32:	43f8                	lw	a4,68(a5)
20403c34:	fe040793          	addi	a5,s0,-32
20403c38:	863e                	mv	a2,a5
20403c3a:	4585                	li	a1,1
20403c3c:	fe842503          	lw	a0,-24(s0)
20403c40:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:796
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20403c42:	fe042783          	lw	a5,-32(s0)
20403c46:	fe442803          	lw	a6,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:797
}
20403c4a:	853e                	mv	a0,a5
20403c4c:	85c2                	mv	a1,a6
20403c4e:	50b2                	lw	ra,44(sp)
20403c50:	5422                	lw	s0,40(sp)
20403c52:	6145                	addi	sp,sp,48
20403c54:	8082                	ret

20403c56 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:800

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20403c56:	7179                	addi	sp,sp,-48
20403c58:	d606                	sw	ra,44(sp)
20403c5a:	d422                	sw	s0,40(sp)
20403c5c:	d226                	sw	s1,36(sp)
20403c5e:	1800                	addi	s0,sp,48
20403c60:	fca42e23          	sw	a0,-36(s0)
20403c64:	fcb42823          	sw	a1,-48(s0)
20403c68:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    int rc = -1;
20403c6c:	57fd                	li	a5,-1
20403c6e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403c72:	fdc42503          	lw	a0,-36(s0)
20403c76:	a97fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403c7a:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:806

    if (intc) {
20403c7e:	fe842783          	lw	a5,-24(s0)
20403c82:	cf8d                	beqz	a5,20403cbc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403c84:	fe842783          	lw	a5,-24(s0)
20403c88:	13c7a783          	lw	a5,316(a5)
20403c8c:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
        if (tmr_intc) {
20403c90:	fe442783          	lw	a5,-28(s0)
20403c94:	c785                	beqz	a5,20403cbc <__metal_driver_cpu_mtimecmp_set+0x66>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:809
            rc = tmr_intc->vtable->mtimecmp_set(tmr_intc,
20403c96:	fe442783          	lw	a5,-28(s0)
20403c9a:	439c                	lw	a5,0(a5)
20403c9c:	47a4                	lw	s1,72(a5)
20403c9e:	fdc42503          	lw	a0,-36(s0)
20403ca2:	a1dfe0ef          	jal	ra,204026be <__metal_driver_cpu_hartid>
20403ca6:	87aa                	mv	a5,a0
20403ca8:	fd042603          	lw	a2,-48(s0)
20403cac:	fd442683          	lw	a3,-44(s0)
20403cb0:	85be                	mv	a1,a5
20403cb2:	fe442503          	lw	a0,-28(s0)
20403cb6:	9482                	jalr	s1
20403cb8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:814
                                                __metal_driver_cpu_hartid(cpu),
                                                time);
        }
    }
    return rc;
20403cbc:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:815
}
20403cc0:	853e                	mv	a0,a5
20403cc2:	50b2                	lw	ra,44(sp)
20403cc4:	5422                	lw	s0,40(sp)
20403cc6:	5492                	lw	s1,36(sp)
20403cc8:	6145                	addi	sp,sp,48
20403cca:	8082                	ret

20403ccc <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:819

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20403ccc:	1101                	addi	sp,sp,-32
20403cce:	ce22                	sw	s0,28(sp)
20403cd0:	1000                	addi	s0,sp,32
20403cd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403cd6:	81018793          	addi	a5,gp,-2032 # 800007a8 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403cda:	853e                	mv	a0,a5
20403cdc:	4472                	lw	s0,28(sp)
20403cde:	6105                	addi	sp,sp,32
20403ce0:	8082                	ret

20403ce2 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:833

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20403ce2:	1101                	addi	sp,sp,-32
20403ce4:	ce22                	sw	s0,28(sp)
20403ce6:	1000                	addi	s0,sp,32
20403ce8:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834
    return METAL_INTERRUPT_ID_TMR;
20403cec:	479d                	li	a5,7
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
}
20403cee:	853e                	mv	a0,a5
20403cf0:	4472                	lw	s0,28(sp)
20403cf2:	6105                	addi	sp,sp,32
20403cf4:	8082                	ret

20403cf6 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:839

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20403cf6:	1101                	addi	sp,sp,-32
20403cf8:	ce22                	sw	s0,28(sp)
20403cfa:	1000                	addi	s0,sp,32
20403cfc:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:841
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403d00:	81018793          	addi	a5,gp,-2032 # 800007a8 <__metal_dt_clint_2000000>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:850
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403d04:	853e                	mv	a0,a5
20403d06:	4472                	lw	s0,28(sp)
20403d08:	6105                	addi	sp,sp,32
20403d0a:	8082                	ret

20403d0c <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:853

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20403d0c:	1101                	addi	sp,sp,-32
20403d0e:	ce22                	sw	s0,28(sp)
20403d10:	1000                	addi	s0,sp,32
20403d12:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:854
    return METAL_INTERRUPT_ID_SW;
20403d16:	478d                	li	a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:855
}
20403d18:	853e                	mv	a0,a5
20403d1a:	4472                	lw	s0,28(sp)
20403d1c:	6105                	addi	sp,sp,32
20403d1e:	8082                	ret

20403d20 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:858

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403d20:	7179                	addi	sp,sp,-48
20403d22:	d606                	sw	ra,44(sp)
20403d24:	d422                	sw	s0,40(sp)
20403d26:	1800                	addi	s0,sp,48
20403d28:	fca42e23          	sw	a0,-36(s0)
20403d2c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:859
    int rc = -1;
20403d30:	57fd                	li	a5,-1
20403d32:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:862
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc = 
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d36:	fdc42503          	lw	a0,-36(s0)
20403d3a:	9d3fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403d3e:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:864

    if (intc) {
20403d42:	fe842783          	lw	a5,-24(s0)
20403d46:	c79d                	beqz	a5,20403d74 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:865
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403d48:	fe842783          	lw	a5,-24(s0)
20403d4c:	0dc7a783          	lw	a5,220(a5)
20403d50:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:866
        if (sw_intc) {
20403d54:	fe442783          	lw	a5,-28(s0)
20403d58:	cf91                	beqz	a5,20403d74 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:867
            rc = sw_intc->vtable->command_request(sw_intc,
20403d5a:	fe442783          	lw	a5,-28(s0)
20403d5e:	439c                	lw	a5,0(a5)
20403d60:	43f8                	lw	a4,68(a5)
20403d62:	fd840793          	addi	a5,s0,-40
20403d66:	863e                	mv	a2,a5
20403d68:	458d                	li	a1,3
20403d6a:	fe442503          	lw	a0,-28(s0)
20403d6e:	9702                	jalr	a4
20403d70:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:871
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403d74:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:872
}
20403d78:	853e                	mv	a0,a5
20403d7a:	50b2                	lw	ra,44(sp)
20403d7c:	5422                	lw	s0,40(sp)
20403d7e:	6145                	addi	sp,sp,48
20403d80:	8082                	ret

20403d82 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:875

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20403d82:	7179                	addi	sp,sp,-48
20403d84:	d606                	sw	ra,44(sp)
20403d86:	d422                	sw	s0,40(sp)
20403d88:	1800                	addi	s0,sp,48
20403d8a:	fca42e23          	sw	a0,-36(s0)
20403d8e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:876
    int rc = -1;
20403d92:	57fd                	li	a5,-1
20403d94:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:879
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403d98:	fdc42503          	lw	a0,-36(s0)
20403d9c:	971fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403da0:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:881

    if (intc) {
20403da4:	fe842783          	lw	a5,-24(s0)
20403da8:	c79d                	beqz	a5,20403dd6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:882
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403daa:	fe842783          	lw	a5,-24(s0)
20403dae:	0dc7a783          	lw	a5,220(a5)
20403db2:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:883
        if (sw_intc) {
20403db6:	fe442783          	lw	a5,-28(s0)
20403dba:	cf91                	beqz	a5,20403dd6 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:884
            rc = sw_intc->vtable->command_request(sw_intc,
20403dbc:	fe442783          	lw	a5,-28(s0)
20403dc0:	439c                	lw	a5,0(a5)
20403dc2:	43f8                	lw	a4,68(a5)
20403dc4:	fd840793          	addi	a5,s0,-40
20403dc8:	863e                	mv	a2,a5
20403dca:	4589                	li	a1,2
20403dcc:	fe442503          	lw	a0,-28(s0)
20403dd0:	9702                	jalr	a4
20403dd2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:888
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403dd6:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:889
}
20403dda:	853e                	mv	a0,a5
20403ddc:	50b2                	lw	ra,44(sp)
20403dde:	5422                	lw	s0,40(sp)
20403de0:	6145                	addi	sp,sp,48
20403de2:	8082                	ret

20403de4 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:892

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20403de4:	7179                	addi	sp,sp,-48
20403de6:	d606                	sw	ra,44(sp)
20403de8:	d422                	sw	s0,40(sp)
20403dea:	1800                	addi	s0,sp,48
20403dec:	fca42e23          	sw	a0,-36(s0)
20403df0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:893
    int rc = 0;
20403df4:	fe042623          	sw	zero,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:896
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403df8:	fdc42503          	lw	a0,-36(s0)
20403dfc:	911fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403e00:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:898

    if (intc) {
20403e04:	fe842783          	lw	a5,-24(s0)
20403e08:	c79d                	beqz	a5,20403e36 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:899
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403e0a:	fe842783          	lw	a5,-24(s0)
20403e0e:	0dc7a783          	lw	a5,220(a5)
20403e12:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:900
        if (sw_intc) {
20403e16:	fe442783          	lw	a5,-28(s0)
20403e1a:	cf91                	beqz	a5,20403e36 <__metal_driver_cpu_get_msip+0x52>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:901
            rc = sw_intc->vtable->command_request(sw_intc,
20403e1c:	fe442783          	lw	a5,-28(s0)
20403e20:	439c                	lw	a5,0(a5)
20403e22:	43f8                	lw	a4,68(a5)
20403e24:	fd840793          	addi	a5,s0,-40
20403e28:	863e                	mv	a2,a5
20403e2a:	4591                	li	a1,4
20403e2c:	fe442503          	lw	a0,-28(s0)
20403e30:	9702                	jalr	a4
20403e32:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:905
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403e36:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:906
}
20403e3a:	853e                	mv	a0,a5
20403e3c:	50b2                	lw	ra,44(sp)
20403e3e:	5422                	lw	s0,40(sp)
20403e40:	6145                	addi	sp,sp,48
20403e42:	8082                	ret

20403e44 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:910

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20403e44:	1101                	addi	sp,sp,-32
20403e46:	ce06                	sw	ra,28(sp)
20403e48:	cc22                	sw	s0,24(sp)
20403e4a:	1000                	addi	s0,sp,32
20403e4c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:911
    return __metal_driver_cpu_interrupt_controller(cpu);
20403e50:	fec42503          	lw	a0,-20(s0)
20403e54:	8b9fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403e58:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:912
}
20403e5a:	853e                	mv	a0,a5
20403e5c:	40f2                	lw	ra,28(sp)
20403e5e:	4462                	lw	s0,24(sp)
20403e60:	6105                	addi	sp,sp,32
20403e62:	8082                	ret

20403e64 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:936
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20403e64:	7179                	addi	sp,sp,-48
20403e66:	d606                	sw	ra,44(sp)
20403e68:	d422                	sw	s0,40(sp)
20403e6a:	1800                	addi	s0,sp,48
20403e6c:	fca42e23          	sw	a0,-36(s0)
20403e70:	fcb42c23          	sw	a1,-40(s0)
20403e74:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:938
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)__metal_driver_cpu_interrupt_controller(cpu);
20403e78:	fdc42503          	lw	a0,-36(s0)
20403e7c:	891fe0ef          	jal	ra,2040270c <__metal_driver_cpu_interrupt_controller>
20403e80:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:940

    if (intc) {
20403e84:	fec42783          	lw	a5,-20(s0)
20403e88:	cb99                	beqz	a5,20403e9e <__metal_driver_cpu_exception_register+0x3a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:941
        return __metal_exception_register((struct metal_interrupt *)intc, ecode, isr);
20403e8a:	fd442603          	lw	a2,-44(s0)
20403e8e:	fd842583          	lw	a1,-40(s0)
20403e92:	fec42503          	lw	a0,-20(s0)
20403e96:	8ddff0ef          	jal	ra,20403772 <__metal_exception_register>
20403e9a:	87aa                	mv	a5,a0
20403e9c:	a011                	j	20403ea0 <__metal_driver_cpu_exception_register+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:943
    }
    return -1;
20403e9e:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:944
}
20403ea0:	853e                	mv	a0,a5
20403ea2:	50b2                	lw	ra,44(sp)
20403ea4:	5422                	lw	s0,40(sp)
20403ea6:	6145                	addi	sp,sp,48
20403ea8:	8082                	ret

20403eaa <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:947

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20403eaa:	1101                	addi	sp,sp,-32
20403eac:	ce22                	sw	s0,28(sp)
20403eae:	1000                	addi	s0,sp,32
20403eb0:	fea42623          	sw	a0,-20(s0)
20403eb4:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:953
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short*)epc & METAL_INSN_LENGTH_MASK)
20403eb8:	fe842783          	lw	a5,-24(s0)
20403ebc:	0007d783          	lhu	a5,0(a5)
20403ec0:	0037f713          	andi	a4,a5,3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954
            == METAL_INSN_NOT_COMPRESSED) ? 4 : 2;
20403ec4:	478d                	li	a5,3
20403ec6:	00f71463          	bne	a4,a5,20403ece <__metal_driver_cpu_get_instruction_length+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 1)
20403eca:	4791                	li	a5,4
20403ecc:	a011                	j	20403ed0 <__metal_driver_cpu_get_instruction_length+0x26>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:954 (discriminator 2)
20403ece:	4789                	li	a5,2
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:955 (discriminator 5)
}
20403ed0:	853e                	mv	a0,a5
20403ed2:	4472                	lw	s0,28(sp)
20403ed4:	6105                	addi	sp,sp,32
20403ed6:	8082                	ret

20403ed8 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:958

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20403ed8:	7179                	addi	sp,sp,-48
20403eda:	d622                	sw	s0,44(sp)
20403edc:	1800                	addi	s0,sp,48
20403ede:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:960
    uintptr_t mepc;
    __asm__ volatile ("csrr %0, mepc" : "=r"(mepc));
20403ee2:	341027f3          	csrr	a5,mepc
20403ee6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:961
    return mepc;
20403eea:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:962
}
20403eee:	853e                	mv	a0,a5
20403ef0:	5432                	lw	s0,44(sp)
20403ef2:	6145                	addi	sp,sp,48
20403ef4:	8082                	ret

20403ef6 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:965

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20403ef6:	1101                	addi	sp,sp,-32
20403ef8:	ce22                	sw	s0,28(sp)
20403efa:	1000                	addi	s0,sp,32
20403efc:	fea42623          	sw	a0,-20(s0)
20403f00:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:966
    __asm__ volatile ("csrw mepc, %0" :: "r"(mepc));
20403f04:	fe842783          	lw	a5,-24(s0)
20403f08:	34179073          	csrw	mepc,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:967
    return 0;
20403f0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:968
}
20403f0e:	853e                	mv	a0,a5
20403f10:	4472                	lw	s0,28(sp)
20403f12:	6105                	addi	sp,sp,32
20403f14:	8082                	ret

20403f16 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:238



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403f16:	1101                	addi	sp,sp,-32
20403f18:	ce22                	sw	s0,28(sp)
20403f1a:	1000                	addi	s0,sp,32
20403f1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:239
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403f20:	fec42703          	lw	a4,-20(s0)
20403f24:	800007b7          	lui	a5,0x80000
20403f28:	47878793          	addi	a5,a5,1144 # 80000478 <metal_segment_heap_target_end+0xffffefcc>
20403f2c:	00f71563          	bne	a4,a5,20403f36 <__metal_driver_sifive_plic0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:240
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403f30:	0c0007b7          	lui	a5,0xc000
20403f34:	a011                	j	20403f38 <__metal_driver_sifive_plic0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:243
	}
	else {
		return 0;
20403f36:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:245
	}
}
20403f38:	853e                	mv	a0,a5
20403f3a:	4472                	lw	s0,28(sp)
20403f3c:	6105                	addi	sp,sp,32
20403f3e:	8082                	ret

20403f40 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:258
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403f40:	1101                	addi	sp,sp,-32
20403f42:	ce22                	sw	s0,28(sp)
20403f44:	1000                	addi	s0,sp,32
20403f46:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:259
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403f4a:	fec42703          	lw	a4,-20(s0)
20403f4e:	800007b7          	lui	a5,0x80000
20403f52:	47878793          	addi	a5,a5,1144 # 80000478 <metal_segment_heap_target_end+0xffffefcc>
20403f56:	00f71463          	bne	a4,a5,20403f5e <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:260
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403f5a:	47ed                	li	a5,27
20403f5c:	a011                	j	20403f60 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:263
	}
	else {
		return 0;
20403f5e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:265
	}
}
20403f60:	853e                	mv	a0,a5
20403f62:	4472                	lw	s0,28(sp)
20403f64:	6105                	addi	sp,sp,32
20403f66:	8082                	ret

20403f68 <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:268

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403f68:	1101                	addi	sp,sp,-32
20403f6a:	ce22                	sw	s0,28(sp)
20403f6c:	1000                	addi	s0,sp,32
20403f6e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:269
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403f72:	fec42703          	lw	a4,-20(s0)
20403f76:	800007b7          	lui	a5,0x80000
20403f7a:	47878793          	addi	a5,a5,1144 # 80000478 <metal_segment_heap_target_end+0xffffefcc>
20403f7e:	00f71463          	bne	a4,a5,20403f86 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:270
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403f82:	479d                	li	a5,7
20403f84:	a011                	j	20403f88 <__metal_driver_sifive_plic0_max_priority+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:273
	}
	else {
		return 0;
20403f86:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:275
	}
}
20403f88:	853e                	mv	a0,a5
20403f8a:	4472                	lw	s0,28(sp)
20403f8c:	6105                	addi	sp,sp,32
20403f8e:	8082                	ret

20403f90 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:278

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403f90:	1101                	addi	sp,sp,-32
20403f92:	ce22                	sw	s0,28(sp)
20403f94:	1000                	addi	s0,sp,32
20403f96:	fea42623          	sw	a0,-20(s0)
20403f9a:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:279
	if (idx == 0) {
20403f9e:	fe842783          	lw	a5,-24(s0)
20403fa2:	e791                	bnez	a5,20403fae <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:280
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403fa4:	800007b7          	lui	a5,0x80000
20403fa8:	0c078793          	addi	a5,a5,192 # 800000c0 <metal_segment_heap_target_end+0xffffec14>
20403fac:	a011                	j	20403fb0 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:283
	}
	else {
		return NULL;
20403fae:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:285
	}
}
20403fb0:	853e                	mv	a0,a5
20403fb2:	4472                	lw	s0,28(sp)
20403fb4:	6105                	addi	sp,sp,32
20403fb6:	8082                	ret

20403fb8 <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:288

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20403fb8:	1101                	addi	sp,sp,-32
20403fba:	ce22                	sw	s0,28(sp)
20403fbc:	1000                	addi	s0,sp,32
20403fbe:	fea42623          	sw	a0,-20(s0)
20403fc2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:289
	if (idx == 0) {
20403fc6:	fe842783          	lw	a5,-24(s0)
20403fca:	e399                	bnez	a5,20403fd0 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:290
		return 11;
20403fcc:	47ad                	li	a5,11
20403fce:	a011                	j	20403fd2 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:293
	}
	else {
		return 0;
20403fd0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:295
	}
}
20403fd2:	853e                	mv	a0,a5
20403fd4:	4472                	lw	s0,28(sp)
20403fd6:	6105                	addi	sp,sp,32
20403fd8:	8082                	ret

20403fda <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:14
#include <metal/shutdown.h>
#include <metal/drivers/riscv_plic0.h>
#include <metal/machine.h>

unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20403fda:	7179                	addi	sp,sp,-48
20403fdc:	d606                	sw	ra,44(sp)
20403fde:	d422                	sw	s0,40(sp)
20403fe0:	1800                	addi	s0,sp,48
20403fe2:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:15
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20403fe6:	fdc42503          	lw	a0,-36(s0)
20403fea:	3735                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
20403fec:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:16
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20403ff0:	fec42703          	lw	a4,-20(s0)
20403ff4:	002007b7          	lui	a5,0x200
20403ff8:	0791                	addi	a5,a5,4
20403ffa:	97ba                	add	a5,a5,a4
20403ffc:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
					      METAL_RISCV_PLIC0_CLAIM));
}
20403ffe:	853e                	mv	a0,a5
20404000:	50b2                	lw	ra,44(sp)
20404002:	5422                	lw	s0,40(sp)
20404004:	6145                	addi	sp,sp,48
20404006:	8082                	ret

20404008 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:22

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20404008:	7179                	addi	sp,sp,-48
2040400a:	d606                	sw	ra,44(sp)
2040400c:	d422                	sw	s0,40(sp)
2040400e:	1800                	addi	s0,sp,48
20404010:	fca42e23          	sw	a0,-36(s0)
20404014:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:23
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
20404018:	fdc42503          	lw	a0,-36(s0)
2040401c:	3ded                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
2040401e:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:24
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404022:	fec42703          	lw	a4,-20(s0)
20404026:	002007b7          	lui	a5,0x200
2040402a:	0791                	addi	a5,a5,4
2040402c:	97ba                	add	a5,a5,a4
2040402e:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
				       METAL_RISCV_PLIC0_CLAIM)) = id;
20404030:	fd842783          	lw	a5,-40(s0)
20404034:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:26
}
20404036:	0001                	nop
20404038:	50b2                	lw	ra,44(sp)
2040403a:	5422                	lw	s0,40(sp)
2040403c:	6145                	addi	sp,sp,48
2040403e:	8082                	ret

20404040 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29

int __metal_plic0_set_threshold(struct metal_interrupt *controller, unsigned int threshold)
{
20404040:	7179                	addi	sp,sp,-48
20404042:	d606                	sw	ra,44(sp)
20404044:	d422                	sw	s0,40(sp)
20404046:	1800                	addi	s0,sp,48
20404048:	fca42e23          	sw	a0,-36(s0)
2040404c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:30
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404050:	fdc42503          	lw	a0,-36(s0)
20404054:	35c9                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
20404056:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040405a:	fec42703          	lw	a4,-20(s0)
2040405e:	002007b7          	lui	a5,0x200
20404062:	97ba                	add	a5,a5,a4
20404064:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:32
				       METAL_RISCV_PLIC0_THRESHOLD)) = threshold;
20404066:	fd842783          	lw	a5,-40(s0)
2040406a:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:33
    return 0;
2040406c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
}
2040406e:	853e                	mv	a0,a5
20404070:	50b2                	lw	ra,44(sp)
20404072:	5422                	lw	s0,40(sp)
20404074:	6145                	addi	sp,sp,48
20404076:	8082                	ret

20404078 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:37

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller)
{
20404078:	7179                	addi	sp,sp,-48
2040407a:	d606                	sw	ra,44(sp)
2040407c:	d422                	sw	s0,40(sp)
2040407e:	1800                	addi	s0,sp,48
20404080:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404084:	fdc42503          	lw	a0,-36(s0)
20404088:	3579                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
2040408a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
2040408e:	fec42703          	lw	a4,-20(s0)
20404092:	002007b7          	lui	a5,0x200
20404096:	97ba                	add	a5,a5,a4
20404098:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:42
				       METAL_RISCV_PLIC0_THRESHOLD));
}
2040409a:	853e                	mv	a0,a5
2040409c:	50b2                	lw	ra,44(sp)
2040409e:	5422                	lw	s0,40(sp)
204040a0:	6145                	addi	sp,sp,48
204040a2:	8082                	ret

204040a4 <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45

int __metal_plic0_set_priority(struct metal_interrupt *controller, int id, unsigned int priority)
{
204040a4:	7179                	addi	sp,sp,-48
204040a6:	d606                	sw	ra,44(sp)
204040a8:	d422                	sw	s0,40(sp)
204040aa:	1800                	addi	s0,sp,48
204040ac:	fca42e23          	sw	a0,-36(s0)
204040b0:	fcb42c23          	sw	a1,-40(s0)
204040b4:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)controller);
204040b8:	fdc42503          	lw	a0,-36(s0)
204040bc:	3da9                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
204040be:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:47
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority((struct metal_interrupt *)controller);
204040c2:	fdc42503          	lw	a0,-36(s0)
204040c6:	354d                	jal	20403f68 <__metal_driver_sifive_plic0_max_priority>
204040c8:	87aa                	mv	a5,a0
204040ca:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48
    if ( (max_priority) && (priority < max_priority) ) {
204040ce:	fe842783          	lw	a5,-24(s0)
204040d2:	c785                	beqz	a5,204040fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:48 (discriminator 1)
204040d4:	fd442703          	lw	a4,-44(s0)
204040d8:	fe842783          	lw	a5,-24(s0)
204040dc:	00f77f63          	bgeu	a4,a5,204040fa <__metal_plic0_set_priority+0x56>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204040e0:	fd842783          	lw	a5,-40(s0)
204040e4:	078a                	slli	a5,a5,0x2
204040e6:	873e                	mv	a4,a5
204040e8:	fec42783          	lw	a5,-20(s0)
204040ec:	97ba                	add	a5,a5,a4
204040ee:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
204040f0:	fd442783          	lw	a5,-44(s0)
204040f4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
        return 0;
204040f6:	4781                	li	a5,0
204040f8:	a011                	j	204040fc <__metal_plic0_set_priority+0x58>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:54
    }
    return -1;
204040fa:	57fd                	li	a5,-1
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:55
}
204040fc:	853e                	mv	a0,a5
204040fe:	50b2                	lw	ra,44(sp)
20404100:	5422                	lw	s0,40(sp)
20404102:	6145                	addi	sp,sp,48
20404104:	8082                	ret

20404106 <__metal_plic0_get_priority>:
__metal_plic0_get_priority():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:58

unsigned int __metal_plic0_get_priority(struct metal_interrupt *controller, int id)
{
20404106:	7179                	addi	sp,sp,-48
20404108:	d606                	sw	ra,44(sp)
2040410a:	d422                	sw	s0,40(sp)
2040410c:	1800                	addi	s0,sp,48
2040410e:	fca42e23          	sw	a0,-36(s0)
20404112:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(controller);
20404116:	fdc42503          	lw	a0,-36(s0)
2040411a:	3bf5                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
2040411c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:61

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404120:	fd842783          	lw	a5,-40(s0)
20404124:	078a                	slli	a5,a5,0x2
20404126:	873e                	mv	a4,a5
20404128:	fec42783          	lw	a5,-20(s0)
2040412c:	97ba                	add	a5,a5,a4
2040412e:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
					   METAL_RISCV_PLIC0_PRIORITY_BASE +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20404130:	853e                	mv	a0,a5
20404132:	50b2                	lw	ra,44(sp)
20404134:	5422                	lw	s0,40(sp)
20404136:	6145                	addi	sp,sp,48
20404138:	8082                	ret

2040413a <__metal_plic0_enable>:
__metal_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
2040413a:	7179                	addi	sp,sp,-48
2040413c:	d606                	sw	ra,44(sp)
2040413e:	d422                	sw	s0,40(sp)
20404140:	1800                	addi	s0,sp,48
20404142:	fca42e23          	sw	a0,-36(s0)
20404146:	fcb42c23          	sw	a1,-40(s0)
2040414a:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base((struct metal_interrupt *)plic);
2040414e:	fdc42503          	lw	a0,-36(s0)
20404152:	33d1                	jal	20403f16 <__metal_driver_sifive_plic0_control_base>
20404154:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20404158:	fd842783          	lw	a5,-40(s0)
2040415c:	8795                	srai	a5,a5,0x5
2040415e:	078a                	slli	a5,a5,0x2
20404160:	873e                	mv	a4,a5
20404162:	fec42783          	lw	a5,-20(s0)
20404166:	973e                	add	a4,a4,a5
20404168:	6789                	lui	a5,0x2
2040416a:	97ba                	add	a5,a5,a4
2040416c:	439c                	lw	a5,0(a5)
2040416e:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
					METAL_RISCV_PLIC0_ENABLE_BASE +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404172:	fd442783          	lw	a5,-44(s0)
20404176:	cf81                	beqz	a5,2040418e <__metal_plic0_enable+0x54>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:77 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20404178:	fd842783          	lw	a5,-40(s0)
2040417c:	8bfd                	andi	a5,a5,31
2040417e:	4705                	li	a4,1
20404180:	00f717b3          	sll	a5,a4,a5
20404184:	873e                	mv	a4,a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404186:	fe842783          	lw	a5,-24(s0)
2040418a:	8fd9                	or	a5,a5,a4
2040418c:	a829                	j	204041a6 <__metal_plic0_enable+0x6c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78 (discriminator 2)
2040418e:	fd842783          	lw	a5,-40(s0)
20404192:	8bfd                	andi	a5,a5,31
20404194:	4705                	li	a4,1
20404196:	00f717b3          	sll	a5,a4,a5
2040419a:	fff7c793          	not	a5,a5
2040419e:	873e                	mv	a4,a5
204041a0:	fe842783          	lw	a5,-24(s0)
204041a4:	8ff9                	and	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:74
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
204041a6:	fd842703          	lw	a4,-40(s0)
204041aa:	8715                	srai	a4,a4,0x5
204041ac:	070a                	slli	a4,a4,0x2
204041ae:	86ba                	mv	a3,a4
204041b0:	fec42703          	lw	a4,-20(s0)
204041b4:	96ba                	add	a3,a3,a4
204041b6:	6709                	lui	a4,0x2
204041b8:	9736                	add	a4,a4,a3
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
204041ba:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:79
}
204041bc:	0001                	nop
204041be:	50b2                	lw	ra,44(sp)
204041c0:	5422                	lw	s0,40(sp)
204041c2:	6145                	addi	sp,sp,48
204041c4:	8082                	ret

204041c6 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:81

void __metal_plic0_default_handler (int id, void *priv) {
204041c6:	1101                	addi	sp,sp,-32
204041c8:	ce06                	sw	ra,28(sp)
204041ca:	cc22                	sw	s0,24(sp)
204041cc:	1000                	addi	s0,sp,32
204041ce:	fea42623          	sw	a0,-20(s0)
204041d2:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:82
    metal_shutdown(300);
204041d6:	12c00513          	li	a0,300
204041da:	1d0010ef          	jal	ra,204053aa <metal_shutdown>

204041de <__metal_plic0_handler>:
__metal_plic0_handler():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86
}

void __metal_plic0_handler (int id, void *priv)
{
204041de:	7179                	addi	sp,sp,-48
204041e0:	d606                	sw	ra,44(sp)
204041e2:	d422                	sw	s0,40(sp)
204041e4:	1800                	addi	s0,sp,48
204041e6:	fca42e23          	sw	a0,-36(s0)
204041ea:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:87
    struct __metal_driver_riscv_plic0 *plic = priv;
204041ee:	fd842783          	lw	a5,-40(s0)
204041f2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
204041f6:	fec42503          	lw	a0,-20(s0)
204041fa:	33c5                	jal	20403fda <__metal_plic0_claim_interrupt>
204041fc:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:89
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts((struct metal_interrupt *)plic);
20404200:	fec42503          	lw	a0,-20(s0)
20404204:	d3dff0ef          	jal	ra,20403f40 <__metal_driver_sifive_plic0_num_interrupts>
20404208:	87aa                	mv	a5,a0
2040420a:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91

    if ( (idx < num_interrupts) && (plic->metal_exint_table[idx]) ) {
2040420e:	fe842703          	lw	a4,-24(s0)
20404212:	fe442783          	lw	a5,-28(s0)
20404216:	04f77263          	bgeu	a4,a5,2040425a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91 (discriminator 1)
2040421a:	fec42703          	lw	a4,-20(s0)
2040421e:	fe842783          	lw	a5,-24(s0)
20404222:	078a                	slli	a5,a5,0x2
20404224:	97ba                	add	a5,a5,a4
20404226:	479c                	lw	a5,8(a5)
20404228:	cb8d                	beqz	a5,2040425a <__metal_plic0_handler+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:92
	plic->metal_exint_table[idx](idx,
2040422a:	fec42703          	lw	a4,-20(s0)
2040422e:	fe842783          	lw	a5,-24(s0)
20404232:	078a                	slli	a5,a5,0x2
20404234:	97ba                	add	a5,a5,a4
20404236:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
2040423a:	fe842603          	lw	a2,-24(s0)
2040423e:	fec42683          	lw	a3,-20(s0)
20404242:	fe842703          	lw	a4,-24(s0)
20404246:	87ba                	mv	a5,a4
20404248:	0786                	slli	a5,a5,0x1
2040424a:	97ba                	add	a5,a5,a4
2040424c:	078e                	slli	a5,a5,0x3
2040424e:	97b6                	add	a5,a5,a3
20404250:	0887a783          	lw	a5,136(a5)
20404254:	85be                	mv	a1,a5
20404256:	8532                	mv	a0,a2
20404258:	9802                	jalr	a6
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:96
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
2040425a:	fe842583          	lw	a1,-24(s0)
2040425e:	fec42503          	lw	a0,-20(s0)
20404262:	335d                	jal	20404008 <__metal_plic0_complete_interrupt>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:97
}
20404264:	0001                	nop
20404266:	50b2                	lw	ra,44(sp)
20404268:	5422                	lw	s0,40(sp)
2040426a:	6145                	addi	sp,sp,48
2040426c:	8082                	ret

2040426e <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
2040426e:	7139                	addi	sp,sp,-64
20404270:	de06                	sw	ra,60(sp)
20404272:	dc22                	sw	s0,56(sp)
20404274:	0080                	addi	s0,sp,64
20404276:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:101
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040427a:	fcc42783          	lw	a5,-52(s0)
2040427e:	fef42223          	sw	a5,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103

    if ( !plic->init_done ) {
20404282:	fe442783          	lw	a5,-28(s0)
20404286:	43dc                	lw	a5,4(a5)
20404288:	12079063          	bnez	a5,204043a8 <__metal_driver_riscv_plic0_init+0x13a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107
        int num_interrupts, line;
        struct metal_interrupt *intc;

	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040428c:	fe042623          	sw	zero,-20(s0)
20404290:	a221                	j	20404398 <__metal_driver_riscv_plic0_init+0x12a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
	    num_interrupts = __metal_driver_sifive_plic0_num_interrupts(controller);
20404292:	fcc42503          	lw	a0,-52(s0)
20404296:	cabff0ef          	jal	ra,20403f40 <__metal_driver_sifive_plic0_num_interrupts>
2040429a:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:109
	    intc = __metal_driver_sifive_plic0_interrupt_parents(controller, parent);
2040429e:	fec42583          	lw	a1,-20(s0)
204042a2:	fcc42503          	lw	a0,-52(s0)
204042a6:	cebff0ef          	jal	ra,20403f90 <__metal_driver_sifive_plic0_interrupt_parents>
204042aa:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
	    line = __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
204042ae:	fec42583          	lw	a1,-20(s0)
204042b2:	fcc42503          	lw	a0,-52(s0)
204042b6:	d03ff0ef          	jal	ra,20403fb8 <__metal_driver_sifive_plic0_interrupt_lines>
204042ba:	fca42c23          	sw	a0,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:113

	    /* Initialize ist parent controller, aka cpu_intc. */
	    intc->vtable->interrupt_init(intc);
204042be:	fdc42783          	lw	a5,-36(s0)
204042c2:	439c                	lw	a5,0(a5)
204042c4:	439c                	lw	a5,0(a5)
204042c6:	fdc42503          	lw	a0,-36(s0)
204042ca:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115

	    for (int i = 0; i < num_interrupts; i++) {
204042cc:	fe042423          	sw	zero,-24(s0)
204042d0:	a085                	j	20404330 <__metal_driver_riscv_plic0_init+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116 (discriminator 3)
		__metal_plic0_enable(plic, i, METAL_DISABLE);
204042d2:	4601                	li	a2,0
204042d4:	fe842583          	lw	a1,-24(s0)
204042d8:	fe442503          	lw	a0,-28(s0)
204042dc:	3db9                	jal	2040413a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:117 (discriminator 3)
		__metal_plic0_set_priority(controller, i, 0);
204042de:	4601                	li	a2,0
204042e0:	fe842583          	lw	a1,-24(s0)
204042e4:	fcc42503          	lw	a0,-52(s0)
204042e8:	3b75                	jal	204040a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:118 (discriminator 3)
		plic->metal_exint_table[i] = NULL;
204042ea:	fe442703          	lw	a4,-28(s0)
204042ee:	fe842783          	lw	a5,-24(s0)
204042f2:	078a                	slli	a5,a5,0x2
204042f4:	97ba                	add	a5,a5,a4
204042f6:	0007a423          	sw	zero,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:119 (discriminator 3)
		plic->metal_exdata_table[i].sub_int = NULL;
204042fa:	fe442683          	lw	a3,-28(s0)
204042fe:	fe842703          	lw	a4,-24(s0)
20404302:	87ba                	mv	a5,a4
20404304:	0786                	slli	a5,a5,0x1
20404306:	97ba                	add	a5,a5,a4
20404308:	078e                	slli	a5,a5,0x3
2040430a:	97b6                	add	a5,a5,a3
2040430c:	0807a223          	sw	zero,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120 (discriminator 3)
		plic->metal_exdata_table[i].exint_data = NULL;
20404310:	fe442683          	lw	a3,-28(s0)
20404314:	fe842703          	lw	a4,-24(s0)
20404318:	87ba                	mv	a5,a4
2040431a:	0786                	slli	a5,a5,0x1
2040431c:	97ba                	add	a5,a5,a4
2040431e:	078e                	slli	a5,a5,0x3
20404320:	97b6                	add	a5,a5,a3
20404322:	0807a423          	sw	zero,136(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 3)
	    for (int i = 0; i < num_interrupts; i++) {
20404326:	fe842783          	lw	a5,-24(s0)
2040432a:	0785                	addi	a5,a5,1
2040432c:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
20404330:	fe842703          	lw	a4,-24(s0)
20404334:	fe042783          	lw	a5,-32(s0)
20404338:	f8f74de3          	blt	a4,a5,204042d2 <__metal_driver_riscv_plic0_init+0x64>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123 (discriminator 2)
	    }

	    __metal_plic0_set_threshold(controller, 0);
2040433c:	4581                	li	a1,0
2040433e:	fcc42503          	lw	a0,-52(s0)
20404342:	cffff0ef          	jal	ra,20404040 <__metal_plic0_set_threshold>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126 (discriminator 2)

	    /* Register plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_register(intc, line, NULL, plic);
20404346:	fdc42783          	lw	a5,-36(s0)
2040434a:	439c                	lw	a5,0(a5)
2040434c:	4fdc                	lw	a5,28(a5)
2040434e:	fe442683          	lw	a3,-28(s0)
20404352:	4601                	li	a2,0
20404354:	fd842583          	lw	a1,-40(s0)
20404358:	fdc42503          	lw	a0,-36(s0)
2040435c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:128 (discriminator 2)
	    /* Register plic handler for dispatching its device interrupts */
	    intc->vtable->interrupt_register(intc, line, __metal_plic0_handler, plic);
2040435e:	fdc42783          	lw	a5,-36(s0)
20404362:	439c                	lw	a5,0(a5)
20404364:	4fd8                	lw	a4,28(a5)
20404366:	fe442683          	lw	a3,-28(s0)
2040436a:	204047b7          	lui	a5,0x20404
2040436e:	1de78613          	addi	a2,a5,478 # 204041de <__metal_plic0_handler>
20404372:	fd842583          	lw	a1,-40(s0)
20404376:	fdc42503          	lw	a0,-36(s0)
2040437a:	9702                	jalr	a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
	    /* Enable plic (ext) interrupt with with parent controller */
	    intc->vtable->interrupt_enable(intc, line);
2040437c:	fdc42783          	lw	a5,-36(s0)
20404380:	439c                	lw	a5,0(a5)
20404382:	53dc                	lw	a5,36(a5)
20404384:	fd842583          	lw	a1,-40(s0)
20404388:	fdc42503          	lw	a0,-36(s0)
2040438c:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 2)
	for(int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040438e:	fec42783          	lw	a5,-20(s0)
20404392:	0785                	addi	a5,a5,1
20404394:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107 (discriminator 1)
20404398:	fec42783          	lw	a5,-20(s0)
2040439c:	eef05be3          	blez	a5,20404292 <__metal_driver_riscv_plic0_init+0x24>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
	}
        plic->init_done = 1;
204043a0:	fe442783          	lw	a5,-28(s0)
204043a4:	4705                	li	a4,1
204043a6:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:134
    }
}
204043a8:	0001                	nop
204043aa:	50f2                	lw	ra,60(sp)
204043ac:	5462                	lw	s0,56(sp)
204043ae:	6121                	addi	sp,sp,64
204043b0:	8082                	ret

204043b2 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
204043b2:	7179                	addi	sp,sp,-48
204043b4:	d606                	sw	ra,44(sp)
204043b6:	d422                	sw	s0,40(sp)
204043b8:	1800                	addi	s0,sp,48
204043ba:	fca42e23          	sw	a0,-36(s0)
204043be:	fcb42c23          	sw	a1,-40(s0)
204043c2:	fcc42a23          	sw	a2,-44(s0)
204043c6:	fcd42823          	sw	a3,-48(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:140
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204043ca:	fdc42783          	lw	a5,-36(s0)
204043ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204043d2:	fdc42503          	lw	a0,-36(s0)
204043d6:	b6bff0ef          	jal	ra,20403f40 <__metal_driver_sifive_plic0_num_interrupts>
204043da:	872a                	mv	a4,a0
204043dc:	fd842783          	lw	a5,-40(s0)
204043e0:	00e7c463          	blt	a5,a4,204043e8 <__metal_driver_riscv_plic0_register+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
        return -1;
204043e4:	57fd                	li	a5,-1
204043e6:	a051                	j	2040446a <__metal_driver_riscv_plic0_register+0xb8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
    }
 
    if (isr) {
204043e8:	fd442783          	lw	a5,-44(s0)
204043ec:	cf9d                	beqz	a5,2040442a <__metal_driver_riscv_plic0_register+0x78>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
        __metal_plic0_set_priority(controller, id, 2);
204043ee:	4609                	li	a2,2
204043f0:	fd842583          	lw	a1,-40(s0)
204043f4:	fdc42503          	lw	a0,-36(s0)
204043f8:	cadff0ef          	jal	ra,204040a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:148
	plic->metal_exint_table[id] = isr;
204043fc:	fec42703          	lw	a4,-20(s0)
20404400:	fd842783          	lw	a5,-40(s0)
20404404:	078a                	slli	a5,a5,0x2
20404406:	97ba                	add	a5,a5,a4
20404408:	fd442703          	lw	a4,-44(s0)
2040440c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:149
	plic->metal_exdata_table[id].exint_data = priv;
2040440e:	fec42683          	lw	a3,-20(s0)
20404412:	fd842703          	lw	a4,-40(s0)
20404416:	87ba                	mv	a5,a4
20404418:	0786                	slli	a5,a5,0x1
2040441a:	97ba                	add	a5,a5,a4
2040441c:	078e                	slli	a5,a5,0x3
2040441e:	97b6                	add	a5,a5,a3
20404420:	fd042703          	lw	a4,-48(s0)
20404424:	08e7a423          	sw	a4,136(a5)
20404428:	a081                	j	20404468 <__metal_driver_riscv_plic0_register+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151
    } else {
        __metal_plic0_set_priority(controller, id, 1);
2040442a:	4605                	li	a2,1
2040442c:	fd842583          	lw	a1,-40(s0)
20404430:	fdc42503          	lw	a0,-36(s0)
20404434:	c71ff0ef          	jal	ra,204040a4 <__metal_plic0_set_priority>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:152
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
20404438:	fec42703          	lw	a4,-20(s0)
2040443c:	fd842783          	lw	a5,-40(s0)
20404440:	078a                	slli	a5,a5,0x2
20404442:	97ba                	add	a5,a5,a4
20404444:	20404737          	lui	a4,0x20404
20404448:	1c670713          	addi	a4,a4,454 # 204041c6 <__metal_plic0_default_handler>
2040444c:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:153
	plic->metal_exdata_table[id].sub_int = priv;
2040444e:	fec42683          	lw	a3,-20(s0)
20404452:	fd842703          	lw	a4,-40(s0)
20404456:	87ba                	mv	a5,a4
20404458:	0786                	slli	a5,a5,0x1
2040445a:	97ba                	add	a5,a5,a4
2040445c:	078e                	slli	a5,a5,0x3
2040445e:	97b6                	add	a5,a5,a3
20404460:	fd042703          	lw	a4,-48(s0)
20404464:	08e7a223          	sw	a4,132(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156
    }

    return 0;
20404468:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:157
}
2040446a:	853e                	mv	a0,a5
2040446c:	50b2                	lw	ra,44(sp)
2040446e:	5422                	lw	s0,40(sp)
20404470:	6145                	addi	sp,sp,48
20404472:	8082                	ret

20404474 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:160

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
20404474:	7179                	addi	sp,sp,-48
20404476:	d606                	sw	ra,44(sp)
20404478:	d422                	sw	s0,40(sp)
2040447a:	1800                	addi	s0,sp,48
2040447c:	fca42e23          	sw	a0,-36(s0)
20404480:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404484:	fdc42783          	lw	a5,-36(s0)
20404488:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040448c:	fdc42503          	lw	a0,-36(s0)
20404490:	ab1ff0ef          	jal	ra,20403f40 <__metal_driver_sifive_plic0_num_interrupts>
20404494:	872a                	mv	a4,a0
20404496:	fd842783          	lw	a5,-40(s0)
2040449a:	00e7c463          	blt	a5,a4,204044a2 <__metal_driver_riscv_plic0_enable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:164
        return -1;
2040449e:	57fd                	li	a5,-1
204044a0:	a809                	j	204044b2 <__metal_driver_riscv_plic0_enable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
204044a2:	4605                	li	a2,1
204044a4:	fd842583          	lw	a1,-40(s0)
204044a8:	fec42503          	lw	a0,-20(s0)
204044ac:	c8fff0ef          	jal	ra,2040413a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    return 0;
204044b0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:169
}
204044b2:	853e                	mv	a0,a5
204044b4:	50b2                	lw	ra,44(sp)
204044b6:	5422                	lw	s0,40(sp)
204044b8:	6145                	addi	sp,sp,48
204044ba:	8082                	ret

204044bc <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:172

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
204044bc:	7179                	addi	sp,sp,-48
204044be:	d606                	sw	ra,44(sp)
204044c0:	d422                	sw	s0,40(sp)
204044c2:	1800                	addi	s0,sp,48
204044c4:	fca42e23          	sw	a0,-36(s0)
204044c8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:173
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204044cc:	fdc42783          	lw	a5,-36(s0)
204044d0:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204044d4:	fdc42503          	lw	a0,-36(s0)
204044d8:	a69ff0ef          	jal	ra,20403f40 <__metal_driver_sifive_plic0_num_interrupts>
204044dc:	872a                	mv	a4,a0
204044de:	fd842783          	lw	a5,-40(s0)
204044e2:	00e7c463          	blt	a5,a4,204044ea <__metal_driver_riscv_plic0_disable+0x2e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        return -1;
204044e6:	57fd                	li	a5,-1
204044e8:	a809                	j	204044fa <__metal_driver_riscv_plic0_disable+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:178
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
204044ea:	4601                	li	a2,0
204044ec:	fd842583          	lw	a1,-40(s0)
204044f0:	fec42503          	lw	a0,-20(s0)
204044f4:	c47ff0ef          	jal	ra,2040413a <__metal_plic0_enable>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    return 0;
204044f8:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
}
204044fa:	853e                	mv	a0,a5
204044fc:	50b2                	lw	ra,44(sp)
204044fe:	5422                	lw	s0,40(sp)
20404500:	6145                	addi	sp,sp,48
20404502:	8082                	ret

20404504 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:388
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404504:	1101                	addi	sp,sp,-32
20404506:	ce22                	sw	s0,28(sp)
20404508:	1000                	addi	s0,sp,32
2040450a:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:389
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2040450e:	fec42703          	lw	a4,-20(s0)
20404512:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404516:	00f71563          	bne	a4,a5,20404520 <__metal_driver_sifive_gpio0_base+0x1c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:390
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040451a:	100127b7          	lui	a5,0x10012
2040451e:	a011                	j	20404522 <__metal_driver_sifive_gpio0_base+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:393
	}
	else {
		return 0;
20404520:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:395
	}
}
20404522:	853e                	mv	a0,a5
20404524:	4472                	lw	s0,28(sp)
20404526:	6105                	addi	sp,sp,32
20404528:	8082                	ret

2040452a <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:418
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
2040452a:	1101                	addi	sp,sp,-32
2040452c:	ce22                	sw	s0,28(sp)
2040452e:	1000                	addi	s0,sp,32
20404530:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:419
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404534:	fec42703          	lw	a4,-20(s0)
20404538:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
2040453c:	00f71763          	bne	a4,a5,2040454a <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:420
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404540:	800007b7          	lui	a5,0x80000
20404544:	47878793          	addi	a5,a5,1144 # 80000478 <metal_segment_heap_target_end+0xffffefcc>
20404548:	a011                	j	2040454c <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:423
	}
	else {
		return 0;
2040454a:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:425
	}
}
2040454c:	853e                	mv	a0,a5
2040454e:	4472                	lw	s0,28(sp)
20404550:	6105                	addi	sp,sp,32
20404552:	8082                	ret

20404554 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:428

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404554:	1101                	addi	sp,sp,-32
20404556:	ce22                	sw	s0,28(sp)
20404558:	1000                	addi	s0,sp,32
2040455a:	fea42623          	sw	a0,-20(s0)
2040455e:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404562:	fec42703          	lw	a4,-20(s0)
20404566:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
2040456a:	00f71763          	bne	a4,a5,20404578 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:429 (discriminator 1)
2040456e:	fe842783          	lw	a5,-24(s0)
20404572:	e399                	bnez	a5,20404578 <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:430
		return 7;
20404574:	479d                	li	a5,7
20404576:	a269                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20404578:	fec42703          	lw	a4,-20(s0)
2040457c:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404580:	00f71963          	bne	a4,a5,20404592 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:432 (discriminator 1)
20404584:	fe842703          	lw	a4,-24(s0)
20404588:	4785                	li	a5,1
2040458a:	00f71463          	bne	a4,a5,20404592 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:433
		return 8;
2040458e:	47a1                	li	a5,8
20404590:	aa85                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20404592:	fec42703          	lw	a4,-20(s0)
20404596:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
2040459a:	00f71963          	bne	a4,a5,204045ac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:435 (discriminator 1)
2040459e:	fe842703          	lw	a4,-24(s0)
204045a2:	4789                	li	a5,2
204045a4:	00f71463          	bne	a4,a5,204045ac <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:436
		return 9;
204045a8:	47a5                	li	a5,9
204045aa:	aa99                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
204045ac:	fec42703          	lw	a4,-20(s0)
204045b0:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
204045b4:	00f71963          	bne	a4,a5,204045c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:438 (discriminator 1)
204045b8:	fe842703          	lw	a4,-24(s0)
204045bc:	478d                	li	a5,3
204045be:	00f71463          	bne	a4,a5,204045c6 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:439
		return 10;
204045c2:	47a9                	li	a5,10
204045c4:	aa35                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204045c6:	fec42703          	lw	a4,-20(s0)
204045ca:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
204045ce:	00f71963          	bne	a4,a5,204045e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:441 (discriminator 1)
204045d2:	fe842703          	lw	a4,-24(s0)
204045d6:	4791                	li	a5,4
204045d8:	00f71463          	bne	a4,a5,204045e0 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:442
		return 11;
204045dc:	47ad                	li	a5,11
204045de:	a20d                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
204045e0:	fec42703          	lw	a4,-20(s0)
204045e4:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
204045e8:	00f71963          	bne	a4,a5,204045fa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:444 (discriminator 1)
204045ec:	fe842703          	lw	a4,-24(s0)
204045f0:	4795                	li	a5,5
204045f2:	00f71463          	bne	a4,a5,204045fa <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:445
		return 12;
204045f6:	47b1                	li	a5,12
204045f8:	a221                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
204045fa:	fec42703          	lw	a4,-20(s0)
204045fe:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404602:	00f71963          	bne	a4,a5,20404614 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:447 (discriminator 1)
20404606:	fe842703          	lw	a4,-24(s0)
2040460a:	4799                	li	a5,6
2040460c:	00f71463          	bne	a4,a5,20404614 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:448
		return 13;
20404610:	47b5                	li	a5,13
20404612:	a0fd                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404614:	fec42703          	lw	a4,-20(s0)
20404618:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
2040461c:	00f71963          	bne	a4,a5,2040462e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:450 (discriminator 1)
20404620:	fe842703          	lw	a4,-24(s0)
20404624:	479d                	li	a5,7
20404626:	00f71463          	bne	a4,a5,2040462e <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:451
		return 14;
2040462a:	47b9                	li	a5,14
2040462c:	a8d1                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
2040462e:	fec42703          	lw	a4,-20(s0)
20404632:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404636:	00f71963          	bne	a4,a5,20404648 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:453 (discriminator 1)
2040463a:	fe842703          	lw	a4,-24(s0)
2040463e:	47a1                	li	a5,8
20404640:	00f71463          	bne	a4,a5,20404648 <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:454
		return 15;
20404644:	47bd                	li	a5,15
20404646:	a86d                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20404648:	fec42703          	lw	a4,-20(s0)
2040464c:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404650:	00f71963          	bne	a4,a5,20404662 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:456 (discriminator 1)
20404654:	fe842703          	lw	a4,-24(s0)
20404658:	47a5                	li	a5,9
2040465a:	00f71463          	bne	a4,a5,20404662 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:457
		return 16;
2040465e:	47c1                	li	a5,16
20404660:	a045                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404662:	fec42703          	lw	a4,-20(s0)
20404666:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
2040466a:	00f71963          	bne	a4,a5,2040467c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:459 (discriminator 1)
2040466e:	fe842703          	lw	a4,-24(s0)
20404672:	47a9                	li	a5,10
20404674:	00f71463          	bne	a4,a5,2040467c <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:460
		return 17;
20404678:	47c5                	li	a5,17
2040467a:	a059                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2040467c:	fec42703          	lw	a4,-20(s0)
20404680:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404684:	00f71963          	bne	a4,a5,20404696 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:462 (discriminator 1)
20404688:	fe842703          	lw	a4,-24(s0)
2040468c:	47ad                	li	a5,11
2040468e:	00f71463          	bne	a4,a5,20404696 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:463
		return 18;
20404692:	47c9                	li	a5,18
20404694:	a0b5                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20404696:	fec42703          	lw	a4,-20(s0)
2040469a:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
2040469e:	00f71963          	bne	a4,a5,204046b0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:465 (discriminator 1)
204046a2:	fe842703          	lw	a4,-24(s0)
204046a6:	47b1                	li	a5,12
204046a8:	00f71463          	bne	a4,a5,204046b0 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:466
		return 19;
204046ac:	47cd                	li	a5,19
204046ae:	a889                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204046b0:	fec42703          	lw	a4,-20(s0)
204046b4:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
204046b8:	00f71963          	bne	a4,a5,204046ca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:468 (discriminator 1)
204046bc:	fe842703          	lw	a4,-24(s0)
204046c0:	47b5                	li	a5,13
204046c2:	00f71463          	bne	a4,a5,204046ca <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:469
		return 20;
204046c6:	47d1                	li	a5,20
204046c8:	a825                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204046ca:	fec42703          	lw	a4,-20(s0)
204046ce:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
204046d2:	00f71963          	bne	a4,a5,204046e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:471 (discriminator 1)
204046d6:	fe842703          	lw	a4,-24(s0)
204046da:	47b9                	li	a5,14
204046dc:	00f71463          	bne	a4,a5,204046e4 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:472
		return 21;
204046e0:	47d5                	li	a5,21
204046e2:	a839                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
204046e4:	fec42703          	lw	a4,-20(s0)
204046e8:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
204046ec:	00f71963          	bne	a4,a5,204046fe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:474 (discriminator 1)
204046f0:	fe842703          	lw	a4,-24(s0)
204046f4:	47bd                	li	a5,15
204046f6:	00f71463          	bne	a4,a5,204046fe <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:475
		return 22;
204046fa:	47d9                	li	a5,22
204046fc:	a011                	j	20404700 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:478
	}
	else {
		return 0;
204046fe:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:480
	}
}
20404700:	853e                	mv	a0,a5
20404702:	4472                	lw	s0,28(sp)
20404704:	6105                	addi	sp,sp,32
20404706:	8082                	ret

20404708 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio, long source)
{
20404708:	7179                	addi	sp,sp,-48
2040470a:	d606                	sw	ra,44(sp)
2040470c:	d422                	sw	s0,40(sp)
2040470e:	1800                	addi	s0,sp,48
20404710:	fca42e23          	sw	a0,-36(s0)
20404714:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404718:	fdc42503          	lw	a0,-36(s0)
2040471c:	de9ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
20404720:	87aa                	mv	a5,a0
20404722:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:16

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  |= source;
20404726:	fec42783          	lw	a5,-20(s0)
2040472a:	0791                	addi	a5,a5,4
2040472c:	4398                	lw	a4,0(a5)
2040472e:	fd842783          	lw	a5,-40(s0)
20404732:	fec42683          	lw	a3,-20(s0)
20404736:	0691                	addi	a3,a3,4
20404738:	8fd9                	or	a5,a5,a4
2040473a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:18

    return 0;
2040473c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19
}
2040473e:	853e                	mv	a0,a5
20404740:	50b2                	lw	ra,44(sp)
20404742:	5422                	lw	s0,40(sp)
20404744:	6145                	addi	sp,sp,48
20404746:	8082                	ret

20404748 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:22

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20404748:	7179                	addi	sp,sp,-48
2040474a:	d606                	sw	ra,44(sp)
2040474c:	d422                	sw	s0,40(sp)
2040474e:	1800                	addi	s0,sp,48
20404750:	fca42e23          	sw	a0,-36(s0)
20404754:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404758:	fdc42503          	lw	a0,-36(s0)
2040475c:	da9ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
20404760:	87aa                	mv	a5,a0
20404762:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:25

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN))  &= ~source;
20404766:	fec42783          	lw	a5,-20(s0)
2040476a:	0791                	addi	a5,a5,4
2040476c:	439c                	lw	a5,0(a5)
2040476e:	fd842703          	lw	a4,-40(s0)
20404772:	fff74713          	not	a4,a4
20404776:	86ba                	mv	a3,a4
20404778:	fec42703          	lw	a4,-20(s0)
2040477c:	0711                	addi	a4,a4,4
2040477e:	8ff5                	and	a5,a5,a3
20404780:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    return 0;
20404782:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:28
}
20404784:	853e                	mv	a0,a5
20404786:	50b2                	lw	ra,44(sp)
20404788:	5422                	lw	s0,40(sp)
2040478a:	6145                	addi	sp,sp,48
2040478c:	8082                	ret

2040478e <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:31

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio)
{
2040478e:	7179                	addi	sp,sp,-48
20404790:	d606                	sw	ra,44(sp)
20404792:	d422                	sw	s0,40(sp)
20404794:	1800                	addi	s0,sp,48
20404796:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040479a:	fdc42503          	lw	a0,-36(s0)
2040479e:	d67ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
204047a2:	87aa                	mv	a5,a0
204047a4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:34

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
204047a8:	fec42783          	lw	a5,-20(s0)
204047ac:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35
}
204047ae:	853e                	mv	a0,a5
204047b0:	50b2                	lw	ra,44(sp)
204047b2:	5422                	lw	s0,40(sp)
204047b4:	6145                	addi	sp,sp,48
204047b6:	8082                	ret

204047b8 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:38

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
204047b8:	7179                	addi	sp,sp,-48
204047ba:	d606                	sw	ra,44(sp)
204047bc:	d422                	sw	s0,40(sp)
204047be:	1800                	addi	s0,sp,48
204047c0:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047c4:	fdc42503          	lw	a0,-36(s0)
204047c8:	d3dff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
204047cc:	87aa                	mv	a5,a0
204047ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:41

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
204047d2:	fec42783          	lw	a5,-20(s0)
204047d6:	07b1                	addi	a5,a5,12
204047d8:	439c                	lw	a5,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42
}
204047da:	853e                	mv	a0,a5
204047dc:	50b2                	lw	ra,44(sp)
204047de:	5422                	lw	s0,40(sp)
204047e0:	6145                	addi	sp,sp,48
204047e2:	8082                	ret

204047e4 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:46


int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio, long source)
{
204047e4:	7179                	addi	sp,sp,-48
204047e6:	d606                	sw	ra,44(sp)
204047e8:	d422                	sw	s0,40(sp)
204047ea:	1800                	addi	s0,sp,48
204047ec:	fca42e23          	sw	a0,-36(s0)
204047f0:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204047f4:	fdc42503          	lw	a0,-36(s0)
204047f8:	d0dff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
204047fc:	87aa                	mv	a5,a0
204047fe:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:49

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  &= ~source;
20404802:	fec42783          	lw	a5,-20(s0)
20404806:	07a1                	addi	a5,a5,8
20404808:	439c                	lw	a5,0(a5)
2040480a:	fd842703          	lw	a4,-40(s0)
2040480e:	fff74713          	not	a4,a4
20404812:	86ba                	mv	a3,a4
20404814:	fec42703          	lw	a4,-20(s0)
20404818:	0721                	addi	a4,a4,8
2040481a:	8ff5                	and	a5,a5,a3
2040481c:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    return 0;
2040481e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:52
}
20404820:	853e                	mv	a0,a5
20404822:	50b2                	lw	ra,44(sp)
20404824:	5422                	lw	s0,40(sp)
20404826:	6145                	addi	sp,sp,48
20404828:	8082                	ret

2040482a <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:55

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
2040482a:	7179                	addi	sp,sp,-48
2040482c:	d606                	sw	ra,44(sp)
2040482e:	d422                	sw	s0,40(sp)
20404830:	1800                	addi	s0,sp,48
20404832:	fca42e23          	sw	a0,-36(s0)
20404836:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:56
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040483a:	fdc42503          	lw	a0,-36(s0)
2040483e:	cc7ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
20404842:	87aa                	mv	a5,a0
20404844:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN))  |= source;
20404848:	fec42783          	lw	a5,-20(s0)
2040484c:	07a1                	addi	a5,a5,8
2040484e:	4398                	lw	a4,0(a5)
20404850:	fd842783          	lw	a5,-40(s0)
20404854:	fec42683          	lw	a3,-20(s0)
20404858:	06a1                	addi	a3,a3,8
2040485a:	8fd9                	or	a5,a5,a4
2040485c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:60

    return 0;
2040485e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61
}
20404860:	853e                	mv	a0,a5
20404862:	50b2                	lw	ra,44(sp)
20404864:	5422                	lw	s0,40(sp)
20404866:	6145                	addi	sp,sp,48
20404868:	8082                	ret

2040486a <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
2040486a:	7179                	addi	sp,sp,-48
2040486c:	d606                	sw	ra,44(sp)
2040486e:	d422                	sw	s0,40(sp)
20404870:	1800                	addi	s0,sp,48
20404872:	fca42e23          	sw	a0,-36(s0)
20404876:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:65
    long base = __metal_driver_sifive_gpio0_base(ggpio);
2040487a:	fdc42503          	lw	a0,-36(s0)
2040487e:	c87ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
20404882:	87aa                	mv	a5,a0
20404884:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |= value;
20404888:	fec42783          	lw	a5,-20(s0)
2040488c:	07b1                	addi	a5,a5,12
2040488e:	4398                	lw	a4,0(a5)
20404890:	fd842783          	lw	a5,-40(s0)
20404894:	fec42683          	lw	a3,-20(s0)
20404898:	06b1                	addi	a3,a3,12
2040489a:	8fd9                	or	a5,a5,a4
2040489c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:69

    return 0;
2040489e:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70
}
204048a0:	853e                	mv	a0,a5
204048a2:	50b2                	lw	ra,44(sp)
204048a4:	5422                	lw	s0,40(sp)
204048a6:	6145                	addi	sp,sp,48
204048a8:	8082                	ret

204048aa <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
204048aa:	7179                	addi	sp,sp,-48
204048ac:	d606                	sw	ra,44(sp)
204048ae:	d422                	sw	s0,40(sp)
204048b0:	1800                	addi	s0,sp,48
204048b2:	fca42e23          	sw	a0,-36(s0)
204048b6:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204048ba:	fdc42503          	lw	a0,-36(s0)
204048be:	c47ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
204048c2:	87aa                	mv	a5,a0
204048c4:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:76

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &= ~value;
204048c8:	fec42783          	lw	a5,-20(s0)
204048cc:	07b1                	addi	a5,a5,12
204048ce:	439c                	lw	a5,0(a5)
204048d0:	fd842703          	lw	a4,-40(s0)
204048d4:	fff74713          	not	a4,a4
204048d8:	86ba                	mv	a3,a4
204048da:	fec42703          	lw	a4,-20(s0)
204048de:	0731                	addi	a4,a4,12
204048e0:	8ff5                	and	a5,a5,a3
204048e2:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78

    return 0;
204048e4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:79
}
204048e6:	853e                	mv	a0,a5
204048e8:	50b2                	lw	ra,44(sp)
204048ea:	5422                	lw	s0,40(sp)
204048ec:	6145                	addi	sp,sp,48
204048ee:	8082                	ret

204048f0 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:82

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
204048f0:	7179                	addi	sp,sp,-48
204048f2:	d606                	sw	ra,44(sp)
204048f4:	d422                	sw	s0,40(sp)
204048f6:	1800                	addi	s0,sp,48
204048f8:	fca42e23          	sw	a0,-36(s0)
204048fc:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404900:	fdc42503          	lw	a0,-36(s0)
20404904:	c01ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
20404908:	87aa                	mv	a5,a0
2040490a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
2040490e:	fec42783          	lw	a5,-20(s0)
20404912:	07b1                	addi	a5,a5,12
20404914:	4398                	lw	a4,0(a5)
20404916:	fd842783          	lw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
2040491a:	fec42683          	lw	a3,-20(s0)
2040491e:	06b1                	addi	a3,a3,12
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:86
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^ value;
20404920:	8fb9                	xor	a5,a5,a4
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:85
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404922:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88

    return 0;
20404924:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:89
}
20404926:	853e                	mv	a0,a5
20404928:	50b2                	lw	ra,44(sp)
2040492a:	5422                	lw	s0,40(sp)
2040492c:	6145                	addi	sp,sp,48
2040492e:	8082                	ret

20404930 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20404930:	7179                	addi	sp,sp,-48
20404932:	d606                	sw	ra,44(sp)
20404934:	d422                	sw	s0,40(sp)
20404936:	1800                	addi	s0,sp,48
20404938:	fca42e23          	sw	a0,-36(s0)
2040493c:	fcb42c23          	sw	a1,-40(s0)
20404940:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:93
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404944:	fdc42503          	lw	a0,-36(s0)
20404948:	bbdff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
2040494c:	87aa                	mv	a5,a0
2040494e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) &= ~source;
20404952:	fec42783          	lw	a5,-20(s0)
20404956:	03c78793          	addi	a5,a5,60
2040495a:	439c                	lw	a5,0(a5)
2040495c:	fd842703          	lw	a4,-40(s0)
20404960:	fff74713          	not	a4,a4
20404964:	86ba                	mv	a3,a4
20404966:	fec42703          	lw	a4,-20(s0)
2040496a:	03c70713          	addi	a4,a4,60
2040496e:	8ff5                	and	a5,a5,a3
20404970:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  |= dest;
20404972:	fec42783          	lw	a5,-20(s0)
20404976:	03878793          	addi	a5,a5,56
2040497a:	4398                	lw	a4,0(a5)
2040497c:	fd442783          	lw	a5,-44(s0)
20404980:	fec42683          	lw	a3,-20(s0)
20404984:	03868693          	addi	a3,a3,56
20404988:	8fd9                	or	a5,a5,a4
2040498a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:98

    return 0;
2040498c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99
}
2040498e:	853e                	mv	a0,a5
20404990:	50b2                	lw	ra,44(sp)
20404992:	5422                	lw	s0,40(sp)
20404994:	6145                	addi	sp,sp,48
20404996:	8082                	ret

20404998 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:102

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio, long source)
{
20404998:	7179                	addi	sp,sp,-48
2040499a:	d606                	sw	ra,44(sp)
2040499c:	d422                	sw	s0,40(sp)
2040499e:	1800                	addi	s0,sp,48
204049a0:	fca42e23          	sw	a0,-36(s0)
204049a4:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049a8:	fdc42503          	lw	a0,-36(s0)
204049ac:	b59ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
204049b0:	87aa                	mv	a5,a0
204049b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:105

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN))  &= ~source;
204049b6:	fec42783          	lw	a5,-20(s0)
204049ba:	03878793          	addi	a5,a5,56
204049be:	439c                	lw	a5,0(a5)
204049c0:	fd842703          	lw	a4,-40(s0)
204049c4:	fff74713          	not	a4,a4
204049c8:	86ba                	mv	a3,a4
204049ca:	fec42703          	lw	a4,-20(s0)
204049ce:	03870713          	addi	a4,a4,56
204049d2:	8ff5                	and	a5,a5,a3
204049d4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107

    return 0;
204049d6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
204049d8:	853e                	mv	a0,a5
204049da:	50b2                	lw	ra,44(sp)
204049dc:	5422                	lw	s0,40(sp)
204049de:	6145                	addi	sp,sp,48
204049e0:	8082                	ret

204049e2 <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio, long source, int intr_type)
{
204049e2:	7179                	addi	sp,sp,-48
204049e4:	d606                	sw	ra,44(sp)
204049e6:	d422                	sw	s0,40(sp)
204049e8:	1800                	addi	s0,sp,48
204049ea:	fca42e23          	sw	a0,-36(s0)
204049ee:	fcb42c23          	sw	a1,-40(s0)
204049f2:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
204049f6:	fdc42503          	lw	a0,-36(s0)
204049fa:	b0bff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
204049fe:	87aa                	mv	a5,a0
20404a00:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    switch (intr_type)
20404a04:	fd442703          	lw	a4,-44(s0)
20404a08:	479d                	li	a5,7
20404a0a:	1ce7e963          	bltu	a5,a4,20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404a0e:	fd442783          	lw	a5,-44(s0)
20404a12:	00279713          	slli	a4,a5,0x2
20404a16:	204067b7          	lui	a5,0x20406
20404a1a:	97078793          	addi	a5,a5,-1680 # 20405970 <__metal_driver_vtable_riscv_plic0+0x4c>
20404a1e:	97ba                	add	a5,a5,a4
20404a20:	439c                	lw	a5,0(a5)
20404a22:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117
    {
        case METAL_GPIO_INT_DISABLE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  &= ~source;
20404a24:	fec42783          	lw	a5,-20(s0)
20404a28:	07e1                	addi	a5,a5,24
20404a2a:	439c                	lw	a5,0(a5)
20404a2c:	fd842703          	lw	a4,-40(s0)
20404a30:	fff74713          	not	a4,a4
20404a34:	86ba                	mv	a3,a4
20404a36:	fec42703          	lw	a4,-20(s0)
20404a3a:	0761                	addi	a4,a4,24
20404a3c:	8ff5                	and	a5,a5,a3
20404a3e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  &= ~source;
20404a40:	fec42783          	lw	a5,-20(s0)
20404a44:	02078793          	addi	a5,a5,32
20404a48:	439c                	lw	a5,0(a5)
20404a4a:	fd842703          	lw	a4,-40(s0)
20404a4e:	fff74713          	not	a4,a4
20404a52:	86ba                	mv	a3,a4
20404a54:	fec42703          	lw	a4,-20(s0)
20404a58:	02070713          	addi	a4,a4,32
20404a5c:	8ff5                	and	a5,a5,a3
20404a5e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:119
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  &= ~source;
20404a60:	fec42783          	lw	a5,-20(s0)
20404a64:	02878793          	addi	a5,a5,40
20404a68:	439c                	lw	a5,0(a5)
20404a6a:	fd842703          	lw	a4,-40(s0)
20404a6e:	fff74713          	not	a4,a4
20404a72:	86ba                	mv	a3,a4
20404a74:	fec42703          	lw	a4,-20(s0)
20404a78:	02870713          	addi	a4,a4,40
20404a7c:	8ff5                	and	a5,a5,a3
20404a7e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:120
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  &= ~source;
20404a80:	fec42783          	lw	a5,-20(s0)
20404a84:	03078793          	addi	a5,a5,48
20404a88:	439c                	lw	a5,0(a5)
20404a8a:	fd842703          	lw	a4,-40(s0)
20404a8e:	fff74713          	not	a4,a4
20404a92:	86ba                	mv	a3,a4
20404a94:	fec42703          	lw	a4,-20(s0)
20404a98:	03070713          	addi	a4,a4,48
20404a9c:	8ff5                	and	a5,a5,a3
20404a9e:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121
            break;
20404aa0:	aa35                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:123
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404aa2:	fec42783          	lw	a5,-20(s0)
20404aa6:	07e1                	addi	a5,a5,24
20404aa8:	4398                	lw	a4,0(a5)
20404aaa:	fd842783          	lw	a5,-40(s0)
20404aae:	fec42683          	lw	a3,-20(s0)
20404ab2:	06e1                	addi	a3,a3,24
20404ab4:	8fd9                	or	a5,a5,a4
20404ab6:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:124
            break;
20404ab8:	a215                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:126
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404aba:	fec42783          	lw	a5,-20(s0)
20404abe:	02078793          	addi	a5,a5,32
20404ac2:	4398                	lw	a4,0(a5)
20404ac4:	fd842783          	lw	a5,-40(s0)
20404ac8:	fec42683          	lw	a3,-20(s0)
20404acc:	02068693          	addi	a3,a3,32
20404ad0:	8fd9                	or	a5,a5,a4
20404ad2:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127
            break;
20404ad4:	a221                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404ad6:	fec42783          	lw	a5,-20(s0)
20404ada:	07e1                	addi	a5,a5,24
20404adc:	4398                	lw	a4,0(a5)
20404ade:	fd842783          	lw	a5,-40(s0)
20404ae2:	fec42683          	lw	a3,-20(s0)
20404ae6:	06e1                	addi	a3,a3,24
20404ae8:	8fd9                	or	a5,a5,a4
20404aea:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:130
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404aec:	fec42783          	lw	a5,-20(s0)
20404af0:	02078793          	addi	a5,a5,32
20404af4:	4398                	lw	a4,0(a5)
20404af6:	fd842783          	lw	a5,-40(s0)
20404afa:	fec42683          	lw	a3,-20(s0)
20404afe:	02068693          	addi	a3,a3,32
20404b02:	8fd9                	or	a5,a5,a4
20404b04:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
            break;
20404b06:	a8d9                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404b08:	fec42783          	lw	a5,-20(s0)
20404b0c:	02878793          	addi	a5,a5,40
20404b10:	4398                	lw	a4,0(a5)
20404b12:	fd842783          	lw	a5,-40(s0)
20404b16:	fec42683          	lw	a3,-20(s0)
20404b1a:	02868693          	addi	a3,a3,40
20404b1e:	8fd9                	or	a5,a5,a4
20404b20:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
            break;
20404b22:	a86d                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:136
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404b24:	fec42783          	lw	a5,-20(s0)
20404b28:	03078793          	addi	a5,a5,48
20404b2c:	4398                	lw	a4,0(a5)
20404b2e:	fd842783          	lw	a5,-40(s0)
20404b32:	fec42683          	lw	a3,-20(s0)
20404b36:	03068693          	addi	a3,a3,48
20404b3a:	8fd9                	or	a5,a5,a4
20404b3c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
            break;
20404b3e:	a879                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:139
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404b40:	fec42783          	lw	a5,-20(s0)
20404b44:	02878793          	addi	a5,a5,40
20404b48:	4398                	lw	a4,0(a5)
20404b4a:	fd842783          	lw	a5,-40(s0)
20404b4e:	fec42683          	lw	a3,-20(s0)
20404b52:	02868693          	addi	a3,a3,40
20404b56:	8fd9                	or	a5,a5,a4
20404b58:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:140
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404b5a:	fec42783          	lw	a5,-20(s0)
20404b5e:	03078793          	addi	a5,a5,48
20404b62:	4398                	lw	a4,0(a5)
20404b64:	fd842783          	lw	a5,-40(s0)
20404b68:	fec42683          	lw	a3,-20(s0)
20404b6c:	03068693          	addi	a3,a3,48
20404b70:	8fd9                	or	a5,a5,a4
20404b72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
            break;
20404b74:	a0a5                	j	20404bdc <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:143
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE))  |= source;
20404b76:	fec42783          	lw	a5,-20(s0)
20404b7a:	07e1                	addi	a5,a5,24
20404b7c:	4398                	lw	a4,0(a5)
20404b7e:	fd842783          	lw	a5,-40(s0)
20404b82:	fec42683          	lw	a3,-20(s0)
20404b86:	06e1                	addi	a3,a3,24
20404b88:	8fd9                	or	a5,a5,a4
20404b8a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:144
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE))  |= source;
20404b8c:	fec42783          	lw	a5,-20(s0)
20404b90:	02078793          	addi	a5,a5,32
20404b94:	4398                	lw	a4,0(a5)
20404b96:	fd842783          	lw	a5,-40(s0)
20404b9a:	fec42683          	lw	a3,-20(s0)
20404b9e:	02068693          	addi	a3,a3,32
20404ba2:	8fd9                	or	a5,a5,a4
20404ba4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE))  |= source;
20404ba6:	fec42783          	lw	a5,-20(s0)
20404baa:	02878793          	addi	a5,a5,40
20404bae:	4398                	lw	a4,0(a5)
20404bb0:	fd842783          	lw	a5,-40(s0)
20404bb4:	fec42683          	lw	a3,-20(s0)
20404bb8:	02868693          	addi	a3,a3,40
20404bbc:	8fd9                	or	a5,a5,a4
20404bbe:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:146
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE))  |= source;
20404bc0:	fec42783          	lw	a5,-20(s0)
20404bc4:	03078793          	addi	a5,a5,48
20404bc8:	4398                	lw	a4,0(a5)
20404bca:	fd842783          	lw	a5,-40(s0)
20404bce:	fec42683          	lw	a3,-20(s0)
20404bd2:	03068693          	addi	a3,a3,48
20404bd6:	8fd9                	or	a5,a5,a4
20404bd8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
            break;
20404bda:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:149
    }
    return 0;
20404bdc:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:150
}
20404bde:	853e                	mv	a0,a5
20404be0:	50b2                	lw	ra,44(sp)
20404be2:	5422                	lw	s0,40(sp)
20404be4:	6145                	addi	sp,sp,48
20404be6:	8082                	ret

20404be8 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:153

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source, int intr_type)
{
20404be8:	7179                	addi	sp,sp,-48
20404bea:	d606                	sw	ra,44(sp)
20404bec:	d422                	sw	s0,40(sp)
20404bee:	1800                	addi	s0,sp,48
20404bf0:	fca42e23          	sw	a0,-36(s0)
20404bf4:	fcb42c23          	sw	a1,-40(s0)
20404bf8:	fcc42a23          	sw	a2,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:154
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bfc:	fdc42503          	lw	a0,-36(s0)
20404c00:	905ff0ef          	jal	ra,20404504 <__metal_driver_sifive_gpio0_base>
20404c04:	87aa                	mv	a5,a0
20404c06:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156

    switch (intr_type)
20404c0a:	fd442703          	lw	a4,-44(s0)
20404c0e:	479d                	li	a5,7
20404c10:	14e7ea63          	bltu	a5,a4,20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404c14:	fd442783          	lw	a5,-44(s0)
20404c18:	00279713          	slli	a4,a5,0x2
20404c1c:	204067b7          	lui	a5,0x20406
20404c20:	99078793          	addi	a5,a5,-1648 # 20405990 <__metal_driver_vtable_riscv_plic0+0x6c>
20404c24:	97ba                	add	a5,a5,a4
20404c26:	439c                	lw	a5,0(a5)
20404c28:	8782                	jr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    {
        case METAL_GPIO_INT_RISING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404c2a:	fec42783          	lw	a5,-20(s0)
20404c2e:	07f1                	addi	a5,a5,28
20404c30:	4398                	lw	a4,0(a5)
20404c32:	fd842783          	lw	a5,-40(s0)
20404c36:	fec42683          	lw	a3,-20(s0)
20404c3a:	06f1                	addi	a3,a3,28
20404c3c:	8fd9                	or	a5,a5,a4
20404c3e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:160
            break;
20404c40:	a215                	j	20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        case METAL_GPIO_INT_FALLING:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404c42:	fec42783          	lw	a5,-20(s0)
20404c46:	02478793          	addi	a5,a5,36
20404c4a:	4398                	lw	a4,0(a5)
20404c4c:	fd842783          	lw	a5,-40(s0)
20404c50:	fec42683          	lw	a3,-20(s0)
20404c54:	02468693          	addi	a3,a3,36
20404c58:	8fd9                	or	a5,a5,a4
20404c5a:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:163
            break;
20404c5c:	a221                	j	20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
        case METAL_GPIO_INT_BOTH_EDGE:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404c5e:	fec42783          	lw	a5,-20(s0)
20404c62:	07f1                	addi	a5,a5,28
20404c64:	4398                	lw	a4,0(a5)
20404c66:	fd842783          	lw	a5,-40(s0)
20404c6a:	fec42683          	lw	a3,-20(s0)
20404c6e:	06f1                	addi	a3,a3,28
20404c70:	8fd9                	or	a5,a5,a4
20404c72:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:166
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404c74:	fec42783          	lw	a5,-20(s0)
20404c78:	02478793          	addi	a5,a5,36
20404c7c:	4398                	lw	a4,0(a5)
20404c7e:	fd842783          	lw	a5,-40(s0)
20404c82:	fec42683          	lw	a3,-20(s0)
20404c86:	02468693          	addi	a3,a3,36
20404c8a:	8fd9                	or	a5,a5,a4
20404c8c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
            break;
20404c8e:	a8d9                	j	20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        case METAL_GPIO_INT_HIGH:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404c90:	fec42783          	lw	a5,-20(s0)
20404c94:	02c78793          	addi	a5,a5,44
20404c98:	4398                	lw	a4,0(a5)
20404c9a:	fd842783          	lw	a5,-40(s0)
20404c9e:	fec42683          	lw	a3,-20(s0)
20404ca2:	02c68693          	addi	a3,a3,44
20404ca6:	8fd9                	or	a5,a5,a4
20404ca8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:170
            break;
20404caa:	a86d                	j	20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        case METAL_GPIO_INT_LOW:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404cac:	fec42783          	lw	a5,-20(s0)
20404cb0:	03478793          	addi	a5,a5,52
20404cb4:	4398                	lw	a4,0(a5)
20404cb6:	fd842783          	lw	a5,-40(s0)
20404cba:	fec42683          	lw	a3,-20(s0)
20404cbe:	03468693          	addi	a3,a3,52
20404cc2:	8fd9                	or	a5,a5,a4
20404cc4:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:173
            break;
20404cc6:	a879                	j	20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
        case METAL_GPIO_INT_BOTH_LEVEL:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404cc8:	fec42783          	lw	a5,-20(s0)
20404ccc:	02c78793          	addi	a5,a5,44
20404cd0:	4398                	lw	a4,0(a5)
20404cd2:	fd842783          	lw	a5,-40(s0)
20404cd6:	fec42683          	lw	a3,-20(s0)
20404cda:	02c68693          	addi	a3,a3,44
20404cde:	8fd9                	or	a5,a5,a4
20404ce0:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:176
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404ce2:	fec42783          	lw	a5,-20(s0)
20404ce6:	03478793          	addi	a5,a5,52
20404cea:	4398                	lw	a4,0(a5)
20404cec:	fd842783          	lw	a5,-40(s0)
20404cf0:	fec42683          	lw	a3,-20(s0)
20404cf4:	03468693          	addi	a3,a3,52
20404cf8:	8fd9                	or	a5,a5,a4
20404cfa:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:177
            break;
20404cfc:	a0a5                	j	20404d64 <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
        case METAL_GPIO_INT_MAX:
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP))  |= source;
20404cfe:	fec42783          	lw	a5,-20(s0)
20404d02:	07f1                	addi	a5,a5,28
20404d04:	4398                	lw	a4,0(a5)
20404d06:	fd842783          	lw	a5,-40(s0)
20404d0a:	fec42683          	lw	a3,-20(s0)
20404d0e:	06f1                	addi	a3,a3,28
20404d10:	8fd9                	or	a5,a5,a4
20404d12:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:180
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP))  |= source;
20404d14:	fec42783          	lw	a5,-20(s0)
20404d18:	02478793          	addi	a5,a5,36
20404d1c:	4398                	lw	a4,0(a5)
20404d1e:	fd842783          	lw	a5,-40(s0)
20404d22:	fec42683          	lw	a3,-20(s0)
20404d26:	02468693          	addi	a3,a3,36
20404d2a:	8fd9                	or	a5,a5,a4
20404d2c:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:181
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP))  |= source;
20404d2e:	fec42783          	lw	a5,-20(s0)
20404d32:	02c78793          	addi	a5,a5,44
20404d36:	4398                	lw	a4,0(a5)
20404d38:	fd842783          	lw	a5,-40(s0)
20404d3c:	fec42683          	lw	a3,-20(s0)
20404d40:	02c68693          	addi	a3,a3,44
20404d44:	8fd9                	or	a5,a5,a4
20404d46:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:182
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP))  |= source;
20404d48:	fec42783          	lw	a5,-20(s0)
20404d4c:	03478793          	addi	a5,a5,52
20404d50:	4398                	lw	a4,0(a5)
20404d52:	fd842783          	lw	a5,-40(s0)
20404d56:	fec42683          	lw	a3,-20(s0)
20404d5a:	03468693          	addi	a3,a3,52
20404d5e:	8fd9                	or	a5,a5,a4
20404d60:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:183
            break;
20404d62:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
    }
    return 0;
20404d64:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:186
}
20404d66:	853e                	mv	a0,a5
20404d68:	50b2                	lw	ra,44(sp)
20404d6a:	5422                	lw	s0,40(sp)
20404d6c:	6145                	addi	sp,sp,48
20404d6e:	8082                	ret

20404d70 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:190

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio)
{
20404d70:	1101                	addi	sp,sp,-32
20404d72:	ce06                	sw	ra,28(sp)
20404d74:	cc22                	sw	s0,24(sp)
20404d76:	1000                	addi	s0,sp,32
20404d78:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:191
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20404d7c:	fec42503          	lw	a0,-20(s0)
20404d80:	faaff0ef          	jal	ra,2040452a <__metal_driver_sifive_gpio0_interrupt_parent>
20404d84:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
}
20404d86:	853e                	mv	a0,a5
20404d88:	40f2                	lw	ra,28(sp)
20404d8a:	4462                	lw	s0,24(sp)
20404d8c:	6105                	addi	sp,sp,32
20404d8e:	8082                	ret

20404d90 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin)
{
20404d90:	7179                	addi	sp,sp,-48
20404d92:	d606                	sw	ra,44(sp)
20404d94:	d422                	sw	s0,40(sp)
20404d96:	1800                	addi	s0,sp,48
20404d98:	fca42e23          	sw	a0,-36(s0)
20404d9c:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:197
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
20404da0:	fd842583          	lw	a1,-40(s0)
20404da4:	fdc42503          	lw	a0,-36(s0)
20404da8:	facff0ef          	jal	ra,20404554 <__metal_driver_sifive_gpio0_interrupt_lines>
20404dac:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    return irq;
20404db0:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
}
20404db4:	853e                	mv	a0,a5
20404db6:	50b2                	lw	ra,44(sp)
20404db8:	5422                	lw	s0,40(sp)
20404dba:	6145                	addi	sp,sp,48
20404dbc:	8082                	ret

20404dbe <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:564

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
20404dbe:	1101                	addi	sp,sp,-32
20404dc0:	ce22                	sw	s0,28(sp)
20404dc2:	1000                	addi	s0,sp,32
20404dc4:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:565
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404dc8:	fec42703          	lw	a4,-20(s0)
20404dcc:	800007b7          	lui	a5,0x80000
20404dd0:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404dd4:	00f71563          	bne	a4,a5,20404dde <__metal_driver_sifive_uart0_control_base+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:566
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20404dd8:	100137b7          	lui	a5,0x10013
20404ddc:	a011                	j	20404de0 <__metal_driver_sifive_uart0_control_base+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:569
	}
	else {
		return 0;
20404dde:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:571
	}
}
20404de0:	853e                	mv	a0,a5
20404de2:	4472                	lw	s0,28(sp)
20404de4:	6105                	addi	sp,sp,32
20404de6:	8082                	ret

20404de8 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:594
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20404de8:	1101                	addi	sp,sp,-32
20404dea:	ce22                	sw	s0,28(sp)
20404dec:	1000                	addi	s0,sp,32
20404dee:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:595
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404df2:	fec42703          	lw	a4,-20(s0)
20404df6:	800007b7          	lui	a5,0x80000
20404dfa:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404dfe:	00f71763          	bne	a4,a5,20404e0c <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:596
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404e02:	800007b7          	lui	a5,0x80000
20404e06:	47878793          	addi	a5,a5,1144 # 80000478 <metal_segment_heap_target_end+0xffffefcc>
20404e0a:	a011                	j	20404e0e <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:599
	}
	else {
		return 0;
20404e0c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:601
	}
}
20404e0e:	853e                	mv	a0,a5
20404e10:	4472                	lw	s0,28(sp)
20404e12:	6105                	addi	sp,sp,32
20404e14:	8082                	ret

20404e16 <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:604

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
20404e16:	1101                	addi	sp,sp,-32
20404e18:	ce22                	sw	s0,28(sp)
20404e1a:	1000                	addi	s0,sp,32
20404e1c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:605
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e20:	fec42703          	lw	a4,-20(s0)
20404e24:	800007b7          	lui	a5,0x80000
20404e28:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404e2c:	00f71463          	bne	a4,a5,20404e34 <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:606
		return 5;
20404e30:	4795                	li	a5,5
20404e32:	a011                	j	20404e36 <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:609
	}
	else {
		return 0;
20404e34:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:611
	}
}
20404e36:	853e                	mv	a0,a5
20404e38:	4472                	lw	s0,28(sp)
20404e3a:	6105                	addi	sp,sp,32
20404e3c:	8082                	ret

20404e3e <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:614

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20404e3e:	1101                	addi	sp,sp,-32
20404e40:	ce22                	sw	s0,28(sp)
20404e42:	1000                	addi	s0,sp,32
20404e44:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:615
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e48:	fec42703          	lw	a4,-20(s0)
20404e4c:	800007b7          	lui	a5,0x80000
20404e50:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404e54:	00f71763          	bne	a4,a5,20404e62 <__metal_driver_sifive_uart0_clock+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:616
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20404e58:	800007b7          	lui	a5,0x80000
20404e5c:	0b078793          	addi	a5,a5,176 # 800000b0 <metal_segment_heap_target_end+0xffffec04>
20404e60:	a011                	j	20404e64 <__metal_driver_sifive_uart0_clock+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:619
	}
	else {
		return 0;
20404e62:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:621
	}
}
20404e64:	853e                	mv	a0,a5
20404e66:	4472                	lw	s0,28(sp)
20404e68:	6105                	addi	sp,sp,32
20404e6a:	8082                	ret

20404e6c <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:624

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20404e6c:	1101                	addi	sp,sp,-32
20404e6e:	ce22                	sw	s0,28(sp)
20404e70:	1000                	addi	s0,sp,32
20404e72:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:625
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404e76:	fec42703          	lw	a4,-20(s0)
20404e7a:	800007b7          	lui	a5,0x80000
20404e7e:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404e82:	00f71563          	bne	a4,a5,20404e8c <__metal_driver_sifive_uart0_pinmux+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:626
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
20404e86:	81c18793          	addi	a5,gp,-2020 # 800007b4 <__metal_dt_gpio_10012000>
20404e8a:	a011                	j	20404e8e <__metal_driver_sifive_uart0_pinmux+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:629
	}
	else {
		return 0;
20404e8c:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:631
	}
}
20404e8e:	853e                	mv	a0,a5
20404e90:	4472                	lw	s0,28(sp)
20404e92:	6105                	addi	sp,sp,32
20404e94:	8082                	ret

20404e96 <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:634

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
20404e96:	1101                	addi	sp,sp,-32
20404e98:	ce22                	sw	s0,28(sp)
20404e9a:	1000                	addi	s0,sp,32
20404e9c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:635
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404ea0:	fec42703          	lw	a4,-20(s0)
20404ea4:	800007b7          	lui	a5,0x80000
20404ea8:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404eac:	00f71563          	bne	a4,a5,20404eb6 <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:636
		return 196608;
20404eb0:	000307b7          	lui	a5,0x30
20404eb4:	a011                	j	20404eb8 <__metal_driver_sifive_uart0_pinmux_output_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:639
	}
	else {
		return 0;
20404eb6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:641
	}
}
20404eb8:	853e                	mv	a0,a5
20404eba:	4472                	lw	s0,28(sp)
20404ebc:	6105                	addi	sp,sp,32
20404ebe:	8082                	ret

20404ec0 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:644

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
20404ec0:	1101                	addi	sp,sp,-32
20404ec2:	ce22                	sw	s0,28(sp)
20404ec4:	1000                	addi	s0,sp,32
20404ec6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:645
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20404eca:	fec42703          	lw	a4,-20(s0)
20404ece:	800007b7          	lui	a5,0x80000
20404ed2:	77878793          	addi	a5,a5,1912 # 80000778 <metal_segment_heap_target_end+0xfffff2cc>
20404ed6:	00f71563          	bne	a4,a5,20404ee0 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:646
		return 196608;
20404eda:	000307b7          	lui	a5,0x30
20404ede:	a011                	j	20404ee2 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:649
	}
	else {
		return 0;
20404ee0:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:651
	}
}
20404ee2:	853e                	mv	a0,a5
20404ee4:	4472                	lw	s0,28(sp)
20404ee6:	6105                	addi	sp,sp,32
20404ee8:	8082                	ret

20404eea <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:32
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20404eea:	1101                	addi	sp,sp,-32
20404eec:	ce06                	sw	ra,28(sp)
20404eee:	cc22                	sw	s0,24(sp)
20404ef0:	1000                	addi	s0,sp,32
20404ef2:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:33
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
20404ef6:	fec42503          	lw	a0,-20(s0)
20404efa:	35fd                	jal	20404de8 <__metal_driver_sifive_uart0_interrupt_parent>
20404efc:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:34
}
20404efe:	853e                	mv	a0,a5
20404f00:	40f2                	lw	ra,28(sp)
20404f02:	4462                	lw	s0,24(sp)
20404f04:	6105                	addi	sp,sp,32
20404f06:	8082                	ret

20404f08 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20404f08:	1101                	addi	sp,sp,-32
20404f0a:	ce06                	sw	ra,28(sp)
20404f0c:	cc22                	sw	s0,24(sp)
20404f0e:	1000                	addi	s0,sp,32
20404f10:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return (__metal_driver_sifive_uart0_interrupt_line(uart) + METAL_INTERRUPT_ID_GL0);
20404f14:	fec42503          	lw	a0,-20(s0)
20404f18:	3dfd                	jal	20404e16 <__metal_driver_sifive_uart0_interrupt_line>
20404f1a:	87aa                	mv	a5,a0
20404f1c:	02078793          	addi	a5,a5,32 # 30020 <__heap_size+0x2f820>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20404f20:	853e                	mv	a0,a5
20404f22:	40f2                	lw	ra,28(sp)
20404f24:	4462                	lw	s0,24(sp)
20404f26:	6105                	addi	sp,sp,32
20404f28:	8082                	ret

20404f2a <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43


int __metal_driver_sifive_uart0_txready(struct metal_uart *uart)
{
20404f2a:	7179                	addi	sp,sp,-48
20404f2c:	d606                	sw	ra,44(sp)
20404f2e:	d422                	sw	s0,40(sp)
20404f30:	1800                	addi	s0,sp,48
20404f32:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:44
  long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404f36:	fdc42503          	lw	a0,-36(s0)
20404f3a:	3551                	jal	20404dbe <__metal_driver_sifive_uart0_control_base>
20404f3c:	87aa                	mv	a5,a0
20404f3e:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46

  return !((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20404f42:	fec42783          	lw	a5,-20(s0)
20404f46:	439c                	lw	a5,0(a5)
20404f48:	fff7c793          	not	a5,a5
20404f4c:	83fd                	srli	a5,a5,0x1f
20404f4e:	0ff7f793          	andi	a5,a5,255
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:47
}
20404f52:	853e                	mv	a0,a5
20404f54:	50b2                	lw	ra,44(sp)
20404f56:	5422                	lw	s0,40(sp)
20404f58:	6145                	addi	sp,sp,48
20404f5a:	8082                	ret

20404f5c <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:51


int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c)
{
20404f5c:	7179                	addi	sp,sp,-48
20404f5e:	d606                	sw	ra,44(sp)
20404f60:	d422                	sw	s0,40(sp)
20404f62:	1800                	addi	s0,sp,48
20404f64:	fca42e23          	sw	a0,-36(s0)
20404f68:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404f6c:	fdc42503          	lw	a0,-36(s0)
20404f70:	e4fff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_control_base>
20404f74:	87aa                	mv	a5,a0
20404f76:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54

    while (!__metal_driver_sifive_uart0_txready(uart)) {
20404f7a:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:54 (discriminator 1)
20404f7c:	fdc42503          	lw	a0,-36(s0)
20404f80:	376d                	jal	20404f2a <__metal_driver_sifive_uart0_txready>
20404f82:	87aa                	mv	a5,a0
20404f84:	dfe5                	beqz	a5,20404f7c <__metal_driver_sifive_uart0_putc+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
		/* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20404f86:	fec42783          	lw	a5,-20(s0)
20404f8a:	fd842703          	lw	a4,-40(s0)
20404f8e:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:58
    return 0;
20404f90:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59
}
20404f92:	853e                	mv	a0,a5
20404f94:	50b2                	lw	ra,44(sp)
20404f96:	5422                	lw	s0,40(sp)
20404f98:	6145                	addi	sp,sp,48
20404f9a:	8082                	ret

20404f9c <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63


int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c)
{
20404f9c:	7179                	addi	sp,sp,-48
20404f9e:	d606                	sw	ra,44(sp)
20404fa0:	d422                	sw	s0,40(sp)
20404fa2:	1800                	addi	s0,sp,48
20404fa4:	fca42e23          	sw	a0,-36(s0)
20404fa8:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:65
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20404fac:	fdc42503          	lw	a0,-36(s0)
20404fb0:	e0fff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_control_base>
20404fb4:	87aa                	mv	a5,a0
20404fb6:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);;
20404fba:	fec42783          	lw	a5,-20(s0)
20404fbe:	0791                	addi	a5,a5,4
20404fc0:	439c                	lw	a5,0(a5)
20404fc2:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:68
    if( ch & UART_RXEMPTY ){
20404fc6:	fe842783          	lw	a5,-24(s0)
20404fca:	0007d763          	bgez	a5,20404fd8 <__metal_driver_sifive_uart0_getc+0x3c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69
      *c = -1; /* aka: EOF in most of the world */
20404fce:	fd842783          	lw	a5,-40(s0)
20404fd2:	577d                	li	a4,-1
20404fd4:	c398                	sw	a4,0(a5)
20404fd6:	a801                	j	20404fe6 <__metal_driver_sifive_uart0_getc+0x4a>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
    } else {
      *c = ch & 0x0ff;
20404fd8:	fe842783          	lw	a5,-24(s0)
20404fdc:	0ff7f713          	andi	a4,a5,255
20404fe0:	fd842783          	lw	a5,-40(s0)
20404fe4:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73
    }
    return 0;
20404fe6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
}
20404fe8:	853e                	mv	a0,a5
20404fea:	50b2                	lw	ra,44(sp)
20404fec:	5422                	lw	s0,40(sp)
20404fee:	6145                	addi	sp,sp,48
20404ff0:	8082                	ret

20404ff2 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:78


int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20404ff2:	7179                	addi	sp,sp,-48
20404ff4:	d622                	sw	s0,44(sp)
20404ff6:	1800                	addi	s0,sp,48
20404ff8:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:79
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20404ffc:	fdc42783          	lw	a5,-36(s0)
20405000:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80
    return uart->baud_rate;
20405004:	fec42783          	lw	a5,-20(s0)
20405008:	43dc                	lw	a5,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
}
2040500a:	853e                	mv	a0,a5
2040500c:	5432                	lw	s0,44(sp)
2040500e:	6145                	addi	sp,sp,48
20405010:	8082                	ret

20405012 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20405012:	7179                	addi	sp,sp,-48
20405014:	d606                	sw	ra,44(sp)
20405016:	d422                	sw	s0,40(sp)
20405018:	1800                	addi	s0,sp,48
2040501a:	fca42e23          	sw	a0,-36(s0)
2040501e:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405022:	fdc42783          	lw	a5,-36(s0)
20405026:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:86
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040502a:	fdc42503          	lw	a0,-36(s0)
2040502e:	d91ff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_control_base>
20405032:	87aa                	mv	a5,a0
20405034:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
20405038:	fdc42503          	lw	a0,-36(s0)
2040503c:	e03ff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_clock>
20405040:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:89

    uart->baud_rate = baud_rate;
20405044:	fd842703          	lw	a4,-40(s0)
20405048:	fec42783          	lw	a5,-20(s0)
2040504c:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91

    if (clock != NULL) {
2040504e:	fe442783          	lw	a5,-28(s0)
20405052:	cbb1                	beqz	a5,204050a6 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:92
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405054:	fe442783          	lw	a5,-28(s0)
20405058:	439c                	lw	a5,0(a5)
2040505a:	439c                	lw	a5,0(a5)
2040505c:	fe442503          	lw	a0,-28(s0)
20405060:	9782                	jalr	a5
20405062:	fea42023          	sw	a0,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:93
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405066:	fe042703          	lw	a4,-32(s0)
2040506a:	fd842783          	lw	a5,-40(s0)
2040506e:	02f747b3          	div	a5,a4,a5
20405072:	fff78713          	addi	a4,a5,-1
20405076:	fe842783          	lw	a5,-24(s0)
2040507a:	07e1                	addi	a5,a5,24
2040507c:	c398                	sw	a4,0(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
2040507e:	fe842783          	lw	a5,-24(s0)
20405082:	07a1                	addi	a5,a5,8
20405084:	439c                	lw	a5,0(a5)
20405086:	fe842703          	lw	a4,-24(s0)
2040508a:	0721                	addi	a4,a4,8
2040508c:	0017e793          	ori	a5,a5,1
20405090:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405092:	fe842783          	lw	a5,-24(s0)
20405096:	07b1                	addi	a5,a5,12
20405098:	439c                	lw	a5,0(a5)
2040509a:	fe842703          	lw	a4,-24(s0)
2040509e:	0731                	addi	a4,a4,12
204050a0:	0017e793          	ori	a5,a5,1
204050a4:	c31c                	sw	a5,0(a4)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97
    }
    return 0;
204050a6:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
}
204050a8:	853e                	mv	a0,a5
204050aa:	50b2                	lw	ra,44(sp)
204050ac:	5422                	lw	s0,40(sp)
204050ae:	6145                	addi	sp,sp,48
204050b0:	8082                	ret

204050b2 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

static void pre_rate_change_callback_func(void *priv)
{
204050b2:	7139                	addi	sp,sp,-64
204050b4:	de06                	sw	ra,60(sp)
204050b6:	dc22                	sw	s0,56(sp)
204050b8:	0080                	addi	s0,sp,64
204050ba:	fca42623          	sw	a0,-52(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    struct __metal_driver_sifive_uart0 *uart = priv;
204050be:	fcc42783          	lw	a5,-52(s0)
204050c2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:103
    long control_base = __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204050c6:	fcc42503          	lw	a0,-52(s0)
204050ca:	cf5ff0ef          	jal	ra,20404dbe <__metal_driver_sifive_uart0_control_base>
204050ce:	87aa                	mv	a5,a0
204050d0:	fef42423          	sw	a5,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204050d4:	fcc42503          	lw	a0,-52(s0)
204050d8:	d67ff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_clock>
204050dc:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:109

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204050e0:	fe842783          	lw	a5,-24(s0)
204050e4:	07a1                	addi	a5,a5,8
204050e6:	4398                	lw	a4,0(a5)
204050e8:	fe842783          	lw	a5,-24(s0)
204050ec:	07a1                	addi	a5,a5,8
204050ee:	86be                	mv	a3,a5
204050f0:	fff907b7          	lui	a5,0xfff90
204050f4:	17fd                	addi	a5,a5,-1
204050f6:	8ff9                	and	a5,a5,a4
204050f8:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204050fa:	fe842783          	lw	a5,-24(s0)
204050fe:	07a1                	addi	a5,a5,8
20405100:	4398                	lw	a4,0(a5)
20405102:	fe842783          	lw	a5,-24(s0)
20405106:	07a1                	addi	a5,a5,8
20405108:	86be                	mv	a3,a5
2040510a:	67c1                	lui	a5,0x10
2040510c:	8fd9                	or	a5,a5,a4
2040510e:	c29c                	sw	a5,0(a3)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112

    while((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0) ;
20405110:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:112 (discriminator 1)
20405112:	fe842783          	lw	a5,-24(s0)
20405116:	07d1                	addi	a5,a5,20
20405118:	439c                	lw	a5,0(a5)
2040511a:	8b85                	andi	a5,a5,1
2040511c:	dbfd                	beqz	a5,20405112 <pre_rate_change_callback_func+0x60>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
2040511e:	fe842783          	lw	a5,-24(s0)
20405122:	07a1                	addi	a5,a5,8
20405124:	439c                	lw	a5,0(a5)
20405126:	8b89                	andi	a5,a5,2
20405128:	c399                	beqz	a5,2040512e <pre_rate_change_callback_func+0x7c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 1)
2040512a:	47a5                	li	a5,9
2040512c:	a011                	j	20405130 <pre_rate_change_callback_func+0x7e>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 2)
2040512e:	47a9                	li	a5,10
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:118 (discriminator 4)
20405130:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119 (discriminator 4)
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405134:	fe442783          	lw	a5,-28(s0)
20405138:	439c                	lw	a5,0(a5)
2040513a:	439c                	lw	a5,0(a5)
2040513c:	fe442503          	lw	a0,-28(s0)
20405140:	9782                	jalr	a5
20405142:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:120 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405146:	fe042703          	lw	a4,-32(s0)
2040514a:	fdc42783          	lw	a5,-36(s0)
2040514e:	02f707b3          	mul	a5,a4,a5
20405152:	873e                	mv	a4,a5
20405154:	fec42783          	lw	a5,-20(s0)
20405158:	43dc                	lw	a5,4(a5)
2040515a:	02f757b3          	divu	a5,a4,a5
2040515e:	fcf42c23          	sw	a5,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20405162:	fc042a23          	sw	zero,-44(s0)
20405166:	a039                	j	20405174 <pre_rate_change_callback_func+0xc2>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123 (discriminator 3)
        __asm__("nop");
20405168:	0001                	nop
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
2040516a:	fd442783          	lw	a5,-44(s0)
2040516e:	0785                	addi	a5,a5,1
20405170:	fcf42a23          	sw	a5,-44(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:122 (discriminator 1)
20405174:	fd442783          	lw	a5,-44(s0)
20405178:	fd842703          	lw	a4,-40(s0)
2040517c:	fee7c6e3          	blt	a5,a4,20405168 <pre_rate_change_callback_func+0xb6>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
}
20405180:	0001                	nop
20405182:	50f2                	lw	ra,60(sp)
20405184:	5462                	lw	s0,56(sp)
20405186:	6121                	addi	sp,sp,64
20405188:	8082                	ret

2040518a <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:127

static void post_rate_change_callback_func(void *priv)
{
2040518a:	7179                	addi	sp,sp,-48
2040518c:	d606                	sw	ra,44(sp)
2040518e:	d422                	sw	s0,40(sp)
20405190:	1800                	addi	s0,sp,48
20405192:	fca42e23          	sw	a0,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    struct __metal_driver_sifive_uart0 *uart = priv;
20405196:	fdc42783          	lw	a5,-36(s0)
2040519a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
2040519e:	fec42703          	lw	a4,-20(s0)
204051a2:	fec42783          	lw	a5,-20(s0)
204051a6:	43dc                	lw	a5,4(a5)
204051a8:	85be                	mv	a1,a5
204051aa:	853a                	mv	a0,a4
204051ac:	dc9fc0ef          	jal	ra,20401f74 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:130
}
204051b0:	0001                	nop
204051b2:	50b2                	lw	ra,44(sp)
204051b4:	5422                	lw	s0,40(sp)
204051b6:	6145                	addi	sp,sp,48
204051b8:	8082                	ret

204051ba <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
204051ba:	7139                	addi	sp,sp,-64
204051bc:	de06                	sw	ra,60(sp)
204051be:	dc22                	sw	s0,56(sp)
204051c0:	0080                	addi	s0,sp,64
204051c2:	fca42623          	sw	a0,-52(s0)
204051c6:	fcb42423          	sw	a1,-56(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
204051ca:	fcc42783          	lw	a5,-52(s0)
204051ce:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:135
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204051d2:	fcc42503          	lw	a0,-52(s0)
204051d6:	c69ff0ef          	jal	ra,20404e3e <__metal_driver_sifive_uart0_clock>
204051da:	fea42423          	sw	a0,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:136
    struct __metal_driver_sifive_gpio0 *pinmux = __metal_driver_sifive_uart0_pinmux(guart);
204051de:	fcc42503          	lw	a0,-52(s0)
204051e2:	c8bff0ef          	jal	ra,20404e6c <__metal_driver_sifive_uart0_pinmux>
204051e6:	fea42223          	sw	a0,-28(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138

    if(clock != NULL) {
204051ea:	fe842783          	lw	a5,-24(s0)
204051ee:	c7b9                	beqz	a5,2040523c <__metal_driver_sifive_uart0_init+0x82>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
        uart->pre_rate_change_callback.callback = &pre_rate_change_callback_func;
204051f0:	fec42783          	lw	a5,-20(s0)
204051f4:	20405737          	lui	a4,0x20405
204051f8:	0b270713          	addi	a4,a4,178 # 204050b2 <pre_rate_change_callback_func>
204051fc:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
        uart->pre_rate_change_callback.priv = guart;
204051fe:	fec42783          	lw	a5,-20(s0)
20405202:	fcc42703          	lw	a4,-52(s0)
20405206:	c7d8                	sw	a4,12(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:141
        metal_clock_register_pre_rate_change_callback(clock, &(uart->pre_rate_change_callback));
20405208:	fec42783          	lw	a5,-20(s0)
2040520c:	07a1                	addi	a5,a5,8
2040520e:	85be                	mv	a1,a5
20405210:	fe842503          	lw	a0,-24(s0)
20405214:	20f1                	jal	204052e0 <metal_clock_register_pre_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:143

        uart->post_rate_change_callback.callback = &post_rate_change_callback_func;
20405216:	fec42783          	lw	a5,-20(s0)
2040521a:	20405737          	lui	a4,0x20405
2040521e:	18a70713          	addi	a4,a4,394 # 2040518a <post_rate_change_callback_func>
20405222:	cbd8                	sw	a4,20(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144
        uart->post_rate_change_callback.priv = guart;
20405224:	fec42783          	lw	a5,-20(s0)
20405228:	fcc42703          	lw	a4,-52(s0)
2040522c:	cf98                	sw	a4,24(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        metal_clock_register_post_rate_change_callback(clock, &(uart->post_rate_change_callback));
2040522e:	fec42783          	lw	a5,-20(s0)
20405232:	07d1                	addi	a5,a5,20
20405234:	85be                	mv	a1,a5
20405236:	fe842503          	lw	a0,-24(s0)
2040523a:	28d9                	jal	20405310 <metal_clock_register_post_rate_change_callback>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
2040523c:	fec42783          	lw	a5,-20(s0)
20405240:	fc842583          	lw	a1,-56(s0)
20405244:	853e                	mv	a0,a5
20405246:	d2ffc0ef          	jal	ra,20401f74 <metal_uart_set_baud_rate>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150

    if (pinmux != NULL) {
2040524a:	fe442783          	lw	a5,-28(s0)
2040524e:	cb95                	beqz	a5,20405282 <__metal_driver_sifive_uart0_init+0xc8>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
        long pinmux_output_selector = __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405250:	fcc42503          	lw	a0,-52(s0)
20405254:	c43ff0ef          	jal	ra,20404e96 <__metal_driver_sifive_uart0_pinmux_output_selector>
20405258:	87aa                	mv	a5,a0
2040525a:	fef42023          	sw	a5,-32(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:152
        long pinmux_source_selector = __metal_driver_sifive_uart0_pinmux_source_selector(guart);
2040525e:	fcc42503          	lw	a0,-52(s0)
20405262:	c5fff0ef          	jal	ra,20404ec0 <__metal_driver_sifive_uart0_pinmux_source_selector>
20405266:	87aa                	mv	a5,a0
20405268:	fcf42e23          	sw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153
        pinmux->gpio.vtable->enable_io(
2040526c:	fe442783          	lw	a5,-28(s0)
20405270:	439c                	lw	a5,0(a5)
20405272:	53dc                	lw	a5,36(a5)
20405274:	fdc42603          	lw	a2,-36(s0)
20405278:	fe042583          	lw	a1,-32(s0)
2040527c:	fe442503          	lw	a0,-28(s0)
20405280:	9782                	jalr	a5
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:159
            (struct metal_gpio *) pinmux,
            pinmux_output_selector,
            pinmux_source_selector
        );
    }
}
20405282:	0001                	nop
20405284:	50f2                	lw	ra,60(sp)
20405286:	5462                	lw	s0,56(sp)
20405288:	6121                	addi	sp,sp,64
2040528a:	8082                	ret

2040528c <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:59
}

/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *_metal_clock_append_to_callbacks(metal_clock_callback *list, metal_clock_callback *const cb) {
2040528c:	7179                	addi	sp,sp,-48
2040528e:	d622                	sw	s0,44(sp)
20405290:	1800                	addi	s0,sp,48
20405292:	fca42e23          	sw	a0,-36(s0)
20405296:	fcb42c23          	sw	a1,-40(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:60
    cb->_next = NULL;
2040529a:	fd842783          	lw	a5,-40(s0)
2040529e:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:62

    if (!list) {
204052a2:	fdc42783          	lw	a5,-36(s0)
204052a6:	e781                	bnez	a5,204052ae <_metal_clock_append_to_callbacks+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:63
        return cb;
204052a8:	fd842783          	lw	a5,-40(s0)
204052ac:	a035                	j	204052d8 <_metal_clock_append_to_callbacks+0x4c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:66
    }

    metal_clock_callback *current = list;
204052ae:	fdc42783          	lw	a5,-36(s0)
204052b2:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68

    while ((current->_next) != NULL) {
204052b6:	a031                	j	204052c2 <_metal_clock_append_to_callbacks+0x36>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:69
        current = current->_next;
204052b8:	fec42783          	lw	a5,-20(s0)
204052bc:	479c                	lw	a5,8(a5)
204052be:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:68
    while ((current->_next) != NULL) {
204052c2:	fec42783          	lw	a5,-20(s0)
204052c6:	479c                	lw	a5,8(a5)
204052c8:	fbe5                	bnez	a5,204052b8 <_metal_clock_append_to_callbacks+0x2c>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:72
    }

    current->_next = cb;
204052ca:	fec42783          	lw	a5,-20(s0)
204052ce:	fd842703          	lw	a4,-40(s0)
204052d2:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:74

    return list;
204052d4:	fdc42783          	lw	a5,-36(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:75
}
204052d8:	853e                	mv	a0,a5
204052da:	5432                	lw	s0,44(sp)
204052dc:	6145                	addi	sp,sp,48
204052de:	8082                	ret

204052e0 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:139
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
204052e0:	1101                	addi	sp,sp,-32
204052e2:	ce06                	sw	ra,28(sp)
204052e4:	cc22                	sw	s0,24(sp)
204052e6:	1000                	addi	s0,sp,32
204052e8:	fea42623          	sw	a0,-20(s0)
204052ec:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:140
    clk->_pre_rate_change_callback = _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
204052f0:	fec42783          	lw	a5,-20(s0)
204052f4:	43dc                	lw	a5,4(a5)
204052f6:	fe842583          	lw	a1,-24(s0)
204052fa:	853e                	mv	a0,a5
204052fc:	3f41                	jal	2040528c <_metal_clock_append_to_callbacks>
204052fe:	872a                	mv	a4,a0
20405300:	fec42783          	lw	a5,-20(s0)
20405304:	c3d8                	sw	a4,4(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:141
}
20405306:	0001                	nop
20405308:	40f2                	lw	ra,28(sp)
2040530a:	4462                	lw	s0,24(sp)
2040530c:	6105                	addi	sp,sp,32
2040530e:	8082                	ret

20405310 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:150
 *
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_callback *cb)
{
20405310:	1101                	addi	sp,sp,-32
20405312:	ce06                	sw	ra,28(sp)
20405314:	cc22                	sw	s0,24(sp)
20405316:	1000                	addi	s0,sp,32
20405318:	fea42623          	sw	a0,-20(s0)
2040531c:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:151
    clk->_post_rate_change_callback = _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405320:	fec42783          	lw	a5,-20(s0)
20405324:	479c                	lw	a5,8(a5)
20405326:	fe842583          	lw	a1,-24(s0)
2040532a:	853e                	mv	a0,a5
2040532c:	3785                	jal	2040528c <_metal_clock_append_to_callbacks>
2040532e:	872a                	mv	a4,a0
20405330:	fec42783          	lw	a5,-20(s0)
20405334:	c798                	sw	a4,8(a5)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/clock.h:152
}
20405336:	0001                	nop
20405338:	40f2                	lw	ra,28(sp)
2040533a:	4462                	lw	s0,24(sp)
2040533c:	6105                	addi	sp,sp,32
2040533e:	8082                	ret

20405340 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/metal/cpu.h:208
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt* metal_cpu_interrupt_controller(struct metal_cpu *cpu)
{ return cpu->vtable->controller_interrupt(cpu); }
20405340:	1101                	addi	sp,sp,-32
20405342:	ce06                	sw	ra,28(sp)
20405344:	cc22                	sw	s0,24(sp)
20405346:	1000                	addi	s0,sp,32
20405348:	fea42623          	sw	a0,-20(s0)
2040534c:	fec42783          	lw	a5,-20(s0)
20405350:	439c                	lw	a5,0(a5)
20405352:	57dc                	lw	a5,44(a5)
20405354:	fec42503          	lw	a0,-20(s0)
20405358:	9782                	jalr	a5
2040535a:	87aa                	mv	a5,a0
2040535c:	853e                	mv	a0,a5
2040535e:	40f2                	lw	ra,28(sp)
20405360:	4462                	lw	s0,24(sp)
20405362:	6105                	addi	sp,sp,32
20405364:	8082                	ret

20405366 <metal_cpu_get>:
metal_cpu_get():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu* metal_cpu_get(unsigned int hartid)
{
20405366:	1101                	addi	sp,sp,-32
20405368:	ce22                	sw	s0,28(sp)
2040536a:	1000                	addi	s0,sp,32
2040536c:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:9
    if (hartid < __METAL_DT_MAX_HARTS) {
20405370:	fec42783          	lw	a5,-20(s0)
20405374:	eb89                	bnez	a5,20405386 <metal_cpu_get+0x20>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:10
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20405376:	fec42703          	lw	a4,-20(s0)
2040537a:	070a                	slli	a4,a4,0x2
2040537c:	80c18793          	addi	a5,gp,-2036 # 800007a4 <__metal_cpu_table>
20405380:	97ba                	add	a5,a5,a4
20405382:	439c                	lw	a5,0(a5)
20405384:	a011                	j	20405388 <metal_cpu_get+0x22>
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:12
    }   
    return NULL;
20405386:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:13
}
20405388:	853e                	mv	a0,a5
2040538a:	4472                	lw	s0,28(sp)
2040538c:	6105                	addi	sp,sp,32
2040538e:	8082                	ret

20405390 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:16

int metal_cpu_get_current_hartid()
{
20405390:	1101                	addi	sp,sp,-32
20405392:	ce22                	sw	s0,28(sp)
20405394:	1000                	addi	s0,sp,32
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:19
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r" (mhartid));
20405396:	f14027f3          	csrr	a5,mhartid
2040539a:	fef42623          	sw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:20
    return mhartid;
2040539e:	fec42783          	lw	a5,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/cpu.c:22
#endif
}
204053a2:	853e                	mv	a0,a5
204053a4:	4472                	lw	s0,28(sp)
204053a6:	6105                	addi	sp,sp,32
204053a8:	8082                	ret

204053aa <metal_shutdown>:
metal_shutdown():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message("There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code)
{
204053aa:	1101                	addi	sp,sp,-32
204053ac:	ce22                	sw	s0,28(sp)
204053ae:	1000                	addi	s0,sp,32
204053b0:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
204053b4:	0001                	nop
204053b6:	bffd                	j	204053b4 <metal_shutdown+0xa>
	...

20405400 <__metal_vector_table>:
IRQ_0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405400:	cd0fd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405404 <IRQ_1>:
IRQ_1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405404:	cccfd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405408 <IRQ_2>:
IRQ_2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405408:	cc8fd06f          	j	204028d0 <metal_interrupt_vector_handler>

2040540c <IRQ_3>:
IRQ_3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040540c:	cf2fd06f          	j	204028fe <metal_software_interrupt_vector_handler>

20405410 <IRQ_4>:
IRQ_4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405410:	cc0fd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405414 <IRQ_5>:
IRQ_5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405414:	cbcfd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405418 <IRQ_6>:
IRQ_6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405418:	cb8fd06f          	j	204028d0 <metal_interrupt_vector_handler>

2040541c <IRQ_7>:
IRQ_7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040541c:	dd4fd06f          	j	204029f0 <metal_timer_interrupt_vector_handler>

20405420 <IRQ_8>:
IRQ_8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20405420:	cb0fd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405424 <IRQ_9>:
IRQ_9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20405424:	cacfd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405428 <IRQ_10>:
IRQ_10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20405428:	ca8fd06f          	j	204028d0 <metal_interrupt_vector_handler>

2040542c <IRQ_11>:
IRQ_11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
2040542c:	ca4fd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405430 <IRQ_12>:
IRQ_12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20405430:	ca0fd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405434 <IRQ_13>:
IRQ_13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20405434:	c9cfd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405438 <IRQ_14>:
IRQ_14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20405438:	c98fd06f          	j	204028d0 <metal_interrupt_vector_handler>

2040543c <IRQ_15>:
IRQ_15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
2040543c:	c94fd06f          	j	204028d0 <metal_interrupt_vector_handler>

20405440 <IRQ_LC0>:
IRQ_LC0():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20405440:	837fd06f          	j	20402c76 <metal_lc0_interrupt_vector_handler>

20405444 <IRQ_LC1>:
IRQ_LC1():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20405444:	8c5fd06f          	j	20402d08 <metal_lc1_interrupt_vector_handler>

20405448 <IRQ_LC2>:
IRQ_LC2():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20405448:	953fd06f          	j	20402d9a <metal_lc2_interrupt_vector_handler>

2040544c <IRQ_LC3>:
IRQ_LC3():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
2040544c:	9e1fd06f          	j	20402e2c <metal_lc3_interrupt_vector_handler>

20405450 <IRQ_LC4>:
IRQ_LC4():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20405450:	a6ffd06f          	j	20402ebe <metal_lc4_interrupt_vector_handler>

20405454 <IRQ_LC5>:
IRQ_LC5():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20405454:	afdfd06f          	j	20402f50 <metal_lc5_interrupt_vector_handler>

20405458 <IRQ_LC6>:
IRQ_LC6():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20405458:	b8bfd06f          	j	20402fe2 <metal_lc6_interrupt_vector_handler>

2040545c <IRQ_LC7>:
IRQ_LC7():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
2040545c:	c19fd06f          	j	20403074 <metal_lc7_interrupt_vector_handler>

20405460 <IRQ_LC8>:
IRQ_LC8():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20405460:	ca7fd06f          	j	20403106 <metal_lc8_interrupt_vector_handler>

20405464 <IRQ_LC9>:
IRQ_LC9():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20405464:	d35fd06f          	j	20403198 <metal_lc9_interrupt_vector_handler>

20405468 <IRQ_LC10>:
IRQ_LC10():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20405468:	dc3fd06f          	j	2040322a <metal_lc10_interrupt_vector_handler>

2040546c <IRQ_LC11>:
IRQ_LC11():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
2040546c:	e51fd06f          	j	204032bc <metal_lc11_interrupt_vector_handler>

20405470 <IRQ_LC12>:
IRQ_LC12():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20405470:	edffd06f          	j	2040334e <metal_lc12_interrupt_vector_handler>

20405474 <IRQ_LC13>:
IRQ_LC13():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20405474:	f6dfd06f          	j	204033e0 <metal_lc13_interrupt_vector_handler>

20405478 <IRQ_LC14>:
IRQ_LC14():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20405478:	ffbfd06f          	j	20403472 <metal_lc14_interrupt_vector_handler>

2040547c <IRQ_LC15>:
IRQ_LC15():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
2040547c:	888fe06f          	j	20403504 <metal_lc15_interrupt_vector_handler>

20405480 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:120
{
20405480:	1101                	addi	sp,sp,-32
20405482:	ce22                	sw	s0,28(sp)
20405484:	1000                	addi	s0,sp,32
20405486:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:121
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040548a:	fec42703          	lw	a4,-20(s0)
2040548e:	800007b7          	lui	a5,0x80000
20405492:	0b078793          	addi	a5,a5,176 # 800000b0 <metal_segment_heap_target_end+0xffffec04>
20405496:	00f71763          	bne	a4,a5,204054a4 <__metal_driver_fixed_clock_rate+0x24>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:122
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040549a:	03dfd7b7          	lui	a5,0x3dfd
2040549e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
204054a2:	a011                	j	204054a6 <__metal_driver_fixed_clock_rate+0x26>
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:125
		return 0;
204054a4:	4781                	li	a5,0
/home/albertojor/GitHub/freedom-e-sdk/bsp/freedom-e310-arty-xmem/build/debug/./metal/machine.h:127
}
204054a6:	853e                	mv	a0,a5
204054a8:	4472                	lw	s0,28(sp)
204054aa:	6105                	addi	sp,sp,32
204054ac:	8082                	ret

204054ae <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
#include <metal/drivers/fixed-clock.h>
#include <stddef.h>
#include <metal/machine.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
204054ae:	1101                	addi	sp,sp,-32
204054b0:	ce06                	sw	ra,28(sp)
204054b2:	cc22                	sw	s0,24(sp)
204054b4:	1000                	addi	s0,sp,32
204054b6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
204054ba:	fec42503          	lw	a0,-20(s0)
204054be:	37c9                	jal	20405480 <__metal_driver_fixed_clock_rate>
204054c0:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:15
}
204054c2:	853e                	mv	a0,a5
204054c4:	40f2                	lw	ra,28(sp)
204054c6:	4462                	lw	s0,24(sp)
204054c8:	6105                	addi	sp,sp,32
204054ca:	8082                	ret

204054cc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
204054cc:	1101                	addi	sp,sp,-32
204054ce:	ce06                	sw	ra,28(sp)
204054d0:	cc22                	sw	s0,24(sp)
204054d2:	1000                	addi	s0,sp,32
204054d4:	fea42623          	sw	a0,-20(s0)
204054d8:	feb42423          	sw	a1,-24(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
204054dc:	fec42503          	lw	a0,-20(s0)
204054e0:	37f9                	jal	204054ae <__metal_driver_fixed_clock_get_rate_hz>
204054e2:	87aa                	mv	a5,a0
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:20
}
204054e4:	853e                	mv	a0,a5
204054e6:	40f2                	lw	ra,28(sp)
204054e8:	4462                	lw	s0,24(sp)
204054ea:	6105                	addi	sp,sp,32
204054ec:	8082                	ret

204054ee <_exit>:
_exit():
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
204054ee:	1101                	addi	sp,sp,-32
204054f0:	ce06                	sw	ra,28(sp)
204054f2:	cc22                	sw	s0,24(sp)
204054f4:	1000                	addi	s0,sp,32
204054f6:	fea42623          	sw	a0,-20(s0)
/home/albertojor/GitHub/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
204054fa:	fec42503          	lw	a0,-20(s0)
204054fe:	3575                	jal	204053aa <metal_shutdown>
